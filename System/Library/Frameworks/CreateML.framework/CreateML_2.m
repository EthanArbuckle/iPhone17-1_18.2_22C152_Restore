uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  if (a3 != a2)
  {
    v4 = *a4;
    v5 = *a4 + 8 * a3 - 8;
    while (2)
    {
      v6 = *(void *)(v4 + 8 * a3);
      v7 = result;
      v8 = (uint64_t *)v5;
      do
      {
        v9 = *v8;
        if (v6 >= *v8) {
          break;
        }
        if (!v4)
        {
          __break(1u);
          return result;
        }
        *v8 = v6;
        v8[1] = v9;
        --v8;
        ++v7;
      }
      while (a3 != v7);
      ++a3;
      v5 += 8;
      if (a3 != a2) {
        continue;
      }
      break;
    }
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 16 * a3;
    while (2)
    {
      v9 = (uint64_t *)(v7 + 16 * v4);
      result = *v9;
      v10 = v9[1];
      v11 = v6;
      v12 = (uint64_t *)v8;
      do
      {
        if (result == *(v12 - 2) && v10 == *(v12 - 1)) {
          break;
        }
        result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0) {
          break;
        }
        if (!v7)
        {
          __break(1u);
          return result;
        }
        result = *v12;
        v10 = v12[1];
        *(_OWORD *)v12 = *((_OWORD *)v12 - 1);
        *(v12 - 1) = v10;
        *(v12 - 2) = result;
        v12 -= 2;
        ++v11;
      }
      while (v4 != v11);
      ++v4;
      v8 += 16;
      if (v4 != a2) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(uint64_t *a1, uint64_t *a2, unint64_t a3, uint64_t *a4)
{
  v4 = a4;
  v6 = a2;
  v7 = a1;
  uint64_t v8 = (char *)a2 - (char *)a1;
  uint64_t v9 = a2 - a1;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 8;
  if (v9 >= v11)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, (uint64_t)(a3 - (void)a2) / 8, a4);
    v12 = &v4[v11];
    if (v7 >= v6 || v10 < 8) {
      goto LABEL_39;
    }
    v18 = (uint64_t *)(a3 - 8);
    while (1)
    {
      v19 = v18 + 1;
      uint64_t v20 = *(v6 - 1);
      if (*(v12 - 1) >= v20)
      {
        BOOL v22 = v19 != v12 || v18 >= v12;
        uint64_t v20 = *--v12;
        if (!v22) {
          goto LABEL_35;
        }
      }
      else
      {
        BOOL v21 = v19 != v6 || v18 >= v6;
        --v6;
        if (!v21) {
          goto LABEL_35;
        }
      }
      uint64_t *v18 = v20;
LABEL_35:
      --v18;
      if (v6 <= v7 || v12 <= v4) {
        goto LABEL_39;
      }
    }
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2 - a1, a4);
  v12 = &v4[v9];
  if ((unint64_t)v6 < a3 && v8 >= 8)
  {
    while (1)
    {
      uint64_t v14 = *v6;
      if (*v6 < *v4) {
        break;
      }
      uint64_t v14 = *v4;
      BOOL v15 = v7 == v4++;
      if (!v15) {
        goto LABEL_11;
      }
LABEL_12:
      ++v7;
      if (v4 >= v12 || (unint64_t)v6 >= a3) {
        goto LABEL_17;
      }
    }
    BOOL v15 = v7 == v6++;
    if (v15) {
      goto LABEL_12;
    }
LABEL_11:
    uint64_t *v7 = v14;
    goto LABEL_12;
  }
LABEL_17:
  v6 = v7;
LABEL_39:
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v4, v12 - v4, v6);
  return 1;
}

int64_t specialized _NativeSet.index(after:)(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  if (v5 + 1 < (unint64_t)(result + 63) >> 6)
  {
    unint64_t v10 = *(void *)(v6 + 8 * v9);
    if (v10) {
      return __clz(__rbit64(v10)) + (v9 << 6);
    }
    unint64_t v11 = (unint64_t)(result + 63) >> 6;
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v11)
    {
      unint64_t v10 = *(void *)(v6 + 8 * v9);
      if (v10) {
        return __clz(__rbit64(v10)) + (v9 << 6);
      }
      while (v5 + 3 < v11)
      {
        unint64_t v10 = *(void *)(a4 + 80 + 8 * v5++);
        if (v10)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v10)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t specialized _NativeSet.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  uint64_t v2 = 64;
  for (uint64_t i = 9; i - 7 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t outlined init with copy of DataFrame?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t OUTLINED_FUNCTION_4_35()
{
  return *(void *)(v0 - 272);
}

void OUTLINED_FUNCTION_5_30(uint64_t a1@<X8>)
{
  *(void *)(v1 + 56) = (a1 - 32) | 0x8000000000000000;
}

uint64_t OUTLINED_FUNCTION_6_27()
{
  return *(void *)(v0 - 232);
}

void OUTLINED_FUNCTION_13_25()
{
  *(void *)(v2 - 256) = v0 - v1;
}

void OUTLINED_FUNCTION_14_18()
{
  v0[2] = v1;
  v0[5] = v1;
  v0[6] = 0xD000000000000013;
}

uint64_t OUTLINED_FUNCTION_16_19()
{
  return v0;
}

void **assignWithCopy for MLRandomForestRegressor.ModelParameters.ValidationData(void **a1, void **a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of MLRandomForestRegressor.ModelParameters.ValidationData((uint64_t)a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v9 = type metadata accessor for DataFrame();
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        return a1;
      }
      unint64_t v7 = *a2;
      char v8 = *((unsigned char *)a2 + 8);
      outlined copy of Result<_DataTable, Error>(v7, v8);
      *a1 = v7;
      *((unsigned char *)a1 + 8) = v8;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata accessor for MLRandomForestRegressor.ModelParameters.ValidationData()
{
  uint64_t result = type metadata singleton initialization cache for MLRandomForestRegressor.ModelParameters.ValidationData;
  if (!type metadata singleton initialization cache for MLRandomForestRegressor.ModelParameters.ValidationData) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void *assignWithTake for MLRandomForestRegressor.ModelParameters.ValidationData(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of MLRandomForestRegressor.ModelParameters.ValidationData((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      uint64_t v6 = type metadata accessor for DataFrame();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for MLRandomForestRegressor.ModelParameters.ValidationData()
{
  uint64_t result = type metadata accessor for DataFrame();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t MLRandomForestRegressor.ModelParameters.ValidationData.generateDataFrames(trainingData:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v62 = a3;
  uint64_t v4 = v3;
  uint64_t v60 = a2;
  uint64_t v66 = a1;
  uint64_t v61 = type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_3_0();
  unint64_t v10 = (uint64_t *)(v9 - v8);
  type metadata accessor for DataFrame.Slice();
  OUTLINED_FUNCTION_0();
  uint64_t v58 = v12;
  uint64_t v59 = v11;
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_33();
  v57 = (char *)(v13 - v14);
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  v18 = (char *)&v56 - v17;
  MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v56 - v19;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame.Slice?);
  MEMORY[0x270FA5388](v21 - 8);
  OUTLINED_FUNCTION_33();
  uint64_t v24 = v22 - v23;
  MEMORY[0x270FA5388](v25);
  v27 = (char *)&v56 - v26;
  uint64_t v28 = type metadata accessor for MLRandomForestRegressor.ModelParameters.ValidationData();
  MEMORY[0x270FA5388](v28);
  OUTLINED_FUNCTION_3_0();
  v31 = (uint64_t *)(v30 - v29);
  outlined init with copy of MLRandomForestRegressor.ModelParameters.ValidationData(v4, v30 - v29);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v47 = *v31;
      char v48 = *((unsigned char *)v31 + 8);
      uint64_t v49 = v61;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v66, v62, v61);
      *(void *)&long long v63 = v47;
      BYTE8(v63) = v48;
      uint64_t v50 = v60;
      DataFrame.init(_:)((uint64_t)&v63, v60);
      uint64_t v43 = v50;
      uint64_t v44 = 0;
      uint64_t v46 = v49;
      goto LABEL_10;
    case 2u:
      v38 = *(void (**)(uint64_t, uint64_t *, uint64_t))(v6 + 32);
      v39 = v31;
      uint64_t v40 = v61;
      v38((uint64_t)v10, v39, v61);
      if (DataFrameProtocol.isEmpty.getter())
      {
        (*(void (**)(uint64_t *, uint64_t))(v6 + 8))(v10, v40);
        uint64_t v41 = OUTLINED_FUNCTION_1_3();
        v42(v41);
        uint64_t v43 = v60;
        uint64_t v44 = 1;
      }
      else
      {
        uint64_t v51 = OUTLINED_FUNCTION_1_3();
        v52(v51);
        uint64_t v53 = v60;
        v38(v60, v10, v40);
        uint64_t v43 = v53;
        uint64_t v44 = 0;
      }
      uint64_t v46 = v40;
      goto LABEL_10;
    case 3u:
      uint64_t v45 = v61;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v66, v62, v61);
      uint64_t v43 = v60;
      uint64_t v44 = 1;
      uint64_t v46 = v45;
LABEL_10:
      uint64_t result = __swift_storeEnumTagSinglePayload(v43, v44, 1, v46);
      break;
    default:
      char v32 = *((unsigned char *)v31 + 16);
      char v33 = *((unsigned char *)v31 + 17);
      long long v63 = *(_OWORD *)v31;
      char v64 = v32;
      char v65 = v33;
      DataFrame.randomSplit(strategy:)((uint64_t)v27, (uint64_t)v20, (uint64_t)&v63);
      uint64_t v35 = v58;
      uint64_t v34 = v59;
      v36 = *(void (**)(char *, char *, uint64_t))(v58 + 16);
      v36(v18, v20, v59);
      DataFrame.init(_:)();
      outlined init with copy of DataFrame.Slice?((uint64_t)v27, v24);
      if (__swift_getEnumTagSinglePayload(v24, 1, v34) == 1)
      {
        __swift_storeEnumTagSinglePayload(v60, 1, 1, v61);
        v37 = *(void (**)(char *, uint64_t))(v35 + 8);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v35 + 32))(v18, v24, v34);
        v36(v57, v18, v34);
        uint64_t v55 = v60;
        DataFrame.init(_:)();
        v37 = *(void (**)(char *, uint64_t))(v35 + 8);
        v37(v18, v34);
        __swift_storeEnumTagSinglePayload(v55, 0, 1, v61);
      }
      v37(v20, v34);
      uint64_t result = outlined destroy of DataFrame.Slice?((uint64_t)v27);
      break;
  }
  return result;
}

uint64_t MLRandomForestRegressor.ModelParameters.ValidationData.table.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_33();
  uint64_t v10 = v8 - v9;
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v26 - v12;
  uint64_t v14 = type metadata accessor for MLRandomForestRegressor.ModelParameters.ValidationData();
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_3_0();
  uint64_t v17 = (uint64_t *)(v16 - v15);
  outlined init with copy of MLRandomForestRegressor.ModelParameters.ValidationData(v2, v16 - v15);
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 1:
      uint64_t v19 = *v17;
      char v20 = *((unsigned char *)v17 + 8);
      goto LABEL_7;
    case 2:
      (*(void (**)(char *, uint64_t *, uint64_t))(v6 + 32))(v13, v17, v4);
      (*(void (**)(uint64_t, char *, uint64_t))(v6 + 16))(v10, v13, v4);
      MLDataTable.init(_:convertArraysToShapedArrays:)(1, (uint64_t)&v27);
      uint64_t v24 = OUTLINED_FUNCTION_4_1();
      uint64_t result = v25(v24);
      uint64_t v19 = v27;
      char v20 = v28;
LABEL_7:
      *(void *)a1 = v19;
      *(unsigned char *)(a1 + 8) = v20;
      break;
    case 3:
      uint64_t v21 = MEMORY[0x22A6764B0](0);
      if (!v21)
      {
        __break(1u);
        JUMPOUT(0x22715CF78);
      }
      uint64_t v22 = v21;
      type metadata accessor for CMLTable();
      uint64_t v23 = swift_allocObject();
      *(void *)(v23 + 16) = v22;
      type metadata accessor for _DataTable();
      swift_allocObject();
      uint64_t result = (uint64_t)_DataTable.init(impl:)(v23);
      *(void *)a1 = result;
      *(unsigned char *)(a1 + 8) = 0;
      break;
    default:
      *(void *)a1 = 0;
      *(unsigned char *)(a1 + 8) = -1;
      break;
  }
  return result;
}

uint64_t specialized Sequence.first(where:)(uint64_t (*a1)(uint64_t *), uint64_t a2, unint64_t a3)
{
  if (a3 >> 62) {
    goto LABEL_16;
  }
  uint64_t v6 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v7 = 4;
    while (1)
    {
      if ((a3 & 0xC000000000000001) != 0)
      {
        uint64_t v8 = MEMORY[0x22A6753B0](v7 - 4, a3);
      }
      else
      {
        uint64_t v8 = *(void *)(a3 + 8 * v7);
        swift_retain();
      }
      uint64_t v9 = v7 - 3;
      if (__OFADD__(v7 - 4, 1)) {
        break;
      }
      uint64_t v12 = v8;
      char v10 = a1(&v12);
      if (v3)
      {
        swift_bridgeObjectRelease();
        swift_release();
        return v8;
      }
      if (v10)
      {
        swift_bridgeObjectRelease();
        return v8;
      }
      swift_release();
      ++v7;
      if (v9 == v6) {
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
  }
LABEL_11:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized LazyMapSequence.Iterator.next()()
{
  void (*v13)(uint64_t *__return_ptr, void *);
  uint64_t result;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  int64_t v20;
  uint64_t v21;
  void v22[4];

  uint64_t v1 = *v0;
  int64_t v3 = v0[3];
  unint64_t v2 = v0[4];
  int64_t v4 = v3;
  if (v2)
  {
    uint64_t v5 = (v2 - 1) & v2;
    unint64_t v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    uint64_t v7 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v6);
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    char v10 = (uint64_t *)(*(void *)(v1 + 56) + 16 * v6);
    uint64_t v11 = *v10;
    uint64_t v12 = v10[1];
    v0[3] = v4;
    v0[4] = v5;
    uint64_t v13 = (void (*)(uint64_t *__return_ptr, void *))v0[5];
    v22[0] = v8;
    v22[1] = v9;
    v22[2] = v11;
    v22[3] = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(&v21, v22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v21;
  }
  uint64_t v15 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v16 = (unint64_t)(v0[2] + 64) >> 6;
    if (v15 < v16)
    {
      uint64_t v17 = v0[1];
      v18 = *(void *)(v17 + 8 * v15);
      if (v18)
      {
LABEL_7:
        uint64_t v5 = (v18 - 1) & v18;
        unint64_t v6 = __clz(__rbit64(v18)) + (v15 << 6);
        int64_t v4 = v15;
        goto LABEL_3;
      }
      uint64_t v19 = v3 + 2;
      int64_t v4 = v3 + 1;
      if (v3 + 2 < v16)
      {
        v18 = *(void *)(v17 + 8 * v19);
        if (v18)
        {
LABEL_10:
          uint64_t v15 = v19;
          goto LABEL_7;
        }
        int64_t v4 = v3 + 2;
        if (v3 + 3 < v16)
        {
          v18 = *(void *)(v17 + 8 * (v3 + 3));
          if (v18)
          {
            uint64_t v15 = v3 + 3;
            goto LABEL_7;
          }
          uint64_t v19 = v3 + 4;
          int64_t v4 = v3 + 3;
          if (v3 + 4 < v16)
          {
            v18 = *(void *)(v17 + 8 * v19);
            if (v18) {
              goto LABEL_10;
            }
            uint64_t v15 = v3 + 5;
            int64_t v4 = v3 + 4;
            if (v3 + 5 < v16)
            {
              v18 = *(void *)(v17 + 8 * v15);
              if (v18) {
                goto LABEL_7;
              }
              int64_t v4 = v16 - 1;
              char v20 = v3 + 6;
              while (v20 < v16)
              {
                v18 = *(void *)(v17 + 8 * v20++);
                if (v18)
                {
                  uint64_t v15 = v20 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    uint64_t result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t *__return_ptr, void *);
  uint64_t result;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  void v20[3];

  uint64_t v1 = *v0;
  int64_t v3 = v0[3];
  unint64_t v2 = v0[4];
  int64_t v4 = v3;
  if (v2)
  {
    uint64_t v5 = (v2 - 1) & v2;
    unint64_t v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    uint64_t v7 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v6);
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    char v10 = *(void *)(*(void *)(v1 + 56) + 8 * v6);
    v0[3] = v4;
    v0[4] = v5;
    uint64_t v11 = (void (*)(uint64_t *__return_ptr, void *))v0[5];
    v20[0] = v8;
    v20[1] = v9;
    v20[2] = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(&v19, v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v19;
  }
  uint64_t v13 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v14 = (unint64_t)(v0[2] + 64) >> 6;
    if (v13 < v14)
    {
      uint64_t v15 = v0[1];
      uint64_t v16 = *(void *)(v15 + 8 * v13);
      if (v16)
      {
LABEL_7:
        uint64_t v5 = (v16 - 1) & v16;
        unint64_t v6 = __clz(__rbit64(v16)) + (v13 << 6);
        int64_t v4 = v13;
        goto LABEL_3;
      }
      uint64_t v17 = v3 + 2;
      int64_t v4 = v3 + 1;
      if (v3 + 2 < v14)
      {
        uint64_t v16 = *(void *)(v15 + 8 * v17);
        if (v16)
        {
LABEL_10:
          uint64_t v13 = v17;
          goto LABEL_7;
        }
        int64_t v4 = v3 + 2;
        if (v3 + 3 < v14)
        {
          uint64_t v16 = *(void *)(v15 + 8 * (v3 + 3));
          if (v16)
          {
            uint64_t v13 = v3 + 3;
            goto LABEL_7;
          }
          uint64_t v17 = v3 + 4;
          int64_t v4 = v3 + 3;
          if (v3 + 4 < v14)
          {
            uint64_t v16 = *(void *)(v15 + 8 * v17);
            if (v16) {
              goto LABEL_10;
            }
            uint64_t v13 = v3 + 5;
            int64_t v4 = v3 + 4;
            if (v3 + 5 < v14)
            {
              uint64_t v16 = *(void *)(v15 + 8 * v13);
              if (v16) {
                goto LABEL_7;
              }
              int64_t v4 = v14 - 1;
              v18 = v3 + 6;
              while (v18 < v14)
              {
                uint64_t v16 = *(void *)(v15 + 8 * v18++);
                if (v16)
                {
                  uint64_t v13 = v18 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    uint64_t result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

uint64_t specialized LazyMapSequence.Iterator.next()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  int64_t v5 = v1[3];
  int64_t v7 = v5;
  unint64_t v8 = v1[4];
  if (v8)
  {
    uint64_t v9 = (v8 - 1) & v8;
    unint64_t v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    char v11 = *(unsigned char *)(*(void *)(v3 + 48) + v10);
    outlined init with copy of Any(*(void *)(v3 + 56) + 32 * v10, (uint64_t)v23 + 8);
    LOBYTE(v23[0]) = v11;
    goto LABEL_23;
  }
  int64_t v12 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  int64_t v13 = (unint64_t)(v6 + 64) >> 6;
  if (v12 < v13)
  {
    unint64_t v14 = *(void *)(v4 + 8 * v12);
    if (v14)
    {
LABEL_7:
      uint64_t v9 = (v14 - 1) & v14;
      unint64_t v10 = __clz(__rbit64(v14)) + (v12 << 6);
      int64_t v7 = v12;
      goto LABEL_3;
    }
    int64_t v15 = v5 + 2;
    int64_t v7 = v5 + 1;
    if (v5 + 2 < v13)
    {
      unint64_t v14 = *(void *)(v4 + 8 * v15);
      if (v14)
      {
LABEL_10:
        int64_t v12 = v15;
        goto LABEL_7;
      }
      int64_t v7 = v5 + 2;
      if (v5 + 3 < v13)
      {
        unint64_t v14 = *(void *)(v4 + 8 * (v5 + 3));
        if (v14)
        {
          int64_t v12 = v5 + 3;
          goto LABEL_7;
        }
        int64_t v15 = v5 + 4;
        int64_t v7 = v5 + 3;
        if (v5 + 4 < v13)
        {
          unint64_t v14 = *(void *)(v4 + 8 * v15);
          if (v14) {
            goto LABEL_10;
          }
          int64_t v12 = v5 + 5;
          int64_t v7 = v5 + 4;
          if (v5 + 5 < v13)
          {
            unint64_t v14 = *(void *)(v4 + 8 * v12);
            if (v14) {
              goto LABEL_7;
            }
            int64_t v7 = v13 - 1;
            int64_t v16 = v5 + 6;
            while (v16 < v13)
            {
              unint64_t v14 = *(void *)(v4 + 8 * v16++);
              if (v14)
              {
                int64_t v12 = v16 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v9 = 0;
  uint64_t v24 = 0;
  memset(v23, 0, sizeof(v23));
LABEL_23:
  *uint64_t v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  uint64_t v17 = (void (*)(_OWORD *))v1[5];
  uint64_t result = outlined init with take of (offset: Int, element: Layer)?((uint64_t)v23, (uint64_t)v21, &demangling cache variable for type metadata for (key: MLProgress.Metric, value: Any)?);
  if (v22)
  {
    v19[0] = v21[0];
    v19[1] = v21[1];
    uint64_t v20 = v22;
    v17(v19);
    return outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v19, &demangling cache variable for type metadata for (key: MLProgress.Metric, value: Any));
  }
  else
  {
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t specialized Conv2D.getStatesDictionary<A, B>(_:layerName:optimizer:parameterKeyPathLookup:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v160 = a5;
  uint64_t v158 = a4;
  v171._uint64_t countAndFlagsBits = a2;
  v171._object = a3;
  uint64_t v161 = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parameter?);
  MEMORY[0x270FA5388](v6 - 8);
  v150 = (char *)&v141 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v156 = type metadata accessor for Conv2D();
  uint64_t v155 = *(void *)(v156 - 8);
  MEMORY[0x270FA5388](v156);
  v154 = (char *)&v141 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v149 = type metadata accessor for MLHandActionClassifier.GraphCNNModel(0);
  uint64_t v9 = MEMORY[0x270FA5388](v149);
  uint64_t v143 = (uint64_t)&v141 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v153 = (uint64_t)&v141 - v11;
  uint64_t v166 = type metadata accessor for Parameter();
  uint64_t v168 = *(void *)(v166 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v166);
  v142 = (char *)&v141 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  v157 = (char *)&v141 - v15;
  MEMORY[0x270FA5388](v14);
  v152 = (char *)&v141 - v16;
  uint64_t v17 = type metadata accessor for TensorShape();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  v148 = (char *)&v141 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v141 - v22;
  MEMORY[0x270FA5388](v21);
  uint64_t v25 = (char *)&v141 - v24;
  uint64_t v162 = type metadata accessor for Tensor();
  uint64_t v26 = *(void *)(v162 - 8);
  uint64_t v27 = MEMORY[0x270FA5388](v162);
  v159 = (char *)&v141 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v27);
  uint64_t v30 = (char *)&v141 - v29;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [Double])>);
  uint64_t inited = swift_initStackObject();
  long long v167 = xmmword_2272CB4D0;
  *(_OWORD *)(inited + 16) = xmmword_2272CB4D0;
  v174._uint64_t countAndFlagsBits = a2;
  v174._object = v171._object;
  swift_bridgeObjectRetain();
  v32._uint64_t countAndFlagsBits = 0x7468676965772ELL;
  v32._object = (void *)0xE700000000000000;
  String.append(_:)(v32);
  object = v174._object;
  *(void *)(inited + 32) = v174._countAndFlagsBits;
  *(void *)(inited + 40) = object;
  Conv2D.weight.getter();
  Tensor.shape.getter();
  uint64_t v34 = TensorShape.contiguousSize.getter();
  uint64_t v35 = *(void (**)(void, void))(v18 + 8);
  v146 = v25;
  uint64_t v165 = v18 + 8;
  v164 = v35;
  v35(v25, v17);
  v173 = v30;
  v36 = v169;
  uint64_t v37 = specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(v34, (uint64_t (*)(void *, uint64_t *))closure #1 in Tensor.doubleArray()partial apply, (uint64_t)v172);
  v163 = v36;
  v38 = *(void (**)(void, void))(v26 + 8);
  v145 = v30;
  uint64_t v39 = v162;
  v38(v30, v162);
  *(void *)(inited + 48) = v37;
  Swift::String v174 = v171;
  swift_bridgeObjectRetain();
  v40._uint64_t countAndFlagsBits = 0x2E7468676965772ELL;
  v40._object = (void *)0xED00006570616873;
  String.append(_:)(v40);
  uint64_t v41 = v174._object;
  *(void *)(inited + 56) = v174._countAndFlagsBits;
  *(void *)(inited + 64) = v41;
  uint64_t v151 = inited;
  v42 = v159;
  Conv2D.weight.getter();
  Tensor.shape.getter();
  uint64_t v147 = v26 + 8;
  v144 = v38;
  v38(v42, v39);
  uint64_t v43 = lazy protocol witness table accessor for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel((unint64_t *)&lazy protocol witness table cache variable for type TensorShape and conformance TensorShape, MEMORY[0x263F58358]);
  uint64_t v44 = dispatch thunk of Collection.count.getter();
  uint64_t v45 = MEMORY[0x263F8EE78];
  v169 = (uint64_t *)v17;
  v159 = (char *)v43;
  if (v44)
  {
    uint64_t v46 = v44;
    uint64_t v175 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v44 & ~(v44 >> 63), 0);
    uint64_t v45 = v175;
    dispatch thunk of Collection.startIndex.getter();
    if (v46 < 0)
    {
      __break(1u);
      goto LABEL_36;
    }
    do
    {
      uint64_t v47 = (void (*)(void, void))dispatch thunk of Collection.subscript.read();
      uint64_t v49 = *v48;
      v47(&v174, 0);
      uint64_t v175 = v45;
      unint64_t v51 = *(void *)(v45 + 16);
      unint64_t v50 = *(void *)(v45 + 24);
      if (v51 >= v50 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v50 > 1, v51 + 1, 1);
        uint64_t v45 = v175;
      }
      *(void *)(v45 + 16) = v51 + 1;
      *(double *)(v45 + 8 * v51 + 32) = (double)v49;
      dispatch thunk of Collection.formIndex(after:)();
      --v46;
    }
    while (v46);
  }
  uint64_t countAndFlagsBits = v171._countAndFlagsBits;
  v164(v23, v169);
  *(void *)(v151 + 72) = v45;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
  uint64_t v151 = Dictionary.init(dictionaryLiteral:)();
  uint64_t v53 = v160;
  uint64_t v54 = v156;
  if (v160)
  {
    uint64_t v55 = v152;
    uint64_t v56 = v170;
    MEMORY[0x22A6729C0]();
    uint64_t v57 = Parameter.id.getter();
    uint64_t v58 = v55;
    uint64_t v59 = v166;
    (*(void (**)(char *, uint64_t))(v168 + 8))(v58, v166);
    uint64_t v53 = specialized Dictionary.subscript.getter(v57, v53);
  }
  else
  {
    uint64_t v56 = v170;
    uint64_t v59 = v166;
  }
  uint64_t v60 = v153;
  outlined init with copy of MLHandActionClassifier.GraphCNNModel(v161, v153);
  uint64_t v61 = v155;
  uint64_t v62 = v154;
  uint64_t v63 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v155 + 16))(v154, v56, v54);
  if (v53)
  {
    (*(void (**)(char *, uint64_t))(v61 + 8))(v62, v54);
    outlined destroy of MLHandActionClassifier.GraphCNNModel(v60);
    char v64 = v171._object;
    uint64_t v65 = countAndFlagsBits;
  }
  else
  {
    uint64_t v66 = v152;
    v67 = v62;
    uint64_t v68 = v60;
    MEMORY[0x22A6729C0](v63);
    lazy protocol witness table accessor for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
    unint64_t v69 = Layer.parameterKeyPaths(recursively:)();
    MEMORY[0x270FA5388](v69);
    *(&v141 - 2) = v68;
    *(&v141 - 1) = (uint64_t)v66;
    v70 = v163;
    uint64_t v53 = specialized Sequence.first(where:)((uint64_t (*)(uint64_t *))closure #1 in Layer.parameterKeyPath(for:)specialized partial apply, (uint64_t)(&v141 - 4), v69);
    v163 = v70;
    swift_bridgeObjectRelease();
    v71 = v66;
    uint64_t v59 = v166;
    (*(void (**)(char *, uint64_t))(v168 + 8))(v71, v166);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v67, v54);
    outlined destroy of MLHandActionClassifier.GraphCNNModel(v68);
    if (!v53)
    {
      swift_bridgeObjectRelease();
      v174._uint64_t countAndFlagsBits = 0;
      v174._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(58);
      v130._object = (void *)0x80000002272D7D10;
      v130._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
      String.append(_:)(v130);
      String.append(_:)(v171);
      v131._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
      v131._object = (void *)0x80000002272D7D70;
      String.append(_:)(v131);
      uint64_t v111 = v174._countAndFlagsBits;
      v132 = v174._object;
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError();
      *(void *)uint64_t v133 = v111;
      *(void *)(v133 + 8) = v132;
      *(_OWORD *)(v133 + 16) = 0u;
      *(_OWORD *)(v133 + 32) = 0u;
      *(unsigned char *)(v133 + 48) = 2;
      swift_willThrow();
      return v111;
    }
    uint64_t v65 = v171._countAndFlagsBits;
    char v64 = v171._object;
  }
  uint64_t v72 = v151;
  v174._uint64_t countAndFlagsBits = v65;
  v174._object = v64;
  swift_bridgeObjectRetain();
  v73._uint64_t countAndFlagsBits = 0x7468676965772ELL;
  v73._object = (void *)0xE700000000000000;
  String.append(_:)(v73);
  uint64_t v156 = v53;
  uint64_t v74 = specialized SGD.getStatesDictionary(for:name:)(v53, v174._countAndFlagsBits, (unint64_t)v174._object);
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v174._uint64_t countAndFlagsBits = v72;
  v76 = v163;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v74, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v174);
  if (v76) {
    goto LABEL_37;
  }
  v163 = 0;
  uint64_t v77 = v174._countAndFlagsBits;
  swift_bridgeObjectRelease();
  uint64_t v78 = (uint64_t)v150;
  Conv2D.$bias.getter();
  if (__swift_getEnumTagSinglePayload(v78, 1, v59) == 1)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v78, &demangling cache variable for type metadata for Parameter?);
LABEL_31:
    v174._uint64_t countAndFlagsBits = v65;
    v174._object = v64;
    swift_bridgeObjectRetain();
    v116._uint64_t countAndFlagsBits = 0x736564697274732ELL;
    v116._object = (void *)0xE800000000000000;
    String.append(_:)(v116);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
    uint64_t v117 = swift_allocObject();
    *(_OWORD *)(v117 + 16) = v167;
    *(double *)(v117 + 32) = (double)Conv2D.stride.getter();
    Conv2D.stride.getter();
    *(double *)(v117 + 40) = (double)v118;
    swift_isUniquelyReferenced_nonNull_native();
    v174._uint64_t countAndFlagsBits = v77;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
    uint64_t v119 = v174._countAndFlagsBits;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v174._uint64_t countAndFlagsBits = v65;
    v174._object = v64;
    swift_bridgeObjectRetain();
    v120._uint64_t countAndFlagsBits = 0x676E69646461702ELL;
    v120._object = (void *)0xE800000000000000;
    String.append(_:)(v120);
    uint64_t v121 = swift_allocObject();
    *(_OWORD *)(v121 + 16) = v167;
    *(double *)(v121 + 32) = (double)Conv2D.padding.getter();
    Conv2D.padding.getter();
    *(double *)(v121 + 40) = (double)v122;
    swift_isUniquelyReferenced_nonNull_native();
    v174._uint64_t countAndFlagsBits = v119;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
    uint64_t v123 = v174._countAndFlagsBits;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v174._uint64_t countAndFlagsBits = v65;
    v174._object = v64;
    swift_bridgeObjectRetain();
    v124._uint64_t countAndFlagsBits = 0x6F6974616C69642ELL;
    v124._object = (void *)0xEA0000000000736ELL;
    String.append(_:)(v124);
    uint64_t v125 = swift_allocObject();
    *(_OWORD *)(v125 + 16) = v167;
    *(double *)(v125 + 32) = (double)Conv2D.dilation.getter();
    Conv2D.dilation.getter();
    *(double *)(v125 + 40) = (double)v126;
    swift_isUniquelyReferenced_nonNull_native();
    v174._uint64_t countAndFlagsBits = v123;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
    uint64_t v127 = v174._countAndFlagsBits;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v174._uint64_t countAndFlagsBits = v65;
    v174._object = v64;
    swift_bridgeObjectRetain();
    v128._uint64_t countAndFlagsBits = 0x6F4370756F72672ELL;
    v128._object = (void *)0xEB00000000746E75;
    String.append(_:)(v128);
    uint64_t v129 = swift_allocObject();
    *(_OWORD *)(v129 + 16) = xmmword_2272CB370;
    *(double *)(v129 + 32) = (double)Conv2D.groupCount.getter();
    swift_isUniquelyReferenced_nonNull_native();
    v174._uint64_t countAndFlagsBits = v127;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
    uint64_t v111 = v174._countAndFlagsBits;
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v111;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v168 + 32))(v157, v78, v59);
  v174._uint64_t countAndFlagsBits = v65;
  v174._object = v64;
  swift_bridgeObjectRetain();
  v79._uint64_t countAndFlagsBits = 0x736169622ELL;
  v79._object = (void *)0xE500000000000000;
  String.append(_:)(v79);
  uint64_t v155 = v174._countAndFlagsBits;
  v80 = v145;
  MEMORY[0x22A672DE0]();
  v81 = v146;
  Tensor.shape.getter();
  uint64_t v82 = TensorShape.contiguousSize.getter();
  uint64_t v83 = ((uint64_t (*)(char *, uint64_t *))v164)(v81, v169);
  MEMORY[0x270FA5388](v83);
  *(&v141 - 2) = (uint64_t)v80;
  v84 = v163;
  specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(v82, (uint64_t (*)(void *, uint64_t *))closure #1 in Tensor.doubleArray()partial apply, (uint64_t)(&v141 - 4));
  v163 = v84;
  v144(v80, v162);
  swift_isUniquelyReferenced_nonNull_native();
  v174._uint64_t countAndFlagsBits = v77;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
  uint64_t v162 = v174._countAndFlagsBits;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v174._uint64_t countAndFlagsBits = v65;
  v174._object = v64;
  swift_bridgeObjectRetain();
  v85._uint64_t countAndFlagsBits = 0x68732E736169622ELL;
  v85._object = (void *)0xEB00000000657061;
  String.append(_:)(v85);
  v86 = v174._object;
  v154 = (char *)v174._countAndFlagsBits;
  v87 = v148;
  Parameter.shape.getter();
  uint64_t v88 = dispatch thunk of Collection.count.getter();
  uint64_t v155 = (uint64_t)v86;
  if (v88)
  {
    uint64_t v89 = v88;
    uint64_t v175 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v88 & ~(v88 >> 63), 0);
    uint64_t v90 = v175;
    dispatch thunk of Collection.startIndex.getter();
    if ((v89 & 0x8000000000000000) == 0)
    {
      do
      {
        v91 = (void (*)(void, void))dispatch thunk of Collection.subscript.read();
        uint64_t v93 = *v92;
        v91(&v174, 0);
        uint64_t v175 = v90;
        unint64_t v95 = *(void *)(v90 + 16);
        unint64_t v94 = *(void *)(v90 + 24);
        if (v95 >= v94 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v94 > 1, v95 + 1, 1);
          uint64_t v90 = v175;
        }
        *(void *)(v90 + 16) = v95 + 1;
        *(double *)(v90 + 8 * v95 + 32) = (double)v93;
        dispatch thunk of Collection.formIndex(after:)();
        --v89;
      }
      while (v89);
      char v64 = v171._object;
      goto LABEL_22;
    }
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
LABEL_22:
  uint64_t v65 = v171._countAndFlagsBits;
  v164(v87, v169);
  uint64_t v96 = v162;
  swift_isUniquelyReferenced_nonNull_native();
  v174._uint64_t countAndFlagsBits = v96;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
  uint64_t v97 = v174._countAndFlagsBits;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v98 = v157;
  uint64_t v99 = v160;
  if (v160)
  {
    uint64_t v100 = Parameter.id.getter();
    uint64_t v101 = specialized Dictionary.subscript.getter(v100, v99);
  }
  else
  {
    uint64_t v101 = 0;
  }
  uint64_t v102 = v168;
  uint64_t v103 = v143;
  outlined init with copy of MLHandActionClassifier.GraphCNNModel(v161, v143);
  v104 = v142;
  uint64_t v105 = v166;
  (*(void (**)(char *, char *, uint64_t))(v102 + 16))(v142, v98, v166);
  if (v101)
  {
    v106 = *(void (**)(void, void))(v102 + 8);
    v106(v104, v105);
    outlined destroy of MLHandActionClassifier.GraphCNNModel(v103);
  }
  else
  {
    lazy protocol witness table accessor for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
    v107 = v104;
    uint64_t v108 = v103;
    unint64_t v109 = Layer.parameterKeyPaths(recursively:)();
    v169 = &v141;
    MEMORY[0x270FA5388](v109);
    *(&v141 - 2) = v108;
    *(&v141 - 1) = (uint64_t)v107;
    v110 = v163;
    uint64_t v101 = specialized Sequence.first(where:)((uint64_t (*)(uint64_t *))closure #1 in Layer.parameterKeyPath(for:)specialized partial apply, (uint64_t)(&v141 - 4), v109);
    v163 = v110;
    swift_bridgeObjectRelease();
    uint64_t v111 = v102 + 8;
    v106 = *(void (**)(void, void))(v102 + 8);
    v106(v107, v105);
    outlined destroy of MLHandActionClassifier.GraphCNNModel(v108);
    if (!v101)
    {
      swift_bridgeObjectRelease();
      v174._uint64_t countAndFlagsBits = 0;
      v174._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(56);
      v134._object = (void *)0x80000002272D7D10;
      v134._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
      String.append(_:)(v134);
      v135._uint64_t countAndFlagsBits = v65;
      v135._object = v64;
      String.append(_:)(v135);
      v136._object = (void *)0x80000002272D7D90;
      v136._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
      String.append(_:)(v136);
      uint64_t v137 = v174._countAndFlagsBits;
      v138 = v174._object;
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError();
      *(void *)uint64_t v139 = v137;
      *(void *)(v139 + 8) = v138;
      *(_OWORD *)(v139 + 16) = 0u;
      *(_OWORD *)(v139 + 32) = 0u;
      *(unsigned char *)(v139 + 48) = 2;
      swift_willThrow();
      swift_release();
      v106(v157, v105);
      return v111;
    }
    v98 = v157;
  }
  v174._uint64_t countAndFlagsBits = v65;
  v174._object = v64;
  swift_bridgeObjectRetain();
  v112._uint64_t countAndFlagsBits = 0x736169622ELL;
  v112._object = (void *)0xE500000000000000;
  String.append(_:)(v112);
  uint64_t v113 = specialized SGD.getStatesDictionary(for:name:)(v101, v174._countAndFlagsBits, (unint64_t)v174._object);
  swift_bridgeObjectRelease();
  char v114 = swift_isUniquelyReferenced_nonNull_native();
  v174._uint64_t countAndFlagsBits = v97;
  v115 = v163;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v113, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v114, &v174);
  v163 = v115;
  if (!v115)
  {
    uint64_t v77 = v174._countAndFlagsBits;
    swift_release();
    swift_bridgeObjectRelease();
    v106(v98, v166);
    goto LABEL_31;
  }
LABEL_37:
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t specialized LSTM.getStatesDictionary<A, B>(_:layerName:optimizer:parameterKeyPathLookup:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  void (*v179)(uint64_t *__return_ptr, Swift::String *);
  uint64_t v180;
  uint64_t v181;
  int64_t v182;
  uint64_t v183;
  void (*v184)(char *, void *);
  void *v185;
  Swift::String v186;
  uint64_t v187;
  void *v188;
  uint64_t v189;
  void v190[2];
  uint64_t v191;
  int64_t v192;
  unint64_t v193;
  void (*v194)(uint64_t *__return_ptr, Swift::String *);
  uint64_t v195;
  void v196[2];
  void (**v197)(uint64_t, uint64_t);
  int64_t v198;
  unint64_t v199;
  void (*v200)(uint64_t *__return_ptr, Swift::String *);
  uint64_t v201;

  uint64_t v169 = a5;
  uint64_t v158 = a4;
  v171._object = a3;
  v171._uint64_t countAndFlagsBits = a2;
  uint64_t v159 = a1;
  uint64_t v144 = type metadata accessor for TensorShape();
  v182 = *(void *)(v144 - 8);
  MEMORY[0x270FA5388](v144);
  uint64_t v143 = (char *)v139 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Parameter();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)v139 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)v139 - v12;
  uint64_t v145 = type metadata accessor for MLHandActionClassifier.GraphCNNModel(0);
  uint64_t v14 = MEMORY[0x270FA5388](v145);
  unint64_t v153 = (unint64_t)v139 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)v139 - v16;
  uint64_t v168 = type metadata accessor for Tensor();
  uint64_t v18 = *(void *)(v168 - 8);
  MEMORY[0x270FA5388](v168);
  long long v167 = (char *)v139 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v173 = type metadata accessor for LayerState();
  v139[0] = *(void *)(v173 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v173);
  uint64_t v22 = (char *)v139 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  unint64_t isUniquelyReferenced_nonNull_native = (unint64_t)v139 - v23;
  v189 = MEMORY[0x263F8EE80];
  v139[1] = type metadata accessor for LSTM();
  uint64_t v160 = v5;
  uint64_t v25 = Layer.namedParameterKeyPaths(recursively:)();
  uint64_t v26 = *(void ***)(v25 + 16);
  unint64_t v176 = isUniquelyReferenced_nonNull_native;
  uint64_t v175 = v17;
  Swift::String v174 = v22;
  v150 = v26;
  uint64_t v140 = v18;
  if (!v26) {
    goto LABEL_52;
  }
  uint64_t v27 = 0;
  uint64_t v152 = v25 + 32;
  v157 = (void (**)(char *, unint64_t, uint64_t))(v18 + 8);
  uint64_t v151 = (void (**)(char *, char *, void *))(v8 + 16);
  uint64_t v28 = (char *)(v8 + 8);
  v142 = (void (**)(char *, uint64_t))(v182 + 8);
  long long v146 = xmmword_2272CB370;
  uint64_t v141 = (void *)0x80000002272D7DE0;
  uint64_t v148 = v7;
  uint64_t v156 = v13;
  uint64_t v29 = v11;
  uint64_t v147 = v11;
  uint64_t v166 = v28;
  uint64_t v30 = v13;
  v31 = (void *)v7;
  uint64_t v149 = v25;
  do
  {
    if ((unint64_t)v27 >= *(void *)(v25 + 16))
    {
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    v172 = v27;
    Swift::String v32 = (uint64_t *)(v152 + 24 * (void)v27);
    uint64_t v34 = *v32;
    char v33 = (void *)v32[1];
    uint64_t v35 = v32[2];
    swift_retain_n();
    swift_bridgeObjectRetain();
    swift_getAtKeyPath();
    uint64_t v36 = swift_release();
    uint64_t v37 = v30;
    uint64_t v38 = (uint64_t)v167;
    MEMORY[0x22A672DE0](v36);
    v170._uint64_t countAndFlagsBits = v34;
    v170._object = v33;
    Dictionary<>.updateValue(tensor:forKey:prefix:)(v38, v34, v33, v171._countAndFlagsBits, (uint64_t)v171._object);
    uint64_t v155 = *v157;
    ((void (*)(uint64_t, uint64_t))v155)(v38, v168);
    if (v169)
    {
      uint64_t v39 = Parameter.id.getter();
      uint64_t v40 = specialized Dictionary.subscript.getter(v39, v169);
    }
    else
    {
      uint64_t v40 = 0;
    }
    unint64_t v41 = v153;
    outlined init with copy of MLHandActionClassifier.GraphCNNModel(v159, v153);
    (*v151)(v29, v37, v31);
    uint64_t v165 = v35;
    if (v40)
    {
      v164 = *(void (**)(char *, void *))v166;
      v164(v29, v31);
      outlined destroy of MLHandActionClassifier.GraphCNNModel(v41);
    }
    else
    {
      lazy protocol witness table accessor for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
      unint64_t v42 = Layer.parameterKeyPaths(recursively:)();
      MEMORY[0x270FA5388](v42);
      v139[-2] = v41;
      v139[-1] = v29;
      uint64_t v43 = v154;
      uint64_t v40 = specialized Sequence.first(where:)((uint64_t (*)(uint64_t *))closure #1 in Layer.parameterKeyPath(for:)specialized partial apply, (uint64_t)&v139[-4], v42);
      uint64_t v154 = v43;
      swift_bridgeObjectRelease();
      uint64_t v44 = v31;
      uint64_t v45 = *(void (**)(char *, void *))v166;
      (*(void (**)(char *, void *))v166)(v29, v31);
      outlined destroy of MLHandActionClassifier.GraphCNNModel(v41);
      if (!v40) {
        goto LABEL_102;
      }
      v164 = v45;
    }
    v172 = (void **)((char *)v172 + 1);
    v186 = v171;
    swift_bridgeObjectRetain();
    v46._uint64_t countAndFlagsBits = 46;
    v46._object = (void *)0xE100000000000000;
    String.append(_:)(v46);
    String.append(_:)(v170);
    object = v186._object;
    uint64_t v163 = v40;
    char v48 = (void *)specialized SGD.getStatesDictionary(for:name:)(v40, v186._countAndFlagsBits, (unint64_t)v186._object);
    swift_bridgeObjectRelease();
    uint64_t v49 = (void *)v189;
    unint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v188 = v49;
    v189 = 0x8000000000000000;
    specialized LazyMapSequence.makeIterator()((uint64_t)v48, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v196);
    v181 = v201;
    v180 = v196[0];
    int64_t v177 = v196[1];
    v182 = v198;
    unint64_t v50 = v199;
    v179 = v200;
    uint64_t v161 = v197;
    int64_t v178 = (unint64_t)(v197 + 8) >> 6;
    uint64_t v162 = v48;
    swift_bridgeObjectRetain();
    while (1)
    {
      if (v50)
      {
        unint64_t v51 = __clz(__rbit64(v50));
        v50 &= v50 - 1;
        unint64_t v52 = v51 | (v182 << 6);
        goto LABEL_29;
      }
      int64_t v53 = v182 + 1;
      if (__OFADD__(v182, 1))
      {
        __break(1u);
LABEL_104:
        __break(1u);
        goto LABEL_105;
      }
      if (v53 >= v178) {
        goto LABEL_45;
      }
      unint64_t v54 = *(void *)(v177 + 8 * v53);
      if (!v54) {
        break;
      }
LABEL_28:
      unint64_t v50 = (v54 - 1) & v54;
      unint64_t v52 = __clz(__rbit64(v54)) + (v53 << 6);
      v182 = v53;
LABEL_29:
      uint64_t v56 = (uint64_t *)(*(void *)(v180 + 48) + 16 * v52);
      uint64_t v57 = (void *)v56[1];
      uint64_t v58 = *(void *)(*(void *)(v180 + 56) + 8 * v52);
      v186._uint64_t countAndFlagsBits = *v56;
      v186._object = v57;
      v187 = v58;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v179(&v183, &v186);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v59 = v183;
      uint64_t v45 = v184;
      uint64_t v44 = v185;
      char v48 = v49;
      unint64_t v41 = specialized __RawDictionaryStorage.find<A>(_:)(v183, (uint64_t)v184);
      uint64_t v61 = v49[2];
      BOOL v62 = (v60 & 1) == 0;
      uint64_t v63 = v61 + v62;
      if (__OFADD__(v61, v62))
      {
        __break(1u);
LABEL_100:
        __break(1u);
LABEL_101:
        __break(1u);
LABEL_102:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v186._uint64_t countAndFlagsBits = 0;
        v186._object = (void *)0xE000000000000000;
        _StringGuts.grow(_:)(52);
        v127._object = (void *)0x80000002272D7DB0;
        v127._uint64_t countAndFlagsBits = 0xD000000000000025;
        String.append(_:)(v127);
        String.append(_:)(v171);
        v128._uint64_t countAndFlagsBits = 0x74656D6172617020;
        v128._object = (void *)0xEB00000000207265;
        String.append(_:)(v128);
        String.append(_:)(v170);
        uint64_t countAndFlagsBits = v186._countAndFlagsBits;
        Swift::String v130 = v186._object;
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError();
        *(void *)uint64_t v131 = countAndFlagsBits;
        *(void *)(v131 + 8) = v130;
        *(_OWORD *)(v131 + 16) = 0u;
        *(_OWORD *)(v131 + 32) = 0u;
        *(unsigned char *)(v131 + 48) = 0;
        swift_bridgeObjectRelease();
        swift_willThrow();
        swift_release();
        return ((uint64_t (*)(char *, void *))v45)(v156, v44);
      }
      object = v60;
      if (v49[3] >= v63)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [Double]>);
          char v48 = &v188;
          _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v63, isUniquelyReferenced_nonNull_native & 1);
        char v48 = v188;
        unint64_t v64 = specialized __RawDictionaryStorage.find<A>(_:)(v59, (uint64_t)v45);
        if ((object & 1) != (v65 & 1)) {
          goto LABEL_109;
        }
        unint64_t v41 = v64;
      }
      uint64_t v49 = v188;
      if (object)
      {
        object = *(void **)(v188[7] + 8 * v41);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        char v48 = (void *)v49[7];
        swift_bridgeObjectRelease();
        v48[v41] = object;
        unint64_t isUniquelyReferenced_nonNull_native = 1;
      }
      else
      {
        v188[(v41 >> 6) + 8] |= 1 << v41;
        uint64_t v66 = (uint64_t *)(v49[6] + 16 * v41);
        *uint64_t v66 = v59;
        v66[1] = (uint64_t)v45;
        *(void *)(v49[7] + 8 * v41) = v44;
        uint64_t v67 = v49[2];
        BOOL v68 = __OFADD__(v67, 1);
        uint64_t v69 = v67 + 1;
        if (v68) {
          goto LABEL_101;
        }
        v49[2] = v69;
        unint64_t isUniquelyReferenced_nonNull_native = 1;
      }
    }
    int64_t v55 = v182 + 2;
    if (v182 + 2 >= v178) {
      goto LABEL_45;
    }
    unint64_t v54 = *(void *)(v177 + 8 * v55);
    if (v54) {
      goto LABEL_27;
    }
    int64_t v55 = v182 + 3;
    if (v182 + 3 >= v178) {
      goto LABEL_45;
    }
    unint64_t v54 = *(void *)(v177 + 8 * v55);
    if (v54) {
      goto LABEL_27;
    }
    int64_t v55 = v182 + 4;
    if (v182 + 4 >= v178) {
      goto LABEL_45;
    }
    unint64_t v54 = *(void *)(v177 + 8 * v55);
    if (v54) {
      goto LABEL_27;
    }
    int64_t v55 = v182 + 5;
    if (v182 + 5 >= v178) {
      goto LABEL_45;
    }
    unint64_t v54 = *(void *)(v177 + 8 * v55);
    if (v54) {
      goto LABEL_27;
    }
    int64_t v55 = v182 + 6;
    if (v182 + 6 >= v178) {
      goto LABEL_45;
    }
    unint64_t v54 = *(void *)(v177 + 8 * v55);
    if (v54)
    {
LABEL_27:
      int64_t v53 = v55;
      goto LABEL_28;
    }
    int64_t v53 = v182 + 7;
    if (v182 + 7 < v178)
    {
      unint64_t v54 = *(void *)(v177 + 8 * v53);
      if (!v54)
      {
        int64_t v70 = v182 + 8;
        do
        {
          if (v70 >= v178) {
            goto LABEL_45;
          }
          unint64_t v54 = *(void *)(v177 + 8 * v70++);
        }
        while (!v54);
        int64_t v53 = v70 - 1;
      }
      goto LABEL_28;
    }
LABEL_45:
    swift_bridgeObjectRelease();
    outlined consume of [String : [Int]].Iterator._Variant();
    swift_release();
    v189 = (uint64_t)v49;
    swift_bridgeObjectRelease();
    v71._uint64_t countAndFlagsBits = 0x6E65727275636572;
    v71._object = (void *)0xEF74686769655774;
    Swift::Bool v72 = String.hasSuffix(_:)(v71);
    uint64_t v73 = swift_bridgeObjectRelease();
    if (v72)
    {
      uint64_t v74 = v167;
      MEMORY[0x22A672DE0](v73);
      v75 = v143;
      Tensor.shape.getter();
      ((void (*)(char *, uint64_t))v155)(v74, v168);
      uint64_t v76 = *(void *)(TensorShape.dimensions.getter() + 16);
      swift_bridgeObjectRelease();
      if (v76 == 3) {
        double v77 = 1.0;
      }
      else {
        double v77 = 0.0;
      }
      uint64_t v78 = TensorShape.subscript.getter();
      uint64_t v79 = v171._countAndFlagsBits;
      v80 = v171._object;
      v186 = v171;
      swift_bridgeObjectRetain();
      v81._uint64_t countAndFlagsBits = 0x756F4374696E752ELL;
      v81._object = (void *)0xEA0000000000746ELL;
      String.append(_:)(v81);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
      uint64_t v82 = swift_allocObject();
      *(_OWORD *)(v82 + 16) = v146;
      *(double *)(v82 + 32) = (double)v78;
      uint64_t v83 = v189;
      swift_isUniquelyReferenced_nonNull_native();
      v186._uint64_t countAndFlagsBits = v83;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
      uint64_t v84 = v186._countAndFlagsBits;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v186._uint64_t countAndFlagsBits = 0;
      v186._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(18);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v186._uint64_t countAndFlagsBits = v79;
      v186._object = v80;
      v85._uint64_t countAndFlagsBits = 0xD000000000000010;
      v85._object = v141;
      String.append(_:)(v85);
      uint64_t v86 = swift_allocObject();
      *(_OWORD *)(v86 + 16) = v146;
      *(double *)(v86 + 32) = v77;
      swift_isUniquelyReferenced_nonNull_native();
      v186._uint64_t countAndFlagsBits = v84;
      uint64_t v30 = v156;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
      v189 = v186._countAndFlagsBits;
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*v142)(v75, v144);
      v31 = (void *)v148;
      v164(v30, (void *)v148);
    }
    else
    {
      uint64_t v30 = v156;
      v31 = (void *)v148;
      v164(v156, (void *)v148);
      swift_release();
      swift_release();
    }
    unint64_t isUniquelyReferenced_nonNull_native = v176;
    uint64_t v17 = v175;
    uint64_t v22 = v174;
    uint64_t v29 = v147;
    uint64_t v25 = v149;
    uint64_t v27 = v172;
  }
  while (v172 != v150);
LABEL_52:
  swift_bridgeObjectRelease();
  uint64_t v87 = Layer.namedLayerStateKeyPaths(recursively:)();
  uint64_t v156 = *(char **)(v87 + 16);
  if (!v156) {
    goto LABEL_98;
  }
  unint64_t v88 = 0;
  uint64_t v162 = (void *)(v87 + 32);
  uint64_t v161 = (void (**)(uint64_t, uint64_t))(v140 + 8);
  v157 = (void (**)(char *, unint64_t, uint64_t))(v139[0] + 16);
  v172 = (void **)(v139[0] + 8);
  uint64_t v155 = (void (*)(char *, unint64_t, uint64_t))v87;
  while (2)
  {
    if (v88 >= *(void *)(v87 + 16)) {
      goto LABEL_108;
    }
    uint64_t v89 = &v162[3 * v88];
    unint64_t v41 = *v89;
    object = (void *)v89[1];
    uint64_t v90 = v89[2];
    swift_retain_n();
    swift_bridgeObjectRetain();
    swift_getAtKeyPath();
    v170._uint64_t countAndFlagsBits = v90;
    uint64_t v91 = swift_release();
    uint64_t v92 = (uint64_t)v167;
    MEMORY[0x22A6724D0](v91);
    Dictionary<>.updateValue(tensor:forKey:prefix:)(v92, v41, object, v171._countAndFlagsBits, (uint64_t)v171._object);
    (*v161)(v92, v168);
    if (v169)
    {
      uint64_t v93 = LayerState.id.getter();
      uint64_t v94 = specialized Dictionary.subscript.getter(v93, v169);
    }
    else
    {
      uint64_t v94 = 0;
    }
    outlined init with copy of MLHandActionClassifier.GraphCNNModel(v159, (uint64_t)v17);
    uint64_t v95 = v173;
    (*v157)(v22, isUniquelyReferenced_nonNull_native, v173);
    if (!v94)
    {
      int v96 = LayerState.id.getter();
      lazy protocol witness table accessor for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
      unint64_t v97 = Layer.parameterKeyPaths(recursively:)();
      MEMORY[0x270FA5388](v97);
      v139[-2] = v17;
      LODWORD(v139[-1]) = v96;
      uint64_t v98 = v154;
      uint64_t v94 = specialized Sequence.first(where:)((uint64_t (*)(uint64_t *))partial apply for specialized closure #1 in Layer.parameterKeyPath(forParameterWithId:), (uint64_t)&v139[-4], v97);
      uint64_t v154 = v98;
      char v48 = (void *)v173;
      swift_bridgeObjectRelease();
      v170._object = *v172;
      ((void (*)(char *, void *))v170._object)(v22, v48);
      outlined destroy of MLHandActionClassifier.GraphCNNModel((uint64_t)v17);
      if (v94) {
        goto LABEL_61;
      }
LABEL_105:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v186._uint64_t countAndFlagsBits = 0;
      v186._object = (void *)0xE000000000000000;
      v132 = v48;
      _StringGuts.grow(_:)(52);
      v133._object = (void *)0x80000002272D7DB0;
      v133._uint64_t countAndFlagsBits = 0xD000000000000025;
      String.append(_:)(v133);
      String.append(_:)(v171);
      v134._uint64_t countAndFlagsBits = 0x74656D6172617020;
      v134._object = (void *)0xEB00000000207265;
      String.append(_:)(v134);
      v135._uint64_t countAndFlagsBits = v41;
      v135._object = object;
      String.append(_:)(v135);
      uint64_t v136 = v186._countAndFlagsBits;
      uint64_t v137 = v186._object;
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError();
      *(void *)uint64_t v138 = v136;
      *(void *)(v138 + 8) = v137;
      *(_OWORD *)(v138 + 16) = 0u;
      *(_OWORD *)(v138 + 32) = 0u;
      *(unsigned char *)(v138 + 48) = 0;
      swift_bridgeObjectRelease();
      swift_willThrow();
      swift_release();
      return ((uint64_t (*)(unint64_t, void *))v170._object)(isUniquelyReferenced_nonNull_native, v132);
    }
    v170._object = *v172;
    ((void (*)(char *, uint64_t))v170._object)(v22, v95);
    outlined destroy of MLHandActionClassifier.GraphCNNModel((uint64_t)v17);
LABEL_61:
    uint64_t v166 = (char *)(v88 + 1);
    v186 = v171;
    swift_bridgeObjectRetain();
    v99._uint64_t countAndFlagsBits = 46;
    v99._object = (void *)0xE100000000000000;
    String.append(_:)(v99);
    v100._uint64_t countAndFlagsBits = v41;
    v100._object = object;
    String.append(_:)(v100);
    swift_bridgeObjectRelease();
    uint64_t v165 = v94;
    uint64_t v101 = specialized SGD.getStatesDictionary(for:name:)(v94, v186._countAndFlagsBits, (unint64_t)v186._object);
    swift_bridgeObjectRelease();
    uint64_t v44 = (void *)v189;
    char v102 = swift_isUniquelyReferenced_nonNull_native();
    v188 = v44;
    v189 = 0x8000000000000000;
    specialized LazyMapSequence.makeIterator()(v101, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v190);
    v181 = v195;
    v180 = v190[0];
    int64_t v178 = v190[1];
    v182 = v192;
    unint64_t v41 = v193;
    v179 = v194;
    uint64_t v163 = v191;
    int64_t v177 = (unint64_t)(v191 + 64) >> 6;
    v164 = (void (*)(char *, void *))v101;
    swift_bridgeObjectRetain();
    if (v41)
    {
LABEL_62:
      unint64_t v103 = __clz(__rbit64(v41));
      v41 &= v41 - 1;
      unint64_t v104 = v103 | (v182 << 6);
      goto LABEL_78;
    }
    while (2)
    {
      int64_t v105 = v182 + 1;
      if (__OFADD__(v182, 1))
      {
        __break(1u);
        goto LABEL_107;
      }
      if (v105 >= v177)
      {
        uint64_t v107 = v173;
        goto LABEL_97;
      }
      unint64_t v106 = *(void *)(v178 + 8 * v105);
      uint64_t v107 = v173;
      if (v106) {
        goto LABEL_77;
      }
      int64_t v108 = v182 + 2;
      if (v182 + 2 >= v177) {
        goto LABEL_97;
      }
      unint64_t v106 = *(void *)(v178 + 8 * v108);
      if (v106) {
        goto LABEL_76;
      }
      int64_t v108 = v182 + 3;
      if (v182 + 3 >= v177) {
        goto LABEL_97;
      }
      unint64_t v106 = *(void *)(v178 + 8 * v108);
      if (v106) {
        goto LABEL_76;
      }
      int64_t v108 = v182 + 4;
      if (v182 + 4 >= v177) {
        goto LABEL_97;
      }
      unint64_t v106 = *(void *)(v178 + 8 * v108);
      if (v106) {
        goto LABEL_76;
      }
      int64_t v108 = v182 + 5;
      if (v182 + 5 >= v177) {
        goto LABEL_97;
      }
      unint64_t v106 = *(void *)(v178 + 8 * v108);
      if (v106) {
        goto LABEL_76;
      }
      int64_t v108 = v182 + 6;
      if (v182 + 6 >= v177) {
        goto LABEL_97;
      }
      unint64_t v106 = *(void *)(v178 + 8 * v108);
      if (v106)
      {
LABEL_76:
        int64_t v105 = v108;
        goto LABEL_77;
      }
      int64_t v105 = v182 + 7;
      if (v182 + 7 >= v177) {
        goto LABEL_97;
      }
      unint64_t v106 = *(void *)(v178 + 8 * v105);
      if (v106)
      {
LABEL_77:
        unint64_t v41 = (v106 - 1) & v106;
        unint64_t v104 = __clz(__rbit64(v106)) + (v105 << 6);
        v182 = v105;
LABEL_78:
        unint64_t v109 = (uint64_t *)(*(void *)(v180 + 48) + 16 * v104);
        v110 = (void *)v109[1];
        uint64_t v111 = *(void *)(*(void *)(v180 + 56) + 8 * v104);
        v186._uint64_t countAndFlagsBits = *v109;
        v186._object = v110;
        v187 = v111;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v179(&v183, &v186);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v112 = v183;
        uint64_t v45 = v184;
        uint64_t v113 = v185;
        char v48 = v44;
        unint64_t isUniquelyReferenced_nonNull_native = specialized __RawDictionaryStorage.find<A>(_:)(v183, (uint64_t)v184);
        uint64_t v115 = v44[2];
        BOOL v116 = (v114 & 1) == 0;
        uint64_t v117 = v115 + v116;
        if (__OFADD__(v115, v116)) {
          goto LABEL_100;
        }
        object = v114;
        if (v44[3] >= v117)
        {
          if ((v102 & 1) == 0)
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [Double]>);
            char v48 = &v188;
            _NativeDictionary.copy()();
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v117, v102 & 1);
          char v48 = v188;
          unint64_t v118 = specialized __RawDictionaryStorage.find<A>(_:)(v112, (uint64_t)v45);
          if ((object & 1) != (v119 & 1)) {
            goto LABEL_109;
          }
          unint64_t isUniquelyReferenced_nonNull_native = v118;
        }
        uint64_t v44 = v188;
        if (object)
        {
          uint64_t v120 = *(void *)(v188[7] + 8 * isUniquelyReferenced_nonNull_native);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v121 = v44[7];
          swift_bridgeObjectRelease();
          *(void *)(v121 + 8 * isUniquelyReferenced_nonNull_native) = v120;
        }
        else
        {
          v188[(isUniquelyReferenced_nonNull_native >> 6) + 8] |= 1 << isUniquelyReferenced_nonNull_native;
          uint64_t v122 = (uint64_t *)(v44[6] + 16 * isUniquelyReferenced_nonNull_native);
          *uint64_t v122 = v112;
          v122[1] = (uint64_t)v45;
          *(void *)(v44[7] + 8 * isUniquelyReferenced_nonNull_native) = v113;
          uint64_t v123 = v44[2];
          BOOL v68 = __OFADD__(v123, 1);
          uint64_t v124 = v123 + 1;
          if (v68) {
            goto LABEL_104;
          }
          v44[2] = v124;
        }
        char v102 = 1;
        unint64_t isUniquelyReferenced_nonNull_native = v176;
        uint64_t v17 = v175;
        uint64_t v22 = v174;
        if (v41) {
          goto LABEL_62;
        }
        continue;
      }
      break;
    }
    int64_t v125 = v182 + 8;
    while (v125 < v177)
    {
      unint64_t v106 = *(void *)(v178 + 8 * v125++);
      if (v106)
      {
        int64_t v105 = v125 - 1;
        goto LABEL_77;
      }
    }
LABEL_97:
    swift_bridgeObjectRelease();
    outlined consume of [String : [Int]].Iterator._Variant();
    swift_release();
    v189 = (uint64_t)v44;
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    ((void (*)(unint64_t, uint64_t))v170._object)(isUniquelyReferenced_nonNull_native, v107);
    unint64_t v88 = (unint64_t)v166;
    uint64_t v87 = (uint64_t)v155;
    if (v166 != v156) {
      continue;
    }
    break;
  }
LABEL_98:
  swift_bridgeObjectRelease();
  return v189;
}

uint64_t specialized SGD.getParametersDictionary()()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + 12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [Double])>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2272CB4A0;
  strcpy((char *)(inited + 32), "learningRate");
  *(unsigned char *)(inited + 45) = 0;
  *(_WORD *)(inited + 46) = -5120;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_2272CB370;
  *(double *)(v3 + 32) = *(float *)v0;
  *(void *)(inited + 48) = v3;
  *(void *)(inited + 56) = 0x6D75746E656D6F6DLL;
  *(void *)(inited + 64) = 0xE800000000000000;
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2272CB370;
  *(double *)(v4 + 32) = *(float *)(v0 + 4);
  *(void *)(inited + 72) = v4;
  *(void *)(inited + 80) = 0xD000000000000014;
  *(void *)(inited + 88) = 0x80000002272D7E00;
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2272CB370;
  *(double *)(v5 + 32) = (double)v1;
  *(void *)(inited + 96) = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t specialized SGD.getStatesDictionary(for:name:)(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v39 = a3;
  unint64_t v40 = a2;
  uint64_t v3 = type metadata accessor for TensorShape();
  uint64_t v41 = *(void *)(v3 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v33 - v7;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Tensor();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
  uint64_t v16 = Dictionary.init(dictionaryLiteral:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SGD<MLHandActionClassifier.GraphCNNModel>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptimizerStateDictionary<MLHandActionClassifier.GraphCNNModel>);
  OptimizerStateDictionary.subscript.getter();
  if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12) == 1)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v11, &demangling cache variable for type metadata for Tensor?);
    return v16;
  }
  uint64_t v36 = v13;
  uint64_t v37 = v12;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v11, v12);
  uint64_t v42 = 0;
  unint64_t v43 = 0xE000000000000000;
  _StringGuts.grow(_:)(21);
  unint64_t v17 = v39;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v42 = v40;
  unint64_t v43 = v17;
  v18._object = (void *)0x80000002272D7D30;
  v18._uint64_t countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v18);
  uint64_t v38 = (char *)v42;
  Tensor.shape.getter();
  uint64_t v19 = TensorShape.contiguousSize.getter();
  uint64_t v20 = v41 + 8;
  uint64_t v35 = *(uint64_t (**)(char *, uint64_t))(v41 + 8);
  uint64_t v21 = v35(v8, v3);
  MEMORY[0x270FA5388](v21);
  *(&v33 - 2) = (uint64_t)v15;
  specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(v19, (uint64_t (*)(void *, uint64_t *))closure #1 in Tensor.doubleArray()partial apply, (uint64_t)(&v33 - 4));
  swift_isUniquelyReferenced_nonNull_native();
  uint64_t v42 = v16;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
  uint64_t v22 = v42;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v42 = 0;
  unint64_t v43 = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v42 = v40;
  unint64_t v43 = v17;
  v23._uint64_t countAndFlagsBits = 0xD000000000000019;
  v23._object = (void *)0x80000002272D7D50;
  String.append(_:)(v23);
  unint64_t v39 = v42;
  unint64_t v40 = v43;
  Tensor.shape.getter();
  lazy protocol witness table accessor for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel((unint64_t *)&lazy protocol witness table cache variable for type TensorShape and conformance TensorShape, MEMORY[0x263F58358]);
  uint64_t v24 = dispatch thunk of Collection.count.getter();
  if (!v24)
  {
LABEL_10:
    v35(v6, v3);
    swift_isUniquelyReferenced_nonNull_native();
    uint64_t v42 = v22;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
    uint64_t v16 = v42;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v15, v37);
    return v16;
  }
  uint64_t v25 = v24;
  uint64_t v44 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24 & ~(v24 >> 63), 0);
  uint64_t v26 = v44;
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  if ((v25 & 0x8000000000000000) == 0)
  {
    uint64_t v34 = v22;
    uint64_t v38 = v15;
    uint64_t v41 = v20;
    do
    {
      uint64_t v28 = (void (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v30 = *v29;
      v28(&v42, 0);
      uint64_t v44 = v26;
      unint64_t v32 = *(void *)(v26 + 16);
      unint64_t v31 = *(void *)(v26 + 24);
      if (v32 >= v31 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1);
        uint64_t v26 = v44;
      }
      *(void *)(v26 + 16) = v32 + 1;
      *(double *)(v26 + 8 * v32 + 32) = (double)v30;
      dispatch thunk of Collection.formIndex(after:)();
      --v25;
    }
    while (v25);
    uint64_t v15 = v38;
    uint64_t v22 = v34;
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

BOOL specialized closure #1 in Layer.parameterKeyPath(for:)()
{
  uint64_t v0 = type metadata accessor for Parameter();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAtKeyPath();
  int v4 = Parameter.id.getter();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4 == Parameter.id.getter();
}

{
  return specialized closure #1 in Layer.parameterKeyPath(for:)();
}

BOOL specialized closure #1 in Layer.parameterKeyPath(forParameterWithId:)(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = type metadata accessor for Parameter();
  OUTLINED_FUNCTION_0();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_3_0();
  uint64_t v10 = v9 - v8;
  swift_getAtKeyPath();
  int v11 = Parameter.id.getter();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v10, v4);
  return v11 == a3;
}

uint64_t MLHandActionClassifier.GraphCNN.getCheckpointStatesDictionary()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SGD<MLHandActionClassifier.GraphCNNModel>);
  MEMORY[0x270FA5388](v1 - 8);
  OUTLINED_FUNCTION_3_0();
  uint64_t v4 = v3 - v2;
  uint64_t v5 = v0 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_optimizer;
  swift_beginAccess();
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v5, v4, &demangling cache variable for type metadata for SGD<MLHandActionClassifier.GraphCNNModel>);
  MLHandActionClassifier.GraphCNN.trainableSublayers()();
  uint64_t v7 = specialized _ModelCheckpoint<>.getCheckpointStatesDictionary<A>(optimizer:trainableSublayers:)(v4, v6);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v4, &demangling cache variable for type metadata for SGD<MLHandActionClassifier.GraphCNNModel>);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t specialized _ModelCheckpoint<>.getCheckpointStatesDictionary<A>(optimizer:trainableSublayers:)(uint64_t a1, uint64_t a2)
{
  void (*v137)(uint64_t *__return_ptr, unint64_t *);
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  void v145[5];
  void v146[7];
  uint64_t v147;
  void v148[5];
  void v149[2];
  uint64_t v150;
  char *v151;
  unint64_t v152;
  void (*v153)(uint64_t *__return_ptr, unint64_t *);
  unint64_t v154;
  void *v155;

  uint64_t v132 = type metadata accessor for LSTM();
  uint64_t v140 = *(void *)(v132 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v132);
  uint64_t v136 = (char *)&v98 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v98 - v7;
  uint64_t v109 = type metadata accessor for Dense();
  uint64_t v9 = *(void *)(v109 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v109);
  int64_t v105 = (char *)&v98 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  int64_t v108 = (char *)&v98 - v12;
  uint64_t v117 = type metadata accessor for Conv2D();
  uint64_t v13 = *(void *)(v117 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v117);
  BOOL v116 = (char *)&v98 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v115 = (char *)&v98 - v16;
  uint64_t v17 = type metadata accessor for MLHandActionClassifier.GraphCNNModel(0);
  uint64_t v18 = MEMORY[0x270FA5388](v17 - 8);
  uint64_t v101 = (uint64_t)&v98 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v104 = (uint64_t)&v98 - v21;
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v114 = (uint64_t)&v98 - v23;
  MEMORY[0x270FA5388](v22);
  unint64_t v113 = (unint64_t)&v98 - v24;
  uint64_t v126 = type metadata accessor for BatchNorm();
  uint64_t v25 = *(void *)(v126 - 8);
  uint64_t v26 = MEMORY[0x270FA5388](v126);
  uint64_t v112 = (char *)&v98 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v26);
  int64_t v125 = (char *)&v98 - v28;
  uint64_t v29 = specialized _ModelCheckpoint<>.parameterKeyPathLookup.getter();
  uint64_t v122 = a1;
  uint64_t v123 = v29;
  uint64_t v30 = specialized SGD.getParametersDictionary()();
  unint64_t v127 = *(void *)(a2 + 16);
  uint64_t v31 = v2 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_model;
  swift_bridgeObjectRetain();
  uint64_t v121 = v31;
  swift_beginAccess();
  unint64_t v32 = 0;
  uint64_t v33 = v8;
  char v119 = (long long *)v145;
  uint64_t v120 = a2 + 32;
  unint64_t v118 = &v146[1];
  uint64_t v124 = (long long *)v148;
  Swift::String v100 = (void (**)(char *, char *, uint64_t))(v140 + 32);
  uint64_t v98 = a2;
  Swift::String v99 = (void (**)(char *, uint64_t))(v140 + 8);
  char v102 = (void (**)(char *, char *, uint64_t))(v9 + 32);
  unint64_t v103 = (void (**)(char *, uint64_t))(v9 + 8);
  uint64_t v34 = v132;
  unint64_t v106 = (void (**)(char *, uint64_t))(v13 + 8);
  uint64_t v107 = (void (**)(char *, char *, uint64_t))(v13 + 32);
  uint64_t v35 = v136;
  v110 = (void (**)(char *, uint64_t))(v25 + 8);
  uint64_t v111 = (void (**)(char *, char *, uint64_t))(v25 + 32);
  Swift::String v135 = v8;
LABEL_2:
  if (v32 == v127)
  {
    unint64_t v129 = v127;
    memset(v146, 0, 48);
  }
  else
  {
    if (v32 >= v127)
    {
      __break(1u);
LABEL_70:
      uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    unint64_t v36 = v32 + 1;
    uint64_t v37 = v119;
    unint64_t v38 = v32;
    outlined init with copy of TrainingSessionDelegate(v120 + 40 * v32, (uint64_t)v119);
    v146[0] = v38;
    outlined init with take of BinaryFloatingPoint(v37, (uint64_t)v118);
    unint64_t v129 = v36;
  }
  outlined init with take of (offset: Int, element: Layer)?((uint64_t)v146, (uint64_t)&v147, &demangling cache variable for type metadata for (offset: Int, element: Layer)?);
  if (!v148[3])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v30;
  }
  uint64_t v39 = v147;
  outlined init with take of BinaryFloatingPoint(v124, (uint64_t)v146);
  uint64_t v144 = 0x5F726579616CLL;
  v145[0] = 0xE600000000000000;
  uint64_t v141 = v39;
  v40._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v40);
  swift_bridgeObjectRelease();
  uint64_t v139 = v144;
  uint64_t v140 = v145[0];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
  uint64_t v41 = Dictionary.init(dictionaryLiteral:)();
  outlined init with copy of TrainingSessionDelegate((uint64_t)v146, (uint64_t)&v144);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Layer);
  uint64_t v42 = v125;
  uint64_t v43 = v126;
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v131 = v41;
    unint64_t v50 = v115;
    uint64_t v43 = v117;
    if (swift_dynamicCast())
    {
      swift_bridgeObjectRelease();
      (*v107)(v116, v50, v43);
      uint64_t v51 = v114;
      outlined init with copy of MLHandActionClassifier.GraphCNNModel(v121, v114);
      uint64_t v52 = v123;
      swift_bridgeObjectRetain();
      uint64_t v53 = v130;
      uint64_t v54 = specialized Conv2D.getStatesDictionary<A, B>(_:layerName:optimizer:parameterKeyPathLookup:)(v51, v139, (void *)v140, v122, v52);
      uint64_t v130 = v53;
      if (v53) {
        goto LABEL_62;
      }
      uint64_t v131 = v54;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of MLHandActionClassifier.GraphCNNModel(v114);
      int64_t v55 = *v106;
      uint64_t v56 = v116;
      goto LABEL_17;
    }
    uint64_t v57 = v108;
    uint64_t v43 = v109;
    if ((swift_dynamicCast() & 1) == 0)
    {
      if (swift_dynamicCast())
      {
        swift_bridgeObjectRelease();
        (*v100)(v35, v33, v34);
        uint64_t v90 = v101;
        outlined init with copy of MLHandActionClassifier.GraphCNNModel(v121, v101);
        uint64_t v91 = v123;
        swift_bridgeObjectRetain();
        uint64_t v43 = v140;
        uint64_t v92 = v130;
        uint64_t v93 = specialized LSTM.getStatesDictionary<A, B>(_:layerName:optimizer:parameterKeyPathLookup:)(v90, v139, (void *)v140, v122, v91);
        uint64_t v130 = v92;
        if (v92)
        {
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          outlined destroy of MLHandActionClassifier.GraphCNNModel(v90);
          (*v99)(v35, v34);
          goto LABEL_66;
        }
        uint64_t v131 = v93;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined destroy of MLHandActionClassifier.GraphCNNModel(v90);
        (*v99)(v35, v34);
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      goto LABEL_18;
    }
    swift_bridgeObjectRelease();
    uint64_t v44 = v105;
    (*v102)(v105, v57, v43);
    uint64_t v58 = v104;
    outlined init with copy of MLHandActionClassifier.GraphCNNModel(v121, v104);
    uint64_t v59 = v123;
    swift_bridgeObjectRetain();
    uint64_t v60 = v130;
    uint64_t v61 = specialized Dense.getStatesDictionary<A, B>(_:layerName:optimizer:parameterKeyPathLookup:)(v58, v139, (void *)v140, v122, v59);
    uint64_t v130 = v60;
    if (!v60)
    {
      uint64_t v131 = v61;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of MLHandActionClassifier.GraphCNNModel(v58);
      uint64_t v49 = v103;
      goto LABEL_16;
    }
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    outlined destroy of MLHandActionClassifier.GraphCNNModel(v58);
    uint64_t v94 = v103;
LABEL_64:
    uint64_t v95 = *v94;
    int v96 = v44;
    goto LABEL_65;
  }
  swift_bridgeObjectRelease();
  uint64_t v44 = v112;
  (*v111)(v112, v42, v43);
  unint64_t v45 = v113;
  outlined init with copy of MLHandActionClassifier.GraphCNNModel(v121, v113);
  uint64_t v46 = v123;
  swift_bridgeObjectRetain();
  uint64_t v47 = v130;
  uint64_t v48 = specialized BatchNorm.getStatesDictionary<A, B>(_:layerName:optimizer:parameterKeyPathLookup:)(v45, v139, (void *)v140, v122, v46);
  uint64_t v130 = v47;
  if (v47)
  {
LABEL_59:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    outlined destroy of MLHandActionClassifier.GraphCNNModel(v45);
    uint64_t v94 = v110;
    goto LABEL_64;
  }
  uint64_t v131 = v48;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of MLHandActionClassifier.GraphCNNModel(v45);
  uint64_t v49 = v110;
LABEL_16:
  int64_t v55 = *v49;
  uint64_t v56 = v44;
LABEL_17:
  v55(v56, v43);
LABEL_18:
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v144);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v155 = (void *)v30;
  specialized LazyMapSequence.makeIterator()(v131, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v149);
  uint64_t v138 = v149[0];
  uint64_t v139 = v154;
  uint64_t v140 = (uint64_t)v151;
  unint64_t v63 = v152;
  uint64_t v137 = v153;
  uint64_t v128 = v150;
  int64_t v133 = (unint64_t)(v150 + 64) >> 6;
  uint64_t v134 = v149[1];
  swift_bridgeObjectRetain();
  if (v63)
  {
LABEL_19:
    char v64 = isUniquelyReferenced_nonNull_native;
    unint64_t v65 = __clz(__rbit64(v63));
    v63 &= v63 - 1;
    unint64_t v66 = v65 | (v140 << 6);
    goto LABEL_33;
  }
  while (1)
  {
    uint64_t v67 = v140 + 1;
    if (__OFADD__(v140, 1)) {
      goto LABEL_61;
    }
    if (v67 >= v133)
    {
      uint64_t v34 = v132;
LABEL_52:
      swift_bridgeObjectRelease();
      outlined consume of [String : [Int]].Iterator._Variant();
      swift_bridgeObjectRelease();
      swift_release();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v146);
      unint64_t v32 = v129;
      goto LABEL_2;
    }
    unint64_t v68 = *(void *)(v134 + 8 * v67);
    uint64_t v34 = v132;
    if (!v68)
    {
      uint64_t v69 = (char *)(v140 + 2);
      if (v140 + 2 >= v133) {
        goto LABEL_52;
      }
      unint64_t v68 = *(void *)(v134 + 8 * (void)v69);
      if (v68) {
        goto LABEL_31;
      }
      uint64_t v69 = (char *)(v140 + 3);
      if (v140 + 3 >= v133) {
        goto LABEL_52;
      }
      unint64_t v68 = *(void *)(v134 + 8 * (void)v69);
      if (v68) {
        goto LABEL_31;
      }
      uint64_t v69 = (char *)(v140 + 4);
      if (v140 + 4 >= v133) {
        goto LABEL_52;
      }
      unint64_t v68 = *(void *)(v134 + 8 * (void)v69);
      if (v68) {
        goto LABEL_31;
      }
      uint64_t v69 = (char *)(v140 + 5);
      if (v140 + 5 >= v133) {
        goto LABEL_52;
      }
      unint64_t v68 = *(void *)(v134 + 8 * (void)v69);
      if (v68)
      {
LABEL_31:
        uint64_t v67 = (uint64_t)v69;
      }
      else
      {
        uint64_t v67 = v140 + 6;
        if (v140 + 6 >= v133) {
          goto LABEL_52;
        }
        unint64_t v68 = *(void *)(v134 + 8 * v67);
        if (!v68)
        {
          uint64_t v89 = v140 + 7;
          while (v89 < v133)
          {
            unint64_t v68 = *(void *)(v134 + 8 * v89++);
            if (v68)
            {
              uint64_t v67 = v89 - 1;
              goto LABEL_32;
            }
          }
          goto LABEL_52;
        }
      }
    }
LABEL_32:
    char v64 = isUniquelyReferenced_nonNull_native;
    unint64_t v63 = (v68 - 1) & v68;
    unint64_t v66 = __clz(__rbit64(v68)) + (v67 << 6);
    uint64_t v140 = v67;
LABEL_33:
    int64_t v70 = (unint64_t *)(*(void *)(v138 + 48) + 16 * v66);
    unint64_t v71 = v70[1];
    uint64_t v72 = *(void *)(*(void *)(v138 + 56) + 8 * v66);
    uint64_t v144 = *v70;
    v145[0] = v71;
    v145[1] = v72;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v137(&v141, &v144);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v43 = v141;
    uint64_t v73 = v142;
    uint64_t v74 = v143;
    uint64_t v44 = (char *)v30;
    unint64_t v45 = specialized __RawDictionaryStorage.find<A>(_:)(v141, v142);
    uint64_t v76 = *(void *)(v30 + 16);
    BOOL v77 = (v75 & 1) == 0;
    uint64_t v78 = v76 + v77;
    if (__OFADD__(v76, v77))
    {
      __break(1u);
      goto LABEL_59;
    }
    uint64_t v30 = v75;
    if (*((void *)v44 + 3) >= v78)
    {
      if ((v64 & 1) == 0)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [Double]>);
        _NativeDictionary.copy()();
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v78, v64 & 1);
      unint64_t v79 = specialized __RawDictionaryStorage.find<A>(_:)(v43, v73);
      if ((v30 & 1) != (v80 & 1)) {
        goto LABEL_70;
      }
      unint64_t v45 = v79;
    }
    Swift::String v81 = v155;
    if ((v30 & 1) == 0) {
      break;
    }
    uint64_t v82 = *(void *)(v155[7] + 8 * v45);
    uint64_t v83 = (uint64_t)v155;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v30 = v83;
    uint64_t v84 = *(void *)(v83 + 56);
    swift_bridgeObjectRelease();
    *(void *)(v84 + 8 * v45) = v82;
LABEL_43:
    char isUniquelyReferenced_nonNull_native = 1;
    uint64_t v33 = v135;
    uint64_t v35 = v136;
    if (v63) {
      goto LABEL_19;
    }
  }
  v155[(v45 >> 6) + 8] |= 1 << v45;
  Swift::String v85 = (uint64_t *)(v81[6] + 16 * v45);
  *Swift::String v85 = v43;
  v85[1] = v73;
  *(void *)(v81[7] + 8 * v45) = v74;
  uint64_t v86 = v81[2];
  BOOL v87 = __OFADD__(v86, 1);
  uint64_t v88 = v86 + 1;
  if (!v87)
  {
    uint64_t v30 = (uint64_t)v81;
    v81[2] = v88;
    goto LABEL_43;
  }
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  outlined destroy of MLHandActionClassifier.GraphCNNModel(v114);
  uint64_t v95 = *v106;
  int v96 = v116;
LABEL_65:
  v95(v96, v43);
LABEL_66:
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v146);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v144);
  return v30;
}

uint64_t specialized _ModelCheckpoint<>.parameterKeyPathLookup.getter()
{
  uint64_t v37 = type metadata accessor for Parameter();
  OUTLINED_FUNCTION_0();
  uint64_t v2 = v1;
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_33_0();
  uint64_t v36 = v4;
  type metadata accessor for MLHandActionClassifier.GraphCNNModel(0);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_3_0();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = v0 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_model;
  swift_beginAccess();
  uint64_t v35 = v9;
  outlined init with copy of MLHandActionClassifier.GraphCNNModel(v9, v8);
  lazy protocol witness table accessor for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
  unint64_t v10 = Layer.parameterKeyPaths(recursively:)();
  uint64_t v34 = v8;
  outlined destroy of MLHandActionClassifier.GraphCNNModel(v8);
  if (v10 >> 62)
  {
LABEL_21:
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v11) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v11)
    {
LABEL_3:
      unint64_t v32 = (void (**)(uint64_t, uint64_t))(v2 + 8);
      unint64_t v33 = v10 & 0xC000000000000001;
      uint64_t v12 = (void *)MEMORY[0x263F8EE80];
      uint64_t v13 = 4;
      unint64_t v31 = v10;
      while (1)
      {
        if (v33)
        {
          uint64_t v14 = MEMORY[0x22A6753B0](v13 - 4, v10);
        }
        else
        {
          uint64_t v14 = *(void *)(v10 + 8 * v13);
          swift_retain();
        }
        uint64_t v15 = v13 - 3;
        if (__OFADD__(v13 - 4, 1))
        {
          __break(1u);
LABEL_19:
          __break(1u);
LABEL_20:
          __break(1u);
          goto LABEL_21;
        }
        outlined init with copy of MLHandActionClassifier.GraphCNNModel(v35, v34);
        swift_retain();
        swift_getAtKeyPath();
        swift_release();
        outlined destroy of MLHandActionClassifier.GraphCNNModel(v34);
        uint64_t v2 = Parameter.id.getter();
        (*v32)(v36, v37);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v38 = v12;
        unint64_t v10 = (unint64_t)v12;
        unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v2);
        uint64_t v19 = v12[2];
        BOOL v20 = (v18 & 1) == 0;
        Swift::Int v21 = v19 + v20;
        if (__OFADD__(v19, v20)) {
          goto LABEL_19;
        }
        unint64_t v22 = v17;
        char v23 = v18;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<UInt32, WritableKeyPath<MLHandActionClassifier.GraphCNNModel, Parameter>>);
        unint64_t v10 = (unint64_t)&v38;
        if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v21))
        {
          unint64_t v10 = (unint64_t)v38;
          unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v2);
          if ((v23 & 1) != (v25 & 1))
          {
            uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            return result;
          }
          unint64_t v22 = v24;
        }
        uint64_t v12 = v38;
        if (v23)
        {
          uint64_t v26 = v38[7];
          swift_release();
          *(void *)(v26 + 8 * v22) = v14;
        }
        else
        {
          v38[(v22 >> 6) + 8] |= 1 << v22;
          *(_DWORD *)(v12[6] + 4 * v22) = v2;
          *(void *)(v12[7] + 8 * v22) = v14;
          uint64_t v27 = v12[2];
          BOOL v28 = __OFADD__(v27, 1);
          uint64_t v29 = v27 + 1;
          if (v28) {
            goto LABEL_20;
          }
          v12[2] = v29;
        }
        swift_bridgeObjectRelease();
        ++v13;
        unint64_t v10 = v31;
        if (v15 == v11) {
          goto LABEL_23;
        }
      }
    }
  }
  uint64_t v12 = (void *)MEMORY[0x263F8EE80];
LABEL_23:
  swift_bridgeObjectRelease();
  return (uint64_t)v12;
}

uint64_t specialized BatchNorm.getStatesDictionary<A, B>(_:layerName:optimizer:parameterKeyPathLookup:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v175 = a5;
  uint64_t v164 = a4;
  uint64_t v174 = a1;
  uint64_t v163 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (name: String, state: LayerState));
  uint64_t v159 = *(void *)(v163 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v163);
  uint64_t v161 = (uint64_t *)((char *)&v158 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  int64_t v178 = (uint64_t *)((char *)&v158 - v10);
  MEMORY[0x270FA5388](v9);
  uint64_t v162 = (uint64_t *)((char *)&v158 - v11);
  uint64_t v160 = type metadata accessor for MLHandActionClassifier.GraphCNNModel(0);
  MEMORY[0x270FA5388](v160);
  uint64_t v173 = (uint64_t)&v158 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v186 = type metadata accessor for TensorShape();
  uint64_t v204 = *(void *)(v186 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v186);
  v180 = (char *)&v158 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  v172 = (char *)&v158 - v15;
  uint64_t v185 = type metadata accessor for Tensor();
  v203 = *(void **)(v185 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v185);
  v179 = (char *)&v158 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  Swift::String v171 = (char *)&v158 - v18;
  uint64_t v197 = type metadata accessor for Parameter();
  v202 = *(char **)(v197 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v197);
  v188 = (char *)&v158 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  v198 = (char *)&v158 - v21;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (name: String, parameter: Parameter));
  int64_t v200 = *(void *)(v22 - 8);
  v201 = (void *)v200;
  uint64_t v23 = MEMORY[0x270FA5388](v22);
  uint64_t v169 = (char *)&v158 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  v195 = (uint64_t *)((char *)&v158 - v26);
  MEMORY[0x270FA5388](v25);
  int64_t v177 = (uint64_t *)((char *)&v158 - v27);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [Double])>);
  uint64_t inited = swift_initStackObject();
  long long v205 = xmmword_2272CB370;
  *(_OWORD *)(inited + 16) = xmmword_2272CB370;
  v209._uint64_t countAndFlagsBits = a2;
  v209._object = a3;
  swift_bridgeObjectRetain();
  v29._uint64_t countAndFlagsBits = 0x75746E656D6F6D2ELL;
  v29._object = (void *)0xE90000000000006DLL;
  String.append(_:)(v29);
  object = v209._object;
  *(void *)(inited + 32) = v209._countAndFlagsBits;
  *(void *)(inited + 40) = object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
  uint64_t v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = v205;
  BatchNorm.momentum.getter();
  *(double *)(v31 + 32) = v32;
  *(void *)(inited + 48) = v31;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
  uint64_t v33 = Dictionary.init(dictionaryLiteral:)();
  v187._uint64_t countAndFlagsBits = a2;
  v209._uint64_t countAndFlagsBits = a2;
  v209._object = a3;
  v187._object = a3;
  swift_bridgeObjectRetain();
  v34._uint64_t countAndFlagsBits = 0x6E6F6C697370652ELL;
  v34._object = (void *)0xE800000000000000;
  String.append(_:)(v34);
  uint64_t v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = v205;
  BatchNorm.epsilon.getter();
  *(double *)(v35 + 32) = v36;
  swift_isUniquelyReferenced_nonNull_native();
  v209._uint64_t countAndFlagsBits = v33;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
  uint64_t countAndFlagsBits = (void *)v209._countAndFlagsBits;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(name: String, parameter: Parameter)>);
  uint64_t v38 = *(void *)(v200 + 72);
  unint64_t v39 = (*((unsigned __int8 *)v201 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v201 + 80);
  uint64_t v40 = swift_allocObject();
  long long v158 = xmmword_2272CB4D0;
  *(_OWORD *)(v40 + 16) = xmmword_2272CB4D0;
  uint64_t v176 = v40;
  uint64_t v41 = (void *)(v40 + v39);
  *uint64_t v41 = 0x74657366666FLL;
  v41[1] = 0xE600000000000000;
  BatchNorm.$offset.getter();
  uint64_t v168 = v38;
  long long v167 = v41;
  uint64_t v42 = (void *)((char *)v41 + v38);
  void *v42 = 0x656C616373;
  v42[1] = 0xE500000000000000;
  uint64_t v43 = v197;
  BatchNorm.$scale.getter();
  int v44 = 0;
  unint64_t v45 = 0;
  uint64_t v170 = v22;
  uint64_t v166 = (char *)v177 + *(int *)(v22 + 48);
  uint64_t v165 = (void (**)(char *, char *, uint64_t))(v202 + 32);
  v196 = (void (**)(char *, char *, uint64_t))(v202 + 16);
  v184 = (uint64_t (**)(char *, uint64_t))(v204 + 8);
  v183 = (void (**)(char *, uint64_t))(v203 + 1);
  v194 = (void (**)(char *, uint64_t))(v202 + 8);
  while (2)
  {
    if (v45 >= *(void *)(v176 + 16))
    {
LABEL_68:
      __break(1u);
      goto LABEL_69;
    }
    int v192 = v44;
    uint64_t v46 = v177;
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v167 + v45 * v168, (uint64_t)v177, &demangling cache variable for type metadata for (name: String, parameter: Parameter));
    uint64_t v47 = v170;
    uint64_t v48 = v195;
    uint64_t v49 = (char *)v195 + *(int *)(v170 + 48);
    uint64_t v51 = *v46;
    unint64_t v50 = (void *)v46[1];
    uint64_t *v195 = *v46;
    v48[1] = (uint64_t)v50;
    uint64_t v52 = *v165;
    (*v165)(v49, v166, v43);
    Swift::String v209 = v187;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v53._uint64_t countAndFlagsBits = 46;
    v53._object = (void *)0xE100000000000000;
    String.append(_:)(v53);
    v203 = (void *)v51;
    v54._uint64_t countAndFlagsBits = v51;
    *(void *)&long long v205 = v50;
    v54._object = v50;
    String.append(_:)(v54);
    uint64_t v55 = v43;
    uint64_t v56 = v209._object;
    uint64_t v204 = v209._countAndFlagsBits;
    uint64_t v57 = &v169[*(int *)(v47 + 48)];
    uint64_t v58 = *v196;
    (*v196)(v57, v49, v55);
    v52(v198, v57, v55);
    uint64_t v59 = Parameter.id.getter();
    uint64_t v60 = swift_bridgeObjectRetain();
    uint64_t v61 = v171;
    MEMORY[0x22A672DE0](v60);
    BOOL v62 = v172;
    Tensor.shape.getter();
    uint64_t v63 = TensorShape.contiguousSize.getter();
    v182 = *v184;
    uint64_t v64 = v182(v62, v186);
    MEMORY[0x270FA5388](v64);
    *((void *)&v158 - 2) = v61;
    uint64_t v65 = v199;
    specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(v63, (uint64_t (*)(void *, uint64_t *))partial apply for closure #1 in Tensor.doubleArray(), (uint64_t)(&v158 - 2));
    uint64_t v199 = v65;
    v181 = *v183;
    v181(v61, v185);
    swift_isUniquelyReferenced_nonNull_native();
    v209._uint64_t countAndFlagsBits = (uint64_t)countAndFlagsBits;
    unint64_t v66 = v204;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
    uint64_t countAndFlagsBits = (void *)v209._countAndFlagsBits;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v175) {
      uint64_t v67 = specialized Dictionary.subscript.getter(v59, v175);
    }
    else {
      uint64_t v67 = 0;
    }
    uint64_t v68 = v173;
    uint64_t v69 = v188;
    outlined init with copy of MLHandActionClassifier.GraphCNNModel(v174, v173);
    uint64_t v70 = v197;
    v58(v69, v198, v197);
    if (v67)
    {
      v193 = *v194;
      v193(v69, v70);
      outlined destroy of MLHandActionClassifier.GraphCNNModel(v68);
    }
    else
    {
      lazy protocol witness table accessor for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
      unint64_t v71 = Layer.parameterKeyPaths(recursively:)();
      MEMORY[0x270FA5388](v71);
      uint64_t v72 = v188;
      *((void *)&v158 - 2) = v68;
      *((void *)&v158 - 1) = v72;
      uint64_t v73 = v199;
      uint64_t v67 = specialized Sequence.first(where:)((uint64_t (*)(uint64_t *))partial apply for specialized closure #1 in Layer.parameterKeyPath(for:), (uint64_t)(&v158 - 2), v71);
      uint64_t v199 = v73;
      swift_bridgeObjectRelease();
      v193 = *v194;
      v193(v188, v70);
      outlined destroy of MLHandActionClassifier.GraphCNNModel(v68);
      if (!v67)
      {
LABEL_64:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v209._uint64_t countAndFlagsBits = 0;
        v209._object = (void *)0xE000000000000000;
        _StringGuts.grow(_:)(54);
        v150._object = (void *)0x80000002272D7D10;
        v150._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
        String.append(_:)(v150);
        String.append(_:)(v187);
        v151._uint64_t countAndFlagsBits = 0x697373696D202C60;
        v151._object = (void *)0xEC0000006020676ELL;
        String.append(_:)(v151);
        v152._uint64_t countAndFlagsBits = (uint64_t)v203;
        v152._object = (void *)v205;
        String.append(_:)(v152);
        swift_bridgeObjectRelease();
        v153._uint64_t countAndFlagsBits = 0x61702079656B2060;
        v153._object = (void *)0xEB000000002E6874;
        String.append(_:)(v153);
        uint64_t v154 = v209._countAndFlagsBits;
        uint64_t v155 = v209._object;
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError();
        *(void *)uint64_t v156 = v154;
        *(void *)(v156 + 8) = v155;
        *(_OWORD *)(v156 + 16) = 0u;
        *(_OWORD *)(v156 + 32) = 0u;
        *(unsigned char *)(v156 + 48) = 2;
        swift_willThrow();
        v193(v198, v197);
        outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v195, &demangling cache variable for type metadata for (name: String, parameter: Parameter));
        return (uint64_t)countAndFlagsBits;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v191 = v67;
    uint64_t v74 = specialized SGD.getStatesDictionary(for:name:)(v67, v66, (unint64_t)v56);
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v217 = countAndFlagsBits;
    specialized LazyMapSequence.makeIterator()(v74, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v211);
    uint64_t v204 = v216;
    v203 = (void *)v211[0];
    v201 = (void *)v211[1];
    *(void *)&long long v205 = v213;
    unint64_t v76 = v214;
    v202 = v215;
    uint64_t v189 = v212;
    int64_t v200 = (unint64_t)(v212 + 64) >> 6;
    uint64_t v190 = v74;
    swift_bridgeObjectRetain();
    while (1)
    {
      if (v76)
      {
        unint64_t v77 = __clz(__rbit64(v76));
        v76 &= v76 - 1;
        unint64_t v78 = v77 | ((void)v205 << 6);
        goto LABEL_27;
      }
      int64_t v79 = v205 + 1;
      if (__OFADD__((void)v205, 1))
      {
        __break(1u);
LABEL_67:
        __break(1u);
        goto LABEL_68;
      }
      if (v79 >= v200) {
        goto LABEL_43;
      }
      unint64_t v80 = v201[v79];
      if (!v80) {
        break;
      }
LABEL_26:
      unint64_t v76 = (v80 - 1) & v80;
      unint64_t v78 = __clz(__rbit64(v80)) + (v79 << 6);
      *(void *)&long long v205 = v79;
LABEL_27:
      uint64_t v82 = (uint64_t *)(v203[6] + 16 * v78);
      uint64_t v83 = (void *)v82[1];
      uint64_t v84 = *(void *)(v203[7] + 8 * v78);
      v209._uint64_t countAndFlagsBits = *v82;
      v209._object = v83;
      uint64_t v210 = v84;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      ((void (*)(uint64_t *__return_ptr, Swift::String *))v202)(&v206, &v209);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v86 = v206;
      uint64_t v85 = v207;
      uint64_t v87 = v208;
      unint64_t v89 = specialized __RawDictionaryStorage.find<A>(_:)(v206, v207);
      uint64_t v90 = countAndFlagsBits[2];
      BOOL v91 = (v88 & 1) == 0;
      uint64_t v92 = v90 + v91;
      if (__OFADD__(v90, v91))
      {
        __break(1u);
LABEL_63:
        __break(1u);
        goto LABEL_64;
      }
      char v93 = v88;
      if (countAndFlagsBits[3] >= v92)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [Double]>);
          _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v92, isUniquelyReferenced_nonNull_native & 1);
        unint64_t v94 = specialized __RawDictionaryStorage.find<A>(_:)(v86, v85);
        if ((v93 & 1) != (v95 & 1)) {
          goto LABEL_72;
        }
        unint64_t v89 = v94;
      }
      uint64_t countAndFlagsBits = v217;
      if (v93)
      {
        uint64_t v96 = *(void *)(v217[7] + 8 * v89);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v97 = countAndFlagsBits[7];
        swift_bridgeObjectRelease();
        *(void *)(v97 + 8 * v89) = v96;
        char isUniquelyReferenced_nonNull_native = 1;
      }
      else
      {
        v217[(v89 >> 6) + 8] |= 1 << v89;
        uint64_t v98 = (uint64_t *)(countAndFlagsBits[6] + 16 * v89);
        uint64_t *v98 = v86;
        v98[1] = v85;
        *(void *)(countAndFlagsBits[7] + 8 * v89) = v87;
        uint64_t v99 = countAndFlagsBits[2];
        BOOL v100 = __OFADD__(v99, 1);
        uint64_t v101 = v99 + 1;
        if (v100) {
          goto LABEL_63;
        }
        countAndFlagsBits[2] = v101;
        char isUniquelyReferenced_nonNull_native = 1;
      }
    }
    int64_t v81 = v205 + 2;
    if ((uint64_t)v205 + 2 >= v200) {
      goto LABEL_43;
    }
    unint64_t v80 = v201[v81];
    if (v80) {
      goto LABEL_25;
    }
    int64_t v81 = v205 + 3;
    if ((uint64_t)v205 + 3 >= v200) {
      goto LABEL_43;
    }
    unint64_t v80 = v201[v81];
    if (v80) {
      goto LABEL_25;
    }
    int64_t v81 = v205 + 4;
    if ((uint64_t)v205 + 4 >= v200) {
      goto LABEL_43;
    }
    unint64_t v80 = v201[v81];
    if (v80) {
      goto LABEL_25;
    }
    int64_t v81 = v205 + 5;
    if ((uint64_t)v205 + 5 >= v200) {
      goto LABEL_43;
    }
    unint64_t v80 = v201[v81];
    if (v80) {
      goto LABEL_25;
    }
    int64_t v81 = v205 + 6;
    if ((uint64_t)v205 + 6 >= v200) {
      goto LABEL_43;
    }
    unint64_t v80 = v201[v81];
    if (v80)
    {
LABEL_25:
      int64_t v79 = v81;
      goto LABEL_26;
    }
    int64_t v79 = v205 + 7;
    if ((uint64_t)v205 + 7 >= v200) {
      goto LABEL_43;
    }
    unint64_t v80 = v201[v79];
    if (v80) {
      goto LABEL_26;
    }
    int64_t v102 = v205 + 8;
    while (v102 < v200)
    {
      unint64_t v80 = v201[v102++];
      if (v80)
      {
        int64_t v79 = v102 - 1;
        goto LABEL_26;
      }
    }
LABEL_43:
    swift_bridgeObjectRelease();
    outlined consume of [String : [Int]].Iterator._Variant();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v43 = v197;
    v193(v198, v197);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v195, &demangling cache variable for type metadata for (name: String, parameter: Parameter));
    int v44 = 1;
    unint64_t v45 = 1;
    if ((v192 & 1) == 0) {
      continue;
    }
    break;
  }
  swift_setDeallocating();
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(name: String, state: LayerState)>);
  unint64_t v103 = *(char **)(v159 + 72);
  unint64_t v104 = (*(unsigned __int8 *)(v159 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v159 + 80);
  uint64_t v105 = swift_allocObject();
  *(_OWORD *)(v105 + 16) = v158;
  v203 = (void *)v105;
  unint64_t v106 = v105 + v104;
  uint64_t v107 = v163;
  *(void *)unint64_t v106 = 0x4D676E696E6E7572;
  *(void *)(v106 + 8) = 0xEB000000006E6165;
  BatchNorm.$runningMean.getter();
  v202 = v103;
  v201 = (void *)v106;
  int64_t v108 = &v103[v106];
  *(void *)int64_t v108 = 0x56676E696E6E7572;
  *((void *)v108 + 1) = 0xEF65636E61697261;
  BatchNorm.$runningVariance.getter();
  int v109 = 0;
  unint64_t v110 = 0;
  int64_t v200 = (int64_t)v162 + *(int *)(v107 + 48);
  uint64_t v111 = v163;
  while (v110 < v203[2])
  {
    LODWORD(v204) = v109;
    uint64_t v112 = v162;
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v201 + v110 * (void)v202, (uint64_t)v162, &demangling cache variable for type metadata for (name: String, state: LayerState));
    unint64_t v113 = v178;
    uint64_t v114 = (char *)v178 + *(int *)(v111 + 48);
    uint64_t v115 = *v112;
    BOOL v116 = (void *)v112[1];
    *int64_t v178 = *v112;
    v113[1] = (uint64_t)v116;
    uint64_t v117 = type metadata accessor for LayerState();
    uint64_t v118 = *(void *)(v117 - 8);
    (*(void (**)(char *, int64_t, uint64_t))(v118 + 32))(v114, v200, v117);
    Swift::String v209 = v187;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v119._uint64_t countAndFlagsBits = 46;
    v119._object = (void *)0xE100000000000000;
    String.append(_:)(v119);
    v120._uint64_t countAndFlagsBits = v115;
    v120._object = v116;
    String.append(_:)(v120);
    uint64_t v121 = v209._object;
    *(void *)&long long v205 = v209._countAndFlagsBits;
    uint64_t v122 = v161;
    uint64_t v123 = (char *)v161 + *(int *)(v111 + 48);
    *uint64_t v161 = v115;
    v122[1] = (uint64_t)v116;
    (*(void (**)(char *, char *, uint64_t))(v118 + 16))(v123, v114, v117);
    uint64_t v124 = swift_bridgeObjectRelease();
    MEMORY[0x22A6724D0](v124);
    (*(void (**)(char *, uint64_t))(v118 + 8))(v123, v117);
    Tensor.shape.getter();
    uint64_t v125 = TensorShape.dimensions.getter();
    uint64_t v126 = *(void *)(v125 + 16);
    if (v126)
    {
      unint64_t v127 = (uint64_t *)(v125 + 32);
      uint64_t v128 = 1;
      while (1)
      {
        uint64_t v129 = *v127++;
        uint64_t v130 = v128 * v129;
        if ((unsigned __int128)(v128 * (__int128)v129) >> 64 != (v128 * v129) >> 63) {
          goto LABEL_67;
        }
        uint64_t v128 = v130;
        if (!--v126) {
          goto LABEL_52;
        }
      }
    }
    uint64_t v130 = 1;
LABEL_52:
    swift_bridgeObjectRelease();
    uint64_t v131 = v182(v180, v186);
    MEMORY[0x270FA5388](v131);
    uint64_t v132 = v179;
    *((void *)&v158 - 2) = v179;
    uint64_t v133 = v199;
    uint64_t v134 = specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(v130, (uint64_t (*)(void *, uint64_t *))closure #1 in Tensor.doubleArray()partial apply, (uint64_t)(&v158 - 2));
    uint64_t v199 = v133;
    v181(v132, v185);
    char v135 = swift_isUniquelyReferenced_nonNull_native();
    v209._uint64_t countAndFlagsBits = (uint64_t)countAndFlagsBits;
    uint64_t v136 = v205;
    unint64_t v137 = specialized __RawDictionaryStorage.find<A>(_:)(v205, (uint64_t)v121);
    uint64_t v139 = countAndFlagsBits[2];
    BOOL v140 = (v138 & 1) == 0;
    Swift::Int v141 = v139 + v140;
    if (__OFADD__(v139, v140)) {
      goto LABEL_70;
    }
    unint64_t v142 = v137;
    char v143 = v138;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [Double]>);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v135, v141))
    {
      unint64_t v144 = specialized __RawDictionaryStorage.find<A>(_:)(v136, (uint64_t)v121);
      if ((v143 & 1) != (v145 & 1)) {
        goto LABEL_72;
      }
      unint64_t v142 = v144;
    }
    uint64_t countAndFlagsBits = (void *)v209._countAndFlagsBits;
    if (v143)
    {
      uint64_t v146 = *(void *)(v209._countAndFlagsBits + 56);
      swift_bridgeObjectRelease();
      *(void *)(v146 + 8 * v142) = v134;
    }
    else
    {
      *(void *)(v209._countAndFlagsBits + 8 * (v142 >> 6) + 64) |= 1 << v142;
      uint64_t v147 = (uint64_t *)(countAndFlagsBits[6] + 16 * v142);
      *uint64_t v147 = v136;
      v147[1] = (uint64_t)v121;
      *(void *)(countAndFlagsBits[7] + 8 * v142) = v134;
      uint64_t v148 = countAndFlagsBits[2];
      BOOL v100 = __OFADD__(v148, 1);
      uint64_t v149 = v148 + 1;
      if (v100) {
        goto LABEL_71;
      }
      countAndFlagsBits[2] = v149;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v178, &demangling cache variable for type metadata for (name: String, state: LayerState));
    int v109 = 1;
    unint64_t v110 = 1;
    if (v204)
    {
      swift_setDeallocating();
      specialized _ContiguousArrayStorage.__deallocating_deinit();
      return (uint64_t)countAndFlagsBits;
    }
  }
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized Dense.getStatesDictionary<A, B>(_:layerName:optimizer:parameterKeyPathLookup:)(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v149 = a5;
  uint64_t v147 = a4;
  uint64_t v161 = a3;
  uint64_t v159 = a2;
  uint64_t v150 = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parameter?);
  MEMORY[0x270FA5388](v6 - 8);
  BOOL v140 = (char *)&v132 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v146 = type metadata accessor for Dense();
  unint64_t v145 = *(void *)(v146 - 8);
  MEMORY[0x270FA5388](v146);
  unint64_t v144 = (char *)&v132 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v139 = type metadata accessor for MLHandActionClassifier.GraphCNNModel(0);
  uint64_t v9 = MEMORY[0x270FA5388](v139);
  uint64_t v133 = (uint64_t)&v132 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v143 = (uint64_t)&v132 - v11;
  uint64_t v158 = type metadata accessor for Parameter();
  uint64_t v151 = *(void *)(v158 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v158);
  uint64_t v132 = (char *)&v132 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v155 = (char *)&v132 - v15;
  MEMORY[0x270FA5388](v14);
  unint64_t v142 = (char *)&v132 - v16;
  uint64_t v153 = type metadata accessor for TensorShape();
  uint64_t v17 = *(void *)(v153 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v153);
  char v138 = (char *)&v132 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v132 - v21;
  MEMORY[0x270FA5388](v20);
  uint64_t v24 = (char *)&v132 - v23;
  uint64_t v152 = type metadata accessor for Tensor();
  uint64_t v25 = *(void *)(v152 - 8);
  uint64_t v26 = MEMORY[0x270FA5388](v152);
  BOOL v28 = (char *)&v132 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v26);
  uint64_t v30 = (char *)&v132 - v29;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [Double])>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2272CB4D0;
  unint64_t v164 = a2;
  unint64_t v165 = (unint64_t)v161;
  swift_bridgeObjectRetain();
  v32._uint64_t countAndFlagsBits = 0x7468676965772ELL;
  v32._object = (void *)0xE700000000000000;
  String.append(_:)(v32);
  unint64_t v33 = v165;
  *(void *)(inited + 32) = v164;
  *(void *)(inited + 40) = v33;
  Dense.weight.getter();
  Tensor.shape.getter();
  uint64_t v34 = TensorShape.contiguousSize.getter();
  uint64_t v35 = *(void (**)(char *, uint64_t))(v17 + 8);
  uint64_t v136 = v24;
  uint64_t v36 = v153;
  uint64_t v157 = v17 + 8;
  uint64_t v156 = v35;
  v35(v24, v153);
  uint64_t v163 = v30;
  unint64_t v37 = v154;
  uint64_t v38 = specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(v34, (uint64_t (*)(void *, uint64_t *))closure #1 in Tensor.doubleArray()partial apply, (uint64_t)v162);
  unint64_t v154 = v37;
  unint64_t v39 = *(void (**)(char *, uint64_t))(v25 + 8);
  char v135 = v30;
  uint64_t v40 = v30;
  uint64_t v41 = v152;
  v39(v40, v152);
  *(void *)(inited + 48) = v38;
  unint64_t v164 = v159;
  unint64_t v165 = (unint64_t)v161;
  swift_bridgeObjectRetain();
  v42._uint64_t countAndFlagsBits = 0x2E7468676965772ELL;
  v42._object = (void *)0xED00006570616873;
  String.append(_:)(v42);
  unint64_t v43 = v165;
  *(void *)(inited + 56) = v164;
  *(void *)(inited + 64) = v43;
  uint64_t v141 = inited;
  Dense.weight.getter();
  Tensor.shape.getter();
  uint64_t v137 = v25 + 8;
  v39(v28, v41);
  uint64_t v44 = lazy protocol witness table accessor for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel((unint64_t *)&lazy protocol witness table cache variable for type TensorShape and conformance TensorShape, MEMORY[0x263F58358]);
  uint64_t v45 = dispatch thunk of Collection.count.getter();
  uint64_t v46 = MEMORY[0x263F8EE78];
  uint64_t v148 = v44;
  uint64_t v134 = v39;
  if (v45)
  {
    uint64_t v47 = v45;
    uint64_t v166 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v45 & ~(v45 >> 63), 0);
    uint64_t v46 = v166;
    dispatch thunk of Collection.startIndex.getter();
    if (v47 < 0)
    {
      __break(1u);
      goto LABEL_35;
    }
    do
    {
      uint64_t v48 = (void (*)(unint64_t *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v50 = *v49;
      v48(&v164, 0);
      uint64_t v166 = v46;
      unint64_t v52 = *(void *)(v46 + 16);
      unint64_t v51 = *(void *)(v46 + 24);
      if (v52 >= v51 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v51 > 1, v52 + 1, 1);
        uint64_t v46 = v166;
      }
      *(void *)(v46 + 16) = v52 + 1;
      *(double *)(v46 + 8 * v52 + 32) = (double)v50;
      dispatch thunk of Collection.formIndex(after:)();
      --v47;
    }
    while (v47);
  }
  unint64_t v53 = (unint64_t)v161;
  v156(v22, v36);
  *(void *)(v141 + 72) = v46;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
  uint64_t v54 = Dictionary.init(dictionaryLiteral:)();
  uint64_t v55 = v151;
  uint64_t v56 = v149;
  uint64_t v57 = v160;
  unint64_t v58 = v145;
  if (v149)
  {
    uint64_t v59 = v142;
    Dense.$weight.getter();
    uint64_t v60 = Parameter.id.getter();
    (*(void (**)(char *, uint64_t))(v55 + 8))(v59, v158);
    uint64_t v56 = specialized Dictionary.subscript.getter(v60, v56);
  }
  uint64_t v61 = v143;
  outlined init with copy of MLHandActionClassifier.GraphCNNModel(v150, v143);
  BOOL v62 = v144;
  uint64_t v63 = v57;
  uint64_t v64 = v146;
  (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v144, v63, v146);
  if (v56)
  {
    (*(void (**)(char *, uint64_t))(v58 + 8))(v62, v64);
    outlined destroy of MLHandActionClassifier.GraphCNNModel(v61);
  }
  else
  {
    uint64_t v141 = v54;
    uint64_t v65 = v55;
    unint64_t v66 = v142;
    Dense.$weight.getter();
    lazy protocol witness table accessor for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
    uint64_t v67 = v61;
    unint64_t v68 = Layer.parameterKeyPaths(recursively:)();
    MEMORY[0x270FA5388](v68);
    *(&v132 - 2) = (char *)v67;
    *(&v132 - 1) = v66;
    unint64_t v69 = v154;
    uint64_t v56 = specialized Sequence.first(where:)((uint64_t (*)(uint64_t *))closure #1 in Layer.parameterKeyPath(for:)specialized partial apply, (uint64_t)(&v132 - 4), v68);
    unint64_t v154 = v69;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v65 + 8))(v66, v158);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v62, v64);
    outlined destroy of MLHandActionClassifier.GraphCNNModel(v67);
    if (!v56)
    {
      swift_bridgeObjectRelease();
      unint64_t v164 = 0;
      unint64_t v165 = 0xE000000000000000;
      _StringGuts.grow(_:)(58);
      v121._object = (void *)0x80000002272D7D10;
      v121._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
      String.append(_:)(v121);
      v122._uint64_t countAndFlagsBits = v159;
      v122._object = v161;
      String.append(_:)(v122);
      v123._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
      v123._object = (void *)0x80000002272D7D70;
      String.append(_:)(v123);
      unint64_t v124 = v164;
      unint64_t v74 = v165;
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError();
      *(void *)uint64_t v125 = v124;
      *(void *)(v125 + 8) = v74;
      *(_OWORD *)(v125 + 16) = 0u;
      *(_OWORD *)(v125 + 32) = 0u;
      *(unsigned char *)(v125 + 48) = 2;
      swift_willThrow();
      return v74;
    }
    unint64_t v53 = (unint64_t)v161;
    uint64_t v55 = v65;
    uint64_t v54 = v141;
  }
  unint64_t v164 = v159;
  unint64_t v165 = v53;
  swift_bridgeObjectRetain();
  v70._uint64_t countAndFlagsBits = 0x7468676965772ELL;
  v70._object = (void *)0xE700000000000000;
  String.append(_:)(v70);
  uint64_t v71 = specialized SGD.getStatesDictionary(for:name:)(v56, v164, v165);
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v164 = v54;
  unint64_t v73 = v154;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v71, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v164);
  if (v73) {
    goto LABEL_36;
  }
  unint64_t v74 = v164;
  swift_bridgeObjectRelease();
  uint64_t v75 = v140;
  Dense.$bias.getter();
  uint64_t v76 = (uint64_t)v75;
  uint64_t v77 = (uint64_t)v75;
  uint64_t v78 = v158;
  if (__swift_getEnumTagSinglePayload(v77, 1, v158) == 1)
  {
    swift_release();
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v76, &demangling cache variable for type metadata for Parameter?);
    return v74;
  }
  uint64_t v146 = v56;
  (*(void (**)(char *, uint64_t, uint64_t))(v55 + 32))(v155, v76, v78);
  unint64_t v79 = v159;
  unint64_t v164 = v159;
  unint64_t v165 = v53;
  swift_bridgeObjectRetain();
  v80._uint64_t countAndFlagsBits = 0x736169622ELL;
  v80._object = (void *)0xE500000000000000;
  String.append(_:)(v80);
  unint64_t v154 = v164;
  unint64_t v81 = v53;
  uint64_t v82 = v135;
  MEMORY[0x22A672DE0]();
  uint64_t v83 = v136;
  Tensor.shape.getter();
  uint64_t v84 = TensorShape.contiguousSize.getter();
  uint64_t v85 = v83;
  uint64_t v86 = v153;
  uint64_t v87 = ((uint64_t (*)(char *, uint64_t))v156)(v85, v153);
  MEMORY[0x270FA5388](v87);
  *(&v132 - 2) = v82;
  specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(v84, (uint64_t (*)(void *, uint64_t *))closure #1 in Tensor.doubleArray()partial apply, (uint64_t)(&v132 - 4));
  uint64_t v160 = 0;
  char v88 = v82;
  unint64_t v89 = (void *)v81;
  v134(v88, v152);
  swift_isUniquelyReferenced_nonNull_native();
  unint64_t v164 = v74;
  uint64_t v90 = v86;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
  unint64_t v91 = v164;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v164 = v79;
  unint64_t v165 = v81;
  uint64_t v92 = v155;
  swift_bridgeObjectRetain();
  v93._uint64_t countAndFlagsBits = 0x68732E736169622ELL;
  v93._object = (void *)0xEB00000000657061;
  String.append(_:)(v93);
  unint64_t v145 = v164;
  uint64_t v152 = v165;
  unint64_t v94 = v138;
  Parameter.shape.getter();
  uint64_t v95 = dispatch thunk of Collection.count.getter();
  unint64_t v154 = v91;
  if (!v95)
  {
    uint64_t v103 = v158;
    goto LABEL_22;
  }
  uint64_t v96 = v95;
  uint64_t v166 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v95 & ~(v95 >> 63), 0);
  uint64_t v97 = v166;
  dispatch thunk of Collection.startIndex.getter();
  if (v96 < 0)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  do
  {
    uint64_t v98 = (void (*)(unint64_t *, void))dispatch thunk of Collection.subscript.read();
    uint64_t v100 = *v99;
    v98(&v164, 0);
    uint64_t v166 = v97;
    unint64_t v102 = *(void *)(v97 + 16);
    unint64_t v101 = *(void *)(v97 + 24);
    if (v102 >= v101 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v101 > 1, v102 + 1, 1);
      uint64_t v97 = v166;
    }
    *(void *)(v97 + 16) = v102 + 1;
    *(double *)(v97 + 8 * v102 + 32) = (double)v100;
    dispatch thunk of Collection.formIndex(after:)();
    --v96;
  }
  while (v96);
  uint64_t v103 = v158;
  unint64_t v89 = v161;
  uint64_t v92 = v155;
LABEL_22:
  v156(v94, v90);
  unint64_t v104 = v154;
  swift_isUniquelyReferenced_nonNull_native();
  unint64_t v164 = v104;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
  unint64_t v105 = v164;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v106 = v149;
  if (v149)
  {
    uint64_t v107 = Parameter.id.getter();
    uint64_t v108 = specialized Dictionary.subscript.getter(v107, v106);
  }
  else
  {
    uint64_t v108 = 0;
  }
  uint64_t v109 = v151;
  uint64_t v110 = v133;
  outlined init with copy of MLHandActionClassifier.GraphCNNModel(v150, v133);
  uint64_t v111 = v132;
  (*(void (**)(char *, char *, uint64_t))(v109 + 16))(v132, v92, v103);
  if (v108)
  {
    uint64_t v112 = *(void (**)(char *, uint64_t))(v109 + 8);
    v112(v111, v103);
    outlined destroy of MLHandActionClassifier.GraphCNNModel(v110);
  }
  else
  {
    lazy protocol witness table accessor for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
    unint64_t v113 = v111;
    uint64_t v114 = v110;
    unint64_t v115 = Layer.parameterKeyPaths(recursively:)();
    MEMORY[0x270FA5388](v115);
    *(&v132 - 2) = (char *)v114;
    *(&v132 - 1) = v113;
    uint64_t v116 = v160;
    uint64_t v108 = specialized Sequence.first(where:)((uint64_t (*)(uint64_t *))closure #1 in Layer.parameterKeyPath(for:)specialized partial apply, (uint64_t)(&v132 - 4), v115);
    uint64_t v160 = v116;
    swift_bridgeObjectRelease();
    uint64_t v112 = *(void (**)(char *, uint64_t))(v109 + 8);
    v112(v113, v103);
    outlined destroy of MLHandActionClassifier.GraphCNNModel(v114);
    if (!v108)
    {
      swift_bridgeObjectRelease();
      unint64_t v164 = 0;
      unint64_t v165 = 0xE000000000000000;
      _StringGuts.grow(_:)(56);
      v126._object = (void *)0x80000002272D7D10;
      v126._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
      String.append(_:)(v126);
      v127._uint64_t countAndFlagsBits = v159;
      v127._object = v89;
      String.append(_:)(v127);
      v128._object = (void *)0x80000002272D7D90;
      v128._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
      String.append(_:)(v128);
      unint64_t v129 = v164;
      unint64_t v74 = v165;
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError();
      *(void *)uint64_t v130 = v129;
      *(void *)(v130 + 8) = v74;
      *(_OWORD *)(v130 + 16) = 0u;
      *(_OWORD *)(v130 + 32) = 0u;
      *(unsigned char *)(v130 + 48) = 2;
      swift_willThrow();
      swift_release();
      v112(v155, v103);
      return v74;
    }
    uint64_t v92 = v155;
  }
  unint64_t v164 = v159;
  unint64_t v165 = (unint64_t)v89;
  swift_bridgeObjectRetain();
  v117._uint64_t countAndFlagsBits = 0x736169622ELL;
  v117._object = (void *)0xE500000000000000;
  String.append(_:)(v117);
  uint64_t v118 = specialized SGD.getStatesDictionary(for:name:)(v108, v164, v165);
  swift_bridgeObjectRelease();
  char v119 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v164 = v105;
  uint64_t v120 = v160;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v118, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v119, &v164);
  if (!v120)
  {
    unint64_t v74 = v164;
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    v112(v92, v103);
    return v74;
  }
LABEL_36:
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

void specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)()
{
  OUTLINED_FUNCTION_38_10();
  uint64_t v1 = v0;
  char v3 = v2;
  uint64_t v4 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MLDataValue, MLDataValue>);
  char v49 = v3;
  uint64_t v5 = static _DictionaryStorage.resize(original:capacity:move:)();
  if (!*(void *)(v4 + 16)) {
    goto LABEL_47;
  }
  uint64_t v47 = (void *)(v4 + 64);
  OUTLINED_FUNCTION_30_12();
  unint64_t v8 = v7 & v6;
  uint64_t v45 = v0;
  int64_t v46 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v10 = v5 + 64;
  swift_retain();
  int64_t v11 = 0;
  uint64_t v48 = v4;
  if (!v8) {
    goto LABEL_4;
  }
LABEL_3:
  unint64_t v12 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = v22 + (v11 << 6))
  {
    uint64_t v23 = 3 * i;
    uint64_t v24 = *(void *)(v4 + 56);
    uint64_t v25 = *(void *)(v4 + 48) + 8 * v23;
    Swift::UInt64 v27 = *(void *)v25;
    uint64_t v26 = *(void *)(v25 + 8);
    uint64_t v28 = *(unsigned __int8 *)(v25 + 16);
    uint64_t v29 = v24 + 8 * v23;
    uint64_t v31 = *(void **)v29;
    uint64_t v30 = *(void **)(v29 + 8);
    char v32 = *(unsigned char *)(v29 + 16);
    if ((v49 & 1) == 0)
    {
      outlined copy of MLDataValue(*(id *)v25, *(id *)(v25 + 8), *(unsigned char *)(v25 + 16));
      outlined copy of MLDataValue(v31, v30, v32);
    }
    Hasher.init(_seed:)();
    switch(v28)
    {
      case 1:
        if ((v27 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
          Swift::UInt64 v34 = v27;
        }
        else {
          Swift::UInt64 v34 = 0;
        }
        Hasher._combine(_:)(v34);
        goto LABEL_28;
      case 2:
        String.hash(into:)();
        goto LABEL_28;
      case 3:
        OUTLINED_FUNCTION_31_10();
        OUTLINED_FUNCTION_42_9();
        goto LABEL_53;
      case 4:
      case 5:
        goto LABEL_51;
      case 6:
        Swift::UInt v33 = 1;
        goto LABEL_27;
      default:
        Swift::UInt v33 = v27;
LABEL_27:
        Hasher._combine(_:)(v33);
LABEL_28:
        Hasher._finalize()();
        OUTLINED_FUNCTION_25_18();
        if (!v35)
        {
          OUTLINED_FUNCTION_2_42();
          goto LABEL_38;
        }
        OUTLINED_FUNCTION_30_10();
        break;
    }
    do
    {
      OUTLINED_FUNCTION_19_18();
      if (v35 && (v37 & 1) != 0)
      {
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        OUTLINED_FUNCTION_42_9();
        OUTLINED_FUNCTION_52_5();
LABEL_53:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x227164A1CLL);
      }
      OUTLINED_FUNCTION_51_7();
      if (v35) {
        uint64_t v38 = 0;
      }
    }
    while (*(void *)(v10 + 8 * v38) == -1);
    OUTLINED_FUNCTION_0_17();
LABEL_38:
    *(void *)(v10 + ((v36 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v36;
    uint64_t v39 = 3 * v36;
    uint64_t v40 = *(void *)(v5 + 48) + 8 * v39;
    *(void *)uint64_t v40 = v27;
    *(void *)(v40 + 8) = v26;
    *(unsigned char *)(v40 + 16) = v28;
    uint64_t v41 = *(void *)(v5 + 56) + 8 * v39;
    *(void *)uint64_t v41 = v31;
    *(void *)(v41 + 8) = v30;
    *(unsigned char *)(v41 + 16) = v32;
    OUTLINED_FUNCTION_6_28();
    uint64_t v4 = v48;
    if (v8) {
      goto LABEL_3;
    }
LABEL_4:
    int64_t v14 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_49;
    }
    if (v14 >= v46)
    {
      swift_release();
      uint64_t v15 = v47;
      goto LABEL_42;
    }
    uint64_t v15 = v47;
    ++v11;
    if (!v47[v14])
    {
      int64_t v11 = v14 + 1;
      if (v14 + 1 >= v46) {
        goto LABEL_40;
      }
      if (!v47[v11]) {
        break;
      }
    }
LABEL_16:
    OUTLINED_FUNCTION_13_26();
    unint64_t v8 = v21 & v20;
  }
  OUTLINED_FUNCTION_50_8();
  if (v18 != v19)
  {
    if (!v47[v16])
    {
      while (1)
      {
        int64_t v11 = v16 + 1;
        if (__OFADD__(v16, 1)) {
          goto LABEL_50;
        }
        if (v11 >= v17) {
          goto LABEL_40;
        }
        ++v16;
        if (v47[v11]) {
          goto LABEL_16;
        }
      }
    }
    int64_t v11 = v16;
    goto LABEL_16;
  }
LABEL_40:
  swift_release();
LABEL_42:
  uint64_t v1 = v45;
  if (v49)
  {
    if (1 << *(unsigned char *)(v4 + 32) >= 64)
    {
      uint64_t v43 = OUTLINED_FUNCTION_22_16();
      specialized UnsafeMutablePointer.assign(repeating:count:)(v43, v44, v15);
    }
    else
    {
      OUTLINED_FUNCTION_32_12();
      *uint64_t v15 = v42;
    }
    *(void *)(v4 + 16) = 0;
  }
LABEL_47:
  swift_release();
  *uint64_t v1 = v5;
  OUTLINED_FUNCTION_35_11();
}

{
  unint64_t v0;
  void *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  Swift::UInt64 v17;
  uint64_t v18;
  uint64_t v19;
  Swift::UInt v20;
  Swift::UInt64 v21;
  char v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;

  OUTLINED_FUNCTION_38_10();
  char v2 = v0;
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_5_31();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MLDataValue, Int>);
  static _DictionaryStorage.resize(original:capacity:move:)();
  OUTLINED_FUNCTION_23_9();
  if (v5)
  {
    OUTLINED_FUNCTION_10_20();
    unint64_t v36 = v6;
    OUTLINED_FUNCTION_40_7();
    char v35 = v7;
    swift_retain();
    unint64_t v8 = 0;
    uint64_t v9 = 24;
    if (!v0) {
      goto LABEL_4;
    }
    while (2)
    {
      uint64_t v10 = __clz(__rbit64(v2));
      v2 &= v2 - 1;
      int64_t v11 = v10 | (v8 << 6);
LABEL_16:
      uint64_t v15 = v1[6] + v11 * v9;
      int64_t v17 = *(void *)v15;
      int64_t v16 = *(void *)(v15 + 8);
      char v18 = *(unsigned __int8 *)(v15 + 16);
      char v19 = *(void *)(v1[7] + 8 * v11);
      if ((v4 & 1) == 0) {
        outlined copy of MLDataValue(*(id *)v15, *(id *)(v15 + 8), *(unsigned char *)(v15 + 16));
      }
      Hasher.init(_seed:)();
      switch(v18)
      {
        case 1:
          if ((v17 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
            uint64_t v21 = v17;
          }
          else {
            uint64_t v21 = 0;
          }
          Hasher._combine(_:)(v21);
          goto LABEL_27;
        case 2:
          String.hash(into:)();
          goto LABEL_27;
        case 3:
          goto LABEL_48;
        case 4:
        case 5:
          OUTLINED_FUNCTION_42_9();
          OUTLINED_FUNCTION_52_5();
          goto LABEL_50;
        case 6:
          uint64_t v20 = 1;
          goto LABEL_26;
        default:
          uint64_t v20 = v17;
LABEL_26:
          Hasher._combine(_:)(v20);
LABEL_27:
          Hasher._finalize()();
          OUTLINED_FUNCTION_26_14();
          if (!v22)
          {
            OUTLINED_FUNCTION_2_42();
            goto LABEL_37;
          }
          OUTLINED_FUNCTION_30_10();
          break;
      }
      do
      {
        OUTLINED_FUNCTION_19_18();
        if (v22 && (v24 & 1) != 0)
        {
          __break(1u);
LABEL_46:
          __break(1u);
          goto LABEL_47;
        }
        OUTLINED_FUNCTION_51_7();
        if (v22) {
          uint64_t v25 = 0;
        }
      }
      while (*(void *)(v4 + 64 + 8 * v25) == -1);
      OUTLINED_FUNCTION_0_17();
LABEL_37:
      OUTLINED_FUNCTION_24_18(v23);
      uint64_t v29 = v27 + v26 * v28;
      *(void *)uint64_t v29 = v17;
      *(void *)(v29 + 8) = v16;
      *(unsigned char *)(v29 + 16) = v18;
      *(void *)(*(void *)(v4 + 56) + 8 * v26) = v19;
      OUTLINED_FUNCTION_6_28();
      if (v2) {
        continue;
      }
      break;
    }
LABEL_4:
    unint64_t v12 = v8 + 1;
    if (__OFADD__(v8, 1)) {
      goto LABEL_46;
    }
    if (v12 < v35)
    {
      uint64_t v13 = v36[v12];
      ++v8;
      if (v13) {
        goto LABEL_15;
      }
      unint64_t v8 = v12 + 1;
      if (v12 + 1 < v35)
      {
        uint64_t v13 = v36[v8];
        if (v13) {
          goto LABEL_15;
        }
        int64_t v14 = v12 + 2;
        if (v14 < v35)
        {
          uint64_t v13 = v36[v14];
          if (v13)
          {
            unint64_t v8 = v14;
LABEL_15:
            char v2 = (v13 - 1) & v13;
            int64_t v11 = __clz(__rbit64(v13)) + (v8 << 6);
            goto LABEL_16;
          }
          while (1)
          {
            unint64_t v8 = v14 + 1;
            if (__OFADD__(v14, 1)) {
              break;
            }
            if (v8 >= v35) {
              goto LABEL_39;
            }
            uint64_t v13 = v36[v8];
            ++v14;
            if (v13) {
              goto LABEL_15;
            }
          }
LABEL_47:
          __break(1u);
LABEL_48:
          OUTLINED_FUNCTION_31_10();
          OUTLINED_FUNCTION_42_9();
LABEL_50:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          JUMPOUT(0x227164D58);
        }
      }
    }
LABEL_39:
    swift_release();
    char v2 = v0;
    if (v4)
    {
      OUTLINED_FUNCTION_3_38();
      if (v30 != v31)
      {
        OUTLINED_FUNCTION_32_12();
        uint64_t *v36 = v32;
      }
      else
      {
        Swift::UInt v33 = OUTLINED_FUNCTION_22_16();
        specialized UnsafeMutablePointer.assign(repeating:count:)(v33, v34, v36);
      }
      v1[2] = 0;
    }
  }
  swift_release();
  *(void *)char v2 = v4;
  OUTLINED_FUNCTION_35_11();
}

void specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, int a13, char a14)
{
  OUTLINED_FUNCTION_41_7();
  int64_t v16 = v14;
  uint64_t v18 = v17;
  OUTLINED_FUNCTION_5_31();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, MLUntypedColumn>);
  OUTLINED_FUNCTION_14_19();
  OUTLINED_FUNCTION_23_9();
  if (v19)
  {
    OUTLINED_FUNCTION_17_18();
    OUTLINED_FUNCTION_40_7();
    uint64_t v46 = v20;
    uint64_t v21 = v18 + 64;
    swift_retain();
    uint64_t v22 = 0;
    if (!v14) {
      goto LABEL_4;
    }
LABEL_3:
    OUTLINED_FUNCTION_37_9();
    while (1)
    {
      uint64_t v26 = (uint64_t *)(v15[6] + 16 * v23);
      uint64_t v28 = *v26;
      uint64_t v27 = v26[1];
      uint64_t v29 = v15[7] + 16 * v23;
      uint64_t v30 = *(void **)v29;
      char v31 = *(unsigned char *)(v29 + 8);
      if ((a14 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        outlined copy of Result<_DataTable, Error>(v30, v31);
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      Hasher._finalize()();
      OUTLINED_FUNCTION_25_18();
      if (v32)
      {
        OUTLINED_FUNCTION_30_10();
        while (1)
        {
          OUTLINED_FUNCTION_19_18();
          if (v32)
          {
            if (v33) {
              break;
            }
          }
          if (v34 == v35) {
            uint64_t v34 = 0;
          }
          if (*(void *)(v21 + 8 * v34) != -1)
          {
            OUTLINED_FUNCTION_0_17();
            goto LABEL_28;
          }
        }
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_2_42();
LABEL_28:
      OUTLINED_FUNCTION_16_20();
      *(void *)(v21 + v36) |= v37;
      uint64_t v39 = (void *)(*(void *)(v18 + 48) + 16 * v38);
      void *v39 = v28;
      v39[1] = v27;
      uint64_t v40 = *(void *)(v18 + 56) + 16 * v38;
      *(void *)uint64_t v40 = v30;
      *(unsigned char *)(v40 + 8) = v31;
      OUTLINED_FUNCTION_6_28();
      if (v14) {
        goto LABEL_3;
      }
LABEL_4:
      uint64_t v24 = v22 + 1;
      if (__OFADD__(v22, 1)) {
        goto LABEL_37;
      }
      if (v24 >= v46) {
        goto LABEL_30;
      }
      ++v22;
      if (!a12[v24])
      {
        uint64_t v22 = v24 + 1;
        if (v24 + 1 >= v46) {
          goto LABEL_30;
        }
        if (!a12[v22])
        {
          uint64_t v25 = v24 + 2;
          if (v25 >= v46)
          {
LABEL_30:
            swift_release();
            int64_t v16 = v14;
            if (a14)
            {
              OUTLINED_FUNCTION_3_38();
              if (v41 != v42)
              {
                OUTLINED_FUNCTION_32_12();
                *a12 = v43;
              }
              else
              {
                uint64_t v44 = OUTLINED_FUNCTION_22_16();
                specialized UnsafeMutablePointer.assign(repeating:count:)(v44, v45, a12);
              }
              v15[2] = 0;
            }
            break;
          }
          if (!a12[v25])
          {
            while (1)
            {
              uint64_t v22 = v25 + 1;
              if (__OFADD__(v25, 1)) {
                goto LABEL_38;
              }
              if (v22 >= v46) {
                goto LABEL_30;
              }
              ++v25;
              if (a12[v22]) {
                goto LABEL_15;
              }
            }
          }
          uint64_t v22 = v25;
        }
      }
LABEL_15:
      OUTLINED_FUNCTION_39_10();
    }
  }
  swift_release();
  *int64_t v16 = v18;
  OUTLINED_FUNCTION_36_12();
}

void specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,long long a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  OUTLINED_FUNCTION_38_10();
  a34 = v38;
  a35 = v39;
  uint64_t v40 = v35;
  char v42 = v41;
  OUTLINED_FUNCTION_5_31();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  OUTLINED_FUNCTION_21_19();
  OUTLINED_FUNCTION_23_9();
  if (v43)
  {
    OUTLINED_FUNCTION_10_20();
    uint64_t v64 = v44;
    OUTLINED_FUNCTION_15_18();
    OUTLINED_FUNCTION_40_7();
    uint64_t v63 = v45;
    swift_retain();
    uint64_t v46 = 0;
    if (!v35) {
      goto LABEL_4;
    }
LABEL_3:
    OUTLINED_FUNCTION_37_9();
    while (1)
    {
      uint64_t v50 = (_OWORD *)(*(void *)(v36 + 56) + 32 * v47);
      if (v42)
      {
        outlined init with take of Any(v50, &a21);
      }
      else
      {
        outlined init with copy of Any((uint64_t)v50, (uint64_t)&a21);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      Hasher._finalize()();
      OUTLINED_FUNCTION_28_12();
      if (v51)
      {
        OUTLINED_FUNCTION_30_10();
        while (1)
        {
          OUTLINED_FUNCTION_19_18();
          if (v51)
          {
            if (v53) {
              break;
            }
          }
          if (v54 == v55) {
            uint64_t v54 = 0;
          }
          if (*(void *)(v37 + 64 + 8 * v54) != -1)
          {
            OUTLINED_FUNCTION_0_17();
            goto LABEL_29;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_2_42();
LABEL_29:
      OUTLINED_FUNCTION_11_22(v52);
      outlined init with take of Any(&a21, (_OWORD *)(v57 + 32 * v56));
      OUTLINED_FUNCTION_6_28();
      if (v35) {
        goto LABEL_3;
      }
LABEL_4:
      uint64_t v48 = v46 + 1;
      if (__OFADD__(v46, 1)) {
        goto LABEL_38;
      }
      if (v48 >= v63) {
        goto LABEL_31;
      }
      ++v46;
      if (!v64[v48])
      {
        uint64_t v46 = v48 + 1;
        if (v48 + 1 >= v63) {
          goto LABEL_31;
        }
        if (!v64[v46])
        {
          uint64_t v49 = v48 + 2;
          if (v49 >= v63)
          {
LABEL_31:
            swift_release();
            uint64_t v40 = v35;
            if (v42)
            {
              OUTLINED_FUNCTION_3_38();
              if (v58 != v59)
              {
                OUTLINED_FUNCTION_32_12();
                *uint64_t v64 = v60;
              }
              else
              {
                uint64_t v61 = OUTLINED_FUNCTION_22_16();
                specialized UnsafeMutablePointer.assign(repeating:count:)(v61, v62, v64);
              }
              *(void *)(v36 + 16) = 0;
            }
            break;
          }
          if (!v64[v49])
          {
            while (1)
            {
              uint64_t v46 = v49 + 1;
              if (__OFADD__(v49, 1)) {
                goto LABEL_39;
              }
              if (v46 >= v63) {
                goto LABEL_31;
              }
              ++v49;
              if (v64[v46]) {
                goto LABEL_15;
              }
            }
          }
          uint64_t v46 = v49;
        }
      }
LABEL_15:
      OUTLINED_FUNCTION_39_10();
    }
  }
  swift_release();
  *uint64_t v40 = v37;
  OUTLINED_FUNCTION_35_11();
}

void specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, char a14)
{
  OUTLINED_FUNCTION_41_7();
  int64_t v16 = v14;
  uint64_t v18 = v17;
  OUTLINED_FUNCTION_5_31();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  OUTLINED_FUNCTION_14_19();
  OUTLINED_FUNCTION_23_9();
  if (v19)
  {
    OUTLINED_FUNCTION_17_18();
    unint64_t v22 = v21 & v20;
    int64_t v51 = (unint64_t)(v23 + 63) >> 6;
    swift_retain();
    int64_t v24 = 0;
    if (!v22) {
      goto LABEL_4;
    }
LABEL_3:
    unint64_t v25 = __clz(__rbit64(v22));
    v22 &= v22 - 1;
    for (unint64_t i = v25 | (v24 << 6); ; unint64_t i = v34 + (v24 << 6))
    {
      uint64_t v35 = (uint64_t *)(v15[6] + 16 * i);
      uint64_t v37 = *v35;
      uint64_t v36 = v35[1];
      uint64_t v38 = (uint64_t *)(v15[7] + 16 * i);
      uint64_t v39 = *v38;
      uint64_t v40 = v38[1];
      if ((a14 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      Hasher._finalize()();
      OUTLINED_FUNCTION_26_14();
      if (v41)
      {
        OUTLINED_FUNCTION_30_10();
        while (1)
        {
          OUTLINED_FUNCTION_19_18();
          if (v41)
          {
            if (v43) {
              break;
            }
          }
          if (v44 == v45) {
            uint64_t v44 = 0;
          }
          if (*(void *)(v18 + 64 + 8 * v44) != -1)
          {
            OUTLINED_FUNCTION_0_17();
            goto LABEL_29;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_2_42();
LABEL_29:
      OUTLINED_FUNCTION_24_18(v42);
      uint64_t v48 = (void *)(v47 + 16 * v46);
      *uint64_t v48 = v37;
      v48[1] = v36;
      uint64_t v49 = (void *)(*(void *)(v18 + 56) + 16 * v46);
      *uint64_t v49 = v39;
      v49[1] = v40;
      OUTLINED_FUNCTION_6_28();
      if (v22) {
        goto LABEL_3;
      }
LABEL_4:
      int64_t v27 = v24 + 1;
      if (__OFADD__(v24, 1)) {
        goto LABEL_38;
      }
      if (v27 >= v51) {
        goto LABEL_31;
      }
      ++v24;
      if (!*(void *)(a12 + 8 * v27))
      {
        int64_t v24 = v27 + 1;
        if (v27 + 1 >= v51) {
          goto LABEL_31;
        }
        if (!*(void *)(a12 + 8 * v24))
        {
          OUTLINED_FUNCTION_50_8();
          if (v30 == v31)
          {
LABEL_31:
            swift_release();
            int64_t v16 = v14;
            if (a14)
            {
              OUTLINED_FUNCTION_3_38();
              if (v30 != v31) {
                OUTLINED_FUNCTION_27_15(v50);
              }
              else {
                OUTLINED_FUNCTION_18_16(v50);
              }
              v15[2] = 0;
            }
            break;
          }
          if (!*(void *)(a12 + 8 * v28))
          {
            while (1)
            {
              int64_t v24 = v28 + 1;
              if (__OFADD__(v28, 1)) {
                goto LABEL_39;
              }
              if (v24 >= v29) {
                goto LABEL_31;
              }
              ++v28;
              if (*(void *)(a12 + 8 * v24)) {
                goto LABEL_16;
              }
            }
          }
          int64_t v24 = v28;
        }
      }
LABEL_16:
      OUTLINED_FUNCTION_13_26();
      unint64_t v22 = v33 & v32;
    }
  }
  swift_release();
  *int64_t v16 = v18;
  OUTLINED_FUNCTION_36_12();
}

{
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  unint64_t i;
  int64_t v27;
  int64_t v28;
  int64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;

  OUTLINED_FUNCTION_41_7();
  int64_t v16 = v14;
  uint64_t v18 = v17;
  OUTLINED_FUNCTION_5_31();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Int>);
  OUTLINED_FUNCTION_14_19();
  OUTLINED_FUNCTION_23_9();
  if (v19)
  {
    uint64_t v45 = v15 + 64;
    OUTLINED_FUNCTION_15_18();
    unint64_t v22 = v21 & v20;
    uint64_t v44 = (unint64_t)(v23 + 63) >> 6;
    swift_retain();
    int64_t v24 = 0;
    if (!v22) {
      goto LABEL_4;
    }
LABEL_3:
    unint64_t v25 = __clz(__rbit64(v22));
    v22 &= v22 - 1;
    for (unint64_t i = v25 | (v24 << 6); ; unint64_t i = v34 + (v24 << 6))
    {
      uint64_t v35 = *(void *)(*(void *)(v15 + 56) + 8 * i);
      if ((a14 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      Hasher._finalize()();
      OUTLINED_FUNCTION_28_12();
      if (v36)
      {
        OUTLINED_FUNCTION_30_10();
        while (1)
        {
          OUTLINED_FUNCTION_19_18();
          if (v36)
          {
            if (v38) {
              break;
            }
          }
          if (v39 == v40) {
            uint64_t v39 = 0;
          }
          if (*(void *)(v18 + 64 + 8 * v39) != -1)
          {
            OUTLINED_FUNCTION_0_17();
            goto LABEL_29;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_2_42();
LABEL_29:
      OUTLINED_FUNCTION_11_22(v37);
      *(void *)(v42 + 8 * v41) = v35;
      OUTLINED_FUNCTION_6_28();
      if (v22) {
        goto LABEL_3;
      }
LABEL_4:
      int64_t v27 = v24 + 1;
      if (__OFADD__(v24, 1)) {
        goto LABEL_38;
      }
      if (v27 >= v44) {
        goto LABEL_31;
      }
      ++v24;
      if (!*(void *)(v45 + 8 * v27))
      {
        int64_t v24 = v27 + 1;
        if (v27 + 1 >= v44) {
          goto LABEL_31;
        }
        if (!*(void *)(v45 + 8 * v24))
        {
          OUTLINED_FUNCTION_50_8();
          if (v30 == v31)
          {
LABEL_31:
            swift_release();
            int64_t v16 = v14;
            if (a14)
            {
              OUTLINED_FUNCTION_3_38();
              if (v30 != v31) {
                OUTLINED_FUNCTION_27_15(v43);
              }
              else {
                OUTLINED_FUNCTION_18_16(v43);
              }
              *(void *)(v15 + 16) = 0;
            }
            break;
          }
          if (!*(void *)(v45 + 8 * v28))
          {
            while (1)
            {
              int64_t v24 = v28 + 1;
              if (__OFADD__(v28, 1)) {
                goto LABEL_39;
              }
              if (v24 >= v29) {
                goto LABEL_31;
              }
              ++v28;
              if (*(void *)(v45 + 8 * v24)) {
                goto LABEL_16;
              }
            }
          }
          int64_t v24 = v28;
        }
      }
LABEL_16:
      OUTLINED_FUNCTION_13_26();
      unint64_t v22 = v33 & v32;
    }
  }
  swift_release();
  *int64_t v16 = v18;
  OUTLINED_FUNCTION_36_12();
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t v6 = v2;
  OUTLINED_FUNCTION_5_31();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MLProgress.Metric, Any>);
  OUTLINED_FUNCTION_21_19();
  OUTLINED_FUNCTION_23_9();
  if (!v8) {
    goto LABEL_49;
  }
  OUTLINED_FUNCTION_10_20();
  uint64_t v39 = v9;
  OUTLINED_FUNCTION_15_18();
  unint64_t v12 = v11 & v10;
  int64_t v14 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v15 = v4 + 64;
  swift_retain();
  int64_t v16 = 0;
  if (!v12) {
    goto LABEL_4;
  }
  while (2)
  {
    unint64_t v17 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    unint64_t v18 = v17 | (v16 << 6);
LABEL_16:
    char v24 = *(unsigned char *)(v3[6] + v18);
    unint64_t v25 = (_OWORD *)(v3[7] + 32 * v18);
    if (a2) {
      outlined init with take of Any(v25, v40);
    }
    else {
      outlined init with copy of Any((uint64_t)v25, (uint64_t)v40);
    }
    Hasher.init(_seed:)();
    OUTLINED_FUNCTION_48_8();
    switch(v26)
    {
      case 1:
        OUTLINED_FUNCTION_9_24();
        break;
      case 2:
        OUTLINED_FUNCTION_12_18();
        break;
      case 3:
        OUTLINED_FUNCTION_20_18();
        break;
      case 4:
        OUTLINED_FUNCTION_7_27();
        break;
      case 5:
        OUTLINED_FUNCTION_44_7();
        break;
      case 6:
        OUTLINED_FUNCTION_33_11();
        break;
      case 7:
        OUTLINED_FUNCTION_47_10();
        break;
      case 8:
        OUTLINED_FUNCTION_8_24();
        break;
      case 9:
        OUTLINED_FUNCTION_46_9();
        break;
      case 10:
        OUTLINED_FUNCTION_45_8();
        break;
      default:
        break;
    }
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Hasher._finalize()();
    OUTLINED_FUNCTION_49_4();
    if (((v5 << v28) & ~*(void *)(v15 + 8 * v27)) != 0)
    {
      OUTLINED_FUNCTION_2_42();
      goto LABEL_40;
    }
    OUTLINED_FUNCTION_30_10();
    do
    {
      OUTLINED_FUNCTION_19_18();
      if (v30 && (v29 & 1) != 0)
      {
        __break(1u);
LABEL_51:
        __break(1u);
        goto LABEL_52;
      }
      OUTLINED_FUNCTION_51_7();
      if (v30) {
        uint64_t v31 = 0;
      }
    }
    while (*(void *)(v15 + 8 * v31) == -1);
    OUTLINED_FUNCTION_0_17();
LABEL_40:
    OUTLINED_FUNCTION_16_20();
    *(void *)(v15 + v32) |= v33;
    *(unsigned char *)(*(void *)(v4 + 48) + v34) = v24;
    outlined init with take of Any(v40, (_OWORD *)(*(void *)(v4 + 56) + 32 * v34));
    OUTLINED_FUNCTION_6_28();
    if (v12) {
      continue;
    }
    break;
  }
LABEL_4:
  int64_t v19 = v16 + 1;
  if (__OFADD__(v16, 1)) {
    goto LABEL_51;
  }
  if (v19 >= v14)
  {
    swift_release();
    uint64_t v6 = v2;
    if ((a2 & 1) == 0) {
      goto LABEL_49;
    }
    goto LABEL_45;
  }
  ++v16;
  if (*(void *)(v39 + 8 * v19)) {
    goto LABEL_15;
  }
  int64_t v16 = v19 + 1;
  if (v19 + 1 < v14)
  {
    if (*(void *)(v39 + 8 * v16)) {
      goto LABEL_15;
    }
    int64_t v20 = v19 + 2;
    if (v20 < v14)
    {
      if (*(void *)(v39 + 8 * v20))
      {
        int64_t v16 = v20;
LABEL_15:
        OUTLINED_FUNCTION_13_26();
        unint64_t v12 = v22 & v21;
        unint64_t v18 = v23 + (v16 << 6);
        goto LABEL_16;
      }
      while (1)
      {
        int64_t v16 = v20 + 1;
        if (__OFADD__(v20, 1)) {
          break;
        }
        if (v16 >= v14) {
          goto LABEL_42;
        }
        ++v20;
        if (*(void *)(v39 + 8 * v16)) {
          goto LABEL_15;
        }
      }
LABEL_52:
      __break(1u);
      JUMPOUT(0x227165694);
    }
  }
LABEL_42:
  swift_release();
  uint64_t v6 = v2;
  if (a2)
  {
LABEL_45:
    OUTLINED_FUNCTION_3_38();
    if (v36 != v37) {
      OUTLINED_FUNCTION_27_15(v35);
    }
    else {
      OUTLINED_FUNCTION_18_16(v35);
    }
    v3[2] = 0;
  }
LABEL_49:
  uint64_t result = swift_release();
  void *v6 = v4;
  return result;
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  char v42;

  uint64_t v6 = v2;
  OUTLINED_FUNCTION_5_31();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MLProgress.Metric, Double>);
  OUTLINED_FUNCTION_21_19();
  OUTLINED_FUNCTION_23_9();
  if (v8)
  {
    unint64_t v42 = a2;
    uint64_t v9 = v3 + 8;
    OUTLINED_FUNCTION_15_18();
    unint64_t v12 = v11 & v10;
    int64_t v14 = (unint64_t)(v13 + 63) >> 6;
    uint64_t v15 = v4 + 64;
    swift_retain();
    int64_t v16 = 0;
    if (!v12) {
      goto LABEL_4;
    }
    while (2)
    {
      unint64_t v17 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v18 = v17 | (v16 << 6);
LABEL_16:
      char v24 = *(unsigned char *)(v3[6] + v18);
      unint64_t v25 = *(void *)(v3[7] + 8 * v18);
      Hasher.init(_seed:)();
      OUTLINED_FUNCTION_48_8();
      switch(v26)
      {
        case 1:
          OUTLINED_FUNCTION_9_24();
          break;
        case 2:
          OUTLINED_FUNCTION_12_18();
          break;
        case 3:
          OUTLINED_FUNCTION_20_18();
          break;
        case 4:
          OUTLINED_FUNCTION_7_27();
          break;
        case 5:
          OUTLINED_FUNCTION_44_7();
          break;
        case 6:
          OUTLINED_FUNCTION_33_11();
          break;
        case 7:
          OUTLINED_FUNCTION_47_10();
          break;
        case 8:
          OUTLINED_FUNCTION_8_24();
          break;
        case 9:
          OUTLINED_FUNCTION_46_9();
          break;
        case 10:
          OUTLINED_FUNCTION_45_8();
          break;
        default:
          break;
      }
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Hasher._finalize()();
      OUTLINED_FUNCTION_49_4();
      if (((v5 << v28) & ~*(void *)(v15 + 8 * v27)) != 0)
      {
        OUTLINED_FUNCTION_2_42();
        goto LABEL_37;
      }
      OUTLINED_FUNCTION_30_10();
      do
      {
        OUTLINED_FUNCTION_19_18();
        if (v32 && (v29 & 1) != 0)
        {
          __break(1u);
LABEL_46:
          __break(1u);
          goto LABEL_47;
        }
        if (v30 == v31) {
          char v30 = 0;
        }
      }
      while (*(void *)(v15 + 8 * v30) == -1);
      OUTLINED_FUNCTION_0_17();
LABEL_37:
      OUTLINED_FUNCTION_16_20();
      *(void *)(v15 + v33) |= v34;
      *(unsigned char *)(*(void *)(v4 + 48) + v35) = v24;
      *(void *)(*(void *)(v4 + 56) + 8 * v35) = v25;
      OUTLINED_FUNCTION_6_28();
      if (v12) {
        continue;
      }
      break;
    }
LABEL_4:
    int64_t v19 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      goto LABEL_46;
    }
    if (v19 < v14)
    {
      ++v16;
      if (v9[v19]) {
        goto LABEL_15;
      }
      int64_t v16 = v19 + 1;
      if (v19 + 1 < v14)
      {
        if (v9[v16]) {
          goto LABEL_15;
        }
        int64_t v20 = v19 + 2;
        if (v20 < v14)
        {
          if (v9[v20])
          {
            int64_t v16 = v20;
LABEL_15:
            OUTLINED_FUNCTION_13_26();
            unint64_t v12 = v22 & v21;
            unint64_t v18 = v23 + (v16 << 6);
            goto LABEL_16;
          }
          while (1)
          {
            int64_t v16 = v20 + 1;
            if (__OFADD__(v20, 1)) {
              break;
            }
            if (v16 >= v14) {
              goto LABEL_39;
            }
            ++v20;
            if (v9[v16]) {
              goto LABEL_15;
            }
          }
LABEL_47:
          __break(1u);
          JUMPOUT(0x227165DF0);
        }
      }
    }
LABEL_39:
    swift_release();
    uint64_t v6 = v2;
    if (v42)
    {
      OUTLINED_FUNCTION_3_38();
      if (v36 != v37)
      {
        OUTLINED_FUNCTION_32_12();
        *uint64_t v9 = v38;
      }
      else
      {
        uint64_t v39 = OUTLINED_FUNCTION_22_16();
        specialized UnsafeMutablePointer.assign(repeating:count:)(v39, v40, v3 + 8);
      }
      v3[2] = 0;
    }
  }
  uint64_t result = swift_release();
  void *v6 = v4;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  void *v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  char v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [Double]>);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_39;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v13 = 0;
  if (!v10) {
    goto LABEL_7;
  }
LABEL_6:
  int64_t v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v13 << 6))
  {
    int64_t v20 = (uint64_t *)(*(void *)(v5 + 48) + 16 * i);
    uint64_t v22 = *v20;
    uint64_t v21 = v20[1];
    uint64_t v23 = *(void *)(*(void *)(v5 + 56) + 8 * i);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    char v24 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v25 = result & ~v24;
    uint64_t v26 = v25 >> 6;
    if (((-1 << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) == 0)
    {
      char v28 = 0;
      char v29 = (unint64_t)(63 - v24) >> 6;
      while (++v26 != v29 || (v28 & 1) == 0)
      {
        char v30 = v26 == v29;
        if (v26 == v29) {
          uint64_t v26 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v11 + 8 * v26);
        if (v31 != -1)
        {
          uint64_t v27 = __clz(__rbit64(~v31)) + (v26 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    uint64_t v27 = __clz(__rbit64((-1 << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v11 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
    uint64_t v32 = (void *)(*(void *)(v7 + 48) + 16 * v27);
    *uint64_t v32 = v22;
    v32[1] = v21;
    *(void *)(*(void *)(v7 + 56) + 8 * v27) = v23;
    ++*(void *)(v7 + 16);
    if (v10) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v16 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      goto LABEL_41;
    }
    if (v16 >= v34)
    {
      swift_release();
      unint64_t v17 = (void *)(v5 + 64);
      goto LABEL_34;
    }
    unint64_t v17 = (void *)(v5 + 64);
    unint64_t v18 = *(void *)(v35 + 8 * v16);
    ++v13;
    if (!v18)
    {
      uint64_t v13 = v16 + 1;
      if (v16 + 1 >= v34) {
        goto LABEL_32;
      }
      unint64_t v18 = *(void *)(v35 + 8 * v13);
      if (!v18) {
        break;
      }
    }
LABEL_18:
    uint64_t v10 = (v18 - 1) & v18;
  }
  int64_t v19 = v16 + 2;
  if (v19 < v34)
  {
    unint64_t v18 = *(void *)(v35 + 8 * v19);
    if (!v18)
    {
      while (1)
      {
        uint64_t v13 = v19 + 1;
        if (__OFADD__(v19, 1)) {
          goto LABEL_42;
        }
        if (v13 >= v34) {
          goto LABEL_32;
        }
        unint64_t v18 = *(void *)(v35 + 8 * v13);
        ++v19;
        if (v18) {
          goto LABEL_18;
        }
      }
    }
    uint64_t v13 = v19;
    goto LABEL_18;
  }
LABEL_32:
  swift_release();
LABEL_34:
  if (v36)
  {
    uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
    if (v33 >= 64) {
      specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v33 + 63) >> 6, v17);
    }
    else {
      *unint64_t v17 = -1 << v33;
    }
    *(void *)(v5 + 16) = 0;
  }
LABEL_39:
  uint64_t result = swift_release();
  *char v3 = v7;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, uint64_t a2)
{
  char v3 = v2;
  uint64_t v46 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_33_0();
  unint64_t v45 = v8;
  uint64_t v9 = (void *)*v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MLProgress.Metric, URL>);
  static _DictionaryStorage.resize(original:capacity:move:)();
  OUTLINED_FUNCTION_23_9();
  if (v10)
  {
    OUTLINED_FUNCTION_10_20();
    uint64_t v43 = v11;
    OUTLINED_FUNCTION_30_12();
    unint64_t v14 = v13 & v12;
    int64_t v42 = (unint64_t)(v15 + 63) >> 6;
    uint64_t v44 = (void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16);
    int64_t v16 = (void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32);
    uint64_t v17 = a2 + 64;
    swift_retain();
    int64_t v18 = 0;
    if (!v14) {
      goto LABEL_4;
    }
    while (2)
    {
      unint64_t v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v20 = v19 | (v18 << 6);
LABEL_17:
      uint64_t v29 = *(unsigned __int8 *)(v9[6] + v20);
      uint64_t v30 = v6;
      uint64_t v31 = *(void *)(v6 + 72);
      unint64_t v32 = v9[7] + v31 * v20;
      if (a2) {
        (*v16)(v45, v32, v46);
      }
      else {
        (*v44)(v45, v32, v46);
      }
      Hasher.init(_seed:)();
      switch(v29)
      {
        case 1:
          OUTLINED_FUNCTION_9_24();
          break;
        case 2:
          OUTLINED_FUNCTION_12_18();
          break;
        case 3:
          OUTLINED_FUNCTION_20_18();
          break;
        case 4:
          OUTLINED_FUNCTION_7_27();
          break;
        case 6:
          OUTLINED_FUNCTION_33_11();
          break;
        case 8:
          OUTLINED_FUNCTION_8_24();
          break;
        default:
          break;
      }
      String.hash(into:)();
      swift_bridgeObjectRelease();
      unint64_t v33 = Hasher._finalize()() & ~(-1 << *(unsigned char *)(a2 + 32));
      if (((-1 << v33) & ~*(void *)(v17 + 8 * (v33 >> 6))) != 0)
      {
        OUTLINED_FUNCTION_2_42();
        goto LABEL_37;
      }
      OUTLINED_FUNCTION_30_10();
      do
      {
        OUTLINED_FUNCTION_19_18();
        if (v35 && (v34 & 1) != 0)
        {
          __break(1u);
LABEL_46:
          __break(1u);
          goto LABEL_47;
        }
        OUTLINED_FUNCTION_51_7();
        if (v35) {
          uint64_t v36 = 0;
        }
      }
      while (*(void *)(v17 + 8 * v36) == -1);
      OUTLINED_FUNCTION_0_17();
LABEL_37:
      OUTLINED_FUNCTION_16_20();
      *(void *)(v17 + v37) |= v38;
      *(unsigned char *)(*(void *)(a2 + 48) + v39) = v29;
      (*v16)(*(void *)(a2 + 56) + v31 * v39, v45, v46);
      OUTLINED_FUNCTION_6_28();
      uint64_t v6 = v30;
      if (v14) {
        continue;
      }
      break;
    }
LABEL_4:
    int64_t v21 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      goto LABEL_46;
    }
    if (v21 < v42)
    {
      ++v18;
      if (*(void *)(v43 + 8 * v21)) {
        goto LABEL_16;
      }
      int64_t v18 = v21 + 1;
      if (v21 + 1 < v42)
      {
        if (*(void *)(v43 + 8 * v18)) {
          goto LABEL_16;
        }
        OUTLINED_FUNCTION_50_8();
        if (v24 == v25) {
          goto LABEL_39;
        }
        if (*(void *)(v43 + 8 * v22))
        {
          int64_t v18 = v22;
LABEL_16:
          OUTLINED_FUNCTION_13_26();
          unint64_t v14 = v27 & v26;
          unint64_t v20 = v28 + (v18 << 6);
          goto LABEL_17;
        }
        while (1)
        {
          int64_t v18 = v22 + 1;
          if (__OFADD__(v22, 1)) {
            break;
          }
          if (v18 >= v23) {
            goto LABEL_39;
          }
          ++v22;
          if (*(void *)(v43 + 8 * v18)) {
            goto LABEL_16;
          }
        }
LABEL_47:
        __break(1u);
        JUMPOUT(0x227165ACCLL);
      }
    }
LABEL_39:
    swift_release();
    char v3 = v2;
    if (a2)
    {
      OUTLINED_FUNCTION_3_38();
      if (v24 != v25) {
        OUTLINED_FUNCTION_27_15(v40);
      }
      else {
        OUTLINED_FUNCTION_18_16(v40);
      }
      v9[2] = 0;
    }
  }
  uint64_t result = swift_release();
  *char v3 = a2;
  return result;
}

uint64_t specialized closure #1 in Dictionary.merge(_:uniquingKeysWith:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *a1 = a4;
  a1[1] = a5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a2;
}

uint64_t specialized closure #1 in Dictionary.merge(_:uniquingKeysWith:)(unsigned char *a1, uint64_t a2, char a3, uint64_t a4)
{
  *a1 = a3;
  return outlined init with copy of Any(a4, a2);
}

uint64_t specialized closure #1 in Dictionary.merge(_:uniquingKeysWith:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1 = a4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a2;
}

uint64_t specialized LazyMapSequence.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = -1 << *(unsigned char *)(a1 + 32);
  *a4 = a1;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v6 = v7;
  a4[1] = result;
  a4[2] = ~v4;
  if (-v4 < 64) {
    uint64_t v8 = ~(-1 << -(char)v4);
  }
  else {
    uint64_t v8 = -1;
  }
  a4[3] = 0;
  a4[4] = v8 & v6;
  a4[5] = a2;
  a4[6] = a3;
  return result;
}

BOOL specialized closure #1 in Layer.parameterKeyPath(forParameterWithId:)(uint64_t *a1, uint64_t a2, int a3)
{
  return specialized closure #1 in Layer.parameterKeyPath(forParameterWithId:)(*a1, a2, a3);
}

uint64_t outlined init with copy of MLHandActionClassifier.GraphCNNModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MLHandActionClassifier.GraphCNNModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of MLHandActionClassifier.GraphCNNModel(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MLHandActionClassifier.GraphCNNModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in Tensor.doubleArray()(uint64_t a1, uint64_t *a2)
{
  return closure #1 in Tensor.doubleArray()(a1, a2, *(void *)(v2 + 16));
}

BOOL partial apply for specialized closure #1 in Layer.parameterKeyPath(for:)()
{
  return specialized closure #1 in Layer.parameterKeyPath(for:)();
}

uint64_t lazy protocol witness table accessor for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

BOOL partial apply for specialized closure #1 in Layer.parameterKeyPath(forParameterWithId:)(uint64_t *a1)
{
  return specialized closure #1 in Layer.parameterKeyPath(forParameterWithId:)(a1, *(void *)(v1 + 16), *(_DWORD *)(v1 + 24));
}

uint64_t outlined init with take of (offset: Int, element: Layer)?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_8();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

BOOL closure #1 in Layer.parameterKeyPath(for:)specialized partial apply()
{
  return partial apply for specialized closure #1 in Layer.parameterKeyPath(for:)();
}

uint64_t closure #1 in Tensor.doubleArray()partial apply(uint64_t a1, uint64_t *a2)
{
  return partial apply for closure #1 in Tensor.doubleArray()(a1, a2);
}

void OUTLINED_FUNCTION_6_28()
{
  ++*(void *)(v0 + 16);
}

void OUTLINED_FUNCTION_11_22(unint64_t a1@<X8>)
{
  *(void *)(v4 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a1;
  uint64_t v5 = (void *)(*(void *)(v1 + 48) + 16 * a1);
  *uint64_t v5 = v3;
  v5[1] = v2;
}

uint64_t OUTLINED_FUNCTION_14_19()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t OUTLINED_FUNCTION_18_16@<X0>(uint64_t a1@<X8>)
{
  return specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(a1 + 63) >> 6, v1);
}

uint64_t OUTLINED_FUNCTION_21_19()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t OUTLINED_FUNCTION_22_16()
{
  return 0;
}

void OUTLINED_FUNCTION_24_18(unint64_t a1@<X8>)
{
  *(void *)(v1 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a1;
}

void OUTLINED_FUNCTION_27_15(char a1@<W8>)
{
  *uint64_t v1 = -1 << a1;
}

BOOL specialized Collection.isEmpty.getter()
{
  uint64_t v0 = MLDataTable.size.getter();
  return OUTLINED_FUNCTION_15_19(v0);
}

{
  uint64_t v0;

  uint64_t v0 = CMLSequence.size.getter();
  return OUTLINED_FUNCTION_15_19(v0);
}

{
  uint64_t v0;
  uint64_t v1;

  swift_retain();
  uint64_t v0 = CMLSequence.size.getter();
  uint64_t v1 = specialized RandomAccessCollection<>.distance(from:to:)(0, v0);
  swift_release();
  return v1 == 0;
}

{
  uint64_t v0;

  uint64_t v0 = CMLSequence.size.getter();
  return OUTLINED_FUNCTION_15_19(v0);
}

{
  uint64_t v0;

  uint64_t v0 = CMLDictionary.size.getter();
  return OUTLINED_FUNCTION_15_19(v0);
}

{
  uint64_t v1;
  uint64_t v2;

  type metadata accessor for DataFrame.Rows();
  lazy protocol witness table accessor for type DataFrame.Rows and conformance DataFrame.Rows();
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  return v2 == v1;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  if (*(void *)(a2 + 32) == result) {
    return 1;
  }
  if (v2 == 1) {
    return 0;
  }
  for (uint64_t i = 5; ; ++i)
  {
    uint64_t v5 = i - 3;
    if (__OFADD__(i - 4, 1)) {
      break;
    }
    BOOL v6 = *(void *)(a2 + 8 * i) == result;
    BOOL v3 = v6;
    BOOL v6 = v6 || v5 == v2;
    if (v6) {
      return v3;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized _UntypedColumn.init<A>(_:)(uint64_t a1)
{
  uint64_t v4 = MEMORY[0x22A676370](0);
  if (!v4)
  {
    __break(1u);
LABEL_11:
    uint64_t result = swift_unexpectedError();
    __break(1u);
    return result;
  }
  uint64_t v5 = v4;
  uint64_t v18 = v1;
  type metadata accessor for CMLSequence();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = v5;
  *(unsigned char *)(inited + 24) = 1;
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7)
  {
    type metadata accessor for CMLFeatureValue();
    uint64_t v8 = (uint64_t *)(a1 + 40);
    uint64_t v9 = MEMORY[0x263F8D310];
    do
    {
      uint64_t v10 = *(v8 - 1);
      uint64_t v11 = *v8;
      v17[3] = v9;
      v17[4] = &protocol witness table for String;
      v17[0] = v10;
      v17[1] = v11;
      __swift_project_boxed_opaque_existential_1(v17, v9);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      uint64_t v12 = CMLFeatureValue.__allocating_init(_:)();
      if (v2) {
        goto LABEL_11;
      }
      uint64_t v13 = v12;
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v17);
      CMLSequence.append(_:)(v13);
      v8 += 2;
      swift_release();
      swift_bridgeObjectRelease();
    }
    while (--v7);
  }
  swift_bridgeObjectRelease();
  type metadata accessor for CMLColumn();
  uint64_t v14 = CMLColumn.__allocating_init(_:type:)(inited, 2);
  uint64_t v15 = v18;
  if (v2)
  {
    type metadata accessor for _UntypedColumn();
    swift_deallocPartialClassInstance();
  }
  else
  {
    *(void *)(v18 + 16) = v14;
  }
  return v15;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t inited;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30[3];
  uint64_t v31;
  _UNKNOWN **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  uint64_t v4 = MEMORY[0x22A676370](0);
  if (!v4)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    uint64_t result = swift_unexpectedError();
    __break(1u);
    return result;
  }
  uint64_t v5 = v4;
  uint64_t v38 = v1;
  type metadata accessor for CMLSequence();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = v5;
  *(unsigned char *)(inited + 24) = 1;
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7)
  {
    uint64_t v8 = 0;
    uint64_t v9 = MEMORY[0x263F8D6C8];
    do
    {
      uint64_t v10 = *(void *)(a1 + 8 * v8 + 32);
      uint64_t v31 = v9;
      unint64_t v32 = &protocol witness table for Int;
      v30[0] = v10;
      uint64_t v11 = __swift_project_boxed_opaque_existential_1(v30, v9);
      specialized handling<A, B>(_:_:)(*v11, v12, v13, v14, v15, v16, v17, v18, v25, v26, v27, v28, v29, v30[0], v30[1], v30[2], v31, (uint64_t)v32, v33,
        v34,
        v35,
        v36,
        v37,
        v38,
        v39,
        v40,
        v41,
        v42,
        v43,
        v44);
      if (v2) {
        goto LABEL_13;
      }
      unint64_t v20 = v19;
      if (!v19)
      {
        __break(1u);
        goto LABEL_12;
      }
      type metadata accessor for CMLFeatureValue();
      swift_initStackObject();
      int64_t v21 = CMLFeatureValue.init(rawValue:ownsValue:)(v20, 1);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v30);
      CMLSequence.append(_:)(v21);
      ++v8;
      swift_release();
    }
    while (v7 != v8);
  }
  swift_bridgeObjectRelease();
  type metadata accessor for CMLColumn();
  int64_t v22 = CMLColumn.__allocating_init(_:type:)(inited, 0);
  int64_t v23 = v38;
  if (v2)
  {
    type metadata accessor for _UntypedColumn();
    swift_deallocPartialClassInstance();
  }
  else
  {
    *(void *)(v38 + 16) = v22;
  }
  return v23;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t inited;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45[3];
  uint64_t v46;
  _UNKNOWN **v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52[12];

  BOOL v3 = v1;
  uint64_t v5 = MEMORY[0x22A676370](0);
  if (!v5) {
    goto LABEL_23;
  }
  BOOL v6 = v5;
  uint64_t v38 = type metadata accessor for CMLSequence();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = v6;
  uint64_t v39 = inited;
  *(unsigned char *)(inited + 24) = 1;
  uint64_t v37 = *(void *)(a1 + 16);
  if (v37)
  {
    char v34 = v1;
    type metadata accessor for CMLFeatureValue();
    uint64_t v8 = 0;
    uint64_t v36 = a1 + 32;
    uint64_t v9 = MEMORY[0x263F8D6C8];
    char v35 = a1;
    while (v8 < *(void *)(a1 + 16))
    {
      uint64_t v10 = *(void *)(v36 + 8 * v8);
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
      v52[3] = v11;
      v52[4] = lazy protocol witness table accessor for type [Int] and conformance <A> [A](&lazy protocol witness table cache variable for type [Int] and conformance <A> [A], &demangling cache variable for type metadata for [Int]);
      v52[0] = v10;
      uint64_t v12 = *__swift_project_boxed_opaque_existential_1(v52, v11);
      v52[11] = v10;
      swift_bridgeObjectRetain_n();
      uint64_t v13 = MEMORY[0x22A676370](0);
      if (!v13) {
        goto LABEL_22;
      }
      uint64_t v14 = v13;
      uint64_t v15 = swift_initStackObject();
      *(void *)(v15 + 16) = v14;
      *(unsigned char *)(v15 + 24) = 1;
      int64_t v16 = *(void *)(v12 + 16);
      if (v16)
      {
        uint64_t v40 = v8;
        swift_bridgeObjectRetain();
        for (uint64_t i = 0; i != v16; ++i)
        {
          uint64_t v18 = *(void *)(v12 + 8 * i + 32);
          uint64_t v46 = v9;
          uint64_t v47 = &protocol witness table for Int;
          v45[0] = v18;
          unint64_t v19 = __swift_project_boxed_opaque_existential_1(v45, v9);
          specialized handling<A, B>(_:_:)(*v19, v20, v21, v22, v23, v24, v25, v26, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44,
            v45[0],
            v45[1],
            v45[2],
            v46,
            (uint64_t)v47,
            v48,
            v49,
            v50,
            v51,
            v52[0],
            v52[1]);
          if (v2) {
            goto LABEL_24;
          }
          uint64_t v28 = v27;
          if (!v27) {
            goto LABEL_21;
          }
          swift_initStackObject();
          uint64_t v29 = CMLFeatureValue.init(rawValue:ownsValue:)(v28, 1);
          __swift_destroy_boxed_opaque_existential_0((uint64_t)v45);
          CMLSequence.append(_:)(v29);
          swift_release();
        }
        swift_bridgeObjectRelease();
        a1 = v35;
        uint64_t v8 = v40;
      }
      uint64_t v30 = CMLFeatureValue.__allocating_init(_:)(v15);
      if (v2) {
        goto LABEL_24;
      }
      uint64_t v31 = v30;
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v52);
      CMLSequence.append(_:)(v31);
      ++v8;
      swift_release();
      swift_bridgeObjectRelease();
      if (v8 == v37)
      {
        swift_bridgeObjectRelease();
        BOOL v3 = v34;
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    while (1)
    {
LABEL_24:
      swift_unexpectedError();
      __break(1u);
    }
  }
  swift_bridgeObjectRelease();
LABEL_16:
  type metadata accessor for CMLColumn();
  unint64_t v32 = CMLColumn.__allocating_init(_:type:)(v39, 3);
  if (v2)
  {
    type metadata accessor for _UntypedColumn();
    swift_deallocPartialClassInstance();
  }
  else
  {
    *(void *)(v3 + 16) = v32;
  }
  return v3;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t inited;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void v14[5];
  uint64_t v15;

  uint64_t result = MEMORY[0x22A676370](0);
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v15 = v1;
    type metadata accessor for CMLSequence();
    uint64_t inited = swift_initStackObject();
    *(void *)(inited + 16) = v5;
    *(unsigned char *)(inited + 24) = 1;
    uint64_t v7 = *(void *)(a1 + 16);
    if (v7)
    {
      uint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *(void **)(a1 + 8 * v8 + 32);
        v14[3] = &type metadata for MLDataValue.MultiArrayType;
        v14[4] = &protocol witness table for MLDataValue.MultiArrayType;
        v14[0] = v9;
        __swift_project_boxed_opaque_existential_1(v14, (uint64_t)&type metadata for MLDataValue.MultiArrayType);
        uint64_t v10 = v9;
        uint64_t v11 = MLDataValue.MultiArrayType.featureValue.getter(v10);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v14);
        CMLSequence.append(_:)(v11);
        if (v2) {
          break;
        }
        ++v8;
        swift_release();

        if (v7 == v8) {
          goto LABEL_6;
        }
      }
      swift_release();
      swift_setDeallocating();
      CMLFeatureValue.deinit();
      swift_deallocClassInstance();
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_6:
      swift_bridgeObjectRelease();
      type metadata accessor for CMLColumn();
      uint64_t v12 = CMLColumn.__allocating_init(_:type:)(inited, 6);
      if (!v2)
      {
        uint64_t v13 = v15;
        *(void *)(v15 + 16) = v12;
        return v13;
      }
    }
    uint64_t v13 = v15;
    type metadata accessor for _UntypedColumn();
    swift_deallocPartialClassInstance();
    return v13;
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void v16[3];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  BOOL v3 = v1;
  uint64_t result = MEMORY[0x22A676370](0);
  if (result)
  {
    BOOL v6 = result;
    type metadata accessor for CMLSequence();
    uint64_t inited = swift_initStackObject();
    *(void *)(inited + 16) = v6;
    *(unsigned char *)(inited + 24) = 1;
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8)
    {
      unint64_t v19 = v3;
      uint64_t v9 = lazy protocol witness table accessor for type [Int] and conformance <A> [A](&lazy protocol witness table cache variable for type [String : Double] and conformance <> [A : B], &demangling cache variable for type metadata for [String : Double]);
      swift_bridgeObjectRetain();
      uint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *(void *)(a1 + 8 * v10 + 32);
        uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Double]);
        uint64_t v18 = v9;
        v16[0] = v11;
        uint64_t v12 = *__swift_project_boxed_opaque_existential_1(v16, v17);
        swift_bridgeObjectRetain_n();
        uint64_t v13 = specialized Dictionary<>.featureValue.getter(v12);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v16);
        CMLSequence.append(_:)(v13);
        if (v2) {
          break;
        }
        ++v10;
        swift_release();
        swift_bridgeObjectRelease();
        if (v8 == v10)
        {
          swift_bridgeObjectRelease();
          BOOL v3 = v19;
          goto LABEL_7;
        }
      }
      swift_release();
      swift_setDeallocating();
      CMLFeatureValue.deinit();
      swift_deallocClassInstance();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      BOOL v3 = v19;
    }
    else
    {
LABEL_7:
      type metadata accessor for CMLColumn();
      uint64_t v14 = CMLColumn.__allocating_init(_:type:)(inited, 4);
      if (!v2)
      {
        uint64_t v15 = v14;
        swift_bridgeObjectRelease();
        *(void *)(v3 + 16) = v15;
        return v3;
      }
    }
    swift_bridgeObjectRelease();
    type metadata accessor for _UntypedColumn();
    swift_deallocPartialClassInstance();
    return v3;
  }
  __break(1u);
  return result;
}

void static MLClassifierMetrics.__evaluation(on:labelColumn:predictionColumn:classes:)(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v12 = *(char **)a1;
  int v13 = *(unsigned __int8 *)(a1 + 8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = swift_initStackObject();
  int64_t v168 = 1;
  *(_OWORD *)(inited + 16) = xmmword_2272CB370;
  *(void *)(inited + 32) = a4;
  *(void *)(inited + 40) = a5;
  int64_t v177 = v12;
  v172 = v12;
  LOBYTE(v173) = v13;
  swift_bridgeObjectRetain();
  static _ValidationUtilities.validateTableFormat(table:context:columns:)((uint64_t)&v172, 0x6974636964657250, (void *)0xEA00000000006E6FLL, inited);
  if (v7)
  {
    swift_setDeallocating();
    specialized _ContiguousArrayStorage.__deallocating_deinit();
    return;
  }
  uint64_t v165 = a6;
  uint64_t v161 = a7;
  uint64_t v162 = a4;
  v172 = v177;
  LOBYTE(v173) = v13;
  uint64_t v15 = swift_initStackObject();
  *(_OWORD *)(v15 + 16) = xmmword_2272CB370;
  *(void *)(v15 + 32) = a2;
  *(void *)(v15 + 40) = a3;
  swift_bridgeObjectRetain();
  static _ValidationUtilities.validateTableFormat(table:context:columns:)((uint64_t)&v172, 0x6C6562614CLL, (void *)0xE500000000000000, v15);
  swift_setDeallocating();
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  swift_setDeallocating();
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  v172 = v177;
  LOBYTE(v173) = v13;
  uint64_t v16 = swift_initStackObject();
  *(_OWORD *)(v16 + 16) = xmmword_2272CB370;
  *(void *)(v16 + 32) = a2;
  *(void *)(v16 + 40) = a3;
  LOBYTE(v170) = 2;
  LOBYTE(v175) = 4;
  swift_bridgeObjectRetain();
  static _ValidationUtilities.validateTableTypes(table:featureColumns:featureType:labelColumn:labelType:)((uint64_t *)&v172, v16, (unsigned __int8 *)&v170, a4, a5, (unsigned __int8 *)&v175);
  uint64_t v17 = v177;
  swift_setDeallocating();
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  uint64_t v164 = *(void *)(a6 + 16);
  if (!v164)
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_4_36();
    OUTLINED_FUNCTION_32_2(v43, v44);
    *a7 = v45;
    type metadata accessor for MLClassifierMetrics.Contents(0);
    swift_storeEnumTagMultiPayload();
    return;
  }
  uint64_t v155 = (void *)a5;
  v172 = v17;
  LOBYTE(v173) = v13;
  outlined copy of Result<_DataTable, Error>(v17, v13);
  MLDataTable.subscript.getter(a2, a3, (uint64_t)&v170);
  uint64_t v18 = v170;
  char v19 = v171;
  uint64_t v175 = v170;
  char v176 = v171;
  MLUntypedColumn.dropDuplicates()(&v172);
  outlined consume of Result<_DataTable, Error>(v18, v19);
  uint64_t v20 = (uint64_t)a7;
  if (v173) {
    goto LABEL_152;
  }
  int64_t v21 = v172;
  int64_t v22 = (char *)*((void *)v172 + 2);
  outlined copy of Result<_DataTable, Error>(v172, 0);
  uint64_t v23 = CMLColumn.size.getter();
  uint64_t v163 = v21;
  OUTLINED_FUNCTION_26_8();
  if (v23 < 0) {
    goto LABEL_152;
  }
  HIDWORD(v157) = v13;
  if (v23)
  {
    uint64_t v25 = 0;
    uint64_t v156 = a6 + 72;
    uint64_t v158 = 0x80000002272D80F0;
    uint64_t v159 = v23;
    uint64_t v26 = v17;
    uint64_t v27 = v161;
    while (1)
    {
      if (v25 == v23)
      {
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        __break(1u);
LABEL_145:
        __break(1u);
LABEL_146:
        __break(1u);
LABEL_147:
        __break(1u);
LABEL_148:
        __break(1u);
LABEL_149:
        outlined consume of MLDataValue((void *)v20, v22, v24);
        __break(1u);
        __break(1u);
        goto LABEL_150;
      }
      outlined copy of Result<_DataTable, Error>(v163, 0);
      _UntypedColumn.valueAtIndex(index:)(v25, (uint64_t)&v172);
      OUTLINED_FUNCTION_26_9();
      uint64_t v20 = (uint64_t)v172;
      int64_t v22 = v173;
      char v24 = v174;
      if (v174 != 2) {
        goto LABEL_149;
      }
      BOOL v28 = *(char **)(v165 + 32) == v172 && v173 == *(char **)(v165 + 40);
      if (!v28 && (OUTLINED_FUNCTION_6_29() & 1) == 0)
      {
        if (v164 == 1) {
          goto LABEL_20;
        }
        BOOL v31 = *(void *)(v165 + 48) == v20 && v22 == *(char **)(v165 + 56);
        if (!v31 && (OUTLINED_FUNCTION_6_29() & 1) == 0) {
          break;
        }
      }
      outlined consume of MLDataValue((void *)v20, v22, 2);
LABEL_17:
      if (++v25 == v23) {
        goto LABEL_47;
      }
    }
    if (v164 == 2)
    {
LABEL_20:
      uint64_t v29 = swift_initStackObject();
      *(_OWORD *)(v29 + 16) = xmmword_2272CB370;
      *(void *)(v29 + 32) = v20;
      *(void *)(v29 + 40) = v22;
      type metadata accessor for _UntypedColumn();
      swift_allocObject();
      outlined copy of Result<_DataTable, Error>(v26, BYTE4(v157) & 1);
      uint64_t v30 = swift_bridgeObjectRetain();
      uint64_t v36 = (void *)specialized _UntypedColumn.init<A>(_:)(v30);
      if ((v157 & 0x100000000) != 0)
      {
        v172 = v26;
        uint64_t v37 = v26;
        outlined copy of Result<_DataTable, Error>(v26, 1);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        uint64_t v38 = _getErrorEmbeddedNSError<A>(_:)();
        if (v38)
        {
          int64_t v22 = (char *)v38;
          OUTLINED_FUNCTION_10_21();
        }
        else
        {
          int64_t v22 = (char *)OUTLINED_FUNCTION_85();
          *uint64_t v40 = v172;
        }
        int v42 = 1;
        outlined consume of Result<_DataTable, Error>(v26, 1);
        outlined consume of Result<_DataTable, Error>(v36, 0);
        swift_bridgeObjectRelease();
      }
      else
      {
        OUTLINED_FUNCTION_9_25();
        outlined copy of Result<_DataTable, Error>(v36, 0);
        uint64_t v39 = swift_retain();
        uint64_t v41 = CMLTable.filtered(_:columnName:isExcluding:)(v39, a2, (uint64_t)a3, 1);
        outlined consume of Result<_DataTable, Error>(v36, 0);
        swift_release();
        type metadata accessor for _DataTable();
        swift_allocObject();
        int64_t v22 = (char *)_DataTable.init(impl:)(v41);
        OUTLINED_FUNCTION_8_25();
        int v42 = 0;
      }
      uint64_t v20 = BYTE4(v157) & 1;
      outlined consume of Result<_DataTable, Error>(v26, BYTE4(v157) & 1);
      outlined consume of Result<_DataTable, Error>(v26, BYTE4(v157) & 1);
      uint64_t v26 = v22;
      HIDWORD(v157) = v42;
    }
    else
    {
      unint64_t v32 = (char **)(v165 + 72);
      uint64_t v33 = 2;
      while (1)
      {
        uint64_t v34 = v33 + 1;
        if (__OFADD__(v33, 1)) {
          goto LABEL_146;
        }
        BOOL v35 = *(v32 - 1) == (char *)v20 && v22 == *v32;
        if (v35 || (OUTLINED_FUNCTION_6_29() & 1) != 0) {
          break;
        }
        v32 += 2;
        ++v33;
        if (v34 == v164) {
          goto LABEL_20;
        }
      }
      outlined consume of MLDataValue((void *)v20, v22, 2);
    }
    uint64_t v27 = v161;
    uint64_t v23 = v159;
    goto LABEL_17;
  }
  uint64_t v26 = v17;
  uint64_t v27 = v161;
LABEL_47:
  v172 = v26;
  char v46 = BYTE4(v157);
  char v47 = BYTE4(v157) & 1;
  LOBYTE(v173) = BYTE4(v157) & 1;
  if (!MLDataTable.size.getter())
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v112 = OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_4_36();
    OUTLINED_FUNCTION_32_2(v114, v113 + 58);
    outlined consume of Result<_DataTable, Error>(v163, 0);
    outlined consume of Result<_DataTable, Error>(v26, v47);
    uint64_t *v27 = v112;
    type metadata accessor for MLClassifierMetrics.Contents(0);
LABEL_128:
    swift_storeEnumTagMultiPayload();
    return;
  }
  LOBYTE(v170) = BYTE4(v157) & 1;
  outlined copy of Result<_DataTable, Error>(v26, v47);
  uint64_t v48 = 0;
  uint64_t v49 = v165;
  uint64_t v151 = v165 + 72;
  int64_t v177 = v26;
  if ((v157 & 0x100000000) != 0) {
    goto LABEL_53;
  }
  while (2)
  {
    swift_retain();
    Swift::Int v50 = CMLTable.rows()();
    if (v51) {
      goto LABEL_156;
    }
    Swift::Int v52 = v50;
    Swift::Int v154 = CMLTable.columns()();
    if (v53) {
      goto LABEL_156;
    }
    OUTLINED_FUNCTION_21_13();
    if (v48 == v52)
    {
      unint64_t v115 = v26;
      char v116 = 0;
      goto LABEL_130;
    }
LABEL_61:
    OUTLINED_FUNCTION_9_25();
    swift_retain();
    CMLTable.row(at:)(v48);
    uint64_t v160 = v65;
    swift_release();
    OUTLINED_FUNCTION_9_25();
    _DataTable.columnNames.getter(&v172);
    OUTLINED_FUNCTION_21_13();
    uint64_t v60 = v172;
    OUTLINED_FUNCTION_9_25();
    uint64_t v64 = _DataTable.columnIndexes.getter();
    OUTLINED_FUNCTION_21_13();
    OUTLINED_FUNCTION_21_13();
    if (v46)
    {
LABEL_62:
      v172 = v26;
      outlined copy of Result<_DataTable, Error>(v26, 1);
      unint64_t v66 = v26;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v67 = _getErrorEmbeddedNSError<A>(_:)();
      if (v67)
      {
        int64_t v22 = (char *)v67;
        OUTLINED_FUNCTION_10_21();
      }
      else
      {
        int64_t v22 = (char *)OUTLINED_FUNCTION_85();
        char *v71 = v172;
      }
      OUTLINED_FUNCTION_10_21();
      outlined consume of Result<_RegressorMetrics, Error>(v22, v153, 1);
      uint64_t v20 = 0;
    }
    else
    {
      int64_t v22 = (char *)*((void *)v26 + 2);
      swift_retain();
      Swift::Int v68 = CMLTable.rows()();
      if (v69) {
        goto LABEL_156;
      }
      uint64_t v20 = v68;
      Swift::Int v153 = CMLTable.columns()();
      if (v70) {
        goto LABEL_156;
      }
      OUTLINED_FUNCTION_21_13();
    }
    if (v48 >= v20) {
      goto LABEL_145;
    }
    uint64_t v20 = v160;
    if (!*(void *)(v64 + 16)) {
      goto LABEL_120;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    unint64_t v72 = specialized __RawDictionaryStorage.find<A>(_:)(v162, (uint64_t)v155);
    if ((v73 & 1) == 0)
    {
      swift_release_n();
      swift_bridgeObjectRelease_n();
      swift_release_n();
      swift_bridgeObjectRelease();
      goto LABEL_122;
    }
    uint64_t v74 = *(void *)(*(void *)(v64 + 56) + 8 * v72);
    swift_bridgeObjectRelease();
    swift_retain_n();
    CMLSequence.value(at:)(v74);
    uint64_t v76 = v75;
    swift_release();
    MLDataValue.init(_:)(v76, (uint64_t)&v172);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release_n();
    uint64_t v77 = v172;
    char v24 = v174;
    if (v174 != 4)
    {
      outlined consume of MLDataValue(v172, v173, v174);
LABEL_120:
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_121;
    }
    uint64_t v152 = v64;
    if (*((void *)v172 + 2) != v164)
    {
      outlined consume of MLDataValue(v172, v173, 4);
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_85();
      OUTLINED_FUNCTION_4_36();
      OUTLINED_FUNCTION_32_2(v140, v139 + 89);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      outlined consume of Result<_DataTable, Error>(v163, 0);
      outlined consume of Result<_DataTable, Error>(v26, BYTE4(v157) & 1);
      OUTLINED_FUNCTION_14_20(v141, v142, v143, v144, v145, v146, v147, v148, v150, v151, v64, v153, v154, (uint64_t)v155, v156, v157, v158, v159, v160,
        v161,
        v162,
        (uint64_t)v163,
        v164,
        v165,
        (uint64_t)a3,
        a2,
        v168,
        2,
        (char)v170);
      goto LABEL_128;
    }
    uint64_t v158 = 0;
    uint64_t v159 = (uint64_t)v60;
    uint64_t v156 = v48;
    int64_t v78 = 0;
    int64_t v22 = v172 + 64;
    uint64_t v79 = 1 << v172[32];
    if (v79 < 64) {
      uint64_t v80 = ~(-1 << v79);
    }
    else {
      uint64_t v80 = -1;
    }
    unint64_t v81 = v80 & *((void *)v172 + 8);
    int64_t v168 = (unint64_t)(v79 + 63) >> 6;
LABEL_78:
    while (v81)
    {
      unint64_t v82 = __clz(__rbit64(v81));
      v81 &= v81 - 1;
      unint64_t v83 = v82 | (v78 << 6);
LABEL_94:
      uint64_t v87 = *((void *)v77 + 6) + 24 * v83;
      if (*(unsigned char *)(v87 + 16) == 2)
      {
        uint64_t v20 = *(void *)v87;
        char v88 = *(void **)(v87 + 8);
        if (*(void *)(v49 + 32) != *(void *)v87 || v88 != *(void **)(v49 + 40))
        {
          uint64_t v90 = v77;
          char v91 = _stringCompareWithSmolCheck(_:_:expecting:)();
          uint64_t v77 = v90;
          if ((v91 & 1) == 0)
          {
            if (v164 == 1) {
              goto LABEL_126;
            }
            uint64_t v49 = v165;
            BOOL v92 = *(void *)(v165 + 48) == v20 && v88 == *(void **)(v165 + 56);
            uint64_t v26 = v177;
            if (!v92)
            {
              char v93 = _stringCompareWithSmolCheck(_:_:expecting:)();
              uint64_t v77 = v90;
              if ((v93 & 1) == 0)
              {
                if (v164 == 2)
                {
LABEL_126:
                  v172 = 0;
                  uint64_t v173 = (char *)0xE000000000000000;
                  outlined copy of MLDataValue((id)v20, v88, 2);
                  _StringGuts.grow(_:)(93);
                  v98._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
                  v98._object = (void *)0x80000002272D7F50;
                  String.append(_:)(v98);
                  outlined copy of MLDataValue((id)v20, v88, 2);
                  v99._uint64_t countAndFlagsBits = v20;
                  v99._object = v88;
                  String.append(_:)(v99);
                  outlined consume of MLDataValue((void *)v20, v88, 2);
                  v100._uint64_t countAndFlagsBits = 0xD000000000000031;
                  v100._object = (void *)0x80000002272D7F80;
                  String.append(_:)(v100);
                  unint64_t v101 = v172;
                  unint64_t v102 = v173;
                  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
                  OUTLINED_FUNCTION_85();
                  *(void *)uint64_t v103 = v101;
                  *(void *)(v103 + 8) = v102;
                  *(_OWORD *)(v103 + 16) = 0u;
                  *(_OWORD *)(v103 + 32) = 0u;
                  *(unsigned char *)(v103 + 48) = 0;
                  outlined consume of MLDataValue((void *)v20, v88, 2);
                  swift_release();
                  swift_bridgeObjectRelease();
                  swift_release();
                  outlined consume of Result<_DataTable, Error>(v163, 0);
                  outlined consume of Result<_DataTable, Error>(v177, BYTE4(v157) & 1);
                  uint64_t v104 = swift_release();
                  OUTLINED_FUNCTION_14_20(v104, v105, v106, v107, v108, v109, v110, v111, v150, v151, v152, v153, v154, (uint64_t)v155, v156, v157, 0, v159, v160,
                    v161,
                    v162,
                    (uint64_t)v163,
                    v164,
                    v165,
                    (uint64_t)a3,
                    a2,
                    v168,
                    2,
                    (char)v170);
                  swift_storeEnumTagMultiPayload();
                  return;
                }
                unint64_t v94 = (void **)(v165 + 72);
                uint64_t v95 = 2;
                while (1)
                {
                  uint64_t v96 = v95 + 1;
                  if (__OFADD__(v95, 1)) {
                    goto LABEL_144;
                  }
                  if (*(v94 - 1) == (void *)v20 && v88 == *v94) {
                    break;
                  }
                  if (_stringCompareWithSmolCheck(_:_:expecting:)())
                  {
                    uint64_t v26 = v177;
                    uint64_t v49 = v165;
                    uint64_t v77 = v90;
                    goto LABEL_78;
                  }
                  v94 += 2;
                  ++v95;
                  uint64_t v77 = v90;
                  if (v96 == v164) {
                    goto LABEL_126;
                  }
                }
                uint64_t v26 = v177;
                uint64_t v49 = v165;
              }
            }
          }
        }
      }
    }
    int64_t v84 = v78 + 1;
    uint64_t v48 = v156;
    if (__OFADD__(v78, 1)) {
      goto LABEL_143;
    }
    if (v84 < v168)
    {
      unint64_t v85 = *(void *)&v22[8 * v84];
      ++v78;
      uint64_t v20 = v159;
      if (v85) {
        goto LABEL_93;
      }
      int64_t v78 = v84 + 1;
      if (v84 + 1 >= v168) {
        goto LABEL_125;
      }
      unint64_t v85 = *(void *)&v22[8 * v78];
      if (v85) {
        goto LABEL_93;
      }
      int64_t v78 = v84 + 2;
      if (v84 + 2 >= v168) {
        goto LABEL_125;
      }
      unint64_t v85 = *(void *)&v22[8 * v78];
      if (v85)
      {
LABEL_93:
        unint64_t v81 = (v85 - 1) & v85;
        unint64_t v83 = __clz(__rbit64(v85)) + (v78 << 6);
        goto LABEL_94;
      }
      int64_t v86 = v84 + 3;
      if (v86 < v168)
      {
        unint64_t v85 = *(void *)&v22[8 * v86];
        if (!v85)
        {
          while (1)
          {
            int64_t v78 = v86 + 1;
            if (__OFADD__(v86, 1)) {
              goto LABEL_147;
            }
            if (v78 >= v168) {
              goto LABEL_125;
            }
            unint64_t v85 = *(void *)&v22[8 * v78];
            ++v86;
            if (v85) {
              goto LABEL_93;
            }
          }
        }
        int64_t v78 = v86;
        goto LABEL_93;
      }
LABEL_125:
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
LABEL_121:
      swift_release();
      goto LABEL_122;
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
LABEL_122:
    ++v48;
    char v46 = (char)v170;
    if ((v170 & 1) == 0) {
      continue;
    }
    break;
  }
LABEL_53:
  v172 = v26;
  outlined copy of Result<_DataTable, Error>(v26, 1);
  uint64_t v54 = v26;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  uint64_t v55 = _getErrorEmbeddedNSError<A>(_:)();
  if (v55)
  {
    uint64_t v56 = (void *)v55;
    char v116 = 1;
    OUTLINED_FUNCTION_10_21();
  }
  else
  {
    uint64_t v56 = (void *)OUTLINED_FUNCTION_85();
    char *v57 = v172;
    char v116 = (char)v170;
  }
  outlined consume of Result<_DataTable, Error>(v26, 1);
  outlined consume of Result<_RegressorMetrics, Error>(v56, v154, 1);
  if (v48)
  {
    if (v116)
    {
      outlined copy of Result<_DataTable, Error>(v26, 1);
      uint64_t v58 = MEMORY[0x22A676370](0);
      if (v58)
      {
        uint64_t v59 = v58;
        OUTLINED_FUNCTION_10_21();
        type metadata accessor for CMLSequence();
        uint64_t v60 = (void *)swift_allocObject();
        v60[2] = v59;
        *((unsigned char *)v60 + 24) = 1;
        uint64_t v61 = MEMORY[0x22A676370](0);
        if (v61)
        {
          uint64_t v62 = v61;
          uint64_t v63 = swift_allocObject();
          *(void *)(v63 + 16) = v62;
          uint64_t v160 = v63;
          *(unsigned char *)(v63 + 24) = 1;
          uint64_t v64 = MEMORY[0x263F8EE80];
          goto LABEL_62;
        }
LABEL_151:
        __break(1u);
LABEL_152:
        __break(1u);
LABEL_153:
        __break(1u);
LABEL_154:
        __break(1u);
LABEL_155:
        __break(1u);
        while (1)
        {
LABEL_156:
          swift_unexpectedError();
          __break(1u);
        }
      }
LABEL_150:
      __break(1u);
      goto LABEL_151;
    }
    goto LABEL_61;
  }
  unint64_t v115 = v26;
LABEL_130:
  outlined consume of Result<_DataTable, Error>(v115, v116);
  uint64_t v117 = MEMORY[0x22A676420](0);
  if (!v117) {
    goto LABEL_153;
  }
  uint64_t v118 = v117;
  type metadata accessor for CMLParameters();
  uint64_t v119 = swift_initStackObject();
  *(void *)(v119 + 16) = v118;
  if ((v157 & 0x100000000) != 0)
  {
    outlined copy of Result<_DataTable, Error>(v115, 1);
    swift_willThrow();
    goto LABEL_156;
  }
  uint64_t v120 = v119;
  uint64_t v121 = *((void *)v115 + 2);
  swift_retain();
  CMLParameters.add(key:table:)(4, v121);
  swift_release();
  type metadata accessor for CMLFeatureValue();
  swift_bridgeObjectRetain();
  uint64_t v169 = v120;
  uint64_t v122 = CMLFeatureValue.__allocating_init(_:)();
  CMLParameters.add(key:featureValue:)(5, v122);
  swift_release();
  uint64_t v123 = CMLFeatureValue.__allocating_init(_:)();
  CMLParameters.add(key:featureValue:)(29, v123);
  swift_release();
  uint64_t v170 = v115;
  LOBYTE(v171) = 0;
  MLDataTable.subscript.getter(v162, v155, (uint64_t)&v172);
  unint64_t v124 = v172;
  if (v173)
  {
    outlined consume of Result<_DataTable, Error>(v172, 1);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_4_36();
    *(void *)uint64_t v126 = v125 + 47;
    *(void *)(v126 + 8) = 0x80000002272D8010;
    *(_OWORD *)(v126 + 16) = 0u;
    *(_OWORD *)(v126 + 32) = 0u;
    *(unsigned char *)(v126 + 48) = 1;
    swift_willThrow();
    swift_setDeallocating();
    tc_v1_release();
    outlined consume of Result<_DataTable, Error>(v163, 0);
    Swift::String v127 = v115;
  }
  else
  {
    uint64_t v20 = *((void *)v172 + 2);
    swift_retain();
    CMLParameters.add(key:column:)(28, v20);
    swift_release();
    outlined consume of Result<_DataTable, Error>(v124, 0);
    uint64_t v128 = MEMORY[0x22A676330](0);
    if (!v128) {
      goto LABEL_154;
    }
    uint64_t v129 = v128;
    type metadata accessor for CMLDictionary();
    *(void *)(swift_initStackObject() + 16) = v129;
    uint64_t v130 = MEMORY[0x22A676370](0);
    if (!v130) {
      goto LABEL_155;
    }
    int64_t v22 = (char *)v130;
    type metadata accessor for CMLSequence();
    uint64_t v131 = swift_initStackObject();
    *(void *)(v131 + 16) = v22;
    *(unsigned char *)(v131 + 24) = 1;
    swift_bridgeObjectRetain();
    uint64_t v132 = 0;
    uint64_t v133 = v49 + 40;
    do
    {
      uint64_t v134 = v132 + 1;
      if (__OFADD__(v132, 1)) {
        goto LABEL_148;
      }
      swift_bridgeObjectRetain_n();
      uint64_t v135 = CMLFeatureValue.__allocating_init(_:)();
      swift_bridgeObjectRelease();
      int64_t v22 = (char *)v131;
      CMLSequence.append(_:)(v135);
      swift_release();
      ++v132;
      v133 += 16;
      uint64_t v20 = v165;
    }
    while (v134 != v164);
    swift_bridgeObjectRelease();
    uint64_t v136 = swift_retain();
    uint64_t v137 = CMLFeatureValue.__allocating_init(_:)(v136);
    CMLDictionary.add(key:value:)(0x73657373616C63, 0xE700000000000000, v137);
    swift_release();
    CMLParameters.setOptions(dictionary:)();
    OUTLINED_FUNCTION_4_36();
    uint64_t v149 = specialized String.withCString<A>(_:)((void *(*)(uint64_t *__return_ptr, void *))partial apply for closure #1 in CMLCallFunction(name:arguments:), v169, v138 + 12, 0x80000002272D8060);
    type metadata accessor for _Model();
    static _Model.makeClassifierEvaluationMetrics(_:classes:)((uint64_t)v149, v165, v161);
    swift_release();
    swift_setDeallocating();
    CMLFeatureValue.deinit();
    swift_deallocClassInstance();
    swift_setDeallocating();
    tc_v1_release();
    swift_setDeallocating();
    tc_v1_release();
    outlined consume of Result<_DataTable, Error>(v163, 0);
    Swift::String v127 = v177;
  }
  outlined consume of Result<_DataTable, Error>(v127, 0);
}

void static MLRegressorMetrics.__evaluation(on:targetColumn:predictionColumn:)(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X8>)
{
  id v11 = *(id *)a1;
  char v12 = *(unsigned char *)(a1 + 8);
  uint64_t v46 = *(void *)a1;
  outlined copy of Result<_DataTable, Error>(*(id *)a1, v12);
  MLDataTable.subscript.getter(a2, a3, (uint64_t)&v47);
  outlined consume of Result<_DataTable, Error>(v11, v12);
  OUTLINED_FUNCTION_5_32(v13, v14, v15, v16, v17, v18, v19, v20, v46, v12, v47, v48);
  id v21 = v49;
  char v22 = v50;
  if ((v50 & 1) != 0
    || (outlined copy of Result<_DataTable, Error>(v49, 0),
        _UntypedColumn.type.getter(&v47),
        OUTLINED_FUNCTION_26_8(),
        v47 != 1))
  {
    outlined consume of Result<_DataTable, Error>(v21, v22);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_11_23();
    OUTLINED_FUNCTION_19_0(v40, v41);
  }
  else
  {
    outlined copy of Result<_DataTable, Error>(v11, v12);
    MLDataTable.subscript.getter(a4, a5, (uint64_t)&v47);
    outlined consume of Result<_DataTable, Error>(v11, v12);
    OUTLINED_FUNCTION_5_32(v23, v24, v25, v26, v27, v28, v29, v30, (uint64_t)v11, v12, v47, v48);
    id v31 = v49;
    char v32 = v50;
    if ((v50 & 1) != 0
      || (outlined copy of Result<_DataTable, Error>(v49, 0),
          _UntypedColumn.type.getter(&v47),
          OUTLINED_FUNCTION_26_9(),
          v47 != 1))
    {
      outlined consume of Result<_DataTable, Error>(v31, v32);
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_85();
      OUTLINED_FUNCTION_11_23();
      OUTLINED_FUNCTION_19_0(v43, v42 + 4);
    }
    else
    {
      outlined copy of Result<_DataTable, Error>(v21, 0);
      uint64_t v33 = specialized Array<A>.init(_:)(v21, 0);
      outlined copy of Result<_DataTable, Error>(v31, 0);
      uint64_t v34 = specialized Array<A>.init(_:)(v31, 0);
      static _MetricUtilities.rmse(target:prediction:)(v33, v34);
      uint64_t v36 = v35;
      uint64_t v37 = static _MetricUtilities.maximumError(target:prediction:)(v33, v34);
      char v39 = v38;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v39 & 1) == 0)
      {
        OUTLINED_FUNCTION_26_8();
        OUTLINED_FUNCTION_26_9();
        *(void *)a6 = v37;
        *(void *)(a6 + 8) = v36;
        *(unsigned char *)(a6 + 16) = 0;
        return;
      }
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_85();
      OUTLINED_FUNCTION_11_23();
      OUTLINED_FUNCTION_19_0(v45, v44 + 23);
      OUTLINED_FUNCTION_26_9();
    }
    OUTLINED_FUNCTION_26_8();
  }
}

uint64_t specialized Dictionary<>.featureValue.getter(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x22A676330](0);
  if (!v2) {
    goto LABEL_28;
  }
  uint64_t v3 = v2;
  type metadata accessor for CMLDictionary();
  *(void *)(swift_initStackObject() + 16) = v3;
  uint64_t v33 = a1 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v34 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v7 = 0;
  uint64_t v8 = MEMORY[0x263F8D538];
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v7 << 6);
      goto LABEL_18;
    }
    if (__OFADD__(v7++, 1))
    {
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
      while (1)
      {
        swift_unexpectedError();
        __break(1u);
      }
    }
    if (v7 >= v34) {
      goto LABEL_24;
    }
    unint64_t v12 = *(void *)(v33 + 8 * v7);
    if (v12) {
      goto LABEL_17;
    }
    int64_t v13 = v7 + 1;
    if (v7 + 1 >= v34) {
      goto LABEL_24;
    }
    unint64_t v12 = *(void *)(v33 + 8 * v13);
    if (!v12)
    {
      int64_t v13 = v7 + 2;
      if (v7 + 2 >= v34) {
        goto LABEL_24;
      }
      unint64_t v12 = *(void *)(v33 + 8 * v13);
      if (!v12) {
        break;
      }
    }
LABEL_16:
    int64_t v7 = v13;
LABEL_17:
    unint64_t v6 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v7 << 6);
LABEL_18:
    uint64_t v14 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v10);
    uint64_t v16 = *v14;
    uint64_t v15 = v14[1];
    uint64_t v17 = *(void *)(*(void *)(a1 + 56) + 8 * v10);
    uint64_t v42 = v8;
    uint64_t v43 = &protocol witness table for Double;
    v40[0] = v17;
    __swift_project_boxed_opaque_existential_1(v40, v8);
    uint64_t v18 = swift_bridgeObjectRetain();
    specialized handling<A, B>(_:_:)(v18, v19, v20, v21, v22, v23, v24, v25, v32, v33, v34, v35, v36, v37, v38, v39, v40[0], v40[1], v41,
      v42,
      (uint64_t)v43,
      v44,
      v45,
      v46,
      v47,
      v48,
      v49,
      v50,
      v51,
      v52);
    uint64_t v27 = v26;
    if (!v26) {
      goto LABEL_27;
    }
    type metadata accessor for CMLFeatureValue();
    swift_initStackObject();
    uint64_t v28 = CMLFeatureValue.init(rawValue:ownsValue:)(v27, 1);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v40);
    CMLDictionary.add(key:value:)(v16, v15, v28);
    swift_release();
    swift_bridgeObjectRelease();
  }
  int64_t v13 = v7 + 3;
  if (v7 + 3 < v34)
  {
    unint64_t v12 = *(void *)(v33 + 8 * v13);
    if (!v12)
    {
      while (1)
      {
        int64_t v7 = v13 + 1;
        if (__OFADD__(v13, 1)) {
          goto LABEL_26;
        }
        if (v7 >= v34) {
          goto LABEL_24;
        }
        unint64_t v12 = *(void *)(v33 + 8 * v7);
        ++v13;
        if (v12) {
          goto LABEL_17;
        }
      }
    }
    goto LABEL_16;
  }
LABEL_24:
  swift_release();
  type metadata accessor for CMLFeatureValue();
  uint64_t v29 = swift_retain();
  uint64_t v30 = CMLFeatureValue.__allocating_init(_:)(v29);
  swift_setDeallocating();
  tc_v1_release();
  return v30;
}

uint64_t specialized closure #1 in MLUntypedColumn.init<A>(_:)(uint64_t a1)
{
  return specialized closure #1 in MLUntypedColumn.init<A>(_:)(a1, specialized _UntypedColumn.init<A>(_:));
}

{
  return specialized closure #1 in MLUntypedColumn.init<A>(_:)(a1, specialized _UntypedColumn.init<A>(_:));
}

{
  return specialized closure #1 in MLUntypedColumn.init<A>(_:)(a1, specialized _UntypedColumn.init<A>(_:));
}

{
  return specialized closure #1 in MLUntypedColumn.init<A>(_:)(a1, specialized _UntypedColumn.init<A>(_:));
}

{
  return specialized closure #1 in MLUntypedColumn.init<A>(_:)(a1, specialized _UntypedColumn.init<A>(_:));
}

uint64_t specialized closure #1 in MLUntypedColumn.init<A>(_:)(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  type metadata accessor for _UntypedColumn();
  swift_allocObject();
  uint64_t v3 = swift_bridgeObjectRetain();
  return a2(v3);
}

uint64_t partial apply for closure #1 in CMLCallFunction(name:arguments:)(uint64_t a1)
{
  return closure #1 in CMLCallFunction(name:arguments:)(a1, v1);
}

uint64_t lazy protocol witness table accessor for type [Int] and conformance <A> [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_3_39()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_5_32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  a9 = a11;
  a10 = a12;
  return MLUntypedColumn.init(doubles:)((uint64_t)&a9);
}

uint64_t OUTLINED_FUNCTION_6_29()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_8_25()
{
  outlined consume of Result<_DataTable, Error>(v0, 0);
  outlined consume of Result<_DataTable, Error>(v1, 0);
  return swift_bridgeObjectRelease();
}

id OUTLINED_FUNCTION_9_25()
{
  return outlined copy of Result<_DataTable, Error>(v0, 0);
}

void OUTLINED_FUNCTION_10_21()
{
  outlined consume of Result<_DataTable, Error>(v0, 1);
}

uint64_t OUTLINED_FUNCTION_14_20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  outlined consume of Result<_DataTable, Error>(v29, a29);
  *a20 = v30;
  return type metadata accessor for MLClassifierMetrics.Contents(0);
}

BOOL OUTLINED_FUNCTION_15_19(uint64_t a1)
{
  return a1 == 0;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML16ColumnDescriptorVG_20MLModelSpecification18FeatureDescriptionVs5NeverOTg503_s8d56ML17MLLinearRegressorV5ModelV6export16internalMetadata20hi19ADVSDyS2SGz_tKFAH18jk5VAA16fG54Vcfu0_33_3fd57c9cf8bb5b882e179ce0f1f8c55eAnLTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v17 = type metadata accessor for FeatureDescription();
  uint64_t v3 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = MEMORY[0x263F8EE78];
  if (v6)
  {
    v16[1] = v1;
    uint64_t v18 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    uint64_t v7 = v18;
    v16[2] = v3 + 32;
    uint64_t v8 = (char *)(a1 + 56);
    do
    {
      uint64_t v9 = *((void *)v8 - 3);
      uint64_t v10 = *((void *)v8 - 2);
      uint64_t v11 = *((void *)v8 - 1);
      char v12 = *v8;
      swift_bridgeObjectRetain();
      outlined copy of ColumnDescriptor.ColumnTypeDescriptor(v11, v12);
      ColumnDescriptor.featureDescription.getter(v9, v10, v11, v12);
      swift_bridgeObjectRelease();
      outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v11, v12);
      uint64_t v18 = v7;
      unint64_t v14 = *(void *)(v7 + 16);
      unint64_t v13 = *(void *)(v7 + 24);
      if (v14 >= v13 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        uint64_t v7 = v18;
      }
      v8 += 32;
      *(void *)(v7 + 16) = v14 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v7+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v14, v5, v17);
      --v6;
    }
    while (v6);
  }
  return v7;
}

Swift::Int specialized FeatureVectorizer.Transformer.exportEncoders()(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  return specialized FeatureVectorizer.Transformer.exportEncoders()(a1, a2, a3);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t ML16ColumnDescriptorVG_SSs5NeverOTg503_s8d131ML17FeatureVectorizerV11TransformerV10vectorized_13includingBias0A12MLComponents11DenseMatrixVyxG11TabularData0M5FrameV_SbtKFSSAA16fG54Vcfu_33_44daf68368b8b9c6f03dca699c8750fcAPSSTf3nnnpk_nTf1cn_n;
  uint64_t v41;
  char v42;
  uint64_t i;
  Swift::String v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(void);
  uint64_t v55;
  char *v56;
  BOOL v57;
  char *v58;
  void (*v59)(void);
  char v60;
  char v61;
  void *v62;
  Swift::String v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char v68;
  uint64_t v69;
  Swift::String v70;
  Swift::Int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  Swift::Int v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  void *v80;
  BOOL v81;
  uint64_t v82;
  char v83;
  void *v84;
  BOOL v85;
  void *v86;
  Swift::String v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  char v92;
  uint64_t v93;
  Swift::String v94;
  uint64_t v95;
  Swift::Int v96;
  uint64_t v97;
  Swift::Int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  void *v104;
  BOOL v105;
  uint64_t v106;
  char v107;
  void *v108;
  BOOL v109;
  char *v110;
  void (*v111)(void);
  char v112;
  void (*v113)(void);
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void (*v125)(void);
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void (*v131)(void);
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void (*v135)(void);
  uint64_t v136;
  uint64_t v137;
  void (*v138)(uint64_t);
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void (*v148)(void);
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  void (*v155)(void);
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  void (*v160)(void);
  uint64_t v161;
  uint64_t v162;
  void (*v163)(uint64_t);
  void (*v164)(void);
  uint64_t v165;
  unint64_t v166;
  void (*v167)(void);
  void (*v168)(void);
  void (*v169)(void);
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  Swift::Int v176;
  char *v177;
  void (*v178)(void);
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  Swift::Int v188;
  void v190[7];
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  uint64_t v216;
  Swift::Int v217;
  void (*v218)(void);
  char *v219;
  void (*v220)(void);
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  uint64_t v225;
  void *v226;
  long long v227;
  Swift::Int v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;

  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureDescription?);
  uint64_t v7 = OUTLINED_FUNCTION_17(v6);
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_106();
  OUTLINED_FUNCTION_17_3(v9);
  uint64_t v10 = type metadata accessor for FeatureVectorizerConfiguration.Input();
  OUTLINED_FUNCTION_0();
  uint64_t v212 = v11;
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_49();
  v223 = v13;
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_106();
  OUTLINED_FUNCTION_17_3(v15);
  uint64_t v213 = type metadata accessor for FeatureDescription();
  OUTLINED_FUNCTION_0();
  uint64_t v216 = v16;
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)v190 - v20;
  v193 = type metadata accessor for FeatureType.ShapedArrayParameters.DataType();
  OUTLINED_FUNCTION_0();
  int v192 = v22;
  MEMORY[0x270FA5388](v23);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_17_3(v24);
  uint64_t v25 = type metadata accessor for FeatureType();
  uint64_t v26 = OUTLINED_FUNCTION_17(v25);
  MEMORY[0x270FA5388](v26);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_17_3(v27);
  v190[4] = type metadata accessor for ModelKind();
  OUTLINED_FUNCTION_0();
  v190[3] = v28;
  MEMORY[0x270FA5388](v29);
  OUTLINED_FUNCTION_33_0();
  v190[2] = v30;
  v202 = type metadata accessor for Model();
  OUTLINED_FUNCTION_0();
  v201 = v31;
  MEMORY[0x270FA5388](v32);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v33);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v34);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v35);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v36);
  uint64_t v38 = (char *)v190 - v37;
  Model.init()();
  v215 = v38;
  Model.specificationVersion.setter();
  uint64_t v39 = swift_bridgeObjectRetain();
  ML16ColumnDescriptorVG_SSs5NeverOTg503_s8d131ML17FeatureVectorizerV11TransformerV10vectorized_13includingBias0A12MLComponents11DenseMatrixVyxG11TabularData0M5FrameV_SbtKFSSAA16fG54Vcfu_33_44daf68368b8b9c6f03dca699c8750fcAPSSTf3nnnpk_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML16ColumnDescriptorVG_SSs5NeverOTg503_s8d131ML17FeatureVectorizerV11TransformerV10vectorized_13includingBias0A12MLComponents11DenseMatrixVyxG11TabularData0M5FrameV_SbtKFSSAA16fG54Vcfu_33_44daf68368b8b9c6f03dca699c8750fcAPSSTf3nnnpk_nTf1cn_n(v39);
  swift_bridgeObjectRelease();
  char v41 = specialized Set.init<A>(_:)(ML16ColumnDescriptorVG_SSs5NeverOTg503_s8d131ML17FeatureVectorizerV11TransformerV10vectorized_13includingBias0A12MLComponents11DenseMatrixVyxG11TabularData0M5FrameV_SbtKFSSAA16fG54Vcfu_33_44daf68368b8b9c6f03dca699c8750fcAPSSTf3nnnpk_nTf1cn_n);
  v231 = v41;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Set.contains(_:)(a2, (uint64_t)a3, v41);
  v217 = a2;
  v218 = a3;
  int64_t v200 = a1;
  v219 = v21;
  if (v42)
  {
    swift_bridgeObjectRelease();
    for (uint64_t i = 1; ; ++i)
    {
      v228 = v217;
      v229 = (uint64_t)v218;
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_27_16();
      v230 = i;
      v44._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v44);
      swift_bridgeObjectRelease();
      if (__OFADD__(i, 1))
      {
        __break(1u);
LABEL_93:
        __break(1u);
LABEL_94:
        __break(1u);
LABEL_95:
        __break(1u);
LABEL_96:
        __break(1u);
LABEL_97:
        __break(1u);
LABEL_98:
        __break(1u);
LABEL_99:
        __break(1u);
LABEL_100:
        __break(1u);
        JUMPOUT(0x22716AB1CLL);
      }
      uint64_t v46 = v228;
      uint64_t v45 = v229;
      swift_bridgeObjectRetain();
      specialized Set.contains(_:)(v46, v45, v41);
      uint64_t v48 = v47;
      swift_bridgeObjectRelease();
      if ((v48 & 1) == 0) {
        break;
      }
      swift_bridgeObjectRelease();
    }
    a3 = (void (*)(void))v45;
    a2 = v46;
    a1 = v200;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v190[0] = a2;
  v190[1] = a3;
  specialized Set._Variant.insert(_:)(&v228, a2, (Swift::Int)a3);
  swift_bridgeObjectRelease();
  uint64_t v49 = *(void *)(a1 + 16);
  if (v49)
  {
    v211 = a1 + 32;
    v203 = v216 + 16;
    long long v205 = v216 + 32;
    uint64_t v199 = v201 + 16;
    v198 = v201 + 32;
    v196 = v201 + 8;
    Swift::String v209 = v212 + 16;
    uint64_t v208 = v212 + 32;
    uint64_t v207 = v212 + 8;
    uint64_t v206 = v216 + 8;
    swift_bridgeObjectRetain();
    v224 = 0;
    *(void *)&v227 = MEMORY[0x263F8EE78];
    uint64_t v204 = MEMORY[0x263F8EE78];
    uint64_t v210 = v10;
    OUTLINED_FUNCTION_20_19();
    uint64_t v197 = v49;
    while (2)
    {
      uint64_t v51 = v211 + 32 * v50;
      uint64_t v53 = *(void *)v51;
      uint64_t v52 = *(void *)(v51 + 8);
      uint64_t v54 = *(void (**)(void))(v51 + 16);
      uint64_t v55 = *(unsigned __int8 *)(v51 + 24);
      v222 = v50 + 1;
      swift_bridgeObjectRetain();
      outlined copy of ColumnDescriptor.ColumnTypeDescriptor((uint64_t)v54, v55);
      v225 = v53;
      v226 = (void *)v52;
      ColumnDescriptor.featureDescription.getter(v53, v52, (uint64_t)v54, v55);
      v220 = v54;
      uint64_t v56 = v224;
      switch(v55)
      {
        case 4:
          OUTLINED_FUNCTION_13_27();
          uint64_t v62 = v226;
          swift_bridgeObjectRetain();
          outlined copy of ColumnDescriptor.ColumnTypeDescriptor((uint64_t)v54, 4);
          v63._uint64_t countAndFlagsBits = v225;
          v63._object = v62;
          String.append(_:)(v63);
          swift_bridgeObjectRelease();
          uint64_t v65 = v228;
          uint64_t v64 = v229;
          unint64_t v66 = v231;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          specialized Set.contains(_:)(v65, v64, v66);
          Swift::Int v68 = v67;
          swift_bridgeObjectRelease();
          if ((v68 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            unint64_t v115 = v56;
            OUTLINED_FUNCTION_30_13();
            goto LABEL_63;
          }
          v221 = v66 + 56;
          uint64_t v69 = 1;
          while (2)
          {
            v228 = v65;
            v229 = v64;
            swift_bridgeObjectRetain();
            OUTLINED_FUNCTION_27_16();
            v230 = v69;
            v70._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v70);
            swift_bridgeObjectRelease();
            uint64_t v57 = __OFADD__(v69++, 1);
            if (v57) {
              goto LABEL_94;
            }
            uint64_t v71 = v228;
            unint64_t v72 = v229;
            if (*(void *)(v66 + 16))
            {
              char v73 = v64;
              uint64_t v74 = v65;
              Hasher.init(_seed:)();
              swift_bridgeObjectRetain();
              String.hash(into:)();
              uint64_t v75 = Hasher._finalize()();
              uint64_t v76 = -1 << *(unsigned char *)(v66 + 32);
              uint64_t v77 = v75 & ~v76;
              OUTLINED_FUNCTION_4_37();
              if ((v78 & 1) == 0) {
                goto LABEL_60;
              }
              uint64_t v79 = *(void *)(v66 + 48);
              uint64_t v80 = (void *)(v79 + 16 * v77);
              unint64_t v81 = *v80 == v71 && v80[1] == v72;
              if (v81 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
LABEL_33:
                swift_bridgeObjectRelease_n();
                uint64_t v65 = v74;
                uint64_t v64 = v73;
                continue;
              }
              unint64_t v82 = ~v76;
              while (1)
              {
                uint64_t v77 = (v77 + 1) & v82;
                OUTLINED_FUNCTION_4_37();
                if ((v83 & 1) == 0) {
                  break;
                }
                int64_t v84 = (void *)(v79 + 16 * v77);
                unint64_t v85 = *v84 == v71 && v84[1] == v72;
                if (v85 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                  goto LABEL_33;
                }
              }
LABEL_60:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v65 = v71;
              uint64_t v64 = v72;
              OUTLINED_FUNCTION_30_13();
              unint64_t v115 = v224;
            }
            else
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v65 = v71;
              uint64_t v64 = v72;
              unint64_t v115 = v224;
            }
            break;
          }
LABEL_63:
          swift_bridgeObjectRetain();
          specialized Set._Variant.insert(_:)(&v228, v65, v64);
          swift_bridgeObjectRelease();
          char v116 = (uint64_t)v220;
          uint64_t v117 = *((void *)v220 + 2);
          swift_bridgeObjectRetain();
          FeatureVectorizerConfiguration.Input.init(name:size:)();
          uint64_t v57 = __OFADD__(v115, v117);
          uint64_t v118 = &v115[v117];
          uint64_t v119 = v213;
          if (v57) {
            goto LABEL_97;
          }
          OUTLINED_FUNCTION_14_21();
          specialized FeatureVectorizer.Transformer.makeOneHotEncoder(inputName:outputName:categories:)(v120, v121, v122, v123, v124);
          outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v116, 4);
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_22_17();
          OUTLINED_FUNCTION_46_4();
          v125();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          if (isUniquelyReferenced_nonNull_native)
          {
            uint64_t v129 = v194;
            uint64_t v130 = v204;
          }
          else
          {
            OUTLINED_FUNCTION_21_20();
            uint64_t v130 = isUniquelyReferenced_nonNull_native;
            uint64_t v129 = v194;
          }
          if (*(void *)(v130 + 16) >= *(void *)(v130 + 24) >> 1)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v130 = isUniquelyReferenced_nonNull_native;
          }
          OUTLINED_FUNCTION_6_30(isUniquelyReferenced_nonNull_native, v127, v128, v130);
          OUTLINED_FUNCTION_9_26();
          v131();
          uint64_t v132 = Model.outputs.getter();
          specialized Collection.first.getter(v132, v129);
          swift_bridgeObjectRelease();
          if (__swift_getEnumTagSinglePayload(v129, 1, v119) == 1) {
            goto LABEL_99;
          }
          a3 = (void (*)(void))OUTLINED_FUNCTION_12_19();
          uint64_t v134 = v133;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(void *)(*(void *)v134 + 16));
          OUTLINED_FUNCTION_8_26();
          OUTLINED_FUNCTION_9_26();
          v135();
          uint64_t v136 = OUTLINED_FUNCTION_10_22();
          a3(v136);
          swift_bridgeObjectRelease();
          outlined consume of ColumnDescriptor.ColumnTypeDescriptor((uint64_t)v220, 4);
          uint64_t v137 = OUTLINED_FUNCTION_15_20();
          v138(v137);
          OUTLINED_FUNCTION_20_19();
          v224 = v118;
          goto LABEL_80;
        case 5:
          OUTLINED_FUNCTION_13_27();
          int64_t v86 = v226;
          swift_bridgeObjectRetain();
          outlined copy of ColumnDescriptor.ColumnTypeDescriptor((uint64_t)v54, 5);
          v87._uint64_t countAndFlagsBits = v225;
          v87._object = v86;
          String.append(_:)(v87);
          swift_bridgeObjectRelease();
          unint64_t v89 = v228;
          char v88 = v229;
          uint64_t v90 = v231;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          specialized Set.contains(_:)(v89, v88, v90);
          BOOL v92 = v91;
          swift_bridgeObjectRelease();
          if (v92)
          {
            unint64_t v214 = v90;
            v221 = v90 + 56;
            char v93 = 1;
            while (1)
            {
              v228 = v89;
              v229 = v88;
              swift_bridgeObjectRetain();
              OUTLINED_FUNCTION_27_16();
              v230 = v93;
              v94._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
              String.append(_:)(v94);
              swift_bridgeObjectRelease();
              uint64_t v57 = __OFADD__(v93++, 1);
              if (v57) {
                goto LABEL_95;
              }
              uint64_t v96 = v228;
              uint64_t v95 = v229;
              if (!*(void *)(v214 + 16)) {
                goto LABEL_72;
              }
              uint64_t v97 = v88;
              Hasher.init(_seed:)();
              swift_bridgeObjectRetain();
              String.hash(into:)();
              Swift::String v98 = Hasher._finalize()();
              Swift::String v99 = v214;
              Swift::String v100 = -1 << *(unsigned char *)(v214 + 32);
              unint64_t v101 = v98 & ~v100;
              OUTLINED_FUNCTION_4_37();
              if ((v102 & 1) == 0) {
                goto LABEL_71;
              }
              uint64_t v103 = *(void *)(v99 + 48);
              uint64_t v104 = (void *)(v103 + 16 * v101);
              uint64_t v105 = *v104 == v96 && v104[1] == v95;
              if (!v105 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                break;
              }
LABEL_51:
              swift_bridgeObjectRelease_n();
              char v88 = v97;
            }
            uint64_t v106 = ~v100;
            while (1)
            {
              unint64_t v101 = (v101 + 1) & v106;
              OUTLINED_FUNCTION_4_37();
              if ((v107 & 1) == 0) {
                break;
              }
              uint64_t v108 = (void *)(v103 + 16 * v101);
              uint64_t v109 = *v108 == v96 && v108[1] == v95;
              if (v109 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                goto LABEL_51;
              }
            }
LABEL_71:
            swift_bridgeObjectRelease();
LABEL_72:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t v89 = v96;
            char v88 = v95;
            OUTLINED_FUNCTION_20_19();
          }
          else
          {
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRetain();
          specialized Set._Variant.insert(_:)(&v228, v89, v88);
          swift_bridgeObjectRelease();
          uint64_t v139 = (uint64_t)v220;
          uint64_t v140 = *((void *)v220 + 2);
          swift_bridgeObjectRetain();
          FeatureVectorizerConfiguration.Input.init(name:size:)();
          uint64_t v57 = __OFADD__(v56, v140);
          uint64_t v141 = &v56[v140];
          uint64_t v142 = v213;
          if (v57) {
            goto LABEL_98;
          }
          OUTLINED_FUNCTION_14_21();
          specialized FeatureVectorizer.Transformer.makeDictionaryVectorizer(inputName:outputName:descriptors:)(v143, v144, v145, v146, v147);
          outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v139, 5);
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_22_17();
          OUTLINED_FUNCTION_46_4();
          v148();
          if (swift_isUniquelyReferenced_nonNull_native())
          {
            OUTLINED_FUNCTION_30_13();
            uint64_t v152 = v204;
          }
          else
          {
            OUTLINED_FUNCTION_21_20();
            OUTLINED_FUNCTION_30_13();
          }
          Swift::Int v154 = *(void *)(v152 + 16);
          Swift::Int v153 = *(void *)(v152 + 24);
          v224 = v141;
          if (v154 >= v153 >> 1)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v152 = v149;
          }
          OUTLINED_FUNCTION_6_30(v149, v150, v151, v152);
          OUTLINED_FUNCTION_9_26();
          v155();
          uint64_t v156 = Model.outputs.getter();
          uint64_t v157 = v195;
          specialized Collection.first.getter(v156, v195);
          swift_bridgeObjectRelease();
          if (__swift_getEnumTagSinglePayload(v157, 1, v142) == 1) {
            goto LABEL_100;
          }
          a3 = (void (*)(void))OUTLINED_FUNCTION_12_19();
          uint64_t v159 = v158;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(void *)(*(void *)v159 + 16));
          OUTLINED_FUNCTION_8_26();
          OUTLINED_FUNCTION_9_26();
          v160();
          uint64_t v161 = OUTLINED_FUNCTION_10_22();
          a3(v161);
          swift_bridgeObjectRelease();
          outlined consume of ColumnDescriptor.ColumnTypeDescriptor((uint64_t)v220, 5);
          uint64_t v162 = OUTLINED_FUNCTION_15_20();
          v163(v162);
          OUTLINED_FUNCTION_20_19();
LABEL_80:
          uint64_t v49 = v197;
LABEL_81:
          OUTLINED_FUNCTION_22_17();
          OUTLINED_FUNCTION_46_4();
          v164();
          if (swift_isUniquelyReferenced_nonNull_native())
          {
            uint64_t v165 = v227;
          }
          else
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v165 = v170;
          }
          uint64_t v166 = *(void *)(v165 + 16);
          if (v166 >= *(void *)(v165 + 24) >> 1)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v165 = v171;
          }
          *(void *)(v165 + 16) = v166 + 1;
          *(void *)&v227 = v165;
          OUTLINED_FUNCTION_9_26();
          v167();
          OUTLINED_FUNCTION_25_0();
          v168();
          OUTLINED_FUNCTION_22_17();
          OUTLINED_FUNCTION_25_0();
          v169();
          uint64_t v50 = v222;
          if (v222 != v49) {
            continue;
          }
          swift_bridgeObjectRelease();
          char v176 = v204;
          int64_t v177 = v224;
          break;
        case 6:
          FeatureVectorizerConfiguration.Input.init(name:size:)();
          outlined consume of ColumnDescriptor.ColumnTypeDescriptor((uint64_t)v54, 6);
          uint64_t v57 = __OFADD__(v56, 1);
          uint64_t v110 = v56 + 1;
          if (v57) {
            goto LABEL_96;
          }
          v224 = v110;
          OUTLINED_FUNCTION_22_17();
          OUTLINED_FUNCTION_46_4();
          v111();
          OUTLINED_FUNCTION_12_19();
          uint64_t v112 = OUTLINED_FUNCTION_33_12();
          *(void *)a3 = v55;
          if ((v112 & 1) == 0)
          {
            OUTLINED_FUNCTION_24_19();
            OUTLINED_FUNCTION_29_14(v174);
          }
          OUTLINED_FUNCTION_26_15();
          if (v61)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            OUTLINED_FUNCTION_29_14(v175);
          }
          goto LABEL_57;
        default:
          FeatureVectorizerConfiguration.Input.init(name:size:)();
          outlined consume of ColumnDescriptor.ColumnTypeDescriptor((uint64_t)v54, v55);
          uint64_t v57 = __OFADD__(v56, v54);
          uint64_t v58 = (char *)v54 + (void)v56;
          if (v57) {
            goto LABEL_93;
          }
          v224 = v58;
          OUTLINED_FUNCTION_22_17();
          OUTLINED_FUNCTION_46_4();
          v59();
          OUTLINED_FUNCTION_12_19();
          uint64_t v60 = OUTLINED_FUNCTION_33_12();
          *(void *)a3 = v55;
          if ((v60 & 1) == 0)
          {
            OUTLINED_FUNCTION_24_19();
            OUTLINED_FUNCTION_29_14(v172);
          }
          OUTLINED_FUNCTION_26_15();
          if (v61)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            OUTLINED_FUNCTION_29_14(v173);
          }
LABEL_57:
          OUTLINED_FUNCTION_7_28();
          OUTLINED_FUNCTION_9_26();
          v113();
          uint64_t v114 = OUTLINED_FUNCTION_10_22();
          v54(v114);
          goto LABEL_81;
      }
      break;
    }
  }
  else
  {
    int64_t v177 = 0;
    char v176 = MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRelease();
  FeatureVectorizerConfiguration.init(inputs:)();
  OUTLINED_FUNCTION_7_19();
  v178();
  v179 = v215;
  Model.kind.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<FeatureDescription>);
  v180 = OUTLINED_FUNCTION_16_21();
  v227 = xmmword_2272CB370;
  *(_OWORD *)(v180 + 16) = xmmword_2272CB370;
  v181 = v192;
  v182 = v191;
  v183 = v193;
  (*(void (**)(uint64_t, void, uint64_t))(v192 + 104))(v191, *MEMORY[0x263F53190], v193);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  v184 = swift_allocObject();
  *(_OWORD *)(v184 + 16) = v227;
  *(void *)(v184 + 32) = v177;
  static FeatureType.shapedArray(dataType:shape:optional:)();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v181 + 8))(v182, v183);
  FeatureDescription.init(name:type:description:)();
  Model.outputs.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Model>);
  uint64_t v185 = v201;
  uint64_t v186 = OUTLINED_FUNCTION_16_21();
  *(_OWORD *)(v186 + 16) = v227;
  Swift::String v187 = v202;
  (*(void (**)(char *, char *, uint64_t))(v185 + 16))(&v179[v186], v179, v202);
  v228 = v176;
  specialized Array.append<A>(contentsOf:)(v186);
  v188 = v228;
  (*(void (**)(char *, uint64_t))(v185 + 8))(v179, v187);
  return v188;
}

void MLLinearRegressor.Model.export(internalMetadata:)(uint64_t a1@<X8>)
{
  uint64_t v73 = a1;
  uint64_t v3 = type metadata accessor for ModelKind();
  OUTLINED_FUNCTION_0();
  uint64_t v72 = v4;
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_33_0();
  uint64_t v71 = v6;
  type metadata accessor for FeatureType();
  OUTLINED_FUNCTION_0();
  uint64_t v68 = v8;
  uint64_t v69 = v7;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_33_0();
  uint64_t v67 = v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Model?);
  uint64_t v11 = OUTLINED_FUNCTION_17(v10);
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_33_0();
  uint64_t v66 = v12;
  type metadata accessor for Model();
  OUTLINED_FUNCTION_0();
  uint64_t v74 = v14;
  uint64_t v75 = v13;
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_49();
  uint64_t v70 = v15;
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_106();
  uint64_t v77 = v17;
  uint64_t v80 = type metadata accessor for URL.DirectoryHint();
  OUTLINED_FUNCTION_0();
  *(void *)&long long v79 = v18;
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_3_0();
  uint64_t v22 = v21 - v20;
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0();
  uint64_t v78 = v23;
  MEMORY[0x270FA5388](v24);
  OUTLINED_FUNCTION_3_0();
  uint64_t v83 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v81 = v25;
  MEMORY[0x270FA5388](v26);
  OUTLINED_FUNCTION_49();
  uint64_t v76 = v27;
  uint64_t v29 = MEMORY[0x270FA5388](v28);
  uint64_t v30 = MEMORY[0x270FA5388](v29);
  uint64_t v32 = (char *)v64 - v31;
  MEMORY[0x270FA5388](v30);
  OUTLINED_FUNCTION_106();
  uint64_t v82 = v33;
  uint64_t v34 = *(void *)(v1 + 16);
  if (!v34) {
    goto LABEL_9;
  }
  Swift::Int v35 = specialized FeatureVectorizer.Transformer.exportEncoders()(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void (**)(void))(v1 + 32));
  if (v2) {
    return;
  }
  v64[1] = v34;
  Swift::Int v65 = v35;
  v64[3] = v1;
  v64[2] = v3;
  uint64_t v36 = self;
  id v37 = objc_msgSend(v36, sel_defaultManager);
  NSFileManager.createTemporaryModelDirectory()();
  if (v38)
  {
    swift_bridgeObjectRelease();

    return;
  }

  id v39 = objc_msgSend(v36, sel_defaultManager);
  NSFileManager.temporaryModelDirectory.getter();

  UUID.init()();
  uint64_t v40 = UUID.uuidString.getter();
  uint64_t v42 = v41;
  OUTLINED_FUNCTION_25_0();
  v43();
  uint64_t v84 = v40;
  uint64_t v85 = v42;
  uint64_t v44 = v79;
  uint64_t v45 = v80;
  (*(void (**)(uint64_t, void, uint64_t))(v79 + 104))(v22, *MEMORY[0x263F06E50], v80);
  lazy protocol witness table accessor for type String and conformance String();
  URL.appending<A>(component:directoryHint:)();
  (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v22, v45);
  swift_bridgeObjectRelease();
  uint64_t v46 = v81;
  uint64_t v47 = *(void (**)(void))(v81 + 8);
  uint64_t v48 = v83;
  OUTLINED_FUNCTION_2_28();
  v47();
  uint64_t v49 = v82;
  URL.appendingPathExtension(_:)();
  OUTLINED_FUNCTION_2_28();
  v47();
  type metadata accessor for MLLinearRegressor.Model();
  BaseLinearRegressorModel.export(to:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 16))(v76, v49, v48);
  Model.init(contentsOf:)();
  OUTLINED_FUNCTION_20_19();
  specialized BidirectionalCollection.last.getter(v65);
  if (__swift_getEnumTagSinglePayload((uint64_t)v32, 1, v75) == 1)
  {
    __break(1u);
LABEL_9:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  Model.outputs.getter();
  uint64_t v50 = *(void *)(v74 + 8);
  uint64_t v80 = v74 + 8;
  uint64_t v81 = v50;
  OUTLINED_FUNCTION_25_0();
  v51();
  Model.inputs.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<FeatureDescription>);
  uint64_t v52 = type metadata accessor for FeatureDescription();
  OUTLINED_FUNCTION_1(v52);
  uint64_t v53 = swift_allocObject();
  long long v79 = xmmword_2272CB370;
  *(_OWORD *)(v53 + 16) = xmmword_2272CB370;
  swift_bridgeObjectRetain();
  FeatureType.DoubleParameters.init(optional:)();
  OUTLINED_FUNCTION_7_19();
  v54();
  FeatureDescription.init(name:type:description:)();
  uint64_t v55 = v77;
  Model.outputs.setter();
  swift_bridgeObjectRetain();
  Model.predictedFeatureName.setter();
  Dictionary.init(dictionaryLiteral:)();
  Model.metadata.setter();
  uint64_t v56 = v70;
  Model.init()();
  Model.specificationVersion.setter();
  uint64_t v57 = swift_bridgeObjectRetain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML16ColumnDescriptorVG_20MLModelSpecification18FeatureDescriptionVs5NeverOTg503_s8d56ML17MLLinearRegressorV5ModelV6export16internalMetadata20hi19ADVSDyS2SGz_tKFAH18jk5VAA16fG54Vcfu0_33_3fd57c9cf8bb5b882e179ce0f1f8c55eAnLTf3nnnpk_nTf1cn_n(v57);
  swift_bridgeObjectRelease();
  Model.inputs.setter();
  Model.outputs.getter();
  Model.outputs.setter();
  swift_bridgeObjectRetain();
  Model.predictedFeatureName.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Model>);
  uint64_t v58 = v74;
  uint64_t v59 = OUTLINED_FUNCTION_16_21();
  *(_OWORD *)(v59 + 16) = v79;
  uint64_t v60 = v75;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 16))(v59 + v56, v55, v75);
  uint64_t v84 = v65;
  specialized Array.append<A>(contentsOf:)(v59);
  PipelineRegressorConfiguration.init(models:names:)();
  OUTLINED_FUNCTION_7_19();
  v61();
  Model.kind.setter();
  OUTLINED_FUNCTION_25_0();
  v62();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 32))(v73, v56, v60);
  uint64_t v63 = v82;
  $defer #1 () in MLImageClassifier.Model.createScenePrintFeatureExtractorModel(revision:)();
  ((void (*)(uint64_t, uint64_t))v47)(v63, v83);
}

uint64_t specialized FeatureVectorizer.Transformer.makeOneHotEncoder(inputName:outputName:categories:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for FeatureType();
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_2_37();
  uint64_t v7 = type metadata accessor for OneHotEncoderConfiguration.UnknownBehavior();
  OUTLINED_FUNCTION_0();
  uint64_t v9 = v8;
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_3_0();
  uint64_t v13 = v12 - v11;
  uint64_t v14 = type metadata accessor for ModelKind();
  OUTLINED_FUNCTION_0();
  uint64_t v16 = v15;
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_3_0();
  uint64_t v20 = v19 - v18;
  Model.init()();
  Model.specificationVersion.setter();
  uint64_t v24 = a5;
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)(&v24);
  (*(void (**)(uint64_t, void, uint64_t))(v9 + 104))(v13, *MEMORY[0x263F53290], v7);
  OneHotEncoderConfiguration.init(orderedCategories:sparseOutput:unknownBehavior:)();
  (*(void (**)(uint64_t, void, uint64_t))(v16 + 104))(v20, *MEMORY[0x263F533C0], v14);
  Model.kind.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<FeatureDescription>);
  uint64_t v21 = type metadata accessor for FeatureDescription();
  OUTLINED_FUNCTION_1(v21);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_2272CB370;
  swift_bridgeObjectRetain();
  FeatureType.StringParameters.init(optional:)();
  OUTLINED_FUNCTION_7_19();
  v22();
  OUTLINED_FUNCTION_19_19();
  Model.inputs.setter();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_2272CB370;
  swift_bridgeObjectRetain();
  static FeatureType.dictionaryWithIntKeys(optional:)();
  OUTLINED_FUNCTION_19_19();
  return Model.outputs.setter();
}

uint64_t specialized FeatureVectorizer.Transformer.makeDictionaryVectorizer(inputName:outputName:descriptors:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = type metadata accessor for FeatureType();
  uint64_t v7 = OUTLINED_FUNCTION_17(v6);
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_2_37();
  uint64_t v8 = type metadata accessor for ModelKind();
  OUTLINED_FUNCTION_0();
  uint64_t v10 = v9;
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_3_0();
  uint64_t v14 = v13 - v12;
  Model.init()();
  Model.specificationVersion.setter();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML16ColumnDescriptorVG_SSs5NeverOTg503_s8d131ML17FeatureVectorizerV11TransformerV10vectorized_13includingBias0A12MLComponents11DenseMatrixVyxG11TabularData0M5FrameV_SbtKFSSAA16fG54Vcfu_33_44daf68368b8b9c6f03dca699c8750fcAPSSTf3nnnpk_nTf1cn_n(a5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  DictionaryVectorizerConfiguration.init<A>(keys:)();
  (*(void (**)(uint64_t, void, uint64_t))(v10 + 104))(v14, *MEMORY[0x263F53418], v8);
  Model.kind.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<FeatureDescription>);
  uint64_t v15 = type metadata accessor for FeatureDescription();
  OUTLINED_FUNCTION_1(v15);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_2272CB370;
  swift_bridgeObjectRetain();
  static FeatureType.dictionaryWithStringKeys(optional:)();
  OUTLINED_FUNCTION_19_19();
  Model.inputs.setter();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_2272CB370;
  swift_bridgeObjectRetain();
  static FeatureType.dictionaryWithIntKeys(optional:)();
  OUTLINED_FUNCTION_19_19();
  return Model.outputs.setter();
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *a1, char *a2, unint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  uint64_t v8 = a2 - a1;
  uint64_t v9 = (a2 - a1) / 16;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 16;
  if (v9 >= v11)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, (uint64_t)(a3 - (void)a2) / 16, a4);
    unint64_t v12 = (unint64_t)&v4[16 * v11];
    if (v7 >= v6 || v10 < 16) {
      goto LABEL_47;
    }
    uint64_t v18 = (char *)(a3 - 16);
    while (1)
    {
      uint64_t v19 = v18 + 16;
      uint64_t v20 = (char *)(v12 - 16);
      BOOL v21 = *(void *)(v12 - 16) == *((void *)v6 - 2) && *(void *)(v12 - 8) == *((void *)v6 - 1);
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        BOOL v23 = v19 != (char *)v12 || (unint64_t)v18 >= v12;
        v12 -= 16;
        if (!v23) {
          goto LABEL_43;
        }
      }
      else
      {
        BOOL v22 = v19 != v6 || v18 >= v6;
        uint64_t v20 = v6 - 16;
        v6 -= 16;
        if (!v22) {
          goto LABEL_43;
        }
      }
      *(_OWORD *)uint64_t v18 = *(_OWORD *)v20;
LABEL_43:
      v18 -= 16;
      if (v6 <= v7 || v12 <= (unint64_t)v4) {
        goto LABEL_47;
      }
    }
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, (a2 - a1) / 16, a4);
  unint64_t v12 = (unint64_t)&v4[16 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 16)
  {
    while (1)
    {
      BOOL v14 = *(void *)v6 == *(void *)v4 && *((void *)v6 + 1) == *((void *)v4 + 1);
      if (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        break;
      }
      uint64_t v15 = v4;
      BOOL v14 = v7 == v4;
      v4 += 16;
      if (!v14) {
        goto LABEL_15;
      }
LABEL_16:
      v7 += 16;
      if ((unint64_t)v4 >= v12 || (unint64_t)v6 >= a3) {
        goto LABEL_21;
      }
    }
    uint64_t v15 = v6;
    BOOL v14 = v7 == v6;
    v6 += 16;
    if (v14) {
      goto LABEL_16;
    }
LABEL_15:
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v15;
    goto LABEL_16;
  }
LABEL_21:
  uint64_t v6 = v7;
LABEL_47:
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v4, (uint64_t)(v12 - (void)v4) / 16, v6);
  return 1;
}

unint64_t OUTLINED_FUNCTION_6_30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a4 + 16) = v5;
  uint64_t v7 = *(void *)(v6 - 424);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  *(void *)(v6 - 392) = a4;
  return a4 + v8 + *(void *)(v7 + 72) * v4;
}

unint64_t OUTLINED_FUNCTION_7_28()
{
  *(void *)(v0 + 16) = v1;
  return v0
       + ((*(unsigned __int8 *)(*(void *)(v3 - 296) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3 - 296) + 80))
       + *(void *)(*(void *)(v3 - 296) + 72) * v2;
}

unint64_t OUTLINED_FUNCTION_8_26()
{
  uint64_t v3 = *v0;
  *(void *)(v3 + 16) = v1 + 1;
  return v3
       + ((*(unsigned __int8 *)(*(void *)(v2 - 296) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2 - 296) + 80))
       + *(void *)(*(void *)(v2 - 296) + 72) * v1;
}

uint64_t OUTLINED_FUNCTION_10_22()
{
  return v0 - 176;
}

uint64_t OUTLINED_FUNCTION_12_19()
{
  return MEMORY[0x270F49078](v0 - 176);
}

void OUTLINED_FUNCTION_13_27()
{
  *(void *)(v0 - 176) = 0x5F6465646F636E65;
  *(void *)(v0 - 168) = 0xE800000000000000;
}

uint64_t OUTLINED_FUNCTION_15_20()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_16_21()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_19_19()
{
  return FeatureDescription.init(name:type:description:)();
}

void OUTLINED_FUNCTION_21_20()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_24_19()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_27_16()
{
  uint64_t v1 = 95;
  unint64_t v2 = 0xE100000000000000;
  String.append(_:)(*(Swift::String *)&v1);
}

uint64_t OUTLINED_FUNCTION_29_14(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_33_12()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

CreateML::MLDataValue::MultiArrayType __swiftcall MLDataValue.MultiArrayType.init(_:)(MLMultiArray a1)
{
  uint64_t v4 = v1;
  result._contents.super.Class isa = (Class)[(objc_class *)a1.super.isa dataType];
  if (result._contents.super.isa == (Class)65600)
  {
    Class isa = a1.super.isa;
LABEL_56:
    Class *v4 = isa;
    return result;
  }
  uint64_t v58 = v4;
  id v7 = [(objc_class *)a1.super.isa shape];
  type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v8 = objc_allocWithZone(MEMORY[0x263F00DA8]);
  id v9 = OUTLINED_FUNCTION_24_20();
  if (!v2)
  {
    id v60 = v9;
    uint64_t v10 = &off_2647FE000;
    id v11 = [(objc_class *)a1.super.isa strides];
    unint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v12 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v13 = swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v14 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v15 = MEMORY[0x263F8EE78];
    Class v59 = a1.super.isa;
    if (v14)
    {
      uint64_t v61 = MEMORY[0x263F8EE78];
      OUTLINED_FUNCTION_33_13(v13, v14 & ~(v14 >> 63));
      if (v14 < 0)
      {
        __break(1u);
        goto LABEL_58;
      }
      uint64_t v16 = 0;
      uint64_t v17 = v61;
      uint64_t v15 = MEMORY[0x263F8EE78];
      do
      {
        if ((v12 & 0xC000000000000001) != 0) {
          id v18 = (id)MEMORY[0x22A6753B0](v16, v12);
        }
        else {
          id v18 = *(id *)(v12 + 8 * v16 + 32);
        }
        uint64_t v19 = v18;
        id v20 = objc_msgSend(v18, sel_integerValue);

        uint64_t v61 = v17;
        unint64_t v22 = *(void *)(v17 + 16);
        unint64_t v21 = *(void *)(v17 + 24);
        if (v22 >= v21 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
          uint64_t v15 = MEMORY[0x263F8EE78];
          uint64_t v17 = v61;
        }
        ++v16;
        *(void *)(v17 + 16) = v22 + 1;
        *(void *)(v17 + 8 * v22 + 32) = v20;
      }
      while (v14 != v16);
      swift_bridgeObjectRelease();
      uint64_t v10 = &off_2647FE000;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    id v23 = [v60 (SEL)v10[285]];
    unint64_t v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v24 >> 62)
    {
      OUTLINED_FUNCTION_41_8();
      uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v25 = swift_bridgeObjectRelease();
      if (v26)
      {
LABEL_19:
        uint64_t v61 = v15;
        OUTLINED_FUNCTION_33_13(v25, v26 & ~(v26 >> 63));
        if ((v26 & 0x8000000000000000) == 0)
        {
          uint64_t v27 = 0;
          uint64_t v28 = v61;
          do
          {
            if ((v24 & 0xC000000000000001) != 0) {
              id v29 = (id)MEMORY[0x22A6753B0](v27, v24);
            }
            else {
              id v29 = *(id *)(v24 + 8 * v27 + 32);
            }
            uint64_t v30 = v29;
            id v31 = objc_msgSend(v29, sel_integerValue);

            uint64_t v61 = v28;
            unint64_t v33 = *(void *)(v28 + 16);
            unint64_t v32 = *(void *)(v28 + 24);
            if (v33 >= v32 >> 1)
            {
              OUTLINED_FUNCTION_28_13(v32);
              uint64_t v28 = v61;
            }
            ++v27;
            *(void *)(v28 + 16) = v33 + 1;
            *(void *)(v28 + 8 * v33 + 32) = v31;
          }
          while (v26 != v27);
          swift_bridgeObjectRelease();
          uint64_t v15 = MEMORY[0x263F8EE78];
LABEL_31:
          id v34 = [(objc_class *)v59 shape];
          unint64_t v35 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          if (v35 >> 62)
          {
            OUTLINED_FUNCTION_41_8();
            uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
            uint64_t v36 = swift_bridgeObjectRelease();
            if (v37)
            {
LABEL_33:
              uint64_t v61 = v15;
              OUTLINED_FUNCTION_33_13(v36, v37 & ~(v37 >> 63));
              if ((v37 & 0x8000000000000000) == 0)
              {
                uint64_t v38 = 0;
                uint64_t v39 = v61;
                do
                {
                  if ((v35 & 0xC000000000000001) != 0) {
                    id v40 = (id)MEMORY[0x22A6753B0](v38, v35);
                  }
                  else {
                    id v40 = *(id *)(v35 + 8 * v38 + 32);
                  }
                  uint64_t v41 = v40;
                  id v42 = objc_msgSend(v40, sel_integerValue);

                  uint64_t v61 = v39;
                  unint64_t v44 = *(void *)(v39 + 16);
                  unint64_t v43 = *(void *)(v39 + 24);
                  if (v44 >= v43 >> 1)
                  {
                    OUTLINED_FUNCTION_28_13(v43);
                    uint64_t v39 = v61;
                  }
                  ++v38;
                  *(void *)(v39 + 16) = v44 + 1;
                  *(void *)(v39 + 8 * v44 + 32) = v42;
                }
                while (v37 != v38);
                swift_bridgeObjectRelease();
                goto LABEL_44;
              }
LABEL_59:
              __break(1u);
LABEL_60:
              __break(1u);
              goto LABEL_61;
            }
          }
          else
          {
            uint64_t v37 = *(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10);
            if (v37) {
              goto LABEL_33;
            }
          }
          swift_bridgeObjectRelease();
          uint64_t v39 = MEMORY[0x263F8EE78];
LABEL_44:
          uint64_t v45 = (void *)OUTLINED_FUNCTION_45_9();
          BOOL v47 = specialized static Array<A>.== infix(_:_:)(v45, v46);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (!v47)
          {
            if ((uint64_t)[(objc_class *)v59 count] >= 1)
            {
              uint64_t v61 = specialized Array.init(repeating:count:)(objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, 0), *(void *)(v39 + 16));
              do
              {
                swift_bridgeObjectRetain();
                Class v52 = Array._bridgeToObjectiveC()().super.isa;
                id v53 = [(objc_class *)v59 objectForKeyedSubscript:v52];

                objc_msgSend(v53, sel_doubleValue);
                double v55 = v54;

                id v56 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, v55);
                OUTLINED_FUNCTION_45_9();
                Class v57 = Array._bridgeToObjectiveC()().super.isa;
                swift_bridgeObjectRelease();
                objc_msgSend(v60, sel_setObject_forKeyedSubscript_, v56, v57);
              }
              while ((incrementIndex #1 (shape:index:) in MLDataValue.MultiArrayType.init(_:)(v39, &v61) & 1) != 0);

              swift_bridgeObjectRelease();
              result._contents.super.Class isa = (Class)swift_bridgeObjectRelease();
              uint64_t v4 = v58;
              Class isa = (Class)v60;
              goto LABEL_56;
            }
            Class isa = (Class)v60;

            swift_bridgeObjectRelease();
            goto LABEL_55;
          }
          swift_bridgeObjectRelease();
          unint64_t v48 = (unint64_t)[(objc_class *)v59 count];
          Class isa = (Class)v60;
          if ((v48 & 0x8000000000000000) == 0)
          {
            unint64_t v49 = v48;
            if (v48)
            {
              uint64_t v50 = 0;
              do
              {
                id v51 = [(objc_class *)v59 objectAtIndexedSubscript:v50];
                objc_msgSend(v60, sel_setObject_atIndexedSubscript_, v51, v50);

                ++v50;
              }
              while (v49 != v50);
            }

LABEL_55:
            uint64_t v4 = v58;
            goto LABEL_56;
          }
          goto LABEL_60;
        }
LABEL_58:
        __break(1u);
        goto LABEL_59;
      }
    }
    else
    {
      uint64_t v26 = *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v26) {
        goto LABEL_19;
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_31;
  }
LABEL_61:
  OUTLINED_FUNCTION_4_22();
  result._contents.super.Class isa = (Class)swift_unexpectedError();
  __break(1u);
  return result;
}

BOOL specialized static Array<A>.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (a1[4] != a2[4]) {
    return 0;
  }
  uint64_t v3 = a1 + 5;
  uint64_t v4 = a2 + 5;
  uint64_t v5 = v2 - 1;
  do
  {
    BOOL result = v5 == 0;
    if (!v5) {
      break;
    }
    uint64_t v8 = *v3++;
    uint64_t v7 = v8;
    uint64_t v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

void specialized static Array<A>.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 == a2[2] && v2 && a1 != a2)
  {
    BOOL v5 = a1[4] == a2[4] && a1[5] == a2[5];
    if (v5 || (_stringCompareWithSmolCheck(_:_:expecting:)()) && v2 != 1)
    {
      uint64_t v6 = a2 + 7;
      uint64_t v7 = a1 + 7;
      do
      {
        BOOL v8 = *(v7 - 1) == *(v6 - 1) && *v7 == *v6;
        if (!v8 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          break;
        }
        OUTLINED_FUNCTION_47_11();
      }
      while (!v5);
    }
  }
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = a1 + 32;
    uint64_t v5 = a2 + 32;
LABEL_5:
    uint64_t v6 = (uint64_t *)(v4 + 32 * v3);
    uint64_t v7 = *v6;
    uint64_t v8 = v6[1];
    uint64_t v9 = (void *)v6[2];
    uint64_t v10 = *((unsigned __int8 *)v6 + 24);
    uint64_t v11 = v5 + 32 * v3;
    unint64_t v12 = *(void **)(v11 + 16);
    int v13 = *(unsigned __int8 *)(v11 + 24);
    BOOL v14 = v7 == *(void *)v11 && v8 == *(void *)(v11 + 8);
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      ++v3;
      switch(v10)
      {
        case 1:
          BOOL v15 = v13 == 1;
          goto LABEL_15;
        case 2:
          BOOL v15 = v13 == 2;
          goto LABEL_15;
        case 3:
          BOOL v15 = v13 == 3;
          goto LABEL_15;
        case 4:
          if (v13 != 4) {
            return 0;
          }
          unint64_t v17 = v9[2];
          if (v17 != v12[2]) {
            return 0;
          }
          if (v17) {
            BOOL v18 = v9 == v12;
          }
          else {
            BOOL v18 = 1;
          }
          if (v18) {
            goto LABEL_20;
          }
          BOOL v19 = v9[4] == v12[4] && v9[5] == v12[5];
          if (!v19 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            return 0;
          }
          if (v17 == 1) {
            goto LABEL_20;
          }
          id v20 = v12 + 7;
          unint64_t v21 = v9 + 7;
          break;
        case 5:
          if (v13 != 5) {
            return 0;
          }
          swift_bridgeObjectRetain();
          outlined copy of ColumnDescriptor.ColumnTypeDescriptor((uint64_t)v9, 5);
          swift_bridgeObjectRetain();
          outlined copy of ColumnDescriptor.ColumnTypeDescriptor((uint64_t)v12, 5);
          char v23 = specialized static Array<A>.== infix(_:_:)(v9, v12);
          swift_bridgeObjectRelease();
          outlined consume of ColumnDescriptor.ColumnTypeDescriptor((uint64_t)v12, 5);
          swift_bridgeObjectRelease();
          outlined consume of ColumnDescriptor.ColumnTypeDescriptor((uint64_t)v9, 5);
          if ((v23 & 1) == 0) {
            return 0;
          }
          goto LABEL_20;
        case 6:
          switch((unint64_t)v9)
          {
            case 1uLL:
              if (v13 != 6 || v12 != (void *)1) {
                return 0;
              }
              goto LABEL_20;
            case 2uLL:
              if (v13 != 6 || v12 != (void *)2) {
                return 0;
              }
              goto LABEL_20;
            case 3uLL:
              if (v13 != 6 || v12 != (void *)3) {
                return 0;
              }
              goto LABEL_20;
            default:
              if (v13 != 6 || v12 != 0) {
                return 0;
              }
              goto LABEL_20;
          }
        default:
          BOOL v15 = v13 == 0;
LABEL_15:
          if (!v15 || v9 != v12) {
            return 0;
          }
          goto LABEL_20;
      }
      while (1)
      {
        if (v17 <= 1)
        {
          __break(1u);
          JUMPOUT(0x22716CE14);
        }
        BOOL v22 = *(v21 - 1) == *(v20 - 1) && *v21 == *v20;
        if (!v22 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          break;
        }
        OUTLINED_FUNCTION_47_11();
        if (v14)
        {
LABEL_20:
          if (v3 != v2) {
            goto LABEL_5;
          }
          return 1;
        }
      }
    }
    return 0;
  }
  return 1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  char v22;
  void (*v23)(char *, uint64_t);
  BOOL v25;
  uint64_t v27;
  uint64_t v28;
  void (**v29)(char *, uint64_t);
  char *v30;
  void (*v31)(char *, unint64_t, uint64_t);
  uint64_t v32;

  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<URL, String>);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v27 - v8;
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10 == *(void *)(a2 + 16))
  {
    if (!v10 || a1 == a2)
    {
      BOOL v22 = 1;
    }
    else
    {
      uint64_t v11 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
      int v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
      unint64_t v12 = v6 + 16;
      uint64_t v30 = v7;
      id v31 = v13;
      BOOL v14 = *(void *)(v12 + 56);
      unint64_t v32 = v12;
      uint64_t v28 = v14;
      id v29 = (void (**)(char *, uint64_t))(v12 - 8);
      BOOL v15 = v10 - 1;
      uint64_t v16 = v7;
      do
      {
        unint64_t v17 = a1;
        BOOL v18 = v9;
        BOOL v19 = v9;
        id v20 = v31;
        v31(v18, a1 + v11, v4);
        unint64_t v21 = a2;
        v20(v16, a2 + v11, v4);
        uint64_t v9 = v19;
        lazy protocol witness table accessor for type AnnotatedFeature<URL, String> and conformance <> AnnotatedFeature<A, B>();
        BOOL v22 = dispatch thunk of static Equatable.== infix(_:_:)();
        char v23 = *v29;
        (*v29)(v16, v4);
        v23(v19, v4);
        uint64_t v25 = v15-- != 0;
        if ((v22 & 1) == 0) {
          break;
        }
        v11 += v28;
        a2 = v21;
        a1 = v17;
      }
      while (v25);
    }
  }
  else
  {
    BOOL v22 = 0;
  }
  return v22 & 1;
}

{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  char v11;
  int v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  void *v22;
  void *v23;
  char v24;
  void *v25;
  id v26;
  void *v27;
  id v28;
  void *v29;
  id v30;
  void *v32;
  id v33;
  void *v34;
  void *v35;
  char v36;
  id v38;
  void *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t v3 = (uint64_t *)(a2 + 48);
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (2)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = (void *)*(v4 - 1);
    uint64_t v7 = *(v3 - 2);
    uint64_t v8 = *(v3 - 1);
    uint64_t v10 = *(unsigned __int8 *)v3;
    v3 += 3;
    uint64_t v9 = v10;
    unint64_t v12 = *(unsigned __int8 *)v4;
    v4 += 3;
    uint64_t v11 = v12;
    switch(v12)
    {
      case 1:
        if (v9 != 1) {
          goto LABEL_40;
        }
        unint64_t v17 = (void *)OUTLINED_FUNCTION_44_8();
        outlined consume of MLDataValue(v17, v18, 1);
        BOOL v19 = (void *)OUTLINED_FUNCTION_45_9();
        outlined consume of MLDataValue(v19, v20, 1);
        if (*(double *)&v5 != *(double *)&v7) {
          return 0;
        }
        goto LABEL_34;
      case 2:
        if (v9 != 2) {
          goto LABEL_38;
        }
        if (v5 != v7 || v6 != (void *)v8)
        {
          LOBYTE(v9) = _stringCompareWithSmolCheck(_:_:expecting:)();
          OUTLINED_FUNCTION_22_18((void *)v7, (void *)v8);
          BOOL v22 = (void *)v7;
          char v23 = (void *)v8;
          unint64_t v24 = 2;
          goto LABEL_24;
        }
        OUTLINED_FUNCTION_22_18((void *)v5, v6);
        id v34 = (void *)v5;
        unint64_t v35 = v6;
        uint64_t v36 = 2;
LABEL_33:
        outlined consume of MLDataValue(v34, v35, v36);
        goto LABEL_34;
      case 3:
        if (v9 != 3)
        {
          swift_retain();
          goto LABEL_40;
        }
        uint64_t v41 = v7;
        id v42 = v5;
        OUTLINED_FUNCTION_38_11();
        OUTLINED_FUNCTION_38_11();
        static MLDataValue.SequenceType.== infix(_:_:)(&v42, &v41);
        uint64_t v25 = (void *)OUTLINED_FUNCTION_37_10();
        outlined consume of MLDataValue(v25, v26, 3);
        outlined consume of MLDataValue((void *)v7, (id)v8, 3);
        outlined consume of MLDataValue((void *)v7, (id)v8, 3);
        BOOL v22 = (void *)v5;
        char v23 = v6;
        unint64_t v24 = 3;
        goto LABEL_24;
      case 4:
        if (v9 != 4)
        {
LABEL_38:
          swift_bridgeObjectRetain();
          goto LABEL_40;
        }
        OUTLINED_FUNCTION_39_11();
        OUTLINED_FUNCTION_39_11();
        specialized static Dictionary<>.== infix(_:_:)(v5, v7);
        uint64_t v27 = (void *)OUTLINED_FUNCTION_37_10();
        outlined consume of MLDataValue(v27, v28, 4);
        outlined consume of MLDataValue((void *)v7, (id)v8, 4);
        outlined consume of MLDataValue((void *)v7, (id)v8, 4);
        BOOL v22 = (void *)v5;
        char v23 = v6;
        unint64_t v24 = 4;
        goto LABEL_24;
      case 5:
        if (v9 == 5)
        {
          LOBYTE(v9) = type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
          OUTLINED_FUNCTION_40_8();
          OUTLINED_FUNCTION_40_8();
          static NSObject.== infix(_:_:)();
          id v29 = (void *)OUTLINED_FUNCTION_37_10();
          outlined consume of MLDataValue(v29, v30, 5);
          outlined consume of MLDataValue((void *)v7, (id)v8, 5);
          outlined consume of MLDataValue((void *)v7, (id)v8, 5);
          BOOL v22 = (void *)v5;
          char v23 = v6;
          unint64_t v24 = 5;
LABEL_24:
          outlined consume of MLDataValue(v22, v23, v24);
          if ((v9 & 1) == 0) {
            return 0;
          }
LABEL_34:
          if (!--v2) {
            return 1;
          }
          continue;
        }
        uint64_t v38 = (id)v5;
LABEL_40:
        outlined copy of MLDataValue((id)v7, (id)v8, v9);
        uint64_t v39 = (void *)OUTLINED_FUNCTION_44_8();
        outlined consume of MLDataValue(v39, v40, v11);
        outlined consume of MLDataValue((void *)v7, (id)v8, v9);
        return 0;
      case 6:
        if (v9 != 6 || (v8 | v7) != 0) {
          goto LABEL_40;
        }
        unint64_t v32 = (void *)OUTLINED_FUNCTION_44_8();
        outlined consume of MLDataValue(v32, v33, 6);
        id v34 = 0;
        unint64_t v35 = 0;
        uint64_t v36 = 6;
        goto LABEL_33;
      default:
        if (v9) {
          goto LABEL_40;
        }
        int v13 = (void *)OUTLINED_FUNCTION_44_8();
        outlined consume of MLDataValue(v13, v14, 0);
        BOOL v15 = (void *)OUTLINED_FUNCTION_45_9();
        outlined consume of MLDataValue(v15, v16, 0);
        if (v5 != v7) {
          return 0;
        }
        goto LABEL_34;
    }
  }
}

{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  void *v12;
  char v13;
  char v14;
  uint64_t v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;

  uint64_t v4 = (void *)((unint64_t)a1 >> 62);
  if ((unint64_t)a1 >> 62)
  {
LABEL_39:
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v5 != v6) {
    goto LABEL_24;
  }
  if (v5)
  {
    uint64_t v7 = a1 & 0xFFFFFFFFFFFFFF8;
    if (a1 < 0) {
      uint64_t v7 = a1;
    }
    if (!v4) {
      uint64_t v7 = (a1 & 0xFFFFFFFFFFFFFF8) + 32;
    }
    uint64_t v8 = a2 & 0xFFFFFFFFFFFFFF8;
    uint64_t v9 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
    if (a2 < 0) {
      uint64_t v8 = a2;
    }
    if ((unint64_t)a2 >> 62) {
      uint64_t v9 = v8;
    }
    if (v7 != v9)
    {
      if (v5 < 0) {
        goto LABEL_42;
      }
      unint64_t v21 = a1 & 0xC000000000000001;
      if ((a1 & 0xC000000000000001) != 0) {
LABEL_43:
      }
        uint64_t v10 = (id)MEMORY[0x22A6753B0](0, a1);
      else {
        uint64_t v10 = *(id *)(a1 + 32);
      }
      uint64_t v4 = v10;
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (a2 & 0xC000000000000001) == 0, a2);
      if ((a2 & 0xC000000000000001) != 0) {
        uint64_t v11 = (id)MEMORY[0x22A6753B0](0, a2);
      }
      else {
        uint64_t v11 = *(id *)(a2 + 32);
      }
      unint64_t v12 = v11;
      type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
      int v13 = static NSObject.== infix(_:_:)();

      if (v13)
      {
        if (v5 != 1)
        {
          uint64_t v16 = 5;
          while (1)
          {
            if (v16 - 4 >= v5)
            {
              __break(1u);
              goto LABEL_39;
            }
            if (v21) {
              unint64_t v17 = (id)MEMORY[0x22A6753B0](v16 - 4, a1);
            }
            else {
              unint64_t v17 = *(id *)(a1 + 8 * v16);
            }
            uint64_t v4 = v17;
            if ((a2 & 0xC000000000000001) != 0)
            {
              BOOL v18 = (id)MEMORY[0x22A6753B0](v16 - 4, a2);
            }
            else
            {
              if ((unint64_t)(v16 - 4) >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
              {
                __break(1u);
LABEL_42:
                __break(1u);
                goto LABEL_43;
              }
              BOOL v18 = *(id *)(a2 + 8 * v16);
            }
            BOOL v19 = v18;
            BOOL v14 = static NSObject.== infix(_:_:)();

            if (v14)
            {
              id v20 = 2 - v5 + v16++;
              if (v20 != 5) {
                continue;
              }
            }
            return v14 & 1;
          }
        }
        goto LABEL_23;
      }
LABEL_24:
      BOOL v14 = 0;
      return v14 & 1;
    }
  }
LABEL_23:
  BOOL v14 = 1;
  return v14 & 1;
}

id MLDataValue.MultiArrayType.mlMultiArray.getter()
{
  return *v0;
}

uint64_t specialized Array.init(repeating:count:)(void *a1, uint64_t a2)
{
  uint64_t result = specialized static Array._allocateUninitialized(_:)(a2);
  uint64_t v10 = result;
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    if (a2)
    {
      *uint64_t v5 = a1;
      if (a2 != 1)
      {
        v5[1] = a1;
        uint64_t v6 = a2 - 2;
        if (v6)
        {
          uint64_t v7 = v5 + 2;
          do
          {
            *v7++ = a1;
            id v8 = a1;
            --v6;
          }
          while (v6);
        }
        id v9 = a1;
      }
    }
    else
    {
    }
    specialized Array._endMutation()();
    return v10;
  }
  return result;
}

uint64_t specialized Array.init(repeating:count:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 < 0)
  {
    OUTLINED_FUNCTION_0_18();
    uint64_t result = OUTLINED_FUNCTION_10_23();
    __break(1u);
  }
  else
  {
    if (a3)
    {
      uint64_t v6 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      uint64_t v7 = v6;
      v6[2] = a3;
      v6[4] = a1;
      v6[5] = a2;
      if (a3 != 1)
      {
        v6[6] = a1;
        v6[7] = a2;
        uint64_t v8 = a3 - 2;
        if (v8)
        {
          id v9 = v6 + 9;
          do
          {
            *(v9 - 1) = a1;
            *id v9 = a2;
            swift_bridgeObjectRetain();
            v9 += 2;
            --v8;
          }
          while (v8);
        }
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      return MEMORY[0x263F8EE78];
    }
    return (uint64_t)v7;
  }
  return result;
}

uint64_t specialized Array.init(repeating:count:)(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_18();
    uint64_t result = OUTLINED_FUNCTION_10_23();
    __break(1u);
  }
  else if (a2)
  {
    uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    uint64_t v5 = 0;
    *(void *)(result + 16) = a2;
    do
    {
      uint64_t v6 = result + 8 * v5++;
      *(void *)(v6 + 32) = a1;
    }
    while (a2 != v5);
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

{
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_18();
    uint64_t result = OUTLINED_FUNCTION_10_23();
    __break(1u);
  }
  else
  {
    if (a2)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
      uint64_t v4 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      uint64_t v5 = v4;
      v4[2] = a2;
      v4[4] = a1;
      if (a2 != 1)
      {
        v4[5] = a1;
        uint64_t v6 = a2 - 2;
        if (v6)
        {
          uint64_t v7 = v4 + 6;
          do
          {
            *v7++ = a1;
            swift_bridgeObjectRetain();
            --v6;
          }
          while (v6);
        }
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      return MEMORY[0x263F8EE78];
    }
    return (uint64_t)v5;
  }
  return result;
}

uint64_t MLDataValue.MultiArrayType.description.getter()
{
  return MLDataValue.MultiArrayType.description.getter((SEL *)&selRef_description);
}

id MLDataValue.MultiArrayType.dataValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *v1;
  *(void *)a1 = *v1;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 5;
  return v2;
}

CreateML::MLDataValue::MultiArrayType __swiftcall MLDataValue.MultiArrayType.init(shape:)(Swift::OpaquePointer shape)
{
  uint64_t v3 = v1;
  uint64_t v4 = *((void *)shape._rawValue + 2);
  if (v4)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v5 + 1;
      objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, *((void *)shape._rawValue + v5 + 4));
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      uint64_t v5 = v6;
    }
    while (v4 != v6);
  }
  swift_bridgeObjectRelease();
  id v7 = objc_allocWithZone(MEMORY[0x263F00DA8]);
  result._contents.super.Class isa = (Class)OUTLINED_FUNCTION_24_20();
  if (shape._rawValue)
  {
    OUTLINED_FUNCTION_4_22();
    result._contents.super.Class isa = (Class)swift_unexpectedError();
    __break(1u);
  }
  else
  {
    v3->_contents.super.Class isa = result._contents.super.isa;
  }
  return result;
}

uint64_t incrementIndex #1 (shape:index:) in MLDataValue.MultiArrayType.init(_:)(uint64_t result, uint64_t *a2)
{
  unint64_t v3 = result;
  if ((unint64_t)*a2 >> 62) {
    goto LABEL_37;
  }
  uint64_t v4 = *(void *)((*a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  if (__OFSUB__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    if (((v4 - 1) & 0x8000000000000000) == 0)
    {
      int64_t v5 = *(void *)(v3 + 16);
      unint64_t v6 = v3 + 24;
      unint64_t v7 = 0x263F08000uLL;
      while (1)
      {
        unint64_t v3 = v4 - 1;
        uint64_t v8 = *a2;
        if ((*a2 & 0xC000000000000001) != 0)
        {
          id v9 = (id)MEMORY[0x22A6753B0](v4 - 1);
        }
        else
        {
          if (v3 >= *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_32:
            __break(1u);
LABEL_33:
            __break(1u);
LABEL_34:
            __break(1u);
LABEL_35:
            __break(1u);
LABEL_36:
            __break(1u);
LABEL_37:
            swift_bridgeObjectRetain();
            uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
            CreateML::MLDataValue::MultiArrayType result = swift_bridgeObjectRelease();
            goto LABEL_3;
          }
          id v9 = *(id *)(v8 + 8 * v4 + 24);
        }
        uint64_t v10 = v9;
        uint64_t v11 = (char *)objc_msgSend(v9, sel_integerValue);

        if (__OFADD__(v11, 1)) {
          goto LABEL_32;
        }
        id v12 = objc_msgSend(objc_allocWithZone(*(Class *)(v7 + 2584)), sel_initWithInteger_, v11 + 1);
        uint64_t v13 = *a2;
        int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
        *a2 = v13;
        if (!isUniquelyReferenced_nonNull_bridgeObject || v13 < 0 || (v13 & 0x4000000000000000) != 0)
        {
          uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew()(v13);
          *a2 = v13;
        }
        if (v3 >= *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_33;
        }
        BOOL v15 = *(void **)((v13 & 0xFFFFFFFFFFFFFF8) + 8 * v4 + 0x18);
        *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 8 * v4 + 0x18) = v12;

        specialized Array._endMutation()();
        uint64_t v16 = *a2;
        if ((*a2 & 0xC000000000000001) != 0)
        {
          id v17 = (id)MEMORY[0x22A6753B0](v4 - 1);
        }
        else
        {
          if (v3 >= *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_34;
          }
          id v17 = *(id *)(v16 + 8 * v4 + 24);
        }
        BOOL v18 = v17;
        id v19 = objc_msgSend(v17, sel_integerValue);

        if ((uint64_t)v3 >= v5) {
          goto LABEL_35;
        }
        uint64_t v20 = *(void *)(v6 + 8 * v4);
        BOOL v21 = (uint64_t)v19 < v20;
        if ((uint64_t)v19 < v20) {
          return v21;
        }
        unint64_t v22 = v7;
        id v23 = objc_msgSend(objc_allocWithZone(*(Class *)(v7 + 2584)), sel_initWithInteger_, 0);
        uint64_t v24 = *a2;
        int v25 = swift_isUniquelyReferenced_nonNull_bridgeObject();
        *a2 = v24;
        if (!v25 || v24 < 0 || (v24 & 0x4000000000000000) != 0)
        {
          uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew()(v24);
          *a2 = v24;
        }
        if (v3 >= *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_36;
        }
        uint64_t v26 = *(void **)((v24 & 0xFFFFFFFFFFFFFF8) + 8 * v4 + 0x18);
        *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 8 * v4 + 0x18) = v23;

        specialized Array._endMutation()();
        --v4;
        unint64_t v7 = v22;
        if (!v4) {
          return v21;
        }
      }
    }
    return 0;
  }
  return result;
}

double MLDataValue.MultiArrayType.subscript.getter(uint64_t a1)
{
  id v2 = objc_msgSend(*v1, sel_objectAtIndexedSubscript_, a1);
  objc_msgSend(v2, sel_doubleValue);
  double v4 = v3;

  return v4;
}

{
  void **v1;
  void *v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  Class isa;
  id v8;
  double v9;
  double v10;

  id v2 = *v1;
  double v3 = *(void *)(a1 + 16);
  if (v3)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    int64_t v5 = (uint64_t *)(a1 + 32);
    do
    {
      unint64_t v6 = *v5++;
      objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, v6);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v3;
    }
    while (v3);
  }
  type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v8 = objc_msgSend(v2, sel_objectForKeyedSubscript_, isa);

  objc_msgSend(v8, sel_doubleValue);
  uint64_t v10 = v9;

  return v10;
}

uint64_t static MLDataValue.MultiArrayType.== infix(_:_:)()
{
  return static NSObject.== infix(_:_:)() & 1;
}

uint64_t MLDataValue.MultiArrayType.debugDescription.getter()
{
  return MLDataValue.MultiArrayType.description.getter((SEL *)&selRef_debugDescription);
}

uint64_t MLDataValue.MultiArrayType.description.getter(SEL *a1)
{
  id v2 = [*v1 *a1];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void static MLDataValue.MultiArrayType.dataValueType.getter(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

void *MLDataValue.MultiArrayType.init(from:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  CreateML::MLDataValue::MultiArrayType result = *(void **)a1;
  int v5 = *(unsigned __int8 *)(a1 + 16);
  if (v5 != 5)
  {
    outlined consume of MLDataValue(result, *(id *)(a1 + 8), v5);
    CreateML::MLDataValue::MultiArrayType result = 0;
  }
  *a2 = result;
  return result;
}

CreateML::MLDataValue::MultiArrayType __swiftcall MLDataValue.MultiArrayType.init()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_2272CBA80;
  type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  *(NSNumber *)(v2 + 32) = NSNumber.init(integerLiteral:)(1);
  specialized Array._endMutation()();
  id v3 = objc_allocWithZone(MEMORY[0x263F00DA8]);
  id v4 = @nonobjc MLMultiArray.init(shape:dataType:)(v2, 65568);
  if (v4)
  {
    result._contents.super.Class isa = MLDataValue.MultiArrayType.init(_:)((MLMultiArray)v4)._contents.super.isa;
    *uint64_t v1 = v2;
  }
  else
  {
    result._contents.super.Class isa = (Class)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t MLDataValue.MultiArrayType.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  id v4 = (void *)swift_allocObject();
  uint64_t v5 = specialized handling<A, B>(_:_:)(*(void *)(a1 + 16));
  if (!v5) {
    goto LABEL_13;
  }
  type metadata accessor for CMLMultiArray();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v5;
  v4[2] = v6;
  swift_retain();
  uint64_t v7 = CMLMultiArray.data()();
  Swift::Int v8 = CMLMultiArray.dimensions()();
  if (v9)
  {
    OUTLINED_FUNCTION_4_22();
    goto LABEL_15;
  }
  Swift::Int v10 = v8;
  uint64_t v11 = CMLMultiArray.shape()();
  uint64_t v12 = CMLMultiArray.strides()();
  if (v10 < 0)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    OUTLINED_FUNCTION_4_22();
LABEL_15:
    uint64_t result = swift_unexpectedError();
    __break(1u);
    return result;
  }
  uint64_t v13 = MEMORY[0x263F8EE78];
  if (v10)
  {
    BOOL v14 = (uint64_t *)v12;
    uint64_t v22 = v7;
    uint64_t v24 = MEMORY[0x263F8EE78];
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v15 = 0;
    do
    {
      uint64_t v16 = v15 + 1;
      objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithUnsignedLongLong_, *(void *)(v11 + 8 * v15));
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      OUTLINED_FUNCTION_43_9();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      uint64_t v15 = v16;
    }
    while (v10 != v16);
    uint64_t v17 = v24;
    uint64_t v23 = v13;
    specialized ContiguousArray.reserveCapacity(_:)();
    do
    {
      uint64_t v18 = *v14++;
      objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithLongLong_, v18);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      OUTLINED_FUNCTION_43_9();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v10;
    }
    while (v10);
    uint64_t v7 = v22;
  }
  else
  {
    uint64_t v17 = MEMORY[0x263F8EE78];
  }
  id v19 = objc_allocWithZone(MEMORY[0x263F00DA8]);
  swift_retain();
  id v20 = @nonobjc MLMultiArray.init(dataPointer:shape:dataType:strides:deallocator:)(v7, v17, 65600, v13, partial apply for closure #3 in MLDataValue.MultiArrayType.init(from:), v4);
  MLDataValue.MultiArrayType.init(_:)((MLMultiArray)v20);
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  *a2 = v23;
  return result;
}

uint64_t closure #3 in MLDataValue.MultiArrayType.init(from:)(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 16) = 0;
  return swift_release();
}

#error "22716E690: call analysis failed (funcsize=246)"

id @nonobjc MLMultiArray.init(shape:dataType:)(uint64_t a1, uint64_t a2)
{
  v9[1] = *(id *)MEMORY[0x263EF8340];
  type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v9[0] = 0;
  id v5 = objc_msgSend(v2, sel_initWithShape_dataType_error_, isa, a2, v9);

  if (v5)
  {
    id v6 = v9[0];
  }
  else
  {
    id v7 = v9[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v5;
}

uint64_t specialized static Array._allocateUninitialized(_:)(uint64_t a1)
{
  return specialized static Array._allocateUninitialized(_:)(a1);
}

{
  return specialized static Array._allocateUninitialized(_:)(a1);
}

{
  return specialized static Array._allocateUninitialized(_:)(a1);
}

{
  return specialized static Array._allocateUninitialized(_:)(a1);
}

{
  uint64_t result;

  if (a1 < 0)
  {
    OUTLINED_FUNCTION_0_18();
    uint64_t result = OUTLINED_FUNCTION_10_23();
    __break(1u);
  }
  else if (a1)
  {
    uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(result + 16) = a1;
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

{
  uint64_t result;

  if (a1 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (a1)
  {
    type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10) = a1;
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  if (a1 < 0)
  {
    OUTLINED_FUNCTION_0_18();
    uint64_t result = OUTLINED_FUNCTION_10_23();
    __break(1u);
  }
  else
  {
    if (a1)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<URL, String>);
      uint64_t v2 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v2 + 16) = a1;
    }
    else
    {
      uint64_t v2 = MEMORY[0x263F8EE78];
    }
    id v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<URL, String>);
    OUTLINED_FUNCTION_39_0(v3);
    return v2;
  }
  return result;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_18();
    uint64_t result = (char *)OUTLINED_FUNCTION_2_43();
    __break(1u);
  }
  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_34(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_18();
    uint64_t result = (char *)OUTLINED_FUNCTION_2_43();
    __break(1u);
  }
  else if (a3 != result || &result[24 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_34(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_18();
    uint64_t result = (char *)OUTLINED_FUNCTION_2_43();
    __break(1u);
  }
  else if (a3 != result || &result[4 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_34(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_18();
    uint64_t result = (char *)OUTLINED_FUNCTION_2_43();
    __break(1u);
  }
  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_34(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_18();
    uint64_t result = (char *)OUTLINED_FUNCTION_2_43();
    __break(1u);
  }
  else if (a3 != result || &result[40 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_34(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_18();
    uint64_t result = (char *)OUTLINED_FUNCTION_2_43();
    __break(1u);
  }
  else if (a3 != result || &result[24 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_34(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_18();
    uint64_t result = (char *)OUTLINED_FUNCTION_2_43();
    __break(1u);
  }
  else if (a3 != result || &result[64 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_34(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_18();
    uint64_t result = (char *)OUTLINED_FUNCTION_2_43();
    __break(1u);
  }
  else if (a3 != result || &result[32 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_34(a3, result);
  }
  return result;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[16 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 16 * a2);
  }
  return __src;
}

{
  uint64_t v3;

  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[48 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 48 * a2);
  }
  return __src;
}

{
  uint64_t v3;

  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[32 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 32 * a2);
  }
  return __src;
}

{
  uint64_t v3;

  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[24 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 24 * a2);
  }
  return __src;
}

void specialized UnsafeMutablePointer.moveInitialize(from:count:)(uint64_t a1, uint64_t a2)
{
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  char v6;
  uint64_t v7;
  uint64_t vars8;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_18();
    OUTLINED_FUNCTION_2_43();
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_32_13();
    if (v6
      && (__swift_instantiateConcreteTypeFromMangledName(v5), OUTLINED_FUNCTION_8(), v3 + *(void *)(v7 + 72) * v2 > v4))
    {
      if (v4 != v3)
      {
        OUTLINED_FUNCTION_14_22();
        swift_arrayInitWithTakeBackToFront();
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(v5);
      OUTLINED_FUNCTION_14_22();
      swift_arrayInitWithTakeFrontToBack();
    }
  }
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void (*v5)(void);
  char v6;
  uint64_t v7;
  uint64_t vars8;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_18();
    OUTLINED_FUNCTION_2_43();
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_32_13();
    if (v6 && (v5(0), OUTLINED_FUNCTION_8(), v3 + *(void *)(v7 + 72) * v2 > v4))
    {
      if (v4 != v3)
      {
        OUTLINED_FUNCTION_14_22();
        swift_arrayInitWithTakeBackToFront();
      }
    }
    else
    {
      v5(0);
      OUTLINED_FUNCTION_14_22();
      swift_arrayInitWithTakeFrontToBack();
    }
  }
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000) != 0)
  {
    OUTLINED_FUNCTION_0_18();
    __src = (char *)OUTLINED_FUNCTION_2_43();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

{
  uint64_t v3;

  if ((__len & 0x8000000000000000) != 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

uint64_t specialized UnsafeMutablePointer.initialize(from:count:)()
{
  OUTLINED_FUNCTION_29_15();
  if (v3 < 0)
  {
    OUTLINED_FUNCTION_0_18();
    OUTLINED_FUNCTION_4_38();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_3_40();
    __break(1u);
    return result;
  }
  if (v2 + 16 * v1 > v0 && v0 + 16 * v1 > v2)
  {
    OUTLINED_FUNCTION_0_18();
    OUTLINED_FUNCTION_5_33();
    goto LABEL_11;
  }

  return swift_arrayInitWithCopy();
}

{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t vars8;

  OUTLINED_FUNCTION_29_15();
  if (v3 < 0)
  {
    OUTLINED_FUNCTION_0_18();
    OUTLINED_FUNCTION_4_38();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_3_40();
    __break(1u);
    return result;
  }
  if (v2 + 24 * v1 > v0 && v0 + 24 * v1 > v2)
  {
    OUTLINED_FUNCTION_0_18();
    OUTLINED_FUNCTION_5_33();
    goto LABEL_11;
  }

  return swift_arrayInitWithCopy();
}

{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t vars8;

  OUTLINED_FUNCTION_29_15();
  if (v3 < 0)
  {
    OUTLINED_FUNCTION_0_18();
    OUTLINED_FUNCTION_4_38();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_3_40();
    __break(1u);
    return result;
  }
  if (v2 + 8 * v1 > v0 && v0 + 8 * v1 > v2)
  {
    OUTLINED_FUNCTION_0_18();
    OUTLINED_FUNCTION_5_33();
    goto LABEL_11;
  }

  return swift_arrayInitWithCopy();
}

{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t vars8;

  OUTLINED_FUNCTION_29_15();
  if (v3 < 0)
  {
    OUTLINED_FUNCTION_0_18();
    OUTLINED_FUNCTION_4_38();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_3_40();
    __break(1u);
    return result;
  }
  if (v2 + 32 * v1 > v0 && v0 + 32 * v1 > v2)
  {
    OUTLINED_FUNCTION_0_18();
    OUTLINED_FUNCTION_5_33();
    goto LABEL_11;
  }

  return swift_arrayInitWithCopy();
}

uint64_t specialized UnsafeMutablePointer.initialize(from:count:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0 || (a3 + 16 * a2 > a1 ? (BOOL v3 = a1 + 16 * a2 > a3) : (BOOL v3 = 0), v3))
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    return swift_arrayInitWithCopy();
  }
  return result;
}

{
  BOOL v3;
  uint64_t result;
  uint64_t vars8;

  if (a2 < 0 || (a3 + 48 * a2 > a1 ? (BOOL v3 = a1 + 48 * a2 > a3) : (BOOL v3 = 0), v3))
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLDataValue, MLDataValue));
    return swift_arrayInitWithCopy();
  }
  return result;
}

{
  BOOL v3;
  uint64_t result;
  uint64_t vars8;

  if (a2 < 0 || (a3 + 32 * a2 > a1 ? (BOOL v3 = a1 + 32 * a2 > a3) : (BOOL v3 = 0), v3))
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLDataValue, Int));
    return swift_arrayInitWithCopy();
  }
  return result;
}

{
  BOOL v3;
  uint64_t result;
  uint64_t vars8;

  if (a2 < 0 || (a3 + 40 * a2 > a1 ? (BOOL v3 = a1 + 40 * a2 > a3) : (BOOL v3 = 0), v3))
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Numeric);
    return swift_arrayInitWithCopy();
  }
  return result;
}

{
  BOOL v3;
  uint64_t result;
  uint64_t vars8;

  if (a2 < 0 || (a3 + 24 * a2 > a1 ? (BOOL v3 = a1 + 24 * a2 > a3) : (BOOL v3 = 0), v3))
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (label: String, confidence: Double));
    return swift_arrayInitWithCopy();
  }
  return result;
}

{
  BOOL v3;
  uint64_t result;
  uint64_t vars8;

  if (a2 < 0 || (a3 + 24 * a2 > a1 ? (BOOL v3 = a1 + 24 * a2 > a3) : (BOOL v3 = 0), v3))
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return swift_arrayInitWithCopy();
  }
  return result;
}

{
  BOOL v3;
  uint64_t result;
  uint64_t vars8;

  if (a2 < 0 || (a3 + 8 * a2 > a1 ? (BOOL v3 = a1 + 8 * a2 > a3) : (BOOL v3 = 0), v3))
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for NLLanguage(0);
    return swift_arrayInitWithCopy();
  }
  return result;
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_18();
    OUTLINED_FUNCTION_4_38();
LABEL_11:
    uint64_t result = (void *)OUTLINED_FUNCTION_3_40();
    __break(1u);
    return result;
  }
  OUTLINED_FUNCTION_26_16();
  if (!v5 && v4)
  {
    BOOL v4 = v3 >= v2;
    BOOL v5 = v3 == v2;
  }
  else
  {
    BOOL v4 = 0;
    BOOL v5 = 0;
  }
  if (!v5 && v4)
  {
    OUTLINED_FUNCTION_0_18();
    OUTLINED_FUNCTION_5_33();
    goto LABEL_11;
  }
  id v6 = (void *)OUTLINED_FUNCTION_25_19();

  return memcpy(v6, v7, v8);
}

{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  BOOL v5;
  void *v6;
  const void *v7;
  size_t v8;
  void *result;
  uint64_t vars8;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_18();
    OUTLINED_FUNCTION_4_38();
LABEL_11:
    uint64_t result = (void *)OUTLINED_FUNCTION_3_40();
    __break(1u);
    return result;
  }
  OUTLINED_FUNCTION_27_17();
  if (!v5 && v4)
  {
    BOOL v4 = v3 >= v2;
    BOOL v5 = v3 == v2;
  }
  else
  {
    BOOL v4 = 0;
    BOOL v5 = 0;
  }
  if (!v5 && v4)
  {
    OUTLINED_FUNCTION_0_18();
    OUTLINED_FUNCTION_5_33();
    goto LABEL_11;
  }
  id v6 = (void *)OUTLINED_FUNCTION_25_19();

  return memcpy(v6, v7, v8);
}

uint64_t specialized UnsafeMutablePointer.initialize(from:count:)(uint64_t a1, uint64_t a2)
{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  char v5;
  char v6;
  BOOL v7;
  uint64_t result;
  uint64_t vars8;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_18();
    OUTLINED_FUNCTION_4_38();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_3_40();
    __break(1u);
    return result;
  }
  OUTLINED_FUNCTION_12_20();
  if (!v6 & v5) {
    id v7 = v4 > v2;
  }
  else {
    id v7 = 0;
  }
  if (v7)
  {
    OUTLINED_FUNCTION_0_18();
    OUTLINED_FUNCTION_5_33();
    goto LABEL_11;
  }
  __swift_instantiateConcreteTypeFromMangledName(v3);
  OUTLINED_FUNCTION_8_27();

  return swift_arrayInitWithCopy();
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  unint64_t v2;
  unint64_t v3;
  char v4;
  char v5;
  BOOL v6;
  uint64_t result;
  uint64_t vars8;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_18();
    OUTLINED_FUNCTION_4_38();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_3_40();
    __break(1u);
    return result;
  }
  OUTLINED_FUNCTION_12_20();
  if (!v5 & v4) {
    id v6 = v3 > v2;
  }
  else {
    id v6 = 0;
  }
  if (v6)
  {
    OUTLINED_FUNCTION_0_18();
    OUTLINED_FUNCTION_5_33();
    goto LABEL_11;
  }
  type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for MLMultiArray);
  OUTLINED_FUNCTION_8_27();

  return swift_arrayInitWithCopy();
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  unint64_t v2;
  void (*v3)(void);
  unint64_t v4;
  char v5;
  char v6;
  BOOL v7;
  uint64_t result;
  uint64_t vars8;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_18();
    OUTLINED_FUNCTION_4_38();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_3_40();
    __break(1u);
    return result;
  }
  OUTLINED_FUNCTION_35_12();
  v3(0);
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_46_10();
  if (!v6 & v5) {
    id v7 = v4 > v2;
  }
  else {
    id v7 = 0;
  }
  if (v7)
  {
    OUTLINED_FUNCTION_0_18();
    OUTLINED_FUNCTION_5_33();
    goto LABEL_11;
  }
  OUTLINED_FUNCTION_8_27();

  return swift_arrayInitWithCopy();
}

{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t vars8;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_18();
    OUTLINED_FUNCTION_4_38();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_3_40();
    __break(1u);
    return result;
  }
  OUTLINED_FUNCTION_35_12();
  if (v4 + 16 * v3 > v2 && v2 + 16 * v3 > v4)
  {
    OUTLINED_FUNCTION_0_18();
    OUTLINED_FUNCTION_5_33();
    goto LABEL_11;
  }
  __swift_instantiateConcreteTypeFromMangledName(v5);
  OUTLINED_FUNCTION_8_27();

  return swift_arrayInitWithCopy();
}

{
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  char v5;
  char v6;
  BOOL v7;
  uint64_t result;
  uint64_t vars8;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_18();
    OUTLINED_FUNCTION_4_38();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_3_40();
    __break(1u);
    return result;
  }
  OUTLINED_FUNCTION_35_12();
  __swift_instantiateConcreteTypeFromMangledName(v3);
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_46_10();
  if (!v6 & v5) {
    id v7 = v4 > v2;
  }
  else {
    id v7 = 0;
  }
  if (v7)
  {
    OUTLINED_FUNCTION_0_18();
    OUTLINED_FUNCTION_5_33();
    goto LABEL_11;
  }
  OUTLINED_FUNCTION_8_27();

  return swift_arrayInitWithCopy();
}

{
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  char v5;
  char v6;
  BOOL v7;
  uint64_t result;
  uint64_t vars8;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_18();
    OUTLINED_FUNCTION_4_38();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_3_40();
    __break(1u);
    return result;
  }
  OUTLINED_FUNCTION_23_10();
  if (!v6 & v5) {
    id v7 = v4 > v2;
  }
  else {
    id v7 = 0;
  }
  if (v7)
  {
    OUTLINED_FUNCTION_0_18();
    OUTLINED_FUNCTION_5_33();
    goto LABEL_11;
  }
  __swift_instantiateConcreteTypeFromMangledName(v3);
  OUTLINED_FUNCTION_8_27();

  return swift_arrayInitWithCopy();
}

{
  unint64_t v2;
  unint64_t v3;
  char v4;
  char v5;
  BOOL v6;
  uint64_t result;
  uint64_t vars8;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_18();
    OUTLINED_FUNCTION_4_38();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_3_40();
    __break(1u);
    return result;
  }
  OUTLINED_FUNCTION_23_10();
  if (!v5 & v4) {
    id v6 = v3 > v2;
  }
  else {
    id v6 = 0;
  }
  if (v6)
  {
    OUTLINED_FUNCTION_0_18();
    OUTLINED_FUNCTION_5_33();
    goto LABEL_11;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  OUTLINED_FUNCTION_8_27();

  return swift_arrayInitWithCopy();
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_18();
    OUTLINED_FUNCTION_4_38();
LABEL_11:
    uint64_t result = (void *)OUTLINED_FUNCTION_3_40();
    __break(1u);
    return result;
  }
  unint64_t v3 = a1 + 16 * a2;
  if (a3 + 16 * a2 > a1)
  {
    BOOL v4 = v3 >= a3;
    BOOL v5 = v3 == a3;
  }
  else
  {
    BOOL v4 = 0;
    BOOL v5 = 0;
  }
  if (!v5 && v4)
  {
    OUTLINED_FUNCTION_0_18();
    OUTLINED_FUNCTION_5_33();
    goto LABEL_11;
  }
  id v6 = (void *)OUTLINED_FUNCTION_25_19();

  return memcpy(v6, v7, v8);
}

void *specialized UnsafeMutablePointer.initialize(from:count:)()
{
  OUTLINED_FUNCTION_29_15();
  if (v3 < 0)
  {
    OUTLINED_FUNCTION_0_18();
    OUTLINED_FUNCTION_4_38();
LABEL_11:
    uint64_t result = (void *)OUTLINED_FUNCTION_3_40();
    __break(1u);
    return result;
  }
  if (&v2[v1] > v0 && &v0[v1] > v2)
  {
    OUTLINED_FUNCTION_0_18();
    OUTLINED_FUNCTION_5_33();
    goto LABEL_11;
  }

  return memcpy(v2, v0, v1);
}

void specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3)
{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = v4;
}

{
  uint64_t *v3;
  uint64_t v4;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<URL>, MEMORY[0x263F06EA8]);
  *uint64_t v3 = v4;
}

{
  uint64_t *v3;
  uint64_t v4;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = v4;
}

{
  uint64_t *v3;
  uint64_t v4;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = v4;
}

{
  uint64_t *v3;
  uint64_t v4;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = v4;
}

{
  uint64_t *v3;
  uint64_t v4;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[(MLDataValue, MLDataValue)]?>, (void (*)(uint64_t, uint64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (uint64_t)&demangling cache variable for type metadata for [(MLDataValue, MLDataValue)]?, (void (*)(uint64_t, uint64_t, void *, uint64_t))specialized UnsafeMutablePointer.initialize(from:count:));
  *uint64_t v3 = v4;
}

{
  uint64_t *v3;
  uint64_t v4;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[(key: MLDataValue, value: MLDataValue)]?>, (void (*)(uint64_t, uint64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (uint64_t)&demangling cache variable for type metadata for [(key: MLDataValue, value: MLDataValue)]?, (void (*)(uint64_t, uint64_t, void *, uint64_t))specialized UnsafeMutablePointer.initialize(from:count:));
  *uint64_t v3 = v4;
}

{
  uint64_t *v3;
  uint64_t v4;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[MLDataValue]?>, (void (*)(uint64_t, uint64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (uint64_t)&demangling cache variable for type metadata for [MLDataValue]?, (void (*)(uint64_t, uint64_t, void *, uint64_t))specialized UnsafeMutablePointer.initialize(from:count:));
  *uint64_t v3 = v4;
}

{
  uint64_t *v3;
  uint64_t v4;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = v4;
}

{
  uint64_t *v3;
  uint64_t v4;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = v4;
}

{
  uint64_t *v3;
  uint64_t v4;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[(label: String, confidence: Double)]>, (void (*)(uint64_t, uint64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (uint64_t)&demangling cache variable for type metadata for [(label: String, confidence: Double)], (void (*)(uint64_t, uint64_t, void *, uint64_t))specialized UnsafeMutablePointer.initialize(from:count:));
  *uint64_t v3 = v4;
}

{
  uint64_t *v3;
  uint64_t v4;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<MLProgram.Value>, MEMORY[0x263F53348]);
  *uint64_t v3 = v4;
}

{
  uint64_t *v3;
  uint64_t v4;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<FeatureDescription>, MEMORY[0x263F53268]);
  *uint64_t v3 = v4;
}

{
  uint64_t *v3;
  uint64_t v4;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Tensor>, MEMORY[0x263F58508]);
  *uint64_t v3 = v4;
}

{
  uint64_t *v3;
  uint64_t v4;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[Double]>, (void (*)(uint64_t, uint64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (uint64_t)&demangling cache variable for type metadata for [Double], (void (*)(uint64_t, uint64_t, void *, uint64_t))specialized UnsafeMutablePointer.initialize(from:count:));
  *uint64_t v3 = v4;
}

{
  uint64_t *v3;
  uint64_t v4;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[MLHandActionClassifier.Prediction]>, (void (*)(uint64_t, uint64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (uint64_t)&demangling cache variable for type metadata for [MLHandActionClassifier.Prediction], (void (*)(uint64_t, uint64_t, void *, uint64_t))specialized UnsafeMutablePointer.initialize(from:count:));
  *uint64_t v3 = v4;
}

{
  uint64_t *v3;
  uint64_t v4;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[String : Double]>, (void (*)(uint64_t, uint64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (uint64_t)&demangling cache variable for type metadata for [String : Double], (void (*)(uint64_t, uint64_t, void *, uint64_t))specialized UnsafeMutablePointer.initialize(from:count:));
  *uint64_t v3 = v4;
}

void specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *unint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *unint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *unint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *unint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *unint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *unint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *unint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *unint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *unint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *unint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *unint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *unint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *unint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *unint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *unint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *unint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *unint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *unint64_t v0 = v1;
}

char *specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char *a1, int64_t a2, char a3)
{
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  char *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  char *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(uint64_t a1, int64_t a2, char a3)
{
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

{
  uint64_t v4;
  char v7;
  char v8;
  uint64_t *v9;
  const void *v10;
  size_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  if (a3)
  {
    OUTLINED_FUNCTION_7_29();
    if (v7 != v8)
    {
      OUTLINED_FUNCTION_11_24();
      if (v7)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_6_31();
    }
  }
  OUTLINED_FUNCTION_36_13();
  if (v4)
  {
    __swift_instantiateConcreteTypeFromMangledName(v9);
    Swift::Int v10 = (const void *)OUTLINED_FUNCTION_28_0();
    uint64_t v11 = _swift_stdlib_malloc_size(v10);
    OUTLINED_FUNCTION_34_9(v11);
  }
  uint64_t v12 = (char *)OUTLINED_FUNCTION_31_11();
  if (a1)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v12, v13, v14);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)((uint64_t)v12, v13);
  }
  swift_release();
}

{
  uint64_t v4;
  char v7;
  char v8;
  const void *v9;
  size_t v10;
  char *v11;
  uint64_t v12;
  char *v13;

  if (a3)
  {
    OUTLINED_FUNCTION_7_29();
    if (v7 != v8)
    {
      OUTLINED_FUNCTION_11_24();
      if (v7)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_6_31();
    }
  }
  OUTLINED_FUNCTION_36_13();
  if (v4)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
    uint64_t v9 = (const void *)OUTLINED_FUNCTION_28_0();
    Swift::Int v10 = _swift_stdlib_malloc_size(v9);
    OUTLINED_FUNCTION_34_9(v10);
  }
  uint64_t v11 = (char *)OUTLINED_FUNCTION_31_11();
  if (a1)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v11, v12, v13);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)((uint64_t)v11, v12);
  }
  swift_release();
}

{
  uint64_t v4;
  uint64_t v5;
  char v8;
  char v9;
  uint64_t *v10;
  void *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;

  if (a3)
  {
    OUTLINED_FUNCTION_7_29();
    if (v8 != v9)
    {
      OUTLINED_FUNCTION_11_24();
      if (v8)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_6_31();
    }
  }
  OUTLINED_FUNCTION_36_13();
  if (v5)
  {
    __swift_instantiateConcreteTypeFromMangledName(v10);
    uint64_t v11 = (void *)OUTLINED_FUNCTION_28_0();
    _swift_stdlib_malloc_size(v11);
    OUTLINED_FUNCTION_19_20();
    v11[2] = v4;
    v11[3] = v12;
  }
  uint64_t v13 = (char *)OUTLINED_FUNCTION_31_11();
  if (a1)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13, v14, v15);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)((unint64_t)v13, v14, (unint64_t)v15);
  }
  swift_release();
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  uint64_t *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_15_21();
  if (v6)
  {
    OUTLINED_FUNCTION_7_29();
    if (v7 != v8)
    {
      OUTLINED_FUNCTION_11_24();
      if (v7)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_6_31();
    }
  }
  OUTLINED_FUNCTION_20_20();
  if (v5)
  {
    __swift_instantiateConcreteTypeFromMangledName(v9);
    Swift::Int v10 = (void *)OUTLINED_FUNCTION_28_0();
    _swift_stdlib_malloc_size(v10);
    OUTLINED_FUNCTION_19_20();
    v10[2] = v4;
    v10[3] = v11;
  }
  uint64_t v12 = OUTLINED_FUNCTION_18_17();
  if (v3)
  {
    v2(v12);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v12);
  }
  swift_release();
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t *v3;
  char v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;

  OUTLINED_FUNCTION_30_14();
  if (v4)
  {
    OUTLINED_FUNCTION_7_29();
    if (v6 != v7)
    {
      OUTLINED_FUNCTION_11_24();
      if (v6)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_6_31();
    }
  }
  else
  {
    BOOL v5 = v2;
  }
  size_t v8 = *(void *)(v0 + 16);
  if (v5 <= v8) {
    uint64_t v9 = *(void *)(v0 + 16);
  }
  else {
    uint64_t v9 = v5;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(v3);
    Swift::Int v10 = OUTLINED_FUNCTION_28_0();
    _swift_stdlib_malloc_size((const void *)v10);
    OUTLINED_FUNCTION_19_20();
    *(void *)(v10 + 16) = v8;
    *(void *)(v10 + 24) = v11;
  }
  else
  {
    Swift::Int v10 = MEMORY[0x263F8EE78];
  }
  uint64_t v12 = (char *)(v0 + 32);
  if (v1)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v12, v8, (char *)(v10 + 32));
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)((uint64_t)v12, v8);
  }
  swift_release();
}

{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  uint64_t *v9;
  void *v10;
  size_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_15_21();
  if (v6)
  {
    OUTLINED_FUNCTION_7_29();
    if (v7 != v8)
    {
      OUTLINED_FUNCTION_11_24();
      if (v7)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_6_31();
    }
  }
  OUTLINED_FUNCTION_20_20();
  if (v5)
  {
    __swift_instantiateConcreteTypeFromMangledName(v9);
    Swift::Int v10 = (void *)OUTLINED_FUNCTION_28_0();
    uint64_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v4;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 4);
  }
  uint64_t v12 = OUTLINED_FUNCTION_18_17();
  if (v3)
  {
    v2(v12);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v12);
  }
  swift_release();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  uint64_t *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_15_21();
  if (v6)
  {
    OUTLINED_FUNCTION_7_29();
    if (v7 != v8)
    {
      OUTLINED_FUNCTION_11_24();
      if (v7)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_6_31();
    }
  }
  OUTLINED_FUNCTION_20_20();
  if (v5)
  {
    __swift_instantiateConcreteTypeFromMangledName(v9);
    Swift::Int v10 = (void *)OUTLINED_FUNCTION_28_0();
    _swift_stdlib_malloc_size(v10);
    OUTLINED_FUNCTION_42_10();
    v10[2] = v4;
    v10[3] = v11;
  }
  uint64_t v12 = OUTLINED_FUNCTION_18_17();
  if (v3)
  {
    v2(v12);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v12);
  }
  swift_release();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  uint64_t *v9;
  void *v10;
  size_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_15_21();
  if (v6)
  {
    OUTLINED_FUNCTION_7_29();
    if (v7 != v8)
    {
      OUTLINED_FUNCTION_11_24();
      if (v7)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_6_31();
    }
  }
  OUTLINED_FUNCTION_20_20();
  if (v5)
  {
    __swift_instantiateConcreteTypeFromMangledName(v9);
    Swift::Int v10 = (void *)swift_allocObject();
    uint64_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v4;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  uint64_t v12 = OUTLINED_FUNCTION_18_17();
  if (v3)
  {
    v2(v12);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v12);
  }
  swift_release();
}

{
  uint64_t v0;
  uint64_t *v1;
  char v2;
  uint64_t v3;
  uint64_t *v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  size_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  OUTLINED_FUNCTION_30_14();
  if (v5)
  {
    OUTLINED_FUNCTION_7_29();
    if (v7 != v8)
    {
      OUTLINED_FUNCTION_11_24();
      if (v7)
      {
LABEL_23:
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_6_31();
    }
  }
  else
  {
    id v6 = v3;
  }
  uint64_t v9 = *(void *)(v0 + 16);
  if (v6 <= v9) {
    Swift::Int v10 = *(void *)(v0 + 16);
  }
  else {
    Swift::Int v10 = v6;
  }
  if (!v10) {
    goto LABEL_17;
  }
  __swift_instantiateConcreteTypeFromMangledName(v4);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(v1);
  OUTLINED_FUNCTION_1(v11);
  uint64_t v13 = *(void *)(v12 + 72);
  uint64_t v15 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  uint64_t v17 = _swift_stdlib_malloc_size(v16);
  if (!v13)
  {
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v17 - v15 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_22;
  }
  v16[2] = v9;
  void v16[3] = 2 * ((uint64_t)(v17 - v15) / v13);
LABEL_17:
  id v19 = __swift_instantiateConcreteTypeFromMangledName(v1);
  OUTLINED_FUNCTION_39_0(v19);
  BOOL v21 = v0 + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
  if (v2)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v21, v9);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v21, v9);
  }
  swift_release();
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t *v3;
  char v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;

  OUTLINED_FUNCTION_30_14();
  if (v4)
  {
    OUTLINED_FUNCTION_7_29();
    if (v6 != v7)
    {
      OUTLINED_FUNCTION_11_24();
      if (v6)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_6_31();
    }
  }
  else
  {
    BOOL v5 = v2;
  }
  size_t v8 = *(void *)(v0 + 16);
  if (v5 <= v8) {
    uint64_t v9 = *(void *)(v0 + 16);
  }
  else {
    uint64_t v9 = v5;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(v3);
    Swift::Int v10 = OUTLINED_FUNCTION_28_0();
    _swift_stdlib_malloc_size((const void *)v10);
    OUTLINED_FUNCTION_42_10();
    *(void *)(v10 + 16) = v8;
    *(void *)(v10 + 24) = v11;
  }
  else
  {
    Swift::Int v10 = MEMORY[0x263F8EE78];
  }
  uint64_t v12 = (char *)(v0 + 32);
  if (v1)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v12, v8, (char *)(v10 + 32));
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)((uint64_t)v12, v8);
  }
  swift_release();
}

{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

char *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(MLDataValue, MLDataValue)>);
    Swift::Int v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    Swift::Int v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)((unint64_t)v13, v8, (unint64_t)v12);
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Numeric>);
    Swift::Int v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    Swift::Int v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)((unint64_t)v13, v8, (unint64_t)v12);
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NLLanguage>);
    Swift::Int v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 8);
  }
  else
  {
    Swift::Int v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)((unint64_t)v13, v8, (unint64_t)v12);
  }
  swift_release();
  return v10;
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, void (*a6)(uint64_t, uint64_t, void *), uint64_t a7, void (*a8)(uint64_t, uint64_t, void *, uint64_t))
{
  if (a3)
  {
    OUTLINED_FUNCTION_7_29();
    if (v14 != v15)
    {
      OUTLINED_FUNCTION_11_24();
      if (v14)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_6_31();
    }
  }
  else
  {
    uint64_t v13 = a2;
  }
  uint64_t v16 = *(void *)(a4 + 16);
  if (v13 <= v16) {
    uint64_t v17 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v17 = v13;
  }
  if (v17)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    uint64_t v18 = (void *)OUTLINED_FUNCTION_28_0();
    size_t v19 = _swift_stdlib_malloc_size(v18);
    v18[2] = v16;
    v18[3] = 2 * ((uint64_t)(v19 - 32) / 8);
  }
  else
  {
    uint64_t v18 = (void *)MEMORY[0x263F8EE78];
  }
  id v20 = v18 + 4;
  uint64_t v21 = a4 + 32;
  if (a1)
  {
    a6(v21, v16, v20);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    a8(v21, v16, v20, a7);
  }
  swift_release();
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if (a3)
  {
    OUTLINED_FUNCTION_7_29();
    if (v10 != v11)
    {
      OUTLINED_FUNCTION_11_24();
      if (v10)
      {
LABEL_23:
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_6_31();
    }
  }
  else
  {
    uint64_t v9 = a2;
  }
  uint64_t v12 = *(void *)(a4 + 16);
  if (v9 <= v12) {
    uint64_t v13 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v13 = v9;
  }
  if (!v13) {
    goto LABEL_17;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v14 = a6(0);
  OUTLINED_FUNCTION_1(v14);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v18 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  size_t v19 = (void *)swift_allocObject();
  size_t v20 = _swift_stdlib_malloc_size(v19);
  if (!v16)
  {
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v20 - v18 == 0x8000000000000000 && v16 == -1) {
    goto LABEL_22;
  }
  _OWORD v19[2] = v12;
  v19[3] = 2 * ((uint64_t)(v20 - v18) / v16);
LABEL_17:
  uint64_t v22 = *(void *)(a6(0) - 8);
  uint64_t v23 = a4 + ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80));
  if (a1)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v23, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v23, v12);
  }
  swift_release();
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(uint64_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v10 = swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size((const void *)v10);
    *(void *)(v10 + 16) = v8;
    *(void *)(v10 + 24) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = MEMORY[0x263F8EE78];
  }
  if (v5)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v8, (char *)(v10 + 32));
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)();
  }
  swift_release();
  return v10;
}

unint64_t lazy protocol witness table accessor for type AnnotatedFeature<URL, String> and conformance <> AnnotatedFeature<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnnotatedFeature<URL, String> and conformance <> AnnotatedFeature<A, B>;
  if (!lazy protocol witness table cache variable for type AnnotatedFeature<URL, String> and conformance <> AnnotatedFeature<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for AnnotatedFeature<URL, String>);
    lazy protocol witness table accessor for type URL and conformance URL();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnotatedFeature<URL, String> and conformance <> AnnotatedFeature<A, B>);
  }
  return result;
}

uint64_t sub_227171D90()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #3 in MLDataValue.MultiArrayType.init(from:)(uint64_t a1)
{
  return closure #3 in MLDataValue.MultiArrayType.init(from:)(a1, v1);
}

void *OUTLINED_FUNCTION_1_34@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  return memmove(__dst, a2, v2);
}

uint64_t OUTLINED_FUNCTION_2_43()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_3_40()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_8_27()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_10_23()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_14_22()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_18_17()
{
  return v0 + 32;
}

void OUTLINED_FUNCTION_22_18(void *a1, void *a2)
{
  outlined copy of MLDataValue(a1, a2, 2);
  outlined copy of MLDataValue(v2, v3, 2);
  outlined consume of MLDataValue(v2, v3, 2);
}

id OUTLINED_FUNCTION_24_20()
{
  return @nonobjc MLMultiArray.init(shape:dataType:)(v0, 65600);
}

uint64_t OUTLINED_FUNCTION_25_19()
{
  return v0;
}

void OUTLINED_FUNCTION_28_13(unint64_t a1@<X8>)
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(a1 > 1, v1, 1);
}

uint64_t OUTLINED_FUNCTION_31_11()
{
  return v0 + 32;
}

void OUTLINED_FUNCTION_33_13(uint64_t a1, uint64_t a2)
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, a2, 0);
}

uint64_t OUTLINED_FUNCTION_34_9(uint64_t result)
{
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = 2 * ((result - 32) / 8);
  return result;
}

uint64_t OUTLINED_FUNCTION_37_10()
{
  return v0;
}

id OUTLINED_FUNCTION_38_11()
{
  outlined copy of MLDataValue(v2, v3, 3);
  return outlined copy of MLDataValue(v0, v1, 3);
}

id OUTLINED_FUNCTION_39_11()
{
  outlined copy of MLDataValue(v2, v3, 4);
  return outlined copy of MLDataValue(v0, v1, 4);
}

id OUTLINED_FUNCTION_40_8()
{
  outlined copy of MLDataValue(v2, v3, 5);
  return outlined copy of MLDataValue(v0, v1, 5);
}

uint64_t OUTLINED_FUNCTION_41_8()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_43_9()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t OUTLINED_FUNCTION_44_8()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_45_9()
{
  return v0;
}

uint64_t static MLSoundClassifier.ModelParameters.FeatureExtractorType.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return (*(void *)a1 == *(void *)a2) & ~(*(unsigned __int8 *)(a1 + 8) ^ *(unsigned __int8 *)(a2 + 8));
}

unint64_t MLSoundClassifier.ModelParameters.FeatureExtractorType.description.getter()
{
  if (*(unsigned char *)(v0 + 8))
  {
    OUTLINED_FUNCTION_0_3();
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    uint64_t v1 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v4 = 0xD000000000000031;
  }
  else
  {
    uint64_t v1 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v4 = 0xD000000000000010;
  }
  String.append(_:)(*(Swift::String *)&v1);
  swift_bridgeObjectRelease();
  return v4;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MLSoundClassifier.ModelParameters.FeatureExtractorType.validate()()
{
  uint64_t v1 = *v0;
  if (v0[1])
  {
    if (v1 == 1) {
      return;
    }
    OUTLINED_FUNCTION_0_3();
    _StringGuts.grow(_:)(58);
    v2._uint64_t countAndFlagsBits = 0xD000000000000026;
    v2._object = (void *)0x80000002272D83A0;
    String.append(_:)(v2);
  }
  else
  {
    if (v1 == 1) {
      return;
    }
    OUTLINED_FUNCTION_0_3();
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease();
    unint64_t v6 = 0xD000000000000019;
    unint64_t v7 = 0x80000002272D83D0;
  }
  v3._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._object = (void *)0x80000002272D4730;
  v4._uint64_t countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v4);
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  swift_allocError();
  *(void *)uint64_t v5 = v6;
  *(void *)(v5 + 8) = v7;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(unsigned char *)(v5 + 48) = 0;
  swift_willThrow();
}

uint64_t getEnumTag for MLSoundClassifier.ModelParameters.FeatureExtractorType(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t destructiveInjectEnumTag for MLSoundClassifier.ModelParameters.FeatureExtractorType(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for MLSoundClassifier.ModelParameters.FeatureExtractorType()
{
  return &type metadata for MLSoundClassifier.ModelParameters.FeatureExtractorType;
}

id MLMultiArray.cast(to:)(id a1)
{
  id v4 = objc_msgSend(v1, sel_dataType);
  if (v4 == (id)65600)
  {
    if (a1 != (id)65568)
    {
LABEL_12:
      if (v4 == a1) {
        return v1;
      }
      _StringGuts.grow(_:)(56);
      v7._object = (void *)0x80000002272D8410;
      v7._uint64_t countAndFlagsBits = 0xD000000000000011;
      String.append(_:)(v7);
      objc_msgSend(v1, sel_dataType);
      type metadata accessor for MLMultiArrayDataType(0);
      OUTLINED_FUNCTION_0_19();
      v8._uint64_t countAndFlagsBits = 0x60206F742060;
      v8._object = (void *)0xE600000000000000;
      String.append(_:)(v8);
      OUTLINED_FUNCTION_0_19();
      v9._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
      v9._object = (void *)0x80000002272D8430;
      String.append(_:)(v9);
      id result = (id)_assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    MEMORY[0x270FA5388](65600);
    OUTLINED_FUNCTION_1_35();
    type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for MLMultiArray);
  }
  else
  {
    if (v4 != (id)65568 || a1 != (id)65600) {
      goto LABEL_12;
    }
    MEMORY[0x270FA5388](v4);
    OUTLINED_FUNCTION_1_35();
    type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for MLMultiArray);
  }
  id result = (id)MLMultiArray.withUnsafeBytes<A>(_:)();
  if (!v2) {
    return (id)v10;
  }
  return result;
}

uint64_t static Int32.mlMultiArrayDataType.getter()
{
  return 131104;
}

uint64_t static Float.mlMultiArrayDataType.getter()
{
  return 65568;
}

uint64_t static Double.mlMultiArrayDataType.getter()
{
  return 65600;
}

uint64_t closure #1 in MLMultiArray.cast(to:)@<X0>(id a1@<X2>, uint64_t *a2@<X8>)
{
  id v4 = objc_msgSend(a1, sel_shape);
  type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v6 = objc_allocWithZone(MEMORY[0x263F00DA8]);
  uint64_t result = (uint64_t)@nonobjc MLMultiArray.init(shape:dataType:)(v5, 65600);
  if (!v2)
  {
    uint64_t v8 = result;
    MEMORY[0x270FA5388](result);
    uint64_t result = MLMultiArray.withUnsafeMutableBytes<A>(_:)();
    *a2 = v8;
  }
  return result;
}

void closure #1 in closure #1 in MLMultiArray.cast(to:)(double *__C, uint64_t a2, int a3, const float *__A, int64_t a5)
{
  if (__C) {
    uint64_t v5 = (a2 - (uint64_t)__C) / 8;
  }
  else {
    uint64_t v5 = 0;
  }
  if (v5 < a5) {
    a5 = v5;
  }
  if (a5 < 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (!__A)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (__C)
  {
    vDSP_vspdp(__A, 1, __C, 1, a5);
    return;
  }
LABEL_12:
  __break(1u);
}

uint64_t closure #2 in MLMultiArray.cast(to:)@<X0>(id a1@<X2>, uint64_t *a2@<X8>)
{
  id v4 = objc_msgSend(a1, sel_shape);
  type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v6 = objc_allocWithZone(MEMORY[0x263F00DA8]);
  uint64_t result = (uint64_t)@nonobjc MLMultiArray.init(shape:dataType:)(v5, 65568);
  if (!v2)
  {
    uint64_t v8 = result;
    MEMORY[0x270FA5388](result);
    uint64_t result = MLMultiArray.withUnsafeMutableBytes<A>(_:)();
    *a2 = v8;
  }
  return result;
}

void closure #1 in closure #2 in MLMultiArray.cast(to:)(float *__C, uint64_t a2, int a3, const double *__A, int64_t a5)
{
  if (__C) {
    uint64_t v5 = (a2 - (uint64_t)__C) / 4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (v5 < a5) {
    a5 = v5;
  }
  if (a5 < 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (!__A)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (__C)
  {
    vDSP_vdpsp(__A, 1, __C, 1, a5);
    return;
  }
LABEL_12:
  __break(1u);
}

uint64_t partial apply for closure #2 in MLMultiArray.cast(to:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #2 in MLMultiArray.cast(to:)(*(id *)(v1 + 16), a1);
}

uint64_t partial apply for closure #1 in MLMultiArray.cast(to:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in MLMultiArray.cast(to:)(*(id *)(v1 + 16), a1);
}

void partial apply for closure #1 in closure #1 in MLMultiArray.cast(to:)(double *a1, uint64_t a2, int a3)
{
  closure #1 in closure #1 in MLMultiArray.cast(to:)(a1, a2, a3, *(const float **)(v3 + 16), *(void *)(v3 + 24));
}

void partial apply for closure #1 in closure #2 in MLMultiArray.cast(to:)(float *a1, uint64_t a2, int a3)
{
  closure #1 in closure #2 in MLMultiArray.cast(to:)(a1, a2, a3, *(const double **)(v3 + 16), *(void *)(v3 + 24));
}

uint64_t OUTLINED_FUNCTION_0_19()
{
  return _print_unlocked<A, B>(_:_:)();
}

uint64_t specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) && (unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v5 & 1) != 0)) {
    return *(void *)(*(void *)(a3 + 56) + 8 * v4);
  }
  else {
    return 0;
  }
}

{
  char v3;

  if (*(void *)(a3 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v3 & 1) != 0)) {
    return swift_bridgeObjectRetain();
  }
  else {
    return 0;
  }
}

{
  unint64_t v4;
  char v5;
  uint64_t v6;

  if (!*(void *)(a3 + 16)) {
    return 0;
  }
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v5 & 1) == 0) {
    return 0;
  }
  id v6 = *(void *)(*(void *)(a3 + 56) + 16 * v4);
  swift_bridgeObjectRetain();
  return v6;
}

{
  char v3;

  if (*(void *)(a3 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v3 & 1) != 0)) {
    return swift_unknownObjectRetain();
  }
  else {
    return 0;
  }
}

uint64_t specialized Dictionary.subscript.getter(unsigned int a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(a1), (v2 & 1) != 0)) {
    return swift_retain();
  }
  else {
    return 0;
  }
}

double specialized Dictionary.subscript.getter@<D0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  return specialized Dictionary.subscript.getter(a1, (uint64_t (*)(void))specialized __RawDictionaryStorage.find<A>(_:), a2);
}

{
  return specialized Dictionary.subscript.getter(a1, (uint64_t (*)(void))specialized __RawDictionaryStorage.find<A>(_:), a2);
}

double specialized Dictionary.subscript.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  if (*(void *)(a3 + 16) && (unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v6 & 1) != 0))
  {
    OUTLINED_FUNCTION_7_30(v5);
  }
  else
  {
    double result = 0.0;
    *a4 = 0u;
    a4[1] = 0u;
  }
  return result;
}

double specialized Dictionary.subscript.getter@<D0>(uint64_t a1@<X1>, uint64_t (*a2)(void)@<X2>, _OWORD *a3@<X8>)
{
  if (*(void *)(a1 + 16) && (uint64_t v4 = a2(), (v5 & 1) != 0))
  {
    OUTLINED_FUNCTION_7_30(v4);
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

double specialized Dictionary.subscript.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  if (*(void *)(a2 + 16) && (unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v5 & 1) != 0))
  {
    OUTLINED_FUNCTION_7_30(v4);
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(), (v2 & 1) != 0)) {
    return swift_bridgeObjectRetain();
  }
  else {
    return 0;
  }
}

uint64_t MLDataTable.Row.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v6 = *(void *)(v3 + 8);
  if (!*(void *)(v6 + 16)) {
    goto LABEL_5;
  }
  uint64_t v8 = result;
  uint64_t v9 = *(void *)(v4 + 16);
  swift_bridgeObjectRetain();
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v8, a2);
  if ((v11 & 1) == 0)
  {
    double result = swift_bridgeObjectRelease();
LABEL_5:
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    char v13 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = *(void *)(*(void *)(v6 + 56) + 8 * v10);
  swift_bridgeObjectRelease();
  swift_retain_n();
  CMLSequence.value(at:)(v12);
  OUTLINED_FUNCTION_18_12();
  MLDataValue.init(_:)(v9, (uint64_t)&v14);
  double result = swift_release();
  char v13 = v15;
  *(_OWORD *)a3 = v14;
LABEL_6:
  *(unsigned char *)(a3 + 16) = v13;
  return result;
}

uint64_t MLDataTable.Row.Values.description.getter()
{
  uint64_t v1 = *v0;
  uint64_t v35 = 91;
  unint64_t v36 = 0xE100000000000000;
  swift_retain();
  uint64_t v2 = CMLSequence.size.getter();
  uint64_t v3 = OUTLINED_FUNCTION_12_0(v2);
  swift_retain();
  uint64_t v4 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_12_0(v4);
  OUTLINED_FUNCTION_105();
  if (v1 < 0)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  swift_retain();
  uint64_t v5 = CMLSequence.size.getter();
  uint64_t v6 = OUTLINED_FUNCTION_12_0(v5);
  swift_release_n();
  if (v3 < 0 || v6 < v3) {
    goto LABEL_21;
  }
  if (v3 >= 10) {
    uint64_t v7 = 10;
  }
  else {
    uint64_t v7 = v3;
  }
  if (v7)
  {
    uint64_t v8 = 0;
    while (v7 != v8)
    {
      if (v8)
      {
        v9._uint64_t countAndFlagsBits = 8236;
        v9._object = (void *)0xE200000000000000;
        String.append(_:)(v9);
      }
      swift_retain_n();
      CMLSequence.value(at:)(v8);
      OUTLINED_FUNCTION_105();
      ++v8;
      MLDataValue.init(_:)(v1, (uint64_t)v33);
      uint64_t v10 = swift_release();
      char v11 = (void *)v33[0];
      uint64_t v12 = (void *)v33[1];
      char v13 = v34;
      uint64_t v21 = MLDataValue.description.getter(v10, v14, v15, v16, v17, v18, v19, v20);
      uint64_t v23 = v22;
      outlined consume of MLDataValue(v11, v12, v13);
      v24._uint64_t countAndFlagsBits = v21;
      v24._object = v23;
      String.append(_:)(v24);
      swift_bridgeObjectRelease();
      if (v7 == v8) {
        goto LABEL_13;
      }
    }
    __break(1u);
    goto LABEL_20;
  }
LABEL_13:
  swift_retain();
  uint64_t v25 = CMLSequence.size.getter();
  uint64_t v26 = OUTLINED_FUNCTION_12_0(v25);
  swift_retain();
  uint64_t v27 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_12_0(v27);
  OUTLINED_FUNCTION_105();
  if (v1 < 0)
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    uint64_t result = OUTLINED_FUNCTION_1_36();
    __break(1u);
    return result;
  }
  swift_retain();
  uint64_t v28 = CMLSequence.size.getter();
  uint64_t v29 = OUTLINED_FUNCTION_12_0(v28);
  swift_release_n();
  if (v26 < 0 || v29 < v26) {
    goto LABEL_23;
  }
  if (v7 < v26)
  {
    v30._uint64_t countAndFlagsBits = 0x2E2E2E202CLL;
    v30._object = (void *)0xE500000000000000;
    String.append(_:)(v30);
  }
  v31._uint64_t countAndFlagsBits = 93;
  v31._object = (void *)0xE100000000000000;
  String.append(_:)(v31);
  return v35;
}

uint64_t MLDataTable.Row.keys.getter@<X0>(void *a1@<X8>)
{
  return OUTLINED_FUNCTION_4_39(*v1, a1);
}

uint64_t MLDataTable.Row.values.getter@<X0>(void *a1@<X8>)
{
  return OUTLINED_FUNCTION_4_39(*(void *)(v1 + 16), a1);
}

Swift::Int_optional __swiftcall MLDataTable.Row.index(forKey:)(Swift::String forKey)
{
  uint64_t v2 = *(void *)(v1 + 8);
  if (*(void *)(v2 + 16))
  {
    object = forKey._object;
    uint64_t countAndFlagsBits = forKey._countAndFlagsBits;
    swift_bridgeObjectRetain();
    unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(countAndFlagsBits, (uint64_t)object);
    if (v6) {
      Swift::Int v7 = *(void *)(*(void *)(v2 + 56) + 8 * v5);
    }
    else {
      Swift::Int v7 = 0;
    }
    char v8 = v6 ^ 1;
    swift_bridgeObjectRelease();
  }
  else
  {
    Swift::Int v7 = 0;
    char v8 = 1;
  }
  Swift::Bool v9 = v8 & 1;
  Swift::Int v10 = v7;
  result.value = v10;
  result.is_nil = v9;
  return result;
}

uint64_t MLDataTable.Row.Values.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *v2;
  swift_retain();
  CMLSequence.value(at:)(a1);
  OUTLINED_FUNCTION_18_12();

  return MLDataValue.init(_:)(v5, a2);
}

uint64_t MLDataTable.Row.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v8 = *(void *)(v5 + 8);
  if (*(void *)(v8 + 16))
  {
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if (v13)
    {
      uint64_t v14 = *(void *)(*(void *)(v8 + 56) + 8 * v12);
      swift_bridgeObjectRelease();
      swift_retain_n();
      CMLSequence.value(at:)(v14);
      uint64_t v16 = v15;
      swift_release();
      MLDataValue.init(_:)(v16, (uint64_t)&v18);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release_n();
      return (*(uint64_t (**)(long long *, uint64_t, uint64_t))(a4 + 16))(&v18, a3, a4);
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
  }

  return __swift_storeEnumTagSinglePayload(a5, 1, 1, a3);
}

uint64_t static MLDataTable.Row.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a2 + 16);
  swift_retain();
  swift_retain();
  char v4 = specialized Sequence<>.elementsEqual<A>(_:)();
  swift_release();
  swift_release();
  if (v4)
  {
    uint64_t v7 = v3;
    uint64_t v8 = v2;
    char v5 = static MLDataTable.Row.Values.== infix(_:_:)(&v8, &v7);
  }
  else
  {
    char v5 = 0;
  }
  return v5 & 1;
}

uint64_t static MLDataTable.Row.Values.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_retain();
  uint64_t v4 = CMLSequence.size.getter();
  uint64_t v5 = OUTLINED_FUNCTION_12_0(v4);
  swift_retain();
  uint64_t v6 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_12_0(v6);
  OUTLINED_FUNCTION_10_24();
  if (v2 < 0)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  swift_retain();
  uint64_t v7 = CMLSequence.size.getter();
  uint64_t v8 = OUTLINED_FUNCTION_12_0(v7);
  swift_release_n();
  if (v5 < 0 || v8 < v5) {
    goto LABEL_20;
  }
  swift_retain();
  uint64_t v9 = CMLSequence.size.getter();
  uint64_t v10 = OUTLINED_FUNCTION_12_0(v9);
  swift_retain();
  uint64_t v11 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_12_0(v11);
  OUTLINED_FUNCTION_18_12();
  if ((v3 & 0x8000000000000000) == 0)
  {
    swift_retain();
    uint64_t v12 = CMLSequence.size.getter();
    uint64_t v13 = OUTLINED_FUNCTION_12_0(v12);
    swift_release_n();
    if (v10 < 0 || v13 < v10) {
      goto LABEL_22;
    }
    if (v5 == v10)
    {
      swift_retain();
      uint64_t v14 = CMLSequence.size.getter();
      if (OUTLINED_FUNCTION_12_0(v14))
      {
        uint64_t v15 = 0;
        uint64_t v27 = v2;
        while (1)
        {
          swift_retain();
          CMLSequence.value(at:)(v15);
          OUTLINED_FUNCTION_10_24();
          MLDataValue.init(_:)(v2, (uint64_t)&v33);
          uint64_t v16 = v33;
          int v17 = v34;
          char v18 = v35;
          swift_retain();
          uint64_t v19 = CMLSequence.size.getter();
          OUTLINED_FUNCTION_12_0(v19);
          OUTLINED_FUNCTION_10_24();
          if (v15 >= v2) {
            break;
          }
          unint64_t v33 = v16;
          char v34 = v17;
          char v35 = v18;
          swift_retain_n();
          CMLSequence.value(at:)(v15);
          OUTLINED_FUNCTION_18_12();
          MLDataValue.init(_:)(v3, (uint64_t)&v30);
          uint64_t v20 = v3;
          swift_release();
          uint64_t v21 = v30;
          uint64_t v22 = v31;
          char v23 = v32;
          v28[0] = v30;
          v28[1] = v31;
          char v29 = v32;
          char v24 = static MLDataValue.== infix(_:_:)((uint64_t)&v33, (uint64_t)v28);
          outlined consume of MLDataValue(v21, v22, v23);
          outlined consume of MLDataValue(v16, v17, v18);
          if (v24)
          {
            ++v15;
            uint64_t v2 = v27;
            swift_retain();
            uint64_t v25 = CMLSequence.size.getter();
            OUTLINED_FUNCTION_12_0(v25);
            OUTLINED_FUNCTION_10_24();
            uint64_t v3 = v20;
            if (v15 != v27) {
              continue;
            }
          }
          goto LABEL_16;
        }
        __break(1u);
        goto LABEL_19;
      }
      char v24 = 1;
LABEL_16:
      swift_release();
    }
    else
    {
      char v24 = 0;
    }
    return v24 & 1;
  }
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
  uint64_t result = OUTLINED_FUNCTION_1_36();
  __break(1u);
  return result;
}

uint64_t MLDataTable.Row.count.getter()
{
  swift_retain();
  uint64_t v0 = CMLSequence.size.getter();
  uint64_t v1 = OUTLINED_FUNCTION_12_0(v0);
  swift_retain();
  uint64_t v2 = CMLSequence.size.getter();
  uint64_t v3 = OUTLINED_FUNCTION_12_0(v2);
  uint64_t result = swift_release();
  if (v3 < 0)
  {
    __break(1u);
  }
  else
  {
    swift_retain();
    uint64_t v5 = CMLSequence.size.getter();
    uint64_t v6 = OUTLINED_FUNCTION_12_0(v5);
    uint64_t result = swift_release_n();
    if ((v1 & 0x8000000000000000) == 0 && v6 >= v1) {
      return v1;
    }
  }
  __break(1u);
  return result;
}

uint64_t MLDataTable.Row.isEmpty.getter()
{
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain_n();
  uint64_t v0 = CMLSequence.size.getter();
  uint64_t v1 = OUTLINED_FUNCTION_12_0(v0);
  swift_retain();
  uint64_t v2 = CMLSequence.size.getter();
  uint64_t v3 = OUTLINED_FUNCTION_12_0(v2);
  uint64_t result = swift_release();
  if (v3 < 0)
  {
    __break(1u);
  }
  else
  {
    swift_retain();
    uint64_t v5 = CMLSequence.size.getter();
    uint64_t v6 = OUTLINED_FUNCTION_12_0(v5);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release_n();
    if ((v1 & 0x8000000000000000) == 0 && v6 >= v1) {
      return v1 == 0;
    }
  }
  __break(1u);
  return result;
}

uint64_t MLDataTable.Row.startIndex.getter()
{
  return 0;
}

uint64_t MLDataTable.Row.endIndex.getter()
{
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain_n();
  uint64_t v0 = CMLSequence.size.getter();
  uint64_t v1 = OUTLINED_FUNCTION_12_0(v0);
  swift_retain();
  uint64_t v2 = CMLSequence.size.getter();
  uint64_t v3 = OUTLINED_FUNCTION_12_0(v2);
  uint64_t result = swift_release();
  if (v3 < 0)
  {
    __break(1u);
  }
  else
  {
    swift_retain();
    uint64_t v5 = CMLSequence.size.getter();
    uint64_t v6 = OUTLINED_FUNCTION_12_0(v5);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release_n();
    if ((v1 & 0x8000000000000000) == 0 && v6 >= v1) {
      return v1;
    }
  }
  __break(1u);
  return result;
}

Swift::Int __swiftcall MLDataTable.Row.index(after:)(Swift::Int after)
{
  BOOL v1 = __OFADD__(after, 1);
  Swift::Int result = after + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

uint64_t MLDataTable.Row.subscript.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = MLDataTable.ColumnNames.subscript.getter(a2);
  swift_retain();
  CMLSequence.value(at:)(a2);
  MLDataValue.init(_:)(v5, a1);
  swift_release();
  return v4;
}

uint64_t protocol witness for Collection.endIndex.getter in conformance MLDataTable.Row@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = MLDataTable.Row.endIndex.getter();
  *a1 = result;
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance MLDataTable.Row(void *a1, uint64_t *a2))(uint64_t a1)
{
  uint64_t v4 = malloc(0x68uLL);
  *a1 = v4;
  uint64_t v5 = MLDataTable.Row.subscript.getter((uint64_t)v4 + 16, *a2);
  *((void *)v4 + 5) = v5;
  *(void *)uint64_t v4 = v5;
  *((void *)v4 + 1) = v6;
  uint64_t v7 = (void *)*((void *)v4 + 2);
  uint64_t v8 = (void *)*((void *)v4 + 3);
  *((void *)v4 + 10) = v6;
  *((void *)v4 + 11) = v7;
  *((void *)v4 + 12) = v8;
  char v9 = *((unsigned char *)v4 + 32);
  *((unsigned char *)v4 + 33) = v9;
  *((void *)v4 + 6) = v6;
  *((void *)v4 + 7) = v7;
  *((void *)v4 + 8) = v8;
  *((unsigned char *)v4 + 72) = v9;
  swift_bridgeObjectRetain();
  outlined copy of MLDataValue(v7, v8, v9);
  return protocol witness for Collection.subscript.read in conformance MLDataTable.Row;
}

void protocol witness for Collection.subscript.read in conformance MLDataTable.Row(uint64_t a1)
{
  BOOL v1 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 88);
  uint64_t v2 = *(void **)(*(void *)a1 + 96);
  uint64_t v4 = *(void **)(*(void *)a1 + 56);
  uint64_t v5 = *(void **)(*(void *)a1 + 64);
  char v6 = *(unsigned char *)(*(void *)a1 + 72);
  char v7 = *(unsigned char *)(*(void *)a1 + 33);
  swift_bridgeObjectRelease();
  outlined consume of MLDataValue(v4, v5, v6);
  swift_bridgeObjectRelease();
  outlined consume of MLDataValue(v3, v2, v7);

  free(v1);
}

uint64_t protocol witness for Collection.subscript.getter in conformance MLDataTable.Row@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return specialized Collection<>.subscript.getter(*a1, a1[1], *v2, v2[1], v2[2], a2);
}

uint64_t protocol witness for Collection.indices.getter in conformance MLDataTable.Row@<X0>(void *a1@<X8>)
{
  return specialized Collection<>.indices.getter(*v1, v1[1], v1[2], a1);
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance MLDataTable.Row@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = specialized Collection.index(_:offsetBy:)(*a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance MLDataTable.Row@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = specialized Collection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t protocol witness for Collection.distance(from:to:) in conformance MLDataTable.Row(uint64_t *a1, uint64_t *a2)
{
  return specialized Collection.distance(from:to:)(*a1, *a2);
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance MLDataTable.Row(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance MLDataTable.Row(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))specialized Collection._failEarlyRangeCheck(_:bounds:));
}

{
  return protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance MLDataTable.Row(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))specialized Collection._failEarlyRangeCheck(_:bounds:));
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance MLDataTable.Row(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void, void, void, void))
{
  return a5(*a1, *a2, a2[1], *v5, v5[1], v5[2]);
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance MLDataTable.Row(uint64_t *a1, uint64_t *a2)
{
  return specialized Collection._failEarlyRangeCheck(_:bounds:)(*a1, a1[1], *a2, a2[1]);
}

Swift::Int protocol witness for Collection.index(after:) in conformance MLDataTable.Row@<X0>(Swift::Int *a1@<X0>, Swift::Int *a2@<X8>)
{
  Swift::Int result = MLDataTable.Row.index(after:)(*a1);
  *a2 = result;
  return result;
}

void *protocol witness for Collection.formIndex(after:) in conformance MLDataTable.Row(void *result)
{
  if (__OFADD__(*result, 1)) {
    __break(1u);
  }
  else {
    ++*result;
  }
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance MLDataTable.Row@<Q0>(__n128 *a1@<X8>)
{
  unint64_t v2 = v1[1].n128_u64[0];
  __n128 result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = v2;
  a1[1].n128_u64[1] = 0;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance MLDataTable.Row()
{
  return specialized Collection.underestimatedCount.getter();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance MLDataTable.Row()
{
  return specialized Collection._copyToContiguousArray()(*v0, v0[1], v0[2]);
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance MLDataTable.Row(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copyContents(initializing:)(a1, a2, a3, *v3, v3[1], v3[2]);
}

uint64_t MLDataTable.Row.description.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[2];
  uint64_t v41 = 91;
  unint64_t v42 = 0xE100000000000000;
  uint64_t v39 = v1;
  uint64_t v40 = 0;
  swift_retain_n();
  uint64_t v3 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_12_0(v3);
  OUTLINED_FUNCTION_105();
  if (v1)
  {
    uint64_t v4 = 0;
    uint64_t v35 = v1;
    while (1)
    {
      uint64_t v5 = MLDataTable.ColumnNames.subscript.getter(v4);
      char v7 = v6;
      swift_retain();
      uint64_t v8 = CMLSequence.size.getter();
      OUTLINED_FUNCTION_12_0(v8);
      OUTLINED_FUNCTION_105();
      if (v4 >= v1) {
        break;
      }
      uint64_t v36 = 34;
      unint64_t v37 = 0xE100000000000000;
      v9._uint64_t countAndFlagsBits = v5;
      v9._object = v7;
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v10._uint64_t countAndFlagsBits = 540680226;
      v10._object = (void *)0xE400000000000000;
      String.append(_:)(v10);
      swift_bridgeObjectRelease();
      uint64_t v11 = v36;
      uint64_t v12 = (void *)v37;
      swift_retain_n();
      CMLSequence.value(at:)(v4);
      OUTLINED_FUNCTION_18_12();
      MLDataValue.init(_:)(v2, (uint64_t)&v36);
      uint64_t v13 = v2;
      uint64_t v14 = swift_release();
      uint64_t v15 = (void *)v36;
      uint64_t v16 = (void *)v37;
      char v17 = v38;
      uint64_t v25 = MLDataValue.description.getter(v14, v18, v19, v20, v21, v22, v23, v24);
      uint64_t v27 = v26;
      outlined consume of MLDataValue(v15, v16, v17);
      swift_bridgeObjectRetain();
      v28._uint64_t countAndFlagsBits = v25;
      v28._object = v27;
      String.append(_:)(v28);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v29._uint64_t countAndFlagsBits = v11;
      v29._object = v12;
      String.append(_:)(v29);
      swift_bridgeObjectRelease();
      uint64_t v1 = v35;
      swift_retain();
      uint64_t v30 = CMLSequence.size.getter();
      OUTLINED_FUNCTION_12_0(v30);
      OUTLINED_FUNCTION_105();
      if (__OFSUB__(v35, 1)) {
        goto LABEL_11;
      }
      if (v4 < v35 - 1)
      {
        v31._uint64_t countAndFlagsBits = 8236;
        v31._object = (void *)0xE200000000000000;
        String.append(_:)(v31);
      }
      ++v4;
      swift_retain();
      uint64_t v32 = CMLSequence.size.getter();
      OUTLINED_FUNCTION_12_0(v32);
      OUTLINED_FUNCTION_105();
      uint64_t v2 = v13;
      if (v4 == v35) {
        goto LABEL_9;
      }
    }
    __break(1u);
LABEL_11:
    __break(1u);
    uint64_t result = swift_unexpectedError();
    __break(1u);
  }
  else
  {
LABEL_9:
    swift_release();
    v33._uint64_t countAndFlagsBits = 93;
    v33._object = (void *)0xE100000000000000;
    String.append(_:)(v33);
    return v41;
  }
  return result;
}

uint64_t MLDataTable.Row.debugDescription.getter()
{
  return OUTLINED_FUNCTION_5_34();
}

uint64_t MLDataTable.Row.playgroundDescription.getter@<X0>(void *a1@<X8>)
{
  OUTLINED_FUNCTION_5_34();
  id v2 = objc_allocWithZone(MEMORY[0x263F086A0]);
  id v3 = OUTLINED_FUNCTION_6_32();
  uint64_t result = type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  a1[3] = result;
  *a1 = v3;
  return result;
}

uint64_t MLDataTable.Row.Values.startIndex.getter()
{
  return 0;
}

uint64_t MLDataTable.Row.Values.endIndex.getter()
{
  swift_retain();
  uint64_t v0 = CMLSequence.size.getter();
  uint64_t v1 = OUTLINED_FUNCTION_12_0(v0);
  swift_release();
  return v1;
}

uint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance MLDataTable.Row.Values(uint64_t *result)
{
  uint64_t v1 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else
  {
    id v2 = result;
    swift_retain();
    uint64_t v3 = CMLSequence.size.getter();
    uint64_t v4 = specialized RandomAccessCollection<>.distance(from:to:)(0, v3);
    uint64_t result = (uint64_t *)swift_release();
    if ((v1 & 0x8000000000000000) == 0 && v1 < v4)
    {
      *id v2 = v1;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance MLDataTable.Row.Values(void *a1, void *a2)
{
  return specialized RandomAccessCollection<>.distance(from:to:)(*a1, *a2, *v2);
}

uint64_t protocol witness for Collection.endIndex.getter in conformance MLDataTable.Row.Values@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = MLDataTable.Row.Values.endIndex.getter();
  *a1 = result;
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance MLDataTable.Row.Values(uint64_t a1, uint64_t *a2))(uint64_t a1)
{
  return protocol witness for Collection.subscript.read in conformance MLDataValue.SequenceType;
}

uint64_t protocol witness for Collection.count.getter in conformance MLDataTable.Row.Values()
{
  return specialized Collection.count.getter(*v0);
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance MLDataTable.Row.Values(void *a1, void *a2)
{
  return specialized Collection._failEarlyRangeCheck(_:bounds:)(*a1, a1[1], *a2, a2[1], *v2);
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance MLDataTable.Row.Values(uint64_t *a1)
{
  uint64_t v2 = *a1;
  swift_retain();
  uint64_t v3 = CMLSequence.size.getter();
  uint64_t v4 = OUTLINED_FUNCTION_12_0(v3);
  uint64_t result = swift_release();
  if (v2 < 0 || v2 >= v4) {
    __break(1u);
  }
  else {
    *a1 = v2 + 1;
  }
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance MLDataTable.Row.Values()
{
  return specialized Collection._copyToContiguousArray()();
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance MLDataTable.Row.Values(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copyContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t MLDataTable.Row.Values.debugDescription.getter()
{
  return MLDataTable.Row.Values.description.getter();
}

uint64_t MLDataTable.Row.Values.playgroundDescription.getter@<X0>(void *a1@<X8>)
{
  MLDataTable.Row.Values.description.getter();
  id v2 = objc_allocWithZone(MEMORY[0x263F086A0]);
  id v3 = OUTLINED_FUNCTION_6_32();
  uint64_t result = type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  a1[3] = result;
  *a1 = v3;
  return result;
}

unint64_t lazy protocol witness table accessor for type MLDataTable.Row and conformance MLDataTable.Row()
{
  unint64_t result = lazy protocol witness table cache variable for type MLDataTable.Row and conformance MLDataTable.Row;
  if (!lazy protocol witness table cache variable for type MLDataTable.Row and conformance MLDataTable.Row)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLDataTable.Row and conformance MLDataTable.Row);
  }
  return result;
}

unint64_t associated type witness table accessor for Collection.Indices : Collection in MLDataTable.Row()
{
  return lazy protocol witness table accessor for type Slice<MLDataValue.SequenceType> and conformance Slice<A>((uint64_t)&lazy protocol witness table cache variable for type DefaultIndices<MLDataTable.Row> and conformance DefaultIndices<A>);
}

unint64_t associated type witness table accessor for Collection.SubSequence : Collection in MLDataTable.Row()
{
  return lazy protocol witness table accessor for type Slice<MLDataValue.SequenceType> and conformance Slice<A>((uint64_t)&lazy protocol witness table cache variable for type Slice<MLDataTable.Row> and conformance Slice<A>);
}

unint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in MLDataTable.Row()
{
  return lazy protocol witness table accessor for type Slice<MLDataValue.SequenceType> and conformance Slice<A>((uint64_t)&lazy protocol witness table cache variable for type IndexingIterator<MLDataTable.Row> and conformance IndexingIterator<A>);
}

unint64_t lazy protocol witness table accessor for type MLDataTable.Row.Values and conformance MLDataTable.Row.Values()
{
  unint64_t result = lazy protocol witness table cache variable for type MLDataTable.Row.Values and conformance MLDataTable.Row.Values;
  if (!lazy protocol witness table cache variable for type MLDataTable.Row.Values and conformance MLDataTable.Row.Values)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLDataTable.Row.Values and conformance MLDataTable.Row.Values);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MLDataTable.Row.Values and conformance MLDataTable.Row.Values;
  if (!lazy protocol witness table cache variable for type MLDataTable.Row.Values and conformance MLDataTable.Row.Values)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLDataTable.Row.Values and conformance MLDataTable.Row.Values);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MLDataTable.Row.Values and conformance MLDataTable.Row.Values;
  if (!lazy protocol witness table cache variable for type MLDataTable.Row.Values and conformance MLDataTable.Row.Values)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLDataTable.Row.Values and conformance MLDataTable.Row.Values);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MLDataTable.Row.Values and conformance MLDataTable.Row.Values;
  if (!lazy protocol witness table cache variable for type MLDataTable.Row.Values and conformance MLDataTable.Row.Values)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLDataTable.Row.Values and conformance MLDataTable.Row.Values);
  }
  return result;
}

unint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in MLDataTable.Row.Values()
{
  return lazy protocol witness table accessor for type Slice<MLDataTable.Row.Values> and conformance <> Slice<A>((uint64_t)&lazy protocol witness table cache variable for type Slice<MLDataTable.Row.Values> and conformance <> Slice<A>);
}

unint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in MLDataTable.Row.Values()
{
  return lazy protocol witness table accessor for type Slice<MLDataTable.Row.Values> and conformance <> Slice<A>((uint64_t)&lazy protocol witness table cache variable for type Slice<MLDataTable.Row.Values> and conformance <> Slice<A>);
}

unint64_t lazy protocol witness table accessor for type Slice<MLDataTable.Row.Values> and conformance <> Slice<A>(uint64_t a1)
{
  unint64_t result = OUTLINED_FUNCTION_17_14(a1);
  if (!result)
  {
    uint64_t v4 = v3;
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Slice<MLDataTable.Row.Values>);
    v4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

unint64_t associated type witness table accessor for Collection.SubSequence : Collection in MLDataTable.Row.Values()
{
  return lazy protocol witness table accessor for type Slice<MLDataValue.SequenceType> and conformance Slice<A>((uint64_t)&lazy protocol witness table cache variable for type Slice<MLDataTable.Row.Values> and conformance Slice<A>);
}

unint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in MLDataTable.Row.Values()
{
  return lazy protocol witness table accessor for type Slice<MLDataValue.SequenceType> and conformance Slice<A>((uint64_t)&lazy protocol witness table cache variable for type IndexingIterator<MLDataTable.Row.Values> and conformance IndexingIterator<A>);
}

uint64_t destroy for MLDataTable.Row()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_release();
}

void *initializeBufferWithCopyOfBuffer for MLDataTable.Row(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void *assignWithCopy for MLDataTable.Row(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for MLDataTable.Row(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for MLDataTable.Row()
{
  return &type metadata for MLDataTable.Row;
}

ValueMetadata *type metadata accessor for MLDataTable.Row.Values()
{
  return &type metadata for MLDataTable.Row.Values;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, unint64_t a2, char a3)
{
  Hasher.init(_seed:)();
  MLDataValue.hash(into:)();
  Swift::Int v6 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, a3, v6);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unsigned int a1)
{
  uint64_t v3 = MEMORY[0x22A675820](*(void *)(v1 + 40), a1, 4);

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)()
{
  OUTLINED_FUNCTION_3_41();
  type metadata accessor for MetricsKey();
  uint64_t v1 = MEMORY[0x263F042E0];
  lazy protocol witness table accessor for type MetricsKey and conformance MetricsKey((uint64_t)&lazy protocol witness table cache variable for type MetricsKey and conformance MetricsKey);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v0, v2, MEMORY[0x263F042E0], (uint64_t)&lazy protocol witness table cache variable for type MetricsKey and conformance MetricsKey, v1, MEMORY[0x263F042F0]);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t vars8;

  OUTLINED_FUNCTION_3_41();
  type metadata accessor for CodingUserInfoKey();
  uint64_t v1 = dispatch thunk of Hashable._rawHashValue(seed:)();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v0, v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_3_41();
  type metadata accessor for URL();
  uint64_t v1 = MEMORY[0x263F06EA8];
  lazy protocol witness table accessor for type MetricsKey and conformance MetricsKey((uint64_t)&lazy protocol witness table cache variable for type URL and conformance URL);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v0, v2, MEMORY[0x263F06EA8], (uint64_t)&lazy protocol witness table cache variable for type URL and conformance URL, v1, MEMORY[0x263F06EC0]);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(char a1)
{
  Hasher.init(_seed:)();
  specialized RawRepresentable<>.hash(into:)((uint64_t)v4, a1);
  Swift::Int v2 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_11_25();
  String.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v2;
  uint64_t vars8;

  Swift::Int v2 = static Hasher._hash(seed:_:)();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  uint64_t vars8;

  Swift::Int v2 = v1;
  uint64_t v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, unint64_t a2, char a3, uint64_t a4)
{
  uint64_t v5 = v4 + 64;
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v7 = a4 & ~v6;
  if ((*(void *)(v4 + 64 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7))
  {
    uint64_t v8 = v4;
    uint64_t v12 = ~v6;
    BOOL v14 = a3 == 6 && (a2 | a1) == 0;
    BOOL v29 = v14;
    while (2)
    {
      uint64_t v15 = *(void *)(v8 + 48) + 24 * v7;
      uint64_t v16 = *(uint64_t *)v15;
      id v17 = *(id *)(v15 + 8);
      char v18 = *(unsigned char *)(v15 + 16);
      switch(v18)
      {
        case 1:
          if (a3 != 1) {
            goto LABEL_36;
          }
          outlined consume of MLDataValue((void *)v16, v17, 1);
          outlined consume of MLDataValue((void *)a1, (id)a2, 1);
          if (*(double *)&v16 != *(double *)&a1) {
            goto LABEL_37;
          }
          return v7;
        case 2:
          if (a3 != 2)
          {
            outlined copy of MLDataValue((id)v16, v17, 2);
            swift_bridgeObjectRetain();
            goto LABEL_36;
          }
          if (v16 != a1 || v17 != (id)a2)
          {
            char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
            outlined copy of MLDataValue((id)a1, (id)a2, 2);
            outlined copy of MLDataValue((id)v16, v17, 2);
            outlined consume of MLDataValue((void *)v16, v17, 2);
            int v20 = (void *)a1;
            id v21 = (id)a2;
            char v22 = 2;
            goto LABEL_28;
          }
          outlined copy of MLDataValue((id)a1, (id)a2, 2);
          outlined copy of MLDataValue((id)a1, (id)a2, 2);
          outlined consume of MLDataValue((void *)a1, (id)a2, 2);
          uint64_t v25 = (void *)a1;
          id v26 = (id)a2;
          char v27 = 2;
          goto LABEL_40;
        case 3:
          if (a3 == 3)
          {
            uint64_t v30 = a1;
            uint64_t v31 = v16;
            outlined copy of MLDataValue((id)v16, v17, 3);
            outlined copy of MLDataValue((id)a1, (id)a2, 3);
            outlined copy of MLDataValue((id)v16, v17, 3);
            outlined copy of MLDataValue((id)a1, (id)a2, 3);
            outlined copy of MLDataValue((id)v16, v17, 3);
            char v19 = static MLDataValue.SequenceType.== infix(_:_:)(&v31, &v30);
            outlined consume of MLDataValue((void *)v16, v17, 3);
            outlined consume of MLDataValue((void *)a1, (id)a2, 3);
            outlined consume of MLDataValue((void *)a1, (id)a2, 3);
            outlined consume of MLDataValue((void *)v16, v17, 3);
            int v20 = (void *)v16;
            id v21 = v17;
            char v22 = 3;
            goto LABEL_28;
          }
          swift_retain_n();
          goto LABEL_36;
        case 4:
          if (a3 == 4)
          {
            outlined copy of MLDataValue((id)v16, v17, 4);
            outlined copy of MLDataValue((id)a1, (id)a2, 4);
            outlined copy of MLDataValue((id)v16, v17, 4);
            outlined copy of MLDataValue((id)a1, (id)a2, 4);
            outlined copy of MLDataValue((id)v16, v17, 4);
            char v19 = specialized static Dictionary<>.== infix(_:_:)(v16, a1);
            outlined consume of MLDataValue((void *)v16, v17, 4);
            outlined consume of MLDataValue((void *)a1, (id)a2, 4);
            outlined consume of MLDataValue((void *)a1, (id)a2, 4);
            outlined consume of MLDataValue((void *)v16, v17, 4);
            int v20 = (void *)v16;
            id v21 = v17;
            char v22 = 4;
            goto LABEL_28;
          }
          swift_bridgeObjectRetain_n();
          goto LABEL_36;
        case 5:
          if (a3 == 5)
          {
            type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
            outlined copy of MLDataValue((id)v16, v17, 5);
            outlined copy of MLDataValue((id)a1, (id)a2, 5);
            outlined copy of MLDataValue((id)v16, v17, 5);
            outlined copy of MLDataValue((id)a1, (id)a2, 5);
            outlined copy of MLDataValue((id)v16, v17, 5);
            char v19 = static NSObject.== infix(_:_:)();
            outlined consume of MLDataValue((void *)v16, v17, 5);
            outlined consume of MLDataValue((void *)a1, (id)a2, 5);
            outlined consume of MLDataValue((void *)a1, (id)a2, 5);
            outlined consume of MLDataValue((void *)v16, v17, 5);
            int v20 = (void *)v16;
            id v21 = v17;
            char v22 = 5;
LABEL_28:
            outlined consume of MLDataValue(v20, v21, v22);
            if (v19) {
              return v7;
            }
          }
          else
          {
            id v24 = (id)v16;
LABEL_36:
            outlined copy of MLDataValue((id)a1, (id)a2, a3);
            outlined consume of MLDataValue((void *)v16, v17, v18);
            outlined consume of MLDataValue((void *)a1, (id)a2, a3);
            outlined consume of MLDataValue((void *)v16, v17, v18);
          }
LABEL_37:
          unint64_t v7 = (v7 + 1) & v12;
          if (((*(void *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
            return v7;
          }
          continue;
        case 6:
          if (!v29) {
            goto LABEL_36;
          }
          outlined consume of MLDataValue((void *)v16, v17, 6);
          uint64_t v25 = 0;
          id v26 = 0;
          char v27 = 6;
LABEL_40:
          outlined consume of MLDataValue(v25, v26, v27);
          return v7;
        default:
          if (a3) {
            goto LABEL_36;
          }
          outlined consume of MLDataValue(*(void **)v15, *(id *)(v15 + 8), 0);
          outlined consume of MLDataValue((void *)a1, (id)a2, 0);
          if (v16 == a1) {
            return v7;
          }
          goto LABEL_37;
      }
    }
  }
  return v7;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(int a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(_DWORD *)(v7 + 4 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(_DWORD *)(v7 + 4 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = a1;
  uint64_t v4 = type metadata accessor for CodingUserInfoKey();
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = v2;
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v9 = a2 & ~v8;
  uint64_t v20 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v11 = v5 + 16;
    uint64_t v12 = v13;
    uint64_t v14 = *(void *)(v11 + 56);
    uint64_t v15 = (void (**)(char *, uint64_t))(v11 - 8);
    do
    {
      uint64_t v16 = v11;
      v12(v7, *(void *)(v22 + 48) + v14 * v9, v4);
      char v17 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v15)(v7, v4);
      if (v17) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
      uint64_t v11 = v16;
    }
    while (((*(void *)(v20 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    uint64_t v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      uint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
            break;
          }
          char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            uint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  unsigned char v9[40];

  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v6 = ~v3;
    do
    {
      outlined init with copy of AnyHashable(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      uint64_t v7 = MEMORY[0x22A6752B0](v9, a1);
      outlined destroy of AnyHashable((uint64_t)v9);
      if (v7) {
        break;
      }
      uint64_t v4 = (v4 + 1) & v6;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    uint64_t v6 = a1;
    while (1)
    {
      unint64_t v7 = 0xE400000000000000;
      unint64_t v8 = 1936945004;
      switch(*(unsigned char *)(*(void *)(v2 + 48) + v4))
      {
        case 1:
          unint64_t v8 = 0x4C746E65746E6F63;
          unint64_t v7 = 0xEB0000000073736FLL;
          break;
        case 2:
          unint64_t v8 = 0x736F4C656C797473;
          unint64_t v7 = 0xE900000000000073;
          break;
        case 3:
          unint64_t v7 = 0xE800000000000000;
          unint64_t v8 = 0x7963617275636361;
          break;
        case 4:
          unint64_t v8 = 0x69746164696C6176;
          unint64_t v7 = 0xEE0073736F4C6E6FLL;
          break;
        case 5:
          unint64_t v8 = 0xD000000000000012;
          unint64_t v9 = "accuracy";
          goto LABEL_13;
        case 6:
          unint64_t v7 = 0x80000002272D3CF0;
          unint64_t v8 = 0xD000000000000010;
          break;
        case 7:
          unint64_t v8 = 0xD000000000000014;
          unint64_t v9 = "stylizedImageURL";
          goto LABEL_13;
        case 8:
          unint64_t v8 = 0x456D756D6978616DLL;
          unint64_t v7 = 0xEC000000726F7272;
          break;
        case 9:
          unint64_t v8 = 0xD00000000000001ELL;
          unint64_t v9 = "rror";
LABEL_13:
          unint64_t v7 = (unint64_t)v9 | 0x8000000000000000;
          break;
        case 0xA:
          unint64_t v8 = 0xD000000000000016;
          unint64_t v7 = 0x80000002272D3D60;
          break;
        default:
          break;
      }
      unint64_t v10 = 0xE400000000000000;
      unint64_t v11 = 1936945004;
      switch(v6)
      {
        case 1:
          unint64_t v11 = 0x4C746E65746E6F63;
          unint64_t v10 = 0xEB0000000073736FLL;
          break;
        case 2:
          unint64_t v11 = 0x736F4C656C797473;
          unint64_t v10 = 0xE900000000000073;
          break;
        case 3:
          unint64_t v10 = 0xE800000000000000;
          unint64_t v11 = 0x7963617275636361;
          break;
        case 4:
          unint64_t v11 = 0x69746164696C6176;
          unint64_t v10 = 0xEE0073736F4C6E6FLL;
          break;
        case 5:
          unint64_t v11 = 0xD000000000000012;
          uint64_t v12 = "accuracy";
          goto LABEL_25;
        case 6:
          unint64_t v10 = 0x80000002272D3CF0;
          unint64_t v11 = 0xD000000000000010;
          break;
        case 7:
          unint64_t v11 = 0xD000000000000014;
          uint64_t v12 = "stylizedImageURL";
          goto LABEL_25;
        case 8:
          unint64_t v11 = 0x456D756D6978616DLL;
          unint64_t v10 = 0xEC000000726F7272;
          break;
        case 9:
          unint64_t v11 = 0xD00000000000001ELL;
          uint64_t v12 = "rror";
LABEL_25:
          unint64_t v10 = (unint64_t)v12 | 0x8000000000000000;
          break;
        case 10:
          unint64_t v11 = 0xD000000000000016;
          unint64_t v10 = 0x80000002272D3D60;
          break;
        default:
          break;
      }
      if (v8 == v11 && v7 == v10) {
        break;
      }
      char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v14 & 1) == 0)
      {
        unint64_t v4 = (v4 + 1) & v5;
        if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4)) {
          continue;
        }
      }
      return v4;
    }
    swift_bridgeObjectRelease_n();
  }
  return v4;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v24 = a5;
  uint64_t v25 = a6;
  uint64_t v23 = a4;
  v21[1] = a1;
  uint64_t v8 = a3(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  unint64_t v11 = (char *)v21 - v10;
  uint64_t v22 = v6;
  uint64_t v12 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v13 = a2 & ~v12;
  v21[0] = v6 + 64;
  if ((*(void *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v14 = ~v12;
    char v17 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    uint64_t v16 = v9 + 16;
    uint64_t v15 = v17;
    uint64_t v18 = *(void *)(v16 + 56);
    do
    {
      v15(v11, *(void *)(v22 + 48) + v18 * v13, v8);
      lazy protocol witness table accessor for type MetricsKey and conformance MetricsKey(v23);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v16 - 8))(v11, v8);
      if (v19) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v14;
    }
    while (((*(void *)(v21[0] + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
  }
  return v13;
}

unint64_t lazy protocol witness table accessor for type MetricsKey and conformance MetricsKey(uint64_t a1)
{
  unint64_t result = OUTLINED_FUNCTION_17_14(a1);
  if (!result)
  {
    v3(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_1_36()
{
  return swift_unexpectedError();
}

uint64_t OUTLINED_FUNCTION_3_41()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_4_39@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = a1;
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_5_34()
{
  return MLDataTable.Row.description.getter();
}

id OUTLINED_FUNCTION_6_32()
{
  return @nonobjc NSAttributedString.init(string:attributes:)(v0, v1, 0);
}

uint64_t OUTLINED_FUNCTION_7_30(uint64_t a1)
{
  uint64_t v4 = *(void *)(v2 + 56) + 32 * a1;
  return outlined init with copy of Any(v4, v1);
}

uint64_t OUTLINED_FUNCTION_10_24()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_11_25()
{
  return Hasher.init(_seed:)();
}

uint64_t MLHandActionClassifier.init(trainingFeatures:validationFeatures:parameters:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  *(void *)(v4 + 48) = a1;
  *(void *)(v4 + 56) = a4;
  uint64_t v5 = *a2;
  *(unsigned char *)(v4 + 25) = *((unsigned char *)a2 + 8);
  uint64_t v6 = *a3;
  *(void *)(v4 + 64) = v5;
  *(void *)(v4 + 72) = v6;
  *(unsigned char *)(v4 + 26) = *((unsigned char *)a3 + 8);
  return MEMORY[0x270FA2498](MLHandActionClassifier.init(trainingFeatures:validationFeatures:parameters:), 0, 0);
}

uint64_t MLHandActionClassifier.init(trainingFeatures:validationFeatures:parameters:)()
{
  uint64_t v41 = v0;
  char v1 = *(unsigned char *)(v0 + 26);
  char v2 = *(unsigned char *)(v0 + 25);
  uint64_t v3 = *(void **)(v0 + 64);
  uint64_t v4 = *(void *)(v0 + 72);
  uint64_t v6 = *(uint64_t **)(v0 + 48);
  uint64_t v5 = *(void *)(v0 + 56);
  v6[2] = (uint64_t)objc_msgSend(objc_allocWithZone(MEMORY[0x263F00D80]), sel_init);
  uint64_t v7 = type metadata accessor for MLHandActionClassifier();
  MLClassifierMetrics.init()(v7, v8, v9, v10, v11, v12, v13, v14, (uint64_t)v30, v31, (uint64_t)v32, v33, v34, v35, v36, v37, v38, v39, v40,
    v41);
  MLClassifierMetrics.init()(v15, v16, v17, v18, v19, v20, v21, v22, (uint64_t)v30, v31, (uint64_t)v32, v33, v34, v35, v36, v37, v38, v39, v40,
    v41);
  _s8CreateML27MLTrainingSessionParametersVWOcTm_4(v5, (uint64_t)v6 + *(int *)(v7 + 28), (void (*)(void))type metadata accessor for MLHandActionClassifier.ModelParameters);
  outlined copy of Result<_DataTable, Error>(v3, v2);
  OUTLINED_FUNCTION_25_15();
  specialized MLDataTable.subscript.getter(v2, v23);
  OUTLINED_FUNCTION_47_12();
  id v24 = v32;
  char v25 = v33;
  specialized MLDataColumn.dropDuplicates()(v32, v33, (uint64_t)&v30);
  outlined consume of Result<_DataTable, Error>(v24, v25);
  uint64_t *v6 = specialized Array<A>.init(_:)(v30, v31);
  uint64_t v26 = type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  *(void *)(v0 + 80) = v26;
  *(_DWORD *)(v0 + 28) = *(_DWORD *)(v26 + 28);
  type metadata accessor for MLHandActionClassifier.GraphCNN(0);
  swift_allocObject();
  swift_bridgeObjectRetain();
  MLHandActionClassifier.GraphCNN.init(classLabels:export:numOfKeypoints:numOfKeypointsChannels:windowSize:)();
  v6[1] = v27;
  *(void *)(v0 + 16) = v3;
  *(unsigned char *)(v0 + 24) = v2;
  *(void *)(v0 + 32) = v4;
  *(unsigned char *)(v0 + 40) = v1;
  Swift::String v28 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v28;
  *Swift::String v28 = v0;
  v28[1] = MLHandActionClassifier.init(trainingFeatures:validationFeatures:parameters:);
  return MLHandActionClassifier.runTrainingLoop(trainingData:validationData:loadPretrain:)((uint64_t *)(v0 + 16), v0 + 32);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  OUTLINED_FUNCTION_2();
  char v2 = *v1;
  OUTLINED_FUNCTION_6();
  *uint64_t v3 = v2;
  *(void *)(v4 + 96) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_12();
  if (v0) {
    uint64_t v5 = MLHandActionClassifier.init(trainingFeatures:validationFeatures:parameters:);
  }
  else {
    uint64_t v5 = MLHandActionClassifier.init(trainingFeatures:validationFeatures:parameters:);
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  char v6;
  id v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t (*v16)(void);
  id v18;
  char v19;
  void *v20;
  char v21;
  void *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;

  id v24 = v0;
  if (AnalyticsReporter.init()())
  {
    outlined destroy of MLHandActionClassifier.ModelParameters(*(void *)(v0 + 56), (void (*)(void))type metadata accessor for MLHandActionClassifier.ModelParameters);
    OUTLINED_FUNCTION_47_12();
  }
  else
  {
    char v1 = MLDataTable.size.getter();
    OUTLINED_FUNCTION_29_16((uint64_t)"Number of Frames", (float)v1);
    char v2 = OUTLINED_FUNCTION_25_15();
    MLDataTable.subscript.getter(v2, v3, v4);
    OUTLINED_FUNCTION_47_12();
    uint64_t v5 = v20;
    uint64_t v6 = v21;
    uint64_t v22 = v20;
    uint64_t v23 = v21;
    MLUntypedColumn.dropDuplicates()(&v18);
    outlined consume of Result<_DataTable, Error>(v5, v6);
    uint64_t v7 = v18;
    if (v19)
    {
      outlined consume of Result<_DataTable, Error>(v18, 1);
      uint64_t v8 = -1.0;
    }
    else
    {
      swift_retain();
      uint64_t v9 = CMLColumn.size.getter();
      outlined consume of Result<_DataTable, Error>(v7, 0);
      outlined consume of Result<_DataTable, Error>(v7, 0);
      uint64_t v8 = (float)v9;
    }
    uint64_t v10 = *(int *)(v0 + 28);
    uint64_t v11 = *(void *)(v0 + 80);
    uint64_t v12 = *(void *)(v0 + 56);
    OUTLINED_FUNCTION_29_16((uint64_t)"Number of Labels", v8);
    v13._uint64_t countAndFlagsBits = 0x726574492078614DLL;
    v13._object = (void *)0xEE00736E6F697461;
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_handActionClassifier, v13, (float)*(uint64_t *)(v12 + *(int *)(v11 + 24)));
    v14._uint64_t countAndFlagsBits = 0xD000000000000016;
    v14._object = (void *)0x80000002272D8510;
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_handActionClassifier, v14, (float)*(uint64_t *)(v12 + v10));
    v15._uint64_t countAndFlagsBits = 0x6953206863746142;
    v15._object = (void *)0xEA0000000000657ALL;
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_handActionClassifier, v15, (float)*(uint64_t *)(v12 + *(int *)(v11 + 20)));
    outlined destroy of MLHandActionClassifier.ModelParameters(v12, (void (*)(void))type metadata accessor for MLHandActionClassifier.ModelParameters);
  }
  uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
  return v16();
}

{
  uint64_t v0;
  char v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  char v1 = *(unsigned char *)(v0 + 25);
  char v2 = *(void **)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 48);
  outlined destroy of MLHandActionClassifier.ModelParameters(*(void *)(v0 + 56), (void (*)(void))type metadata accessor for MLHandActionClassifier.ModelParameters);
  outlined consume of Result<_DataTable, Error>(v2, v1);
  outlined destroy of MLHandActionClassifier.ModelParameters(v3, (void (*)(void))type metadata accessor for MLHandActionClassifier);
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

void MLHandActionClassifier.evaluation(on:parameters:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v19 = v4;
  uint64_t v6 = v5;
  uint64_t v22 = v7;
  uint64_t v8 = type metadata accessor for LearningPhase();
  OUTLINED_FUNCTION_0();
  uint64_t v18 = v9;
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_40_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Dataset<[(label: Int, keypoints: MLMultiArray)], DataSample<Tensor, Tensor>>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_24_4();
  char v12 = *((unsigned char *)v6 + 8);
  uint64_t v20 = *v6;
  char v21 = v12;
  uint64_t v13 = *v0;
  static MLHandActionClassifier.makeLabeledKeypointsSequenceFeatures(from:classLabels:)((uint64_t)&v20, (void *)*v0);
  if (v1)
  {
    *(void *)uint64_t v22 = v1;
    type metadata accessor for MLClassifierMetrics.Contents(0);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    uint64_t v15 = v14;
    uint64_t v16 = *(void *)(v13 + 16);
    (*(void (**)(uint64_t, void, uint64_t))(v18 + 104))(v3, *MEMORY[0x263F583B0], v8);
    specialized static MLHandActionClassifier.makeDataset<A>(from:classLabelsCount:parameters:learningPhase:)(v15, v16, v19, v3, v2);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v3, v8);
    swift_bridgeObjectRelease();
    MLHandActionClassifier.GraphCNN.evaluate(_:)(v2);
    static _MetricUtilities.makeClassifierMetrics(confusionMeter:classLabels:)(*v0, v22);
    OUTLINED_FUNCTION_25_0();
    v17();
    swift_release();
  }
  OUTLINED_FUNCTION_8_1();
}

void MLHandActionClassifier.write(to:metadata:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v3 = v2;
  type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_24_4();
  MLHandActionClassifier.addHandActionClassifierSpecificMetadata(_:)();
  if (URL.pathExtension.getter() == 0x67616B6361706C6DLL && v5 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v7 & 1) == 0)
    {
      MLHandActionClassifier.writeLegacyModel(to:metadata:)();
      uint64_t v8 = v13;
      uint64_t v9 = v14;
      goto LABEL_11;
    }
  }
  static _ValidationUtilities.validateWriteLocation(atURL:defaultName:fileExtension:)(v3, 0xD000000000000014, (void *)0x80000002272D3FA0, 0x67616B6361706C6DLL, (void *)0xE900000000000065, v1);
  if (v0)
  {
    uint64_t v8 = v13;
    uint64_t v9 = v14;
  }
  else
  {
    uint64_t v10 = v13;
    uint64_t v12 = v14;
    MLHandActionClassifier.GraphCNN.writeMLPackage(to:metadata:)(v1, &v13);
    OUTLINED_FUNCTION_25_0();
    v11();
    uint64_t v8 = v10;
    uint64_t v9 = v12;
  }
LABEL_11:
  outlined consume of MLModelMetadata?(v8, v9);
  OUTLINED_FUNCTION_8_1();
}

void static MLHandActionClassifier.reformatKeypointsDataTable(table:featureColumn:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = *(id *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  uint64_t v33 = *(void *)a1;
  char v34 = v7;
  MLDataTable.subscript.getter(a2, a3, (uint64_t)&v31);
  id v8 = v31;
  if (v32 == 1)
  {
    outlined consume of Result<_DataTable, Error>(v31, 1);
LABEL_14:
    char v29 = *(unsigned char *)(a1 + 8);
    id v31 = *(id *)a1;
    LOBYTE(v32) = v29;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2272CB370;
    *(void *)(inited + 32) = a2;
    *(void *)(inited + 40) = a3;
    LOBYTE(v33) = 5;
    swift_bridgeObjectRetain();
    static _ValidationUtilities.validateTableTypes(table:columns:type:)((uint64_t)&v31, inited, (unsigned __int8 *)&v33);
    swift_setDeallocating();
    specialized _ContiguousArrayStorage.__deallocating_deinit();
    return;
  }
  swift_retain();
  _UntypedColumn.type.getter(&v33);
  outlined consume of Result<_DataTable, Error>(v8, 0);
  outlined consume of Result<_DataTable, Error>(v8, 0);
  if (v33 != 3) {
    goto LABEL_14;
  }
  id v31 = v6;
  LOBYTE(v32) = v7;
  MLDataTable.subscript.getter(a2, a3, (uint64_t)&v33);
  uint64_t v9 = (void *)v33;
  char v10 = v34;
  specialized MLUntypedColumn.map<A>(skipUndefined:_:)(1, (uint64_t)partial apply for closure #1 in static MLHandActionClassifier.reformatKeypointsDataTable(table:featureColumn:), 0, (void *)v33, v34, (uint64_t)&v31);
  outlined consume of Result<_DataTable, Error>(v9, v10);
  uint64_t v35 = v31;
  char v11 = v32;
  char v12 = *(unsigned char *)(a1 + 8);
  uint64_t v33 = *(void *)a1;
  char v34 = v12;
  MLDataTable.subscript.getter(a2, a3, (uint64_t)&v31);
  id v13 = v31;
  char v14 = v32;
  if (v32)
  {
    uint64_t v15 = -1;
  }
  else
  {
    swift_retain();
    uint64_t v15 = CMLColumn.size.getter();
    outlined consume of Result<_DataTable, Error>(v13, 0);
  }
  outlined consume of Result<_DataTable, Error>(v13, v14);
  specialized MLDataColumn.dropMissing()(v35, v11, (uint64_t)&v33);
  uint64_t v16 = (void *)v33;
  char v17 = v34;
  if (v34)
  {
    uint64_t v18 = -1;
  }
  else
  {
    outlined copy of Result<_DataTable, Error>((id)v33, 0);
    uint64_t v18 = CMLColumn.size.getter();
    outlined consume of Result<_DataTable, Error>(v16, 0);
  }
  outlined consume of Result<_DataTable, Error>(v16, v17);
  if (!__OFSUB__(v15, v18))
  {
    if (v15 != v18)
    {
      id v31 = 0;
      unint64_t v32 = 0xE000000000000000;
      _StringGuts.grow(_:)(236);
      v19._uint64_t countAndFlagsBits = 0xD00000000000003DLL;
      v19._object = (void *)0x80000002272D42A0;
      String.append(_:)(v19);
      uint64_t v33 = v15 - v18;
      v20._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_68();
      String.append(_:)(v20);
      swift_bridgeObjectRelease();
      v21._uint64_t countAndFlagsBits = 0xD00000000000006BLL;
      v21._object = (void *)0x80000002272D42E0;
      String.append(_:)(v21);
      uint64_t v33 = 3;
      v22._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_68();
      String.append(_:)(v22);
      swift_bridgeObjectRelease();
      v23._uint64_t countAndFlagsBits = 8236;
      v23._object = (void *)0xE200000000000000;
      String.append(_:)(v23);
      uint64_t v33 = 21;
      v24._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_68();
      String.append(_:)(v24);
      swift_bridgeObjectRelease();
      v25._object = (void *)0x80000002272D4350;
      v25._uint64_t countAndFlagsBits = 0xD00000000000003CLL;
      String.append(_:)(v25);
      id v26 = v31;
      unint64_t v27 = v32;
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_85();
      *(void *)uint64_t v28 = v26;
      *(void *)(v28 + 8) = v27;
      *(_OWORD *)(v28 + 16) = 0u;
      *(_OWORD *)(v28 + 32) = 0u;
      *(unsigned char *)(v28 + 48) = 0;
      swift_willThrow();
      outlined consume of Result<_DataTable, Error>(v35, v11);
      return;
    }
    swift_bridgeObjectRetain();
    specialized MLDataTable.subscript.setter(v35, v11);
    goto LABEL_14;
  }
  __break(1u);
}

uint64_t one-time initialization function for logger()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static MLHandActionClassifier.logger);
  __swift_project_value_buffer(v0, (uint64_t)static MLHandActionClassifier.logger);
  OUTLINED_FUNCTION_94();
  return Logger.init(subsystem:category:)();
}

uint64_t static MLHandActionClassifier._defaultSessionParameters.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for _defaultSessionParameters != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for MLTrainingSessionParameters();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static MLHandActionClassifier._defaultSessionParameters);
  return _s8CreateML27MLTrainingSessionParametersVWOcTm_4(v3, a1, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
}

id MLHandActionClassifier.model.getter()
{
  return *(id *)(v0 + 16);
}

void MLHandActionClassifier.model.setter(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
}

uint64_t (*MLHandActionClassifier.model.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLHandActionClassifier.modelParameters.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for MLHandActionClassifier();
  return _s8CreateML27MLTrainingSessionParametersVWOcTm_4(v1 + *(int *)(v3 + 28), a1, (void (*)(void))type metadata accessor for MLHandActionClassifier.ModelParameters);
}

uint64_t MLHandActionClassifier.trainingMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for MLHandActionClassifier();
  return _s8CreateML27MLTrainingSessionParametersVWOcTm_4(v1 + *(int *)(v3 + 32), a1, (void (*)(void))type metadata accessor for MLClassifierMetrics);
}

uint64_t MLHandActionClassifier.trainingMetrics.setter()
{
  uint64_t v2 = v1 + *(int *)(OUTLINED_FUNCTION_38_12() + 32);

  return outlined assign with take of MLClassifierMetrics(v0, v2);
}

uint64_t (*MLHandActionClassifier.trainingMetrics.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLHandActionClassifier.validationMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for MLHandActionClassifier();
  return _s8CreateML27MLTrainingSessionParametersVWOcTm_4(v1 + *(int *)(v3 + 36), a1, (void (*)(void))type metadata accessor for MLClassifierMetrics);
}

uint64_t MLHandActionClassifier.validationMetrics.setter()
{
  uint64_t v2 = v1 + *(int *)(OUTLINED_FUNCTION_38_12() + 36);

  return outlined assign with take of MLClassifierMetrics(v0, v2);
}

uint64_t (*MLHandActionClassifier.validationMetrics.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLHandActionClassifier.Prediction.frameRange.getter()
{
  return *(void *)v0;
}

uint64_t MLHandActionClassifier.Prediction.frameRange.setter(uint64_t result, uint64_t a2)
{
  *uint64_t v2 = result;
  v2[1] = a2;
  return result;
}

uint64_t (*MLHandActionClassifier.Prediction.frameRange.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLHandActionClassifier.Prediction.results.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MLHandActionClassifier.Prediction.results.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*MLHandActionClassifier.Prediction.results.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

void MLHandActionClassifier.init(trainingData:parameters:)()
{
  OUTLINED_FUNCTION_30_15();
  uint64_t v86 = v2;
  uint64_t v87 = v1;
  uint64_t v4 = v3;
  id v6 = v5;
  uint64_t v85 = type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  OUTLINED_FUNCTION_0();
  uint64_t v83 = v7;
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x270FA5388](v10);
  uint64_t v84 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for MLHandActionClassifier();
  uint64_t v12 = v11 - 8;
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_49();
  uint64_t v82 = v13;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v72 - v15;
  uint64_t v17 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_24_8();
  uint64_t v19 = type metadata accessor for MLHandActionClassifier.DataSource();
  uint64_t v20 = OUTLINED_FUNCTION_17(v19);
  MEMORY[0x270FA5388](v20);
  Swift::String v22 = (char *)&v72 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  void *v6 = MEMORY[0x263F8EE78];
  id v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F00D80]), sel_init);
  v6[2] = v23;
  uint64_t v89 = (uint64_t)v6 + *(int *)(v12 + 40);
  MLClassifierMetrics.init()((uint64_t)v23, v24, v25, v26, v27, v28, v29, v30, v72, v73, (uint64_t)v74, v75, (uint64_t)v76, v77, v78, (uint64_t)v79, v80, v81, v82,
    v83);
  uint64_t v31 = *(int *)(v12 + 44);
  char v88 = v6;
  uint64_t v90 = (uint64_t)v6 + v31;
  MLClassifierMetrics.init()(v32, v33, v34, v35, v36, v37, v38, v39, v72, v73, (uint64_t)v74, v75, (uint64_t)v76, v77, v78, (uint64_t)v79, v80, v81, v82,
    v83);
  uint64_t v40 = v86;
  uint64_t v41 = v87;
  MLHandActionClassifier.ModelParameters.ValidationData.extractAnnotations(trainingData:)(&v93, &v91);
  if (v41)
  {
    outlined destroy of MLHandActionClassifier.ModelParameters(v40, (void (*)(void))type metadata accessor for MLHandActionClassifier.ModelParameters);
    outlined destroy of MLHandActionClassifier.ModelParameters(v4, (void (*)(void))type metadata accessor for MLHandActionClassifier.DataSource);
    uint64_t v52 = v89;
    uint64_t v51 = v90;
    id v53 = v88;
    swift_bridgeObjectRelease();

    outlined destroy of MLHandActionClassifier.ModelParameters(v52, (void (*)(void))type metadata accessor for MLClassifierMetrics);
    outlined destroy of MLHandActionClassifier.ModelParameters(v51, (void (*)(void))type metadata accessor for MLClassifierMetrics);
LABEL_8:
    OUTLINED_FUNCTION_33_14();
    return;
  }
  uint64_t v77 = v17;
  uint64_t v78 = v0;
  uint64_t v76 = v22;
  uint64_t v42 = v85;
  long long v79 = v16;
  uint64_t v80 = v4;
  uint64_t v43 = v40;
  unint64_t v44 = (void *)v93;
  int v45 = v94;
  uint64_t v81 = v91;
  LODWORD(v87) = v92;
  if (v94 == 255)
  {
    uint64_t v75 = v93;
    MLHandActionClassifier.DataSource.keypointsWithAnnotations(targetFrameRate:)((uint64_t)&v93);
  }
  else
  {
    type metadata accessor for MLHandActionClassifier.FeatureExtractor();
    uint64_t v91 = (uint64_t)v44;
    unsigned __int8 v92 = v45 & 1;
    double v46 = *(double *)(v40 + *(int *)(v42 + 40));
    outlined copy of Result<_DataTable, Error>(v44, v45 & 1);
    static MLHandActionClassifier.FeatureExtractor.extractFeatures(from:targetFrameRate:startingSessionId:)((uint64_t)&v91, 0, &v93, v46);
    uint64_t v75 = (uint64_t)v44;
    outlined consume of MLDataTable?(v44, v45);
  }
  uint64_t v74 = (void *)v93;
  HIDWORD(v73) = v94;
  char v47 = v87;
  uint64_t v48 = v81;
  LODWORD(v86) = v45;
  if (v87 != 255)
  {
    type metadata accessor for MLHandActionClassifier.FeatureExtractor();
    uint64_t v91 = v48;
    unsigned __int8 v92 = v47 & 1;
    static MLHandActionClassifier.FeatureExtractor.extractFeatures(from:targetFrameRate:startingSessionId:)((uint64_t)&v91, 0, &v93, *(double *)(v40 + *(int *)(v42 + 40)));
    uint64_t v50 = v83;
    uint64_t v49 = (uint64_t)v84;
    Class v57 = (void *)v93;
    char v58 = v94;
    uint64_t v59 = v80;
LABEL_13:
    _s8CreateML27MLTrainingSessionParametersVWOcTm_4(v43, v49, (void (*)(void))type metadata accessor for MLHandActionClassifier.ModelParameters);
    uint64_t v63 = v49;
    unint64_t v64 = (*(unsigned __int8 *)(v50 + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80);
    uint64_t v65 = swift_allocObject();
    uint64_t v66 = v74;
    *(void *)(v65 + 16) = v74;
    char v67 = BYTE4(v73);
    *(unsigned char *)(v65 + 24) = BYTE4(v73);
    *(void *)(v65 + 32) = v57;
    *(unsigned char *)(v65 + 40) = v58;
    uint64_t v68 = v63;
    LOBYTE(v63) = v67;
    outlined init with take of MLHandActionClassifier.ModelParameters(v68, v65 + v64, (void (*)(void))type metadata accessor for MLHandActionClassifier.ModelParameters);
    outlined copy of Result<_DataTable, Error>(v66, v63);
    outlined copy of Result<_DataTable, Error>(v57, v58);
    uint64_t v69 = (uint64_t)v79;
    specialized blockAwait<A>(_:)();
    swift_release();
    OUTLINED_FUNCTION_41_9();
    OUTLINED_FUNCTION_40_9();
    outlined consume of Result<_DataTable, Error>(v57, v58);
    outlined consume of Result<_DataTable, Error>(v66, v63);
    outlined destroy of MLHandActionClassifier.ModelParameters(v43, (void (*)(void))type metadata accessor for MLHandActionClassifier.ModelParameters);
    outlined destroy of MLHandActionClassifier.ModelParameters(v59, (void (*)(void))type metadata accessor for MLHandActionClassifier.DataSource);
    uint64_t v70 = v82;
    outlined init with take of MLHandActionClassifier.ModelParameters(v69, v82, (void (*)(void))type metadata accessor for MLHandActionClassifier);
    uint64_t v71 = (uint64_t)v88;
    swift_bridgeObjectRelease();

    outlined destroy of MLHandActionClassifier.ModelParameters(v89, (void (*)(void))type metadata accessor for MLClassifierMetrics);
    outlined destroy of MLHandActionClassifier.ModelParameters(v90, (void (*)(void))type metadata accessor for MLClassifierMetrics);
    outlined init with take of MLHandActionClassifier.ModelParameters(v70, v71, (void (*)(void))type metadata accessor for MLHandActionClassifier);
    goto LABEL_8;
  }
  uint64_t v54 = v78;
  _s8CreateML27MLTrainingSessionParametersVWOcTm_4(v43, v78, (void (*)(void))type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v50 = v83;
  uint64_t v49 = (uint64_t)v84;
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v56 = (uint64_t)v76;
    outlined init with take of MLHandActionClassifier.ModelParameters(v54, (uint64_t)v76, (void (*)(void))type metadata accessor for MLHandActionClassifier.DataSource);
    MLHandActionClassifier.DataSource.keypointsWithAnnotations(targetFrameRate:)((uint64_t)&v93);
    uint64_t v59 = v80;
    outlined destroy of MLHandActionClassifier.ModelParameters(v56, (void (*)(void))type metadata accessor for MLHandActionClassifier.DataSource);
    Class v57 = (void *)v93;
    char v58 = v94;
    goto LABEL_13;
  }
  outlined destroy of MLHandActionClassifier.ModelParameters(v54, (void (*)(void))type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
  uint64_t v60 = MEMORY[0x22A6764B0](0);
  uint64_t v59 = v80;
  if (v60)
  {
    uint64_t v61 = v60;
    type metadata accessor for CMLTable();
    uint64_t v62 = swift_allocObject();
    *(void *)(v62 + 16) = v61;
    type metadata accessor for _DataTable();
    swift_allocObject();
    Class v57 = _DataTable.init(impl:)(v62);
    char v58 = 0;
    goto LABEL_13;
  }
  __break(1u);
}

uint64_t closure #1 in MLHandActionClassifier.init(trainingData:parameters:)(uint64_t a1, void *a2, char a3, void *a4, char a5, uint64_t a6)
{
  *(unsigned char *)(v6 + 26) = a5;
  *(void *)(v6 + 64) = a4;
  *(void *)(v6 + 72) = a6;
  *(unsigned char *)(v6 + 25) = a3;
  *(void *)(v6 + 48) = a1;
  *(void *)(v6 + 56) = a2;
  type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  *(void *)(v6 + 80) = swift_task_alloc();
  outlined copy of Result<_DataTable, Error>(a2, a3 & 1);
  outlined copy of Result<_DataTable, Error>(a4, a5 & 1);
  return MEMORY[0x270FA2498](closure #1 in MLHandActionClassifier.init(trainingData:parameters:), 0, 0);
}

uint64_t closure #1 in MLHandActionClassifier.init(trainingData:parameters:)()
{
  OUTLINED_FUNCTION_11();
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 80);
  char v3 = *(unsigned char *)(v0 + 26);
  char v4 = *(unsigned char *)(v0 + 25);
  uint64_t v5 = *(void *)(v0 + 64);
  *(void *)(v0 + 16) = *(void *)(v0 + 56);
  *(unsigned char *)(v0 + 24) = v4 & 1;
  *(void *)(v0 + 32) = v5;
  *(unsigned char *)(v0 + 40) = v3 & 1;
  _s8CreateML27MLTrainingSessionParametersVWOcTm_4(v1, v2, (void (*)(void))type metadata accessor for MLHandActionClassifier.ModelParameters);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v6;
  void *v6 = v0;
  v6[1] = closure #1 in MLHandActionClassifier.init(trainingData:parameters:);
  uint64_t v7 = *(void *)(v0 + 80);
  uint64_t v8 = *(void *)(v0 + 48);
  return MLHandActionClassifier.init(trainingFeatures:validationFeatures:parameters:)(v8, (uint64_t *)(v0 + 16), (uint64_t *)(v0 + 32), v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  char v3 = v2;
  char v4 = *v1;
  OUTLINED_FUNCTION_6();
  *uint64_t v5 = v4;
  *(void *)(v3 + 96) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](closure #1 in MLHandActionClassifier.init(trainingData:parameters:), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v4 + 8);
    return v6();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_11();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

#error "227177C38: call analysis failed (funcsize=213)"

void MLHandActionClassifier.init(checkpoint:)()
{
  OUTLINED_FUNCTION_30_15();
  uint64_t v70 = v0;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v65 = type metadata accessor for MLHandActionClassifier.DataSource();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_40_0();
  uint64_t v66 = (int *)type metadata accessor for MLHandActionClassifier.PersistentParameters();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_24_4();
  uint64_t v9 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v11 = v10;
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_33();
  uint64_t v15 = v13 - v14;
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v62 - v17;
  void *v6 = MEMORY[0x263F8EE78];
  v6[2] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F00D80]), sel_init);
  uint64_t v19 = type metadata accessor for MLHandActionClassifier();
  MLClassifierMetrics.init()(v19, v20, v21, v22, v23, v24, v25, v26, v62, v63, (uint64_t)v64, v65, (uint64_t)v66, v67, v68, (uint64_t)v6 + *(int *)(v19 + 32), v70, v71, (uint64_t)v72,
    v73);
  MLClassifierMetrics.init()(v27, v28, v29, v30, v31, v32, v33, v34, v62, v63, (uint64_t)v64, v65, (uint64_t)v66, v19, (uint64_t)v6 + *(int *)(v19 + 36), v69, v70, (uint64_t)v6, (uint64_t)v72,
    v73);
  URL.deletingLastPathComponent()();
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 16))(v15, v18, v9);
  uint64_t v35 = v70;
  MLHandActionClassifier.PersistentParameters.init(sessionDirectory:)(v15, v1);
  if (v35)
  {
    outlined destroy of MLHandActionClassifier.ModelParameters(v4, (void (*)(void))type metadata accessor for MLCheckpoint);
    uint64_t v36 = OUTLINED_FUNCTION_44_9();
    v37(v36);
    uint64_t v57 = v68;
    uint64_t v56 = v69;
    uint64_t v58 = v71;
    swift_bridgeObjectRelease();

    outlined destroy of MLHandActionClassifier.ModelParameters(v56, (void (*)(void))type metadata accessor for MLClassifierMetrics);
    outlined destroy of MLHandActionClassifier.ModelParameters(v57, (void (*)(void))type metadata accessor for MLClassifierMetrics);
  }
  else
  {
    uint64_t v70 = v4;
    _s8CreateML27MLTrainingSessionParametersVWOcTm_4(v1, v2, (void (*)(void))type metadata accessor for MLHandActionClassifier.DataSource);
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      unint64_t v64 = v18;
      uint64_t v65 = v9;
      uint64_t v38 = *(void **)v2;
      char v39 = *(unsigned char *)(v2 + 8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined copy of Result<_DataTable, Error>(v38, v39);
      specialized MLDataTable.subscript.getter(v39, (uint64_t)&v72);
      swift_bridgeObjectRelease();
      outlined consume of Result<_DataTable, Error>(v38, v39);
      id v40 = v72;
      char v41 = v73;
      specialized MLDataColumn.dropDuplicates()(v72, v73, (uint64_t)&v74);
      outlined consume of Result<_DataTable, Error>(v40, v41);
      uint64_t v63 = specialized Array<A>.init(_:)(v74, v75);
      outlined consume of Result<_DataTable, Error>(v38, v39);
      uint64_t v42 = v66;
    }
    else
    {
      uint64_t v43 = static _VideoUtilities.videoURLsPerClass(from:)(v1);
      uint64_t v42 = v66;
      unint64_t v64 = v18;
      uint64_t v65 = v9;
      uint64_t v63 = specialized _copyCollectionToContiguousArray<A>(_:)(v43);
      swift_bridgeObjectRelease();
      outlined destroy of MLHandActionClassifier.ModelParameters(v2, (void (*)(void))type metadata accessor for MLHandActionClassifier.DataSource);
    }
    uint64_t v44 = v71 + *(int *)(v67 + 28);
    _s8CreateML27MLTrainingSessionParametersVWOcTm_4(v1 + v42[5], v44, (void (*)(void))type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
    uint64_t v45 = *(void *)(v1 + v42[6]);
    uint64_t v46 = *(void *)(v1 + v42[7]);
    uint64_t v47 = *(void *)(v1 + v42[8]);
    uint64_t v48 = *(void *)(v1 + v42[10]);
    uint64_t v49 = *(void *)(v1 + v42[9]);
    uint64_t v50 = (int *)type metadata accessor for MLHandActionClassifier.ModelParameters(0);
    *(void *)(v44 + v50[5]) = v45;
    *(void *)(v44 + v50[6]) = v46;
    *(void *)(v44 + v50[7]) = v47;
    *(void *)(v44 + v50[8]) = v48;
    *(void *)(v44 + v50[10]) = v49;
    type metadata accessor for MLHandActionClassifier.GraphCNN(0);
    OUTLINED_FUNCTION_31_0();
    MLHandActionClassifier.GraphCNN.init(classLabels:export:numOfKeypoints:numOfKeypointsChannels:windowSize:)();
    uint64_t v52 = v51;
    uint64_t v53 = v1;
    uint64_t v54 = v70;
    MLHandActionClassifier.GraphCNN.updateGraphCNN(from:)(v70);
    swift_retain();
    specialized blockAwait<A>(_:)();
    uint64_t v55 = (uint64_t)v64;
    uint64_t v60 = v59;
    swift_release();
    outlined destroy of MLHandActionClassifier.ModelParameters(v54, (void (*)(void))type metadata accessor for MLCheckpoint);
    outlined destroy of MLHandActionClassifier.ModelParameters(v53, (void (*)(void))type metadata accessor for MLHandActionClassifier.PersistentParameters);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v55, v65);
    uint64_t v61 = v71;

    *(void *)(v61 + 8) = v52;
    *(void *)(v61 + 16) = v60;
  }
  OUTLINED_FUNCTION_33_14();
}

uint64_t closure #1 in MLHandActionClassifier.init(checkpoint:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  *uint64_t v2 = v1;
  v2[1] = closure #1 in MLHandActionClassifier.init(checkpoint:);
  return MLHandActionClassifier.GraphCNN.compile()();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t (*v8)(void);
  uint64_t v10;

  OUTLINED_FUNCTION_2();
  uint64_t v5 = v4;
  uint64_t v6 = *v2;
  OUTLINED_FUNCTION_6();
  double *v7 = v6;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v8 = *(uint64_t (**)(void))(v6 + 8);
    return v8();
  }
  else
  {
    *(void *)(v5 + 32) = a1;
    return MEMORY[0x270FA2498](closure #1 in MLRandomForestRegressor.init(checkpoint:), 0, 0);
  }
}

void static MLHandActionClassifier.train(trainingData:parameters:sessionParameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  static MLHandActionClassifier.makeTrainingSession(trainingData:parameters:sessionParameters:)(a1, a2, a3);
  if (!v3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLHandActionClassifier>);
    OUTLINED_FUNCTION_31_0();
    specialized MLJob.init(_:)();
  }
}

void static MLHandActionClassifier.makeTrainingSession(trainingData:parameters:sessionParameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = type metadata accessor for MLTrainingSessionParameters();
  uint64_t v11 = OUTLINED_FUNCTION_17(v10);
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_63();
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v22[-1] - v13;
  uint64_t v15 = type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  uint64_t v16 = OUTLINED_FUNCTION_17(v15);
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_32();
  uint64_t v17 = type metadata accessor for MLHandActionClassifier.DataSource();
  uint64_t v18 = OUTLINED_FUNCTION_17(v17);
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_40_0();
  _s8CreateML27MLTrainingSessionParametersVWOcTm_4(a1, v6, (void (*)(void))type metadata accessor for MLHandActionClassifier.DataSource);
  _s8CreateML27MLTrainingSessionParametersVWOcTm_4(a2, v5, (void (*)(void))type metadata accessor for MLHandActionClassifier.ModelParameters);
  _s8CreateML27MLTrainingSessionParametersVWOcTm_4(a3, (uint64_t)v14, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
  uint64_t v19 = type metadata accessor for HandActionClassifierTrainingSessionDelegate();
  OUTLINED_FUNCTION_31_0();
  HandActionClassifierTrainingSessionDelegate.init(trainingData:modelParameters:sessionParameters:)();
  if (!v4)
  {
    v22[3] = v19;
    v22[4] = &protocol witness table for HandActionClassifierTrainingSessionDelegate;
    v22[0] = v20;
    _s8CreateML27MLTrainingSessionParametersVWOcTm_4(a3, v3, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLHandActionClassifier>);
    OUTLINED_FUNCTION_31_0();
    specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)v22, v3, 25);
  }
}

uint64_t static MLHandActionClassifier.resume(_:)()
{
  return specialized MLJob.init(_:)();
}

void static MLHandActionClassifier.restoreTrainingSession(sessionParameters:)(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for MLTrainingSessionParameters();
  uint64_t v5 = OUTLINED_FUNCTION_17(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_63();
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v12[-1] - v7;
  _s8CreateML27MLTrainingSessionParametersVWOcTm_4(a1, (uint64_t)&v12[-1] - v7, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
  uint64_t v9 = type metadata accessor for HandActionClassifierTrainingSessionDelegate();
  OUTLINED_FUNCTION_31_0();
  uint64_t v10 = HandActionClassifierTrainingSessionDelegate.init(sessionParameters:)((uint64_t)v8);
  if (!v2)
  {
    v12[3] = v9;
    v12[4] = &protocol witness table for HandActionClassifierTrainingSessionDelegate;
    v12[0] = v10;
    _s8CreateML27MLTrainingSessionParametersVWOcTm_4(a1, v1, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLHandActionClassifier>);
    OUTLINED_FUNCTION_31_0();
    specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)v12, v1, 25);
  }
}

void closure #1 in closure #1 in static MLHandActionClassifier.resume(_:)()
{
  OUTLINED_FUNCTION_19_4();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  char v8 = v7;
  uint64_t v10 = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLHandActionClassifier, Error>);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (void *)((char *)v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  char v41 = (int *)type metadata accessor for MLHandActionClassifier.PersistentParameters();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_33_0();
  uint64_t v40 = v15;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
  uint64_t v17 = OUTLINED_FUNCTION_17(v16);
  MEMORY[0x270FA5388](v17);
  uint64_t v18 = OUTLINED_FUNCTION_14_0();
  uint64_t v19 = (int *)type metadata accessor for MLHandActionClassifier.ModelParameters(v18);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v20);
  OUTLINED_FUNCTION_33();
  uint64_t v23 = v21 - v22;
  MEMORY[0x270FA5388](v24);
  if (v8)
  {
    *uint64_t v13 = v10;
    swift_storeEnumTagMultiPayload();
    id v31 = v10;
    v4(v13);
    _s10Foundation3URLVSgWOhTm_0((uint64_t)v13, &demangling cache variable for type metadata for Result<MLHandActionClassifier, Error>);
  }
  else
  {
    uint64_t v26 = (char *)v39 - v25;
    v39[1] = v2;
    outlined init with copy of TrainingSessionDelegate(v6 + direct field offset for MLTrainingSession.delegate, (uint64_t)&v43);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingSessionDelegate);
    type metadata accessor for HandActionClassifierTrainingSessionDelegate();
    if (swift_dynamicCast())
    {
      uint64_t v27 = v42;
      uint64_t v28 = *(void *)(v42 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_model);
      if (!v28)
      {
LABEL_7:
        swift_release();
        goto LABEL_12;
      }
      uint64_t v29 = v42 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_trainingParameters;
      swift_beginAccess();
      outlined init with copy of MLHandActionClassifier.PersistentParameters?(v29, v0);
      uint64_t v30 = v41;
      if (__swift_getEnumTagSinglePayload(v0, 1, (uint64_t)v41))
      {
        swift_retain();
        _s10Foundation3URLVSgWOhTm_0(v0, &demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
        swift_release();
        goto LABEL_7;
      }
      uint64_t v32 = v40;
      _s8CreateML27MLTrainingSessionParametersVWOcTm_4(v0, v40, (void (*)(void))type metadata accessor for MLHandActionClassifier.PersistentParameters);
      swift_retain();
      _s10Foundation3URLVSgWOhTm_0(v0, &demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
      _s8CreateML27MLTrainingSessionParametersVWOcTm_4(v32 + v30[5], v23, (void (*)(void))type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
      uint64_t v33 = *(void *)(v32 + v30[7]);
      uint64_t v34 = *(void *)(v32 + v30[8]);
      uint64_t v35 = *(void *)(v32 + v30[10]);
      uint64_t v36 = *(void *)(v32 + v30[9]);
      *(void *)(v23 + v19[5]) = *(void *)(v32 + v30[6]);
      *(void *)(v23 + v19[6]) = v33;
      *(void *)(v23 + v19[7]) = v34;
      *(void *)(v23 + v19[8]) = v35;
      *(void *)(v23 + v19[10]) = v36;
      outlined destroy of MLHandActionClassifier.ModelParameters(v32, (void (*)(void))type metadata accessor for MLHandActionClassifier.PersistentParameters);
      uint64_t v37 = outlined init with take of MLHandActionClassifier.ModelParameters(v23, (uint64_t)v26, (void (*)(void))type metadata accessor for MLHandActionClassifier.ModelParameters);
      uint64_t v38 = *(void *)(v27 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_classLabels);
      if (v38)
      {
        MEMORY[0x270FA5388](v37);
        v39[-4] = v28;
        v39[-3] = v26;
        v39[-2] = v27;
        v39[-1] = v38;
        swift_bridgeObjectRetain();
        _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML22MLHandActionClassifierV_s5Error_pTgm5((void (*)(uint64_t *))partial apply for closure #1 in closure #1 in closure #1 in static MLHandActionClassifier.resume(_:), (uint64_t)v13);
        swift_bridgeObjectRelease();
        v4(v13);
        swift_release();
        swift_release();
        _s10Foundation3URLVSgWOhTm_0((uint64_t)v13, &demangling cache variable for type metadata for Result<MLHandActionClassifier, Error>);
      }
      else
      {
        swift_release();
        swift_release();
      }
      outlined destroy of MLHandActionClassifier.ModelParameters((uint64_t)v26, (void (*)(void))type metadata accessor for MLHandActionClassifier.ModelParameters);
    }
  }
LABEL_12:
  OUTLINED_FUNCTION_12_4();
}

uint64_t closure #1 in closure #1 in closure #1 in static MLHandActionClassifier.resume(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v7 = v5;
  uint64_t v12 = type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s8CreateML27MLTrainingSessionParametersVWOcTm_4(a2, (uint64_t)v14, (void (*)(void))type metadata accessor for MLHandActionClassifier.ModelParameters);
  uint64_t v15 = *(void *)(a3
                  + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_metricsAttributesDictionary);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t result = MLHandActionClassifier.init(model:parameters:metricsAttributes:classLabels:)(a1, v14, v15, a4);
  if (v7) {
    *a5 = v7;
  }
  return result;
}

uint64_t static MLHandActionClassifier.buildFeatureTable(features:labels:sessionIds:videoFiles:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLUntypedColumn)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2272CB360;
  *(void *)(inited + 32) = 0x746E696F7079656BLL;
  *(void *)(inited + 40) = 0xE900000000000073;
  uint64_t v23 = a1;
  swift_bridgeObjectRetain();
  uint64_t ML14_UntypedColumnC_s5Error_pTgm5 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
  char v13 = v12;
  swift_bridgeObjectRelease();
  *(void *)(inited + 48) = ML14_UntypedColumnC_s5Error_pTgm5;
  *(unsigned char *)(inited + 56) = v13 & 1;
  *(void *)(inited + 64) = 0x6C6562616CLL;
  *(void *)(inited + 72) = 0xE500000000000000;
  uint64_t v23 = a2;
  swift_bridgeObjectRetain();
  uint64_t v14 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
  LOBYTE(ML14_UntypedColumnC_s5Error_pTgm5) = v15;
  swift_bridgeObjectRelease();
  *(void *)(inited + 80) = v14;
  *(unsigned char *)(inited + 88) = ML14_UntypedColumnC_s5Error_pTgm5 & 1;
  *(void *)(inited + 96) = 0x5F6E6F6973736573;
  *(void *)(inited + 104) = 0xEA00000000006469;
  uint64_t v23 = a3;
  swift_bridgeObjectRetain();
  uint64_t v16 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
  LOBYTE(v14) = v17;
  swift_bridgeObjectRelease();
  *(void *)(inited + 112) = v16;
  *(unsigned char *)(inited + 120) = v14 & 1;
  *(void *)(inited + 128) = 0x7461506F65646976;
  *(void *)(inited + 136) = 0xE900000000000068;
  uint64_t v23 = a4;
  swift_bridgeObjectRetain();
  uint64_t v18 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in MLUntypedColumn.init<A>(_:)specialized partial apply);
  LOBYTE(v16) = v19;
  swift_bridgeObjectRelease();
  *(void *)(inited + 144) = v18;
  *(unsigned char *)(inited + 152) = v16 & 1;
  uint64_t v20 = Dictionary.init(dictionaryLiteral:)();
  uint64_t result = specialized MLDataTable.init<A>(uniqueKeysWithValues:)(v20, (uint64_t)&v23);
  char v22 = v24;
  *(void *)a5 = v23;
  *(unsigned char *)(a5 + 8) = v22;
  return result;
}

void closure #1 in static MLHandActionClassifier.reformatKeypointsDataTable(table:featureColumn:)(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 16) == 3)
  {
    uint64_t v2 = *(void *)a1;
    static MLHandActionClassifier.convertSequenceToMultiArray(value:)(&v2, a2);
  }
  else
  {
    *a2 = 0;
  }
}

void static MLHandActionClassifier.convertSequenceToMultiArray(value:)(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  v96[0] = MEMORY[0x263F8EE78];
  specialized ContiguousArray.reserveCapacity(_:)();
  objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, 1);
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_77();
  specialized ContiguousArray._endMutation()();
  objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, 3);
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_77();
  specialized ContiguousArray._endMutation()();
  objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, 21);
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_77();
  specialized ContiguousArray._endMutation()();
  id v4 = objc_allocWithZone(MEMORY[0x263F00DA8]);
  uint64_t v5 = 0;
  id v6 = @nonobjc MLMultiArray.init(shape:dataType:)(v96[0], 65600);
  if (!v6) {
    goto LABEL_56;
  }
  id v7 = v6;
  uint64_t v8 = UnsafeMutableBufferPointer.init(_:)();
  swift_retain();
  CMLSequence.size.getter();
  uint64_t v9 = specialized RandomAccessCollection<>.distance(from:to:)();
  swift_release();
  if (v9 != 1)
  {

LABEL_56:
    *a2 = 0;
    return;
  }
  uint64_t v94 = 0;
  uint64_t v95 = 0;
  uint64_t v93 = v3;
  swift_retain();
  while (1)
  {
    specialized EnumeratedSequence.Iterator.next()((uint64_t)&v89);
    uint64_t v11 = (uint64_t)v89;
    id v10 = v90;
    id v12 = v91;
    char v13 = v92;
    if (v92 != 3)
    {
      if (v92 == 255)
      {
        swift_release();
        MLDataValue.MultiArrayType.init(_:)((MLMultiArray)v7);
        *a2 = v89;
        return;
      }

      swift_release();
      goto LABEL_66;
    }
    outlined copy of MLDataValue(v90, v91, 3);
    outlined copy of MLDataValue(v10, v12, 3);
    CMLSequence.size.getter();
    uint64_t v14 = specialized RandomAccessCollection<>.distance(from:to:)();
    OUTLINED_FUNCTION_34_0();
    if (v14 != 3)
    {

      swift_release();
      char v13 = 3;
      OUTLINED_FUNCTION_34_0();
LABEL_66:
      outlined consume of (offset: Int, element: MLDataValue)?(v11, v10, v12, v13);
      goto LABEL_56;
    }
    outlined copy of MLDataValue(v10, v12, 3);
    if (CMLSequence.size.getter()) {
      break;
    }
LABEL_54:
    outlined consume of (offset: Int, element: MLDataValue)?(v11, v10, v12, 3);
    outlined consume of (offset: Int, element: MLDataValue)?(v11, v10, v12, 3);
    OUTLINED_FUNCTION_34_0();
  }
  uint64_t v15 = 0;
  uint64_t v81 = v12;
  uint64_t v82 = (uint64_t)a2;
  uint64_t v80 = v10;
  uint64_t v85 = v11;
  while (1)
  {
    swift_retain();
    CMLSequence.value(at:)(v15);
    uint64_t v16 = v15;
    uint64_t v18 = v17;
    OUTLINED_FUNCTION_34_0();
    char v19 = v10;
    MLDataValue.init(_:)(v18, (uint64_t)&v89);
    uint64_t v20 = v89;
    id v87 = v90;
    uint64_t v21 = v91;
    swift_retain();
    uint64_t v22 = CMLSequence.size.getter();
    outlined consume of (offset: Int, element: MLDataValue)?(v11, v19, v12, 3);
    uint64_t v86 = v16;
    if (v16 >= v22) {
      goto LABEL_76;
    }
    if (v21 != 3)
    {
      uint64_t v23 = v87;
      goto LABEL_62;
    }
    uint64_t v23 = v87;
    outlined copy of MLDataValue(v20, v87, 3);
    outlined copy of MLDataValue(v20, v87, 3);
    uint64_t v24 = CMLSequence.size.getter();
    if (CMLSequence.size.getter() < 0) {
      goto LABEL_77;
    }
    uint64_t v22 = CMLSequence.size.getter();
    OUTLINED_FUNCTION_21_0();
    if (v24 < 0 || v22 < v24) {
      goto LABEL_78;
    }
    if (v24 != 21) {
      break;
    }
    swift_retain();
    if (CMLSequence.size.getter())
    {
      uint64_t v21 = 0;
      while (1)
      {
        swift_retain();
        CMLSequence.value(at:)(v21);
        OUTLINED_FUNCTION_21_0();
        switch(CMLFeatureValue.type.getter())
        {
          case 1u:
            OUTLINED_FUNCTION_99();
            specialized handling<A, B>(_:_:)();
            uint64_t v39 = v38;
            swift_release();
            swift_release();
            id object = 0;
            uint64_t countAndFlagsBits = v39;
            int v26 = 1;
            break;
          case 2u:
            swift_retain();
            Swift::String v37 = CMLFeatureValue.stringValue()();
            uint64_t countAndFlagsBits = v37._countAndFlagsBits;
            id object = v37._object;
            swift_release();
            if (v5) {
              goto LABEL_80;
            }
            swift_release();
            int v26 = 2;
            break;
          case 3u:
            OUTLINED_FUNCTION_99();
            uint64_t v40 = specialized handling<A, B>(_:_:)(v12);
            if (!v40) {
              goto LABEL_81;
            }
            swift_release_n();
            type metadata accessor for CMLSequence();
            uint64_t countAndFlagsBits = swift_allocObject();
            id object = 0;
            *(void *)(countAndFlagsBits + 16) = v40;
            *(unsigned char *)(countAndFlagsBits + 24) = 1;
            int v26 = 3;
            break;
          case 4u:
            OUTLINED_FUNCTION_99();
            uint64_t v27 = specialized handling<A, B>(_:_:)(v12);
            if (!v27) {
              goto LABEL_79;
            }
            type metadata accessor for CMLDictionary();
            uint64_t v28 = swift_allocObject();
            *(void *)(v28 + 16) = v27;
            v96[0] = v28;
            v96[1] = (uint64_t)closure #1 in MLDataValue.DictionaryType.init(from:);
            v96[2] = 0;
            v96[3] = (uint64_t)specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
            v96[4] = 0;
            v96[5] = (uint64_t)specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:);
            v96[6] = 0;
            swift_retain();
            specialized Dictionary.init<A>(uniqueKeysWithValues:)((uint64_t)v96, v29, v30, v31, v32, v33, v34, v35, (uint64_t)v80, (uint64_t)v81, v82, (uint64_t)object, v85, v86, (uint64_t)v87, v88, (uint64_t)v89, (uint64_t)v90);
            uint64_t countAndFlagsBits = v36;
            swift_release();
            swift_release_n();
            id object = 0;
            int v26 = 4;
            break;
          case 5u:
            swift_release();
            uint64_t countAndFlagsBits = 0;
            id object = 0;
            int v26 = 6;
            break;
          case 6u:
            uint64_t v41 = swift_retain();
            MLDataValue.MultiArrayType.init(from:)(v41, (uint64_t *)&v89);
            uint64_t countAndFlagsBits = (uint64_t)v89;
            if (!v89) {
              goto LABEL_82;
            }
            swift_release();
            id object = 0;
            int v26 = 5;
            break;
          default:
            OUTLINED_FUNCTION_99();
            uint64_t countAndFlagsBits = specialized handling<A, B>(_:_:)(v12);
            swift_release();
            swift_release();
            id object = 0;
            int v26 = 0;
            break;
        }
        swift_retain();
        uint64_t v42 = CMLSequence.size.getter();
        OUTLINED_FUNCTION_21_0();
        if (v21 >= v42) {
          break;
        }
        HIDWORD(v88) = v26;
        uint64_t v43 = v8;
        uint64_t v44 = v7;
        id v45 = objc_msgSend(v7, sel_strides);
        type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
        uint64_t v46 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if ((v46 & 0xC000000000000001) != 0)
        {
          id v47 = (id)MEMORY[0x22A6753B0](0, v46);
        }
        else
        {
          if (!*(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_69;
          }
          id v47 = *(id *)(v46 + 32);
        }
        uint64_t v48 = v47;
        swift_bridgeObjectRelease();
        uint64_t v49 = (uint64_t)objc_msgSend(v48, sel_integerValue);

        uint64_t v50 = v85 * v49;
        if ((unsigned __int128)(v85 * (__int128)v49) >> 64 != (v85 * v49) >> 63) {
          goto LABEL_68;
        }
        id v51 = objc_msgSend(v44, sel_strides);
        uint64_t v52 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if ((v52 & 0xC000000000000001) != 0)
        {
          id v53 = (id)MEMORY[0x22A6753B0](1, v52);
        }
        else
        {
          if (*(void *)((v52 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL) {
            goto LABEL_71;
          }
          id v53 = *(id *)(v52 + 40);
        }
        uint64_t v54 = v53;
        swift_bridgeObjectRelease();
        uint64_t v55 = (uint64_t)objc_msgSend(v54, sel_integerValue);

        uint64_t v56 = v86 * v55;
        if ((unsigned __int128)(v86 * (__int128)v55) >> 64 != (v86 * v55) >> 63) {
          goto LABEL_70;
        }
        BOOL v57 = __OFADD__(v50, v56);
        uint64_t v58 = v50 + v56;
        if (v57) {
          goto LABEL_72;
        }
        id v7 = v44;
        id v59 = objc_msgSend(v44, sel_strides);
        uint64_t v60 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if ((v60 & 0xC000000000000001) != 0)
        {
          id v12 = (id)MEMORY[0x22A6753B0](2, v60);
          uint64_t v8 = v43;
        }
        else
        {
          if (*(void *)((v60 & 0xFFFFFFFFFFFFFF8) + 0x10) < 3uLL) {
            goto LABEL_74;
          }
          uint64_t v8 = v43;
          id v12 = *(id *)(v60 + 48);
        }
        swift_bridgeObjectRelease();
        uint64_t v22 = (uint64_t)objc_msgSend(v12, sel_integerValue);

        uint64_t v61 = v21 * v22;
        if ((unsigned __int128)(v21 * (__int128)v22) >> 64 != (v21 * v22) >> 63) {
          goto LABEL_73;
        }
        BOOL v57 = __OFADD__(v58, v61);
        uint64_t v62 = v58 + v61;
        if (v57) {
          goto LABEL_75;
        }
        if (HIDWORD(v88))
        {
          uint64_t v63 = v87;
          if (HIDWORD(v88) != 1)
          {
            outlined consume of MLDataValue((void *)countAndFlagsBits, object, SBYTE4(v88));
            outlined consume of MLDataValue(v20, v87, 3);
            OUTLINED_FUNCTION_21_0();
            OUTLINED_FUNCTION_30_0(v64, v65, v66, v67, v68, v69, v70, v71, v80, v81, v82, (uint64_t)object, v85);
            OUTLINED_FUNCTION_21_0();
            goto LABEL_63;
          }
          *(void *)(v8 + 8 * v62) = countAndFlagsBits;
        }
        else
        {
          *(double *)(v8 + 8 * v62) = (double)countAndFlagsBits;
          uint64_t v63 = v87;
        }
        if (++v21 == CMLSequence.size.getter())
        {
          outlined consume of MLDataValue(v20, v63, 3);
          outlined consume of MLDataValue(v20, v63, 3);
          OUTLINED_FUNCTION_21_0();
          goto LABEL_53;
        }
      }
      __break(1u);
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
LABEL_78:
      __break(1u);

      __break(1u);
      swift_release();

      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:

      __break(1u);
      __break(1u);
      swift_release();

      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
      swift_unexpectedError();
      __break(1u);
      JUMPOUT(0x227179C28);
    }
    outlined consume of MLDataValue(v20, v87, 3);
    outlined consume of MLDataValue(v20, v87, 3);
    swift_release();
LABEL_53:
    uint64_t v15 = v86 + 1;
    id v10 = v80;
    id v12 = v81;
    a2 = (void *)v82;
    LODWORD(v11) = v85;
    if (v86 + 1 == CMLSequence.size.getter()) {
      goto LABEL_54;
    }
  }
  uint64_t v21 = 3;
  OUTLINED_FUNCTION_21_0();
LABEL_62:
  outlined consume of MLDataValue(v20, v23, v21);
  OUTLINED_FUNCTION_30_0(v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, (uint64_t)object, v85);
LABEL_63:
  outlined consume of (offset: Int, element: MLDataValue)?(0, (void *)v22, (id)v21, 3);
  swift_release();
  *uint64_t v83 = 0;
}

uint64_t MLHandActionClassifier.prediction(from:)(uint64_t a1)
{
  return MLHandActionClassifier.modelPrediction(on:using:)(a1);
}

uint64_t MLHandActionClassifier.modelPrediction(on:using:)(uint64_t a1)
{
  uint64_t v5 = v1 + *(int *)(type metadata accessor for MLHandActionClassifier() + 28);
  uint64_t v6 = type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  id v7 = static _VideoUtilities.getHandKeyPointsFromVideoUrl(url:startTime:endTime:targetFrameRate:)(a1, *MEMORY[0x263F010E0], *(void *)(MEMORY[0x263F010E0] + 8), *(void *)(MEMORY[0x263F010E0] + 16), *MEMORY[0x263F01088], *(void *)(MEMORY[0x263F01088] + 8), *(void *)(MEMORY[0x263F01088] + 16), *(double *)(v5 + *(int *)(v6 + 40)));
  if (!v2)
  {
    uint64_t v8 = v7;
    uint64_t v9 = v7[2];
    if (v9)
    {
      unint64_t v26 = MEMORY[0x263F8EE78];
      specialized ContiguousArray.reserveCapacity(_:)();
      uint64_t v10 = 0;
      do
      {
        uint64_t v11 = v10 + 1;
        id v12 = (id)v8[v10 + 4];
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        uint64_t v10 = v11;
      }
      while (v9 != v11);
      unint64_t v13 = v26;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v13 = MEMORY[0x263F8EE78];
    }
    uint64_t v14 = static _VideoUtilities.generatePredictionWindows(frameKeypoints:windowSize:numOfKeypoints:)(v13, *(void *)(v5 + *(int *)(v6 + 28)), 21);
    swift_bridgeObjectRelease();
    uint64_t v16 = *(void *)(v14 + 16);
    if (v16)
    {
      uint64_t v17 = (_OWORD *)(v14 + 40);
      uint64_t v3 = MEMORY[0x263F8EE78];
      do
      {
        long long v25 = *v17;
        id v18 = *((id *)v17 - 1);
        MLHandActionClassifier.modelPrediction(on:using:)();
        uint64_t v20 = v19;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v3 = v23;
        }
        unint64_t v21 = *(void *)(v3 + 16);
        if (v21 >= *(void *)(v3 + 24) >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v3 = v24;
        }
        *(void *)(v3 + 16) = v21 + 1;
        uint64_t v22 = v3 + 24 * v21;
        *(_OWORD *)(v22 + 32) = v25;
        *(void *)(v22 + 48) = v20;

        uint64_t v17 = (_OWORD *)((char *)v17 + 24);
        --v16;
      }
      while (v16);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      return MEMORY[0x263F8EE78];
    }
  }
  return v3;
}

uint64_t MLHandActionClassifier.predictions(from:)(uint64_t a1)
{
  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation3URLVG_Say8CreateML22MLHandActionClassifierV10PredictionVGsAE_pTg5((uint64_t)partial apply for closure #1 in MLHandActionClassifier.predictions(from:), (uint64_t)&v2, a1);
}

uint64_t closure #1 in MLHandActionClassifier.predictions(from:)@<X0>(uint64_t a1@<X0>, void *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result = MLHandActionClassifier.modelPrediction(on:using:)(a1);
  if (v3) {
    *a2 = v3;
  }
  else {
    *a3 = result;
  }
  return result;
}

void MLHandActionClassifier.modelPrediction(on:using:)()
{
  OUTLINED_FUNCTION_30_15();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v61 = *MEMORY[0x263EF8340];
  id v6 = objc_msgSend(v4, sel_shape);
  type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v8 != 3) {
    goto LABEL_25;
  }
  id v9 = objc_msgSend(v5, sel_shape);
  uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_2272CB490;
  uint64_t v12 = v0 + *(int *)(type metadata accessor for MLHandActionClassifier() + 28);
  *(void *)(v11 + 32) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, *(void *)(v12+ *(int *)(type metadata accessor for MLHandActionClassifier.ModelParameters(0)+ 28)));
  *(void *)(v11 + 40) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, 3);
  *(void *)(v11 + 48) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, 21);
  specialized Array._endMutation()();
  LOBYTE(v11) = specialized static Array<A>.== infix(_:_:)(v10, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v11)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2272CB370;
    *(void *)(inited + 32) = 0x7365736F70;
    *(void *)(inited + 40) = 0xE500000000000000;
    id v14 = objc_msgSend(self, sel_featureValueWithMultiArray_, v5);
    *(void *)(inited + 72) = type metadata accessor for NSAttributedString(0, &lazy cache variable for type metadata for MLFeatureValue);
    *(void *)(inited + 48) = v14;
    Dictionary.init(dictionaryLiteral:)();
    objc_allocWithZone(MEMORY[0x263F00D38]);
    id v15 = @nonobjc MLDictionaryFeatureProvider.init(dictionary:)();
    if (!v1)
    {
      uint64_t v16 = v15;
      v59[0] = 0;
      id v17 = objc_msgSend(v3, sel_predictionFromFeatures_error_, v15, v59);
      if (v17)
      {
        id v18 = v17;
        id v19 = v59[0];
        uint64_t v20 = (void *)MEMORY[0x22A674AE0](0xD000000000000012, 0x80000002272D41B0);
        id v21 = objc_msgSend(v18, sel_featureValueForName_, v20);

        if (v21)
        {
          id v22 = objc_msgSend(v21, sel_dictionaryValue);

          uint64_t v23 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v24 = *(void *)(v23 + 16);
          if (v24)
          {
            uint64_t v41 = v16;
            uint64_t v46 = MEMORY[0x263F8EE78];
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v25 = specialized Dictionary.startIndex.getter(v23);
            if (v25 < 0 || (unint64_t v27 = v25, v25 >= 1 << *(unsigned char *)(v23 + 32)))
            {
LABEL_32:
              __break(1u);
LABEL_33:
              __break(1u);
LABEL_34:
              __break(1u);
LABEL_35:
              __break(1u);
LABEL_36:
              __break(1u);
LABEL_37:
              __break(1u);
            }
            uint64_t v28 = v23 + 64;
            while (1)
            {
              if ((*(void *)(v28 + 8 * (v27 >> 6)) & (1 << v27)) == 0) {
                goto LABEL_33;
              }
              if (v26 != *(_DWORD *)(v23 + 36)) {
                goto LABEL_34;
              }
              int v43 = v26;
              outlined init with copy of AnyHashable(*(void *)(v23 + 48) + 40 * v27, (uint64_t)v59);
              uint64_t v60 = *(void **)(*(void *)(v23 + 56) + 8 * v27);
              uint64_t v29 = v60;
              outlined init with copy of AnyHashable((uint64_t)v59, (uint64_t)v57);
              *((void *)&v58 + 1) = v29;
              v55[0] = v57[0];
              v55[1] = v57[1];
              long long v56 = v58;
              id v30 = v29;
              _s10Foundation3URLVSgWOhTm_0((uint64_t)v59, &demangling cache variable for type metadata for (key: AnyHashable, value: NSNumber));
              outlined init with copy of AnyHashable((uint64_t)v55, (uint64_t)v49);
              uint64_t v51 = *((void *)&v56 + 1);
              long long v52 = v49[0];
              long long v53 = v49[1];
              uint64_t v54 = v50;
              swift_dynamicCast();
              outlined init with copy of AnyHashable((uint64_t)v55, (uint64_t)v47);
              uint64_t v48 = *((void *)&v56 + 1);
              objc_msgSend(*((id *)&v56 + 1), sel_doubleValue);
              uint64_t v32 = v31;
              outlined destroy of AnyHashable((uint64_t)v47);
              _s10Foundation3URLVSgWOhTm_0((uint64_t)v55, &demangling cache variable for type metadata for (key: AnyHashable, value: NSNumber));
              uint64_t v33 = v46;
              uint64_t v42 = v24;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                uint64_t v33 = v46;
              }
              unint64_t v34 = *(void *)(v33 + 16);
              if (v34 >= *(void *)(v33 + 24) >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                uint64_t v33 = v46;
              }
              *(void *)(v33 + 16) = v34 + 1;
              uint64_t v35 = (void *)(v33 + 24 * v34);
              v35[4] = v44;
              v35[5] = v45;
              v35[6] = v32;
              if ((uint64_t)v27 >= -(-1 << *(unsigned char *)(v23 + 32))) {
                goto LABEL_35;
              }
              uint64_t v28 = v23 + 64;
              if ((*(void *)(v23 + 64 + 8 * (v27 >> 6)) & (1 << v27)) == 0) {
                goto LABEL_36;
              }
              if (v43 != *(_DWORD *)(v23 + 36)) {
                goto LABEL_37;
              }
              uint64_t v36 = _HashTable.occupiedBucket(after:)();
              --v24;
              if (v42 == 1) {
                break;
              }
              unint64_t v27 = v36;
              if ((v36 & 0x8000000000000000) == 0)
              {
                int v26 = *(_DWORD *)(v23 + 36);
                if (v36 < 1 << *(unsigned char *)(v23 + 32)) {
                  continue;
                }
              }
              goto LABEL_32;
            }
            swift_bridgeObjectRelease();
            swift_unknownObjectRelease();
          }
          else
          {
            swift_bridgeObjectRelease();
            swift_unknownObjectRelease();
          }
        }
        else
        {
          lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
          OUTLINED_FUNCTION_85();
          OUTLINED_FUNCTION_19_0(v40, 0xD000000000000028);

          swift_unknownObjectRelease();
        }
      }
      else
      {
        id v39 = v59[0];
        _convertNSErrorToError(_:)();

        swift_willThrow();
      }
    }
  }
  else
  {
LABEL_25:
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_94();
    OUTLINED_FUNCTION_19_0(v38, v37 + 19);
  }
  OUTLINED_FUNCTION_33_14();
}

void MLHandActionClassifier.evaluation(on:)()
{
  MLHandActionClassifier.DataSource.keypointsWithAnnotations(targetFrameRate:)((uint64_t)&v3);
  if (!v0)
  {
    uint64_t v1 = v3;
    char v2 = v4;
    type metadata accessor for MLHandActionClassifier();
    MLHandActionClassifier.evaluation(on:parameters:)();
    outlined consume of Result<_DataTable, Error>(v1, v2);
  }
}

void MLHandActionClassifier.addHandActionClassifierSpecificMetadata(_:)()
{
  OUTLINED_FUNCTION_19_4();
  char v2 = v1;
  char v4 = v3;
  uint64_t v5 = type metadata accessor for MLHandActionClassifier();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_33();
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = v2[1];
  if (v10)
  {
    id v90 = v0;
    uint64_t v88 = v5;
    id v87 = v4;
    uint64_t v89 = v10;
    uint64_t v11 = *v2;
    uint64_t v13 = v2[2];
    uint64_t v12 = v2[3];
    uint64_t v15 = v2[4];
    uint64_t v14 = v2[5];
    uint64_t v16 = v2[6];
    unint64_t v17 = v2[7];
    uint64_t v18 = v2[8];
    if (!v18)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_2272CB4D0;
      *(void *)(inited + 32) = 0xD000000000000016;
      *(void *)(inited + 40) = 0x80000002272D8510;
      OUTLINED_FUNCTION_43_10();
      id v90 = 0xD000000000000011;
      uint64_t v41 = v12;
      uint64_t v88 = type metadata accessor for MLHandActionClassifier.ModelParameters(0);
      v92[0] = *(void *)(*(int *)(v88 + 28) - 0x2FFFFFFFFFFFFFEFLL);
      uint64_t v42 = v89;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of MLModelMetadata?(v11, v89);
      swift_bridgeObjectRetain();
      *(void *)(inited + 48) = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(inited + 56) = v43;
      *(void *)(inited + 64) = 0xD000000000000011;
      *(void *)(inited + 72) = 0x80000002272D8530;
      uint64_t v44 = v41;
      *(void *)(inited + 80) = Double.description.getter();
      *(void *)(inited + 88) = v45;
      uint64_t v35 = Dictionary.init(dictionaryLiteral:)();
LABEL_33:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      char v4 = v87;
      uint64_t *v87 = v11;
      v4[1] = v42;
      v4[2] = v13;
      v4[3] = v44;
      v4[4] = v15;
      v4[5] = v14;
      v4[6] = v16;
      goto LABEL_34;
    }
    id v19 = (char *)&v74 - v8;
    uint64_t v80 = v9;
    uint64_t v20 = v89;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v85 = v11;
    uint64_t v84 = v13;
    uint64_t v83 = v12;
    uint64_t v82 = v15;
    unint64_t v86 = v17;
    outlined copy of MLModelMetadata?(v11, v20);
    swift_bridgeObjectRetain();
    uint64_t v21 = specialized Dictionary.subscript.getter(0xD000000000000016, 0x80000002272D8510, v18);
    uint64_t v81 = v16;
    if (v22)
    {
      uint64_t v23 = v21;
      unint64_t v24 = v22;
      uint64_t v79 = "Number of Labels";
      uint64_t v25 = v88;
      uint64_t v26 = OUTLINED_FUNCTION_31_12();
      uint64_t v27 = *(int *)(v26 + 28);
      v92[0] = *(void *)(0x80000002272D8510 + v27);
      if (v23 == dispatch thunk of CustomStringConvertible.description.getter() && v24 == v28)
      {
        swift_bridgeObjectRelease();
LABEL_14:
        swift_bridgeObjectRelease();
        uint64_t v35 = v18;
        goto LABEL_22;
      }
      char v30 = OUTLINED_FUNCTION_15_22();
      swift_bridgeObjectRelease();
      if (v30) {
        goto LABEL_14;
      }
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v47 = type metadata accessor for Logger();
      __swift_project_value_buffer(v47, (uint64_t)static MLHandActionClassifier.logger);
      uint64_t v48 = (uint64_t)v19;
      _s8CreateML27MLTrainingSessionParametersVWOcTm_4((uint64_t)v90, (uint64_t)v19, (void (*)(void))type metadata accessor for MLHandActionClassifier);
      swift_bridgeObjectRetain();
      uint64_t v49 = Logger.logObject.getter();
      os_log_type_t v50 = static os_log_type_t.info.getter();
      int v51 = v50;
      if (os_log_type_enabled(v49, v50))
      {
        uint64_t v52 = swift_slowAlloc();
        os_log_t v76 = v49;
        uint64_t v53 = v52;
        uint64_t v77 = swift_slowAlloc();
        v92[0] = v77;
        *(_DWORD *)uint64_t v53 = 136315394;
        int v75 = v51;
        swift_bridgeObjectRetain();
        uint64_t v54 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v92);
        OUTLINED_FUNCTION_16_22(v54);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v53 + 12) = 2048;
        uint64_t v55 = *(void *)(v48 + *(int *)(v25 + 28) + *(int *)(v26 + 28));
        outlined destroy of MLHandActionClassifier.ModelParameters(v48, (void (*)(void))type metadata accessor for MLHandActionClassifier);
        uint64_t v91 = v55;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        os_log_t v56 = v76;
        _os_log_impl(&dword_22704D000, v76, (os_log_type_t)v75, "Prediction window size %s is set incorrectly, change it to %ld frames.", (uint8_t *)v53, 0x16u);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_42_11();
        OUTLINED_FUNCTION_42_11();
      }
      else
      {
        outlined destroy of MLHandActionClassifier.ModelParameters(v48, (void (*)(void))type metadata accessor for MLHandActionClassifier);

        swift_bridgeObjectRelease_n();
      }
      v92[0] = *(void *)(v78 + v27);
      dispatch thunk of CustomStringConvertible.description.getter();
      swift_isUniquelyReferenced_nonNull_native();
      v92[0] = v18;
    }
    else
    {
      uint64_t v46 = (char *)v90 + *(int *)(v88 + 28);
      v92[0] = *(void *)&v46[*(int *)(type metadata accessor for MLHandActionClassifier.ModelParameters(0) + 28)];
      dispatch thunk of CustomStringConvertible.description.getter();
      swift_isUniquelyReferenced_nonNull_native();
      v92[0] = v18;
    }
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
    uint64_t v35 = v92[0];
    swift_bridgeObjectRelease();
LABEL_22:
    uint64_t v57 = specialized Dictionary.subscript.getter(0xD000000000000011, 0x80000002272D8530, v35);
    if (v58)
    {
      uint64_t v59 = v57;
      unint64_t v60 = v58;
      uint64_t v61 = OUTLINED_FUNCTION_31_12();
      uint64_t v79 = (const char *)*(int *)(v61 + 40);
      if (v59 == Double.description.getter() && v60 == v62)
      {
        OUTLINED_FUNCTION_39_12();
        swift_bridgeObjectRelease();
      }
      else
      {
        char v64 = OUTLINED_FUNCTION_15_22();
        swift_bridgeObjectRelease();
        if ((v64 & 1) == 0)
        {
          uint64_t v77 = v14;
          if (one-time initialization token for logger != -1) {
            swift_once();
          }
          uint64_t v65 = type metadata accessor for Logger();
          __swift_project_value_buffer(v65, (uint64_t)static MLHandActionClassifier.logger);
          uint64_t v66 = v80;
          _s8CreateML27MLTrainingSessionParametersVWOcTm_4((uint64_t)v90, v80, (void (*)(void))type metadata accessor for MLHandActionClassifier);
          swift_bridgeObjectRetain();
          uint64_t v67 = Logger.logObject.getter();
          os_log_type_t v68 = static os_log_type_t.info.getter();
          int v69 = v68;
          id v90 = v67;
          if (os_log_type_enabled(v67, v68))
          {
            uint64_t v70 = swift_slowAlloc();
            LODWORD(v76) = v69;
            uint64_t v71 = v70;
            v92[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v71 = 136315394;
            swift_bridgeObjectRetain();
            uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v60, v92);
            OUTLINED_FUNCTION_16_22(v72);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v71 + 12) = 2048;
            uint64_t v91 = *(void *)(v66 + *(int *)(v88 + 28) + *(int *)(v61 + 40));
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            outlined destroy of MLHandActionClassifier.ModelParameters(v66, (void (*)(void))type metadata accessor for MLHandActionClassifier);
            uint64_t v73 = v90;
            _os_log_impl(&dword_22704D000, v90, (os_log_type_t)v76, "Target frame rate %s is set incorrectly, change it to %f.", (uint8_t *)v71, 0x16u);
            swift_arrayDestroy();
            OUTLINED_FUNCTION_42_11();
            OUTLINED_FUNCTION_42_11();
          }
          else
          {
            swift_bridgeObjectRelease_n();
            outlined destroy of MLHandActionClassifier.ModelParameters(v66, (void (*)(void))type metadata accessor for MLHandActionClassifier);
          }
          uint64_t v11 = v85;
          uint64_t v18 = v81;
          uint64_t v14 = v77;
          Double.description.getter();
          swift_isUniquelyReferenced_nonNull_native();
          v92[0] = v35;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
          uint64_t v35 = v92[0];
          swift_bridgeObjectRelease();
          unint64_t v17 = v86;
          goto LABEL_32;
        }
        OUTLINED_FUNCTION_39_12();
      }
    }
    else
    {
      uint64_t v18 = v81;
      OUTLINED_FUNCTION_43_10();
      type metadata accessor for MLHandActionClassifier.ModelParameters(0);
      Double.description.getter();
      swift_isUniquelyReferenced_nonNull_native();
      v92[0] = v35;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
      uint64_t v35 = v92[0];
    }
    swift_bridgeObjectRelease();
    unint64_t v17 = v86;
    uint64_t v11 = v85;
LABEL_32:
    swift_bridgeObjectRelease();
    uint64_t v13 = v84;
    uint64_t v44 = v83;
    uint64_t v15 = v82;
    uint64_t v42 = v89;
    uint64_t v16 = v18;
    goto LABEL_33;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
  uint64_t v31 = swift_initStackObject();
  *(_OWORD *)(v31 + 16) = xmmword_2272CB4D0;
  *(void *)(v31 + 32) = 0xD000000000000016;
  *(void *)(v31 + 40) = 0x80000002272D8510;
  uint64_t v32 = (char *)v0 + *(int *)(v5 + 28);
  v92[0] = *(void *)&v32[*(int *)(type metadata accessor for MLHandActionClassifier.ModelParameters(0) + 28)];
  *(void *)(v31 + 48) = dispatch thunk of CustomStringConvertible.description.getter();
  *(void *)(v31 + 56) = v33;
  *(void *)(v31 + 64) = 0xD000000000000011;
  *(void *)(v31 + 72) = 0x80000002272D8530;
  *(void *)(v31 + 80) = Double.description.getter();
  *(void *)(v31 + 88) = v34;
  uint64_t v35 = Dictionary.init(dictionaryLiteral:)();
  uint64_t v36 = NSFullUserName();
  uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v39 = v38;

  uint64_t *v4 = v37;
  v4[1] = v39;
  v4[2] = 0xD000000000000033;
  v4[3] = 0x80000002272D4DC0;
  v4[4] = 0;
  v4[5] = 0;
  v4[6] = 49;
  unint64_t v17 = 0xE100000000000000;
LABEL_34:
  v4[7] = v17;
  v4[8] = v35;
  OUTLINED_FUNCTION_12_4();
}

void MLHandActionClassifier.writeLegacyModel(to:metadata:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  type metadata accessor for Model();
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_33_0();
  uint64_t v24 = v7;
  uint64_t v8 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v22 = v9;
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_24_4();
  uint64_t v11 = *v3;
  uint64_t v12 = v3[2];
  uint64_t v13 = v3[3];
  uint64_t v20 = v3[4];
  uint64_t v21 = v3[1];
  uint64_t v18 = v3[6];
  uint64_t v19 = v3[5];
  uint64_t v14 = v3[7];
  uint64_t v15 = v3[8];
  uint64_t v17 = v14;
  static _ValidationUtilities.validateWriteLocation(atURL:defaultName:fileExtension:)(v5, 0xD000000000000014, (void *)0x80000002272D3FA0, 0x6C65646F6D6C6DLL, (void *)0xE700000000000000, v1);
  if (!v0)
  {
    v23[0] = v11;
    v23[1] = v21;
    _OWORD v23[2] = v12;
    v23[3] = v13;
    v23[4] = v20;
    v23[5] = v19;
    v23[6] = v18;
    v23[7] = v17;
    v23[8] = v15;
    MLHandActionClassifier.GraphCNN.export(metadata:)(v23, v24);
    Model.write(to:)();
    OUTLINED_FUNCTION_25_0();
    v16();
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v1, v8);
  }
  OUTLINED_FUNCTION_8_1();
}

uint64_t outlined consume of MLModelMetadata?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t type metadata accessor for MLHandActionClassifier()
{
  uint64_t result = type metadata singleton initialization cache for MLHandActionClassifier;
  if (!type metadata singleton initialization cache for MLHandActionClassifier) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void MLHandActionClassifier.write(toFile:metadata:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v24 = v2;
  uint64_t v4 = v3;
  uint64_t v5 = type metadata accessor for URL.DirectoryHint();
  OUTLINED_FUNCTION_0();
  uint64_t v7 = v6;
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_32();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v10 = OUTLINED_FUNCTION_17(v9);
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_24_8();
  uint64_t v11 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v13 = v12;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v17 = *v4;
  long long v22 = v4[1];
  long long v23 = v17;
  long long v18 = v4[2];
  long long v20 = v4[3];
  long long v21 = v18;
  uint64_t v19 = *((void *)v4 + 8);
  __swift_storeEnumTagSinglePayload(v0, 1, 1, v11);
  (*(void (**)(uint64_t, void, uint64_t))(v7 + 104))(v1, *MEMORY[0x263F06E50], v5);
  swift_bridgeObjectRetain();
  URL.init(filePath:directoryHint:relativeTo:)();
  long long v25 = v23;
  long long v26 = v22;
  long long v27 = v21;
  long long v28 = v20;
  uint64_t v29 = v19;
  MLHandActionClassifier.write(to:metadata:)();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v11);
  OUTLINED_FUNCTION_8_1();
}

void MLHandActionClassifier.debugDescription.getter()
{
  OUTLINED_FUNCTION_19_4();
  type metadata accessor for MLClassifierMetrics.Contents(0);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_14_0();
  uint64_t v3 = type metadata accessor for MLHandActionClassifier();
  unint64_t v4 = MLHandActionClassifier.ModelParameters.description.getter();
  uint64_t v6 = v5;
  unint64_t v7 = MLClassifierMetrics.accuracyDescription.getter();
  uint64_t v9 = v8;
  _s8CreateML27MLTrainingSessionParametersVWOcTm_4(v0 + *(int *)(v3 + 36), v1, (void (*)(void))type metadata accessor for MLClassifierMetrics.Contents);
  LODWORD(v3) = swift_getEnumCaseMultiPayload();
  outlined destroy of MLHandActionClassifier.ModelParameters(v1, (void (*)(void))type metadata accessor for MLClassifierMetrics.Contents);
  unint64_t v10 = MLClassifierMetrics.accuracyDescription.getter();
  uint64_t v12 = v11;
  v13._uint64_t countAndFlagsBits = v4;
  v13._id object = v6;
  String.append(_:)(v13);
  v14._uint64_t countAndFlagsBits = v7;
  v14._id object = v9;
  String.append(_:)(v14);
  v15._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  v15._id object = (void *)0x80000002272D3FE0;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  if (v3 <= 1)
  {
    v16._uint64_t countAndFlagsBits = v10;
    v16._id object = v12;
    String.append(_:)(v16);
    v17._uint64_t countAndFlagsBits = 0xD000000000000020;
    v17._id object = (void *)0x80000002272D4000;
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_12_4();
}

NSAttributedString MLHandActionClassifier.playgroundDescription.getter@<X0>(NSAttributedString *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  MLHandActionClassifier.debugDescription.getter();
  result.super.Class isa = NSAttributedString.__allocating_init(string:)(v3).super.isa;
  a1[3].super.Class isa = (Class)v2;
  a1->super.Class isa = result.super.isa;
  return result;
}

id @nonobjc MLDictionaryFeatureProvider.init(dictionary:)()
{
  v6[1] = *(id *)MEMORY[0x263EF8340];
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v6[0] = 0;
  id v2 = objc_msgSend(v0, sel_initWithDictionary_error_, isa, v6);

  if (v2)
  {
    id v3 = v6[0];
  }
  else
  {
    id v4 = v6[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v2;
}

uint64_t sub_22717B9F0()
{
  OUTLINED_FUNCTION_19_4();
  uint64_t v1 = *(void *)(type metadata accessor for MLHandActionClassifier.ModelParameters(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  outlined consume of Result<_DataTable, Error>(*(id *)(v0 + 16), *(unsigned char *)(v0 + 24));
  outlined consume of Result<_DataTable, Error>(*(id *)(v0 + 32), *(unsigned char *)(v0 + 40));
  uint64_t v3 = v0 + v2;
  type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for MLHandActionClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v6 = type metadata accessor for URL();
        OUTLINED_FUNCTION_8();
        uint64_t v8 = *(void (**)(unint64_t, uint64_t))(v7 + 8);
        v8(v0 + v2, v6);
        uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v8(v3 + *(int *)(v9 + 48), v6);
        OUTLINED_FUNCTION_89();
        OUTLINED_FUNCTION_89();
        OUTLINED_FUNCTION_89();
        goto LABEL_9;
      case 1u:
      case 2u:
        type metadata accessor for URL();
        OUTLINED_FUNCTION_8();
        uint64_t v4 = OUTLINED_FUNCTION_22_1();
        v5(v4);
        break;
      case 3u:
        outlined consume of Result<_DataTable, Error>(*(id *)v3, *(unsigned char *)(v3 + 8));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_9;
      case 4u:
        outlined consume of Result<_DataTable, Error>(*(id *)v3, *(unsigned char *)(v3 + 8));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_9;
      case 5u:
        type metadata accessor for DataFrame();
        OUTLINED_FUNCTION_8();
        uint64_t v10 = OUTLINED_FUNCTION_22_1();
        v11(v10);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        OUTLINED_FUNCTION_89();
        OUTLINED_FUNCTION_89();
        goto LABEL_9;
      case 6u:
        type metadata accessor for DataFrame();
        OUTLINED_FUNCTION_8();
        uint64_t v12 = OUTLINED_FUNCTION_22_1();
        v13(v12);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        OUTLINED_FUNCTION_89();
        OUTLINED_FUNCTION_89();
        OUTLINED_FUNCTION_89();
LABEL_9:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
  }
  OUTLINED_FUNCTION_12_4();
  return MEMORY[0x270FA0238](v14, v15, v16);
}

uint64_t partial apply for closure #1 in MLHandActionClassifier.init(trainingData:parameters:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for MLHandActionClassifier.ModelParameters(0) - 8);
  uint64_t v5 = *(void **)(v1 + 16);
  char v6 = *(unsigned char *)(v1 + 24);
  uint64_t v7 = *(void **)(v1 + 32);
  char v8 = *(unsigned char *)(v1 + 40);
  uint64_t v9 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = partial apply for closure #1 in MLLogisticRegressionClassifier.init(trainingData:targetColumn:featureColumns:parameters:);
  return closure #1 in MLHandActionClassifier.init(trainingData:parameters:)(a1, v5, v6, v7, v8, v9);
}

uint64_t outlined init with take of MLHandActionClassifier.ModelParameters(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_8();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t partial apply for closure #1 in MLHandActionClassifier.init(checkpoint:)()
{
  OUTLINED_FUNCTION_11();
  uint64_t v2 = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v3;
  *uint64_t v3 = v0;
  v3[1] = partial apply for closure #1 in MLLogisticRegressionClassifier.init(checkpoint:);
  return closure #1 in MLHandActionClassifier.init(checkpoint:)(v2);
}

uint64_t partial apply for closure #1 in MLHandActionClassifier.predictions(from:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  return closure #1 in MLHandActionClassifier.predictions(from:)(a1, a2, a3);
}

void *initializeBufferWithCopyOfBuffer for MLHandActionClassifier(void *a1, void *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (void *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a3;
    char v6 = a2;
    uint64_t v7 = a1;
    char v8 = (void *)a2[2];
    a1[1] = a2[1];
    a1[2] = v8;
    uint64_t v9 = *(int *)(a3 + 28);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
    swift_bridgeObjectRetain();
    swift_retain();
    id v13 = v8;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for MLHandActionClassifier.DataSource();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
        case 2u:
          uint64_t v14 = type metadata accessor for URL();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v10, v11, v14);
          goto LABEL_15;
        case 3u:
          id v35 = *(id *)v11;
          char v36 = v11[8];
          outlined copy of Result<_DataTable, Error>(*(id *)v11, v36);
          *(void *)uint64_t v10 = v35;
          v10[8] = v36;
          uint64_t v37 = *((void *)v11 + 3);
          *((void *)v10 + 2) = *((void *)v11 + 2);
          *((void *)v10 + 3) = v37;
          uint64_t v38 = *((void *)v11 + 5);
          *((void *)v10 + 4) = *((void *)v11 + 4);
          *((void *)v10 + 5) = v38;
          uint64_t v39 = *((void *)v11 + 7);
          *((void *)v10 + 6) = *((void *)v11 + 6);
          *((void *)v10 + 7) = v39;
          goto LABEL_11;
        case 4u:
          id v40 = *(id *)v11;
          char v41 = v11[8];
          outlined copy of Result<_DataTable, Error>(*(id *)v11, v41);
          *(void *)uint64_t v10 = v40;
          v10[8] = v41;
          uint64_t v42 = *((void *)v11 + 3);
          *((void *)v10 + 2) = *((void *)v11 + 2);
          *((void *)v10 + 3) = v42;
          uint64_t v43 = *((void *)v11 + 5);
          *((void *)v10 + 4) = *((void *)v11 + 4);
          *((void *)v10 + 5) = v43;
          uint64_t v44 = *((void *)v11 + 7);
          *((void *)v10 + 6) = *((void *)v11 + 6);
          *((void *)v10 + 7) = v44;
          uint64_t v45 = v5;
          uint64_t v46 = v7;
          uint64_t v47 = *((void *)v11 + 9);
          *((void *)v10 + 8) = *((void *)v11 + 8);
          *((void *)v10 + 9) = v47;
          goto LABEL_13;
        case 5u:
          uint64_t v48 = type metadata accessor for DataFrame();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v48 - 8) + 16))(v10, v11, v48);
          uint64_t v49 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
          uint64_t v50 = v49[12];
          int v51 = &v10[v50];
          uint64_t v52 = &v11[v50];
          uint64_t v54 = *(void *)v52;
          uint64_t v53 = *((void *)v52 + 1);
          *(void *)int v51 = v54;
          *((void *)v51 + 1) = v53;
          uint64_t v55 = v49[16];
          os_log_t v56 = &v10[v55];
          uint64_t v57 = &v11[v55];
          uint64_t v58 = *((void *)v57 + 1);
          *(void *)os_log_t v56 = *(void *)v57;
          *((void *)v56 + 1) = v58;
          uint64_t v59 = v49[20];
          unint64_t v60 = &v10[v59];
          uint64_t v61 = &v11[v59];
          uint64_t v62 = *((void *)v61 + 1);
          *(void *)unint64_t v60 = *(void *)v61;
          *((void *)v60 + 1) = v62;
LABEL_11:
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          break;
        case 6u:
          uint64_t v63 = type metadata accessor for DataFrame();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v63 - 8) + 16))(v10, v11, v63);
          char v64 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          uint64_t v65 = v64[12];
          uint64_t v66 = &v10[v65];
          uint64_t v67 = &v11[v65];
          uint64_t v69 = *(void *)v67;
          uint64_t v68 = *((void *)v67 + 1);
          *(void *)uint64_t v66 = v69;
          *((void *)v66 + 1) = v68;
          uint64_t v70 = v64[16];
          uint64_t v71 = &v10[v70];
          uint64_t v72 = &v11[v70];
          uint64_t v73 = *((void *)v72 + 1);
          *(void *)uint64_t v71 = *(void *)v72;
          *((void *)v71 + 1) = v73;
          uint64_t v74 = v64[20];
          int v75 = &v10[v74];
          os_log_t v76 = &v11[v74];
          uint64_t v77 = *((void *)v76 + 1);
          *(void *)int v75 = *(void *)v76;
          *((void *)v75 + 1) = v77;
          uint64_t v78 = v64[24];
          uint64_t v79 = &v10[v78];
          uint64_t v80 = &v11[v78];
          uint64_t v45 = v5;
          uint64_t v46 = v7;
          uint64_t v81 = *((void *)v80 + 1);
          *(void *)uint64_t v79 = *(void *)v80;
          *((void *)v79 + 1) = v81;
LABEL_13:
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v7 = v46;
          uint64_t v5 = v45;
          break;
        default:
          uint64_t v15 = type metadata accessor for URL();
          uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
          v16(v10, v11, v15);
          uint64_t v115 = v5;
          uint64_t v17 = v7;
          long long v18 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          v16(&v10[v18[12]], &v11[v18[12]], v15);
          uint64_t v19 = v18[16];
          long long v20 = &v10[v19];
          long long v21 = &v11[v19];
          uint64_t v22 = *((void *)v21 + 1);
          *(void *)long long v20 = *(void *)v21;
          *((void *)v20 + 1) = v22;
          uint64_t v23 = v18[20];
          uint64_t v24 = &v10[v23];
          long long v25 = &v11[v23];
          uint64_t v26 = *((void *)v25 + 1);
          *(void *)uint64_t v24 = *(void *)v25;
          *((void *)v24 + 1) = v26;
          uint64_t v27 = v18[24];
          long long v28 = &v10[v27];
          uint64_t v29 = &v11[v27];
          uint64_t v30 = *((void *)v29 + 1);
          *(void *)long long v28 = *(void *)v29;
          *((void *)v28 + 1) = v30;
          uint64_t v31 = v18[28];
          uint64_t v32 = &v10[v31];
          uint64_t v33 = &v11[v31];
          uint64_t v34 = *((void *)v33 + 1);
          *(void *)uint64_t v32 = *(void *)v33;
          *((void *)v32 + 1) = v34;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v7 = v17;
          uint64_t v5 = v115;
          break;
      }
      swift_bridgeObjectRetain();
LABEL_15:
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
    }
    uint64_t v82 = (int *)type metadata accessor for MLHandActionClassifier.ModelParameters(0);
    *(void *)&v10[v82[5]] = *(void *)&v11[v82[5]];
    *(void *)&v10[v82[6]] = *(void *)&v11[v82[6]];
    *(void *)&v10[v82[7]] = *(void *)&v11[v82[7]];
    *(void *)&v10[v82[8]] = *(void *)&v11[v82[8]];
    *(void *)&v10[v82[10]] = *(void *)&v11[v82[10]];
    uint64_t v83 = *(int *)(v5 + 32);
    uint64_t v84 = (id *)((char *)v7 + v83);
    uint64_t v85 = (id *)((char *)v6 + v83);
    type metadata accessor for MLClassifierMetrics.Contents(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      id v94 = *v85;
      id v95 = *v85;
      id *v84 = v94;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      id *v84 = *v85;
      uint64_t v87 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v88 = *(int *)(v87 + 20);
      uint64_t v89 = (char *)v84 + v88;
      uint64_t v114 = v7;
      id v90 = (char *)v85 + v88;
      uint64_t v91 = type metadata accessor for DataFrame();
      uint64_t v113 = v6;
      unsigned __int8 v92 = *(void (**)(char *, char *, uint64_t))(*(void *)(v91 - 8) + 16);
      uint64_t v93 = v90;
      uint64_t v7 = v114;
      v92(v89, v93, v91);
      v92((char *)v84 + *(int *)(v87 + 24), (char *)v85 + *(int *)(v87 + 24), v91);
      char v6 = v113;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v96 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v96 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v97 = __swift_instantiateConcreteTypeFromMangledName(v96);
      (*(void (**)(id *, id *, uint64_t))(*(void *)(v97 - 8) + 16))(v84, v85, v97);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v98 = *(int *)(v5 + 36);
    Swift::String v99 = (void **)((char *)v7 + v98);
    Swift::String v100 = (void **)((char *)v6 + v98);
    int v101 = swift_getEnumCaseMultiPayload();
    if (v101 == 2)
    {
      uint64_t v108 = *v100;
      id v109 = v108;
      *Swift::String v99 = v108;
    }
    else if (v101 == 1)
    {
      *Swift::String v99 = *v100;
      uint64_t v102 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v103 = *(int *)(v102 + 20);
      uint64_t v104 = (char *)v99 + v103;
      uint64_t v105 = (char *)v100 + v103;
      uint64_t v106 = type metadata accessor for DataFrame();
      uint64_t v107 = *(void (**)(char *, char *, uint64_t))(*(void *)(v106 - 8) + 16);
      v107(v104, v105, v106);
      v107((char *)v99 + *(int *)(v102 + 24), (char *)v100 + *(int *)(v102 + 24), v106);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v110 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v110 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v111 = __swift_instantiateConcreteTypeFromMangledName(v110);
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v111 - 8) + 16))(v99, v100, v111);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v7;
}

void destroy for MLHandActionClassifier(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_release();

  uint64_t v4 = a1 + a2[7];
  type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for MLHandActionClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v6 = type metadata accessor for URL();
        uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
        v7(v4, v6);
        uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v7(v4 + *(int *)(v8 + 48), v6);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_9;
      case 1u:
      case 2u:
        uint64_t v5 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
        break;
      case 3u:
        outlined consume of Result<_DataTable, Error>(*(id *)v4, *(unsigned char *)(v4 + 8));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_9;
      case 4u:
        outlined consume of Result<_DataTable, Error>(*(id *)v4, *(unsigned char *)(v4 + 8));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_9;
      case 5u:
        uint64_t v9 = type metadata accessor for DataFrame();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v4, v9);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_9;
      case 6u:
        uint64_t v10 = type metadata accessor for DataFrame();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v4, v10);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_9:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
  }
  uint64_t v11 = (id *)(a1 + a2[8]);
  type metadata accessor for MLClassifierMetrics.Contents(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:

      break;
    case 1:
      uint64_t v14 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v15 = (char *)v11 + *(int *)(v14 + 20);
      uint64_t v16 = type metadata accessor for DataFrame();
      uint64_t v17 = *(void (**)(char *, uint64_t))(*(void *)(v16 - 8) + 8);
      v17(v15, v16);
      v17((char *)v11 + *(int *)(v14 + 24), v16);
      break;
    case 0:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        id v13 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        id v13 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(v13);
      (*(void (**)(id *, uint64_t))(*(void *)(v18 - 8) + 8))(v11, v18);
      break;
  }
  uint64_t v19 = (void **)(a1 + a2[9]);
  int v20 = swift_getEnumCaseMultiPayload();
  if (v20 == 2)
  {
    uint64_t v22 = *v19;
  }
  else
  {
    if (v20 == 1)
    {
      uint64_t v23 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v24 = (char *)v19 + *(int *)(v23 + 20);
      uint64_t v25 = type metadata accessor for DataFrame();
      uint64_t v30 = *(void (**)(void **, uint64_t))(*(void *)(v25 - 8) + 8);
      ((void (*)(void *__return_ptr, char *, uint64_t))v30)((void *)(v25 - 8), v24, v25);
      uint64_t v26 = (void **)((char *)v19 + *(int *)(v23 + 24));
      uint64_t v27 = v25;
      long long v28 = v30;
    }
    else
    {
      if (v20) {
        return;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        long long v21 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        long long v21 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(v21);
      long long v28 = *(void (**)(void **, uint64_t))(*(void *)(v29 - 8) + 8);
      uint64_t v27 = v29;
      uint64_t v26 = v19;
    }
    v28(v26, v27);
  }
}

void *initializeWithCopy for MLHandActionClassifier(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v5 = a1;
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = (void *)a2[2];
  a1[2] = v7;
  uint64_t v8 = *(int *)(a3 + 28);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  swift_bridgeObjectRetain();
  swift_retain();
  id v12 = v7;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for MLHandActionClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
      case 2u:
        uint64_t v13 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v9, v10, v13);
        goto LABEL_13;
      case 3u:
        id v33 = *(id *)v10;
        char v34 = v10[8];
        outlined copy of Result<_DataTable, Error>(*(id *)v10, v34);
        *(void *)uint64_t v9 = v33;
        v9[8] = v34;
        uint64_t v35 = *((void *)v10 + 3);
        *((void *)v9 + 2) = *((void *)v10 + 2);
        *((void *)v9 + 3) = v35;
        uint64_t v36 = *((void *)v10 + 5);
        *((void *)v9 + 4) = *((void *)v10 + 4);
        *((void *)v9 + 5) = v36;
        uint64_t v37 = *((void *)v10 + 7);
        *((void *)v9 + 6) = *((void *)v10 + 6);
        *((void *)v9 + 7) = v37;
        goto LABEL_9;
      case 4u:
        id v38 = *(id *)v10;
        char v39 = v10[8];
        outlined copy of Result<_DataTable, Error>(*(id *)v10, v39);
        *(void *)uint64_t v9 = v38;
        v9[8] = v39;
        uint64_t v40 = *((void *)v10 + 3);
        *((void *)v9 + 2) = *((void *)v10 + 2);
        *((void *)v9 + 3) = v40;
        uint64_t v41 = *((void *)v10 + 5);
        *((void *)v9 + 4) = *((void *)v10 + 4);
        *((void *)v9 + 5) = v41;
        uint64_t v42 = *((void *)v10 + 7);
        *((void *)v9 + 6) = *((void *)v10 + 6);
        *((void *)v9 + 7) = v42;
        uint64_t v43 = v3;
        uint64_t v44 = *((void *)v10 + 9);
        *((void *)v9 + 8) = *((void *)v10 + 8);
        *((void *)v9 + 9) = v44;
        goto LABEL_11;
      case 5u:
        uint64_t v45 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 16))(v9, v10, v45);
        uint64_t v46 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        uint64_t v47 = v46[12];
        uint64_t v48 = &v9[v47];
        uint64_t v49 = &v10[v47];
        uint64_t v51 = *(void *)v49;
        uint64_t v50 = *((void *)v49 + 1);
        *(void *)uint64_t v48 = v51;
        *((void *)v48 + 1) = v50;
        uint64_t v52 = v46[16];
        uint64_t v53 = &v9[v52];
        uint64_t v54 = &v10[v52];
        uint64_t v55 = *((void *)v54 + 1);
        *(void *)uint64_t v53 = *(void *)v54;
        *((void *)v53 + 1) = v55;
        uint64_t v56 = v46[20];
        uint64_t v57 = &v9[v56];
        uint64_t v58 = &v10[v56];
        uint64_t v59 = *((void *)v58 + 1);
        *(void *)uint64_t v57 = *(void *)v58;
        *((void *)v57 + 1) = v59;
LABEL_9:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 6u:
        uint64_t v60 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v60 - 8) + 16))(v9, v10, v60);
        uint64_t v61 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        uint64_t v62 = v61[12];
        uint64_t v63 = &v9[v62];
        char v64 = &v10[v62];
        uint64_t v66 = *(void *)v64;
        uint64_t v65 = *((void *)v64 + 1);
        *(void *)uint64_t v63 = v66;
        *((void *)v63 + 1) = v65;
        uint64_t v67 = v61[16];
        uint64_t v68 = &v9[v67];
        uint64_t v69 = &v10[v67];
        uint64_t v70 = *((void *)v69 + 1);
        *(void *)uint64_t v68 = *(void *)v69;
        *((void *)v68 + 1) = v70;
        uint64_t v71 = v61[20];
        uint64_t v72 = &v9[v71];
        uint64_t v73 = &v10[v71];
        uint64_t v74 = *((void *)v73 + 1);
        *(void *)uint64_t v72 = *(void *)v73;
        *((void *)v72 + 1) = v74;
        uint64_t v75 = v61[24];
        os_log_t v76 = &v9[v75];
        uint64_t v77 = &v10[v75];
        uint64_t v43 = v3;
        uint64_t v78 = *((void *)v77 + 1);
        *(void *)os_log_t v76 = *(void *)v77;
        *((void *)v76 + 1) = v78;
LABEL_11:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v3 = v43;
        break;
      default:
        uint64_t v14 = type metadata accessor for URL();
        uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
        v15(v9, v10, v14);
        uint64_t v110 = v3;
        uint64_t v16 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v15(&v9[v16[12]], &v10[v16[12]], v14);
        uint64_t v17 = v16[16];
        uint64_t v18 = &v9[v17];
        uint64_t v19 = &v10[v17];
        uint64_t v20 = *((void *)v19 + 1);
        *(void *)uint64_t v18 = *(void *)v19;
        *((void *)v18 + 1) = v20;
        uint64_t v21 = v16[20];
        uint64_t v22 = &v9[v21];
        uint64_t v23 = &v10[v21];
        uint64_t v24 = *((void *)v23 + 1);
        *(void *)uint64_t v22 = *(void *)v23;
        *((void *)v22 + 1) = v24;
        uint64_t v25 = v16[24];
        uint64_t v26 = &v9[v25];
        uint64_t v27 = &v10[v25];
        uint64_t v28 = *((void *)v27 + 1);
        *(void *)uint64_t v26 = *(void *)v27;
        *((void *)v26 + 1) = v28;
        uint64_t v29 = v16[28];
        uint64_t v30 = &v9[v29];
        uint64_t v31 = &v10[v29];
        uint64_t v32 = *((void *)v31 + 1);
        *(void *)uint64_t v30 = *(void *)v31;
        *((void *)v30 + 1) = v32;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v3 = v110;
        break;
    }
    swift_bridgeObjectRetain();
LABEL_13:
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  uint64_t v79 = (int *)type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  *(void *)&v9[v79[5]] = *(void *)&v10[v79[5]];
  *(void *)&v9[v79[6]] = *(void *)&v10[v79[6]];
  *(void *)&v9[v79[7]] = *(void *)&v10[v79[7]];
  *(void *)&v9[v79[8]] = *(void *)&v10[v79[8]];
  *(void *)&v9[v79[10]] = *(void *)&v10[v79[10]];
  uint64_t v80 = *(int *)(v3 + 32);
  uint64_t v81 = (id *)((char *)v5 + v80);
  uint64_t v82 = (id *)((char *)a2 + v80);
  type metadata accessor for MLClassifierMetrics.Contents(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    id v91 = *v82;
    id v92 = *v82;
    id *v81 = v91;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    id *v81 = *v82;
    uint64_t v84 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v85 = *(int *)(v84 + 20);
    unint64_t v86 = (char *)v81 + v85;
    uint64_t v111 = v3;
    uint64_t v87 = (char *)v82 + v85;
    uint64_t v88 = type metadata accessor for DataFrame();
    uint64_t v112 = v5;
    uint64_t v89 = *(void (**)(char *, char *, uint64_t))(*(void *)(v88 - 8) + 16);
    id v90 = v87;
    uint64_t v3 = v111;
    v89(v86, v90, v88);
    v89((char *)v81 + *(int *)(v84 + 24), (char *)v82 + *(int *)(v84 + 24), v88);
    uint64_t v5 = v112;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v93 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      uint64_t v93 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v94 = __swift_instantiateConcreteTypeFromMangledName(v93);
    (*(void (**)(id *, id *, uint64_t))(*(void *)(v94 - 8) + 16))(v81, v82, v94);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v95 = *(int *)(v3 + 36);
  uint64_t v96 = (void **)((char *)v5 + v95);
  uint64_t v97 = (void **)((char *)a2 + v95);
  int v98 = swift_getEnumCaseMultiPayload();
  if (v98 == 2)
  {
    uint64_t v105 = *v97;
    id v106 = v105;
    *uint64_t v96 = v105;
  }
  else if (v98 == 1)
  {
    *uint64_t v96 = *v97;
    uint64_t v99 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v100 = *(int *)(v99 + 20);
    int v101 = (char *)v96 + v100;
    uint64_t v102 = (char *)v97 + v100;
    uint64_t v103 = type metadata accessor for DataFrame();
    uint64_t v113 = v5;
    uint64_t v104 = *(void (**)(char *, char *, uint64_t))(*(void *)(v103 - 8) + 16);
    v104(v101, v102, v103);
    v104((char *)v96 + *(int *)(v99 + 24), (char *)v97 + *(int *)(v99 + 24), v103);
    uint64_t v5 = v113;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v107 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      uint64_t v107 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v108 = __swift_instantiateConcreteTypeFromMangledName(v107);
    (*(void (**)(void **, void **, uint64_t))(*(void *)(v108 - 8) + 16))(v96, v97, v108);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return v5;
}

void *assignWithCopy for MLHandActionClassifier(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  uint64_t v6 = (void *)a2[2];
  uint64_t v7 = (void *)a1[2];
  a1[2] = v6;
  id v8 = v6;

  uint64_t v9 = a3[7];
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  if (a1 != a2)
  {
    outlined destroy of MLHandActionClassifier.ModelParameters((uint64_t)a1 + v9, (void (*)(void))type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
    uint64_t v12 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for MLHandActionClassifier.DataSource();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
        case 2u:
          uint64_t v13 = type metadata accessor for URL();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v10, v11, v13);
          goto LABEL_14;
        case 3u:
          id v29 = *(id *)v11;
          char v30 = v11[8];
          outlined copy of Result<_DataTable, Error>(*(id *)v11, v30);
          *(void *)uint64_t v10 = v29;
          v10[8] = v30;
          *((void *)v10 + 2) = *((void *)v11 + 2);
          *((void *)v10 + 3) = *((void *)v11 + 3);
          *((void *)v10 + 4) = *((void *)v11 + 4);
          *((void *)v10 + 5) = *((void *)v11 + 5);
          *((void *)v10 + 6) = *((void *)v11 + 6);
          *((void *)v10 + 7) = *((void *)v11 + 7);
          goto LABEL_10;
        case 4u:
          id v31 = *(id *)v11;
          char v32 = v11[8];
          outlined copy of Result<_DataTable, Error>(*(id *)v11, v32);
          *(void *)uint64_t v10 = v31;
          v10[8] = v32;
          *((void *)v10 + 2) = *((void *)v11 + 2);
          *((void *)v10 + 3) = *((void *)v11 + 3);
          *((void *)v10 + 4) = *((void *)v11 + 4);
          *((void *)v10 + 5) = *((void *)v11 + 5);
          *((void *)v10 + 6) = *((void *)v11 + 6);
          *((void *)v10 + 7) = *((void *)v11 + 7);
          *((void *)v10 + 8) = *((void *)v11 + 8);
          id v33 = a3;
          *((void *)v10 + 9) = *((void *)v11 + 9);
          goto LABEL_12;
        case 5u:
          uint64_t v34 = type metadata accessor for DataFrame();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 16))(v10, v11, v34);
          uint64_t v35 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
          uint64_t v36 = v35[12];
          uint64_t v37 = &v10[v36];
          id v38 = &v11[v36];
          *(void *)uint64_t v37 = *(void *)v38;
          *((void *)v37 + 1) = *((void *)v38 + 1);
          uint64_t v39 = v35[16];
          uint64_t v40 = &v10[v39];
          uint64_t v41 = &v11[v39];
          *(void *)uint64_t v40 = *(void *)v41;
          *((void *)v40 + 1) = *((void *)v41 + 1);
          uint64_t v42 = v35[20];
          uint64_t v43 = &v10[v42];
          uint64_t v44 = &v11[v42];
          *(void *)uint64_t v43 = *(void *)v44;
          *((void *)v43 + 1) = *((void *)v44 + 1);
LABEL_10:
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          break;
        case 6u:
          uint64_t v45 = type metadata accessor for DataFrame();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 16))(v10, v11, v45);
          uint64_t v46 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          uint64_t v47 = v46[12];
          uint64_t v48 = &v10[v47];
          uint64_t v49 = &v11[v47];
          *(void *)uint64_t v48 = *(void *)v49;
          *((void *)v48 + 1) = *((void *)v49 + 1);
          uint64_t v50 = v46[16];
          uint64_t v51 = &v10[v50];
          uint64_t v52 = &v11[v50];
          *(void *)uint64_t v51 = *(void *)v52;
          *((void *)v51 + 1) = *((void *)v52 + 1);
          uint64_t v53 = v46[20];
          uint64_t v54 = &v10[v53];
          uint64_t v55 = &v11[v53];
          *(void *)uint64_t v54 = *(void *)v55;
          *((void *)v54 + 1) = *((void *)v55 + 1);
          uint64_t v56 = v46[24];
          uint64_t v57 = &v10[v56];
          uint64_t v58 = &v11[v56];
          *(void *)uint64_t v57 = *(void *)v58;
          id v33 = a3;
          *((void *)v57 + 1) = *((void *)v58 + 1);
LABEL_12:
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          a3 = v33;
          break;
        default:
          uint64_t v14 = type metadata accessor for URL();
          uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
          v15(v10, v11, v14);
          uint64_t v88 = a3;
          uint64_t v16 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          v15(&v10[v16[12]], &v11[v16[12]], v14);
          uint64_t v17 = v16[16];
          uint64_t v18 = &v10[v17];
          uint64_t v19 = &v11[v17];
          *(void *)uint64_t v18 = *(void *)v19;
          *((void *)v18 + 1) = *((void *)v19 + 1);
          uint64_t v20 = v16[20];
          uint64_t v21 = &v10[v20];
          uint64_t v22 = &v11[v20];
          *(void *)uint64_t v21 = *(void *)v22;
          *((void *)v21 + 1) = *((void *)v22 + 1);
          uint64_t v23 = v16[24];
          uint64_t v24 = &v10[v23];
          uint64_t v25 = &v11[v23];
          *(void *)uint64_t v24 = *(void *)v25;
          *((void *)v24 + 1) = *((void *)v25 + 1);
          uint64_t v26 = v16[28];
          uint64_t v27 = &v10[v26];
          uint64_t v28 = &v11[v26];
          *(void *)uint64_t v27 = *(void *)v28;
          *((void *)v27 + 1) = *((void *)v28 + 1);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          a3 = v88;
          break;
      }
      swift_bridgeObjectRetain();
LABEL_14:
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
    }
  }
  uint64_t v59 = (int *)type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  *(void *)&v10[v59[5]] = *(void *)&v11[v59[5]];
  *(void *)&v10[v59[6]] = *(void *)&v11[v59[6]];
  *(void *)&v10[v59[7]] = *(void *)&v11[v59[7]];
  *(void *)&v10[v59[8]] = *(void *)&v11[v59[8]];
  *(void *)&v10[v59[10]] = *(void *)&v11[v59[10]];
  if (a1 != a2)
  {
    uint64_t v60 = a3[8];
    uint64_t v61 = (id *)((char *)a1 + v60);
    uint64_t v62 = (id *)((char *)a2 + v60);
    outlined destroy of MLHandActionClassifier.ModelParameters((uint64_t)a1 + v60, (void (*)(void))type metadata accessor for MLClassifierMetrics.Contents);
    type metadata accessor for MLClassifierMetrics.Contents(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      id v68 = *v62;
      id v69 = *v62;
      *uint64_t v61 = v68;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *uint64_t v61 = *v62;
      uint64_t v64 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v65 = *(int *)(v64 + 20);
      unint64_t v86 = (char *)v62 + v65;
      uint64_t v87 = (char *)v61 + v65;
      uint64_t v66 = type metadata accessor for DataFrame();
      uint64_t v67 = *(void (**)(char *, char *, uint64_t))(*(void *)(v66 - 8) + 16);
      v67(v87, v86, v66);
      v67((char *)v61 + *(int *)(v64 + 24), (char *)v62 + *(int *)(v64 + 24), v66);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v70 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v70 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(v70);
      (*(void (**)(id *, id *, uint64_t))(*(void *)(v71 - 8) + 16))(v61, v62, v71);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v72 = a3[9];
    uint64_t v73 = (void **)((char *)a1 + v72);
    uint64_t v74 = (void **)((char *)a2 + v72);
    outlined destroy of MLHandActionClassifier.ModelParameters((uint64_t)a1 + v72, (void (*)(void))type metadata accessor for MLClassifierMetrics.Contents);
    int v75 = swift_getEnumCaseMultiPayload();
    if (v75 == 2)
    {
      uint64_t v81 = *v74;
      id v82 = v81;
      *uint64_t v73 = v81;
    }
    else if (v75 == 1)
    {
      *uint64_t v73 = *v74;
      uint64_t v76 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v77 = *(int *)(v76 + 20);
      uint64_t v89 = (char *)v73 + v77;
      uint64_t v78 = (char *)v74 + v77;
      uint64_t v79 = type metadata accessor for DataFrame();
      uint64_t v80 = *(void (**)(char *, char *, uint64_t))(*(void *)(v79 - 8) + 16);
      v80(v89, v78, v79);
      v80((char *)v73 + *(int *)(v76 + 24), (char *)v74 + *(int *)(v76 + 24), v79);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v83 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v83 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(v83);
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v84 - 8) + 16))(v73, v74, v84);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for MLHandActionClassifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2;
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = (char *)(a1 + v5);
  uint64_t v7 = (char *)(a2 + v5);
  uint64_t v8 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = type metadata accessor for MLHandActionClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v10 = type metadata accessor for URL();
        uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32);
        v11(v6, v7, v10);
        uint64_t v12 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v11(&v6[v12[12]], &v7[v12[12]], v10);
        *(_OWORD *)&v6[v12[16]] = *(_OWORD *)&v7[v12[16]];
        *(_OWORD *)&v6[v12[20]] = *(_OWORD *)&v7[v12[20]];
        *(_OWORD *)&v6[v12[24]] = *(_OWORD *)&v7[v12[24]];
        *(_OWORD *)&v6[v12[28]] = *(_OWORD *)&v7[v12[28]];
        goto LABEL_9;
      case 1u:
      case 2u:
        uint64_t v13 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v6, v7, v13);
        goto LABEL_9;
      case 5u:
        uint64_t v14 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v6, v7, v14);
        uint64_t v15 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        *(_OWORD *)&v6[v15[12]] = *(_OWORD *)&v7[v15[12]];
        *(_OWORD *)&v6[v15[16]] = *(_OWORD *)&v7[v15[16]];
        *(_OWORD *)&v6[v15[20]] = *(_OWORD *)&v7[v15[20]];
        goto LABEL_9;
      case 6u:
        uint64_t v16 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v6, v7, v16);
        uint64_t v17 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        *(_OWORD *)&v6[v17[12]] = *(_OWORD *)&v7[v17[12]];
        *(_OWORD *)&v6[v17[16]] = *(_OWORD *)&v7[v17[16]];
        *(_OWORD *)&v6[v17[20]] = *(_OWORD *)&v7[v17[20]];
        *(_OWORD *)&v6[v17[24]] = *(_OWORD *)&v7[v17[24]];
LABEL_9:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v6, v7, *(void *)(*(void *)(v9 - 8) + 64));
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v6, v7, *(void *)(*(void *)(v8 - 8) + 64));
  }
  uint64_t v18 = (int *)type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  *(void *)&v6[v18[5]] = *(void *)&v7[v18[5]];
  *(void *)&v6[v18[6]] = *(void *)&v7[v18[6]];
  *(void *)&v6[v18[7]] = *(void *)&v7[v18[7]];
  *(void *)&v6[v18[8]] = *(void *)&v7[v18[8]];
  *(void *)&v6[v18[10]] = *(void *)&v7[v18[10]];
  uint64_t v19 = *(int *)(v3 + 32);
  uint64_t v20 = (char *)(a1 + v19);
  uint64_t v21 = (char *)(v4 + v19);
  uint64_t v22 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *(void *)uint64_t v20 = *(void *)v21;
    uint64_t v26 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v27 = *(int *)(v26 + 20);
    uint64_t v28 = &v20[v27];
    id v29 = &v21[v27];
    uint64_t v47 = v4;
    uint64_t v30 = type metadata accessor for DataFrame();
    uint64_t v31 = v3;
    char v32 = *(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 32);
    v32(v28, v29, v30);
    uint64_t v33 = v30;
    uint64_t v4 = v47;
    v32(&v20[*(int *)(v26 + 24)], &v21[*(int *)(v26 + 24)], v33);
    uint64_t v3 = v31;
LABEL_18:
    swift_storeEnumTagMultiPayload();
    goto LABEL_20;
  }
  if (!EnumCaseMultiPayload)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v24 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      uint64_t v24 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(v24);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 32))(v20, v21, v25);
    swift_storeEnumTagMultiPayload();
    goto LABEL_18;
  }
  memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
LABEL_20:
  uint64_t v34 = *(int *)(v3 + 36);
  uint64_t v35 = (char *)(a1 + v34);
  uint64_t v36 = (char *)(v4 + v34);
  int v37 = swift_getEnumCaseMultiPayload();
  if (v37 == 1)
  {
    *(void *)uint64_t v35 = *(void *)v36;
    uint64_t v40 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v41 = *(int *)(v40 + 20);
    uint64_t v42 = &v35[v41];
    uint64_t v43 = &v36[v41];
    uint64_t v44 = type metadata accessor for DataFrame();
    uint64_t v45 = *(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 32);
    v45(v42, v43, v44);
    v45(&v35[*(int *)(v40 + 24)], &v36[*(int *)(v40 + 24)], v44);
  }
  else
  {
    if (v37)
    {
      memcpy(v35, v36, *(void *)(*(void *)(v22 - 8) + 64));
      return a1;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      id v38 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      id v38 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(v38);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 32))(v35, v36, v39);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithTake for MLHandActionClassifier(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_release();
  uint64_t v6 = (void *)a1[2];
  a1[2] = a2[2];

  uint64_t v7 = a3[7];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  if (a1 != a2)
  {
    outlined destroy of MLHandActionClassifier.ModelParameters((uint64_t)a1 + v7, (void (*)(void))type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
    uint64_t v10 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v11 = type metadata accessor for MLHandActionClassifier.DataSource();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          uint64_t v12 = type metadata accessor for URL();
          uint64_t v46 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32);
          v46(v8, v9, v12);
          uint64_t v13 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          v46(&v8[v13[12]], &v9[v13[12]], v12);
          *(_OWORD *)&v8[v13[16]] = *(_OWORD *)&v9[v13[16]];
          *(_OWORD *)&v8[v13[20]] = *(_OWORD *)&v9[v13[20]];
          *(_OWORD *)&v8[v13[24]] = *(_OWORD *)&v9[v13[24]];
          *(_OWORD *)&v8[v13[28]] = *(_OWORD *)&v9[v13[28]];
          goto LABEL_10;
        case 1u:
        case 2u:
          uint64_t v14 = type metadata accessor for URL();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v8, v9, v14);
          goto LABEL_10;
        case 5u:
          uint64_t v15 = type metadata accessor for DataFrame();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v8, v9, v15);
          uint64_t v16 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
          *(_OWORD *)&v8[v16[12]] = *(_OWORD *)&v9[v16[12]];
          *(_OWORD *)&v8[v16[16]] = *(_OWORD *)&v9[v16[16]];
          *(_OWORD *)&v8[v16[20]] = *(_OWORD *)&v9[v16[20]];
          goto LABEL_10;
        case 6u:
          uint64_t v17 = type metadata accessor for DataFrame();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v8, v9, v17);
          uint64_t v18 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          *(_OWORD *)&v8[v18[12]] = *(_OWORD *)&v9[v18[12]];
          *(_OWORD *)&v8[v18[16]] = *(_OWORD *)&v9[v18[16]];
          *(_OWORD *)&v8[v18[20]] = *(_OWORD *)&v9[v18[20]];
          *(_OWORD *)&v8[v18[24]] = *(_OWORD *)&v9[v18[24]];
LABEL_10:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
          break;
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
    }
  }
  uint64_t v19 = (int *)type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  *(void *)&v8[v19[5]] = *(void *)&v9[v19[5]];
  *(void *)&v8[v19[6]] = *(void *)&v9[v19[6]];
  *(void *)&v8[v19[7]] = *(void *)&v9[v19[7]];
  *(void *)&v8[v19[8]] = *(void *)&v9[v19[8]];
  *(void *)&v8[v19[10]] = *(void *)&v9[v19[10]];
  if (a1 == a2) {
    return a1;
  }
  uint64_t v20 = a3[8];
  uint64_t v21 = (char *)a1 + v20;
  uint64_t v22 = (char *)a2 + v20;
  outlined destroy of MLHandActionClassifier.ModelParameters((uint64_t)a1 + v20, (void (*)(void))type metadata accessor for MLClassifierMetrics.Contents);
  uint64_t v23 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *(void *)uint64_t v21 = *(void *)v22;
    uint64_t v27 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v28 = *(int *)(v27 + 20);
    uint64_t v45 = &v21[v28];
    id v29 = &v22[v28];
    uint64_t v30 = type metadata accessor for DataFrame();
    uint64_t v47 = a3;
    uint64_t v31 = *(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 32);
    v31(v45, v29, v30);
    v31(&v21[*(int *)(v27 + 24)], &v22[*(int *)(v27 + 24)], v30);
    a3 = v47;
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
      goto LABEL_22;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v25 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      uint64_t v25 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(v25);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32))(v21, v22, v26);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
LABEL_22:
  uint64_t v32 = a3[9];
  uint64_t v33 = (char *)a1 + v32;
  uint64_t v34 = (char *)a2 + v32;
  outlined destroy of MLHandActionClassifier.ModelParameters((uint64_t)a1 + v32, (void (*)(void))type metadata accessor for MLClassifierMetrics.Contents);
  int v35 = swift_getEnumCaseMultiPayload();
  if (v35 == 1)
  {
    *(void *)uint64_t v33 = *(void *)v34;
    uint64_t v38 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v39 = *(int *)(v38 + 20);
    uint64_t v40 = &v33[v39];
    uint64_t v41 = &v34[v39];
    uint64_t v42 = type metadata accessor for DataFrame();
    uint64_t v43 = *(void (**)(char *, char *, uint64_t))(*(void *)(v42 - 8) + 32);
    v43(v40, v41, v42);
    v43(&v33[*(int *)(v38 + 24)], &v34[*(int *)(v38 + 24)], v42);
  }
  else
  {
    if (v35)
    {
      memcpy(v33, v34, *(void *)(*(void *)(v23 - 8) + 64));
      return a1;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v36 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      uint64_t v36 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(v36);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 32))(v33, v34, v37);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t getEnumTagSinglePayload for MLHandActionClassifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_22717EA04);
}

uint64_t sub_22717EA04(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    type metadata accessor for MLHandActionClassifier.ModelParameters(0);
    OUTLINED_FUNCTION_6_1();
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a3 + 28);
    }
    else
    {
      uint64_t v10 = type metadata accessor for MLClassifierMetrics(0);
      uint64_t v11 = *(int *)(a3 + 32);
    }
    return __swift_getEnumTagSinglePayload((uint64_t)a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for MLHandActionClassifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_22717EAC4);
}

void *sub_22717EAC4(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *NSAttributedString result = (a2 - 1);
  }
  else
  {
    type metadata accessor for MLHandActionClassifier.ModelParameters(0);
    OUTLINED_FUNCTION_6_1();
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a4 + 28);
    }
    else
    {
      uint64_t v10 = type metadata accessor for MLClassifierMetrics(0);
      uint64_t v11 = *(int *)(a4 + 32);
    }
    return (void *)__swift_storeEnumTagSinglePayload((uint64_t)v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata completion function for MLHandActionClassifier()
{
  uint64_t result = type metadata accessor for MLHandActionClassifier.ModelParameters(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for MLClassifierMetrics.Contents(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for MLHandActionClassifier.Prediction(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for MLHandActionClassifier.Prediction(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for MLHandActionClassifier.Prediction(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MLHandActionClassifier.Prediction(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MLHandActionClassifier.Prediction(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MLHandActionClassifier.Prediction()
{
  return &type metadata for MLHandActionClassifier.Prediction;
}

uint64_t specialized closure #1 in MLUntypedColumn.init<A>(_:)@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = specialized closure #1 in MLUntypedColumn.init<A>(_:)(*a1);
  if (v3) {
    *a2 = v3;
  }
  else {
    *a3 = result;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t result;

  uint64_t result = specialized closure #1 in MLUntypedColumn.init<A>(_:)(*a1);
  if (v3) {
    *a2 = v3;
  }
  else {
    *a3 = result;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t result;

  uint64_t result = specialized closure #1 in MLUntypedColumn.init<A>(_:)(*a1);
  if (v3) {
    *a2 = v3;
  }
  else {
    *a3 = result;
  }
  return result;
}

uint64_t outlined init with copy of MLHandActionClassifier.PersistentParameters?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in static MLHandActionClassifier.resume(_:)(void *a1)
{
  return closure #1 in closure #1 in closure #1 in static MLHandActionClassifier.resume(_:)(v1[2], v1[3], v1[4], v1[5], a1);
}

uint64_t outlined destroy of MLHandActionClassifier.ModelParameters(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_8();
  uint64_t v3 = OUTLINED_FUNCTION_22_1();
  v4(v3);
  return a1;
}

uint64_t _s8CreateML27MLTrainingSessionParametersVWOcTm_4(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_8();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t OUTLINED_FUNCTION_15_22()
{
  *(void *)(v1 - 400) = v0;
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_16_22(uint64_t a1)
{
  *(void *)(v1 - 296) = a1;
  return v1 - 296;
}

BOOL OUTLINED_FUNCTION_29_16@<W0>(uint64_t a1@<X8>, Swift::Float a2@<S0>)
{
  unint64_t v4 = 0xD000000000000010;
  unint64_t v3 = (a1 - 32) | 0x8000000000000000;
  return AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_handActionClassifier, *(Swift::String *)&v4, a2);
}

uint64_t OUTLINED_FUNCTION_31_12()
{
  return type metadata accessor for MLHandActionClassifier.ModelParameters(0);
}

uint64_t OUTLINED_FUNCTION_32_14()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_38_12()
{
  return type metadata accessor for MLHandActionClassifier();
}

uint64_t OUTLINED_FUNCTION_39_12()
{
  return v0;
}

void OUTLINED_FUNCTION_40_9()
{
  uint64_t v2 = *(void **)(v0 - 248);
  int v3 = *(_DWORD *)(v0 - 160);
  outlined consume of MLDataTable?(v2, v3);
}

void OUTLINED_FUNCTION_41_9()
{
  uint64_t v2 = *(void **)(v0 - 200);
  int v3 = *(_DWORD *)(v0 - 152);
  outlined consume of MLDataTable?(v2, v3);
}

void OUTLINED_FUNCTION_42_11()
{
  JUMPOUT(0x22A676210);
}

uint64_t OUTLINED_FUNCTION_44_9()
{
  return v0;
}

void OUTLINED_FUNCTION_47_12()
{
  outlined consume of Result<_DataTable, Error>(v1, v0);
}

uint64_t static MLSoundClassifier.__Defaults.validation.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for validation != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static MLSoundClassifier.__Defaults.validation);

  return outlined init with copy of MLSoundClassifier.ModelParameters.ValidationData(v3, a1);
}

uint64_t static MLSoundClassifier.__Defaults.maximumIterations.getter()
{
  return 25;
}

double static MLSoundClassifier.__Defaults.overlapFactor.getter()
{
  return 0.5;
}

double static MLSoundClassifier.__Defaults.defaultVGGishTimeWindow.getter()
{
  return 0.975;
}

uint64_t static MLSoundClassifier.__Defaults.batchSize.getter()
{
  return 32;
}

uint64_t one-time initialization function for validation()
{
  uint64_t v0 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  __swift_allocate_value_buffer(v0, static MLSoundClassifier.__Defaults.validation);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)static MLSoundClassifier.__Defaults.validation);
  *(void *)uint64_t v1 = 0;
  *(void *)(v1 + 8) = 0;
  *(_WORD *)(v1 + 16) = 256;

  return swift_storeEnumTagMultiPayload();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t vars8;

  uint64_t v0 = type metadata accessor for MLImageClassifier.ModelParameters.ValidationData();
  __swift_allocate_value_buffer(v0, static MLImageClassifier.__Defaults.validation);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)static MLImageClassifier.__Defaults.validation);
  *(void *)uint64_t v1 = 0;
  *(void *)(v1 + 8) = 0;
  *(_WORD *)(v1 + 16) = 256;

  return swift_storeEnumTagMultiPayload();
}

uint64_t static MLSoundClassifier.__Defaults.featureColumnName.getter()
{
  return 0x7365727574616566;
}

uint64_t static MLSoundClassifier.__Defaults.labelColumnName.getter()
{
  return 0x62614C7373616C63;
}

ValueMetadata *type metadata accessor for MLSoundClassifier.__Defaults()
{
  return &type metadata for MLSoundClassifier.__Defaults;
}

void OUTLINED_FUNCTION_0_20(uint64_t a1@<X8>)
{
  *(void *)a1 = 1;
  *(unsigned char *)(a1 + 8) = 1;
}

char *initializeBufferWithCopyOfBuffer for MLSoundClassifier.PersistentParameters(char *a1, char **a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) == 0)
  {
    type metadata accessor for MLSoundClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        *(void *)a1 = *a2;
        swift_bridgeObjectRetain();
        break;
      case 3u:
        uint64_t v24 = *a2;
        char v25 = *((unsigned char *)a2 + 8);
        outlined copy of Result<_DataTable, Error>(*a2, v25);
        *(void *)a1 = v24;
        a1[8] = v25;
        uint64_t v26 = a2[3];
        *((void *)a1 + 2) = a2[2];
        *((void *)a1 + 3) = v26;
        uint64_t v27 = a2[5];
        *((void *)a1 + 4) = a2[4];
        *((void *)a1 + 5) = v27;
        long long v28 = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 4) = v28;
        a1[80] = *((unsigned char *)a2 + 80);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 4u:
        uint64_t v9 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
        uint64_t v10 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
        uint64_t v11 = v10[12];
        uint64_t v12 = &a1[v11];
        uint64_t v13 = (uint64_t *)((char *)a2 + v11);
        uint64_t v15 = *v13;
        uint64_t v14 = v13[1];
        *(void *)uint64_t v12 = v15;
        *((void *)v12 + 1) = v14;
        uint64_t v16 = v10[16];
        uint64_t v17 = &a1[v16];
        uint64_t v18 = (char **)((char *)a2 + v16);
        uint64_t v19 = v18[1];
        *(void *)uint64_t v17 = *v18;
        *((void *)v17 + 1) = v19;
        uint64_t v20 = v10[20];
        uint64_t v21 = &a1[v20];
        uint64_t v22 = (uint64_t)a2 + v20;
        long long v23 = *(_OWORD *)(v22 + 16);
        *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
        *((_OWORD *)v21 + 1) = v23;
        v21[32] = *(unsigned char *)(v22 + 32);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v7 = type metadata accessor for URL();
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
        break;
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v29 = a3[5];
    uint64_t v30 = &a1[v29];
    uint64_t v31 = (char *)a2 + v29;
    uint64_t v32 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(void *)uint64_t v30 = *(void *)v31;
      swift_bridgeObjectRetain();
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        memcpy(v30, v31, *(void *)(*(void *)(v32 - 8) + 64));
LABEL_19:
        uint64_t v55 = a3[7];
        *(void *)&a1[a3[6]] = *(char **)((char *)a2 + a3[6]);
        *(void *)&a1[v55] = *(char **)((char *)a2 + v55);
        uint64_t v56 = a3[9];
        *(void *)&a1[a3[8]] = *(char **)((char *)a2 + a3[8]);
        uint64_t v57 = &a1[v56];
        uint64_t v58 = (uint64_t)a2 + v56;
        *(void *)uint64_t v57 = *(void *)v58;
        v57[8] = *(unsigned char *)(v58 + 8);
        return a1;
      }
      switch(swift_getEnumCaseMultiPayload())
      {
        case 2u:
          *(void *)uint64_t v30 = *(void *)v31;
          swift_bridgeObjectRetain();
          break;
        case 3u:
          uint64_t v35 = *(void *)v31;
          char v36 = v31[8];
          outlined copy of Result<_DataTable, Error>(*(id *)v31, v36);
          *(void *)uint64_t v30 = v35;
          v30[8] = v36;
          uint64_t v37 = *((void *)v31 + 3);
          *((void *)v30 + 2) = *((void *)v31 + 2);
          *((void *)v30 + 3) = v37;
          uint64_t v38 = *((void *)v31 + 5);
          *((void *)v30 + 4) = *((void *)v31 + 4);
          *((void *)v30 + 5) = v38;
          long long v39 = *((_OWORD *)v31 + 4);
          *((_OWORD *)v30 + 3) = *((_OWORD *)v31 + 3);
          *((_OWORD *)v30 + 4) = v39;
          v30[80] = v31[80];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          break;
        case 4u:
          uint64_t v40 = type metadata accessor for DataFrame();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 16))(v30, v31, v40);
          uint64_t v41 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
          uint64_t v42 = v41[12];
          uint64_t v43 = &v30[v42];
          uint64_t v44 = &v31[v42];
          uint64_t v46 = *(void *)v44;
          uint64_t v45 = *((void *)v44 + 1);
          *(void *)uint64_t v43 = v46;
          *((void *)v43 + 1) = v45;
          uint64_t v47 = v41[16];
          uint64_t v48 = &v30[v47];
          uint64_t v49 = &v31[v47];
          uint64_t v50 = *((void *)v49 + 1);
          *(void *)uint64_t v48 = *(void *)v49;
          *((void *)v48 + 1) = v50;
          uint64_t v51 = v41[20];
          uint64_t v52 = &v30[v51];
          uint64_t v53 = &v31[v51];
          long long v54 = *((_OWORD *)v53 + 1);
          *(_OWORD *)uint64_t v52 = *(_OWORD *)v53;
          *((_OWORD *)v52 + 1) = v54;
          v52[32] = v53[32];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          break;
        default:
          uint64_t v34 = type metadata accessor for URL();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 16))(v30, v31, v34);
          break;
      }
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_19;
  }
  uint64_t v8 = *a2;
  *(void *)a1 = *a2;
  a1 = &v8[(v5 + 16) & ~(unint64_t)v5];
  swift_retain();
  return a1;
}

uint64_t destroy for MLSoundClassifier.PersistentParameters(uint64_t a1, uint64_t a2)
{
  type metadata accessor for MLSoundClassifier.DataSource();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
      uint64_t v4 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
      break;
    case 2u:
      goto LABEL_5;
    case 3u:
      outlined consume of Result<_DataTable, Error>(*(id *)a1, *(unsigned char *)(a1 + 8));
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 4u:
      uint64_t v5 = type metadata accessor for DataFrame();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
      swift_bridgeObjectRelease();
LABEL_5:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v6 = a1 + *(int *)(a2 + 20);
  type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
LABEL_13:
    return swift_bridgeObjectRelease();
  }
  else if (result == 1)
  {
    uint64_t result = swift_getEnumCaseMultiPayload();
    switch((int)result)
    {
      case 0:
      case 1:
        uint64_t v8 = type metadata accessor for URL();
        uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
        uint64_t result = v9(v6, v8);
        break;
      case 2:
        goto LABEL_13;
      case 3:
        outlined consume of Result<_DataTable, Error>(*(id *)v6, *(unsigned char *)(v6 + 8));
        swift_bridgeObjectRelease();
        goto LABEL_13;
      case 4:
        uint64_t v10 = type metadata accessor for DataFrame();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v6, v10);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
        swift_bridgeObjectRelease();
        goto LABEL_13;
      default:
        return result;
    }
  }
  return result;
}

uint64_t initializeWithCopy for MLSoundClassifier.PersistentParameters(uint64_t a1, uint64_t *a2, int *a3)
{
  type metadata accessor for MLSoundClassifier.DataSource();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 2u:
      *(void *)a1 = *a2;
      swift_bridgeObjectRetain();
      break;
    case 3u:
      uint64_t v22 = *a2;
      char v23 = *((unsigned char *)a2 + 8);
      outlined copy of Result<_DataTable, Error>((id)*a2, v23);
      *(void *)a1 = v22;
      *(unsigned char *)(a1 + 8) = v23;
      uint64_t v24 = a2[3];
      *(void *)(a1 + 16) = a2[2];
      *(void *)(a1 + 24) = v24;
      uint64_t v25 = a2[5];
      *(void *)(a1 + 32) = a2[4];
      *(void *)(a1 + 40) = v25;
      long long v26 = *((_OWORD *)a2 + 4);
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 64) = v26;
      *(unsigned char *)(a1 + 80) = *((unsigned char *)a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
    case 4u:
      uint64_t v7 = type metadata accessor for DataFrame();
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      uint64_t v8 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
      uint64_t v9 = v8[12];
      uint64_t v10 = (void *)(a1 + v9);
      uint64_t v11 = (uint64_t *)((char *)a2 + v9);
      uint64_t v13 = *v11;
      uint64_t v12 = v11[1];
      *uint64_t v10 = v13;
      v10[1] = v12;
      uint64_t v14 = v8[16];
      uint64_t v15 = (void *)(a1 + v14);
      uint64_t v16 = (uint64_t *)((char *)a2 + v14);
      uint64_t v17 = v16[1];
      *uint64_t v15 = *v16;
      v15[1] = v17;
      uint64_t v18 = v8[20];
      uint64_t v19 = a1 + v18;
      uint64_t v20 = (uint64_t)a2 + v18;
      long long v21 = *(_OWORD *)(v20 + 16);
      *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
      *(_OWORD *)(v19 + 16) = v21;
      *(unsigned char *)(v19 + 32) = *(unsigned char *)(v20 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
    default:
      uint64_t v6 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      break;
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v27 = a3[5];
  long long v28 = (char *)(a1 + v27);
  uint64_t v29 = (uint64_t *)((char *)a2 + v27);
  uint64_t v30 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *(void *)long long v28 = *v29;
    swift_bridgeObjectRetain();
LABEL_16:
    swift_storeEnumTagMultiPayload();
    goto LABEL_17;
  }
  if (EnumCaseMultiPayload == 1)
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        *(void *)long long v28 = *v29;
        swift_bridgeObjectRetain();
        break;
      case 3u:
        uint64_t v33 = *v29;
        char v34 = *((unsigned char *)v29 + 8);
        outlined copy of Result<_DataTable, Error>((id)*v29, v34);
        *(void *)long long v28 = v33;
        v28[8] = v34;
        uint64_t v35 = v29[3];
        *((void *)v28 + 2) = v29[2];
        *((void *)v28 + 3) = v35;
        uint64_t v36 = v29[5];
        *((void *)v28 + 4) = v29[4];
        *((void *)v28 + 5) = v36;
        long long v37 = *((_OWORD *)v29 + 4);
        *((_OWORD *)v28 + 3) = *((_OWORD *)v29 + 3);
        *((_OWORD *)v28 + 4) = v37;
        v28[80] = *((unsigned char *)v29 + 80);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 4u:
        uint64_t v38 = type metadata accessor for DataFrame();
        (*(void (**)(char *, uint64_t *, uint64_t))(*(void *)(v38 - 8) + 16))(v28, v29, v38);
        long long v39 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
        uint64_t v40 = v39[12];
        uint64_t v41 = &v28[v40];
        uint64_t v42 = (uint64_t *)((char *)v29 + v40);
        uint64_t v44 = *v42;
        uint64_t v43 = v42[1];
        *(void *)uint64_t v41 = v44;
        *((void *)v41 + 1) = v43;
        uint64_t v45 = v39[16];
        uint64_t v46 = &v28[v45];
        uint64_t v47 = (uint64_t *)((char *)v29 + v45);
        uint64_t v48 = v47[1];
        *(void *)uint64_t v46 = *v47;
        *((void *)v46 + 1) = v48;
        uint64_t v49 = v39[20];
        uint64_t v50 = &v28[v49];
        uint64_t v51 = (uint64_t)v29 + v49;
        long long v52 = *(_OWORD *)(v51 + 16);
        *(_OWORD *)uint64_t v50 = *(_OWORD *)v51;
        *((_OWORD *)v50 + 1) = v52;
        v50[32] = *(unsigned char *)(v51 + 32);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v32 = type metadata accessor for URL();
        (*(void (**)(char *, uint64_t *, uint64_t))(*(void *)(v32 - 8) + 16))(v28, v29, v32);
        break;
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_16;
  }
  memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64));
LABEL_17:
  uint64_t v53 = a3[7];
  *(void *)(a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
  *(void *)(a1 + v53) = *(uint64_t *)((char *)a2 + v53);
  uint64_t v54 = a3[9];
  *(void *)(a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
  uint64_t v55 = a1 + v54;
  uint64_t v56 = (uint64_t)a2 + v54;
  *(void *)uint64_t v55 = *(void *)v56;
  *(unsigned char *)(v55 + 8) = *(unsigned char *)(v56 + 8);
  return a1;
}

uint64_t assignWithCopy for MLSoundClassifier.PersistentParameters(uint64_t a1, uint64_t *a2, int *a3)
{
  if ((uint64_t *)a1 != a2)
  {
    outlined destroy of MLSoundClassifier.DataSource(a1, (void (*)(void))type metadata accessor for MLSoundClassifier.DataSource);
    type metadata accessor for MLSoundClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        *(void *)a1 = *a2;
        swift_bridgeObjectRetain();
        break;
      case 3u:
        uint64_t v20 = *a2;
        char v21 = *((unsigned char *)a2 + 8);
        outlined copy of Result<_DataTable, Error>((id)*a2, v21);
        *(void *)a1 = v20;
        *(unsigned char *)(a1 + 8) = v21;
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = a2[3];
        *(void *)(a1 + 32) = a2[4];
        *(void *)(a1 + 40) = a2[5];
        long long v22 = *((_OWORD *)a2 + 3);
        long long v23 = *((_OWORD *)a2 + 4);
        *(unsigned char *)(a1 + 80) = *((unsigned char *)a2 + 80);
        *(_OWORD *)(a1 + 48) = v22;
        *(_OWORD *)(a1 + 64) = v23;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 4u:
        uint64_t v7 = type metadata accessor for DataFrame();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
        uint64_t v8 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
        uint64_t v9 = v8[12];
        uint64_t v10 = (void *)(a1 + v9);
        uint64_t v11 = (uint64_t *)((char *)a2 + v9);
        *uint64_t v10 = *v11;
        v10[1] = v11[1];
        uint64_t v12 = v8[16];
        uint64_t v13 = (void *)(a1 + v12);
        uint64_t v14 = (uint64_t *)((char *)a2 + v12);
        *uint64_t v13 = *v14;
        v13[1] = v14[1];
        uint64_t v15 = v8[20];
        uint64_t v16 = a1 + v15;
        uint64_t v17 = (uint64_t)a2 + v15;
        char v18 = *(unsigned char *)(v17 + 32);
        long long v19 = *(_OWORD *)(v17 + 16);
        *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
        *(_OWORD *)(v16 + 16) = v19;
        *(unsigned char *)(v16 + 32) = v18;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v6 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        break;
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v24 = a3[5];
    uint64_t v25 = (char *)(a1 + v24);
    long long v26 = (uint64_t *)((char *)a2 + v24);
    outlined destroy of MLSoundClassifier.DataSource(a1 + v24, (void (*)(void))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
    uint64_t v27 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(void *)uint64_t v25 = *v26;
      swift_bridgeObjectRetain();
LABEL_17:
      swift_storeEnumTagMultiPayload();
      goto LABEL_18;
    }
    if (EnumCaseMultiPayload == 1)
    {
      switch(swift_getEnumCaseMultiPayload())
      {
        case 2u:
          *(void *)uint64_t v25 = *v26;
          swift_bridgeObjectRetain();
          break;
        case 3u:
          uint64_t v30 = *v26;
          char v31 = *((unsigned char *)v26 + 8);
          outlined copy of Result<_DataTable, Error>((id)*v26, v31);
          *(void *)uint64_t v25 = v30;
          v25[8] = v31;
          *((void *)v25 + 2) = v26[2];
          *((void *)v25 + 3) = v26[3];
          *((void *)v25 + 4) = v26[4];
          *((void *)v25 + 5) = v26[5];
          long long v32 = *((_OWORD *)v26 + 3);
          long long v33 = *((_OWORD *)v26 + 4);
          v25[80] = *((unsigned char *)v26 + 80);
          *((_OWORD *)v25 + 3) = v32;
          *((_OWORD *)v25 + 4) = v33;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          break;
        case 4u:
          uint64_t v34 = type metadata accessor for DataFrame();
          (*(void (**)(char *, uint64_t *, uint64_t))(*(void *)(v34 - 8) + 16))(v25, v26, v34);
          uint64_t v35 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
          uint64_t v36 = v35[12];
          long long v37 = &v25[v36];
          uint64_t v38 = (uint64_t *)((char *)v26 + v36);
          *(void *)long long v37 = *v38;
          *((void *)v37 + 1) = v38[1];
          uint64_t v39 = v35[16];
          uint64_t v40 = &v25[v39];
          uint64_t v41 = (uint64_t *)((char *)v26 + v39);
          *(void *)uint64_t v40 = *v41;
          *((void *)v40 + 1) = v41[1];
          uint64_t v42 = v35[20];
          uint64_t v43 = &v25[v42];
          uint64_t v44 = (uint64_t)v26 + v42;
          char v45 = *(unsigned char *)(v44 + 32);
          long long v46 = *(_OWORD *)(v44 + 16);
          *(_OWORD *)uint64_t v43 = *(_OWORD *)v44;
          *((_OWORD *)v43 + 1) = v46;
          v43[32] = v45;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          break;
        default:
          uint64_t v29 = type metadata accessor for URL();
          (*(void (**)(char *, uint64_t *, uint64_t))(*(void *)(v29 - 8) + 16))(v25, v26, v29);
          break;
      }
      swift_storeEnumTagMultiPayload();
      goto LABEL_17;
    }
    memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64));
  }
LABEL_18:
  *(void *)(a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
  *(void *)(a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  *(void *)(a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
  uint64_t v47 = a3[9];
  uint64_t v48 = a1 + v47;
  uint64_t v49 = (uint64_t *)((char *)a2 + v47);
  uint64_t v50 = *v49;
  *(unsigned char *)(v48 + 8) = *((unsigned char *)v49 + 8);
  *(void *)uint64_t v48 = v50;
  return a1;
}

char *initializeWithTake for MLSoundClassifier.PersistentParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for MLSoundClassifier.DataSource();
  unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 4)
  {
    uint64_t v8 = type metadata accessor for DataFrame();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
    uint64_t v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
    *(_OWORD *)&a1[v9[12]] = *(_OWORD *)&a2[v9[12]];
    *(_OWORD *)&a1[v9[16]] = *(_OWORD *)&a2[v9[16]];
    uint64_t v10 = v9[20];
    uint64_t v11 = &a1[v10];
    uint64_t v12 = &a2[v10];
    long long v13 = *((_OWORD *)v12 + 1);
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
    *((_OWORD *)v11 + 1) = v13;
    v11[32] = v12[32];
    goto LABEL_5;
  }
  if (EnumCaseMultiPayload <= 1)
  {
    uint64_t v14 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(a1, a2, v14);
LABEL_5:
    swift_storeEnumTagMultiPayload();
    goto LABEL_7;
  }
  memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
LABEL_7:
  uint64_t v15 = a3[5];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  uint64_t v18 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    unsigned int v19 = swift_getEnumCaseMultiPayload();
    if (v19 == 4)
    {
      uint64_t v20 = type metadata accessor for DataFrame();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v16, v17, v20);
      char v21 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
      *(_OWORD *)&v16[v21[12]] = *(_OWORD *)&v17[v21[12]];
      *(_OWORD *)&v16[v21[16]] = *(_OWORD *)&v17[v21[16]];
      uint64_t v22 = v21[20];
      long long v23 = &v16[v22];
      uint64_t v24 = &v17[v22];
      long long v25 = *((_OWORD *)v24 + 1);
      *(_OWORD *)long long v23 = *(_OWORD *)v24;
      *((_OWORD *)v23 + 1) = v25;
      v23[32] = v24[32];
    }
    else
    {
      if (v19 > 1)
      {
        memcpy(v16, v17, *(void *)(*(void *)(v6 - 8) + 64));
        goto LABEL_15;
      }
      uint64_t v26 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32))(v16, v17, v26);
    }
    swift_storeEnumTagMultiPayload();
LABEL_15:
    swift_storeEnumTagMultiPayload();
    goto LABEL_16;
  }
  memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
LABEL_16:
  uint64_t v27 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  *(void *)&a1[v27] = *(void *)&a2[v27];
  uint64_t v28 = a3[9];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  uint64_t v29 = &a1[v28];
  uint64_t v30 = &a2[v28];
  *(void *)uint64_t v29 = *(void *)v30;
  v29[8] = v30[8];
  return a1;
}

char *assignWithTake for MLSoundClassifier.PersistentParameters(char *a1, char *a2, int *a3)
{
  if (a1 == a2) {
    goto LABEL_17;
  }
  outlined destroy of MLSoundClassifier.DataSource((uint64_t)a1, (void (*)(void))type metadata accessor for MLSoundClassifier.DataSource);
  uint64_t v6 = type metadata accessor for MLSoundClassifier.DataSource();
  unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 4)
  {
    uint64_t v8 = type metadata accessor for DataFrame();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
    uint64_t v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
    *(_OWORD *)&a1[v9[12]] = *(_OWORD *)&a2[v9[12]];
    *(_OWORD *)&a1[v9[16]] = *(_OWORD *)&a2[v9[16]];
    uint64_t v10 = v9[20];
    uint64_t v11 = &a1[v10];
    uint64_t v12 = &a2[v10];
    long long v13 = *((_OWORD *)v12 + 1);
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
    *((_OWORD *)v11 + 1) = v13;
    v11[32] = v12[32];
  }
  else
  {
    if (EnumCaseMultiPayload > 1)
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      goto LABEL_8;
    }
    uint64_t v14 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(a1, a2, v14);
  }
  swift_storeEnumTagMultiPayload();
LABEL_8:
  uint64_t v15 = a3[5];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  outlined destroy of MLSoundClassifier.DataSource((uint64_t)&a1[v15], (void (*)(void))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
  uint64_t v18 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    unsigned int v19 = swift_getEnumCaseMultiPayload();
    if (v19 == 4)
    {
      uint64_t v20 = type metadata accessor for DataFrame();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v16, v17, v20);
      char v21 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
      *(_OWORD *)&v16[v21[12]] = *(_OWORD *)&v17[v21[12]];
      *(_OWORD *)&v16[v21[16]] = *(_OWORD *)&v17[v21[16]];
      uint64_t v22 = v21[20];
      long long v23 = &v16[v22];
      uint64_t v24 = &v17[v22];
      long long v25 = *((_OWORD *)v24 + 1);
      *(_OWORD *)long long v23 = *(_OWORD *)v24;
      *((_OWORD *)v23 + 1) = v25;
      v23[32] = v24[32];
    }
    else
    {
      if (v19 > 1)
      {
        memcpy(v16, v17, *(void *)(*(void *)(v6 - 8) + 64));
        goto LABEL_16;
      }
      uint64_t v26 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32))(v16, v17, v26);
    }
    swift_storeEnumTagMultiPayload();
LABEL_16:
    swift_storeEnumTagMultiPayload();
    goto LABEL_17;
  }
  memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
LABEL_17:
  uint64_t v27 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  *(void *)&a1[v27] = *(void *)&a2[v27];
  uint64_t v28 = a3[9];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  uint64_t v29 = &a1[v28];
  uint64_t v30 = &a2[v28];
  *(void *)uint64_t v29 = *(void *)v30;
  v29[8] = v30[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for MLSoundClassifier.PersistentParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_227180CC4);
}

uint64_t sub_227180CC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for MLSoundClassifier.DataSource();
  OUTLINED_FUNCTION_6_1();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
  }
  else
  {
    type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
    OUTLINED_FUNCTION_6_1();
    if (*(_DWORD *)(v11 + 84) != a2)
    {
      unsigned int v13 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 36) + 8);
      if (v13 > 1) {
        return (v13 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
    uint64_t v8 = v10;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
  }

  return __swift_getEnumTagSinglePayload(v9, a2, v8);
}

uint64_t storeEnumTagSinglePayload for MLSoundClassifier.PersistentParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_227180D8C);
}

void sub_227180D8C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for MLSoundClassifier.DataSource();
  OUTLINED_FUNCTION_6_1();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
    OUTLINED_FUNCTION_6_1();
    if (*(_DWORD *)(v13 + 84) != a3)
    {
      *(unsigned char *)(a1 + *(int *)(a4 + 36) + 8) = -(char)a2;
      return;
    }
    uint64_t v10 = v12;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
  }

  __swift_storeEnumTagSinglePayload(v11, a2, a2, v10);
}

uint64_t type metadata accessor for MLSoundClassifier.PersistentParameters()
{
  uint64_t result = type metadata singleton initialization cache for MLSoundClassifier.PersistentParameters;
  if (!type metadata singleton initialization cache for MLSoundClassifier.PersistentParameters) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for MLSoundClassifier.PersistentParameters()
{
  uint64_t result = type metadata accessor for MLSoundClassifier.DataSource();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t MLSoundClassifier.PersistentParameters.init(trainingData:modelParameters:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (int *)type metadata accessor for MLSoundClassifier.PersistentParameters();
  uint64_t v7 = v6[6];
  uint64_t v8 = v6[7];
  uint64_t v9 = v6[8];
  uint64_t v10 = a3 + v6[9];
  *(void *)uint64_t v10 = 1;
  *(unsigned char *)(v10 + 8) = 1;
  _s8CreateML17MLSoundClassifierV15ModelParametersV14ValidationDataOWOcTm_0(a1, a3, (void (*)(void))type metadata accessor for MLSoundClassifier.DataSource);
  _s8CreateML17MLSoundClassifierV15ModelParametersV14ValidationDataOWOcTm_0(a2, a3 + v6[5], (void (*)(void))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
  uint64_t v11 = (int *)type metadata accessor for MLSoundClassifier.ModelParameters();
  *(void *)(a3 + v7) = *(void *)(a2 + v11[6]);
  *(double *)(a3 + v8) = MLSoundClassifier.ModelParameters.featureExtractionTimeWindowSize.getter();
  *(void *)(a3 + v9) = *(void *)(a2 + v11[5]);
  outlined init with copy of Any?(a2 + v11[7], (uint64_t)v17);
  if (!v18)
  {
    outlined destroy of URL?((uint64_t)v17, &demangling cache variable for type metadata for Any?);
    goto LABEL_5;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_5:
    uint64_t v12 = 1;
    char v13 = 1;
    goto LABEL_6;
  }
  uint64_t v12 = v15;
  char v13 = v16;
LABEL_6:
  outlined destroy of MLSoundClassifier.DataSource(a2, (void (*)(void))type metadata accessor for MLSoundClassifier.ModelParameters);
  uint64_t result = outlined destroy of MLSoundClassifier.DataSource(a1, (void (*)(void))type metadata accessor for MLSoundClassifier.DataSource);
  *(void *)uint64_t v10 = v12;
  *(unsigned char *)(v10 + 8) = v13;
  return result;
}

void MLSoundClassifier.PersistentParameters.save(toSessionDirectory:)(uint64_t a1)
{
  uint64_t v89 = a1;
  uint64_t v103 = *MEMORY[0x263EF8340];
  uint64_t v2 = type metadata accessor for MLSoundClassifier.DataSource();
  uint64_t v3 = OUTLINED_FUNCTION_17(v2);
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_33_0();
  uint64_t v78 = v4;
  type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v90 = v6;
  uint64_t v91 = v5;
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_49();
  uint64_t v83 = v7;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v8);
  uint64_t v84 = (char *)&v78 - v9;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v10);
  uint64_t v87 = (char *)&v78 - v11;
  uint64_t v82 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_49();
  uint64_t v85 = v13;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v14);
  uint64_t v86 = (uint64_t)&v78 - v15;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v78 - v17;
  unsigned int v19 = (int *)type metadata accessor for MLSoundClassifier.ModelParameters();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v20);
  OUTLINED_FUNCTION_49();
  uint64_t v81 = v21;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v78 - v23;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2272CC1D0;
  *(void *)(inited + 32) = 0x676E696E69617274;
  *(void *)(inited + 40) = 0xE800000000000000;
  uint64_t v26 = MLSoundClassifier.DataSource.dictionary.getter();
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  uint64_t v94 = v27;
  *(void *)(inited + 48) = v26;
  *(void *)(inited + 72) = v27;
  *(void *)(inited + 80) = 0x69746164696C6176;
  *(void *)(inited + 88) = 0xEA00000000006E6FLL;
  uint64_t v28 = (int *)type metadata accessor for MLSoundClassifier.PersistentParameters();
  uint64_t v80 = &v1[v28[5]];
  _s8CreateML17MLSoundClassifierV15ModelParametersV14ValidationDataOWOcTm_0((uint64_t)v80, (uint64_t)v18, (void (*)(void))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
  uint64_t v29 = v28[9];
  uint64_t v97 = v28[8];
  int v98 = v1;
  uint64_t v30 = *(int **)&v1[v97];
  uint64_t v31 = v28[6];
  uint64_t v95 = v28;
  uint64_t v96 = v31;
  uint64_t v32 = *(void *)&v1[v31];
  long long v33 = &v1[v29];
  uint64_t v34 = *(void **)&v1[v29];
  id v92 = v30;
  uint64_t v93 = v34;
  unsigned __int8 v35 = v33[8];
  uint64_t v36 = &v24[v19[7]];
  *(_OWORD *)uint64_t v36 = 0u;
  *((_OWORD *)v36 + 1) = 0u;
  long long v37 = &v24[v19[8]];
  *(void *)long long v37 = 0;
  v37[8] = 1;
  *(void *)&v24[v19[9]] = 32;
  _s8CreateML17MLSoundClassifierV15ModelParametersV14ValidationDataOWOcTm_0((uint64_t)v18, (uint64_t)v24, (void (*)(void))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
  *(void *)&v24[v19[5]] = v92;
  id v92 = v19;
  *(void *)&v24[v19[6]] = v32;
  uint64_t v102 = &type metadata for MLSoundClassifier.ModelParameters.ModelAlgorithmType;
  id v100 = v93;
  unsigned __int8 v101 = v35;
  outlined assign with take of Any?((uint64_t)&v100, (uint64_t)v36);
  outlined destroy of MLSoundClassifier.DataSource((uint64_t)v18, (void (*)(void))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
  _s8CreateML17MLSoundClassifierV15ModelParametersV14ValidationDataOWOcTm_0((uint64_t)v24, (uint64_t)v18, (void (*)(void))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
  outlined destroy of MLSoundClassifier.DataSource((uint64_t)v24, (void (*)(void))type metadata accessor for MLSoundClassifier.ModelParameters);
  uint64_t v38 = MLSoundClassifier.ModelParameters.ValidationData.dictionary.getter();
  uint64_t v93 = v18;
  outlined destroy of MLSoundClassifier.DataSource((uint64_t)v18, (void (*)(void))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
  *(void *)(inited + 96) = v38;
  uint64_t v39 = v94;
  *(void *)(inited + 120) = v94;
  *(void *)(inited + 128) = 0x70616C7265766FLL;
  *(void *)(inited + 136) = 0xE700000000000000;
  uint64_t v40 = v98;
  uint64_t v41 = MEMORY[0x263F8D538];
  *(void *)(inited + 144) = *(void *)&v98[v96];
  *(void *)(inited + 168) = v41;
  strcpy((char *)(inited + 176), "max_iterations");
  *(unsigned char *)(inited + 191) = -18;
  uint64_t v42 = MEMORY[0x263F8D6C8];
  *(void *)(inited + 192) = *(void *)&v40[v97];
  *(void *)(inited + 216) = v42;
  *(void *)(inited + 224) = 0x687469726F676C61;
  *(void *)(inited + 232) = 0xE90000000000006DLL;
  uint64_t v43 = *(void **)v33;
  uint64_t v79 = (char **)v33;
  LOBYTE(v42) = v33[8];
  id v100 = v43;
  unsigned __int8 v101 = v42;
  uint64_t v44 = MLSoundClassifier.ModelParameters.ModelAlgorithmType.dictionary.getter();
  *(void *)(inited + 264) = v39;
  *(void *)(inited + 240) = v44;
  uint64_t v99 = Dictionary.init(dictionaryLiteral:)();
  char v45 = *(void **)&v40[v95[7]];
  uint64_t v102 = (ValueMetadata *)MEMORY[0x263F8D538];
  id v100 = v45;
  specialized Dictionary.subscript.setter((uint64_t)&v100, 0xD000000000000010, 0x80000002272D8550);
  long long v46 = self;
  OUTLINED_FUNCTION_42_12();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v100 = 0;
  id v48 = objc_msgSend(v46, sel_dataWithPropertyList_format_options_error_, isa, 200, 0, &v100);

  id v49 = v100;
  if (v48)
  {
    uint64_t v50 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v52 = v51;

    OUTLINED_FUNCTION_20_1();
    uint64_t v53 = v87;
    OUTLINED_FUNCTION_41_10();
    URL.appendingPathComponent(_:)();
    unint64_t v54 = v88;
    Data.write(to:options:)();
    if (v54)
    {
      OUTLINED_FUNCTION_25_0();
      v55();
      uint64_t v56 = v50;
      unint64_t v57 = v52;
LABEL_4:
      outlined consume of Data._Representation(v56, v57);
      return;
    }
    uint64_t v94 = v50;
    uint64_t v59 = v90 + 8;
    uint64_t v95 = *(int **)(v90 + 8);
    ((void (*)(char *, uint64_t))v95)(v53, v91);
    MLSoundClassifier.DataSource.table.getter((uint64_t)&v100);
    unsigned __int8 v60 = v101;
    if (v101 == 255)
    {
      unint64_t v88 = v52;
      uint64_t v90 = v59;
    }
    else
    {
      id v61 = v100;
      v101 &= 1u;
      uint64_t v62 = (uint64_t)v84;
      URL.appendingPathComponent(_:)();
      MLDataTable.write(to:)(v62);
      unint64_t v88 = v52;
      uint64_t v90 = v59;
      ((void (*)(uint64_t, uint64_t))v95)(v62, v91);
      outlined consume of MLDataTable?(v61, v60);
    }
    uint64_t v63 = (uint64_t)v93;
    _s8CreateML17MLSoundClassifierV15ModelParametersV14ValidationDataOWOcTm_0((uint64_t)v80, (uint64_t)v93, (void (*)(void))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
    uint64_t v64 = *(void *)&v98[v97];
    uint64_t v65 = *(void *)&v98[v96];
    int v98 = *v79;
    unsigned __int8 v66 = *((unsigned char *)v79 + 8);
    uint64_t v67 = v92;
    uint64_t v68 = v81;
    id v69 = (_OWORD *)(v81 + v92[7]);
    *id v69 = 0u;
    v69[1] = 0u;
    uint64_t v70 = v68 + v67[8];
    *(void *)uint64_t v70 = 0;
    *(unsigned char *)(v70 + 8) = 1;
    *(void *)(v68 + v67[9]) = 32;
    _s8CreateML17MLSoundClassifierV15ModelParametersV14ValidationDataOWOcTm_0(v63, v68, (void (*)(void))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
    *(void *)(v68 + v67[5]) = v64;
    *(void *)(v68 + v67[6]) = v65;
    uint64_t v102 = &type metadata for MLSoundClassifier.ModelParameters.ModelAlgorithmType;
    id v100 = v98;
    unsigned __int8 v101 = v66;
    outlined assign with take of Any?((uint64_t)&v100, (uint64_t)v69);
    outlined destroy of MLSoundClassifier.DataSource(v63, (void (*)(void))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
    uint64_t v71 = v86;
    _s8CreateML17MLSoundClassifierV15ModelParametersV14ValidationDataOWOcTm_0(v68, v86, (void (*)(void))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
    outlined destroy of MLSoundClassifier.DataSource(v68, (void (*)(void))type metadata accessor for MLSoundClassifier.ModelParameters);
    _s8CreateML17MLSoundClassifierV15ModelParametersV14ValidationDataOWOcTm_0(v71, v85, (void (*)(void))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    int v73 = 255;
    id v74 = 0;
    unint64_t v75 = v88;
    uint64_t v76 = v83;
    switch(EnumCaseMultiPayload)
    {
      case 1:
        uint64_t v77 = v78;
        outlined init with take of MLSoundClassifier.DataSource(v85, v78, (void (*)(void))type metadata accessor for MLSoundClassifier.DataSource);
        MLSoundClassifier.DataSource.table.getter((uint64_t)&v100);
        outlined destroy of MLSoundClassifier.DataSource(v77, (void (*)(void))type metadata accessor for MLSoundClassifier.DataSource);
        id v74 = v100;
        int v73 = v101;
        break;
      case 2:
        outlined destroy of MLSoundClassifier.DataSource(v85, (void (*)(void))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
        id v74 = 0;
        break;
      default:
        break;
    }
    outlined destroy of MLSoundClassifier.DataSource(v86, (void (*)(void))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
    if (v73 == 255)
    {
      uint64_t v56 = v94;
      unint64_t v57 = v75;
      goto LABEL_4;
    }
    id v100 = v74;
    unsigned __int8 v101 = v73 & 1;
    OUTLINED_FUNCTION_14_23();
    URL.appendingPathComponent(_:)();
    MLDataTable.write(to:)(v76);
    ((void (*)(uint64_t, uint64_t))v95)(v76, v91);
    outlined consume of Data._Representation(v94, v75);
    outlined consume of MLDataTable?(v74, v73);
  }
  else
  {
    uint64_t v58 = v49;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

uint64_t MLSoundClassifier.PersistentParameters.init(sessionDirectory:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v115 = *MEMORY[0x263EF8340];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLSoundClassifier.ModelParameters.ValidationData?);
  uint64_t v5 = OUTLINED_FUNCTION_17(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_33_0();
  uint64_t v101 = v6;
  uint64_t v102 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_33_0();
  uint64_t v100 = v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLSoundClassifier.DataSource?);
  uint64_t v10 = OUTLINED_FUNCTION_17(v9);
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_33_0();
  uint64_t v106 = v11;
  uint64_t v105 = type metadata accessor for MLSoundClassifier.DataSource();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_33_0();
  uint64_t v103 = v13;
  uint64_t v110 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v108 = v14;
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_49();
  uint64_t v104 = v16;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v17);
  uint64_t v107 = (char *)&v88 - v18;
  OUTLINED_FUNCTION_20_3();
  uint64_t v20 = MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v88 - v21;
  MEMORY[0x270FA5388](v20);
  uint64_t v23 = (int *)type metadata accessor for MLSoundClassifier.PersistentParameters();
  uint64_t v24 = v23[6];
  *(void *)(a2 + v24) = 0x3FE0000000000000;
  uint64_t v25 = v23[7];
  *(void *)(a2 + v25) = 0x3FEF333333333333;
  uint64_t v26 = v23[8];
  *(void *)(a2 + v26) = 25;
  uint64_t v27 = a2 + v23[9];
  *(void *)uint64_t v27 = 1;
  *(unsigned char *)(v27 + 8) = 1;
  OUTLINED_FUNCTION_20_1();
  OUTLINED_FUNCTION_41_10();
  URL.appendingPathComponent(_:)();
  uint64_t v28 = v109;
  uint64_t v29 = Data.init(contentsOf:options:)();
  if (v28)
  {
    uint64_t v31 = (void (*)(void))*((void *)v108 + 1);
    OUTLINED_FUNCTION_21_4();
    v31();
    OUTLINED_FUNCTION_21_4();
    return ((uint64_t (*)(void))v31)();
  }
  uint64_t v91 = v27;
  uint64_t v92 = v26;
  uint64_t v93 = v25;
  uint64_t v94 = v24;
  uint64_t v89 = v23;
  uint64_t v95 = v22;
  uint64_t v96 = a2;
  uint64_t v90 = 0;
  uint64_t v109 = a1;
  long long v33 = (void (*)(void))*((void *)v108 + 1);
  uint64_t v34 = v29;
  uint64_t v35 = v30;
  OUTLINED_FUNCTION_137();
  v33();
  uint64_t v36 = self;
  OUTLINED_FUNCTION_42_12();
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)&long long v112 = 0;
  id v38 = objc_msgSend(v36, sel_propertyListWithData_options_format_error_, isa, 0, 0, &v112);

  id v39 = (id)v112;
  if (!v38)
  {
    uint64_t v47 = v39;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v48 = OUTLINED_FUNCTION_42_12();
    outlined consume of Data._Representation(v48, v49);
    OUTLINED_FUNCTION_137();
    return ((uint64_t (*)(void))v33)();
  }
  uint64_t v97 = v34;
  uint64_t v98 = v35;
  uint64_t v99 = v33;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v114, (uint64_t)&v112);
  uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  char v41 = OUTLINED_FUNCTION_15_23();
  uint64_t v42 = v109;
  if ((v41 & 1) == 0)
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    uint64_t v51 = 0xD000000000000037;
LABEL_18:
    OUTLINED_FUNCTION_3_42(v50, v51);
    OUTLINED_FUNCTION_6_33();
    ((void (*)(uint64_t, uint64_t))v99)(v42, v110);
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)v114);
  }
  uint64_t v43 = v111;
  specialized Dictionary.subscript.getter(0x70616C7265766FLL, 0xE700000000000000, v111, &v112);
  if (!v113) {
    goto LABEL_15;
  }
  if ((OUTLINED_FUNCTION_21_21() & 1) == 0) {
    goto LABEL_16;
  }
  uint64_t v44 = v111;
  specialized Dictionary.subscript.getter(0x726574695F78616DLL, 0xEE00736E6F697461, v43, &v112);
  if (!v113)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    outlined destroy of URL?((uint64_t)&v112, &demangling cache variable for type metadata for Any?);
    goto LABEL_17;
  }
  if ((OUTLINED_FUNCTION_21_21() & 1) == 0)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  uint64_t v45 = v111;
  specialized Dictionary.subscript.getter(0x687469726F676C61, 0xE90000000000006DLL, v43, &v112);
  if (!v113) {
    goto LABEL_15;
  }
  if ((OUTLINED_FUNCTION_15_23() & 1) == 0) {
    goto LABEL_16;
  }
  MLSoundClassifier.ModelParameters.ModelAlgorithmType.init(dictionary:)(v111, (uint64_t)&v112);
  char v46 = BYTE8(v112);
  if (BYTE8(v112) == 255)
  {
    swift_bridgeObjectRelease();
    uint64_t v42 = v109;
LABEL_17:
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_1_5();
    uint64_t v51 = v52 + 36;
    goto LABEL_18;
  }
  uint64_t v53 = v112;
  OUTLINED_FUNCTION_20_1();
  unint64_t v54 = OUTLINED_FUNCTION_41_10();
  specialized Dictionary.subscript.getter(v54, v55, v43, v56);
  if (v113)
  {
    OUTLINED_FUNCTION_21_21();
    OUTLINED_FUNCTION_45_10();
    if (v58) {
      uint64_t v59 = v111;
    }
    else {
      uint64_t v59 = 0x3FEF333333333333;
    }
  }
  else
  {
    outlined destroy of URL?((uint64_t)&v112, &demangling cache variable for type metadata for Any?);
    OUTLINED_FUNCTION_45_10();
  }
  uint64_t v60 = v94;
  uint64_t v61 = v92;
  uint64_t v62 = v91;
  *(void *)(v57 + v93) = v59;
  *(void *)(v57 + v61) = v45;
  *(void *)(v57 + v60) = v44;
  *(void *)uint64_t v62 = v53;
  *(unsigned char *)(v62 + 8) = v46 & 1;
  URL.appendingPathComponent(_:)();
  specialized Dictionary.subscript.getter(0x676E696E69617274, 0xE800000000000000, v43, &v112);
  if (!v113)
  {
    swift_bridgeObjectRelease();
    outlined destroy of URL?((uint64_t)&v112, &demangling cache variable for type metadata for Any?);
LABEL_31:
    int v73 = v99;
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_1_5();
    OUTLINED_FUNCTION_3_42(v75, v74 + 30);
    OUTLINED_FUNCTION_6_33();
    goto LABEL_32;
  }
  char v63 = OUTLINED_FUNCTION_15_23();
  uint64_t v64 = v110;
  if ((v63 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_31;
  }
  uint64_t v95 = (char *)v43;
  uint64_t v94 = v40;
  uint64_t v65 = v111;
  unsigned __int8 v66 = v107;
  uint64_t v67 = OUTLINED_FUNCTION_42_12();
  uint64_t v108 = v68;
  v68(v67);
  uint64_t v69 = (uint64_t)v66;
  uint64_t v70 = v106;
  MLSoundClassifier.DataSource.init(dictionary:tableFile:)(v65, v69, v106);
  if (__swift_getEnumTagSinglePayload(v70, 1, v105) == 1)
  {
    swift_bridgeObjectRelease();
    outlined destroy of URL?(v70, &demangling cache variable for type metadata for MLSoundClassifier.DataSource?);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_1_5();
    OUTLINED_FUNCTION_3_42(v72, v71 + 37);
    OUTLINED_FUNCTION_6_33();
    int v73 = v99;
LABEL_32:
    OUTLINED_FUNCTION_137();
    v73();
    OUTLINED_FUNCTION_7_31();
    v73();
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)v114);
  }
  uint64_t v76 = v70;
  uint64_t v77 = v103;
  outlined init with take of MLSoundClassifier.DataSource(v76, v103, (void (*)(void))type metadata accessor for MLSoundClassifier.DataSource);
  outlined init with take of MLSoundClassifier.DataSource(v77, v96, (void (*)(void))type metadata accessor for MLSoundClassifier.DataSource);
  uint64_t v78 = v104;
  OUTLINED_FUNCTION_14_23();
  URL.appendingPathComponent(_:)();
  specialized Dictionary.subscript.getter(0x69746164696C6176, 0xEA00000000006E6FLL, (uint64_t)v95, &v112);
  swift_bridgeObjectRelease();
  if (!v113)
  {
    OUTLINED_FUNCTION_6_33();
    outlined destroy of URL?((uint64_t)&v112, &demangling cache variable for type metadata for Any?);
LABEL_39:
    uint64_t v85 = v99;
    OUTLINED_FUNCTION_137();
    v85();
    OUTLINED_FUNCTION_7_31();
    v85();
    OUTLINED_FUNCTION_7_31();
    v85();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v114);
    return swift_storeEnumTagMultiPayload();
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
    OUTLINED_FUNCTION_6_33();
    goto LABEL_39;
  }
  uint64_t v79 = v78;
  uint64_t v80 = v111;
  uint64_t v81 = (uint64_t)v107;
  ((void (*)(char *, uint64_t, uint64_t))v108)(v107, v79, v64);
  uint64_t v82 = v101;
  MLSoundClassifier.ModelParameters.ValidationData.init(dictionary:tableFile:)(v80, v81, v101);
  if (__swift_getEnumTagSinglePayload(v82, 1, v102) == 1)
  {
    outlined destroy of URL?(v82, &demangling cache variable for type metadata for MLSoundClassifier.ModelParameters.ValidationData?);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_3_42(v83, 0xD000000000000037);
    OUTLINED_FUNCTION_6_33();
    uint64_t v84 = v99;
    OUTLINED_FUNCTION_137();
    v84();
    OUTLINED_FUNCTION_7_31();
    v84();
    OUTLINED_FUNCTION_7_31();
    v84();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v114);
    return outlined destroy of MLSoundClassifier.DataSource(v96, (void (*)(void))type metadata accessor for MLSoundClassifier.DataSource);
  }
  else
  {
    OUTLINED_FUNCTION_6_33();
    uint64_t v86 = v99;
    OUTLINED_FUNCTION_137();
    v86();
    OUTLINED_FUNCTION_7_31();
    v86();
    OUTLINED_FUNCTION_7_31();
    v86();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v114);
    uint64_t v87 = v100;
    outlined init with take of MLSoundClassifier.DataSource(v82, v100, (void (*)(void))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
    return outlined init with take of MLSoundClassifier.DataSource(v87, v96 + v89[5], (void (*)(void))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
  }
}

uint64_t MLSoundClassifier.ModelParameters.ModelAlgorithmType.init(dictionary:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (!*(void *)(a1 + 16)) {
    goto LABEL_19;
  }
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(1684957547, 0xE400000000000000);
  if ((v5 & 1) == 0) {
    goto LABEL_19;
  }
  outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v4, (uint64_t)&v13);
  if ((OUTLINED_FUNCTION_11_26() & 1) == 0) {
    goto LABEL_19;
  }
  specialized Dictionary.subscript.getter(0x6E6F6973726576, 0xE700000000000000, a1, &v13);
  if (!v14)
  {
    swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  if ((OUTLINED_FUNCTION_11_26() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  uint64_t v6 = v11;
  specialized Dictionary.subscript.getter(0x6966697373616C63, 0xEA00000000007265, a1, &v13);
  swift_bridgeObjectRelease();
  if (!v14)
  {
LABEL_22:
    swift_bridgeObjectRelease();
    uint64_t result = outlined destroy of URL?((uint64_t)&v13, &demangling cache variable for type metadata for Any?);
    goto LABEL_20;
  }
  if ((OUTLINED_FUNCTION_11_26() & 1) == 0) {
    goto LABEL_19;
  }
  BOOL v7 = v11 == 0x687369676776 && v12 == 0xE600000000000000;
  if (!v7 && (OUTLINED_FUNCTION_38_13(), (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    || (v11 != 0xD000000000000012 || v12 != 0x80000002272D8590) && (OUTLINED_FUNCTION_17_19() & 1) == 0)
  {
    if (v11 == 0xD000000000000013 && v12 == 0x80000002272D8570
      || (OUTLINED_FUNCTION_20_1(), (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      if (v11 == 0xD000000000000012 && v12 == 0x80000002272D8590)
      {
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
LABEL_30:
        char v9 = 1;
        goto LABEL_21;
      }
      char v10 = OUTLINED_FUNCTION_17_19();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if (v10) {
        goto LABEL_30;
      }
LABEL_20:
      uint64_t v6 = 0;
      char v9 = -1;
      goto LABEL_21;
    }
    swift_bridgeObjectRelease();
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  char v9 = 0;
LABEL_21:
  *(void *)a2 = v6;
  *(unsigned char *)(a2 + 8) = v9;
  return result;
}

uint64_t MLSoundClassifier.DataSource.init(dictionary:tableFile:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v9 = v8;
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_57_1();
  uint64_t v11 = type metadata accessor for MLSoundClassifier.DataSource();
  OUTLINED_FUNCTION_8();
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  uint64_t v15 = (uint64_t *)((char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v52 - v16;
  if (!*(void *)(a1 + 16)
    || (unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(1684957547, 0xE400000000000000), (v19 & 1) == 0)
    || (outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v18, (uint64_t)&v56),
        (OUTLINED_FUNCTION_10_25() & 1) == 0))
  {
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  uint64_t v55 = a3;
  uint64_t v20 = (uint64_t)v81;
  a3 = v82;
  if (v81 != (void *)0xD000000000000013 || v82 != 0x80000002272D5430)
  {
    OUTLINED_FUNCTION_20_1();
    if ((OUTLINED_FUNCTION_23_11() & 1) == 0)
    {
      BOOL v28 = v20 == 0x5F64656C6562616CLL && a3 == 0xED000073656C6966;
      if (v28 || (OUTLINED_FUNCTION_23_11() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_25_20(1752457584, &v56);
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_32_15();
        if (!v29) {
          goto LABEL_47;
        }
        if (OUTLINED_FUNCTION_10_25()) {
          goto LABEL_9;
        }
LABEL_13:
        uint64_t v25 = OUTLINED_FUNCTION_5_35();
        v26(v25);
        uint64_t v24 = 1;
        return __swift_storeEnumTagSinglePayload(a3, v24, 1, v11);
      }
      BOOL v30 = v20 == 0x79625F73656C6966 && a3 == 0xEE006C6562616C5FLL;
      if (v30 || (OUTLINED_FUNCTION_23_11() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        specialized Dictionary.subscript.getter(0x73656C6966, 0xE500000000000000, a1, &v56);
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_32_15();
        if (!v31) {
          goto LABEL_47;
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : [String]]);
        if (OUTLINED_FUNCTION_10_25())
        {
          uint64_t v32 = specialized _NativeDictionary.mapValues<A>(_:)((uint64_t)v81);
          swift_bridgeObjectRelease();
          uint64_t v33 = OUTLINED_FUNCTION_5_35();
          v34(v33);
          *uint64_t v15 = v32;
          goto LABEL_10;
        }
        goto LABEL_13;
      }
      OUTLINED_FUNCTION_36_14();
      if (v20 == v35 && a3 == 0xE800000000000000)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v37 = OUTLINED_FUNCTION_23_11();
        swift_bridgeObjectRelease();
        if ((v37 & 1) == 0)
        {
          uint64_t v38 = OUTLINED_FUNCTION_5_35();
          v39(v38);
          swift_bridgeObjectRelease();
          goto LABEL_56;
        }
      }
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v3, a2, v7);
      char v77 = 1;
      LOBYTE(v56) = 1;
      *(_DWORD *)((char *)&v56 + 1) = *(_DWORD *)v80;
      DWORD1(v56) = *(_DWORD *)&v80[3];
      *((void *)&v56 + 1) = 44;
      unint64_t v57 = 0xE100000000000000;
      uint64_t v58 = 0;
      unint64_t v59 = 0xE000000000000000;
      uint64_t v60 = 92;
      unint64_t v61 = 0xE100000000000000;
      char v62 = 1;
      *(_DWORD *)char v63 = *(_DWORD *)v79;
      *(_DWORD *)&v63[3] = *(_DWORD *)&v79[3];
      uint64_t v64 = 34;
      unint64_t v65 = 0xE100000000000000;
      char v66 = 1;
      *(_DWORD *)uint64_t v67 = *(_DWORD *)v78;
      *(_DWORD *)&v67[3] = *(_DWORD *)&v78[3];
      uint64_t v68 = &outlined read-only object #0 of default argument 1 of MLDataTable.init(contentsOf:options:);
      uint64_t v69 = 10;
      unint64_t v70 = 0xE100000000000000;
      uint64_t v71 = 0;
      uint64_t v72 = 0;
      char v73 = 1;
      *(_DWORD *)uint64_t v74 = *(_DWORD *)v76;
      *(_DWORD *)&v74[3] = *(_DWORD *)&v76[3];
      uint64_t v75 = 0;
      MLDataTable.init(contentsOf:options:)(v3, &v56, (uint64_t)&v81);
      a3 = v55;
      uint64_t v40 = v81;
      char v41 = v82;
      specialized Dictionary.subscript.getter(0x5F65727574616566, 0xEE006E6D756C6F63, a1, &v56);
      if (!v58)
      {
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_28_14();
        goto LABEL_47;
      }
      if ((OUTLINED_FUNCTION_10_25() & 1) == 0)
      {
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_28_14();
        goto LABEL_13;
      }
      uint64_t v43 = (uint64_t)v81;
      uint64_t v42 = v82;
      specialized Dictionary.subscript.getter(0x6F635F6C6562616CLL, 0xEC0000006E6D756CLL, a1, &v56);
      if (v58)
      {
        if ((OUTLINED_FUNCTION_10_25() & 1) == 0)
        {
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_28_14();
LABEL_54:
          swift_bridgeObjectRelease();
          goto LABEL_55;
        }
        uint64_t v53 = (uint64_t)v81;
        uint64_t v54 = v82;
        specialized Dictionary.subscript.getter(0x6574656D61726170, 0xEA00000000007372, a1, &v56);
        swift_bridgeObjectRelease();
        if (v58)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
          if (OUTLINED_FUNCTION_10_25())
          {
            MLSoundClassifier.FeatureExtractionParameters.init(dictionary:)((uint64_t)v81, (uint64_t)&v56);
            uint64_t v44 = OUTLINED_FUNCTION_5_35();
            v45(v44);
            char v46 = v59;
            if (v59 != 255)
            {
              uint64_t v47 = v58;
              char v48 = v57;
              uint64_t v49 = *((void *)&v56 + 1);
              uint64_t v50 = v56;
              *(void *)uint64_t v17 = v40;
              v17[8] = v41;
              *((void *)v17 + 2) = v43;
              *((void *)v17 + 3) = v42;
              uint64_t v51 = v54;
              *((void *)v17 + 4) = v53;
              *((void *)v17 + 5) = v51;
              *((void *)v17 + 6) = v50;
              *((void *)v17 + 7) = v49;
              v17[64] = v48 & 1;
              *((void *)v17 + 9) = v47;
              v17[80] = v46 & 1;
              swift_storeEnumTagMultiPayload();
              a3 = v55;
              goto LABEL_11;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            OUTLINED_FUNCTION_28_14();
LABEL_56:
            uint64_t v24 = 1;
            a3 = v55;
            return __swift_storeEnumTagSinglePayload(a3, v24, 1, v11);
          }
          outlined consume of Result<_DataTable, Error>(v40, v41);
          swift_bridgeObjectRelease();
          goto LABEL_54;
        }
        outlined consume of Result<_DataTable, Error>(v40, v41);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_28_14();
      }
      swift_bridgeObjectRelease();
      outlined destroy of URL?((uint64_t)&v56, &demangling cache variable for type metadata for Any?);
LABEL_55:
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a2, v7);
      goto LABEL_56;
    }
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_25_20(1752457584, &v56);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_32_15();
  if (!v21)
  {
LABEL_47:
    outlined destroy of URL?((uint64_t)&v56, &demangling cache variable for type metadata for Any?);
    goto LABEL_13;
  }
  if ((OUTLINED_FUNCTION_10_25() & 1) == 0) {
    goto LABEL_13;
  }
LABEL_9:
  URL.init(fileURLWithPath:)();
  swift_bridgeObjectRelease();
  uint64_t v22 = OUTLINED_FUNCTION_5_35();
  v23(v22);
LABEL_10:
  swift_storeEnumTagMultiPayload();
  outlined init with take of MLSoundClassifier.DataSource((uint64_t)v15, (uint64_t)v17, (void (*)(void))type metadata accessor for MLSoundClassifier.DataSource);
LABEL_11:
  outlined init with take of MLSoundClassifier.DataSource((uint64_t)v17, a3, (void (*)(void))type metadata accessor for MLSoundClassifier.DataSource);
  uint64_t v24 = 0;
  return __swift_storeEnumTagSinglePayload(a3, v24, 1, v11);
}

uint64_t MLSoundClassifier.ModelParameters.ValidationData.init(dictionary:tableFile:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v7 = v6;
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_3_0();
  uint64_t v11 = v10 - v9;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLSoundClassifier.DataSource?);
  uint64_t v13 = OUTLINED_FUNCTION_17(v12);
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_3_0();
  uint64_t v16 = v15 - v14;
  uint64_t v17 = type metadata accessor for MLSoundClassifier.DataSource();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_3_0();
  uint64_t v21 = v20 - v19;
  uint64_t v22 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v23);
  OUTLINED_FUNCTION_3_0();
  uint64_t v26 = v25 - v24;
  if (!*(void *)(a1 + 16)) {
    goto LABEL_25;
  }
  unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(1684957547, 0xE400000000000000);
  if ((v28 & 1) == 0) {
    goto LABEL_25;
  }
  outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v27, (uint64_t)&v47);
  if ((OUTLINED_FUNCTION_22_5() & 1) == 0) {
    goto LABEL_25;
  }
  BOOL v29 = v45 == 1701736302 && v46 == 0xE400000000000000;
  if (v29 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v30 = OUTLINED_FUNCTION_13_28();
    v31(v30);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  BOOL v33 = v45 == 0x756F735F61746164 && v46 == 0xEB00000000656372;
  if (!v33 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    if (v45 == 0x74696C7073 && v46 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v36 & 1) == 0)
      {
LABEL_25:
        uint64_t v37 = OUTLINED_FUNCTION_13_28();
        v38(v37);
        swift_bridgeObjectRelease();
        goto LABEL_26;
      }
    }
    OUTLINED_FUNCTION_25_20(1635017060, &v47);
    swift_bridgeObjectRelease();
    if (!v50) {
      goto LABEL_33;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    if ((OUTLINED_FUNCTION_22_5() & 1) == 0) {
      goto LABEL_34;
    }
    MLSplitStrategy.init(dictionary:)(v45, (uint64_t)&v47);
    uint64_t v40 = OUTLINED_FUNCTION_13_28();
    v41(v40);
    if ((v49 & 1) == 0)
    {
      __int16 v42 = v48;
      *(_OWORD *)uint64_t v26 = v47;
      *(unsigned char *)(v26 + 16) = v42;
      *(unsigned char *)(v26 + 17) = HIBYTE(v42) & 1;
      goto LABEL_10;
    }
LABEL_26:
    uint64_t v32 = 1;
    return __swift_storeEnumTagSinglePayload(a3, v32, 1, v22);
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_25_20(1635017060, &v47);
  swift_bridgeObjectRelease();
  if (!v50)
  {
LABEL_33:
    outlined destroy of URL?((uint64_t)&v47, &demangling cache variable for type metadata for Any?);
    goto LABEL_34;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  if ((OUTLINED_FUNCTION_22_5() & 1) == 0)
  {
LABEL_34:
    OUTLINED_FUNCTION_21_4();
    v43();
    goto LABEL_26;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v11, a2, v5);
  MLSoundClassifier.DataSource.init(dictionary:tableFile:)(v45, v11, v16);
  OUTLINED_FUNCTION_21_4();
  v34();
  if (__swift_getEnumTagSinglePayload(v16, 1, v17) == 1)
  {
    outlined destroy of URL?(v16, &demangling cache variable for type metadata for MLSoundClassifier.DataSource?);
    uint64_t v32 = 1;
    return __swift_storeEnumTagSinglePayload(a3, v32, 1, v22);
  }
  outlined init with take of MLSoundClassifier.DataSource(v16, v21, (void (*)(void))type metadata accessor for MLSoundClassifier.DataSource);
  outlined init with take of MLSoundClassifier.DataSource(v21, v26, (void (*)(void))type metadata accessor for MLSoundClassifier.DataSource);
LABEL_10:
  swift_storeEnumTagMultiPayload();
  outlined init with take of MLSoundClassifier.DataSource(v26, a3, (void (*)(void))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
  uint64_t v32 = 0;
  return __swift_storeEnumTagSinglePayload(a3, v32, 1, v22);
}

uint64_t MLSoundClassifier.DataSource.dictionary.getter()
{
  uint64_t v2 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_30_2();
  type metadata accessor for MLSoundClassifier.DataSource();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_41_1();
  _s8CreateML17MLSoundClassifierV15ModelParametersV14ValidationDataOWOcTm_0(v0, v1, (void (*)(void))type metadata accessor for MLSoundClassifier.DataSource);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v15 = OUTLINED_FUNCTION_20_21();
      v16(v15);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t inited = (__n128 *)swift_initStackObject();
      uint64_t v9 = (uint64_t)OUTLINED_FUNCTION_5_5(inited, (__n128)xmmword_2272CB4D0);
      unint64_t v12 = MEMORY[0x263F8D310];
      unint64_t v13 = 0x5F64656C6562616CLL;
      unint64_t v14 = 0xED000073656C6966;
      goto LABEL_4;
    case 2u:
      id v20 = *(id *)v1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t v21 = (__n128 *)swift_initStackObject();
      uint64_t v22 = OUTLINED_FUNCTION_5_5(v21, (__n128)xmmword_2272CB4D0);
      unint64_t v23 = MEMORY[0x263F8D310];
      strcpy((char *)&v22[3], "files_by_label");
      v22[3].n128_u8[15] = -18;
      v22[4].n128_u64[1] = v23;
      v22[5].n128_u64[0] = 0x73656C6966;
      v22[5].n128_u64[1] = 0xE500000000000000;
      uint64_t v24 = specialized _NativeDictionary.mapValues<A>(_:)((uint64_t)v20);
      swift_bridgeObjectRelease();
      v21[7].n128_u64[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : [String]]);
      v21[6].n128_u64[0] = v24;
      goto LABEL_9;
    case 3u:
      uint64_t v25 = *(void *)(v1 + 24);
      uint64_t v38 = *(void *)(v1 + 16);
      uint64_t v26 = *(void *)(v1 + 32);
      uint64_t v27 = *(void *)(v1 + 40);
      outlined consume of Result<_DataTable, Error>(*(id *)v1, *(unsigned char *)(v1 + 8));
      goto LABEL_8;
    case 4u:
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
      BOOL v29 = (uint64_t *)(v1 + *(int *)(v28 + 48));
      uint64_t v25 = v29[1];
      uint64_t v38 = *v29;
      uint64_t v30 = (uint64_t *)(v1 + *(int *)(v28 + 64));
      uint64_t v26 = *v30;
      uint64_t v27 = v30[1];
      type metadata accessor for DataFrame();
      OUTLINED_FUNCTION_8();
      (*(void (**)(uint64_t))(v31 + 8))(v1);
LABEL_8:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t v32 = (__n128 *)swift_initStackObject();
      OUTLINED_FUNCTION_5_5(v32, (__n128)xmmword_2272CB360);
      uint64_t v33 = MEMORY[0x263F8D310];
      OUTLINED_FUNCTION_36_14();
      *(void *)(v34 + 48) = v35;
      *(void *)(v34 + 56) = 0xE800000000000000;
      *(void *)(v34 + 72) = v33;
      strcpy((char *)(v34 + 80), "feature_column");
      *(unsigned char *)(v34 + 95) = -18;
      *(void *)(v34 + 96) = v38;
      *(void *)(v34 + 104) = v25;
      *(void *)(v34 + 120) = v33;
      strcpy((char *)(v34 + 128), "label_column");
      *(unsigned char *)(v34 + 141) = 0;
      *(_WORD *)(v34 + 142) = -5120;
      *(void *)(v34 + 144) = v26;
      *(void *)(v34 + 152) = v27;
      *(void *)(v34 + 168) = v33;
      *(void *)(v34 + 176) = 0x6574656D61726170;
      *(void *)(v34 + 184) = 0xEA00000000007372;
      uint64_t v36 = MLSoundClassifier.FeatureExtractionParameters.dictionary.getter();
      v32[13].n128_u64[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
      v32[12].n128_u64[0] = v36;
LABEL_9:
      uint64_t v19 = Dictionary.init(dictionaryLiteral:)();
      break;
    default:
      uint64_t v7 = OUTLINED_FUNCTION_20_21();
      v8(v7);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t v9 = swift_initStackObject();
      uint64_t inited = (__n128 *)v9;
      *(_OWORD *)(v9 + 16) = xmmword_2272CB4D0;
      unint64_t v11 = 0xE400000000000000;
      unint64_t v12 = MEMORY[0x263F8D310];
      *(void *)(v9 + 32) = 1684957547;
      *(void *)(v9 + 40) = 0xE400000000000000;
      unint64_t v13 = 0xD000000000000013;
      unint64_t v14 = 0x80000002272D5430;
LABEL_4:
      *(void *)(v9 + 48) = v13;
      *(void *)(v9 + 56) = v14;
      *(void *)(v9 + 72) = v12;
      *(void *)(v9 + 80) = 1752457584;
      *(void *)(v9 + 88) = v11;
      uint64_t v17 = URL.path.getter();
      inited[7].n128_u64[1] = v12;
      inited[6].n128_u64[0] = v17;
      inited[6].n128_u64[1] = v18;
      uint64_t v19 = Dictionary.init(dictionaryLiteral:)();
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0, v2);
      break;
  }
  return v19;
}

uint64_t outlined destroy of MLSoundClassifier.DataSource(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_25_0();
  v3();
  return a1;
}

uint64_t MLSoundClassifier.ModelParameters.ValidationData.dictionary.getter()
{
  type metadata accessor for MLSoundClassifier.DataSource();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_30_2();
  type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_41_1();
  _s8CreateML17MLSoundClassifierV15ModelParametersV14ValidationDataOWOcTm_0((uint64_t)v0, (uint64_t)v1, (void (*)(void))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with take of MLSoundClassifier.DataSource((uint64_t)v1, (uint64_t)v0, (void (*)(void))type metadata accessor for MLSoundClassifier.DataSource);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      goto LABEL_7;
    case 2u:
      *uint64_t v0 = *v1;
      swift_storeEnumTagMultiPayload();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
LABEL_7:
      uint64_t inited = (__n128 *)swift_initStackObject();
      unint64_t v12 = OUTLINED_FUNCTION_5_5(inited, (__n128)xmmword_2272CB4D0);
      OUTLINED_FUNCTION_30_16(v12, 0x756F735F61746164);
      uint64_t v13 = MLSoundClassifier.DataSource.dictionary.getter();
      inited[7].n128_u64[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
      inited[6].n128_u64[0] = v13;
      uint64_t v10 = Dictionary.init(dictionaryLiteral:)();
      outlined destroy of MLSoundClassifier.DataSource((uint64_t)v0, (void (*)(void))type metadata accessor for MLSoundClassifier.DataSource);
      return v10;
    case 3u:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t v7 = (__n128 *)swift_initStackObject();
      uint64_t v8 = OUTLINED_FUNCTION_5_5(v7, (__n128)xmmword_2272CB370);
      v8[4].n128_u64[1] = MEMORY[0x263F8D310];
      v8[3].n128_u64[0] = 1701736302;
      v8[3].n128_u64[1] = v9;
      return Dictionary.init(dictionaryLiteral:)();
    default:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t v4 = (__n128 *)swift_initStackObject();
      uint64_t v5 = OUTLINED_FUNCTION_5_5(v4, (__n128)xmmword_2272CB4D0);
      OUTLINED_FUNCTION_30_16(v5, 0x74696C7073);
      uint64_t v6 = MLSplitStrategy.dictionary.getter();
      v4[7].n128_u64[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
      v4[6].n128_u64[0] = v6;
      return Dictionary.init(dictionaryLiteral:)();
  }
}

uint64_t MLSoundClassifier.ModelParameters.ModelAlgorithmType.dictionary.getter()
{
  unint64_t v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  uint64_t v3 = MEMORY[0x263F8D310];
  uint64_t v14 = Dictionary.init(dictionaryLiteral:)();
  if (v2)
  {
    OUTLINED_FUNCTION_29_17();
    specialized Dictionary.subscript.setter(v4, v5, 0xE400000000000000);
    uint64_t v13 = v3;
    OUTLINED_FUNCTION_35_13();
    unint64_t v11 = v6;
    unint64_t v12 = v7;
    uint64_t v8 = &v11;
    uint64_t v9 = 1701869940;
  }
  else
  {
    uint64_t v13 = v3;
    OUTLINED_FUNCTION_39_13();
    OUTLINED_FUNCTION_29_17();
  }
  specialized Dictionary.subscript.setter((uint64_t)v8, v9, 0xE400000000000000);
  uint64_t v13 = MEMORY[0x263F8D6C8];
  unint64_t v11 = v1;
  specialized Dictionary.subscript.setter((uint64_t)&v11, 0x6E6F6973726576, 0xE700000000000000);
  uint64_t v13 = v3;
  unint64_t v11 = 0xD000000000000012;
  unint64_t v12 = 0x80000002272D8590;
  specialized Dictionary.subscript.setter((uint64_t)&v11, 0x6966697373616C63, 0xEA00000000007265);
  return v14;
}

uint64_t MLSoundClassifier.DataSource.table.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v7 = v6;
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  unint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v22 - v12;
  type metadata accessor for MLSoundClassifier.DataSource();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_57_1();
  _s8CreateML17MLSoundClassifierV15ModelParametersV14ValidationDataOWOcTm_0(v3, v2, (void (*)(void))type metadata accessor for MLSoundClassifier.DataSource);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 2u:
      uint64_t result = outlined destroy of MLSoundClassifier.DataSource(v2, (void (*)(void))type metadata accessor for MLSoundClassifier.DataSource);
      goto LABEL_6;
    case 3u:
      uint64_t v17 = *(void *)v2;
      char v18 = *(unsigned char *)(v2 + 8);
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)a1 = v17;
      *(unsigned char *)(a1 + 8) = v18;
      break;
    case 4u:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 32))(v13, v2, v5);
      static MLSoundClassifier.DataSource.reformatFeatures(dataFrame:featureColumn:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v11, v13, v5);
      MLDataTable.init(_:convertArraysToShapedArrays:)(0, (uint64_t)&v23);
      uint64_t v19 = OUTLINED_FUNCTION_4_1();
      uint64_t result = v20(v19);
      char v21 = v24;
      *(void *)a1 = v23;
      *(unsigned char *)(a1 + 8) = v21;
      break;
    default:
      type metadata accessor for URL();
      OUTLINED_FUNCTION_8();
      OUTLINED_FUNCTION_25_0();
      uint64_t result = v15();
LABEL_6:
      *(void *)a1 = 0;
      *(unsigned char *)(a1 + 8) = -1;
      break;
  }
  return result;
}

uint64_t _s8CreateML17MLSoundClassifierV15ModelParametersV14ValidationDataOWOcTm_0(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_8();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t MLSoundClassifier.FeatureExtractionParameters.dictionary.getter()
{
  double v1 = *v0;
  double v2 = v0[1];
  int v3 = *((unsigned __int8 *)v0 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  uint64_t v5 = inited;
  *(_OWORD *)(inited + 16) = xmmword_2272CB4A0;
  strcpy((char *)(inited + 32), "overlap_factor");
  *(unsigned char *)(inited + 47) = -18;
  uint64_t v6 = MEMORY[0x263F8D538];
  *(double *)(inited + 48) = v1;
  *(void *)(inited + 72) = v6;
  *(void *)(inited + 80) = 0xD000000000000010;
  *(void *)(inited + 88) = 0x80000002272D8550;
  double v7 = 0.975;
  if (!v3) {
    double v7 = v2;
  }
  *(double *)(inited + 96) = v7;
  *(void *)(inited + 120) = v6;
  *(void *)(inited + 128) = 0xD000000000000011;
  *(void *)(inited + 136) = 0x80000002272D85B0;
  uint64_t v8 = MLSoundClassifier.ModelParameters.FeatureExtractorType.dictionary.getter();
  *(void *)(v5 + 168) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  *(void *)(v5 + 144) = v8;
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t MLSoundClassifier.FeatureExtractionParameters.init(dictionary:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  specialized Dictionary.subscript.getter(0x5F70616C7265766FLL, 0xEE00726F74636166, a1, &v13);
  if (!v14) {
    goto LABEL_7;
  }
  if ((OUTLINED_FUNCTION_19_21() & 1) == 0)
  {
LABEL_6:
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  OUTLINED_FUNCTION_1_5();
  specialized Dictionary.subscript.getter(v4 | 1, 0x80000002272D85B0, a1, &v13);
  if (!v14)
  {
LABEL_7:
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  if ((OUTLINED_FUNCTION_19_21() & 1) == 0) {
    goto LABEL_6;
  }
  MLSoundClassifier.ModelParameters.FeatureExtractorType.init(dictionary:)(v12, (uint64_t)&v13);
  char v5 = BYTE8(v13);
  if (BYTE8(v13) == 255) {
    goto LABEL_6;
  }
  uint64_t v8 = v13;
  unint64_t v9 = OUTLINED_FUNCTION_41_10();
  specialized Dictionary.subscript.getter(v9, v10, a1, v11);
  swift_bridgeObjectRelease();
  if (!v14)
  {
LABEL_8:
    uint64_t result = outlined destroy of URL?((uint64_t)&v13, &demangling cache variable for type metadata for Any?);
    goto LABEL_9;
  }
  uint64_t result = OUTLINED_FUNCTION_19_21();
  if (result)
  {
    char v7 = v5 & 1;
    *(void *)a2 = v12;
    *(void *)(a2 + 8) = v12;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = v8;
    goto LABEL_10;
  }
LABEL_9:
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  char v7 = -1;
LABEL_10:
  *(unsigned char *)(a2 + 32) = v7;
  return result;
}

uint64_t MLSoundClassifier.ModelParameters.FeatureExtractorType.dictionary.getter()
{
  unint64_t v1 = *(void *)v0;
  if (*(unsigned char *)(v0 + 8))
  {
    uint64_t v2 = MEMORY[0x263F8D310];
    uint64_t v13 = MEMORY[0x263F8D310];
    uint64_t v14 = Dictionary.init(dictionaryLiteral:)();
    unint64_t v11 = 0xD000000000000011;
    unint64_t v12 = 0x80000002272D85D0;
    specialized Dictionary.subscript.setter((uint64_t)&v11, 1684957547, 0xE400000000000000);
    uint64_t v13 = v2;
    OUTLINED_FUNCTION_35_13();
    unint64_t v11 = v3;
    unint64_t v12 = v4;
    specialized Dictionary.subscript.setter((uint64_t)&v11, 1701869940, 0xE400000000000000);
    uint64_t v13 = MEMORY[0x263F8D6C8];
    unint64_t v11 = v1;
    specialized Dictionary.subscript.setter((uint64_t)&v11, 0x6E6F697369766572, 0xE800000000000000);
    return v14;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2272CB4D0;
    *(void *)(inited + 32) = 1684957547;
    *(void *)(inited + 40) = 0xE400000000000000;
    OUTLINED_FUNCTION_39_13();
    v7[6] = v8;
    v7[7] = v9;
    v7[9] = v10;
    v7[10] = 0x6E6F697369766572;
    v7[15] = MEMORY[0x263F8D6C8];
    v7[11] = 0xE800000000000000;
    v7[12] = v1;
    return Dictionary.init(dictionaryLiteral:)();
  }
}

uint64_t MLSoundClassifier.ModelParameters.FeatureExtractorType.init(dictionary:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  specialized Dictionary.subscript.getter(0x6E6F697369766572, 0xE800000000000000, a1, &v14);
  if (v15)
  {
    if (OUTLINED_FUNCTION_11_26())
    {
      uint64_t v3 = v12;
      goto LABEL_6;
    }
  }
  else
  {
    outlined destroy of URL?((uint64_t)&v14, &demangling cache variable for type metadata for Any?);
  }
  uint64_t v3 = 1;
LABEL_6:
  OUTLINED_FUNCTION_25_20(1684957547, &v14);
  if (!v15)
  {
    outlined destroy of URL?((uint64_t)&v14, &demangling cache variable for type metadata for Any?);
    goto LABEL_15;
  }
  if ((OUTLINED_FUNCTION_11_26() & 1) == 0) {
    goto LABEL_15;
  }
  BOOL v4 = v12 == 0x687369676776 && v13 == 0xE600000000000000;
  if (v4 || (OUTLINED_FUNCTION_38_13(), (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    char v6 = 0;
    goto LABEL_18;
  }
  if (v12 == 0xD000000000000011 && v13 == 0x80000002272D85D0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  OUTLINED_FUNCTION_20_1();
  char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v7 & 1) == 0)
  {
LABEL_15:
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_16;
  }
LABEL_23:
  OUTLINED_FUNCTION_25_20(1701869940, &v14);
  swift_bridgeObjectRelease();
  if (!v15)
  {
    outlined destroy of URL?((uint64_t)&v14, &demangling cache variable for type metadata for Any?);
    goto LABEL_27;
  }
  if (!OUTLINED_FUNCTION_11_26())
  {
LABEL_27:
    unint64_t v9 = 0xE500000000000000;
    uint64_t v8 = 0x646E756F73;
    goto LABEL_28;
  }
  uint64_t v8 = v12;
  unint64_t v9 = v13;
LABEL_28:
  if (v8 == 0x646E756F73 && v9 == 0xE500000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
LABEL_35:
    char v6 = 1;
    goto LABEL_18;
  }
  char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t result = swift_bridgeObjectRelease();
  if (v11) {
    goto LABEL_35;
  }
LABEL_16:
  uint64_t v3 = 0;
  char v6 = -1;
LABEL_18:
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v6;
  return result;
}

uint64_t outlined init with take of MLSoundClassifier.DataSource(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_8();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t OUTLINED_FUNCTION_3_42@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = (v2 - 32) | 0x8000000000000000;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(unsigned char *)(a1 + 48) = 0;
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_5_35()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_6_33()
{
  uint64_t v2 = *(void *)(v0 - 280);
  unint64_t v3 = *(void *)(v0 - 272);
  return outlined consume of Data._Representation(v2, v3);
}

uint64_t OUTLINED_FUNCTION_10_25()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_11_26()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_13_28()
{
  return *(void *)(v0 - 136);
}

uint64_t OUTLINED_FUNCTION_14_23()
{
  return 0x69746164696C6176;
}

uint64_t OUTLINED_FUNCTION_15_23()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_17_19()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_19_21()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_20_21()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_21_21()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_23_11()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

double OUTLINED_FUNCTION_25_20@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return specialized Dictionary.subscript.getter(a1, 0xE400000000000000, v2, a2);
}

void OUTLINED_FUNCTION_28_14()
{
  outlined consume of Result<_DataTable, Error>(v1, v0);
}

void *OUTLINED_FUNCTION_30_16@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  result[6] = a2;
  result[7] = v3;
  result[9] = v4;
  result[10] = 1635017060;
  result[11] = v2;
  return result;
}

uint64_t OUTLINED_FUNCTION_38_13()
{
  return 0x687369676776;
}

unint64_t OUTLINED_FUNCTION_41_10()
{
  return 0xD000000000000010;
}

uint64_t OUTLINED_FUNCTION_42_12()
{
  return v0;
}

void EventCollector.add(_:)()
{
  id v1 = *(id *)(v0 + 16);
  specialized NSLocking.withLock<A>(_:)((void (*)(id))partial apply for closure #1 in EventCollector.add(_:));
}

uint64_t EventCollector.init()()
{
  id v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08958]), sel_init);
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(v0 + 16) = v1;
  *(void *)(v0 + 24) = v2;
  return v0;
}

uint64_t closure #1 in EventCollector.add(_:)(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  uint64_t v4 = *(void *)(*(void *)(a1 + 24) + 16);
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v4);
  uint64_t v5 = *(void *)(a1 + 24);
  *(void *)(v5 + 16) = v4 + 1;
  uint64_t v6 = type metadata accessor for Event();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(v5+ ((*(unsigned __int8 *)(*(void *)(v6 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v6 - 8) + 80))+ *(void *)(*(void *)(v6 - 8) + 72) * v4, a2, v6);
  return swift_endAccess();
}

BOOL closure #1 in closure #1 in EventCollector.getLast<A>(metric:type:)()
{
  uint64_t v0 = Event.metrics.getter();
  specialized Dictionary.subscript.getter(v0, &v3);
  swift_bridgeObjectRelease();
  BOOL v1 = v4 != 0;
  outlined destroy of Sendable?((uint64_t)&v3);
  return v1;
}

uint64_t EventCollector.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t EventCollector.__deallocating_deinit()
{
  EventCollector.deinit();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for EventCollector()
{
  return self;
}

uint64_t outlined destroy of Sendable?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Sendable?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in EventCollector.add(_:)()
{
  return closure #1 in EventCollector.add(_:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

id @nonobjc VNCoreMLModel.__allocating_init(for:)(void *a1)
{
  v6[1] = *(id *)MEMORY[0x263EF8340];
  v6[0] = 0;
  id v2 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_modelForMLModel_error_, a1, v6);
  if (v2)
  {
    id v3 = v6[0];
  }
  else
  {
    id v4 = v6[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }

  return v2;
}

uint64_t specialized _arrayConditionalCast<A, B>(_:)(unint64_t a1)
{
  return specialized _arrayConditionalCast<A, B>(_:)(a1);
}

{
  return specialized _arrayConditionalCast<A, B>(_:)(a1);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;

  unint64_t v9 = MEMORY[0x263F8EE78];
  id v2 = a1 >> 62;
  if (a1 >> 62) {
    goto LABEL_16;
  }
  while (1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    if (v2) {
      break;
    }
    id v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v3) {
      return v9;
    }
LABEL_6:
    for (uint64_t i = 4; ; ++i)
    {
      id v2 = i - 4;
      uint64_t v5 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x22A6753B0](i - 4, a1) : *(id *)(a1 + 8 * i);
      uint64_t v6 = v5;
      char v7 = i - 3;
      if (__OFADD__(v2, 1)) {
        break;
      }
      self;
      if (!swift_dynamicCastObjCClass())
      {

        swift_release();
        return 0;
      }
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v7 == v3) {
        return v9;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  id v3 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v3) {
    goto LABEL_6;
  }
  return v9;
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MLImageClassifier.prediction(from:)(CGImageRef from)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v6 = OUTLINED_FUNCTION_51_1();
  __swift_storeEnumTagSinglePayload(v3, 1, 1, v6);
  MLImageClassifier.performRequest(url:cgImage:)(v3, from);
  OUTLINED_FUNCTION_4_40();
  uint64_t v7 = v2;
  uint64_t v8 = v1;
  result._id object = v8;
  result._uint64_t countAndFlagsBits = v7;
  return result;
}

uint64_t MLImageClassifier.performRequest(url:cgImage:)(uint64_t a1, void *a2)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v10 = v9;
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  long long v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v50 - v15;
  type metadata accessor for NSAttributedString(0, &lazy cache variable for type metadata for VNCoreMLModel);
  id v17 = @nonobjc VNCoreMLModel.__allocating_init(for:)(*v2);
  if (v3) {
    return a1;
  }
  id v18 = v17;
  id v51 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F1EE48]), sel_initWithModel_, v17);
  outlined init with copy of URL?(a1, (uint64_t)v8);
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v52) == 1)
  {
    outlined destroy of URL?((uint64_t)v8);
    if (!a2)
    {
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError();
      OUTLINED_FUNCTION_3_43(v45, 0xD000000000000019);
      *(unsigned char *)(v46 + 48) = 2;
      swift_willThrow();

      return a1;
    }
    type metadata accessor for VNImageOption(0);
    _sSo13VNImageOptionaABSHSCWlTm_0(&lazy protocol witness table cache variable for type VNImageOption and conformance VNImageOption, type metadata accessor for VNImageOption);
    id v19 = a2;
    Dictionary.init(dictionaryLiteral:)();
    id v20 = objc_allocWithZone(MEMORY[0x263F1EF40]);
    id v21 = @nonobjc VNImageRequestHandler.init(cgImage:options:)(v19);
  }
  else
  {
    id v50 = v18;
    uint64_t v22 = v10;
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v16, v8, v52);
    id v23 = objc_msgSend(self, sel_defaultManager);
    uint64_t v24 = URL.path.getter();
    uint64_t v25 = (void *)MEMORY[0x22A674AE0](v24);
    swift_bridgeObjectRelease();
    unsigned __int8 v26 = objc_msgSend(v23, sel_fileExistsAtPath_, v25);

    if ((v26 & 1) == 0)
    {
      id v53 = 0;
      unint64_t v54 = 0xE000000000000000;
      _StringGuts.grow(_:)(38);
      swift_bridgeObjectRelease();
      id v53 = (id)0xD000000000000012;
      unint64_t v54 = 0x80000002272D86B0;
      _sSo13VNImageOptionaABSHSCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
      uint64_t v40 = v52;
      v41._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v41);
      swift_bridgeObjectRelease();
      v42._id object = (void *)0x80000002272D86D0;
      v42._uint64_t countAndFlagsBits = 0xD000000000000012;
      String.append(_:)(v42);
      id v43 = v53;
      a1 = v54;
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError();
      *(void *)uint64_t v44 = v43;
      *(void *)(v44 + 8) = a1;
      *(_OWORD *)(v44 + 16) = 0u;
      *(_OWORD *)(v44 + 32) = 0u;
      *(unsigned char *)(v44 + 48) = 2;
      swift_willThrow();

      (*(void (**)(char *, uint64_t))(v22 + 8))(v16, v40);
      return a1;
    }
    uint64_t v27 = v52;
    (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v14, v16, v52);
    type metadata accessor for VNImageOption(0);
    _sSo13VNImageOptionaABSHSCWlTm_0(&lazy protocol witness table cache variable for type VNImageOption and conformance VNImageOption, type metadata accessor for VNImageOption);
    Dictionary.init(dictionaryLiteral:)();
    id v28 = objc_allocWithZone(MEMORY[0x263F1EF40]);
    id v21 = @nonobjc VNImageRequestHandler.init(url:options:)((uint64_t)v14, v29);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v16, v27);
    id v18 = v50;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_2272CBA80;
  id v31 = v51;
  *(void *)(v30 + 32) = v51;
  id v53 = (id)v30;
  specialized Array._endMutation()();
  type metadata accessor for NSAttributedString(0, &lazy cache variable for type metadata for VNRequest);
  id v32 = v31;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v53 = 0;
  LODWORD(v31) = objc_msgSend(v21, sel_performRequests_error_, isa, &v53);

  a1 = (uint64_t)v53;
  if (!v31)
  {
    id v39 = v53;
    _convertNSErrorToError(_:)();

LABEL_17:
    swift_willThrow();

    return a1;
  }
  id v32 = v32;
  id v34 = (id)a1;
  unint64_t v35 = outlined bridged method (ob) of @objc VNRequest.results.getter(v32);
  if (!v35 || (a1 = specialized _arrayConditionalCast<A, B>(_:)(v35), swift_bridgeObjectRelease(), !a1))
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    OUTLINED_FUNCTION_3_43(v47, 0xD000000000000033);
    *(unsigned char *)(v48 + 48) = 0;
    goto LABEL_17;
  }
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (a1 & 0xC000000000000001) == 0, a1);
  if ((a1 & 0xC000000000000001) != 0) {
    id v36 = (id)MEMORY[0x22A6753B0](0, a1);
  }
  else {
    id v36 = *(id *)(a1 + 32);
  }
  uint64_t v37 = v36;
  swift_bridgeObjectRelease();
  id v38 = objc_msgSend(v37, sel_identifier);

  a1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return a1;
}

uint64_t MLImageClassifier.prediction(from:)(uint64_t a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v5 = OUTLINED_FUNCTION_51_1();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(v2, a1, v5);
  __swift_storeEnumTagSinglePayload(v2, 0, 1, v5);
  MLImageClassifier.performRequest(url:cgImage:)(v2, 0);
  OUTLINED_FUNCTION_4_40();
  return v1;
}

unint64_t *MLImageClassifier.predictions(from:)(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a1 + 16);
  unint64_t v11 = MEMORY[0x263F8EE78];
  if (v10)
  {
    uint64_t v21 = v1;
    unint64_t v25 = MEMORY[0x263F8EE78];
    uint64_t v12 = &v25;
    specialized ContiguousArray.reserveCapacity(_:)();
    long long v14 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    uint64_t v13 = v6 + 16;
    uint64_t v15 = a1 + ((*(unsigned __int8 *)(v13 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 64));
    uint64_t v22 = *(void *)(v13 + 56);
    uint64_t v23 = v13 - 8;
    uint64_t v24 = v14;
    while (1)
    {
      v24(v9, v15, v4);
      static ImageReader.read(url:)();
      if (v2) {
        break;
      }
      uint64_t v16 = OUTLINED_FUNCTION_2_44();
      v17(v16);
      uint64_t v12 = &v25;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v15 += v22;
      if (!--v10)
      {
        unint64_t v11 = v25;
        goto LABEL_6;
      }
    }
    uint64_t v18 = OUTLINED_FUNCTION_2_44();
    v19(v18);
    swift_release();
  }
  else
  {
LABEL_6:
    uint64_t v12 = (unint64_t *)MLImageClassifier.performRequests(_:)(v11);
    swift_bridgeObjectRelease();
  }
  return v12;
}

id MLImageClassifier.performRequests(_:)(unint64_t a1)
{
  type metadata accessor for NSAttributedString(0, &lazy cache variable for type metadata for VNCoreMLModel);
  id result = @nonobjc VNCoreMLModel.__allocating_init(for:)(*v1);
  if (!v2)
  {
    uint64_t v5 = result;
    uint64_t v7 = MEMORY[0x263F8EE78];
    uint64_t v6 = (void *)MEMORY[0x22A675AA0]();
    closure #1 in MLImageClassifier.performRequests(_:)((uint64_t)v5, a1, &v7);

    return (id)v7;
  }
  return result;
}

void closure #1 in MLImageClassifier.performRequests(_:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  v40[1] = *(id *)MEMORY[0x263EF8340];
  id v38 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F1EE48]), sel_initWithModel_, a1);
  if (a2 >> 62) {
    goto LABEL_26;
  }
  uint64_t v4 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v37 = a2 & 0xC000000000000001;
    uint64_t v5 = 4;
    unint64_t v35 = a2;
    while (1)
    {
      id v6 = v37 ? (id)MEMORY[0x22A6753B0](v5 - 4, a2) : *(id *)(a2 + 8 * v5);
      uint64_t v7 = v6;
      if (__OFADD__(v5 - 4, 1)) {
        break;
      }
      type metadata accessor for VNImageOption(0);
      _sSo13VNImageOptionaABSHSCWlTm_0(&lazy protocol witness table cache variable for type VNImageOption and conformance VNImageOption, type metadata accessor for VNImageOption);
      id v8 = v7;
      Dictionary.init(dictionaryLiteral:)();
      id v9 = objc_allocWithZone(MEMORY[0x263F1EF40]);
      id v10 = @nonobjc VNImageRequestHandler.init(ciImage:options:)(v8);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v11 = swift_allocObject();
      *(_OWORD *)(v11 + 16) = xmmword_2272CBA80;
      *(void *)(v11 + 32) = v38;
      v40[0] = (id)v11;
      specialized Array._endMutation()();
      type metadata accessor for NSAttributedString(0, &lazy cache variable for type metadata for VNRequest);
      id v12 = v38;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v40[0] = 0;
      unsigned int v14 = objc_msgSend(v10, sel_performRequests_error_, isa, v40);

      id v15 = v40[0];
      if (!v14)
      {
        id v34 = v40[0];
        swift_bridgeObjectRelease();
        _convertNSErrorToError(_:)();

        uint64_t v33 = v10;
        id v10 = v8;
        goto LABEL_23;
      }
      id v16 = v12;
      id v17 = v15;
      unint64_t v18 = outlined bridged method (ob) of @objc VNRequest.results.getter(v16);
      if (!v18 || (uint64_t v19 = specialized _arrayConditionalCast<A, B>(_:)(v18), swift_bridgeObjectRelease(), !v19))
      {
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError();
        *(void *)uint64_t v32 = 0xD000000000000033;
        *(void *)(v32 + 8) = 0x80000002272D8650;
        *(_OWORD *)(v32 + 16) = 0u;
        *(_OWORD *)(v32 + 32) = 0u;
        *(unsigned char *)(v32 + 48) = 0;
        uint64_t v33 = v8;
LABEL_23:
        swift_willThrow();

        return;
      }
      uint64_t v39 = v5 - 3;
      if ((v19 & 0xC000000000000001) != 0)
      {
        id v20 = (id)MEMORY[0x22A6753B0](0, v19);
      }
      else
      {
        if (!*(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_25;
        }
        id v20 = *(id *)(v19 + 32);
      }
      uint64_t v21 = v20;
      swift_bridgeObjectRelease();
      id v22 = objc_msgSend(v21, sel_identifier);

      uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v25 = v24;

      uint64_t v26 = *a3;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *a3 = v26;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v26 = v30;
        *a3 = v30;
      }
      unint64_t v28 = *(void *)(v26 + 16);
      if (v28 >= *(void *)(v26 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v26 = v31;
        *a3 = v31;
      }
      *(void *)(v26 + 16) = v28 + 1;
      uint64_t v29 = v26 + 16 * v28;
      *(void *)(v29 + 32) = v23;
      *(void *)(v29 + 40) = v25;

      ++v5;
      a2 = v35;
      if (v39 == v4)
      {

        swift_bridgeObjectRelease();
        return;
      }
    }
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    swift_bridgeObjectRetain();
  }

  swift_bridgeObjectRelease();
}

id @nonobjc VNImageRequestHandler.init(url:options:)@<X0>(uint64_t a1@<X0>, NSURL *a2@<X8>)
{
  uint64_t v3 = v2;
  URL._bridgeToObjectiveC()(a2);
  id v6 = v5;
  type metadata accessor for VNImageOption(0);
  _sSo13VNImageOptionaABSHSCWlTm_0(&lazy protocol witness table cache variable for type VNImageOption and conformance VNImageOption, type metadata accessor for VNImageOption);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v8 = objc_msgSend(v3, sel_initWithURL_options_, v6, isa);

  uint64_t v9 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(a1, v9);
  return v8;
}

id @nonobjc VNImageRequestHandler.init(ciImage:options:)(void *a1)
{
  type metadata accessor for VNImageOption(0);
  _sSo13VNImageOptionaABSHSCWlTm_0(&lazy protocol witness table cache variable for type VNImageOption and conformance VNImageOption, type metadata accessor for VNImageOption);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v4 = objc_msgSend(v1, sel_initWithCIImage_options_, a1, isa);

  return v4;
}

uint64_t outlined bridged method (ob) of @objc VNRequest.results.getter(void *a1)
{
  id v2 = objc_msgSend(a1, sel_results);

  if (!v2) {
    return 0;
  }
  type metadata accessor for NSAttributedString(0, &lazy cache variable for type metadata for VNObservation);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t _sSo13VNImageOptionaABSHSCWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_2_44()
{
  return v0;
}

double OUTLINED_FUNCTION_3_43@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = (v2 - 32) | 0x8000000000000000;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

uint64_t OUTLINED_FUNCTION_4_40()
{
  return outlined destroy of URL?(v0);
}

uint64_t MLDataTable.group<A>(columnsNamed:aggregators:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  OUTLINED_FUNCTION_0_15();
  id v12 = v11;
  MEMORY[0x270FA5388](v13);
  id v15 = (char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  OUTLINED_FUNCTION_0_15();
  uint64_t v17 = v16;
  MEMORY[0x270FA5388](v18);
  uint64_t v80 = (char *)&v73 - v19;
  char v77 = *(void **)v5;
  int v20 = *(unsigned __int8 *)(v5 + 8);
  uint64_t v21 = MEMORY[0x22A676370](0);
  if (!v21)
  {
    __break(1u);
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  uint64_t v22 = v21;
  v83._id object = v12;
  int v75 = v20;
  uint64_t v76 = v17;
  uint64_t v74 = a5;
  type metadata accessor for CMLSequence();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = v22;
  uint64_t v79 = inited;
  *(unsigned char *)(inited + 24) = 1;
  uint64_t v24 = *(void *)(a1 + 16);
  if (v24)
  {
    uint64_t v82 = a2;
    v83._uint64_t countAndFlagsBits = a4;
    type metadata accessor for CMLFeatureValue();
    swift_bridgeObjectRetain();
    uint64_t v25 = a1 + 40;
    do
    {
      swift_bridgeObjectRetain_n();
      uint64_t v26 = CMLFeatureValue.__allocating_init(_:)();
      swift_bridgeObjectRelease();
      CMLSequence.append(_:)(v26);
      swift_release();
      v25 += 16;
      --v24;
    }
    while (v24);
    swift_bridgeObjectRelease();
    a2 = v82;
  }
  uint64_t v27 = MEMORY[0x22A676400](0);
  if (!v27) {
    goto LABEL_56;
  }
  uint64_t v28 = v27;
  type metadata accessor for CMLAggregator();
  uint64_t v29 = swift_initStackObject();
  *(void *)(v29 + 16) = v28;
  (*((void (**)(char *, void *, uint64_t))v83._object + 2))(v15, a2, a3);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v30 = countAndFlagsBits;
  if (countAndFlagsBits)
  {
    uint64_t v32 = (uint64_t)v85;
    id object = v86;
    do
    {
      swift_bridgeObjectRetain();
      uint64_t v33 = swift_bridgeObjectRetain();
      outlined consume of FeatureVectorizer<Float>.Transformer?(v33);
      uint64_t v34 = v30[2];
      uint64_t v82 = v30;
      if (v34)
      {
        v83._uint64_t countAndFlagsBits = v32;
        v83._id object = object;
        unint64_t v35 = (unsigned __int8 *)(v30 + 6);
        while (2)
        {
          uint64_t v36 = v29;
          uint64_t v37 = *((void *)v35 - 2);
          id v38 = (void *)*((void *)v35 - 1);
          int v40 = *v35;
          v35 += 24;
          int v39 = v40;
          Swift::String v41 = (void *)0xEF656772654D7972;
          uint64_t v42 = 0x616E6F6974636944;
          switch(v40)
          {
            case 1:
              Swift::String v41 = (void *)0xE600000000000000;
              uint64_t v42 = 0x6E696D677241;
              break;
            case 2:
              Swift::String v41 = (void *)0xE600000000000000;
              uint64_t v42 = 0x78616D677241;
              break;
            case 3:
              Swift::String v41 = (void *)0xE300000000000000;
              uint64_t v42 = 7235917;
              switch(v37)
              {
                case 1:
                  uint64_t v42 = 7889229;
                  goto LABEL_14;
                case 2:
                  uint64_t v42 = 7173459;
                  goto LABEL_14;
                case 3:
                  Swift::String v41 = (void *)0xE400000000000000;
                  uint64_t v42 = 1851876685;
                  goto LABEL_14;
                case 4:
                  Swift::String v41 = (void *)0xE500000000000000;
                  uint64_t v42 = 0x7665647453;
                  goto LABEL_14;
                case 5:
                  Swift::String v41 = (void *)0xE500000000000000;
                  uint64_t v42 = 0x746E756F43;
                  goto LABEL_14;
                case 6:
                  Swift::String v41 = (void *)0xED0000746E756F43;
                  uint64_t v42 = 0x74636E6974736944;
                  goto LABEL_14;
                case 7:
                  Swift::String v41 = (void *)0xE800000000000000;
                  uint64_t v51 = 0x6E6169726156;
                  goto LABEL_41;
                case 8:
                  Swift::String v41 = (void *)0xED0000656772654DLL;
                  uint64_t v51 = 0x6E6575716553;
LABEL_41:
                  uint64_t v42 = v51 & 0xFFFFFFFFFFFFLL | 0x6563000000000000;
                  break;
                case 9:
                  Swift::String v41 = (void *)0xE900000000000065;
                  uint64_t v42 = 0x6E4F7463656C6553;
                  break;
                default:
                  goto LABEL_14;
              }
              break;
            default:
              break;
          }
LABEL_14:
          uint64_t countAndFlagsBits = (void *)v83._countAndFlagsBits;
          uint64_t v85 = object;
          swift_bridgeObjectRetain();
          outlined copy of MLDataTable.Aggregator.Operations(v37, (uint64_t)v38, v39);
          v43._uint64_t countAndFlagsBits = v42;
          v43._id object = v41;
          String.append(_:)(v43);
          swift_bridgeObjectRelease();
          uint64_t v44 = (uint64_t)countAndFlagsBits;
          uint64_t v45 = v85;
          uint64_t v29 = v36;
          switch(v39)
          {
            case 0:
              swift_bridgeObjectRetain();
              v46._uint64_t countAndFlagsBits = v44;
              v46._id object = v45;
              v47._uint64_t countAndFlagsBits = v37;
              v47._id object = v38;
              CMLAggregator.add(concatToColumnName:keyColumnName:valueColumnName:)(v46, v83, v47);
              if (v48) {
                goto LABEL_58;
              }
              goto LABEL_23;
            case 1:
              swift_bridgeObjectRetain();
              OUTLINED_FUNCTION_3_44(0);
              goto LABEL_23;
            case 2:
              swift_bridgeObjectRetain();
              OUTLINED_FUNCTION_3_44(1);
LABEL_23:
              id object = v83._object;
              swift_bridgeObjectRelease();
              outlined consume of MLDataTable.Aggregator.Operations(v37, (uint64_t)v38, v39);
              uint64_t v49 = OUTLINED_FUNCTION_4_41();
              outlined consume of MLDataTable.Aggregator.Operations(v49, v50, v39);
LABEL_44:
              if (!--v34) {
                break;
              }
              continue;
            case 3:
              switch(v37)
              {
                case 1:
                  OUTLINED_FUNCTION_1_37(7889261, 0xE300000000000000);
                  swift_bridgeObjectRelease();
                  goto LABEL_43;
                case 2:
                  OUTLINED_FUNCTION_1_37(7173491, 0xE300000000000000);
                  swift_bridgeObjectRelease();
                  goto LABEL_43;
                case 3:
                  OUTLINED_FUNCTION_1_37(6780513, 0xE300000000000000);
                  swift_bridgeObjectRelease();
                  goto LABEL_43;
                case 4:
                  OUTLINED_FUNCTION_1_37(6583411, 0xE300000000000000);
                  swift_bridgeObjectRelease();
                  goto LABEL_43;
                case 5:
                  swift_bridgeObjectRelease();
                  v52._uint64_t countAndFlagsBits = 0x746E756F63;
                  v52._id object = (void *)0xE500000000000000;
                  v53._uint64_t countAndFlagsBits = 0x746E756F43;
                  v53._id object = (void *)0xE500000000000000;
                  v54._uint64_t countAndFlagsBits = 0;
                  v54._id object = (void *)0xE000000000000000;
                  CMLAggregator.add(operation:toColumnName:fromColumnName:)(v52, v53, v54);
                  if (!v55) {
                    goto LABEL_43;
                  }
                  OUTLINED_FUNCTION_0_21();
                  goto LABEL_59;
                case 6:
                  OUTLINED_FUNCTION_1_37(0x69645F746E756F63, 0xEE0074636E697473);
                  swift_bridgeObjectRelease();
                  goto LABEL_43;
                case 7:
                  OUTLINED_FUNCTION_1_37(7496054, 0xE300000000000000);
                  swift_bridgeObjectRelease();
                  goto LABEL_43;
                case 8:
                  OUTLINED_FUNCTION_1_37(0x7461636E6F63, 0xE600000000000000);
                  swift_bridgeObjectRelease();
                  goto LABEL_43;
                case 9:
                  OUTLINED_FUNCTION_1_37(0x6F5F7463656C6573, 0xEA0000000000656ELL);
                  swift_bridgeObjectRelease();
                  goto LABEL_43;
                default:
                  OUTLINED_FUNCTION_1_37(7235949, 0xE300000000000000);
                  swift_bridgeObjectRelease();
LABEL_43:
                  id object = v83._object;
                  goto LABEL_44;
              }
            default:
              JUMPOUT(0);
          }
          break;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      dispatch thunk of IteratorProtocol.next()();
      uint64_t v30 = countAndFlagsBits;
      uint64_t v32 = (uint64_t)v85;
      id object = v86;
    }
    while (countAndFlagsBits);
  }
  (*(void (**)(char *, uint64_t))(v76 + 8))(v80, AssociatedTypeWitness);
  if ((v75 & 1) == 0)
  {
    id v60 = v77;
    uint64_t v61 = *(void *)(v77[2] + 16);
    uint64_t v62 = *(void *)(v79 + 16);
    uint64_t v63 = *(void *)(v29 + 16);
    outlined copy of Result<_DataTable, Error>(v77, 0);
    uint64_t v64 = specialized handling<A, B, C, D>(_:_:_:_:)(v61, v62, v63);
    uint64_t v68 = v64;
    if (v64)
    {
      type metadata accessor for CMLTable();
      uint64_t v69 = swift_allocObject();
      *(void *)(v69 + 16) = v68;
      type metadata accessor for _DataTable();
      swift_allocObject();
      uint64_t v59 = (uint64_t)_DataTable.init(impl:)(v69);
      outlined consume of Result<_DataTable, Error>(v60, 0);
      swift_release();
      uint64_t result = swift_release();
      char v66 = 0;
      goto LABEL_54;
    }
LABEL_57:
    __break(1u);
LABEL_58:
    uint64_t v71 = OUTLINED_FUNCTION_4_41();
    outlined consume of MLDataTable.Aggregator.Operations(v71, v72, 0);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_0_21();
LABEL_59:
    swift_unexpectedError();
    __break(1u);
    JUMPOUT(0x22718724CLL);
  }
  id v56 = v77;
  uint64_t countAndFlagsBits = v77;
  outlined copy of Result<_DataTable, Error>(v77, 1);
  id v57 = v56;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  uint64_t v58 = _getErrorEmbeddedNSError<A>(_:)();
  if (v58)
  {
    uint64_t v59 = v58;
    outlined consume of Result<_DataTable, Error>(v56, 1);
  }
  else
  {
    uint64_t v59 = swift_allocError();
    *unint64_t v65 = countAndFlagsBits;
  }
  char v66 = 1;
  outlined consume of Result<_DataTable, Error>(v56, 1);
  swift_release();
  uint64_t result = swift_release();
LABEL_54:
  unint64_t v70 = v74;
  *uint64_t v74 = v59;
  *((unsigned char *)v70 + 8) = v66;
  return result;
}

uint64_t MLDataTable.Aggregator.operations.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MLDataTable.Aggregator.operations.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*MLDataTable.Aggregator.operations.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLDataTable.Aggregator.columnName.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MLDataTable.Aggregator.columnName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = a2;
  return result;
}

uint64_t (*MLDataTable.Aggregator.columnName.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLDataTable.Aggregator.init(operations:of:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

uint64_t outlined copy of MLDataTable.Aggregator.Operations(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of MLDataTable.Aggregator.Operations(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

ValueMetadata *type metadata accessor for MLDataTable.Aggregator()
{
  return &type metadata for MLDataTable.Aggregator;
}

uint64_t destroy for MLDataTable.Aggregator.Operations(uint64_t a1)
{
  return outlined consume of MLDataTable.Aggregator.Operations(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for MLDataTable.Aggregator.Operations(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of MLDataTable.Aggregator.Operations(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for MLDataTable.Aggregator.Operations(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of MLDataTable.Aggregator.Operations(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of MLDataTable.Aggregator.Operations(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for MLDataTable.Aggregator.Operations(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of MLDataTable.Aggregator.Operations(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLDataTable.Aggregator.Operations(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFD && *(unsigned char *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 252;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 3) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MLDataTable.Aggregator.Operations(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 253;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for MLDataTable.Aggregator.Operations(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 2u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t destructiveInjectEnumTag for MLDataTable.Aggregator.Operations(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)uint64_t result = a2 - 3;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for MLDataTable.Aggregator.Operations()
{
  return &type metadata for MLDataTable.Aggregator.Operations;
}

uint64_t OUTLINED_FUNCTION_0_21()
{
  return v0;
}

void OUTLINED_FUNCTION_1_37(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2;
  uint64_t v7 = v3;
  uint64_t v8 = *(void *)(v4 - 192);
  uint64_t v9 = *(void *)(v4 - 184);
  CMLAggregator.add(operation:toColumnName:fromColumnName:)(*(Swift::String *)&a1, *(Swift::String *)&v6, *(Swift::String *)&v8);
}

void OUTLINED_FUNCTION_3_44(Swift::Bool a1)
{
  uint64_t v7 = v1;
  uint64_t v8 = v2;
  uint64_t v9 = *(void *)(v5 - 192);
  uint64_t v10 = *(void *)(v5 - 184);
  uint64_t v11 = v3;
  uint64_t v12 = v4;
  CMLAggregator.add(isMax:toColumnName:aggColumnName:outputColumnName:)(a1, *(Swift::String *)&v7, *(Swift::String *)&v9, *(Swift::String *)&v11);
}

uint64_t OUTLINED_FUNCTION_4_41()
{
  return v0;
}

void MLClassifierMetrics.init()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  OUTLINED_FUNCTION_19_4();
  a19 = v22;
  a20 = v23;
  uint64_t v25 = v24;
  uint64_t v26 = type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v28 = v27;
  uint64_t v30 = MEMORY[0x270FA5388](v29);
  uint64_t v32 = (char *)&a9 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v30);
  uint64_t v34 = (char *)&a9 - v33;
  type metadata accessor for MLClassifierMetrics.Contents(0);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v35);
  OUTLINED_FUNCTION_41_0();
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<String>);
  OUTLINED_FUNCTION_0();
  uint64_t v38 = v37;
  MEMORY[0x270FA5388](v39);
  OUTLINED_FUNCTION_32();
  ClassificationMetrics.init()();
  specialized static MLClassifierMetrics.makeConfusionDataFrame<A>(_:)((uint64_t)v34);
  specialized static MLClassifierMetrics.makePrecisionRecallDataFrame<A>(_:)((uint64_t)v32);
  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v21, v36);
  *(void *)int v20 = 0;
  uint64_t v40 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
  Swift::String v41 = *(void (**)(char *, char *, uint64_t))(v28 + 32);
  v41(&v20[*(int *)(v40 + 20)], v34, v26);
  v41(&v20[*(int *)(v40 + 24)], v32, v26);
  swift_storeEnumTagMultiPayload();
  outlined init with take of MLClassifierMetrics.Precomputed((uint64_t)v20, v25, (void (*)(void))type metadata accessor for MLClassifierMetrics.Contents);
  OUTLINED_FUNCTION_12_4();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShySSG_Sis5NeverOTg5159_s8CreateML19MLClassifierMetricsV26precisionRecallDescription33_21E6E2EACFD6F93017C79EF6BCC906FCLLSSvgSiSScfu_33_1a2cfc70c67f85f4b89db78a8cf64951SSSiTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (!v1) {
    return v2;
  }
  uint64_t v15 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  uint64_t v2 = v15;
  uint64_t result = specialized _NativeSet.startIndex.getter(a1);
  uint64_t v5 = result;
  uint64_t v7 = v6;
  char v9 = v8 & 1;
  while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(unsigned char *)(a1 + 32))
  {
    if (((*(void *)(a1 + 56 + (((unint64_t)v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v5) & 1) == 0) {
      goto LABEL_13;
    }
    if (*(_DWORD *)(a1 + 36) != v7) {
      goto LABEL_14;
    }
    swift_bridgeObjectRetain();
    uint64_t v10 = String.count.getter();
    swift_bridgeObjectRelease();
    unint64_t v12 = *(void *)(v15 + 16);
    unint64_t v11 = *(void *)(v15 + 24);
    if (v12 >= v11 >> 1) {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
    }
    *(void *)(v15 + 16) = v12 + 1;
    *(void *)(v15 + 8 * v12 + 32) = v10;
    uint64_t result = specialized _NativeSet.index(after:)(v5, v7, v9 & 1, a1);
    uint64_t v5 = result;
    uint64_t v7 = v13;
    char v9 = v14 & 1;
    if (!--v1)
    {
      outlined consume of [MLDataValue : MLDataValue].Index._Variant(result, v13, v14 & 1);
      return v2;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_Sis5NeverOTg5169_s8CreateML19MLClassifierMetricsV8ContentsO26confusionMatrixDescription33_21E6E2EACFD6F93017C79EF6BCC906FCLLSSvgSiSScfu_33_1a2cfc70c67f85f4b89db78a8cf64951SSSiTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v9;
    uint64_t v4 = a1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      uint64_t v5 = String.count.getter();
      swift_bridgeObjectRelease();
      unint64_t v7 = *(void *)(v9 + 16);
      unint64_t v6 = *(void *)(v9 + 24);
      if (v7 >= v6 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
      }
      v4 += 16;
      *(void *)(v9 + 16) = v7 + 1;
      *(void *)(v9 + 8 * v7 + 32) = v5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

BOOL MLClassifierMetrics.isValid.getter()
{
  type metadata accessor for MLClassifierMetrics.Contents(0);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_57_1();
  outlined init with copy of MLClassifierMetrics.Contents(v0, v1);
  BOOL v3 = swift_getEnumCaseMultiPayload() < 2;
  outlined destroy of MLClassifierMetrics.Contents(v1, (void (*)(void))type metadata accessor for MLClassifierMetrics.Contents);
  return v3;
}

unint64_t MLClassifierMetrics.description.getter()
{
  uint64_t v1 = v0;
  type metadata accessor for MLClassifierMetrics.Contents(0);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (void **)((char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of MLClassifierMetrics.Contents(v1, (uint64_t)v4);
  if (swift_getEnumCaseMultiPayload() > 1)
  {
    char v8 = *v4;
    unint64_t v11 = 0;
    unint64_t v12 = 0xE000000000000000;
    v10[1] = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    _print_unlocked<A, B>(_:_:)();
  }
  else
  {
    outlined destroy of MLClassifierMetrics.Contents((uint64_t)v4, (void (*)(void))type metadata accessor for MLClassifierMetrics.Contents);
    unint64_t v11 = 0xD000000000000023;
    unint64_t v12 = 0x80000002272D8720;
    v5._uint64_t countAndFlagsBits = MLClassifierMetrics.accuracyDescription.getter();
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    v6._uint64_t countAndFlagsBits = (uint64_t)MLClassifierMetrics.Contents.confusionMatrixDescription.getter();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._uint64_t countAndFlagsBits = MLClassifierMetrics.precisionRecallDescription.getter();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
  }
  return v11;
}

uint64_t specialized Collection.prefix(_:)(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v3 = *(void *)(a2 + 16);
  uint64_t result = specialized ArraySlice.index(_:offsetBy:limitedBy:)(0, result, v3);
  if (v4) {
    unint64_t v5 = v3;
  }
  else {
    unint64_t v5 = result;
  }
  if ((v5 & 0x8000000000000000) != 0) {
    goto LABEL_9;
  }
  if (v3 >= v5) {
    return a2;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t specialized static MLClassifierMetrics.makeConfusionDataFrame<A>(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v41 = a1;
  uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  uint64_t v40 = *(void *)(v44 - 8);
  MEMORY[0x270FA5388](v44);
  uint64_t v2 = (char *)&v38 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  uint64_t v39 = *(void *)(v3 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  Swift::String v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  char v8 = (char *)&v38 - v7;
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  uint64_t v38 = *(void *)(v48 - 8);
  MEMORY[0x270FA5388](v48);
  uint64_t v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<String>);
  ClassificationMetrics.labels.getter();
  swift_bridgeObjectRetain();
  specialized _copyCollectionToContiguousArray<A>(_:)();
  uint64_t v12 = v11;
  swift_bridgeObjectRelease();
  v51[0] = v12;
  specialized MutableCollection<>.sort(by:)(v51);
  swift_bridgeObjectRelease();
  uint64_t v13 = v51[0];
  Swift::String v47 = v10;
  ClassificationMetrics.makeConfusionMatrix<>()();
  ClassificationMetrics.labels.getter();
  swift_bridgeObjectRelease();
  uint64_t v45 = v8;
  Column.init(name:capacity:)();
  ClassificationMetrics.labels.getter();
  swift_bridgeObjectRelease();
  uint64_t v42 = v6;
  Column.init(name:capacity:)();
  ClassificationMetrics.labels.getter();
  swift_bridgeObjectRelease();
  Swift::String v43 = v2;
  Column.init(name:capacity:)();
  uint64_t v14 = *(void *)(v13 + 16);
  v51[0] = 0;
  v51[1] = v14;
  v51[2] = 0;
  v51[3] = 0;
  v51[5] = 0;
  v51[6] = 0;
  v51[4] = v14;
  char v52 = 1;
  uint64_t v53 = 0;
  uint64_t v54 = v14;
  uint64_t v15 = specialized Product2Sequence.Iterator.next()();
  if (v17)
  {
LABEL_13:
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AnyColumn>);
    type metadata accessor for AnyColumn();
    uint64_t v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = xmmword_2272CB4A0;
    uint64_t v32 = v45;
    Column.eraseToAnyColumn()();
    uint64_t v33 = v42;
    Column.eraseToAnyColumn()();
    uint64_t v34 = v44;
    uint64_t v35 = v43;
    Column.eraseToAnyColumn()();
    v51[0] = v31;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyColumn]);
    lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [AnyColumn] and conformance [A], &demangling cache variable for type metadata for [AnyColumn]);
    DataFrame.init<A>(columns:)();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v35, v34);
    uint64_t v36 = *(void (**)(char *, uint64_t))(v39 + 8);
    v36(v33, v3);
    v36(v32, v3);
    return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v47, v48);
  }
  else
  {
    unint64_t v18 = v15;
    unint64_t v19 = v16;
    uint64_t v20 = v13 + 32;
    long long v46 = xmmword_2272CB4D0;
    while (1)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      uint64_t v21 = swift_allocObject();
      *(_OWORD *)(v21 + 16) = v46;
      *(void *)(v21 + 32) = v18;
      *(void *)(v21 + 40) = v19;
      lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Float> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float>);
      MLShapedArrayProtocol.subscript.getter();
      swift_bridgeObjectRelease();
      if ((~v49 & 0x7F800000) == 0) {
        break;
      }
      if (*(float *)&v49 <= -9.2234e18) {
        goto LABEL_15;
      }
      if (*(float *)&v49 >= 9.2234e18) {
        goto LABEL_16;
      }
      uint64_t v22 = (uint64_t)*(float *)&v49;
      if ((uint64_t)*(float *)&v49)
      {
        if ((v18 & 0x8000000000000000) != 0) {
          goto LABEL_17;
        }
        if (v18 >= *(void *)(v13 + 16)) {
          goto LABEL_18;
        }
        uint64_t v23 = (uint64_t *)(v20 + 16 * v18);
        uint64_t v25 = *v23;
        uint64_t v24 = v23[1];
        uint64_t v49 = v25;
        uint64_t v50 = v24;
        Column.append(_:)();
        if ((v19 & 0x8000000000000000) != 0) {
          goto LABEL_19;
        }
        if (v19 >= *(void *)(v13 + 16)) {
          goto LABEL_20;
        }
        uint64_t v26 = (uint64_t *)(v20 + 16 * v19);
        uint64_t v28 = *v26;
        uint64_t v27 = v26[1];
        uint64_t v49 = v28;
        uint64_t v50 = v27;
        Column.append(_:)();
        uint64_t v49 = v22;
        Column.append(_:)();
      }
      unint64_t v18 = specialized Product2Sequence.Iterator.next()();
      unint64_t v19 = v29;
      if (v30) {
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    uint64_t result = swift_release();
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  void (*v30)(char *, uint64_t);
  uint64_t result;
  void v32[2];
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  long long v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41[7];
  char v42;
  uint64_t v43;
  uint64_t v44;

  v32[1] = a1;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  uint64_t v33 = *(void *)(v1 - 8);
  uint64_t v2 = MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x270FA5388](v2);
  uint64_t v7 = (char *)v32 - v6;
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)v32 - v8;
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  v32[0] = *(void *)(v39 - 8);
  MEMORY[0x270FA5388](v39);
  uint64_t v11 = (char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<Int>);
  ClassificationMetrics.labels.getter();
  swift_bridgeObjectRetain();
  specialized _copyCollectionToContiguousArray<A>(_:)();
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();
  v41[0] = v13;
  specialized MutableCollection<>.sort(by:)(v41);
  swift_bridgeObjectRelease();
  uint64_t v14 = v41[0];
  uint64_t v38 = v11;
  ClassificationMetrics.makeConfusionMatrix<>()();
  ClassificationMetrics.labels.getter();
  swift_bridgeObjectRelease();
  uint64_t v36 = v9;
  Column.init(name:capacity:)();
  ClassificationMetrics.labels.getter();
  swift_bridgeObjectRelease();
  uint64_t v34 = v7;
  Column.init(name:capacity:)();
  ClassificationMetrics.labels.getter();
  swift_bridgeObjectRelease();
  uint64_t v35 = v4;
  Column.init(name:capacity:)();
  uint64_t v15 = *(void *)(v14 + 16);
  v41[0] = 0;
  v41[1] = v15;
  v41[2] = 0;
  v41[3] = 0;
  v41[5] = 0;
  v41[6] = 0;
  v41[4] = v15;
  uint64_t v42 = 1;
  Swift::String v43 = 0;
  uint64_t v44 = v15;
  unint64_t v16 = specialized Product2Sequence.Iterator.next()();
  if (v18)
  {
LABEL_13:
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AnyColumn>);
    type metadata accessor for AnyColumn();
    uint64_t v26 = swift_allocObject();
    *(_OWORD *)(v26 + 16) = xmmword_2272CB4A0;
    uint64_t v27 = v36;
    Column.eraseToAnyColumn()();
    uint64_t v28 = v34;
    Column.eraseToAnyColumn()();
    unint64_t v29 = v35;
    Column.eraseToAnyColumn()();
    v41[0] = v26;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyColumn]);
    lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [AnyColumn] and conformance [A], &demangling cache variable for type metadata for [AnyColumn]);
    DataFrame.init<A>(columns:)();
    char v30 = *(void (**)(char *, uint64_t))(v33 + 8);
    v30(v29, v1);
    v30(v28, v1);
    v30(v27, v1);
    return (*(uint64_t (**)(char *, uint64_t))(v32[0] + 8))(v38, v39);
  }
  else
  {
    unint64_t v19 = v16;
    uint64_t v20 = v17;
    uint64_t v21 = v14 + 32;
    uint64_t v37 = xmmword_2272CB4D0;
    while (1)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      uint64_t v22 = swift_allocObject();
      *(_OWORD *)(v22 + 16) = v37;
      *(void *)(v22 + 32) = v19;
      *(void *)(v22 + 40) = v20;
      lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Float> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float>);
      MLShapedArrayProtocol.subscript.getter();
      swift_bridgeObjectRelease();
      if ((~v40 & 0x7F800000) == 0) {
        break;
      }
      if (*(float *)&v40 <= -9.2234e18) {
        goto LABEL_15;
      }
      if (*(float *)&v40 >= 9.2234e18) {
        goto LABEL_16;
      }
      uint64_t v23 = (uint64_t)*(float *)&v40;
      if ((uint64_t)*(float *)&v40)
      {
        if ((v19 & 0x8000000000000000) != 0) {
          goto LABEL_17;
        }
        if (v19 >= *(void *)(v14 + 16)) {
          goto LABEL_18;
        }
        uint64_t v40 = *(void *)(v21 + 8 * v19);
        Column.append(_:)();
        if ((v20 & 0x8000000000000000) != 0) {
          goto LABEL_19;
        }
        if (v20 >= *(void *)(v14 + 16)) {
          goto LABEL_20;
        }
        uint64_t v40 = *(void *)(v21 + 8 * v20);
        Column.append(_:)();
        uint64_t v40 = v23;
        Column.append(_:)();
      }
      unint64_t v19 = specialized Product2Sequence.Iterator.next()();
      uint64_t v20 = v24;
      if (v25) {
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    uint64_t result = swift_release();
    __break(1u);
  }
  return result;
}

uint64_t specialized static MLClassifierMetrics.makePrecisionRecallDataFrame<A>(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v47 = a1;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ColumnID<Double>);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v54 = (char *)&v42 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  uint64_t v45 = *(void *)(v3 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  Swift::String v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  char v8 = (char *)&v42 - v7;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ColumnID<Int>);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v53 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  uint64_t v44 = *(void *)(v11 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v42 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  char v52 = (char *)&v42 - v15;
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v51 = (char *)&v42 - v17;
  MEMORY[0x270FA5388](v16);
  uint64_t v50 = (char *)&v42 - v18;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ColumnID<String>);
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  uint64_t v43 = *(void *)(v49 - 8);
  MEMORY[0x270FA5388](v49);
  uint64_t v21 = (char *)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<String>);
  ClassificationMetrics.labels.getter();
  swift_bridgeObjectRelease();
  ColumnID.init(_:_:)();
  uint64_t v55 = v21;
  Column.init(_:capacity:)();
  ColumnID.init(_:_:)();
  Column.init(_:capacity:)();
  ColumnID.init(_:_:)();
  Column.init(_:capacity:)();
  ColumnID.init(_:_:)();
  Column.init(_:capacity:)();
  uint64_t v22 = v42;
  ColumnID.init(_:_:)();
  Column.init(_:capacity:)();
  ColumnID.init(_:_:)();
  Column.init(_:capacity:)();
  ColumnID.init(_:_:)();
  Column.init(_:capacity:)();
  DataFrame.init()();
  ClassificationMetrics.labels.getter();
  swift_bridgeObjectRetain();
  specialized _copyCollectionToContiguousArray<A>(_:)();
  uint64_t v24 = v23;
  swift_bridgeObjectRelease();
  v57[0] = v24;
  specialized MutableCollection<>.sort(by:)(v57);
  swift_bridgeObjectRelease();
  uint64_t v46 = v57[0];
  uint64_t v25 = *(char **)(v57[0] + 16);
  if (v25)
  {
    uint64_t v26 = (char **)(v46 + 40);
    uint64_t v48 = v8;
    do
    {
      uint64_t v27 = (uint64_t)*(v26 - 1);
      uint64_t v53 = *v26;
      uint64_t v54 = v25;
      v57[0] = v27;
      v57[1] = (uint64_t)v53;
      swift_bridgeObjectRetain();
      Column.append(_:)();
      uint64_t v28 = v3;
      unint64_t v29 = v6;
      uint64_t v30 = ClassificationMetrics.truePositiveCount(of:)();
      uint64_t v31 = v22;
      uint64_t v32 = ClassificationMetrics.falseNegativeCount(of:)();
      uint64_t v56 = ClassificationMetrics.count(label:)();
      Column.append(_:)();
      uint64_t v56 = v30;
      Swift::String v6 = v29;
      uint64_t v3 = v28;
      char v8 = v48;
      Column.append(_:)();
      uint64_t v56 = v32;
      uint64_t v22 = v31;
      Column.append(_:)();
      uint64_t v56 = ClassificationMetrics.falsePositiveCount(of:)();
      Column.append(_:)();
      ClassificationMetrics.precisionScore(label:)();
      uint64_t v56 = v33;
      Column.append(_:)();
      ClassificationMetrics.recallScore(label:)();
      uint64_t v56 = v34;
      Column.append(_:)();
      swift_bridgeObjectRelease();
      v26 += 2;
      uint64_t v25 = v54 - 1;
    }
    while (v54 != (char *)1);
  }
  swift_release();
  DataFrame.append<A>(column:)();
  uint64_t v35 = v50;
  DataFrame.append<A>(column:)();
  uint64_t v36 = v51;
  DataFrame.append<A>(column:)();
  uint64_t v37 = v52;
  DataFrame.append<A>(column:)();
  DataFrame.append<A>(column:)();
  DataFrame.append<A>(column:)();
  DataFrame.append<A>(column:)();
  uint64_t v38 = v22;
  uint64_t v39 = *(void (**)(char *, uint64_t))(v45 + 8);
  v39(v6, v3);
  v39(v8, v3);
  uint64_t v40 = *(void (**)(char *, uint64_t))(v44 + 8);
  v40(v38, v11);
  v40(v37, v11);
  v40(v36, v11);
  v40(v35, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v55, v49);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  void (*v36)(char *, uint64_t);
  void (*v37)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;

  uint64_t v43 = a1;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ColumnID<Double>);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v42 = (char *)&v39 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  uint64_t v41 = *(void *)(v3 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  Swift::String v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  char v8 = (char *)&v39 - v7;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ColumnID<Int>);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  uint64_t v40 = *(void *)(v10 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  uint64_t v47 = (char *)&v39 - v15;
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v46 = (char *)&v39 - v17;
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v39 - v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v39 - v21;
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<Int>);
  uint64_t v39 = *(void *)(ClassificationMetrics.labels.getter() + 16);
  swift_bridgeObjectRelease();
  ColumnID.init(_:_:)();
  uint64_t v48 = v22;
  Column.init(_:capacity:)();
  ColumnID.init(_:_:)();
  uint64_t v45 = v20;
  Column.init(_:capacity:)();
  ColumnID.init(_:_:)();
  Column.init(_:capacity:)();
  ColumnID.init(_:_:)();
  Column.init(_:capacity:)();
  ColumnID.init(_:_:)();
  Column.init(_:capacity:)();
  ColumnID.init(_:_:)();
  Column.init(_:capacity:)();
  ColumnID.init(_:_:)();
  Column.init(_:capacity:)();
  DataFrame.init()();
  ClassificationMetrics.labels.getter();
  swift_bridgeObjectRetain();
  specialized _copyCollectionToContiguousArray<A>(_:)();
  uint64_t v24 = v23;
  swift_bridgeObjectRelease();
  uint64_t v51 = (char *)v24;
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v51);
  swift_bridgeObjectRelease();
  uint64_t v42 = v51;
  uint64_t v25 = *((void *)v51 + 2);
  if (v25)
  {
    uint64_t v26 = (uint64_t *)(v42 + 32);
    uint64_t v44 = v3;
    do
    {
      uint64_t v27 = *v26++;
      uint64_t v51 = (char *)v27;
      Column.append(_:)();
      uint64_t v28 = ClassificationMetrics.truePositiveCount(of:)();
      unint64_t v29 = v8;
      uint64_t v30 = v6;
      uint64_t v31 = ClassificationMetrics.falseNegativeCount(of:)();
      uint64_t v50 = ClassificationMetrics.count(label:)();
      Column.append(_:)();
      uint64_t v50 = v28;
      Column.append(_:)();
      uint64_t v50 = v31;
      Swift::String v6 = v30;
      char v8 = v29;
      uint64_t v3 = v44;
      Column.append(_:)();
      uint64_t v50 = ClassificationMetrics.falsePositiveCount(of:)();
      Column.append(_:)();
      ClassificationMetrics.precisionScore(label:)();
      uint64_t v50 = v32;
      Column.append(_:)();
      ClassificationMetrics.recallScore(label:)();
      uint64_t v50 = v33;
      Column.append(_:)();
      --v25;
    }
    while (v25);
  }
  swift_release();
  DataFrame.append<A>(column:)();
  DataFrame.append<A>(column:)();
  uint64_t v34 = v46;
  DataFrame.append<A>(column:)();
  uint64_t v35 = v47;
  DataFrame.append<A>(column:)();
  DataFrame.append<A>(column:)();
  DataFrame.append<A>(column:)();
  DataFrame.append<A>(column:)();
  uint64_t v36 = *(void (**)(char *, uint64_t))(v41 + 8);
  v36(v6, v3);
  v36(v8, v3);
  uint64_t v37 = *(void (**)(char *, uint64_t))(v40 + 8);
  v37(v13, v10);
  v37(v35, v10);
  v37(v34, v10);
  v37(v45, v10);
  return ((uint64_t (*)(char *, uint64_t))v37)(v48, v10);
}

uint64_t MLClassifierMetrics.init(classificationError:confusion:precisionRecall:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, double *a3@<X8>, double a4@<D0>)
{
  char v6 = *((unsigned char *)a1 + 8);
  uint64_t v7 = *a2;
  char v8 = *((unsigned char *)a2 + 8);
  uint64_t v11 = *a1;
  char v12 = v6;
  uint64_t v9 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
  DataFrame.init(_:)((uint64_t)&v11, (uint64_t)a3 + *(int *)(v9 + 20));
  uint64_t v11 = v7;
  char v12 = v8;
  DataFrame.init(_:)((uint64_t)&v11, (uint64_t)a3 + *(int *)(v9 + 24));
  *a3 = a4;
  type metadata accessor for MLClassifierMetrics.Contents(0);

  return swift_storeEnumTagMultiPayload();
}

uint64_t MLClassifierMetrics.error.getter()
{
  type metadata accessor for MLClassifierMetrics.Contents(0);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v1);
  uint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MLClassifierMetrics.Contents(v0, (uint64_t)v3);
  if (swift_getEnumCaseMultiPayload() == 2) {
    return *(void *)v3;
  }
  outlined destroy of MLClassifierMetrics.Contents((uint64_t)v3, (void (*)(void))type metadata accessor for MLClassifierMetrics.Contents);
  return 0;
}

double MLClassifierMetrics.classificationError.getter()
{
  uint64_t v2 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
  uint64_t v3 = OUTLINED_FUNCTION_17(v2);
  MEMORY[0x270FA5388](v3);
  uint64_t v4 = OUTLINED_FUNCTION_16_23();
  uint64_t v5 = OUTLINED_FUNCTION_17(v4);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for MLClassifierMetrics.Contents(0);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_2_45(v9, v15);
  uint64_t v10 = OUTLINED_FUNCTION_21_22();
  if (v10)
  {
    if (v10 == 1)
    {
      OUTLINED_FUNCTION_22_19(v10, v11, (void (*)(void))type metadata accessor for MLClassifierMetrics.Precomputed);
      double v12 = *v0;
      outlined destroy of MLClassifierMetrics.Contents((uint64_t)v0, (void (*)(void))type metadata accessor for MLClassifierMetrics.Precomputed);
      double v13 = 1.0 - v12;
    }
    else
    {
      outlined destroy of MLClassifierMetrics.Contents(v1, (void (*)(void))type metadata accessor for MLClassifierMetrics.Contents);
      double v13 = 0.0;
    }
  }
  else
  {
    OUTLINED_FUNCTION_23_12(v10, v11, (void (*)(void))type metadata accessor for AnyClassificationMetrics);
    double v13 = AnyClassificationMetrics.accuracy.getter();
    outlined destroy of MLClassifierMetrics.Contents((uint64_t)v7, (void (*)(void))type metadata accessor for AnyClassificationMetrics);
  }
  return 1.0 - v13;
}

double MLClassifierMetrics.Contents.accuracy.getter()
{
  uint64_t v2 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
  uint64_t v3 = OUTLINED_FUNCTION_17(v2);
  MEMORY[0x270FA5388](v3);
  uint64_t v4 = OUTLINED_FUNCTION_16_23();
  uint64_t v5 = OUTLINED_FUNCTION_17(v4);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for MLClassifierMetrics.Contents(0);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_2_45(v9, v15);
  uint64_t v10 = OUTLINED_FUNCTION_21_22();
  if (v10)
  {
    if (v10 == 1)
    {
      OUTLINED_FUNCTION_22_19(v10, v11, (void (*)(void))type metadata accessor for MLClassifierMetrics.Precomputed);
      double v12 = *v0;
      outlined destroy of MLClassifierMetrics.Contents((uint64_t)v0, (void (*)(void))type metadata accessor for MLClassifierMetrics.Precomputed);
      return 1.0 - v12;
    }
    else
    {
      outlined destroy of MLClassifierMetrics.Contents(v1, (void (*)(void))type metadata accessor for MLClassifierMetrics.Contents);
      return 0.0;
    }
  }
  else
  {
    OUTLINED_FUNCTION_23_12(v10, v11, (void (*)(void))type metadata accessor for AnyClassificationMetrics);
    double v13 = AnyClassificationMetrics.accuracy.getter();
    outlined destroy of MLClassifierMetrics.Contents((uint64_t)v7, (void (*)(void))type metadata accessor for AnyClassificationMetrics);
  }
  return v13;
}

void MLClassifierMetrics.confusion.getter(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for DataFrame();
  uint64_t v3 = OUTLINED_FUNCTION_17(v2);
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_13_29();
  MLClassifierMetrics.confusionDataFrame.getter();
  MLDataTable.init(_:convertArraysToShapedArrays:)(0, (uint64_t)&v10);
  MLDataTable.willMutate()();
  MLDataTable.renameImpl(named:to:)(0x6574636964657270, 0xEF7373616C635F64, 0x6574636964657250, 0xE900000000000064);
  if ((v11 & 1) == 0)
  {
    id v4 = v10;
    outlined copy of Result<_DataTable, Error>(v10, 0);
    _DataTable.columnNamesDidChange()();
    outlined consume of Result<_DataTable, Error>(v4, 0);
  }
  MLDataTable.willMutate()();
  uint64_t v5 = OUTLINED_FUNCTION_20_22();
  MLDataTable.renameImpl(named:to:)(v5, v6, 0x62614C2065757254, 0xEA00000000006C65);
  if ((v11 & 1) == 0)
  {
    id v7 = v10;
    outlined copy of Result<_DataTable, Error>(v10, 0);
    _DataTable.columnNamesDidChange()();
    outlined consume of Result<_DataTable, Error>(v7, 0);
  }
  MLDataTable.willMutate()();
  MLDataTable.renameImpl(named:to:)(0x746E756F63, 0xE500000000000000, 0x746E756F43, 0xE500000000000000);
  id v8 = v10;
  char v9 = v11;
  if ((v11 & 1) == 0)
  {
    outlined copy of Result<_DataTable, Error>(v10, 0);
    _DataTable.columnNamesDidChange()();
    outlined consume of Result<_DataTable, Error>(v8, 0);
  }
  *(void *)a1 = v8;
  *(unsigned char *)(a1 + 8) = v9;
}

void MLClassifierMetrics.confusionDataFrame.getter()
{
  OUTLINED_FUNCTION_19_4();
  uint64_t v30 = v3;
  uint64_t v31 = v0;
  v29[3] = type metadata accessor for MLClassifierMetrics.Precomputed(0);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_57_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<Int>);
  OUTLINED_FUNCTION_0();
  v29[2] = v5;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_41_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<String>);
  OUTLINED_FUNCTION_0();
  v29[1] = v7;
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_32();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v9);
  uint64_t v10 = OUTLINED_FUNCTION_14_24();
  uint64_t v11 = OUTLINED_FUNCTION_17(v10);
  MEMORY[0x270FA5388](v11);
  double v13 = (char *)v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for MLClassifierMetrics.Contents(0);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_9_27(v15, v29[0]);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    outlined init with take of MLClassifierMetrics.Precomputed(v0, (uint64_t)v13, (void (*)(void))type metadata accessor for AnyClassificationMetrics);
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v13, v2, &demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v21 = swift_getEnumCaseMultiPayload();
    uint64_t v22 = v30;
    if (v21 == 1)
    {
      uint64_t v23 = OUTLINED_FUNCTION_8_28();
      v24(v23);
      specialized static MLClassifierMetrics.makeConfusionDataFrame<A>(_:)(v22);
      uint64_t v25 = OUTLINED_FUNCTION_17_20();
    }
    else
    {
      uint64_t v27 = OUTLINED_FUNCTION_7_32();
      v28(v27);
      specialized static MLClassifierMetrics.makeConfusionDataFrame<A>(_:)(v22);
      uint64_t v25 = OUTLINED_FUNCTION_19_22();
    }
    v26(v25);
    uint64_t v19 = (void (*)(void))type metadata accessor for AnyClassificationMetrics;
    uint64_t v20 = (uint64_t)v13;
    goto LABEL_9;
  }
  if (EnumCaseMultiPayload == 1)
  {
    outlined init with take of MLClassifierMetrics.Precomputed(v0, v1, (void (*)(void))type metadata accessor for MLClassifierMetrics.Precomputed);
    type metadata accessor for DataFrame();
    OUTLINED_FUNCTION_8();
    uint64_t v17 = OUTLINED_FUNCTION_24_21();
    v18(v17);
    uint64_t v19 = (void (*)(void))type metadata accessor for MLClassifierMetrics.Precomputed;
    uint64_t v20 = v1;
LABEL_9:
    outlined destroy of MLClassifierMetrics.Contents(v20, v19);
    goto LABEL_10;
  }
  outlined destroy of MLClassifierMetrics.Contents(v0, (void (*)(void))type metadata accessor for MLClassifierMetrics.Contents);
  DataFrame.init()();
LABEL_10:
  OUTLINED_FUNCTION_12_4();
}

uint64_t specialized Product2Sequence.Iterator.next()()
{
  if (*(unsigned char *)(v0 + 56) == 1)
  {
    uint64_t v2 = *(void *)(v0 + 8);
    uint64_t result = *(void *)(v0 + 16);
    if (result == v2)
    {
LABEL_10:
      uint64_t result = 0;
      *(void *)(v0 + 48) = 0;
      *(unsigned char *)(v0 + 56) = 1;
      return result;
    }
    if (v2 < *(void *)v0) {
      goto LABEL_26;
    }
    if (result < *(void *)v0)
    {
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    if (result >= v2)
    {
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    *(void *)(v0 + 16) = result + 1;
    *(void *)(v0 + 48) = result;
    *(unsigned char *)(v0 + 56) = 0;
  }
  else
  {
    uint64_t result = *(void *)(v0 + 48);
  }
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  if (v3 != v4)
  {
    uint64_t v6 = *(void *)(v0 + 24);
    if (v4 < v6)
    {
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    if (v3 < v6)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    if (v3 >= v4)
    {
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
LABEL_14:
    *(void *)(v0 + 40) = v3 + 1;
    return result;
  }
  uint64_t v5 = *(void *)(v0 + 8);
  uint64_t result = *(void *)(v0 + 16);
  if (result == v5) {
    goto LABEL_10;
  }
  if (v5 < *(void *)v0) {
    goto LABEL_29;
  }
  if (result < *(void *)v0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (result >= v5)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  *(unsigned char *)(v0 + 56) = 0;
  uint64_t v3 = *(void *)(v0 + 64);
  uint64_t v7 = *(void *)(v0 + 72);
  *(void *)(v0 + 16) = result + 1;
  *(void *)(v0 + 24) = v3;
  *(void *)(v0 + 32) = v7;
  *(void *)(v0 + 40) = v3;
  *(void *)(v0 + 48) = result;
  if (v3 == v7) {
    return 0;
  }
  if (v7 >= v3)
  {
    if (v3 >= v7)
    {
      __break(1u);
      goto LABEL_23;
    }
    goto LABEL_14;
  }
LABEL_32:
  __break(1u);
  return result;
}

void MLClassifierMetrics.precisionRecall.getter(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for DataFrame();
  uint64_t v3 = OUTLINED_FUNCTION_17(v2);
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_13_29();
  MLClassifierMetrics.precisionRecallDataFrame.getter();
  MLDataTable.init(_:convertArraysToShapedArrays:)(0, a1);
}

void MLClassifierMetrics.precisionRecallDataFrame.getter()
{
  OUTLINED_FUNCTION_19_4();
  uint64_t v30 = v3;
  uint64_t v31 = v0;
  v29[3] = type metadata accessor for MLClassifierMetrics.Precomputed(0);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_57_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<Int>);
  OUTLINED_FUNCTION_0();
  v29[2] = v5;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_41_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<String>);
  OUTLINED_FUNCTION_0();
  v29[1] = v7;
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_32();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v9);
  uint64_t v10 = OUTLINED_FUNCTION_14_24();
  uint64_t v11 = OUTLINED_FUNCTION_17(v10);
  MEMORY[0x270FA5388](v11);
  double v13 = (char *)v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for MLClassifierMetrics.Contents(0);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_9_27(v15, v29[0]);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    outlined init with take of MLClassifierMetrics.Precomputed(v0, (uint64_t)v13, (void (*)(void))type metadata accessor for AnyClassificationMetrics);
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v13, v2, &demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v21 = swift_getEnumCaseMultiPayload();
    uint64_t v22 = v30;
    if (v21 == 1)
    {
      uint64_t v23 = OUTLINED_FUNCTION_8_28();
      v24(v23);
      specialized static MLClassifierMetrics.makePrecisionRecallDataFrame<A>(_:)(v22);
      uint64_t v25 = OUTLINED_FUNCTION_17_20();
    }
    else
    {
      uint64_t v27 = OUTLINED_FUNCTION_7_32();
      v28(v27);
      specialized static MLClassifierMetrics.makePrecisionRecallDataFrame<A>(_:)(v22);
      uint64_t v25 = OUTLINED_FUNCTION_19_22();
    }
    v26(v25);
    uint64_t v19 = (void (*)(void))type metadata accessor for AnyClassificationMetrics;
    uint64_t v20 = (uint64_t)v13;
    goto LABEL_9;
  }
  if (EnumCaseMultiPayload == 1)
  {
    outlined init with take of MLClassifierMetrics.Precomputed(v0, v1, (void (*)(void))type metadata accessor for MLClassifierMetrics.Precomputed);
    type metadata accessor for DataFrame();
    OUTLINED_FUNCTION_8();
    uint64_t v17 = OUTLINED_FUNCTION_24_21();
    v18(v17);
    uint64_t v19 = (void (*)(void))type metadata accessor for MLClassifierMetrics.Precomputed;
    uint64_t v20 = v1;
LABEL_9:
    outlined destroy of MLClassifierMetrics.Contents(v20, v19);
    goto LABEL_10;
  }
  outlined destroy of MLClassifierMetrics.Contents(v0, (void (*)(void))type metadata accessor for MLClassifierMetrics.Contents);
  DataFrame.init()();
LABEL_10:
  OUTLINED_FUNCTION_12_4();
}

uint64_t MLClassifierMetrics.Contents.stringLabels.getter()
{
  uint64_t v2 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
  uint64_t v3 = OUTLINED_FUNCTION_17(v2);
  MEMORY[0x270FA5388](v3);
  uint64_t v4 = OUTLINED_FUNCTION_15_24();
  uint64_t v5 = OUTLINED_FUNCTION_17(v4);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for MLClassifierMetrics.Contents(0);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_2_45(v9, v18);
  uint64_t v10 = OUTLINED_FUNCTION_21_22();
  if (v10)
  {
    if (v10 != 1)
    {

      return MEMORY[0x263F8EE88];
    }
    OUTLINED_FUNCTION_23_12(v10, v11, (void (*)(void))type metadata accessor for MLClassifierMetrics.Precomputed);
    MLClassifierMetrics.Precomputed.stringLabels.getter();
    uint64_t v13 = v12;
    uint64_t v14 = (void (*)(void))type metadata accessor for MLClassifierMetrics.Precomputed;
    uint64_t v15 = v0;
  }
  else
  {
    OUTLINED_FUNCTION_22_19(v10, v11, (void (*)(void))type metadata accessor for AnyClassificationMetrics);
    AnyClassificationMetrics.stringLabels.getter();
    uint64_t v13 = v16;
    uint64_t v14 = (void (*)(void))type metadata accessor for AnyClassificationMetrics;
    uint64_t v15 = (uint64_t)v7;
  }
  outlined destroy of MLClassifierMetrics.Contents(v15, v14);
  return v13;
}

void MLClassifierMetrics.Precomputed.stringLabels.getter()
{
  OUTLINED_FUNCTION_19_4();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  OUTLINED_FUNCTION_0();
  uint64_t v46 = v4;
  uint64_t v47 = v3;
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_32();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<String>>);
  uint64_t v6 = OUTLINED_FUNCTION_17(v5);
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_27_7();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  OUTLINED_FUNCTION_0();
  uint64_t v9 = v8;
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<Int>>);
  OUTLINED_FUNCTION_0();
  uint64_t v48 = v14;
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_41_0();
  uint64_t v51 = type metadata accessor for AnyColumn();
  OUTLINED_FUNCTION_0();
  uint64_t v49 = v16;
  MEMORY[0x270FA5388](v17);
  uint64_t v18 = OUTLINED_FUNCTION_31_1();
  type metadata accessor for MLClassifierMetrics.Precomputed(v18);
  uint64_t v19 = OUTLINED_FUNCTION_20_22();
  MEMORY[0x22A672220](v19);
  AnyColumn.wrappedElementType.getter();
  uint64_t v20 = swift_dynamicCastMetatype();
  uint64_t v50 = v1;
  if (v20)
  {
    AnyColumn.assumingType<A>(_:)();
    v53[0] = 0;
    lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<Int> and conformance Column<A>, &demangling cache variable for type metadata for Column<Int>);
    OptionalColumnProtocol.filled(with:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v7);
    lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FilledColumn<Column<Int>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<Int>>);
    uint64_t v21 = dispatch thunk of Collection.count.getter();
    uint64_t v2 = MEMORY[0x263F8EE78];
    if (v21)
    {
      uint64_t v22 = v21;
      v52[0] = MEMORY[0x263F8EE78];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v2 = v52[0];
      dispatch thunk of Collection.startIndex.getter();
      if (v22 < 0)
      {
        __break(1u);
        goto LABEL_5;
      }
      do
      {
        uint64_t v38 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
        uint64_t v40 = *v39;
        v38(v53, 0);
        v53[0] = v40;
        uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v43 = v42;
        v52[0] = v2;
        unint64_t v44 = *(void *)(v2 + 16);
        if (v44 >= *(void *)(v2 + 24) >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v2 = v52[0];
        }
        *(void *)(v2 + 16) = v44 + 1;
        uint64_t v45 = v2 + 16 * v44;
        *(void *)(v45 + 32) = v41;
        *(void *)(v45 + 40) = v43;
        dispatch thunk of Collection.formIndex(after:)();
        --v22;
      }
      while (v22);
    }
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v0, v13);
    specialized Set.init<A>(_:)(v2);
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v50, v51);
    goto LABEL_19;
  }
LABEL_5:
  uint64_t v24 = v46;
  uint64_t v23 = v47;
  if (swift_dynamicCastMetatype())
  {
    uint64_t v25 = v50;
    AnyColumn.assumingType<A>(_:)();
    v53[0] = 0;
    v53[1] = 0xE000000000000000;
    lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>((unint64_t *)&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>);
    OptionalColumnProtocol.filled(with:)();
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v2, v23);
    specialized Set.init<A>(_:)();
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v25, v51);
LABEL_19:
    OUTLINED_FUNCTION_12_4();
    return;
  }
  lazy protocol witness table accessor for type AnyColumn and conformance AnyColumn();
  uint64_t v27 = v50;
  uint64_t v26 = v51;
  uint64_t v28 = dispatch thunk of Collection.count.getter();
  uint64_t v29 = MEMORY[0x263F8EE78];
  if (!v28)
  {
LABEL_14:
    specialized Set.init<A>(_:)(v29);
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v27, v26);
    goto LABEL_19;
  }
  uint64_t v30 = v28;
  uint64_t v54 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  dispatch thunk of Collection.startIndex.getter();
  if ((v30 & 0x8000000000000000) == 0)
  {
    do
    {
      uint64_t v31 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
      outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v32, (uint64_t)v52, &demangling cache variable for type metadata for Any?);
      v31(v53, 0);
      outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v52, (uint64_t)v53, &demangling cache variable for type metadata for Any?);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
      uint64_t v33 = String.init<A>(describing:)();
      uint64_t v35 = v34;
      outlined destroy of Any?((uint64_t)v52);
      uint64_t v29 = v54;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v29 = v54;
      }
      unint64_t v36 = *(void *)(v29 + 16);
      if (v36 >= *(void *)(v29 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v29 = v54;
      }
      *(void *)(v29 + 16) = v36 + 1;
      uint64_t v37 = v29 + 16 * v36;
      *(void *)(v37 + 32) = v33;
      *(void *)(v37 + 40) = v35;
      uint64_t v27 = v50;
      uint64_t v26 = v51;
      dispatch thunk of Collection.formIndex(after:)();
      --v30;
    }
    while (v30);
    goto LABEL_14;
  }
  __break(1u);
}

uint64_t MLClassifierMetrics.Contents.labelCount.getter()
{
  uint64_t v2 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
  uint64_t v3 = OUTLINED_FUNCTION_17(v2);
  MEMORY[0x270FA5388](v3);
  uint64_t v4 = OUTLINED_FUNCTION_15_24();
  uint64_t v5 = OUTLINED_FUNCTION_17(v4);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for MLClassifierMetrics.Contents(0);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_2_45(v9, v18);
  uint64_t v10 = OUTLINED_FUNCTION_21_22();
  if (v10)
  {
    if (v10 != 1)
    {

      return 0;
    }
    OUTLINED_FUNCTION_23_12(v10, v11, (void (*)(void))type metadata accessor for MLClassifierMetrics.Precomputed);
    MLClassifierMetrics.Precomputed.stringLabels.getter();
    uint64_t v13 = *(void *)(v12 + 16);
    swift_bridgeObjectRelease();
    uint64_t v14 = (void (*)(void))type metadata accessor for MLClassifierMetrics.Precomputed;
    uint64_t v15 = v0;
  }
  else
  {
    uint64_t v16 = OUTLINED_FUNCTION_22_19(v10, v11, (void (*)(void))type metadata accessor for AnyClassificationMetrics);
    uint64_t v13 = AnyClassificationMetrics.labelCount.getter(v16);
    uint64_t v14 = (void (*)(void))type metadata accessor for AnyClassificationMetrics;
    uint64_t v15 = (uint64_t)v7;
  }
  outlined destroy of MLClassifierMetrics.Contents(v15, v14);
  return v13;
}

void MLClassifierMetrics.Contents.exampleCount.getter()
{
  OUTLINED_FUNCTION_19_4();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  OUTLINED_FUNCTION_0();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_57_1();
  type metadata accessor for MLClassifierMetrics.Precomputed(0);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for AnyClassificationMetrics();
  uint64_t v12 = OUTLINED_FUNCTION_17(v11);
  MEMORY[0x270FA5388](v12);
  uint64_t v13 = OUTLINED_FUNCTION_31_1();
  type metadata accessor for MLClassifierMetrics.Contents(v13);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_27_7();
  outlined init with copy of MLClassifierMetrics.Contents(v0, v3);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
    {
      outlined destroy of MLClassifierMetrics.Contents(v3, (void (*)(void))type metadata accessor for MLClassifierMetrics.Contents);
      goto LABEL_7;
    }
    outlined init with take of MLClassifierMetrics.Precomputed(v3, (uint64_t)v10, (void (*)(void))type metadata accessor for MLClassifierMetrics.Precomputed);
    DataFrame.subscript.getter();
    Column<A>.sum()();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v4);
    uint64_t v16 = (void (*)(void))type metadata accessor for MLClassifierMetrics.Precomputed;
    uint64_t v17 = (uint64_t)v10;
  }
  else
  {
    uint64_t v18 = outlined init with take of MLClassifierMetrics.Precomputed(v3, v2, (void (*)(void))type metadata accessor for AnyClassificationMetrics);
    AnyClassificationMetrics.exampleCount.getter(v18);
    uint64_t v16 = (void (*)(void))type metadata accessor for AnyClassificationMetrics;
    uint64_t v17 = v2;
  }
  outlined destroy of MLClassifierMetrics.Contents(v17, v16);
LABEL_7:
  OUTLINED_FUNCTION_12_4();
}

unint64_t MLClassifierMetrics.accuracyDescription.getter()
{
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  MLClassifierMetrics.Contents.exampleCount.getter();
  v0._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = 10;
  v1._id object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  MLClassifierMetrics.Contents.labelCount.getter();
  v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 10;
  v3._id object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  v4._uint64_t countAndFlagsBits = 0xD000000000000013;
  v4._id object = (void *)0x80000002272D8850;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2272CB370;
  double v6 = MLClassifierMetrics.Contents.accuracy.getter();
  uint64_t v7 = MEMORY[0x263F8D5B8];
  *(void *)(v5 + 56) = MEMORY[0x263F8D538];
  *(void *)(v5 + 64) = v7;
  *(double *)(v5 + 32) = v6 * 100.0;
  v8._uint64_t countAndFlagsBits = String.init(format:_:)();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  return 0xD000000000000014;
}

uint64_t type metadata accessor for MLClassifierMetrics.Contents(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLClassifierMetrics.Contents);
}

uint64_t outlined init with copy of MLClassifierMetrics.Contents(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MLClassifierMetrics.Contents(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void *MLClassifierMetrics.Contents.confusionMatrixDescription.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  Swift::String v3 = (char *)v64 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MLClassifierMetrics.Contents.stringLabels.getter();
  swift_bridgeObjectRetain();
  specialized _copyCollectionToContiguousArray<A>(_:)();
  uint64_t v5 = v4;
  swift_bridgeObjectRelease();
  v78[0] = v5;
  specialized MutableCollection<>.sort(by:)((uint64_t *)v78);
  uint64_t v65 = v1;
  swift_bridgeObjectRelease();
  double v6 = v78[0];
  MLClassifierMetrics.Contents.confusionMatrix(labels:)(v78[0], (uint64_t)v3);
  ML19MLClassifierMetricsV8ContentsO26confusionMatrixDescription33_21E6E2EACFD6F93017C79EF6BCC906FCLLSSvgSiSScfu_33_1a2cfc70c67f85f4b89db78a8cf64951SSSiTf3nnnpk_nTf1cn_n = (void *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_Sis5NeverOTg5169_s8CreateML19MLClassifierMetricsV8ContentsO26confusionMatrixDescription33_21E6E2EACFD6F93017C79EF6BCC906FCLLSSvgSiSScfu_33_1a2cfc70c67f85f4b89db78a8cf64951SSSiTf3nnnpk_nTf1cn_n((uint64_t)v6);
  uint64_t v8 = specialized Sequence<>.max()(ML19MLClassifierMetricsV8ContentsO26confusionMatrixDescription33_21E6E2EACFD6F93017C79EF6BCC906FCLLSSvgSiSScfu_33_1a2cfc70c67f85f4b89db78a8cf64951SSSiTf3nnnpk_nTf1cn_n);
  char v10 = v9;
  swift_bridgeObjectRelease();
  if (v10) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = v8;
  }
  uint64_t v12 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Float> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float>);
  uint64_t v73 = v3;
  uint64_t v74 = v0;
  uint64_t v72 = v12;
  uint64_t v13 = MLShapedArrayProtocol.scalars.getter();
  uint64_t v14 = *(void *)(v13 + 16);
  if (v14)
  {
    uint64_t v70 = v11;
    *(void *)&long long v71 = v6;
    v78[0] = (void *)MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14, 0);
    uint64_t v15 = 0;
    uint64_t v16 = v78[0];
    while (1)
    {
      float v17 = *(float *)(v13 + 4 * v15 + 32);
      if ((~LODWORD(v17) & 0x7F800000) == 0) {
        break;
      }
      if (v17 <= -9.2234e18) {
        goto LABEL_48;
      }
      if (v17 >= 9.2234e18) {
        goto LABEL_49;
      }
      v77._uint64_t countAndFlagsBits = (uint64_t)v17;
      dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v18 = String.count.getter();
      swift_bridgeObjectRelease();
      v78[0] = v16;
      unint64_t v20 = v16[2];
      unint64_t v19 = v16[3];
      if (v20 >= v19 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
        uint64_t v16 = v78[0];
      }
      ++v15;
      v16[2] = v20 + 1;
      v16[v20 + 4] = v18;
      if (v14 == v15)
      {
        swift_bridgeObjectRelease();
        uint64_t v11 = v70;
        double v6 = (void *)v71;
        goto LABEL_14;
      }
    }
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  swift_bridgeObjectRelease();
  uint64_t v16 = (void *)MEMORY[0x263F8EE78];
LABEL_14:
  uint64_t v21 = specialized Sequence<>.max()(v16);
  char v23 = v22;
  swift_bridgeObjectRelease();
  if (v23) {
    uint64_t v24 = 0;
  }
  else {
    uint64_t v24 = v21;
  }
  if (v24 <= v11) {
    uint64_t v24 = v11;
  }
  if (__OFADD__(v24, 1)) {
    goto LABEL_51;
  }
  uint64_t v25 = String.count.getter();
  if (v25 <= v11) {
    uint64_t v26 = v11;
  }
  else {
    uint64_t v26 = v25;
  }
  uint64_t v68 = v26 + 1;
  if (__OFADD__(v26, 1)) {
    goto LABEL_52;
  }
  uint64_t v27 = specialized Collection.prefix(_:)(20, (uint64_t)v6);
  uint64_t v67 = v28;
  uint64_t v30 = v29;
  unint64_t v32 = v31;
  v78[0] = (void *)0xD00000000000001ELL;
  v78[1] = (void *)0x80000002272D87F0;
  if (v6[2] >= 0x15uLL)
  {
    v77._uint64_t countAndFlagsBits = 0;
    v77._id object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(31);
    swift_bridgeObjectRelease();
    v77._uint64_t countAndFlagsBits = 0xD000000000000010;
    v77._id object = (void *)0x80000002272D8810;
    uint64_t v75 = 20;
    v33._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    v34._uint64_t countAndFlagsBits = 762929709;
    v34._id object = (void *)0xE400000000000000;
    String.append(_:)(v34);
    uint64_t v75 = 20;
    v35._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    v36._uint64_t countAndFlagsBits = 0xA2A2A2A2A2029;
    v36._id object = (void *)0xE700000000000000;
    String.append(_:)(v36);
    String.append(_:)(v77);
    swift_bridgeObjectRelease();
  }
  v37._uint64_t countAndFlagsBits = 0xD000000000000023;
  v37._id object = (void *)0x80000002272D8720;
  String.append(_:)(v37);
  v77._uint64_t countAndFlagsBits = 0x6572505C65757254;
  v77._id object = (void *)0xE900000000000064;
  uint64_t v75 = 32;
  unint64_t v76 = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  v38._uint64_t countAndFlagsBits = StringProtocol.padding<A>(toLength:withPad:startingAt:)();
  String.append(_:)(v38);
  swift_bridgeObjectRelease();
  if (v30 != v32 >> 1)
  {
    unint64_t v40 = v32 >> 1;
    if (v30 >= (uint64_t)(v32 >> 1))
    {
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
    v64[1] = v27;
    swift_unknownObjectRetain();
    uint64_t v41 = v30;
    uint64_t v42 = (void **)(v67 + 16 * v30 + 8);
    unint64_t v66 = v32 >> 1;
    do
    {
      uint64_t v43 = *v42;
      v77._uint64_t countAndFlagsBits = (uint64_t)*(v42 - 1);
      v77._id object = v43;
      uint64_t v75 = 32;
      unint64_t v76 = 0xE100000000000000;
      v44._uint64_t countAndFlagsBits = StringProtocol.padding<A>(toLength:withPad:startingAt:)();
      String.append(_:)(v44);
      swift_bridgeObjectRelease();
      --v40;
      v42 += 2;
    }
    while (v41 != v40);
    swift_unknownObjectRelease();
    v45._uint64_t countAndFlagsBits = 10;
    v45._id object = (void *)0xE100000000000000;
    String.append(_:)(v45);
    uint64_t v46 = v66 - v41;
    if (__OFSUB__(v66, v41)) {
      goto LABEL_54;
    }
    if (v46 < 0)
    {
LABEL_55:
      __break(1u);
      uint64_t result = (void *)swift_release();
      __break(1u);
      return result;
    }
    uint64_t v47 = v41;
    swift_unknownObjectRetain();
    uint64_t v48 = 0;
    uint64_t v49 = 1;
    long long v71 = xmmword_2272CB4D0;
    while (1)
    {
      uint64_t v69 = v47;
      uint64_t v70 = v49;
      uint64_t v50 = *(void **)(v67 + 16 * v47 + 8);
      v77._uint64_t countAndFlagsBits = *(void *)(v67 + 16 * v47);
      v77._id object = v50;
      uint64_t v75 = 32;
      unint64_t v76 = 0xE100000000000000;
      v51._uint64_t countAndFlagsBits = StringProtocol.padding<A>(toLength:withPad:startingAt:)();
      String.append(_:)(v51);
      swift_bridgeObjectRelease();
      if (v46) {
        break;
      }
LABEL_40:
      v59._uint64_t countAndFlagsBits = 10;
      v59._id object = (void *)0xE100000000000000;
      String.append(_:)(v59);
      uint64_t v48 = v70;
      if (__OFADD__(v70, 1)) {
        goto LABEL_50;
      }
      uint64_t v47 = v69 + 1;
      uint64_t v49 = v70 + 1;
      if (v69 + 1 == v66)
      {
        swift_unknownObjectRelease();
        goto LABEL_43;
      }
    }
    uint64_t v52 = 0;
    while (1)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      uint64_t v53 = swift_allocObject();
      *(_OWORD *)(v53 + 16) = v71;
      *(void *)(v53 + 32) = v48;
      *(void *)(v53 + 40) = v52;
      MLShapedArrayProtocol.subscript.getter();
      swift_bridgeObjectRelease();
      if ((~LODWORD(v77._countAndFlagsBits) & 0x7F800000) == 0) {
        break;
      }
      if (*(float *)&v77._countAndFlagsBits <= -9.2234e18) {
        goto LABEL_45;
      }
      if (*(float *)&v77._countAndFlagsBits >= 9.2234e18) {
        goto LABEL_46;
      }
      ++v52;
      v77._uint64_t countAndFlagsBits = (uint64_t)*(float *)&v77._countAndFlagsBits;
      v77._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      v77._id object = v54;
      uint64_t v75 = 32;
      unint64_t v76 = 0xE100000000000000;
      uint64_t v55 = StringProtocol.padding<A>(toLength:withPad:startingAt:)();
      id v57 = v56;
      swift_bridgeObjectRelease();
      v58._uint64_t countAndFlagsBits = v55;
      v58._id object = v57;
      String.append(_:)(v58);
      swift_bridgeObjectRelease();
      if (v46 == v52) {
        goto LABEL_40;
      }
    }
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  v39._uint64_t countAndFlagsBits = 10;
  v39._id object = (void *)0xE100000000000000;
  String.append(_:)(v39);
LABEL_43:
  uint64_t v61 = v73;
  uint64_t v60 = v74;
  uint64_t v62 = v65;
  swift_unknownObjectRelease();
  (*(void (**)(char *, uint64_t))(v62 + 8))(v61, v60);
  return v78[0];
}

uint64_t MLClassifierMetrics.precisionRecallDescription.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  uint64_t v50 = *(void *)(v0 - 8);
  uint64_t v1 = MEMORY[0x270FA5388](v0);
  uint64_t v60 = (char *)&v46 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v46 - v3;
  uint64_t v5 = type metadata accessor for AnyColumn();
  uint64_t v56 = *(void (***)(char *, uint64_t))(v5 - 8);
  uint64_t v57 = v5;
  MEMORY[0x270FA5388](v5);
  Swift::String v51 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  char v10 = (void (**)(char *, uint64_t))((char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = type metadata accessor for DataFrame();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MLClassifierMetrics.precisionRecallDataFrame.getter();
  if (DataFrameProtocol.isEmpty.getter())
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    return 0;
  }
  uint64_t v47 = v12;
  uint64_t v48 = v11;
  uint64_t v49 = v8;
  uint64_t v58 = v0;
  Swift::String v59 = v4;
  uint64_t v16 = MLClassifierMetrics.Contents.stringLabels.getter();
  ML19MLClassifierMetricsV26precisionRecallDescription33_21E6E2EACFD6F93017C79EF6BCC906FCLLSSvgSiSScfu_33_1a2cfc70c67f85f4b89db78a8cf64951SSSiTf3nnnpk_nTf1cn_n = (void *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShySSG_Sis5NeverOTg5159_s8CreateML19MLClassifierMetricsV26precisionRecallDescription33_21E6E2EACFD6F93017C79EF6BCC906FCLLSSvgSiSScfu_33_1a2cfc70c67f85f4b89db78a8cf64951SSSiTf3nnnpk_nTf1cn_n(v16);
  swift_bridgeObjectRelease();
  uint64_t v18 = specialized Sequence<>.max()(ML19MLClassifierMetricsV26precisionRecallDescription33_21E6E2EACFD6F93017C79EF6BCC906FCLLSSvgSiSScfu_33_1a2cfc70c67f85f4b89db78a8cf64951SSSiTf3nnnpk_nTf1cn_n);
  char v20 = v19;
  swift_bridgeObjectRelease();
  if (v20) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = v18;
  }
  unint64_t v67 = 0xD000000000000041;
  unint64_t v68 = 0x80000002272D8780;
  uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v22 = swift_allocObject();
  long long v54 = xmmword_2272CB4A0;
  *(_OWORD *)(v22 + 16) = xmmword_2272CB4A0;
  uint64_t v65 = 0x7373616C43;
  unint64_t v66 = 0xE500000000000000;
  uint64_t v63 = 32;
  unint64_t v64 = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v23 = MEMORY[0x263F8D310];
  uint64_t v53 = v21;
  uint64_t v24 = StringProtocol.padding<A>(toLength:withPad:startingAt:)();
  uint64_t v26 = v25;
  *(void *)(v22 + 56) = v23;
  unint64_t v27 = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v22 + 32) = v24;
  *(void *)(v22 + 40) = v26;
  *(void *)(v22 + 96) = v23;
  *(void *)(v22 + 104) = v27;
  *(void *)(v22 + 64) = v27;
  strcpy((char *)(v22 + 72), "Precision(%)");
  *(unsigned char *)(v22 + 85) = 0;
  *(_WORD *)(v22 + 86) = -5120;
  *(void *)(v22 + 136) = v23;
  *(void *)(v22 + 144) = v27;
  unint64_t v52 = v27;
  *(void *)(v22 + 112) = 0x25286C6C61636552;
  *(void *)(v22 + 120) = 0xE900000000000029;
  v28._uint64_t countAndFlagsBits = String.init(format:_:)();
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  uint64_t v29 = v51;
  MEMORY[0x22A672220](0x7373616C63, 0xE500000000000000);
  AnyColumn.convertedToStrings()((uint64_t)v10);
  v56[1](v29, v57);
  DataFrame.subscript.getter();
  DataFrame.subscript.getter();
  uint64_t result = Column.count.getter();
  if ((result & 0x8000000000000000) == 0)
  {
    uint64_t v30 = result;
    Swift::String v51 = v14;
    uint64_t v56 = v10;
    uint64_t v57 = v7;
    uint64_t v31 = v58;
    if (!result)
    {
LABEL_14:
      v44._uint64_t countAndFlagsBits = 10;
      v44._id object = (void *)0xE100000000000000;
      String.append(_:)(v44);
      Swift::String v45 = *(void (**)(char *, uint64_t))(v50 + 8);
      v45(v60, v31);
      v45(v59, v31);
      (*(void (**)(char *, uint64_t))(v49 + 8))((char *)v56, v57);
      (*(void (**)(char *, uint64_t))(v47 + 8))(v51, v48);
      return v67;
    }
    uint64_t v32 = 0;
    uint64_t v33 = MEMORY[0x263F8D5B8];
    while (v30 != v32)
    {
      uint64_t v34 = swift_allocObject();
      *(_OWORD *)(v34 + 16) = v54;
      uint64_t result = Column.subscript.getter();
      if (!v66) {
        goto LABEL_18;
      }
      uint64_t v63 = v65;
      unint64_t v64 = v66;
      uint64_t v61 = 32;
      unint64_t v62 = 0xE100000000000000;
      uint64_t v35 = MEMORY[0x263F8D310];
      uint64_t v36 = StringProtocol.padding<A>(toLength:withPad:startingAt:)();
      uint64_t v38 = v37;
      swift_bridgeObjectRelease();
      unint64_t v39 = v52;
      *(void *)(v34 + 56) = v35;
      *(void *)(v34 + 64) = v39;
      *(void *)(v34 + 32) = v36;
      *(void *)(v34 + 40) = v38;
      uint64_t v31 = v58;
      uint64_t result = Column.subscript.getter();
      if (v66) {
        goto LABEL_19;
      }
      double v40 = *(double *)&v65 * 100.0;
      uint64_t v41 = MEMORY[0x263F8D538];
      *(void *)(v34 + 96) = MEMORY[0x263F8D538];
      *(void *)(v34 + 104) = v33;
      *(double *)(v34 + 72) = v40;
      uint64_t result = Column.subscript.getter();
      if (v66) {
        goto LABEL_20;
      }
      ++v32;
      double v42 = *(double *)&v65 * 100.0;
      *(void *)(v34 + 136) = v41;
      *(void *)(v34 + 144) = v33;
      *(double *)(v34 + 112) = v42;
      v43._uint64_t countAndFlagsBits = String.init(format:_:)();
      String.append(_:)(v43);
      uint64_t result = swift_bridgeObjectRelease();
      if (v30 == v32) {
        goto LABEL_14;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  __break(1u);
  return result;
}

unint64_t MLClassifierMetrics.playgroundDescription.getter@<X0>(void *a1@<X8>)
{
  unint64_t v2 = MLClassifierMetrics.accuracyDescription.getter();
  uint64_t v4 = v3;
  id v5 = objc_allocWithZone(MEMORY[0x263F086A0]);
  id v6 = @nonobjc NSAttributedString.init(string:attributes:)(v2, v4, 0);
  unint64_t result = type metadata accessor for NSAttributedString();
  a1[3] = result;
  *a1 = v6;
  return result;
}

uint64_t MLClassifierMetrics.Contents.confusionMatrix(labels:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v129 = a1;
  uint64_t v120 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  uint64_t v125 = *(void *)(v120 - 8);
  uint64_t v3 = MEMORY[0x270FA5388](v120);
  uint64_t v119 = (char *)&v106 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  id v6 = (char *)&v106 - v5;
  uint64_t v126 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<Int>>);
  uint64_t v7 = *(void *)(v126 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v126);
  uint64_t v118 = (char *)&v106 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  unint64_t v124 = (char *)&v106 - v10;
  uint64_t v11 = type metadata accessor for AnyColumn();
  uint64_t v139 = *(void (***)(char *, uint64_t))(v11 - 8);
  uint64_t v140 = (void (*)(char *, uint64_t))v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v106 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v142 = v14;
  uint64_t v143 = v15;
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v122 = (char *)&v106 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v135 = (char *)&v106 - v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v106 - v20;
  uint64_t v137 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<String>>);
  uint64_t v22 = *(void *)(v137 - 8);
  uint64_t v23 = MEMORY[0x270FA5388](v137);
  uint64_t v121 = (char *)&v106 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  uint64_t v134 = (char *)&v106 - v26;
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  uint64_t v128 = (char *)&v106 - v28;
  MEMORY[0x270FA5388](v27);
  uint64_t v136 = (char *)&v106 - v29;
  uint64_t v127 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  uint64_t v110 = *(void *)(v127 - 8);
  MEMORY[0x270FA5388](v127);
  uint64_t v123 = (char *)&v106 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
  MEMORY[0x270FA5388](v31);
  uint64_t v111 = (uint64_t)&v106 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for AnyClassificationMetrics();
  MEMORY[0x270FA5388](v33 - 8);
  uint64_t v35 = (char *)&v106 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for MLClassifierMetrics.Contents(0);
  MEMORY[0x270FA5388](v36);
  uint64_t v38 = (id *)((char *)&v106 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of MLClassifierMetrics.Contents(v141, (uint64_t)v38);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    uint64_t v97 = outlined init with take of MLClassifierMetrics.Precomputed((uint64_t)v38, (uint64_t)v35, (void (*)(void))type metadata accessor for AnyClassificationMetrics);
    AnyClassificationMetrics.makeConfusionMatrix()(v97, v98, v99, v100, v101, v102, v103, v104, (uint64_t)v106, v107, v108, v109, v110, v111, (uint64_t)v112, (uint64_t)v113, (uint64_t)v114, v115, v116,
      *((uint64_t *)&v116 + 1));
    return outlined destroy of MLClassifierMetrics.Contents((uint64_t)v35, (void (*)(void))type metadata accessor for AnyClassificationMetrics);
  }
  if (EnumCaseMultiPayload != 1)
  {

    lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Float> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float>);
    return MLShapedArrayProtocol.init(arrayLiteral:)();
  }
  uint64_t v108 = v22;
  uint64_t v109 = v7;
  uint64_t v107 = a2;
  outlined init with take of MLClassifierMetrics.Precomputed((uint64_t)v38, v111, (void (*)(void))type metadata accessor for MLClassifierMetrics.Precomputed);
  LODWORD(v144) = 0;
  uint64_t v117 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t v40 = swift_allocObject();
  long long v116 = xmmword_2272CB4D0;
  *(_OWORD *)(v40 + 16) = xmmword_2272CB4D0;
  unint64_t v41 = v129[2];
  *(void *)(v40 + 32) = v41;
  *(void *)(v40 + 40) = v41;
  unint64_t v141 = v41;
  uint64_t v115 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Float> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float>);
  MLShapedArrayProtocol.init(repeating:shape:)();
  MEMORY[0x22A672220](0x7373616C63, 0xE500000000000000);
  AnyColumn.convertedToStrings()((uint64_t)v21);
  uint64_t v138 = (void (**)(char *, char *, uint64_t))v139[1];
  ((void (*)(char *, void))v138)(v13, v140);
  uint64_t v144 = 0;
  unint64_t v145 = 0xE000000000000000;
  uint64_t v139 = (void (**)(char *, uint64_t))MEMORY[0x263F1BF18];
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>((unint64_t *)&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>);
  uint64_t v42 = v142;
  OptionalColumnProtocol.filled(with:)();
  Swift::String v43 = v6;
  uint64_t v45 = v143 + 8;
  Swift::String v44 = *(void (**)(char *, uint64_t))(v143 + 8);
  v44(v21, v42);
  MEMORY[0x22A672220](0x6574636964657270, 0xEF7373616C635F64);
  AnyColumn.convertedToStrings()((uint64_t)v21);
  ((void (*)(char *, void))v138)(v13, v140);
  uint64_t v144 = 0;
  unint64_t v145 = 0xE000000000000000;
  OptionalColumnProtocol.filled(with:)();
  uint64_t v143 = v45;
  uint64_t v140 = v44;
  v44(v21, v42);
  DataFrame.subscript.getter();
  uint64_t v144 = 0;
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<Int> and conformance Column<A>, &demangling cache variable for type metadata for Column<Int>);
  uint64_t v46 = v120;
  OptionalColumnProtocol.filled(with:)();
  uint64_t v47 = *(void (**)(char *, uint64_t))(v125 + 8);
  v125 += 8;
  uint64_t v114 = v47;
  v47(v43, v46);
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FilledColumn<Column<Int>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<Int>>);
  uint64_t v48 = v126;
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  uint64_t result = dispatch thunk of Collection.distance(from:to:)();
  if (result < 0) {
    goto LABEL_76;
  }
  uint64_t v50 = result;
  uint64_t v51 = v137;
  if (!result)
  {
LABEL_73:
    (*(void (**)(char *, uint64_t))(v109 + 8))(v124, v48);
    uint64_t v105 = *(void (**)(char *, uint64_t))(v108 + 8);
    v105(v128, v51);
    v105(v136, v51);
    outlined destroy of MLClassifierMetrics.Contents(v111, (void (*)(void))type metadata accessor for MLClassifierMetrics.Precomputed);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v110 + 32))(v107, v123, v127);
  }
  uint64_t v52 = 0;
  uint64_t v138 = (void (**)(char *, char *, uint64_t))(v108 + 16);
  uint64_t v139 = (void (**)(char *, uint64_t))(v108 + 8);
  uint64_t v113 = (void (**)(char *, char *, uint64_t))(v109 + 16);
  long long v112 = (void (**)(char *, uint64_t))(v109 + 8);
  uint64_t v106 = v129 + 9;
  uint64_t v131 = result;
  while (v52 != v50)
  {
    uint64_t v146 = v52;
    uint64_t v53 = v135;
    long long v54 = v136;
    FilledColumn.base.getter();
    lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>);
    uint64_t v55 = v142;
    uint64_t v56 = (void (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read();
    uint64_t v59 = *v57;
    unint64_t v58 = v57[1];
    swift_bridgeObjectRetain();
    v56(&v144, 0);
    uint64_t v60 = v55;
    uint64_t v61 = v134;
    v140(v53, v60);
    unint64_t v62 = *v138;
    (*v138)(v61, v54, v51);
    if (v58)
    {
      uint64_t v63 = *v139;
      (*v139)(v61, v51);
    }
    else
    {
      FilledColumn.defaultValue.getter();
      uint64_t v63 = *v139;
      (*v139)(v61, v51);
      uint64_t v59 = v144;
      unint64_t v58 = v145;
    }
    if (v141)
    {
      uint64_t v64 = v129[4];
      uint64_t v65 = v129[5];
      BOOL v66 = v64 == v59 && v65 == v58;
      if (v66 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        uint64_t v133 = v64;
        uint64_t v67 = 0;
      }
      else
      {
        if (v141 == 1)
        {
          uint64_t result = swift_bridgeObjectRelease();
          goto LABEL_37;
        }
        BOOL v88 = v129[6] == v59 && v129[7] == v58;
        uint64_t v133 = v64;
        if (!v88 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          uint64_t v90 = v106;
          uint64_t v91 = 2;
          while (1)
          {
            uint64_t v67 = v91;
            if (v141 == v91) {
              break;
            }
            if (*(v90 - 1) != v59 || *v90 != v58)
            {
              char v93 = _stringCompareWithSmolCheck(_:_:expecting:)();
              uint64_t v91 = v67 + 1;
              v90 += 2;
              if ((v93 & 1) == 0) {
                continue;
              }
            }
            goto LABEL_17;
          }
LABEL_36:
          uint64_t result = swift_bridgeObjectRelease();
          uint64_t v48 = v126;
LABEL_37:
          uint64_t v51 = v137;
          goto LABEL_38;
        }
        uint64_t v67 = 1;
      }
LABEL_17:
      uint64_t v132 = v63;
      uint64_t v130 = v67;
      swift_bridgeObjectRelease();
      uint64_t v146 = v52;
      unint64_t v68 = v122;
      uint64_t v69 = v137;
      uint64_t v70 = v128;
      FilledColumn.base.getter();
      uint64_t v71 = v142;
      uint64_t v72 = (void (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v75 = *v73;
      unint64_t v74 = v73[1];
      swift_bridgeObjectRetain();
      v72(&v144, 0);
      v140(v68, v71);
      unint64_t v76 = v121;
      v62(v121, v70, v69);
      if (v74)
      {
        v132(v76, v69);
      }
      else
      {
        FilledColumn.defaultValue.getter();
        v132(v76, v69);
        uint64_t v75 = v144;
        unint64_t v74 = v145;
      }
      if (v133 == v75 && v65 == v74)
      {
        uint64_t v78 = 0;
LABEL_29:
        swift_bridgeObjectRelease();
        uint64_t v79 = swift_allocObject();
        *(_OWORD *)(v79 + 16) = v116;
        *(void *)(v79 + 32) = v130;
        *(void *)(v79 + 40) = v78;
        uint64_t v146 = v52;
        uint64_t v80 = v119;
        uint64_t v48 = v126;
        uint64_t v81 = v124;
        FilledColumn.base.getter();
        lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<Int> and conformance Column<A>, &demangling cache variable for type metadata for Column<Int>);
        uint64_t v82 = v120;
        Swift::String v83 = (void (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read();
        uint64_t v85 = *(void *)v84;
        char v86 = *(unsigned char *)(v84 + 8);
        v83(&v144, 0);
        v114(v80, v82);
        uint64_t v87 = v118;
        (*v113)(v118, v81, v48);
        uint64_t v50 = v131;
        if (v86)
        {
          FilledColumn.defaultValue.getter();
          (*v112)(v87, v48);
          uint64_t v85 = v144;
        }
        else
        {
          (*v112)(v87, v48);
        }
        uint64_t v51 = v137;
        *(float *)&uint64_t v144 = (float)v85;
        uint64_t result = MLShapedArrayProtocol.subscript.setter();
        goto LABEL_39;
      }
      if (_stringCompareWithSmolCheck(_:_:expecting:)())
      {
        uint64_t v78 = 0;
        goto LABEL_29;
      }
      if (v141 == 1) {
        goto LABEL_36;
      }
      BOOL v89 = v129[6] == v75 && v129[7] == v74;
      if (v89 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        uint64_t v78 = 1;
        goto LABEL_29;
      }
      uint64_t v94 = v106;
      unint64_t v95 = 2;
      uint64_t v51 = v137;
      while (1)
      {
        uint64_t v78 = v95;
        if (v141 == v95) {
          break;
        }
        if (v95 >= v141) {
          goto LABEL_75;
        }
        if (*(v94 - 1) != v75 || *v94 != v74)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          unint64_t v95 = v78 + 1;
          v94 += 2;
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_29;
      }
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v48 = v126;
    }
    else
    {
      uint64_t result = swift_bridgeObjectRelease();
    }
LABEL_38:
    uint64_t v50 = v131;
LABEL_39:
    if (++v52 == v50) {
      goto LABEL_73;
    }
  }
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for MLClassifierMetrics.Precomputed(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLClassifierMetrics.Precomputed);
}

uint64_t outlined destroy of MLClassifierMetrics.Contents(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_8();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t outlined init with take of MLClassifierMetrics.Precomputed(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_8();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

char *initializeBufferWithCopyOfBuffer for MLClassifierMetrics(char *a1, char **a2)
{
  int v4 = *(_DWORD *)(*(void *)(type metadata accessor for MLClassifierMetrics.Contents(0) - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *(void *)a1 = *a2;
    a1 = &v12[(v4 + 16) & ~(unint64_t)v4];
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v13 = *a2;
      uint64_t v14 = v13;
      *(void *)a1 = v13;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *(void *)a1 = *a2;
      uint64_t v6 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v7 = *(int *)(v6 + 20);
      uint64_t v8 = &a1[v7];
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = type metadata accessor for DataFrame();
      uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
      v11(v8, v9, v10);
      v11(&a1[*(int *)(v6 + 24)], (char *)a2 + *(int *)(v6 + 24), v10);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v15 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v15 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(v15);
      (*(void (**)(char *, char **, uint64_t))(*(void *)(v16 - 8) + 16))(a1, a2, v16);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void destroy for MLClassifierMetrics(void **a1)
{
  type metadata accessor for MLClassifierMetrics.Contents(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    int v4 = *a1;
  }
  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v5 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v6 = (char *)a1 + *(int *)(v5 + 20);
      uint64_t v7 = type metadata accessor for DataFrame();
      uint64_t v12 = *(void (**)(void **, uint64_t))(*(void *)(v7 - 8) + 8);
      ((void (*)(void *__return_ptr, char *, uint64_t))v12)((void *)(v7 - 8), v6, v7);
      uint64_t v8 = (void **)((char *)a1 + *(int *)(v5 + 24));
      uint64_t v9 = v7;
      uint64_t v10 = v12;
    }
    else
    {
      if (EnumCaseMultiPayload) {
        return;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v3 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v3 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(v3);
      uint64_t v10 = *(void (**)(void **, uint64_t))(*(void *)(v11 - 8) + 8);
      uint64_t v9 = v11;
      uint64_t v8 = a1;
    }
    v10(v8, v9);
  }
}

void **initializeWithCopy for MLClassifierMetrics(void **a1, void **a2)
{
  type metadata accessor for MLClassifierMetrics.Contents(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v11 = *a2;
    id v12 = v11;
    *a1 = v11;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    uint64_t v5 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v6 = *(int *)(v5 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for DataFrame();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    v10(v7, v8, v9);
    v10((char *)a1 + *(int *)(v5 + 24), (char *)a2 + *(int *)(v5 + 24), v9);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v13 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      uint64_t v13 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(v13);
    (*(void (**)(void **, void **, uint64_t))(*(void *)(v14 - 8) + 16))(a1, a2, v14);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void **assignWithCopy for MLClassifierMetrics(void **a1, void **a2)
{
  if (a1 != a2)
  {
    outlined destroy of MLClassifierMetrics.Contents((uint64_t)a1, (void (*)(void))type metadata accessor for MLClassifierMetrics.Contents);
    type metadata accessor for MLClassifierMetrics.Contents(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v11 = *a2;
      id v12 = v11;
      *a1 = v11;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      uint64_t v5 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v6 = *(int *)(v5 + 20);
      uint64_t v7 = (char *)a1 + v6;
      uint64_t v8 = (char *)a2 + v6;
      uint64_t v9 = type metadata accessor for DataFrame();
      uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
      v10(v7, v8, v9);
      v10((char *)a1 + *(int *)(v5 + 24), (char *)a2 + *(int *)(v5 + 24), v9);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v13 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v13 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(v13);
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v14 - 8) + 16))(a1, a2, v14);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *initializeWithTake for MLClassifierMetrics(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *(void *)a1 = *(void *)a2;
    uint64_t v8 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v9 = *(int *)(v8 + 20);
    uint64_t v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    uint64_t v12 = type metadata accessor for DataFrame();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32);
    v13(v10, v11, v12);
    v13(&a1[*(int *)(v8 + 24)], &a2[*(int *)(v8 + 24)], v12);
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
      return a1;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v6 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      uint64_t v6 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(v6);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

char *assignWithTake for MLClassifierMetrics(char *a1, char *a2)
{
  if (a1 != a2)
  {
    outlined destroy of MLClassifierMetrics.Contents((uint64_t)a1, (void (*)(void))type metadata accessor for MLClassifierMetrics.Contents);
    uint64_t v4 = type metadata accessor for MLClassifierMetrics.Contents(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *(void *)a1 = *(void *)a2;
      uint64_t v8 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v9 = *(int *)(v8 + 20);
      uint64_t v10 = &a1[v9];
      uint64_t v11 = &a2[v9];
      uint64_t v12 = type metadata accessor for DataFrame();
      uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32);
      v13(v10, v11, v12);
      v13(&a1[*(int *)(v8 + 24)], &a2[*(int *)(v8 + 24)], v12);
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
        return a1;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v6 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v6 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(v6);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for MLClassifierMetrics(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_22718DE20);
}

uint64_t sub_22718DE20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MLClassifierMetrics.Contents(0);

  return __swift_getEnumTagSinglePayload(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for MLClassifierMetrics(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_22718DE7C);
}

uint64_t sub_22718DE7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MLClassifierMetrics.Contents(0);

  return __swift_storeEnumTagSinglePayload(a1, a2, a2, v4);
}

uint64_t type metadata accessor for MLClassifierMetrics(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLClassifierMetrics);
}

uint64_t type metadata completion function for MLClassifierMetrics()
{
  uint64_t result = type metadata accessor for MLClassifierMetrics.Contents(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for MLClassifierMetrics.Precomputed(char *a1, char *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *(void *)a2;
    *(void *)uint64_t v4 = *(void *)a2;
    uint64_t v4 = (char *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v8 = &a1[v7];
    uint64_t v9 = &a2[v7];
    uint64_t v10 = type metadata accessor for DataFrame();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    v11(&v4[*(int *)(a3 + 24)], &a2[*(int *)(a3 + 24)], v10);
  }
  return v4;
}

uint64_t destroy for MLClassifierMetrics.Precomputed(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for DataFrame();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v8)((void *)(v5 - 8), v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 24);

  return v8(v6, v5);
}

char *initializeWithCopy for MLClassifierMetrics.Precomputed(char *a1, char *a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for DataFrame();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  v10(&a1[*(int *)(a3 + 24)], &a2[*(int *)(a3 + 24)], v9);
  return a1;
}

char *assignWithCopy for MLClassifierMetrics.Precomputed(char *a1, char *a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for DataFrame();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24);
  v10(v7, v8, v9);
  v10(&a1[*(int *)(a3 + 24)], &a2[*(int *)(a3 + 24)], v9);
  return a1;
}

char *initializeWithTake for MLClassifierMetrics.Precomputed(char *a1, char *a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for DataFrame();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v10(&a1[*(int *)(a3 + 24)], &a2[*(int *)(a3 + 24)], v9);
  return a1;
}

char *assignWithTake for MLClassifierMetrics.Precomputed(char *a1, char *a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for DataFrame();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40);
  v10(v7, v8, v9);
  v10(&a1[*(int *)(a3 + 24)], &a2[*(int *)(a3 + 24)], v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLClassifierMetrics.Precomputed(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_22718E404);
}

uint64_t sub_22718E404(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DataFrame();
  uint64_t v7 = a1 + *(int *)(a3 + 20);

  return __swift_getEnumTagSinglePayload(v7, a2, v6);
}

uint64_t storeEnumTagSinglePayload for MLClassifierMetrics.Precomputed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_22718E470);
}

uint64_t sub_22718E470(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for DataFrame();
  uint64_t v8 = a1 + *(int *)(a4 + 20);

  return __swift_storeEnumTagSinglePayload(v8, a2, a2, v7);
}

uint64_t type metadata completion function for MLClassifierMetrics.Precomputed()
{
  uint64_t result = type metadata accessor for DataFrame();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for MLClassifierMetrics.Contents(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *(void *)a1 = *a2;
    a1 = &v13[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v14 = *a2;
      uint64_t v15 = v14;
      *(void *)a1 = v14;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *(void *)a1 = *a2;
      uint64_t v7 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v8 = *(int *)(v7 + 20);
      uint64_t v9 = &a1[v8];
      uint64_t v10 = (char *)a2 + v8;
      uint64_t v11 = type metadata accessor for DataFrame();
      uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
      v12(v9, v10, v11);
      v12(&a1[*(int *)(v7 + 24)], (char *)a2 + *(int *)(v7 + 24), v11);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v16 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v16 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(v16);
      (*(void (**)(char *, char **, uint64_t))(*(void *)(v17 - 8) + 16))(a1, a2, v17);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void destroy for MLClassifierMetrics.Contents(void **a1)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v4 = *a1;
  }
  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v5 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v6 = (char *)a1 + *(int *)(v5 + 20);
      uint64_t v7 = type metadata accessor for DataFrame();
      uint64_t v12 = *(void (**)(void **, uint64_t))(*(void *)(v7 - 8) + 8);
      ((void (*)(void *__return_ptr, char *, uint64_t))v12)((void *)(v7 - 8), v6, v7);
      uint64_t v8 = (void **)((char *)a1 + *(int *)(v5 + 24));
      uint64_t v9 = v7;
      uint64_t v10 = v12;
    }
    else
    {
      if (EnumCaseMultiPayload) {
        return;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v3 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v3 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(v3);
      uint64_t v10 = *(void (**)(void **, uint64_t))(*(void *)(v11 - 8) + 8);
      uint64_t v9 = v11;
      uint64_t v8 = a1;
    }
    v10(v8, v9);
  }
}

void **initializeWithCopy for MLClassifierMetrics.Contents(void **a1, void **a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v11 = *a2;
    id v12 = v11;
    *a1 = v11;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    uint64_t v5 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v6 = *(int *)(v5 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for DataFrame();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    v10(v7, v8, v9);
    v10((char *)a1 + *(int *)(v5 + 24), (char *)a2 + *(int *)(v5 + 24), v9);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v13 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      uint64_t v13 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(v13);
    (*(void (**)(void **, void **, uint64_t))(*(void *)(v14 - 8) + 16))(a1, a2, v14);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void **assignWithCopy for MLClassifierMetrics.Contents(void **a1, void **a2)
{
  if (a1 != a2)
  {
    outlined destroy of MLClassifierMetrics.Contents((uint64_t)a1, (void (*)(void))type metadata accessor for MLClassifierMetrics.Contents);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v11 = *a2;
      id v12 = v11;
      *a1 = v11;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      uint64_t v5 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v6 = *(int *)(v5 + 20);
      uint64_t v7 = (char *)a1 + v6;
      uint64_t v8 = (char *)a2 + v6;
      uint64_t v9 = type metadata accessor for DataFrame();
      uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
      v10(v7, v8, v9);
      v10((char *)a1 + *(int *)(v5 + 24), (char *)a2 + *(int *)(v5 + 24), v9);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v13 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v13 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(v13);
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v14 - 8) + 16))(a1, a2, v14);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *initializeWithTake for MLClassifierMetrics.Contents(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *(void *)a1 = *(void *)a2;
    uint64_t v9 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v10 = *(int *)(v9 + 20);
    uint64_t v11 = &a1[v10];
    id v12 = &a2[v10];
    uint64_t v13 = type metadata accessor for DataFrame();
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32);
    v14(v11, v12, v13);
    v14(&a1[*(int *)(v9 + 24)], &a2[*(int *)(v9 + 24)], v13);
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      return a1;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v7 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      uint64_t v7 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(v7);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

char *assignWithTake for MLClassifierMetrics.Contents(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of MLClassifierMetrics.Contents((uint64_t)a1, (void (*)(void))type metadata accessor for MLClassifierMetrics.Contents);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *(void *)a1 = *(void *)a2;
      uint64_t v9 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v10 = *(int *)(v9 + 20);
      uint64_t v11 = &a1[v10];
      id v12 = &a2[v10];
      uint64_t v13 = type metadata accessor for DataFrame();
      uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32);
      v14(v11, v12, v13);
      v14(&a1[*(int *)(v9 + 24)], &a2[*(int *)(v9 + 24)], v13);
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        return a1;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v7 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v7 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(v7);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void type metadata completion function for MLClassifierMetrics.Contents()
{
  type metadata accessor for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>();
  if (v0 <= 0x3F)
  {
    type metadata accessor for MLClassifierMetrics.Precomputed(319);
    if (v1 <= 0x3F) {
      swift_initEnumMetadataMultiPayload();
    }
  }
}

void type metadata accessor for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>()
{
  if (!lazy cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ClassificationMetrics<String>);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ClassificationMetrics<Int>);
    unint64_t v0 = type metadata accessor for Either();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AnyColumn and conformance AnyColumn()
{
  unint64_t result = lazy protocol witness table cache variable for type AnyColumn and conformance AnyColumn;
  if (!lazy protocol witness table cache variable for type AnyColumn and conformance AnyColumn)
  {
    type metadata accessor for AnyColumn();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyColumn and conformance AnyColumn);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_2_45@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  return outlined init with copy of MLClassifierMetrics.Contents(v2, (uint64_t)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0));
}

uint64_t OUTLINED_FUNCTION_7_32()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_8_28()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_9_27@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v4 = *(void *)(v2 - 88);
  return outlined init with copy of MLClassifierMetrics.Contents(v4, (uint64_t)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0));
}

uint64_t OUTLINED_FUNCTION_14_24()
{
  return type metadata accessor for AnyClassificationMetrics();
}

uint64_t OUTLINED_FUNCTION_15_24()
{
  return type metadata accessor for AnyClassificationMetrics();
}

uint64_t OUTLINED_FUNCTION_16_23()
{
  return type metadata accessor for AnyClassificationMetrics();
}

uint64_t OUTLINED_FUNCTION_17_20()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_19_22()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_20_22()
{
  return 0x7373616C63;
}

uint64_t OUTLINED_FUNCTION_21_22()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t OUTLINED_FUNCTION_22_19(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  return outlined init with take of MLClassifierMetrics.Precomputed(v4, v3, a3);
}

uint64_t OUTLINED_FUNCTION_23_12(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  return outlined init with take of MLClassifierMetrics.Precomputed(v4, v3, a3);
}

uint64_t OUTLINED_FUNCTION_24_21()
{
  return *(void *)(v0 - 96);
}

uint64_t _Model.write(to:metadata:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v80 = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v77 = v9;
  uint64_t v78 = v8;
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_41_1();
  uint64_t v10 = a2[1];
  uint64_t v75 = *a2;
  uint64_t v76 = v10;
  uint64_t v11 = a2[2];
  uint64_t v12 = a2[4];
  uint64_t v73 = a2[3];
  uint64_t v74 = v11;
  uint64_t v13 = a2[5];
  uint64_t v14 = a2[6];
  uint64_t v15 = a2[7];
  uint64_t v16 = a2[8];
  unint64_t v79 = v2;
  ModelType.description.getter(*(unsigned char *)(v2 + 32));
  uint64_t v17 = v83;
  static _ValidationUtilities.validateWriteLocation(atURL:defaultName:fileExtension:)(v80, v18, v19, 0x6C65646F6D6C6DLL, (void *)0xE700000000000000, v3);
  if (v17) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v69 = v13;
  uint64_t v70 = v12;
  uint64_t v71 = v15;
  uint64_t v72 = v3;
  uint64_t v80 = v14;
  uint64_t v83 = v16;
  swift_bridgeObjectRelease();
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 1, 1, v78);
  uint64_t v21 = CMLModel.export(to:)((uint64_t)v7);
  outlined destroy of URL?((uint64_t)v7);
  uint64_t v22 = MEMORY[0x22A676330](0);
  if (!v22) {
    goto LABEL_40;
  }
  uint64_t v23 = v22;
  type metadata accessor for CMLDictionary();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = v23;
  uint64_t v25 = v76;
  uint64_t v68 = v21;
  if (v76)
  {
    type metadata accessor for CMLFeatureValue();
    swift_bridgeObjectRetain();
    uint64_t v26 = CMLFeatureValue.__allocating_init(_:)();
    uint64_t v27 = OUTLINED_FUNCTION_7_33();
    CMLDictionary.add(key:value:)(v27, v28, v26);
    swift_release();
    swift_bridgeObjectRetain();
    uint64_t v29 = CMLFeatureValue.__allocating_init(_:)();
    CMLDictionary.add(key:value:)(0xD000000000000011, 0x80000002272D8980, v29);
    uint64_t v25 = v76;
    swift_release();
    uint64_t v30 = v70;
    if (v69)
    {
      swift_bridgeObjectRetain();
      uint64_t v31 = OUTLINED_FUNCTION_11_27();
      uint64_t v32 = v83;
      if (v30) {
        goto LABEL_42;
      }
      CMLDictionary.add(key:value:)(0x65736E6563696CLL, 0xE700000000000000, v31);
      swift_release();
    }
    else
    {
      uint64_t v32 = v83;
    }
    uint64_t v37 = v80;
    swift_bridgeObjectRetain();
    uint64_t v38 = OUTLINED_FUNCTION_11_27();
    if (v37) {
      goto LABEL_42;
    }
    CMLDictionary.add(key:value:)(0x5F6E6F6973726576, 0xEE00676E69727473, v38);
  }
  else
  {
    uint64_t v33 = NSFullUserName();
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    type metadata accessor for CMLFeatureValue();
    swift_bridgeObjectRetain();
    uint64_t v34 = CMLFeatureValue.__allocating_init(_:)();
    swift_bridgeObjectRelease();
    uint64_t v35 = OUTLINED_FUNCTION_7_33();
    CMLDictionary.add(key:value:)(v35, v36, v34);
    uint64_t v32 = v83;
  }
  swift_release();
  getOSVersion()();
  uint64_t v39 = Dictionary.init(dictionaryLiteral:)();
  if (v25 && v32)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v39 = v32;
  }
  uint64_t v76 = inited;
  swift_isUniquelyReferenced_nonNull_native();
  unint64_t v81 = v39;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
  unint64_t v40 = v81;
  swift_bridgeObjectRelease();
  uint64_t v41 = MEMORY[0x22A676330](0);
  if (!v41) {
    goto LABEL_41;
  }
  uint64_t v42 = v41;
  uint64_t v43 = swift_initStackObject();
  uint64_t v75 = v42;
  uint64_t v83 = v43;
  *(void *)(v43 + 16) = v42;
  uint64_t v44 = *(void *)(v40 + 64);
  unint64_t v79 = v40 + 64;
  uint64_t v45 = 1 << *(unsigned char *)(v40 + 32);
  uint64_t v46 = -1;
  if (v45 < 64) {
    uint64_t v46 = ~(-1 << v45);
  }
  unint64_t v47 = v46 & v44;
  uint64_t v80 = (unint64_t)(v45 + 63) >> 6;
  swift_bridgeObjectRetain();
  uint64_t v48 = 0;
  if (!v47) {
    goto LABEL_20;
  }
LABEL_19:
  unint64_t v49 = __clz(__rbit64(v47));
  v47 &= v47 - 1;
  for (unint64_t i = v49 | (v48 << 6); ; unint64_t i = __clz(__rbit64(v52)) + (v48 << 6))
  {
    long long v54 = (uint64_t *)(*(void *)(v40 + 48) + 16 * i);
    uint64_t v56 = *v54;
    uint64_t v55 = v54[1];
    type metadata accessor for CMLFeatureValue();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v57 = CMLFeatureValue.__allocating_init(_:)();
    swift_bridgeObjectRelease();
    CMLDictionary.add(key:value:)(v56, v55, v57);
    swift_bridgeObjectRelease();
    swift_release();
    if (v47) {
      goto LABEL_19;
    }
LABEL_20:
    if (__OFADD__(v48++, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v48 >= v80) {
      goto LABEL_37;
    }
    unint64_t v52 = *(void *)(v79 + 8 * v48);
    if (!v52) {
      break;
    }
LABEL_30:
    unint64_t v47 = (v52 - 1) & v52;
  }
  uint64_t v53 = v48 + 1;
  if (v48 + 1 >= v80) {
    goto LABEL_37;
  }
  unint64_t v52 = *(void *)(v79 + 8 * v53);
  if (v52) {
    goto LABEL_29;
  }
  uint64_t v53 = v48 + 2;
  if (v48 + 2 >= v80) {
    goto LABEL_37;
  }
  unint64_t v52 = *(void *)(v79 + 8 * v53);
  if (v52)
  {
LABEL_29:
    uint64_t v48 = v53;
    goto LABEL_30;
  }
  uint64_t v53 = v48 + 3;
  if (v48 + 3 < v80)
  {
    unint64_t v52 = *(void *)(v79 + 8 * v53);
    if (!v52)
    {
      while (1)
      {
        uint64_t v48 = v53 + 1;
        if (__OFADD__(v53, 1)) {
          break;
        }
        if (v48 >= v80) {
          goto LABEL_37;
        }
        unint64_t v52 = *(void *)(v79 + 8 * v48);
        ++v53;
        if (v52) {
          goto LABEL_30;
        }
      }
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      while (1)
      {
LABEL_42:
        swift_unexpectedError();
        __break(1u);
      }
    }
    goto LABEL_29;
  }
LABEL_37:
  swift_release();
  type metadata accessor for CMLFeatureValue();
  uint64_t v58 = swift_retain();
  uint64_t v59 = CMLFeatureValue.__allocating_init(_:)(v58);
  CMLDictionary.add(key:value:)(0x6665645F72657375, 0xEC00000064656E69, v59);
  swift_release();
  swift_bridgeObjectRelease();
  CMLModel.addMetadata(_:)();
  CMLModel.save(to:)();
  unint64_t v81 = 0;
  unint64_t v82 = 0xE000000000000000;
  _StringGuts.grow(_:)(39);
  swift_bridgeObjectRelease();
  unint64_t v81 = 0xD000000000000024;
  unint64_t v82 = 0x80000002272D8950;
  v60._uint64_t countAndFlagsBits = URL.path.getter();
  String.append(_:)(v60);
  swift_bridgeObjectRelease();
  v61._uint64_t countAndFlagsBits = 46;
  v61._id object = (void *)0xE100000000000000;
  String.append(_:)(v61);
  uint64_t v62 = v81;
  uint64_t v63 = (void *)v82;
  os_log_type_t v64 = static os_log_type_t.info.getter();
  v65._uint64_t countAndFlagsBits = v62;
  v65._id object = v63;
  log(_:type:)(v65, v64);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  tc_v1_release();
  uint64_t v66 = OUTLINED_FUNCTION_11_12();
  return v67(v66);
}

uint64_t _Model.write(toFile:metadata:)(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v9 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v24 = v10;
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_41_1();
  uint64_t v13 = *a3;
  uint64_t v12 = a3[1];
  uint64_t v22 = a3[3];
  uint64_t v23 = a3[2];
  uint64_t v20 = a3[5];
  uint64_t v21 = a3[4];
  uint64_t v18 = a3[7];
  uint64_t v19 = a3[6];
  uint64_t v17 = a3[8];
  ModelType.description.getter(*(unsigned char *)(v3 + 32));
  static _ValidationUtilities.validateWriteLocation(atPath:defaultName:)(a1, a2, v14, v15);
  if (v4) {
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v25[0] = v13;
  v25[1] = v12;
  v25[2] = v23;
  v25[3] = v22;
  v25[4] = v21;
  v25[5] = v20;
  v25[6] = v19;
  v25[7] = v18;
  v25[8] = v17;
  _Model.write(to:metadata:)(v5, v25);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8))(v5, v9);
}

uint64_t static _Model.makeClassifierEvaluationMetrics(_:classes:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (!tc_v1_variant_is_parameters())
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v7 = swift_allocError();
    *(void *)uint64_t v8 = 0xD000000000000026;
    *(void *)(v8 + 8) = 0x80000002272D88E0;
    *(_OWORD *)(v8 + 16) = 0u;
    *(_OWORD *)(v8 + 32) = 0u;
    *(unsigned char *)(v8 + 48) = 0;
    *a3 = v7;
LABEL_5:
    type metadata accessor for MLClassifierMetrics.Contents(0);
    return swift_storeEnumTagMultiPayload();
  }
  uint64_t v6 = specialized handling<A, B>(_:_:)(v5);
  if (v6)
  {
    type metadata accessor for CMLParameters();
    *(void *)(swift_initStackObject() + 16) = v6;
    CMLParameters.featureValue(for:)(61);
    specialized handling<A, B>(_:_:)();
    double v11 = v10;
    swift_release();
    uint64_t v12 = CMLParameters.table(for:)(62);
    type metadata accessor for _DataTable();
    swift_allocObject();
    uint64_t v13 = _DataTable.init(impl:)(v12);
    if (a2)
    {
      OUTLINED_FUNCTION_9_28();
      static _MetricUtilities.supplementConfusionMatrixWithMissingClasses(_:classes:)(v14, v15, v16);
      swift_release();
      uint64_t v13 = v25;
      char v17 = v26;
    }
    else
    {
      char v17 = 0;
    }
    uint64_t v18 = CMLParameters.table(for:)(63);
    double v19 = 1.0 - v11;
    swift_allocObject();
    uint64_t v20 = _DataTable.init(impl:)(v18);
    if (a2)
    {
      OUTLINED_FUNCTION_9_28();
      static _MetricUtilities.supplementPrecisionRecallWithMissingClasses(_:classes:)();
      swift_release();
      uint64_t v20 = v25;
      char v21 = v26;
    }
    else
    {
      char v21 = 0;
    }
    uint64_t v25 = v13;
    char v26 = v17;
    uint64_t v22 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v23 = (uint64_t)a3 + *(int *)(v22 + 20);
    outlined copy of Result<_DataTable, Error>(v13, v17);
    DataFrame.init(_:)((uint64_t)&v25, v23);
    uint64_t v25 = v20;
    char v26 = v21;
    uint64_t v24 = (uint64_t)a3 + *(int *)(v22 + 24);
    outlined copy of Result<_DataTable, Error>(v20, v21);
    DataFrame.init(_:)((uint64_t)&v25, v24);
    swift_release();
    outlined consume of Result<_DataTable, Error>(v13, v17);
    outlined consume of Result<_DataTable, Error>(v20, v21);
    *(double *)a3 = v19;
    goto LABEL_5;
  }
  __break(1u);
  OUTLINED_FUNCTION_3_45();
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t _Model.init(impl:)(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  OUTLINED_FUNCTION_4_12();
  v2[4] = v3;
  return OUTLINED_FUNCTION_4_42((uint64_t)_Model.init(impl:));
}

uint64_t _Model.init(impl:)()
{
  OUTLINED_FUNCTION_60_0();
  *(void *)(*(void *)(v0 + 24) + 40) = 0;
  *(Swift::String *)(v0 + 40) = CMLModel.name()();
  if (v1)
  {
    swift_release();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_8_29();
    unint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
    return v2();
  }
  else
  {
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 56) = v4;
    void *v4 = v0;
    v4[1] = _Model.init(impl:);
    return CMLModel.compile()();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;

  OUTLINED_FUNCTION_2();
  *(void *)(v2 + 64) = v1;
  *(void *)(v2 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = _Model.init(impl:);
  }
  else
  {
    uint64_t v3 = _Model.init(impl:);
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_60_0();
  swift_release();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_26();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

char _Model.init(impl:)()
{
  LOBYTE(v1) = ModelType.init(nameKey:)(*(Swift::String *)(v0 + 40));
  if (v1 == 28)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void **)(v0 + 64);
    uint64_t v4 = *(void *)(v0 + 24);
    *(void *)(v4 + 16) = *(void *)(v0 + 16);
    *(void *)(v4 + 24) = v3;
    *(unsigned char *)(v4 + 32) = v1;
    swift_retain();
    id v5 = v3;
    if ((AnalyticsReporter.init()() & 1) == 0) {
      AnalyticsReporter.reportTemplateUsed(model:mode:)(v2, 2u);
    }
    uint64_t v6 = *(void **)(v0 + 64);
    swift_release();

    uint64_t v7 = *(uint64_t (**)(uint64_t))(v0 + 8);
    uint64_t v8 = *(void *)(v0 + 24);
    LOBYTE(v1) = v7(v8);
  }
  return v1;
}

uint64_t _Model.init(type:)(char a1)
{
  OUTLINED_FUNCTION_4_12();
  *(void *)(v1 + 40) = 0;
  *(void *)(v1 + 24) = objc_msgSend(objc_allocWithZone(MEMORY[0x263F00D80]), sel_init);
  ModelType.nameKey.getter(a1);
  uint64_t v6 = v5;
  if ((v5 & 0x1000000000000000) != 0 || !(v5 & 0x2000000000000000 | v4 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
    if (v2)
    {
LABEL_7:
      swift_bridgeObjectRelease();
LABEL_10:

      swift_bridgeObjectRelease();
      swift_deallocPartialClassInstance();
      return v1;
    }
    goto LABEL_12;
  }
  MEMORY[0x270FA5388](v4);
  if ((v6 & 0x2000000000000000) == 0)
  {
    if ((v7 & 0x1000000000000000) != 0)
    {
      uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v9 = v7 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t v8 = _StringObject.sharedUTF8.getter();
    }
    uint64_t v10 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5s13OpaquePointerV_Tg507_sSRys4f5VGxs5e31_pIgyrzo_ACxsAD_pIegyrzr_lTRs13hI5V_TG5SRyAGGALsAD_pIgyrzo_Tf1cn_n(v8, v9, (uint64_t (*)(void))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
    if (v2) {
      goto LABEL_7;
    }
    uint64_t v15 = v10;
LABEL_12:
    swift_bridgeObjectRelease();
LABEL_15:
    uint64_t v12 = v15;
    type metadata accessor for CMLModel();
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = v12;
    *(void *)(v1 + 16) = v13;
    *(unsigned char *)(v1 + 32) = a1;
    return v1;
  }
  v14[0] = v7;
  v14[1] = v6 & 0xFFFFFFFFFFFFFFLL;
  uint64_t result = specialized handling<A, B>(_:_:)(v14);
  if (v2)
  {
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  if (result)
  {
    uint64_t v15 = result;
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

uint64_t _Model.init(type:parameters:modelOptions:)(char a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 + 48) = a3;
  *(void *)(v4 + 56) = v3;
  *(void *)(v4 + 40) = a2;
  *(unsigned char *)(v4 + 104) = a1;
  OUTLINED_FUNCTION_4_12();
  *(void *)(v4 + 64) = v5;
  return OUTLINED_FUNCTION_4_42((uint64_t)_Model.init(type:parameters:modelOptions:));
}

char _Model.init(type:parameters:modelOptions:)()
{
  uint64_t v1 = (uint64_t *)(v0 + 32);
  char v2 = *(unsigned char *)(v0 + 104);
  *(void *)(*(void *)(v0 + 56) + 40) = 0;
  ModelType.nameKey.getter(v2);
  uint64_t v5 = v3;
  uint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) != 0 || !(v4 & 0x2000000000000000 | v3 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
LABEL_8:
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  uint64_t v7 = swift_task_alloc();
  *(void *)(v7 + 16) = closure #1 in CMLModel.init(name:);
  *(void *)(v7 + 24) = 0;
  if ((v6 & 0x2000000000000000) == 0)
  {
    if ((v5 & 0x1000000000000000) != 0)
    {
      uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v9 = v5 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t v8 = _StringObject.sharedUTF8.getter();
    }
    *uint64_t v1 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5s13OpaquePointerV_Tg507_sSRys4f5VGxs5e31_pIgyrzo_ACxsAD_pIegyrzr_lTRs13hI5V_TG5SRyAGGALsAD_pIgyrzo_Tf1cn_n(v8, v9, (uint64_t (*)(void))closure #1 in _StringGuts.withCString<A>(_:)specialized partial apply);
    swift_task_dealloc();
    goto LABEL_8;
  }
  *(void *)(v0 + 16) = v5;
  *(void *)(v0 + 24) = v6 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v10 = specialized handling<A, B>(_:_:)(v0 + 16);
  if (!v10)
  {
    __break(1u);
    goto LABEL_23;
  }
  *uint64_t v1 = v10;
  swift_bridgeObjectRelease();
  swift_task_dealloc();
LABEL_11:
  uint64_t v11 = *(void *)(v0 + 48);
  uint64_t v12 = *(void *)(v0 + 32);
  type metadata accessor for CMLModel();
  uint64_t v13 = swift_allocObject();
  *(void *)(v0 + 72) = v13;
  *(void *)(v13 + 16) = v12;
  if (v11)
  {
    swift_retain();
    CMLModel.initialize(options:)();
    swift_release();
  }
  if (AnalyticsReporter.init()())
  {
    CMLModel.callFunction(name:arguments:)(5, *(void *)(v0 + 40));
    swift_release();
    goto LABEL_17;
  }
  ModelType.nameKey.getter(*(unsigned char *)(v0 + 104));
  LOBYTE(v10) = ModelType.init(nameKey:)(v14);
  if (v10 == 28)
  {
LABEL_23:
    __break(1u);
    return v10;
  }
  uint64_t v15 = v10;
  uint64_t v16 = *(void *)(v0 + 40);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  AnalyticsReporter.reportTemplateUsed(model:mode:)(v15, 2u);
  CMLModel.callFunction(name:arguments:)(5, v16);
  swift_release();
  v18._uint64_t countAndFlagsBits = 0x676E696E69617254;
  v18._id object = (void *)0xE800000000000000;
  AnalyticsReporter.reportEventDuration(model:task:startTime:)((CreateML::ModelType)v15, v18, Current);
LABEL_17:
  double v19 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v19;
  void *v19 = v0;
  v19[1] = _Model.init(type:parameters:modelOptions:);
  LOBYTE(v10) = CMLModel.compile()();
  return v10;
}

uint64_t _Model.init(type:parameters:modelOptions:)()
{
  OUTLINED_FUNCTION_60_0();
  uint64_t v2 = v1;
  OUTLINED_FUNCTION_2();
  uint64_t v4 = v3;
  *(void *)(v3 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v5 = _Model.init(type:parameters:modelOptions:);
  }
  else
  {
    *(void *)(v4 + 96) = v2;
    uint64_t v5 = _Model.init(type:parameters:modelOptions:);
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v8;

  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v4 = *(unsigned char *)(v0 + 104);
  swift_release();
  swift_release();
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  *(unsigned char *)(v3 + 32) = v4;
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v6 = *(void *)(v0 + 56);
  return v5(v6);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_60_0();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_26();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t _Model.deinit()
{
  swift_release();

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t _Model.__deallocating_deinit()
{
  _Model.deinit();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for _Model()
{
  return self;
}

void *closure #1 in _StringGuts.withCString<A>(_:)specialized partial apply@<X0>(void *a1@<X8>)
{
  return partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_4_42(uint64_t a1)
{
  return MEMORY[0x270FA2498](a1, 0, 0);
}

uint64_t OUTLINED_FUNCTION_7_33()
{
  return 0x726F68747561;
}

uint64_t OUTLINED_FUNCTION_8_29()
{
  return swift_deallocPartialClassInstance();
}

uint64_t OUTLINED_FUNCTION_10_26()
{
  return swift_deallocPartialClassInstance();
}

uint64_t OUTLINED_FUNCTION_11_27()
{
  return CMLFeatureValue.__allocating_init(_:)();
}

uint64_t specialized MLDataValueConvertible.featureValue.getter(uint64_t a1, uint64_t a2)
{
  v4[3] = MEMORY[0x263F8D310];
  v4[4] = &protocol witness table for String;
  v4[0] = a1;
  v4[1] = a2;
  __swift_project_boxed_opaque_existential_1(v4, MEMORY[0x263F8D310]);
  type metadata accessor for CMLFeatureValue();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v2 = CMLFeatureValue.__allocating_init(_:)();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v4);
  return v2;
}

uint64_t specialized _UntypedColumn.init<A>(repeating:count:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  type metadata accessor for CMLColumn();
  uint64_t v8 = specialized MLDataValueConvertible.featureValue.getter(a1, a2);
  uint64_t v9 = CMLColumn.__allocating_init(repeating:count:)(v8, a3);
  swift_bridgeObjectRelease();
  *(void *)(v4 + 16) = v9;
  return v4;
}

uint64_t (*MLStyleTransfer.TrainingSessionDelegate.trainingParameters.modify())()
{
  return MLStyleTransfer.TrainingSessionDelegate.trainingParameters.modify;
}

uint64_t MLStyleTransfer.TrainingSessionDelegate.init(sessionParameters:)(uint64_t a1)
{
  OUTLINED_FUNCTION_16_24();
  uint64_t v4 = v1 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_trainingParameters;
  uint64_t v5 = type metadata accessor for MLStyleTransfer.PersistentParameters();
  __swift_storeEnumTagSinglePayload(v4, 1, 1, v5);
  uint64_t result = MEMORY[0x22A676420](0);
  if (result)
  {
    uint64_t v7 = result;
    uint64_t v8 = OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_args;
    type metadata accessor for CMLParameters();
    uint64_t v9 = OUTLINED_FUNCTION_70();
    *(void *)(v9 + 16) = v7;
    *(void *)(v1 + v8) = v9;
    uint64_t v10 = v1 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_sessionParameters;
    outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData(a1, v1 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_sessionParameters);
    long long v13 = xmmword_2272D01D0;
    uint64_t result = specialized handling<A, B>(_:_:)(&v13);
    if (v2)
    {
      _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0(a1, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
      swift_bridgeObjectRelease();
      _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0(v10, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
      outlined destroy of URL?(v4, &demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
      swift_release();
      type metadata accessor for MLStyleTransfer.TrainingSessionDelegate();
      OUTLINED_FUNCTION_4_12();
      swift_deallocPartialClassInstance();
      return v1;
    }
    uint64_t v11 = result;
    if (result)
    {
      type metadata accessor for CMLModel();
      uint64_t v12 = OUTLINED_FUNCTION_70();
      *(void *)(v12 + 16) = v11;
      _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0(a1, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
      *(void *)(v1 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_model) = v12;
      return v1;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void MLStyleTransfer.TrainingSessionDelegate.init(trainingData:modelParameters:sessionParameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v65 = v14;
  uint64_t v66 = v11;
  uint64_t v15 = v10;
  uint64_t v68 = v16;
  uint64_t v64 = v17;
  Swift::String v18 = (int *)type metadata accessor for MLStyleTransfer.PersistentParameters();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_3_0();
  uint64_t v22 = v21 - v20;
  uint64_t v23 = (int *)type metadata accessor for MLStyleTransfer.ModelParameters(0);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v24);
  uint64_t v25 = OUTLINED_FUNCTION_14_0();
  uint64_t v26 = type metadata accessor for MLStyleTransfer.DataSource(v25);
  uint64_t v27 = OUTLINED_FUNCTION_17(v26);
  MEMORY[0x270FA5388](v27);
  OUTLINED_FUNCTION_41_1();
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
  uint64_t v29 = OUTLINED_FUNCTION_17(v28);
  MEMORY[0x270FA5388](v29);
  OUTLINED_FUNCTION_3_0();
  uint64_t v32 = v31 - v30;
  OUTLINED_FUNCTION_16_24();
  uint64_t v67 = v10 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_trainingParameters;
  __swift_storeEnumTagSinglePayload(v10 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_trainingParameters, 1, 1, (uint64_t)v18);
  uint64_t v33 = MEMORY[0x22A676420](0);
  if (v33)
  {
    uint64_t v34 = v33;
    uint64_t v35 = OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_args;
    type metadata accessor for CMLParameters();
    uint64_t v36 = OUTLINED_FUNCTION_70();
    *(void *)(v36 + 16) = v34;
    v63[1] = v35;
    *(void *)(v15 + v35) = v36;
    uint64_t v37 = v64;
    outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData(v64, v12);
    outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData(v68, (uint64_t)v13);
    outlined init with take of MLStyleTransfer.PersistentParameters(v12, v22);
    *(unsigned char *)(v22 + v18[5]) = *v13;
    *(void *)(v22 + v18[7]) = 4 * (*(void *)&v13[v23[8]] / 4);
    *(void *)(v22 + v18[8]) = *(void *)&v13[v23[9]];
    outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData((uint64_t)&v13[v23[5]], v22 + v18[6]);
    char v38 = v13[v23[10]];
    _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0((uint64_t)v13, (void (*)(void))type metadata accessor for MLStyleTransfer.ModelParameters);
    *(unsigned char *)(v22 + v18[9]) = v38;
    outlined init with take of MLStyleTransfer.PersistentParameters(v22, v32);
    uint64_t v39 = OUTLINED_FUNCTION_41_11();
    __swift_storeEnumTagSinglePayload(v39, v40, v41, (uint64_t)v18);
    uint64_t v42 = v67;
    swift_beginAccess();
    outlined assign with take of MLStyleTransfer.PersistentParameters?(v32, v67);
    swift_endAccess();
    uint64_t v43 = v15 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_sessionParameters;
    uint64_t v44 = v65;
    uint64_t v45 = outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData(v65, v15 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_sessionParameters);
    uint64_t v47 = *(void *)(v15 + 16);
    uint64_t v46 = *(void *)(v15 + 24);
    uint64_t v48 = v15;
    if ((v46 & 0x1000000000000000) != 0 || !(v46 & 0x2000000000000000 | v47 & 0x1000000000000000))
    {
      swift_bridgeObjectRetain();
      _StringGuts._slowWithCString<A>(_:)();
      if (v66)
      {
        swift_bridgeObjectRelease();
        goto LABEL_12;
      }
      uint64_t v50 = v65;
      swift_bridgeObjectRelease();
      uint64_t v59 = a10;
      goto LABEL_16;
    }
    uint64_t v49 = v43;
    uint64_t v50 = v65;
    MEMORY[0x270FA5388](v45);
    v63[-2] = closure #1 in CMLModel.init(name:);
    v63[-1] = 0;
    if ((v46 & 0x2000000000000000) == 0)
    {
      uint64_t v51 = v37;
      if ((v47 & 0x1000000000000000) != 0)
      {
        uint64_t v52 = (v46 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v53 = v47 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v52 = _StringObject.sharedUTF8.getter();
        uint64_t v53 = v62;
      }
      swift_bridgeObjectRetain();
      uint64_t v54 = v53;
      uint64_t v55 = v66;
      uint64_t v56 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5s13OpaquePointerV_Tg507_sSRys4f5VGxs5e31_pIgyrzo_ACxsAD_pIegyrzr_lTRs13hI5V_TG5SRyAGGALsAD_pIgyrzo_Tf1cn_n(v52, v54, (uint64_t (*)(void))closure #1 in _StringGuts.withCString<A>(_:)specialized partial apply);
      if (v55)
      {
        swift_bridgeObjectRelease();
        uint64_t v37 = v51;
        uint64_t v42 = v67;
LABEL_11:
        uint64_t v43 = v49;
LABEL_12:
        _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0(v44, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
        _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0(v68, (void (*)(void))type metadata accessor for MLStyleTransfer.ModelParameters);
        _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0(v37, (void (*)(void))type metadata accessor for MLStyleTransfer.DataSource);
        swift_bridgeObjectRelease();
        _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0(v43, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
        outlined destroy of URL?(v42, &demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
        swift_release();
        type metadata accessor for MLStyleTransfer.TrainingSessionDelegate();
        OUTLINED_FUNCTION_4_12();
        swift_deallocPartialClassInstance();
LABEL_17:
        OUTLINED_FUNCTION_8_1();
        return;
      }
      uint64_t v59 = v56;
      swift_bridgeObjectRelease();
      uint64_t v37 = v51;
LABEL_16:
      uint64_t v60 = v68;
      type metadata accessor for CMLModel();
      uint64_t v61 = OUTLINED_FUNCTION_70();
      *(void *)(v61 + 16) = v59;
      _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0(v50, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
      _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0(v60, (void (*)(void))type metadata accessor for MLStyleTransfer.ModelParameters);
      _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0(v37, (void (*)(void))type metadata accessor for MLStyleTransfer.DataSource);
      *(void *)(v48 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_model) = v61;
      goto LABEL_17;
    }
    v69[0] = v47;
    v69[1] = v46 & 0xFFFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain();
    uint64_t v57 = v66;
    uint64_t v58 = specialized handling<A, B>(_:_:)(v69);
    if (v57)
    {
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    uint64_t v59 = v58;
    if (v58)
    {
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MLStyleTransfer.TrainingSessionDelegate.setUp()()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v219 = v1;
  uint64_t v234 = *MEMORY[0x263EF8340];
  uint64_t v200 = type metadata accessor for _Model.Parameters();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_33_0();
  v201 = v4;
  uint64_t v5 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
  uint64_t v6 = OUTLINED_FUNCTION_17(v5);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = OUTLINED_FUNCTION_22_20(v7, v189[0]);
  uint64_t v223 = type metadata accessor for MLStyleTransfer.ModelParameters(v8);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_47_8();
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_106();
  uint64_t v216 = v14;
  uint64_t v15 = type metadata accessor for MLStyleTransfer.DataSource(0);
  uint64_t v16 = OUTLINED_FUNCTION_17(v15);
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_106();
  id v229 = v19;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v21 = OUTLINED_FUNCTION_17(v20);
  MEMORY[0x270FA5388](v21);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v22);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v23);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v24);
  OUTLINED_FUNCTION_106();
  uint64_t v225 = v25;
  uint64_t v199 = type metadata accessor for MLTrainingSessionParameters();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v26);
  OUTLINED_FUNCTION_3_0();
  uint64_t v29 = v28 - v27;
  uint64_t v30 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v231 = v31;
  MEMORY[0x270FA5388](v32);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v33);
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v34);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v35);
  OUTLINED_FUNCTION_45_3();
  uint64_t v224 = v36;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v37);
  OUTLINED_FUNCTION_45_3();
  uint64_t v221 = v38;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v39);
  OUTLINED_FUNCTION_45_3();
  uint64_t v230 = v40;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v41);
  OUTLINED_FUNCTION_45_3();
  uint64_t v228 = v42;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v43);
  OUTLINED_FUNCTION_106();
  uint64_t v227 = v44;
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
  uint64_t v46 = OUTLINED_FUNCTION_17(v45);
  MEMORY[0x270FA5388](v46);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v47);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v48);
  uint64_t v50 = (char *)v189 - v49;
  uint64_t v51 = type metadata accessor for MLStyleTransfer.PersistentParameters();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v52);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v53);
  uint64_t v55 = (char *)v189 - v54;
  id v56 = objc_msgSend(self, sel_defaultManager);
  uint64_t v57 = v0 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_53();
  uint64_t v204 = v57;
  outlined init with copy of MLStyleTransfer.PersistentParameters?(v57, (uint64_t)v50);
  v220 = (int *)v51;
  OUTLINED_FUNCTION_57_4((uint64_t)v50, 1, v51);
  if (v62)
  {
    outlined destroy of URL?((uint64_t)v50, &demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_19_0(v58, 0xD000000000000061);

LABEL_22:
    OUTLINED_FUNCTION_8_1();
    return;
  }
  id v222 = v56;
  v211 = (_UNKNOWN **)v55;
  outlined init with take of MLStyleTransfer.PersistentParameters((uint64_t)v50, (uint64_t)v55);
  uint64_t v59 = v0;
  uint64_t v60 = v0 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_sessionParameters;
  outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData(v0 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_sessionParameters, v29);
  uint64_t v61 = v225;
  outlined init with take of DataFrame?(v29, v225, &demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_57_4(v61, 1, v30);
  uint64_t v197 = (unsigned char *)v2;
  uint64_t v226 = v30;
  if (v62)
  {
    uint64_t v63 = NSTemporaryDirectory();
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v64 = v227;
    URL.init(fileURLWithPath:isDirectory:)();
    swift_bridgeObjectRelease();
    outlined destroy of URL?(v61, &demangling cache variable for type metadata for URL?);
  }
  else
  {
    uint64_t v64 = v227;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v231 + 32))(v227, v61, v30);
  }
  uint64_t v65 = v228;
  id v66 = v222;
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v67 = URL.path.getter();
  uint64_t v68 = (void *)MEMORY[0x22A674AE0](v67);
  swift_bridgeObjectRelease();
  unsigned __int8 v69 = objc_msgSend(v66, sel_fileExistsAtPath_, v68);

  if ((v69 & 1) == 0)
  {
    URL._bridgeToObjectiveC()(v70);
    uint64_t v72 = (void *)v71;
    id v232 = 0;
    unsigned int v73 = OUTLINED_FUNCTION_44_10(v71, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_);

    if (!v73)
    {
      uint64_t v111 = v64;
      id v112 = v232;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      uint64_t v113 = *(void (**)(uint64_t, uint64_t))(v231 + 8);
      uint64_t v114 = v226;
      v113(v65, v226);
      v113(v111, v114);
LABEL_20:
      uint64_t v110 = v211;
      goto LABEL_21;
    }
    id v74 = v232;
  }
  uint64_t v190 = v60;
  v189[1] = v59;
  URL.appendingPathComponent(_:)();
  uint64_t v75 = v66;
  uint64_t v76 = v230;
  URL.appendingPathExtension(_:)();
  uint64_t v77 = v231;
  uint64_t v78 = *(void (**)(void))(v231 + 8);
  uint64_t v79 = v226;
  uint64_t v225 = v231 + 8;
  v198 = v78;
  OUTLINED_FUNCTION_9();
  v80();
  uint64_t v81 = v224;
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v82 = URL.path.getter();
  uint64_t v83 = (void *)MEMORY[0x22A674AE0](v82);
  swift_bridgeObjectRelease();
  unsigned __int8 v84 = objc_msgSend(v75, sel_fileExistsAtPath_, v83);

  char v86 = (int *)v223;
  if (v84) {
    goto LABEL_13;
  }
  URL._bridgeToObjectiveC()(v85);
  BOOL v88 = (void *)v87;
  id v232 = 0;
  id v89 = v222;
  unsigned int v90 = OUTLINED_FUNCTION_44_10(v87, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_);

  if (!v90)
  {
    id v148 = v232;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v149 = v226;
    uint64_t v150 = v198;
    ((void (*)(uint64_t, uint64_t))v198)(v81, v226);
    OUTLINED_FUNCTION_17_21();
    v150();
    OUTLINED_FUNCTION_17_21();
    v150();
    ((void (*)(uint64_t, uint64_t))v150)(v227, v149);
    goto LABEL_20;
  }
  id v91 = v232;
  uint64_t v79 = v226;
  uint64_t v76 = v230;
  uint64_t v77 = v231;
LABEL_13:
  uint64_t v92 = OUTLINED_FUNCTION_54_7();
  outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData(v92, v93);
  uint64_t v94 = v220;
  uint64_t v95 = v220[6];
  uint64_t v195 = v220[5];
  char v96 = *((unsigned char *)&off_2647FE000 + v195);
  uint64_t v97 = v216;
  uint64_t v98 = (uint64_t)&v216[v86[5]];
  uint64_t v196 = (uint64_t)&off_2647FE000 + v95;
  outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData((uint64_t)&off_2647FE000 + v95, v98);
  uint64_t v99 = v94[8];
  uint64_t v194 = v94[7];
  uint64_t v100 = *(uint64_t *)((char *)&off_2647FE000 + v194);
  uint64_t v193 = v99;
  uint64_t v101 = *(uint64_t *)((char *)&off_2647FE000 + v99);
  *(void *)&v97[v86[6]] = 1;
  uint64_t v102 = v86[10];
  *uint64_t v97 = v96;
  *(void *)&v97[v86[7]] = 500;
  *(void *)&v97[v86[8]] = v100;
  *(void *)&v97[v86[9]] = v101;
  uint64_t v192 = v94[9];
  v97[v102] = *((unsigned char *)&off_2647FE000 + v192);
  _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0((uint64_t)v97, (void (*)(void))type metadata accessor for MLStyleTransfer.ModelParameters);
  uint64_t v103 = *(void (**)(void))(v77 + 16);
  uint64_t v104 = v76;
  uint64_t v105 = v218;
  ((void (*)(uint64_t, uint64_t, uint64_t))v103)(v218, v104, v79);
  __swift_storeEnumTagSinglePayload(v105, 0, 1, v79);
  uint64_t v106 = OUTLINED_FUNCTION_51_8();
  uint64_t v216 = (unsigned char *)(v77 + 16);
  uint64_t v191 = v103;
  ((void (*)(uint64_t))v103)(v106);
  __swift_storeEnumTagSinglePayload((uint64_t)v86, 0, 1, v79);
  uint64_t v107 = (uint64_t)v215;
  uint64_t v108 = v219;
  MLStyleTransfer.DataSource.preprocessDataSource(textelDensity:styleImageDestination:contentImagesDestination:)();
  if (v108)
  {

    outlined destroy of URL?((uint64_t)v86, &demangling cache variable for type metadata for URL?);
    outlined destroy of URL?(v105, &demangling cache variable for type metadata for URL?);
    _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0((uint64_t)v229, (void (*)(void))type metadata accessor for MLStyleTransfer.DataSource);
    uint64_t v109 = v198;
    OUTLINED_FUNCTION_25_10();
    v109();
    OUTLINED_FUNCTION_25_10();
    v109();
    OUTLINED_FUNCTION_25_10();
    v109();
    OUTLINED_FUNCTION_25_10();
    v109();
    uint64_t v110 = &off_2647FE000;
LABEL_21:
    _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0((uint64_t)v110, (void (*)(void))type metadata accessor for MLStyleTransfer.PersistentParameters);
    goto LABEL_22;
  }
  uint64_t v219 = 0;
  outlined destroy of URL?((uint64_t)v86, &demangling cache variable for type metadata for URL?);
  outlined destroy of URL?(v105, &demangling cache variable for type metadata for URL?);
  _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0((uint64_t)v229, (void (*)(void))type metadata accessor for MLStyleTransfer.DataSource);
  id v229 = v232;
  LODWORD(v218) = v233;
  uint64_t v115 = *(void (**)(uint64_t, unsigned char *, uint64_t))(v77 + 32);
  uint64_t v231 = v77 + 32;
  v217 = v115;
  v115(v213, (unsigned char *)v107, v79);
  uint64_t v116 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
  uint64_t v117 = v214 + *(int *)(v116 + 48);
  uint64_t v118 = v214 + *(int *)(v116 + 64);
  uint64_t v119 = v191;
  v191();
  ((void (*)(uint64_t, uint64_t, uint64_t))v119)(v117, v81, v226);
  uint64_t v120 = v212;
  outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData((uint64_t)&off_2647FE000, v212);
  uint64_t v121 = v120 + *(int *)(v116 + 48);
  uint64_t v122 = v120 + *(int *)(v116 + 64);
  uint64_t v123 = *(void *)v122;
  LOBYTE(v117) = *(unsigned char *)(v122 + 8);
  unint64_t v124 = v198;
  ((void (*)(uint64_t, uint64_t))v198)(v121, v226);
  ((void (*)(uint64_t, uint64_t))v124)(v120, v226);
  *(void *)uint64_t v118 = v123;
  *(unsigned char *)(v118 + 8) = v117;
  LOBYTE(v119) = *((unsigned char *)&off_2647FE000 + v195);
  uint64_t v125 = (int *)v223;
  uint64_t v126 = v197;
  uint64_t v127 = v196;
  v215 = &v197[*(int *)(v223 + 20)];
  outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData(v196, (uint64_t)v215);
  uint64_t v128 = *(uint64_t *)((char *)&off_2647FE000 + v194);
  uint64_t v129 = *(uint64_t *)((char *)&off_2647FE000 + v193);
  *(void *)&v126[v125[6]] = 1;
  uint64_t v130 = v125[10];
  *uint64_t v126 = (_BYTE)v119;
  *(void *)&v126[v125[7]] = 500;
  *(void *)&v126[v125[8]] = v128;
  *(void *)&v126[v125[9]] = v129;
  char v131 = *((unsigned char *)&off_2647FE000 + v192);
  v126[v130] = v131;
  uint64_t v132 = v209;
  uint64_t v133 = (uint64_t)&v209[v125[5]];
  outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData(v127, v133);
  *(void *)&v132[v125[6]] = 1;
  uint64_t v134 = v125[10];
  unsigned char *v132 = (_BYTE)v119;
  *(void *)&v132[v125[7]] = 500;
  *(void *)&v132[v125[8]] = v128;
  *(void *)&v132[v125[9]] = v129;
  v132[v134] = v131;
  uint64_t v135 = v133;
  uint64_t v136 = v226;
  uint64_t v137 = v210;
  outlined init with take of MLStyleTransfer.PersistentParameters(v135, v210);
  LODWORD(v117) = __swift_getEnumTagSinglePayload(v137, 1, v136);
  _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0(v137, (void (*)(void))type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
  if (v117 != 1)
  {
    uint64_t v138 = v221;
    OUTLINED_FUNCTION_172();
    URL.appendingPathComponent(_:)();
    OUTLINED_FUNCTION_42_13();
    URL.appendingPathExtension(_:)();
    uint64_t v139 = v198;
    ((void (*)(uint64_t, uint64_t))v198)(v138, v136);
    uint64_t v140 = (uint64_t)v211;
    LOBYTE(v138) = *((unsigned char *)v211 + v195);
    unint64_t v141 = v203;
    uint64_t v142 = (uint64_t)&v203[v125[5]];
    outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData(v196, v142);
    uint64_t v143 = *(void *)(v140 + v194);
    uint64_t v144 = *(void *)(v140 + v193);
    *(void *)&v141[v125[6]] = 1;
    uint64_t v145 = v125[10];
    *unint64_t v141 = v138;
    *(void *)&v141[v125[7]] = 500;
    *(void *)&v141[v125[8]] = v143;
    *(void *)&v141[v125[9]] = v144;
    v141[v145] = *(unsigned char *)(v140 + v192);
    uint64_t v146 = v202;
    ((void (*)(uint64_t, unsigned char *, uint64_t))v191)(v202, v132, v136);
    __swift_storeEnumTagSinglePayload(v146, 0, 1, v136);
    uint64_t v147 = v219;
    MLStyleTransfer.ModelParameters.ValidationData.preprocessValidationData(to:)();
    uint64_t v219 = v147;
    if (v147)
    {
      outlined consume of Result<_DataTable, Error>(v229, v218);

      outlined destroy of URL?(v146, &demangling cache variable for type metadata for URL?);
      OUTLINED_FUNCTION_1_30();
      v139();
      _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0(v214, (void (*)(void))type metadata accessor for MLStyleTransfer.DataSource);
      OUTLINED_FUNCTION_1_30();
      v139();
      OUTLINED_FUNCTION_1_30();
      v139();
      OUTLINED_FUNCTION_1_30();
      v139();
      OUTLINED_FUNCTION_1_30();
      v139();
      OUTLINED_FUNCTION_1_30();
      v139();
      _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0(v140, (void (*)(void))type metadata accessor for MLStyleTransfer.PersistentParameters);
      _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0(v142, (void (*)(void))type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
      _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0((uint64_t)v197, (void (*)(void))type metadata accessor for MLStyleTransfer.ModelParameters);
      goto LABEL_22;
    }
    outlined destroy of URL?(v146, &demangling cache variable for type metadata for URL?);
    _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0(v142, (void (*)(void))type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
    uint64_t v151 = (uint64_t)v215;
    uint64_t v152 = v226;
    _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0((uint64_t)v215, (void (*)(void))type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
    v217(v151, v132, v152);
    uint64_t v153 = OUTLINED_FUNCTION_41_11();
    __swift_storeEnumTagSinglePayload(v153, v154, v155, v152);
  }
  uint64_t v156 = (uint64_t)v197;
  uint64_t v157 = v214;
  uint64_t v158 = v212;
  outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData(v214, v212);
  uint64_t v159 = v156;
  uint64_t v160 = v208;
  outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData(v159, (uint64_t)v208);
  uint64_t v161 = v205;
  outlined init with take of MLStyleTransfer.PersistentParameters(v158, v205);
  uint64_t v162 = v220;
  *(unsigned char *)(v161 + v220[5]) = *v160;
  *(void *)(v161 + v162[7]) = 4 * (*(void *)&v160[v125[8]] / 4);
  *(void *)(v161 + v162[8]) = *(void *)&v160[v125[9]];
  outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData((uint64_t)&v160[v125[5]], v161 + v162[6]);
  LOBYTE(v158) = v160[v125[10]];
  _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0((uint64_t)v160, (void (*)(void))type metadata accessor for MLStyleTransfer.ModelParameters);
  *(unsigned char *)(v161 + v162[9]) = v158;
  uint64_t v163 = v161;
  uint64_t v164 = (uint64_t)v197;
  uint64_t v165 = v206;
  outlined init with take of MLStyleTransfer.PersistentParameters(v163, v206);
  uint64_t v166 = OUTLINED_FUNCTION_41_11();
  __swift_storeEnumTagSinglePayload(v166, v167, v168, (uint64_t)v162);
  uint64_t v169 = v165;
  uint64_t v170 = v207;
  outlined init with take of DataFrame?(v169, v207, &demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
  uint64_t v171 = v204;
  swift_beginAccess();
  outlined assign with take of MLStyleTransfer.PersistentParameters?(v170, v171);
  swift_endAccess();
  id v172 = v229;
  id v232 = v229;
  char v173 = v218;
  unsigned __int8 v233 = v218;
  uint64_t v174 = v213;
  uint64_t v175 = v219;
  static MLStyleTransfer.validateAndConvertParameters(_:styleImage:contentTable:)();
  if (v175)
  {

    _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0(v157, (void (*)(void))type metadata accessor for MLStyleTransfer.DataSource);
    int64_t v177 = v198;
    OUTLINED_FUNCTION_25_10();
    v177();
    OUTLINED_FUNCTION_25_10();
    v177();
    OUTLINED_FUNCTION_25_10();
    v177();
    OUTLINED_FUNCTION_25_10();
    v177();
    OUTLINED_FUNCTION_25_10();
    v177();
    _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0((uint64_t)v211, (void (*)(void))type metadata accessor for MLStyleTransfer.PersistentParameters);
    outlined consume of Result<_DataTable, Error>(v172, v173);
    uint64_t v178 = v164;
LABEL_28:
    _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0(v178, (void (*)(void))type metadata accessor for MLStyleTransfer.ModelParameters);
    goto LABEL_22;
  }
  uint64_t v179 = v176;
  uint64_t v180 = CMLParameters.featureValue(for:)(47);
  uint64_t v181 = (uint64_t)v211;
  uint64_t v182 = specialized handling<A, B>(_:_:)(*(void *)(v180 + 16));
  if (v182)
  {
    swift_release();
    type metadata accessor for CMLDictionary();
    *(void *)(swift_initStackObject() + 16) = v182;
    uint64_t v183 = (uint64_t)v201;
    void *v201 = *(void *)(v190 + *(int *)(v199 + 20));
    swift_storeEnumTagMultiPayload();
    CMLDictionary.add(_:)(v183);
    _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0(v183, (void (*)(void))type metadata accessor for _Model.Parameters);
    type metadata accessor for CMLFeatureValue();
    uint64_t v184 = swift_retain();
    uint64_t v185 = CMLFeatureValue.__allocating_init(_:)(v184);
    char v186 = v218;
    CMLParameters.add(key:featureValue:)(47, v185);
    swift_release();
    swift_retain();
    CMLModel.callFunction(name:arguments:)(0, v179);
    swift_release();
    swift_release();
    swift_release();
    outlined consume of Result<_DataTable, Error>(v229, v186);
    swift_release();

    _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0(v157, (void (*)(void))type metadata accessor for MLStyleTransfer.DataSource);
    uint64_t v187 = v226;
    v188 = v198;
    ((void (*)(uint64_t, uint64_t))v198)(v174, v226);
    OUTLINED_FUNCTION_17_21();
    v188();
    OUTLINED_FUNCTION_17_21();
    v188();
    OUTLINED_FUNCTION_17_21();
    v188();
    ((void (*)(uint64_t, uint64_t))v188)(v227, v187);
    _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0(v181, (void (*)(void))type metadata accessor for MLStyleTransfer.PersistentParameters);
    uint64_t v178 = (uint64_t)v197;
    goto LABEL_28;
  }
  __break(1u);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MLStyleTransfer.TrainingSessionDelegate.resume(from:)(Swift::OpaquePointer from)
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v137 = v2;
  uint64_t v4 = v1;
  uint64_t v144 = v5;
  uint64_t v6 = type metadata accessor for MLStyleTransfer.DataSource(0);
  uint64_t v7 = OUTLINED_FUNCTION_17(v6);
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_28_15(v8, (uint64_t)v128);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  uint64_t v10 = OUTLINED_FUNCTION_17(v9);
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_29_18(v11, (uint64_t)v128);
  uint64_t v142 = type metadata accessor for MLCheckpoint();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_33_0();
  uint64_t v150 = v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v15 = OUTLINED_FUNCTION_17(v14);
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_33_0();
  uint64_t v135 = v16;
  uint64_t v17 = type metadata accessor for MLTrainingSessionParameters();
  uint64_t v18 = OUTLINED_FUNCTION_17(v17);
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_21_23(v19, (uint64_t)v128);
  uint64_t v145 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v140 = v20;
  MEMORY[0x270FA5388](v21);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v22);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v23);
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v24);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v25);
  OUTLINED_FUNCTION_45_3();
  uint64_t v141 = v26;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v27);
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v28);
  OUTLINED_FUNCTION_16_2();
  uint64_t v30 = MEMORY[0x270FA5388](v29);
  uint64_t v32 = (char *)&v128 - v31;
  MEMORY[0x270FA5388](v30);
  uint64_t v34 = (char *)&v128 - v33;
  uint64_t v35 = (int *)type metadata accessor for MLStyleTransfer.ModelParameters(0);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v36);
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v37);
  uint64_t v39 = (char *)&v128 - v38;
  uint64_t v40 = (int *)type metadata accessor for MLStyleTransfer.PersistentParameters();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v41);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v42);
  uint64_t v44 = (char *)&v128 - v43;
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
  uint64_t v46 = OUTLINED_FUNCTION_17(v45);
  MEMORY[0x270FA5388](v46);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v47);
  uint64_t v48 = OUTLINED_FUNCTION_23_13();
  uint64_t v49 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(v48);
  uint64_t v50 = OUTLINED_FUNCTION_17(v49);
  MEMORY[0x270FA5388](v50);
  OUTLINED_FUNCTION_3_0();
  uint64_t v53 = v52 - v51;
  uint64_t v138 = v4;
  uint64_t v54 = v4 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_53();
  uint64_t v139 = v54;
  uint64_t v55 = OUTLINED_FUNCTION_55_8();
  outlined init with copy of MLStyleTransfer.PersistentParameters?(v55, v56);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v3, 1, (uint64_t)v40);
  uint64_t v136 = v40;
  if (EnumTagSinglePayload)
  {
    outlined destroy of URL?(v3, &demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
    uint64_t v58 = v145;
    uint64_t v59 = v150;
  }
  else
  {
    uint64_t v128 = v32;
    outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData(v3, (uint64_t)v44);
    outlined destroy of URL?(v3, &demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
    char v60 = v44[v40[5]];
    uint64_t v61 = (uint64_t)&v39[v35[5]];
    outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData((uint64_t)&v44[v40[6]], v61);
    uint64_t v62 = *(void *)&v44[v40[7]];
    uint64_t v63 = *(void *)&v44[v40[8]];
    *(void *)&v39[v35[6]] = 1;
    uint64_t v64 = v35[10];
    char *v39 = v60;
    uint64_t v59 = v150;
    *(void *)&v39[v35[7]] = 500;
    *(void *)&v39[v35[8]] = v62;
    *(void *)&v39[v35[9]] = v63;
    v39[v64] = v44[v40[9]];
    _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0((uint64_t)v44, (void (*)(void))type metadata accessor for MLStyleTransfer.PersistentParameters);
    outlined init with take of MLStyleTransfer.PersistentParameters(v61, v53);
    uint64_t v58 = v145;
    int v65 = __swift_getEnumTagSinglePayload(v53, 1, v145);
    _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0(v53, (void (*)(void))type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
    if (v65 != 1)
    {
      uint64_t v66 = (uint64_t)v134;
      outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData(v138 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_sessionParameters, (uint64_t)v134);
      uint64_t v67 = v135;
      outlined init with take of DataFrame?(v66, v135, &demangling cache variable for type metadata for URL?);
      OUTLINED_FUNCTION_57_4(v67, 1, v58);
      if (v68)
      {
        outlined destroy of URL?(v67, &demangling cache variable for type metadata for URL?);
      }
      else
      {
        uint64_t v134 = v35;
        uint64_t v69 = v140;
        (*(void (**)(char *, uint64_t, uint64_t))(v140 + 32))(v34, v67, v58);
        uint64_t v70 = v132;
        URL.appendingPathComponent(_:isDirectory:)();
        OUTLINED_FUNCTION_172();
        URL.appendingPathComponent(_:)();
        uint64_t v71 = *(void (**)(void))(v69 + 8);
        OUTLINED_FUNCTION_11_1();
        v71();
        OUTLINED_FUNCTION_42_13();
        URL.appendingPathExtension(_:)();
        OUTLINED_FUNCTION_11_1();
        v71();
        uint64_t v72 = MLStyleTransfer.TrainingSessionDelegate.trainingParameters.modify();
        uint64_t v74 = v73;
        uint64_t v75 = (uint64_t)v136;
        if (!__swift_getEnumTagSinglePayload(v73, 1, (uint64_t)v136))
        {
          uint64_t v77 = v74 + *(int *)(v75 + 24);
          _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0(v77, (void (*)(void))type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v69 + 16))(v77, v70, v58);
          __swift_storeEnumTagSinglePayload(v77, 0, 1, v58);
        }
        ((void (*)(id *, void))v72)(&v146, 0);
        OUTLINED_FUNCTION_11_1();
        v71();
        OUTLINED_FUNCTION_11_1();
        v71();
        uint64_t v59 = v150;
        uint64_t v35 = v134;
      }
    }
  }
  uint64_t v78 = (uint64_t)v143;
  specialized BidirectionalCollection.last.getter(v144, (uint64_t)v143);
  uint64_t v79 = v142;
  OUTLINED_FUNCTION_57_4(v78, 1, v142);
  if (!v68)
  {
    uint64_t v81 = v139;
    outlined init with take of MLStyleTransfer.PersistentParameters(v78, v59);
    uint64_t v82 = v140;
    switch(*(unsigned char *)(v59 + *(int *)(v79 + 20)))
    {
      case 2:
        swift_bridgeObjectRelease();
        goto LABEL_17;
      case 4:
        OUTLINED_FUNCTION_55_0();
        break;
      default:
        break;
    }
    char v83 = OUTLINED_FUNCTION_37_5();
    swift_bridgeObjectRelease();
    if (v83)
    {
LABEL_17:
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v82 + 16))(v141, v59, v58);
      uint64_t v84 = URL.absoluteString.getter();
      uint64_t v86 = v85;
      if ((v85 & 0x1000000000000000) != 0 || !(v85 & 0x2000000000000000 | v84 & 0x1000000000000000))
      {
        uint64_t v127 = v137;
        _StringGuts._slowWithCString<A>(_:)();
        if (!v127)
        {
          uint64_t v134 = v35;
          goto LABEL_24;
        }
      }
      else
      {
        MEMORY[0x270FA5388](v84);
        *(&v128 - 2) = (char *)closure #1 in CMLModel.init(url:);
        *(&v128 - 1) = 0;
        if ((v86 & 0x2000000000000000) != 0)
        {
          id v146 = (id)v87;
          uint64_t v147 = v86 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v94 = v137;
          uint64_t v95 = specialized handling<A, B>(_:_:)(&v146);
          if (!v94)
          {
            if (!v95)
            {
              __break(1u);
              JUMPOUT(0x227193C68);
            }
            uint64_t v134 = v35;
            uint64_t v148 = v95;
            swift_bridgeObjectRelease();
            goto LABEL_31;
          }
        }
        else
        {
          if ((v87 & 0x1000000000000000) != 0)
          {
            uint64_t v88 = (v86 & 0xFFFFFFFFFFFFFFFLL) + 32;
            uint64_t v89 = v87 & 0xFFFFFFFFFFFFLL;
          }
          else
          {
            uint64_t v88 = _StringObject.sharedUTF8.getter();
          }
          uint64_t v90 = v137;
          uint64_t v91 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5s13OpaquePointerV_Tg507_sSRys4f5VGxs5e31_pIgyrzo_ACxsAD_pIegyrzr_lTRs13hI5V_TG5SRyAGGALsAD_pIgyrzo_Tf1cn_n(v88, v89, (uint64_t (*)(void))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
          if (!v90)
          {
            uint64_t v134 = v35;
            uint64_t v148 = v91;
LABEL_24:
            swift_bridgeObjectRelease();
LABEL_31:
            uint64_t v97 = (uint64_t)v136;
            uint64_t v98 = v148;
            uint64_t v99 = *(void (**)(void))(v82 + 8);
            ((void (*)(uint64_t, uint64_t))v99)(v141, v58);
            type metadata accessor for CMLModel();
            uint64_t v100 = OUTLINED_FUNCTION_70();
            *(void *)(v100 + 16) = v98;
            uint64_t v101 = OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_model;
            *(void *)(v138 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_model) = v100;
            swift_release();
            uint64_t v102 = v133;
            outlined init with copy of MLStyleTransfer.PersistentParameters?(v81, v133);
            OUTLINED_FUNCTION_57_4(v102, 1, v97);
            if (v68)
            {
              outlined destroy of URL?(v102, &demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
              lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
              OUTLINED_FUNCTION_85();
              OUTLINED_FUNCTION_37_11();
              OUTLINED_FUNCTION_19_0(v104, v103 + 81);
            }
            else
            {
              uint64_t v142 = v101;
              uint64_t v143 = v99;
              uint64_t v144 = v82 + 8;
              uint64_t v105 = v131;
              outlined init with take of MLStyleTransfer.PersistentParameters(v102, v131);
              outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData(v105, v130);
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
              uint64_t v106 = *(void (**)(void))(v82 + 32);
              OUTLINED_FUNCTION_30_17();
              v106();
              OUTLINED_FUNCTION_54_7();
              OUTLINED_FUNCTION_30_17();
              v106();
              static MLStyleTransfer.generateTrainingTable(directoryURL:)();
              uint64_t v107 = v143;
              OUTLINED_FUNCTION_9();
              v107();
              id v108 = v146;
              int v109 = v147;
              OUTLINED_FUNCTION_30_17();
              v106();
              OUTLINED_FUNCTION_30_17();
              v106();
              uint64_t v148 = (uint64_t)v108;
              char v149 = v109;
              outlined copy of Result<_DataTable, Error>(v108, v109);
              OUTLINED_FUNCTION_25_21((uint64_t)&v146);
              int v110 = v109;
              uint64_t v111 = v108;
              outlined consume of Result<_DataTable, Error>(v108, v110);
              id v112 = v146;
              if (v147)
              {
                outlined consume of Result<_DataTable, Error>(v146, 1);
                lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
                OUTLINED_FUNCTION_85();
                OUTLINED_FUNCTION_37_11();
                OUTLINED_FUNCTION_19_0(v114, v113 | 0xC);
                outlined consume of Result<_DataTable, Error>(v108, v110);
                OUTLINED_FUNCTION_55_8();
                OUTLINED_FUNCTION_9();
                v107();
                uint64_t v115 = v131;
              }
              else
              {
                LODWORD(v141) = v110;
                uint64_t v140 = *((void *)v146 + 2);
                swift_retain();
                outlined consume of Result<_DataTable, Error>(v112, 0);
                uint64_t v116 = URL.path.getter();
                uint64_t v118 = v117;
                type metadata accessor for _UntypedColumn();
                swift_initStackObject();
                uint64_t v139 = specialized _UntypedColumn.init<A>(repeating:count:)(v116, v118, 1);
                uint64_t v119 = v136;
                uint64_t v120 = v131;
                LOBYTE(v118) = *(unsigned char *)(v131 + v136[5]);
                uint64_t v121 = v134;
                uint64_t v122 = v129;
                outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData(v131 + v136[6], (uint64_t)&v129[v134[5]]);
                uint64_t v123 = *(void *)(v120 + v119[7]);
                uint64_t v124 = *(void *)(v120 + v119[8]);
                *(void *)&v122[v121[6]] = 1;
                uint64_t v125 = v121[10];
                *uint64_t v122 = v118;
                *(void *)&v122[v121[7]] = 500;
                *(void *)&v122[v121[8]] = v123;
                *(void *)&v122[v121[9]] = v124;
                v122[v125] = *(unsigned char *)(v120 + v119[9]);
                swift_retain();
                swift_retain();
                _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0((uint64_t)v122, (void (*)(void))type metadata accessor for MLStyleTransfer.ModelParameters);
                CMLModel.resume(style:content:device:)();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                outlined consume of Result<_DataTable, Error>(v111, v141);
                OUTLINED_FUNCTION_9();
                v126();
                uint64_t v115 = v120;
              }
              _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0(v115, (void (*)(void))type metadata accessor for MLStyleTransfer.PersistentParameters);
            }
            uint64_t v96 = v150;
            goto LABEL_39;
          }
        }
      }
      (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v141, v58);
      swift_bridgeObjectRelease();
    }
    else
    {
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_85();
      OUTLINED_FUNCTION_37_11();
      OUTLINED_FUNCTION_19_0(v93, v92 + 24);
    }
    uint64_t v96 = v59;
LABEL_39:
    _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0(v96, (void (*)(void))type metadata accessor for MLCheckpoint);
    goto LABEL_40;
  }
  outlined destroy of URL?(v78, &demangling cache variable for type metadata for MLCheckpoint?);
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  OUTLINED_FUNCTION_85();
  OUTLINED_FUNCTION_19_0(v80, 0xD00000000000001DLL);
LABEL_40:
  OUTLINED_FUNCTION_8_1();
}

void CMLModel.resume(style:content:device:)()
{
  OUTLINED_FUNCTION_9_0();
  char v4 = v3;
  uint64_t v6 = v5;
  OUTLINED_FUNCTION_36_2();
  type metadata accessor for _Model.Parameters();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v7);
  uint64_t v8 = OUTLINED_FUNCTION_14_0();
  uint64_t v9 = MEMORY[0x22A676420](v8);
  if (v9)
  {
    uint64_t v10 = v9;
    type metadata accessor for CMLParameters();
    uint64_t inited = swift_initStackObject();
    *(void *)(inited + 16) = v10;
    CMLParameters.add(key:column:)(71, v0);
    if (v1)
    {
      swift_release();
LABEL_10:
      OUTLINED_FUNCTION_8_1();
      return;
    }
    CMLParameters.add(key:column:)(72, v6);
    if (MEMORY[0x22A676330](0))
    {
      OUTLINED_FUNCTION_36_2();
      type metadata accessor for CMLDictionary();
      *(void *)(swift_initStackObject() + 16) = inited;
      uint64_t v12 = 7696483;
      if ((v4 & 1) == 0) {
        uint64_t v12 = 1869903201;
      }
      unint64_t v13 = 0xE300000000000000;
      if ((v4 & 1) == 0) {
        unint64_t v13 = 0xE400000000000000;
      }
      *uint64_t v2 = v12;
      v2[1] = v13;
      swift_storeEnumTagMultiPayload();
      CMLDictionary.add(_:)((uint64_t)v2);
      _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0((uint64_t)v2, (void (*)(void))type metadata accessor for _Model.Parameters);
      type metadata accessor for CMLFeatureValue();
      uint64_t v14 = swift_retain();
      uint64_t v15 = CMLFeatureValue.__allocating_init(_:)(v14);
      CMLParameters.add(key:featureValue:)(47, v15);
      swift_release();
      CMLModel.callFunction(name:arguments:)(3, inited);
      swift_release();
      swift_setDeallocating();
      tc_v1_release();
      swift_setDeallocating();
      tc_v1_release();
      goto LABEL_10;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

Swift::Int_optional __swiftcall MLStyleTransfer.TrainingSessionDelegate.itemCount(phase:)(CreateML::MLPhase phase)
{
  uint64_t v2 = *(unsigned __int8 *)phase;
  Swift::Bool v3 = 0;
  Swift::Int v4 = 0;
  switch(v2)
  {
    case 1:
      break;
    case 2:
      uint64_t v5 = v1 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_sessionParameters;
      uint64_t v6 = type metadata accessor for MLTrainingSessionParameters();
      Swift::Bool v3 = 0;
      Swift::Int v4 = *(void *)(v5 + *(int *)(v6 + 28));
      break;
    default:
      Swift::Int v4 = 0;
      Swift::Bool v3 = 1;
      break;
  }
  result.value = v4;
  result.is_nil = v3;
  return result;
}

void MLStyleTransfer.TrainingSessionDelegate.saveImage(from:to:)()
{
  OUTLINED_FUNCTION_36_2();
  type metadata accessor for UTType();
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_24_4();
  uint64_t v2 = CMLMultiArray.data()();
  if (!v0)
  {
    Swift::Bool v3 = (double *)v2;
    uint64_t v28 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 786432, 0);
    double v4 = *v3;
    if ((~*(void *)v3 & 0x7FF0000000000000) != 0)
    {
      uint64_t v5 = v28;
      uint64_t v6 = 1;
      while (v4 > -1.0)
      {
        if (v4 >= 256.0) {
          goto LABEL_21;
        }
        uint64_t v29 = v5;
        unint64_t v8 = *(void *)(v5 + 16);
        unint64_t v7 = *(void *)(v5 + 24);
        if (v8 >= v7 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
          uint64_t v5 = v29;
        }
        *(void *)(v5 + 16) = v8 + 1;
        *(unsigned char *)(v5 + v8 + 32) = (int)v4;
        if (v6 == 786432)
        {
          uint64_t v9 = specialized Data.init<A>(_:)(v5);
          unint64_t v11 = v10;
          CFDataRef isa = Data._bridgeToObjectiveC()().super.isa;
          unint64_t v13 = CGDataProviderCreateWithCFData(isa);

          if (!v13) {
            goto LABEL_16;
          }
          uint64_t v14 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x263F002D8]);
          if (!v14) {
            goto LABEL_22;
          }
          uint64_t v15 = v14;
          CGImageRef v16 = CGImageCreate(0x200uLL, 0x200uLL, 8uLL, 0x18uLL, 0x600uLL, v14, 0, v13, 0, 0, kCGRenderingIntentDefault);

          if (v16)
          {
            uint64_t v17 = v16;
            URL._bridgeToObjectiveC()(v18);
            CFURLRef v20 = v19;
            static UTType.png.getter();
            uint64_t v21 = UTType.identifier.getter();
            uint64_t v23 = v22;
            OUTLINED_FUNCTION_25_0();
            v24();
            uint64_t v25 = (__CFString *)MEMORY[0x22A674AE0](v21, v23);
            swift_bridgeObjectRelease();
            uint64_t v26 = CGImageDestinationCreateWithURL(v20, v25, 1uLL, 0);

            if (!v26) {
              goto LABEL_23;
            }
            CGImageDestinationAddImage(v26, v17, 0);
            CGImageDestinationFinalize(v26);
          }
          else
          {
LABEL_16:
            lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
            OUTLINED_FUNCTION_85();
            OUTLINED_FUNCTION_19_0(v27, 0xD000000000000029);
          }
          outlined consume of Data._Representation(v9, v11);
          return;
        }
        double v4 = v3[v6++];
        if ((~*(void *)&v4 & 0x7FF0000000000000) == 0) {
          goto LABEL_19;
        }
      }
    }
    else
    {
LABEL_19:
      __break(1u);
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
  }
}

uint64_t specialized Data.init<A>(_:)(uint64_t a1)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  unint64_t v10 = lazy protocol witness table accessor for type [UInt8] and conformance <A> [A]();
  v8[0] = a1;
  uint64_t v2 = __swift_project_boxed_opaque_existential_1(v8, v9);
  uint64_t v3 = *v2 + 32;
  uint64_t v4 = v3 + *(void *)(*v2 + 16);
  swift_bridgeObjectRetain();
  closure #1 in Data.init<A>(_:)(v3, v4, &v7);
  swift_bridgeObjectRelease();
  uint64_t v5 = v7;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v8);
  return v5;
}

Swift::tuple_Int_metrics_OpaquePointer_finished_Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MLStyleTransfer.TrainingSessionDelegate.train(from:)(Swift::Int from)
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = v2;
  OUTLINED_FUNCTION_36_2();
  uint64_t v5 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_0();
  uint64_t v109 = v6;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_28_15(v8, v102);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v10 = OUTLINED_FUNCTION_17(v9);
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_33_0();
  uint64_t v108 = v11;
  uint64_t v12 = type metadata accessor for MLTrainingSessionParameters();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_22_20(v14, v102);
  uint64_t v15 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v116 = v16;
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_16_2();
  uint64_t v19 = MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v102 - v20;
  uint64_t v22 = MEMORY[0x270FA5388](v19);
  uint64_t inited = (char *)&v102 - v23;
  MEMORY[0x270FA5388](v22);
  uint64_t v25 = OUTLINED_FUNCTION_23_13();
  uint64_t v115 = type metadata accessor for MLStyleTransfer.ModelParameters(v25);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v26);
  OUTLINED_FUNCTION_21_23(v27, v102);
  uint64_t v123 = (int *)type metadata accessor for MLStyleTransfer.PersistentParameters();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v28);
  OUTLINED_FUNCTION_33_0();
  uint64_t v112 = v29;
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
  uint64_t v31 = OUTLINED_FUNCTION_17(v30);
  MEMORY[0x270FA5388](v31);
  uint64_t v33 = OUTLINED_FUNCTION_29_18(v32, v102);
  uint64_t v34 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(v33);
  uint64_t v35 = OUTLINED_FUNCTION_17(v34);
  MEMORY[0x270FA5388](v35);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v36);
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v37);
  OUTLINED_FUNCTION_106();
  uint64_t v118 = v39;
  uint64_t v40 = *(void *)(v1
                  + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_sessionParameters
                  + *(int *)(v12 + 20));
  if (__OFADD__(v1, v40))
  {
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v41 = *(int *)(v12 + 28);
  uint64_t v106 = v1 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_sessionParameters;
  uint64_t v42 = *(void *)(v1 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_sessionParameters + v41);
  if (__OFSUB__(v42, v1))
  {
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  uint64_t v105 = v5;
  uint64_t v121 = v1 + v40;
  if (v40 >= v42 - v1) {
    uint64_t v43 = v42 - v1;
  }
  else {
    uint64_t v43 = v40;
  }
  if (v43 < 0) {
    goto LABEL_32;
  }
  uint64_t v119 = v42;
  uint64_t v103 = v21;
  uint64_t v104 = inited;
  uint64_t v110 = v3;
  uint64_t v117 = v15;
  uint64_t v120 = v43;
  if (v43)
  {
    uint64_t v44 = *(void *)(v1 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_args);
    do
    {
      swift_retain();
      CMLModel.callFunction(name:arguments:)(1, v44);
      if (v2) {
        goto LABEL_12;
      }
      swift_release();
      swift_release();
    }
    while (--v43);
  }
  uint64_t v45 = OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_model;
  uint64_t v46 = *(void *)(v1 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_args);
  swift_retain();
  CMLModel.callFunction(name:arguments:)(2, v46);
  if (!v4)
  {
    swift_release();
    swift_release();
    lazy protocol witness table accessor for type MLProgress.Metric and conformance MLProgress.Metric();
    Dictionary.init(dictionaryLiteral:)();
    uint64_t v47 = v1 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_trainingParameters;
    OUTLINED_FUNCTION_53();
    uint64_t v48 = v47;
    uint64_t v49 = v122;
    outlined init with copy of MLStyleTransfer.PersistentParameters?(v48, (uint64_t)v122);
    uint64_t v50 = v123;
    if (__swift_getEnumTagSinglePayload((uint64_t)v49, 1, (uint64_t)v123))
    {
      outlined destroy of URL?((uint64_t)v49, &demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
      goto LABEL_18;
    }
    uint64_t v51 = v112;
    outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData((uint64_t)v49, v112);
    outlined destroy of URL?((uint64_t)v49, &demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
    char v52 = *(unsigned char *)(v51 + v50[5]);
    uint64_t v53 = v51 + v50[6];
    uint64_t v54 = (int *)v115;
    uint64_t v55 = v113;
    uint64_t v56 = (uint64_t)&v113[*(int *)(v115 + 20)];
    uint64_t v122 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData;
    outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData(v53, v56);
    uint64_t v57 = *(void *)(v51 + v50[7]);
    uint64_t v58 = *(void *)(v51 + v50[8]);
    *(void *)&v55[v54[6]] = 1;
    uint64_t v59 = v54[10];
    *uint64_t v55 = v52;
    *(void *)&v55[v54[7]] = 500;
    *(void *)&v55[v54[8]] = v57;
    *(void *)&v55[v54[9]] = v58;
    v55[v59] = *(unsigned char *)(v51 + v50[9]);
    _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0(v51, (void (*)(void))type metadata accessor for MLStyleTransfer.PersistentParameters);
    uint64_t v60 = v56;
    uint64_t v61 = v111;
    outlined init with take of MLStyleTransfer.PersistentParameters(v60, v111);
    uint64_t v62 = v118;
    outlined init with take of MLStyleTransfer.PersistentParameters(v61, v118);
    uint64_t v63 = v114;
    outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData(v62, v114);
    uint64_t v64 = v117;
    OUTLINED_FUNCTION_57_4(v63, 1, v117);
    if (v65)
    {
      _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0(v62, (void (*)(void))type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
      _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0(v63, (void (*)(void))type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
      goto LABEL_18;
    }
    uint64_t v72 = (uint64_t (*)(uint64_t))(v116 + 32);
    uint64_t v73 = v110;
    uint64_t v123 = *(int **)(v116 + 32);
    ((void (*)(uint64_t, uint64_t, uint64_t))v123)(v110, v63, v64);
    swift_retain();
    uint64_t v74 = CMLModel.predict(validationURL:)();
    uint64_t v75 = v116;
    uint64_t v122 = v72;
    uint64_t v115 = v45;
    swift_release();
    Swift::Int v76 = specialized handling<A, B>(_:_:)(*(void *)(v74 + 16));
    uint64_t v12 = v74;
    Swift::Int v79 = v76;
    if (!v76) {
      goto LABEL_50;
    }
    type metadata accessor for CMLColumn();
    uint64_t inited = (char *)swift_initStackObject();
    *((void *)inited + 2) = v79;
    if (CMLColumn.size.getter() != 1)
    {
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_85();
      OUTLINED_FUNCTION_19_0(v81, 0xD00000000000001CLL);
      swift_setDeallocating();
      tc_v1_release();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v73, v117);
      goto LABEL_27;
    }
    CMLColumn.value(at:)(0);
    uint64_t v15 = v117;
    Swift::Int v76 = specialized handling<A, B>(_:_:)(*(void *)(v80 + 16));
    uint64_t v4 = 0;
    Swift::Int v82 = v76;
    if (!v76) {
      goto LABEL_51;
    }
    swift_release();
    type metadata accessor for CMLMultiArray();
    uint64_t v1 = swift_initStackObject();
    *(void *)(v1 + 16) = v82;
    uint64_t v38 = CMLMultiArray.shape()();
LABEL_33:
    uint64_t v112 = v1;
    uint64_t v114 = v12;
    char v83 = specialized _copyCollectionToContiguousArray<A>(_:)(v38, 3);
    uint64_t v84 = v83[2];
    uint64_t v113 = inited;
    if (v84)
    {
      v124[0] = MEMORY[0x263F8EE78];
      uint64_t v85 = v84;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v84, 0);
      uint64_t v86 = v85;
      uint64_t v87 = 0;
      uint64_t v88 = v124[0];
      while (1)
      {
        uint64_t v89 = v83[v87 + 4];
        if (v89 < 0) {
          break;
        }
        v124[0] = v88;
        unint64_t v91 = *(void *)(v88 + 16);
        unint64_t v90 = *(void *)(v88 + 24);
        if (v91 >= v90 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v90 > 1, v91 + 1, 1);
          uint64_t v86 = v85;
          uint64_t v88 = v124[0];
        }
        ++v87;
        *(void *)(v88 + 16) = v91 + 1;
        *(void *)(v88 + 8 * v91 + 32) = v89;
        if (v86 == v87)
        {
          swift_release();
          uint64_t v15 = v117;
          goto LABEL_41;
        }
      }
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
    swift_release();
    uint64_t v88 = MEMORY[0x263F8EE78];
LABEL_41:
    char v92 = specialized Sequence<>.elementsEqual<A>(_:)((uint64_t)&outlined read-only object #0 of MLStyleTransfer.TrainingSessionDelegate.train(from:), v88);
    swift_bridgeObjectRelease();
    if (v92)
    {
      uint64_t v93 = v107;
      outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData(v106, v107);
      uint64_t v94 = v108;
      outlined init with take of DataFrame?(v93, v108, &demangling cache variable for type metadata for URL?);
      OUTLINED_FUNCTION_57_4(v94, 1, v15);
      if (v65)
      {
        uint64_t v95 = NSTemporaryDirectory();
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        OUTLINED_FUNCTION_55_8();
        URL.init(fileURLWithPath:isDirectory:)();
        swift_bridgeObjectRelease();
        outlined destroy of URL?(v94, &demangling cache variable for type metadata for URL?);
      }
      else
      {
        ((void (*)(void))v123)();
      }
      UUID.init()();
      UUID.uuidString.getter();
      OUTLINED_FUNCTION_25_0();
      v98();
      URL.appendingPathComponent(_:)();
      swift_bridgeObjectRelease();
      uint64_t v99 = v103;
      URL.appendingPathExtension(_:)();
      uint64_t v100 = *(void (**)(void))(v116 + 8);
      OUTLINED_FUNCTION_11_28();
      v100();
      OUTLINED_FUNCTION_51_8();
      MLStyleTransfer.TrainingSessionDelegate.saveImage(from:to:)();
      if (v4)
      {
        swift_release();
        swift_release();
        swift_release();
        OUTLINED_FUNCTION_11_28();
        v100();
        OUTLINED_FUNCTION_11_28();
        v100();
        OUTLINED_FUNCTION_11_28();
        v100();
        _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0(v118, (void (*)(void))type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
        swift_bridgeObjectRelease();
        goto LABEL_22;
      }
      v124[3] = v15;
      boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v124);
      (*(void (**)(uint64_t *, char *, uint64_t))(v116 + 16))(boxed_opaque_existential_0, v99, v15);
      specialized Dictionary.subscript.setter((uint64_t)v124, 6);
      swift_release();
      swift_release();
      swift_release();
      OUTLINED_FUNCTION_11_28();
      v100();
      OUTLINED_FUNCTION_11_28();
      v100();
      OUTLINED_FUNCTION_11_28();
      v100();
      _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0(v118, (void (*)(void))type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
LABEL_18:
      swift_retain();
      CMLModel.contentLoss.getter();
      char v67 = v66;
      swift_release();
      if ((v67 & 1) == 0)
      {
        uint64_t v68 = OUTLINED_FUNCTION_49_5();
        specialized Dictionary.subscript.setter(v68, 1);
      }
      swift_retain();
      CMLModel.styleLoss.getter();
      char v70 = v69;
      swift_release();
      if ((v70 & 1) == 0)
      {
        uint64_t v71 = OUTLINED_FUNCTION_49_5();
        specialized Dictionary.subscript.setter(v71, 2);
      }
      goto LABEL_22;
    }
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_19_0(v96, 0xD00000000000001CLL);
    swift_setDeallocating();
    tc_v1_release();
    swift_release();
    swift_release();
    OUTLINED_FUNCTION_25_0();
    v97();
LABEL_27:
    _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0(v118, (void (*)(void))type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
    goto LABEL_22;
  }
LABEL_12:
  swift_release();
LABEL_22:
  OUTLINED_FUNCTION_8_1();
LABEL_52:
  result.metrics._rawValue = v77;
  result._0 = v76;
  result.finished = v78;
  return result;
}

uint64_t CMLModel.predict(validationURL:)()
{
  uint64_t v2 = OUTLINED_FUNCTION_36_2();
  uint64_t result = MEMORY[0x22A676420](v2);
  if (result)
  {
    uint64_t v4 = result;
    type metadata accessor for CMLParameters();
    uint64_t inited = swift_initStackObject();
    *(void *)(inited + 16) = v4;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URL>);
    uint64_t v6 = type metadata accessor for URL();
    OUTLINED_FUNCTION_0();
    uint64_t v8 = v7;
    unint64_t v9 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_2272CB370;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v8 + 16))(v10 + v9, v0, v6);
    static MLStyleTransfer.generateTrainingTable(urls:)();
    if (v1)
    {
      swift_release();
      swift_setDeallocating();
      uint64_t v11 = (id *)v10;
      specialized _ContiguousArrayStorage.__deallocating_deinit();
    }
    else
    {
      swift_setDeallocating();
      specialized _ContiguousArrayStorage.__deallocating_deinit();
      uint64_t v12 = v19;
      char v13 = v20;
      uint64_t v17 = v19;
      char v18 = v20;
      outlined copy of Result<_DataTable, Error>(v19, v20);
      uint64_t v11 = (id *)&v17;
      OUTLINED_FUNCTION_25_21((uint64_t)&v19);
      outlined consume of Result<_DataTable, Error>(v12, v13);
      uint64_t v14 = v19;
      if (v20)
      {
        outlined consume of Result<_DataTable, Error>(v19, 1);
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        OUTLINED_FUNCTION_85();
        OUTLINED_FUNCTION_19_0(v15, 0xD000000000000021);
        outlined consume of Result<_DataTable, Error>(v12, v13);
        swift_release();
      }
      else
      {
        uint64_t v16 = v19[2];
        swift_retain();
        outlined consume of Result<_DataTable, Error>(v14, 0);
        CMLParameters.add(key:column:)(4, v16);
        uint64_t v11 = (id *)CMLModel.callFunction(name:arguments:)(10, inited);
        swift_release();
        outlined consume of Result<_DataTable, Error>(v12, v13);
        swift_setDeallocating();
        tc_v1_release();
      }
    }
    return (uint64_t)v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

Swift::tuple_Int_finished_Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MLStyleTransfer.TrainingSessionDelegate.evaluate(from:)(Swift::Int from)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_args);
  swift_retain();
  CMLModel.callFunction(name:arguments:)(4, v3);
  swift_release();
  if (!v2) {
    swift_release();
  }
  Swift::Int v4 = 1;
  Swift::Bool v5 = 1;
  result._0 = v4;
  result.finished = v5;
  return result;
}

uint64_t MLStyleTransfer.TrainingSessionDelegate.saveCheckpoint(to:phase:iteration:)(uint64_t a1, unsigned char *a2)
{
  switch(*a2)
  {
    case 2:
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 4:
      OUTLINED_FUNCTION_55_0();
      break;
    default:
      break;
  }
  char v3 = OUTLINED_FUNCTION_37_5();
  swift_bridgeObjectRelease();
  if (v3)
  {
LABEL_5:
    uint64_t v4 = MEMORY[0x22A676420](0);
    if (!v4)
    {
      __break(1u);
      JUMPOUT(0x227195458);
    }
    uint64_t v5 = v4;
    type metadata accessor for CMLParameters();
    uint64_t inited = swift_initStackObject();
    *(void *)(inited + 16) = v5;
    type metadata accessor for CMLFeatureValue();
    URL.path.getter();
    uint64_t v7 = CMLFeatureValue.__allocating_init(_:)();
    if (v2)
    {
      swift_release();
    }
    else
    {
      CMLParameters.add(key:featureValue:)(7, v7);
      swift_release();
      swift_retain();
      CMLModel.callFunction(name:arguments:)(6, inited);
      swift_release();
      swift_setDeallocating();
      tc_v1_release();
      swift_release();
      char v8 = 1;
    }
  }
  else
  {
    char v8 = 0;
  }
  return v8 & 1;
}

uint64_t MLStyleTransfer.TrainingSessionDelegate.save(to:)(uint64_t a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
  uint64_t v5 = OUTLINED_FUNCTION_17(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_41_1();
  uint64_t v6 = type metadata accessor for MLStyleTransfer.PersistentParameters();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_3_0();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = v1 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_53();
  outlined init with copy of MLStyleTransfer.PersistentParameters?(v11, v2);
  OUTLINED_FUNCTION_57_4(v2, 1, v6);
  if (v12)
  {
    outlined destroy of URL?(v2, &demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    *(void *)uint64_t v13 = 0xD000000000000030;
    *(void *)(v13 + 8) = 0x80000002272D69A0;
    *(_OWORD *)(v13 + 16) = 0u;
    *(_OWORD *)(v13 + 32) = 0u;
    *(unsigned char *)(v13 + 48) = 2;
    return swift_willThrow();
  }
  else
  {
    outlined init with take of MLStyleTransfer.PersistentParameters(v2, v10);
    MLStyleTransfer.PersistentParameters.save(toSessionDirectory:)(a1);
    return _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0(v10, (void (*)(void))type metadata accessor for MLStyleTransfer.PersistentParameters);
  }
}

void MLStyleTransfer.TrainingSessionDelegate.restore(from:phase:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v25 = v0;
  uint64_t v6 = v5;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
  uint64_t v8 = OUTLINED_FUNCTION_17(v7);
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_47_8();
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_23_13();
  uint64_t v13 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v15 = v14;
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_24_4();
  uint64_t v26 = type metadata accessor for MLStyleTransfer.PersistentParameters();
  OUTLINED_FUNCTION_8();
  uint64_t v18 = MEMORY[0x270FA5388](v17);
  char v20 = (char *)&v25 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v25 - v21;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v15 + 16))(v3, v6, v13);
  MLStyleTransfer.PersistentParameters.init(sessionDirectory:)(v3, (uint64_t)v22);
  if (!v1)
  {
    uint64_t v23 = v25 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_trainingParameters;
    OUTLINED_FUNCTION_53();
    outlined init with copy of MLStyleTransfer.PersistentParameters?(v23, v2);
    OUTLINED_FUNCTION_57_4(v2, 1, v26);
    if (v24)
    {
      outlined destroy of URL?(v2, &demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
      outlined init with take of MLStyleTransfer.PersistentParameters((uint64_t)v22, v4);
      __swift_storeEnumTagSinglePayload(v4, 0, 1, v26);
      outlined init with take of DataFrame?(v4, (uint64_t)v11, &demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
      swift_beginAccess();
      outlined assign with take of MLStyleTransfer.PersistentParameters?((uint64_t)v11, v23);
      swift_endAccess();
    }
    else
    {
      outlined init with take of MLStyleTransfer.PersistentParameters(v2, (uint64_t)v20);
      MLStyleTransfer.TrainingSessionDelegate.verifyParametersCompatibility(_:_:phase:)();
      _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0((uint64_t)v20, (void (*)(void))type metadata accessor for MLStyleTransfer.PersistentParameters);
      _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0((uint64_t)v22, (void (*)(void))type metadata accessor for MLStyleTransfer.PersistentParameters);
    }
  }
  OUTLINED_FUNCTION_8_1();
}

void MLStyleTransfer.TrainingSessionDelegate.verifyParametersCompatibility(_:_:phase:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v97 = v1;
  uint64_t v3 = v2;
  uint64_t v4 = OUTLINED_FUNCTION_36_2();
  uint64_t v5 = (int *)type metadata accessor for MLStyleTransfer.ModelParameters(v4);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_49();
  uint64_t v99 = v7;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_45_3();
  uint64_t v98 = v9;
  OUTLINED_FUNCTION_20_3();
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v96 - v12;
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (unsigned __int8 *)&v96 - v14;
  uint64_t v16 = (int *)type metadata accessor for MLStyleTransfer.PersistentParameters();
  unint64_t v18 = v16[5];
  uint64_t v17 = v16[6];
  unsigned __int8 v19 = *(unsigned char *)(v0 + v18);
  LODWORD(v101) = v19;
  uint64_t v20 = (uint64_t)&v15[v5[5]];
  unint64_t v110 = v0 + v17;
  unint64_t v111 = v18;
  outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData(v0 + v17, v20);
  uint64_t v21 = v16[7];
  uint64_t v108 = v16[8];
  uint64_t v109 = v21;
  uint64_t v22 = *(void *)(v0 + v21);
  uint64_t v23 = *(void *)(v0 + v108);
  *(void *)&v15[v5[6]] = 1;
  uint64_t v24 = v5[10];
  *uint64_t v15 = v19;
  *(void *)&v15[v5[7]] = 500;
  *(void *)&v15[v5[8]] = v22;
  *(void *)&v15[v5[9]] = v23;
  uint64_t v100 = v16[9];
  v15[v24] = *(unsigned char *)(v0 + v100);
  _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0((uint64_t)v15, (void (*)(void))type metadata accessor for MLStyleTransfer.ModelParameters);
  char v25 = *(unsigned char *)(v3 + v16[5]);
  OUTLINED_FUNCTION_38_14();
  uint64_t v102 = v27;
  uint64_t v103 = v26;
  outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData(v26, v28);
  uint64_t v29 = v16[7];
  uint64_t v104 = v16[8];
  uint64_t v105 = v29;
  OUTLINED_FUNCTION_45_11();
  *uint64_t v13 = v25;
  OUTLINED_FUNCTION_24_22(v30);
  uint64_t v106 = v16[9];
  uint64_t v107 = v3;
  v13[v31] = *(unsigned char *)(v3 + v106);
  _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0((uint64_t)v13, (void (*)(void))type metadata accessor for MLStyleTransfer.ModelParameters);
  char v32 = specialized == infix<A>(_:_:)((char)v101, v25);
  int v33 = *(unsigned __int8 *)(v0 + v111);
  uint64_t v34 = v5[5];
  if ((v32 & 1) == 0)
  {
    uint64_t v75 = v98;
    outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData(v110, (uint64_t)&v98[v34]);
    OUTLINED_FUNCTION_45_11();
    unsigned char *v75 = v33;
    OUTLINED_FUNCTION_24_22(v76);
    v75[v77] = *(unsigned char *)(v0 + v100);
    _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0((uint64_t)v75, (void (*)(void))type metadata accessor for MLStyleTransfer.ModelParameters);
    unint64_t v78 = 0xD000000000000046;
    if (v33)
    {
      unint64_t v78 = 0xD00000000000004FLL;
      unint64_t v79 = 0x80000002272D4F70;
    }
    else
    {
      unint64_t v79 = 0x80000002272D4FC0;
    }
    unint64_t v110 = v79;
    unint64_t v111 = v78;
    uint64_t v80 = v107;
    int v81 = *(unsigned __int8 *)(v107 + v102);
    Swift::Int v82 = v99;
    outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData(v103, (uint64_t)&v99[v5[5]]);
    uint64_t v83 = *(void *)(v80 + v105);
    uint64_t v84 = *(void *)(v80 + v104);
    *(void *)&v82[v5[6]] = 1;
    uint64_t v85 = v5[10];
    *Swift::Int v82 = v81;
    *(void *)&v82[v5[7]] = 500;
    *(void *)&v82[v5[8]] = v83;
    *(void *)&v82[v5[9]] = v84;
    v82[v85] = *(unsigned char *)(v80 + v106);
    _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0((uint64_t)v82, (void (*)(void))type metadata accessor for MLStyleTransfer.ModelParameters);
    if (v81) {
      uint64_t v70 = 0xD00000000000004FLL;
    }
    else {
      uint64_t v70 = 0xD000000000000046;
    }
    if (v81) {
      unint64_t v72 = 0x80000002272D4F70;
    }
    else {
      unint64_t v72 = 0x80000002272D4FC0;
    }
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    *(_OWORD *)uint64_t v73 = xmmword_2272CD540;
    uint64_t v86 = v110;
    *(void *)(v73 + 16) = v111;
    *(void *)(v73 + 24) = v86;
    goto LABEL_17;
  }
  outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData(v110, (uint64_t)&v15[v34]);
  uint64_t v101 = *(unsigned char **)(v0 + v109);
  OUTLINED_FUNCTION_52_6();
  *uint64_t v15 = v33;
  *(void *)&v15[v5[7]] = 500;
  *(void *)&v15[v5[8]] = v35;
  *(void *)&v15[v5[9]] = v36;
  uint64_t v37 = v100;
  v15[v38] = *(unsigned char *)(v0 + v100);
  _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0((uint64_t)v15, (void (*)(void))type metadata accessor for MLStyleTransfer.ModelParameters);
  uint64_t v39 = v107;
  char v40 = *(unsigned char *)(v107 + v102);
  OUTLINED_FUNCTION_38_14();
  outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData(v41, v42);
  uint64_t v99 = *(unsigned char **)(v39 + v105);
  OUTLINED_FUNCTION_53_10();
  *uint64_t v13 = v40;
  *(void *)&v13[v5[7]] = 500;
  *(void *)&v13[v5[8]] = v43;
  *(void *)&v13[v5[9]] = v44;
  v13[v45] = *(unsigned char *)(v39 + v106);
  _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0((uint64_t)v13, (void (*)(void))type metadata accessor for MLStyleTransfer.ModelParameters);
  LOBYTE(v39) = *(unsigned char *)(v0 + v111);
  outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData(v110, (uint64_t)&v15[v5[5]]);
  uint64_t v46 = *(void *)(v0 + v109);
  uint64_t v47 = *(void *)(v0 + v108);
  *(void *)&v15[v5[6]] = 1;
  uint64_t v48 = v5[10];
  *uint64_t v15 = v39;
  *(void *)&v15[v5[7]] = 500;
  *(void *)&v15[v5[8]] = v46;
  *(void *)&v15[v5[9]] = v47;
  v15[v48] = *(unsigned char *)(v0 + v37);
  _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0((uint64_t)v15, (void (*)(void))type metadata accessor for MLStyleTransfer.ModelParameters);
  if (v101 != v99)
  {
    lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t v60 = BinaryInteger.description.getter();
    uint64_t v62 = v87;
    uint64_t v88 = v107;
    OUTLINED_FUNCTION_38_14();
    outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData(v89, v90);
    uint64_t v91 = *(void *)(v88 + v105);
    OUTLINED_FUNCTION_19_23();
    *(void *)&v13[v92] = v91;
    *(void *)&v13[v5[9]] = v93;
    v13[v94] = *(unsigned char *)(v88 + v106);
    _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0((uint64_t)v13, (void (*)(void))type metadata accessor for MLStyleTransfer.ModelParameters);
    uint64_t v70 = BinaryInteger.description.getter();
    unint64_t v72 = v95;
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    long long v74 = xmmword_2272D01E0;
    goto LABEL_16;
  }
  uint64_t v49 = v107;
  char v50 = *(unsigned char *)(v107 + v102);
  OUTLINED_FUNCTION_38_14();
  outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData(v51, v52);
  uint64_t v53 = *(void *)(v49 + v104);
  OUTLINED_FUNCTION_53_10();
  *uint64_t v13 = v50;
  *(void *)&v13[v5[7]] = 500;
  *(void *)&v13[v5[8]] = v54;
  *(void *)&v13[v5[9]] = v53;
  v13[v55] = *(unsigned char *)(v49 + v106);
  _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0((uint64_t)v13, (void (*)(void))type metadata accessor for MLStyleTransfer.ModelParameters);
  if (v47 != v53)
  {
    unsigned __int8 v56 = *(unsigned char *)(v0 + v111);
    outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData(v110, (uint64_t)&v15[v5[5]]);
    uint64_t v57 = *(void *)(v0 + v108);
    OUTLINED_FUNCTION_52_6();
    *uint64_t v15 = v56;
    *(void *)&v15[v5[7]] = 500;
    *(void *)&v15[v5[8]] = v58;
    *(void *)&v15[v5[9]] = v57;
    v15[v59] = *(unsigned char *)(v0 + v37);
    _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0((uint64_t)v15, (void (*)(void))type metadata accessor for MLStyleTransfer.ModelParameters);
    lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t v60 = BinaryInteger.description.getter();
    uint64_t v62 = v61;
    uint64_t v63 = v107;
    OUTLINED_FUNCTION_38_14();
    outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData(v64, v65);
    uint64_t v66 = *(void *)(v63 + v104);
    OUTLINED_FUNCTION_19_23();
    *(void *)&v13[v68] = v67;
    *(void *)&v13[v5[9]] = v66;
    v13[v69] = *(unsigned char *)(v63 + v106);
    _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0((uint64_t)v13, (void (*)(void))type metadata accessor for MLStyleTransfer.ModelParameters);
    uint64_t v70 = BinaryInteger.description.getter();
    unint64_t v72 = v71;
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    long long v74 = xmmword_2272D01F0;
LABEL_16:
    *(_OWORD *)uint64_t v73 = v74;
    *(void *)(v73 + 16) = v60;
    *(void *)(v73 + 24) = v62;
LABEL_17:
    *(void *)(v73 + 32) = v70;
    *(void *)(v73 + 40) = v72;
    *(unsigned char *)(v73 + 48) = 3;
    swift_willThrow();
  }
  OUTLINED_FUNCTION_8_1();
}

uint64_t MLStyleTransfer.TrainingSessionDelegate.deinit()
{
  swift_bridgeObjectRelease();
  _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0(v0 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_sessionParameters, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
  outlined destroy of URL?(v0 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_trainingParameters, &demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
  swift_release();
  swift_release();
  return v0;
}

uint64_t MLStyleTransfer.TrainingSessionDelegate.__deallocating_deinit()
{
  MLStyleTransfer.TrainingSessionDelegate.deinit();
  OUTLINED_FUNCTION_4_12();

  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for MLStyleTransfer.TrainingSessionDelegate()
{
  return type metadata accessor for MLStyleTransfer.TrainingSessionDelegate();
}

uint64_t type metadata accessor for MLStyleTransfer.TrainingSessionDelegate()
{
  uint64_t result = type metadata singleton initialization cache for MLStyleTransfer.TrainingSessionDelegate;
  if (!type metadata singleton initialization cache for MLStyleTransfer.TrainingSessionDelegate) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for MLStyleTransfer.TrainingSessionDelegate()
{
  type metadata accessor for MLTrainingSessionParameters();
  if (v0 <= 0x3F)
  {
    type metadata accessor for MLStyleTransfer.PersistentParameters?();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void type metadata accessor for MLStyleTransfer.PersistentParameters?()
{
  if (!lazy cache variable for type metadata for MLStyleTransfer.PersistentParameters?)
  {
    type metadata accessor for MLStyleTransfer.PersistentParameters();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
    }
  }
}

void protocol witness for TrainingSessionDelegate.setUp() in conformance MLStyleTransfer.TrainingSessionDelegate()
{
}

void protocol witness for TrainingSessionDelegate.resume(from:) in conformance MLStyleTransfer.TrainingSessionDelegate(Swift::OpaquePointer a1)
{
}

unint64_t protocol witness for TrainingSessionDelegate.itemCount(phase:) in conformance MLStyleTransfer.TrainingSessionDelegate(CreateML::MLPhase a1)
{
  return (unint64_t)MLStyleTransfer.TrainingSessionDelegate.itemCount(phase:)(a1);
}

uint64_t protocol witness for TrainingSessionDelegate.train(from:) in conformance MLStyleTransfer.TrainingSessionDelegate(Swift::Int a1)
{
  Swift::tuple_Int_metrics_OpaquePointer_finished_Bool v10 = MLStyleTransfer.TrainingSessionDelegate.train(from:)(a1);
  if (v4)
  {
    v10._0 = v1[1];
    v10.metrics._rawValue = v1;
    BOOL finished = 0;
  }
  else
  {
    Swift::Int v6 = v10._0;
    rawValue = v10.metrics._rawValue;
    v10._0 = v1[1];
    BOOL finished = v10.finished;
    v10.metrics._rawValue = v1;
    *(void *)&v10.BOOL finished = v6;
    uint64_t v3 = (uint64_t)rawValue;
  }
  return protocol witness for TrainingSessionDelegate.train(from:) in conformance HandPoseClassifierTrainingSessionDelegate((uint64_t (*)(uint64_t, uint64_t, uint64_t))v10._0, (uint64_t)v10.metrics._rawValue, *(uint64_t *)&v10.finished, v3, finished);
}

uint64_t protocol witness for TrainingSessionDelegate.evaluate(from:) in conformance MLStyleTransfer.TrainingSessionDelegate(Swift::Int a1)
{
  MLStyleTransfer.TrainingSessionDelegate.evaluate(from:)(a1);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8);
  if (v4)
  {
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v2 = 1;
    uint64_t v5 = 1;
  }
  return protocol witness for TrainingSessionDelegate.extractFeatures(from:) in conformance SoundClassifierTrainingSessionDelegate(v3, v1, v2, v5);
}

uint64_t protocol witness for TrainingSessionDelegate.saveCheckpoint(to:phase:iteration:) in conformance MLStyleTransfer.TrainingSessionDelegate(uint64_t a1, unsigned char *a2)
{
  return MLStyleTransfer.TrainingSessionDelegate.saveCheckpoint(to:phase:iteration:)(a1, a2) & 1;
}

uint64_t protocol witness for TrainingSessionCodable.save(to:) in conformance MLStyleTransfer.TrainingSessionDelegate(uint64_t a1)
{
  return MLStyleTransfer.TrainingSessionDelegate.save(to:)(a1);
}

void protocol witness for TrainingSessionCodable.restore(from:phase:) in conformance MLStyleTransfer.TrainingSessionDelegate()
{
}

uint64_t outlined init with copy of MLStyleTransfer.PersistentParameters?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of MLStyleTransfer.PersistentParameters?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type [UInt8] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UInt8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A]);
  }
  return result;
}

uint64_t closure #1 in Data.init<A>(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    unint64_t result = 0;
LABEL_4:
    unint64_t v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    unint64_t result = Data.InlineData.init(_:)();
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    unint64_t result = MEMORY[0x22A671F30]();
    unint64_t v5 = v8 | 0x8000000000000000;
  }
  else
  {
    unint64_t result = MEMORY[0x22A671F50]();
    unint64_t v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = OUTLINED_FUNCTION_36_2();
  v5(v4);
  OUTLINED_FUNCTION_8();
  (*(void (**)(uint64_t, uint64_t))(v6 + 16))(a2, v2);
  return a2;
}

uint64_t outlined init with take of MLStyleTransfer.PersistentParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = OUTLINED_FUNCTION_36_2();
  v4(v3);
  OUTLINED_FUNCTION_8();
  uint64_t v5 = OUTLINED_FUNCTION_52_3();
  v6(v5);
  return a2;
}

uint64_t _s8CreateML15MLStyleTransferV15ModelParametersVWOhTm_0(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_25_0();
  v3();
  return a1;
}

void OUTLINED_FUNCTION_16_24()
{
  strcpy((char *)(v0 + 16), "style_transfer");
  *(unsigned char *)(v0 + 31) = -18;
}

void OUTLINED_FUNCTION_19_23()
{
  *(void *)&v2[*(int *)(v1 + 24)] = 1;
  *uint64_t v2 = v0;
  *(void *)&v2[*(int *)(v1 + 28)] = 500;
}

uint64_t OUTLINED_FUNCTION_21_23@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 280) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return 0;
}

uint64_t OUTLINED_FUNCTION_22_20@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 344) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return 0;
}

uint64_t OUTLINED_FUNCTION_23_13()
{
  return 0;
}

void OUTLINED_FUNCTION_24_22(uint64_t a1@<X8>)
{
  *(void *)(v3 + v2[7]) = 500;
  *(void *)(v3 + v2[8]) = a1;
  *(void *)(v3 + v2[9]) = v1;
}

void OUTLINED_FUNCTION_25_21(uint64_t a1@<X8>)
{
  MLDataTable.subscript.getter(0x55746E65746E6F63, (void *)0xEB00000000734C52, a1);
}

void OUTLINED_FUNCTION_28_15(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 320) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_29_18@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 208) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return 0;
}

uint64_t OUTLINED_FUNCTION_41_11()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_42_13()
{
  return 6778480;
}

id OUTLINED_FUNCTION_44_10(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2, 0, 0);
}

void OUTLINED_FUNCTION_45_11()
{
  *(void *)(v1 + *(int *)(v0 + 24)) = 1;
}

uint64_t OUTLINED_FUNCTION_49_5()
{
  *(void *)(v2 - 120) = v1;
  *(void *)(v2 - 144) = v0;
  return v2 - 144;
}

uint64_t OUTLINED_FUNCTION_51_8()
{
  return *(void *)(v0 - 288);
}

void OUTLINED_FUNCTION_52_6()
{
  *(void *)(v1 + *(int *)(v0 + 24)) = 1;
}

void OUTLINED_FUNCTION_53_10()
{
  *(void *)(v1 + *(int *)(v0 + 24)) = 1;
}

uint64_t OUTLINED_FUNCTION_54_7()
{
  return *(void *)(v0 - 336);
}

uint64_t OUTLINED_FUNCTION_55_8()
{
  return v0;
}

unint64_t specialized _setUpCast<A, B>(_:)(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String?>);
    uint64_t v2 = static _SetStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = MEMORY[0x263F8EE88];
  }
  uint64_t v3 = a1 + 56;
  uint64_t v4 = -1 << *(unsigned char *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v5 = ~(-1 << -(char)v4);
  }
  else {
    uint64_t v5 = -1;
  }
  uint64_t v6 = v5 & *(void *)(a1 + 56);
  int64_t v7 = (unint64_t)(63 - v4) >> 6;
  swift_bridgeObjectRetain();
  unint64_t result = swift_retain();
  int64_t v9 = 0;
  if (!v6) {
    goto LABEL_9;
  }
LABEL_8:
  v6 &= v6 - 1;
  while (1)
  {
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    swift_dynamicCast();
    unint64_t result = specialized _NativeSet._unsafeInsertNew(_:)(v14, v15, v2);
    if (v6) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v10 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v10 >= v7) {
      goto LABEL_27;
    }
    uint64_t v11 = *(void *)(v3 + 8 * v10);
    int64_t v12 = v9 + 1;
    if (!v11)
    {
      int64_t v12 = v9 + 2;
      if (v9 + 2 >= v7) {
        goto LABEL_27;
      }
      uint64_t v11 = *(void *)(v3 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v9 + 3;
        if (v9 + 3 >= v7) {
          goto LABEL_27;
        }
        uint64_t v11 = *(void *)(v3 + 8 * v12);
        if (!v11)
        {
          int64_t v12 = v9 + 4;
          if (v9 + 4 >= v7) {
            goto LABEL_27;
          }
          uint64_t v11 = *(void *)(v3 + 8 * v12);
          if (!v11) {
            break;
          }
        }
      }
    }
LABEL_24:
    uint64_t v6 = (v11 - 1) & v11;
    int64_t v9 = v12;
  }
  int64_t v13 = v9 + 5;
  if (v9 + 5 >= v7)
  {
LABEL_27:
    swift_release();
    outlined consume of [String : [Int]].Iterator._Variant();
    return v2;
  }
  uint64_t v11 = *(void *)(v3 + 8 * v13);
  if (v11)
  {
    int64_t v12 = v9 + 5;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v12 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v12 >= v7) {
      goto LABEL_27;
    }
    uint64_t v11 = *(void *)(v3 + 8 * v12);
    ++v13;
    if (v11) {
      goto LABEL_24;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

void specialized _setUpCast<A, B>(_:)(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Int?>);
    uint64_t v2 = static _SetStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = MEMORY[0x263F8EE88];
  }
  uint64_t v27 = a1 + 56;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  uint64_t v5 = v4 & *(void *)(a1 + 56);
  int64_t v6 = (unint64_t)(63 - v3) >> 6;
  uint64_t v7 = v2 + 56;
  swift_bridgeObjectRetain();
  swift_retain();
  int64_t v8 = 0;
  if (!v5) {
    goto LABEL_9;
  }
LABEL_8:
  v5 &= v5 - 1;
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
    swift_dynamicCast();
    Hasher.init(_seed:)();
    if (v29 == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v28);
    }
    Swift::Int v17 = Hasher._finalize()();
    uint64_t v18 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v19 = v17 & ~v18;
    unint64_t v20 = v19 >> 6;
    if (((-1 << v19) & ~*(void *)(v7 + 8 * (v19 >> 6))) == 0)
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v18) >> 6;
      while (++v20 != v23 || (v22 & 1) == 0)
      {
        BOOL v24 = v20 == v23;
        if (v20 == v23) {
          unint64_t v20 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v7 + 8 * v20);
        if (v25 != -1)
        {
          unint64_t v21 = __clz(__rbit64(~v25)) + (v20 << 6);
          goto LABEL_37;
        }
      }
      __break(1u);
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    unint64_t v21 = __clz(__rbit64((-1 << v19) & ~*(void *)(v7 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
LABEL_37:
    *(void *)(v7 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t v26 = *(void *)(v2 + 48) + 16 * v21;
    *(void *)uint64_t v26 = v28;
    *(unsigned char *)(v26 + 8) = v29;
    ++*(void *)(v2 + 16);
    if (v5) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v9 = v8 + 1;
    if (__OFADD__(v8, 1)) {
      goto LABEL_41;
    }
    if (v9 >= v6) {
      goto LABEL_39;
    }
    uint64_t v10 = *(void *)(v27 + 8 * v9);
    int64_t v11 = v8 + 1;
    if (!v10)
    {
      if (v8 + 2 >= v6) {
        goto LABEL_39;
      }
      OUTLINED_FUNCTION_53_11();
      if (!v10)
      {
        if (v12 + 2 >= v6) {
          goto LABEL_39;
        }
        OUTLINED_FUNCTION_53_11();
        if (!v10)
        {
          if (v13 + 3 >= v6) {
            goto LABEL_39;
          }
          OUTLINED_FUNCTION_53_11();
          if (!v10) {
            break;
          }
        }
      }
    }
LABEL_24:
    uint64_t v5 = (v10 - 1) & v10;
    int64_t v8 = v11;
  }
  int64_t v15 = v14 + 4;
  if (v15 >= v6)
  {
LABEL_39:
    swift_release();
    outlined consume of [String : [Int]].Iterator._Variant();
    return;
  }
  uint64_t v10 = *(void *)(v27 + 8 * v15);
  if (v10)
  {
    int64_t v11 = v15;
    goto LABEL_24;
  }
  while (!__OFADD__(v15, 1))
  {
    if (v15 + 1 >= v6) {
      goto LABEL_39;
    }
    OUTLINED_FUNCTION_53_11();
    int64_t v15 = v16 + 1;
    if (v10) {
      goto LABEL_24;
    }
  }
LABEL_42:
  __break(1u);
}

id MLRandomForestClassifier.model.getter()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for MLRandomForestClassifier() + 20));

  return v1;
}

uint64_t type metadata accessor for MLRandomForestClassifier()
{
  uint64_t result = type metadata singleton initialization cache for MLRandomForestClassifier;
  if (!type metadata singleton initialization cache for MLRandomForestClassifier) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void key path setter for MLRandomForestClassifier.model : MLRandomForestClassifier(id *a1)
{
  id v1 = *a1;
  MLRandomForestClassifier.model.setter();
}

void MLRandomForestClassifier.model.setter()
{
  uint64_t v2 = *(int *)(OUTLINED_FUNCTION_52_7() + 20);

  *(void *)(v1 + v2) = v0;
}

void (*MLRandomForestClassifier.model.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for MLRandomForestClassifier() + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = *(void **)(v1 + v3);
  *(void *)a1 = v4;
  id v5 = v4;
  return MLRandomForestRegressor.model.modify;
}

uint64_t MLRandomForestClassifier.targetColumn.getter()
{
  return OUTLINED_FUNCTION_0_5();
}

uint64_t MLRandomForestClassifier.targetColumn.setter(uint64_t a1, uint64_t a2)
{
  id v5 = (void *)(v2 + *(int *)(type metadata accessor for MLRandomForestClassifier() + 24));
  uint64_t result = swift_bridgeObjectRelease();
  *id v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*MLRandomForestClassifier.targetColumn.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLRandomForestClassifier.featureColumns.getter()
{
  type metadata accessor for MLRandomForestClassifier();

  return swift_bridgeObjectRetain();
}

uint64_t MLRandomForestClassifier.featureColumns.setter()
{
  uint64_t v2 = *(int *)(OUTLINED_FUNCTION_52_7() + 28);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v2) = v0;
  return result;
}

uint64_t (*MLRandomForestClassifier.featureColumns.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLRandomForestClassifier.modelParameters.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for MLRandomForestClassifier() + 32);

  return outlined init with copy of MLRandomForestClassifier.ModelParameters(v3, a1);
}

uint64_t outlined init with copy of MLRandomForestClassifier.ModelParameters(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t MLRandomForestClassifier.trainingMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for MLRandomForestClassifier();
  return _s8CreateML19MLClassifierMetricsVWOcTm_0(v1 + *(int *)(v3 + 36), a1, (void (*)(void))type metadata accessor for MLClassifierMetrics);
}

uint64_t MLRandomForestClassifier.validationMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for MLRandomForestClassifier();
  return _s8CreateML19MLClassifierMetricsVWOcTm_0(v1 + *(int *)(v3 + 40), a1, (void (*)(void))type metadata accessor for MLClassifierMetrics);
}

uint64_t static MLRandomForestClassifier._defaultSessionParameters.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for _defaultSessionParameters != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for MLTrainingSessionParameters();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static MLRandomForestClassifier._defaultSessionParameters);
  return _s8CreateML19MLClassifierMetricsVWOcTm_0(v3, a1, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
}

uint64_t MLRandomForestClassifier.init(_:targetColumn:featureColumns:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  v6[7] = a6;
  v6[4] = a3;
  v6[5] = a4;
  id v6[2] = a1;
  v6[3] = a2;
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

#error "227197464: call analysis failed (funcsize=81)"

uint64_t MLRandomForestClassifier.init(_:targetColumn:featureColumns:parameters:)()
{
  OUTLINED_FUNCTION_60_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_2();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_7();
  void *v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_6();
  *uint64_t v8 = v7;
  *(void *)(v5 + 80) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 88) = v3;
  }
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

{
  void *v0;
  const void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  OUTLINED_FUNCTION_60_0();
  uint64_t v1 = (const void *)v0[7];
  uint64_t v2 = v0[8];
  uint64_t v4 = v0[2];
  uint64_t v3 = v0[3];
  *(void *)(v4 + *(int *)(v2 + 20)) = v0[11];
  _s8CreateML22AnyTreeClassifierModelVWObTm_0(v3, v4, (void (*)(void))type metadata accessor for AnyTreeClassifierModel);
  memcpy((void *)(v4 + *(int *)(v2 + 32)), v1, 0x58uLL);
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(void);
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 16) + *(int *)(v0 + 96);
  outlined destroy of MLRandomForestClassifier.ModelParameters(*(void *)(v0 + 56));
  outlined destroy of MLRandomForestClassifier.ModelParameters.ValidationData(v1, (void (*)(void))type metadata accessor for AnyTreeClassifierModel);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of MLRandomForestClassifier.ModelParameters.ValidationData(v2, (void (*)(void))type metadata accessor for MLClassifierMetrics);
  uint64_t v3 = OUTLINED_FUNCTION_0_5();
  outlined destroy of MLRandomForestClassifier.ModelParameters.ValidationData(v3, v4);
  OUTLINED_FUNCTION_30();
  return v5();
}

void MLRandomForestClassifier.init(trainingData:targetColumn:featureColumns:parameters:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v212 = v0;
  uint64_t v4 = v3;
  v211 = v5;
  uint64_t v223 = v6;
  Swift::String v209 = v7;
  uint64_t v218 = v8;
  uint64_t v10 = v9;
  uint64_t v11 = type metadata accessor for AnyClassificationMetrics();
  uint64_t v12 = OUTLINED_FUNCTION_17(v11);
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_106();
  uint64_t v15 = OUTLINED_FUNCTION_17_3(v14);
  uint64_t v16 = type metadata accessor for MLClassifierMetrics(v15);
  uint64_t v17 = OUTLINED_FUNCTION_17(v16);
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_106();
  OUTLINED_FUNCTION_17_3(v19);
  uint64_t v20 = type metadata accessor for AnyTreeClassifierModel();
  uint64_t v21 = OUTLINED_FUNCTION_1(v20);
  uint64_t v194 = v22;
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  uint64_t v196 = (uint64_t)&v177 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v195 = v24;
  MEMORY[0x270FA5388](v23);
  OUTLINED_FUNCTION_106();
  v198 = v25;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  uint64_t v27 = OUTLINED_FUNCTION_17(v26);
  MEMORY[0x270FA5388](v27);
  OUTLINED_FUNCTION_33_0();
  uint64_t v204 = v28;
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyColumn?);
  uint64_t v30 = OUTLINED_FUNCTION_17(v29);
  MEMORY[0x270FA5388](v30);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_17_3(v31);
  uint64_t v200 = type metadata accessor for AnyColumn();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v32);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v33);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v34);
  OUTLINED_FUNCTION_106();
  OUTLINED_FUNCTION_17_3(v35);
  uint64_t v36 = type metadata accessor for AnyTreeClassifier();
  uint64_t v37 = OUTLINED_FUNCTION_17(v36);
  MEMORY[0x270FA5388](v37);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_17_3(v38);
  uint64_t v219 = type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v214 = v39;
  MEMORY[0x270FA5388](v40);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v41);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v42);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v43);
  OUTLINED_FUNCTION_106();
  OUTLINED_FUNCTION_17_3(v44);
  type metadata accessor for MLRandomForestClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v45);
  OUTLINED_FUNCTION_40_0();
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v47);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v48);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v49);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v50);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v51);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v52);
  uint64_t v54 = (char *)&v177 - v53;
  uint64_t v217 = type metadata accessor for BoostedTreeConfiguration();
  OUTLINED_FUNCTION_0();
  uint64_t v215 = v55;
  MEMORY[0x270FA5388](v56);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v57);
  OUTLINED_FUNCTION_36_15();
  uint64_t v58 = type metadata accessor for MLRandomForestClassifier();
  uint64_t v213 = (uint64_t)v10 + *(int *)(v58 + 36);
  MLClassifierMetrics.init()(v58, v59, v60, v61, v62, v63, v64, v65, v177, (uint64_t)v178, v179, v180, v181, v182, v183, v184, v185, v186, v187,
    v188);
  uint64_t v193 = (int *)v58;
  uint64_t v66 = *(int *)(v58 + 40);
  uint64_t v197 = v10;
  uint64_t v67 = (void *)((char *)v10 + v66);
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  swift_allocError();
  OUTLINED_FUNCTION_32_2(v68, 0xD0000000000000C0);
  void *v67 = v69;
  uint64_t v70 = type metadata accessor for MLClassifierMetrics.Contents(0);
  uint64_t v210 = v67;
  uint64_t v190 = v70;
  swift_storeEnumTagMultiPayload();
  outlined init with copy of MLRandomForestClassifier.ModelParameters(v4, (uint64_t)v222);
  BoostedTreeConfiguration.init()();
  BoostedTreeConfiguration.learningRate.setter();
  BoostedTreeConfiguration.parallelTreeCount.setter();
  BoostedTreeConfiguration.maximumDepth.setter();
  BoostedTreeConfiguration.maximumIterations.setter();
  BoostedTreeConfiguration.minimumLossReduction.setter();
  BoostedTreeConfiguration.minimumChildWeight.setter();
  BoostedTreeConfiguration.randomSeed.setter();
  BoostedTreeConfiguration.rowSubsample.setter();
  BoostedTreeConfiguration.columnSubsample.setter();
  outlined destroy of MLRandomForestClassifier.ModelParameters((uint64_t)v222);
  uint64_t v216 = v4;
  outlined init with copy of URL?(v4, (uint64_t)&v220, &demangling cache variable for type metadata for Any?);
  if (v221)
  {
    uint64_t v71 = (uint64_t)&v54[*(int *)(v46 + 48)];
    outlined init with take of Any(&v220, v222);
    swift_dynamicCast();
    uint64_t v72 = v212;
    MLRandomForestClassifier.ModelParameters.ValidationData.generateDataFrames(trainingData:)((uint64_t)v54, v71, v218);
    if (v72)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_17_22();
      OUTLINED_FUNCTION_25_0();
      v73();
      outlined destroy of MLRandomForestClassifier.ModelParameters.ValidationData(v2, (void (*)(void))type metadata accessor for MLRandomForestClassifier.ModelParameters.ValidationData);
LABEL_17:
      uint64_t v118 = OUTLINED_FUNCTION_6_34();
      v119(v118);
      uint64_t v112 = (uint64_t)v210;
      goto LABEL_18;
    }
    uint64_t v212 = v71;
    uint64_t v181 = v46;
    outlined destroy of MLRandomForestClassifier.ModelParameters.ValidationData(v2, (void (*)(void))type metadata accessor for MLRandomForestClassifier.ModelParameters.ValidationData);
    static _FeatureUtilities.selectFeaturesFromTrainingData(trainingData:targetColumn:featureColumns:)((uint64_t)v54, (uint64_t)v209, v223, (uint64_t)v211);
    uint64_t v180 = v74;
    swift_bridgeObjectRelease();
    uint64_t v75 = v181;
    uint64_t v76 = v207;
    uint64_t v77 = (uint64_t)v207 + *(int *)(v181 + 48);
    uint64_t v78 = v214;
    unint64_t v79 = *(void (**)(uint64_t, char *, uint64_t))(v214 + 16);
    v211 = v54;
    uint64_t v80 = v219;
    uint64_t v179 = v214 + 16;
    uint64_t v178 = v79;
    v79((uint64_t)v207, v54, v219);
    outlined init with copy of URL?(v212, v77, &demangling cache variable for type metadata for DataFrame?);
    if (__swift_getEnumTagSinglePayload(v77, 1, v80) == 1)
    {
      uint64_t v177 = 0;
      outlined destroy of URL?(v77, &demangling cache variable for type metadata for DataFrame?);
      int v81 = *(void (**)(void))(v78 + 8);
      uint64_t v82 = (v78 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      uint64_t v207 = v81;
      ((void (*)(void (*)(void), uint64_t))v81)(v76, v80);
      goto LABEL_6;
    }
    uint64_t v98 = OUTLINED_FUNCTION_0_5();
    v99(v98);
    uint64_t v100 = v78 + 8;
    uint64_t v101 = *(void (**)(void))(v78 + 8);
    OUTLINED_FUNCTION_20_23();
    v101();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2272CB370;
    uint64_t v103 = v209;
    *(void *)(inited + 32) = v209;
    *(void *)(inited + 40) = v223;
    swift_bridgeObjectRetain();
    v104._uint64_t countAndFlagsBits = 0x73616C4365657254;
    v104._id object = (void *)0xEE00726569666973;
    DataFrame.validateContainsColumns(_:context:)((Swift::OpaquePointer)inited, v104);
    if (v105)
    {
      swift_setDeallocating();
      specialized _ContiguousArrayStorage.__deallocating_deinit();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_17_22();
      OUTLINED_FUNCTION_20_23();
      v101();
    }
    else
    {
      swift_setDeallocating();
      specialized _ContiguousArrayStorage.__deallocating_deinit();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any.Type>);
      uint64_t v113 = swift_allocObject();
      *(_OWORD *)(v113 + 16) = xmmword_2272CB4D0;
      uint64_t v114 = MEMORY[0x263F8D6C8];
      *(void *)(v113 + 32) = MEMORY[0x263F8D310];
      *(void *)(v113 + 40) = v114;
      v115._uint64_t countAndFlagsBits = (uint64_t)v103;
      v115._id object = v223;
      v116._uint64_t countAndFlagsBits = 0x73616C4365657254;
      v116._id object = (void *)0xEE00726569666973;
      DataFrame.validateColumnTypes(_:_:context:)(v115, (Swift::OpaquePointer)v113, v116);
      if (!v117)
      {
        uint64_t v177 = 0;
        uint64_t v82 = v100 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
        OUTLINED_FUNCTION_20_23();
        v101();
        swift_bridgeObjectRelease();
        uint64_t v75 = v181;
        uint64_t v207 = v101;
LABEL_6:
        uint64_t v83 = v75;
        uint64_t v84 = v202 + *(int *)(v75 + 48);
        uint64_t v85 = v211;
        uint64_t v86 = v178;
        v178(v202, v211, v80);
        uint64_t v87 = v212;
        uint64_t v206 = v84;
        outlined init with copy of URL?(v212, v84, &demangling cache variable for type metadata for DataFrame?);
        MEMORY[0x22A672220](v209, v223);
        OUTLINED_FUNCTION_44_11();
        v88();
        uint64_t v89 = v203;
        uint64_t v90 = v203 + *(int *)(v83 + 48);
        v86(v203, v85, v219);
        uint64_t v91 = v219;
        outlined init with copy of URL?(v87, v90, &demangling cache variable for type metadata for DataFrame?);
        uint64_t v92 = v204;
        outlined init with take of DataFrame?(v90, v204);
        int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v92, 1, v91);
        uint64_t v94 = v215;
        uint64_t v95 = v217;
        if (EnumTagSinglePayload == 1)
        {
          uint64_t v96 = v207;
          ((void (*)(uint64_t, uint64_t))v207)(v89, v91);
          outlined destroy of URL?(v92, &demangling cache variable for type metadata for DataFrame?);
          uint64_t v97 = v201;
          __swift_storeEnumTagSinglePayload(v201, 1, 1, v200);
        }
        else
        {
          uint64_t v97 = v201;
          MEMORY[0x22A672220](v209, v223);
          uint64_t v106 = v92;
          uint64_t v107 = v207;
          ((void (*)(uint64_t, uint64_t))v207)(v106, v91);
          __swift_storeEnumTagSinglePayload(v97, 0, 1, v200);
          uint64_t v96 = v107;
          ((void (*)(uint64_t, uint64_t))v107)(v89, v91);
        }
        uint64_t v108 = v205;
        uint64_t v109 = v199;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v94 + 16))(v199, v1, v95);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v110 = v177;
        AnyTreeClassifier.init(trainingLabelsColumn:validationLabelsColumn:annotationColumnName:featureColumnNames:configuration:)(v208, v97, v209, (uint64_t)v223, v109, v108);
        if (v110)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_17_22();
          ((void (*)(uint64_t, uint64_t))v96)(v218, v219);
          outlined destroy of URL?((uint64_t)v211, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
          (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v1, v95);
          outlined destroy of URL?(v206, &demangling cache variable for type metadata for DataFrame?);
          uint64_t v112 = (uint64_t)v210;
        }
        else
        {
          uint64_t v208 = v82;
          outlined destroy of URL?(v206, &demangling cache variable for type metadata for DataFrame?);
          unint64_t v111 = v198;
          AnyTreeClassifier.fitted(to:validateOn:eventHandler:)(v211, v212, 0, 0, v198);
          uint64_t v207 = v96;
          if ((AnalyticsReporter.init()() & 1) == 0)
          {
            uint64_t v120 = v192 + *(int *)(v181 + 48);
            OUTLINED_FUNCTION_25_22();
            v121();
            outlined init with copy of URL?(v212, v120, &demangling cache variable for type metadata for DataFrame?);
            Swift::Int v122 = DataFrame.shape.getter();
            uint64_t v123 = OUTLINED_FUNCTION_49_6();
            ((void (*)(uint64_t))v207)(v123);
            v124._uint64_t countAndFlagsBits = 0xD000000000000015;
            v124._id object = (void *)0x80000002272D4D30;
            AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_randomForestClassifier, v124, v122);
            unint64_t v111 = v198;
            outlined destroy of URL?(v120, &demangling cache variable for type metadata for DataFrame?);
            v125._id object = (void *)0x80000002272D84F0;
            v125._uint64_t countAndFlagsBits = 0xD000000000000010;
            AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_randomForestClassifier, v125, *(void *)(v205[3] + 16));
          }
          uint64_t v126 = v193;
          uint64_t v127 = v197;
          uint64_t v128 = (void *)((char *)v197 + v193[6]);
          uint64_t v129 = v209;
          Swift::String v209 = v128;
          *uint64_t v128 = v129;
          v128[1] = v223;
          uint64_t v224 = (uint64_t)v127 + v126[8];
          outlined init with copy of MLRandomForestClassifier.ModelParameters(v216, v224);
          uint64_t v206 = v126[7];
          *(void *)((char *)v127 + v206) = v180;
          uint64_t v130 = v196;
          _s8CreateML19MLClassifierMetricsVWOcTm_0((uint64_t)v111, v196, (void (*)(void))type metadata accessor for AnyTreeClassifierModel);
          unint64_t v131 = (*(unsigned __int8 *)(v194 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v194 + 80);
          uint64_t v132 = swift_allocObject();
          _s8CreateML22AnyTreeClassifierModelVWObTm_0(v130, v132 + v131, (void (*)(void))type metadata accessor for AnyTreeClassifierModel);
          specialized blockAwait<A>(_:)();
          uint64_t v134 = v133;
          swift_release();
          uint64_t v135 = v126[5];
          *(void *)((char *)v127 + v135) = v134;
          _s8CreateML19MLClassifierMetricsVWOcTm_0((uint64_t)v111, (uint64_t)v127, (void (*)(void))type metadata accessor for AnyTreeClassifierModel);
          uint64_t v136 = v191;
          OUTLINED_FUNCTION_14();
          AnyTreeClassifierModel.applied(to:eventHandler:)(v137);
          uint64_t v177 = 0;
          uint64_t v204 = v135;
          uint64_t v141 = *v127;
          uint64_t v142 = v127[1];
          MEMORY[0x22A672220](*v127, v142);
          uint64_t v143 = v211;
          MEMORY[0x22A672220](v141, v142);
          uint64_t v144 = v189;
          AnyClassificationMetrics.init(_:_:)();
          uint64_t v145 = v136;
          uint64_t v146 = v219;
          uint64_t v147 = v207;
          ((void (*)(uint64_t, uint64_t))v207)(v145, v219);
          uint64_t v148 = v144;
          uint64_t v149 = v188;
          _s8CreateML22AnyTreeClassifierModelVWObTm_0(v148, v188, (void (*)(void))type metadata accessor for AnyClassificationMetrics);
          swift_storeEnumTagMultiPayload();
          outlined assign with take of MLClassifierMetrics(v149, v213);
          uint64_t v150 = v186 + *(int *)(v181 + 48);
          OUTLINED_FUNCTION_25_22();
          v151();
          outlined init with copy of URL?(v212, v150, &demangling cache variable for type metadata for DataFrame?);
          if (__swift_getEnumTagSinglePayload(v150, 1, v146) == 1)
          {
            OUTLINED_FUNCTION_17_22();
            ((void (*)(uint64_t, uint64_t))v147)(v218, v146);
            uint64_t v152 = outlined destroy of MLRandomForestClassifier.ModelParameters.ValidationData((uint64_t)v198, (void (*)(void))type metadata accessor for AnyTreeClassifierModel);
            OUTLINED_FUNCTION_48_9(v152, (void (*)(void))type metadata accessor for AnyTreeClassifier);
            outlined destroy of URL?((uint64_t)v143, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
            uint64_t v153 = OUTLINED_FUNCTION_6_34();
            v154(v153);
            outlined destroy of URL?(v150, &demangling cache variable for type metadata for DataFrame?);
            uint64_t v155 = OUTLINED_FUNCTION_45_12();
            ((void (*)(uint64_t))v147)(v155);
            goto LABEL_19;
          }
          uint64_t v156 = OUTLINED_FUNCTION_0_5();
          v157(v156);
          uint64_t v158 = OUTLINED_FUNCTION_45_12();
          ((void (*)(uint64_t))v147)(v158);
          OUTLINED_FUNCTION_14();
          uint64_t v159 = v177;
          AnyTreeClassifierModel.applied(to:eventHandler:)(v160);
          uint64_t v161 = v218;
          uint64_t v177 = v159;
          if (!v159)
          {
            uint64_t v167 = OUTLINED_FUNCTION_49_6();
            MEMORY[0x22A672220](v167);
            uint64_t v168 = OUTLINED_FUNCTION_49_6();
            uint64_t v169 = v185;
            MEMORY[0x22A672220](v168);
            uint64_t v170 = v183;
            AnyClassificationMetrics.init(_:_:)();
            uint64_t v171 = v219;
            ((void (*)(uint64_t, uint64_t))v147)(v184, v219);
            OUTLINED_FUNCTION_17_22();
            ((void (*)(uint64_t, uint64_t))v147)(v161, v171);
            ((void (*)(uint64_t, uint64_t))v147)(v169, v171);
            uint64_t v172 = outlined destroy of MLRandomForestClassifier.ModelParameters.ValidationData((uint64_t)v198, (void (*)(void))type metadata accessor for AnyTreeClassifierModel);
            OUTLINED_FUNCTION_48_9(v172, (void (*)(void))type metadata accessor for AnyTreeClassifier);
            outlined destroy of URL?((uint64_t)v211, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
            uint64_t v173 = OUTLINED_FUNCTION_6_34();
            v174(v173);
            uint64_t v175 = v170;
            uint64_t v176 = v182;
            _s8CreateML22AnyTreeClassifierModelVWObTm_0(v175, v182, (void (*)(void))type metadata accessor for AnyClassificationMetrics);
            swift_storeEnumTagMultiPayload();
            outlined assign with take of MLClassifierMetrics(v176, (uint64_t)v210);
            goto LABEL_19;
          }
          OUTLINED_FUNCTION_17_22();
          uint64_t v162 = OUTLINED_FUNCTION_45_12();
          ((void (*)(uint64_t))v147)(v162);
          uint64_t v163 = OUTLINED_FUNCTION_49_6();
          ((void (*)(uint64_t))v147)(v163);
          uint64_t v164 = (uint64_t)v197;
          uint64_t v165 = v211;
          uint64_t v166 = v204;
          uint64_t v138 = outlined destroy of MLRandomForestClassifier.ModelParameters.ValidationData((uint64_t)v198, (void (*)(void))type metadata accessor for AnyTreeClassifierModel);
          OUTLINED_FUNCTION_48_9(v138, (void (*)(void))type metadata accessor for AnyTreeClassifier);
          outlined destroy of URL?((uint64_t)v165, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
          uint64_t v139 = OUTLINED_FUNCTION_6_34();
          v140(v139);
          outlined destroy of MLRandomForestClassifier.ModelParameters.ValidationData(v164, (void (*)(void))type metadata accessor for AnyTreeClassifierModel);

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined destroy of MLRandomForestClassifier.ModelParameters(v224);
          uint64_t v112 = (uint64_t)v210;
        }
LABEL_18:
        outlined destroy of MLRandomForestClassifier.ModelParameters.ValidationData(v213, (void (*)(void))type metadata accessor for MLClassifierMetrics);
        outlined destroy of MLRandomForestClassifier.ModelParameters.ValidationData(v112, (void (*)(void))type metadata accessor for MLClassifierMetrics);
LABEL_19:
        OUTLINED_FUNCTION_8_1();
        return;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_17_22();
      OUTLINED_FUNCTION_20_23();
      v101();
    }
    OUTLINED_FUNCTION_20_23();
    v101();
    outlined destroy of URL?((uint64_t)v211, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
    goto LABEL_17;
  }
  __break(1u);
}

uint64_t outlined destroy of MLRandomForestClassifier.ModelParameters(uint64_t a1)
{
  return a1;
}

uint64_t closure #1 in MLRandomForestClassifier.init(trainingData:targetColumn:featureColumns:parameters:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v4 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized CoreMLExportable.exportAsCoreMLModel()
                             + async function pointer to specialized CoreMLExportable.exportAsCoreMLModel());
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  *uint64_t v2 = v1;
  v2[1] = closure #1 in MLRandomForestRegressor.init(trainingData:targetColumn:featureColumns:parameters:);
  return v4();
}

uint64_t partial apply for closure #1 in MLRandomForestClassifier.init(trainingData:targetColumn:featureColumns:parameters:)()
{
  OUTLINED_FUNCTION_11();
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for AnyTreeClassifierModel();
  OUTLINED_FUNCTION_39_0(v2);
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)OUTLINED_FUNCTION_7_1(v3);
  void *v4 = v5;
  v4[1] = protocol witness for SupervisedEstimator.fitted<A>(to:eventHandler:) in conformance MLImageClassifier.Classifier;
  return closure #1 in MLRandomForestClassifier.init(trainingData:targetColumn:featureColumns:parameters:)(v1);
}

uint64_t MLRandomForestClassifier.init(trainingData:targetColumn:featureColumns:parameters:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = type metadata accessor for DataFrame();
  uint64_t v9 = OUTLINED_FUNCTION_17(v8);
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_40_0();
  char v10 = *((unsigned char *)a1 + 8);
  uint64_t v12 = *a1;
  char v13 = v10;
  DataFrame.init(_:)((uint64_t)&v12, v5);
  outlined init with copy of MLRandomForestClassifier.ModelParameters(a5, (uint64_t)&v12);
  MLRandomForestClassifier.init(trainingData:targetColumn:featureColumns:parameters:)();
  return outlined destroy of MLRandomForestClassifier.ModelParameters(a5);
}

void MLRandomForestClassifier.init(checkpoint:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v73 = (void *)v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v65 = type metadata accessor for MLRandomForestClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_49();
  uint64_t v64 = v8;
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_106();
  uint64_t v66 = v10;
  uint64_t v11 = type metadata accessor for BoostedTreeConfiguration();
  uint64_t v12 = OUTLINED_FUNCTION_17(v11);
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_24_8();
  type metadata accessor for AnyTreeClassifier();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_49();
  uint64_t v69 = v14;
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v63 - v16;
  uint64_t v18 = type metadata accessor for AnyTreeClassifierModel();
  uint64_t v19 = OUTLINED_FUNCTION_1(v18);
  uint64_t v71 = v20;
  uint64_t v22 = *(void *)(v21 + 64);
  uint64_t v23 = MEMORY[0x270FA5388](v19);
  uint64_t v68 = (uint64_t)&v63 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  OUTLINED_FUNCTION_106();
  uint64_t v70 = v24;
  MEMORY[0x270FA5388](v25);
  OUTLINED_FUNCTION_36_15();
  MEMORY[0x270FA5388](v26);
  OUTLINED_FUNCTION_106();
  uint64_t v72 = v27;
  uint64_t v28 = type metadata accessor for MLRandomForestClassifier();
  MLClassifierMetrics.init()(v28, v29, v30, v31, v32, v33, v34, v35, (uint64_t)v63, v64, v65, (uint64_t)v66, v67, v68, v69, v70, v71, v72, (uint64_t)v73,
    v6 + *(int *)(v28 + 36));
  uint64_t v63 = (int *)v28;
  uint64_t v36 = *(int *)(v28 + 40);
  uint64_t v67 = v6;
  uint64_t v37 = (void *)(v6 + v36);
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  swift_allocError();
  OUTLINED_FUNCTION_32_2(v38, 0xD0000000000000C0);
  *uint64_t v37 = v39;
  type metadata accessor for MLClassifierMetrics.Contents(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v76 = v4;
  switch(*(unsigned char *)(v4 + *(int *)(type metadata accessor for MLCheckpoint() + 20)))
  {
    case 2:
      swift_bridgeObjectRelease();
      goto LABEL_4;
    default:
      char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v40)
      {
LABEL_4:
        specialized _setUpCast<A, B>(_:)(MEMORY[0x263F8EE88]);
        uint64_t v42 = v41;
        BoostedTreeConfiguration.init()();
        AnyTreeClassifier.init(labels:annotationColumnName:featureColumnNames:configuration:)(v42, 0, 0xE000000000000000, MEMORY[0x263F8EE78], v0, (uint64_t)v17);
        lazy protocol witness table accessor for type AnyTreeClassifier and conformance AnyTreeClassifier();
        uint64_t v43 = v73;
        UpdatableSupervisedTabularEstimator.readWithOptimizer(from:)();
        if (v43)
        {
          uint64_t v73 = v37;
          outlined destroy of MLRandomForestClassifier.ModelParameters.ValidationData((uint64_t)v17, (void (*)(void))type metadata accessor for AnyTreeClassifier);
          unint64_t v44 = specialized _setUpCast<A, B>(_:)(MEMORY[0x263F8EE88]);
          BoostedTreeConfiguration.init()();
          uint64_t v45 = v69;
          AnyTreeClassifier.init(labels:annotationColumnName:featureColumnNames:configuration:)(v44, 0, 0xE000000000000000, v0, v69);
          uint64_t v46 = v68;
          UpdatableSupervisedTabularEstimator.readWithOptimizer(from:)();
          outlined destroy of MLRandomForestClassifier.ModelParameters.ValidationData(v45, (void (*)(void))type metadata accessor for AnyTreeClassifier);

          uint64_t v2 = v46;
        }
        else
        {
          outlined destroy of MLRandomForestClassifier.ModelParameters.ValidationData((uint64_t)v17, (void (*)(void))type metadata accessor for AnyTreeClassifier);
        }
        uint64_t v48 = v2;
        uint64_t v49 = v72;
        _s8CreateML22AnyTreeClassifierModelVWObTm_0(v48, v72, (void (*)(void))type metadata accessor for AnyTreeClassifierModel);
        uint64_t v50 = v70;
        _s8CreateML19MLClassifierMetricsVWOcTm_0(v49, v70, (void (*)(void))type metadata accessor for AnyTreeClassifierModel);
        unint64_t v51 = (*(unsigned __int8 *)(v71 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80);
        uint64_t v52 = swift_allocObject();
        _s8CreateML22AnyTreeClassifierModelVWObTm_0(v50, v52 + v51, (void (*)(void))type metadata accessor for AnyTreeClassifierModel);
        specialized blockAwait<A>(_:)();
        uint64_t v54 = v53;
        swift_release();
        uint64_t v55 = v63;
        uint64_t v56 = v67;
        *(void *)(v67 + v63[5]) = v54;
        _s8CreateML19MLClassifierMetricsVWOcTm_0(v49, v56, (void (*)(void))type metadata accessor for AnyTreeClassifierModel);
        uint64_t v58 = v65;
        uint64_t v57 = v66;
        *uint64_t v66 = 0;
        v57[1] = 0;
        *((_WORD *)v57 + 8) = 256;
        swift_storeEnumTagMultiPayload();
        uint64_t v59 = v56 + v55[8];
        *(_OWORD *)uint64_t v59 = 0u;
        *(_OWORD *)(v59 + 16) = 0u;
        *(_OWORD *)(v59 + 32) = xmmword_2272CB8C0;
        *(_OWORD *)(v59 + 48) = xmmword_2272CB8D0;
        *(void *)(v59 + 64) = 42;
        *(int64x2_t *)(v59 + 72) = vdupq_n_s64(0x3FE999999999999AuLL);
        uint64_t v60 = v64;
        _s8CreateML19MLClassifierMetricsVWOcTm_0((uint64_t)v57, v64, (void (*)(void))type metadata accessor for MLRandomForestClassifier.ModelParameters.ValidationData);
        v75[3] = v58;
        boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v75);
        _s8CreateML22AnyTreeClassifierModelVWObTm_0(v60, (uint64_t)boxed_opaque_existential_0, (void (*)(void))type metadata accessor for MLRandomForestClassifier.ModelParameters.ValidationData);
        outlined assign with take of Any?((uint64_t)v75, v59);
        outlined destroy of MLRandomForestClassifier.ModelParameters.ValidationData((uint64_t)v57, (void (*)(void))type metadata accessor for MLRandomForestClassifier.ModelParameters.ValidationData);
        uint64_t v62 = (void *)(v56 + v55[6]);
        *uint64_t v62 = 0;
        v62[1] = 0xE000000000000000;
        outlined destroy of MLRandomForestClassifier.ModelParameters.ValidationData(v76, (void (*)(void))type metadata accessor for MLCheckpoint);
        outlined destroy of MLRandomForestClassifier.ModelParameters.ValidationData(v49, (void (*)(void))type metadata accessor for AnyTreeClassifierModel);
        *(void *)(v56 + v55[7]) = MEMORY[0x263F8EE78];
      }
      else
      {
        swift_allocError();
        *(void *)uint64_t v47 = 0xD00000000000004ELL;
        *(void *)(v47 + 8) = 0x80000002272D8B10;
        *(_OWORD *)(v47 + 16) = 0u;
        *(_OWORD *)(v47 + 32) = 0u;
        *(unsigned char *)(v47 + 48) = 0;
        swift_willThrow();
        outlined destroy of MLRandomForestClassifier.ModelParameters.ValidationData(v76, (void (*)(void))type metadata accessor for MLCheckpoint);
        outlined destroy of MLRandomForestClassifier.ModelParameters.ValidationData(v74, (void (*)(void))type metadata accessor for MLClassifierMetrics);
        outlined destroy of MLRandomForestClassifier.ModelParameters.ValidationData((uint64_t)v37, (void (*)(void))type metadata accessor for MLClassifierMetrics);
      }
      OUTLINED_FUNCTION_8_1();
      return;
  }
}

uint64_t closure #1 in MLRandomForestClassifier.init(checkpoint:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v4 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized CoreMLExportable.exportAsCoreMLModel()
                             + async function pointer to specialized CoreMLExportable.exportAsCoreMLModel());
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  *uint64_t v2 = v1;
  v2[1] = closure #1 in MLRandomForestRegressor.init(checkpoint:);
  return v4();
}

void static MLRandomForestClassifier.train(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_42_0();
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_41_1();
  char v4 = *(unsigned char *)(v2 + 8);
  id v7 = *(id *)v2;
  char v8 = v4;
  outlined copy of Result<_DataTable, Error>(v7, v4);
  DataFrame.init(_:)((uint64_t)&v7, v1);
  static MLRandomForestClassifier.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)();
  uint64_t v5 = OUTLINED_FUNCTION_38_1();
  v6(v5);
  if (!v0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLRandomForestClassifier>);
    OUTLINED_FUNCTION_31_0();
    specialized MLJob.init(_:)();
  }
  OUTLINED_FUNCTION_8_1();
}

{
  uint64_t v0;

  static MLRandomForestClassifier.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)();
  if (!v0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLRandomForestClassifier>);
    OUTLINED_FUNCTION_31_0();
    specialized MLJob.init(_:)();
  }
}

void static MLRandomForestClassifier.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v2 = OUTLINED_FUNCTION_42_0();
  OUTLINED_FUNCTION_0();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_15();
  char v6 = *(unsigned char *)(v1 + 8);
  id v7 = *(id *)v1;
  char v8 = v6;
  outlined copy of Result<_DataTable, Error>(v7, v6);
  DataFrame.init(_:)((uint64_t)&v7, v0);
  static MLRandomForestClassifier.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0, v2);
  OUTLINED_FUNCTION_8_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(void);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(void);
  uint64_t v36;
  void (*v37)(void);
  uint64_t v38;
  uint64_t v39;
  void v40[2];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  long long v51;
  uint64_t v52;
  _UNKNOWN **v53;
  long long v54;
  uint64_t v55;
  uint64_t v56;

  OUTLINED_FUNCTION_9_0();
  uint64_t v49 = v3;
  uint64_t v50 = v4;
  char v6 = v5;
  uint64_t v47 = v7;
  uint64_t v48 = v8;
  char v10 = v9;
  uint64_t v11 = type metadata accessor for MLTrainingSessionParameters();
  uint64_t v12 = OUTLINED_FUNCTION_17(v11);
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_106();
  uint64_t v46 = v14;
  uint64_t v15 = type metadata accessor for BoostedTreeConfiguration();
  uint64_t v16 = OUTLINED_FUNCTION_17(v15);
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_41_1();
  type metadata accessor for MLRandomForestClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_15();
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_49();
  uint64_t v56 = v20;
  uint64_t v22 = MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)v40 - v23;
  MEMORY[0x270FA5388](v22);
  OUTLINED_FUNCTION_36_15();
  uint64_t v45 = v6;
  outlined init with copy of URL?(v6, (uint64_t)&v54, &demangling cache variable for type metadata for Any?);
  if (v55)
  {
    uint64_t v25 = v2 + *(int *)(v18 + 48);
    outlined init with take of Any(&v54, &v51);
    swift_dynamicCast();
    MLRandomForestClassifier.ModelParameters.ValidationData.generateDataFrames(trainingData:)(v2, v25, v10);
    outlined destroy of MLRandomForestClassifier.ModelParameters.ValidationData(v0, (void (*)(void))type metadata accessor for MLRandomForestClassifier.ModelParameters.ValidationData);
    if (!v1)
    {
      uint64_t v26 = (uint64_t)&v24[*(int *)(v18 + 48)];
      v40[1] = v24;
      type metadata accessor for DataFrame();
      OUTLINED_FUNCTION_0();
      uint64_t v42 = v27;
      uint64_t v41 = 0;
      uint64_t v29 = *(void (**)(void))(v28 + 16);
      OUTLINED_FUNCTION_51_0();
      v29();
      uint64_t v43 = v26;
      outlined init with copy of URL?(v25, v26, &demangling cache variable for type metadata for DataFrame?);
      v40[0] = v56 + *(int *)(v18 + 48);
      uint64_t v30 = v40[0];
      OUTLINED_FUNCTION_51_0();
      v29();
      outlined init with copy of URL?(v25, v30, &demangling cache variable for type metadata for DataFrame?);
      outlined init with copy of MLRandomForestClassifier.ModelParameters(v45, (uint64_t)&v51);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      BoostedTreeConfiguration.init()();
      BoostedTreeConfiguration.learningRate.setter();
      BoostedTreeConfiguration.parallelTreeCount.setter();
      BoostedTreeConfiguration.maximumDepth.setter();
      BoostedTreeConfiguration.maximumIterations.setter();
      BoostedTreeConfiguration.minimumLossReduction.setter();
      BoostedTreeConfiguration.minimumChildWeight.setter();
      BoostedTreeConfiguration.randomSeed.setter();
      BoostedTreeConfiguration.rowSubsample.setter();
      BoostedTreeConfiguration.columnSubsample.setter();
      outlined destroy of MLRandomForestClassifier.ModelParameters((uint64_t)&v51);
      uint64_t v31 = v50;
      _s8CreateML19MLClassifierMetricsVWOcTm_0(v50, v46, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
      uint64_t v32 = type metadata accessor for TreeClassifierTrainingSessionDelegate();
      OUTLINED_FUNCTION_31_0();
      uint64_t v33 = v41;
      TreeClassifierTrainingSessionDelegate.init(trainingData:validationData:targetColumn:featureColumns:configuration:sessionParameters:)();
      if (v33)
      {
        outlined destroy of URL?(v2, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
        OUTLINED_FUNCTION_25_0();
        v35();
        outlined destroy of URL?(v43, &demangling cache variable for type metadata for DataFrame?);
      }
      else
      {
        uint64_t v36 = v34;
        OUTLINED_FUNCTION_25_0();
        v37();
        outlined destroy of URL?(v43, &demangling cache variable for type metadata for DataFrame?);
        uint64_t v52 = v32;
        uint64_t v53 = &protocol witness table for TreeClassifierTrainingSessionDelegate;
        *(void *)&unint64_t v51 = v36;
        uint64_t v38 = v31;
        uint64_t v39 = v44;
        _s8CreateML19MLClassifierMetricsVWOcTm_0(v38, v44, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLRandomForestClassifier>);
        OUTLINED_FUNCTION_31_0();
        swift_retain();
        specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)&v51, v39, 1);
        outlined destroy of URL?(v2, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
        swift_release();
      }
    }
    OUTLINED_FUNCTION_8_1();
  }
  else
  {
    __break(1u);
  }
}

uint64_t static MLRandomForestClassifier.resume(_:)()
{
  return specialized MLJob.init(_:)();
}

void static MLRandomForestClassifier.restoreTrainingSession(sessionParameters:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for MLTrainingSessionParameters();
  uint64_t v4 = OUTLINED_FUNCTION_17(v3);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  id v7 = (char *)&v13[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v13[-1] - v8;
  _s8CreateML19MLClassifierMetricsVWOcTm_0(a1, (uint64_t)&v13[-1] - v8, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
  uint64_t v10 = type metadata accessor for TreeClassifierTrainingSessionDelegate();
  OUTLINED_FUNCTION_31_0();
  uint64_t v11 = TreeClassifierTrainingSessionDelegate.init(sessionParameters:)((uint64_t)v9);
  if (!v1)
  {
    v13[3] = v10;
    v13[4] = &protocol witness table for TreeClassifierTrainingSessionDelegate;
    v13[0] = v11;
    _s8CreateML19MLClassifierMetricsVWOcTm_0(a1, (uint64_t)v7, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLRandomForestClassifier>);
    OUTLINED_FUNCTION_31_0();
    specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)v13, (uint64_t)v7, 1);
  }
}

uint64_t closure #1 in closure #1 in static MLRandomForestClassifier.resume(_:)(void *a1, char a2, uint64_t a3, void (*a4)(void *), uint64_t a5)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLRandomForestClassifier, Error>);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = &v24[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  uint64_t v14 = OUTLINED_FUNCTION_17(v13);
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_3_0();
  uint64_t v17 = v16 - v15;
  if (a2)
  {
    void *v12 = a1;
    swift_storeEnumTagMultiPayload();
    id v22 = a1;
    a4(v12);
    return outlined destroy of URL?((uint64_t)v12, &demangling cache variable for type metadata for Result<MLRandomForestClassifier, Error>);
  }
  else
  {
    outlined init with copy of TrainingSessionDelegate(a3 + direct field offset for MLTrainingSession.delegate, (uint64_t)v24);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingSessionDelegate);
    type metadata accessor for TreeClassifierTrainingSessionDelegate();
    swift_dynamicCast();
    uint64_t v18 = v23;
    uint64_t v19 = type metadata accessor for TaskPriority();
    __swift_storeEnumTagSinglePayload(v17, 1, 1, v19);
    uint64_t v20 = (void *)swift_allocObject();
    v20[2] = 0;
    v20[3] = 0;
    v20[4] = v18;
    v20[5] = a4;
    v20[6] = a5;
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v17, (uint64_t)&async function pointer to partial apply for closure #1 in static MLRandomForestClassifier.handleResult(_:session:fulfill:), (uint64_t)v20);
    return swift_release();
  }
}

uint64_t closure #1 in static MLRandomForestClassifier.handleResult(_:session:fulfill:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  id v6[2] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLRandomForestClassifier, Error>);
  v6[5] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in static MLRandomForestClassifier.handleResult(_:session:fulfill:), 0, 0);
}

uint64_t closure #1 in static MLRandomForestClassifier.handleResult(_:session:fulfill:)()
{
  OUTLINED_FUNCTION_11();
  uint64_t v3 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized Result<>.init(catching:)
                             + async function pointer to specialized Result<>.init(catching:));
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in static MLRandomForestClassifier.handleResult(_:session:fulfill:);
  return v3();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_6();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_11();
  uint64_t v1 = *(void *)(v0 + 40);
  (*(void (**)(uint64_t))(v0 + 24))(v1);
  outlined destroy of URL?(v1, &demangling cache variable for type metadata for Result<MLRandomForestClassifier, Error>);
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  return v2();
}

uint64_t MLRandomForestClassifier.init(delegate:)()
{
  OUTLINED_FUNCTION_11();
  v0[36] = v1;
  v0[37] = v2;
  uint64_t v3 = type metadata accessor for AnyClassificationMetrics();
  v0[38] = v3;
  OUTLINED_FUNCTION_17(v3);
  v0[39] = swift_task_alloc();
  v0[40] = swift_task_alloc();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyClassificationMetrics?);
  OUTLINED_FUNCTION_17(v4);
  v0[41] = swift_task_alloc();
  v0[42] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for MLClassifierMetrics(0);
  OUTLINED_FUNCTION_17(v5);
  v0[43] = OUTLINED_FUNCTION_5();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyTreeClassifierModel?);
  OUTLINED_FUNCTION_17(v6);
  v0[44] = OUTLINED_FUNCTION_5();
  uint64_t v7 = type metadata accessor for MLRandomForestClassifier();
  v0[45] = v7;
  OUTLINED_FUNCTION_17(v7);
  v0[46] = OUTLINED_FUNCTION_5();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  OUTLINED_FUNCTION_17(v8);
  v0[47] = OUTLINED_FUNCTION_5();
  uint64_t v9 = type metadata accessor for BoostedTreeConfiguration();
  v0[48] = v9;
  OUTLINED_FUNCTION_1(v9);
  v0[49] = v10;
  v0[50] = OUTLINED_FUNCTION_5();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  OUTLINED_FUNCTION_17(v11);
  v0[51] = OUTLINED_FUNCTION_5();
  uint64_t v12 = type metadata accessor for PersistentParametersForTreeBasedMethods();
  v0[52] = v12;
  OUTLINED_FUNCTION_17(v12);
  v0[53] = OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v13, v14, v15);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  uint64_t v1 = v0[51];
  uint64_t v2 = v0[52];
  uint64_t v3 = v0[37] + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_53();
  outlined init with copy of URL?(v3, v1, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  uint64_t result = __swift_getEnumTagSinglePayload(v1, 1, v2);
  if (result == 1)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v6 = (int *)v0[52];
  uint64_t v5 = v0[53];
  uint64_t v7 = v0[50];
  uint64_t v8 = v0[48];
  uint64_t v9 = v0[49];
  uint64_t v10 = v0[47];
  uint64_t v11 = v0[44];
  uint64_t v12 = v0[37];
  _s8CreateML22AnyTreeClassifierModelVWObTm_0(v0[51], v5, (void (*)(void))type metadata accessor for PersistentParametersForTreeBasedMethods);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v7, v5 + v6[8], v8);
  outlined init with copy of URL?(v5 + v6[5], v10, &demangling cache variable for type metadata for DataFrame?);
  MLRandomForestClassifier.ModelParameters.init(configuration:validation:)(v7, v10, (uint64_t)(v0 + 2));
  uint64_t v13 = (uint64_t *)(v5 + v6[6]);
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  uint64_t v16 = *(void *)(v5 + v6[7]);
  uint64_t v17 = v12 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_model;
  OUTLINED_FUNCTION_53();
  outlined init with copy of URL?(v17, v11, &demangling cache variable for type metadata for AnyTreeClassifierModel?);
  uint64_t v18 = type metadata accessor for AnyTreeClassifierModel();
  uint64_t result = __swift_getEnumTagSinglePayload(v11, 1, v18);
  if (result == 1)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  outlined init with copy of MLRandomForestClassifier.ModelParameters((uint64_t)(v0 + 2), (uint64_t)(v0 + 13));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v19 = (void *)swift_task_alloc();
  v0[54] = v19;
  uint64_t *v19 = v0;
  v19[1] = MLRandomForestClassifier.init(delegate:);
  uint64_t v20 = v0[46];
  uint64_t v21 = v0[44];
  return MLRandomForestClassifier.init(_:targetColumn:featureColumns:parameters:)(v20, v21, v15, v14, v16, (uint64_t)(v0 + 13));
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_6();
  *uint64_t v5 = v4;
  *(void *)(v6 + 440) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void);
  uint64_t v21;

  uint64_t v1 = v0[42];
  uint64_t v3 = v0[37];
  uint64_t v2 = v0[38];
  _s8CreateML22AnyTreeClassifierModelVWObTm_0(v0[46], v0[36], (void (*)(void))type metadata accessor for MLRandomForestClassifier);
  uint64_t v4 = v3 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_trainingMetrics;
  OUTLINED_FUNCTION_53();
  outlined init with copy of URL?(v4, v1, &demangling cache variable for type metadata for AnyClassificationMetrics?);
  uint64_t result = __swift_getEnumTagSinglePayload(v1, 1, v2);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = v0[53];
    uint64_t v7 = v0[45];
    uint64_t v9 = v0[42];
    uint64_t v8 = v0[43];
    uint64_t v10 = v0[41];
    uint64_t v12 = v0[37];
    uint64_t v11 = v0[38];
    uint64_t v13 = v0[36];
    outlined destroy of MLRandomForestClassifier.ModelParameters((uint64_t)(v0 + 2));
    outlined destroy of MLRandomForestClassifier.ModelParameters.ValidationData(v6, (void (*)(void))type metadata accessor for PersistentParametersForTreeBasedMethods);
    _s8CreateML22AnyTreeClassifierModelVWObTm_0(v9, v8, (void (*)(void))type metadata accessor for AnyClassificationMetrics);
    type metadata accessor for MLClassifierMetrics.Contents(0);
    swift_storeEnumTagMultiPayload();
    outlined assign with take of MLClassifierMetrics(v8, v13 + *(int *)(v7 + 36));
    uint64_t v14 = v12 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_validationMetrics;
    OUTLINED_FUNCTION_53();
    outlined init with copy of URL?(v14, v10, &demangling cache variable for type metadata for AnyClassificationMetrics?);
    swift_release();
    if (__swift_getEnumTagSinglePayload(v10, 1, v11) == 1)
    {
      outlined destroy of URL?(v0[41], &demangling cache variable for type metadata for AnyClassificationMetrics?);
    }
    else
    {
      uint64_t v15 = v0[45];
      uint64_t v16 = v0[40];
      uint64_t v17 = v0[39];
      uint64_t v18 = v0[36];
      _s8CreateML22AnyTreeClassifierModelVWObTm_0(v0[41], v16, (void (*)(void))type metadata accessor for AnyClassificationMetrics);
      _s8CreateML22AnyTreeClassifierModelVWObTm_0(v16, v17, (void (*)(void))type metadata accessor for AnyClassificationMetrics);
      uint64_t v19 = v18 + *(int *)(v15 + 40);
      outlined destroy of MLRandomForestClassifier.ModelParameters.ValidationData(v19, (void (*)(void))type metadata accessor for MLClassifierMetrics);
      _s8CreateML22AnyTreeClassifierModelVWObTm_0(v17, v19, (void (*)(void))type metadata accessor for AnyClassificationMetrics);
      OUTLINED_FUNCTION_0_5();
      swift_storeEnumTagMultiPayload();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v20 = (uint64_t (*)(void))v0[1];
    return v20();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 424);
  swift_release();
  outlined destroy of MLRandomForestClassifier.ModelParameters(v0 + 16);
  outlined destroy of MLRandomForestClassifier.ModelParameters.ValidationData(v1, (void (*)(void))type metadata accessor for PersistentParametersForTreeBasedMethods);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  return v2();
}

void MLRandomForestClassifier.predictions(from:)()
{
  uint64_t v2 = type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_31_1();
  type metadata accessor for MLRandomForestClassifier();
  OUTLINED_FUNCTION_39_1();
  DataFrame.validateContainsColumns(_:context:)(v6, v7);
  if (!v8)
  {
    OUTLINED_FUNCTION_14();
    AnyTreeClassifierModel.applied(to:eventHandler:)(v9);
    MEMORY[0x22A672220](*v0, v0[1]);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v2);
  }
}

uint64_t MLRandomForestClassifier.predictions(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_31_1();
  uint64_t v8 = type metadata accessor for AnyColumn();
  uint64_t v9 = OUTLINED_FUNCTION_17(v8);
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_27_7();
  char v10 = *(unsigned char *)(a1 + 8);
  id v14 = *(id *)a1;
  char v15 = v10;
  outlined copy of Result<_DataTable, Error>(v14, v10);
  DataFrame.init(_:)((uint64_t)&v14, v3);
  MLRandomForestClassifier.predictions(from:)();
  uint64_t v11 = OUTLINED_FUNCTION_47_0();
  if (v2) {
    return v12(v11);
  }
  v12(v11);
  return MLUntypedColumn.init(_:convertArraysToShapedArrays:)(v4, 1, a2);
}

uint64_t MLRandomForestClassifier.evaluation(on:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v6 = type metadata accessor for AnyClassificationMetrics();
  uint64_t v7 = OUTLINED_FUNCTION_17(v6);
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_31_1();
  uint64_t v8 = type metadata accessor for MLRandomForestClassifier();
  OUTLINED_FUNCTION_39_1();
  DataFrame.validateContainsColumns(_:context:)(v9, v10);
  if (v11) {
    goto LABEL_5;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2272CB370;
  uint64_t v13 = (void *)(v2 + *(int *)(v8 + 24));
  uint64_t v14 = v13[1];
  *(void *)(inited + 32) = *v13;
  *(void *)(inited + 40) = v14;
  swift_bridgeObjectRetain();
  v15._uint64_t countAndFlagsBits = 0x6C6562614CLL;
  v15._id object = (void *)0xE500000000000000;
  DataFrame.validateContainsColumns(_:context:)((Swift::OpaquePointer)inited, v15);
  if (v11)
  {
    swift_setDeallocating();
    specialized _ContiguousArrayStorage.__deallocating_deinit();
LABEL_5:
    *a2 = v11;
    type metadata accessor for MLClassifierMetrics.Contents(0);
    return swift_storeEnumTagMultiPayload();
  }
  swift_setDeallocating();
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  AnyTreeClassifierModel.computeMetrics(on:)(a1, v3);
  _s8CreateML22AnyTreeClassifierModelVWObTm_0(v3, (uint64_t)a2, (void (*)(void))type metadata accessor for AnyClassificationMetrics);
  type metadata accessor for MLClassifierMetrics.Contents(0);
  return swift_storeEnumTagMultiPayload();
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  id v12;
  char v13;

  type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_3_0();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = *(unsigned char *)(a1 + 8);
  uint64_t v12 = *(id *)a1;
  uint64_t v13 = v8;
  outlined copy of Result<_DataTable, Error>(v12, v8);
  DataFrame.init(_:)((uint64_t)&v12, v7);
  MLRandomForestClassifier.evaluation(on:)(v7, a2);
  Swift::OpaquePointer v9 = OUTLINED_FUNCTION_45_12();
  return v10(v9);
}

void MLRandomForestClassifier.write(to:metadata:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v49 = v0;
  uint64_t v3 = v2;
  uint64_t v55 = v4;
  uint64_t v5 = type metadata accessor for AnyTreeClassifierModel();
  uint64_t v6 = OUTLINED_FUNCTION_17(v5);
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_33_0();
  uint64_t v54 = v7;
  uint64_t v47 = type metadata accessor for Model();
  OUTLINED_FUNCTION_0();
  uint64_t v52 = v8;
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_15();
  uint64_t v10 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v53 = v11;
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = *v3;
  uint64_t v48 = v3[1];
  unint64_t v15 = v3[3];
  unint64_t v50 = v3[2];
  uint64_t v51 = v14;
  uint64_t v16 = v3[4];
  uint64_t v17 = v3[5];
  uint64_t v18 = v3[6];
  unint64_t v19 = v3[7];
  uint64_t v20 = v3[8];
  static _ValidationUtilities.validateWriteLocation(atURL:defaultName:fileExtension:)(v55, 0xD000000000000016, (void *)0x80000002272D8B60, 0x6C65646F6D6C6DLL, (void *)0xE700000000000000, (uint64_t)v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!v1)
  {
    uint64_t v40 = 0;
    uint64_t v41 = v20;
    unint64_t v42 = v19;
    uint64_t v43 = v18;
    uint64_t v44 = v17;
    uint64_t v45 = v16;
    unint64_t v46 = v15;
    uint64_t v55 = v0;
    v39[1] = v10;
    _s8CreateML19MLClassifierMetricsVWOcTm_0(v49, v54, (void (*)(void))type metadata accessor for AnyTreeClassifierModel);
    uint64_t v21 = v48;
    if (v48)
    {
      uint64_t v22 = v51;
      uint64_t v23 = v51;
      uint64_t v24 = v48;
      unint64_t v25 = v50;
      unint64_t v26 = v46;
      uint64_t v27 = v45;
      uint64_t v28 = v44;
      uint64_t v29 = v43;
      unint64_t v30 = v42;
      uint64_t v31 = v41;
    }
    else
    {
      uint64_t v33 = NSFullUserName();
      uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v24 = v34;

      uint64_t v27 = 0;
      uint64_t v28 = 0;
      uint64_t v31 = 0;
      unint64_t v25 = 0xD000000000000033;
      unint64_t v26 = 0x80000002272D4DC0;
      unint64_t v30 = 0xE100000000000000;
      uint64_t v29 = 49;
      uint64_t v22 = v51;
    }
    uint64_t v32 = v52;
    v56[0] = v23;
    v56[1] = v24;
    v56[2] = v25;
    v56[3] = v26;
    v56[4] = v27;
    v56[5] = v28;
    v56[6] = v29;
    v56[7] = v30;
    v56[8] = v31;
    outlined copy of MLModelMetadata?(v22, v21);
    uint64_t v35 = v54;
    uint64_t v36 = v55;
    uint64_t v37 = v40;
    specialized CoreMLExportable.export(metadata:)(v56);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of MLRandomForestClassifier.ModelParameters.ValidationData(v35, (void (*)(void))type metadata accessor for AnyTreeClassifierModel);
    if (!v37)
    {
      Model.write(to:)();
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v36, v47);
    }
    OUTLINED_FUNCTION_25_0();
    v38();
  }
  OUTLINED_FUNCTION_8_1();
}

void MLRandomForestClassifier.write(toFile:metadata:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v1 = type metadata accessor for URL.DirectoryHint();
  OUTLINED_FUNCTION_0();
  uint64_t v3 = v2;
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_3_0();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v9 = OUTLINED_FUNCTION_17(v8);
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_24_8();
  uint64_t v10 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v12 = v11;
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_3_0();
  uint64_t v16 = v15 - v14;
  __swift_storeEnumTagSinglePayload(v0, 1, 1, v10);
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v7, *MEMORY[0x263F06E50], v1);
  swift_bridgeObjectRetain();
  URL.init(filePath:directoryHint:relativeTo:)();
  MLRandomForestClassifier.write(to:metadata:)();
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v16, v10);
  OUTLINED_FUNCTION_8_1();
}

unint64_t MLRandomForestClassifier.debugDescription.getter()
{
  type metadata accessor for MLClassifierMetrics.Contents(0);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_27_7();
  uint64_t v3 = type metadata accessor for MLRandomForestClassifier();
  uint64_t v4 = MLRandomForestClassifier.ModelParameters.description.getter();
  uint64_t v6 = v5;
  unint64_t v7 = MLClassifierMetrics.description.getter();
  uint64_t v9 = v8;
  _s8CreateML19MLClassifierMetricsVWOcTm_0(v0 + *(int *)(v3 + 40), v1, (void (*)(void))type metadata accessor for MLClassifierMetrics.Contents);
  LODWORD(v3) = swift_getEnumCaseMultiPayload();
  outlined destroy of MLRandomForestClassifier.ModelParameters.ValidationData(v1, (void (*)(void))type metadata accessor for MLClassifierMetrics.Contents);
  unint64_t v10 = MLClassifierMetrics.description.getter();
  uint64_t v12 = v11;
  v13._uint64_t countAndFlagsBits = v4;
  v13._id object = v6;
  String.append(_:)(v13);
  v14._uint64_t countAndFlagsBits = v7;
  v14._id object = v9;
  String.append(_:)(v14);
  v15._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  v15._id object = (void *)0x80000002272D3FE0;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  if (v3 <= 1)
  {
    v16._uint64_t countAndFlagsBits = v10;
    v16._id object = v12;
    String.append(_:)(v16);
    v17._uint64_t countAndFlagsBits = 0xD000000000000020;
    v17._id object = (void *)0x80000002272D4000;
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0xD000000000000023;
}

NSAttributedString MLRandomForestClassifier.playgroundDescription.getter@<X0>(NSAttributedString *a1@<X8>)
{
  unint64_t v2 = type metadata accessor for NSAttributedString();
  v3._uint64_t countAndFlagsBits = MLRandomForestClassifier.debugDescription.getter();
  result.super.CFDataRef isa = NSAttributedString.__allocating_init(string:)(v3).super.isa;
  a1[3].super.CFDataRef isa = (Class)v2;
  a1->super.CFDataRef isa = result.super.isa;
  return result;
}

uint64_t objectdestroyTm_3()
{
  uint64_t v1 = *(void *)(type metadata accessor for AnyTreeClassifierModel() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + v3 + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for BaseTreeClassifierModel();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_25_0();
  v5();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, v3 + v4, v2 | 7);
}

uint64_t partial apply for closure #1 in MLRandomForestClassifier.init(checkpoint:)()
{
  OUTLINED_FUNCTION_11();
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for AnyTreeClassifierModel();
  OUTLINED_FUNCTION_39_0(v2);
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)OUTLINED_FUNCTION_7_1(v3);
  void *v4 = v5;
  v4[1] = protocol witness for SupervisedEstimator.fitted<A, B>(to:validateOn:eventHandler:) in conformance MLImageClassifier.Classifier;
  return closure #1 in MLRandomForestClassifier.init(checkpoint:)(v1);
}

uint64_t _s8CreateML19MLClassifierMetricsVWOcTm_0(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_8();
  uint64_t v4 = OUTLINED_FUNCTION_111();
  v5(v4);
  return a2;
}

id sub_22719BBC4@<X0>(void *a1@<X8>)
{
  id result = MLRandomForestClassifier.model.getter();
  *a1 = result;
  return result;
}

void *initializeBufferWithCopyOfBuffer for MLRandomForestClassifier(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (void *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v9 = a2 + 2;
    uint64_t v8 = a2[2];
    swift_bridgeObjectRetain();
    if (v8)
    {
      uint64_t v10 = a2[3];
      uint64_t v11 = a2[4];
      a1[2] = v8;
      a1[3] = v10;
      a1[4] = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *((_OWORD *)a1 + 1) = *v9;
      a1[4] = a2[4];
    }
    uint64_t v13 = type metadata accessor for AnyTreeClassifierModel();
    uint64_t v14 = *(int *)(v13 + 24);
    Swift::String v15 = (char *)a1 + v14;
    Swift::String v16 = (char *)a2 + v14;
    uint64_t v17 = type metadata accessor for BaseTreeClassifierModel();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
    uint64_t v18 = *(int *)(v13 + 28);
    unint64_t v19 = (char *)a1 + v18;
    uint64_t v20 = (char *)a2 + v18;
    uint64_t v21 = *(void *)v20;
    LOBYTE(v20) = v20[8];
    *(void *)unint64_t v19 = v21;
    uint64_t v22 = a3[5];
    uint64_t v23 = a3[6];
    uint64_t v24 = *(void **)((char *)a2 + v22);
    v19[8] = (char)v20;
    *(void *)((char *)a1 + v22) = v24;
    unint64_t v25 = (void *)((char *)a1 + v23);
    uint64_t v26 = *(void *)((char *)a2 + v23);
    uint64_t v27 = *(void *)((char *)a2 + v23 + 8);
    uint64_t v28 = a3[7];
    uint64_t v29 = a3[8];
    uint64_t v30 = *(void *)((char *)a2 + v28);
    *unint64_t v25 = v26;
    v25[1] = v27;
    *(void *)((char *)a1 + v28) = v30;
    uint64_t v31 = (char *)a1 + v29;
    uint64_t v32 = (char *)a2 + v29;
    uint64_t v33 = *(void *)((char *)a2 + v29 + 24);
    swift_bridgeObjectRetain();
    id v34 = v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v33)
    {
      *((void *)v31 + 3) = v33;
      (**(void (***)(char *, char *, uint64_t))(v33 - 8))(v31, v32, v33);
    }
    else
    {
      long long v35 = *((_OWORD *)v32 + 1);
      *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
      *((_OWORD *)v31 + 1) = v35;
    }
    long long v36 = *((_OWORD *)v32 + 3);
    *((_OWORD *)v31 + 2) = *((_OWORD *)v32 + 2);
    *((_OWORD *)v31 + 3) = v36;
    *((_OWORD *)v31 + 4) = *((_OWORD *)v32 + 4);
    *((void *)v31 + 10) = *((void *)v32 + 10);
    uint64_t v37 = a3[9];
    uint64_t v38 = (void **)((char *)a1 + v37);
    uint64_t v39 = (void **)((char *)a2 + v37);
    type metadata accessor for MLClassifierMetrics.Contents(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v45 = *v39;
      id v46 = v45;
      *uint64_t v38 = v45;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *uint64_t v38 = *v39;
      uint64_t v41 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v42 = *(int *)(v41 + 20);
      uint64_t v64 = (char *)v39 + v42;
      uint64_t v65 = (char *)v38 + v42;
      uint64_t v43 = type metadata accessor for DataFrame();
      uint64_t v44 = *(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 16);
      v44(v65, v64, v43);
      v44((char *)v38 + *(int *)(v41 + 24), (char *)v39 + *(int *)(v41 + 24), v43);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v47 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v47 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(v47);
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v48 - 8) + 16))(v38, v39, v48);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v49 = a3[10];
    unint64_t v50 = (void **)((char *)a1 + v49);
    uint64_t v51 = (void **)((char *)a2 + v49);
    int v52 = swift_getEnumCaseMultiPayload();
    if (v52 == 2)
    {
      uint64_t v59 = *v51;
      id v60 = v59;
      *unint64_t v50 = v59;
    }
    else if (v52 == 1)
    {
      *unint64_t v50 = *v51;
      uint64_t v53 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v54 = *(int *)(v53 + 20);
      uint64_t v55 = (char *)v50 + v54;
      uint64_t v56 = (char *)v51 + v54;
      uint64_t v57 = type metadata accessor for DataFrame();
      uint64_t v58 = *(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 16);
      v58(v55, v56, v57);
      v58((char *)v50 + *(int *)(v53 + 24), (char *)v51 + *(int *)(v53 + 24), v57);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v61 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v61 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(v61);
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v62 - 8) + 16))(v50, v51, v62);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void destroy for MLRandomForestClassifier(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v4 = a1 + *(int *)(type metadata accessor for AnyTreeClassifierModel() + 24);
  uint64_t v5 = type metadata accessor for BaseTreeClassifierModel();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = a1 + a2[8];
  if (*(void *)(v6 + 24)) {
    __swift_destroy_boxed_opaque_existential_0(v6);
  }
  uint64_t v7 = (id *)(a1 + a2[9]);
  type metadata accessor for MLClassifierMetrics.Contents(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:

      break;
    case 1:
      uint64_t v10 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v11 = (char *)v7 + *(int *)(v10 + 20);
      uint64_t v12 = type metadata accessor for DataFrame();
      uint64_t v13 = *(void (**)(char *, uint64_t))(*(void *)(v12 - 8) + 8);
      v13(v11, v12);
      v13((char *)v7 + *(int *)(v10 + 24), v12);
      break;
    case 0:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v9 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v9 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(v9);
      (*(void (**)(id *, uint64_t))(*(void *)(v14 - 8) + 8))(v7, v14);
      break;
  }
  Swift::String v15 = (void **)(a1 + a2[10]);
  int v16 = swift_getEnumCaseMultiPayload();
  if (v16 == 2)
  {
    uint64_t v18 = *v15;
  }
  else
  {
    if (v16 == 1)
    {
      uint64_t v19 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v20 = (char *)v15 + *(int *)(v19 + 20);
      uint64_t v21 = type metadata accessor for DataFrame();
      uint64_t v26 = *(void (**)(void **, uint64_t))(*(void *)(v21 - 8) + 8);
      ((void (*)(void *__return_ptr, char *, uint64_t))v26)((void *)(v21 - 8), v20, v21);
      uint64_t v22 = (void **)((char *)v15 + *(int *)(v19 + 24));
      uint64_t v23 = v21;
      uint64_t v24 = v26;
    }
    else
    {
      if (v16) {
        return;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v17 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v17 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(v17);
      uint64_t v24 = *(void (**)(void **, uint64_t))(*(void *)(v25 - 8) + 8);
      uint64_t v23 = v25;
      uint64_t v22 = v15;
    }
    v24(v22, v23);
  }
}

void *initializeWithCopy for MLRandomForestClassifier(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v8 = a2 + 2;
  uint64_t v7 = a2[2];
  swift_bridgeObjectRetain();
  if (v7)
  {
    uint64_t v9 = a2[3];
    uint64_t v10 = a2[4];
    a1[2] = v7;
    a1[3] = v9;
    a1[4] = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *((_OWORD *)a1 + 1) = *(_OWORD *)v8;
    a1[4] = v8[2];
  }
  uint64_t v11 = type metadata accessor for AnyTreeClassifierModel();
  uint64_t v12 = *(int *)(v11 + 24);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for BaseTreeClassifierModel();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  uint64_t v16 = *(int *)(v11 + 28);
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = *(void *)v18;
  LOBYTE(v18) = v18[8];
  *(void *)uint64_t v17 = v19;
  uint64_t v20 = a3[5];
  uint64_t v21 = a3[6];
  uint64_t v22 = *(void **)((char *)a2 + v20);
  v17[8] = (char)v18;
  *(void *)((char *)a1 + v20) = v22;
  uint64_t v23 = (void *)((char *)a1 + v21);
  uint64_t v24 = *(void *)((char *)a2 + v21);
  uint64_t v25 = *(void *)((char *)a2 + v21 + 8);
  uint64_t v26 = a3[7];
  uint64_t v27 = a3[8];
  uint64_t v28 = *(void *)((char *)a2 + v26);
  *uint64_t v23 = v24;
  v23[1] = v25;
  *(void *)((char *)a1 + v26) = v28;
  uint64_t v29 = (char *)a1 + v27;
  uint64_t v30 = (char *)a2 + v27;
  uint64_t v31 = *(void *)((char *)a2 + v27 + 24);
  swift_bridgeObjectRetain();
  id v32 = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v31)
  {
    *((void *)v29 + 3) = v31;
    (**(void (***)(char *, char *, uint64_t))(v31 - 8))(v29, v30, v31);
  }
  else
  {
    long long v33 = *((_OWORD *)v30 + 1);
    *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
    *((_OWORD *)v29 + 1) = v33;
  }
  long long v34 = *((_OWORD *)v30 + 3);
  *((_OWORD *)v29 + 2) = *((_OWORD *)v30 + 2);
  *((_OWORD *)v29 + 3) = v34;
  *((_OWORD *)v29 + 4) = *((_OWORD *)v30 + 4);
  *((void *)v29 + 10) = *((void *)v30 + 10);
  uint64_t v35 = a3[9];
  long long v36 = (void **)((char *)a1 + v35);
  uint64_t v37 = (void **)((char *)a2 + v35);
  type metadata accessor for MLClassifierMetrics.Contents(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v43 = *v37;
    id v44 = v43;
    char *v36 = v43;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    char *v36 = *v37;
    uint64_t v39 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v40 = *(int *)(v39 + 20);
    uint64_t v62 = (char *)v37 + v40;
    uint64_t v63 = (char *)v36 + v40;
    uint64_t v41 = type metadata accessor for DataFrame();
    uint64_t v42 = *(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 16);
    v42(v63, v62, v41);
    v42((char *)v36 + *(int *)(v39 + 24), (char *)v37 + *(int *)(v39 + 24), v41);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v45 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      uint64_t v45 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(v45);
    (*(void (**)(void **, void **, uint64_t))(*(void *)(v46 - 8) + 16))(v36, v37, v46);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v47 = a3[10];
  uint64_t v48 = (void **)((char *)a1 + v47);
  uint64_t v49 = (void **)((char *)a2 + v47);
  int v50 = swift_getEnumCaseMultiPayload();
  if (v50 == 2)
  {
    uint64_t v57 = *v49;
    id v58 = v57;
    *uint64_t v48 = v57;
  }
  else if (v50 == 1)
  {
    *uint64_t v48 = *v49;
    uint64_t v51 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v52 = *(int *)(v51 + 20);
    uint64_t v53 = (char *)v48 + v52;
    uint64_t v54 = (char *)v49 + v52;
    uint64_t v55 = type metadata accessor for DataFrame();
    uint64_t v56 = *(void (**)(char *, char *, uint64_t))(*(void *)(v55 - 8) + 16);
    v56(v53, v54, v55);
    v56((char *)v48 + *(int *)(v51 + 24), (char *)v49 + *(int *)(v51 + 24), v55);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v59 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      uint64_t v59 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(v59);
    (*(void (**)(void **, void **, uint64_t))(*(void *)(v60 - 8) + 16))(v48, v49, v60);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for MLRandomForestClassifier(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a1 + 2;
  uint64_t v8 = a2 + 2;
  uint64_t v7 = a2[2];
  if (a1[2])
  {
    if (v7)
    {
      a1[2] = v7;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[3] = a2[3];
      a1[4] = a2[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of URL?((uint64_t)(a1 + 2), &demangling cache variable for type metadata for FeatureVectorizer<Float>.Transformer);
      uint64_t v9 = a2[4];
      _OWORD *v6 = *v8;
      a1[4] = v9;
    }
  }
  else if (v7)
  {
    a1[2] = v7;
    a1[3] = a2[3];
    a1[4] = a2[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v10 = *v8;
    a1[4] = a2[4];
    _OWORD *v6 = v10;
  }
  uint64_t v11 = type metadata accessor for AnyTreeClassifierModel();
  uint64_t v12 = *(int *)(v11 + 24);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for BaseTreeClassifierModel();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 24))(v13, v14, v15);
  uint64_t v16 = *(int *)(v11 + 28);
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = *(void *)v18;
  LOBYTE(v18) = v18[8];
  *(void *)uint64_t v17 = v19;
  v17[8] = (char)v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v20 = a3[5];
  uint64_t v21 = *(void **)((char *)a2 + v20);
  uint64_t v22 = *(void **)((char *)a1 + v20);
  *(void *)((char *)a1 + v20) = v21;
  id v23 = v21;

  uint64_t v24 = a3[6];
  uint64_t v25 = (void *)((char *)a1 + v24);
  uint64_t v26 = (void *)((char *)a2 + v24);
  *uint64_t v25 = *v26;
  v25[1] = v26[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v27 = a3[8];
  uint64_t v28 = (uint64_t)a1 + v27;
  uint64_t v29 = (void *)((char *)a2 + v27);
  uint64_t v30 = *(void *)((char *)a2 + v27 + 24);
  if (*(void *)((char *)a1 + v27 + 24))
  {
    if (v30)
    {
      __swift_assign_boxed_opaque_existential_0((uint64_t *)v28, v29);
      goto LABEL_15;
    }
    __swift_destroy_boxed_opaque_existential_0(v28);
  }
  else if (v30)
  {
    *(void *)(v28 + 24) = v30;
    (**(void (***)(uint64_t, char *))(v30 - 8))(v28, (char *)v29);
    goto LABEL_15;
  }
  long long v31 = *((_OWORD *)v29 + 1);
  *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
  *(_OWORD *)(v28 + 16) = v31;
LABEL_15:
  *(void *)(v28 + 32) = v29[4];
  *(void *)(v28 + 40) = v29[5];
  *(void *)(v28 + 48) = v29[6];
  *(void *)(v28 + 56) = v29[7];
  *(void *)(v28 + 64) = v29[8];
  *(void *)(v28 + 72) = v29[9];
  *(void *)(v28 + 80) = v29[10];
  if (a1 != a2)
  {
    uint64_t v32 = a3[9];
    long long v33 = (void **)((char *)a1 + v32);
    long long v34 = (void **)((char *)a2 + v32);
    outlined destroy of MLRandomForestClassifier.ModelParameters.ValidationData((uint64_t)a1 + v32, (void (*)(void))type metadata accessor for MLClassifierMetrics.Contents);
    type metadata accessor for MLClassifierMetrics.Contents(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v40 = *v34;
      id v41 = v40;
      *long long v33 = v40;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *long long v33 = *v34;
      uint64_t v36 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v37 = *(int *)(v36 + 20);
      uint64_t v59 = (char *)v34 + v37;
      uint64_t v60 = (char *)v33 + v37;
      uint64_t v38 = type metadata accessor for DataFrame();
      uint64_t v39 = *(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 16);
      v39(v60, v59, v38);
      v39((char *)v33 + *(int *)(v36 + 24), (char *)v34 + *(int *)(v36 + 24), v38);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v42 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v42 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(v42);
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v43 - 8) + 16))(v33, v34, v43);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v44 = a3[10];
    uint64_t v45 = (void **)((char *)a1 + v44);
    uint64_t v46 = (void **)((char *)a2 + v44);
    outlined destroy of MLRandomForestClassifier.ModelParameters.ValidationData((uint64_t)a1 + v44, (void (*)(void))type metadata accessor for MLClassifierMetrics.Contents);
    int v47 = swift_getEnumCaseMultiPayload();
    if (v47 == 2)
    {
      uint64_t v54 = *v46;
      id v55 = v54;
      *uint64_t v45 = v54;
    }
    else if (v47 == 1)
    {
      *uint64_t v45 = *v46;
      uint64_t v48 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v49 = *(int *)(v48 + 20);
      int v50 = (char *)v45 + v49;
      uint64_t v51 = (char *)v46 + v49;
      uint64_t v52 = type metadata accessor for DataFrame();
      uint64_t v53 = *(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 16);
      v53(v50, v51, v52);
      v53((char *)v45 + *(int *)(v48 + 24), (char *)v46 + *(int *)(v48 + 24), v52);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v56 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v56 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(v56);
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v57 - 8) + 16))(v45, v46, v57);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for MLRandomForestClassifier(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v7 = type metadata accessor for AnyTreeClassifierModel();
  uint64_t v8 = *(int *)(v7 + 24);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for BaseTreeClassifierModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  uint64_t v12 = *(int *)(v7 + 28);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  *(void *)uint64_t v13 = *(void *)v14;
  *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
  uint64_t v15 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v15) = *(_OWORD *)(a2 + v15);
  uint64_t v16 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  memcpy((void *)(a1 + v16), (const void *)(a2 + v16), 0x58uLL);
  uint64_t v17 = a3[9];
  uint64_t v18 = (char *)(a1 + v17);
  uint64_t v19 = (char *)(a2 + v17);
  uint64_t v20 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *(void *)uint64_t v18 = *(void *)v19;
    uint64_t v24 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v25 = *(int *)(v24 + 20);
    id v41 = &v19[v25];
    uint64_t v42 = &v18[v25];
    uint64_t v26 = type metadata accessor for DataFrame();
    uint64_t v27 = *(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32);
    v27(v42, v41, v26);
    v27(&v18[*(int *)(v24 + 24)], &v19[*(int *)(v24 + 24)], v26);
LABEL_8:
    swift_storeEnumTagMultiPayload();
    goto LABEL_10;
  }
  if (!EnumCaseMultiPayload)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v22 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      uint64_t v22 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(v22);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v18, v19, v23);
    swift_storeEnumTagMultiPayload();
    goto LABEL_8;
  }
  memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64));
LABEL_10:
  uint64_t v28 = a3[10];
  uint64_t v29 = (char *)(a1 + v28);
  uint64_t v30 = (char *)(a2 + v28);
  int v31 = swift_getEnumCaseMultiPayload();
  if (v31 == 1)
  {
    *(void *)uint64_t v29 = *(void *)v30;
    uint64_t v34 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v35 = *(int *)(v34 + 20);
    uint64_t v36 = &v29[v35];
    uint64_t v37 = &v30[v35];
    uint64_t v38 = type metadata accessor for DataFrame();
    uint64_t v39 = *(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 32);
    v39(v36, v37, v38);
    v39(&v29[*(int *)(v34 + 24)], &v30[*(int *)(v34 + 24)], v38);
  }
  else
  {
    if (v31)
    {
      memcpy(v29, v30, *(void *)(*(void *)(v20 - 8) + 64));
      return a1;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v32 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      uint64_t v32 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(v32);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 32))(v29, v30, v33);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithTake for MLRandomForestClassifier(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[2];
  if (a1[2])
  {
    if (v7)
    {
      a1[2] = v7;
      swift_bridgeObjectRelease();
      uint64_t v8 = a2[4];
      a1[3] = a2[3];
      a1[4] = v8;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of URL?((uint64_t)(a1 + 2), &demangling cache variable for type metadata for FeatureVectorizer<Float>.Transformer);
  }
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  a1[4] = a2[4];
LABEL_6:
  uint64_t v9 = type metadata accessor for AnyTreeClassifierModel();
  uint64_t v10 = *(int *)(v9 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for BaseTreeClassifierModel();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  uint64_t v14 = *(int *)(v9 + 28);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = *(void *)v16;
  LOBYTE(v16) = v16[8];
  *(void *)uint64_t v15 = v17;
  v15[8] = (char)v16;
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[5];
  uint64_t v19 = *(void **)((char *)a1 + v18);
  *(void *)((char *)a1 + v18) = *(void *)((char *)a2 + v18);

  uint64_t v20 = a3[6];
  uint64_t v21 = (void *)((char *)a1 + v20);
  uint64_t v22 = (void *)((char *)a2 + v20);
  uint64_t v24 = *v22;
  uint64_t v23 = v22[1];
  *uint64_t v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_bridgeObjectRelease();
  uint64_t v25 = a3[8];
  uint64_t v26 = (uint64_t)a1 + v25;
  uint64_t v27 = (char *)a2 + v25;
  if (*(void *)((char *)a1 + v25 + 24)) {
    __swift_destroy_boxed_opaque_existential_0(v26);
  }
  long long v28 = *((_OWORD *)v27 + 1);
  *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
  *(_OWORD *)(v26 + 16) = v28;
  long long v29 = *((_OWORD *)v27 + 3);
  *(_OWORD *)(v26 + 32) = *((_OWORD *)v27 + 2);
  *(_OWORD *)(v26 + 48) = v29;
  *(void *)(v26 + 64) = *((void *)v27 + 8);
  *(_OWORD *)(v26 + 72) = *(_OWORD *)(v27 + 72);
  if (a1 == a2) {
    return a1;
  }
  uint64_t v30 = a3[9];
  int v31 = (char *)a1 + v30;
  uint64_t v32 = (char *)a2 + v30;
  outlined destroy of MLRandomForestClassifier.ModelParameters.ValidationData((uint64_t)a1 + v30, (void (*)(void))type metadata accessor for MLClassifierMetrics.Contents);
  uint64_t v33 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *(void *)int v31 = *(void *)v32;
    uint64_t v37 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v38 = *(int *)(v37 + 20);
    uint64_t v54 = &v32[v38];
    id v55 = &v31[v38];
    uint64_t v39 = type metadata accessor for DataFrame();
    uint64_t v40 = *(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 32);
    v40(v55, v54, v39);
    v40(&v31[*(int *)(v37 + 24)], &v32[*(int *)(v37 + 24)], v39);
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64));
      goto LABEL_18;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v35 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      uint64_t v35 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(v35);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 32))(v31, v32, v36);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
LABEL_18:
  uint64_t v41 = a3[10];
  uint64_t v42 = (char *)a1 + v41;
  uint64_t v43 = (char *)a2 + v41;
  outlined destroy of MLRandomForestClassifier.ModelParameters.ValidationData((uint64_t)a1 + v41, (void (*)(void))type metadata accessor for MLClassifierMetrics.Contents);
  int v44 = swift_getEnumCaseMultiPayload();
  if (v44 == 1)
  {
    *(void *)uint64_t v42 = *(void *)v43;
    uint64_t v47 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v48 = *(int *)(v47 + 20);
    uint64_t v49 = &v42[v48];
    int v50 = &v43[v48];
    uint64_t v51 = type metadata accessor for DataFrame();
    uint64_t v52 = *(void (**)(char *, char *, uint64_t))(*(void *)(v51 - 8) + 32);
    v52(v49, v50, v51);
    v52(&v42[*(int *)(v47 + 24)], &v43[*(int *)(v47 + 24)], v51);
  }
  else
  {
    if (v44)
    {
      memcpy(v42, v43, *(void *)(*(void *)(v33 - 8) + 64));
      return a1;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v45 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      uint64_t v45 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(v45);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 32))(v42, v43, v46);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t getEnumTagSinglePayload for MLRandomForestClassifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_22719D708);
}

uint64_t sub_22719D708(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for AnyTreeClassifierModel();
  OUTLINED_FUNCTION_6_1();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
LABEL_8:
    return __swift_getEnumTagSinglePayload(v9, a2, v8);
  }
  if (a2 != 0x7FFFFFFF)
  {
    uint64_t v8 = type metadata accessor for MLClassifierMetrics(0);
    uint64_t v9 = a1 + *(int *)(a3 + 36);
    goto LABEL_8;
  }
  unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
  if (v10 >= 0xFFFFFFFF) {
    LODWORD(v10) = -1;
  }
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for MLRandomForestClassifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_22719D7CC);
}

void sub_22719D7CC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for AnyTreeClassifierModel();
  OUTLINED_FUNCTION_6_1();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
      return;
    }
    uint64_t v10 = type metadata accessor for MLClassifierMetrics(0);
    uint64_t v11 = a1 + *(int *)(a4 + 36);
  }

  __swift_storeEnumTagSinglePayload(v11, a2, a2, v10);
}

uint64_t type metadata completion function for MLRandomForestClassifier()
{
  uint64_t result = type metadata accessor for AnyTreeClassifierModel();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for MLClassifierMetrics.Contents(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_22719D970()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t partial apply for closure #1 in static MLRandomForestClassifier.handleResult(_:session:fulfill:)(uint64_t a1)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v7 = v1[6];
  uint64_t v8 = swift_task_alloc();
  uint64_t v9 = (void *)OUTLINED_FUNCTION_7_1(v8);
  *uint64_t v9 = v10;
  v9[1] = protocol witness for SupervisedEstimator.fitted<A, B>(to:validateOn:eventHandler:) in conformance MLImageClassifier.Classifier;
  return closure #1 in static MLRandomForestClassifier.handleResult(_:session:fulfill:)(a1, v3, v4, v5, v6, v7);
}

uint64_t outlined destroy of MLRandomForestClassifier.ModelParameters.ValidationData(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_25_0();
  v3();
  return a1;
}

uint64_t _s8CreateML22AnyTreeClassifierModelVWObTm_0(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_8();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t OUTLINED_FUNCTION_6_34()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_17_22()
{
  uint64_t v2 = *(void *)(v0 - 288);
  return outlined destroy of MLRandomForestClassifier.ModelParameters(v2);
}

uint64_t OUTLINED_FUNCTION_30_18()
{
  return *(void *)(v0 - 272);
}

uint64_t OUTLINED_FUNCTION_32_16()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_45_12()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_48_9(uint64_t a1, void (*a2)(void))
{
  uint64_t v4 = *(void *)(v2 - 376);
  return outlined destroy of MLRandomForestClassifier.ModelParameters.ValidationData(v4, a2);
}

uint64_t OUTLINED_FUNCTION_49_6()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_52_7()
{
  return type metadata accessor for MLRandomForestClassifier();
}

unint64_t MethodName.rawValue.getter(char a1)
{
  unint64_t result = 0x6172745F74696E69;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000010;
      break;
    case 2:
      unint64_t result = 0xD000000000000014;
      break;
    case 3:
      unint64_t result = 0x745F656D75736572;
      break;
    case 4:
    case 18:
    case 21:
      unint64_t result = 0xD000000000000011;
      break;
    case 5:
      unint64_t result = 0x6E69617274;
      break;
    case 6:
      unint64_t result = 1702257011;
      break;
    case 7:
      unint64_t result = 0x6174656D5F646461;
      break;
    case 8:
      unint64_t result = 0xD000000000000010;
      break;
    case 9:
      unint64_t result = 0x737265765F746567;
      break;
    case 10:
      unint64_t result = 0x74636964657270;
      break;
    case 11:
      unint64_t result = 0x657A696C797473;
      break;
    case 12:
      unint64_t result = 0xD000000000000012;
      break;
    case 13:
      unint64_t result = 0x657461756C617665;
      break;
    case 14:
      unint64_t result = 0x74706F5F74696E69;
      break;
    case 15:
      unint64_t result = 0x6569665F7473696CLL;
      break;
    case 16:
      unint64_t result = 0x756C61765F746567;
      break;
    case 17:
      unint64_t result = 0x6E656D6D6F636572;
      break;
    case 19:
      unint64_t result = 0xD000000000000018;
      break;
    case 20:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 22:
      unint64_t result = 0xD000000000000019;
      break;
    case 23:
      unint64_t result = 0xD00000000000002BLL;
      break;
    case 24:
      unint64_t result = 0xD000000000000025;
      break;
    case 25:
      unint64_t result = 0xD000000000000024;
      break;
    case 26:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 27:
      unint64_t result = 0xD000000000000021;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t MLHandActionClassifier.GraphCNN.updateGraphCNN(from:)(uint64_t a1)
{
  uint64_t v5 = v1;
  uint64_t v7 = type metadata accessor for MLHandActionClassifier.GraphCNNModel(0);
  uint64_t v8 = OUTLINED_FUNCTION_17(v7);
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_27_7();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SGD<MLHandActionClassifier.GraphCNNModel>);
  uint64_t v10 = OUTLINED_FUNCTION_17(v9);
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_33();
  uint64_t v13 = v11 - v12;
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_23_13();
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v16 = OUTLINED_FUNCTION_17(v15);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.appendingPathComponent(_:)();
  char v52 = 1;
  v34[0] = 1;
  uint64_t v35 = 44;
  unint64_t v36 = 0xE100000000000000;
  uint64_t v37 = 0;
  unint64_t v38 = 0xE000000000000000;
  uint64_t v39 = 92;
  unint64_t v40 = 0xE100000000000000;
  char v41 = 1;
  uint64_t v42 = 34;
  unint64_t v43 = 0xE100000000000000;
  char v44 = 1;
  uint64_t v45 = &outlined read-only object #0 of default argument 1 of MLDataTable.init(contentsOf:options:);
  uint64_t v46 = 10;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  unint64_t v47 = 0xE100000000000000;
  char v50 = 1;
  uint64_t v51 = 0;
  uint64_t result = MLDataTable.init(contentsOf:options:)(v18, v34, (uint64_t)&v32);
  if (!v2)
  {
    id v20 = v32;
    char v21 = v33;
    id v22 = specialized static _ModelCheckpoint<>.getCheckpointDictionary(from:)(v32, v33);
    uint64_t v29 = v13;
    uint64_t v30 = v5;
    swift_beginAccess();
    outlined init with copy of MLHandActionClassifier.GraphCNNModel();
    uint64_t v31 = (uint64_t)v22;
    specialized static SGD.createOptimizer(for:checkpointDictionary:)(v4, (uint64_t)v22);
    outlined destroy of MLHandActionClassifier.GraphCNNModel(v4, (void (*)(void))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
    uint64_t v23 = a1;
    uint64_t v24 = v30;
    specialized _ModelCheckpoint<>.updateGraph<A>(from:optimizer:checkpointDictionary:)(v23, v3, v31);
    uint64_t v25 = v24;
    outlined consume of Result<_DataTable, Error>(v20, v21);
    swift_bridgeObjectRelease();
    uint64_t v26 = v29;
    outlined init with take of DataFrame?(v3, v29, &demangling cache variable for type metadata for SGD<MLHandActionClassifier.GraphCNNModel>);
    uint64_t v27 = v25 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_optimizer;
    swift_beginAccess();
    outlined assign with take of SGD<MLHandActionClassifier.GraphCNNModel>(v26, v27);
    return swift_endAccess();
  }
  return result;
}

void specialized SGD.updateOptimizerState(for:shape:using:name:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Tensor();
  uint64_t v47 = *(void *)(v13 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v13);
  uint64_t v45 = (uint64_t)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v46 = (char *)&v39 - v16;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TensorShape?);
  uint64_t v18 = MEMORY[0x270FA5388](v17 - 8);
  char v44 = (char *)&v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  char v21 = (char *)&v39 - v20;
  outlined init with copy of URL?(a2, (uint64_t)&v39 - v20, &demangling cache variable for type metadata for TensorShape?);
  uint64_t v22 = type metadata accessor for TensorShape();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v21, 1, v22);
  uint64_t v49 = a4;
  if (EnumTagSinglePayload != 1)
  {
    uint64_t v48 = a3;
    unint64_t v43 = v12;
    uint64_t v28 = TensorShape.dimensions.getter();
    (*(void (**)(char *, uint64_t))(*(void *)(v22 - 8) + 8))(v21, v22);
    goto LABEL_13;
  }
  uint64_t v41 = v22;
  uint64_t v42 = a1;
  outlined destroy of URL?((uint64_t)v21, &demangling cache variable for type metadata for TensorShape?);
  uint64_t v50 = 0;
  unint64_t v51 = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v50 = a4;
  unint64_t v51 = a5;
  v24._uint64_t countAndFlagsBits = 0xD000000000000019;
  v24._id object = (void *)0x80000002272D7D50;
  String.append(_:)(v24);
  uint64_t v25 = specialized Dictionary.subscript.getter(v50, v51, a3);
  swift_bridgeObjectRelease();
  if (!v25) {
    return;
  }
  uint64_t v48 = a3;
  unint64_t v43 = v12;
  uint64_t v40 = v13;
  uint64_t v26 = *(void *)(v25 + 16);
  if (!v26)
  {
    swift_bridgeObjectRelease();
    uint64_t v28 = MEMORY[0x263F8EE78];
    uint64_t v13 = v40;
    uint64_t v22 = v41;
LABEL_13:
    uint64_t v50 = 0;
    unint64_t v51 = 0xE000000000000000;
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v50 = v49;
    unint64_t v51 = a5;
    v32._id object = (void *)0x80000002272D7D30;
    v32._uint64_t countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v32);
    uint64_t v33 = specialized Dictionary.subscript.getter(v50, v51, v48);
    swift_bridgeObjectRelease();
    if (v33)
    {
      uint64_t v34 = (uint64_t)v44;
      MEMORY[0x22A672540](v28);
      __swift_storeEnumTagSinglePayload(v34, 0, 1, v22);
      uint64_t v35 = v45;
      Array<A>.floatTensor(shape:)(v34, v33, v45);
      swift_bridgeObjectRelease();
      outlined destroy of URL?(v34, &demangling cache variable for type metadata for TensorShape?);
      uint64_t v37 = v46;
      uint64_t v36 = v47;
      (*(void (**)(char *, uint64_t, uint64_t))(v47 + 32))(v46, v35, v13);
      uint64_t v38 = (uint64_t)v43;
      (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v43, v37, v13);
      __swift_storeEnumTagSinglePayload(v38, 0, 1, v13);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SGD<MLHandActionClassifier.GraphCNNModel>);
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptimizerStateDictionary<MLHandActionClassifier.GraphCNNModel>);
      OptimizerStateDictionary.subscript.setter();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v13);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    return;
  }
  uint64_t v50 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26, 0);
  uint64_t v27 = 0;
  uint64_t v28 = v50;
  while (1)
  {
    double v29 = *(double *)(v25 + 8 * v27 + 32);
    if ((~*(void *)&v29 & 0x7FF0000000000000) == 0) {
      break;
    }
    if (v29 <= -9.22337204e18) {
      goto LABEL_19;
    }
    if (v29 >= 9.22337204e18) {
      goto LABEL_20;
    }
    uint64_t v50 = v28;
    unint64_t v31 = *(void *)(v28 + 16);
    unint64_t v30 = *(void *)(v28 + 24);
    if (v31 >= v30 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
      uint64_t v28 = v50;
    }
    ++v27;
    *(void *)(v28 + 16) = v31 + 1;
    *(void *)(v28 + 8 * v31 + 32) = (uint64_t)v29;
    if (v26 == v27)
    {
      swift_bridgeObjectRelease();
      uint64_t v22 = v41;
      uint64_t v13 = v40;
      goto LABEL_13;
    }
  }
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  __break(1u);
}

uint64_t specialized static SGD.createOptimizer(for:checkpointDictionary:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RegularizationKind?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (_DWORD *)((char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GradientClippingMode?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = specialized Dictionary.subscript.getter(0x676E696E7261656CLL, 0xEC00000065746152, a2);
  if (!v9) {
    goto LABEL_15;
  }
  uint64_t v10 = v9;
  if (*(void *)(v9 + 16) != 1)
  {
    swift_bridgeObjectRelease();
LABEL_15:
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(void *)uint64_t v19 = 0xD000000000000037;
    uint64_t v20 = "learningRate key not found in the checkpoint dictionary";
LABEL_20:
    *(void *)(v19 + 8) = (unint64_t)(v20 - 32) | 0x8000000000000000;
    *(_OWORD *)(v19 + 16) = 0u;
    *(_OWORD *)(v19 + 32) = 0u;
    *(unsigned char *)(v19 + 48) = 2;
    return swift_willThrow();
  }
  uint64_t v11 = specialized Dictionary.subscript.getter(0x6D75746E656D6F6DLL, 0xE800000000000000, a2);
  if (!v11)
  {
LABEL_17:
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(void *)uint64_t v19 = 0xD000000000000033;
    uint64_t v20 = "momentum key not found in the checkpoint dictionary";
    goto LABEL_20;
  }
  uint64_t v12 = v11;
  if (*(void *)(v11 + 16) != 1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  uint64_t result = specialized Dictionary.subscript.getter(0xD000000000000014, 0x80000002272D7E00, a2);
  if (!result)
  {
LABEL_19:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(void *)uint64_t v19 = 0xD00000000000003FLL;
    uint64_t v20 = "usesNesterovMomentum key not found in the checkpoint dictionary";
    goto LABEL_20;
  }
  uint64_t v14 = result;
  if (*(void *)(result + 16) != 1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  if (!*(void *)(v10 + 16))
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t result = swift_bridgeObjectRelease();
  if (!*(void *)(v12 + 16))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t result = swift_bridgeObjectRelease();
  if (!*(void *)(v14 + 16))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  double v15 = *(double *)(v14 + 32);
  uint64_t result = swift_bridgeObjectRelease();
  if ((~*(void *)&v15 & 0x7FF0000000000000) == 0)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v15 > -9.22337204e18)
  {
    if (v15 < 9.22337204e18)
    {
      uint64_t v16 = type metadata accessor for GradientClippingMode();
      __swift_storeEnumTagSinglePayload((uint64_t)v8, 1, 1, v16);
      *uint64_t v5 = 981668463;
      uint64_t v17 = *MEMORY[0x263F583D0];
      uint64_t v18 = type metadata accessor for RegularizationKind();
      (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 104))(v5, v17, v18);
      __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v18);
      type metadata accessor for MLHandActionClassifier.GraphCNNModel(0);
      _s8CreateML22MLHandActionClassifierV13GraphCNNModelVAE14NeuralNetworks5LayerAAWlTm_0(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
      return SGD.init(for:learningRate:momentum:usesNesterovMomentum:gradientClippingMode:regularizationKind:gradientScale:)();
    }
    goto LABEL_26;
  }
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

void one-time initialization function for adjustLearningRateSteps()
{
  static MLHandActionClassifier.GraphCNN.ModelTrainingInternalParameters.adjustLearningRateSteps = (uint64_t)&outlined read-only object #0 of one-time initialization function for adjustLearningRateSteps;
}

void MLHandActionClassifier.GraphCNN.init(classLabels:export:numOfKeypoints:numOfKeypointsChannels:windowSize:)()
{
  OUTLINED_FUNCTION_19_4();
  v28[0] = v3;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  char v9 = v8;
  uint64_t v11 = v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RegularizationKind?);
  uint64_t v13 = OUTLINED_FUNCTION_17(v12);
  MEMORY[0x270FA5388](v13);
  double v15 = (_DWORD *)((char *)v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GradientClippingMode?);
  uint64_t v17 = OUTLINED_FUNCTION_17(v16);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SGD<MLHandActionClassifier.GraphCNNModel>);
  uint64_t v21 = OUTLINED_FUNCTION_17(v20);
  MEMORY[0x270FA5388](v21);
  uint64_t v22 = OUTLINED_FUNCTION_2_37();
  type metadata accessor for MLHandActionClassifier.GraphCNNModel(v22);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v23);
  OUTLINED_FUNCTION_27_7();
  v0[2] = v11;
  v0[3] = v7;
  v0[4] = v5;
  swift_bridgeObjectRetain();
  MLHandActionClassifier.GraphCNNModel.init(classLabels:export:numOfKeypoints:numOfKeypointsChannels:windowSize:)(v9, v28[0], v2);
  outlined init with take of MLHandActionClassifier.GraphCNNModel();
  swift_beginAccess();
  outlined init with copy of MLHandActionClassifier.GraphCNNModel();
  uint64_t v24 = type metadata accessor for GradientClippingMode();
  __swift_storeEnumTagSinglePayload((uint64_t)v19, 1, 1, v24);
  *double v15 = 981668463;
  uint64_t v25 = *MEMORY[0x263F583D0];
  uint64_t v26 = type metadata accessor for RegularizationKind();
  OUTLINED_FUNCTION_8();
  (*(void (**)(_DWORD *, uint64_t, uint64_t))(v27 + 104))(v15, v25, v26);
  __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v26);
  _s8CreateML22MLHandActionClassifierV13GraphCNNModelVAE14NeuralNetworks5LayerAAWlTm_0(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
  SGD.init(for:learningRate:momentum:usesNesterovMomentum:gradientClippingMode:regularizationKind:gradientScale:)();
  outlined destroy of MLHandActionClassifier.GraphCNNModel(v2, (void (*)(void))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
  outlined init with take of DataFrame?(v1, (uint64_t)v0 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_optimizer, &demangling cache variable for type metadata for SGD<MLHandActionClassifier.GraphCNNModel>);
  OUTLINED_FUNCTION_12_4();
}

uint64_t MLHandActionClassifier.GraphCNNModel.init(classLabels:export:numOfKeypoints:numOfKeypointsChannels:windowSize:)@<X0>(char a1@<W1>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComputeDevice?);
  uint64_t v8 = OUTLINED_FUNCTION_17(v7);
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_57_1();
  uint64_t v9 = type metadata accessor for MLHandActionClassifier.GraphCNNModel(0);
  *(unsigned char *)(a3 + *(int *)(v9 + 36)) = a1;
  *(void *)(a3 + *(int *)(v9 + 40)) = a2;
  type metadata accessor for ParameterInitializer();
  static ParameterInitializer.zeros.getter();
  static ParameterInitializer.ones.getter();
  BatchNorm.init(offsetInitializer:scaleInitializer:momentum:epsilon:)();
  type metadata accessor for ComputeDevice();
  OUTLINED_FUNCTION_45_13();
  OUTLINED_FUNCTION_37_12();
  outlined destroy of URL?(v3, &demangling cache variable for type metadata for ComputeDevice?);
  Dense.init(unitCount:weightInitializer:biasInitializer:)();
  static ParameterInitializer.zeros.getter();
  static ParameterInitializer.ones.getter();
  BatchNorm.init(offsetInitializer:scaleInitializer:momentum:epsilon:)();
  Dropout.init(probability:seed:)();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_47_13();
  type metadata accessor for MLHandActionClassifier.SingleStreamBlock(0);
  OUTLINED_FUNCTION_47_13();
  OUTLINED_FUNCTION_47_13();
  static MLHandActionClassifier.SingleStreamBlock.makeDownSampledInvertedResidual(inplanes:planes:stride:)();
  static MLHandActionClassifier.SingleStreamBlock.makeInvertedResidual(inplanes:planes:stride:)();
  static MLHandActionClassifier.SingleStreamBlock.makeDownSampledInvertedResidual(inplanes:planes:stride:)();
  OUTLINED_FUNCTION_47_13();
  GlobalAveragePool2D.init()();
  OUTLINED_FUNCTION_45_13();
  OUTLINED_FUNCTION_37_12();
  outlined destroy of URL?(v3, &demangling cache variable for type metadata for ComputeDevice?);
  static ParameterInitializer.zeros.getter();
  type metadata accessor for MLHandActionClassifier.Torso(0);
  return Dense.init(unitCount:weightInitializer:biasInitializer:)();
}

id specialized static _ModelCheckpoint<>.getCheckpointDictionary(from:)(id a1, char a2)
{
  uint64_t v3 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
  id v6 = (id)Dictionary.init(dictionaryLiteral:)();
  id v65 = a1;
  char v66 = a2 & 1;
  uint64_t v67 = 0;
  outlined copy of Result<_DataTable, Error>(a1, a2 & 1);
  id v62 = a1;
  LOBYTE(v63) = a2 & 1;
  if (!MLDataTable.size.getter())
  {
LABEL_22:
    char v40 = a2 & 1;
    id v41 = a1;
LABEL_44:
    outlined consume of Result<_DataTable, Error>(v41, v40);
    return v6;
  }
  uint64_t v7 = 0;
  while (1)
  {
    MLDataTable.Rows.subscript.getter(v7, (uint64_t *)&v62);
    uint64_t v8 = v63;
    uint64_t v9 = v64;
    char v10 = a2 & 1;
    outlined copy of Result<_DataTable, Error>(a1, a2 & 1);
    uint64_t v11 = specialized RandomAccessCollection<>.index(after:)(v7);
    outlined consume of Result<_DataTable, Error>(a1, v10);
    uint64_t v67 = v11;
    uint64_t v12 = v9;
    if (!v8[2]) {
      goto LABEL_35;
    }
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(1937335659, 0xE400000000000000);
    if ((v14 & 1) == 0)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
LABEL_35:
      swift_bridgeObjectRelease();
LABEL_37:
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError();
      *(void *)uint64_t v54 = 0xD000000000000055;
      *(void *)(v54 + 8) = 0x80000002272D9010;
      *(_OWORD *)(v54 + 16) = 0u;
      *(_OWORD *)(v54 + 32) = 0u;
      *(unsigned char *)(v54 + 48) = 2;
      swift_willThrow();
LABEL_43:
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      id v41 = v65;
      char v40 = v66;
      goto LABEL_44;
    }
    uint64_t v15 = *(void *)(v8[7] + 8 * v13);
    swift_retain_n();
    CMLSequence.value(at:)(v15);
    if (v3)
    {
      swift_release();
      goto LABEL_55;
    }
    uint64_t v17 = v16;
    swift_release();
    MLDataValue.init(_:)(v17, (uint64_t)&v62);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release_n();
    id v19 = v62;
    id v18 = v63;
    char v20 = (char)v64;
    if (v64 != 2)
    {
      swift_bridgeObjectRelease();
      outlined consume of MLDataValue(v19, v18, v20);
      goto LABEL_37;
    }
    if (!v8[2])
    {
      outlined copy of MLDataValue(v62, v63, 2);
      goto LABEL_40;
    }
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    outlined copy of MLDataValue(v19, v18, 2);
    unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(0x7365756C6176, 0xE600000000000000);
    if ((v22 & 1) == 0)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
LABEL_40:
      swift_bridgeObjectRelease();
LABEL_42:
      outlined consume of MLDataValue(v19, v18, 2);
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError();
      *(void *)uint64_t v55 = 0xD00000000000005BLL;
      *(void *)(v55 + 8) = 0x80000002272D9070;
      *(_OWORD *)(v55 + 16) = 0u;
      *(_OWORD *)(v55 + 32) = 0u;
      *(unsigned char *)(v55 + 48) = 2;
      swift_willThrow();
      outlined consume of MLDataValue(v19, v18, 2);
      goto LABEL_43;
    }
    uint64_t v59 = v19;
    uint64_t v23 = *(void *)(v8[7] + 8 * v21);
    swift_retain_n();
    uint64_t v24 = v23;
    uint64_t v25 = 0;
    CMLSequence.value(at:)(v24);
    uint64_t v3 = 0;
    uint64_t v27 = v26;
    swift_release();
    MLDataValue.init(_:)(v27, (uint64_t)&v62);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release_n();
    id v28 = v62;
    id v60 = v63;
    char v29 = (char)v64;
    if (v64 != 3)
    {
      swift_bridgeObjectRelease();
      outlined consume of MLDataValue(v28, v60, v29);
      id v19 = v59;
      goto LABEL_42;
    }
    id v58 = v18;
    swift_retain();
    uint64_t v30 = CMLSequence.size.getter();
    if (CMLSequence.size.getter() < 0) {
      goto LABEL_48;
    }
    uint64_t v31 = CMLSequence.size.getter();
    if (v30 < 0 || v31 < v30) {
      goto LABEL_49;
    }
    uint64_t v57 = v6;
    if (v30) {
      break;
    }
LABEL_21:
    swift_isUniquelyReferenced_nonNull_native();
    id v62 = v57;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
    id v6 = v62;
    swift_bridgeObjectRelease();
    outlined consume of MLDataValue(v59, v58, 2);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of MLDataValue(v59, v58, 2);
    outlined consume of MLDataValue(v28, v60, 3);
    outlined consume of MLDataValue(v28, v60, 3);
    uint64_t v7 = v67;
    a1 = v65;
    a2 = v66;
    id v62 = v65;
    LOBYTE(v63) = v66;
    if (v7 == MLDataTable.size.getter()) {
      goto LABEL_22;
    }
  }
  id v62 = (id)MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30, 0);
  uint64_t v12 = 0;
  Swift::String v32 = v62;
  while (2)
  {
    if ((char *)v30 == v12)
    {
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
      swift_release();

      __break(1u);
      __break(1u);
LABEL_50:
      swift_release();

      __break(1u);
LABEL_51:
      __break(1u);
      swift_release();

      __break(1u);
LABEL_52:
      __break(1u);
      swift_release();

      __break(1u);
LABEL_53:
      __break(1u);
      outlined consume of MLDataValue(v28, v60, 3);
      while (1)
      {
LABEL_55:
        swift_unexpectedError();
        __break(1u);
      }
    }
    swift_retain();
    uint64_t v25 = 0;
    CMLSequence.value(at:)((uint64_t)v12);
    uint64_t v34 = v33;
    uint64_t v35 = v12 + 1;
    outlined consume of MLDataValue(v28, v60, 3);
    switch(CMLFeatureValue.type.getter())
    {
      case 1u:
        swift_retain();
        uint64_t v25 = 0;
        specialized handling<A, B>(_:_:)();
        uint64_t v37 = v36;
        swift_release_n();
        id v62 = v32;
        unint64_t v39 = v32[2];
        unint64_t v38 = v32[3];
        if (v39 >= v38 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1);
          Swift::String v32 = v62;
        }
        v32[2] = v39 + 1;
        v32[v39 + 4] = v37;
        if ((uint64_t)v12 >= CMLSequence.size.getter()) {
          goto LABEL_47;
        }
        ++v12;
        if ((char *)v30 == v35) {
          goto LABEL_21;
        }
        continue;
      case 2u:
        swift_retain();
        Swift::String v45 = CMLFeatureValue.stringValue()();
        if (v25) {
          goto LABEL_50;
        }
        uint64_t countAndFlagsBits = v45._countAndFlagsBits;
        id object = v45._object;
        char v44 = 2;
        swift_release_n();
        goto LABEL_33;
      case 3u:
        uint64_t v51 = *(void *)(v34 + 16);
        swift_retain();
        uint64_t v52 = specialized handling<A, B>(_:_:)(v51);
        if (!v52) {
          goto LABEL_53;
        }
        swift_release_n();
        type metadata accessor for CMLSequence();
        uint64_t countAndFlagsBits = swift_allocObject();
        id object = 0;
        *(void *)(countAndFlagsBits + 16) = v52;
        *(unsigned char *)(countAndFlagsBits + 24) = 1;
        char v44 = 3;
        goto LABEL_33;
      case 4u:
        uint64_t v47 = *(void *)(v34 + 16);
        swift_retain();
        uint64_t v48 = v47;
        uint64_t v25 = 0;
        uint64_t v49 = specialized handling<A, B>(_:_:)(v48);
        if (!v49) {
          goto LABEL_52;
        }
        type metadata accessor for CMLDictionary();
        uint64_t v50 = swift_allocObject();
        *(void *)(v50 + 16) = v49;
        v68[0] = v50;
        v68[1] = (uint64_t)closure #1 in MLDataValue.DictionaryType.init(from:);
        v68[2] = 0;
        v68[3] = (uint64_t)specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
        v68[4] = 0;
        v68[5] = (uint64_t)specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:);
        v68[6] = 0;
        uint64_t v61 = MEMORY[0x263F8EE80];
        swift_retain_n();
        specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v68, 1, &v61);
        swift_release_n();
        swift_release_n();
        id object = 0;
        uint64_t countAndFlagsBits = v61;
        char v44 = 4;
        goto LABEL_33;
      case 5u:
        swift_release();
        uint64_t countAndFlagsBits = 0;
        id object = 0;
        char v44 = 6;
        goto LABEL_33;
      case 6u:
        uint64_t v46 = swift_retain();
        MLDataValue.MultiArrayType.init(from:)(v46, &v61);
        uint64_t countAndFlagsBits = v61;
        if (!v61) {
          goto LABEL_51;
        }
        swift_release();
        id object = 0;
        char v44 = 5;
LABEL_33:
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError();
        *(void *)uint64_t v53 = 0xD000000000000058;
        *(void *)(v53 + 8) = 0x80000002272D90D0;
        *(_OWORD *)(v53 + 16) = 0u;
        *(_OWORD *)(v53 + 32) = 0u;
        *(unsigned char *)(v53 + 48) = 2;
        swift_willThrow();
        outlined consume of MLDataValue((void *)countAndFlagsBits, object, v44);
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        outlined consume of MLDataValue(v59, v58, 2);
        outlined consume of MLDataValue(v59, v58, 2);
        outlined consume of MLDataValue(v28, v60, 3);
        outlined consume of Result<_DataTable, Error>(v65, v66);
        id v6 = v57;
        swift_bridgeObjectRelease();
        outlined consume of MLDataValue(v28, v60, 3);
        break;
      default:
        uint64_t countAndFlagsBits = specialized handling<A, B>(_:_:)(*(void *)(v34 + 16));
        swift_release();
        id object = 0;
        char v44 = 0;
        goto LABEL_33;
    }
    return v6;
  }
}

uint64_t specialized _ModelCheckpoint<>.updateGraph<A>(from:optimizer:checkpointDictionary:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v85 = a3;
  uint64_t v73 = a2;
  uint64_t v58 = type metadata accessor for LSTM();
  uint64_t v64 = *(void (***)(uint64_t, uint64_t))(v58 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v58);
  uint64_t v53 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v57 = (char *)&v50 - v7;
  uint64_t v62 = type metadata accessor for Dense();
  uint64_t v63 = *(void (***)(char *, char *, uint64_t))(v62 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v62);
  uint64_t v56 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v50 - v10;
  uint64_t v66 = type metadata accessor for Conv2D();
  id v60 = *(void (***)(uint64_t, uint64_t))(v66 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v66);
  uint64_t v61 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v50 - v14;
  uint64_t v76 = type metadata accessor for BatchNorm();
  uint64_t v16 = *(void *)(v76 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v76);
  id v65 = (char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v75 = (char *)&v50 - v19;
  uint64_t v20 = type metadata accessor for MLHandActionClassifier.GraphCNNModel(0);
  MEMORY[0x270FA5388](v20 - 8);
  char v22 = (char *)&v50 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  outlined init with copy of MLHandActionClassifier.GraphCNNModel();
  uint64_t v23 = specialized _ModelCheckpoint<>.trainableSublayers(model:)();
  uint64_t result = outlined destroy of MLHandActionClassifier.GraphCNNModel((uint64_t)v22, (void (*)(void))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
  unint64_t v25 = 0;
  uint64_t v69 = v23 + 32;
  uint64_t v70 = v23;
  unint64_t v26 = *(void *)(v23 + 16);
  uint64_t v68 = &v80;
  uint64_t v67 = (uint64_t)v81 + 8;
  uint64_t v74 = (long long *)&v83;
  uint64_t v52 = (void (**)(char *, char *, uint64_t))(v64 + 4);
  uint64_t v51 = v64 + 1;
  uint64_t v54 = v63 + 4;
  uint64_t v55 = (void (**)(uint64_t, uint64_t))(v63 + 1);
  uint64_t v59 = (void (**)(char *, char *, uint64_t))(v60 + 4);
  ++v60;
  uint64_t v63 = (void (**)(char *, char *, uint64_t))(v16 + 32);
  uint64_t v64 = (void (**)(uint64_t, uint64_t))(v16 + 8);
  uint64_t v71 = v11;
  unint64_t v72 = v26;
  while (1)
  {
    if (v25 == v26)
    {
      unint64_t v25 = v26;
      memset(v81, 0, sizeof(v81));
      goto LABEL_6;
    }
    if (v25 >= *(void *)(v70 + 16)) {
      break;
    }
    uint64_t v27 = (long long *)v68;
    outlined init with copy of TrainingSessionDelegate(v69 + 40 * v25, (uint64_t)v68);
    *(void *)&v81[0] = v25;
    outlined init with take of BinaryFloatingPoint(v27, v67);
    ++v25;
LABEL_6:
    outlined init with take of DataFrame?((uint64_t)v81, (uint64_t)&v82, &demangling cache variable for type metadata for (offset: Int, element: Layer)?);
    if (!v84) {
      return swift_bridgeObjectRelease();
    }
    id v28 = v11;
    char v29 = v15;
    uint64_t v30 = v82;
    outlined init with take of BinaryFloatingPoint(v74, (uint64_t)v81);
    uint64_t v79 = 0x5F726579616CLL;
    unint64_t v80 = 0xE600000000000000;
    uint64_t v77 = v30;
    v31._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    Swift::String v32 = (uint64_t (*)(uint64_t, void, void *))v79;
    uint64_t v33 = (void *)v80;
    outlined init with copy of TrainingSessionDelegate((uint64_t)v81, (uint64_t)&v79);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Layer);
    uint64_t v34 = v75;
    uint64_t v35 = v76;
    if (swift_dynamicCast())
    {
      uint64_t v36 = (uint64_t)v65;
      (*v63)(v65, v34, v35);
      specialized _ModelCheckpoint<>.restoreLayer<A>(_:optimizer:layerName:checkpointDictionary:)(v36, v73, (uint64_t)v32, v33, v85);
      if (v4)
      {
        swift_bridgeObjectRelease();
        char v44 = (void (***)(uint64_t, uint64_t))&v84;
LABEL_26:
        (**(v44 - 32))(v36, v35);
        goto LABEL_27;
      }
      swift_bridgeObjectRelease();
      (*v64)(v36, v35);
      uint64_t v15 = v29;
      unint64_t v26 = v72;
      uint64_t v11 = v28;
    }
    else
    {
      uint64_t v15 = v29;
      uint64_t v37 = v66;
      if (swift_dynamicCast())
      {
        uint64_t v38 = (uint64_t)v61;
        (*v59)(v61, v29, v37);
        specialized _ModelCheckpoint<>.restoreLayer<A>(_:optimizer:layerName:checkpointDictionary:)(v38, v73, v32, v33, v85, MEMORY[0x263F584E8], (uint64_t (*)(uint64_t, void, void *))static Conv2D.loadLayer(from:layerName:), MEMORY[0x263F584D8], MEMORY[0x263F584D0], MEMORY[0x263F584C0], MEMORY[0x263F584C8]);
        if (v4)
        {
          swift_bridgeObjectRelease();
          (*v60)(v38, v37);
          goto LABEL_27;
        }
        swift_bridgeObjectRelease();
        (*v60)(v38, v37);
        uint64_t v11 = v71;
      }
      else
      {
        uint64_t v39 = v85;
        uint64_t v11 = v71;
        uint64_t v35 = v62;
        if (swift_dynamicCast())
        {
          uint64_t v36 = (uint64_t)v56;
          (*v54)(v56, v11, v35);
          specialized _ModelCheckpoint<>.restoreLayer<A>(_:optimizer:layerName:checkpointDictionary:)(v36, v73, v32, v33, v39, MEMORY[0x263F58488], (uint64_t (*)(uint64_t, void, void *))static Dense.loadLayer(from:layerName:), MEMORY[0x263F58478], MEMORY[0x263F58470], MEMORY[0x263F58460], MEMORY[0x263F58468]);
          if (v4)
          {
            swift_bridgeObjectRelease();
            char v44 = (void (***)(uint64_t, uint64_t))v81 + 1;
            goto LABEL_26;
          }
          swift_bridgeObjectRelease();
          (*v55)(v36, v35);
        }
        else
        {
          uint64_t v40 = v4;
          id v41 = v57;
          uint64_t v42 = v58;
          if ((swift_dynamicCast() & 1) == 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v77 = 0;
            unint64_t v78 = 0xE000000000000000;
            _StringGuts.grow(_:)(64);
            v45._uint64_t countAndFlagsBits = 0xD000000000000020;
            v45._id object = (void *)0x80000002272D8E20;
            String.append(_:)(v45);
            _print_unlocked<A, B>(_:_:)();
            v46._id object = (void *)0x80000002272D8E50;
            v46._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
            String.append(_:)(v46);
            uint64_t v47 = v77;
            unint64_t v48 = v78;
            lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
            swift_allocError();
            *(void *)uint64_t v49 = v47;
            *(void *)(v49 + 8) = v48;
            *(_OWORD *)(v49 + 16) = 0u;
            *(_OWORD *)(v49 + 32) = 0u;
            *(unsigned char *)(v49 + 48) = 2;
            swift_willThrow();
            __swift_destroy_boxed_opaque_existential_0((uint64_t)v81);
            return __swift_destroy_boxed_opaque_existential_0((uint64_t)&v79);
          }
          uint64_t v43 = (uint64_t)v53;
          (*v52)(v53, v41, v42);
          specialized _ModelCheckpoint<>.restoreGenericLayer<A, B>(_:optimizer:layerName:checkpointDictionary:)(v43, v73, (uint64_t)v32, v33, v85);
          uint64_t v4 = v40;
          if (v40)
          {
            swift_bridgeObjectRelease();
            (*v51)(v43, v42);
LABEL_27:
            __swift_destroy_boxed_opaque_existential_0((uint64_t)v81);
            swift_bridgeObjectRelease();
            return __swift_destroy_boxed_opaque_existential_0((uint64_t)&v79);
          }
          swift_bridgeObjectRelease();
          (*v51)(v43, v42);
          uint64_t v11 = v71;
        }
        uint64_t v15 = v29;
      }
      unint64_t v26 = v72;
    }
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v81);
    uint64_t result = __swift_destroy_boxed_opaque_existential_0((uint64_t)&v79);
  }
  __break(1u);
  return result;
}

uint64_t MLHandActionClassifier.GraphCNN.deinit()
{
  swift_bridgeObjectRelease();
  outlined destroy of MLHandActionClassifier.GraphCNNModel(v0 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_model, (void (*)(void))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
  outlined destroy of URL?(v0 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_optimizer, &demangling cache variable for type metadata for SGD<MLHandActionClassifier.GraphCNNModel>);
  return v0;
}

uint64_t MLHandActionClassifier.GraphCNN.__deallocating_deinit()
{
  MLHandActionClassifier.GraphCNN.deinit();

  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for MLHandActionClassifier.GraphCNN()
{
  return type metadata accessor for MLHandActionClassifier.GraphCNN(0);
}

uint64_t type metadata accessor for MLHandActionClassifier.GraphCNN(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLHandActionClassifier.GraphCNN);
}

void type metadata completion function for MLHandActionClassifier.GraphCNN()
{
  type metadata accessor for MLHandActionClassifier.GraphCNNModel(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for SGD<MLHandActionClassifier.GraphCNNModel>();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t type metadata accessor for MLHandActionClassifier.GraphCNNModel(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLHandActionClassifier.GraphCNNModel);
}

void type metadata accessor for SGD<MLHandActionClassifier.GraphCNNModel>()
{
  if (!lazy cache variable for type metadata for SGD<MLHandActionClassifier.GraphCNNModel>)
  {
    type metadata accessor for MLHandActionClassifier.GraphCNNModel(255);
    _s8CreateML22MLHandActionClassifierV13GraphCNNModelVAE14NeuralNetworks5LayerAAWlTm_0(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
    unint64_t v0 = type metadata accessor for SGD();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SGD<MLHandActionClassifier.GraphCNNModel>);
    }
  }
}

char *initializeBufferWithCopyOfBuffer for MLHandActionClassifier.GraphCNNModel(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v76 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v76 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for BatchNorm();
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = v8;
    char v83 = (void (*)(char *, uint64_t, uint64_t))v8;
    uint64_t v10 = a3[5];
    uint64_t v11 = a2;
    uint64_t v12 = &a1[v10];
    uint64_t v13 = &v11[v10];
    uint64_t v14 = v11;
    uint64_t v82 = type metadata accessor for Dense();
    int v81 = *(void (**)(char *, char *, uint64_t))(*(void *)(v82 - 8) + 16);
    v81(v12, v13, v82);
    v9(&a1[a3[6]], &v14[a3[6]], v7);
    uint64_t v15 = a3[7];
    unint64_t v80 = a3;
    uint64_t v16 = &a1[v15];
    uint64_t v17 = &v14[v15];
    uint64_t v18 = type metadata accessor for Dropout();
    uint64_t v89 = *(void (**)(char *, uint64_t))(*(void *)(v18 - 8) + 16);
    uint64_t v19 = v17;
    uint64_t v20 = v18;
    uint64_t v87 = v18;
    v89(v16, (uint64_t)v19);
    uint64_t v21 = a3[8];
    char v22 = &a1[v21];
    uint64_t v23 = &v14[v21];
    uint64_t v24 = type metadata accessor for Conv2D();
    unint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16);
    v25(v22, (uint64_t)v23, v24);
    unint64_t v26 = (int *)type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
    uint64_t v27 = v26[5];
    id v28 = &v22[v27];
    char v29 = &v23[v27];
    long long v30 = *((_OWORD *)v29 + 1);
    *(_OWORD *)id v28 = *(_OWORD *)v29;
    *((_OWORD *)v28 + 1) = v30;
    *((_OWORD *)v28 + 2) = *((_OWORD *)v29 + 2);
    v28[48] = v29[48];
    uint64_t v78 = v24;
    v25(&v22[v26[6]], (uint64_t)&v23[v26[6]], v24);
    uint64_t v79 = v25;
    v83(&v22[v26[7]], (uint64_t)&v23[v26[7]], v7);
    ((void (*)(char *, char *, uint64_t))v89)(&v22[v26[8]], &v23[v26[8]], v20);
    uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
    v25(&v22[*(int *)(v84 + 36)], (uint64_t)&v23[*(int *)(v84 + 36)], v24);
    uint64_t v86 = v22;
    uint64_t v88 = v23;
    v83(&v22[*(int *)(v84 + 40)], (uint64_t)&v23[*(int *)(v84 + 40)], v7);
    uint64_t v85 = (int *)type metadata accessor for MLHandActionClassifier.SingleStreamBlock(0);
    uint64_t v31 = v85[5];
    Swift::String v32 = &v22[v31];
    uint64_t v33 = &v23[v31];
    v79(&v22[v31], (uint64_t)&v23[v31], v78);
    uint64_t v34 = v26[5];
    uint64_t v35 = &v32[v34];
    uint64_t v36 = &v33[v34];
    long long v37 = *((_OWORD *)v36 + 1);
    *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
    *((_OWORD *)v35 + 1) = v37;
    *((_OWORD *)v35 + 2) = *((_OWORD *)v36 + 2);
    v35[48] = v36[48];
    v79(&v32[v26[6]], (uint64_t)&v33[v26[6]], v78);
    v83(&v32[v26[7]], (uint64_t)&v33[v26[7]], v7);
    ((void (*)(char *, char *, uint64_t))v89)(&v32[v26[8]], &v33[v26[8]], v87);
    v79(&v32[*(int *)(v84 + 36)], (uint64_t)&v33[*(int *)(v84 + 36)], v78);
    v83(&v32[*(int *)(v84 + 40)], (uint64_t)&v33[*(int *)(v84 + 40)], v7);
    uint64_t v38 = v85[6];
    uint64_t v39 = &v22[v38];
    uint64_t v40 = &v23[v38];
    v79(&v22[v38], (uint64_t)&v23[v38], v78);
    uint64_t v41 = v26[5];
    uint64_t v42 = &v39[v41];
    uint64_t v43 = &v40[v41];
    long long v44 = *((_OWORD *)v43 + 1);
    *(_OWORD *)uint64_t v42 = *(_OWORD *)v43;
    *((_OWORD *)v42 + 1) = v44;
    *((_OWORD *)v42 + 2) = *((_OWORD *)v43 + 2);
    v42[48] = v43[48];
    v79(&v39[v26[6]], (uint64_t)&v40[v26[6]], v78);
    v83(&v39[v26[7]], (uint64_t)&v40[v26[7]], v7);
    ((void (*)(char *, char *, uint64_t))v89)(&v39[v26[8]], &v40[v26[8]], v87);
    v79(&v39[*(int *)(v84 + 36)], (uint64_t)&v40[*(int *)(v84 + 36)], v78);
    v83(&v39[*(int *)(v84 + 40)], (uint64_t)&v40[*(int *)(v84 + 40)], v7);
    uint64_t v45 = v85[7];
    Swift::String v46 = &v22[v45];
    uint64_t v47 = &v23[v45];
    v79(&v22[v45], (uint64_t)&v23[v45], v78);
    uint64_t v48 = v26[5];
    uint64_t v49 = &v46[v48];
    uint64_t v50 = &v47[v48];
    long long v51 = *((_OWORD *)v50 + 1);
    *(_OWORD *)uint64_t v49 = *(_OWORD *)v50;
    *((_OWORD *)v49 + 1) = v51;
    *((_OWORD *)v49 + 2) = *((_OWORD *)v50 + 2);
    v49[48] = v50[48];
    v79(&v46[v26[6]], (uint64_t)&v47[v26[6]], v78);
    v83(&v46[v26[7]], (uint64_t)&v47[v26[7]], v7);
    ((void (*)(char *, char *, uint64_t))v89)(&v46[v26[8]], &v47[v26[8]], v87);
    v79(&v46[*(int *)(v84 + 36)], (uint64_t)&v47[*(int *)(v84 + 36)], v78);
    v83(&v46[*(int *)(v84 + 40)], (uint64_t)&v47[*(int *)(v84 + 40)], v7);
    uint64_t v52 = v85[8];
    uint64_t v53 = &v22[v52];
    uint64_t v54 = &v23[v52];
    v79(&v22[v52], (uint64_t)&v23[v52], v78);
    uint64_t v55 = v26[5];
    uint64_t v56 = &v53[v55];
    uint64_t v57 = &v54[v55];
    long long v58 = *((_OWORD *)v57 + 1);
    *(_OWORD *)uint64_t v56 = *(_OWORD *)v57;
    *((_OWORD *)v56 + 1) = v58;
    *((_OWORD *)v56 + 2) = *((_OWORD *)v57 + 2);
    v56[48] = v57[48];
    v79(&v53[v26[6]], (uint64_t)&v54[v26[6]], v78);
    v83(&v53[v26[7]], (uint64_t)&v54[v26[7]], v7);
    ((void (*)(char *, char *, uint64_t))v89)(&v53[v26[8]], &v54[v26[8]], v87);
    uint64_t v59 = v85[9];
    id v60 = &v22[v59];
    uint64_t v61 = &v23[v59];
    v79(&v22[v59], (uint64_t)&v23[v59], v78);
    uint64_t v62 = v26[5];
    uint64_t v63 = &v60[v62];
    uint64_t v64 = &v61[v62];
    long long v65 = *((_OWORD *)v64 + 1);
    *(_OWORD *)uint64_t v63 = *(_OWORD *)v64;
    *((_OWORD *)v63 + 1) = v65;
    *((_OWORD *)v63 + 2) = *((_OWORD *)v64 + 2);
    v63[48] = v64[48];
    v79(&v60[v26[6]], (uint64_t)&v61[v26[6]], v78);
    v83(&v60[v26[7]], (uint64_t)&v61[v26[7]], v7);
    ((void (*)(char *, char *, uint64_t))v89)(&v60[v26[8]], &v61[v26[8]], v87);
    uint64_t v66 = v84;
    v79(&v60[*(int *)(v84 + 36)], (uint64_t)&v61[*(int *)(v84 + 36)], v78);
    v83(&v60[*(int *)(v84 + 40)], (uint64_t)&v61[*(int *)(v84 + 40)], v7);
    uint64_t v67 = v85[10];
    uint64_t v68 = &v22[v67];
    uint64_t v69 = &v88[v67];
    v79(&v86[v67], (uint64_t)&v88[v67], v78);
    uint64_t v70 = v26[5];
    uint64_t v71 = &v68[v70];
    unint64_t v72 = &v69[v70];
    long long v73 = *((_OWORD *)v72 + 1);
    *(_OWORD *)uint64_t v71 = *(_OWORD *)v72;
    *((_OWORD *)v71 + 1) = v73;
    *((_OWORD *)v71 + 2) = *((_OWORD *)v72 + 2);
    v71[48] = v72[48];
    v79(&v68[v26[6]], (uint64_t)&v69[v26[6]], v78);
    v83(&v68[v26[7]], (uint64_t)&v69[v26[7]], v7);
    ((void (*)(char *, char *, uint64_t))v89)(&v68[v26[8]], &v69[v26[8]], v87);
    v79(&v68[*(int *)(v66 + 36)], (uint64_t)&v69[*(int *)(v66 + 36)], v78);
    v83(&v68[*(int *)(v66 + 40)], (uint64_t)&v69[*(int *)(v66 + 40)], v7);
    uint64_t v74 = type metadata accessor for MLHandActionClassifier.Torso(0);
    v81(&v86[*(int *)(v74 + 24)], &v88[*(int *)(v74 + 24)], v82);
    uint64_t v75 = v80[10];
    a1[v80[9]] = v14[v80[9]];
    *(void *)&a1[v75] = *(void *)&v14[v75];
  }
  return a1;
}

uint64_t type metadata accessor for MLHandActionClassifier.InvertedResidual(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLHandActionClassifier.InvertedResidual);
}

uint64_t type metadata accessor for MLHandActionClassifier.SingleStreamBlock(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLHandActionClassifier.SingleStreamBlock);
}

uint64_t type metadata accessor for MLHandActionClassifier.Torso(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLHandActionClassifier.Torso);
}

uint64_t destroy for MLHandActionClassifier.GraphCNNModel(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for BatchNorm();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  uint64_t v6 = a1 + a2[5];
  uint64_t v22 = type metadata accessor for Dense();
  uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v23)((void *)(v22 - 8), v6, v22);
  v5(a1 + a2[6], v4);
  uint64_t v7 = a1 + a2[7];
  uint64_t v24 = type metadata accessor for Dropout();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8);
  v8(v7, v24);
  uint64_t v9 = a1 + a2[8];
  uint64_t v10 = type metadata accessor for Conv2D();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);
  v11(v9, v10);
  uint64_t v12 = (int *)type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
  v11(v9 + v12[6], v10);
  v5(v9 + v12[7], v4);
  v8(v9 + v12[8], v24);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  v11(v9 + *(int *)(v25 + 36), v10);
  uint64_t v27 = v9;
  v5(v9 + *(int *)(v25 + 40), v4);
  uint64_t v13 = v5;
  unint64_t v26 = (int *)type metadata accessor for MLHandActionClassifier.SingleStreamBlock(0);
  uint64_t v14 = v9 + v26[5];
  v11(v14, v10);
  v11(v14 + v12[6], v10);
  v13(v14 + v12[7], v4);
  v8(v14 + v12[8], v24);
  v11(v14 + *(int *)(v25 + 36), v10);
  v13(v14 + *(int *)(v25 + 40), v4);
  uint64_t v15 = v9 + v26[6];
  v11(v15, v10);
  v11(v15 + v12[6], v10);
  v13(v15 + v12[7], v4);
  v8(v15 + v12[8], v24);
  v11(v15 + *(int *)(v25 + 36), v10);
  v13(v15 + *(int *)(v25 + 40), v4);
  uint64_t v16 = v9 + v26[7];
  v11(v16, v10);
  v11(v16 + v12[6], v10);
  v13(v16 + v12[7], v4);
  v8(v16 + v12[8], v24);
  v11(v16 + *(int *)(v25 + 36), v10);
  v13(v16 + *(int *)(v25 + 40), v4);
  uint64_t v17 = v9 + v26[8];
  v11(v17, v10);
  v11(v17 + v12[6], v10);
  v13(v17 + v12[7], v4);
  v8(v17 + v12[8], v24);
  uint64_t v18 = v9 + v26[9];
  v11(v18, v10);
  v11(v18 + v12[6], v10);
  v13(v18 + v12[7], v4);
  v8(v18 + v12[8], v24);
  v11(v18 + *(int *)(v25 + 36), v10);
  v13(v18 + *(int *)(v25 + 40), v4);
  uint64_t v19 = v9 + v26[10];
  v11(v27 + v26[10], v10);
  v11(v19 + v12[6], v10);
  v13(v19 + v12[7], v4);
  v8(v19 + v12[8], v24);
  v11(v19 + *(int *)(v25 + 36), v10);
  v13(v19 + *(int *)(v25 + 40), v4);
  uint64_t v20 = v27 + *(int *)(type metadata accessor for MLHandActionClassifier.Torso(0) + 24);

  return v23(v20, v22);
}

uint64_t initializeWithCopy for MLHandActionClassifier.GraphCNNModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for BatchNorm();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v75 = v7;
  uint64_t v8 = v7;
  uint64_t v9 = a3[5];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v74 = type metadata accessor for Dense();
  long long v73 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v74 - 8) + 16);
  v73(v10, v11, v74);
  uint64_t v72 = a1;
  v8(a1 + a3[6], a2 + a3[6], v6);
  uint64_t v12 = a3[7];
  uint64_t v71 = a2;
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v80 = type metadata accessor for Dropout();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v80 - 8) + 16);
  v15(v13, v14, v80);
  uint64_t v16 = a3[8];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = type metadata accessor for Conv2D();
  uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16);
  v20(v17, v18, v19);
  uint64_t v21 = (int *)type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
  uint64_t v22 = v21[5];
  uint64_t v23 = v17 + v22;
  uint64_t v24 = v18 + v22;
  long long v25 = *(_OWORD *)(v24 + 16);
  *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  *(_OWORD *)(v23 + 16) = v25;
  *(_OWORD *)(v23 + 32) = *(_OWORD *)(v24 + 32);
  *(unsigned char *)(v23 + 48) = *(unsigned char *)(v24 + 48);
  v20(v17 + v21[6], v18 + v21[6], v19);
  v75(v17 + v21[7], v18 + v21[7], v6);
  v15(v17 + v21[8], v18 + v21[8], v80);
  uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  v20(v17 + *(int *)(v77 + 36), v18 + *(int *)(v77 + 36), v19);
  uint64_t v76 = v17;
  uint64_t v79 = v18;
  v75(v17 + *(int *)(v77 + 40), v18 + *(int *)(v77 + 40), v6);
  uint64_t v78 = (int *)type metadata accessor for MLHandActionClassifier.SingleStreamBlock(0);
  uint64_t v26 = v78[5];
  uint64_t v27 = v17 + v26;
  uint64_t v28 = v18 + v26;
  v20(v76 + v26, v79 + v26, v19);
  uint64_t v29 = v21[5];
  uint64_t v30 = v27 + v29;
  uint64_t v31 = v28 + v29;
  long long v32 = *(_OWORD *)(v31 + 16);
  *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
  *(_OWORD *)(v30 + 16) = v32;
  *(_OWORD *)(v30 + 32) = *(_OWORD *)(v31 + 32);
  *(unsigned char *)(v30 + 48) = *(unsigned char *)(v31 + 48);
  v20(v27 + v21[6], v28 + v21[6], v19);
  v75(v27 + v21[7], v28 + v21[7], v6);
  v15(v27 + v21[8], v28 + v21[8], v80);
  v20(v27 + *(int *)(v77 + 36), v28 + *(int *)(v77 + 36), v19);
  v75(v27 + *(int *)(v77 + 40), v28 + *(int *)(v77 + 40), v6);
  uint64_t v33 = v78[6];
  uint64_t v34 = v76 + v33;
  uint64_t v35 = v79 + v33;
  v20(v76 + v33, v79 + v33, v19);
  uint64_t v36 = v21[5];
  uint64_t v37 = v34 + v36;
  uint64_t v38 = v35 + v36;
  long long v39 = *(_OWORD *)(v38 + 16);
  *(_OWORD *)uint64_t v37 = *(_OWORD *)v38;
  *(_OWORD *)(v37 + 16) = v39;
  *(_OWORD *)(v37 + 32) = *(_OWORD *)(v38 + 32);
  *(unsigned char *)(v37 + 48) = *(unsigned char *)(v38 + 48);
  v20(v34 + v21[6], v35 + v21[6], v19);
  v75(v34 + v21[7], v35 + v21[7], v6);
  v15(v34 + v21[8], v35 + v21[8], v80);
  v20(v34 + *(int *)(v77 + 36), v35 + *(int *)(v77 + 36), v19);
  v75(v34 + *(int *)(v77 + 40), v35 + *(int *)(v77 + 40), v6);
  uint64_t v40 = v78[7];
  uint64_t v41 = v76 + v40;
  uint64_t v42 = v79 + v40;
  v20(v76 + v40, v79 + v40, v19);
  uint64_t v43 = v21[5];
  uint64_t v44 = v41 + v43;
  uint64_t v45 = v42 + v43;
  long long v46 = *(_OWORD *)(v45 + 16);
  *(_OWORD *)uint64_t v44 = *(_OWORD *)v45;
  *(_OWORD *)(v44 + 16) = v46;
  *(_OWORD *)(v44 + 32) = *(_OWORD *)(v45 + 32);
  *(unsigned char *)(v44 + 48) = *(unsigned char *)(v45 + 48);
  v20(v41 + v21[6], v42 + v21[6], v19);
  v75(v41 + v21[7], v42 + v21[7], v6);
  v15(v41 + v21[8], v42 + v21[8], v80);
  v20(v41 + *(int *)(v77 + 36), v42 + *(int *)(v77 + 36), v19);
  v75(v41 + *(int *)(v77 + 40), v42 + *(int *)(v77 + 40), v6);
  uint64_t v47 = v78[8];
  uint64_t v48 = v76 + v47;
  uint64_t v49 = v79 + v47;
  v20(v76 + v47, v79 + v47, v19);
  uint64_t v50 = v21[5];
  uint64_t v51 = v48 + v50;
  uint64_t v52 = v49 + v50;
  long long v53 = *(_OWORD *)(v52 + 16);
  *(_OWORD *)uint64_t v51 = *(_OWORD *)v52;
  *(_OWORD *)(v51 + 16) = v53;
  *(_OWORD *)(v51 + 32) = *(_OWORD *)(v52 + 32);
  *(unsigned char *)(v51 + 48) = *(unsigned char *)(v52 + 48);
  v20(v48 + v21[6], v49 + v21[6], v19);
  v75(v48 + v21[7], v49 + v21[7], v6);
  v15(v48 + v21[8], v49 + v21[8], v80);
  uint64_t v54 = v78[9];
  uint64_t v55 = v76 + v54;
  uint64_t v56 = v79 + v54;
  v20(v76 + v54, v79 + v54, v19);
  uint64_t v57 = v21[5];
  uint64_t v58 = v55 + v57;
  uint64_t v59 = v56 + v57;
  long long v60 = *(_OWORD *)(v59 + 16);
  *(_OWORD *)uint64_t v58 = *(_OWORD *)v59;
  *(_OWORD *)(v58 + 16) = v60;
  *(_OWORD *)(v58 + 32) = *(_OWORD *)(v59 + 32);
  *(unsigned char *)(v58 + 48) = *(unsigned char *)(v59 + 48);
  v20(v55 + v21[6], v56 + v21[6], v19);
  v75(v55 + v21[7], v56 + v21[7], v6);
  v15(v55 + v21[8], v56 + v21[8], v80);
  v20(v55 + *(int *)(v77 + 36), v56 + *(int *)(v77 + 36), v19);
  v75(v55 + *(int *)(v77 + 40), v56 + *(int *)(v77 + 40), v6);
  uint64_t v61 = v78[10];
  uint64_t v62 = v76 + v61;
  uint64_t v63 = v79 + v61;
  v20(v76 + v61, v79 + v61, v19);
  uint64_t v64 = v21[5];
  uint64_t v65 = v62 + v64;
  uint64_t v66 = v63 + v64;
  long long v67 = *(_OWORD *)(v66 + 16);
  *(_OWORD *)uint64_t v65 = *(_OWORD *)v66;
  *(_OWORD *)(v65 + 16) = v67;
  *(_OWORD *)(v65 + 32) = *(_OWORD *)(v66 + 32);
  *(unsigned char *)(v65 + 48) = *(unsigned char *)(v66 + 48);
  v20(v62 + v21[6], v63 + v21[6], v19);
  v75(v62 + v21[7], v63 + v21[7], v6);
  v15(v62 + v21[8], v63 + v21[8], v80);
  v20(v62 + *(int *)(v77 + 36), v63 + *(int *)(v77 + 36), v19);
  v75(v62 + *(int *)(v77 + 40), v63 + *(int *)(v77 + 40), v6);
  uint64_t v68 = type metadata accessor for MLHandActionClassifier.Torso(0);
  v73(v76 + *(int *)(v68 + 24), v79 + *(int *)(v68 + 24), v74);
  uint64_t v69 = a3[10];
  uint64_t result = v72;
  *(unsigned char *)(v72 + a3[9]) = *(unsigned char *)(v71 + a3[9]);
  *(void *)(v72 + v69) = *(void *)(v71 + v69);
  return result;
}

uint64_t assignWithCopy for MLHandActionClassifier.GraphCNNModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for BatchNorm();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  uint64_t v70 = v6;
  v7(a1, a2, v6);
  uint64_t v8 = v7;
  uint64_t v71 = v7;
  uint64_t v9 = a3[5];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a1;
  uint64_t v12 = a2 + v9;
  uint64_t v69 = type metadata accessor for Dense();
  uint64_t v68 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v69 - 8) + 24);
  v68(v10, v12, v69);
  v8(v11 + a3[6], a2 + a3[6], v6);
  uint64_t v13 = a3[7];
  long long v67 = a3;
  uint64_t v14 = v11 + v13;
  uint64_t v66 = a2;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = type metadata accessor for Dropout();
  uint64_t v74 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 24);
  v74(v14, v15, v16);
  uint64_t v17 = a3[8];
  uint64_t v18 = v11 + v17;
  uint64_t v19 = a2 + v17;
  uint64_t v20 = type metadata accessor for Conv2D();
  uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 24);
  v21(v18, v19, v20);
  uint64_t v22 = (int *)type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
  uint64_t v23 = v22[5];
  uint64_t v24 = v18 + v23;
  uint64_t v25 = v19 + v23;
  *(void *)uint64_t v24 = *(void *)v25;
  *(void *)(v24 + 8) = *(void *)(v25 + 8);
  *(void *)(v24 + 16) = *(void *)(v25 + 16);
  *(void *)(v24 + 24) = *(void *)(v25 + 24);
  *(void *)(v24 + 32) = *(void *)(v25 + 32);
  *(void *)(v24 + 40) = *(void *)(v25 + 40);
  *(unsigned char *)(v24 + 48) = *(unsigned char *)(v25 + 48);
  v21(v18 + v22[6], v19 + v22[6], v20);
  v71(v18 + v22[7], v19 + v22[7], v70);
  v74(v18 + v22[8], v19 + v22[8], v16);
  uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  v21(v18 + *(int *)(v72 + 36), v19 + *(int *)(v72 + 36), v20);
  uint64_t v75 = v18;
  uint64_t v76 = v19;
  v71(v18 + *(int *)(v72 + 40), v19 + *(int *)(v72 + 40), v70);
  long long v73 = (int *)type metadata accessor for MLHandActionClassifier.SingleStreamBlock(0);
  uint64_t v26 = v73[5];
  uint64_t v27 = v18 + v26;
  uint64_t v28 = v76 + v26;
  v21(v75 + v26, v76 + v26, v20);
  uint64_t v29 = v22[5];
  uint64_t v30 = v27 + v29;
  uint64_t v31 = v28 + v29;
  *(void *)uint64_t v30 = *(void *)v31;
  *(void *)(v30 + 8) = *(void *)(v31 + 8);
  *(void *)(v30 + 16) = *(void *)(v31 + 16);
  *(void *)(v30 + 24) = *(void *)(v31 + 24);
  *(void *)(v30 + 32) = *(void *)(v31 + 32);
  *(void *)(v30 + 40) = *(void *)(v31 + 40);
  *(unsigned char *)(v30 + 48) = *(unsigned char *)(v31 + 48);
  v21(v27 + v22[6], v28 + v22[6], v20);
  v71(v27 + v22[7], v28 + v22[7], v70);
  v74(v27 + v22[8], v28 + v22[8], v16);
  v21(v27 + *(int *)(v72 + 36), v28 + *(int *)(v72 + 36), v20);
  v71(v27 + *(int *)(v72 + 40), v28 + *(int *)(v72 + 40), v70);
  uint64_t v32 = v73[6];
  uint64_t v33 = v75 + v32;
  uint64_t v34 = v76 + v32;
  v21(v75 + v32, v76 + v32, v20);
  uint64_t v35 = v22[5];
  uint64_t v36 = v33 + v35;
  uint64_t v37 = v34 + v35;
  *(void *)uint64_t v36 = *(void *)v37;
  *(void *)(v36 + 8) = *(void *)(v37 + 8);
  *(void *)(v36 + 16) = *(void *)(v37 + 16);
  *(void *)(v36 + 24) = *(void *)(v37 + 24);
  *(void *)(v36 + 32) = *(void *)(v37 + 32);
  *(void *)(v36 + 40) = *(void *)(v37 + 40);
  *(unsigned char *)(v36 + 48) = *(unsigned char *)(v37 + 48);
  v21(v33 + v22[6], v34 + v22[6], v20);
  v71(v33 + v22[7], v34 + v22[7], v70);
  v74(v33 + v22[8], v34 + v22[8], v16);
  v21(v33 + *(int *)(v72 + 36), v34 + *(int *)(v72 + 36), v20);
  v71(v33 + *(int *)(v72 + 40), v34 + *(int *)(v72 + 40), v70);
  uint64_t v38 = v73[7];
  uint64_t v39 = v75 + v38;
  uint64_t v40 = v76 + v38;
  v21(v75 + v38, v76 + v38, v20);
  uint64_t v41 = v22[5];
  uint64_t v42 = v39 + v41;
  uint64_t v43 = v40 + v41;
  *(void *)uint64_t v42 = *(void *)v43;
  *(void *)(v42 + 8) = *(void *)(v43 + 8);
  *(void *)(v42 + 16) = *(void *)(v43 + 16);
  *(void *)(v42 + 24) = *(void *)(v43 + 24);
  *(void *)(v42 + 32) = *(void *)(v43 + 32);
  *(void *)(v42 + 40) = *(void *)(v43 + 40);
  *(unsigned char *)(v42 + 48) = *(unsigned char *)(v43 + 48);
  v21(v39 + v22[6], v40 + v22[6], v20);
  v71(v39 + v22[7], v40 + v22[7], v70);
  v74(v39 + v22[8], v40 + v22[8], v16);
  v21(v39 + *(int *)(v72 + 36), v40 + *(int *)(v72 + 36), v20);
  v71(v39 + *(int *)(v72 + 40), v40 + *(int *)(v72 + 40), v70);
  uint64_t v44 = v73[8];
  uint64_t v45 = v75 + v44;
  uint64_t v46 = v76 + v44;
  v21(v75 + v44, v76 + v44, v20);
  uint64_t v47 = v22[5];
  uint64_t v48 = v45 + v47;
  uint64_t v49 = v46 + v47;
  *(void *)uint64_t v48 = *(void *)v49;
  *(void *)(v48 + 8) = *(void *)(v49 + 8);
  *(void *)(v48 + 16) = *(void *)(v49 + 16);
  *(void *)(v48 + 24) = *(void *)(v49 + 24);
  *(void *)(v48 + 32) = *(void *)(v49 + 32);
  *(void *)(v48 + 40) = *(void *)(v49 + 40);
  *(unsigned char *)(v48 + 48) = *(unsigned char *)(v49 + 48);
  uint64_t v50 = v21;
  v21(v45 + v22[6], v46 + v22[6], v20);
  v71(v45 + v22[7], v46 + v22[7], v70);
  v74(v45 + v22[8], v46 + v22[8], v16);
  uint64_t v51 = v73[9];
  uint64_t v52 = v75 + v51;
  uint64_t v53 = v76 + v51;
  v21(v75 + v51, v76 + v51, v20);
  uint64_t v54 = v22[5];
  uint64_t v55 = v52 + v54;
  uint64_t v56 = v53 + v54;
  *(void *)uint64_t v55 = *(void *)v56;
  *(void *)(v55 + 8) = *(void *)(v56 + 8);
  *(void *)(v55 + 16) = *(void *)(v56 + 16);
  *(void *)(v55 + 24) = *(void *)(v56 + 24);
  *(void *)(v55 + 32) = *(void *)(v56 + 32);
  *(void *)(v55 + 40) = *(void *)(v56 + 40);
  *(unsigned char *)(v55 + 48) = *(unsigned char *)(v56 + 48);
  v21(v52 + v22[6], v53 + v22[6], v20);
  v71(v52 + v22[7], v53 + v22[7], v70);
  v74(v52 + v22[8], v53 + v22[8], v16);
  uint64_t v57 = v72;
  v50(v52 + *(int *)(v72 + 36), v53 + *(int *)(v72 + 36), v20);
  v71(v52 + *(int *)(v57 + 40), v53 + *(int *)(v57 + 40), v70);
  uint64_t v58 = v73[10];
  uint64_t v59 = v75 + v58;
  uint64_t v60 = v76 + v58;
  v50(v75 + v58, v76 + v58, v20);
  uint64_t v61 = v22[5];
  uint64_t v62 = v59 + v61;
  uint64_t v63 = v60 + v61;
  *(void *)uint64_t v62 = *(void *)v63;
  *(void *)(v62 + 8) = *(void *)(v63 + 8);
  *(void *)(v62 + 16) = *(void *)(v63 + 16);
  *(void *)(v62 + 24) = *(void *)(v63 + 24);
  *(void *)(v62 + 32) = *(void *)(v63 + 32);
  *(void *)(v62 + 40) = *(void *)(v63 + 40);
  *(unsigned char *)(v62 + 48) = *(unsigned char *)(v63 + 48);
  v50(v59 + v22[6], v60 + v22[6], v20);
  v71(v59 + v22[7], v60 + v22[7], v70);
  v74(v59 + v22[8], v60 + v22[8], v16);
  v50(v59 + *(int *)(v57 + 36), v60 + *(int *)(v57 + 36), v20);
  v71(v59 + *(int *)(v57 + 40), v60 + *(int *)(v57 + 40), v70);
  uint64_t v64 = type metadata accessor for MLHandActionClassifier.Torso(0);
  v68(v75 + *(int *)(v64 + 24), v76 + *(int *)(v64 + 24), v69);
  uint64_t result = v11;
  *(unsigned char *)(v11 + v67[9]) = *(unsigned char *)(v66 + v67[9]);
  *(void *)(v11 + v67[10]) = *(void *)(v66 + v67[10]);
  return result;
}

uint64_t initializeWithTake for MLHandActionClassifier.GraphCNNModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for BatchNorm();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v75 = v7;
  uint64_t v8 = v7;
  uint64_t v9 = a3[5];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v74 = type metadata accessor for Dense();
  long long v73 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v74 - 8) + 32);
  v73(v10, v11, v74);
  uint64_t v72 = a1;
  v8(a1 + a3[6], a2 + a3[6], v6);
  uint64_t v12 = a3[7];
  uint64_t v71 = a2;
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v80 = type metadata accessor for Dropout();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v80 - 8) + 32);
  v15(v13, v14, v80);
  uint64_t v16 = a3[8];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = type metadata accessor for Conv2D();
  uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32);
  v20(v17, v18, v19);
  uint64_t v21 = (int *)type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
  uint64_t v22 = v21[5];
  uint64_t v23 = v17 + v22;
  uint64_t v24 = v18 + v22;
  long long v25 = *(_OWORD *)(v24 + 16);
  *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  *(_OWORD *)(v23 + 16) = v25;
  *(_OWORD *)(v23 + 32) = *(_OWORD *)(v24 + 32);
  *(unsigned char *)(v23 + 48) = *(unsigned char *)(v24 + 48);
  v20(v17 + v21[6], v18 + v21[6], v19);
  v75(v17 + v21[7], v18 + v21[7], v6);
  v15(v17 + v21[8], v18 + v21[8], v80);
  uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  v20(v17 + *(int *)(v77 + 36), v18 + *(int *)(v77 + 36), v19);
  uint64_t v76 = v17;
  uint64_t v79 = v18;
  v75(v17 + *(int *)(v77 + 40), v18 + *(int *)(v77 + 40), v6);
  uint64_t v78 = (int *)type metadata accessor for MLHandActionClassifier.SingleStreamBlock(0);
  uint64_t v26 = v78[5];
  uint64_t v27 = v17 + v26;
  uint64_t v28 = v18 + v26;
  v20(v76 + v26, v79 + v26, v19);
  uint64_t v29 = v21[5];
  uint64_t v30 = v27 + v29;
  uint64_t v31 = v28 + v29;
  long long v32 = *(_OWORD *)(v31 + 16);
  *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
  *(_OWORD *)(v30 + 16) = v32;
  *(_OWORD *)(v30 + 32) = *(_OWORD *)(v31 + 32);
  *(unsigned char *)(v30 + 48) = *(unsigned char *)(v31 + 48);
  v20(v27 + v21[6], v28 + v21[6], v19);
  v75(v27 + v21[7], v28 + v21[7], v6);
  v15(v27 + v21[8], v28 + v21[8], v80);
  v20(v27 + *(int *)(v77 + 36), v28 + *(int *)(v77 + 36), v19);
  v75(v27 + *(int *)(v77 + 40), v28 + *(int *)(v77 + 40), v6);
  uint64_t v33 = v78[6];
  uint64_t v34 = v76 + v33;
  uint64_t v35 = v79 + v33;
  v20(v76 + v33, v79 + v33, v19);
  uint64_t v36 = v21[5];
  uint64_t v37 = v34 + v36;
  uint64_t v38 = v35 + v36;
  long long v39 = *(_OWORD *)(v38 + 16);
  *(_OWORD *)uint64_t v37 = *(_OWORD *)v38;
  *(_OWORD *)(v37 + 16) = v39;
  *(_OWORD *)(v37 + 32) = *(_OWORD *)(v38 + 32);
  *(unsigned char *)(v37 + 48) = *(unsigned char *)(v38 + 48);
  v20(v34 + v21[6], v35 + v21[6], v19);
  v75(v34 + v21[7], v35 + v21[7], v6);
  v15(v34 + v21[8], v35 + v21[8], v80);
  v20(v34 + *(int *)(v77 + 36), v35 + *(int *)(v77 + 36), v19);
  v75(v34 + *(int *)(v77 + 40), v35 + *(int *)(v77 + 40), v6);
  uint64_t v40 = v78[7];
  uint64_t v41 = v76 + v40;
  uint64_t v42 = v79 + v40;
  v20(v76 + v40, v79 + v40, v19);
  uint64_t v43 = v21[5];
  uint64_t v44 = v41 + v43;
  uint64_t v45 = v42 + v43;
  long long v46 = *(_OWORD *)(v45 + 16);
  *(_OWORD *)uint64_t v44 = *(_OWORD *)v45;
  *(_OWORD *)(v44 + 16) = v46;
  *(_OWORD *)(v44 + 32) = *(_OWORD *)(v45 + 32);
  *(unsigned char *)(v44 + 48) = *(unsigned char *)(v45 + 48);
  v20(v41 + v21[6], v42 + v21[6], v19);
  v75(v41 + v21[7], v42 + v21[7], v6);
  v15(v41 + v21[8], v42 + v21[8], v80);
  v20(v41 + *(int *)(v77 + 36), v42 + *(int *)(v77 + 36), v19);
  v75(v41 + *(int *)(v77 + 40), v42 + *(int *)(v77 + 40), v6);
  uint64_t v47 = v78[8];
  uint64_t v48 = v76 + v47;
  uint64_t v49 = v79 + v47;
  v20(v76 + v47, v79 + v47, v19);
  uint64_t v50 = v21[5];
  uint64_t v51 = v48 + v50;
  uint64_t v52 = v49 + v50;
  long long v53 = *(_OWORD *)(v52 + 16);
  *(_OWORD *)uint64_t v51 = *(_OWORD *)v52;
  *(_OWORD *)(v51 + 16) = v53;
  *(_OWORD *)(v51 + 32) = *(_OWORD *)(v52 + 32);
  *(unsigned char *)(v51 + 48) = *(unsigned char *)(v52 + 48);
  v20(v48 + v21[6], v49 + v21[6], v19);
  v75(v48 + v21[7], v49 + v21[7], v6);
  v15(v48 + v21[8], v49 + v21[8], v80);
  uint64_t v54 = v78[9];
  uint64_t v55 = v76 + v54;
  uint64_t v56 = v79 + v54;
  v20(v76 + v54, v79 + v54, v19);
  uint64_t v57 = v21[5];
  uint64_t v58 = v55 + v57;
  uint64_t v59 = v56 + v57;
  long long v60 = *(_OWORD *)(v59 + 16);
  *(_OWORD *)uint64_t v58 = *(_OWORD *)v59;
  *(_OWORD *)(v58 + 16) = v60;
  *(_OWORD *)(v58 + 32) = *(_OWORD *)(v59 + 32);
  *(unsigned char *)(v58 + 48) = *(unsigned char *)(v59 + 48);
  v20(v55 + v21[6], v56 + v21[6], v19);
  v75(v55 + v21[7], v56 + v21[7], v6);
  v15(v55 + v21[8], v56 + v21[8], v80);
  v20(v55 + *(int *)(v77 + 36), v56 + *(int *)(v77 + 36), v19);
  v75(v55 + *(int *)(v77 + 40), v56 + *(int *)(v77 + 40), v6);
  uint64_t v61 = v78[10];
  uint64_t v62 = v76 + v61;
  uint64_t v63 = v79 + v61;
  v20(v76 + v61, v79 + v61, v19);
  uint64_t v64 = v21[5];
  uint64_t v65 = v62 + v64;
  uint64_t v66 = v63 + v64;
  long long v67 = *(_OWORD *)(v66 + 16);
  *(_OWORD *)uint64_t v65 = *(_OWORD *)v66;
  *(_OWORD *)(v65 + 16) = v67;
  *(_OWORD *)(v65 + 32) = *(_OWORD *)(v66 + 32);
  *(unsigned char *)(v65 + 48) = *(unsigned char *)(v66 + 48);
  v20(v62 + v21[6], v63 + v21[6], v19);
  v75(v62 + v21[7], v63 + v21[7], v6);
  v15(v62 + v21[8], v63 + v21[8], v80);
  v20(v62 + *(int *)(v77 + 36), v63 + *(int *)(v77 + 36), v19);
  v75(v62 + *(int *)(v77 + 40), v63 + *(int *)(v77 + 40), v6);
  uint64_t v68 = type metadata accessor for MLHandActionClassifier.Torso(0);
  v73(v76 + *(int *)(v68 + 24), v79 + *(int *)(v68 + 24), v74);
  uint64_t v69 = a3[10];
  uint64_t result = v72;
  *(unsigned char *)(v72 + a3[9]) = *(unsigned char *)(v71 + a3[9]);
  *(void *)(v72 + v69) = *(void *)(v71 + v69);
  return result;
}

uint64_t assignWithTake for MLHandActionClassifier.GraphCNNModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for BatchNorm();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  uint64_t v75 = v7;
  uint64_t v8 = v7;
  uint64_t v9 = a3[5];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v74 = type metadata accessor for Dense();
  long long v73 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v74 - 8) + 40);
  v73(v10, v11, v74);
  uint64_t v72 = a1;
  v8(a1 + a3[6], a2 + a3[6], v6);
  uint64_t v12 = a3[7];
  uint64_t v71 = a2;
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v80 = type metadata accessor for Dropout();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v80 - 8) + 40);
  v15(v13, v14, v80);
  uint64_t v16 = a3[8];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = type metadata accessor for Conv2D();
  uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 40);
  v20(v17, v18, v19);
  uint64_t v21 = (int *)type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
  uint64_t v22 = v21[5];
  uint64_t v23 = v17 + v22;
  uint64_t v24 = v18 + v22;
  long long v25 = *(_OWORD *)(v24 + 16);
  *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  *(_OWORD *)(v23 + 16) = v25;
  *(_OWORD *)(v23 + 32) = *(_OWORD *)(v24 + 32);
  *(unsigned char *)(v23 + 48) = *(unsigned char *)(v24 + 48);
  v20(v17 + v21[6], v18 + v21[6], v19);
  v75(v17 + v21[7], v18 + v21[7], v6);
  v15(v17 + v21[8], v18 + v21[8], v80);
  uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  v20(v17 + *(int *)(v77 + 36), v18 + *(int *)(v77 + 36), v19);
  uint64_t v76 = v17;
  uint64_t v79 = v18;
  v75(v17 + *(int *)(v77 + 40), v18 + *(int *)(v77 + 40), v6);
  uint64_t v78 = (int *)type metadata accessor for MLHandActionClassifier.SingleStreamBlock(0);
  uint64_t v26 = v78[5];
  uint64_t v27 = v17 + v26;
  uint64_t v28 = v18 + v26;
  v20(v76 + v26, v79 + v26, v19);
  uint64_t v29 = v21[5];
  uint64_t v30 = v27 + v29;
  uint64_t v31 = v28 + v29;
  long long v32 = *(_OWORD *)(v31 + 16);
  *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
  *(_OWORD *)(v30 + 16) = v32;
  *(_OWORD *)(v30 + 32) = *(_OWORD *)(v31 + 32);
  *(unsigned char *)(v30 + 48) = *(unsigned char *)(v31 + 48);
  v20(v27 + v21[6], v28 + v21[6], v19);
  v75(v27 + v21[7], v28 + v21[7], v6);
  v15(v27 + v21[8], v28 + v21[8], v80);
  v20(v27 + *(int *)(v77 + 36), v28 + *(int *)(v77 + 36), v19);
  v75(v27 + *(int *)(v77 + 40), v28 + *(int *)(v77 + 40), v6);
  uint64_t v33 = v78[6];
  uint64_t v34 = v76 + v33;
  uint64_t v35 = v79 + v33;
  v20(v76 + v33, v79 + v33, v19);
  uint64_t v36 = v21[5];
  uint64_t v37 = v34 + v36;
  uint64_t v38 = v35 + v36;
  long long v39 = *(_OWORD *)(v38 + 16);
  *(_OWORD *)uint64_t v37 = *(_OWORD *)v38;
  *(_OWORD *)(v37 + 16) = v39;
  *(_OWORD *)(v37 + 32) = *(_OWORD *)(v38 + 32);
  *(unsigned char *)(v37 + 48) = *(unsigned char *)(v38 + 48);
  v20(v34 + v21[6], v35 + v21[6], v19);
  v75(v34 + v21[7], v35 + v21[7], v6);
  v15(v34 + v21[8], v35 + v21[8], v80);
  v20(v34 + *(int *)(v77 + 36), v35 + *(int *)(v77 + 36), v19);
  v75(v34 + *(int *)(v77 + 40), v35 + *(int *)(v77 + 40), v6);
  uint64_t v40 = v78[7];
  uint64_t v41 = v76 + v40;
  uint64_t v42 = v79 + v40;
  v20(v76 + v40, v79 + v40, v19);
  uint64_t v43 = v21[5];
  uint64_t v44 = v41 + v43;
  uint64_t v45 = v42 + v43;
  long long v46 = *(_OWORD *)(v45 + 16);
  *(_OWORD *)uint64_t v44 = *(_OWORD *)v45;
  *(_OWORD *)(v44 + 16) = v46;
  *(_OWORD *)(v44 + 32) = *(_OWORD *)(v45 + 32);
  *(unsigned char *)(v44 + 48) = *(unsigned char *)(v45 + 48);
  v20(v41 + v21[6], v42 + v21[6], v19);
  v75(v41 + v21[7], v42 + v21[7], v6);
  v15(v41 + v21[8], v42 + v21[8], v80);
  v20(v41 + *(int *)(v77 + 36), v42 + *(int *)(v77 + 36), v19);
  v75(v41 + *(int *)(v77 + 40), v42 + *(int *)(v77 + 40), v6);
  uint64_t v47 = v78[8];
  uint64_t v48 = v76 + v47;
  uint64_t v49 = v79 + v47;
  v20(v76 + v47, v79 + v47, v19);
  uint64_t v50 = v21[5];
  uint64_t v51 = v48 + v50;
  uint64_t v52 = v49 + v50;
  long long v53 = *(_OWORD *)(v52 + 16);
  *(_OWORD *)uint64_t v51 = *(_OWORD *)v52;
  *(_OWORD *)(v51 + 16) = v53;
  *(_OWORD *)(v51 + 32) = *(_OWORD *)(v52 + 32);
  *(unsigned char *)(v51 + 48) = *(unsigned char *)(v52 + 48);
  v20(v48 + v21[6], v49 + v21[6], v19);
  v75(v48 + v21[7], v49 + v21[7], v6);
  v15(v48 + v21[8], v49 + v21[8], v80);
  uint64_t v54 = v78[9];
  uint64_t v55 = v76 + v54;
  uint64_t v56 = v79 + v54;
  v20(v76 + v54, v79 + v54, v19);
  uint64_t v57 = v21[5];
  uint64_t v58 = v55 + v57;
  uint64_t v59 = v56 + v57;
  long long v60 = *(_OWORD *)(v59 + 16);
  *(_OWORD *)uint64_t v58 = *(_OWORD *)v59;
  *(_OWORD *)(v58 + 16) = v60;
  *(_OWORD *)(v58 + 32) = *(_OWORD *)(v59 + 32);
  *(unsigned char *)(v58 + 48) = *(unsigned char *)(v59 + 48);
  v20(v55 + v21[6], v56 + v21[6], v19);
  v75(v55 + v21[7], v56 + v21[7], v6);
  v15(v55 + v21[8], v56 + v21[8], v80);
  v20(v55 + *(int *)(v77 + 36), v56 + *(int *)(v77 + 36), v19);
  v75(v55 + *(int *)(v77 + 40), v56 + *(int *)(v77 + 40), v6);
  uint64_t v61 = v78[10];
  uint64_t v62 = v76 + v61;
  uint64_t v63 = v79 + v61;
  v20(v76 + v61, v79 + v61, v19);
  uint64_t v64 = v21[5];
  uint64_t v65 = v62 + v64;
  uint64_t v66 = v63 + v64;
  long long v67 = *(_OWORD *)(v66 + 16);
  *(_OWORD *)uint64_t v65 = *(_OWORD *)v66;
  *(_OWORD *)(v65 + 16) = v67;
  *(_OWORD *)(v65 + 32) = *(_OWORD *)(v66 + 32);
  *(unsigned char *)(v65 + 48) = *(unsigned char *)(v66 + 48);
  v20(v62 + v21[6], v63 + v21[6], v19);
  v75(v62 + v21[7], v63 + v21[7], v6);
  v15(v62 + v21[8], v63 + v21[8], v80);
  v20(v62 + *(int *)(v77 + 36), v63 + *(int *)(v77 + 36), v19);
  v75(v62 + *(int *)(v77 + 40), v63 + *(int *)(v77 + 40), v6);
  uint64_t v68 = type metadata accessor for MLHandActionClassifier.Torso(0);
  v73(v76 + *(int *)(v68 + 24), v79 + *(int *)(v68 + 24), v74);
  uint64_t v69 = a3[10];
  uint64_t result = v72;
  *(unsigned char *)(v72 + a3[9]) = *(unsigned char *)(v71 + a3[9]);
  *(void *)(v72 + v69) = *(void *)(v71 + v69);
  return result;
}

uint64_t getEnumTagSinglePayload for MLHandActionClassifier.GraphCNNModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2271A3BC0);
}

uint64_t sub_2271A3BC0()
{
  OUTLINED_FUNCTION_19_24();
  type metadata accessor for BatchNorm();
  OUTLINED_FUNCTION_6_1();
  if (*(_DWORD *)(v3 + 84) == v0)
  {
    uint64_t v4 = OUTLINED_FUNCTION_42_14();
  }
  else
  {
    type metadata accessor for Dense();
    OUTLINED_FUNCTION_6_1();
    if (*(_DWORD *)(v7 + 84) == v0)
    {
      uint64_t v5 = v6;
      uint64_t v8 = v2[5];
    }
    else
    {
      type metadata accessor for Dropout();
      OUTLINED_FUNCTION_6_1();
      if (*(_DWORD *)(v10 + 84) == v0)
      {
        uint64_t v5 = v9;
        uint64_t v8 = v2[7];
      }
      else
      {
        type metadata accessor for MLHandActionClassifier.Torso(0);
        OUTLINED_FUNCTION_6_1();
        if (*(_DWORD *)(v12 + 84) != v0)
        {
          unsigned int v14 = *(unsigned __int8 *)(v1 + v2[9]);
          if (v14 >= 2) {
            return OUTLINED_FUNCTION_39_14(v14);
          }
          else {
            return 0;
          }
        }
        uint64_t v5 = v11;
        uint64_t v8 = v2[8];
      }
    }
    uint64_t v4 = v1 + v8;
  }

  return __swift_getEnumTagSinglePayload(v4, v0, v5);
}

uint64_t storeEnumTagSinglePayload for MLHandActionClassifier.GraphCNNModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2271A3CC4);
}

void sub_2271A3CC4()
{
  OUTLINED_FUNCTION_16_25();
  type metadata accessor for BatchNorm();
  OUTLINED_FUNCTION_6_1();
  if (*(_DWORD *)(v4 + 84) == v3)
  {
    OUTLINED_FUNCTION_44_12();
  }
  else
  {
    type metadata accessor for Dense();
    OUTLINED_FUNCTION_6_1();
    if (*(_DWORD *)(v5 + 84) != v3)
    {
      type metadata accessor for Dropout();
      OUTLINED_FUNCTION_6_1();
      if (*(_DWORD *)(v6 + 84) != v3)
      {
        type metadata accessor for MLHandActionClassifier.Torso(0);
        OUTLINED_FUNCTION_6_1();
        if (*(_DWORD *)(v7 + 84) != v3)
        {
          *(unsigned char *)(v1 + *(int *)(v2 + 36)) = v0 + 1;
          return;
        }
      }
    }
  }
  OUTLINED_FUNCTION_41_12();

  __swift_storeEnumTagSinglePayload(v8, v9, v10, v11);
}

uint64_t type metadata completion function for MLHandActionClassifier.GraphCNNModel()
{
  uint64_t result = type metadata accessor for BatchNorm();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Dense();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for Dropout();
      if (v3 <= 0x3F)
      {
        uint64_t result = type metadata accessor for MLHandActionClassifier.Torso(319);
        if (v4 <= 0x3F)
        {
          swift_initStructMetadata();
          return 0;
        }
      }
    }
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for MLHandActionClassifier.Torso(char *a1, char *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v71 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v71 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = type metadata accessor for Conv2D();
    uint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16);
    v7(a1, a2, v6);
    uint64_t v8 = (int *)type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
    uint64_t v9 = v8[5];
    uint64_t v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    long long v12 = *((_OWORD *)v11 + 1);
    *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
    *((_OWORD *)v10 + 1) = v12;
    *((_OWORD *)v10 + 2) = *((_OWORD *)v11 + 2);
    v10[48] = v11[48];
    v7(&a1[v8[6]], &a2[v8[6]], v6);
    uint64_t v13 = v8[7];
    unsigned int v14 = &a1[v13];
    uint64_t v15 = &a2[v13];
    uint64_t v16 = type metadata accessor for BatchNorm();
    uint64_t v17 = *(void (**)(char *, char *))(*(void *)(v16 - 8) + 16);
    uint64_t v18 = v14;
    uint64_t v19 = v16;
    v17(v18, v15);
    uint64_t v20 = (void (*)(char *, char *, uint64_t))v17;
    uint64_t v74 = (void (*)(char *, char *, uint64_t))v17;
    uint64_t v21 = v8[8];
    uint64_t v22 = &a1[v21];
    uint64_t v23 = &a2[v21];
    uint64_t v79 = type metadata accessor for Dropout();
    uint64_t v78 = *(void (**)(char *, char *, uint64_t))(*(void *)(v79 - 8) + 16);
    v78(v22, v23, v79);
    uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
    v7(&a1[*(int *)(v75 + 36)], &a2[*(int *)(v75 + 36)], v6);
    v20(&a1[*(int *)(v75 + 40)], &a2[*(int *)(v75 + 40)], v19);
    uint64_t v76 = (int *)type metadata accessor for MLHandActionClassifier.SingleStreamBlock(0);
    uint64_t v77 = a2;
    uint64_t v24 = v76[5];
    long long v25 = &a1[v24];
    uint64_t v26 = &a2[v24];
    v7(&a1[v24], v26, v6);
    uint64_t v27 = v8[5];
    uint64_t v28 = &v25[v27];
    uint64_t v29 = &v26[v27];
    long long v30 = *((_OWORD *)v29 + 1);
    *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
    *((_OWORD *)v28 + 1) = v30;
    *((_OWORD *)v28 + 2) = *((_OWORD *)v29 + 2);
    v28[48] = v29[48];
    v7(&v25[v8[6]], &v26[v8[6]], v6);
    v74(&v25[v8[7]], &v26[v8[7]], v19);
    v78(&v25[v8[8]], &v26[v8[8]], v79);
    v7(&v25[*(int *)(v75 + 36)], &v26[*(int *)(v75 + 36)], v6);
    v74(&v25[*(int *)(v75 + 40)], &v26[*(int *)(v75 + 40)], v19);
    uint64_t v31 = v76[6];
    long long v32 = &a1[v31];
    uint64_t v33 = &v77[v31];
    v7(&a1[v31], &v77[v31], v6);
    uint64_t v34 = v8[5];
    uint64_t v35 = &v32[v34];
    uint64_t v36 = &v33[v34];
    long long v37 = *((_OWORD *)v36 + 1);
    *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
    *((_OWORD *)v35 + 1) = v37;
    *((_OWORD *)v35 + 2) = *((_OWORD *)v36 + 2);
    v35[48] = v36[48];
    v7(&v32[v8[6]], &v33[v8[6]], v6);
    v74(&v32[v8[7]], &v33[v8[7]], v19);
    v78(&v32[v8[8]], &v33[v8[8]], v79);
    v7(&v32[*(int *)(v75 + 36)], &v33[*(int *)(v75 + 36)], v6);
    v74(&v32[*(int *)(v75 + 40)], &v33[*(int *)(v75 + 40)], v19);
    uint64_t v38 = v76[7];
    long long v39 = &a1[v38];
    uint64_t v40 = &v77[v38];
    v7(&a1[v38], &v77[v38], v6);
    uint64_t v41 = v8[5];
    uint64_t v42 = &v39[v41];
    uint64_t v43 = &v40[v41];
    long long v44 = *((_OWORD *)v43 + 1);
    *(_OWORD *)uint64_t v42 = *(_OWORD *)v43;
    *((_OWORD *)v42 + 1) = v44;
    *((_OWORD *)v42 + 2) = *((_OWORD *)v43 + 2);
    v42[48] = v43[48];
    v7(&v39[v8[6]], &v40[v8[6]], v6);
    v74(&v39[v8[7]], &v40[v8[7]], v19);
    v78(&v39[v8[8]], &v40[v8[8]], v79);
    v7(&v39[*(int *)(v75 + 36)], &v40[*(int *)(v75 + 36)], v6);
    v74(&v39[*(int *)(v75 + 40)], &v40[*(int *)(v75 + 40)], v19);
    uint64_t v45 = v76[8];
    long long v46 = &a1[v45];
    uint64_t v47 = &v77[v45];
    v7(&a1[v45], &v77[v45], v6);
    uint64_t v48 = v8[5];
    uint64_t v49 = &v46[v48];
    uint64_t v50 = &v47[v48];
    long long v51 = *((_OWORD *)v50 + 1);
    *(_OWORD *)uint64_t v49 = *(_OWORD *)v50;
    *((_OWORD *)v49 + 1) = v51;
    *((_OWORD *)v49 + 2) = *((_OWORD *)v50 + 2);
    v49[48] = v50[48];
    v7(&v46[v8[6]], &v47[v8[6]], v6);
    v74(&v46[v8[7]], &v47[v8[7]], v19);
    v78(&v46[v8[8]], &v47[v8[8]], v79);
    uint64_t v52 = v76[9];
    long long v53 = &a1[v52];
    uint64_t v54 = &v77[v52];
    v7(&a1[v52], &v77[v52], v6);
    uint64_t v55 = v8[5];
    uint64_t v56 = &v53[v55];
    uint64_t v57 = &v54[v55];
    long long v58 = *((_OWORD *)v57 + 1);
    *(_OWORD *)uint64_t v56 = *(_OWORD *)v57;
    *((_OWORD *)v56 + 1) = v58;
    *((_OWORD *)v56 + 2) = *((_OWORD *)v57 + 2);
    v56[48] = v57[48];
    v7(&v53[v8[6]], &v54[v8[6]], v6);
    v74(&v53[v8[7]], &v54[v8[7]], v19);
    v78(&v53[v8[8]], &v54[v8[8]], v79);
    uint64_t v59 = v75;
    v7(&v53[*(int *)(v75 + 36)], &v54[*(int *)(v75 + 36)], v6);
    v74(&v53[*(int *)(v75 + 40)], &v54[*(int *)(v75 + 40)], v19);
    uint64_t v60 = v76[10];
    uint64_t v61 = &a1[v60];
    uint64_t v62 = &v77[v60];
    v7(&a1[v60], &v77[v60], v6);
    uint64_t v63 = v8[5];
    uint64_t v64 = &v61[v63];
    uint64_t v65 = &v62[v63];
    long long v66 = *((_OWORD *)v65 + 1);
    *(_OWORD *)uint64_t v64 = *(_OWORD *)v65;
    *((_OWORD *)v64 + 1) = v66;
    *((_OWORD *)v64 + 2) = *((_OWORD *)v65 + 2);
    v64[48] = v65[48];
    v7(&v61[v8[6]], &v62[v8[6]], v6);
    v74(&v61[v8[7]], &v62[v8[7]], v19);
    v78(&v61[v8[8]], &v62[v8[8]], v79);
    v7(&v61[*(int *)(v59 + 36)], &v62[*(int *)(v59 + 36)], v6);
    v74(&v61[*(int *)(v59 + 40)], &v62[*(int *)(v59 + 40)], v19);
    uint64_t v67 = *(int *)(a3 + 24);
    uint64_t v68 = &a1[v67];
    uint64_t v69 = &v77[v67];
    uint64_t v70 = type metadata accessor for Dense();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v70 - 8) + 16))(v68, v69, v70);
  }
  return a1;
}

uint64_t destroy for MLHandActionClassifier.Torso(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Conv2D();
  unint64_t v4 = *(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  v4(a1, v3);
  int v5 = (int *)type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
  v4(a1 + v5[6], v3);
  uint64_t v6 = a1 + v5[7];
  uint64_t v7 = type metadata accessor for BatchNorm();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  uint64_t v9 = v8;
  uint64_t v10 = a1 + v5[8];
  uint64_t v11 = type metadata accessor for Dropout();
  uint64_t v28 = *(void (**)(uint64_t))(*(void *)(v11 - 8) + 8);
  uint64_t v12 = v10;
  uint64_t v13 = v11;
  v28(v12);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  v4(a1 + *(int *)(v27 + 36), v3);
  unsigned int v14 = v9;
  v9(a1 + *(int *)(v27 + 40), v7);
  uint64_t v29 = (int *)type metadata accessor for MLHandActionClassifier.SingleStreamBlock(0);
  uint64_t v15 = a1 + v29[5];
  v4(v15, v3);
  v4(v15 + v5[6], v3);
  v14(v15 + v5[7], v7);
  ((void (*)(uint64_t, uint64_t))v28)(v15 + v5[8], v13);
  v4(v15 + *(int *)(v27 + 36), v3);
  v14(v15 + *(int *)(v27 + 40), v7);
  uint64_t v16 = a1 + v29[6];
  v4(v16, v3);
  v4(v16 + v5[6], v3);
  v14(v16 + v5[7], v7);
  ((void (*)(uint64_t, uint64_t))v28)(v16 + v5[8], v13);
  v4(v16 + *(int *)(v27 + 36), v3);
  v14(v16 + *(int *)(v27 + 40), v7);
  uint64_t v17 = a1 + v29[7];
  v4(v17, v3);
  v4(v17 + v5[6], v3);
  v14(v17 + v5[7], v7);
  ((void (*)(uint64_t, uint64_t))v28)(v17 + v5[8], v13);
  v4(v17 + *(int *)(v27 + 36), v3);
  v14(v17 + *(int *)(v27 + 40), v7);
  uint64_t v18 = a1 + v29[8];
  v4(v18, v3);
  v4(v18 + v5[6], v3);
  v14(v18 + v5[7], v7);
  ((void (*)(uint64_t, uint64_t))v28)(v18 + v5[8], v13);
  uint64_t v19 = a1 + v29[9];
  v4(v19, v3);
  v4(v19 + v5[6], v3);
  v14(v19 + v5[7], v7);
  ((void (*)(uint64_t, uint64_t))v28)(v19 + v5[8], v13);
  v4(v19 + *(int *)(v27 + 36), v3);
  uint64_t v20 = v14;
  v14(v19 + *(int *)(v27 + 40), v7);
  uint64_t v21 = a1 + v29[10];
  v4(v21, v3);
  v4(v21 + v5[6], v3);
  v20(v21 + v5[7], v7);
  ((void (*)(uint64_t, uint64_t))v28)(v21 + v5[8], v13);
  v4(v21 + *(int *)(v27 + 36), v3);
  v20(v21 + *(int *)(v27 + 40), v7);
  uint64_t v22 = a1 + *(int *)(a2 + 24);
  uint64_t v23 = type metadata accessor for Dense();
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 8);

  return v24(v22, v23);
}

uint64_t initializeWithCopy for MLHandActionClassifier.Torso(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Conv2D();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  v6(a1, a2, v5);
  uint64_t v7 = (int *)type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  long long v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v11;
  *(_OWORD *)(v9 + 32) = *(_OWORD *)(v10 + 32);
  *(unsigned char *)(v9 + 48) = *(unsigned char *)(v10 + 48);
  v6(a1 + v7[6], a2 + v7[6], v5);
  uint64_t v12 = v7[7];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v72 = type metadata accessor for BatchNorm();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v72 - 8) + 16);
  v15(v13, v14, v72);
  uint64_t v16 = v15;
  uint64_t v17 = v7[8];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a1;
  uint64_t v20 = a2;
  uint64_t v21 = a2 + v17;
  uint64_t v74 = type metadata accessor for Dropout();
  uint64_t v76 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v74 - 8) + 16);
  v76(v18, v21, v74);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  v6(v19 + *(int *)(v22 + 36), v20 + *(int *)(v22 + 36), v5);
  uint64_t v77 = v20;
  uint64_t v78 = v19;
  v16(v19 + *(int *)(v22 + 40), v20 + *(int *)(v22 + 40), v72);
  uint64_t v75 = (int *)type metadata accessor for MLHandActionClassifier.SingleStreamBlock(0);
  uint64_t v23 = v75[5];
  uint64_t v24 = v19 + v23;
  uint64_t v25 = v20 + v23;
  v6(v24, v25, v5);
  uint64_t v26 = v7[5];
  uint64_t v27 = v24 + v26;
  uint64_t v28 = v25 + v26;
  long long v29 = *(_OWORD *)(v28 + 16);
  *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
  *(_OWORD *)(v27 + 16) = v29;
  *(_OWORD *)(v27 + 32) = *(_OWORD *)(v28 + 32);
  *(unsigned char *)(v27 + 48) = *(unsigned char *)(v28 + 48);
  v6(v24 + v7[6], v25 + v7[6], v5);
  v16(v24 + v7[7], v25 + v7[7], v72);
  v76(v24 + v7[8], v25 + v7[8], v74);
  uint64_t v73 = v22;
  v6(v24 + *(int *)(v73 + 36), v25 + *(int *)(v73 + 36), v5);
  v16(v24 + *(int *)(v22 + 40), v25 + *(int *)(v22 + 40), v72);
  uint64_t v30 = v75[6];
  uint64_t v31 = v78 + v30;
  uint64_t v32 = v77 + v30;
  v6(v78 + v30, v77 + v30, v5);
  uint64_t v33 = v7[5];
  uint64_t v34 = v31 + v33;
  uint64_t v35 = v32 + v33;
  long long v36 = *(_OWORD *)(v35 + 16);
  *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
  *(_OWORD *)(v34 + 16) = v36;
  *(_OWORD *)(v34 + 32) = *(_OWORD *)(v35 + 32);
  *(unsigned char *)(v34 + 48) = *(unsigned char *)(v35 + 48);
  v6(v31 + v7[6], v32 + v7[6], v5);
  v16(v31 + v7[7], v32 + v7[7], v72);
  v76(v31 + v7[8], v32 + v7[8], v74);
  v6(v31 + *(int *)(v73 + 36), v32 + *(int *)(v73 + 36), v5);
  v16(v31 + *(int *)(v73 + 40), v32 + *(int *)(v73 + 40), v72);
  uint64_t v37 = v75[7];
  uint64_t v38 = v78 + v37;
  uint64_t v39 = v77 + v37;
  v6(v78 + v37, v77 + v37, v5);
  uint64_t v40 = v7[5];
  uint64_t v41 = v38 + v40;
  uint64_t v42 = v39 + v40;
  long long v43 = *(_OWORD *)(v42 + 16);
  *(_OWORD *)uint64_t v41 = *(_OWORD *)v42;
  *(_OWORD *)(v41 + 16) = v43;
  *(_OWORD *)(v41 + 32) = *(_OWORD *)(v42 + 32);
  *(unsigned char *)(v41 + 48) = *(unsigned char *)(v42 + 48);
  v6(v38 + v7[6], v39 + v7[6], v5);
  v16(v38 + v7[7], v39 + v7[7], v72);
  v76(v38 + v7[8], v39 + v7[8], v74);
  v6(v38 + *(int *)(v73 + 36), v39 + *(int *)(v73 + 36), v5);
  v16(v38 + *(int *)(v73 + 40), v39 + *(int *)(v73 + 40), v72);
  uint64_t v44 = v75[8];
  uint64_t v45 = v78 + v44;
  uint64_t v46 = v77 + v44;
  v6(v78 + v44, v77 + v44, v5);
  uint64_t v47 = v7[5];
  uint64_t v48 = v45 + v47;
  uint64_t v49 = v46 + v47;
  long long v50 = *(_OWORD *)(v49 + 16);
  *(_OWORD *)uint64_t v48 = *(_OWORD *)v49;
  *(_OWORD *)(v48 + 16) = v50;
  *(_OWORD *)(v48 + 32) = *(_OWORD *)(v49 + 32);
  *(unsigned char *)(v48 + 48) = *(unsigned char *)(v49 + 48);
  v6(v45 + v7[6], v46 + v7[6], v5);
  v16(v45 + v7[7], v46 + v7[7], v72);
  v76(v45 + v7[8], v46 + v7[8], v74);
  uint64_t v51 = v75[9];
  uint64_t v52 = v78 + v51;
  uint64_t v53 = v77 + v51;
  v6(v78 + v51, v77 + v51, v5);
  uint64_t v54 = v7[5];
  uint64_t v55 = v52 + v54;
  uint64_t v56 = v53 + v54;
  long long v57 = *(_OWORD *)(v56 + 16);
  *(_OWORD *)uint64_t v55 = *(_OWORD *)v56;
  *(_OWORD *)(v55 + 16) = v57;
  *(_OWORD *)(v55 + 32) = *(_OWORD *)(v56 + 32);
  *(unsigned char *)(v55 + 48) = *(unsigned char *)(v56 + 48);
  v6(v52 + v7[6], v53 + v7[6], v5);
  v16(v52 + v7[7], v53 + v7[7], v72);
  v76(v52 + v7[8], v53 + v7[8], v74);
  uint64_t v58 = v22;
  v6(v52 + *(int *)(v73 + 36), v53 + *(int *)(v73 + 36), v5);
  v16(v52 + *(int *)(v73 + 40), v53 + *(int *)(v73 + 40), v72);
  uint64_t v59 = v75[10];
  uint64_t v60 = v78 + v59;
  uint64_t v61 = v77 + v59;
  v6(v78 + v59, v77 + v59, v5);
  uint64_t v62 = v7[5];
  uint64_t v63 = v60 + v62;
  uint64_t v64 = v61 + v62;
  long long v65 = *(_OWORD *)(v64 + 16);
  *(_OWORD *)uint64_t v63 = *(_OWORD *)v64;
  *(_OWORD *)(v63 + 16) = v65;
  *(_OWORD *)(v63 + 32) = *(_OWORD *)(v64 + 32);
  *(unsigned char *)(v63 + 48) = *(unsigned char *)(v64 + 48);
  v6(v60 + v7[6], v61 + v7[6], v5);
  v16(v60 + v7[7], v61 + v7[7], v72);
  v76(v60 + v7[8], v61 + v7[8], v74);
  v6(v60 + *(int *)(v58 + 36), v61 + *(int *)(v58 + 36), v5);
  v16(v60 + *(int *)(v58 + 40), v61 + *(int *)(v58 + 40), v72);
  uint64_t v66 = *(int *)(a3 + 24);
  uint64_t v67 = v78 + v66;
  uint64_t v68 = v77 + v66;
  uint64_t v69 = type metadata accessor for Dense();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v69 - 8) + 16))(v67, v68, v69);
  return v78;
}

uint64_t assignWithCopy for MLHandActionClassifier.Torso(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Conv2D();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 24);
  v6(a1, a2, v5);
  uint64_t v7 = (int *)type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  *(void *)uint64_t v9 = *(void *)v10;
  *(void *)(v9 + 8) = *(void *)(v10 + 8);
  *(void *)(v9 + 16) = *(void *)(v10 + 16);
  *(void *)(v9 + 24) = *(void *)(v10 + 24);
  *(void *)(v9 + 32) = *(void *)(v10 + 32);
  *(void *)(v9 + 40) = *(void *)(v10 + 40);
  *(unsigned char *)(v9 + 48) = *(unsigned char *)(v10 + 48);
  uint64_t v11 = a1;
  v6(a1 + v7[6], a2 + v7[6], v5);
  uint64_t v12 = v7[7];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = v11;
  uint64_t v15 = a2 + v12;
  uint64_t v65 = type metadata accessor for BatchNorm();
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 24);
  v16(v13, v15, v65);
  uint64_t v17 = v16;
  uint64_t v18 = v7[8];
  uint64_t v19 = v14 + v18;
  uint64_t v20 = v14;
  uint64_t v21 = a2 + v18;
  uint64_t v71 = type metadata accessor for Dropout();
  uint64_t v68 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v71 - 8) + 24);
  v68(v19, v21, v71);
  uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  v6(v20 + *(int *)(v67 + 36), a2 + *(int *)(v67 + 36), v5);
  uint64_t v69 = a2;
  uint64_t v70 = v20;
  v17(v20 + *(int *)(v67 + 40), a2 + *(int *)(v67 + 40), v65);
  uint64_t v66 = (int *)type metadata accessor for MLHandActionClassifier.SingleStreamBlock(0);
  uint64_t v22 = v66[5];
  uint64_t v23 = v20 + v22;
  uint64_t v24 = a2 + v22;
  v6(v23, a2 + v22, v5);
  uint64_t v25 = v7[5];
  uint64_t v26 = v23 + v25;
  uint64_t v27 = v24 + v25;
  *(void *)uint64_t v26 = *(void *)v27;
  *(void *)(v26 + 8) = *(void *)(v27 + 8);
  *(void *)(v26 + 16) = *(void *)(v27 + 16);
  *(void *)(v26 + 24) = *(void *)(v27 + 24);
  *(void *)(v26 + 32) = *(void *)(v27 + 32);
  *(void *)(v26 + 40) = *(void *)(v27 + 40);
  *(unsigned char *)(v26 + 48) = *(unsigned char *)(v27 + 48);
  v6(v23 + v7[6], v24 + v7[6], v5);
  v17(v23 + v7[7], v24 + v7[7], v65);
  v68(v23 + v7[8], v24 + v7[8], v71);
  v6(v23 + *(int *)(v67 + 36), v24 + *(int *)(v67 + 36), v5);
  v17(v23 + *(int *)(v67 + 40), v24 + *(int *)(v67 + 40), v65);
  uint64_t v28 = v66[6];
  uint64_t v29 = v70 + v28;
  uint64_t v30 = a2 + v28;
  v6(v70 + v28, a2 + v28, v5);
  uint64_t v31 = v7[5];
  uint64_t v32 = v29 + v31;
  uint64_t v33 = v30 + v31;
  *(void *)uint64_t v32 = *(void *)v33;
  *(void *)(v32 + 8) = *(void *)(v33 + 8);
  *(void *)(v32 + 16) = *(void *)(v33 + 16);
  *(void *)(v32 + 24) = *(void *)(v33 + 24);
  *(void *)(v32 + 32) = *(void *)(v33 + 32);
  *(void *)(v32 + 40) = *(void *)(v33 + 40);
  *(unsigned char *)(v32 + 48) = *(unsigned char *)(v33 + 48);
  v6(v29 + v7[6], v30 + v7[6], v5);
  v17(v29 + v7[7], v30 + v7[7], v65);
  v68(v29 + v7[8], v30 + v7[8], v71);
  v6(v29 + *(int *)(v67 + 36), v30 + *(int *)(v67 + 36), v5);
  v17(v29 + *(int *)(v67 + 40), v30 + *(int *)(v67 + 40), v65);
  uint64_t v34 = v66[7];
  uint64_t v35 = v70 + v34;
  uint64_t v36 = a2 + v34;
  v6(v70 + v34, a2 + v34, v5);
  uint64_t v37 = v7[5];
  uint64_t v38 = v35 + v37;
  uint64_t v39 = v36 + v37;
  *(void *)uint64_t v38 = *(void *)v39;
  *(void *)(v38 + 8) = *(void *)(v39 + 8);
  *(void *)(v38 + 16) = *(void *)(v39 + 16);
  *(void *)(v38 + 24) = *(void *)(v39 + 24);
  *(void *)(v38 + 32) = *(void *)(v39 + 32);
  *(void *)(v38 + 40) = *(void *)(v39 + 40);
  *(unsigned char *)(v38 + 48) = *(unsigned char *)(v39 + 48);
  v6(v35 + v7[6], v36 + v7[6], v5);
  v17(v35 + v7[7], v36 + v7[7], v65);
  v68(v35 + v7[8], v36 + v7[8], v71);
  v6(v35 + *(int *)(v67 + 36), v36 + *(int *)(v67 + 36), v5);
  v17(v35 + *(int *)(v67 + 40), v36 + *(int *)(v67 + 40), v65);
  uint64_t v40 = v66[8];
  uint64_t v41 = v70 + v40;
  uint64_t v42 = a2 + v40;
  v6(v70 + v40, a2 + v40, v5);
  uint64_t v43 = v7[5];
  uint64_t v44 = v41 + v43;
  uint64_t v45 = v42 + v43;
  *(void *)uint64_t v44 = *(void *)v45;
  *(void *)(v44 + 8) = *(void *)(v45 + 8);
  *(void *)(v44 + 16) = *(void *)(v45 + 16);
  *(void *)(v44 + 24) = *(void *)(v45 + 24);
  *(void *)(v44 + 32) = *(void *)(v45 + 32);
  *(void *)(v44 + 40) = *(void *)(v45 + 40);
  *(unsigned char *)(v44 + 48) = *(unsigned char *)(v45 + 48);
  v6(v41 + v7[6], v42 + v7[6], v5);
  v17(v41 + v7[7], v42 + v7[7], v65);
  v68(v41 + v7[8], v42 + v7[8], v71);
  uint64_t v46 = v66[9];
  uint64_t v47 = v70 + v46;
  uint64_t v48 = a2 + v46;
  v6(v70 + v46, a2 + v46, v5);
  uint64_t v49 = v7[5];
  uint64_t v50 = v47 + v49;
  uint64_t v51 = v48 + v49;
  *(void *)uint64_t v50 = *(void *)v51;
  *(void *)(v50 + 8) = *(void *)(v51 + 8);
  *(void *)(v50 + 16) = *(void *)(v51 + 16);
  *(void *)(v50 + 24) = *(void *)(v51 + 24);
  *(void *)(v50 + 32) = *(void *)(v51 + 32);
  *(void *)(v50 + 40) = *(void *)(v51 + 40);
  *(unsigned char *)(v50 + 48) = *(unsigned char *)(v51 + 48);
  v6(v47 + v7[6], v48 + v7[6], v5);
  v17(v47 + v7[7], v48 + v7[7], v65);
  v68(v47 + v7[8], v48 + v7[8], v71);
  uint64_t v52 = v67;
  v6(v47 + *(int *)(v67 + 36), v48 + *(int *)(v67 + 36), v5);
  v17(v47 + *(int *)(v67 + 40), v48 + *(int *)(v67 + 40), v65);
  uint64_t v53 = v66[10];
  uint64_t v54 = v70 + v53;
  uint64_t v55 = a2 + v53;
  v6(v70 + v53, v69 + v53, v5);
  uint64_t v56 = v7[5];
  uint64_t v57 = v54 + v56;
  uint64_t v58 = v55 + v56;
  *(void *)uint64_t v57 = *(void *)v58;
  *(void *)(v57 + 8) = *(void *)(v58 + 8);
  *(void *)(v57 + 16) = *(void *)(v58 + 16);
  *(void *)(v57 + 24) = *(void *)(v58 + 24);
  *(void *)(v57 + 32) = *(void *)(v58 + 32);
  *(void *)(v57 + 40) = *(void *)(v58 + 40);
  *(unsigned char *)(v57 + 48) = *(unsigned char *)(v58 + 48);
  v6(v54 + v7[6], v55 + v7[6], v5);
  v17(v54 + v7[7], v55 + v7[7], v65);
  v68(v54 + v7[8], v55 + v7[8], v71);
  v6(v54 + *(int *)(v52 + 36), v55 + *(int *)(v52 + 36), v5);
  v17(v54 + *(int *)(v52 + 40), v55 + *(int *)(v52 + 40), v65);
  uint64_t v59 = *(int *)(a3 + 24);
  uint64_t v60 = v70 + v59;
  uint64_t v61 = v69 + v59;
  uint64_t v62 = type metadata accessor for Dense();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 24))(v60, v61, v62);
  return v70;
}

uint64_t initializeWithTake for MLHandActionClassifier.Torso(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Conv2D();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32);
  v6(a1, a2, v5);
  uint64_t v7 = (int *)type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  long long v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v11;
  *(_OWORD *)(v9 + 32) = *(_OWORD *)(v10 + 32);
  *(unsigned char *)(v9 + 48) = *(unsigned char *)(v10 + 48);
  v6(a1 + v7[6], a2 + v7[6], v5);
  uint64_t v12 = v7[7];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v72 = type metadata accessor for BatchNorm();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v72 - 8) + 32);
  v15(v13, v14, v72);
  uint64_t v16 = v15;
  uint64_t v17 = v7[8];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a1;
  uint64_t v20 = a2;
  uint64_t v21 = a2 + v17;
  uint64_t v74 = type metadata accessor for Dropout();
  uint64_t v76 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v74 - 8) + 32);
  v76(v18, v21, v74);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  v6(v19 + *(int *)(v22 + 36), v20 + *(int *)(v22 + 36), v5);
  uint64_t v77 = v20;
  uint64_t v78 = v19;
  v16(v19 + *(int *)(v22 + 40), v20 + *(int *)(v22 + 40), v72);
  uint64_t v75 = (int *)type metadata accessor for MLHandActionClassifier.SingleStreamBlock(0);
  uint64_t v23 = v75[5];
  uint64_t v24 = v19 + v23;
  uint64_t v25 = v20 + v23;
  v6(v24, v25, v5);
  uint64_t v26 = v7[5];
  uint64_t v27 = v24 + v26;
  uint64_t v28 = v25 + v26;
  long long v29 = *(_OWORD *)(v28 + 16);
  *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
  *(_OWORD *)(v27 + 16) = v29;
  *(_OWORD *)(v27 + 32) = *(_OWORD *)(v28 + 32);
  *(unsigned char *)(v27 + 48) = *(unsigned char *)(v28 + 48);
  v6(v24 + v7[6], v25 + v7[6], v5);
  v16(v24 + v7[7], v25 + v7[7], v72);
  v76(v24 + v7[8], v25 + v7[8], v74);
  uint64_t v73 = v22;
  v6(v24 + *(int *)(v73 + 36), v25 + *(int *)(v73 + 36), v5);
  v16(v24 + *(int *)(v22 + 40), v25 + *(int *)(v22 + 40), v72);
  uint64_t v30 = v75[6];
  uint64_t v31 = v78 + v30;
  uint64_t v32 = v77 + v30;
  v6(v78 + v30, v77 + v30, v5);
  uint64_t v33 = v7[5];
  uint64_t v34 = v31 + v33;
  uint64_t v35 = v32 + v33;
  long long v36 = *(_OWORD *)(v35 + 16);
  *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
  *(_OWORD *)(v34 + 16) = v36;
  *(_OWORD *)(v34 + 32) = *(_OWORD *)(v35 + 32);
  *(unsigned char *)(v34 + 48) = *(unsigned char *)(v35 + 48);
  v6(v31 + v7[6], v32 + v7[6], v5);
  v16(v31 + v7[7], v32 + v7[7], v72);
  v76(v31 + v7[8], v32 + v7[8], v74);
  v6(v31 + *(int *)(v73 + 36), v32 + *(int *)(v73 + 36), v5);
  v16(v31 + *(int *)(v73 + 40), v32 + *(int *)(v73 + 40), v72);
  uint64_t v37 = v75[7];
  uint64_t v38 = v78 + v37;
  uint64_t v39 = v77 + v37;
  v6(v78 + v37, v77 + v37, v5);
  uint64_t v40 = v7[5];
  uint64_t v41 = v38 + v40;
  uint64_t v42 = v39 + v40;
  long long v43 = *(_OWORD *)(v42 + 16);
  *(_OWORD *)uint64_t v41 = *(_OWORD *)v42;
  *(_OWORD *)(v41 + 16) = v43;
  *(_OWORD *)(v41 + 32) = *(_OWORD *)(v42 + 32);
  *(unsigned char *)(v41 + 48) = *(unsigned char *)(v42 + 48);
  v6(v38 + v7[6], v39 + v7[6], v5);
  v16(v38 + v7[7], v39 + v7[7], v72);
  v76(v38 + v7[8], v39 + v7[8], v74);
  v6(v38 + *(int *)(v73 + 36), v39 + *(int *)(v73 + 36), v5);
  v16(v38 + *(int *)(v73 + 40), v39 + *(int *)(v73 + 40), v72);
  uint64_t v44 = v75[8];
  uint64_t v45 = v78 + v44;
  uint64_t v46 = v77 + v44;
  v6(v78 + v44, v77 + v44, v5);
  uint64_t v47 = v7[5];
  uint64_t v48 = v45 + v47;
  uint64_t v49 = v46 + v47;
  long long v50 = *(_OWORD *)(v49 + 16);
  *(_OWORD *)uint64_t v48 = *(_OWORD *)v49;
  *(_OWORD *)(v48 + 16) = v50;
  *(_OWORD *)(v48 + 32) = *(_OWORD *)(v49 + 32);
  *(unsigned char *)(v48 + 48) = *(unsigned char *)(v49 + 48);
  v6(v45 + v7[6], v46 + v7[6], v5);
  v16(v45 + v7[7], v46 + v7[7], v72);
  v76(v45 + v7[8], v46 + v7[8], v74);
  uint64_t v51 = v75[9];
  uint64_t v52 = v78 + v51;
  uint64_t v53 = v77 + v51;
  v6(v78 + v51, v77 + v51, v5);
  uint64_t v54 = v7[5];
  uint64_t v55 = v52 + v54;
  uint64_t v56 = v53 + v54;
  long long v57 = *(_OWORD *)(v56 + 16);
  *(_OWORD *)uint64_t v55 = *(_OWORD *)v56;
  *(_OWORD *)(v55 + 16) = v57;
  *(_OWORD *)(v55 + 32) = *(_OWORD *)(v56 + 32);
  *(unsigned char *)(v55 + 48) = *(unsigned char *)(v56 + 48);
  v6(v52 + v7[6], v53 + v7[6], v5);
  v16(v52 + v7[7], v53 + v7[7], v72);
  v76(v52 + v7[8], v53 + v7[8], v74);
  uint64_t v58 = v22;
  v6(v52 + *(int *)(v73 + 36), v53 + *(int *)(v73 + 36), v5);
  v16(v52 + *(int *)(v73 + 40), v53 + *(int *)(v73 + 40), v72);
  uint64_t v59 = v75[10];
  uint64_t v60 = v78 + v59;
  uint64_t v61 = v77 + v59;
  v6(v78 + v59, v77 + v59, v5);
  uint64_t v62 = v7[5];
  uint64_t v63 = v60 + v62;
  uint64_t v64 = v61 + v62;
  long long v65 = *(_OWORD *)(v64 + 16);
  *(_OWORD *)uint64_t v63 = *(_OWORD *)v64;
  *(_OWORD *)(v63 + 16) = v65;
  *(_OWORD *)(v63 + 32) = *(_OWORD *)(v64 + 32);
  *(unsigned char *)(v63 + 48) = *(unsigned char *)(v64 + 48);
  v6(v60 + v7[6], v61 + v7[6], v5);
  v16(v60 + v7[7], v61 + v7[7], v72);
  v76(v60 + v7[8], v61 + v7[8], v74);
  v6(v60 + *(int *)(v58 + 36), v61 + *(int *)(v58 + 36), v5);
  v16(v60 + *(int *)(v58 + 40), v61 + *(int *)(v58 + 40), v72);
  uint64_t v66 = *(int *)(a3 + 24);
  uint64_t v67 = v78 + v66;
  uint64_t v68 = v77 + v66;
  uint64_t v69 = type metadata accessor for Dense();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v69 - 8) + 32))(v67, v68, v69);
  return v78;
}

uint64_t assignWithTake for MLHandActionClassifier.Torso(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Conv2D();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  v6(a1, a2, v5);
  uint64_t v7 = (int *)type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  long long v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v11;
  *(_OWORD *)(v9 + 32) = *(_OWORD *)(v10 + 32);
  *(unsigned char *)(v9 + 48) = *(unsigned char *)(v10 + 48);
  v6(a1 + v7[6], a2 + v7[6], v5);
  uint64_t v12 = v7[7];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v72 = type metadata accessor for BatchNorm();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v72 - 8) + 40);
  v15(v13, v14, v72);
  uint64_t v16 = v15;
  uint64_t v17 = v7[8];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a1;
  uint64_t v20 = a2;
  uint64_t v21 = a2 + v17;
  uint64_t v74 = type metadata accessor for Dropout();
  uint64_t v76 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v74 - 8) + 40);
  v76(v18, v21, v74);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  v6(v19 + *(int *)(v22 + 36), v20 + *(int *)(v22 + 36), v5);
  uint64_t v77 = v20;
  uint64_t v78 = v19;
  v16(v19 + *(int *)(v22 + 40), v20 + *(int *)(v22 + 40), v72);
  uint64_t v75 = (int *)type metadata accessor for MLHandActionClassifier.SingleStreamBlock(0);
  uint64_t v23 = v75[5];
  uint64_t v24 = v19 + v23;
  uint64_t v25 = v20 + v23;
  v6(v24, v25, v5);
  uint64_t v26 = v7[5];
  uint64_t v27 = v24 + v26;
  uint64_t v28 = v25 + v26;
  long long v29 = *(_OWORD *)(v28 + 16);
  *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
  *(_OWORD *)(v27 + 16) = v29;
  *(_OWORD *)(v27 + 32) = *(_OWORD *)(v28 + 32);
  *(unsigned char *)(v27 + 48) = *(unsigned char *)(v28 + 48);
  v6(v24 + v7[6], v25 + v7[6], v5);
  v16(v24 + v7[7], v25 + v7[7], v72);
  v76(v24 + v7[8], v25 + v7[8], v74);
  uint64_t v73 = v22;
  v6(v24 + *(int *)(v73 + 36), v25 + *(int *)(v73 + 36), v5);
  v16(v24 + *(int *)(v22 + 40), v25 + *(int *)(v22 + 40), v72);
  uint64_t v30 = v75[6];
  uint64_t v31 = v78 + v30;
  uint64_t v32 = v77 + v30;
  v6(v78 + v30, v77 + v30, v5);
  uint64_t v33 = v7[5];
  uint64_t v34 = v31 + v33;
  uint64_t v35 = v32 + v33;
  long long v36 = *(_OWORD *)(v35 + 16);
  *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
  *(_OWORD *)(v34 + 16) = v36;
  *(_OWORD *)(v34 + 32) = *(_OWORD *)(v35 + 32);
  *(unsigned char *)(v34 + 48) = *(unsigned char *)(v35 + 48);
  v6(v31 + v7[6], v32 + v7[6], v5);
  v16(v31 + v7[7], v32 + v7[7], v72);
  v76(v31 + v7[8], v32 + v7[8], v74);
  v6(v31 + *(int *)(v73 + 36), v32 + *(int *)(v73 + 36), v5);
  v16(v31 + *(int *)(v73 + 40), v32 + *(int *)(v73 + 40), v72);
  uint64_t v37 = v75[7];
  uint64_t v38 = v78 + v37;
  uint64_t v39 = v77 + v37;
  v6(v78 + v37, v77 + v37, v5);
  uint64_t v40 = v7[5];
  uint64_t v41 = v38 + v40;
  uint64_t v42 = v39 + v40;
  long long v43 = *(_OWORD *)(v42 + 16);
  *(_OWORD *)uint64_t v41 = *(_OWORD *)v42;
  *(_OWORD *)(v41 + 16) = v43;
  *(_OWORD *)(v41 + 32) = *(_OWORD *)(v42 + 32);
  *(unsigned char *)(v41 + 48) = *(unsigned char *)(v42 + 48);
  v6(v38 + v7[6], v39 + v7[6], v5);
  v16(v38 + v7[7], v39 + v7[7], v72);
  v76(v38 + v7[8], v39 + v7[8], v74);
  v6(v38 + *(int *)(v73 + 36), v39 + *(int *)(v73 + 36), v5);
  v16(v38 + *(int *)(v73 + 40), v39 + *(int *)(v73 + 40), v72);
  uint64_t v44 = v75[8];
  uint64_t v45 = v78 + v44;
  uint64_t v46 = v77 + v44;
  v6(v78 + v44, v77 + v44, v5);
  uint64_t v47 = v7[5];
  uint64_t v48 = v45 + v47;
  uint64_t v49 = v46 + v47;
  long long v50 = *(_OWORD *)(v49 + 16);
  *(_OWORD *)uint64_t v48 = *(_OWORD *)v49;
  *(_OWORD *)(v48 + 16) = v50;
  *(_OWORD *)(v48 + 32) = *(_OWORD *)(v49 + 32);
  *(unsigned char *)(v48 + 48) = *(unsigned char *)(v49 + 48);
  v6(v45 + v7[6], v46 + v7[6], v5);
  v16(v45 + v7[7], v46 + v7[7], v72);
  v76(v45 + v7[8], v46 + v7[8], v74);
  uint64_t v51 = v75[9];
  uint64_t v52 = v78 + v51;
  uint64_t v53 = v77 + v51;
  v6(v78 + v51, v77 + v51, v5);
  uint64_t v54 = v7[5];
  uint64_t v55 = v52 + v54;
  uint64_t v56 = v53 + v54;
  long long v57 = *(_OWORD *)(v56 + 16);
  *(_OWORD *)uint64_t v55 = *(_OWORD *)v56;
  *(_OWORD *)(v55 + 16) = v57;
  *(_OWORD *)(v55 + 32) = *(_OWORD *)(v56 + 32);
  *(unsigned char *)(v55 + 48) = *(unsigned char *)(v56 + 48);
  v6(v52 + v7[6], v53 + v7[6], v5);
  v16(v52 + v7[7], v53 + v7[7], v72);
  v76(v52 + v7[8], v53 + v7[8], v74);
  uint64_t v58 = v22;
  v6(v52 + *(int *)(v73 + 36), v53 + *(int *)(v73 + 36), v5);
  v16(v52 + *(int *)(v73 + 40), v53 + *(int *)(v73 + 40), v72);
  uint64_t v59 = v75[10];
  uint64_t v60 = v78 + v59;
  uint64_t v61 = v77 + v59;
  v6(v78 + v59, v77 + v59, v5);
  uint64_t v62 = v7[5];
  uint64_t v63 = v60 + v62;
  uint64_t v64 = v61 + v62;
  long long v65 = *(_OWORD *)(v64 + 16);
  *(_OWORD *)uint64_t v63 = *(_OWORD *)v64;
  *(_OWORD *)(v63 + 16) = v65;
  *(_OWORD *)(v63 + 32) = *(_OWORD *)(v64 + 32);
  *(unsigned char *)(v63 + 48) = *(unsigned char *)(v64 + 48);
  v6(v60 + v7[6], v61 + v7[6], v5);
  v16(v60 + v7[7], v61 + v7[7], v72);
  v76(v60 + v7[8], v61 + v7[8], v74);
  v6(v60 + *(int *)(v58 + 36), v61 + *(int *)(v58 + 36), v5);
  v16(v60 + *(int *)(v58 + 40), v61 + *(int *)(v58 + 40), v72);
  uint64_t v66 = *(int *)(a3 + 24);
  uint64_t v67 = v78 + v66;
  uint64_t v68 = v77 + v66;
  uint64_t v69 = type metadata accessor for Dense();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v69 - 8) + 40))(v67, v68, v69);
  return v78;
}

uint64_t getEnumTagSinglePayload for MLHandActionClassifier.Torso(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2271A6D54);
}

uint64_t sub_2271A6D54()
{
  uint64_t v3 = OUTLINED_FUNCTION_19_24();
  type metadata accessor for MLHandActionClassifier.SingleStreamBlock(v3);
  OUTLINED_FUNCTION_6_1();
  if (*(_DWORD *)(v4 + 84) == v0)
  {
    uint64_t v5 = OUTLINED_FUNCTION_42_14();
  }
  else
  {
    uint64_t v6 = type metadata accessor for Dense();
    uint64_t v5 = v1 + *(int *)(v2 + 24);
  }

  return __swift_getEnumTagSinglePayload(v5, v0, v6);
}

uint64_t storeEnumTagSinglePayload for MLHandActionClassifier.Torso(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2271A6DD4);
}

uint64_t sub_2271A6DD4()
{
  uint64_t v1 = OUTLINED_FUNCTION_16_25();
  type metadata accessor for MLHandActionClassifier.SingleStreamBlock(v1);
  OUTLINED_FUNCTION_6_1();
  if (*(_DWORD *)(v2 + 84) == v0) {
    OUTLINED_FUNCTION_44_12();
  }
  else {
    type metadata accessor for Dense();
  }
  OUTLINED_FUNCTION_41_12();

  return __swift_storeEnumTagSinglePayload(v3, v4, v5, v6);
}

uint64_t type metadata completion function for MLHandActionClassifier.Torso()
{
  uint64_t result = type metadata accessor for MLHandActionClassifier.SingleStreamBlock(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Dense();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for MLHandActionClassifier.SingleStreamBlock(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v67 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    uint64_t v59 = (char *)(v67 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Conv2D();
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v70 = v8;
    uint64_t v9 = (int *)type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
    uint64_t v10 = v9[5];
    long long v11 = &a1[v10];
    uint64_t v12 = &a2[v10];
    long long v13 = *((_OWORD *)v12 + 1);
    *(_OWORD *)long long v11 = *(_OWORD *)v12;
    *((_OWORD *)v11 + 1) = v13;
    *((_OWORD *)v11 + 2) = *((_OWORD *)v12 + 2);
    v11[48] = v12[48];
    v8(&a1[v9[6]], &a2[v9[6]], v7);
    uint64_t v14 = v9[7];
    uint64_t v15 = &a1[v14];
    uint64_t v16 = &a2[v14];
    uint64_t v71 = type metadata accessor for BatchNorm();
    uint64_t v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v71 - 8) + 16);
    v17(v15, v16, v71);
    uint64_t v18 = v9[8];
    uint64_t v19 = &a1[v18];
    uint64_t v77 = a1;
    uint64_t v20 = &a2[v18];
    uint64_t v76 = type metadata accessor for Dropout();
    uint64_t v75 = *(void (**)(char *, char *, uint64_t))(*(void *)(v76 - 8) + 16);
    v75(v19, v20, v76);
    uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
    uint64_t v72 = a2;
    v8(&v77[*(int *)(v73 + 36)], &a2[*(int *)(v73 + 36)], v7);
    v17(&v77[*(int *)(v73 + 40)], &a2[*(int *)(v73 + 40)], v71);
    uint64_t v21 = a3[5];
    uint64_t v22 = &v77[v21];
    uint64_t v74 = a3;
    uint64_t v23 = &a2[v21];
    v8(&v77[v21], &a2[v21], v7);
    uint64_t v24 = v9[5];
    uint64_t v25 = &v22[v24];
    uint64_t v26 = &v23[v24];
    long long v27 = *((_OWORD *)v26 + 1);
    *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
    *((_OWORD *)v25 + 1) = v27;
    *((_OWORD *)v25 + 2) = *((_OWORD *)v26 + 2);
    v25[48] = v26[48];
    v8(&v22[v9[6]], &v23[v9[6]], v7);
    v17(&v22[v9[7]], &v23[v9[7]], v71);
    v75(&v22[v9[8]], &v23[v9[8]], v76);
    v8(&v22[*(int *)(v73 + 36)], &v23[*(int *)(v73 + 36)], v7);
    v17(&v22[*(int *)(v73 + 40)], &v23[*(int *)(v73 + 40)], v71);
    uint64_t v28 = v74[6];
    long long v29 = &v77[v28];
    uint64_t v30 = &a2[v28];
    v8(&v77[v28], &a2[v28], v7);
    uint64_t v31 = v9[5];
    uint64_t v32 = &v29[v31];
    uint64_t v33 = &v30[v31];
    long long v34 = *((_OWORD *)v33 + 1);
    *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
    *((_OWORD *)v32 + 1) = v34;
    *((_OWORD *)v32 + 2) = *((_OWORD *)v33 + 2);
    v32[48] = v33[48];
    v8(&v29[v9[6]], &v30[v9[6]], v7);
    v17(&v29[v9[7]], &v30[v9[7]], v71);
    v75(&v29[v9[8]], &v30[v9[8]], v76);
    v8(&v29[*(int *)(v73 + 36)], &v30[*(int *)(v73 + 36)], v7);
    uint64_t v35 = v17;
    v17(&v29[*(int *)(v73 + 40)], &v30[*(int *)(v73 + 40)], v71);
    uint64_t v36 = v74[7];
    uint64_t v37 = &v77[v36];
    uint64_t v38 = &v72[v36];
    v8(&v77[v36], &v72[v36], v7);
    uint64_t v39 = v9[5];
    uint64_t v40 = &v37[v39];
    uint64_t v41 = &v38[v39];
    long long v42 = *((_OWORD *)v41 + 1);
    *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
    *((_OWORD *)v40 + 1) = v42;
    *((_OWORD *)v40 + 2) = *((_OWORD *)v41 + 2);
    v40[48] = v41[48];
    v8(&v37[v9[6]], &v38[v9[6]], v7);
    v17(&v37[v9[7]], &v38[v9[7]], v71);
    v75(&v37[v9[8]], &v38[v9[8]], v76);
    v8(&v37[*(int *)(v73 + 36)], &v38[*(int *)(v73 + 36)], v7);
    v17(&v37[*(int *)(v73 + 40)], &v38[*(int *)(v73 + 40)], v71);
    uint64_t v43 = v74[8];
    uint64_t v44 = &v77[v43];
    uint64_t v45 = &v72[v43];
    v8(&v77[v43], &v72[v43], v7);
    uint64_t v46 = v9[5];
    uint64_t v47 = &v44[v46];
    uint64_t v48 = &v45[v46];
    long long v49 = *((_OWORD *)v48 + 1);
    *(_OWORD *)uint64_t v47 = *(_OWORD *)v48;
    *((_OWORD *)v47 + 1) = v49;
    *((_OWORD *)v47 + 2) = *((_OWORD *)v48 + 2);
    v47[48] = v48[48];
    v8(&v44[v9[6]], &v45[v9[6]], v7);
    uint64_t v69 = v17;
    v17(&v44[v9[7]], &v45[v9[7]], v71);
    v75(&v44[v9[8]], &v45[v9[8]], v76);
    uint64_t v50 = v74[9];
    uint64_t v51 = &v77[v50];
    uint64_t v52 = &v72[v50];
    v8(&v77[v50], &v72[v50], v7);
    uint64_t v53 = v9[5];
    uint64_t v54 = &v51[v53];
    uint64_t v55 = &v52[v53];
    long long v56 = *((_OWORD *)v55 + 1);
    *(_OWORD *)uint64_t v54 = *(_OWORD *)v55;
    *((_OWORD *)v54 + 1) = v56;
    *((_OWORD *)v54 + 2) = *((_OWORD *)v55 + 2);
    v54[48] = v55[48];
    v8(&v51[v9[6]], &v52[v9[6]], v7);
    v17(&v51[v9[7]], &v52[v9[7]], v71);
    v75(&v51[v9[8]], &v52[v9[8]], v76);
    v8(&v51[*(int *)(v73 + 36)], &v52[*(int *)(v73 + 36)], v7);
    uint64_t v57 = *(int *)(v73 + 40);
    uint64_t v58 = &v51[v57];
    uint64_t v59 = v77;
    v17(v58, &v52[v57], v71);
    uint64_t v60 = v74[10];
    uint64_t v61 = &v77[v60];
    uint64_t v62 = &v72[v60];
    v70(&v77[v60], &v72[v60], v7);
    uint64_t v63 = v9[5];
    uint64_t v64 = &v61[v63];
    long long v65 = &v62[v63];
    long long v66 = *((_OWORD *)v65 + 1);
    *(_OWORD *)uint64_t v64 = *(_OWORD *)v65;
    *((_OWORD *)v64 + 1) = v66;
    *((_OWORD *)v64 + 2) = *((_OWORD *)v65 + 2);
    v64[48] = v65[48];
    v70(&v61[v9[6]], &v62[v9[6]], v7);
    v69(&v61[v9[7]], &v62[v9[7]], v71);
    v75(&v61[v9[8]], &v62[v9[8]], v76);
    v70(&v61[*(int *)(v73 + 36)], &v62[*(int *)(v73 + 36)], v7);
    v35(&v61[*(int *)(v73 + 40)], &v62[*(int *)(v73 + 40)], v71);
  }
  return v59;
}

uint64_t destroy for MLHandActionClassifier.SingleStreamBlock(uint64_t a1, int *a2)
{
  uint64_t v3 = type metadata accessor for Conv2D();
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  v4(a1, v3);
  int v5 = (int *)type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
  v4(a1 + v5[6], v3);
  uint64_t v6 = a1 + v5[7];
  uint64_t v7 = type metadata accessor for BatchNorm();
  uint64_t v22 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v22)((void *)(v7 - 8), v6, v7);
  uint64_t v8 = a1 + v5[8];
  uint64_t v21 = type metadata accessor for Dropout();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8);
  v9(v8, v21);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  v4(a1 + *(int *)(v18 + 36), v3);
  uint64_t v20 = a1;
  v22(a1 + *(int *)(v18 + 40), v7);
  uint64_t v10 = a1 + a2[5];
  v4(v10, v3);
  v4(v10 + v5[6], v3);
  v22(v10 + v5[7], v7);
  v9(v10 + v5[8], v21);
  v4(v10 + *(int *)(v18 + 36), v3);
  v22(v10 + *(int *)(v18 + 40), v7);
  uint64_t v11 = a1 + a2[6];
  v4(v11, v3);
  v4(v11 + v5[6], v3);
  v22(v11 + v5[7], v7);
  v9(v11 + v5[8], v21);
  v4(v11 + *(int *)(v18 + 36), v3);
  v22(v11 + *(int *)(v18 + 40), v7);
  uint64_t v12 = a1 + a2[7];
  v4(v12, v3);
  v4(v12 + v5[6], v3);
  v22(v12 + v5[7], v7);
  v9(v12 + v5[8], v21);
  v4(v12 + *(int *)(v18 + 36), v3);
  v22(v12 + *(int *)(v18 + 40), v7);
  uint64_t v13 = a1 + a2[8];
  v4(v13, v3);
  v4(v13 + v5[6], v3);
  v22(v13 + v5[7], v7);
  v9(v13 + v5[8], v21);
  uint64_t v14 = a1 + a2[9];
  v4(v14, v3);
  v4(v14 + v5[6], v3);
  v22(v14 + v5[7], v7);
  v9(v14 + v5[8], v21);
  v4(v14 + *(int *)(v18 + 36), v3);
  v22(v14 + *(int *)(v18 + 40), v7);
  uint64_t v15 = a1 + a2[10];
  v4(v20 + a2[10], v3);
  v4(v15 + v5[6], v3);
  v22(v15 + v5[7], v7);
  v9(v15 + v5[8], v21);
  v4(v15 + *(int *)(v18 + 36), v3);
  uint64_t v16 = v15 + *(int *)(v18 + 40);

  return ((uint64_t (*)(uint64_t, uint64_t))v22)(v16, v7);
}

uint64_t initializeWithCopy for MLHandActionClassifier.SingleStreamBlock(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = type metadata accessor for Conv2D();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  v6(a1, a2, v5);
  uint64_t v7 = v6;
  uint64_t v69 = v6;
  uint64_t v8 = (int *)type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
  uint64_t v9 = v8[5];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  long long v12 = *(_OWORD *)(v11 + 16);
  *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
  *(_OWORD *)(v10 + 16) = v12;
  *(_OWORD *)(v10 + 32) = *(_OWORD *)(v11 + 32);
  *(unsigned char *)(v10 + 48) = *(unsigned char *)(v11 + 48);
  uint64_t v13 = a1;
  v7(a1 + v8[6], a2 + v8[6], v5);
  uint64_t v14 = v8[7];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = v13;
  uint64_t v73 = v13;
  uint64_t v17 = a2 + v14;
  uint64_t v70 = type metadata accessor for BatchNorm();
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v70 - 8) + 16);
  v18(v15, v17, v70);
  uint64_t v19 = v8[8];
  uint64_t v20 = v16 + v19;
  uint64_t v21 = a2 + v19;
  uint64_t v74 = type metadata accessor for Dropout();
  uint64_t v75 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v74 - 8) + 16);
  v75(v20, v21, v74);
  uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  v69(v16 + *(int *)(v71 + 36), a2 + *(int *)(v71 + 36), v5);
  v18(v16 + *(int *)(v71 + 40), a2 + *(int *)(v71 + 40), v70);
  uint64_t v22 = a3[5];
  uint64_t v23 = v16 + v22;
  uint64_t v24 = a2 + v22;
  v69(v23, a2 + v22, v5);
  uint64_t v25 = v8[5];
  uint64_t v26 = v23 + v25;
  uint64_t v27 = v24 + v25;
  long long v28 = *(_OWORD *)(v27 + 16);
  *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
  *(_OWORD *)(v26 + 16) = v28;
  *(_OWORD *)(v26 + 32) = *(_OWORD *)(v27 + 32);
  *(unsigned char *)(v26 + 48) = *(unsigned char *)(v27 + 48);
  v69(v23 + v8[6], v24 + v8[6], v5);
  v18(v23 + v8[7], v24 + v8[7], v70);
  v75(v23 + v8[8], v24 + v8[8], v74);
  v69(v23 + *(int *)(v71 + 36), v24 + *(int *)(v71 + 36), v5);
  v18(v23 + *(int *)(v71 + 40), v24 + *(int *)(v71 + 40), v70);
  uint64_t v29 = a3[6];
  uint64_t v30 = v73 + v29;
  uint64_t v31 = a2 + v29;
  v69(v73 + v29, a2 + v29, v5);
  uint64_t v32 = v8[5];
  uint64_t v33 = v30 + v32;
  uint64_t v34 = v31 + v32;
  long long v35 = *(_OWORD *)(v34 + 16);
  *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
  *(_OWORD *)(v33 + 16) = v35;
  *(_OWORD *)(v33 + 32) = *(_OWORD *)(v34 + 32);
  *(unsigned char *)(v33 + 48) = *(unsigned char *)(v34 + 48);
  v69(v30 + v8[6], v31 + v8[6], v5);
  v18(v30 + v8[7], v31 + v8[7], v70);
  v75(v30 + v8[8], v31 + v8[8], v74);
  v69(v30 + *(int *)(v71 + 36), v31 + *(int *)(v71 + 36), v5);
  v18(v30 + *(int *)(v71 + 40), v31 + *(int *)(v71 + 40), v70);
  uint64_t v36 = a3[7];
  uint64_t v37 = v73 + v36;
  uint64_t v38 = a2 + v36;
  v69(v73 + v36, a2 + v36, v5);
  uint64_t v39 = v8[5];
  uint64_t v40 = v37 + v39;
  uint64_t v41 = v38 + v39;
  long long v42 = *(_OWORD *)(v41 + 16);
  *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
  *(_OWORD *)(v40 + 16) = v42;
  *(_OWORD *)(v40 + 32) = *(_OWORD *)(v41 + 32);
  *(unsigned char *)(v40 + 48) = *(unsigned char *)(v41 + 48);
  v69(v37 + v8[6], v38 + v8[6], v5);
  v18(v37 + v8[7], v38 + v8[7], v70);
  v75(v37 + v8[8], v38 + v8[8], v74);
  v69(v37 + *(int *)(v71 + 36), v38 + *(int *)(v71 + 36), v5);
  v18(v37 + *(int *)(v71 + 40), v38 + *(int *)(v71 + 40), v70);
  uint64_t v43 = a3[8];
  uint64_t v44 = v73 + v43;
  uint64_t v45 = a2 + v43;
  v69(v73 + v43, a2 + v43, v5);
  uint64_t v46 = v8[5];
  uint64_t v47 = v44 + v46;
  uint64_t v48 = v45 + v46;
  long long v49 = *(_OWORD *)(v48 + 16);
  *(_OWORD *)uint64_t v47 = *(_OWORD *)v48;
  *(_OWORD *)(v47 + 16) = v49;
  *(_OWORD *)(v47 + 32) = *(_OWORD *)(v48 + 32);
  *(unsigned char *)(v47 + 48) = *(unsigned char *)(v48 + 48);
  v69(v44 + v8[6], v45 + v8[6], v5);
  v18(v44 + v8[7], v45 + v8[7], v70);
  v75(v44 + v8[8], v45 + v8[8], v74);
  uint64_t v50 = a3[9];
  uint64_t v51 = v73 + v50;
  uint64_t v52 = a2 + v50;
  v69(v73 + v50, a2 + v50, v5);
  uint64_t v53 = v8[5];
  uint64_t v54 = v51 + v53;
  uint64_t v55 = v52 + v53;
  long long v56 = *(_OWORD *)(v55 + 16);
  *(_OWORD *)uint64_t v54 = *(_OWORD *)v55;
  *(_OWORD *)(v54 + 16) = v56;
  *(_OWORD *)(v54 + 32) = *(_OWORD *)(v55 + 32);
  *(unsigned char *)(v54 + 48) = *(unsigned char *)(v55 + 48);
  v69(v51 + v8[6], v52 + v8[6], v5);
  v18(v51 + v8[7], v52 + v8[7], v70);
  v75(v51 + v8[8], v52 + v8[8], v74);
  uint64_t v57 = v71;
  v69(v51 + *(int *)(v71 + 36), v52 + *(int *)(v71 + 36), v5);
  uint64_t v58 = *(int *)(v71 + 40);
  uint64_t v59 = v52 + v58;
  uint64_t v60 = v18;
  v18(v51 + v58, v59, v70);
  uint64_t v61 = a3[10];
  uint64_t v62 = v73 + v61;
  uint64_t v63 = a2 + v61;
  v69(v73 + v61, a2 + v61, v5);
  uint64_t v64 = v8[5];
  uint64_t v65 = v62 + v64;
  uint64_t v66 = v63 + v64;
  long long v67 = *(_OWORD *)(v66 + 16);
  *(_OWORD *)uint64_t v65 = *(_OWORD *)v66;
  *(_OWORD *)(v65 + 16) = v67;
  *(_OWORD *)(v65 + 32) = *(_OWORD *)(v66 + 32);
  *(unsigned char *)(v65 + 48) = *(unsigned char *)(v66 + 48);
  v69(v62 + v8[6], v63 + v8[6], v5);
  v60(v62 + v8[7], v63 + v8[7], v70);
  v75(v62 + v8[8], v63 + v8[8], v74);
  v69(v62 + *(int *)(v57 + 36), v63 + *(int *)(v57 + 36), v5);
  v60(v62 + *(int *)(v57 + 40), v63 + *(int *)(v57 + 40), v70);
  return v73;
}

uint64_t assignWithCopy for MLHandActionClassifier.SingleStreamBlock(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = type metadata accessor for Conv2D();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 24);
  v6(a1, a2, v5);
  uint64_t v7 = v6;
  uint64_t v59 = v6;
  uint64_t v8 = (int *)type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
  uint64_t v9 = v8[5];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  *(void *)uint64_t v10 = *(void *)v11;
  *(void *)(v10 + 8) = *(void *)(v11 + 8);
  *(void *)(v10 + 16) = *(void *)(v11 + 16);
  *(void *)(v10 + 24) = *(void *)(v11 + 24);
  *(void *)(v10 + 32) = *(void *)(v11 + 32);
  *(void *)(v10 + 40) = *(void *)(v11 + 40);
  *(unsigned char *)(v10 + 48) = *(unsigned char *)(v11 + 48);
  uint64_t v12 = a1;
  v7(a1 + v8[6], a2 + v8[6], v5);
  uint64_t v13 = v8[7];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = v12;
  uint64_t v66 = v12;
  uint64_t v16 = a2 + v13;
  uint64_t v17 = type metadata accessor for BatchNorm();
  uint64_t v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 24);
  uint64_t v62 = v17;
  v60(v14, v16, v17);
  uint64_t v18 = v8[8];
  uint64_t v19 = v15 + v18;
  uint64_t v20 = a2 + v18;
  uint64_t v64 = type metadata accessor for Dropout();
  uint64_t v65 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v64 - 8) + 24);
  v65(v19, v20, v64);
  uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  v59(v15 + *(int *)(v61 + 36), a2 + *(int *)(v61 + 36), v5);
  v60(v15 + *(int *)(v61 + 40), a2 + *(int *)(v61 + 40), v17);
  uint64_t v21 = a3[5];
  uint64_t v22 = v15 + v21;
  uint64_t v23 = a2 + v21;
  v59(v22, a2 + v21, v5);
  uint64_t v24 = v8[5];
  uint64_t v25 = v22 + v24;
  uint64_t v26 = v23 + v24;
  *(void *)uint64_t v25 = *(void *)v26;
  *(void *)(v25 + 8) = *(void *)(v26 + 8);
  *(void *)(v25 + 16) = *(void *)(v26 + 16);
  *(void *)(v25 + 24) = *(void *)(v26 + 24);
  *(void *)(v25 + 32) = *(void *)(v26 + 32);
  *(void *)(v25 + 40) = *(void *)(v26 + 40);
  *(unsigned char *)(v25 + 48) = *(unsigned char *)(v26 + 48);
  v59(v22 + v8[6], v23 + v8[6], v5);
  v60(v22 + v8[7], v23 + v8[7], v17);
  v65(v22 + v8[8], v23 + v8[8], v64);
  v59(v22 + *(int *)(v61 + 36), v23 + *(int *)(v61 + 36), v5);
  v60(v22 + *(int *)(v61 + 40), v23 + *(int *)(v61 + 40), v17);
  uint64_t v27 = a3[6];
  uint64_t v28 = v66 + v27;
  uint64_t v29 = a2 + v27;
  v59(v66 + v27, a2 + v27, v5);
  uint64_t v30 = v8[5];
  uint64_t v31 = v28 + v30;
  uint64_t v32 = v29 + v30;
  *(void *)uint64_t v31 = *(void *)v32;
  *(void *)(v31 + 8) = *(void *)(v32 + 8);
  *(void *)(v31 + 16) = *(void *)(v32 + 16);
  *(void *)(v31 + 24) = *(void *)(v32 + 24);
  *(void *)(v31 + 32) = *(void *)(v32 + 32);
  *(void *)(v31 + 40) = *(void *)(v32 + 40);
  *(unsigned char *)(v31 + 48) = *(unsigned char *)(v32 + 48);
  v59(v28 + v8[6], v29 + v8[6], v5);
  v60(v28 + v8[7], v29 + v8[7], v17);
  v65(v28 + v8[8], v29 + v8[8], v64);
  v59(v28 + *(int *)(v61 + 36), v29 + *(int *)(v61 + 36), v5);
  v60(v28 + *(int *)(v61 + 40), v29 + *(int *)(v61 + 40), v17);
  uint64_t v33 = a3[7];
  uint64_t v34 = v66 + v33;
  uint64_t v35 = a2 + v33;
  v59(v66 + v33, a2 + v33, v5);
  uint64_t v36 = v8[5];
  uint64_t v37 = v34 + v36;
  uint64_t v38 = v35 + v36;
  *(void *)uint64_t v37 = *(void *)v38;
  *(void *)(v37 + 8) = *(void *)(v38 + 8);
  *(void *)(v37 + 16) = *(void *)(v38 + 16);
  *(void *)(v37 + 24) = *(void *)(v38 + 24);
  *(void *)(v37 + 32) = *(void *)(v38 + 32);
  *(void *)(v37 + 40) = *(void *)(v38 + 40);
  *(unsigned char *)(v37 + 48) = *(unsigned char *)(v38 + 48);
  v59(v34 + v8[6], v35 + v8[6], v5);
  v60(v34 + v8[7], v35 + v8[7], v17);
  v65(v34 + v8[8], v35 + v8[8], v64);
  v59(v34 + *(int *)(v61 + 36), v35 + *(int *)(v61 + 36), v5);
  v60(v34 + *(int *)(v61 + 40), v35 + *(int *)(v61 + 40), v17);
  uint64_t v39 = a3[8];
  uint64_t v40 = v66 + v39;
  uint64_t v41 = a2 + v39;
  v59(v66 + v39, a2 + v39, v5);
  uint64_t v42 = v8[5];
  uint64_t v43 = v40 + v42;
  uint64_t v44 = v41 + v42;
  *(void *)uint64_t v43 = *(void *)v44;
  *(void *)(v43 + 8) = *(void *)(v44 + 8);
  *(void *)(v43 + 16) = *(void *)(v44 + 16);
  *(void *)(v43 + 24) = *(void *)(v44 + 24);
  *(void *)(v43 + 32) = *(void *)(v44 + 32);
  *(void *)(v43 + 40) = *(void *)(v44 + 40);
  *(unsigned char *)(v43 + 48) = *(unsigned char *)(v44 + 48);
  v59(v40 + v8[6], v41 + v8[6], v5);
  v60(v40 + v8[7], v41 + v8[7], v17);
  v65(v40 + v8[8], v41 + v8[8], v64);
  uint64_t v45 = a3[9];
  uint64_t v46 = v66 + v45;
  uint64_t v47 = a2 + v45;
  v59(v66 + v45, a2 + v45, v5);
  uint64_t v48 = v8[5];
  uint64_t v49 = v46 + v48;
  uint64_t v50 = v47 + v48;
  *(void *)uint64_t v49 = *(void *)v50;
  *(void *)(v49 + 8) = *(void *)(v50 + 8);
  *(void *)(v49 + 16) = *(void *)(v50 + 16);
  *(void *)(v49 + 24) = *(void *)(v50 + 24);
  *(void *)(v49 + 32) = *(void *)(v50 + 32);
  *(void *)(v49 + 40) = *(void *)(v50 + 40);
  *(unsigned char *)(v49 + 48) = *(unsigned char *)(v50 + 48);
  v59(v46 + v8[6], v47 + v8[6], v5);
  v60(v46 + v8[7], v47 + v8[7], v17);
  v65(v46 + v8[8], v47 + v8[8], v64);
  uint64_t v51 = v61;
  v59(v46 + *(int *)(v61 + 36), v47 + *(int *)(v61 + 36), v5);
  v60(v46 + *(int *)(v61 + 40), v47 + *(int *)(v61 + 40), v17);
  uint64_t v52 = a3[10];
  uint64_t v53 = v66 + v52;
  uint64_t v54 = a2 + v52;
  v59(v66 + v52, a2 + v52, v5);
  uint64_t v55 = v8[5];
  uint64_t v56 = v53 + v55;
  uint64_t v57 = v54 + v55;
  *(void *)uint64_t v56 = *(void *)v57;
  *(void *)(v56 + 8) = *(void *)(v57 + 8);
  *(void *)(v56 + 16) = *(void *)(v57 + 16);
  *(void *)(v56 + 24) = *(void *)(v57 + 24);
  *(void *)(v56 + 32) = *(void *)(v57 + 32);
  *(void *)(v56 + 40) = *(void *)(v57 + 40);
  *(unsigned char *)(v56 + 48) = *(unsigned char *)(v57 + 48);
  v59(v53 + v8[6], v54 + v8[6], v5);
  v60(v53 + v8[7], v54 + v8[7], v62);
  v65(v53 + v8[8], v54 + v8[8], v64);
  v59(v53 + *(int *)(v51 + 36), v54 + *(int *)(v51 + 36), v5);
  v60(v53 + *(int *)(v51 + 40), v54 + *(int *)(v51 + 40), v62);
  return v66;
}

uint64_t initializeWithTake for MLHandActionClassifier.SingleStreamBlock(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = type metadata accessor for Conv2D();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32);
  v6(a1, a2, v5);
  uint64_t v7 = v6;
  uint64_t v69 = v6;
  uint64_t v8 = (int *)type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
  uint64_t v9 = v8[5];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  long long v12 = *(_OWORD *)(v11 + 16);
  *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
  *(_OWORD *)(v10 + 16) = v12;
  *(_OWORD *)(v10 + 32) = *(_OWORD *)(v11 + 32);
  *(unsigned char *)(v10 + 48) = *(unsigned char *)(v11 + 48);
  uint64_t v13 = a1;
  v7(a1 + v8[6], a2 + v8[6], v5);
  uint64_t v14 = v8[7];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = v13;
  uint64_t v73 = v13;
  uint64_t v17 = a2 + v14;
  uint64_t v70 = type metadata accessor for BatchNorm();
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v70 - 8) + 32);
  v18(v15, v17, v70);
  uint64_t v19 = v8[8];
  uint64_t v20 = v16 + v19;
  uint64_t v21 = a2 + v19;
  uint64_t v74 = type metadata accessor for Dropout();
  uint64_t v75 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v74 - 8) + 32);
  v75(v20, v21, v74);
  uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  v69(v16 + *(int *)(v71 + 36), a2 + *(int *)(v71 + 36), v5);
  v18(v16 + *(int *)(v71 + 40), a2 + *(int *)(v71 + 40), v70);
  uint64_t v22 = a3[5];
  uint64_t v23 = v16 + v22;
  uint64_t v24 = a2 + v22;
  v69(v23, a2 + v22, v5);
  uint64_t v25 = v8[5];
  uint64_t v26 = v23 + v25;
  uint64_t v27 = v24 + v25;
  long long v28 = *(_OWORD *)(v27 + 16);
  *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
  *(_OWORD *)(v26 + 16) = v28;
  *(_OWORD *)(v26 + 32) = *(_OWORD *)(v27 + 32);
  *(unsigned char *)(v26 + 48) = *(unsigned char *)(v27 + 48);
  v69(v23 + v8[6], v24 + v8[6], v5);
  v18(v23 + v8[7], v24 + v8[7], v70);
  v75(v23 + v8[8], v24 + v8[8], v74);
  v69(v23 + *(int *)(v71 + 36), v24 + *(int *)(v71 + 36), v5);
  v18(v23 + *(int *)(v71 + 40), v24 + *(int *)(v71 + 40), v70);
  uint64_t v29 = a3[6];
  uint64_t v30 = v73 + v29;
  uint64_t v31 = a2 + v29;
  v69(v73 + v29, a2 + v29, v5);
  uint64_t v32 = v8[5];
  uint64_t v33 = v30 + v32;
  uint64_t v34 = v31 + v32;
  long long v35 = *(_OWORD *)(v34 + 16);
  *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
  *(_OWORD *)(v33 + 16) = v35;
  *(_OWORD *)(v33 + 32) = *(_OWORD *)(v34 + 32);
  *(unsigned char *)(v33 + 48) = *(unsigned char *)(v34 + 48);
  v69(v30 + v8[6], v31 + v8[6], v5);
  v18(v30 + v8[7], v31 + v8[7], v70);
  v75(v30 + v8[8], v31 + v8[8], v74);
  v69(v30 + *(int *)(v71 + 36), v31 + *(int *)(v71 + 36), v5);
  v18(v30 + *(int *)(v71 + 40), v31 + *(int *)(v71 + 40), v70);
  uint64_t v36 = a3[7];
  uint64_t v37 = v73 + v36;
  uint64_t v38 = a2 + v36;
  v69(v73 + v36, a2 + v36, v5);
  uint64_t v39 = v8[5];
  uint64_t v40 = v37 + v39;
  uint64_t v41 = v38 + v39;
  long long v42 = *(_OWORD *)(v41 + 16);
  *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
  *(_OWORD *)(v40 + 16) = v42;
  *(_OWORD *)(v40 + 32) = *(_OWORD *)(v41 + 32);
  *(unsigned char *)(v40 + 48) = *(unsigned char *)(v41 + 48);
  v69(v37 + v8[6], v38 + v8[6], v5);
  v18(v37 + v8[7], v38 + v8[7], v70);
  v75(v37 + v8[8], v38 + v8[8], v74);
  v69(v37 + *(int *)(v71 + 36), v38 + *(int *)(v71 + 36), v5);
  v18(v37 + *(int *)(v71 + 40), v38 + *(int *)(v71 + 40), v70);
  uint64_t v43 = a3[8];
  uint64_t v44 = v73 + v43;
  uint64_t v45 = a2 + v43;
  v69(v73 + v43, a2 + v43, v5);
  uint64_t v46 = v8[5];
  uint64_t v47 = v44 + v46;
  uint64_t v48 = v45 + v46;
  long long v49 = *(_OWORD *)(v48 + 16);
  *(_OWORD *)uint64_t v47 = *(_OWORD *)v48;
  *(_OWORD *)(v47 + 16) = v49;
  *(_OWORD *)(v47 + 32) = *(_OWORD *)(v48 + 32);
  *(unsigned char *)(v47 + 48) = *(unsigned char *)(v48 + 48);
  v69(v44 + v8[6], v45 + v8[6], v5);
  v18(v44 + v8[7], v45 + v8[7], v70);
  v75(v44 + v8[8], v45 + v8[8], v74);
  uint64_t v50 = a3[9];
  uint64_t v51 = v73 + v50;
  uint64_t v52 = a2 + v50;
  v69(v73 + v50, a2 + v50, v5);
  uint64_t v53 = v8[5];
  uint64_t v54 = v51 + v53;
  uint64_t v55 = v52 + v53;
  long long v56 = *(_OWORD *)(v55 + 16);
  *(_OWORD *)uint64_t v54 = *(_OWORD *)v55;
  *(_OWORD *)(v54 + 16) = v56;
  *(_OWORD *)(v54 + 32) = *(_OWORD *)(v55 + 32);
  *(unsigned char *)(v54 + 48) = *(unsigned char *)(v55 + 48);
  v69(v51 + v8[6], v52 + v8[6], v5);
  v18(v51 + v8[7], v52 + v8[7], v70);
  v75(v51 + v8[8], v52 + v8[8], v74);
  uint64_t v57 = v71;
  v69(v51 + *(int *)(v71 + 36), v52 + *(int *)(v71 + 36), v5);
  uint64_t v58 = *(int *)(v71 + 40);
  uint64_t v59 = v52 + v58;
  uint64_t v60 = v18;
  v18(v51 + v58, v59, v70);
  uint64_t v61 = a3[10];
  uint64_t v62 = v73 + v61;
  uint64_t v63 = a2 + v61;
  v69(v73 + v61, a2 + v61, v5);
  uint64_t v64 = v8[5];
  uint64_t v65 = v62 + v64;
  uint64_t v66 = v63 + v64;
  long long v67 = *(_OWORD *)(v66 + 16);
  *(_OWORD *)uint64_t v65 = *(_OWORD *)v66;
  *(_OWORD *)(v65 + 16) = v67;
  *(_OWORD *)(v65 + 32) = *(_OWORD *)(v66 + 32);
  *(unsigned char *)(v65 + 48) = *(unsigned char *)(v66 + 48);
  v69(v62 + v8[6], v63 + v8[6], v5);
  v60(v62 + v8[7], v63 + v8[7], v70);
  v75(v62 + v8[8], v63 + v8[8], v74);
  v69(v62 + *(int *)(v57 + 36), v63 + *(int *)(v57 + 36), v5);
  v60(v62 + *(int *)(v57 + 40), v63 + *(int *)(v57 + 40), v70);
  return v73;
}

uint64_t assignWithTake for MLHandActionClassifier.SingleStreamBlock(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = type metadata accessor for Conv2D();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  v6(a1, a2, v5);
  uint64_t v7 = v6;
  uint64_t v69 = v6;
  uint64_t v8 = (int *)type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
  uint64_t v9 = v8[5];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  long long v12 = *(_OWORD *)(v11 + 16);
  *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
  *(_OWORD *)(v10 + 16) = v12;
  *(_OWORD *)(v10 + 32) = *(_OWORD *)(v11 + 32);
  *(unsigned char *)(v10 + 48) = *(unsigned char *)(v11 + 48);
  uint64_t v13 = a1;
  v7(a1 + v8[6], a2 + v8[6], v5);
  uint64_t v14 = v8[7];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = v13;
  uint64_t v73 = v13;
  uint64_t v17 = a2 + v14;
  uint64_t v70 = type metadata accessor for BatchNorm();
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v70 - 8) + 40);
  v18(v15, v17, v70);
  uint64_t v19 = v8[8];
  uint64_t v20 = v16 + v19;
  uint64_t v21 = a2 + v19;
  uint64_t v74 = type metadata accessor for Dropout();
  uint64_t v75 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v74 - 8) + 40);
  v75(v20, v21, v74);
  uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  v69(v16 + *(int *)(v71 + 36), a2 + *(int *)(v71 + 36), v5);
  v18(v16 + *(int *)(v71 + 40), a2 + *(int *)(v71 + 40), v70);
  uint64_t v22 = a3[5];
  uint64_t v23 = v16 + v22;
  uint64_t v24 = a2 + v22;
  v69(v23, a2 + v22, v5);
  uint64_t v25 = v8[5];
  uint64_t v26 = v23 + v25;
  uint64_t v27 = v24 + v25;
  long long v28 = *(_OWORD *)(v27 + 16);
  *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
  *(_OWORD *)(v26 + 16) = v28;
  *(_OWORD *)(v26 + 32) = *(_OWORD *)(v27 + 32);
  *(unsigned char *)(v26 + 48) = *(unsigned char *)(v27 + 48);
  v69(v23 + v8[6], v24 + v8[6], v5);
  v18(v23 + v8[7], v24 + v8[7], v70);
  v75(v23 + v8[8], v24 + v8[8], v74);
  v69(v23 + *(int *)(v71 + 36), v24 + *(int *)(v71 + 36), v5);
  v18(v23 + *(int *)(v71 + 40), v24 + *(int *)(v71 + 40), v70);
  uint64_t v29 = a3[6];
  uint64_t v30 = v73 + v29;
  uint64_t v31 = a2 + v29;
  v69(v73 + v29, a2 + v29, v5);
  uint64_t v32 = v8[5];
  uint64_t v33 = v30 + v32;
  uint64_t v34 = v31 + v32;
  long long v35 = *(_OWORD *)(v34 + 16);
  *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
  *(_OWORD *)(v33 + 16) = v35;
  *(_OWORD *)(v33 + 32) = *(_OWORD *)(v34 + 32);
  *(unsigned char *)(v33 + 48) = *(unsigned char *)(v34 + 48);
  v69(v30 + v8[6], v31 + v8[6], v5);
  v18(v30 + v8[7], v31 + v8[7], v70);
  v75(v30 + v8[8], v31 + v8[8], v74);
  v69(v30 + *(int *)(v71 + 36), v31 + *(int *)(v71 + 36), v5);
  v18(v30 + *(int *)(v71 + 40), v31 + *(int *)(v71 + 40), v70);
  uint64_t v36 = a3[7];
  uint64_t v37 = v73 + v36;
  uint64_t v38 = a2 + v36;
  v69(v73 + v36, a2 + v36, v5);
  uint64_t v39 = v8[5];
  uint64_t v40 = v37 + v39;
  uint64_t v41 = v38 + v39;
  long long v42 = *(_OWORD *)(v41 + 16);
  *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
  *(_OWORD *)(v40 + 16) = v42;
  *(_OWORD *)(v40 + 32) = *(_OWORD *)(v41 + 32);
  *(unsigned char *)(v40 + 48) = *(unsigned char *)(v41 + 48);
  v69(v37 + v8[6], v38 + v8[6], v5);
  v18(v37 + v8[7], v38 + v8[7], v70);
  v75(v37 + v8[8], v38 + v8[8], v74);
  v69(v37 + *(int *)(v71 + 36), v38 + *(int *)(v71 + 36), v5);
  v18(v37 + *(int *)(v71 + 40), v38 + *(int *)(v71 + 40), v70);
  uint64_t v43 = a3[8];
  uint64_t v44 = v73 + v43;
  uint64_t v45 = a2 + v43;
  v69(v73 + v43, a2 + v43, v5);
  uint64_t v46 = v8[5];
  uint64_t v47 = v44 + v46;
  uint64_t v48 = v45 + v46;
  long long v49 = *(_OWORD *)(v48 + 16);
  *(_OWORD *)uint64_t v47 = *(_OWORD *)v48;
  *(_OWORD *)(v47 + 16) = v49;
  *(_OWORD *)(v47 + 32) = *(_OWORD *)(v48 + 32);
  *(unsigned char *)(v47 + 48) = *(unsigned char *)(v48 + 48);
  v69(v44 + v8[6], v45 + v8[6], v5);
  v18(v44 + v8[7], v45 + v8[7], v70);
  v75(v44 + v8[8], v45 + v8[8], v74);
  uint64_t v50 = a3[9];
  uint64_t v51 = v73 + v50;
  uint64_t v52 = a2 + v50;
  v69(v73 + v50, a2 + v50, v5);
  uint64_t v53 = v8[5];
  uint64_t v54 = v51 + v53;
  uint64_t v55 = v52 + v53;
  long long v56 = *(_OWORD *)(v55 + 16);
  *(_OWORD *)uint64_t v54 = *(_OWORD *)v55;
  *(_OWORD *)(v54 + 16) = v56;
  *(_OWORD *)(v54 + 32) = *(_OWORD *)(v55 + 32);
  *(unsigned char *)(v54 + 48) = *(unsigned char *)(v55 + 48);
  v69(v51 + v8[6], v52 + v8[6], v5);
  v18(v51 + v8[7], v52 + v8[7], v70);
  v75(v51 + v8[8], v52 + v8[8], v74);
  uint64_t v57 = v71;
  v69(v51 + *(int *)(v71 + 36), v52 + *(int *)(v71 + 36), v5);
  uint64_t v58 = *(int *)(v71 + 40);
  uint64_t v59 = v52 + v58;
  uint64_t v60 = v18;
  v18(v51 + v58, v59, v70);
  uint64_t v61 = a3[10];
  uint64_t v62 = v73 + v61;
  uint64_t v63 = a2 + v61;
  v69(v73 + v61, a2 + v61, v5);
  uint64_t v64 = v8[5];
  uint64_t v65 = v62 + v64;
  uint64_t v66 = v63 + v64;
  long long v67 = *(_OWORD *)(v66 + 16);
  *(_OWORD *)uint64_t v65 = *(_OWORD *)v66;
  *(_OWORD *)(v65 + 16) = v67;
  *(_OWORD *)(v65 + 32) = *(_OWORD *)(v66 + 32);
  *(unsigned char *)(v65 + 48) = *(unsigned char *)(v66 + 48);
  v69(v62 + v8[6], v63 + v8[6], v5);
  v60(v62 + v8[7], v63 + v8[7], v70);
  v75(v62 + v8[8], v63 + v8[8], v74);
  v69(v62 + *(int *)(v57 + 36), v63 + *(int *)(v57 + 36), v5);
  v60(v62 + *(int *)(v57 + 40), v63 + *(int *)(v57 + 40), v70);
  return v73;
}

uint64_t getEnumTagSinglePayload for MLHandActionClassifier.SingleStreamBlock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2271A9B5C);
}

uint64_t sub_2271A9B5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  OUTLINED_FUNCTION_6_1();
  if (*(_DWORD *)(v6 + 84) == a2)
  {
    uint64_t v7 = OUTLINED_FUNCTION_42_14();
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.ResidualLayer<MLHandActionClassifier.InvertedResidual>);
    uint64_t v7 = a1 + *(int *)(a3 + 32);
  }

  return __swift_getEnumTagSinglePayload(v7, a2, v8);
}

uint64_t storeEnumTagSinglePayload for MLHandActionClassifier.SingleStreamBlock(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2271A9BF0);
}

uint64_t sub_2271A9BF0(uint64_t a1, uint64_t a2, int a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  OUTLINED_FUNCTION_6_1();
  if (*(_DWORD *)(v4 + 84) == a3) {
    OUTLINED_FUNCTION_44_12();
  }
  else {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.ResidualLayer<MLHandActionClassifier.InvertedResidual>);
  }
  OUTLINED_FUNCTION_41_12();

  return __swift_storeEnumTagSinglePayload(v5, v6, v7, v8);
}

void type metadata completion function for MLHandActionClassifier.SingleStreamBlock()
{
  type metadata accessor for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>();
  if (v0 <= 0x3F)
  {
    type metadata accessor for MLHandActionClassifier.InvertedResidual(319);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void type metadata accessor for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>()
{
  if (!lazy cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>)
  {
    type metadata accessor for MLHandActionClassifier.InvertedResidual(255);
    _s8CreateML22MLHandActionClassifierV13GraphCNNModelVAE14NeuralNetworks5LayerAAWlTm_0(&lazy protocol witness table cache variable for type MLHandActionClassifier.InvertedResidual and conformance MLHandActionClassifier.InvertedResidual, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.InvertedResidual);
    unint64_t v0 = type metadata accessor for MLHandActionClassifier.DownsampledResidualLayer();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
    }
  }
}

uint64_t _s8CreateML22MLHandActionClassifierV13GraphCNNModelVAE14NeuralNetworks5LayerAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for MLHandActionClassifier.DownsampledResidualLayer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for MLHandActionClassifier.ResidualLayer()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for MLHandActionClassifier.ResidualLayer(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7
    && *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x18uLL
    && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    uint64_t v8 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t destroy for MLHandActionClassifier.ResidualLayer(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
}

uint64_t initializeWithCopy for MLHandActionClassifier.ResidualLayer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t assignWithCopy for MLHandActionClassifier.ResidualLayer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t initializeWithTake for MLHandActionClassifier.ResidualLayer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t assignWithTake for MLHandActionClassifier.ResidualLayer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t getEnumTagSinglePayload for MLHandActionClassifier.ResidualLayer(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(unsigned int *)(*(void *)(v4 - 8) + 84);
  uint64_t v6 = *(void *)(*(void *)(v4 - 8) + 64);
  if (!a2) {
    return 0;
  }
  int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return __swift_getEnumTagSinglePayload((uint64_t)a1, v5, v4);
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for MLHandActionClassifier.ResidualLayer(char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 + 16);
  uint64_t v7 = *(unsigned int *)(*(void *)(v6 - 8) + 84);
  size_t v8 = *(void *)(*(void *)(v6 - 8) + 64);
  char v9 = 8 * v8;
  BOOL v10 = a3 >= v7;
  int v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v8 <= 3)
    {
      unsigned int v15 = ((v11 + ~(-1 << v9)) >> v9) + 1;
      if (HIWORD(v15))
      {
        int v12 = 4;
      }
      else if (v15 >= 0x100)
      {
        int v12 = 2;
      }
      else
      {
        int v12 = v15 > 1;
      }
    }
    else
    {
      int v12 = 1;
    }
  }
  else
  {
    int v12 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v13 = ~v7 + a2;
    if (v8 < 4)
    {
      int v14 = (v13 >> v9) + 1;
      if (v8)
      {
        int v16 = v13 & ~(-1 << v9);
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v13;
      int v14 = 1;
    }
    switch(v12)
    {
      case 1:
        a1[v8] = v14;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v14;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v14;
        return;
      default:
        return;
    }
  }
  switch(v12)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x2271AA43CLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        __swift_storeEnumTagSinglePayload((uint64_t)a1, a2, v7, v6);
      }
      return;
  }
}

uint64_t type metadata accessor for MLHandActionClassifier.ResidualLayer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for MLHandActionClassifier.DownsampledResidualLayer()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Conv2D();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for BatchNorm();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for MLHandActionClassifier.DownsampledResidualLayer(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  uint64_t v26 = type metadata accessor for Conv2D();
  uint64_t v5 = *(void *)(v26 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = v4 + v6;
  uint64_t v8 = *(void *)(v5 + 64);
  uint64_t v9 = type metadata accessor for BatchNorm();
  uint64_t v10 = *(void *)(v9 - 8);
  int v11 = *(_DWORD *)(v10 + 80);
  uint64_t v12 = v11;
  unint64_t v13 = ((v8 + v11 + (v7 & ~(unint64_t)v6)) & ~(unint64_t)v11)
      + *(void *)(v10 + 64);
  int v14 = v6 | v11 | *(_DWORD *)(v3 + 80);
  uint64_t v15 = (v6 | v11 | *(unsigned char *)(v3 + 80));
  int v16 = v14 & 0x100000;
  if (v15 <= 7 && v13 <= 0x18 && v16 == 0)
  {
    unint64_t v21 = ~(unint64_t)v6;
    uint64_t v25 = v9;
    uint64_t v20 = a1;
    (*(void (**)(void))(v3 + 16))();
    unint64_t v22 = ((unint64_t)a1 + v7) & v21;
    unint64_t v23 = ((unint64_t)a2 + v7) & v21;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))(v22, v23, v26);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16))((v22 + v8 + v12) & ~v12, (v23 + v8 + v12) & ~v12, v25);
  }
  else
  {
    uint64_t v19 = *a2;
    *a1 = *a2;
    uint64_t v20 = (uint64_t *)(v19 + ((v15 + 16) & ~v15));
    swift_retain();
  }
  return v20;
}

uint64_t destroy for MLHandActionClassifier.DownsampledResidualLayer(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  uint64_t v4 = *(void *)(v3 + 56);
  uint64_t v5 = type metadata accessor for Conv2D();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6 + 8;
  unint64_t v8 = (v4 + a1 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v9 = *(void *)(v7 + 56);
  uint64_t v10 = type metadata accessor for BatchNorm();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(unint64_t, uint64_t))(v11 + 8);
  uint64_t v13 = v10;
  unint64_t v14 = (v8 + v9 + *(unsigned __int8 *)(v11 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);

  return v12(v14, v13);
}

uint64_t initializeWithCopy for MLHandActionClassifier.DownsampledResidualLayer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48);
  uint64_t v7 = type metadata accessor for Conv2D();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = v8 + 16;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v6 + v10;
  uint64_t v12 = (v6 + v10 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v12, v13, v7);
  uint64_t v14 = *(void *)(v9 + 48);
  uint64_t v15 = type metadata accessor for BatchNorm();
  uint64_t v16 = *(void *)(v15 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v16 + 16))((v14 + *(unsigned __int8 *)(v16 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), (v14 + *(unsigned __int8 *)(v16 + 80) + v13) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), v15);
  return a1;
}

uint64_t assignWithCopy for MLHandActionClassifier.DownsampledResidualLayer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t v7 = type metadata accessor for Conv2D();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = v8 + 24;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v6 + v10;
  uint64_t v12 = (v6 + v10 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24))(v12, v13, v7);
  uint64_t v14 = *(void *)(v9 + 40);
  uint64_t v15 = type metadata accessor for BatchNorm();
  uint64_t v16 = *(void *)(v15 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v16 + 24))((v14 + *(unsigned __int8 *)(v16 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), (v14 + *(unsigned __int8 *)(v16 + 80) + v13) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), v15);
  return a1;
}

uint64_t initializeWithTake for MLHandActionClassifier.DownsampledResidualLayer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32);
  uint64_t v7 = type metadata accessor for Conv2D();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = v8 + 32;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v6 + v10;
  uint64_t v12 = (v6 + v10 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v12, v13, v7);
  uint64_t v14 = *(void *)(v9 + 32);
  uint64_t v15 = type metadata accessor for BatchNorm();
  uint64_t v16 = *(void *)(v15 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v16 + 32))((v14 + *(unsigned __int8 *)(v16 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), (v14 + *(unsigned __int8 *)(v16 + 80) + v13) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), v15);
  return a1;
}

uint64_t assignWithTake for MLHandActionClassifier.DownsampledResidualLayer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t v7 = type metadata accessor for Conv2D();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = v8 + 40;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v6 + v10;
  uint64_t v12 = (v6 + v10 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40))(v12, v13, v7);
  uint64_t v14 = *(void *)(v9 + 24);
  uint64_t v15 = type metadata accessor for BatchNorm();
  uint64_t v16 = *(void *)(v15 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v16 + 40))((v14 + *(unsigned __int8 *)(v16 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), (v14 + *(unsigned __int8 *)(v16 + 80) + v13) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLHandActionClassifier.DownsampledResidualLayer(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v29 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v29 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v28 = type metadata accessor for Conv2D();
  uint64_t v7 = *(void *)(v28 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  if (v8 <= v6) {
    unsigned int v9 = v6;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v7 + 84);
  }
  uint64_t v10 = type metadata accessor for BatchNorm();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int *)(v11 + 84);
  if (v12 <= v9) {
    unsigned int v13 = v9;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v11 + 84);
  }
  uint64_t v14 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v15 = *(void *)(v7 + 64);
  uint64_t v16 = *(unsigned __int8 *)(v11 + 80);
  if (!a2) {
    return 0;
  }
  uint64_t v17 = v10;
  uint64_t v18 = *(void *)(v5 + 64) + v14;
  if (a2 <= v13) {
    goto LABEL_27;
  }
  uint64_t v19 = ((v15 + v16 + (v18 & ~v14)) & ~v16) + *(void *)(*(void *)(v10 - 8) + 64);
  char v20 = 8 * v19;
  if (v19 <= 3)
  {
    unsigned int v22 = ((a2 - v13 + ~(-1 << v20)) >> v20) + 1;
    if (HIWORD(v22))
    {
      int v21 = *(_DWORD *)((char *)a1 + v19);
      if (!v21) {
        goto LABEL_27;
      }
      goto LABEL_17;
    }
    if (v22 > 0xFF)
    {
      int v21 = *(unsigned __int16 *)((char *)a1 + v19);
      if (!*(unsigned __int16 *)((char *)a1 + v19)) {
        goto LABEL_27;
      }
      goto LABEL_17;
    }
    if (v22 < 2)
    {
LABEL_27:
      if (v13)
      {
        if (v6 == v13)
        {
          uint64_t v26 = (uint64_t)a1;
          uint64_t v12 = v6;
          uint64_t v17 = v29;
        }
        else
        {
          uint64_t v26 = ((unint64_t)a1 + v18) & ~v14;
          if (v8 == v13)
          {
            uint64_t v12 = v8;
            uint64_t v17 = v28;
          }
          else
          {
            uint64_t v26 = (v26 + v15 + v16) & ~v16;
          }
        }
        return __swift_getEnumTagSinglePayload(v26, v12, v17);
      }
      return 0;
    }
  }
  int v21 = *((unsigned __int8 *)a1 + v19);
  if (!*((unsigned char *)a1 + v19)) {
    goto LABEL_27;
  }
LABEL_17:
  int v23 = (v21 - 1) << v20;
  if (v19 > 3) {
    int v23 = 0;
  }
  if (v19)
  {
    if (v19 <= 3) {
      int v24 = v19;
    }
    else {
      int v24 = 4;
    }
    switch(v24)
    {
      case 2:
        int v25 = *a1;
        break;
      case 3:
        int v25 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v25 = *(_DWORD *)a1;
        break;
      default:
        int v25 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v25 = 0;
  }
  return v13 + (v25 | v23) + 1;
}

void storeEnumTagSinglePayload for MLHandActionClassifier.DownsampledResidualLayer(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v30 = *(void *)(a4 + 16);
  uint64_t v6 = *(void *)(v30 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v29 = type metadata accessor for Conv2D();
  uint64_t v8 = *(void *)(v29 - 8);
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  if (v9 <= v7) {
    unsigned int v10 = v7;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v11 = type metadata accessor for BatchNorm();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(unsigned int *)(v12 + 84);
  if (v13 <= v10) {
    unsigned int v14 = v10;
  }
  else {
    unsigned int v14 = *(_DWORD *)(v12 + 84);
  }
  uint64_t v15 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v16 = *(void *)(v6 + 64) + v15;
  uint64_t v17 = *(void *)(v8 + 64);
  uint64_t v18 = *(unsigned __int8 *)(v12 + 80);
  size_t v19 = ((v17 + v18 + (v16 & ~v15)) & ~v18) + *(void *)(*(void *)(v11 - 8) + 64);
  char v20 = 8 * v19;
  if (a3 <= v14)
  {
    int v22 = 0;
    int v21 = a1;
  }
  else
  {
    int v21 = a1;
    if (v19 <= 3)
    {
      unsigned int v26 = ((a3 - v14 + ~(-1 << v20)) >> v20) + 1;
      if (HIWORD(v26))
      {
        int v22 = 4;
      }
      else if (v26 >= 0x100)
      {
        int v22 = 2;
      }
      else
      {
        int v22 = v26 > 1;
      }
    }
    else
    {
      int v22 = 1;
    }
  }
  if (v14 < a2)
  {
    unsigned int v23 = ~v14 + a2;
    if (v19 < 4)
    {
      int v24 = (v23 >> v20) + 1;
      if (v19)
      {
        int v27 = v23 & ~(-1 << v20);
        bzero(v21, v19);
        if (v19 == 3)
        {
          *(_WORD *)int v21 = v27;
          void v21[2] = BYTE2(v27);
        }
        else if (v19 == 2)
        {
          *(_WORD *)int v21 = v27;
        }
        else
        {
          *int v21 = v27;
        }
      }
    }
    else
    {
      bzero(v21, v19);
      *(_DWORD *)int v21 = v23;
      int v24 = 1;
    }
    switch(v22)
    {
      case 1:
        v21[v19] = v24;
        return;
      case 2:
        *(_WORD *)&v21[v19] = v24;
        return;
      case 3:
        goto LABEL_45;
      case 4:
        *(_DWORD *)&v21[v19] = v24;
        return;
      default:
        return;
    }
  }
  uint64_t v25 = ~v15;
  switch(v22)
  {
    case 1:
      v21[v19] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&v21[v19] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_45:
      __break(1u);
      JUMPOUT(0x2271AB2E8);
    case 4:
      *(_DWORD *)&v21[v19] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (a2)
      {
LABEL_27:
        if (v7 == v14)
        {
          uint64_t v28 = (uint64_t)v21;
          uint64_t v13 = v7;
          uint64_t v11 = v30;
        }
        else
        {
          uint64_t v28 = (unint64_t)&v21[v16] & v25;
          if (v9 == v14)
          {
            uint64_t v13 = v9;
            uint64_t v11 = v29;
          }
          else
          {
            uint64_t v28 = (v28 + v17 + v18) & ~v18;
          }
        }
        __swift_storeEnumTagSinglePayload(v28, a2, v13, v11);
      }
      return;
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for MLHandActionClassifier.InvertedResidual(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Conv2D();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = a3[6];
    uint64_t v11 = (char *)a1 + v9;
    uint64_t v12 = (char *)a2 + v9;
    long long v13 = *((_OWORD *)v12 + 1);
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
    *((_OWORD *)v11 + 1) = v13;
    *((_OWORD *)v11 + 2) = *((_OWORD *)v12 + 2);
    v11[48] = v12[48];
    v8((uint64_t *)((char *)a1 + v10), (uint64_t *)((char *)a2 + v10), v7);
    uint64_t v14 = a3[7];
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    uint64_t v17 = type metadata accessor for BatchNorm();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
    uint64_t v18 = a3[8];
    size_t v19 = (char *)a1 + v18;
    char v20 = (char *)a2 + v18;
    uint64_t v21 = type metadata accessor for Dropout();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
  }
  return a1;
}

uint64_t destroy for MLHandActionClassifier.InvertedResidual(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for Conv2D();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + a2[6], v4);
  uint64_t v6 = a1 + a2[7];
  uint64_t v7 = type metadata accessor for BatchNorm();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = a1 + a2[8];
  uint64_t v9 = type metadata accessor for Dropout();
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);

  return v10(v8, v9);
}

uint64_t initializeWithCopy for MLHandActionClassifier.InvertedResidual(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Conv2D();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  long long v12 = *(_OWORD *)(v11 + 16);
  *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
  *(_OWORD *)(v10 + 16) = v12;
  *(_OWORD *)(v10 + 32) = *(_OWORD *)(v11 + 32);
  *(unsigned char *)(v10 + 48) = *(unsigned char *)(v11 + 48);
  v7(a1 + v9, a2 + v9, v6);
  uint64_t v13 = a3[7];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = type metadata accessor for BatchNorm();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  uint64_t v17 = a3[8];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  uint64_t v20 = type metadata accessor for Dropout();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
  return a1;
}

uint64_t assignWithCopy for MLHandActionClassifier.InvertedResidual(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Conv2D();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  *(void *)uint64_t v9 = *(void *)v10;
  *(void *)(v9 + 8) = *(void *)(v10 + 8);
  *(void *)(v9 + 16) = *(void *)(v10 + 16);
  *(void *)(v9 + 24) = *(void *)(v10 + 24);
  *(void *)(v9 + 32) = *(void *)(v10 + 32);
  *(void *)(v9 + 40) = *(void *)(v10 + 40);
  *(unsigned char *)(v9 + 48) = *(unsigned char *)(v10 + 48);
  v7(a1 + a3[6], a2 + a3[6], v6);
  uint64_t v11 = a3[7];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for BatchNorm();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  uint64_t v15 = a3[8];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = type metadata accessor for Dropout();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 24))(v16, v17, v18);
  return a1;
}

uint64_t initializeWithTake for MLHandActionClassifier.InvertedResidual(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Conv2D();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  long long v12 = *(_OWORD *)(v11 + 16);
  *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
  *(_OWORD *)(v10 + 16) = v12;
  *(_OWORD *)(v10 + 32) = *(_OWORD *)(v11 + 32);
  *(unsigned char *)(v10 + 48) = *(unsigned char *)(v11 + 48);
  v7(a1 + v9, a2 + v9, v6);
  uint64_t v13 = a3[7];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = type metadata accessor for BatchNorm();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
  uint64_t v17 = a3[8];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  uint64_t v20 = type metadata accessor for Dropout();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 32))(v18, v19, v20);
  return a1;
}

uint64_t assignWithTake for MLHandActionClassifier.InvertedResidual(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Conv2D();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  long long v12 = *(_OWORD *)(v11 + 16);
  *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
  *(_OWORD *)(v10 + 16) = v12;
  *(_OWORD *)(v10 + 32) = *(_OWORD *)(v11 + 32);
  *(unsigned char *)(v10 + 48) = *(unsigned char *)(v11 + 48);
  v7(a1 + v9, a2 + v9, v6);
  uint64_t v13 = a3[7];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = type metadata accessor for BatchNorm();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 40))(v14, v15, v16);
  uint64_t v17 = a3[8];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  uint64_t v20 = type metadata accessor for Dropout();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 40))(v18, v19, v20);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLHandActionClassifier.InvertedResidual(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2271ABB14);
}

uint64_t sub_2271ABB14()
{
  OUTLINED_FUNCTION_19_24();
  type metadata accessor for Conv2D();
  OUTLINED_FUNCTION_6_1();
  if (*(_DWORD *)(v3 + 84) == v0)
  {
    uint64_t v4 = OUTLINED_FUNCTION_42_14();
  }
  else
  {
    if (v0 == 254)
    {
      unsigned int v6 = *(unsigned __int8 *)(v1 + v2[5] + 48);
      if (v6 >= 2) {
        return OUTLINED_FUNCTION_39_14(v6);
      }
      else {
        return 0;
      }
    }
    type metadata accessor for BatchNorm();
    OUTLINED_FUNCTION_6_1();
    if (*(_DWORD *)(v9 + 84) == v0)
    {
      uint64_t v5 = v8;
      uint64_t v10 = v2[7];
    }
    else
    {
      uint64_t v5 = type metadata accessor for Dropout();
      uint64_t v10 = v2[8];
    }
    uint64_t v4 = v1 + v10;
  }

  return __swift_getEnumTagSinglePayload(v4, v0, v5);
}

uint64_t storeEnumTagSinglePayload for MLHandActionClassifier.InvertedResidual(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2271ABBF0);
}

void sub_2271ABBF0()
{
  OUTLINED_FUNCTION_16_25();
  type metadata accessor for Conv2D();
  OUTLINED_FUNCTION_6_1();
  if (*(_DWORD *)(v4 + 84) == v3)
  {
    OUTLINED_FUNCTION_44_12();
  }
  else
  {
    if (v3 == 254)
    {
      *(unsigned char *)(v1 + *(int *)(v2 + 20) + 48) = v0 + 1;
      return;
    }
    type metadata accessor for BatchNorm();
    OUTLINED_FUNCTION_6_1();
    if (*(_DWORD *)(v5 + 84) != v3) {
      type metadata accessor for Dropout();
    }
  }
  OUTLINED_FUNCTION_41_12();

  __swift_storeEnumTagSinglePayload(v6, v7, v8, v9);
}

uint64_t type metadata completion function for MLHandActionClassifier.InvertedResidual()
{
  uint64_t result = type metadata accessor for Conv2D();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for BatchNorm();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for Dropout();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t MLHandActionClassifier.GraphCNN.callAsFunction(_:)()
{
  type metadata accessor for MLHandActionClassifier.GraphCNNModel(0);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v0);
  unint64_t v2 = (char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  outlined init with copy of MLHandActionClassifier.GraphCNNModel();
  _s8CreateML22MLHandActionClassifierV13GraphCNNModelVAE14NeuralNetworks5LayerAAWlTm_0(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
  Layer.callAsFunction(_:)();
  return outlined destroy of MLHandActionClassifier.GraphCNNModel((uint64_t)v2, (void (*)(void))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
}

void MLHandActionClassifier.GraphCNNModel.forward(_:)()
{
  OUTLINED_FUNCTION_19_4();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v55 = type metadata accessor for TensorShape();
  OUTLINED_FUNCTION_0();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_49();
  uint64_t v9 = v8;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v10);
  long long v12 = (char *)v42 - v11;
  uint64_t v13 = type metadata accessor for Tensor();
  OUTLINED_FUNCTION_0();
  uint64_t v15 = v14;
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_49();
  uint64_t v51 = v17;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)v42 - v19;
  uint64_t v48 = (void (*)(uint64_t, uint64_t, uint64_t))v15[2];
  long long v49 = v15 + 2;
  v48(v4, v2, v13);
  uint64_t v46 = type metadata accessor for MLHandActionClassifier.GraphCNNModel(0);
  uint64_t v21 = *(int *)(v46 + 36);
  uint64_t v54 = v0;
  uint64_t v50 = v21;
  if (*(unsigned char *)(v0 + v21) == 1)
  {
    Tensor.expandingShape(at:)();
    OUTLINED_FUNCTION_9();
    v22();
    uint64_t v23 = OUTLINED_FUNCTION_17_23();
    v24(v23);
  }
  Tensor.transposed(permutation:)();
  uint64_t v53 = (void (*)(void))v15[1];
  OUTLINED_FUNCTION_38_0();
  v25();
  uint64_t v52 = (void (*)(uint64_t, char *, uint64_t))v15[4];
  uint64_t v26 = OUTLINED_FUNCTION_17_23();
  v27(v26);
  Tensor.shape.getter();
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_2272CB360;
  *(void *)(v28 + 32) = TensorShape.subscript.getter();
  *(void *)(v28 + 40) = TensorShape.subscript.getter();
  *(_OWORD *)(v28 + 48) = xmmword_2272D0370;
  MEMORY[0x22A672540](v28);
  Tensor.reshaped(to:)();
  uint64_t v43 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  uint64_t v44 = v6 + 8;
  uint64_t v47 = v12;
  OUTLINED_FUNCTION_21_4();
  v29();
  uint64_t v30 = v53;
  long long v56 = v15 + 1;
  OUTLINED_FUNCTION_38_0();
  v30();
  uint64_t v31 = OUTLINED_FUNCTION_17_23();
  uint64_t v32 = v52;
  ((void (*)(uint64_t))v52)(v31);
  MLHandActionClassifier.GraphCNNModel.poseMotion(_:)();
  OUTLINED_FUNCTION_38_0();
  v30();
  v42[1] = v15 + 4;
  v32(v4, v20, v13);
  type metadata accessor for MLHandActionClassifier.Torso(0);
  _s8CreateML22MLHandActionClassifierV13GraphCNNModelVAE14NeuralNetworks5LayerAAWlTm_0(&lazy protocol witness table cache variable for type MLHandActionClassifier.Torso and conformance MLHandActionClassifier.Torso, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.Torso);
  Layer.callAsFunction(_:)();
  OUTLINED_FUNCTION_9();
  v30();
  v32(v4, v20, v13);
  v48(v51, v4, v13);
  uint64_t v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_2272CB4D0;
  Tensor.shape.getter();
  uint64_t v34 = TensorShape.subscript.getter();
  uint64_t v35 = v55;
  uint64_t v36 = v43;
  v43(v9, v55);
  *(void *)(v33 + 32) = v34;
  *(void *)(v33 + 40) = -1;
  uint64_t v37 = v33;
  uint64_t v38 = v53;
  MEMORY[0x22A672540](v37);
  Tensor.reshaped(to:)();
  v36(v9, v35);
  uint64_t v39 = (void (*)(uint64_t))v52;
  OUTLINED_FUNCTION_38_0();
  v38();
  OUTLINED_FUNCTION_38_0();
  v38();
  uint64_t v40 = OUTLINED_FUNCTION_17_23();
  v39(v40);
  if (*(unsigned char *)(v54 + v50) == 1)
  {
    softmax(_:alongAxis:)();
    v36((uint64_t)v47, v35);
    OUTLINED_FUNCTION_9();
    v38();
    uint64_t v41 = OUTLINED_FUNCTION_17_23();
    v39(v41);
  }
  else
  {
    v36((uint64_t)v47, v35);
  }
  OUTLINED_FUNCTION_12_4();
}

void MLHandActionClassifier.GraphCNNModel.poseMotion(_:)()
{
  OUTLINED_FUNCTION_19_4();
  v66[2] = v2;
  uint64_t v77 = type metadata accessor for TensorShape();
  OUTLINED_FUNCTION_0();
  uint64_t v82 = v3;
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_49();
  uint64_t v70 = v5;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_45_3();
  uint64_t v76 = v7;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_23_13();
  uint64_t v9 = type metadata accessor for Tensor();
  OUTLINED_FUNCTION_0();
  uint64_t v11 = v10;
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_49();
  uint64_t v72 = v13;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_45_3();
  v66[0] = v15;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v16);
  uint64_t v78 = (char *)v66 - v17;
  OUTLINED_FUNCTION_20_3();
  uint64_t v19 = MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)v66 - v20;
  MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)v66 - v22;
  Tensor.transposed(permutation:)();
  v66[1] = type metadata accessor for BatchNorm();
  uint64_t v80 = v0;
  Layer.callAsFunction(_:)();
  int v24 = (void (*)(uint64_t))v11[1];
  uint64_t v25 = OUTLINED_FUNCTION_12_21();
  v24(v25);
  uint64_t v26 = (void (*)(uint64_t))v11[4];
  uint64_t v27 = OUTLINED_FUNCTION_29_19();
  v26(v27);
  Tensor.transposed(permutation:)();
  uint64_t v28 = OUTLINED_FUNCTION_12_21();
  v24(v28);
  uint64_t v29 = OUTLINED_FUNCTION_29_19();
  v26(v29);
  Tensor.squeezingShape(at:)();
  uint64_t v74 = v11 + 1;
  uint64_t v75 = v24;
  ((void (*)(char *, uint64_t))v24)(v23, v9);
  uint64_t v79 = v11 + 4;
  uint64_t v73 = v26;
  ((void (*)(char *, char *, uint64_t))v26)(v23, v21, v9);
  uint64_t v30 = (void (*)(uint64_t, char *, uint64_t))v11[2];
  uint64_t v69 = v11 + 2;
  long long v67 = v30;
  v30((uint64_t)v78, v23, v9);
  uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_2272CB4D0;
  Tensor.shape.getter();
  uint64_t v32 = TensorShape.subscript.getter();
  uint64_t v34 = v82 + 8;
  uint64_t v33 = *(void (**)(void))(v82 + 8);
  uint64_t v68 = v1;
  ((void (*)(uint64_t, uint64_t))v33)(v1, v77);
  uint64_t v35 = v34;
  OUTLINED_FUNCTION_38_15();
  uint64_t v36 = TensorShape.subscript.getter();
  OUTLINED_FUNCTION_23_14();
  int v81 = v33;
  uint64_t v82 = v35;
  OUTLINED_FUNCTION_10_4();
  v33();
  if ((unsigned __int128)(v32 * (__int128)v36) >> 64 != (v32 * v36) >> 63)
  {
    __break(1u);
    goto LABEL_9;
  }
  *(void *)(v31 + 32) = v32 * v36;
  OUTLINED_FUNCTION_38_15();
  uint64_t v37 = TensorShape.subscript.getter();
  uint64_t v38 = (void (*)(char *, uint64_t))v75;
  uint64_t v39 = v81;
  OUTLINED_FUNCTION_21_4();
  v39();
  *(void *)(v31 + 40) = v37;
  MEMORY[0x22A672540](v31);
  uint64_t v40 = v78;
  Tensor.reshaped(to:)();
  OUTLINED_FUNCTION_23_14();
  OUTLINED_FUNCTION_21_4();
  v39();
  v38(v40, v9);
  uint64_t v41 = OUTLINED_FUNCTION_12_21();
  ((void (*)(uint64_t))v38)(v41);
  long long v42 = (void (*)(char *, char *, uint64_t))v73;
  ((void (*)(char *, char *, uint64_t))v73)(v23, v21, v9);
  uint64_t v43 = type metadata accessor for MLHandActionClassifier.GraphCNNModel(0);
  type metadata accessor for Dense();
  Layer.callAsFunction(_:)();
  uint64_t v44 = OUTLINED_FUNCTION_12_21();
  ((void (*)(uint64_t))v38)(v44);
  uint64_t v78 = v21;
  v42(v23, v21, v9);
  v67(v72, v23, v9);
  uint64_t v45 = swift_allocObject();
  *(_OWORD *)(v45 + 16) = xmmword_2272CB4A0;
  Tensor.shape.getter();
  uint64_t v46 = TensorShape.subscript.getter();
  uint64_t v47 = v81;
  OUTLINED_FUNCTION_9();
  v48();
  uint64_t v70 = v43;
  uint64_t v49 = *(void *)(v80 + *(int *)(v43 + 40));
  if (!v49)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v46 != 0x8000000000000000 || v49 != -1)
  {
    *(void *)(v45 + 32) = v46 / v49;
    *(void *)(v45 + 40) = v49;
    OUTLINED_FUNCTION_38_15();
    uint64_t v51 = TensorShape.subscript.getter();
    OUTLINED_FUNCTION_23_14();
    OUTLINED_FUNCTION_21_4();
    v47();
    *(void *)(v45 + 48) = v51;
    MEMORY[0x22A672540](v45);
    uint64_t v52 = v66[0];
    Tensor.reshaped(to:)();
    OUTLINED_FUNCTION_23_14();
    OUTLINED_FUNCTION_21_4();
    v47();
    uint64_t v53 = (void (*)(void))v75;
    OUTLINED_FUNCTION_10_4();
    v53();
    uint64_t v54 = OUTLINED_FUNCTION_5_36();
    ((void (*)(uint64_t))v53)(v54);
    uint64_t v55 = (void (*)(char *, char *, uint64_t))v73;
    ((void (*)(char *, uint64_t, uint64_t))v73)(v23, v52, v9);
    OUTLINED_FUNCTION_38_15();
    uint64_t v56 = swift_allocObject();
    *(_OWORD *)(v56 + 16) = xmmword_2272CB360;
    *(void *)(v56 + 32) = TensorShape.subscript.getter();
    *(void *)(v56 + 40) = TensorShape.subscript.getter();
    *(void *)(v56 + 48) = TensorShape.subscript.getter() / 16;
    *(void *)(v56 + 56) = 16;
    MEMORY[0x22A672540](v56);
    uint64_t v57 = v78;
    Tensor.reshaped(to:)();
    OUTLINED_FUNCTION_9();
    v58();
    uint64_t v59 = OUTLINED_FUNCTION_5_36();
    ((void (*)(uint64_t))v53)(v59);
    v55(v23, v57, v9);
    Tensor.transposed(permutation:)();
    uint64_t v60 = OUTLINED_FUNCTION_5_36();
    ((void (*)(uint64_t))v53)(v60);
    uint64_t v61 = OUTLINED_FUNCTION_28_16();
    ((void (*)(uint64_t))v55)(v61);
    Layer.callAsFunction(_:)();
    uint64_t v62 = OUTLINED_FUNCTION_5_36();
    ((void (*)(uint64_t))v53)(v62);
    uint64_t v63 = OUTLINED_FUNCTION_28_16();
    ((void (*)(uint64_t))v55)(v63);
    relu(_:)();
    OUTLINED_FUNCTION_23_14();
    OUTLINED_FUNCTION_9();
    v64();
    uint64_t v65 = OUTLINED_FUNCTION_5_36();
    ((void (*)(uint64_t))v53)(v65);
    OUTLINED_FUNCTION_12_4();
    return;
  }
LABEL_10:
  __break(1u);
}

uint64_t protocol witness for _ComputeDevicePlaceable.place(on:) in conformance MLHandActionClassifier.GraphCNNModel()
{
  _s8CreateML22MLHandActionClassifierV13GraphCNNModelVAE14NeuralNetworks5LayerAAWlTm_0(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.GraphCNNModel);

  return Layer.place(on:)();
}

uint64_t protocol witness for _ComputeDevicePlaceable.placed(on:) in conformance MLHandActionClassifier.GraphCNNModel()
{
  _s8CreateML22MLHandActionClassifierV13GraphCNNModelVAE14NeuralNetworks5LayerAAWlTm_0(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.GraphCNNModel);

  return Layer.placed(on:)();
}

uint64_t MLHandActionClassifier.Torso.forward(_:)()
{
  uint64_t v1 = type metadata accessor for Tensor();
  OUTLINED_FUNCTION_0();
  uint64_t v3 = v2;
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_4_21();
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v12 - v6;
  type metadata accessor for MLHandActionClassifier.SingleStreamBlock(0);
  _s8CreateML22MLHandActionClassifierV13GraphCNNModelVAE14NeuralNetworks5LayerAAWlTm_0(&lazy protocol witness table cache variable for type MLHandActionClassifier.SingleStreamBlock and conformance MLHandActionClassifier.SingleStreamBlock, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.SingleStreamBlock);
  Layer.callAsFunction(_:)();
  Layer.callAsFunction(_:)();
  uint64_t v8 = *(void (**)(uint64_t))(v3 + 8);
  uint64_t v9 = OUTLINED_FUNCTION_40_10();
  v8(v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v7, v0, v1);
  type metadata accessor for MLHandActionClassifier.Torso(0);
  type metadata accessor for Dense();
  Layer.callAsFunction(_:)();
  uint64_t v10 = OUTLINED_FUNCTION_40_10();
  return ((uint64_t (*)(uint64_t))v8)(v10);
}

uint64_t protocol witness for _ComputeDevicePlaceable.place(on:) in conformance MLHandActionClassifier.Torso()
{
  _s8CreateML22MLHandActionClassifierV13GraphCNNModelVAE14NeuralNetworks5LayerAAWlTm_0(&lazy protocol witness table cache variable for type MLHandActionClassifier.Torso and conformance MLHandActionClassifier.Torso, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.Torso);

  return Layer.place(on:)();
}

uint64_t protocol witness for _ComputeDevicePlaceable.placed(on:) in conformance MLHandActionClassifier.Torso()
{
  _s8CreateML22MLHandActionClassifierV13GraphCNNModelVAE14NeuralNetworks5LayerAAWlTm_0(&lazy protocol witness table cache variable for type MLHandActionClassifier.Torso and conformance MLHandActionClassifier.Torso, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.Torso);

  return Layer.placed(on:)();
}

void static MLHandActionClassifier.SingleStreamBlock.makeDownSampledInvertedResidual(inplanes:planes:stride:)()
{
  OUTLINED_FUNCTION_19_4();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComputeDevice?);
  uint64_t v13 = OUTLINED_FUNCTION_17(v12);
  MEMORY[0x270FA5388](v13);
  uint64_t v14 = OUTLINED_FUNCTION_27_18();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_24_4();
  if (v9 + 0x4000000000000000 < 0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for ParameterInitializer();
    type metadata accessor for ComputeDevice();
    OUTLINED_FUNCTION_43_11();
    static ParameterInitializer.glorotUniform(seed:scalarType:on:)();
    outlined destroy of URL?(v1, &demangling cache variable for type metadata for ComputeDevice?);
    OUTLINED_FUNCTION_22_21();
    OUTLINED_FUNCTION_14_25();
    OUTLINED_FUNCTION_10_27(v0 + *(int *)(v14 + 20));
    static ParameterInitializer.glorotUniform(seed:scalarType:on:)();
    outlined destroy of URL?(v1, &demangling cache variable for type metadata for ComputeDevice?);
    Conv2D.init(filterCount:kernelSize:stride:padding:dilation:groupCount:weightInitializer:biasInitializer:)();
    static ParameterInitializer.zeros.getter();
    static ParameterInitializer.ones.getter();
    BatchNorm.init(offsetInitializer:scaleInitializer:momentum:epsilon:)();
    Dropout.init(probability:seed:)();
    specialized MLHandActionClassifier.DownsampledResidualLayer.init(_:filterCount:stride:)(v0, v7, v5, v3, v11);
    OUTLINED_FUNCTION_12_4();
  }
}

void static MLHandActionClassifier.SingleStreamBlock.makeInvertedResidual(inplanes:planes:stride:)()
{
  OUTLINED_FUNCTION_19_4();
  uint64_t v3 = v2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComputeDevice?);
  uint64_t v5 = OUTLINED_FUNCTION_17(v4);
  MEMORY[0x270FA5388](v5);
  uint64_t v6 = OUTLINED_FUNCTION_27_18();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_57_1();
  if (v3 + 0x4000000000000000 < 0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for ParameterInitializer();
    type metadata accessor for ComputeDevice();
    OUTLINED_FUNCTION_43_11();
    static ParameterInitializer.glorotUniform(seed:scalarType:on:)();
    outlined destroy of URL?(v1, &demangling cache variable for type metadata for ComputeDevice?);
    OUTLINED_FUNCTION_22_21();
    OUTLINED_FUNCTION_14_25();
    OUTLINED_FUNCTION_10_27(v0 + *(int *)(v6 + 20));
    static ParameterInitializer.glorotUniform(seed:scalarType:on:)();
    outlined destroy of URL?(v1, &demangling cache variable for type metadata for ComputeDevice?);
    Conv2D.init(filterCount:kernelSize:stride:padding:dilation:groupCount:weightInitializer:biasInitializer:)();
    static ParameterInitializer.zeros.getter();
    static ParameterInitializer.ones.getter();
    BatchNorm.init(offsetInitializer:scaleInitializer:momentum:epsilon:)();
    Dropout.init(probability:seed:)();
    outlined init with take of MLHandActionClassifier.GraphCNNModel();
    OUTLINED_FUNCTION_12_4();
  }
}

void MLHandActionClassifier.SingleStreamBlock.forward(_:)()
{
  OUTLINED_FUNCTION_19_4();
  uint64_t v40 = v1;
  uint64_t v43 = v2;
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.ResidualLayer<MLHandActionClassifier.InvertedResidual>);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_33_0();
  uint64_t v44 = v4;
  uint64_t v38 = type metadata accessor for Tensor();
  OUTLINED_FUNCTION_0();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_33();
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_45_3();
  v36[1] = v9;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_45_3();
  v36[2] = v11;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_45_3();
  v36[3] = v13;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v14);
  uint64_t v39 = (char *)v36 - v15;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v16);
  uint64_t v41 = (char *)v36 - v17;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_33();
  uint64_t v21 = v19 - v20;
  uint64_t v23 = MEMORY[0x270FA5388](v22);
  uint64_t v25 = (char *)v36 - v24;
  uint64_t v26 = MEMORY[0x270FA5388](v23);
  uint64_t v28 = (char *)v36 - v27;
  v36[0] = (char *)v36 - v27;
  MEMORY[0x270FA5388](v26);
  uint64_t v30 = (char *)v36 - v29;
  uint64_t v37 = (char *)v36 - v29;
  uint64_t v31 = (int *)type metadata accessor for MLHandActionClassifier.SingleStreamBlock(0);
  outlined init with copy of URL?(v0 + v31[10], (uint64_t)v30, &demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  outlined init with copy of URL?(v0 + v31[9], (uint64_t)v28, &demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  outlined init with copy of URL?(v0 + v31[8], v44, &demangling cache variable for type metadata for MLHandActionClassifier.ResidualLayer<MLHandActionClassifier.InvertedResidual>);
  outlined init with copy of URL?(v0 + v31[7], (uint64_t)v25, &demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  outlined init with copy of URL?(v0 + v31[6], v21, &demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual> and conformance MLHandActionClassifier.DownsampledResidualLayer<A>, &demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  OUTLINED_FUNCTION_24_23();
  Layer.callAsFunction(_:)();
  OUTLINED_FUNCTION_24_23();
  Layer.callAsFunction(_:)();
  uint64_t v32 = *(void (**)(void))(v6 + 8);
  OUTLINED_FUNCTION_137();
  v32();
  OUTLINED_FUNCTION_24_23();
  Layer.callAsFunction(_:)();
  OUTLINED_FUNCTION_137();
  v32();
  outlined destroy of URL?(v21, &demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  OUTLINED_FUNCTION_24_23();
  Layer.callAsFunction(_:)();
  OUTLINED_FUNCTION_137();
  v32();
  outlined destroy of URL?((uint64_t)v25, &demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLHandActionClassifier.ResidualLayer<MLHandActionClassifier.InvertedResidual> and conformance MLHandActionClassifier.ResidualLayer<A>, &demangling cache variable for type metadata for MLHandActionClassifier.ResidualLayer<MLHandActionClassifier.InvertedResidual>);
  uint64_t v33 = v44;
  Layer.callAsFunction(_:)();
  OUTLINED_FUNCTION_137();
  v32();
  outlined destroy of URL?(v33, &demangling cache variable for type metadata for MLHandActionClassifier.ResidualLayer<MLHandActionClassifier.InvertedResidual>);
  OUTLINED_FUNCTION_24_23();
  uint64_t v34 = v36[0];
  Layer.callAsFunction(_:)();
  OUTLINED_FUNCTION_137();
  v32();
  outlined destroy of URL?(v34, &demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  OUTLINED_FUNCTION_24_23();
  uint64_t v35 = (uint64_t)v37;
  Layer.callAsFunction(_:)();
  OUTLINED_FUNCTION_137();
  v32();
  outlined destroy of URL?(v35, &demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  OUTLINED_FUNCTION_12_4();
}

uint64_t specialized MLHandActionClassifier.DownsampledResidualLayer.init(_:filterCount:stride:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v17[2] = a3;
  v17[3] = a4;
  v17[1] = a2;
  uint64_t v7 = type metadata accessor for BatchNorm();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComputeDevice?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MLHandActionClassifier.GraphCNNModel();
  type metadata accessor for ParameterInitializer();
  uint64_t v14 = type metadata accessor for ComputeDevice();
  __swift_storeEnumTagSinglePayload((uint64_t)v13, 1, 1, v14);
  static ParameterInitializer.glorotUniform(seed:scalarType:on:)();
  outlined destroy of URL?((uint64_t)v13, &demangling cache variable for type metadata for ComputeDevice?);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  Conv2D.init(filterCount:kernelSize:stride:padding:dilation:groupCount:weightInitializer:biasInitializer:)();
  static ParameterInitializer.zeros.getter();
  static ParameterInitializer.ones.getter();
  BatchNorm.init(offsetInitializer:scaleInitializer:momentum:epsilon:)();
  outlined destroy of MLHandActionClassifier.GraphCNNModel(a1, (void (*)(void))type metadata accessor for MLHandActionClassifier.InvertedResidual);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(a5 + *(int *)(v15 + 40), v10, v7);
}

uint64_t protocol witness for _ComputeDevicePlaceable.place(on:) in conformance MLHandActionClassifier.SingleStreamBlock()
{
  _s8CreateML22MLHandActionClassifierV13GraphCNNModelVAE14NeuralNetworks5LayerAAWlTm_0(&lazy protocol witness table cache variable for type MLHandActionClassifier.SingleStreamBlock and conformance MLHandActionClassifier.SingleStreamBlock, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.SingleStreamBlock);

  return Layer.place(on:)();
}

uint64_t protocol witness for _ComputeDevicePlaceable.placed(on:) in conformance MLHandActionClassifier.SingleStreamBlock()
{
  _s8CreateML22MLHandActionClassifierV13GraphCNNModelVAE14NeuralNetworks5LayerAAWlTm_0(&lazy protocol witness table cache variable for type MLHandActionClassifier.SingleStreamBlock and conformance MLHandActionClassifier.SingleStreamBlock, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.SingleStreamBlock);

  return Layer.placed(on:)();
}

void MLHandActionClassifier.InvertedResidual.forward(_:)()
{
  OUTLINED_FUNCTION_19_4();
  type metadata accessor for Tensor();
  OUTLINED_FUNCTION_0();
  uint64_t v1 = v0;
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_4_21();
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_23_13();
  type metadata accessor for Conv2D();
  Layer.callAsFunction(_:)();
  type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
  Layer.callAsFunction(_:)();
  uint64_t v4 = *(void (**)(void))(v1 + 8);
  OUTLINED_FUNCTION_10_4();
  v4();
  uint64_t v5 = *(void (**)(uint64_t))(v1 + 32);
  uint64_t v6 = OUTLINED_FUNCTION_15_25();
  v5(v6);
  Layer.callAsFunction(_:)();
  OUTLINED_FUNCTION_10_4();
  v4();
  uint64_t v7 = OUTLINED_FUNCTION_15_25();
  v5(v7);
  type metadata accessor for BatchNorm();
  Layer.callAsFunction(_:)();
  OUTLINED_FUNCTION_10_4();
  v4();
  uint64_t v8 = OUTLINED_FUNCTION_15_25();
  v5(v8);
  type metadata accessor for Dropout();
  Layer.callAsFunction(_:)();
  OUTLINED_FUNCTION_10_4();
  v4();
  OUTLINED_FUNCTION_12_4();
}

uint64_t protocol witness for _ComputeDevicePlaceable.place(on:) in conformance MLHandActionClassifier.InvertedResidual()
{
  _s8CreateML22MLHandActionClassifierV13GraphCNNModelVAE14NeuralNetworks5LayerAAWlTm_0(&lazy protocol witness table cache variable for type MLHandActionClassifier.InvertedResidual and conformance MLHandActionClassifier.InvertedResidual, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.InvertedResidual);

  return Layer.place(on:)();
}

uint64_t protocol witness for _ComputeDevicePlaceable.placed(on:) in conformance MLHandActionClassifier.InvertedResidual()
{
  _s8CreateML22MLHandActionClassifierV13GraphCNNModelVAE14NeuralNetworks5LayerAAWlTm_0(&lazy protocol witness table cache variable for type MLHandActionClassifier.InvertedResidual and conformance MLHandActionClassifier.InvertedResidual, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.InvertedResidual);

  return Layer.placed(on:)();
}

uint64_t MLHandActionClassifier.ResidualLayer.forward(_:)()
{
  uint64_t v1 = type metadata accessor for Tensor();
  OUTLINED_FUNCTION_0();
  uint64_t v3 = v2;
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_24_4();
  Layer.callAsFunction(_:)();
  static Tensor.+= infix(_:_:)();
  relu(_:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v0, v1);
}

uint64_t protocol witness for _ComputeDevicePlaceable.place(on:) in conformance MLHandActionClassifier.ResidualLayer<A>()
{
  swift_getWitnessTable();

  return Layer.place(on:)();
}

uint64_t protocol witness for _ComputeDevicePlaceable.placed(on:) in conformance MLHandActionClassifier.ResidualLayer<A>()
{
  swift_getWitnessTable();

  return Layer.placed(on:)();
}

void MLHandActionClassifier.DownsampledResidualLayer.forward(_:)()
{
  OUTLINED_FUNCTION_19_4();
  type metadata accessor for Tensor();
  OUTLINED_FUNCTION_0();
  uint64_t v1 = v0;
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_4_21();
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  MEMORY[0x270FA5388](v4);
  Layer.callAsFunction(_:)();
  type metadata accessor for Conv2D();
  Layer.callAsFunction(_:)();
  type metadata accessor for BatchNorm();
  Layer.callAsFunction(_:)();
  uint64_t v5 = *(void (**)(void))(v1 + 8);
  OUTLINED_FUNCTION_38_0();
  v5();
  static Tensor.+= infix(_:_:)();
  OUTLINED_FUNCTION_38_0();
  v5();
  relu(_:)();
  OUTLINED_FUNCTION_38_0();
  v5();
  OUTLINED_FUNCTION_12_4();
}

uint64_t protocol witness for _ComputeDevicePlaceable.place(on:) in conformance MLHandActionClassifier.DownsampledResidualLayer<A>()
{
  swift_getWitnessTable();

  return Layer.place(on:)();
}

uint64_t protocol witness for _ComputeDevicePlaceable.placed(on:) in conformance MLHandActionClassifier.DownsampledResidualLayer<A>()
{
  swift_getWitnessTable();

  return Layer.placed(on:)();
}

uint64_t base witness table accessor for _BaseLayer in MLHandActionClassifier.DownsampledResidualLayer<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _ComputeDevicePlaceable in MLHandActionClassifier.DownsampledResidualLayer<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _Differentiable in MLHandActionClassifier.DownsampledResidualLayer<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _BaseLayer in MLHandActionClassifier.ResidualLayer<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _ComputeDevicePlaceable in MLHandActionClassifier.ResidualLayer<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _Differentiable in MLHandActionClassifier.ResidualLayer<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _BaseLayer in MLHandActionClassifier.SingleStreamBlock()
{
  return _s8CreateML22MLHandActionClassifierV13GraphCNNModelVAE14NeuralNetworks5LayerAAWlTm_0(&lazy protocol witness table cache variable for type MLHandActionClassifier.SingleStreamBlock and conformance MLHandActionClassifier.SingleStreamBlock, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.SingleStreamBlock);
}

uint64_t base witness table accessor for _ComputeDevicePlaceable in MLHandActionClassifier.SingleStreamBlock()
{
  return _s8CreateML22MLHandActionClassifierV13GraphCNNModelVAE14NeuralNetworks5LayerAAWlTm_0(&lazy protocol witness table cache variable for type MLHandActionClassifier.SingleStreamBlock and conformance MLHandActionClassifier.SingleStreamBlock, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.SingleStreamBlock);
}

uint64_t base witness table accessor for _Differentiable in MLHandActionClassifier.SingleStreamBlock()
{
  return _s8CreateML22MLHandActionClassifierV13GraphCNNModelVAE14NeuralNetworks5LayerAAWlTm_0(&lazy protocol witness table cache variable for type MLHandActionClassifier.SingleStreamBlock and conformance MLHandActionClassifier.SingleStreamBlock, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.SingleStreamBlock);
}

uint64_t base witness table accessor for _BaseLayer in MLHandActionClassifier.InvertedResidual()
{
  return _s8CreateML22MLHandActionClassifierV13GraphCNNModelVAE14NeuralNetworks5LayerAAWlTm_0(&lazy protocol witness table cache variable for type MLHandActionClassifier.InvertedResidual and conformance MLHandActionClassifier.InvertedResidual, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.InvertedResidual);
}

uint64_t base witness table accessor for _ComputeDevicePlaceable in MLHandActionClassifier.InvertedResidual()
{
  return _s8CreateML22MLHandActionClassifierV13GraphCNNModelVAE14NeuralNetworks5LayerAAWlTm_0(&lazy protocol witness table cache variable for type MLHandActionClassifier.InvertedResidual and conformance MLHandActionClassifier.InvertedResidual, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.InvertedResidual);
}

uint64_t base witness table accessor for _Differentiable in MLHandActionClassifier.InvertedResidual()
{
  return _s8CreateML22MLHandActionClassifierV13GraphCNNModelVAE14NeuralNetworks5LayerAAWlTm_0(&lazy protocol witness table cache variable for type MLHandActionClassifier.InvertedResidual and conformance MLHandActionClassifier.InvertedResidual, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.InvertedResidual);
}

uint64_t base witness table accessor for _BaseLayer in MLHandActionClassifier.Torso()
{
  return _s8CreateML22MLHandActionClassifierV13GraphCNNModelVAE14NeuralNetworks5LayerAAWlTm_0(&lazy protocol witness table cache variable for type MLHandActionClassifier.Torso and conformance MLHandActionClassifier.Torso, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.Torso);
}

uint64_t base witness table accessor for _ComputeDevicePlaceable in MLHandActionClassifier.Torso()
{
  return _s8CreateML22MLHandActionClassifierV13GraphCNNModelVAE14NeuralNetworks5LayerAAWlTm_0(&lazy protocol witness table cache variable for type MLHandActionClassifier.Torso and conformance MLHandActionClassifier.Torso, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.Torso);
}

uint64_t base witness table accessor for _Differentiable in MLHandActionClassifier.Torso()
{
  return _s8CreateML22MLHandActionClassifierV13GraphCNNModelVAE14NeuralNetworks5LayerAAWlTm_0(&lazy protocol witness table cache variable for type MLHandActionClassifier.Torso and conformance MLHandActionClassifier.Torso, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.Torso);
}

uint64_t base witness table accessor for _BaseLayer in MLHandActionClassifier.GraphCNNModel()
{
  return _s8CreateML22MLHandActionClassifierV13GraphCNNModelVAE14NeuralNetworks5LayerAAWlTm_0(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
}

uint64_t base witness table accessor for _ComputeDevicePlaceable in MLHandActionClassifier.GraphCNNModel()
{
  return _s8CreateML22MLHandActionClassifierV13GraphCNNModelVAE14NeuralNetworks5LayerAAWlTm_0(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
}

uint64_t base witness table accessor for _Differentiable in MLHandActionClassifier.GraphCNNModel()
{
  return _s8CreateML22MLHandActionClassifierV13GraphCNNModelVAE14NeuralNetworks5LayerAAWlTm_0(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
}

uint64_t specialized _ModelCheckpoint<>.trainableSublayers(model:)()
{
  type metadata accessor for MLHandActionClassifier.GraphCNNModel(0);
  _s8CreateML22MLHandActionClassifierV13GraphCNNModelVAE14NeuralNetworks5LayerAAWlTm_0(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
  Layer.sublayers(recursively:)();
  dispatch thunk of _AnySequenceBox._makeIterator()();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  if (v13)
  {
    uint64_t v0 = MEMORY[0x263F8EE78];
    do
    {
      outlined init with take of BinaryFloatingPoint(&v12, (uint64_t)v11);
      outlined init with copy of TrainingSessionDelegate((uint64_t)v11, (uint64_t)v10);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Layer);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _LayerDictionaryRepresentable);
      if (swift_dynamicCast())
      {
        outlined init with copy of TrainingSessionDelegate((uint64_t)v11, (uint64_t)&v7);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v6);
      }
      else
      {
        __swift_project_boxed_opaque_existential_1(v11, v11[3]);
        uint64_t v1 = *(void *)(Layer.parameters(recursively:)() + 16);
        swift_bridgeObjectRelease();
        if (v1)
        {
          outlined init with copy of TrainingSessionDelegate((uint64_t)v11, (uint64_t)&v7);
        }
        else
        {
          uint64_t v9 = 0;
          long long v7 = 0u;
          long long v8 = 0u;
        }
      }
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v10);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v11);
      if (*((void *)&v8 + 1))
      {
        outlined init with take of BinaryFloatingPoint(&v7, (uint64_t)v10);
        outlined init with take of BinaryFloatingPoint(v10, (uint64_t)&v7);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v0 = v3;
        }
        unint64_t v2 = *(void *)(v0 + 16);
        if (v2 >= *(void *)(v0 + 24) >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v0 = v4;
        }
        *(void *)(v0 + 16) = v2 + 1;
        outlined init with take of BinaryFloatingPoint(&v7, v0 + 40 * v2 + 32);
      }
      else
      {
        outlined destroy of URL?((uint64_t)&v7, &demangling cache variable for type metadata for Layer?);
      }
      dispatch thunk of _AnyIteratorBoxBase.next()();
    }
    while (v13);
  }
  else
  {
    uint64_t v0 = MEMORY[0x263F8EE78];
  }
  swift_release();
  swift_release();
  return v0;
}

uint64_t specialized _ModelCheckpoint<>.restoreLayer<A>(_:optimizer:layerName:checkpointDictionary:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v142 = a3;
  uint64_t v145 = a4;
  uint64_t v132 = a2;
  uint64_t v139 = a1;
  uint64_t v7 = type metadata accessor for LayerState();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v126 = v7;
  uint64_t v127 = v8;
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v123 = (char *)v111 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  Swift::String v125 = (char *)v111 - v11;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TensorShape?);
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  uint64_t v129 = (char *)v111 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  unint64_t v131 = (char *)v111 - v15;
  uint64_t v135 = type metadata accessor for Tensor();
  uint64_t v137 = *(void *)(v135 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v135);
  uint64_t v128 = (char *)v111 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v130 = (char *)v111 - v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v134 = (char *)v111 - v20;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?);
  MEMORY[0x270FA5388](v21 - 8);
  uint64_t v133 = (char *)v111 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v138 = type metadata accessor for Parameter();
  uint64_t v140 = *(void *)(v138 - 8);
  uint64_t v23 = MEMORY[0x270FA5388](v138);
  uint64_t v25 = (char *)v111 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  uint64_t v27 = (char *)v111 - v26;
  uint64_t v28 = type metadata accessor for BatchNorm();
  uint64_t v136 = *(void *)(v28 - 8);
  MEMORY[0x270FA5388](v28);
  uint64_t v30 = (char *)v111 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = specialized _ModelCheckpoint<>.parameterKeyPathLookup.getter();
  specialized _ModelCheckpoint<>.layerStateKeyPathLookup.getter();
  uint64_t v33 = v32;
  uint64_t v34 = v141;
  static BatchNorm.loadLayer(from:layerName:)(v142, (unint64_t)v145, (uint64_t)v30);
  if (v34)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  uint64_t v119 = v5;
  uint64_t v117 = v25;
  uint64_t v121 = v33;
  uint64_t v120 = a5;
  uint64_t v141 = 0;
  Swift::String v124 = v30;
  uint64_t v122 = v28;
  BatchNorm.$offset.getter();
  uint64_t v36 = Parameter.id.getter();
  uint64_t v38 = v140 + 8;
  uint64_t v37 = *(void (**)(char *, uint64_t))(v140 + 8);
  v37(v27, v138);
  uint64_t v39 = specialized Dictionary.subscript.getter(v36, v31);
  if (!v39)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v143 = 0;
    unint64_t v144 = 0xE000000000000000;
    _StringGuts.grow(_:)(47);
    swift_bridgeObjectRelease();
    unint64_t v143 = 0xD000000000000019;
    unint64_t v144 = 0x80000002272D8E70;
    v57._uint64_t countAndFlagsBits = v142;
    v57._id object = v145;
    String.append(_:)(v57);
    v58._uint64_t countAndFlagsBits = 0xD000000000000014;
    v58._id object = (void *)0x80000002272D8E90;
    String.append(_:)(v58);
    unint64_t v59 = v143;
    unint64_t v60 = v144;
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(void *)uint64_t v61 = v59;
    *(void *)(v61 + 8) = v60;
    *(_OWORD *)(v61 + 16) = 0u;
    *(_OWORD *)(v61 + 32) = 0u;
    *(unsigned char *)(v61 + 48) = 2;
    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v136 + 8))(v124, v122);
  }
  uint64_t v40 = v39;
  Swift::String v116 = v37;
  uint64_t v118 = v31;
  uint64_t v140 = v38;
  uint64_t v41 = v134;
  BatchNorm.offset.getter();
  uint64_t v42 = v119 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_model;
  swift_beginAccess();
  uint64_t ML22MLHandActionClassifierV13GraphCNNModelVAE14NeuralNetworks5LayerAAWlTm_0 = _s8CreateML22MLHandActionClassifierV13GraphCNNModelVAE14NeuralNetworks5LayerAAWlTm_0(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
  uint64_t v44 = (uint64_t)v133;
  uint64_t v115 = ML22MLHandActionClassifierV13GraphCNNModelVAE14NeuralNetworks5LayerAAWlTm_0;
  uint64_t v114 = v42;
  Layer.updateValue<A>(_:for:)();
  uint64_t v46 = v137 + 8;
  uint64_t v45 = *(void (**)(char *, uint64_t))(v137 + 8);
  uint64_t v119 = v40;
  uint64_t v47 = v135;
  v45(v41, v135);
  outlined destroy of URL?(v44, &demangling cache variable for type metadata for Tensor?);
  swift_endAccess();
  uint64_t v48 = v130;
  BatchNorm.offset.getter();
  uint64_t v49 = (uint64_t)v131;
  Tensor.shape.getter();
  uint64_t v130 = (char *)v45;
  v45(v48, v47);
  uint64_t v113 = type metadata accessor for TensorShape();
  __swift_storeEnumTagSinglePayload(v49, 0, 1, v113);
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v51 = swift_allocObject();
  long long v112 = xmmword_2272CB370;
  *(_OWORD *)(v51 + 16) = xmmword_2272CB370;
  *(void *)(v51 + 56) = MEMORY[0x263F8D310];
  unint64_t v52 = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v51 + 64) = v52;
  uint64_t v53 = v145;
  *(void *)(v51 + 32) = v142;
  *(void *)(v51 + 40) = v53;
  swift_bridgeObjectRetain();
  uint64_t v54 = String.init(format:_:)();
  uint64_t v55 = v141;
  specialized SGD.updateOptimizerState(for:shape:using:name:)(v119, v49, v120, v54, v56);
  if (v55)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of URL?(v49, &demangling cache variable for type metadata for TensorShape?);
    return (*(uint64_t (**)(char *, uint64_t))(v136 + 8))(v124, v122);
  }
  v111[1] = v50;
  uint64_t v137 = v46;
  uint64_t v141 = 0;
  outlined destroy of URL?(v49, &demangling cache variable for type metadata for TensorShape?);
  swift_bridgeObjectRelease();
  uint64_t v62 = v117;
  BatchNorm.$scale.getter();
  uint64_t v63 = Parameter.id.getter();
  v116(v62, v138);
  uint64_t v64 = specialized Dictionary.subscript.getter(v63, v118);
  swift_bridgeObjectRelease();
  if (!v64)
  {
    swift_bridgeObjectRelease();
    unint64_t v143 = 0;
    unint64_t v144 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    swift_bridgeObjectRelease();
    unint64_t v143 = 0xD000000000000019;
    unint64_t v144 = 0x80000002272D8E70;
    v80._uint64_t countAndFlagsBits = v142;
    v80._id object = v145;
    String.append(_:)(v80);
    v81._uint64_t countAndFlagsBits = 0xD000000000000013;
    v81._id object = (void *)0x80000002272D8EB0;
    String.append(_:)(v81);
    unint64_t v82 = v143;
    unint64_t v83 = v144;
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(void *)uint64_t v84 = v82;
    *(void *)(v84 + 8) = v83;
    *(_OWORD *)(v84 + 16) = 0u;
    *(_OWORD *)(v84 + 32) = 0u;
    *(unsigned char *)(v84 + 48) = 2;
    swift_willThrow();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v136 + 8))(v124, v122);
  }
  uint64_t v65 = v134;
  uint64_t v66 = v124;
  BatchNorm.scale.getter();
  swift_beginAccess();
  uint64_t v67 = (uint64_t)v133;
  Layer.updateValue<A>(_:for:)();
  uint64_t v68 = v65;
  uint64_t v69 = v135;
  uint64_t v140 = v64;
  uint64_t v70 = (void (*)(char *, uint64_t))v130;
  ((void (*)(char *, uint64_t))v130)(v68, v135);
  outlined destroy of URL?(v67, &demangling cache variable for type metadata for Tensor?);
  swift_endAccess();
  uint64_t v71 = v128;
  BatchNorm.scale.getter();
  uint64_t v72 = (uint64_t)v129;
  Tensor.shape.getter();
  v70(v71, v69);
  uint64_t v73 = v140;
  __swift_storeEnumTagSinglePayload(v72, 0, 1, v113);
  uint64_t v74 = swift_allocObject();
  *(_OWORD *)(v74 + 16) = v112;
  *(void *)(v74 + 56) = MEMORY[0x263F8D310];
  *(void *)(v74 + 64) = v52;
  *(void *)(v74 + 32) = v142;
  *(void *)(v74 + 40) = v145;
  swift_bridgeObjectRetain();
  uint64_t v75 = String.init(format:_:)();
  uint64_t v76 = v141;
  specialized SGD.updateOptimizerState(for:shape:using:name:)(v73, v72, v120, v75, v77);
  uint64_t v78 = v136;
  uint64_t v79 = v122;
  if (v76)
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of URL?(v72, &demangling cache variable for type metadata for TensorShape?);
    return (*(uint64_t (**)(char *, uint64_t))(v78 + 8))(v66, v79);
  }
  uint64_t v141 = 0;
  outlined destroy of URL?(v72, &demangling cache variable for type metadata for TensorShape?);
  swift_bridgeObjectRelease();
  uint64_t v85 = v125;
  BatchNorm.$runningMean.getter();
  uint64_t v86 = LayerState.id.getter();
  uint64_t v88 = v127 + 8;
  uint64_t v87 = *(void (**)(char *, uint64_t))(v127 + 8);
  v87(v85, v126);
  uint64_t v89 = v86;
  uint64_t v90 = v121;
  uint64_t v91 = specialized Dictionary.subscript.getter(v89, v121);
  if (v91)
  {
    uint64_t v92 = v91;
    uint64_t v93 = v134;
    uint64_t v127 = v88;
    BatchNorm.runningMean.getter();
    swift_beginAccess();
    uint64_t v94 = (uint64_t)v133;
    uint64_t v138 = v92;
    Layer.updateValue<A>(_:for:)();
    ((void (*)(char *, uint64_t))v130)(v93, v135);
    outlined destroy of URL?(v94, &demangling cache variable for type metadata for Tensor?);
    swift_endAccess();
    uint64_t v95 = v123;
    BatchNorm.$runningVariance.getter();
    uint64_t v96 = LayerState.id.getter();
    v87(v95, v126);
    uint64_t v97 = specialized Dictionary.subscript.getter(v96, v90);
    swift_bridgeObjectRelease();
    if (v97)
    {
      uint64_t v98 = v124;
      BatchNorm.runningVariance.getter();
      swift_beginAccess();
      Layer.updateValue<A>(_:for:)();
      ((void (*)(char *, uint64_t))v130)(v93, v135);
      outlined destroy of URL?(v94, &demangling cache variable for type metadata for Tensor?);
      swift_endAccess();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v78 + 8))(v98, v122);
    }
    unint64_t v143 = 0;
    unint64_t v144 = 0xE000000000000000;
    _StringGuts.grow(_:)(56);
    v105._id object = (void *)0x80000002272D8E70;
    v105._uint64_t countAndFlagsBits = 0xD000000000000019;
    String.append(_:)(v105);
    v106._uint64_t countAndFlagsBits = v142;
    v106._id object = v145;
    String.append(_:)(v106);
    v107._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v107._id object = (void *)0x80000002272D8EF0;
    String.append(_:)(v107);
    unint64_t v108 = v143;
    unint64_t v109 = v144;
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(void *)uint64_t v110 = v108;
    *(void *)(v110 + 8) = v109;
    *(_OWORD *)(v110 + 16) = 0u;
    *(_OWORD *)(v110 + 32) = 0u;
    *(unsigned char *)(v110 + 48) = 2;
    swift_willThrow();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v143 = 0;
    unint64_t v144 = 0xE000000000000000;
    _StringGuts.grow(_:)(52);
    v99._id object = (void *)0x80000002272D8E70;
    v99._uint64_t countAndFlagsBits = 0xD000000000000019;
    String.append(_:)(v99);
    v100._uint64_t countAndFlagsBits = v142;
    v100._id object = v145;
    String.append(_:)(v100);
    v101._id object = (void *)0x80000002272D8ED0;
    v101._uint64_t countAndFlagsBits = 0xD000000000000019;
    String.append(_:)(v101);
    unint64_t v102 = v143;
    unint64_t v103 = v144;
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(void *)uint64_t v104 = v102;
    *(void *)(v104 + 8) = v103;
    *(_OWORD *)(v104 + 16) = 0u;
    *(_OWORD *)(v104 + 32) = 0u;
    *(unsigned char *)(v104 + 48) = 2;
    swift_willThrow();
    swift_release();
  }
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v78 + 8))(v124, v122);
}

uint64_t specialized _ModelCheckpoint<>.restoreLayer<A>(_:optimizer:layerName:checkpointDictionary:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, void, void *), void *a4, uint64_t a5, uint64_t (*a6)(uint64_t), uint64_t (*a7)(uint64_t, void, void *), void (*a8)(uint64_t), void (*a9)(void), void (*a10)(uint64_t), void (*a11)(uint64_t))
{
  Swift::String v124 = a8;
  uint64_t v129 = a7;
  uint64_t v132 = a4;
  uint64_t v120 = a2;
  uint64_t v126 = a1;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parameter?);
  uint64_t v16 = OUTLINED_FUNCTION_17(v15);
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_33_0();
  uint64_t v114 = v17;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TensorShape?);
  uint64_t v19 = OUTLINED_FUNCTION_17(v18);
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_49();
  uint64_t v112 = v20;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v21);
  uint64_t v119 = (char *)&v101 - v22;
  type metadata accessor for Tensor();
  OUTLINED_FUNCTION_0();
  uint64_t v121 = v24;
  uint64_t v122 = v23;
  MEMORY[0x270FA5388](v23);
  OUTLINED_FUNCTION_49();
  uint64_t v115 = v25;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v26);
  OUTLINED_FUNCTION_45_3();
  uint64_t v118 = v27;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v28);
  *(void *)&long long v117 = (char *)&v101 - v29;
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?);
  uint64_t v31 = OUTLINED_FUNCTION_17(v30);
  MEMORY[0x270FA5388](v31);
  OUTLINED_FUNCTION_49();
  uint64_t v116 = v32;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v33);
  uint64_t v35 = (char *)&v101 - v34;
  uint64_t v125 = type metadata accessor for Parameter();
  OUTLINED_FUNCTION_0();
  uint64_t v127 = v36;
  MEMORY[0x270FA5388](v37);
  uint64_t v38 = OUTLINED_FUNCTION_2_37();
  uint64_t v39 = a6(v38);
  OUTLINED_FUNCTION_0();
  uint64_t v123 = v40;
  MEMORY[0x270FA5388](v41);
  uint64_t v43 = (char *)&v101 - v42;
  uint64_t v44 = specialized _ModelCheckpoint<>.parameterKeyPathLookup.getter();
  uint64_t v45 = v128;
  uint64_t v46 = v129(a5, a3, v132);
  if (v45) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v108 = v11;
  unint64_t v109 = v35;
  uint64_t v110 = a5;
  uint64_t v128 = 0;
  uint64_t v129 = a3;
  uint64_t v113 = v43;
  uint64_t v111 = v39;
  v124(v46);
  uint64_t v48 = Parameter.id.getter();
  uint64_t v50 = v127 + 8;
  uint64_t v49 = *(void (**)(void))(v127 + 8);
  OUTLINED_FUNCTION_137();
  v49();
  uint64_t v51 = specialized Dictionary.subscript.getter(v48, v44);
  if (!v51)
  {
    swift_bridgeObjectRelease();
    unint64_t v130 = 0;
    unint64_t v131 = 0xE000000000000000;
    _StringGuts.grow(_:)(47);
    swift_bridgeObjectRelease();
    unint64_t v130 = 0xD000000000000019;
    unint64_t v131 = 0x80000002272D8E70;
    v67._uint64_t countAndFlagsBits = (uint64_t)v129;
    v67._id object = v132;
    String.append(_:)(v67);
    v68._uint64_t countAndFlagsBits = 0xD000000000000014;
    v68._id object = (void *)0x80000002272D8F10;
    String.append(_:)(v68);
    unint64_t v69 = v130;
    unint64_t v70 = v131;
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v71 = swift_allocError();
    *uint64_t v72 = v69;
    v72[1] = v70;
    OUTLINED_FUNCTION_4_3(v71, (uint64_t)v72);
    OUTLINED_FUNCTION_25_0();
    return v73();
  }
  uint64_t v52 = v51;
  Swift::String v107 = v49;
  Swift::String v124 = (void (*)(uint64_t))v44;
  uint64_t v127 = v50;
  a9();
  uint64_t v53 = v108 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_model;
  swift_beginAccess();
  uint64_t ML22MLHandActionClassifierV13GraphCNNModelVAE14NeuralNetworks5LayerAAWlTm_0 = _s8CreateML22MLHandActionClassifierV13GraphCNNModelVAE14NeuralNetworks5LayerAAWlTm_0(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
  uint64_t v55 = (uint64_t)v109;
  uint64_t v106 = ML22MLHandActionClassifierV13GraphCNNModelVAE14NeuralNetworks5LayerAAWlTm_0;
  uint64_t v108 = v53;
  Layer.updateValue<A>(_:for:)();
  unint64_t v56 = *(void (**)(void))(v121 + 8);
  OUTLINED_FUNCTION_38_0();
  v56();
  outlined destroy of URL?(v55, &demangling cache variable for type metadata for Tensor?);
  uint64_t v57 = swift_endAccess();
  ((void (*)(uint64_t))a9)(v57);
  uint64_t v58 = (uint64_t)v119;
  Tensor.shape.getter();
  OUTLINED_FUNCTION_38_0();
  v56();
  uint64_t v118 = type metadata accessor for TensorShape();
  __swift_storeEnumTagSinglePayload(v58, 0, 1, v118);
  uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v60 = swift_allocObject();
  long long v117 = xmmword_2272CB370;
  *(_OWORD *)(v60 + 16) = xmmword_2272CB370;
  *(void *)(v60 + 56) = MEMORY[0x263F8D310];
  unint64_t v61 = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v60 + 64) = v61;
  uint64_t v62 = v132;
  *(void *)(v60 + 32) = v129;
  *(void *)(v60 + 40) = v62;
  swift_bridgeObjectRetain();
  uint64_t v63 = String.init(format:_:)();
  uint64_t v64 = v128;
  specialized SGD.updateOptimizerState(for:shape:using:name:)(v52, v58, v110, v63, v65);
  if (v64)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of URL?(v58, &demangling cache variable for type metadata for TensorShape?);
    OUTLINED_FUNCTION_25_0();
    return v66();
  }
  unint64_t v102 = v61;
  uint64_t v103 = v59;
  uint64_t v104 = v56;
  uint64_t v105 = v52;
  uint64_t v128 = 0;
  outlined destroy of URL?(v58, &demangling cache variable for type metadata for TensorShape?);
  uint64_t v74 = swift_bridgeObjectRelease();
  uint64_t v75 = v116;
  a10(v74);
  uint64_t v76 = v122;
  if (__swift_getEnumTagSinglePayload(v75, 1, v122) == 1)
  {
    OUTLINED_FUNCTION_25_0();
    v77();
    swift_bridgeObjectRelease();
    swift_release();
    return outlined destroy of URL?(v75, &demangling cache variable for type metadata for Tensor?);
  }
  uint64_t v78 = v115;
  uint64_t v79 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v121 + 32))(v115, v75, v76);
  uint64_t v80 = v114;
  a11(v79);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v80, 1, v125);
  uint64_t v82 = v123;
  if (EnumTagSinglePayload == 1)
  {
    swift_bridgeObjectRelease();
    outlined destroy of URL?(v80, &demangling cache variable for type metadata for Parameter?);
LABEL_13:
    unint64_t v130 = 0;
    unint64_t v131 = 0xE000000000000000;
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease();
    unint64_t v130 = 0xD000000000000019;
    unint64_t v131 = 0x80000002272D8E70;
    v95._uint64_t countAndFlagsBits = (uint64_t)v129;
    v95._id object = v62;
    String.append(_:)(v95);
    v96._uint64_t countAndFlagsBits = 0xD000000000000012;
    v96._id object = (void *)0x80000002272D8F30;
    String.append(_:)(v96);
    unint64_t v97 = v130;
    unint64_t v98 = v131;
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v99 = swift_allocError();
    *Swift::String v100 = v97;
    v100[1] = v98;
    OUTLINED_FUNCTION_4_3(v99, (uint64_t)v100);
    swift_release();
    goto LABEL_14;
  }
  uint64_t v83 = Parameter.id.getter();
  OUTLINED_FUNCTION_9();
  v84();
  uint64_t v85 = specialized Dictionary.subscript.getter(v83, v124);
  swift_bridgeObjectRelease();
  if (!v85) {
    goto LABEL_13;
  }
  swift_beginAccess();
  uint64_t v86 = (uint64_t)v109;
  Layer.updateValue<A>(_:for:)();
  outlined destroy of URL?(v86, &demangling cache variable for type metadata for Tensor?);
  swift_endAccess();
  uint64_t v87 = v112;
  Tensor.shape.getter();
  __swift_storeEnumTagSinglePayload(v87, 0, 1, v118);
  uint64_t v88 = swift_allocObject();
  *(_OWORD *)(v88 + 16) = v117;
  unint64_t v89 = v102;
  *(void *)(v88 + 56) = MEMORY[0x263F8D310];
  *(void *)(v88 + 64) = v89;
  *(void *)(v88 + 32) = v129;
  *(void *)(v88 + 40) = v62;
  swift_bridgeObjectRetain();
  String.init(format:_:)();
  unint64_t v91 = v90;
  uint64_t v92 = OUTLINED_FUNCTION_23_14();
  specialized SGD.updateOptimizerState(for:shape:using:name:)(v92, v93, v110, v94, v91);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  outlined destroy of URL?(v87, &demangling cache variable for type metadata for TensorShape?);
LABEL_14:
  ((void (*)(uint64_t, uint64_t))v104)(v78, v122);
  return (*(uint64_t (**)(char *, uint64_t))(v82 + 8))(v113, v111);
}

uint64_t specialized _ModelCheckpoint<>.restoreGenericLayer<A, B>(_:optimizer:layerName:checkpointDictionary:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  v85._id object = a4;
  uint64_t v6 = v5;
  uint64_t v77 = a5;
  v85._uint64_t countAndFlagsBits = a3;
  uint64_t v69 = a2;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TensorShape?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v76 = (char *)v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = type metadata accessor for MLHandActionClassifier.GraphCNNModel(0);
  MEMORY[0x270FA5388](v70);
  uint64_t v92 = (uint64_t)v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = type metadata accessor for Parameter();
  uint64_t v11 = *(void *)(v89 - 8);
  MEMORY[0x270FA5388](v89);
  uint64_t v13 = (char *)v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?);
  uint64_t v15 = MEMORY[0x270FA5388](v14 - 8);
  Swift::String v68 = (char *)v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v81 = (uint64_t)v65 - v17;
  uint64_t v18 = type metadata accessor for Tensor();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)v65 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for LSTM();
  uint64_t v79 = a1;
  uint64_t v22 = Layer.namedParameterKeyPaths(recursively:)();
  uint64_t v67 = *(void *)(v22 + 16);
  if (!v67) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v75 = v6;
  uint64_t v23 = v6 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_model;
  v65[1] = v22;
  uint64_t v24 = v22 + 32;
  uint64_t v80 = v23;
  swift_beginAccess();
  uint64_t v25 = 0;
  uint64_t v74 = (void (**)(char *, uint64_t, uint64_t))(v19 + 32);
  uint64_t v88 = (void (**)(char *, uint64_t))(v11 + 8);
  uint64_t v71 = (void (**)(char *, uint64_t))(v19 + 8);
  uint64_t v73 = v18;
  uint64_t v26 = (uint64_t)v76;
  uint64_t v27 = v77;
  uint64_t v72 = v21;
  uint64_t v66 = v24;
  while (1)
  {
    uint64_t v78 = v25;
    uint64_t v28 = (uint64_t *)(v24 + 24 * v25);
    uint64_t v30 = *v28;
    uint64_t v29 = (void *)v28[1];
    uint64_t v31 = v28[2];
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v32 = v81;
    uint64_t v84 = v30;
    uint64_t v33 = v30;
    uint64_t v34 = v86;
    Dictionary<>.tensor(forKey:prefix:)(v33, v29, v85._countAndFlagsBits, (uint64_t)v85._object, v27, v81);
    if (v34)
    {
      swift_bridgeObjectRelease();
      swift_release();
      return swift_bridgeObjectRelease();
    }
    uint64_t v83 = v29;
    if (__swift_getEnumTagSinglePayload(v32, 1, v18) == 1)
    {
      swift_bridgeObjectRelease();
      outlined destroy of URL?(v32, &demangling cache variable for type metadata for Tensor?);
      uint64_t countAndFlagsBits = 0;
      unint64_t v91 = 0xE000000000000000;
      _StringGuts.grow(_:)(52);
      v59._id object = (void *)0x80000002272D7DB0;
      v59._uint64_t countAndFlagsBits = 0xD000000000000025;
      String.append(_:)(v59);
      String.append(_:)(v85);
      v60._uint64_t countAndFlagsBits = 0x74656D6172617020;
      v60._id object = (void *)0xEB00000000207265;
      String.append(_:)(v60);
      v61._uint64_t countAndFlagsBits = v84;
      v61._id object = v83;
      String.append(_:)(v61);
      uint64_t v62 = countAndFlagsBits;
      unint64_t v63 = v91;
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError();
      *(void *)uint64_t v64 = v62;
      *(void *)(v64 + 8) = v63;
      *(_OWORD *)(v64 + 16) = 0u;
      *(_OWORD *)(v64 + 32) = 0u;
      *(unsigned char *)(v64 + 48) = 0;
      swift_bridgeObjectRelease();
      swift_willThrow();
      return swift_release();
    }
    (*v74)(v21, v32, v18);
    swift_retain();
    swift_getAtKeyPath();
    uint64_t v82 = v31;
    swift_release();
    unsigned int v35 = Parameter.id.getter();
    uint64_t v87 = *v88;
    v87(v13, v89);
    uint64_t v36 = specialized _ModelCheckpoint<>.parameterKeyPathLookup.getter();
    if (!*(void *)(v36 + 16)) {
      break;
    }
    unint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(v35);
    if ((v38 & 1) == 0) {
      break;
    }
    uint64_t v39 = *(void *)(*(void *)(v36 + 56) + 8 * v37);
    swift_retain();
    swift_bridgeObjectRelease();
    id object = v85._object;
    uint64_t v41 = 0;
LABEL_19:
    swift_beginAccess();
    _s8CreateML22MLHandActionClassifierV13GraphCNNModelVAE14NeuralNetworks5LayerAAWlTm_0(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
    uint64_t v49 = (uint64_t)v68;
    uint64_t v21 = v72;
    Layer.updateValue<A>(_:for:)();
    outlined destroy of URL?(v49, &demangling cache variable for type metadata for Tensor?);
    swift_endAccess();
    uint64_t v50 = type metadata accessor for TensorShape();
    __swift_storeEnumTagSinglePayload(v26, 1, 1, v50);
    uint64_t countAndFlagsBits = v85._countAndFlagsBits;
    unint64_t v91 = (unint64_t)object;
    swift_bridgeObjectRetain();
    v51._uint64_t countAndFlagsBits = 46;
    v51._id object = (void *)0xE100000000000000;
    String.append(_:)(v51);
    v52._uint64_t countAndFlagsBits = v84;
    v52._id object = v83;
    String.append(_:)(v52);
    swift_bridgeObjectRelease();
    specialized SGD.updateOptimizerState(for:shape:using:name:)(v39, v26, v27, countAndFlagsBits, v91);
    uint64_t v86 = v41;
    if (v41)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      outlined destroy of URL?(v26, &demangling cache variable for type metadata for TensorShape?);
      (*v71)(v21, v73);
      return swift_bridgeObjectRelease();
    }
    uint64_t v25 = v78 + 1;
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of URL?(v26, &demangling cache variable for type metadata for TensorShape?);
    uint64_t v18 = v73;
    (*v71)(v21, v73);
    uint64_t v24 = v66;
    if (v25 == v67) {
      return swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  outlined init with copy of MLHandActionClassifier.GraphCNNModel();
  _s8CreateML22MLHandActionClassifierV13GraphCNNModelVAE14NeuralNetworks5LayerAAWlTm_0(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
  unint64_t v42 = Layer.parameterKeyPaths(recursively:)();
  unint64_t v43 = v42;
  uint64_t v86 = 0;
  if (v42 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v44 = _CocoaArrayWrapper.endIndex.getter();
    if (v44) {
      goto LABEL_10;
    }
LABEL_23:
    swift_bridgeObjectRelease_n();
    outlined destroy of MLHandActionClassifier.GraphCNNModel(v92, (void (*)(void))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
    swift_bridgeObjectRelease();
    uint64_t countAndFlagsBits = 0;
    unint64_t v91 = 0xE000000000000000;
    _StringGuts.grow(_:)(52);
    v53._id object = (void *)0x80000002272D7DB0;
    v53._uint64_t countAndFlagsBits = 0xD000000000000025;
    String.append(_:)(v53);
    String.append(_:)(v85);
    v54._uint64_t countAndFlagsBits = 0x74656D6172617020;
    v54._id object = (void *)0xEB00000000207265;
    String.append(_:)(v54);
    v55._uint64_t countAndFlagsBits = v84;
    v55._id object = v83;
    String.append(_:)(v55);
    uint64_t v56 = countAndFlagsBits;
    unint64_t v57 = v91;
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(void *)uint64_t v58 = v56;
    *(void *)(v58 + 8) = v57;
    *(_OWORD *)(v58 + 16) = 0u;
    *(_OWORD *)(v58 + 32) = 0u;
    *(unsigned char *)(v58 + 48) = 0;
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_release();
    return ((uint64_t (*)(char *, uint64_t))*v71)(v72, v73);
  }
  uint64_t v44 = *(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v44) {
    goto LABEL_23;
  }
LABEL_10:
  uint64_t v45 = 4;
  while (1)
  {
    if ((v43 & 0xC000000000000001) != 0)
    {
      uint64_t result = MEMORY[0x22A6753B0](v45 - 4, v43);
      uint64_t v39 = result;
    }
    else
    {
      uint64_t v39 = *(void *)(v43 + 8 * v45);
      uint64_t result = swift_retain();
    }
    uint64_t v47 = v45 - 3;
    if (__OFADD__(v45 - 4, 1)) {
      break;
    }
    swift_getAtKeyPath();
    int v48 = Parameter.id.getter();
    v87(v13, v89);
    if (v48 == v35)
    {
      swift_bridgeObjectRelease_n();
      outlined destroy of MLHandActionClassifier.GraphCNNModel(v92, (void (*)(void))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
      id object = v85._object;
      uint64_t v41 = v86;
      uint64_t v26 = (uint64_t)v76;
      uint64_t v27 = v77;
      goto LABEL_19;
    }
    swift_release();
    ++v45;
    if (v47 == v44) {
      goto LABEL_23;
    }
  }
  __break(1u);
  return result;
}

uint64_t outlined assign with take of SGD<MLHandActionClassifier.GraphCNNModel>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SGD<MLHandActionClassifier.GraphCNNModel>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of MLHandActionClassifier.GraphCNNModel()
{
  uint64_t v1 = OUTLINED_FUNCTION_50_9();
  v2(v1);
  OUTLINED_FUNCTION_8();
  uint64_t v3 = OUTLINED_FUNCTION_52_3();
  v4(v3);
  return v0;
}

uint64_t outlined init with copy of MLHandActionClassifier.GraphCNNModel()
{
  uint64_t v1 = OUTLINED_FUNCTION_50_9();
  v2(v1);
  OUTLINED_FUNCTION_8();
  uint64_t v3 = OUTLINED_FUNCTION_111();
  v4(v3);
  return v0;
}

uint64_t outlined destroy of MLHandActionClassifier.GraphCNNModel(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_25_0();
  v3();
  return a1;
}

uint64_t OUTLINED_FUNCTION_5_36()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_10_27@<X0>(uint64_t a1@<X8>)
{
  long long v4 = *(_OWORD *)(v3 - 120);
  *(_OWORD *)a1 = *(_OWORD *)(v3 - 136);
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v3 - 104);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(v3 - 88);
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  return 0;
}

uint64_t OUTLINED_FUNCTION_12_21()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_14_25()
{
  return MEMORY[0x270F4DDD0](1, 3, 1, 1, 0, 0, 1, 1);
}

uint64_t OUTLINED_FUNCTION_15_25()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_16_25()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_17_23()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_19_24()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_22_21()
{
  return Conv2D.init(filterCount:kernelSize:stride:padding:dilation:groupCount:weightInitializer:biasInitializer:)();
}

uint64_t OUTLINED_FUNCTION_23_14()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_27_18()
{
  return type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
}

uint64_t OUTLINED_FUNCTION_28_16()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_29_19()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_37_12()
{
  return static ParameterInitializer.glorotUniform(seed:scalarType:on:)();
}

uint64_t OUTLINED_FUNCTION_38_15()
{
  return Tensor.shape.getter();
}

uint64_t OUTLINED_FUNCTION_39_14@<X0>(int a1@<W8>)
{
  return ((a1 + 2147483646) & 0x7FFFFFFFu) + 1;
}

uint64_t OUTLINED_FUNCTION_40_10()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_42_14()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_43_11()
{
  return __swift_storeEnumTagSinglePayload(v0, 1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_44_12()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_45_13()
{
  return __swift_storeEnumTagSinglePayload(v0, 1, 1, v1);
}

void OUTLINED_FUNCTION_47_13()
{
  static MLHandActionClassifier.SingleStreamBlock.makeDownSampledInvertedResidual(inplanes:planes:stride:)();
}

uint64_t OUTLINED_FUNCTION_50_9()
{
  return 0;
}

unint64_t MLSoundClassifier.ModelParameters.ModelAlgorithmType.description.getter()
{
  unint64_t v2 = MLSoundClassifier.ModelParameters.FeatureExtractorType.description.getter();
  swift_bridgeObjectRetain();
  v0._id object = (void *)0x80000002272D6480;
  v0._uint64_t countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t static MLSoundClassifier.ModelParameters.ModelAlgorithmType.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*(void *)a1 == *(void *)a2) {
      char v2 = *(unsigned char *)(a2 + 8);
    }
    else {
      char v2 = 0;
    }
    if ((v2 & 1) == 0) {
      return 0;
    }
  }
  else
  {
    if (*(void *)a1 == *(void *)a2) {
      char v4 = *(unsigned char *)(a2 + 8);
    }
    else {
      char v4 = 1;
    }
    if (v4) {
      return 0;
    }
  }
  return 1;
}

ValueMetadata *type metadata accessor for MLSoundClassifier.ModelParameters.ModelAlgorithmType()
{
  return &type metadata for MLSoundClassifier.ModelParameters.ModelAlgorithmType;
}

uint64_t static MLLogisticRegressionClassifier.ModelParameters.firstIncompatibility(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  if (*(void *)a1 == *(void *)a2)
  {
    if (*(double *)(a1 + 40) == *(double *)(a2 + 40))
    {
      if (*(double *)(a1 + 48) == *(double *)(a2 + 48))
      {
        if (*(double *)(a1 + 56) == *(double *)(a2 + 56))
        {
          if (*(double *)(a1 + 64) == *(double *)(a2 + 64))
          {
            int v6 = *(unsigned __int8 *)(a1 + 72);
            uint64_t v7 = 1702195828;
            int v8 = *(unsigned __int8 *)(a2 + 72);
            if (*(unsigned char *)(a1 + 72)) {
              uint64_t v9 = 1702195828;
            }
            else {
              uint64_t v9 = 0x65736C6166;
            }
            if (*(unsigned char *)(a1 + 72)) {
              unint64_t v10 = 0xE400000000000000;
            }
            else {
              unint64_t v10 = 0xE500000000000000;
            }
            if (*(unsigned char *)(a2 + 72))
            {
              unint64_t v11 = 0xE400000000000000;
            }
            else
            {
              uint64_t v7 = 0x65736C6166;
              unint64_t v11 = 0xE500000000000000;
            }
            if (v6 == v8) {
              unint64_t v12 = 0;
            }
            else {
              unint64_t v12 = 0x2065727574616546;
            }
            if (v6 == v8) {
              unint64_t v13 = 0;
            }
            else {
              unint64_t v13 = 0xEF676E696C616373;
            }
            if (v6 == v8) {
              uint64_t v3 = 0;
            }
            else {
              uint64_t v3 = v9;
            }
            if (v6 == v8) {
              unint64_t v4 = 0;
            }
            else {
              unint64_t v4 = v10;
            }
            if (v6 == v8) {
              uint64_t result = 0;
            }
            else {
              uint64_t result = v7;
            }
            if (v6 == v8) {
              unint64_t v15 = 0;
            }
            else {
              unint64_t v15 = v11;
            }
          }
          else
          {
            Double.description.getter();
            uint64_t result = OUTLINED_FUNCTION_0_22();
            unint64_t v13 = 0x80000002272D9130;
            unint64_t v12 = 0xD000000000000015;
          }
        }
        else
        {
          Double.description.getter();
          uint64_t result = OUTLINED_FUNCTION_0_22();
          unint64_t v13 = 0xE900000000000065;
          unint64_t v12 = 0x7A69732070657453;
        }
      }
      else
      {
        unint64_t v13 = 0xEA00000000007974;
        Double.description.getter();
        uint64_t result = OUTLINED_FUNCTION_0_22();
        unint64_t v12 = 0x6C616E657020324CLL;
      }
    }
    else
    {
      unint64_t v13 = 0xEA00000000007974;
      unint64_t v12 = 0x6C616E657020314CLL;
      Double.description.getter();
      uint64_t result = OUTLINED_FUNCTION_0_22();
    }
  }
  else
  {
    uint64_t v3 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v4 = v16;
    uint64_t result = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v13 = 0xEF736E6F69746172;
    unint64_t v12 = 0x657469202E78614DLL;
  }
  *a3 = v12;
  a3[1] = v13;
  a3[2] = v3;
  a3[3] = v4;
  a3[4] = result;
  a3[5] = v15;
  return result;
}

uint64_t OUTLINED_FUNCTION_0_22()
{
  return Double.description.getter();
}

Class static MLTextClassifier.buildOptions(_:)(uint64_t a1)
{
  v82[5] = *(id *)MEMORY[0x263EF8340];
  char v2 = (objc_class *)type metadata accessor for URL();
  uint64_t v77 = *((void *)v2 - 1);
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  uint64_t v75 = (char *)&v75 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v76 = (char *)&v75 - v5;
  uint64_t v6 = type metadata accessor for MLTextClassifier.FeatureExtractorType();
  uint64_t v7 = MEMORY[0x270FA5388](v6 - 8);
  uint64_t v9 = (char *)&v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v78 = (uint64_t)&v75 - v10;
  uint64_t v11 = type metadata accessor for MLTextClassifier.ModelAlgorithmType();
  MEMORY[0x270FA5388](v11);
  unint64_t v13 = (char *)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = Dictionary.init(dictionaryLiteral:)();
  uint64_t v14 = type metadata accessor for MLTextClassifier.ModelParameters();
  uint64_t v15 = a1 + *(int *)(v14 + 36);
  if ((*(unsigned char *)(v15 + 8) & 1) == 0)
  {
    if (!*MEMORY[0x263F14048])
    {
      __break(1u);
      JUMPOUT(0x2271B17F0);
    }
    uint64_t v16 = *(void *)v15;
    *(void *)&long long v80 = (id)*MEMORY[0x263F14048];
    type metadata accessor for CFStringRef(0);
    lazy protocol witness table accessor for type NLModelConfigurationOptionsKey and conformance NLModelConfigurationOptionsKey(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
    AnyHashable.init<A>(_:)();
    *((void *)&v81 + 1) = MEMORY[0x263F8D6C8];
    *(void *)&long long v80 = v16;
    OUTLINED_FUNCTION_1_38();
  }
  uint64_t v17 = *(void **)(a1 + *(int *)(v14 + 20));
  if (v17)
  {
    *(void *)&long long v80 = *MEMORY[0x263F13E90];
    uint64_t v18 = (void *)v80;
    type metadata accessor for NLModelConfigurationOptionsKey(0);
    lazy protocol witness table accessor for type NLModelConfigurationOptionsKey and conformance NLModelConfigurationOptionsKey(&lazy protocol witness table cache variable for type NLModelConfigurationOptionsKey and conformance NLModelConfigurationOptionsKey, type metadata accessor for NLModelConfigurationOptionsKey);
    id v19 = v17;
    id v20 = v18;
    AnyHashable.init<A>(_:)();
    type metadata accessor for NLLanguage(0);
    *((void *)&v81 + 1) = v21;
    *(void *)&long long v80 = v19;
    OUTLINED_FUNCTION_1_38();
  }
  outlined init with copy of MLTextClassifier.ModelAlgorithmType(a1, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for MLTextClassifier.ModelAlgorithmType);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v23 = *(void *)v13;
      char v24 = v13[8];
      *(void *)&long long v80 = *MEMORY[0x263F13E98];
      uint64_t v25 = (void *)v80;
      type metadata accessor for NLModelConfigurationOptionsKey(0);
      lazy protocol witness table accessor for type NLModelConfigurationOptionsKey and conformance NLModelConfigurationOptionsKey(&lazy protocol witness table cache variable for type NLModelConfigurationOptionsKey and conformance NLModelConfigurationOptionsKey, type metadata accessor for NLModelConfigurationOptionsKey);
      id v26 = v25;
      OUTLINED_FUNCTION_2_46();
      if (v24)
      {
        long long v80 = 0u;
        long long v81 = 0u;
      }
      else
      {
        *((void *)&v81 + 1) = MEMORY[0x263F8D6C8];
        *(void *)&long long v80 = v23;
      }
      OUTLINED_FUNCTION_1_38();
      unint64_t v37 = (void *)MEMORY[0x263F13EA0];
      goto LABEL_18;
    }
    uint64_t v31 = &v13[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLTextClassifier.FeatureExtractorType, revision: Int?))
                      + 48)];
    uint64_t v32 = *(void *)v31;
    char v33 = v31[8];
    uint64_t v34 = v78;
    outlined init with take of MLTextClassifier.FeatureExtractorType((uint64_t)v13, v78);
    *(void *)&long long v80 = *MEMORY[0x263F13E98];
    unsigned int v35 = (void *)v80;
    type metadata accessor for NLModelConfigurationOptionsKey(0);
    lazy protocol witness table accessor for type NLModelConfigurationOptionsKey and conformance NLModelConfigurationOptionsKey(&lazy protocol witness table cache variable for type NLModelConfigurationOptionsKey and conformance NLModelConfigurationOptionsKey, type metadata accessor for NLModelConfigurationOptionsKey);
    id v36 = v35;
    OUTLINED_FUNCTION_0_23();
    if (v33)
    {
      long long v80 = 0u;
      long long v81 = 0u;
    }
    else
    {
      *((void *)&v81 + 1) = MEMORY[0x263F8D6C8];
      *(void *)&long long v80 = v32;
    }
    uint64_t v39 = v2;
    OUTLINED_FUNCTION_1_38();
    *(void *)&long long v80 = *MEMORY[0x263F13EB0];
    id v40 = (id)v80;
    OUTLINED_FUNCTION_0_23();
    OUTLINED_FUNCTION_3_46(MEMORY[0x263F8D4F8]);
    outlined init with copy of MLTextClassifier.ModelAlgorithmType(v34, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for MLTextClassifier.FeatureExtractorType);
    switch(__swift_getEnumTagSinglePayload((uint64_t)v9, 4, (uint64_t)v2))
    {
      case 1u:
        *(void *)&long long v80 = *MEMORY[0x263F13E80];
        id v54 = (id)v80;
        OUTLINED_FUNCTION_0_23();
        unint64_t v42 = (void **)MEMORY[0x263F13ED0];
        goto LABEL_30;
      case 2u:
      case 3u:
        *(void *)&long long v80 = *MEMORY[0x263F13E80];
        id v41 = (id)v80;
        OUTLINED_FUNCTION_0_23();
        unint64_t v42 = (void **)MEMORY[0x263F13EC8];
        goto LABEL_30;
      case 4u:
        *(void *)&long long v80 = *MEMORY[0x263F13E80];
        id v55 = (id)v80;
        OUTLINED_FUNCTION_0_23();
        unint64_t v42 = (void **)MEMORY[0x263F13EB8];
LABEL_30:
        uint64_t v56 = *v42;
        type metadata accessor for NLModelEmbeddingType(0);
        *((void *)&v81 + 1) = v57;
        *(void *)&long long v80 = v56;
        id v58 = v56;
        specialized Dictionary.subscript.setter((uint64_t)&v80, (uint64_t)v82);
        goto LABEL_31;
      default:
        unint64_t v43 = v76;
        (*(void (**)(void))(v77 + 32))();
        *(void *)&long long v80 = *MEMORY[0x263F13E80];
        id v44 = (id)v80;
        OUTLINED_FUNCTION_0_23();
        uint64_t v45 = (void *)*MEMORY[0x263F13EC0];
        type metadata accessor for NLModelEmbeddingType(0);
        *((void *)&v81 + 1) = v46;
        *(void *)&long long v80 = v45;
        id v47 = v45;
        specialized Dictionary.subscript.setter((uint64_t)&v80, (uint64_t)v82);
        if (URL.pathExtension.getter() == 0x6C65646F6D6C6DLL && v48 == 0xE700000000000000)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v50 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v50 & 1) == 0)
          {
            *(void *)&long long v80 = *MEMORY[0x263F13E88];
            id v51 = (id)v80;
            OUTLINED_FUNCTION_0_23();
            *((void *)&v81 + 1) = v2;
            boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v80);
            uint64_t v53 = v77;
            (*(void (**)(uint64_t *, char *, objc_class *))(v77 + 16))(boxed_opaque_existential_0, v43, v2);
            OUTLINED_FUNCTION_1_38();
            (*(void (**)(char *, objc_class *))(v53 + 8))(v43, v2);
LABEL_31:
            uint64_t v59 = v34;
            goto LABEL_32;
          }
        }
        uint64_t v62 = self;
        URL._bridgeToObjectiveC()(v63);
        unint64_t v65 = v64;
        v82[0] = 0;
        id v66 = objc_msgSend(v62, sel_compileModelAtURL_error_, v64, v82);

        id v67 = v82[0];
        if (!v66)
        {
          id v74 = v82[0];
          swift_bridgeObjectRelease();
          v60.super.CFDataRef isa = v2;
          _convertNSErrorToError(_:)();

          swift_willThrow();
          (*(void (**)(char *, objc_class *))(v77 + 8))(v43, v2);
          outlined destroy of MLTextClassifier.FeatureExtractorType(v78);
          return v60.super.isa;
        }
        Swift::String v68 = v75;
        static URL._unconditionallyBridgeFromObjectiveC(_:)();
        id v69 = v67;

        *(void *)&long long v80 = *MEMORY[0x263F13E88];
        id v70 = (id)v80;
        OUTLINED_FUNCTION_0_23();
        *((void *)&v81 + 1) = v2;
        uint64_t v71 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v80);
        uint64_t v72 = v77;
        (*(void (**)(uint64_t *, char *, objc_class *))(v77 + 16))(v71, v68, v39);
        OUTLINED_FUNCTION_1_38();
        uint64_t v73 = *(void (**)(char *, objc_class *))(v72 + 8);
        v73(v68, v39);
        v73(v43, v39);
        uint64_t v59 = v78;
LABEL_32:
        outlined destroy of MLTextClassifier.FeatureExtractorType(v59);
        goto LABEL_33;
    }
  }
  uint64_t v27 = *(void *)v13;
  char v28 = v13[8];
  *(void *)&long long v80 = *MEMORY[0x263F13E98];
  uint64_t v29 = (void *)v80;
  type metadata accessor for NLModelConfigurationOptionsKey(0);
  lazy protocol witness table accessor for type NLModelConfigurationOptionsKey and conformance NLModelConfigurationOptionsKey(&lazy protocol witness table cache variable for type NLModelConfigurationOptionsKey and conformance NLModelConfigurationOptionsKey, type metadata accessor for NLModelConfigurationOptionsKey);
  id v30 = v29;
  OUTLINED_FUNCTION_2_46();
  if (v28)
  {
    long long v80 = 0u;
    long long v81 = 0u;
  }
  else
  {
    *((void *)&v81 + 1) = MEMORY[0x263F8D6C8];
    *(void *)&long long v80 = v27;
  }
  OUTLINED_FUNCTION_1_38();
  unint64_t v37 = (void *)MEMORY[0x263F13EA8];
LABEL_18:
  *(void *)&long long v80 = *v37;
  id v38 = (id)v80;
  OUTLINED_FUNCTION_2_46();
  OUTLINED_FUNCTION_3_46(MEMORY[0x263F8D4F8]);
LABEL_33:
  v60.super.CFDataRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  return v60.super.isa;
}

void *implicit closure #1 in closure #1 in closure #3 in static MLTextClassifier.createClassifier<A, B>(trainingExamples:validatingExamples:modelParameters:)(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  char v2 = *(void **)(a1 + 8 * a2);
  id v3 = v2;
  return v2;
}

uint64_t outlined init with take of MLTextClassifier.FeatureExtractorType(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MLTextClassifier.FeatureExtractorType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of MLTextClassifier.ModelAlgorithmType(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of MLTextClassifier.FeatureExtractorType(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MLTextClassifier.FeatureExtractorType();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t lazy protocol witness table accessor for type NLModelConfigurationOptionsKey and conformance NLModelConfigurationOptionsKey(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_23()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_1_38()
{
  return specialized Dictionary.subscript.setter(v0 - 160, v0 - 128);
}

uint64_t OUTLINED_FUNCTION_2_46()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_3_46@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 136) = a1;
  *(unsigned char *)(v1 - 160) = 1;
  return specialized Dictionary.subscript.setter(v1 - 160, v1 - 128);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML16ColumnDescriptorVG_20MLModelSpecification18FeatureDescriptionVs5NeverOTg503_s8d54ML22AnyTreeClassifierModelV6export16internalMetadata20h33Specification0F0VSDyS2SGz_tKFAF18jk5VAA16fG54Vcfu1_33_3fd57c9cf8bb5b882e179ce0f1f8c55eAmKTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v17 = type metadata accessor for FeatureDescription();
  uint64_t v3 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = MEMORY[0x263F8EE78];
  if (v6)
  {
    v16[1] = v1;
    uint64_t v18 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    uint64_t v7 = v18;
    v16[2] = v3 + 32;
    uint64_t v8 = (char *)(a1 + 56);
    do
    {
      uint64_t v9 = *((void *)v8 - 3);
      uint64_t v10 = *((void *)v8 - 2);
      uint64_t v11 = *((void *)v8 - 1);
      char v12 = *v8;
      swift_bridgeObjectRetain();
      outlined copy of ColumnDescriptor.ColumnTypeDescriptor(v11, v12);
      ColumnDescriptor.featureDescription.getter(v9, v10, v11, v12);
      swift_bridgeObjectRelease();
      outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v11, v12);
      uint64_t v18 = v7;
      unint64_t v14 = *(void *)(v7 + 16);
      unint64_t v13 = *(void *)(v7 + 24);
      if (v14 >= v13 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        uint64_t v7 = v18;
      }
      v8 += 32;
      *(void *)(v7 + 16) = v14 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v7+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v14, v5, v17);
      --v6;
    }
    while (v6);
  }
  return v7;
}

void AnyTreeClassifierModel.export(internalMetadata:)(uint64_t a1@<X8>)
{
  uint64_t v107 = a1;
  uint64_t v103 = type metadata accessor for FeatureType();
  OUTLINED_FUNCTION_0();
  uint64_t v102 = v2;
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_33_0();
  uint64_t v104 = v4;
  uint64_t v100 = type metadata accessor for TreeEnsembleClassifierConfiguration.ClassLabels();
  OUTLINED_FUNCTION_0();
  uint64_t v99 = v5;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_17_3(v7);
  uint64_t v113 = type metadata accessor for ModelKind();
  OUTLINED_FUNCTION_0();
  uint64_t v116 = v8;
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_49();
  uint64_t v106 = v10;
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_17_3((uint64_t)v94 - v12);
  type metadata accessor for TreeEnsembleClassifierConfiguration();
  OUTLINED_FUNCTION_0();
  uint64_t v111 = v14;
  uint64_t v112 = v13;
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_33_0();
  uint64_t v115 = v15;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Model?);
  MEMORY[0x270FA5388](v16 - 8);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_17_3(v17);
  type metadata accessor for Model();
  OUTLINED_FUNCTION_0();
  uint64_t v108 = v19;
  uint64_t v109 = v18;
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_49();
  uint64_t v105 = v20;
  MEMORY[0x270FA5388](v21);
  uint64_t v114 = (char *)v94 - v22;
  uint64_t v23 = type metadata accessor for URL.DirectoryHint();
  OUTLINED_FUNCTION_0();
  uint64_t v118 = v24;
  MEMORY[0x270FA5388](v25);
  uint64_t v27 = (char *)v94 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_0();
  uint64_t v117 = v29;
  MEMORY[0x270FA5388](v30);
  uint64_t v32 = (char *)v94 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v119 = v34;
  uint64_t v120 = v33;
  MEMORY[0x270FA5388](v33);
  OUTLINED_FUNCTION_49();
  uint64_t v110 = v35;
  uint64_t v37 = MEMORY[0x270FA5388](v36);
  uint64_t v38 = MEMORY[0x270FA5388](v37);
  id v40 = (char *)v94 - v39;
  MEMORY[0x270FA5388](v38);
  unint64_t v42 = (char *)v94 - v41;
  uint64_t v43 = *(void *)(v1 + 16);
  if (!v43) {
    goto LABEL_13;
  }
  uint64_t v44 = v121;
  Swift::Int v45 = specialized FeatureVectorizer.Transformer.exportEncoders()(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void (**)(void))(v1 + 32));
  if (!v44)
  {
    v94[1] = v43;
    Swift::Int v121 = v45;
    Swift::String v95 = v42;
    Swift::String v96 = (uint64_t *)v1;
    uint64_t v46 = self;
    id v47 = objc_msgSend(v46, sel_defaultManager);
    NSFileManager.createTemporaryModelDirectory()();
    if (v48)
    {
      swift_bridgeObjectRelease();
    }
    else
    {

      id v49 = objc_msgSend(v46, sel_defaultManager);
      NSFileManager.temporaryModelDirectory.getter();

      UUID.init()();
      uint64_t v50 = UUID.uuidString.getter();
      uint64_t v52 = v51;
      (*(void (**)(char *, uint64_t))(v117 + 8))(v32, v28);
      uint64_t v122 = v50;
      uint64_t v123 = v52;
      uint64_t v53 = v118;
      (*(void (**)(char *, void, uint64_t))(v118 + 104))(v27, *MEMORY[0x263F06E50], v23);
      lazy protocol witness table accessor for type String and conformance String();
      URL.appending<A>(component:directoryHint:)();
      (*(void (**)(char *, uint64_t))(v53 + 8))(v27, v23);
      swift_bridgeObjectRelease();
      uint64_t v55 = v119;
      uint64_t v54 = v120;
      uint64_t v56 = *(void (**)(void))(v119 + 8);
      OUTLINED_FUNCTION_11_28();
      v56();
      uint64_t v57 = v95;
      URL.appendingPathExtension(_:)();
      OUTLINED_FUNCTION_11_28();
      v56();
      uint64_t v58 = type metadata accessor for AnyTreeClassifierModel();
      BaseTreeClassifierModel.export(to:)();
      uint64_t v1 = 0;
      id v40 = v110;
      (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v110, v57, v54);
      uint64_t v28 = (uint64_t)v114;
      Model.init(contentsOf:)();
      uint64_t v119 = 0;
      uint64_t v59 = v97;
      specialized BidirectionalCollection.last.getter(v121);
      uint64_t v60 = v109;
      if (__swift_getEnumTagSinglePayload(v59, 1, v109) == 1)
      {
        __break(1u);
        goto LABEL_13;
      }
      Model.outputs.getter();
      uint64_t v61 = v108 + 8;
      uint64_t v117 = *(void *)(v108 + 8);
      ((void (*)(uint64_t, uint64_t))v117)(v59, v60);
      Model.inputs.setter();
      uint64_t v62 = v96;
      uint64_t v64 = *v96;
      uint64_t v63 = v96[1];
      swift_bridgeObjectRetain();
      Model.predictedFeatureName.setter();
      uint64_t v97 = v64;
      uint64_t v122 = v64;
      uint64_t v123 = v63;
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_1_39();
      Model.predictedProbabilitiesName.setter();
      Dictionary.init(dictionaryLiteral:)();
      Model.metadata.setter();
      id v40 = v98;
      Model.kind.getter();
      uint64_t v1 = v116;
      uint64_t v28 = v113;
      int v65 = (*(uint64_t (**)(char *, uint64_t))(v116 + 88))(v40, v113);
      int v66 = *MEMORY[0x263F53430];
      LODWORD(v110) = v65;
      if (v65 != v66)
      {
        while (1)
        {
          uint64_t v93 = *(void (**)(char *, uint64_t))(v1 + 8);
          v1 += 8;
          v93(v40, v28);
LABEL_13:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
        }
      }
      uint64_t v118 = v61;
      (*(void (**)(char *, uint64_t))(v1 + 96))(v40, v28);
      (*(void (**)(uint64_t, char *, uint64_t))(v111 + 32))(v115, v40, v112);
      id v67 = (char *)v62 + *(int *)(v58 + 28);
      char v68 = v67[8];
      *uint64_t v101 = *(void *)v67;
      if (v68)
      {
        uint64_t v69 = OUTLINED_FUNCTION_9_29();
        v70(v69);
        swift_bridgeObjectRetain();
        TreeEnsembleClassifierConfiguration.classLabels.setter();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<FeatureDescription>);
        uint64_t v71 = type metadata accessor for FeatureDescription();
        OUTLINED_FUNCTION_1(v71);
        *(_OWORD *)(OUTLINED_FUNCTION_7_34() + 16) = xmmword_2272CB4D0;
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_11_29();
        FeatureType.StringParameters.init(optional:)();
        uint64_t v72 = OUTLINED_FUNCTION_5_37();
        v73(v72);
        OUTLINED_FUNCTION_4_43();
        uint64_t v122 = v28;
        uint64_t v123 = v63;
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_1_39();
        OUTLINED_FUNCTION_11_29();
        static FeatureType.dictionaryWithStringKeys(optional:)();
      }
      else
      {
        uint64_t v74 = OUTLINED_FUNCTION_9_29();
        v75(v74);
        swift_bridgeObjectRetain();
        TreeEnsembleClassifierConfiguration.classLabels.setter();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<FeatureDescription>);
        uint64_t v76 = type metadata accessor for FeatureDescription();
        OUTLINED_FUNCTION_1(v76);
        *(_OWORD *)(OUTLINED_FUNCTION_7_34() + 16) = xmmword_2272CB4D0;
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_11_29();
        FeatureType.IntParameters.init(optional:)();
        uint64_t v77 = OUTLINED_FUNCTION_5_37();
        v78(v77);
        OUTLINED_FUNCTION_4_43();
        uint64_t v122 = v28;
        uint64_t v123 = v63;
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_1_39();
        OUTLINED_FUNCTION_11_29();
        static FeatureType.dictionaryWithIntKeys(optional:)();
      }
      FeatureDescription.init(name:type:description:)();
      uint64_t v79 = v114;
      Model.outputs.setter();
      uint64_t v80 = v106;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v111 + 16))(v106, v115, v112);
      long long v81 = *(void (**)(uint64_t, void, uint64_t))(v116 + 104);
      v116 += 104;
      uint64_t v104 = v81;
      v81(v80, v110, v113);
      uint64_t v82 = v79;
      Model.kind.setter();
      uint64_t v83 = v105;
      Model.init()();
      Model.specificationVersion.setter();
      uint64_t v84 = swift_bridgeObjectRetain();
      uint64_t v85 = v119;
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML16ColumnDescriptorVG_20MLModelSpecification18FeatureDescriptionVs5NeverOTg503_s8d54ML22AnyTreeClassifierModelV6export16internalMetadata20h33Specification0F0VSDyS2SGz_tKFAF18jk5VAA16fG54Vcfu1_33_3fd57c9cf8bb5b882e179ce0f1f8c55eAmKTf3nnnpk_nTf1cn_n(v84);
      uint64_t v119 = v85;
      swift_bridgeObjectRelease();
      Model.inputs.setter();
      Model.outputs.getter();
      Model.outputs.setter();
      uint64_t v86 = *v96;
      uint64_t v87 = v96[1];
      swift_bridgeObjectRetain();
      Model.predictedFeatureName.setter();
      uint64_t v122 = v86;
      uint64_t v123 = v87;
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_1_39();
      Model.predictedProbabilitiesName.setter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Model>);
      uint64_t v88 = v108;
      unint64_t v89 = (*(unsigned __int8 *)(v108 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v108 + 80);
      uint64_t v90 = swift_allocObject();
      *(_OWORD *)(v90 + 16) = xmmword_2272CB370;
      uint64_t v91 = v109;
      (*(void (**)(unint64_t, char *, uint64_t))(v88 + 16))(v90 + v89, v82, v109);
      uint64_t v122 = v121;
      specialized Array.append<A>(contentsOf:)(v90);
      PipelineClassifierConfiguration.init(models:names:)();
      v104(v80, *MEMORY[0x263F53408], v113);
      Model.kind.setter();
      (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v115, v112);
      ((void (*)(char *, uint64_t))v117)(v82, v91);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v88 + 32))(v107, v83, v91);
      uint64_t v92 = v95;
      $defer #1 () in MLImageClassifier.Model.createScenePrintFeatureExtractorModel(revision:)();
      ((void (*)(char *, uint64_t))v56)(v92, v120);
    }
  }
}

void OUTLINED_FUNCTION_1_39()
{
  uint64_t v1 = 0x6C696261626F7250;
  unint64_t v2 = 0xEB00000000797469;
  String.append(_:)(*(Swift::String *)&v1);
}

uint64_t OUTLINED_FUNCTION_4_43()
{
  return FeatureDescription.init(name:type:description:)();
}

uint64_t OUTLINED_FUNCTION_5_37()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_7_34()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_9_29()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_11_29()
{
  return 0;
}

id MLBoostedTreeRegressor.model.getter()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for MLBoostedTreeRegressor() + 20));

  return v1;
}

uint64_t type metadata accessor for MLBoostedTreeRegressor()
{
  uint64_t result = type metadata singleton initialization cache for MLBoostedTreeRegressor;
  if (!type metadata singleton initialization cache for MLBoostedTreeRegressor) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void key path setter for MLBoostedTreeRegressor.model : MLBoostedTreeRegressor(id *a1)
{
  id v1 = *a1;
  MLBoostedTreeRegressor.model.setter();
}

void MLBoostedTreeRegressor.model.setter()
{
  uint64_t v2 = *(int *)(OUTLINED_FUNCTION_47_14() + 20);

  *(void *)(v1 + v2) = v0;
}

void (*MLBoostedTreeRegressor.model.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for MLBoostedTreeRegressor() + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = *(void **)(v1 + v3);
  *(void *)a1 = v4;
  id v5 = v4;
  return MLRandomForestRegressor.model.modify;
}

uint64_t MLBoostedTreeRegressor.targetColumn.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for MLBoostedTreeRegressor() + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MLBoostedTreeRegressor.targetColumn.setter(uint64_t a1, uint64_t a2)
{
  id v5 = (void *)(v2 + *(int *)(type metadata accessor for MLBoostedTreeRegressor() + 24));
  uint64_t result = swift_bridgeObjectRelease();
  *id v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*MLBoostedTreeRegressor.targetColumn.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLBoostedTreeRegressor.featureColumns.getter()
{
  type metadata accessor for MLBoostedTreeRegressor();

  return swift_bridgeObjectRetain();
}

uint64_t MLBoostedTreeRegressor.featureColumns.setter()
{
  uint64_t v2 = *(int *)(OUTLINED_FUNCTION_47_14() + 28);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v2) = v0;
  return result;
}

uint64_t (*MLBoostedTreeRegressor.featureColumns.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLBoostedTreeRegressor.modelParameters.getter()
{
  uint64_t v2 = v1 + *(int *)(OUTLINED_FUNCTION_44_13() + 32);

  return outlined init with copy of MLBoostedTreeRegressor.ModelParameters(v2, v0);
}

uint64_t outlined init with copy of MLBoostedTreeRegressor.ModelParameters(uint64_t a1, uint64_t a2)
{
  return a2;
}

id MLBoostedTreeRegressor.trainingMetrics.getter()
{
  uint64_t v0 = OUTLINED_FUNCTION_44_13();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_45_0(*(int *)(v0 + 36));

  return outlined copy of Result<_RegressorMetrics, Error>(v1, v2, v3);
}

id MLBoostedTreeRegressor.validationMetrics.getter()
{
  uint64_t v0 = OUTLINED_FUNCTION_44_13();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_45_0(*(int *)(v0 + 40));

  return outlined copy of Result<_RegressorMetrics, Error>(v1, v2, v3);
}

uint64_t static MLBoostedTreeRegressor._defaultSessionParameters.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for _defaultSessionParameters != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for MLTrainingSessionParameters();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static MLBoostedTreeRegressor._defaultSessionParameters);
  return _s8CreateML27MLTrainingSessionParametersVWOcTm_5(v3, a1, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
}

uint64_t MLBoostedTreeRegressor.init(_:targetColumn:featureColumns:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  v6[7] = a6;
  v6[4] = a3;
  v6[5] = a4;
  id v6[2] = a1;
  v6[3] = a2;
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

uint64_t MLBoostedTreeRegressor.init(_:targetColumn:featureColumns:parameters:)()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = *(void *)(v0 + 16);
  id v5 = (int *)type metadata accessor for MLBoostedTreeRegressor();
  *(void *)(v0 + 64) = v5;
  uint64_t v6 = v5[9];
  *(_DWORD *)(v0 + 96) = v6;
  uint64_t v7 = v4 + v6;
  *(void *)uint64_t v7 = 0;
  *(void *)(v7 + 8) = 0;
  *(unsigned char *)(v7 + 16) = 0;
  *(_DWORD *)(v0 + 100) = v5[10];
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  uint64_t v8 = swift_allocError();
  OUTLINED_FUNCTION_21_2(v8, v9, 0xD0000000000000C0);
  uint64_t v10 = v5[7];
  *(_DWORD *)(v0 + 104) = v10;
  *(void *)(v4 + v10) = v1;
  uint64_t v11 = (void *)(v4 + v5[6]);
  *uint64_t v11 = v3;
  v11[1] = v2;
  uint64_t v14 = (uint64_t (*)(void))((char *)&async function pointer to specialized CoreMLExportable.exportAsCoreMLModel()
                          + async function pointer to specialized CoreMLExportable.exportAsCoreMLModel());
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v12;
  void *v12 = v0;
  v12[1] = MLBoostedTreeRegressor.init(_:targetColumn:featureColumns:parameters:);
  return v14();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_60_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_2();
  id v5 = v4;
  OUTLINED_FUNCTION_7();
  void *v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_6();
  *uint64_t v8 = v7;
  *(void *)(v5 + 80) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 88) = v3;
  }
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

{
  void *v0;
  const void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  OUTLINED_FUNCTION_60_0();
  uint64_t v1 = (const void *)v0[7];
  uint64_t v2 = v0[8];
  uint64_t v4 = v0[2];
  uint64_t v3 = v0[3];
  *(void *)(v4 + *(int *)(v2 + 20)) = v0[11];
  _s8CreateML18TreeRegressorModelVWObTm_1(v3, v4, (void (*)(void))type metadata accessor for TreeRegressorModel);
  memcpy((void *)(v4 + *(int *)(v2 + 32)), v1, 0x70uLL);
  id v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v3 = v2 + *(int *)(v0 + 96);
  uint64_t v4 = v2 + *(int *)(v0 + 100);
  outlined destroy of MLBoostedTreeRegressor.ModelParameters(*(void *)(v0 + 56));
  outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData(v1, (void (*)(void))type metadata accessor for TreeRegressorModel);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Result<_RegressorMetrics, Error>(*(id *)v3, *(void *)(v3 + 8), *(unsigned char *)(v3 + 16));
  outlined consume of Result<_RegressorMetrics, Error>(*(id *)v4, *(void *)(v4 + 8), *(unsigned char *)(v4 + 16));
  OUTLINED_FUNCTION_30();
  return v5();
}

void MLBoostedTreeRegressor.init(trainingData:targetColumn:featureColumns:parameters:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v151 = v1;
  uint64_t v156 = v2;
  uint64_t v152 = v3;
  id v5 = v4;
  uint64_t v7 = v6;
  uint64_t v161 = v8;
  uint64_t v10 = v9;
  type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v154 = v11;
  uint64_t v155 = v12;
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_17_3(v13);
  uint64_t v14 = type metadata accessor for TreeRegressorModel();
  uint64_t v15 = OUTLINED_FUNCTION_1(v14);
  uint64_t v135 = v16;
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_50_0();
  uint64_t v137 = v17;
  uint64_t v136 = v18;
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_106();
  OUTLINED_FUNCTION_17_3(v20);
  uint64_t v142 = type metadata accessor for BaseTreeRegressor();
  OUTLINED_FUNCTION_0();
  uint64_t v141 = v21;
  MEMORY[0x270FA5388](v22);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_17_3(v23);
  uint64_t v139 = type metadata accessor for TreeRegressor();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v24);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_17_3(v25);
  uint64_t v145 = type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v26);
  OUTLINED_FUNCTION_33_0();
  uint64_t v146 = v27;
  uint64_t v148 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v28);
  OUTLINED_FUNCTION_49();
  uint64_t v133 = v29;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v30);
  uint64_t v134 = (char *)&v124 - v31;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v32);
  OUTLINED_FUNCTION_106();
  uint64_t v149 = v33;
  uint64_t v34 = type metadata accessor for BoostedTreeConfiguration();
  OUTLINED_FUNCTION_0();
  uint64_t v147 = v35;
  MEMORY[0x270FA5388](v36);
  OUTLINED_FUNCTION_63();
  uint64_t v38 = MEMORY[0x270FA5388](v37);
  id v40 = (char *)&v124 - v39;
  MEMORY[0x270FA5388](v38);
  unint64_t v42 = (char *)&v124 - v41;
  uint64_t v43 = type metadata accessor for MLBoostedTreeRegressor();
  uint64_t v44 = v10 + *(int *)(v43 + 36);
  *(void *)uint64_t v44 = 0;
  *(void *)(v44 + 8) = 0;
  uint64_t v153 = v44;
  *(unsigned char *)(v44 + 16) = 0;
  uint64_t v45 = *(int *)(v43 + 40);
  uint64_t v138 = v10;
  uint64_t v46 = v10 + v45;
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  swift_allocError();
  OUTLINED_FUNCTION_32_2(v47, 0xD0000000000000C0);
  *(void *)uint64_t v46 = v48;
  *(void *)(v46 + 8) = 0;
  uint64_t v150 = v46;
  *(unsigned char *)(v46 + 16) = 1;
  v49._uint64_t countAndFlagsBits = v7;
  v49._id object = v5;
  v50._uint64_t countAndFlagsBits = 0x6C6562614CLL;
  v50._id object = (void *)0xE500000000000000;
  DataFrame.validateColumnIsNumeric(_:context:)(v49, v50);
  if (v51)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of MLBoostedTreeRegressor.ModelParameters(v156);
    OUTLINED_FUNCTION_25_0();
    v52();
    uint64_t v0 = v153;
    goto LABEL_11;
  }
  uint64_t v126 = v0;
  uint64_t v127 = v40;
  uint64_t v125 = (int *)v43;
  uint64_t v128 = v7;
  unint64_t v131 = v5;
  uint64_t v151 = v42;
  uint64_t v130 = v34;
  uint64_t v53 = v152;
  if (v152)
  {
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_39_1();
    uint64_t v54 = v161;
    DataFrame.validateContainsColumns(_:context:)(v55, v56);
    OUTLINED_FUNCTION_19_25();
    if (v57)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      outlined destroy of MLBoostedTreeRegressor.ModelParameters((uint64_t)v5);
      (*(void (**)(uint64_t, uint64_t))(v155 + 8))(v161, v154);
      goto LABEL_11;
    }
    uint64_t v129 = 0;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v129 = 0;
    uint64_t v54 = v161;
    OUTLINED_FUNCTION_19_25();
  }
  outlined init with copy of MLBoostedTreeRegressor.ModelParameters((uint64_t)v5, (uint64_t)&v159);
  BoostedTreeConfiguration.init()();
  BoostedTreeConfiguration.maximumDepth.setter();
  BoostedTreeConfiguration.maximumIterations.setter();
  BoostedTreeConfiguration.minimumLossReduction.setter();
  BoostedTreeConfiguration.minimumChildWeight.setter();
  BoostedTreeConfiguration.randomSeed.setter();
  BoostedTreeConfiguration.learningRate.setter();
  BoostedTreeConfiguration.earlyStoppingIterationCount.setter();
  BoostedTreeConfiguration.rowSubsample.setter();
  BoostedTreeConfiguration.columnSubsample.setter();
  outlined destroy of MLBoostedTreeRegressor.ModelParameters((uint64_t)&v159);
  outlined init with copy of URL?((uint64_t)v5, (uint64_t)&v157, &demangling cache variable for type metadata for Any?);
  if (v158)
  {
    uint64_t v58 = v161 + *((int *)v42 + 12);
    outlined init with take of Any(&v157, &v159);
    uint64_t v59 = (uint64_t)v146;
    swift_dynamicCast();
    uint64_t v60 = v129;
    MLBoostedTreeRegressor.ModelParameters.ValidationData.generateDataFrames(trainingData:)(v161, v58, v54);
    if (v60)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of MLBoostedTreeRegressor.ModelParameters((uint64_t)v5);
      OUTLINED_FUNCTION_25_0();
      v61();
      outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData(v59, (void (*)(void))type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData);
      uint64_t v62 = OUTLINED_FUNCTION_23_15();
      v64(v62, v63);
    }
    else
    {
      uint64_t v153 = v58;
      outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData(v59, (void (*)(void))type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData);
      int v65 = v131;
      static _FeatureUtilities.selectFeaturesFromTrainingData(trainingData:targetColumn:featureColumns:)(v161, v128, v131, v53);
      uint64_t v67 = v66;
      swift_bridgeObjectRelease();
      uint64_t v68 = v147;
      uint64_t v129 = 0;
      uint64_t v69 = v130;
      (*(void (**)(char *, uint64_t, uint64_t))(v147 + 16))(v127, v43, v130);
      id v70 = v143;
      *(void *)unint64_t v143 = v128;
      *((void *)v70 + 1) = v65;
      *((void *)v70 + 2) = v67;
      *((void *)v70 + 3) = v67;
      OUTLINED_FUNCTION_52_0();
      *((void *)v70 + 4) = v72;
      *((void *)v70 + 5) = v71;
      v73(v126, v127, v69);
      uint64_t v152 = v67;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      uint64_t v74 = v140;
      BaseTreeRegressor.init(configuration:)();
      uint64_t v77 = *(void (**)(void))(v68 + 8);
      uint64_t v76 = v68 + 8;
      uint64_t v75 = v77;
      OUTLINED_FUNCTION_11_3();
      v77();
      (*(void (**)(char *, uint64_t, uint64_t))(v141 + 32))(&v70[*(int *)(v139 + 28)], v74, v142);
      uint64_t v78 = v129;
      TreeRegressor.fitted(to:validateOn:eventHandler:)();
      uint64_t v129 = v78;
      if (v78)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined destroy of MLBoostedTreeRegressor.ModelParameters(v156);
        OUTLINED_FUNCTION_25_0();
        v79();
        uint64_t v80 = outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData((uint64_t)v70, (void (*)(void))type metadata accessor for TreeRegressor);
        OUTLINED_FUNCTION_30_19(v80, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
        OUTLINED_FUNCTION_11_3();
        v75();
      }
      else
      {
        uint64_t v81 = v152;
        uint64_t v146 = v75;
        uint64_t v147 = v76;
        if ((AnalyticsReporter.init()() & 1) == 0)
        {
          uint64_t v82 = v134;
          uint64_t v83 = (uint64_t)&v134[*(int *)(v148 + 48)];
          uint64_t v84 = v154;
          uint64_t v85 = v155;
          (*(void (**)(char *, uint64_t, uint64_t))(v155 + 16))(v134, v149, v154);
          outlined init with copy of URL?(v153, v83, &demangling cache variable for type metadata for DataFrame?);
          Swift::Int v86 = DataFrame.shape.getter();
          (*(void (**)(char *, uint64_t))(v85 + 8))(v82, v84);
          v87._uint64_t countAndFlagsBits = 0xD000000000000015;
          v87._id object = (void *)0x80000002272D4D30;
          AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_boostedTreeRegressor, v87, v86);
          outlined destroy of URL?(v83, &demangling cache variable for type metadata for DataFrame?);
        }
        uint64_t v88 = v125;
        uint64_t v89 = v138;
        uint64_t v90 = (void *)(v138 + v125[6]);
        uint64_t v91 = v131;
        uint64_t v142 = (uint64_t)v90;
        *uint64_t v90 = v128;
        v90[1] = v91;
        uint64_t v92 = v156;
        uint64_t v145 = v89 + v88[8];
        outlined init with copy of MLBoostedTreeRegressor.ModelParameters(v156, v145);
        uint64_t v141 = v88[7];
        *(void *)(v89 + v141) = v81;
        uint64_t v93 = v144;
        uint64_t v94 = v137;
        _s8CreateML27MLTrainingSessionParametersVWOcTm_5(v144, v137, (void (*)(void))type metadata accessor for TreeRegressorModel);
        unint64_t v95 = (*(unsigned __int8 *)(v135 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v135 + 80);
        uint64_t v96 = swift_allocObject();
        _s8CreateML18TreeRegressorModelVWObTm_1(v94, v96 + v95, (void (*)(void))type metadata accessor for TreeRegressorModel);
        uint64_t v97 = v129;
        specialized blockAwait<A>(_:)();
        if (v97)
        {
          swift_release();
          outlined destroy of MLBoostedTreeRegressor.ModelParameters(v92);
          OUTLINED_FUNCTION_25_0();
          v99();
          outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData(v93, (void (*)(void))type metadata accessor for TreeRegressorModel);
          uint64_t v100 = outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData((uint64_t)v143, (void (*)(void))type metadata accessor for TreeRegressor);
          OUTLINED_FUNCTION_30_19(v100, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
          ((void (*)(char *, uint64_t))v146)(v151, v130);
        }
        else
        {
          uint64_t v101 = v98;
          swift_release();
          uint64_t v102 = v88[5];
          *(void *)(v89 + v102) = v101;
          _s8CreateML27MLTrainingSessionParametersVWOcTm_5(v93, v89, (void (*)(void))type metadata accessor for TreeRegressorModel);
          uint64_t v103 = v149;
          TreeRegressorModel.computeMetrics(on:)((uint64_t)&v159);
          uint64_t v129 = 0;
          uint64_t v104 = v146;
          long long v106 = v159;
          char v107 = v160;
          outlined consume of Result<_RegressorMetrics, Error>(*(id *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
          *(_OWORD *)uint64_t v0 = v106;
          *(unsigned char *)(v0 + 16) = v107;
          uint64_t v108 = v133 + *(int *)(v148 + 48);
          uint64_t v110 = v154;
          uint64_t v109 = v155;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v155 + 16))(v133, v103, v154);
          outlined init with copy of URL?(v153, v108, &demangling cache variable for type metadata for DataFrame?);
          if (__swift_getEnumTagSinglePayload(v108, 1, v110) == 1)
          {
            outlined destroy of MLBoostedTreeRegressor.ModelParameters(v156);
            uint64_t v111 = *(void (**)(void))(v109 + 8);
            OUTLINED_FUNCTION_23_1();
            v111();
            outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData(v144, (void (*)(void))type metadata accessor for TreeRegressorModel);
            outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData((uint64_t)v143, (void (*)(void))type metadata accessor for TreeRegressor);
            outlined destroy of URL?(v103, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
            uint64_t v112 = OUTLINED_FUNCTION_5_38();
            ((void (*)(uint64_t))v104)(v112);
            outlined destroy of URL?(v108, &demangling cache variable for type metadata for DataFrame?);
            OUTLINED_FUNCTION_23_1();
            v111();
            goto LABEL_12;
          }
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v109 + 32))(v132, v108, v110);
          uint64_t v113 = *(void (**)(void))(v109 + 8);
          OUTLINED_FUNCTION_23_1();
          v113();
          uint64_t v114 = v129;
          TreeRegressorModel.computeMetrics(on:)((uint64_t)&v159);
          uint64_t v129 = v114;
          uint64_t v115 = v143;
          if (!v114)
          {
            outlined destroy of MLBoostedTreeRegressor.ModelParameters(v156);
            OUTLINED_FUNCTION_23_1();
            v113();
            OUTLINED_FUNCTION_23_1();
            v113();
            outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData(v144, (void (*)(void))type metadata accessor for TreeRegressorModel);
            uint64_t v119 = outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData((uint64_t)v115, (void (*)(void))type metadata accessor for TreeRegressor);
            OUTLINED_FUNCTION_30_19(v119, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
            uint64_t v120 = OUTLINED_FUNCTION_5_38();
            ((void (*)(uint64_t))v104)(v120);
            long long v121 = v159;
            char v122 = v160;
            uint64_t v123 = v150;
            outlined consume of Result<_RegressorMetrics, Error>(*(id *)v150, *(void *)(v150 + 8), *(unsigned char *)(v150 + 16));
            *(_OWORD *)uint64_t v123 = v121;
            *(unsigned char *)(v123 + 16) = v122;
            goto LABEL_12;
          }
          outlined destroy of MLBoostedTreeRegressor.ModelParameters(v156);
          OUTLINED_FUNCTION_23_1();
          v113();
          OUTLINED_FUNCTION_23_1();
          v113();
          outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData(v144, (void (*)(void))type metadata accessor for TreeRegressorModel);
          uint64_t v116 = outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData((uint64_t)v115, (void (*)(void))type metadata accessor for TreeRegressor);
          OUTLINED_FUNCTION_30_19(v116, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
          uint64_t v117 = OUTLINED_FUNCTION_5_38();
          ((void (*)(uint64_t))v104)(v117);
          uint64_t v118 = v138;
          outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData(v138, (void (*)(void))type metadata accessor for TreeRegressorModel);
        }
        uint64_t v105 = v145;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined destroy of MLBoostedTreeRegressor.ModelParameters(v105);
      }
    }
LABEL_11:
    outlined consume of Result<_RegressorMetrics, Error>(*(id *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
    outlined consume of Result<_RegressorMetrics, Error>(*(id *)v150, *(void *)(v150 + 8), *(unsigned char *)(v150 + 16));
LABEL_12:
    OUTLINED_FUNCTION_8_1();
    return;
  }
  __break(1u);
}

uint64_t outlined destroy of MLBoostedTreeRegressor.ModelParameters(uint64_t a1)
{
  return a1;
}

uint64_t partial apply for closure #1 in MLBoostedTreeRegressor.init(trainingData:targetColumn:featureColumns:parameters:)()
{
  OUTLINED_FUNCTION_11();
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for TreeRegressorModel();
  OUTLINED_FUNCTION_39_0(v2);
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)OUTLINED_FUNCTION_7_1(v3);
  void *v4 = v5;
  v4[1] = protocol witness for SupervisedEstimator.fitted<A>(to:eventHandler:) in conformance MLImageClassifier.Classifier;
  return closure #1 in MLRandomForestRegressor.init(trainingData:targetColumn:featureColumns:parameters:)(v1);
}

uint64_t MLBoostedTreeRegressor.init(trainingData:targetColumn:featureColumns:parameters:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = type metadata accessor for DataFrame();
  uint64_t v8 = OUTLINED_FUNCTION_17(v7);
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_3_0();
  uint64_t v11 = v10 - v9;
  LOBYTE(v10) = *((unsigned char *)a1 + 8);
  uint64_t v13 = *a1;
  char v14 = v10;
  DataFrame.init(_:)((uint64_t)&v13, v11);
  outlined init with copy of MLBoostedTreeRegressor.ModelParameters(a5, (uint64_t)&v13);
  MLBoostedTreeRegressor.init(trainingData:targetColumn:featureColumns:parameters:)();
  return outlined destroy of MLBoostedTreeRegressor.ModelParameters(a5);
}

void MLBoostedTreeRegressor.init(checkpoint:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v78 = v1;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v66 = type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_49();
  uint64_t v65 = v7;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_106();
  uint64_t v67 = v9;
  uint64_t v10 = type metadata accessor for TreeRegressorModel();
  uint64_t v11 = OUTLINED_FUNCTION_1(v10);
  uint64_t v70 = v12;
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_50_0();
  uint64_t v71 = v14;
  uint64_t v72 = v13;
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_106();
  uint64_t v79 = v16;
  type metadata accessor for BaseTreeRegressor();
  OUTLINED_FUNCTION_0();
  uint64_t v76 = v18;
  uint64_t v77 = v17;
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_33_0();
  uint64_t v75 = v19;
  uint64_t v74 = type metadata accessor for BoostedTreeConfiguration();
  OUTLINED_FUNCTION_0();
  uint64_t v21 = v20;
  uint64_t v23 = MEMORY[0x270FA5388](v22);
  uint64_t v25 = (char *)&v64 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  uint64_t v27 = (char *)&v64 - v26;
  uint64_t v73 = type metadata accessor for TreeRegressor();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v28);
  OUTLINED_FUNCTION_30_2();
  uint64_t v29 = type metadata accessor for MLBoostedTreeRegressor();
  uint64_t v30 = v5 + *(int *)(v29 + 36);
  *(void *)uint64_t v30 = 0;
  *(void *)(v30 + 8) = 0;
  *(unsigned char *)(v30 + 16) = 0;
  uint64_t v68 = v5;
  uint64_t v69 = v29;
  uint64_t v31 = v5 + *(int *)(v29 + 40);
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  uint64_t v32 = swift_allocError();
  OUTLINED_FUNCTION_21_2(v32, v33, 0xD0000000000000C0);
  uint64_t v81 = v3;
  switch(*(unsigned char *)(v3 + *(int *)(type metadata accessor for MLCheckpoint() + 20)))
  {
    case 2:
      swift_bridgeObjectRelease();
      goto LABEL_4;
    default:
      char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v34)
      {
LABEL_4:
        BoostedTreeConfiguration.init()();
        uint64_t v35 = MEMORY[0x263F8EE78];
        *(void *)uint64_t v0 = 0;
        *((void *)v0 + 1) = 0xE000000000000000;
        *((void *)v0 + 2) = v35;
        *((void *)v0 + 3) = v35;
        OUTLINED_FUNCTION_52_0();
        *((void *)v0 + 4) = v37;
        *((void *)v0 + 5) = v36;
        uint64_t v38 = v74;
        (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v25, v27, v74);
        uint64_t v39 = v75;
        BaseTreeRegressor.init(configuration:)();
        (*(void (**)(char *, uint64_t))(v21 + 8))(v27, v38);
        (*(void (**)(char *, uint64_t, uint64_t))(v76 + 32))(&v0[*(int *)(v73 + 28)], v39, v77);
        lazy protocol witness table accessor for type TreeRegressor and conformance TreeRegressor();
        uint64_t v40 = v78;
        uint64_t v41 = v79;
        UpdatableSupervisedTabularEstimator.readWithOptimizer(from:)();
        if (!v40)
        {
          uint64_t v43 = v72;
          _s8CreateML27MLTrainingSessionParametersVWOcTm_5(v41, v72, (void (*)(void))type metadata accessor for TreeRegressorModel);
          unint64_t v44 = (*(unsigned __int8 *)(v70 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80);
          uint64_t v45 = swift_allocObject();
          _s8CreateML18TreeRegressorModelVWObTm_1(v43, v45 + v44, (void (*)(void))type metadata accessor for TreeRegressorModel);
          specialized blockAwait<A>(_:)();
          uint64_t v47 = v46;
          swift_release();
          uint64_t v50 = v68;
          uint64_t v51 = v69;
          *(void *)(v68 + *(int *)(v69 + 20)) = v47;
          _s8CreateML27MLTrainingSessionParametersVWOcTm_5(v41, v50, (void (*)(void))type metadata accessor for TreeRegressorModel);
          uint64_t v53 = v66;
          uint64_t v52 = (uint64_t)v67;
          void *v67 = 0;
          *(void *)(v52 + 8) = 0;
          *(_WORD *)(v52 + 16) = 256;
          swift_storeEnumTagMultiPayload();
          uint64_t v54 = v50 + *(int *)(v51 + 32);
          *(_OWORD *)uint64_t v54 = 0u;
          *(_OWORD *)(v54 + 16) = 0u;
          *(_OWORD *)(v54 + 32) = xmmword_2272CB8C0;
          *(_OWORD *)(v54 + 48) = xmmword_2272CB8D0;
          *(void *)(v54 + 64) = 42;
          *(void *)(v54 + 72) = 0x3FD3333333333333;
          *(void *)(v54 + 80) = 0;
          *(unsigned char *)(v54 + 88) = 1;
          __asm { FMOV            V0.2D, #1.0 }
          *(_OWORD *)(v54 + 96) = _Q0;
          uint64_t v60 = v65;
          _s8CreateML27MLTrainingSessionParametersVWOcTm_5(v52, v65, (void (*)(void))type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData);
          v80[3] = v53;
          boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v80);
          _s8CreateML18TreeRegressorModelVWObTm_1(v60, (uint64_t)boxed_opaque_existential_0, (void (*)(void))type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData);
          outlined assign with take of Any?((uint64_t)v80, v54);
          outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData(v52, (void (*)(void))type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData);
          uint64_t v62 = v69;
          uint64_t v63 = (void *)(v50 + *(int *)(v69 + 24));
          *uint64_t v63 = 0;
          v63[1] = 0xE000000000000000;
          outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData(v81, (void (*)(void))type metadata accessor for MLCheckpoint);
          outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData(v41, (void (*)(void))type metadata accessor for TreeRegressorModel);
          outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData((uint64_t)v0, (void (*)(void))type metadata accessor for TreeRegressor);
          *(void *)(v50 + *(int *)(v62 + 28)) = MEMORY[0x263F8EE78];
          goto LABEL_9;
        }
        outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData(v81, (void (*)(void))type metadata accessor for MLCheckpoint);
        uint64_t v48 = type metadata accessor for TreeRegressor;
        uint64_t v49 = (uint64_t)v0;
      }
      else
      {
        swift_allocError();
        OUTLINED_FUNCTION_32_2(v42, 0xD000000000000041);
        swift_willThrow();
        uint64_t v48 = type metadata accessor for MLCheckpoint;
        uint64_t v49 = v81;
      }
      outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData(v49, (void (*)(void))v48);
      outlined consume of Result<_RegressorMetrics, Error>(*(id *)v30, *(void *)(v30 + 8), *(unsigned char *)(v30 + 16));
      outlined consume of Result<_RegressorMetrics, Error>(*(id *)v31, *(void *)(v31 + 8), *(unsigned char *)(v31 + 16));
LABEL_9:
      OUTLINED_FUNCTION_8_1();
      return;
  }
}

void static MLBoostedTreeRegressor.train(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_42_0();
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_41_1();
  char v4 = *(unsigned char *)(v2 + 8);
  id v6 = *(id *)v2;
  char v7 = v4;
  outlined copy of Result<_DataTable, Error>(v6, v4);
  DataFrame.init(_:)((uint64_t)&v6, v1);
  static MLBoostedTreeRegressor.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)();
  OUTLINED_FUNCTION_11_3();
  v5();
  if (!v0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLBoostedTreeRegressor>);
    OUTLINED_FUNCTION_31_0();
    specialized MLJob.init(_:)();
  }
  OUTLINED_FUNCTION_8_1();
}

{
  uint64_t v0;

  static MLBoostedTreeRegressor.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)();
  if (!v0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLBoostedTreeRegressor>);
    OUTLINED_FUNCTION_31_0();
    specialized MLJob.init(_:)();
  }
}

void static MLBoostedTreeRegressor.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v2 = OUTLINED_FUNCTION_42_0();
  OUTLINED_FUNCTION_0();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_15();
  char v6 = *(unsigned char *)(v1 + 8);
  id v7 = *(id *)v1;
  char v8 = v6;
  outlined copy of Result<_DataTable, Error>(v7, v6);
  DataFrame.init(_:)((uint64_t)&v7, v0);
  static MLBoostedTreeRegressor.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0, v2);
  OUTLINED_FUNCTION_8_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(void);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(void);
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(void);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  long long v57;
  uint64_t v58;
  _UNKNOWN **v59;
  long long v60;
  uint64_t v61;
  uint64_t v62;

  OUTLINED_FUNCTION_9_0();
  Swift::OpaquePointer v55 = v2;
  Swift::String v56 = v3;
  uint64_t v5 = v4;
  uint64_t v54 = v6;
  uint64_t v53 = v7;
  uint64_t v9 = v8;
  uint64_t v10 = type metadata accessor for MLTrainingSessionParameters();
  uint64_t v11 = OUTLINED_FUNCTION_17(v10);
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_49();
  uint64_t v50 = v12;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_106();
  uint64_t v52 = v14;
  uint64_t v15 = type metadata accessor for BoostedTreeConfiguration();
  uint64_t v16 = OUTLINED_FUNCTION_17(v15);
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_41_1();
  type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_15();
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_49();
  uint64_t v62 = v20;
  OUTLINED_FUNCTION_20_3();
  uint64_t v22 = MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v44 - v23;
  MEMORY[0x270FA5388](v22);
  uint64_t v26 = (char *)&v44 - v25;
  uint64_t v51 = v5;
  outlined init with copy of URL?(v5, (uint64_t)&v60, &demangling cache variable for type metadata for Any?);
  if (v61)
  {
    uint64_t v27 = (uint64_t)&v26[*(int *)(v18 + 48)];
    outlined init with take of Any(&v60, &v57);
    swift_dynamicCast();
    MLBoostedTreeRegressor.ModelParameters.ValidationData.generateDataFrames(trainingData:)((uint64_t)v26, v27, v9);
    outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData(v0, (void (*)(void))type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData);
    if (!v1)
    {
      uint64_t v28 = (uint64_t)&v24[*(int *)(v18 + 48)];
      uint64_t v46 = v24;
      type metadata accessor for DataFrame();
      OUTLINED_FUNCTION_0();
      uint64_t v48 = v29;
      uint64_t v47 = 0;
      uint64_t v31 = *(void (**)(void))(v30 + 16);
      OUTLINED_FUNCTION_51_0();
      v31();
      uint64_t v49 = v28;
      outlined init with copy of URL?(v27, v28, &demangling cache variable for type metadata for DataFrame?);
      uint64_t v45 = v62 + *(int *)(v18 + 48);
      uint64_t v32 = v45;
      OUTLINED_FUNCTION_51_0();
      v31();
      outlined init with copy of URL?(v27, v32, &demangling cache variable for type metadata for DataFrame?);
      outlined init with copy of MLBoostedTreeRegressor.ModelParameters(v51, (uint64_t)&v57);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      BoostedTreeConfiguration.init()();
      BoostedTreeConfiguration.maximumDepth.setter();
      BoostedTreeConfiguration.maximumIterations.setter();
      BoostedTreeConfiguration.minimumLossReduction.setter();
      BoostedTreeConfiguration.minimumChildWeight.setter();
      BoostedTreeConfiguration.randomSeed.setter();
      BoostedTreeConfiguration.learningRate.setter();
      BoostedTreeConfiguration.earlyStoppingIterationCount.setter();
      BoostedTreeConfiguration.rowSubsample.setter();
      BoostedTreeConfiguration.columnSubsample.setter();
      outlined destroy of MLBoostedTreeRegressor.ModelParameters((uint64_t)&v57);
      uint64_t v33 = v56;
      _s8CreateML27MLTrainingSessionParametersVWOcTm_5(v56, v52, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
      char v34 = type metadata accessor for TreeRegressorTrainingSessionDelegate();
      OUTLINED_FUNCTION_31_0();
      uint64_t v35 = v47;
      TreeRegressorTrainingSessionDelegate.init(trainingData:validationData:targetColumn:featureColumns:configuration:sessionParameters:)();
      if (v35)
      {
        outlined destroy of URL?((uint64_t)v26, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
        OUTLINED_FUNCTION_25_0();
        uint64_t v38 = v37();
        OUTLINED_FUNCTION_30_19(v38, &demangling cache variable for type metadata for DataFrame?);
      }
      else
      {
        uint64_t v39 = v36;
        OUTLINED_FUNCTION_25_0();
        uint64_t v41 = v40();
        OUTLINED_FUNCTION_30_19(v41, &demangling cache variable for type metadata for DataFrame?);
        uint64_t v58 = v34;
        uint64_t v59 = &protocol witness table for TreeRegressorTrainingSessionDelegate;
        *(void *)&uint64_t v57 = v39;
        uint64_t v42 = v33;
        uint64_t v43 = v50;
        _s8CreateML27MLTrainingSessionParametersVWOcTm_5(v42, v50, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLBoostedTreeRegressor>);
        OUTLINED_FUNCTION_31_0();
        swift_retain();
        specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)&v57, v43, 4);
        outlined destroy of URL?((uint64_t)v26, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
        swift_release();
      }
    }
    OUTLINED_FUNCTION_8_1();
  }
  else
  {
    __break(1u);
  }
}

uint64_t static MLBoostedTreeRegressor.resume(_:)()
{
  return specialized MLJob.init(_:)();
}

void static MLBoostedTreeRegressor.restoreTrainingSession(sessionParameters:)(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for MLTrainingSessionParameters();
  uint64_t v5 = OUTLINED_FUNCTION_17(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_63();
  MEMORY[0x270FA5388](v6);
  char v8 = (char *)&v12[-1] - v7;
  _s8CreateML27MLTrainingSessionParametersVWOcTm_5(a1, (uint64_t)&v12[-1] - v7, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
  uint64_t v9 = type metadata accessor for TreeRegressorTrainingSessionDelegate();
  OUTLINED_FUNCTION_31_0();
  uint64_t v10 = TreeRegressorTrainingSessionDelegate.init(sessionParameters:)((uint64_t)v8);
  if (!v2)
  {
    v12[3] = v9;
    v12[4] = &protocol witness table for TreeRegressorTrainingSessionDelegate;
    v12[0] = v10;
    _s8CreateML27MLTrainingSessionParametersVWOcTm_5(a1, v1, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLBoostedTreeRegressor>);
    OUTLINED_FUNCTION_31_0();
    specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)v12, v1, 4);
  }
}

uint64_t closure #1 in closure #1 in static MLBoostedTreeRegressor.resume(_:)(void *a1, char a2, uint64_t a3, void (*a4)(void *), uint64_t a5)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLBoostedTreeRegressor, Error>);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = &v24[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  uint64_t v14 = OUTLINED_FUNCTION_17(v13);
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_3_0();
  uint64_t v17 = v16 - v15;
  if (a2)
  {
    void *v12 = a1;
    swift_storeEnumTagMultiPayload();
    id v22 = a1;
    a4(v12);
    return outlined destroy of URL?((uint64_t)v12, &demangling cache variable for type metadata for Result<MLBoostedTreeRegressor, Error>);
  }
  else
  {
    outlined init with copy of TrainingSessionDelegate(a3 + direct field offset for MLTrainingSession.delegate, (uint64_t)v24);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingSessionDelegate);
    type metadata accessor for TreeRegressorTrainingSessionDelegate();
    swift_dynamicCast();
    uint64_t v18 = v23;
    uint64_t v19 = type metadata accessor for TaskPriority();
    __swift_storeEnumTagSinglePayload(v17, 1, 1, v19);
    uint64_t v20 = (void *)swift_allocObject();
    v20[2] = 0;
    v20[3] = 0;
    v20[4] = v18;
    v20[5] = a4;
    v20[6] = a5;
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v17, (uint64_t)&async function pointer to partial apply for closure #1 in static MLBoostedTreeRegressor.handleResult(_:session:fulfill:), (uint64_t)v20);
    return swift_release();
  }
}

uint64_t closure #1 in static MLBoostedTreeRegressor.handleResult(_:session:fulfill:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  id v6[2] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLBoostedTreeRegressor, Error>);
  v6[5] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in static MLBoostedTreeRegressor.handleResult(_:session:fulfill:), 0, 0);
}

uint64_t closure #1 in static MLBoostedTreeRegressor.handleResult(_:session:fulfill:)()
{
  OUTLINED_FUNCTION_11();
  uint64_t v3 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized Result<>.init(catching:)
                             + async function pointer to specialized Result<>.init(catching:));
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in static MLBoostedTreeRegressor.handleResult(_:session:fulfill:);
  return v3();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_6();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_11();
  uint64_t v1 = *(void *)(v0 + 40);
  (*(void (**)(uint64_t))(v0 + 24))(v1);
  outlined destroy of URL?(v1, &demangling cache variable for type metadata for Result<MLBoostedTreeRegressor, Error>);
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  return v2();
}

uint64_t MLBoostedTreeRegressor.init(delegate:)()
{
  OUTLINED_FUNCTION_11();
  v0[36] = v1;
  v0[37] = v2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TreeRegressorModel?);
  OUTLINED_FUNCTION_17(v3);
  v0[38] = OUTLINED_FUNCTION_5();
  uint64_t v4 = type metadata accessor for MLBoostedTreeRegressor();
  v0[39] = v4;
  OUTLINED_FUNCTION_17(v4);
  v0[40] = OUTLINED_FUNCTION_5();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  OUTLINED_FUNCTION_17(v5);
  v0[41] = OUTLINED_FUNCTION_5();
  uint64_t v6 = type metadata accessor for BoostedTreeConfiguration();
  v0[42] = v6;
  OUTLINED_FUNCTION_1(v6);
  v0[43] = v7;
  v0[44] = OUTLINED_FUNCTION_5();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  OUTLINED_FUNCTION_17(v8);
  v0[45] = OUTLINED_FUNCTION_5();
  uint64_t v9 = type metadata accessor for PersistentParametersForTreeBasedMethods();
  v0[46] = v9;
  OUTLINED_FUNCTION_17(v9);
  v0[47] = OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v10, v11, v12);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  uint64_t v1 = v0[45];
  uint64_t v2 = v0[46];
  uint64_t v3 = v0[37] + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingParameters;
  swift_beginAccess();
  outlined init with copy of URL?(v3, v1, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  uint64_t result = __swift_getEnumTagSinglePayload(v1, 1, v2);
  if (result == 1)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v6 = (int *)v0[46];
  uint64_t v5 = v0[47];
  uint64_t v7 = v0[44];
  uint64_t v8 = v0[42];
  uint64_t v9 = v0[43];
  uint64_t v10 = v0[41];
  uint64_t v12 = v0[37];
  uint64_t v11 = v0[38];
  _s8CreateML18TreeRegressorModelVWObTm_1(v0[45], v5, (void (*)(void))type metadata accessor for PersistentParametersForTreeBasedMethods);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v7, v5 + v6[8], v8);
  outlined init with copy of URL?(v5 + v6[5], v10, &demangling cache variable for type metadata for DataFrame?);
  MLBoostedTreeRegressor.ModelParameters.init(configuration:validation:)(v7, v10, (uint64_t)(v0 + 2));
  uint64_t v13 = (uint64_t *)(v5 + v6[6]);
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  uint64_t v16 = *(void *)(v5 + v6[7]);
  uint64_t v17 = v12 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_model;
  swift_beginAccess();
  outlined init with copy of URL?(v17, v11, &demangling cache variable for type metadata for TreeRegressorModel?);
  uint64_t v18 = type metadata accessor for TreeRegressorModel();
  uint64_t result = __swift_getEnumTagSinglePayload(v11, 1, v18);
  if (result == 1)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  outlined init with copy of MLBoostedTreeRegressor.ModelParameters((uint64_t)(v0 + 2), (uint64_t)(v0 + 16));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v19 = (void *)swift_task_alloc();
  v0[48] = v19;
  char *v19 = v0;
  v19[1] = MLBoostedTreeRegressor.init(delegate:);
  uint64_t v20 = v0[40];
  uint64_t v21 = v0[38];
  return MLBoostedTreeRegressor.init(_:targetColumn:featureColumns:parameters:)(v20, v21, v15, v14, v16, (uint64_t)(v0 + 16));
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_6();
  *uint64_t v5 = v4;
  *(void *)(v6 + 392) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  void *v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  int v15;
  uint64_t v16;
  uint64_t (*v17)(void);
  uint64_t v18;

  uint64_t v1 = v0[37];
  uint64_t result = _s8CreateML18TreeRegressorModelVWObTm_1(v0[40], v0[36], (void (*)(void))type metadata accessor for MLBoostedTreeRegressor);
  uint64_t v3 = v1 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingMetrics;
  uint64_t v4 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingMetrics + 16);
  if (v4 == 255)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = v0[47];
    uint64_t v6 = v0[39];
    uint64_t v8 = v0[36];
    uint64_t v7 = v0[37];
    uint64_t v9 = v4 & 1;
    uint64_t v11 = *(id *)v3;
    uint64_t v10 = *(void *)(v3 + 8);
    outlined copy of Result<_RegressorMetrics, Error>(*(id *)v3, v10, v4 & 1);
    outlined destroy of MLBoostedTreeRegressor.ModelParameters((uint64_t)(v0 + 2));
    outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData(v5, (void (*)(void))type metadata accessor for PersistentParametersForTreeBasedMethods);
    uint64_t v12 = v8 + *(int *)(v6 + 36);
    outlined consume of Result<_RegressorMetrics, Error>(*(id *)v12, *(void *)(v12 + 8), *(unsigned char *)(v12 + 16));
    *(void *)uint64_t v12 = v11;
    *(void *)(v12 + 8) = v10;
    *(unsigned char *)(v12 + 16) = v9;
    uint64_t v14 = *(void **)(v7 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics);
    uint64_t v13 = *(void *)(v7 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics + 8);
    uint64_t v15 = *(unsigned __int8 *)(v7
                             + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics
                             + 16);
    outlined copy of MLRegressorMetrics?(v14, v13, *(unsigned char *)(v7 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics + 16));
    swift_release();
    if (v15 != 255)
    {
      uint64_t v16 = v0[36] + *(int *)(v0[39] + 40);
      outlined consume of Result<_RegressorMetrics, Error>(*(id *)v16, *(void *)(v16 + 8), *(unsigned char *)(v16 + 16));
      *(void *)uint64_t v16 = v14;
      *(void *)(v16 + 8) = v13;
      *(unsigned char *)(v16 + 16) = v15 & 1;
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v17 = (uint64_t (*)(void))v0[1];
    return v17();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 376);
  swift_release();
  outlined destroy of MLBoostedTreeRegressor.ModelParameters(v0 + 16);
  outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData(v1, (void (*)(void))type metadata accessor for PersistentParametersForTreeBasedMethods);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  return v2();
}

void MLBoostedTreeRegressor.predictions(from:)()
{
  uint64_t v2 = type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_31_1();
  type metadata accessor for MLBoostedTreeRegressor();
  OUTLINED_FUNCTION_39_1();
  DataFrame.validateContainsColumns(_:context:)(v6, v7);
  if (!v8)
  {
    OUTLINED_FUNCTION_14();
    TreeRegressorModel.applied(to:eventHandler:)();
    MEMORY[0x22A672220](*v0, v0[1]);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v2);
  }
}

uint64_t MLBoostedTreeRegressor.predictions(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_31_1();
  uint64_t v7 = type metadata accessor for AnyColumn();
  uint64_t v8 = OUTLINED_FUNCTION_17(v7);
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_3_0();
  uint64_t v11 = v10 - v9;
  char v12 = *(unsigned char *)(a1 + 8);
  id v16 = *(id *)a1;
  char v17 = v12;
  outlined copy of Result<_DataTable, Error>(v16, v12);
  DataFrame.init(_:)((uint64_t)&v16, v3);
  MLBoostedTreeRegressor.predictions(from:)();
  uint64_t v13 = OUTLINED_FUNCTION_47_0();
  if (v2) {
    return v14(v13);
  }
  v14(v13);
  return MLUntypedColumn.init(_:convertArraysToShapedArrays:)(v11, 1, a2);
}

void MLBoostedTreeRegressor.evaluation(on:)()
{
  uint64_t v2 = OUTLINED_FUNCTION_44_13();
  OUTLINED_FUNCTION_39_1();
  DataFrame.validateContainsColumns(_:context:)(v3, v4);
  if (v5) {
    goto LABEL_4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2272CB370;
  uint64_t v7 = (void *)(v1 + *(int *)(v2 + 24));
  uint64_t v8 = v7[1];
  *(void *)(inited + 32) = *v7;
  *(void *)(inited + 40) = v8;
  swift_bridgeObjectRetain();
  v9._uint64_t countAndFlagsBits = 0x6C6562614CLL;
  v9._id object = (void *)0xE500000000000000;
  DataFrame.validateContainsColumns(_:context:)((Swift::OpaquePointer)inited, v9);
  swift_setDeallocating();
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  if (v5)
  {
LABEL_4:
    *(void *)uint64_t v0 = v5;
    *(void *)(v0 + 8) = 0;
    *(unsigned char *)(v0 + 16) = 1;
  }
  else
  {
    TreeRegressorModel.computeMetrics(on:)(v0);
  }
}

uint64_t MLBoostedTreeRegressor.evaluation(on:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_3_0();
  uint64_t v8 = v7 - v6;
  char v9 = *(unsigned char *)(a1 + 8);
  id v11 = *(id *)a1;
  char v12 = v9;
  outlined copy of Result<_DataTable, Error>(v11, v9);
  DataFrame.init(_:)((uint64_t)&v11, v8);
  MLBoostedTreeRegressor.evaluation(on:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v8, v2);
}

void MLBoostedTreeRegressor.write(to:metadata:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = v3;
  uint64_t v37 = v5;
  uint64_t v6 = type metadata accessor for TreeRegressorModel();
  uint64_t v7 = OUTLINED_FUNCTION_17(v6);
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_33_0();
  uint64_t v36 = v8;
  uint64_t v31 = type metadata accessor for Model();
  OUTLINED_FUNCTION_0();
  uint64_t v35 = v9;
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_30_2();
  type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_10();
  uint64_t v32 = v4[1];
  unint64_t v12 = v4[3];
  unint64_t v33 = v4[2];
  uint64_t v34 = *v4;
  uint64_t v13 = v4[4];
  uint64_t v14 = v4[5];
  uint64_t v15 = v4[6];
  unint64_t v16 = v4[7];
  uint64_t v17 = v4[8];
  static _ValidationUtilities.validateWriteLocation(atURL:defaultName:fileExtension:)(v37, 0xD000000000000014, (void *)0x80000002272D91F0, 0x6C65646F6D6C6DLL, (void *)0xE700000000000000, v0);
  if (!v2)
  {
    unint64_t v29 = v16;
    uint64_t v30 = v13;
    _s8CreateML27MLTrainingSessionParametersVWOcTm_5(v1, v36, (void (*)(void))type metadata accessor for TreeRegressorModel);
    if (v32)
    {
      uint64_t v18 = v34;
      uint64_t v19 = v34;
      uint64_t v20 = v32;
      unint64_t v21 = v33;
      uint64_t v22 = v30;
      uint64_t v23 = v14;
      uint64_t v24 = v15;
      unint64_t v25 = v29;
    }
    else
    {
      uint64_t v26 = NSFullUserName();
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v20 = v27;

      uint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v17 = 0;
      unint64_t v21 = 0xD000000000000033;
      unint64_t v12 = 0x80000002272D4DC0;
      unint64_t v25 = 0xE100000000000000;
      uint64_t v24 = 49;
      uint64_t v18 = v34;
    }
    v38[0] = v19;
    v38[1] = v20;
    v38[2] = v21;
    v38[3] = v12;
    v38[4] = v22;
    v38[5] = v23;
    v38[6] = v24;
    v38[7] = v25;
    v38[8] = v17;
    outlined copy of MLModelMetadata?(v18, v32);
    specialized CoreMLExportable.export(metadata:)(v38);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData(v36, (void (*)(void))type metadata accessor for TreeRegressorModel);
    Model.write(to:)();
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v1, v31);
    OUTLINED_FUNCTION_25_0();
    v28();
  }
  OUTLINED_FUNCTION_8_1();
}

void MLBoostedTreeRegressor.write(toFile:metadata:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v1 = type metadata accessor for URL.DirectoryHint();
  OUTLINED_FUNCTION_0();
  uint64_t v3 = v2;
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_3_0();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v9 = OUTLINED_FUNCTION_17(v8);
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_10();
  uint64_t v10 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_3_0();
  __swift_storeEnumTagSinglePayload(v0, 1, 1, v10);
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v7, *MEMORY[0x263F06E50], v1);
  swift_bridgeObjectRetain();
  URL.init(filePath:directoryHint:relativeTo:)();
  MLBoostedTreeRegressor.write(to:metadata:)();
  OUTLINED_FUNCTION_11_3();
  v12();
  OUTLINED_FUNCTION_8_1();
}

unint64_t MLBoostedTreeRegressor.debugDescription.getter()
{
  uint64_t v1 = type metadata accessor for MLBoostedTreeRegressor();
  uint64_t v2 = MLBoostedTreeRegressor.ModelParameters.description.getter();
  uint64_t v4 = v3;
  unint64_t v5 = MLRegressorMetrics.description.getter();
  uint64_t v7 = v6;
  char v8 = *(unsigned char *)(v0 + *(int *)(v1 + 40) + 16);
  unint64_t v9 = MLRegressorMetrics.description.getter();
  uint64_t v11 = v10;
  v12._uint64_t countAndFlagsBits = v2;
  v12._id object = v4;
  String.append(_:)(v12);
  v13._uint64_t countAndFlagsBits = v5;
  v13._id object = v7;
  String.append(_:)(v13);
  v14._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  v14._id object = (void *)0x80000002272D3FE0;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  if ((v8 & 1) == 0)
  {
    v15._uint64_t countAndFlagsBits = v9;
    v15._id object = v11;
    String.append(_:)(v15);
    v16._uint64_t countAndFlagsBits = 0xD000000000000020;
    v16._id object = (void *)0x80000002272D4000;
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0xD000000000000021;
}

NSAttributedString MLBoostedTreeRegressor.playgroundDescription.getter@<X0>(NSAttributedString *a1@<X8>)
{
  unint64_t v2 = type metadata accessor for NSAttributedString();
  v3._uint64_t countAndFlagsBits = MLBoostedTreeRegressor.debugDescription.getter();
  result.super.CFDataRef isa = NSAttributedString.__allocating_init(string:)(v3).super.isa;
  a1[3].super.CFDataRef isa = (Class)v2;
  a1->super.CFDataRef isa = result.super.isa;
  return result;
}

uint64_t partial apply for closure #1 in MLBoostedTreeRegressor.init(checkpoint:)()
{
  OUTLINED_FUNCTION_11();
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for TreeRegressorModel();
  OUTLINED_FUNCTION_39_0(v2);
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)OUTLINED_FUNCTION_7_1(v3);
  void *v4 = v5;
  v4[1] = protocol witness for SupervisedEstimator.fitted<A, B>(to:validateOn:eventHandler:) in conformance MLImageClassifier.Classifier;
  return closure #1 in MLRandomForestRegressor.init(checkpoint:)(v1);
}

uint64_t _s8CreateML27MLTrainingSessionParametersVWOcTm_5(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_8();
  uint64_t v4 = OUTLINED_FUNCTION_111();
  v5(v4);
  return a2;
}

id sub_2271B68FC@<X0>(void *a1@<X8>)
{
  id result = MLBoostedTreeRegressor.model.getter();
  *a1 = result;
  return result;
}

void *initializeBufferWithCopyOfBuffer for MLBoostedTreeRegressor(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (void *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    unint64_t v9 = a2 + 2;
    uint64_t v8 = a2[2];
    swift_bridgeObjectRetain();
    if (v8)
    {
      uint64_t v10 = a2[3];
      uint64_t v11 = a2[4];
      a1[2] = v8;
      a1[3] = v10;
      a1[4] = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *((_OWORD *)a1 + 1) = *v9;
      a1[4] = a2[4];
    }
    uint64_t v13 = *(int *)(type metadata accessor for TreeRegressorModel() + 24);
    Swift::String v14 = (char *)a1 + v13;
    Swift::String v15 = (char *)a2 + v13;
    uint64_t v16 = type metadata accessor for BaseTreeRegressorModel();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    uint64_t v17 = a3[5];
    uint64_t v18 = a3[6];
    uint64_t v19 = *(void **)((char *)a2 + v17);
    *(void *)((char *)a1 + v17) = v19;
    uint64_t v20 = (void *)((char *)a1 + v18);
    unint64_t v21 = (void *)((char *)a2 + v18);
    uint64_t v22 = *v21;
    uint64_t v23 = v21[1];
    uint64_t v24 = a3[7];
    uint64_t v25 = a3[8];
    uint64_t v26 = *(void *)((char *)a2 + v24);
    *uint64_t v20 = v22;
    v20[1] = v23;
    *(void *)((char *)a1 + v24) = v26;
    uint64_t v27 = (char *)a1 + v25;
    uint64_t v28 = (char *)a2 + v25;
    uint64_t v29 = *(void *)((char *)a2 + v25 + 24);
    id v30 = v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v29)
    {
      *((void *)v27 + 3) = v29;
      (**(void (***)(char *, char *, uint64_t))(v29 - 8))(v27, v28, v29);
    }
    else
    {
      long long v31 = *((_OWORD *)v28 + 1);
      *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
      *((_OWORD *)v27 + 1) = v31;
    }
    long long v32 = *((_OWORD *)v28 + 3);
    *((_OWORD *)v27 + 2) = *((_OWORD *)v28 + 2);
    *((_OWORD *)v27 + 3) = v32;
    *((_OWORD *)v27 + 4) = *((_OWORD *)v28 + 4);
    *((void *)v27 + 10) = *((void *)v28 + 10);
    v27[88] = v28[88];
    *((_OWORD *)v27 + 6) = *((_OWORD *)v28 + 6);
    uint64_t v33 = a3[9];
    uint64_t v34 = (char *)a1 + v33;
    uint64_t v35 = (char *)a2 + v33;
    id v36 = *(id *)v35;
    uint64_t v37 = *((void *)v35 + 1);
    char v38 = v35[16];
    outlined copy of Result<_RegressorMetrics, Error>(*(id *)v35, v37, v38);
    *(void *)uint64_t v34 = v36;
    *((void *)v34 + 1) = v37;
    v34[16] = v38;
    uint64_t v39 = a3[10];
    uint64_t v40 = (char *)a1 + v39;
    uint64_t v41 = (char *)a2 + v39;
    id v42 = *(id *)v41;
    uint64_t v43 = *((void *)v41 + 1);
    LOBYTE(v36) = v41[16];
    outlined copy of Result<_RegressorMetrics, Error>(*(id *)v41, v43, (char)v36);
    *(void *)uint64_t v40 = v42;
    *((void *)v40 + 1) = v43;
    v40[16] = (char)v36;
  }
  return a1;
}

void *initializeWithCopy for MLBoostedTreeRegressor(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v8 = a2 + 2;
  uint64_t v7 = a2[2];
  swift_bridgeObjectRetain();
  if (v7)
  {
    uint64_t v9 = a2[3];
    uint64_t v10 = a2[4];
    a1[2] = v7;
    a1[3] = v9;
    a1[4] = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *((_OWORD *)a1 + 1) = *(_OWORD *)v8;
    a1[4] = v8[2];
  }
  uint64_t v11 = *(int *)(type metadata accessor for TreeRegressorModel() + 24);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for BaseTreeRegressorModel();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  uint64_t v15 = a3[5];
  uint64_t v16 = a3[6];
  uint64_t v17 = *(void **)((char *)a2 + v15);
  *(void *)((char *)a1 + v15) = v17;
  uint64_t v18 = (void *)((char *)a1 + v16);
  uint64_t v19 = (void *)((char *)a2 + v16);
  uint64_t v20 = *v19;
  uint64_t v21 = v19[1];
  uint64_t v22 = a3[7];
  uint64_t v23 = a3[8];
  uint64_t v24 = *(void *)((char *)a2 + v22);
  void *v18 = v20;
  v18[1] = v21;
  *(void *)((char *)a1 + v22) = v24;
  uint64_t v25 = (char *)a1 + v23;
  uint64_t v26 = (char *)a2 + v23;
  uint64_t v27 = *(void *)((char *)a2 + v23 + 24);
  id v28 = v17;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v27)
  {
    *((void *)v25 + 3) = v27;
    (**(void (***)(char *, char *, uint64_t))(v27 - 8))(v25, v26, v27);
  }
  else
  {
    long long v29 = *((_OWORD *)v26 + 1);
    *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
    *((_OWORD *)v25 + 1) = v29;
  }
  long long v30 = *((_OWORD *)v26 + 3);
  *((_OWORD *)v25 + 2) = *((_OWORD *)v26 + 2);
  *((_OWORD *)v25 + 3) = v30;
  *((_OWORD *)v25 + 4) = *((_OWORD *)v26 + 4);
  *((void *)v25 + 10) = *((void *)v26 + 10);
  v25[88] = v26[88];
  *((_OWORD *)v25 + 6) = *((_OWORD *)v26 + 6);
  uint64_t v31 = a3[9];
  long long v32 = (char *)a1 + v31;
  uint64_t v33 = (char *)a2 + v31;
  id v34 = *(id *)v33;
  uint64_t v35 = *((void *)v33 + 1);
  char v36 = v33[16];
  outlined copy of Result<_RegressorMetrics, Error>(*(id *)v33, v35, v36);
  *(void *)long long v32 = v34;
  *((void *)v32 + 1) = v35;
  v32[16] = v36;
  uint64_t v37 = a3[10];
  char v38 = (char *)a1 + v37;
  uint64_t v39 = (char *)a2 + v37;
  id v40 = *(id *)v39;
  uint64_t v41 = *((void *)v39 + 1);
  LOBYTE(v34) = v39[16];
  outlined copy of Result<_RegressorMetrics, Error>(*(id *)v39, v41, (char)v34);
  *(void *)char v38 = v40;
  *((void *)v38 + 1) = v41;
  v38[16] = (char)v34;
  return a1;
}

void *assignWithCopy for MLBoostedTreeRegressor(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a1 + 2;
  uint64_t v8 = a2 + 2;
  uint64_t v7 = a2[2];
  if (a1[2])
  {
    if (v7)
    {
      a1[2] = v7;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[3] = a2[3];
      a1[4] = a2[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of URL?((uint64_t)(a1 + 2), &demangling cache variable for type metadata for FeatureVectorizer<Float>.Transformer);
      uint64_t v9 = a2[4];
      _OWORD *v6 = *v8;
      a1[4] = v9;
    }
  }
  else if (v7)
  {
    a1[2] = v7;
    a1[3] = a2[3];
    a1[4] = a2[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v10 = *v8;
    a1[4] = a2[4];
    _OWORD *v6 = v10;
  }
  uint64_t v11 = *(int *)(type metadata accessor for TreeRegressorModel() + 24);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for BaseTreeRegressorModel();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  uint64_t v15 = a3[5];
  uint64_t v16 = *(void **)((char *)a2 + v15);
  uint64_t v17 = *(void **)((char *)a1 + v15);
  *(void *)((char *)a1 + v15) = v16;
  id v18 = v16;

  uint64_t v19 = a3[6];
  uint64_t v20 = (void *)((char *)a1 + v19);
  uint64_t v21 = (void *)((char *)a2 + v19);
  *uint64_t v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v22 = a3[8];
  uint64_t v23 = (uint64_t)a1 + v22;
  uint64_t v24 = (char *)a2 + v22;
  uint64_t v25 = *(void *)((char *)a2 + v22 + 24);
  if (!*(void *)((char *)a1 + v22 + 24))
  {
    if (v25)
    {
      *(void *)(v23 + 24) = v25;
      (**(void (***)(uint64_t, char *))(v25 - 8))(v23, v24);
      goto LABEL_15;
    }
LABEL_14:
    long long v26 = *((_OWORD *)v24 + 1);
    *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
    *(_OWORD *)(v23 + 16) = v26;
    goto LABEL_15;
  }
  if (!v25)
  {
    __swift_destroy_boxed_opaque_existential_0(v23);
    goto LABEL_14;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)v23, (uint64_t *)v24);
LABEL_15:
  *(void *)(v23 + 32) = *((void *)v24 + 4);
  *(void *)(v23 + 40) = *((void *)v24 + 5);
  *(void *)(v23 + 48) = *((void *)v24 + 6);
  *(void *)(v23 + 56) = *((void *)v24 + 7);
  *(void *)(v23 + 64) = *((void *)v24 + 8);
  *(void *)(v23 + 72) = *((void *)v24 + 9);
  uint64_t v27 = *((void *)v24 + 10);
  *(unsigned char *)(v23 + 88) = v24[88];
  *(void *)(v23 + 80) = v27;
  *(void *)(v23 + 96) = *((void *)v24 + 12);
  *(void *)(v23 + 104) = *((void *)v24 + 13);
  uint64_t v28 = a3[9];
  long long v29 = (char *)a1 + v28;
  long long v30 = (char *)a2 + v28;
  id v31 = *(id *)v30;
  uint64_t v32 = *((void *)v30 + 1);
  char v33 = v30[16];
  outlined copy of Result<_RegressorMetrics, Error>(*(id *)v30, v32, v33);
  id v34 = *(void **)v29;
  uint64_t v35 = *((void *)v29 + 1);
  char v36 = v29[16];
  *(void *)long long v29 = v31;
  *((void *)v29 + 1) = v32;
  v29[16] = v33;
  outlined consume of Result<_RegressorMetrics, Error>(v34, v35, v36);
  uint64_t v37 = a3[10];
  char v38 = (char *)a1 + v37;
  uint64_t v39 = (char *)a2 + v37;
  id v40 = *(id *)v39;
  uint64_t v41 = *((void *)v39 + 1);
  LOBYTE(v31) = v39[16];
  outlined copy of Result<_RegressorMetrics, Error>(*(id *)v39, v41, (char)v31);
  id v42 = *(void **)v38;
  uint64_t v43 = *((void *)v38 + 1);
  char v44 = v38[16];
  *(void *)char v38 = v40;
  *((void *)v38 + 1) = v41;
  v38[16] = (char)v31;
  outlined consume of Result<_RegressorMetrics, Error>(v42, v43, v44);
  return a1;
}

void *assignWithTake for MLBoostedTreeRegressor(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[2];
  if (a1[2])
  {
    if (v7)
    {
      a1[2] = v7;
      swift_bridgeObjectRelease();
      uint64_t v8 = a2[4];
      a1[3] = a2[3];
      a1[4] = v8;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of URL?((uint64_t)(a1 + 2), &demangling cache variable for type metadata for FeatureVectorizer<Float>.Transformer);
  }
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  a1[4] = a2[4];
LABEL_6:
  uint64_t v9 = *(int *)(type metadata accessor for TreeRegressorModel() + 24);
  long long v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for BaseTreeRegressorModel();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  uint64_t v13 = a3[5];
  uint64_t v14 = *(void **)((char *)a1 + v13);
  *(void *)((char *)a1 + v13) = *(void *)((char *)a2 + v13);

  uint64_t v15 = a3[6];
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  *uint64_t v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_bridgeObjectRelease();
  uint64_t v20 = a3[8];
  uint64_t v21 = (char *)a1 + v20;
  if (*(void *)((char *)a1 + v20 + 24)) {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1 + v20);
  }
  long long v22 = *(_OWORD *)((char *)a2 + v20 + 16);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)((char *)a2 + v20);
  *((_OWORD *)v21 + 1) = v22;
  long long v23 = *(_OWORD *)((char *)a2 + v20 + 48);
  *((_OWORD *)v21 + 2) = *(_OWORD *)((char *)a2 + v20 + 32);
  *((_OWORD *)v21 + 3) = v23;
  *((void *)v21 + 8) = *(void *)((char *)a2 + v20 + 64);
  *((void *)v21 + 9) = *(void *)((char *)a2 + v20 + 72);
  *((void *)v21 + 10) = *(void *)((char *)a2 + v20 + 80);
  v21[88] = *((unsigned char *)a2 + v20 + 88);
  *((_OWORD *)v21 + 6) = *(_OWORD *)((char *)a2 + v20 + 96);
  uint64_t v24 = a3[9];
  uint64_t v25 = (char *)a1 + v24;
  long long v26 = (char *)a2 + v24;
  char v27 = v26[16];
  uint64_t v28 = *(void **)v25;
  uint64_t v29 = *((void *)v25 + 1);
  char v30 = v25[16];
  *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
  v25[16] = v27;
  outlined consume of Result<_RegressorMetrics, Error>(v28, v29, v30);
  uint64_t v31 = a3[10];
  uint64_t v32 = (char *)a1 + v31;
  char v33 = (char *)a2 + v31;
  char v34 = v33[16];
  uint64_t v35 = *(void **)v32;
  uint64_t v36 = *((void *)v32 + 1);
  char v37 = v32[16];
  *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
  v32[16] = v34;
  outlined consume of Result<_RegressorMetrics, Error>(v35, v36, v37);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLBoostedTreeRegressor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2271B7238);
}

uint64_t sub_2271B7238(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for TreeRegressorModel();
  OUTLINED_FUNCTION_6_1();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return __swift_getEnumTagSinglePayload(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    return (v9 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for MLBoostedTreeRegressor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2271B72D8);
}

void sub_2271B72D8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for TreeRegressorModel();
  OUTLINED_FUNCTION_6_1();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    __swift_storeEnumTagSinglePayload(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
}

uint64_t type metadata completion function for MLBoostedTreeRegressor()
{
  uint64_t result = type metadata accessor for TreeRegressorModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_2271B7428()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t partial apply for closure #1 in static MLBoostedTreeRegressor.handleResult(_:session:fulfill:)(uint64_t a1)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v7 = v1[6];
  uint64_t v8 = swift_task_alloc();
  uint64_t v9 = (void *)OUTLINED_FUNCTION_7_1(v8);
  *uint64_t v9 = v10;
  v9[1] = protocol witness for SupervisedEstimator.fitted<A, B>(to:validateOn:eventHandler:) in conformance MLImageClassifier.Classifier;
  return closure #1 in static MLBoostedTreeRegressor.handleResult(_:session:fulfill:)(a1, v3, v4, v5, v6, v7);
}

uint64_t outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_25_0();
  v3();
  return a1;
}

uint64_t _s8CreateML18TreeRegressorModelVWObTm_1(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_8();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t OUTLINED_FUNCTION_5_38()
{
  return *(void *)(v0 - 280);
}

uint64_t OUTLINED_FUNCTION_23_15()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_30_19(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(v2 - 296);
  return outlined destroy of URL?(v4, a2);
}

uint64_t OUTLINED_FUNCTION_44_13()
{
  return type metadata accessor for MLBoostedTreeRegressor();
}

uint64_t OUTLINED_FUNCTION_47_14()
{
  return type metadata accessor for MLBoostedTreeRegressor();
}

uint64_t LogisticRegressionClassifierTrainingSessionDelegate.init(sessionParameters:)(uint64_t a1)
{
  OUTLINED_FUNCTION_108_0();
  uint64_t v4 = type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters();
  OUTLINED_FUNCTION_42_5(v4);
  DataFrame.init()();
  OUTLINED_FUNCTION_108_0();
  uint64_t v5 = type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_42_5(v5);
  OUTLINED_FUNCTION_108_0();
  uint64_t v6 = type metadata accessor for MLLogisticRegressionClassifier.Classifier();
  OUTLINED_FUNCTION_42_5(v6);
  OUTLINED_FUNCTION_108_0();
  uint64_t v7 = type metadata accessor for MLLogisticRegressionClassifier.Model();
  OUTLINED_FUNCTION_42_5(v7);
  uint64_t v8 = OUTLINED_FUNCTION_108_0();
  type metadata accessor for MLClassifierMetrics(v8);
  OUTLINED_FUNCTION_67(v2);
  OUTLINED_FUNCTION_67(v1 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_validationMetrics);
  _s8CreateML30MLLogisticRegressionClassifierV5ModelVWObTm_0(a1, v1 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_sessionParameters, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
  return v1;
}

void LogisticRegressionClassifierTrainingSessionDelegate.init(trainingData:validationData:targetColumn:featureColumns:modelParameters:sessionParameters:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v80 = v1;
  uint64_t v2 = v0;
  uint64_t v78 = v3;
  uint64_t v81 = v4;
  uint64_t v79 = v5;
  Swift::String v87 = v6;
  uint64_t v84 = v7;
  uint64_t v85 = v8;
  uint64_t v10 = v9;
  OUTLINED_FUNCTION_4_12();
  uint64_t v77 = v11;
  uint64_t v12 = type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_45_2(v14);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?);
  uint64_t v16 = OUTLINED_FUNCTION_17(v15);
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_45_2(v17);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  uint64_t v19 = OUTLINED_FUNCTION_17(v18);
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_49();
  uint64_t v72 = v20;
  MEMORY[0x270FA5388](v21);
  OUTLINED_FUNCTION_45_2((uint64_t)&v69 - v22);
  uint64_t v23 = type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v25 = v24;
  MEMORY[0x270FA5388](v26);
  OUTLINED_FUNCTION_33();
  uint64_t inited = v27 - v28;
  MEMORY[0x270FA5388](v30);
  uint64_t v32 = (char *)&v69 - v31;
  uint64_t v33 = v2 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingParameters;
  uint64_t v34 = OUTLINED_FUNCTION_30_20();
  uint64_t v73 = (int *)v12;
  __swift_storeEnumTagSinglePayload(v34, v35, 1, v12);
  DataFrame.init()();
  uint64_t v83 = v23;
  __swift_storeEnumTagSinglePayload(v2 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_validationData, 1, 1, v23);
  uint64_t v36 = type metadata accessor for MLLogisticRegressionClassifier.Classifier();
  OUTLINED_FUNCTION_39_15(v36);
  uint64_t v37 = type metadata accessor for MLLogisticRegressionClassifier.Model();
  OUTLINED_FUNCTION_39_15(v37);
  uint64_t v38 = v2 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingMetrics;
  uint64_t v39 = type metadata accessor for MLClassifierMetrics(0);
  OUTLINED_FUNCTION_67(v38);
  __swift_storeEnumTagSinglePayload(v2 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_validationMetrics, 1, 1, v39);
  uint64_t v82 = v10;
  id v40 = v79;
  uint64_t v41 = v80;
  static _FeatureUtilities.selectFeaturesFromTrainingData(trainingData:targetColumn:featureColumns:)(v10, v85, v87, (uint64_t)v79);
  if (!v41)
  {
    uint64_t v71 = v42;
    uint64_t v80 = 0;
    uint64_t v69 = inited;
    uint64_t v70 = v33;
    swift_bridgeObjectRelease();
    uint64_t v48 = v76;
    outlined init with copy of MLLogisticRegressionClassifier.Classifier?(v84, v76, &demangling cache variable for type metadata for DataFrame?);
    uint64_t v46 = v83;
    OUTLINED_FUNCTION_57_4(v48, 1, v83);
    if (v49)
    {
      _s10Foundation3URLVSgWOhTm_0(v48, &demangling cache variable for type metadata for DataFrame?);
      uint64_t v50 = v81;
      uint64_t v51 = v73;
      uint64_t v62 = v25;
    }
    else
    {
      uint64_t v62 = v25;
      id v40 = v32;
      (*(void (**)(char *, uint64_t, uint64_t))(v25 + 32))(v32, v48, v46);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_2272CB370;
      uint64_t v44 = v85;
      *(void *)(inited + 32) = v85;
      *(void *)(inited + 40) = v87;
      swift_bridgeObjectRetain();
      v63._id object = (void *)0x80000002272D64D0;
      v63._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      uint64_t v79 = (char *)0x80000002272D64D0;
      DataFrame.validateContainsColumns(_:context:)((Swift::OpaquePointer)inited, v63);
      if (v64)
      {
        swift_setDeallocating();
        specialized _ContiguousArrayStorage.__deallocating_deinit();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined destroy of MLLogisticRegressionClassifier.Model(v78, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
        outlined destroy of MLLogisticRegressionClassifier.ModelParameters(v81);
        _s10Foundation3URLVSgWOhTm_0(v84, &demangling cache variable for type metadata for DataFrame?);
        uint64_t v43 = *(void (**)(void))(v62 + 8);
        OUTLINED_FUNCTION_16_26();
        v43();
        OUTLINED_FUNCTION_16_26();
        v43();
        goto LABEL_3;
      }
      swift_setDeallocating();
      specialized _ContiguousArrayStorage.__deallocating_deinit();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any.Type>);
      uint64_t inited = swift_allocObject();
      *(_OWORD *)(inited + 16) = xmmword_2272CB4D0;
      uint64_t v65 = MEMORY[0x263F8D6C8];
      *(void *)(inited + 32) = MEMORY[0x263F8D310];
      *(void *)(inited + 40) = v65;
      v66._uint64_t countAndFlagsBits = v44;
      v66._id object = v87;
      v67._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v67._id object = v79;
      DataFrame.validateColumnTypes(_:_:context:)(v66, (Swift::OpaquePointer)inited, v67);
      uint64_t v80 = v68;
      if (v68)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined destroy of MLLogisticRegressionClassifier.Model(v78, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
        outlined destroy of MLLogisticRegressionClassifier.ModelParameters(v81);
        _s10Foundation3URLVSgWOhTm_0(v84, &demangling cache variable for type metadata for DataFrame?);
        uint64_t v43 = *(void (**)(void))(v62 + 8);
        uint64_t v46 = v83;
        OUTLINED_FUNCTION_16_26();
        v43();
        OUTLINED_FUNCTION_16_26();
        v43();
        OUTLINED_FUNCTION_21_24();
        goto LABEL_4;
      }
      (*(void (**)(char *, uint64_t))(v62 + 8))(v32, v83);
      swift_bridgeObjectRelease();
      uint64_t v50 = v81;
      uint64_t v51 = v73;
    }
    uint64_t v52 = v72;
    uint64_t v53 = v69;
    uint64_t v54 = v83;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 16))(v69, v82, v83);
    uint64_t v55 = v84;
    outlined init with copy of MLLogisticRegressionClassifier.Classifier?(v84, v52, &demangling cache variable for type metadata for DataFrame?);
    outlined init with copy of MLLogisticRegressionClassifier.ModelParameters(v50, (uint64_t)v86);
    uint64_t v56 = v52;
    uint64_t v57 = v74;
    uint64_t v58 = v74 + v51[5];
    __swift_storeEnumTagSinglePayload(v58, 1, 1, v54);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 32))(v57, v53, v54);
    outlined assign with take of MLClassifierMetrics?(v56, v58, &demangling cache variable for type metadata for DataFrame?);
    uint64_t v59 = (void *)(v57 + v51[6]);
    *uint64_t v59 = v85;
    v59[1] = v87;
    *(void *)(v57 + v51[7]) = v71;
    memcpy((void *)(v57 + v51[8]), v86, 0x49uLL);
    uint64_t v60 = v75;
    _s8CreateML30MLLogisticRegressionClassifierV5ModelVWObTm_0(v57, v75, (void (*)(void))type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters);
    outlined destroy of MLLogisticRegressionClassifier.ModelParameters(v81);
    _s10Foundation3URLVSgWOhTm_0(v55, &demangling cache variable for type metadata for DataFrame?);
    (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v82, v54);
    __swift_storeEnumTagSinglePayload(v60, 0, 1, (uint64_t)v51);
    uint64_t v61 = v70;
    OUTLINED_FUNCTION_81_2();
    outlined assign with take of MLClassifierMetrics?(v60, v61, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?);
    swift_endAccess();
    _s8CreateML30MLLogisticRegressionClassifierV5ModelVWObTm_0(v78, v2 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_sessionParameters, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
    goto LABEL_9;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of MLLogisticRegressionClassifier.Model(v78, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
  outlined destroy of MLLogisticRegressionClassifier.ModelParameters(v81);
  _s10Foundation3URLVSgWOhTm_0(v84, &demangling cache variable for type metadata for DataFrame?);
  uint64_t v45 = *(void (**)(void))(v25 + 8);
  uint64_t v44 = v25 + 8;
  uint64_t v43 = v45;
  uint64_t v46 = v83;
  ((void (*)(uint64_t, uint64_t))v45)(v82, v83);
LABEL_3:
  OUTLINED_FUNCTION_21_24();
LABEL_4:
  _s10Foundation3URLVSgWOhTm_0(v2 + *(void *)(v47 + 3784), &demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?);
  ((void (*)(uint64_t, uint64_t))v43)(v2 + *((void *)v40 + 474), v46);
  _s10Foundation3URLVSgWOhTm_0(v2 + *(void *)(v44 + 3800), &demangling cache variable for type metadata for DataFrame?);
  _s10Foundation3URLVSgWOhTm_0(v2 + *(void *)(inited + 3808), &demangling cache variable for type metadata for MLLogisticRegressionClassifier.Classifier?);
  _s10Foundation3URLVSgWOhTm_0(v2 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_model, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.Model?);
  _s10Foundation3URLVSgWOhTm_0(v2 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingMetrics, &demangling cache variable for type metadata for MLClassifierMetrics?);
  _s10Foundation3URLVSgWOhTm_0(v2 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_validationMetrics, &demangling cache variable for type metadata for MLClassifierMetrics?);
  swift_deallocPartialClassInstance();
LABEL_9:
  OUTLINED_FUNCTION_8_1();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> LogisticRegressionClassifierTrainingSessionDelegate.setUp()()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v56 = type metadata accessor for BaseLogisticRegressionClassifierModel();
  OUTLINED_FUNCTION_0();
  uint64_t v55 = v3;
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_45_2(v5);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLogisticRegressionClassifier.Model?);
  uint64_t v7 = OUTLINED_FUNCTION_17(v6);
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_33_0();
  uint64_t v57 = v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyColumn?);
  uint64_t v10 = OUTLINED_FUNCTION_17(v9);
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_33_0();
  uint64_t v62 = v11;
  uint64_t v61 = type metadata accessor for AnyColumn();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLogisticRegressionClassifier.Classifier?);
  uint64_t v16 = OUTLINED_FUNCTION_17(v15);
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_49();
  uint64_t v58 = v17;
  MEMORY[0x270FA5388](v18);
  Swift::String v63 = (char *)&v54 - v19;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?);
  uint64_t v21 = OUTLINED_FUNCTION_17(v20);
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v54 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = (int *)type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v25);
  OUTLINED_FUNCTION_40_0();
  uint64_t v26 = v0 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_53();
  outlined init with copy of MLLogisticRegressionClassifier.Classifier?(v26, (uint64_t)v23, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_57_4((uint64_t)v23, 1, (uint64_t)v24);
  if (v27)
  {
    _s10Foundation3URLVSgWOhTm_0((uint64_t)v23, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?);
    __break(1u);
  }
  else
  {
    _s8CreateML30MLLogisticRegressionClassifierV5ModelVWObTm_0((uint64_t)v23, v2, (void (*)(void))type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters);
    uint64_t v28 = v0 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingData;
    OUTLINED_FUNCTION_81_2();
    uint64_t v29 = type metadata accessor for DataFrame();
    OUTLINED_FUNCTION_8();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 24))(v28, v2, v29);
    swift_endAccess();
    uint64_t v31 = v2 + v24[5];
    uint64_t v59 = v0;
    uint64_t v32 = v0 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_validationData;
    OUTLINED_FUNCTION_81_2();
    outlined assign with copy of DataFrame?(v31, v32);
    swift_endAccess();
    uint64_t v33 = (uint64_t *)(v2 + v24[6]);
    uint64_t v35 = *v33;
    uint64_t v34 = v33[1];
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v60 = v14;
    MEMORY[0x22A672220](v35, v34);
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    if (__swift_getEnumTagSinglePayload(v32, 1, v29))
    {
      swift_endAccess();
      uint64_t v36 = 1;
      uint64_t v37 = v1;
      uint64_t v38 = v62;
      uint64_t v39 = (uint64_t)v63;
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v38 = v62;
      MEMORY[0x22A672220](v35, v34);
      swift_endAccess();
      swift_bridgeObjectRelease();
      uint64_t v36 = 0;
      uint64_t v37 = v1;
      uint64_t v39 = (uint64_t)v63;
    }
    __swift_storeEnumTagSinglePayload(v38, v36, 1, v61);
    outlined init with copy of MLLogisticRegressionClassifier.ModelParameters(v2 + v24[8], (uint64_t)&v64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    MLLogisticRegressionClassifier.Classifier.init(trainingLabelsColumn:validationLabelsColumn:annotationColumnName:featureColumnNames:parameters:)();
    if (v37)
    {
      outlined destroy of MLLogisticRegressionClassifier.Model(v2, (void (*)(void))type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters);
LABEL_9:
      OUTLINED_FUNCTION_8_1();
      return;
    }
    uint64_t v40 = type metadata accessor for MLLogisticRegressionClassifier.Classifier();
    OUTLINED_FUNCTION_23_16(v39);
    uint64_t v41 = v59 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_classifier;
    OUTLINED_FUNCTION_81_2();
    outlined assign with take of MLClassifierMetrics?(v39, v41, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.Classifier?);
    swift_endAccess();
    uint64_t v42 = v41;
    uint64_t v43 = v58;
    outlined init with copy of MLLogisticRegressionClassifier.Classifier?(v42, v58, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.Classifier?);
    uint64_t v44 = OUTLINED_FUNCTION_30_20();
    OUTLINED_FUNCTION_57_4(v44, v45, v40);
    if (!v27)
    {
      uint64_t v46 = *(void *)v43;
      uint64_t v47 = *(void *)(v43 + 8);
      uint64_t v48 = *(void *)(v43 + 104);
      char v65 = *(unsigned char *)(v43 + 112);
      swift_bridgeObjectRetain();
      uint64_t v49 = v54;
      BaseLogisticRegressionClassifier.makeTransformer(classCount:)();
      uint64_t v50 = v57;
      *(void *)uint64_t v57 = v46;
      *((void *)v50 + 1) = v47;
      uint64_t v51 = type metadata accessor for MLLogisticRegressionClassifier.Model();
      *((void *)v50 + 3) = 0;
      *((void *)v50 + 4) = 0;
      *((void *)v50 + 2) = 0;
      (*(void (**)(char *, uint64_t, uint64_t))(v55 + 32))(&v50[*(int *)(v51 + 24)], v49, v56);
      uint64_t v52 = &v50[*(int *)(v51 + 28)];
      *(void *)uint64_t v52 = v48;
      v52[8] = v65;
      swift_bridgeObjectRetain();
      outlined destroy of MLLogisticRegressionClassifier.Model(v2, (void (*)(void))type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters);
      outlined destroy of MLLogisticRegressionClassifier.Model(v43, (void (*)(void))type metadata accessor for MLLogisticRegressionClassifier.Classifier);
      OUTLINED_FUNCTION_23_16((uint64_t)v50);
      uint64_t v53 = v59 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_model;
      OUTLINED_FUNCTION_81_2();
      outlined assign with take of MLClassifierMetrics?((uint64_t)v50, v53, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.Model?);
      swift_endAccess();
      goto LABEL_9;
    }
  }
  __break(1u);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> LogisticRegressionClassifierTrainingSessionDelegate.resume(from:)(Swift::OpaquePointer from)
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v60 = v3;
  uint64_t v69 = v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLogisticRegressionClassifier.Model?);
  uint64_t v8 = OUTLINED_FUNCTION_17(v7);
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_45_2(v9);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLogisticRegressionClassifier.Classifier?);
  uint64_t v11 = OUTLINED_FUNCTION_17(v10);
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_49();
  uint64_t v61 = v12;
  MEMORY[0x270FA5388](v13);
  Swift::String v66 = (char *)&v59 - v14;
  type metadata accessor for AnyColumn();
  OUTLINED_FUNCTION_0();
  uint64_t v64 = v16;
  uint64_t v65 = v15;
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_33_0();
  uint64_t v63 = v17;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  uint64_t v19 = OUTLINED_FUNCTION_17(v18);
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_24_8();
  uint64_t v20 = type metadata accessor for MLCheckpoint();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v21);
  OUTLINED_FUNCTION_33_0();
  uint64_t v67 = v22;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?);
  uint64_t v24 = OUTLINED_FUNCTION_17(v23);
  MEMORY[0x270FA5388](v24);
  OUTLINED_FUNCTION_40_0();
  uint64_t v25 = (int *)type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v26);
  OUTLINED_FUNCTION_41_1();
  uint64_t v27 = v2;
  uint64_t v28 = v2 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_53();
  outlined init with copy of MLLogisticRegressionClassifier.Classifier?(v28, v5, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_57_4(v5, 1, (uint64_t)v25);
  if (v29)
  {
    _s10Foundation3URLVSgWOhTm_0(v5, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?);
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  _s8CreateML30MLLogisticRegressionClassifierV5ModelVWObTm_0(v5, v4, (void (*)(void))type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters);
  specialized BidirectionalCollection.last.getter(v69, v1);
  OUTLINED_FUNCTION_57_4(v1, 1, v20);
  uint64_t v30 = v4;
  if (v29)
  {
    _s10Foundation3URLVSgWOhTm_0(v1, &demangling cache variable for type metadata for MLCheckpoint?);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_19_0(v31, 0xD00000000000001DLL);
LABEL_12:
    outlined destroy of MLLogisticRegressionClassifier.Model(v4, (void (*)(void))type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters);
    goto LABEL_19;
  }
  uint64_t v32 = v1;
  uint64_t v33 = v67;
  _s8CreateML30MLLogisticRegressionClassifierV5ModelVWObTm_0(v32, v67, (void (*)(void))type metadata accessor for MLCheckpoint);
  switch(*(unsigned char *)(v33 + *(int *)(v20 + 20)))
  {
    case 2:
      swift_bridgeObjectRelease();
      goto LABEL_9;
    case 4:
      OUTLINED_FUNCTION_55_0();
      goto LABEL_8;
    default:
LABEL_8:
      char v34 = OUTLINED_FUNCTION_37_5();
      swift_bridgeObjectRelease();
      if ((v34 & 1) == 0)
      {
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        OUTLINED_FUNCTION_85();
        OUTLINED_FUNCTION_19_0(v48, 0xD000000000000027);
        outlined destroy of MLLogisticRegressionClassifier.Model(v67, (void (*)(void))type metadata accessor for MLCheckpoint);
        goto LABEL_12;
      }
LABEL_9:
      uint64_t v35 = v27 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingData;
      OUTLINED_FUNCTION_81_2();
      type metadata accessor for DataFrame();
      OUTLINED_FUNCTION_8();
      (*(void (**)(uint64_t))(v36 + 24))(v35);
      swift_endAccess();
      uint64_t v37 = v4 + v25[5];
      uint64_t v38 = v27 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_validationData;
      OUTLINED_FUNCTION_81_2();
      outlined assign with copy of DataFrame?(v37, v38);
      swift_endAccess();
      uint64_t v39 = (uint64_t *)(v4 + v25[6]);
      uint64_t v40 = *v39;
      uint64_t v41 = v39[1];
      swift_beginAccess();
      swift_bridgeObjectRetain();
      uint64_t v42 = v63;
      MEMORY[0x22A672220](v40, v41);
      swift_endAccess();
      swift_bridgeObjectRelease();
      uint64_t v43 = AnyColumn.wrappedElementType.getter();
      (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v42, v65);
      if (swift_dynamicCastMetatype())
      {
        OUTLINED_FUNCTION_37_13();
        swift_bridgeObjectRetain();
        uint64_t v44 = MEMORY[0x263F8EE78];
        uint64_t v45 = (uint64_t)v66;
        uint64_t v46 = (uint64_t)v66;
        int v47 = 1;
      }
      else
      {
        if (!swift_dynamicCastMetatype())
        {
LABEL_23:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          JUMPOUT(0x2271B8D6CLL);
        }
        OUTLINED_FUNCTION_37_13();
        swift_bridgeObjectRetain();
        uint64_t v44 = MEMORY[0x263F8EE78];
        uint64_t v45 = (uint64_t)v66;
        uint64_t v46 = (uint64_t)v66;
        int v47 = 0;
      }
      MLLogisticRegressionClassifier.Classifier.init(labels:annotationColumnName:featureColumnNames:)(v44, v47, v3, v43, v42, v46);
      uint64_t v49 = type metadata accessor for MLLogisticRegressionClassifier.Classifier();
      OUTLINED_FUNCTION_23_16(v45);
      uint64_t v50 = v27 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_classifier;
      OUTLINED_FUNCTION_81_2();
      outlined assign with take of MLClassifierMetrics?(v45, v50, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.Classifier?);
      swift_endAccess();
      outlined init with copy of MLLogisticRegressionClassifier.ModelParameters(v30 + v25[8], (uint64_t)v68);
      uint64_t v51 = v27 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_classifier;
      OUTLINED_FUNCTION_81_2();
      type metadata accessor for MLLogisticRegressionClassifier.Classifier();
      OUTLINED_FUNCTION_57_4(v51, 1, v49);
      if (v29) {
        goto LABEL_21;
      }
      outlined assign with take of MLLogisticRegressionClassifier.ModelParameters((uint64_t)v68, v51 + 24);
      swift_endAccess();
      uint64_t v52 = v51;
      uint64_t v53 = v61;
      outlined init with copy of MLLogisticRegressionClassifier.Classifier?(v52, v61, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.Classifier?);
      OUTLINED_FUNCTION_57_4(v53, 1, v49);
      uint64_t v54 = v62;
      if (v29)
      {
LABEL_22:
        __break(1u);
        goto LABEL_23;
      }
      lazy protocol witness table accessor for type MLLogisticRegressionClassifier.Classifier and conformance MLLogisticRegressionClassifier.Classifier();
      uint64_t v55 = v67;
      uint64_t v56 = v60;
      SupervisedTabularEstimator.read(from:)();
      outlined destroy of MLLogisticRegressionClassifier.Model(v55, (void (*)(void))type metadata accessor for MLCheckpoint);
      outlined destroy of MLLogisticRegressionClassifier.Model(v30, (void (*)(void))type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters);
      outlined destroy of MLLogisticRegressionClassifier.Model(v53, (void (*)(void))type metadata accessor for MLLogisticRegressionClassifier.Classifier);
      if (!v56)
      {
        uint64_t v57 = type metadata accessor for MLLogisticRegressionClassifier.Model();
        __swift_storeEnumTagSinglePayload(v54, 0, 1, v57);
        uint64_t v58 = v27 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_model;
        OUTLINED_FUNCTION_81_2();
        outlined assign with take of MLClassifierMetrics?(v54, v58, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.Model?);
        swift_endAccess();
      }
LABEL_19:
      OUTLINED_FUNCTION_8_1();
      return;
  }
}

Swift::Int_optional __swiftcall LogisticRegressionClassifierTrainingSessionDelegate.itemCount(phase:)(CreateML::MLPhase phase)
{
  int v2 = *(unsigned __int8 *)phase;
  if (v2 == 2)
  {
    uint64_t v4 = v1 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_sessionParameters;
    Swift::Int v3 = *(void *)(v4 + *(int *)(type metadata accessor for MLTrainingSessionParameters() + 28));
  }
  else
  {
    Swift::Int v3 = 0;
  }
  Swift::Bool v5 = v2 != 2;
  result.value = v3;
  result.is_nil = v5;
  return result;
}

uint64_t LogisticRegressionClassifierTrainingSessionDelegate.train(from:)(uint64_t a1)
{
  v2[14] = a1;
  v2[15] = v1;
  uint64_t v3 = type metadata accessor for MetricsKey();
  v2[16] = v3;
  OUTLINED_FUNCTION_1(v3);
  v2[17] = v4;
  v2[18] = OUTLINED_FUNCTION_5();
  uint64_t v5 = type metadata accessor for DataFrame();
  v2[19] = v5;
  OUTLINED_FUNCTION_1(v5);
  v2[20] = v6;
  v2[21] = OUTLINED_FUNCTION_5();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLogisticRegressionClassifier.Classifier?);
  OUTLINED_FUNCTION_17(v7);
  v2[22] = OUTLINED_FUNCTION_5();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_17(v8);
  v2[23] = OUTLINED_FUNCTION_5();
  return MEMORY[0x270FA2498](LogisticRegressionClassifierTrainingSessionDelegate.train(from:), 0, 0);
}

uint64_t LogisticRegressionClassifierTrainingSessionDelegate.train(from:)()
{
  uint64_t v1 = v0[23];
  uint64_t v2 = v0[15] + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_53();
  outlined init with copy of MLLogisticRegressionClassifier.Classifier?(v2, v1, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?);
  uint64_t v3 = type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters();
  LODWORD(v2) = __swift_getEnumTagSinglePayload(v1, 1, v3);
  uint64_t result = _s10Foundation3URLVSgWOhTm_0(v1, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?);
  if (v2 == 1)
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v5 = v0[14];
  uint64_t v6 = v0[15] + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_sessionParameters;
  uint64_t result = type metadata accessor for MLTrainingSessionParameters();
  uint64_t v7 = *(void *)(v6 + *(int *)(result + 20));
  uint64_t v8 = v5 + v7;
  if (__OFADD__(v5, v7))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v9 = *(void *)(v6 + *(int *)(result + 28));
  if (__OFSUB__(v9, v5))
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v7 >= v9 - v5) {
    uint64_t v10 = v9 - v5;
  }
  else {
    uint64_t v10 = *(void *)(v6 + *(int *)(result + 20));
  }
  type metadata accessor for EventCollector();
  swift_allocObject();
  uint64_t result = EventCollector.init()();
  if (v10 < 0) {
    goto LABEL_23;
  }
  uint64_t v38 = v9;
  uint64_t v39 = v8;
  uint64_t v40 = v10;
  if (!v10)
  {
LABEL_13:
    uint64_t v22 = v0[17];
    uint64_t v21 = v0[18];
    uint64_t v23 = v0[16];
    static MetricsKey.trainingAccuracy.getter();
    specialized EventCollector.getLast<A>(metric:type:)();
    char v25 = v24;
    uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
    v26(v21, v23);
    uint64_t v27 = (void *)MEMORY[0x263F8EE80];
    if ((v25 & 1) == 0)
    {
      swift_isUniquelyReferenced_nonNull_native();
      double v28 = OUTLINED_FUNCTION_40_11();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(3, v29, v28);
      uint64_t v27 = v42;
      swift_bridgeObjectRelease();
    }
    uint64_t v30 = v0[18];
    uint64_t v31 = v0[16];
    static MetricsKey.trainingLoss.getter();
    specialized EventCollector.getLast<A>(metric:type:)();
    char v33 = v32;
    v26(v30, v31);
    if ((v33 & 1) == 0)
    {
      swift_isUniquelyReferenced_nonNull_native();
      double v34 = OUTLINED_FUNCTION_40_11();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0, v35, v34);
      uint64_t v27 = v42;
      swift_bridgeObjectRelease();
    }
    uint64_t v36 = specialized _dictionaryUpCast<A, B, C, D>(_:)(v27);
    swift_release();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v37 = (uint64_t (*)(uint64_t, void *, BOOL))v0[1];
    return v37(v40, v36, v39 >= v38);
  }
  uint64_t v11 = v0[20];
  uint64_t v12 = v0[15];
  uint64_t v13 = v12 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingData;
  uint64_t v14 = v12 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_model;
  uint64_t v41 = v12 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_classifier;
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_53();
  uint64_t v15 = v40;
  while (1)
  {
    uint64_t v16 = v0[22];
    outlined init with copy of MLLogisticRegressionClassifier.Classifier?(v41, v16, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.Classifier?);
    uint64_t v17 = type metadata accessor for MLLogisticRegressionClassifier.Classifier();
    uint64_t result = __swift_getEnumTagSinglePayload(v16, 1, v17);
    if (result == 1) {
      break;
    }
    (*(void (**)(void, uint64_t, void))(v11 + 16))(v0[21], v13, v0[19]);
    OUTLINED_FUNCTION_81_2();
    uint64_t v18 = type metadata accessor for MLLogisticRegressionClassifier.Model();
    uint64_t result = __swift_getEnumTagSinglePayload(v14, 1, v18);
    if (result == 1) {
      goto LABEL_25;
    }
    swift_retain();
    MLLogisticRegressionClassifier.Classifier.update(_:with:eventHandler:)();
    uint64_t v19 = v0[22];
    swift_endAccess();
    swift_release();
    OUTLINED_FUNCTION_173();
    OUTLINED_FUNCTION_10_4();
    v20();
    outlined destroy of MLLogisticRegressionClassifier.Model(v19, (void (*)(void))type metadata accessor for MLLogisticRegressionClassifier.Classifier);
    if (!--v15) {
      goto LABEL_13;
    }
  }
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

uint64_t LogisticRegressionClassifierTrainingSessionDelegate.evaluate(from:)()
{
  v1[26] = v0;
  uint64_t v2 = type metadata accessor for AnyClassificationMetrics();
  OUTLINED_FUNCTION_17(v2);
  v1[27] = OUTLINED_FUNCTION_5();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  OUTLINED_FUNCTION_17(v3);
  v1[28] = OUTLINED_FUNCTION_5();
  uint64_t v4 = type metadata accessor for AnyColumn();
  OUTLINED_FUNCTION_17(v4);
  v1[29] = swift_task_alloc();
  v1[30] = swift_task_alloc();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLClassifierMetrics?);
  OUTLINED_FUNCTION_17(v5);
  v1[31] = OUTLINED_FUNCTION_5();
  uint64_t v6 = type metadata accessor for DataFrame();
  v1[32] = v6;
  OUTLINED_FUNCTION_1(v6);
  v1[33] = v7;
  v1[34] = swift_task_alloc();
  v1[35] = swift_task_alloc();
  v1[36] = swift_task_alloc();
  v1[37] = swift_task_alloc();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLogisticRegressionClassifier.Model?);
  OUTLINED_FUNCTION_17(v8);
  v1[38] = OUTLINED_FUNCTION_5();
  uint64_t v9 = type metadata accessor for MLLogisticRegressionClassifier.Model();
  v1[39] = v9;
  OUTLINED_FUNCTION_17(v9);
  v1[40] = OUTLINED_FUNCTION_5();
  return MEMORY[0x270FA2498](LogisticRegressionClassifierTrainingSessionDelegate.evaluate(from:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(void);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int EnumTagSinglePayload;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(void);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(void);
  uint64_t v42;
  uint64_t v43;

  uint64_t v1 = v0[38];
  uint64_t v2 = v0[39];
  OUTLINED_FUNCTION_53();
  uint64_t v3 = OUTLINED_FUNCTION_173();
  outlined init with copy of MLLogisticRegressionClassifier.Classifier?(v3, v4, v5);
  if (__swift_getEnumTagSinglePayload(v1, 1, v2) == 1)
  {
    _s10Foundation3URLVSgWOhTm_0(v0[38], &demangling cache variable for type metadata for MLLogisticRegressionClassifier.Model?);
  }
  else
  {
    uint64_t v6 = v0[26];
    _s8CreateML30MLLogisticRegressionClassifierV5ModelVWObTm_0(v0[38], v0[40], (void (*)(void))type metadata accessor for MLLogisticRegressionClassifier.Model);
    uint64_t v7 = v6 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingParameters;
    OUTLINED_FUNCTION_53();
    uint64_t v8 = type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters();
    if (!__swift_getEnumTagSinglePayload(v7, 1, v8))
    {
      uint64_t v12 = v0[36];
      uint64_t v11 = v0[37];
      uint64_t v14 = v0[32];
      uint64_t v13 = v0[33];
      uint64_t v15 = (uint64_t *)(v7 + *(int *)(v8 + 24));
      uint64_t v17 = *v15;
      uint64_t v16 = v15[1];
      uint64_t v18 = v0[26] + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingData;
      OUTLINED_FUNCTION_53();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v12, v18, v14);
      swift_bridgeObjectRetain();
      MLLogisticRegressionClassifier.Model.applied(to:eventHandler:)(v11);
      uint64_t v38 = v0[32];
      uint64_t v19 = v0[31];
      uint64_t v39 = v0[28];
      uint64_t v36 = v0[26];
      uint64_t v41 = *(void (**)(void))(v0[33] + 8);
      OUTLINED_FUNCTION_10_4();
      v20();
      MEMORY[0x22A672220](v17, v16);
      swift_beginAccess();
      MEMORY[0x22A672220](v17, v16);
      swift_endAccess();
      AnyClassificationMetrics.init(_:_:)();
      type metadata accessor for MLClassifierMetrics.Contents(0);
      swift_storeEnumTagMultiPayload();
      uint64_t v21 = type metadata accessor for MLClassifierMetrics(0);
      __swift_storeEnumTagSinglePayload(v19, 0, 1, v21);
      uint64_t v22 = v36 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingMetrics;
      OUTLINED_FUNCTION_81_2();
      outlined assign with take of MLClassifierMetrics?(v19, v22, &demangling cache variable for type metadata for MLClassifierMetrics?);
      swift_endAccess();
      uint64_t v23 = v36 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_validationData;
      OUTLINED_FUNCTION_53();
      outlined init with copy of MLLogisticRegressionClassifier.Classifier?(v23, v39, &demangling cache variable for type metadata for DataFrame?);
      int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v39, 1, v38);
      char v25 = v0[40];
      if (EnumTagSinglePayload == 1)
      {
        uint64_t v26 = v0[31];
        uint64_t v27 = v0[28];
        uint64_t v42 = v0[26];
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_10_4();
        v28();
        outlined destroy of MLLogisticRegressionClassifier.Model(v25, (void (*)(void))type metadata accessor for MLLogisticRegressionClassifier.Model);
        _s10Foundation3URLVSgWOhTm_0(v27, &demangling cache variable for type metadata for DataFrame?);
        uint64_t v40 = 1;
        __swift_storeEnumTagSinglePayload(v26, 1, 1, v21);
        char v29 = v42 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_validationMetrics;
        OUTLINED_FUNCTION_81_2();
        outlined assign with take of MLClassifierMetrics?(v26, v29, &demangling cache variable for type metadata for MLClassifierMetrics?);
      }
      else
      {
        uint64_t v30 = v0[34];
        (*(void (**)(void, void, void))(v0[33] + 32))(v0[35], v0[28], v0[32]);
        MLLogisticRegressionClassifier.Model.applied(to:eventHandler:)(v30);
        char v35 = v0[40];
        uint64_t v37 = v0[31];
        double v34 = v0[27];
        MEMORY[0x22A672220](v17, v16);
        MEMORY[0x22A672220](v17, v16);
        swift_bridgeObjectRelease();
        AnyClassificationMetrics.init(_:_:)();
        OUTLINED_FUNCTION_10_4();
        v41();
        OUTLINED_FUNCTION_10_4();
        v41();
        OUTLINED_FUNCTION_10_4();
        v41();
        outlined destroy of MLLogisticRegressionClassifier.Model(v35, (void (*)(void))type metadata accessor for MLLogisticRegressionClassifier.Model);
        _s8CreateML30MLLogisticRegressionClassifierV5ModelVWObTm_0(v34, v37, (void (*)(void))type metadata accessor for AnyClassificationMetrics);
        swift_storeEnumTagMultiPayload();
        uint64_t v40 = 1;
        __swift_storeEnumTagSinglePayload(v37, 0, 1, v21);
        OUTLINED_FUNCTION_81_2();
        uint64_t v31 = OUTLINED_FUNCTION_173();
        outlined assign with take of MLClassifierMetrics?(v31, v32, v33);
      }
      swift_endAccess();
      goto LABEL_6;
    }
    outlined destroy of MLLogisticRegressionClassifier.Model(v0[40], (void (*)(void))type metadata accessor for MLLogisticRegressionClassifier.Model);
  }
  uint64_t v40 = 0;
LABEL_6:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v9(v40, 1);
}

uint64_t LogisticRegressionClassifierTrainingSessionDelegate.saveCheckpoint(to:phase:iteration:)(uint64_t a1, unsigned char *a2)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLogisticRegressionClassifier.Model?);
  uint64_t v7 = OUTLINED_FUNCTION_17(v6);
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_41_1();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLogisticRegressionClassifier.Classifier?);
  uint64_t v9 = OUTLINED_FUNCTION_17(v8);
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_41_0();
  switch(*a2)
  {
    case 2:
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 4:
      OUTLINED_FUNCTION_55_0();
      goto LABEL_4;
    default:
LABEL_4:
      char v10 = OUTLINED_FUNCTION_37_5();
      swift_bridgeObjectRelease();
      if ((v10 & 1) == 0)
      {
        char v18 = 0;
        return v18 & 1;
      }
LABEL_5:
      uint64_t v11 = v2 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_classifier;
      OUTLINED_FUNCTION_53();
      outlined init with copy of MLLogisticRegressionClassifier.Classifier?(v11, v4, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.Classifier?);
      uint64_t v12 = type metadata accessor for MLLogisticRegressionClassifier.Classifier();
      OUTLINED_FUNCTION_57_4(v4, 1, v12);
      if (v13)
      {
        __break(1u);
        goto LABEL_11;
      }
      uint64_t v14 = v2 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_model;
      OUTLINED_FUNCTION_53();
      outlined init with copy of MLLogisticRegressionClassifier.Classifier?(v14, v3, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.Model?);
      type metadata accessor for MLLogisticRegressionClassifier.Model();
      uint64_t v15 = OUTLINED_FUNCTION_30_20();
      OUTLINED_FUNCTION_57_4(v15, v16, v17);
      if (v13)
      {
LABEL_11:
        __break(1u);
        JUMPOUT(0x2271B9ED8);
      }
      lazy protocol witness table accessor for type MLLogisticRegressionClassifier.Classifier and conformance MLLogisticRegressionClassifier.Classifier();
      char v18 = 1;
      SupervisedTabularEstimator.write(_:to:overwrite:)();
      outlined destroy of MLLogisticRegressionClassifier.Model(v3, (void (*)(void))type metadata accessor for MLLogisticRegressionClassifier.Model);
      outlined destroy of MLLogisticRegressionClassifier.Model(v4, (void (*)(void))type metadata accessor for MLLogisticRegressionClassifier.Classifier);
      return v18 & 1;
  }
}

uint64_t LogisticRegressionClassifierTrainingSessionDelegate.save(to:)(uint64_t a1)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?);
  uint64_t v6 = OUTLINED_FUNCTION_17(v5);
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_41_1();
  uint64_t v7 = type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_41_0();
  uint64_t v9 = v1 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_53();
  outlined init with copy of MLLogisticRegressionClassifier.Classifier?(v9, v2, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?);
  uint64_t v10 = OUTLINED_FUNCTION_30_20();
  OUTLINED_FUNCTION_57_4(v10, v11, v7);
  if (v12)
  {
    _s10Foundation3URLVSgWOhTm_0(v2, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    *(void *)uint64_t v13 = 0xD000000000000030;
    *(void *)(v13 + 8) = 0x80000002272D69A0;
    *(_OWORD *)(v13 + 16) = 0u;
    *(_OWORD *)(v13 + 32) = 0u;
    *(unsigned char *)(v13 + 48) = 2;
    return swift_willThrow();
  }
  else
  {
    _s8CreateML30MLLogisticRegressionClassifierV5ModelVWObTm_0(v2, v3, (void (*)(void))type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters);
    MLLogisticRegressionClassifier.PersistentParameters.save(toSessionDirectory:)(a1);
    return outlined destroy of MLLogisticRegressionClassifier.Model(v3, (void (*)(void))type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters);
  }
}

void LogisticRegressionClassifierTrainingSessionDelegate.restore(from:phase:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v30 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?);
  uint64_t v6 = OUTLINED_FUNCTION_17(v5);
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_33();
  uint64_t v9 = v7 - v8;
  MEMORY[0x270FA5388](v10);
  char v12 = (char *)&v29 - v11;
  uint64_t v13 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v15 = v14;
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_24_8();
  uint64_t v17 = type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_33();
  uint64_t v21 = v19 - v20;
  MEMORY[0x270FA5388](v22);
  char v24 = (char *)&v29 - v23;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v0, v4, v13);
  MLLogisticRegressionClassifier.PersistentParameters.init(sessionDirectory:)(v0, (uint64_t)v24);
  if (!v2)
  {
    uint64_t v25 = v30 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingParameters;
    OUTLINED_FUNCTION_53();
    outlined init with copy of MLLogisticRegressionClassifier.Classifier?(v25, (uint64_t)v12, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?);
    uint64_t v26 = OUTLINED_FUNCTION_30_20();
    OUTLINED_FUNCTION_57_4(v26, v27, v17);
    if (v28)
    {
      _s10Foundation3URLVSgWOhTm_0((uint64_t)v12, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?);
      _s8CreateML30MLLogisticRegressionClassifierV5ModelVWObTm_0((uint64_t)v24, v9, (void (*)(void))type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters);
      __swift_storeEnumTagSinglePayload(v9, 0, 1, v17);
      OUTLINED_FUNCTION_81_2();
      outlined assign with take of MLClassifierMetrics?(v9, v25, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?);
      swift_endAccess();
    }
    else
    {
      _s8CreateML30MLLogisticRegressionClassifierV5ModelVWObTm_0((uint64_t)v12, v21, (void (*)(void))type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters);
      LogisticRegressionClassifierTrainingSessionDelegate.verifyThatParametersAreCompatible(_:_:)((uint64_t)v24, v21);
      outlined destroy of MLLogisticRegressionClassifier.Model(v21, (void (*)(void))type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters);
      outlined destroy of MLLogisticRegressionClassifier.Model((uint64_t)v24, (void (*)(void))type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters);
    }
  }
  OUTLINED_FUNCTION_8_1();
}

uint64_t LogisticRegressionClassifierTrainingSessionDelegate.verifyThatParametersAreCompatible(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters();
  uint64_t v5 = *(int *)(v4 + 24);
  uint64_t v6 = *(void *)(a1 + v5);
  uint64_t v7 = *(void *)(a1 + v5 + 8);
  uint64_t v8 = (void *)(a2 + v5);
  BOOL v9 = v6 == *v8 && v7 == v8[1];
  if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v10 = swift_bridgeObjectRetain();
    uint64_t v11 = specialized Set.init<A>(_:)(v10);
    uint64_t v12 = swift_bridgeObjectRetain();
    uint64_t v13 = specialized Set.init<A>(_:)(v12);
    specialized static Set.== infix(_:_:)(v11, v13);
    char v15 = v14;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v15)
    {
      static MLLogisticRegressionClassifier.ModelParameters.firstIncompatibility(_:_:)(a1 + *(int *)(v4 + 32), a2 + *(int *)(v4 + 32), v25);
      uint64_t result = outlined init with take of (name: String, originalValue: String, newValue: String)?((uint64_t)v25, (uint64_t)&v26);
      unint64_t v17 = v27;
      if (!v27) {
        return result;
      }
      uint64_t v18 = v26;
      uint64_t v6 = v28;
      uint64_t v7 = v29;
      uint64_t v19 = v30;
      uint64_t v20 = v31;
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_85();
      *(void *)uint64_t v21 = v18;
    }
    else
    {
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      uint64_t v6 = OUTLINED_FUNCTION_51_5();
      uint64_t v7 = v22;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_51_5();
      swift_bridgeObjectRelease();
      uint64_t v19 = String.init<A>(_:)();
      uint64_t v20 = v23;
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_85();
      *(void *)uint64_t v21 = 0xD000000000000011;
      unint64_t v17 = 0x80000002272D7080;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v19 = String.init<A>(_:)();
    uint64_t v20 = v24;
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    *(void *)uint64_t v21 = 0x6320746567726154;
    unint64_t v17 = 0xED00006E6D756C6FLL;
  }
  *(void *)(v21 + 8) = v17;
  *(void *)(v21 + 16) = v6;
  *(void *)(v21 + 24) = v7;
  *(void *)(v21 + 32) = v19;
  *(void *)(v21 + 40) = v20;
  *(unsigned char *)(v21 + 48) = 3;
  return swift_willThrow();
}

uint64_t LogisticRegressionClassifierTrainingSessionDelegate.deinit()
{
  outlined destroy of MLLogisticRegressionClassifier.Model(v0 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_sessionParameters, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
  _s10Foundation3URLVSgWOhTm_0(v0 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingParameters, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?);
  type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_8();
  uint64_t v1 = OUTLINED_FUNCTION_22_1();
  v2(v1);
  _s10Foundation3URLVSgWOhTm_0(v0 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_validationData, &demangling cache variable for type metadata for DataFrame?);
  _s10Foundation3URLVSgWOhTm_0(v0 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_classifier, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.Classifier?);
  _s10Foundation3URLVSgWOhTm_0(v0 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_model, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.Model?);
  _s10Foundation3URLVSgWOhTm_0(v0 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingMetrics, &demangling cache variable for type metadata for MLClassifierMetrics?);
  _s10Foundation3URLVSgWOhTm_0(v0 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_validationMetrics, &demangling cache variable for type metadata for MLClassifierMetrics?);
  return v0;
}

uint64_t LogisticRegressionClassifierTrainingSessionDelegate.__deallocating_deinit()
{
  LogisticRegressionClassifierTrainingSessionDelegate.deinit();
  OUTLINED_FUNCTION_4_12();

  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for LogisticRegressionClassifierTrainingSessionDelegate()
{
  return type metadata accessor for LogisticRegressionClassifierTrainingSessionDelegate();
}

uint64_t type metadata accessor for LogisticRegressionClassifierTrainingSessionDelegate()
{
  uint64_t result = type metadata singleton initialization cache for LogisticRegressionClassifierTrainingSessionDelegate;
  if (!type metadata singleton initialization cache for LogisticRegressionClassifierTrainingSessionDelegate) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for LogisticRegressionClassifierTrainingSessionDelegate()
{
  type metadata accessor for MLTrainingSessionParameters();
  if (v0 <= 0x3F)
  {
    type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters?(319, &lazy cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?, (void (*)(uint64_t))type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters);
    if (v1 <= 0x3F)
    {
      type metadata accessor for DataFrame();
      if (v2 <= 0x3F)
      {
        type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters?(319, (unint64_t *)&lazy cache variable for type metadata for DataFrame?, MEMORY[0x263F1BEC8]);
        if (v3 <= 0x3F)
        {
          type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters?(319, &lazy cache variable for type metadata for MLLogisticRegressionClassifier.Classifier?, (void (*)(uint64_t))type metadata accessor for MLLogisticRegressionClassifier.Classifier);
          if (v4 <= 0x3F)
          {
            type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters?(319, &lazy cache variable for type metadata for MLLogisticRegressionClassifier.Model?, (void (*)(uint64_t))type metadata accessor for MLLogisticRegressionClassifier.Model);
            if (v5 <= 0x3F)
            {
              type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters?(319, &lazy cache variable for type metadata for MLClassifierMetrics?, (void (*)(uint64_t))type metadata accessor for MLClassifierMetrics);
              if (v6 <= 0x3F) {
                swift_updateClassMetadata2();
              }
            }
          }
        }
      }
    }
  }
}

void type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void protocol witness for TrainingSessionDelegate.setUp() in conformance LogisticRegressionClassifierTrainingSessionDelegate()
{
}

void protocol witness for TrainingSessionDelegate.resume(from:) in conformance LogisticRegressionClassifierTrainingSessionDelegate(Swift::OpaquePointer a1)
{
}

unint64_t protocol witness for TrainingSessionDelegate.itemCount(phase:) in conformance LogisticRegressionClassifierTrainingSessionDelegate(CreateML::MLPhase a1)
{
  return (unint64_t)LogisticRegressionClassifierTrainingSessionDelegate.itemCount(phase:)(a1);
}

uint64_t protocol witness for TrainingSessionDelegate.train(from:) in conformance LogisticRegressionClassifierTrainingSessionDelegate(uint64_t a1)
{
  unint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *unint64_t v3 = v1;
  v3[1] = protocol witness for TrainingSessionDelegate.train(from:) in conformance LogisticRegressionClassifierTrainingSessionDelegate;
  return LogisticRegressionClassifierTrainingSessionDelegate.train(from:)(a1);
}

uint64_t protocol witness for TrainingSessionDelegate.train(from:) in conformance LogisticRegressionClassifierTrainingSessionDelegate()
{
  OUTLINED_FUNCTION_2();
  uint64_t v5 = *v1;
  uint64_t v2 = swift_task_dealloc();
  unint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  if (!v0) {
    uint64_t v2 = OUTLINED_FUNCTION_173();
  }
  return v3(v2);
}

uint64_t protocol witness for TrainingSessionDelegate.evaluate(from:) in conformance LogisticRegressionClassifierTrainingSessionDelegate()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for TrainingSessionDelegate.evaluate(from:) in conformance LogisticRegressionClassifierTrainingSessionDelegate;
  return LogisticRegressionClassifierTrainingSessionDelegate.evaluate(from:)();
}

uint64_t protocol witness for TrainingSessionDelegate.evaluate(from:) in conformance LogisticRegressionClassifierTrainingSessionDelegate(uint64_t a1, char a2)
{
  OUTLINED_FUNCTION_2();
  uint64_t v10 = *v3;
  uint64_t v6 = swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8);
  if (v2)
  {
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = a2 & 1;
    uint64_t v6 = a1;
  }
  return v7(v6, v8);
}

uint64_t protocol witness for TrainingSessionDelegate.saveCheckpoint(to:phase:iteration:) in conformance LogisticRegressionClassifierTrainingSessionDelegate(uint64_t a1, unsigned char *a2)
{
  return LogisticRegressionClassifierTrainingSessionDelegate.saveCheckpoint(to:phase:iteration:)(a1, a2) & 1;
}

uint64_t protocol witness for TrainingSessionCodable.save(to:) in conformance LogisticRegressionClassifierTrainingSessionDelegate(uint64_t a1)
{
  return LogisticRegressionClassifierTrainingSessionDelegate.save(to:)(a1);
}

void protocol witness for TrainingSessionCodable.restore(from:phase:) in conformance LogisticRegressionClassifierTrainingSessionDelegate()
{
}

uint64_t outlined init with copy of MLLogisticRegressionClassifier.Classifier?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_8();
  uint64_t v4 = OUTLINED_FUNCTION_32_17();
  v5(v4);
  return a2;
}

uint64_t outlined assign with take of MLLogisticRegressionClassifier.ModelParameters(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of MLLogisticRegressionClassifier.Model(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_8();
  uint64_t v3 = OUTLINED_FUNCTION_22_1();
  v4(v3);
  return a1;
}

uint64_t _s8CreateML30MLLogisticRegressionClassifierV5ModelVWObTm_0(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_8();
  uint64_t v4 = OUTLINED_FUNCTION_32_17();
  v5(v4);
  return a2;
}

uint64_t outlined assign with take of MLClassifierMetrics?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_8();
  uint64_t v4 = OUTLINED_FUNCTION_32_17();
  v5(v4);
  return a2;
}

uint64_t OUTLINED_FUNCTION_23_16(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(a1, 0, 1, v1);
}

uint64_t OUTLINED_FUNCTION_30_20()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_32_17()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_37_13()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_39_15(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(v1, 1, 1, a1);
}

double OUTLINED_FUNCTION_40_11()
{
  return v0;
}

BOOL static MLDataValue.ValueType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t MLDataValue.sequenceValue.getter@<X0>(uint64_t *a1@<X8>)
{
  if (*(unsigned char *)(v1 + 16) == 3) {
    uint64_t result = swift_retain();
  }
  else {
    uint64_t result = 0;
  }
  *a1 = result;
  return result;
}

uint64_t MLDataValue.doubleValue.getter()
{
  if (v0[16] == 1) {
    return *(void *)v0;
  }
  else {
    return 0;
  }
}

uint64_t MLDataValue.intValue.getter()
{
  if (v0[16]) {
    return 0;
  }
  else {
    return *(void *)v0;
  }
}

uint64_t MLDataValue.stringValue.getter()
{
  if (*((unsigned char *)v0 + 16) != 2) {
    return 0;
  }
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

id MLDataValue.multiArrayValue.getter@<X0>(void *a1@<X8>)
{
  if (*(unsigned char *)(v1 + 16) == 5)
  {
    uint64_t v3 = *(void **)v1;
    id result = v3;
  }
  else
  {
    uint64_t v3 = 0;
  }
  *a1 = v3;
  return result;
}

void MLDataValue.type.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 16);
}

uint64_t MLDataValue.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  switch(CMLFeatureValue.type.getter())
  {
    case 1u:
      specialized handling<A, B>(_:_:)();
      uint64_t v26 = v25;
      uint64_t result = swift_release();
      id object = 0;
      uint64_t countAndFlagsBits = v26;
      char v7 = 1;
      break;
    case 2u:
      swift_retain();
      Swift::String v9 = CMLFeatureValue.stringValue()();
      uint64_t countAndFlagsBits = v9._countAndFlagsBits;
      id object = v9._object;
      swift_release();
      if (v8)
      {

        __break(1u);
        swift_release();

        __break(1u);
LABEL_15:
        __break(1u);
        swift_release();

        __break(1u);
LABEL_16:
        __break(1u);

        __break(1u);
LABEL_17:
        __break(1u);
        JUMPOUT(0x2271BB464);
      }
      uint64_t result = swift_release();
      char v7 = 2;
      break;
    case 3u:
      uint64_t v10 = *(void *)(a1 + 16);
      swift_retain();
      uint64_t v11 = v10;
      uint64_t v8 = 0;
      uint64_t v12 = specialized handling<A, B>(_:_:)(v11);
      if (!v12) {
        goto LABEL_15;
      }
      type metadata accessor for CMLSequence();
      uint64_t countAndFlagsBits = swift_allocObject();
      *(void *)(countAndFlagsBits + 16) = v12;
      *(unsigned char *)(countAndFlagsBits + 24) = 1;
      uint64_t result = swift_release_n();
      id object = 0;
      char v7 = 3;
      break;
    case 4u:
      uint64_t v13 = *(void *)(a1 + 16);
      swift_retain();
      uint64_t v14 = v13;
      uint64_t v8 = 0;
      uint64_t v15 = specialized handling<A, B>(_:_:)(v14);
      if (!v15) {
        goto LABEL_16;
      }
      type metadata accessor for CMLDictionary();
      uint64_t v16 = swift_allocObject();
      *(void *)(v16 + 16) = v15;
      v29[0] = v16;
      swift_retain();
      specialized Dictionary.init<A>(uniqueKeysWithValues:)((uint64_t)v29, v17, v18, v19, v20, v21, v22, v23, v28, v29[0], (uint64_t)closure #1 in MLDataValue.DictionaryType.init(from:), 0, (uint64_t)specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:), 0, (uint64_t)specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:), 0, v29[7], v29[8]);
      uint64_t countAndFlagsBits = v24;
      swift_release();
      uint64_t result = swift_release_n();
      id object = 0;
      char v7 = 4;
      break;
    case 5u:
      uint64_t result = swift_release();
      uint64_t countAndFlagsBits = 0;
      id object = 0;
      char v7 = 6;
      break;
    case 6u:
      uint64_t v27 = swift_retain();
      MLDataValue.MultiArrayType.init(from:)(v27, v29);
      uint64_t countAndFlagsBits = v29[0];
      if (!v29[0]) {
        goto LABEL_17;
      }
      uint64_t result = swift_release();
      id object = 0;
      char v7 = 5;
      break;
    default:
      uint64_t countAndFlagsBits = specialized handling<A, B>(_:_:)(*(void *)(a1 + 16));
      uint64_t result = swift_release();
      id object = 0;
      char v7 = 0;
      break;
  }
  *(void *)a2 = countAndFlagsBits;
  *(void *)(a2 + 8) = object;
  *(unsigned char *)(a2 + 16) = v7;
  return result;
}

#error "2271BB548: call analysis failed (funcsize=85)"

uint64_t MLDataValue.ValueType.description.getter()
{
  uint64_t result = 7630409;
  switch(*v0)
  {
    case 1:
      uint64_t result = OUTLINED_FUNCTION_13_30();
      break;
    case 2:
      uint64_t result = OUTLINED_FUNCTION_12_22();
      break;
    case 3:
      uint64_t result = OUTLINED_FUNCTION_7_35();
      break;
    case 4:
      uint64_t result = OUTLINED_FUNCTION_1_40();
      break;
    case 5:
      uint64_t result = OUTLINED_FUNCTION_5_39();
      break;
    case 6:
      uint64_t result = 0x676E697373694DLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t MLDataValue.description.getter(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  Swift::String v9 = *(void **)v8;
  uint64_t v10 = *(void **)(v8 + 8);
  uint64_t result = 0xD000000000000012;
  switch(*(unsigned char *)(v8 + 16))
  {
    case 1:
      uint64_t v53 = 0;
      v13._uint64_t countAndFlagsBits = 0x756C615661746144;
      v13._id object = (void *)0xEA00000000002865;
      String.append(_:)(v13);
      Double.write<A>(to:)();
      goto LABEL_8;
    case 2:
      uint64_t v53 = 0x756C615661746144;
      v14._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_3_4();
      String.append(_:)(v14);
      uint64_t v15 = 10530;
      unint64_t v16 = 0xE200000000000000;
      goto LABEL_9;
    case 3:
      OUTLINED_FUNCTION_23_17(18, 0x272D9310, a3, a4, a5, a6, a7, a8, v50, (uint64_t)v9, (uint64_t)closure #1 in MLDataValue.SequenceType.description.getter, v55);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<MLDataValue.SequenceType, String>);
      lazy protocol witness table accessor for type LazyMapSequence<MLDataValue.SequenceType, String> and conformance <> LazyMapSequence<A, B>();
      OUTLINED_FUNCTION_22_22();
      int v17 = swift_release();
      OUTLINED_FUNCTION_9_30(v17, v18, v19, v20, v21, v22, v23, v24, v51, 91);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v25._uint64_t countAndFlagsBits = 93;
      v25._id object = (void *)0xE100000000000000;
      String.append(_:)(v25);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_2_47();
      v26._uint64_t countAndFlagsBits = v54;
      v26._id object = (void *)0xE100000000000000;
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      v27._uint64_t countAndFlagsBits = 41;
      v27._id object = (void *)0xE100000000000000;
      String.append(_:)(v27);
      OUTLINED_FUNCTION_2_47();
      return 0x756C615661746144;
    case 4:
      uint64_t v28 = (void *)OUTLINED_FUNCTION_4_44();
      outlined copy of MLDataValue(v28, v29, 4);
      lazy protocol witness table accessor for type MLDataValue and conformance MLDataValue();
      Dictionary.description.getter();
      outlined consume of MLDataValue(v9, v10, 4);
      OUTLINED_FUNCTION_9_30(v30, v31, v32, v33, v34, v35, v36, v37, v50, v52);
      goto LABEL_7;
    case 5:
      uint64_t v38 = (void *)OUTLINED_FUNCTION_4_44();
      outlined copy of MLDataValue(v38, v39, 5);
      id v40 = objc_msgSend(v9, sel_description);
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      OUTLINED_FUNCTION_8_30();
      OUTLINED_FUNCTION_9_30(v41, v42, v43, v44, v45, v46, v47, v48, v50, v52);
      swift_bridgeObjectRelease();
      v49._uint64_t countAndFlagsBits = 41;
      v49._id object = (void *)0xE100000000000000;
      String.append(_:)(v49);
      OUTLINED_FUNCTION_8_30();
      return v53;
    case 6:
      return result;
    default:
      uint64_t v53 = 0x756C615661746144;
      v12._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v12);
LABEL_7:
      swift_bridgeObjectRelease();
LABEL_8:
      uint64_t v15 = 41;
      unint64_t v16 = 0xE100000000000000;
LABEL_9:
      String.append(_:)(*(Swift::String *)&v15);
      return v53;
  }
}

uint64_t MLDataValue.init(fromAny:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v4 = a1;
  outlined init with copy of Any(a1, (uint64_t)v58);
  if (OUTLINED_FUNCTION_0_24())
  {
    __swift_destroy_boxed_opaque_existential_0(v4);
    uint64_t v7 = *((void *)&v50 + 1);
    uint64_t v6 = v50;
    char v8 = v51;
LABEL_50:
    uint64_t result = __swift_destroy_boxed_opaque_existential_0((uint64_t)v58);
    *(void *)a2 = v6;
    *(void *)(a2 + 8) = v7;
    *(unsigned char *)(a2 + 16) = v8;
    return result;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLDataValueConvertible);
  if (OUTLINED_FUNCTION_0_24())
  {
    outlined init with take of BinaryFloatingPoint(&v50, (uint64_t)__src);
    __swift_project_boxed_opaque_existential_1(__src, __src[3]);
    uint64_t v9 = OUTLINED_FUNCTION_45_9();
    v10(v9);
    __swift_destroy_boxed_opaque_existential_0(v4);
    uint64_t v6 = __dst[0];
    uint64_t v7 = __dst[1];
    char v8 = __dst[2];
    __swift_destroy_boxed_opaque_existential_0((uint64_t)__src);
    goto LABEL_50;
  }
  if (OUTLINED_FUNCTION_0_24())
  {
    __swift_destroy_boxed_opaque_existential_0(v4);
    uint64_t v7 = *((void *)&v50 + 1);
    uint64_t v6 = v50;
    char v8 = 2;
    goto LABEL_50;
  }
  if (OUTLINED_FUNCTION_0_24())
  {
    __swift_destroy_boxed_opaque_existential_0(v4);
    uint64_t v7 = 0;
    char v8 = 0;
    uint64_t v6 = v50;
    goto LABEL_50;
  }
  if (OUTLINED_FUNCTION_0_24())
  {
    __swift_destroy_boxed_opaque_existential_0(v4);
    uint64_t v7 = 0;
    uint64_t v6 = v50;
    char v8 = 1;
    goto LABEL_50;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
  if (swift_dynamicCast())
  {
    uint64_t v11 = *(void *)(*(void *)&v44[0] + 16);
    if (!v11)
    {
      swift_bridgeObjectRelease();
      uint64_t v16 = MEMORY[0x263F8EE78];
LABEL_43:
      specialized MLDataValue.SequenceType.init<A>(_:)(&v50, v16);
      __swift_destroy_boxed_opaque_existential_0(v4);
      uint64_t v7 = 0;
      uint64_t v6 = v50;
      char v8 = 3;
      goto LABEL_50;
    }
    uint64_t v34 = v4;
    v53[0] = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v12 = *(void *)&v44[0] + 32;
    while (1)
    {
      outlined init with copy of Any(v12, (uint64_t)&v50);
      outlined init with copy of Any((uint64_t)&v50, (uint64_t)__src);
      MLDataValue.init(fromAny:)(__dst, __src);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v50);
      if (v3) {
        break;
      }
      uint64_t v13 = __dst[0];
      uint64_t v14 = __dst[1];
      char v15 = __dst[2];
      uint64_t v16 = v53[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v16 = v53[0];
      }
      unint64_t v17 = *(void *)(v16 + 16);
      if (v17 >= *(void *)(v16 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v16 = v53[0];
      }
      *(void *)(v16 + 16) = v17 + 1;
      uint64_t v18 = v16 + 24 * v17;
      *(void *)(v18 + 32) = v13;
      *(void *)(v18 + 40) = v14;
      *(unsigned char *)(v18 + 48) = v15;
      v12 += 32;
      --v11;
      uint64_t v3 = 0;
      if (!v11)
      {
        swift_bridgeObjectRelease();
        uint64_t v4 = v34;
        goto LABEL_43;
      }
    }
    swift_release();
    __swift_destroy_boxed_opaque_existential_0(v34);
LABEL_46:
    swift_bridgeObjectRelease();
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)v58);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
  if (!swift_dynamicCast())
  {
    *(void *)&long long v50 = 0;
    *((void *)&v50 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(36);
    v31._uint64_t countAndFlagsBits = 0x20666F2065707954;
    v31._id object = (void *)0xEF272065756C6176;
    String.append(_:)(v31);
    _print_unlocked<A, B>(_:_:)();
    v32._id object = (void *)0x80000002272D9330;
    v32._uint64_t countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v32);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(void *)uint64_t v33 = 0;
    *(void *)(v33 + 8) = 0xE000000000000000;
    *(_OWORD *)(v33 + 16) = 0u;
    *(_OWORD *)(v33 + 32) = 0u;
    *(unsigned char *)(v33 + 48) = 1;
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_0(v4);
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)v58);
  }
  uint64_t v19 = v59;
  int64_t v20 = *(void *)(v59 + 16);
  if (!v20)
  {
    swift_bridgeObjectRelease();
    uint64_t v27 = MEMORY[0x263F8EE78];
LABEL_49:
    uint64_t v6 = specialized Dictionary.init<A>(uniqueKeysWithValues:)(v27);
    __swift_destroy_boxed_opaque_existential_0(v4);
    uint64_t v7 = 0;
    char v8 = 4;
    goto LABEL_50;
  }
  uint64_t v57 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20, 0);
  uint64_t result = specialized Dictionary.startIndex.getter(v19);
  if ((result & 0x8000000000000000) == 0)
  {
    unint64_t v23 = result;
    if (result < 1 << *(unsigned char *)(v19 + 32))
    {
      uint64_t v43 = v19 + 64;
      uint64_t v35 = v19;
      while ((*(void *)(v43 + 8 * (v23 >> 6)) & (1 << v23)) != 0)
      {
        int v42 = v22;
        if (*(_DWORD *)(v19 + 36) != v22) {
          goto LABEL_52;
        }
        outlined init with copy of AnyHashable(*(void *)(v19 + 48) + 40 * v23, (uint64_t)&v50);
        outlined init with copy of Any(*(void *)(v19 + 56) + 32 * v23, (uint64_t)v52);
        outlined init with copy of AnyHashable((uint64_t)&v50, (uint64_t)__src);
        outlined init with copy of Any((uint64_t)v52, (uint64_t)&__src[5]);
        memcpy(__dst, __src, sizeof(__dst));
        outlined destroy of (key: AnyHashable, value: Any)((uint64_t)&v50);
        outlined init with copy of AnyHashable((uint64_t)__dst, (uint64_t)v44);
        outlined init with copy of Any((uint64_t)&__dst[5], (uint64_t)v46);
        v47[3] = MEMORY[0x263F8DB68];
        uint64_t v24 = swift_allocObject();
        v47[0] = v24;
        long long v25 = v44[1];
        *(_OWORD *)(v24 + 16) = v44[0];
        *(_OWORD *)(v24 + 32) = v25;
        *(void *)(v24 + 48) = v45;
        MLDataValue.init(fromAny:)(v53, v47);
        if (v2)
        {
          __swift_destroy_boxed_opaque_existential_0((uint64_t)v46);
          outlined destroy of (key: AnyHashable, value: Any)((uint64_t)__dst);
          swift_release();
          __swift_destroy_boxed_opaque_existential_0(v4);
          goto LABEL_46;
        }
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v46);
        outlined init with copy of AnyHashable((uint64_t)__dst, (uint64_t)v44);
        outlined init with copy of Any((uint64_t)&__dst[5], (uint64_t)v46);
        MLDataValue.init(fromAny:)(v55, v46);
        int64_t v36 = v20;
        outlined destroy of AnyHashable((uint64_t)v44);
        outlined destroy of (key: AnyHashable, value: Any)((uint64_t)__dst);
        uint64_t v26 = v53[0];
        uint64_t v41 = v53[1];
        char v40 = v54;
        uint64_t v38 = v55[1];
        uint64_t v39 = v55[0];
        char v37 = v56;
        uint64_t v27 = v57;
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v27 + 16) + 1, 1);
          uint64_t v27 = v57;
        }
        unint64_t v29 = *(void *)(v27 + 16);
        unint64_t v28 = *(void *)(v27 + 24);
        if (v29 >= v28 >> 1)
        {
          uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v28 > 1), v29 + 1, 1);
          uint64_t v27 = v57;
        }
        *(void *)(v27 + 16) = v29 + 1;
        uint64_t v30 = v27 + 48 * v29;
        *(void *)(v30 + 32) = v26;
        *(void *)(v30 + 40) = v41;
        *(unsigned char *)(v30 + 48) = v40;
        *(void *)(v30 + 56) = v39;
        *(void *)(v30 + 64) = v38;
        *(unsigned char *)(v30 + 72) = v37;
        uint64_t v19 = v35;
        if ((uint64_t)v23 >= -(-1 << *(unsigned char *)(v35 + 32))) {
          goto LABEL_53;
        }
        if ((*(void *)(v43 + 8 * (v23 >> 6)) & (1 << v23)) == 0) {
          goto LABEL_54;
        }
        if (*(_DWORD *)(v35 + 36) != v42) {
          goto LABEL_55;
        }
        uint64_t result = _HashTable.occupiedBucket(after:)();
        int64_t v20 = v36 - 1;
        if (v36 == 1)
        {
          swift_bridgeObjectRelease();
          goto LABEL_49;
        }
        unint64_t v23 = result;
        if ((result & 0x8000000000000000) == 0)
        {
          int v22 = *(_DWORD *)(v35 + 36);
          if (result < 1 << *(unsigned char *)(v35 + 32)) {
            continue;
          }
        }
        goto LABEL_56;
      }
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
    }
  }
LABEL_56:
  __break(1u);
  return result;
}

uint64_t MLDataValue.dictionaryValue.getter@<X0>(uint64_t *a1@<X8>)
{
  if (*(unsigned char *)(v1 + 16) == 4) {
    uint64_t result = swift_bridgeObjectRetain();
  }
  else {
    uint64_t result = 0;
  }
  *a1 = result;
  return result;
}

uint64_t MLDataValue.isValid.getter()
{
  uint64_t v1 = *(void **)v0;
  uint64_t v2 = *(void **)(v0 + 8);
  char v3 = *(unsigned char *)(v0 + 16);
  uint64_t v4 = 0;
  switch(v3)
  {
    case 2:
    case 4:
      swift_bridgeObjectRetain();
      goto LABEL_5;
    case 3:
      swift_retain();
      goto LABEL_5;
    case 5:
      id v5 = v1;
      goto LABEL_5;
    case 6:
      goto LABEL_6;
    default:
LABEL_5:
      uint64_t v4 = 1;
LABEL_6:
      outlined consume of MLDataValue(v1, v2, v3);
      outlined consume of MLDataValue(0, 0, 6);
      return v4;
  }
}

void MLDataValue.ValueType.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int MLDataValue.ValueType.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t MLDataValue.ValueType.debugDescription.getter()
{
  uint64_t result = 7630409;
  switch(*v0)
  {
    case 1:
      uint64_t result = OUTLINED_FUNCTION_13_30();
      break;
    case 2:
      uint64_t result = OUTLINED_FUNCTION_12_22();
      break;
    case 3:
      uint64_t result = OUTLINED_FUNCTION_7_35();
      break;
    case 4:
      uint64_t result = OUTLINED_FUNCTION_1_40();
      break;
    case 5:
      uint64_t result = OUTLINED_FUNCTION_5_39();
      break;
    case 6:
      uint64_t result = 0x676E697373694DLL;
      break;
    default:
      return result;
  }
  return result;
}

void *MLDataValue.debugDescription.getter(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  uint64_t v9 = *(void **)v8;
  uint64_t v10 = *(void **)(v8 + 8);
  uint64_t v11 = *(unsigned __int8 *)(v8 + 16);
  uint64_t v12 = 0xD000000000000012;
  switch(v11)
  {
    case 1:
      uint64_t v13 = Double.description.getter();
      goto LABEL_4;
    case 2:
      swift_bridgeObjectRetain();
      return v9;
    case 3:
      OUTLINED_FUNCTION_23_17(a1, a2, a3, a4, a5, a6, a7, a8, v28, (uint64_t)v9, (uint64_t)closure #1 in MLDataValue.SequenceType.debugDescription.getter, v31);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<MLDataValue.SequenceType, String>);
      lazy protocol witness table accessor for type LazyMapSequence<MLDataValue.SequenceType, String> and conformance <> LazyMapSequence<A, B>();
      OUTLINED_FUNCTION_22_22();
      int v14 = swift_release();
      OUTLINED_FUNCTION_9_30(v14, v15, v16, v17, v18, v19, v20, v21, v29, 91);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v22._uint64_t countAndFlagsBits = 93;
      v22._id object = (void *)0xE100000000000000;
      String.append(_:)(v22);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_2_47();
      OUTLINED_FUNCTION_2_47();
      return *(void **)v30;
    case 4:
      lazy protocol witness table accessor for type MLDataValue and conformance MLDataValue();
      swift_bridgeObjectRetain();
      uint64_t v12 = Dictionary.debugDescription.getter();
      unint64_t v23 = v9;
      uint64_t v24 = v10;
      char v25 = 4;
      goto LABEL_9;
    case 5:
      id v26 = objc_msgSend(v9, sel_debugDescription);
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();

      OUTLINED_FUNCTION_8_30();
      unint64_t v23 = v9;
      uint64_t v24 = v10;
      char v25 = 5;
LABEL_9:
      outlined consume of MLDataValue(v23, v24, v25);
      break;
    case 6:
      return (void *)v12;
    default:
      lazy protocol witness table accessor for type Int and conformance Int();
      uint64_t v13 = BinaryInteger.description.getter();
LABEL_4:
      uint64_t v12 = v13;
      break;
  }
  return (void *)v12;
}

uint64_t static MLDataValue.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t *)a1;
  char v3 = *(void **)(a1 + 8);
  char v4 = *(unsigned char *)(a1 + 16);
  uint64_t v5 = *(uint64_t *)a2;
  unint64_t v6 = *(void *)(a2 + 8);
  int v7 = *(unsigned __int8 *)(a2 + 16);
  switch(v4)
  {
    case 1:
      if (v7 != 1) {
        goto LABEL_30;
      }
      int v17 = (void *)OUTLINED_FUNCTION_3_4();
      int v19 = (void *)OUTLINED_FUNCTION_30_21(v17, v18, 1);
      outlined consume of MLDataValue(v19, v20, 1);
      BOOL v12 = *(double *)&v2 == *(double *)&v5;
      goto LABEL_8;
    case 2:
      if (v7 != 2) {
        goto LABEL_27;
      }
      if (v2 == v5 && v3 == (void *)v6)
      {
        char v13 = 1;
      }
      else
      {
        OUTLINED_FUNCTION_3_4();
        char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      outlined copy of MLDataValue((id)v5, (id)v6, 2);
      outlined copy of MLDataValue((id)v2, v3, 2);
      int v14 = (void *)OUTLINED_FUNCTION_30_21((void *)v2, v3, 2);
      char v16 = 2;
      goto LABEL_33;
    case 3:
      if (v7 == 3)
      {
        double v31 = *(double *)a2;
        uint64_t v32 = v2;
        OUTLINED_FUNCTION_20_24();
        OUTLINED_FUNCTION_20_24();
        char v13 = static MLDataValue.SequenceType.== infix(_:_:)(&v32, &v31);
        OUTLINED_FUNCTION_2_47();
        outlined consume of MLDataValue((void *)v5, (id)v6, 3);
        outlined consume of MLDataValue((void *)v5, (id)v6, 3);
        int v14 = (void *)v2;
        int v15 = v3;
        char v16 = 3;
        goto LABEL_33;
      }
      swift_retain();
      goto LABEL_30;
    case 4:
      if (v7 == 4)
      {
        OUTLINED_FUNCTION_21_25();
        OUTLINED_FUNCTION_21_25();
        char v13 = specialized static Dictionary<>.== infix(_:_:)(v2, v5);
        outlined consume of MLDataValue((void *)v2, v3, 4);
        outlined consume of MLDataValue((void *)v5, (id)v6, 4);
        outlined consume of MLDataValue((void *)v5, (id)v6, 4);
        int v14 = (void *)v2;
        int v15 = v3;
        char v16 = 4;
        goto LABEL_33;
      }
LABEL_27:
      swift_bridgeObjectRetain();
      goto LABEL_30;
    case 5:
      if (v7 == 5)
      {
        type metadata accessor for NSObject();
        OUTLINED_FUNCTION_19_26();
        OUTLINED_FUNCTION_19_26();
        char v13 = static NSObject.== infix(_:_:)();
        OUTLINED_FUNCTION_8_30();
        outlined consume of MLDataValue((void *)v5, (id)v6, 5);
        outlined consume of MLDataValue((void *)v5, (id)v6, 5);
        int v14 = (void *)v2;
        int v15 = v3;
        char v16 = 5;
LABEL_33:
        outlined consume of MLDataValue(v14, v15, v16);
      }
      else
      {
        id v25 = (id)v2;
LABEL_30:
        outlined copy of MLDataValue((id)v5, (id)v6, v7);
        id v26 = (void *)OUTLINED_FUNCTION_3_4();
        uint64_t v28 = (void *)OUTLINED_FUNCTION_30_21(v26, v27, v4);
        outlined consume of MLDataValue(v28, v29, v7);
        char v13 = 0;
      }
      return v13 & 1;
    case 6:
      if (v7 != 6 || (v6 | v5) != 0) {
        goto LABEL_30;
      }
      unint64_t v23 = (void *)OUTLINED_FUNCTION_3_4();
      outlined consume of MLDataValue(v23, v24, 6);
      outlined consume of MLDataValue(0, 0, 6);
      char v13 = 1;
      return v13 & 1;
    default:
      if (*(unsigned char *)(a2 + 16)) {
        goto LABEL_30;
      }
      uint64_t v8 = (void *)OUTLINED_FUNCTION_3_4();
      uint64_t v10 = (void *)OUTLINED_FUNCTION_30_21(v8, v9, 0);
      outlined consume of MLDataValue(v10, v11, 0);
      BOOL v12 = v2 == v5;
LABEL_8:
      char v13 = v12;
      return v13 & 1;
  }
}

void MLDataValue.hash(into:)()
{
  switch(*(unsigned char *)(v0 + 16))
  {
    case 1:
      if ((*(void *)v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v2 = *(void *)v0;
      }
      else {
        Swift::UInt64 v2 = 0;
      }
      Hasher._combine(_:)(v2);
      return;
    case 2:
      String.hash(into:)();
      return;
    case 3:
    case 4:
    case 5:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x2271BC948);
    case 6:
      Swift::UInt v1 = 1;
      goto LABEL_11;
    default:
      Swift::UInt v1 = *(void *)v0;
LABEL_11:
      Hasher._combine(_:)(v1);
      return;
  }
}

Swift::Int MLDataValue.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MLDataValue()
{
  return Hasher._finalize()();
}

uint64_t specialized static Dictionary<>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v64 = a1 + 64;
  OUTLINED_FUNCTION_3_47();
  uint64_t v65 = v6;
  while (2)
  {
    if (v4)
    {
      OUTLINED_FUNCTION_29_20();
      uint64_t v66 = v7;
      uint64_t v67 = v8;
      unint64_t v10 = v9 | (v8 << 6);
    }
    else
    {
      uint64_t v11 = v5 + 1;
      if (__OFADD__(v5, 1))
      {
        __break(1u);
        goto LABEL_59;
      }
      if (v11 >= v65) {
        return 1;
      }
      unint64_t v12 = *(void *)(v64 + 8 * v11);
      uint64_t v13 = v5 + 1;
      if (!v12)
      {
        uint64_t v13 = v5 + 2;
        if (v5 + 2 >= v65) {
          return 1;
        }
        unint64_t v12 = *(void *)(v64 + 8 * v13);
        if (!v12)
        {
          uint64_t v13 = v5 + 3;
          if (v5 + 3 >= v65) {
            return 1;
          }
          unint64_t v12 = *(void *)(v64 + 8 * v13);
          if (!v12)
          {
            uint64_t v14 = v5 + 4;
            if (v5 + 4 >= v65) {
              return 1;
            }
            unint64_t v12 = *(void *)(v64 + 8 * v14);
            if (!v12)
            {
              while (1)
              {
                uint64_t v13 = v14 + 1;
                if (__OFADD__(v14, 1)) {
                  break;
                }
                if (v13 >= v65) {
                  return 1;
                }
                unint64_t v12 = *(void *)(v64 + 8 * v13);
                ++v14;
                if (v12) {
                  goto LABEL_19;
                }
              }
LABEL_59:
              __break(1u);
              JUMPOUT(0x2271BCF34);
            }
            uint64_t v13 = v5 + 4;
          }
        }
      }
LABEL_19:
      uint64_t v66 = (v12 - 1) & v12;
      uint64_t v67 = v13;
      unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
    }
    uint64_t v15 = v3;
    uint64_t v16 = *(void *)(v3 + 56) + 24 * v10;
    double v18 = *(double *)v16;
    unint64_t v17 = *(void *)(v16 + 8);
    int v19 = *(unsigned __int8 *)(v16 + 16);
    id v20 = (void *)OUTLINED_FUNCTION_14_26();
    outlined copy of MLDataValue(v20, v21, v22);
    outlined copy of MLDataValue(*(id *)&v18, (id)v17, v19);
    uint64_t v23 = OUTLINED_FUNCTION_14_26();
    uint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v23);
    char v26 = v25;
    uint64_t v27 = (void *)OUTLINED_FUNCTION_14_26();
    outlined consume of MLDataValue(v27, v28, v29);
    if ((v26 & 1) == 0) {
      goto LABEL_56;
    }
    uint64_t v30 = *(void *)(a2 + 56) + 24 * v24;
    double v31 = *(double *)v30;
    uint64_t v32 = *(void **)(v30 + 8);
    char v33 = *(unsigned char *)(v30 + 16);
    switch(v33)
    {
      case 1:
        if (v19 != 1) {
          goto LABEL_55;
        }
        char v37 = (void *)OUTLINED_FUNCTION_45_9();
        outlined consume of MLDataValue(v37, v38, 1);
        outlined consume of MLDataValue(*(void **)&v18, (id)v17, 1);
        BOOL v36 = v31 == v18;
        goto LABEL_26;
      case 2:
        if (v19 == 2)
        {
          if (*(void *)&v31 == *(void *)&v18 && v32 == (void *)v17)
          {
            swift_bridgeObjectRetain();
            uint64_t v55 = (void *)OUTLINED_FUNCTION_16_27();
            outlined consume of MLDataValue(v55, v56, v57);
            char v52 = (void *)OUTLINED_FUNCTION_16_27();
LABEL_49:
            outlined consume of MLDataValue(v52, v53, v54);
            uint64_t v3 = v15;
            uint64_t v4 = v66;
            uint64_t v5 = v67;
          }
          else
          {
            OUTLINED_FUNCTION_45_9();
            char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRetain();
            outlined consume of MLDataValue(*(void **)&v31, v32, 2);
            double v40 = COERCE_DOUBLE(OUTLINED_FUNCTION_16_27());
LABEL_40:
            outlined consume of MLDataValue(*(void **)&v40, v41, v42);
            uint64_t v3 = v15;
            uint64_t v4 = v66;
            uint64_t v5 = v67;
            if ((v33 & 1) == 0) {
              return 0;
            }
          }
          continue;
        }
        outlined copy of MLDataValue(*(id *)v30, *(id *)(v30 + 8), 2);
        swift_bridgeObjectRetain();
LABEL_55:
        outlined copy of MLDataValue(*(id *)&v18, (id)v17, v19);
        uint64_t v60 = (void *)OUTLINED_FUNCTION_45_9();
        outlined consume of MLDataValue(v60, v61, v33);
        outlined consume of MLDataValue(*(void **)&v18, (id)v17, v19);
        uint64_t v62 = (void *)OUTLINED_FUNCTION_45_9();
        outlined consume of MLDataValue(v62, v63, v33);
LABEL_56:
        outlined consume of MLDataValue(*(void **)&v18, (id)v17, v19);
        return 0;
      case 3:
        if (v19 != 3)
        {
          swift_retain_n();
          goto LABEL_55;
        }
        double v68 = v18;
        double v69 = v31;
        outlined copy of MLDataValue(*(id *)&v31, v32, 3);
        OUTLINED_FUNCTION_17_24();
        OUTLINED_FUNCTION_17_24();
        static MLDataValue.SequenceType.== infix(_:_:)(&v69, &v68);
        uint64_t v43 = (void *)OUTLINED_FUNCTION_24_24();
        outlined consume of MLDataValue(v43, v44, 3);
        outlined consume of MLDataValue(*(void **)&v18, (id)v17, 3);
        outlined consume of MLDataValue(*(void **)&v18, (id)v17, 3);
        outlined consume of MLDataValue(*(void **)&v31, v32, 3);
        outlined consume of MLDataValue(*(void **)&v31, v32, 3);
        double v40 = v18;
        uint64_t v41 = (void *)v17;
        char v42 = 3;
        goto LABEL_40;
      case 4:
        if (v19 != 4)
        {
          swift_bridgeObjectRetain_n();
          goto LABEL_55;
        }
        outlined copy of MLDataValue(*(id *)v30, *(id *)(v30 + 8), 4);
        OUTLINED_FUNCTION_18_18();
        OUTLINED_FUNCTION_18_18();
        specialized static Dictionary<>.== infix(_:_:)(*(void *)&v31, *(void *)&v18);
        uint64_t v45 = (void *)OUTLINED_FUNCTION_24_24();
        outlined consume of MLDataValue(v45, v46, 4);
        outlined consume of MLDataValue(*(void **)&v18, (id)v17, 4);
        outlined consume of MLDataValue(*(void **)&v18, (id)v17, 4);
        outlined consume of MLDataValue(*(void **)&v31, v32, 4);
        outlined consume of MLDataValue(*(void **)&v31, v32, 4);
        double v40 = v18;
        uint64_t v41 = (void *)v17;
        char v42 = 4;
        goto LABEL_40;
      case 5:
        if (v19 != 5)
        {
          id v59 = *(id *)&v31;
          goto LABEL_55;
        }
        char v33 = type metadata accessor for NSObject();
        outlined copy of MLDataValue(*(id *)&v31, v32, 5);
        OUTLINED_FUNCTION_15_26();
        OUTLINED_FUNCTION_15_26();
        static NSObject.== infix(_:_:)();
        int v47 = (void *)OUTLINED_FUNCTION_24_24();
        outlined consume of MLDataValue(v47, v48, 5);
        outlined consume of MLDataValue(*(void **)&v18, (id)v17, 5);
        outlined consume of MLDataValue(*(void **)&v18, (id)v17, 5);
        outlined consume of MLDataValue(*(void **)&v31, v32, 5);
        outlined consume of MLDataValue(*(void **)&v31, v32, 5);
        double v40 = v18;
        uint64_t v41 = (void *)v17;
        char v42 = 5;
        goto LABEL_40;
      case 6:
        if (v19 != 6 || (v17 | *(void *)&v18) != 0) {
          goto LABEL_55;
        }
        long long v50 = (void *)OUTLINED_FUNCTION_45_9();
        outlined consume of MLDataValue(v50, v51, 6);
        char v52 = 0;
        uint64_t v53 = 0;
        char v54 = 6;
        goto LABEL_49;
      default:
        if (v19) {
          goto LABEL_55;
        }
        uint64_t v34 = (void *)OUTLINED_FUNCTION_45_9();
        outlined consume of MLDataValue(v34, v35, 0);
        outlined consume of MLDataValue(*(void **)&v18, (id)v17, 0);
        BOOL v36 = *(void *)&v31 == *(void *)&v18;
LABEL_26:
        uint64_t v3 = v15;
        uint64_t v4 = v66;
        uint64_t v5 = v67;
        if (!v36) {
          return 0;
        }
        continue;
    }
  }
}

void specialized static Dictionary<>.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v56 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v56 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v56);
  uint64_t v55 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v43 - v7;
  if (a1 == a2 || a1[2] != a2[2]) {
    return;
  }
  uint64_t v9 = a1 + 8;
  OUTLINED_FUNCTION_3_47();
  id v46 = a2;
  uint64_t v47 = v11;
  id v51 = (void (**)(char *, uint64_t))(v4 + 8);
  uint64_t v52 = v4 + 16;
  uint64_t v44 = v4;
  uint64_t v45 = a1;
  uint64_t v43 = a1 + 8;
  if (!v12) {
    goto LABEL_5;
  }
LABEL_4:
  OUTLINED_FUNCTION_29_20();
  uint64_t v48 = v13;
  uint64_t v49 = v14;
  for (unint64_t i = v15 | (v14 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v19 << 6))
  {
    char v25 = (uint64_t *)(a1[6] + 16 * i);
    uint64_t v26 = *v25;
    uint64_t v27 = v25[1];
    uint64_t v28 = *(void *)(a1[7] + 8 * i);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27);
    char v31 = v30;
    swift_bridgeObjectRelease();
    if ((v31 & 1) == 0
      || (uint64_t v32 = *(void *)(a2[7] + 8 * v29), v33 = *(void *)(v32 + 16), v33 != *(void *)(v28 + 16)))
    {
LABEL_39:
      swift_bridgeObjectRelease();
      return;
    }
    if (v33 && v32 != v28)
    {
      unint64_t v34 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
      uint64_t v50 = *(void *)(v4 + 72);
      id v35 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
      swift_bridgeObjectRetain();
      unint64_t v36 = 0;
      uint64_t v53 = v28;
      uint64_t v54 = v32;
      while (1)
      {
        uint64_t v37 = v56;
        v35(v8, v32 + v34, v56);
        if (v36 >= *(void *)(v28 + 16)) {
          break;
        }
        id v38 = v8;
        uint64_t v39 = v55;
        v35(v55, v28 + v34, v37);
        lazy protocol witness table accessor for type URL and conformance URL();
        char v40 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v41 = *v51;
        char v42 = v39;
        uint64_t v8 = v38;
        (*v51)(v42, v37);
        v41(v38, v37);
        if ((v40 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          goto LABEL_39;
        }
        ++v36;
        v34 += v50;
        uint64_t v28 = v53;
        uint64_t v32 = v54;
        if (v33 == v36)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          a1 = v45;
          a2 = v46;
          uint64_t v9 = v43;
          uint64_t v4 = v44;
          goto LABEL_35;
        }
      }
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    swift_bridgeObjectRelease();
LABEL_35:
    uint64_t v10 = v49;
    if (v48) {
      goto LABEL_4;
    }
LABEL_5:
    uint64_t v17 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_42;
    }
    if (v17 >= v47) {
      return;
    }
    unint64_t v18 = v9[v17];
    uint64_t v19 = v10 + 1;
    if (!v18)
    {
      OUTLINED_FUNCTION_27_19();
      if (v20 == v21) {
        return;
      }
      unint64_t v18 = v9[v19];
      if (!v18)
      {
        OUTLINED_FUNCTION_27_19();
        if (v20 == v21) {
          return;
        }
        unint64_t v18 = v9[v19];
        if (!v18)
        {
          OUTLINED_FUNCTION_27_19();
          if (v20 == v21) {
            return;
          }
          unint64_t v18 = v9[v19];
          if (!v18) {
            break;
          }
        }
      }
    }
LABEL_24:
    uint64_t v48 = (v18 - 1) & v18;
    uint64_t v49 = v19;
  }
  uint64_t v23 = v22 + 4;
  if (v23 >= v47) {
    return;
  }
  unint64_t v18 = v9[v23];
  if (v18)
  {
    uint64_t v19 = v23;
    goto LABEL_24;
  }
  while (!__OFADD__(v23, 1))
  {
    OUTLINED_FUNCTION_27_19();
    if (v20 == v21) {
      return;
    }
    unint64_t v18 = v9[v19];
    uint64_t v23 = v24 + 1;
    if (v18) {
      goto LABEL_24;
    }
  }
LABEL_43:
  __break(1u);
}

void specialized static Dictionary<>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (a1 == a2 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return;
  }
  int64_t v4 = 0;
  uint64_t v5 = a1 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a1 + 64);
  int64_t v35 = (unint64_t)(v6 + 63) >> 6;
  if (!v8) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v9 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v9 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v4 << 6))
  {
    char v20 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    uint64_t v23 = *(void **)(*(void *)(a1 + 56) + 8 * i);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v21, v22);
    char v26 = v25;
    swift_bridgeObjectRelease();
    if ((v26 & 1) == 0 || (v27 = *(void **)(*(void *)(a2 + 56) + 8 * v24), unint64_t v28 = v27[2], v28 != v23[2]))
    {
LABEL_56:
      swift_bridgeObjectRelease();
      return;
    }
    if (v28) {
      BOOL v29 = v27 == v23;
    }
    else {
      BOOL v29 = 1;
    }
    if (!v29)
    {
      BOOL v30 = v27[4] == v23[4] && v27[5] == v23[5];
      if (!v30 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_56;
      }
      if (v28 != 1)
      {
        BOOL v31 = v27[6] == v23[6] && v27[7] == v23[7];
        if (!v31 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          goto LABEL_56;
        }
        if (v28 != 2)
        {
          uint64_t v32 = 0;
          unint64_t v33 = 2;
          while (v33 < v28)
          {
            BOOL v34 = v27[v32 + 8] == v23[v32 + 8] && v27[v32 + 9] == v23[v32 + 9];
            if (!v34 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
              goto LABEL_56;
            }
            ++v33;
            v32 += 2;
            if (v28 == v33) {
              goto LABEL_53;
            }
          }
          __break(1u);
LABEL_59:
          __break(1u);
          goto LABEL_60;
        }
      }
    }
LABEL_53:
    swift_bridgeObjectRelease();
    if (v8) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v11 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      goto LABEL_59;
    }
    if (v11 >= v35) {
      return;
    }
    unint64_t v12 = *(void *)(v5 + 8 * v11);
    ++v4;
    if (!v12)
    {
      int64_t v4 = v11 + 1;
      OUTLINED_FUNCTION_28_17();
      if (v14 == v15) {
        return;
      }
      unint64_t v12 = *(void *)(v5 + 8 * v4);
      if (!v12)
      {
        int64_t v4 = v13 + 2;
        OUTLINED_FUNCTION_28_17();
        if (v14 == v15) {
          return;
        }
        unint64_t v12 = *(void *)(v5 + 8 * v4);
        if (!v12)
        {
          int64_t v4 = v16 + 3;
          OUTLINED_FUNCTION_28_17();
          if (v14 == v15) {
            return;
          }
          unint64_t v12 = *(void *)(v5 + 8 * v4);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_26:
    unint64_t v8 = (v12 - 1) & v12;
  }
  int64_t v18 = v17 + 4;
  if (v18 >= v35) {
    return;
  }
  unint64_t v12 = *(void *)(v5 + 8 * v18);
  if (v12)
  {
    int64_t v4 = v18;
    goto LABEL_26;
  }
  while (1)
  {
    int64_t v4 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    OUTLINED_FUNCTION_28_17();
    if (v14 == v15) {
      return;
    }
    unint64_t v12 = *(void *)(v5 + 8 * v4);
    int64_t v18 = v19 + 1;
    if (v12) {
      goto LABEL_26;
    }
  }
LABEL_60:
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type MLDataValue.ValueType and conformance MLDataValue.ValueType()
{
  unint64_t result = lazy protocol witness table cache variable for type MLDataValue.ValueType and conformance MLDataValue.ValueType;
  if (!lazy protocol witness table cache variable for type MLDataValue.ValueType and conformance MLDataValue.ValueType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLDataValue.ValueType and conformance MLDataValue.ValueType);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for MLDataValue(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  int64_t v4 = *(void **)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of MLDataValue(*(id *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for MLDataValue(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  int64_t v4 = *(void **)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of MLDataValue(*(id *)a2, v4, v5);
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void **)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of MLDataValue(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for MLDataValue(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  int64_t v4 = *(void **)a1;
  char v5 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of MLDataValue(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLDataValue(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFA && *(unsigned char *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 249;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 6) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MLDataValue(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 250;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for MLDataValue(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 5u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 6);
  }
}

uint64_t destructiveInjectEnumTag for MLDataValue(uint64_t result, unsigned int a2)
{
  if (a2 >= 6)
  {
    *(void *)unint64_t result = a2 - 6;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 6;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

void type metadata accessor for MLDataValue()
{
}

void type metadata accessor for MLDataValue.SequenceType()
{
}

void type metadata accessor for MLDataValue.DictionaryType()
{
}

void type metadata accessor for MLDataValue.MultiArrayType()
{
}

unsigned char *storeEnumTagSinglePayload for MLDataValue.ValueType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2271BD8B4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

void type metadata accessor for MLDataValue.ValueType()
{
}

uint64_t outlined destroy of (key: AnyHashable, value: Any)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: AnyHashable, value: Any));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2271BD948()
{
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t OUTLINED_FUNCTION_0_24()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_1_40()
{
  return 0x616E6F6974636944;
}

void OUTLINED_FUNCTION_2_47()
{
  outlined consume of MLDataValue(v0, v1, 3);
}

uint64_t OUTLINED_FUNCTION_4_44()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_5_39()
{
  return 0x72724169746C754DLL;
}

uint64_t OUTLINED_FUNCTION_7_35()
{
  return 0x65636E6575716553;
}

void OUTLINED_FUNCTION_8_30()
{
  outlined consume of MLDataValue(v0, v1, 5);
}

void OUTLINED_FUNCTION_9_30(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v13 = v10;
  uint64_t v14 = v11;
  String.append(_:)(*(Swift::String *)&v13);
}

uint64_t OUTLINED_FUNCTION_12_22()
{
  return 0x676E69727453;
}

uint64_t OUTLINED_FUNCTION_13_30()
{
  return 0x656C62756F44;
}

uint64_t OUTLINED_FUNCTION_14_26()
{
  return v0;
}

id OUTLINED_FUNCTION_15_26()
{
  outlined copy of MLDataValue(v1, v0, 5);
  return outlined copy of MLDataValue(v2, v3, 5);
}

uint64_t OUTLINED_FUNCTION_16_27()
{
  return v0;
}

id OUTLINED_FUNCTION_17_24()
{
  outlined copy of MLDataValue(v1, v0, 3);
  return outlined copy of MLDataValue(v2, v3, 3);
}

id OUTLINED_FUNCTION_18_18()
{
  outlined copy of MLDataValue(v1, v0, 4);
  return outlined copy of MLDataValue(v2, v3, 4);
}

id OUTLINED_FUNCTION_19_26()
{
  outlined copy of MLDataValue(v2, v3, 5);
  return outlined copy of MLDataValue(v0, v1, 5);
}

id OUTLINED_FUNCTION_20_24()
{
  outlined copy of MLDataValue(v2, v3, 3);
  return outlined copy of MLDataValue(v0, v1, 3);
}

id OUTLINED_FUNCTION_21_25()
{
  outlined copy of MLDataValue(v2, v3, 4);
  return outlined copy of MLDataValue(v0, v1, 4);
}

uint64_t OUTLINED_FUNCTION_22_22()
{
  return BidirectionalCollection<>.joined(separator:)();
}

uint64_t OUTLINED_FUNCTION_23_17(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  outlined copy of MLDataValue(v12, v13, 3);
  return swift_retain_n();
}

uint64_t OUTLINED_FUNCTION_24_24()
{
  return v0;
}

__n128 OUTLINED_FUNCTION_25_23()
{
  unsigned __int8 v2 = v0[1].n128_u8[0];
  __n128 result = *v0;
  *(__n128 *)(v1 - 48) = *v0;
  *(unsigned char *)(v1 - 32) = v2;
  return result;
}

uint64_t OUTLINED_FUNCTION_30_21(void *a1, void *a2, char a3)
{
  outlined consume of MLDataValue(a1, a2, a3);
  return v3;
}

uint64_t MLDataValue.DictionaryType.description.getter()
{
  lazy protocol witness table accessor for type MLDataValue and conformance MLDataValue();

  return Dictionary.description.getter();
}

uint64_t MLDataValue.DictionaryType.init(_:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t MLDataValue.DictionaryType.count.getter()
{
  return *(void *)(*(void *)v0 + 16);
}

uint64_t specialized Collection<>.indices.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = a1;
  *(void *)(a2 + 8) = specialized Dictionary.startIndex.getter(a1);
  *(void *)(a2 + 16) = v4;
  *(unsigned char *)(a2 + 24) = v5 & 1;
  uint64_t v6 = *(unsigned int *)(a1 + 36);
  *(void *)(a2 + 32) = 1 << *(unsigned char *)(a1 + 32);
  *(void *)(a2 + 40) = v6;
  *(unsigned char *)(a2 + 48) = 0;

  return swift_bridgeObjectRetain();
}

uint64_t specialized Collection<>.indices.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = a1;
  a4[1] = a2;
  a4[2] = a3;
  a4[3] = 0;
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  uint64_t v5 = CMLSequence.size.getter();
  uint64_t v6 = specialized RandomAccessCollection<>.distance(from:to:)(0, v5);
  swift_retain();
  uint64_t v7 = CMLSequence.size.getter();
  uint64_t v8 = specialized RandomAccessCollection<>.distance(from:to:)(0, v7);
  uint64_t result = swift_release();
  if (v8 < 0)
  {
    __break(1u);
  }
  else
  {
    swift_retain();
    uint64_t v10 = CMLSequence.size.getter();
    uint64_t v11 = specialized RandomAccessCollection<>.distance(from:to:)(0, v10);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release_n();
    if ((v6 & 0x8000000000000000) == 0 && v11 >= v6)
    {
      a4[4] = v6;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized Collection.index(_:offsetBy:)(uint64_t result, uint64_t a2)
{
  if (a2 < 0)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  if (a2)
  {
    unint64_t v2 = result ^ 0x7FFFFFFFFFFFFFFFLL;
    unint64_t v3 = a2 - 1;
    while (v2 > v3)
    {
      ++result;
      if (!--a2) {
        return result;
      }
    }
    __break(1u);
    goto LABEL_8;
  }
  return result;
}

uint64_t specialized Collection.index(_:offsetBy:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  if (a4 < 0)
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
  }
  else
  {
    uint64_t v7 = a2;
    unint64_t v8 = result;
    uint64_t v9 = a6;
    char v10 = a3 & 1;
    if (a4)
    {
      uint64_t result = outlined copy of [A : B].Index._Variant<A, B>(result, a2, a3 & 1);
      uint64_t v12 = 0;
      uint64_t v13 = a5 + 64;
      uint64_t v14 = v7;
      uint64_t v15 = a5 + 96;
      while (1)
      {
        if (v10) {
          goto LABEL_31;
        }
        if ((v8 & 0x8000000000000000) != 0 || (uint64_t v16 = 1 << *(unsigned char *)(a5 + 32), (uint64_t)v8 >= v16))
        {
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
          goto LABEL_30;
        }
        unint64_t v17 = v8 >> 6;
        unint64_t v18 = *(void *)(v13 + 8 * (v8 >> 6));
        if (((v18 >> v8) & 1) == 0) {
          goto LABEL_28;
        }
        if (*(_DWORD *)(a5 + 36) != v7) {
          goto LABEL_29;
        }
        unint64_t v19 = v18 & (-2 << (v8 & 0x3F));
        if (v19)
        {
          unint64_t v8 = __clz(__rbit64(v19)) | v8 & 0xFFFFFFFFFFFFFFC0;
        }
        else
        {
          unint64_t v20 = v17 + 1;
          if (v17 + 1 >= (unint64_t)(v16 + 63) >> 6) {
            goto LABEL_22;
          }
          unint64_t v21 = *(void *)(v13 + 8 * v20);
          if (!v21)
          {
            unint64_t v22 = (unint64_t)(v16 + 63) >> 6;
            unint64_t v20 = v17 + 2;
            if (v17 + 2 >= v22) {
              goto LABEL_22;
            }
            unint64_t v21 = *(void *)(v13 + 8 * v20);
            if (!v21)
            {
              unint64_t v20 = v17 + 3;
              if (v17 + 3 >= v22) {
                goto LABEL_22;
              }
              unint64_t v21 = *(void *)(v13 + 8 * v20);
              if (!v21)
              {
                while (v17 + 4 < v22)
                {
                  unint64_t v21 = *(void *)(v15 + 8 * v17++);
                  if (v21)
                  {
                    uint64_t v23 = v8;
                    uint64_t v24 = v15;
                    uint64_t result = outlined consume of [MLDataValue : MLDataValue].Index._Variant(v23, v7, 0);
                    uint64_t v15 = v24;
                    unint64_t v20 = v17 + 3;
                    goto LABEL_13;
                  }
                }
                uint64_t v25 = v8;
                uint64_t v26 = v15;
                uint64_t result = outlined consume of [MLDataValue : MLDataValue].Index._Variant(v25, v7, 0);
                uint64_t v15 = v26;
LABEL_22:
                unint64_t v8 = v16;
                goto LABEL_23;
              }
            }
          }
LABEL_13:
          unint64_t v8 = __clz(__rbit64(v21)) + (v20 << 6);
        }
LABEL_23:
        char v10 = 0;
        ++v12;
        uint64_t v7 = v14;
        if (v12 >= a4)
        {
          uint64_t v7 = v14;
          uint64_t v9 = a6;
          goto LABEL_26;
        }
      }
    }
    uint64_t result = outlined copy of [A : B].Index._Variant<A, B>(result, a2, a3 & 1);
LABEL_26:
    *(void *)uint64_t v9 = v8;
    *(void *)(v9 + 8) = v7;
    *(unsigned char *)(v9 + 16) = v10;
  }
  return result;
}

uint64_t specialized Collection.index(_:offsetBy:limitedBy:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned int a6@<W5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  if (a4 < 0)
  {
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
  }
  else
  {
    uint64_t v14 = a2;
    unint64_t v15 = result;
    char v16 = a3 & 1;
    uint64_t result = outlined copy of [A : B].Index._Variant<A, B>(result, a2, a3 & 1);
    if (a4)
    {
      uint64_t v17 = 0;
      char v30 = a7 & 1;
      char v18 = (a3 | a7) & 1;
      uint64_t v19 = a8 + 64;
      uint64_t v20 = a5;
      while (1)
      {
        if (v18) {
          goto LABEL_35;
        }
        if (v14 != a6)
        {
          __break(1u);
LABEL_31:
          __break(1u);
LABEL_32:
          __break(1u);
LABEL_33:
          __break(1u);
          goto LABEL_34;
        }
        if (v15 == v20)
        {
          uint64_t result = outlined consume of [MLDataValue : MLDataValue].Index._Variant(v20, v14, 0);
          *(void *)a9 = 0;
          *(void *)(a9 + 8) = 0;
          *(unsigned char *)(a9 + 16) = -1;
          return result;
        }
        if ((v15 & 0x8000000000000000) != 0) {
          goto LABEL_31;
        }
        uint64_t v21 = 1 << *(unsigned char *)(a8 + 32);
        if ((uint64_t)v15 >= v21) {
          goto LABEL_31;
        }
        unint64_t v22 = v15 >> 6;
        unint64_t v23 = *(void *)(v19 + 8 * (v15 >> 6));
        if (((v23 >> v15) & 1) == 0) {
          goto LABEL_32;
        }
        if (*(_DWORD *)(a8 + 36) != a6) {
          goto LABEL_33;
        }
        unint64_t v24 = v23 & (-2 << (v15 & 0x3F));
        if (v24)
        {
          uint64_t result = outlined consume of [MLDataValue : MLDataValue].Index._Variant(v15, v14, 0);
          unint64_t v15 = __clz(__rbit64(v24)) | v15 & 0xFFFFFFFFFFFFFFC0;
        }
        else
        {
          unint64_t v25 = v22 + 1;
          if (v22 + 1 < (unint64_t)(v21 + 63) >> 6)
          {
            unint64_t v26 = *(void *)(v19 + 8 * v25);
            if (v26) {
              goto LABEL_15;
            }
            unint64_t v27 = (unint64_t)(v21 + 63) >> 6;
            unint64_t v25 = v22 + 2;
            if (v22 + 2 >= v27)
            {
LABEL_24:
              uint64_t result = outlined consume of [MLDataValue : MLDataValue].Index._Variant(v15, v14, 0);
              unint64_t v15 = v21;
            }
            else
            {
              unint64_t v26 = *(void *)(v19 + 8 * v25);
              if (!v26)
              {
                unint64_t v25 = v22 + 3;
                if (v22 + 3 >= v27) {
                  goto LABEL_24;
                }
                unint64_t v26 = *(void *)(v19 + 8 * v25);
                if (!v26)
                {
                  while (v22 + 4 < v27)
                  {
                    unint64_t v26 = *(void *)(a8 + 96 + 8 * v22++);
                    if (v26)
                    {
                      unint64_t v25 = v22 + 3;
                      goto LABEL_15;
                    }
                  }
                  goto LABEL_24;
                }
              }
LABEL_15:
              uint64_t result = outlined consume of [MLDataValue : MLDataValue].Index._Variant(v15, v14, 0);
              unint64_t v15 = __clz(__rbit64(v26)) | (v25 << 6);
            }
            uint64_t v20 = a5;
            goto LABEL_26;
          }
          uint64_t result = outlined consume of [MLDataValue : MLDataValue].Index._Variant(v15, v14, 0);
          unint64_t v15 = v21;
        }
LABEL_26:
        ++v17;
        uint64_t v14 = a6;
        char v18 = v30;
        if (v17 == a4)
        {
          char v16 = 0;
          uint64_t v14 = a6;
          break;
        }
      }
    }
    *(void *)a9 = v15;
    *(void *)(a9 + 8) = v14;
    *(unsigned char *)(a9 + 16) = v16;
  }
  return result;
}

uint64_t specialized Collection.index(_:offsetBy:limitedBy:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2 < 0)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  if (a2)
  {
    while (1)
    {
      if (a3 == result) {
        return 0;
      }
      if (result == 0x7FFFFFFFFFFFFFFFLL) {
        break;
      }
      ++result;
      if (!--a2) {
        return result;
      }
    }
    __break(1u);
    goto LABEL_10;
  }
  return result;
}

uint64_t specialized Collection.distance(from:to:)(uint64_t result, uint64_t a2, char a3, uint64_t a4, unsigned int a5, char a6, uint64_t a7)
{
  if (a6 & 1) != 0 || (a3) {
    goto LABEL_36;
  }
  unint64_t v8 = result;
  if (a4 < result) {
    goto LABEL_34;
  }
  if (a5 != a2)
  {
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    return result;
  }
  if (result != a4)
  {
    uint64_t v12 = a7 + 64;
    uint64_t v21 = a7 + 96;
    uint64_t v10 = 1;
    while (1)
    {
      if ((v8 & 0x8000000000000000) != 0 || (uint64_t v13 = 1 << *(unsigned char *)(a7 + 32), (uint64_t)v8 >= v13))
      {
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }
      unint64_t v14 = v8 >> 6;
      unint64_t v15 = *(void *)(v12 + 8 * (v8 >> 6));
      if (((v15 >> v8) & 1) == 0) {
        goto LABEL_32;
      }
      if (*(_DWORD *)(a7 + 36) != a5) {
        goto LABEL_33;
      }
      unint64_t v16 = v15 & (-2 << (v8 & 0x3F));
      if (v16)
      {
        uint64_t result = outlined consume of [MLDataValue : MLDataValue].Index._Variant(v8, a2, 0);
        unint64_t v8 = __clz(__rbit64(v16)) | v8 & 0xFFFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v17 = v14 + 1;
        if (v14 + 1 >= (unint64_t)(v13 + 63) >> 6) {
          goto LABEL_26;
        }
        unint64_t v18 = *(void *)(v12 + 8 * v17);
        if (!v18)
        {
          unint64_t v19 = (unint64_t)(v13 + 63) >> 6;
          unint64_t v17 = v14 + 2;
          if (v14 + 2 >= v19) {
            goto LABEL_26;
          }
          unint64_t v18 = *(void *)(v12 + 8 * v17);
          if (!v18)
          {
            unint64_t v17 = v14 + 3;
            if (v14 + 3 >= v19) {
              goto LABEL_26;
            }
            unint64_t v18 = *(void *)(v12 + 8 * v17);
            if (!v18)
            {
              while (v14 + 4 < v19)
              {
                unint64_t v18 = *(void *)(v21 + 8 * v14++);
                if (v18)
                {
                  unint64_t v17 = v14 + 3;
                  goto LABEL_17;
                }
              }
LABEL_26:
              uint64_t result = outlined consume of [MLDataValue : MLDataValue].Index._Variant(v8, a2, 0);
              unint64_t v8 = v13;
              goto LABEL_27;
            }
          }
        }
LABEL_17:
        uint64_t result = outlined consume of [MLDataValue : MLDataValue].Index._Variant(v8, a2, 0);
        unint64_t v8 = __clz(__rbit64(v18)) | (v17 << 6);
      }
LABEL_27:
      if (v8 == a4) {
        return v10;
      }
      a2 = a5;
      if (__OFADD__(v10++, 1))
      {
        __break(1u);
        goto LABEL_31;
      }
    }
  }
  outlined consume of [MLDataValue : MLDataValue].Index._Variant(a4, a2, 0);
  return 0;
}

uint64_t specialized Collection.distance(from:to:)(uint64_t result, uint64_t a2)
{
  if (a2 < result)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (a2 == result) {
    return 0;
  }
  uint64_t v2 = result;
  uint64_t v3 = a2 - result;
  if (a2 > result)
  {
    uint64_t result = 0;
    unint64_t v4 = ~v2 + a2;
    while (v4 <= 0x7FFFFFFFFFFFFFFELL)
    {
      if (v3 == ++result) {
        return result;
      }
    }
    __break(1u);
    goto LABEL_10;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t MLDataValue.DictionaryType.init(from:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = specialized handling<A, B>(_:_:)(*(void *)(a1 + 16));
  uint64_t v4 = result;
  if (result)
  {
    type metadata accessor for CMLDictionary();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v4;
    v16[0] = v5;
    swift_retain();
    specialized Dictionary.init<A>(uniqueKeysWithValues:)((uint64_t)v16, v6, v7, v8, v9, v10, v11, v12, v15, v16[0], (uint64_t)closure #1 in MLDataValue.DictionaryType.init(from:), 0, (uint64_t)specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:), 0, (uint64_t)specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:), 0, v16[7], v16[8]);
    uint64_t v14 = v13;
    swift_release();
    uint64_t result = swift_release();
    *a2 = v14;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MLDataValue.DictionaryType.featureValue.getter()
{
  uint64_t v2 = *v0;
  uint64_t v3 = MEMORY[0x22A676330](0);
  if (!v3)
  {
LABEL_44:
    __break(1u);
    swift_bridgeObjectRelease();
LABEL_45:
    swift_release();
    OUTLINED_FUNCTION_4_22();
    while (1)
    {
LABEL_46:
      swift_unexpectedError();
      __break(1u);
      OUTLINED_FUNCTION_71_3();
    }
  }
  uint64_t v4 = v3;
  type metadata accessor for CMLDictionary();
  uint64_t inited = swift_initStackObject();
  uint64_t v65 = v4;
  *(void *)(inited + 16) = v4;
  uint64_t v6 = specialized Dictionary.startIndex.getter(v2);
  uint64_t v8 = v7;
  LOBYTE(v4) = v9;
  swift_bridgeObjectRetain();
  if (v4)
  {
LABEL_34:
    __break(1u);
  }
  else
  {
    uint64_t v1 = 0;
    uint64_t v67 = inited;
    uint64_t v68 = v2 + 64;
    uint64_t v66 = v2;
    while (2)
    {
      if (*(_DWORD *)(v2 + 36) != v8)
      {
        __break(1u);
        goto LABEL_38;
      }
      OUTLINED_FUNCTION_20_25();
      if (v6 != v10)
      {
        if ((v6 & 0x8000000000000000) == 0 && v6 < v10)
        {
          if ((*(void *)(v68 + (((unint64_t)v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v6))
          {
            uint64_t v11 = *(void *)(v2 + 48) + 24 * v6;
            uint64_t v13 = *(void **)v11;
            uint64_t v12 = *(void **)(v11 + 8);
            uint64_t v14 = *(unsigned __int8 *)(v11 + 16);
            uint64_t v15 = *(void *)(v2 + 56) + 24 * v6;
            unint64_t v17 = *(void **)v15;
            unint64_t v16 = *(void **)(v15 + 8);
            uint64_t v18 = *(unsigned __int8 *)(v15 + 16);
            unint64_t v19 = (void *)OUTLINED_FUNCTION_13_31(*(void **)v11, v12, *(unsigned char *)(v11 + 16));
            unint64_t v22 = (void *)OUTLINED_FUNCTION_13_31(v19, v20, v21);
            outlined consume of MLDataValue(v22, v23, v24);
            outlined consume of MLDataValue(v17, v16, v18);
            swift_bridgeObjectRetain();
            int v25 = v8;
            unint64_t v26 = v16;
            uint64_t v27 = specialized _NativeDictionary.index(after:)(v6, v25, 0, v2);
            uint64_t v29 = v28;
            HIDWORD(v69) = v30;
            swift_bridgeObjectRelease();
            outlined copy of MLDataValue(v13, v12, v14);
            outlined copy of MLDataValue(v17, v26, v18);
            outlined consume of MLDataValue(v17, v26, v18);
            uint64_t v71 = v27;
            id v72 = v26;
            uint64_t v70 = v29;
            switch(v14)
            {
              case 1:
                specialized handling<A, B>(_:_:)(v31, v32, v33, v34, v35, v36, v37, v38, v64, v65, v66, v67, v68, v69, v29, v27, (uint64_t)v26, v73, v74,
                  v75,
                  v76,
                  v77,
                  v78,
                  v79,
                  v80,
                  v81,
                  v82,
                  v83,
                  v84,
                  v85);
                if (v43) {
                  goto LABEL_16;
                }
                goto LABEL_40;
              case 2:
                type metadata accessor for CMLFeatureValue();
                swift_bridgeObjectRetain();
                CMLFeatureValue.__allocating_init(_:)();
                char v40 = (void *)OUTLINED_FUNCTION_3_48();
                char v42 = 2;
                goto LABEL_18;
              case 3:
                uint64_t v73 = (uint64_t)v13;
                MLDataValue.SequenceType.featureValue.getter();
                char v40 = (void *)OUTLINED_FUNCTION_3_48();
                char v42 = 3;
                goto LABEL_18;
              case 4:
                uint64_t v73 = (uint64_t)v13;
                MLDataValue.DictionaryType.featureValue.getter();
                char v40 = (void *)OUTLINED_FUNCTION_3_48();
                char v42 = 4;
                goto LABEL_18;
              case 5:
                uint64_t v73 = (uint64_t)v13;
                MLDataValue.MultiArrayType.featureValue.getter();
                char v40 = (void *)OUTLINED_FUNCTION_3_48();
                char v42 = 5;
LABEL_18:
                outlined consume of MLDataValue(v40, v41, v42);
                goto LABEL_20;
              case 6:
                type metadata accessor for CMLFeatureValue();
                CMLFeatureValue.__allocating_init()();
                goto LABEL_20;
              default:
                specialized handling<A, B>(_:_:)((uint64_t)v13, v32, v33, v34, v35, v36, v37, v38, v64, v65, v66, v67, v68, v69, v29, v27, (uint64_t)v26, v73, v74,
                  v75,
                  v76,
                  v77,
                  v78,
                  v79,
                  v80,
                  v81,
                  v82,
                  v83,
                  v84,
                  v85);
                if (!v39) {
                  goto LABEL_42;
                }
LABEL_16:
                type metadata accessor for CMLFeatureValue();
                swift_allocObject();
                OUTLINED_FUNCTION_4_28();
LABEL_20:
                Swift::String v44 = CMLFeatureValue.stringValue()();
                if (!v1)
                {
                  swift_release();
                  outlined copy of MLDataValue(v13, v12, v14);
                  uint64_t v45 = (uint64_t)v72;
                  outlined copy of MLDataValue(v17, v72, v18);
                  outlined consume of MLDataValue(v13, v12, v14);
                  switch(v18)
                  {
                    case 1:
                      specialized handling<A, B>(_:_:)(v46, v47, v48, v49, v50, v51, v52, v53, v64, v65, v66, v67, v68, v69, v70, v71, (uint64_t)v72, v73, v74,
                        v75,
                        v76,
                        v77,
                        v78,
                        v79,
                        v80,
                        v81,
                        v82,
                        v83,
                        v84,
                        v85);
                      if (v58) {
                        goto LABEL_28;
                      }
                      goto LABEL_41;
                    case 2:
                      type metadata accessor for CMLFeatureValue();
                      swift_bridgeObjectRetain();
                      CMLFeatureValue.__allocating_init(_:)();
                      uint64_t v55 = (void *)OUTLINED_FUNCTION_4_45();
                      char v57 = 2;
                      goto LABEL_30;
                    case 3:
                      uint64_t v73 = (uint64_t)v17;
                      MLDataValue.SequenceType.featureValue.getter();
                      uint64_t v55 = (void *)OUTLINED_FUNCTION_4_45();
                      char v57 = 3;
                      goto LABEL_30;
                    case 4:
                      uint64_t v73 = (uint64_t)v17;
                      MLDataValue.DictionaryType.featureValue.getter();
                      uint64_t v55 = (void *)OUTLINED_FUNCTION_4_45();
                      char v57 = 4;
                      goto LABEL_30;
                    case 5:
                      uint64_t v73 = (uint64_t)v17;
                      MLDataValue.MultiArrayType.featureValue.getter();
                      uint64_t v55 = (void *)OUTLINED_FUNCTION_4_45();
                      char v57 = 5;
LABEL_30:
                      outlined consume of MLDataValue(v55, v56, v57);
                      goto LABEL_33;
                    case 6:
                      type metadata accessor for CMLFeatureValue();
                      uint64_t v59 = CMLFeatureValue.__allocating_init()();
                      goto LABEL_32;
                    default:
                      specialized handling<A, B>(_:_:)((uint64_t)v17, v47, v48, v49, v50, v51, v52, v53, v64, v65, v66, v67, v68, v69, v70, v71, (uint64_t)v72, v73, v74,
                        v75,
                        v76,
                        v77,
                        v78,
                        v79,
                        v80,
                        v81,
                        v82,
                        v83,
                        v84,
                        v85);
                      if (!v54) {
                        goto LABEL_43;
                      }
LABEL_28:
                      type metadata accessor for CMLFeatureValue();
                      swift_allocObject();
                      uint64_t v59 = OUTLINED_FUNCTION_4_28();
LABEL_32:
                      uint64_t v45 = v59;
LABEL_33:
                      CMLDictionary.add(key:value:)(v44._countAndFlagsBits, v44._object, v45);
                      swift_bridgeObjectRelease();
                      swift_release();
                      outlined consume of MLDataValue(v13, v12, v14);
                      outlined consume of MLDataValue(v17, v72, v18);
                      uint64_t v2 = v66;
                      uint64_t v8 = v70;
                      uint64_t v6 = v71;
                      if ((v69 & 0x100000000) != 0) {
                        goto LABEL_34;
                      }
                      continue;
                  }
                }
                break;
            }
            goto LABEL_45;
          }
          goto LABEL_39;
        }
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
        goto LABEL_44;
      }
      break;
    }
  }
  swift_bridgeObjectRelease();
  outlined consume of [MLDataValue : MLDataValue].Index._Variant(v6, v8, 0);
  type metadata accessor for CMLFeatureValue();
  uint64_t v60 = swift_retain();
  uint64_t v61 = CMLFeatureValue.__allocating_init(_:)(v60);
  if (v1)
  {
    OUTLINED_FUNCTION_4_22();
    goto LABEL_46;
  }
  uint64_t v62 = v61;
  swift_setDeallocating();
  tc_v1_release();
  return v62;
}

uint64_t MLDataValue.DictionaryType.init<A>(uniqueKeysWithValues:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  OUTLINED_FUNCTION_0_15();
  uint64_t v7 = v6;
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_3_0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v10 - v9, a1, a2);
  lazy protocol witness table accessor for type MLDataValue and conformance MLDataValue();
  uint64_t v11 = Dictionary.init<A>(uniqueKeysWithValues:)();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, a2);
  *a3 = v11;
  return result;
}

uint64_t MLDataValue.DictionaryType.debugDescription.getter()
{
  lazy protocol witness table accessor for type MLDataValue and conformance MLDataValue();

  return Dictionary.debugDescription.getter();
}

uint64_t static MLDataValue.DictionaryType.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return specialized static Dictionary<>.== infix(_:_:)(*a1, *a2);
}

void MLDataValue.DictionaryType.init()(void *a1@<X8>)
{
  *a1 = MEMORY[0x263F8EE80];
}

BOOL MLDataValue.DictionaryType.isEmpty.getter()
{
  return *(void *)(*(void *)v0 + 16) == 0;
}

void MLDataValue.DictionaryType.subscript.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  if (!*(void *)(v3 + 16)) {
    goto LABEL_7;
  }
  uint64_t v4 = (void *)OUTLINED_FUNCTION_2_48();
  outlined copy of MLDataValue(v4, v5, v6);
  uint64_t v7 = OUTLINED_FUNCTION_2_48();
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8, v9);
  if ((v11 & 1) == 0)
  {
    unint64_t v19 = (void *)OUTLINED_FUNCTION_2_48();
    outlined consume of MLDataValue(v19, v20, v21);
LABEL_7:
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 16) = -1;
    return;
  }
  uint64_t v12 = *(void *)(v3 + 56) + 24 * v10;
  uint64_t v13 = *(void **)v12;
  uint64_t v14 = *(void **)(v12 + 8);
  *(void *)a1 = *(void *)v12;
  *(void *)(a1 + 8) = v14;
  char v15 = *(unsigned char *)(v12 + 16);
  *(unsigned char *)(a1 + 16) = v15;
  outlined copy of MLDataValue(v13, v14, v15);
  unint64_t v16 = (void *)OUTLINED_FUNCTION_2_48();

  outlined consume of MLDataValue(v16, v17, v18);
}

BOOL static MLDataValue.DictionaryType.Index.== infix(_:_:)(BOOL result, uint64_t a2)
{
  if ((*(unsigned char *)(result + 16) & 1) == 0 && (*(unsigned char *)(a2 + 16) & 1) == 0)
  {
    if (*(_DWORD *)(result + 8) == *(void *)(a2 + 8)) {
      return *(void *)result == *(void *)a2;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL static MLDataValue.DictionaryType.Index.< infix(_:_:)(BOOL result, uint64_t a2)
{
  if ((*(unsigned char *)(result + 16) & 1) == 0 && (*(unsigned char *)(a2 + 16) & 1) == 0)
  {
    if (*(_DWORD *)(result + 8) == *(void *)(a2 + 8)) {
      return *(void *)result < *(void *)a2;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for static Comparable.<= infix(_:_:) in conformance MLDataValue.DictionaryType.Index(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Comparable.<= infix(_:_:) in conformance MLDataValue.DictionaryType.Index(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))specialized static Comparable.<= infix(_:_:));
}

uint64_t protocol witness for static Comparable.>= infix(_:_:) in conformance MLDataValue.DictionaryType.Index(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Comparable.<= infix(_:_:) in conformance MLDataValue.DictionaryType.Index(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))specialized static Comparable.>= infix(_:_:));
}

uint64_t protocol witness for static Comparable.> infix(_:_:) in conformance MLDataValue.DictionaryType.Index(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Comparable.<= infix(_:_:) in conformance MLDataValue.DictionaryType.Index(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))specialized static Comparable.> infix(_:_:));
}

uint64_t protocol witness for static Comparable.<= infix(_:_:) in conformance MLDataValue.DictionaryType.Index(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void, void, void, void))
{
  return a5(*(void *)a1, *(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned __int8 *)(a2 + 16));
}

uint64_t MLDataValue.DictionaryType.startIndex.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = specialized Dictionary.startIndex.getter(*v1);
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5 & 1;
  return result;
}

uint64_t specialized Dictionary.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 80);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  uint64_t v2 = 128;
  for (uint64_t i = 11; i - 8 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

void MLDataValue.DictionaryType.endIndex.getter(uint64_t a1@<X8>)
{
  uint64_t v2 = *(unsigned int *)(*(void *)v1 + 36);
  *(void *)a1 = 1 << *(unsigned char *)(*(void *)v1 + 32);
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = 0;
}

void MLDataValue.DictionaryType.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5) {
    goto LABEL_12;
  }
  if (a3 < 0 || (OUTLINED_FUNCTION_20_25(), v10 <= (uint64_t)v7))
  {
    __break(1u);
    goto LABEL_10;
  }
  if (((*(void *)(v9 + 8 * (v7 >> 6) + 64) >> v7) & 1) == 0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (*(_DWORD *)(v9 + 36) != v8)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return;
  }
  uint64_t v11 = 3 * v7;
  uint64_t v12 = *(void *)(v9 + 56);
  uint64_t v13 = *(void *)(v9 + 48) + 24 * v7;
  uint64_t v14 = *(void **)v13;
  char v15 = *(void **)(v13 + 8);
  *(void *)uint64_t v5 = *(void *)v13;
  *(void *)(v5 + 8) = v15;
  char v16 = *(unsigned char *)(v13 + 16);
  *(unsigned char *)(v5 + 16) = v16;
  uint64_t v17 = v12 + 8 * v11;
  char v18 = *(void **)v17;
  unint64_t v19 = *(void **)(v17 + 8);
  *(void *)uint64_t v6 = *(void *)v17;
  *(void *)(v6 + 8) = v19;
  char v20 = *(unsigned char *)(v17 + 16);
  *(unsigned char *)(v6 + 16) = v20;
  outlined copy of MLDataValue(v14, v15, v16);

  outlined copy of MLDataValue(v18, v19, v20);
}

void specialized Dictionary.subscript.getter(uint64_t a1, unint64_t a2)
{
}

{
  specialized Dictionary.subscript.getter(a1, a2);
}

{
  int v3;
  uint64_t v4;
  void (*v5)(void);
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);

  if ((a2 & 0x8000000000000000) != 0 || (OUTLINED_FUNCTION_20_25(), v7 <= v6))
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(v4 + 8 * (a2 >> 6) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(v4 + 36) == v3)
  {
    v5(0);
    OUTLINED_FUNCTION_46_4();
    v8();
    swift_bridgeObjectRetain();
    return;
  }
LABEL_8:
  __break(1u);
}

uint64_t MLDataValue.DictionaryType.index(after:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = specialized _NativeDictionary.index(after:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), *v2);
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v5;
  *(unsigned char *)(a2 + 16) = v6 & 1;
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance MLDataValue.DictionaryType(void *a1, uint64_t a2))()
{
  uint64_t v4 = (char *)malloc(0x80uLL);
  *a1 = v4;
  MLDataValue.DictionaryType.subscript.getter((uint64_t)v4, (uint64_t)(v4 + 24), a2);
  uint64_t v5 = *(void **)v4;
  *((void *)v4 + 6) = *(void *)v4;
  char v6 = v4 + 48;
  unint64_t v7 = (void *)*((void *)v4 + 1);
  *((void *)v4 + 12) = v5;
  *((void *)v4 + 13) = v7;
  char v8 = v4[16];
  v4[41] = v8;
  *((void *)v4 + 7) = v7;
  v4[64] = v8;
  uint64_t v9 = (void *)*((void *)v4 + 3);
  uint64_t v10 = (void *)*((void *)v4 + 4);
  *((void *)v6 + 8) = v9;
  *((void *)v6 + 9) = v10;
  char v11 = *(v6 - 8);
  *(v6 - 6) = v11;
  *((void *)v6 + 3) = v9;
  *((void *)v6 + 4) = v10;
  unsigned char v6[40] = v11;
  outlined copy of MLDataValue(v5, v7, v8);
  outlined copy of MLDataValue(v9, v10, v11);
  return protocol witness for Collection.subscript.read in conformance MLDataValue.DictionaryType;
}

void protocol witness for Collection.subscript.read in conformance MLDataValue.DictionaryType()
{
  OUTLINED_FUNCTION_19_4();
  uint64_t v2 = *(void **)(*(void *)v0 + 112);
  uint64_t v1 = *(void **)(*(void *)v0 + 120);
  uint64_t v4 = *(void **)(*(void *)v0 + 96);
  uint64_t v3 = *(void **)(*(void *)v0 + 104);
  uint64_t v5 = *(void **)(*(void *)v0 + 72);
  char v6 = *(void **)(*(void *)v0 + 80);
  char v7 = *(unsigned char *)(*(void *)v0 + 88);
  char v8 = *(unsigned char *)(*(void *)v0 + 41);
  char v9 = *(unsigned char *)(*(void *)v0 + 42);
  outlined consume of MLDataValue(*(void **)(*(void *)v0 + 48), *(id *)(*(void *)v0 + 56), *(unsigned char *)(*(void *)v0 + 64));
  outlined consume of MLDataValue(v5, v6, v7);
  outlined consume of MLDataValue(v4, v3, v8);
  outlined consume of MLDataValue(v2, v1, v9);
  OUTLINED_FUNCTION_12_4();
  free(v10);
}

uint64_t protocol witness for Collection.subscript.getter in conformance MLDataValue.DictionaryType@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  long long v3 = a1[1];
  long long v5 = *a1;
  v6[0] = v3;
  *(_OWORD *)((char *)v6 + 9) = *(long long *)((char *)a1 + 25);
  return specialized Collection<>.subscript.getter((uint64_t)&v5, *v2, a2);
}

uint64_t protocol witness for Collection.indices.getter in conformance MLDataValue.DictionaryType@<X0>(uint64_t a1@<X8>)
{
  return specialized Collection<>.indices.getter(*v1, a1);
}

void protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance MLDataValue.DictionaryType(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = -2;
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance MLDataValue.DictionaryType@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return specialized Collection.index(_:offsetBy:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), a2, *v3, a3);
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance MLDataValue.DictionaryType@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return specialized Collection.index(_:offsetBy:limitedBy:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), a2, *(void *)a3, *(void *)(a3 + 8), *(unsigned char *)(a3 + 16), *v4, a4);
}

uint64_t protocol witness for Collection.distance(from:to:) in conformance MLDataValue.DictionaryType(uint64_t a1, uint64_t a2)
{
  return specialized Collection.distance(from:to:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned char *)(a2 + 16), *v2);
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance MLDataValue.DictionaryType(uint64_t *a1, long long *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance MLDataValue.DictionaryType(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, long long *, void))specialized Collection._failEarlyRangeCheck(_:bounds:));
}

{
  return protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance MLDataValue.DictionaryType(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, long long *, void))specialized Collection._failEarlyRangeCheck(_:bounds:));
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance MLDataValue.DictionaryType(uint64_t *a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, long long *, void))
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v8 = *((unsigned __int8 *)a1 + 16);
  long long v9 = a2[1];
  long long v11 = *a2;
  v12[0] = v9;
  *(_OWORD *)((char *)v12 + 9) = *(long long *)((char *)a2 + 25);
  return a5(v6, v7, v8, &v11, *v5);
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance MLDataValue.DictionaryType(long long *a1, long long *a2)
{
  long long v2 = a1[1];
  long long v5 = *a1;
  v6[0] = v2;
  *(_OWORD *)((char *)v6 + 9) = *(long long *)((char *)a1 + 25);
  long long v3 = a2[1];
  long long v7 = *a2;
  v8[0] = v3;
  *(_OWORD *)((char *)v8 + 9) = *(long long *)((char *)a2 + 25);
  return specialized Collection._failEarlyRangeCheck(_:bounds:)(&v5, &v7);
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance MLDataValue.DictionaryType(uint64_t a1)
{
  uint64_t v2 = OUTLINED_FUNCTION_11_30();
  uint64_t v6 = specialized _NativeDictionary.index(after:)(v2, v3, v4, v5);
  uint64_t v8 = v7;
  char v10 = v9;
  uint64_t v11 = OUTLINED_FUNCTION_11_30();
  uint64_t result = outlined consume of [MLDataValue : MLDataValue].Index._Variant(v11, v12, v13);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v8;
  *(unsigned char *)(a1 + 16) = v10 & 1;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance MLDataValue.DictionaryType@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t result = specialized Dictionary.startIndex.getter(v3);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = result;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6 & 1;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance MLDataValue.DictionaryType()
{
  return specialized Array.count.getter(*v0);
}

void *protocol witness for Sequence._copyToContiguousArray() in conformance MLDataValue.DictionaryType()
{
  return specialized Collection._copyToContiguousArray()(*v0);
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance MLDataValue.DictionaryType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copyContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t CMLDictionary.subscript.getter(uint64_t a1)
{
  return CMLDictionary.keyAndValue(at:)(a1);
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance CMLDictionary@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized RandomAccessCollection<>.index(before:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance CMLDictionary(uint64_t *a1)
{
  uint64_t result = specialized RandomAccessCollection<>.index(before:)(*a1);
  *a1 = result;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance CMLDictionary@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = specialized RandomAccessCollection<>.index(_:offsetBy:)(*a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance CMLDictionary(uint64_t *a1, uint64_t *a2)
{
  return specialized RandomAccessCollection<>.distance(from:to:)(*a1, *a2);
}

uint64_t protocol witness for Collection.endIndex.getter in conformance CMLDictionary@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CMLDictionary.endIndex.getter();
  *a1 = result;
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance CMLDictionary(uint64_t *a1, uint64_t *a2))()
{
  *a1 = CMLDictionary.subscript.getter(*a2);
  a1[1] = v3;
  return protocol witness for Collection.subscript.read in conformance CMLDictionary;
}

uint64_t protocol witness for Collection.subscript.read in conformance CMLDictionary()
{
  swift_release();

  return swift_release();
}

uint64_t protocol witness for Collection.subscript.getter in conformance CMLDictionary@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized Collection<>.subscript.getter(*a1, a1[1]);
  *a2 = result;
  a2[1] = v4;
  a2[2] = v5;
  return result;
}

uint64_t protocol witness for Collection.indices.getter in conformance CMLDictionary@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized RandomAccessCollection<>.indices.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

BOOL protocol witness for Collection.isEmpty.getter in conformance CMLDictionary()
{
  return specialized Collection.isEmpty.getter();
}

uint64_t protocol witness for Collection.count.getter in conformance CMLDictionary()
{
  return specialized Collection.count.getter();
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance CMLDictionary@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance CMLDictionary(uint64_t a1)
{
  uint64_t v1 = OUTLINED_FUNCTION_20_13(a1);
  return specialized Collection._failEarlyRangeCheck(_:bounds:)(v1, v2, v3, v4);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  uint64_t v1 = OUTLINED_FUNCTION_20_13(a1);
  return specialized Collection._failEarlyRangeCheck(_:bounds:)(v1, v2, v3, v4);
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance CMLDictionary(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return specialized Collection._failEarlyRangeCheck(_:bounds:)(*a1, a1[1], *a2, a2[1], a5);
}

uint64_t protocol witness for Collection.index(after:) in conformance CMLDictionary@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized RandomAccessCollection<>.index(after:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance CMLDictionary(uint64_t *a1)
{
  uint64_t result = specialized RandomAccessCollection<>.index(after:)(*a1);
  *a1 = result;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance CMLDictionary()
{
  return specialized Collection.underestimatedCount.getter();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance CMLDictionary()
{
  return specialized Collection._copyToContiguousArray()();
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance CMLDictionary()
{
  return specialized Sequence._copyContents(initializing:)();
}

void *MLDataValue.DictionaryType.init(from:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = *(void **)a1;
  int v5 = *(unsigned __int8 *)(a1 + 16);
  if (v5 != 4)
  {
    outlined consume of MLDataValue(result, *(id *)(a1 + 8), v5);
    uint64_t result = 0;
  }
  *a2 = result;
  return result;
}

uint64_t MLDataValue.DictionaryType.dataValue.getter@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = *v1;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 4;
  return swift_bridgeObjectRetain();
}

void closure #1 in MLDataValue.DictionaryType.init(from:)(uint64_t a1@<X8>)
{
  Swift::String v3 = CMLFeatureValue.stringValue()();
  if (v2)
  {

    uint64_t countAndFlagsBits = 0;
    char v5 = 0;
    int64x2_t v6 = (int64x2_t)xmmword_2272D0D90;
    long long v7 = 0uLL;
  }
  else
  {
    uint64_t countAndFlagsBits = v3._countAndFlagsBits;
    uint64_t v8 = swift_retain();
    MLDataValue.init(_:)(&v9, v8);
    long long v7 = v9;
    char v5 = v10;
    int64x2_t v6 = vdupq_n_s64(2uLL);
    v6.i64[0] = (uint64_t)v3._object;
  }
  *(void *)a1 = countAndFlagsBits;
  *(int64x2_t *)(a1 + 8) = v6;
  *(_OWORD *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 40) = v5;
}

void Dictionary<>.init(from:)(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (*(unsigned char *)(a1 + 16) == 4) {
    Dictionary<>.init(from:)();
  }
  else {
    outlined consume of MLDataValue(v2, *(id *)(a1 + 8), *(unsigned char *)(a1 + 16));
  }
}

void Dictionary<>.init(from:)()
{
  OUTLINED_FUNCTION_19_4();
  uint64_t v91 = v1;
  uint64_t v92 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  long long v9 = v8;
  v82[1] = type metadata accessor for Optional();
  OUTLINED_FUNCTION_0_15();
  v82[0] = v10;
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_49();
  uint64_t v83 = v12;
  MEMORY[0x270FA5388](v13);
  uint64_t v97 = (char *)v82 - v14;
  OUTLINED_FUNCTION_0_15();
  uint64_t v16 = v15;
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_3_0();
  v82[9] = v19 - v18;
  v82[3] = type metadata accessor for Optional();
  OUTLINED_FUNCTION_0_15();
  v82[2] = v20;
  MEMORY[0x270FA5388](v21);
  uint64_t v89 = (char *)v82 - v22;
  OUTLINED_FUNCTION_0_15();
  uint64_t v24 = v23;
  MEMORY[0x270FA5388](v25);
  OUTLINED_FUNCTION_49();
  v82[8] = v26;
  MEMORY[0x270FA5388](v27);
  uint64_t v96 = (char *)v82 - v28;
  uint64_t v29 = *v9;
  uint64_t v98 = v7;
  uint64_t v84 = v3;
  uint64_t v105 = Dictionary.init()();
  uint64_t v100 = v29;
  uint64_t v30 = specialized Dictionary.startIndex.getter(v29);
  if (v32)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    swift_bridgeObjectRelease();
    outlined consume of [MLDataValue : MLDataValue].Index._Variant(v7, v29, 0);
LABEL_16:
    OUTLINED_FUNCTION_12_4();
  }
  else
  {
    uint64_t v7 = v30;
    uint64_t v29 = v31;
    uint64_t v90 = v100 + 64;
    uint64_t v87 = v24 + 32;
    uint64_t v88 = v92 + 16;
    uint64_t v86 = v91 + 16;
    v82[7] = v16 + 32;
    id v82[6] = v24 + 16;
    v82[5] = v16 + 16;
    v82[4] = v16 + 8;
    uint64_t v85 = v24 + 8;
    while (*(_DWORD *)(v100 + 36) == v29)
    {
      OUTLINED_FUNCTION_20_25();
      if (v7 == v33) {
        goto LABEL_12;
      }
      if (v7 < 0 || v7 >= v33) {
        goto LABEL_18;
      }
      if (((*(void *)(v90 + (((unint64_t)v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
        goto LABEL_19;
      }
      uint64_t v34 = v100;
      uint64_t v35 = *(void *)(v100 + 48) + 24 * v7;
      uint64_t v36 = *(void **)v35;
      uint64_t v37 = *(void **)(v35 + 8);
      char v38 = *(unsigned char *)(v35 + 16);
      uint64_t v39 = *(void *)(v100 + 56) + 24 * v7;
      char v40 = *(void **)v39;
      uint64_t v41 = *(void **)(v39 + 8);
      int v42 = *(unsigned __int8 *)(v39 + 16);
      uint64_t v43 = (void *)OUTLINED_FUNCTION_12_23(*(void **)v35, v37, v38);
      uint64_t v46 = (void *)OUTLINED_FUNCTION_12_23(v43, v44, v45);
      outlined consume of MLDataValue(v46, v47, v48);
      outlined consume of MLDataValue(v40, v41, v42);
      swift_bridgeObjectRetain();
      uint64_t v94 = specialized _NativeDictionary.index(after:)(v7, v29, 0, v34);
      uint64_t v95 = v49;
      int v51 = v50;
      swift_bridgeObjectRelease();
      uint64_t v52 = v98;
      int v93 = v51;
      char v53 = v51 & 1;
      char v104 = v51 & 1;
      outlined copy of MLDataValue(v36, v37, v38);
      outlined copy of MLDataValue(v40, v41, v42);
      id v99 = v41;
      outlined consume of MLDataValue(v40, v41, v42);
      uint64_t v101 = v36;
      id v102 = v37;
      char v103 = v38;
      uint64_t v54 = (uint64_t)v89;
      (*(void (**)(void **, uint64_t))(v92 + 16))(&v101, v52);
      if (__swift_getEnumTagSinglePayload(v54, 1, v52) == 1)
      {
        OUTLINED_FUNCTION_10_28();
        swift_bridgeObjectRelease();
        outlined consume of [MLDataValue : MLDataValue].Index._Variant(v94, v95, v53);
        swift_bridgeObjectRelease();
LABEL_15:
        OUTLINED_FUNCTION_25_0();
        v81(v79, v80);
        goto LABEL_16;
      }
      OUTLINED_FUNCTION_35();
      v57(v55, v56);
      outlined copy of MLDataValue(v36, v37, v38);
      id v58 = v99;
      outlined copy of MLDataValue(v40, v99, v42);
      outlined consume of MLDataValue(v36, v37, v38);
      uint64_t v101 = v40;
      id v102 = v58;
      char v103 = v42;
      uint64_t v59 = (uint64_t)v97;
      (*(void (**)(void **, uint64_t))(v91 + 16))(&v101, v5);
      if (__swift_getEnumTagSinglePayload(v59, 1, v5) == 1)
      {
        OUTLINED_FUNCTION_10_28();
        OUTLINED_FUNCTION_25_0();
        v78(v76, v77);
        swift_bridgeObjectRelease();
        outlined consume of [MLDataValue : MLDataValue].Index._Variant(v94, v95, v93 & 1);
        swift_bridgeObjectRelease();
        goto LABEL_15;
      }
      OUTLINED_FUNCTION_35();
      v62(v60, v61);
      int v93 = v42;
      OUTLINED_FUNCTION_46_4();
      v65(v63, v64);
      uint64_t v66 = v83;
      OUTLINED_FUNCTION_46_4();
      v69(v67, v68);
      __swift_storeEnumTagSinglePayload(v66, 0, 1, v5);
      type metadata accessor for Dictionary();
      Dictionary.subscript.setter();
      outlined consume of MLDataValue(v36, v37, v38);
      outlined consume of MLDataValue(v40, v99, v93);
      OUTLINED_FUNCTION_17_25();
      OUTLINED_FUNCTION_25_0();
      v72(v70, v71);
      OUTLINED_FUNCTION_25_0();
      v75(v73, v74);
      uint64_t v7 = v94;
      uint64_t v29 = v95;
      if (v104) {
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void (*v39)(void);
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(void);
  void (*v48)(void);
  void (*v49)(void);
  uint64_t v50;
  void (*v51)(void);
  void v52[7];
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  long long v62;
  long long v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  OUTLINED_FUNCTION_19_4();
  id v58 = v0;
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = type metadata accessor for Optional();
  OUTLINED_FUNCTION_0_15();
  uint64_t v7 = v6;
  long long v9 = MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)v52 - v12;
  OUTLINED_FUNCTION_0_15();
  uint64_t v15 = v14;
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_3_0();
  uint64_t v19 = v18 - v17;
  uint64_t v20 = specialized handling<A, B>(_:_:)(*(void *)(v4 + 16));
  uint64_t v21 = v20;
  char v57 = v19;
  uint64_t v61 = 0;
  v52[2] = v7;
  if (!v20)
  {
    __break(1u);
LABEL_18:
    swift_unexpectedError();
    __break(1u);
    return;
  }
  type metadata accessor for CMLDictionary();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = v21;
  uint64_t v67 = Dictionary.init()();
  swift_retain();
  if (CMLDictionary.size.getter())
  {
    v52[1] = v5;
    v52[3] = v4;
    uint64_t v23 = 0;
    v52[6] = v15 + 32;
    v52[5] = v15 + 16;
    void v52[4] = v15 + 8;
    uint64_t v24 = inited;
    uint64_t v25 = v61;
    uint64_t v54 = v11;
    uint64_t v55 = v2;
    uint64_t v56 = v24;
    char v53 = v13;
    do
    {
      uint64_t v26 = CMLDictionary.keyAndValue(at:)(v23);
      uint64_t v61 = v25;
      if (v25) {
        goto LABEL_18;
      }
      uint64_t v27 = v26;
      swift_retain();
      uint64_t v59 = specialized RandomAccessCollection<>.index(after:)(v23);
      swift_release();
      uint64_t v28 = dynamic_cast_existential_1_unconditional(MEMORY[0x263F8D310]);
      uint64_t v30 = v29;
      uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16);
      char v32 = type metadata accessor for Optional();
      OUTLINED_FUNCTION_0_15();
      uint64_t v34 = v33;
      MEMORY[0x270FA5388](v35);
      uint64_t v37 = (char *)v52 - v36;
      char v38 = swift_retain();
      uint64_t v60 = v27;
      v31(v38, v28, v30);
      if (__swift_getEnumTagSinglePayload((uint64_t)v37, 1, v28) == 1)
      {
        (*(void (**)(char *, uint64_t))(v34 + 8))(v37, v32);
        uint64_t v64 = 0;
        uint64_t v62 = 0u;
        uint64_t v63 = 0u;
      }
      else
      {
        *((void *)&v63 + 1) = v28;
        uint64_t v64 = v30;
        __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v62);
        OUTLINED_FUNCTION_35();
        v39();
      }
      char v40 = v58;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureValueConvertible?);
      uint64_t v41 = swift_dynamicCast();
      int v42 = (uint64_t)v53;
      Swift::String v44 = (uint64_t)v54;
      uint64_t v43 = v55;
      uint64_t v25 = v61;
      if ((v41 & 1) == 0 || (char v45 = v66) == 0)
      {
        swift_release_n();
        swift_release();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_2;
      }
      uint64_t v46 = v65;
      static MLDataValueConvertible.makeInstance(featureValue:)(v55, v40, (uint64_t)v53);
      if (__swift_getEnumTagSinglePayload(v42, 1, v43) == 1)
      {
        swift_release_n();
        swift_release();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_25_0();
        v51();
        goto LABEL_2;
      }
      OUTLINED_FUNCTION_35();
      v47();
      OUTLINED_FUNCTION_17_25();
      OUTLINED_FUNCTION_46_4();
      v48();
      __swift_storeEnumTagSinglePayload(v44, 0, 1, v43);
      *(void *)&uint64_t v62 = v46;
      *((void *)&v62 + 1) = v45;
      type metadata accessor for Dictionary();
      Dictionary.subscript.setter();
      swift_release();
      swift_release();
      OUTLINED_FUNCTION_25_0();
      v49();
      int v50 = CMLDictionary.size.getter();
      uint64_t v23 = v59;
    }
    while (v59 != v50);
  }
  swift_release();
  swift_release();
  swift_release();
LABEL_2:
  OUTLINED_FUNCTION_12_4();
}

uint64_t Dictionary<>.dataValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  *(void *)&long long v19 = a1;
  uint64_t v13 = type metadata accessor for Dictionary();
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x22A674CB0](&v18, v13, WitnessTable);
  uint64_t v15 = (void *)swift_allocObject();
  v15[2] = a2;
  v15[3] = a3;
  v15[4] = a4;
  v15[5] = a5;
  v15[6] = a6;
  type metadata accessor for LazySequence();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLDataValue, MLDataValue));
  swift_getWitnessTable();
  LazySequenceProtocol.map<A>(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v16 = type metadata accessor for LazyMapSequence();
  swift_getWitnessTable();
  uint64_t result = MLDataValue.DictionaryType.init<A>(uniqueKeysWithValues:)((uint64_t)&v19, v16, &v18);
  *(void *)a7 = v18;
  *(void *)(a7 + 8) = 0;
  *(unsigned char *)(a7 + 16) = 4;
  return result;
}

uint64_t closure #1 in Dictionary<>.dataValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 32))(a3, a6);
}

void Dictionary<>.featureValue.getter()
{
  OUTLINED_FUNCTION_19_4();
  uint64_t v49 = v0;
  uint64_t v2 = v1;
  OUTLINED_FUNCTION_0_15();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_3_0();
  uint64_t v7 = v6;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v51 = type metadata accessor for Optional();
  OUTLINED_FUNCTION_0_15();
  uint64_t v10 = v9;
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = (int64_t *)((char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (int64_t *)((char *)&v42 - v15);
  uint64_t v17 = MEMORY[0x22A676330](0);
  if (!v17)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    swift_bridgeObjectRelease();
    swift_release();
    OUTLINED_FUNCTION_4_22();
    while (1)
    {
      swift_unexpectedError();
      __break(1u);
      OUTLINED_FUNCTION_4_22();
    }
  }
  uint64_t v18 = v17;
  type metadata accessor for CMLDictionary();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = v18;
  uint64_t v19 = *(void *)(v2 + 64);
  uint64_t v43 = v2 + 64;
  uint64_t v20 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v21 = -1;
  if (v20 < 64) {
    uint64_t v21 = ~(-1 << v20);
  }
  unint64_t v55 = v21 & v19;
  int64_t v44 = (unint64_t)(v20 + 63) >> 6;
  uint64_t v45 = v4 + 16;
  uint64_t v50 = v10 + 32;
  uint64_t v47 = v4 + 8;
  uint64_t v48 = v4 + 32;
  int64_t v42 = v44 - 1;
  uint64_t v46 = v2;
  swift_bridgeObjectRetain();
  int64_t v22 = 0;
  uint64_t v23 = v7;
  while (1)
  {
    if (v55)
    {
      unint64_t v24 = (v55 - 1) & v55;
      unint64_t v25 = __clz(__rbit64(v55)) | (v22 << 6);
LABEL_7:
      uint64_t v26 = (void *)(*(void *)(v46 + 48) + 16 * v25);
      uint64_t v27 = v26[1];
      *uint64_t v14 = *v26;
      v14[1] = v27;
      OUTLINED_FUNCTION_46_4();
      v28();
      __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, TupleTypeMetadata2);
      swift_bridgeObjectRetain();
      goto LABEL_17;
    }
    int64_t v29 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    if (v29 < v44)
    {
      unint64_t v30 = *(void *)(v43 + 8 * v29);
      if (v30) {
        goto LABEL_11;
      }
      v22 += 2;
      if (v29 + 1 >= v44)
      {
        int64_t v22 = v29;
      }
      else
      {
        unint64_t v30 = *(void *)(v43 + 8 * v22);
        if (v30)
        {
          ++v29;
LABEL_11:
          unint64_t v24 = (v30 - 1) & v30;
          unint64_t v25 = __clz(__rbit64(v30)) + (v29 << 6);
          int64_t v22 = v29;
          goto LABEL_7;
        }
        int64_t v40 = v29 + 2;
        if (v29 + 2 < v44)
        {
          unint64_t v30 = *(void *)(v43 + 8 * v40);
          if (v30)
          {
            v29 += 2;
            goto LABEL_11;
          }
          while (1)
          {
            int64_t v29 = v40 + 1;
            if (__OFADD__(v40, 1)) {
              goto LABEL_31;
            }
            if (v29 >= v44) {
              break;
            }
            unint64_t v30 = *(void *)(v43 + 8 * v29);
            ++v40;
            if (v30) {
              goto LABEL_11;
            }
          }
          int64_t v22 = v42;
        }
      }
    }
    __swift_storeEnumTagSinglePayload((uint64_t)v14, 1, 1, TupleTypeMetadata2);
    unint64_t v24 = 0;
LABEL_17:
    OUTLINED_FUNCTION_35();
    v31();
    if (__swift_getEnumTagSinglePayload((uint64_t)v16, 1, TupleTypeMetadata2) == 1) {
      break;
    }
    int64_t v54 = v22;
    unint64_t v55 = v24;
    uint64_t v32 = v4;
    uint64_t v53 = 0;
    uint64_t v33 = *v16;
    uint64_t v34 = v16[1];
    OUTLINED_FUNCTION_17_25();
    OUTLINED_FUNCTION_35();
    v35();
    uint64_t v36 = MLDataValueConvertible.featureValue.getter(v23, v49);
    uint64_t v37 = v33;
    uint64_t v38 = v53;
    CMLDictionary.add(key:value:)(v37, v34, v36);
    if (v38) {
      goto LABEL_33;
    }
    OUTLINED_FUNCTION_17_25();
    OUTLINED_FUNCTION_25_0();
    v39();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v4 = v32;
    int64_t v22 = v54;
  }
  swift_release();
  type metadata accessor for CMLFeatureValue();
  uint64_t v41 = swift_retain();
  CMLFeatureValue.__allocating_init(_:)(v41);
  swift_setDeallocating();
  tc_v1_release();
  OUTLINED_FUNCTION_12_4();
}

uint64_t specialized _NativeDictionary.index(after:)(uint64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_10;
  }
  if (result < 0 || -(-1 << *(unsigned char *)(a4 + 32)) <= result)
  {
    __break(1u);
  }
  else if ((*(void *)(a4 + 64 + (((unint64_t)result >> 3) & 0x1FFFFFFFFFFFFFF8)) >> result))
  {
    if (*(_DWORD *)(a4 + 36) == a2) {
      return _HashTable.occupiedBucket(after:)();
    }
    goto LABEL_9;
  }
  __break(1u);
LABEL_9:
  __break(1u);
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_2271C0EA4()
{
  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t partial apply for closure #1 in Dictionary<>.dataValue.getter(uint64_t a1)
{
  return closure #1 in Dictionary<>.dataValue.getter(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

unint64_t lazy protocol witness table accessor for type MLDataValue.DictionaryType.Index and conformance MLDataValue.DictionaryType.Index()
{
  unint64_t result = lazy protocol witness table cache variable for type MLDataValue.DictionaryType.Index and conformance MLDataValue.DictionaryType.Index;
  if (!lazy protocol witness table cache variable for type MLDataValue.DictionaryType.Index and conformance MLDataValue.DictionaryType.Index)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLDataValue.DictionaryType.Index and conformance MLDataValue.DictionaryType.Index);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MLDataValue.DictionaryType.Index and conformance MLDataValue.DictionaryType.Index;
  if (!lazy protocol witness table cache variable for type MLDataValue.DictionaryType.Index and conformance MLDataValue.DictionaryType.Index)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLDataValue.DictionaryType.Index and conformance MLDataValue.DictionaryType.Index);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MLDataValue.DictionaryType and conformance MLDataValue.DictionaryType()
{
  unint64_t result = lazy protocol witness table cache variable for type MLDataValue.DictionaryType and conformance MLDataValue.DictionaryType;
  if (!lazy protocol witness table cache variable for type MLDataValue.DictionaryType and conformance MLDataValue.DictionaryType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLDataValue.DictionaryType and conformance MLDataValue.DictionaryType);
  }
  return result;
}

unint64_t associated type witness table accessor for Collection.Indices : Collection in MLDataValue.DictionaryType()
{
  return lazy protocol witness table accessor for type Slice<MLDataValue.SequenceType> and conformance Slice<A>((uint64_t)&lazy protocol witness table cache variable for type DefaultIndices<MLDataValue.DictionaryType> and conformance DefaultIndices<A>);
}

unint64_t associated type witness table accessor for Collection.SubSequence : Collection in MLDataValue.DictionaryType()
{
  return lazy protocol witness table accessor for type Slice<MLDataValue.SequenceType> and conformance Slice<A>((uint64_t)&lazy protocol witness table cache variable for type Slice<MLDataValue.DictionaryType> and conformance Slice<A>);
}

unint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in MLDataValue.DictionaryType()
{
  return lazy protocol witness table accessor for type Slice<MLDataValue.SequenceType> and conformance Slice<A>((uint64_t)&lazy protocol witness table cache variable for type IndexingIterator<MLDataValue.DictionaryType> and conformance IndexingIterator<A>);
}

uint64_t destroy for MLDataValue.DictionaryType.Index(uint64_t a1)
{
  return outlined consume of [MLDataValue : MLDataValue].Index._Variant(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for MLDataValue.DictionaryType.Index(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  uint64_t v6 = OUTLINED_FUNCTION_11_30();
  outlined copy of [A : B].Index._Variant<A, B>(v6, v7, v8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for MLDataValue.DictionaryType.Index(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of [A : B].Index._Variant<A, B>(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  char v8 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of [MLDataValue : MLDataValue].Index._Variant(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for MLDataValue.DictionaryType.Index(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of [MLDataValue : MLDataValue].Index._Variant(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for MLDataValue.DictionaryType.Index()
{
  return &type metadata for MLDataValue.DictionaryType.Index;
}

unint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in CMLDictionary()
{
  return lazy protocol witness table accessor for type Slice<MLDataValue.SequenceType> and conformance Slice<A>((uint64_t)&lazy protocol witness table cache variable for type IndexingIterator<CMLDictionary> and conformance IndexingIterator<A>);
}

unint64_t base witness table accessor for Sequence in CMLDictionary()
{
  return lazy protocol witness table accessor for type CMLDictionary and conformance CMLDictionary((uint64_t)&lazy protocol witness table cache variable for type CMLDictionary and conformance CMLDictionary);
}

unint64_t associated type witness table accessor for Collection.SubSequence : Collection in CMLDictionary()
{
  return lazy protocol witness table accessor for type Slice<MLDataValue.SequenceType> and conformance Slice<A>((uint64_t)&lazy protocol witness table cache variable for type Slice<CMLDictionary> and conformance Slice<A>);
}

unint64_t base witness table accessor for Collection in CMLDictionary()
{
  return lazy protocol witness table accessor for type CMLDictionary and conformance CMLDictionary((uint64_t)&lazy protocol witness table cache variable for type CMLDictionary and conformance CMLDictionary);
}

unint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in CMLDictionary()
{
  return lazy protocol witness table accessor for type Slice<CMLDictionary> and conformance <> Slice<A>((uint64_t)&lazy protocol witness table cache variable for type Slice<CMLDictionary> and conformance <> Slice<A>);
}

unint64_t base witness table accessor for BidirectionalCollection in CMLDictionary()
{
  return lazy protocol witness table accessor for type CMLDictionary and conformance CMLDictionary((uint64_t)&lazy protocol witness table cache variable for type CMLDictionary and conformance CMLDictionary);
}

unint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in CMLDictionary()
{
  return lazy protocol witness table accessor for type Slice<CMLDictionary> and conformance <> Slice<A>((uint64_t)&lazy protocol witness table cache variable for type Slice<CMLDictionary> and conformance <> Slice<A>);
}

unint64_t lazy protocol witness table accessor for type Slice<CMLDictionary> and conformance <> Slice<A>(uint64_t a1)
{
  unint64_t result = OUTLINED_FUNCTION_17_14(a1);
  if (!result)
  {
    uint64_t v4 = v3;
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Slice<CMLDictionary>);
    lazy protocol witness table accessor for type CMLDictionary and conformance CMLDictionary(v4);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CMLDictionary and conformance CMLDictionary(uint64_t a1)
{
  unint64_t result = OUTLINED_FUNCTION_17_14(a1);
  if (!result)
  {
    type metadata accessor for CMLDictionary();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

uint64_t dynamic_cast_existential_1_unconditional(uint64_t a1)
{
  uint64_t result = swift_conformsToProtocol2();
  if (result) {
    return a1;
  }
  __break(1u);
  return result;
}

uint64_t OUTLINED_FUNCTION_2_48()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_3_48()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_4_45()
{
  return v0;
}

void OUTLINED_FUNCTION_10_28()
{
  outlined consume of MLDataValue(v1, v3, v2);
  char v6 = *(void **)(v5 - 144);
  outlined consume of MLDataValue(v0, v6, v4);
}

uint64_t OUTLINED_FUNCTION_11_30()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_12_23(void *a1, void *a2, char a3)
{
  outlined copy of MLDataValue(a1, a2, a3);
  outlined copy of MLDataValue(v3, v6, v5);
  return v4;
}

uint64_t OUTLINED_FUNCTION_13_31(void *a1, void *a2, char a3)
{
  outlined copy of MLDataValue(a1, a2, a3);
  outlined copy of MLDataValue(v5, v3, v6);
  return v4;
}

uint64_t OUTLINED_FUNCTION_17_25()
{
  return v0;
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySdG_Sis5NeverOTg5058_s8CreateML11randomSplit7indices11proportions9generatorSayi7SiGGAF_i15SdGxztKSGRzlFSiL6XEfU1_SaySiGTf1cn_n(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v10 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    char v5 = (double *)(a1 + 32);
    while (1)
    {
      double v6 = round(*v5 * (double)*(uint64_t *)(a2 + 16));
      if ((~*(void *)&v6 & 0x7FF0000000000000) == 0) {
        break;
      }
      if (v6 <= -9.22337204e18) {
        goto LABEL_12;
      }
      if (v6 >= 9.22337204e18) {
        goto LABEL_13;
      }
      unint64_t v8 = *(void *)(v10 + 16);
      unint64_t v7 = *(void *)(v10 + 24);
      if (v8 >= v7 >> 1)
      {
        char v9 = OUTLINED_FUNCTION_91(v7);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9, v8 + 1, 1);
      }
      *(void *)(v10 + 16) = v8 + 1;
      *(void *)(v10 + 8 * v8 + 32) = (uint64_t)v6;
      ++v5;
      if (!--v3) {
        goto LABEL_9;
      }
    }
    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
  }
  else
  {
LABEL_9:
    swift_bridgeObjectRelease();
  }
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML11MLDataValueOG_AHs5NeverOTg503_s8d81ML34stratifiedSplitBySequenceGenerator11proportions9generator9dataTable2by2onAA06f30K0VSaySdG_xzAIS2StKSGRzlFAA0N5G8OALXEfU_AF0F5TableVS2STf1cn_n(uint64_t a1, void *a2, char a3, uint64_t a4, void *a5, uint64_t a6, void *a7)
{
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(a1 + 16);
  char v10 = a3 & 1;
  if (v9)
  {
    uint64_t v32 = MEMORY[0x263F8EE78];
    OUTLINED_FUNCTION_16_28();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v13 = v32;
    uint64_t v14 = (char *)(a1 + 48);
    while (1)
    {
      uint64_t v15 = (void *)*((void *)v14 - 2);
      uint64_t v16 = (void *)*((void *)v14 - 1);
      char v17 = *v14;
      v28[0] = v15;
      v28[1] = v16;
      char v29 = v17;
      outlined copy of MLDataValue(v15, v16, v17);
      closure #1 in stratifiedSplitBySequenceGenerator<A>(proportions:generator:dataTable:by:on:)((uint64_t)v28, a2, v10, a4, a5, a6, a7, (uint64_t)&v30);
      if (v8) {
        break;
      }
      uint64_t v8 = 0;
      outlined consume of MLDataValue(v15, v16, v17);
      long long v18 = v30;
      char v19 = v31;
      uint64_t v32 = v13;
      unint64_t v20 = *(void *)(v13 + 16);
      if (v20 >= *(void *)(v13 + 24) >> 1)
      {
        long long v23 = v30;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        long long v18 = v23;
        uint64_t v13 = v32;
      }
      v14 += 24;
      *(void *)(v13 + 16) = v20 + 1;
      uint64_t v21 = v13 + 24 * v20;
      *(_OWORD *)(v21 + 32) = v18;
      *(unsigned char *)(v21 + 48) = v19;
      if (!--v9)
      {
        outlined consume of Result<_DataTable, Error>(a2, v10);
        goto LABEL_10;
      }
    }
    outlined consume of MLDataValue(v15, v16, v17);
    swift_release();
    outlined consume of Result<_DataTable, Error>(a2, v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined consume of Result<_DataTable, Error>(a2, a3 & 1);
    uint64_t v13 = MEMORY[0x263F8EE78];
LABEL_10:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v13;
}

uint64_t specialized Sequence<>.min()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  double v2 = *(double *)(a1 + 32);
  uint64_t v3 = v1 - 1;
  if (v1 != 1)
  {
    uint64_t v4 = (double *)(a1 + 40);
    do
    {
      double v5 = *v4++;
      double v6 = v5;
      if (v5 < v2) {
        double v2 = v6;
      }
      --v3;
    }
    while (v3);
  }
  return *(void *)&v2;
}

#error "2271C1AEC: call analysis failed (funcsize=293)"

uint64_t stratifiedSplitGenerator<A>(proportions:generator:fileURLAndLabel:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v76 = a4;
  uint64_t v77 = a5;
  uint64_t v75 = a2;
  uint64_t v8 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v93 = v9;
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = swift_bridgeObjectRetain();
  uint64_t v95 = (void *)specialized _copyCollectionToContiguousArray<A>(_:)(v13);
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v95);
  uint64_t v79 = v5;
  if (v5)
  {
LABEL_51:
    uint64_t result = swift_release();
    __break(1u);
    return result;
  }
  swift_bridgeObjectRelease();
  uint64_t v14 = (uint64_t)v95;
  uint64_t v73 = v95[2];
  if (v73)
  {
    unint64_t v15 = 0;
    uint64_t v74 = v95 + 4;
    uint64_t v90 = v93 + 16;
    uint64_t v16 = MEMORY[0x263F8EE78];
    uint64_t v89 = (void (**)(unint64_t, char *, uint64_t))(v93 + 32);
    uint64_t v71 = a3;
    uint64_t v80 = v8;
    uint64_t v81 = a1;
    uint64_t v72 = (uint64_t)v95;
    while (v15 < *(void *)(v14 + 16))
    {
      unint64_t v78 = v15;
      char v17 = &v74[2 * v15];
      uint64_t v18 = *v17;
      uint64_t v19 = v17[1];
      swift_bridgeObjectRetain_n();
      uint64_t v86 = v18;
      uint64_t v20 = specialized Dictionary.subscript.getter(v18, v19, a3);
      swift_bridgeObjectRelease();
      if (!v20) {
        goto LABEL_49;
      }
      uint64_t v94 = v20;
      uint64_t v21 = specialized _copyCollectionToContiguousArray<A>(_:)(0, *(void *)(v20 + 16));
      uint64_t v22 = v79;
      randomSplit<A>(indices:proportions:generator:)((uint64_t)v21, a1);
      uint64_t v84 = v23;
      uint64_t v79 = v22;
      if (v22) {
        goto LABEL_43;
      }
      swift_release();
      uint64_t v83 = *(void *)(a1 + 16);
      if (v83)
      {
        unint64_t v24 = 0;
        uint64_t v82 = v84 + 32;
        uint64_t v88 = v19;
        while (1)
        {
          if (*(void *)(v16 + 16) <= v24)
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [URL]);
            uint64_t v25 = Dictionary.init(dictionaryLiteral:)();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              OUTLINED_FUNCTION_11_8();
              specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
              uint64_t v16 = v67;
            }
            unint64_t v27 = *(void *)(v16 + 16);
            unint64_t v26 = *(void *)(v16 + 24);
            if (v27 >= v26 >> 1)
            {
              OUTLINED_FUNCTION_91(v26);
              specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
              uint64_t v16 = v68;
            }
            *(void *)(v16 + 16) = v27 + 1;
            *(void *)(v16 + 8 * v27 + 32) = v25;
          }
          if (v24 >= *(void *)(v84 + 16))
          {
            __break(1u);
LABEL_45:
            __break(1u);
LABEL_46:
            __break(1u);
LABEL_47:
            __break(1u);
            goto LABEL_48;
          }
          unint64_t v87 = v24;
          uint64_t v28 = *(void *)(v82 + 8 * v24);
          uint64_t v29 = *(void *)(v28 + 16);
          if (v29) {
            break;
          }
          uint64_t v34 = MEMORY[0x263F8EE78];
LABEL_25:
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized _ArrayBuffer._consumeAndCreateNew()();
            uint64_t v16 = v66;
          }
          unint64_t v41 = v87;
          if (v87 >= *(void *)(v16 + 16)) {
            goto LABEL_45;
          }
          int64_t v42 = v12;
          uint64_t v43 = v16;
          uint64_t v44 = v16 + 32;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v95 = *(void **)(v44 + 8 * v41);
          uint64_t v46 = (uint64_t)v95;
          uint64_t v47 = v44;
          *(void *)(v44 + 8 * v41) = 0x8000000000000000;
          unint64_t v48 = specialized __RawDictionaryStorage.find<A>(_:)(v86, v88);
          uint64_t v50 = *(void *)(v46 + 16);
          BOOL v51 = (v49 & 1) == 0;
          Swift::Int v52 = v50 + v51;
          if (__OFADD__(v50, v51)) {
            goto LABEL_46;
          }
          unint64_t v53 = v48;
          char v54 = v49;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [URL]>);
          Swift::Bool v55 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v52);
          uint64_t v12 = v42;
          uint64_t v16 = v43;
          if (v55)
          {
            unint64_t v56 = specialized __RawDictionaryStorage.find<A>(_:)(v86, v88);
            if ((v54 & 1) != (v57 & 1)) {
              goto LABEL_50;
            }
            unint64_t v53 = v56;
          }
          id v58 = v95;
          if (v54)
          {
            uint64_t v59 = v95[7];
            swift_bridgeObjectRelease();
            *(void *)(v59 + 8 * v53) = v34;
          }
          else
          {
            v95[(v53 >> 6) + 8] |= 1 << v53;
            uint64_t v60 = (void *)(v58[6] + 16 * v53);
            uint64_t v61 = v88;
            *uint64_t v60 = v86;
            v60[1] = v61;
            *(void *)(v58[7] + 8 * v53) = v34;
            uint64_t v62 = v58[2];
            BOOL v63 = __OFADD__(v62, 1);
            uint64_t v64 = v62 + 1;
            if (v63) {
              goto LABEL_47;
            }
            v58[2] = v64;
            swift_bridgeObjectRetain();
          }
          unint64_t v65 = v87 + 1;
          *(void *)(v47 + 8 * v87) = v58;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v24 = v65;
          a1 = v81;
          if (v65 == v83) {
            goto LABEL_37;
          }
        }
        uint64_t v85 = v16;
        uint64_t v95 = (void *)MEMORY[0x263F8EE78];
        swift_bridgeObjectRetain();
        char v30 = OUTLINED_FUNCTION_16_28();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30, v31, v32);
        uint64_t v33 = v80;
        uint64_t v16 = 0;
        uint64_t v34 = (uint64_t)v95;
        unint64_t v35 = (*(unsigned __int8 *)(v93 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v93 + 80);
        unint64_t v91 = v94 + v35;
        unint64_t v92 = v35;
        while (1)
        {
          unint64_t v36 = *(void *)(v28 + 8 * v16 + 32);
          if ((v36 & 0x8000000000000000) != 0) {
            break;
          }
          if (v36 >= *(void *)(v94 + 16)) {
            goto LABEL_42;
          }
          uint64_t v37 = *(void *)(v93 + 72);
          (*(void (**)(char *, unint64_t, uint64_t))(v93 + 16))(v12, v91 + v37 * v36, v33);
          uint64_t v95 = (void *)v34;
          unint64_t v39 = *(void *)(v34 + 16);
          unint64_t v38 = *(void *)(v34 + 24);
          if (v39 >= v38 >> 1)
          {
            char v40 = OUTLINED_FUNCTION_91(v38);
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v40, v39 + 1, 1);
            uint64_t v33 = v80;
            uint64_t v34 = (uint64_t)v95;
          }
          ++v16;
          *(void *)(v34 + 16) = v39 + 1;
          (*v89)(v34 + v92 + v39 * v37, v12, v33);
          if (v29 == v16)
          {
            swift_bridgeObjectRelease();
            uint64_t v16 = v85;
            goto LABEL_25;
          }
        }
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        return v16;
      }
LABEL_37:
      unint64_t v15 = v78 + 1;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = v72;
      a3 = v71;
      if (v15 == v73)
      {
        swift_release();
        return v16;
      }
    }
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    goto LABEL_51;
  }
  swift_release();
  return MEMORY[0x263F8EE78];
}

void randomSplit<A>(indices:proportions:generator:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2)
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    *(void *)uint64_t v7 = 0xD000000000000024;
    uint64_t v8 = "At least one proportion is required.";
    goto LABEL_16;
  }
  double v5 = COERCE_DOUBLE(specialized Sequence<>.min()(a2));
  if (v6) {
    goto LABEL_45;
  }
  if (v5 < 0.0)
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    *(void *)uint64_t v7 = 0xD00000000000002ALL;
    uint64_t v8 = "Only non-negative proportions are allowed.";
LABEL_16:
    *(void *)(v7 + 8) = (unint64_t)(v8 - 32) | 0x8000000000000000;
    *(_OWORD *)(v7 + 16) = 0u;
    *(_OWORD *)(v7 + 32) = 0u;
    *(unsigned char *)(v7 + 48) = 0;
    swift_willThrow();
    return;
  }
  double v9 = COERCE_DOUBLE(specialized Sequence<>.max()(a2));
  if ((v10 & 1) == 0)
  {
    if (v9 <= 0.0)
    {
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_85();
      *(void *)uint64_t v7 = 0xD00000000000002DLL;
      uint64_t v8 = "At least one non-zero proportion is required.";
      goto LABEL_16;
    }
    uint64_t v60 = a1;
    unint64_t v56 = *(void *)(a1 + 16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
    lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
    uint64_t v59 = Sequence.shuffled<A>(using:)();
    uint64_t v11 = 0;
    uint64_t v12 = a2 + 32;
    double v13 = 0.0;
    do
    {
      double v14 = *(double *)(v12 + 8 * v11++);
      double v13 = v13 + v14;
    }
    while (v2 != v11);
    uint64_t v62 = MEMORY[0x263F8EE78];
    char v15 = OUTLINED_FUNCTION_16_28();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15, v16, v17);
    uint64_t v18 = 0;
    unint64_t v19 = *(void *)(v62 + 16);
    do
    {
      double v20 = *(double *)(v12 + 8 * v18);
      unint64_t v21 = *(void *)(v62 + 24);
      unint64_t v22 = v19 + 1;
      if (v19 >= v21 >> 1)
      {
        char v23 = OUTLINED_FUNCTION_91(v21);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23, v19 + 1, 1);
      }
      ++v18;
      *(void *)(v62 + 16) = v22;
      *(double *)(v62 + 8 * v19++ + 32) = v20 / v13;
    }
    while (v2 != v18);
    uint64_t v57 = v2;
    swift_retain();
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v25 = v24;
    uint64_t v26 = 0;
    uint64_t v27 = *(void *)(v24 + 16);
    uint64_t v28 = 8 * v27;
    do
    {
      if (v27 + v26) {
        double v29 = *(double *)(v25 + v28 + 8 * v26 + 24);
      }
      else {
        double v29 = 0.0;
      }
      double v30 = *(double *)(v62 + 32 + 8 * v26);
      if ((unint64_t)(v27 + v26) >= *(void *)(v25 + 24) >> 1)
      {
        OUTLINED_FUNCTION_22_23();
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v25 = v31;
      }
      *(void *)(v25 + 16) = v27 + v26 + 1;
      *(double *)(v25 + v28 + 8 * v26++ + 32) = v30 + v29;
    }
    while (v22 != v26);
    swift_release_n();
    swift_bridgeObjectRetain();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySdG_Sis5NeverOTg5058_s8CreateML11randomSplit7indices11proportions9generatorSayi7SiGGAF_i15SdGxztKSGRzlFSiL6XEfU1_SaySiGTf1cn_n(v25, v60);
    uint64_t v33 = v32;
    swift_bridgeObjectRelease();
    uint64_t v34 = 0;
    unint64_t v35 = 0;
    uint64_t v58 = v33;
    uint64_t v36 = v33 + 32;
    uint64_t v37 = v60 + 32;
    uint64_t v61 = MEMORY[0x263F8EE78];
    while (v35 < *(void *)(v58 + 16))
    {
      if (v34 < *(void *)(v36 + 8 * v35))
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
        uint64_t v39 = v59 + 32;
        unint64_t v38 = v56;
        uint64_t v41 = v40;
        uint64_t v42 = v59;
        unint64_t v43 = v34;
        while ((v34 & 0x8000000000000000) == 0)
        {
          if (v43 >= *(void *)(v42 + 16)) {
            goto LABEL_42;
          }
          unint64_t v44 = *(void *)(v39 + 8 * v43);
          if (v44 >= v38) {
            goto LABEL_43;
          }
          uint64_t v45 = *(void *)(v37 + 8 * v44);
          unint64_t v46 = *(void *)(v41 + 16);
          if (v46 >= *(void *)(v41 + 24) >> 1)
          {
            char v47 = OUTLINED_FUNCTION_22_23();
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v47, v48, v49, v50);
            uint64_t v39 = v59 + 32;
            unint64_t v38 = v56;
            uint64_t v41 = v51;
            uint64_t v42 = v59;
          }
          *(void *)(v41 + 16) = v46 + 1;
          *(void *)(v41 + 8 * v46 + 32) = v45;
          if ((int64_t)++v43 >= *(void *)(v36 + 8 * v35)) {
            goto LABEL_35;
          }
        }
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
        break;
      }
      unint64_t v43 = v34;
      uint64_t v41 = MEMORY[0x263F8EE78];
LABEL_35:
      uint64_t v52 = v61;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        OUTLINED_FUNCTION_11_8();
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v52 = v54;
      }
      unint64_t v53 = *(void *)(v52 + 16);
      if (v53 >= *(void *)(v52 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v52 = v55;
      }
      ++v35;
      *(void *)(v52 + 16) = v53 + 1;
      uint64_t v61 = v52;
      *(void *)(v52 + 8 * v53 + 32) = v41;
      uint64_t v34 = v43;
      if (v35 == v57)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return;
      }
    }
    __break(1u);
LABEL_45:
    __break(1u);
  }
  __break(1u);
}

void stratifiedSplitGenerator<A>(proportions:generator:dataTable:on:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  id v11 = *(id *)a3;
  char v12 = *(unsigned char *)(a3 + 8);
  if (v12)
  {
    outlined copy of Result<_DataTable, Error>(*(id *)a3, 1);
    uint64_t v13 = MEMORY[0x22A676370](0);
    if (!v13)
    {
LABEL_61:
      __break(1u);
      return;
    }
    uint64_t v14 = v13;
    type metadata accessor for CMLSequence();
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = v14;
    *(unsigned char *)(v15 + 24) = 1;
    outlined consume of Result<_DataTable, Error>(v11, 1);
  }
  else
  {
    outlined copy of Result<_DataTable, Error>(*(id *)a3, 0);
    _DataTable.columnNames.getter(&v130);
    outlined consume of Result<_DataTable, Error>(v11, 0);
  }
  long long v121 = (void *)a4;
  char v122 = a5;
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_12_24();
  char v17 = specialized Sequence.contains(where:)((uint64_t (*)(Swift::String *))closure #1 in Sequence<>.contains(_:)specialized partial apply);
  swift_release();
  if ((v17 & 1) == 0)
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v81 = OUTLINED_FUNCTION_85();
    *uint64_t v82 = 0xD000000000000022;
    v82[1] = 0x80000002272D9450;
    OUTLINED_FUNCTION_8_4(v81, (uint64_t)v82);
    return;
  }
  uint64_t v115 = v8;
  OUTLINED_FUNCTION_5_40();
  uint64_t v106 = (uint64_t)a5;
  MLDataTable.subscript.getter(a4, a5, (uint64_t)&v130);
  outlined consume of Result<_DataTable, Error>(v11, v12);
  id v18 = v130;
  char v19 = v131;
  id v128 = v130;
  char v129 = v131;
  MLUntypedColumn.dropDuplicates()(&v121);
  outlined consume of Result<_DataTable, Error>(v18, v19);
  id v130 = v121;
  char v131 = (char)v122;
  Array<A>.init(_:)((uint64_t)&v130, v20, v21, v22, v23, v24, v25, v26, v83, a8, v86, v88, v91, v93, v95, v97, v99, v102, v103,
    v104,
    v106,
    a2,
    a6,
    a7);
  uint64_t v28 = v27;
  long long v121 = v11;
  LOBYTE(v122) = v12;
  uint64_t v29 = MLDataTable.size.getter();
  if (v29 < 0)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  double v30 = specialized _copyCollectionToContiguousArray<A>(_:)(0, v29);
  id v130 = v11;
  char v131 = v12;
  OUTLINED_FUNCTION_5_40();
  uint64_t v31 = MLDataTable.size.getter();
  uint64_t v32 = specialized Array.init(repeating:count:)(0, v31);
  uint64_t v94 = *(void *)(v28 + 16);
  if (v94)
  {
    unint64_t v33 = 0;
    uint64_t v98 = v28 + 32;
    uint64_t v34 = a1;
    uint64_t v96 = v28;
    unint64_t v87 = v11;
    uint64_t v117 = v30;
    while (v33 < *(void *)(v28 + 16))
    {
      uint64_t v100 = v33;
      uint64_t v35 = v98 + 24 * v33;
      uint64_t v36 = *(void **)v35;
      uint64_t v37 = *(void **)(v35 + 8);
      int v38 = *(unsigned __int8 *)(v35 + 16);
      OUTLINED_FUNCTION_5_40();
      outlined copy of MLDataValue(v36, v37, v38);
      MLDataTable.subscript.getter(a4, v107, (uint64_t)&v126);
      outlined consume of Result<_DataTable, Error>(v11, v12);
      uint64_t v39 = v126;
      char v40 = v127;
      uint64_t v124 = v126;
      char v125 = v127;
      long long v121 = v36;
      char v122 = v37;
      HIDWORD(v105) = v38;
      char v123 = v38;
      static MLUntypedColumn.== infix(_:_:)();
      outlined consume of Result<_DataTable, Error>(v39, v40);
      long long v121 = v128;
      LOBYTE(v122) = v129;
      Array<A>.init(_:)((uint64_t)&v121, v41, v42, v43, v44, v45, v46, v47, v84, v85, (uint64_t)v87, v89, v92, v94, v96, v98, v100, (uint64_t)v36, (uint64_t)v37,
        v105,
        (uint64_t)v107,
        v109,
        v111,
        v113);
      uint64_t v49 = v48;
      uint64_t v50 = *(void *)(v48 + 16);
      if (v50)
      {
        uint64_t v51 = v117;
        uint64_t v52 = v117[2];
        swift_retain();
        unint64_t v53 = 0;
        uint64_t v92 = v49;
        uint64_t v54 = (unsigned char *)(v49 + 48);
        uint64_t v55 = MEMORY[0x263F8EE78];
        uint64_t v118 = v52;
        uint64_t v119 = v50;
        while (1)
        {
          if (v52 == v53)
          {
LABEL_25:
            swift_release();
            uint64_t v34 = a1;
            uint64_t v28 = v96;
            goto LABEL_27;
          }
          if (v53 >= v51[2]) {
            break;
          }
          if (*v54) {
            BOOL v56 = 0;
          }
          else {
            BOOL v56 = *((void *)v54 - 2) == 1;
          }
          if (v56)
          {
            uint64_t v57 = *((void *)v54 - 1);
            uint64_t v58 = v51[v53 + 4];
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            long long v121 = (void *)v55;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              uint64_t v51 = v117;
              uint64_t v55 = (uint64_t)v121;
            }
            unint64_t v61 = *(void *)(v55 + 16);
            unint64_t v60 = *(void *)(v55 + 24);
            if (v61 >= v60 >> 1)
            {
              OUTLINED_FUNCTION_91(v60);
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              uint64_t v51 = v117;
              uint64_t v55 = (uint64_t)v121;
            }
            *(void *)(v55 + 16) = v61 + 1;
            uint64_t v62 = v55 + 32 * v61;
            *(void *)(v62 + 32) = 1;
            *(void *)(v62 + 40) = v57;
            *(unsigned char *)(v62 + 48) = 0;
            *(void *)(v62 + 56) = v58;
            uint64_t v52 = v118;
            uint64_t v50 = v119;
          }
          ++v53;
          v54 += 24;
          if (v50 == v53) {
            goto LABEL_25;
          }
        }
        __break(1u);
        goto LABEL_58;
      }
      uint64_t v55 = MEMORY[0x263F8EE78];
LABEL_27:
      swift_bridgeObjectRelease();
      ML11MLDataValueO_SitG_Sis5NeverOTg503_s8d4ML11fg20OS2iIgnyd_AC_SitSis5h126OIegnrzr_TR03_s8a68ML24stratifiedSplitGenerator11proportions9generator9dataTable2onAA06c31I0VSaySdG_xzAHSStKSGRzlFSiAA0K5D11O_N16XEfU0_Tf3nnnpf_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML11MLDataValueO_SitG_Sis5NeverOTg503_s8d4ML11fg20OS2iIgnyd_AC_SitSis5h126OIegnrzr_TR03_s8a68ML24stratifiedSplitGenerator11proportions9generator9dataTable2onAA06c31I0VSaySdG_xzAHSStKSGRzlFSiAA0K5D11O_N16XEfU0_Tf3nnnpf_nTf1cn_n(v55);
      swift_release();
      uint64_t v64 = specialized _copyCollectionToContiguousArray<A>(_:)(0, *(void *)(ML11MLDataValueO_SitG_Sis5NeverOTg503_s8d4ML11fg20OS2iIgnyd_AC_SitSis5h126OIegnrzr_TR03_s8a68ML24stratifiedSplitGenerator11proportions9generator9dataTable2onAA06c31I0VSaySdG_xzAHSStKSGRzlFSiAA0K5D11O_N16XEfU0_Tf3nnnpf_nTf1cn_n+ 16));
      randomSplit<A>(indices:proportions:generator:)((uint64_t)v64, v34);
      if (v115)
      {
LABEL_56:
        swift_bridgeObjectRelease();
        swift_release();
        OUTLINED_FUNCTION_7_36();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        outlined consume of Result<_DataTable, Error>(v87, v90);
        return;
      }
      uint64_t v66 = v65;
      swift_release();
      uint64_t v120 = *(void *)(v34 + 16);
      if (v120)
      {
        unint64_t v67 = 0;
        uint64_t v68 = v66 + 32;
        while (v67 < *(void *)(v66 + 16))
        {
          uint64_t v69 = *(void *)(*(void *)(v68 + 8 * v67) + 16);
          if (v69)
          {
            unint64_t v70 = 0;
            while (1)
            {
              uint64_t v71 = *(void *)(v68 + 8 * v67);
              if (v70 >= *(void *)(v71 + 16)) {
                break;
              }
              unint64_t v72 = *(void *)(v71 + 8 * v70 + 32);
              if ((v72 & 0x8000000000000000) != 0) {
                goto LABEL_52;
              }
              if (v72 >= *(void *)(ML11MLDataValueO_SitG_Sis5NeverOTg503_s8d4ML11fg20OS2iIgnyd_AC_SitSis5h126OIegnrzr_TR03_s8a68ML24stratifiedSplitGenerator11proportions9generator9dataTable2onAA06c31I0VSaySdG_xzAHSStKSGRzlFSiAA0K5D11O_N16XEfU0_Tf3nnnpf_nTf1cn_n
                                    + 16))
                goto LABEL_53;
              unint64_t v73 = *(void *)(ML11MLDataValueO_SitG_Sis5NeverOTg503_s8d4ML11fg20OS2iIgnyd_AC_SitSis5h126OIegnrzr_TR03_s8a68ML24stratifiedSplitGenerator11proportions9generator9dataTable2onAA06c31I0VSaySdG_xzAHSStKSGRzlFSiAA0K5D11O_N16XEfU0_Tf3nnnpf_nTf1cn_n
                              + 32
                              + 8 * v72);
              if (swift_isUniquelyReferenced_nonNull_native())
              {
                if ((v73 & 0x8000000000000000) != 0) {
                  goto LABEL_54;
                }
              }
              else
              {
                specialized _ArrayBuffer._consumeAndCreateNew()();
                uint64_t v32 = v74;
                if ((v73 & 0x8000000000000000) != 0) {
                  goto LABEL_54;
                }
              }
              if (v73 >= *(void *)(v32 + 16)) {
                goto LABEL_55;
              }
              ++v70;
              *(void *)(v32 + 8 * v73 + 32) = v67;
              if (v69 == v70) {
                goto LABEL_43;
              }
            }
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
LABEL_55:
            __break(1u);
            goto LABEL_56;
          }
LABEL_43:
          if (++v67 == v120)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v34 = a1;
            uint64_t v28 = v96;
            goto LABEL_46;
          }
        }
LABEL_58:
        __break(1u);
        break;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_46:
      unint64_t v33 = v101 + 1;
      OUTLINED_FUNCTION_7_36();
      char v12 = v90;
      id v11 = v87;
      if (v101 + 1 == v94) {
        goto LABEL_47;
      }
    }
    __break(1u);
    goto LABEL_60;
  }
LABEL_47:
  swift_release();
  uint64_t v75 = swift_bridgeObjectRelease();
  long long v121 = (void *)v32;
  MEMORY[0x270FA5388](v75);
  OUTLINED_FUNCTION_12_24();
  uint64_t ML14_UntypedColumnC_s5Error_pTgm5 = (void *)_ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in MLUntypedColumn.init<A>(_:)specialized partial apply);
  char v78 = v77 & 1;
  swift_bridgeObjectRelease();
  MLDataTable.willMutate()();
  long long v121 = ML14_UntypedColumnC_s5Error_pTgm5;
  LOBYTE(v122) = v78;
  outlined copy of Result<_DataTable, Error>(ML14_UntypedColumnC_s5Error_pTgm5, v78);
  OUTLINED_FUNCTION_11_31();
  outlined consume of Result<_DataTable, Error>(ML14_UntypedColumnC_s5Error_pTgm5, v78);
  id v79 = v130;
  char v80 = v131;
  if ((v131 & 1) == 0)
  {
    outlined copy of Result<_DataTable, Error>(v130, 0);
    _DataTable.columnNamesDidChange()();
    OUTLINED_FUNCTION_26_9();
  }
  outlined consume of Result<_DataTable, Error>(ML14_UntypedColumnC_s5Error_pTgm5, v78);
  *(void *)uint64_t v85 = v79;
  *(unsigned char *)(v85 + 8) = v80;
}

void stratifiedSplitBySequenceGenerator<A>(proportions:generator:dataTable:by:on:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, void *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t inited = v9;
  uint64_t v11 = a5;
  char v12 = a4;
  uint64_t v13 = *(void **)a3;
  int v14 = *(unsigned __int8 *)(a3 + 8);
  if (v14)
  {
    char v17 = a6;
    outlined copy of Result<_DataTable, Error>(v13, 1);
    if (!MEMORY[0x22A676370](0))
    {
LABEL_71:
      __break(1u);
LABEL_72:
      outlined copy of Result<_DataTable, Error>((id)inited, 1);
      swift_willThrow();
      uint64_t v183 = 0;
      id v184 = (id)0xE000000000000000;
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      uint64_t v183 = (void *)0xD00000000000001FLL;
      id v184 = (id)0x80000002272D71B0;
      v121._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_13_32();
      String.append(_:)(v121);
      v122._uint64_t countAndFlagsBits = 34;
      v122._id object = (void *)0xE100000000000000;
      String.append(_:)(v122);
      OUTLINED_FUNCTION_18_19();
      uint64_t v124 = *(void *)(v123 - 256);
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      char v125 = (void *)OUTLINED_FUNCTION_85();
      *(void *)uint64_t v126 = v11;
      *(void *)(v126 + 8) = v124;
      *(_OWORD *)(v126 + 16) = 0u;
      *(_OWORD *)(v126 + 32) = 0u;
      *(unsigned char *)(v126 + 48) = 1;
      outlined consume of Result<_DataTable, Error>((id)inited, v181);
      outlined consume of Result<_DataTable, Error>(v125, 1);
LABEL_73:
      __break(1u);
      goto LABEL_74;
    }
    type metadata accessor for CMLSequence();
    uint64_t v18 = swift_allocObject();
    OUTLINED_FUNCTION_14_27(v18);
    uint64_t v11 = a5;
    char v12 = a4;
  }
  else
  {
    char v17 = a6;
    outlined copy of Result<_DataTable, Error>(v13, 0);
    _DataTable.columnNames.getter(&v190);
    outlined consume of Result<_DataTable, Error>(v13, 0);
  }
  uint64_t v183 = v12;
  id v184 = (id)v11;
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_3_49();
  uint64_t v20 = (void *)v11;
  uint64_t v11 = specialized Sequence.contains(where:)((uint64_t (*)(Swift::String *))partial apply for specialized closure #1 in Sequence<>.contains(_:));
  swift_release();
  if ((v11 & 1) == 0)
  {
    OUTLINED_FUNCTION_1_41();
    uint64_t v24 = v12;
LABEL_28:
    char v80 = v20;
    String.append(_:)(*(Swift::String *)&v24);
    v81._uint64_t countAndFlagsBits = 46;
    v81._id object = (void *)0xE100000000000000;
    String.append(_:)(v81);
    OUTLINED_FUNCTION_17_26();
    uint64_t v83 = *(void *)(v82 - 256);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v84 = OUTLINED_FUNCTION_85();
    *uint64_t v85 = v9;
    v85[1] = v83;
    OUTLINED_FUNCTION_8_4(v84, (uint64_t)v85);
    return;
  }
  uint64_t v152 = (uint64_t)v12;
  uint64_t v21 = v20;
  if (v14)
  {
    outlined copy of Result<_DataTable, Error>(v13, 1);
    if (!MEMORY[0x22A676370](0))
    {
LABEL_74:
      __break(1u);
LABEL_75:
      outlined consume of Result<_DataTable, Error>((id)v11, 1);
      goto LABEL_76;
    }
    type metadata accessor for CMLSequence();
    uint64_t v22 = swift_allocObject();
    OUTLINED_FUNCTION_14_27(v22);
  }
  else
  {
    outlined copy of Result<_DataTable, Error>(v13, 0);
    _DataTable.columnNames.getter(&v190);
    outlined consume of Result<_DataTable, Error>(v13, 0);
  }
  uint64_t v183 = v17;
  uint64_t v20 = a7;
  id v184 = a7;
  MEMORY[0x270FA5388](v23);
  OUTLINED_FUNCTION_3_49();
  char v25 = specialized Sequence.contains(where:)((uint64_t (*)(Swift::String *))closure #1 in Sequence<>.contains(_:)specialized partial apply);
  swift_release();
  if ((v25 & 1) == 0)
  {
    OUTLINED_FUNCTION_1_41();
    uint64_t v24 = v17;
    goto LABEL_28;
  }
  id v190 = v13;
  char v191 = v14;
  uint64_t v183 = v13;
  LOBYTE(v184) = v14;
  outlined copy of Result<_DataTable, Error>(v13, v14);
  uint64_t v26 = (uint64_t)v21;
  MLDataTable.subscript.getter(v152, v21, (uint64_t)&v188);
  id v27 = v188;
  char v28 = v189;
  id v186 = v188;
  v187[0] = v189;
  MLUntypedColumn.dropDuplicates()(&v183);
  uint64_t v29 = v27;
  uint64_t v11 = v26;
  uint64_t v30 = v152;
  outlined consume of Result<_DataTable, Error>(v29, v28);
  OUTLINED_FUNCTION_6_35(v31, v32, v33, v34, v35, v36, v37, v38, v127, v130, v134, v137, v141, v144, v147, v149, v152, a9, a1,
    a2,
    a8,
    (uint64_t)a7,
    v173,
    v177);
  uint64_t v40 = v39;
  outlined copy of Result<_DataTable, Error>(v13, v14);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t ML11MLDataValueOG_AHs5NeverOTg503_s8d81ML34stratifiedSplitBySequenceGenerator11proportions9generator9dataTable2by2onAA06f30K0VSaySdG_xzAIS2StKSGRzlFAA0N5G8OALXEfU_AF0F5TableVS2STf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML11MLDataValueOG_AHs5NeverOTg503_s8d81ML34stratifiedSplitBySequenceGenerator11proportions9generator9dataTable2by2onAA06f30K0VSaySdG_xzAIS2StKSGRzlFAA0N5G8OALXEfU_AF0F5TableVS2STf1cn_n(v40, v13, v14, v30, (void *)v11, (uint64_t)v17, v20);
  uint64_t v41 = *(void *)(v40 + 16);
  uint64_t v42 = swift_bridgeObjectRetain();
  specialized Dictionary.init<A>(uniqueKeysWithValues:)(v42, 0, v41, v43, v44, v45, v46, v47, v128, v131, v135, v138, v9, ML11MLDataValueOG_AHs5NeverOTg503_s8d81ML34stratifiedSplitBySequenceGenerator11proportions9generator9dataTable2by2onAA06f30K0VSaySdG_xzAIS2StKSGRzlFAA0N5G8OALXEfU_AF0F5TableVS2STf1cn_n, v40, (uint64_t)v17, v153, v157);
  uint64_t v49 = v48;
  uint64_t v50 = v13;
  uint64_t v51 = (void *)specialized Array.init(repeating:count:)(MEMORY[0x263F8EE78], v41);
  id v188 = v50;
  char v189 = v14;
  outlined copy of Result<_DataTable, Error>(v50, v14);
  MLDataTable.subscript.getter(v30, (void *)v11, (uint64_t)&v183);
  HIDWORD(v132) = v14;
  outlined consume of Result<_DataTable, Error>(v50, v14);
  OUTLINED_FUNCTION_6_35(v52, v53, v54, v55, v56, v57, v58, v59, (uint64_t)v50, v132, v136, v139, v142, v146, v148, v150, v154, v158, v161,
    v164,
    v167,
    v171,
    v174,
    v178);
  uint64_t v175 = *(void *)(v60 + 16);
  if (v175)
  {
    uint64_t v179 = v49;
    uint64_t v140 = (void *)v11;
    uint64_t v11 = 0;
    unint64_t v61 = (char *)(v60 + 48);
    while (1)
    {
      uint64_t v62 = (void *)*((void *)v61 - 2);
      BOOL v63 = (void *)*((void *)v61 - 1);
      char v64 = *v61;
      uint64_t inited = *(void *)(v179 + 16);
      outlined copy of MLDataValue(v62, v63, *v61);
      if (!inited) {
        goto LABEL_70;
      }
      outlined copy of MLDataValue(v62, v63, v64);
      unint64_t v65 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v62, (unint64_t)v63, v64);
      if ((v66 & 1) == 0) {
        goto LABEL_69;
      }
      unint64_t v67 = *(void *)(*(void *)(v179 + 56) + 8 * v65);
      OUTLINED_FUNCTION_15_27();
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        if ((v67 & 0x8000000000000000) != 0) {
          goto LABEL_65;
        }
      }
      else
      {
        specialized _ArrayBuffer._consumeAndCreateNew()();
        uint64_t v51 = v73;
        if ((v67 & 0x8000000000000000) != 0) {
          goto LABEL_65;
        }
      }
      if (v67 >= v51[2]) {
        break;
      }
      uint64_t v68 = v51 + 4;
      uint64_t v69 = v51[v67 + 4];
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v51[v67 + 4] = v69;
      uint64_t v182 = v51;
      uint64_t v181 = v11;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        char v74 = OUTLINED_FUNCTION_11_8();
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v74, v75, v76, v69);
        uint64_t v69 = v77;
        v68[v67] = v77;
      }
      unint64_t v72 = *(void *)(v69 + 16);
      unint64_t v71 = *(void *)(v69 + 24);
      if (v72 >= v71 >> 1)
      {
        char v78 = OUTLINED_FUNCTION_91(v71);
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v78, v72 + 1, 1, v69);
        uint64_t v69 = v79;
        v68[v67] = v79;
      }
      v61 += 24;
      *(void *)(v69 + 16) = v72 + 1;
      *(void *)(v69 + 8 * v72 + 32) = v11;
      OUTLINED_FUNCTION_15_27();
      ++v11;
      uint64_t v51 = v182;
      if (v175 == v181 + 1)
      {
        swift_bridgeObjectRelease();
        uint64_t v86 = v140;
        uint64_t v87 = v155;
        goto LABEL_30;
      }
    }
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    OUTLINED_FUNCTION_15_27();
LABEL_70:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_71;
  }
  swift_bridgeObjectRelease();
  uint64_t v86 = (void *)v11;
  uint64_t v87 = v30;
LABEL_30:
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLUntypedColumn)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2272CB4A0;
  *(void *)(inited + 32) = 0x73656369646E69;
  *(void *)(inited + 40) = 0xE700000000000000;
  uint64_t v183 = v51;
  MEMORY[0x270FA5388](inited);
  swift_bridgeObjectRetain();
  _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
  OUTLINED_FUNCTION_4_46();
  *(void *)(inited + 48) = 0x73656369646E69;
  *(unsigned char *)(inited + 56) = v11 & 1;
  *(void *)(inited + 64) = v151;
  *(void *)(inited + 72) = v172;
  OUTLINED_FUNCTION_23_18((uint64_t)&v186);
  MEMORY[0x270FA5388](v88);
  OUTLINED_FUNCTION_21_26();
  swift_bridgeObjectRetain();
  _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))_s8CreateML15MLUntypedColumnVyACxcSTRzAA11MLDataValueO7ElementRtzlufcAA08_UntypedD0CyKXEfU_SayAEG_TG5TA_0);
  OUTLINED_FUNCTION_4_46();
  *(void *)(inited + 80) = 0x73656369646E69;
  *(unsigned char *)(inited + 88) = v11 & 1;
  *(void *)(inited + 96) = v87;
  *(void *)(inited + 104) = v86;
  OUTLINED_FUNCTION_23_18((uint64_t)v187);
  MEMORY[0x270FA5388](v89);
  OUTLINED_FUNCTION_21_26();
  swift_bridgeObjectRetain();
  _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in MLUntypedColumn.init<A>(_:)specialized partial apply);
  OUTLINED_FUNCTION_4_46();
  *(void *)(inited + 112) = 0x73656369646E69;
  *(unsigned char *)(inited + 120) = v11 & 1;
  uint64_t v90 = Dictionary.init(dictionaryLiteral:)();
  specialized MLDataTable.init<A>(uniqueKeysWithValues:)(v90, (uint64_t)&v183);
  if (v143)
  {
    swift_bridgeObjectRelease();
    outlined consume of Result<_DataTable, Error>(v190, v191);
    return;
  }
  OUTLINED_FUNCTION_17_26();
  char v92 = *(unsigned char *)(v91 - 256);
  id v188 = (id)inited;
  char v189 = v92;
  MLDataTable.stratifiedSplit<A>(proportions:on:generator:)(v162, v151, v172, v165, v168, v93, (uint64_t)&v183);
  char v169 = v92;
  OUTLINED_FUNCTION_17_26();
  LODWORD(v181) = *(unsigned __int8 *)(v94 - 256);
  id v188 = v129;
  char v189 = v133;
  outlined copy of Result<_DataTable, Error>(v129, v133);
  MLDataTable.subscript.getter(v155, v86, (uint64_t)&v183);
  outlined consume of Result<_DataTable, Error>(v129, v133);
  OUTLINED_FUNCTION_18_19();
  char v96 = *(unsigned char *)(v95 - 256);
  if (v96)
  {
    uint64_t v97 = -1;
  }
  else
  {
    swift_retain();
    uint64_t v97 = CMLColumn.size.getter();
    outlined consume of Result<_DataTable, Error>((id)v133, 0);
  }
  outlined consume of Result<_DataTable, Error>((id)v133, v96);
  uint64_t v98 = (void *)specialized Array.init(repeating:count:)(0, v97);
  id v188 = (id)inited;
  uint64_t v11 = v181;
  char v189 = v181;
  outlined copy of Result<_DataTable, Error>((id)inited, v181);
  uint64_t v99 = OUTLINED_FUNCTION_13_32();
  MLDataTable.subscript.getter(v99, v100, v101);
  outlined consume of Result<_DataTable, Error>((id)inited, v181);
  OUTLINED_FUNCTION_18_19();
  if (*(unsigned char *)(v102 - 256) == 1) {
    goto LABEL_75;
  }
  swift_retain();
  uint64_t v103 = CMLColumn.size.getter();
  outlined consume of Result<_DataTable, Error>((id)v181, 0);
  outlined consume of Result<_DataTable, Error>((id)v181, 0);
  if (v103 < 0)
  {
LABEL_76:
    __break(1u);
    OUTLINED_FUNCTION_2_49();
    swift_unexpectedError();
    __break(1u);
    return;
  }
  if (v103)
  {
    uint64_t v104 = 0;
    uint64_t v176 = v103;
    while (1)
    {
      if (v104 == v103) {
        goto LABEL_67;
      }
      if (v181) {
        goto LABEL_72;
      }
      uint64_t v105 = *(void *)(inited + 16);
      outlined copy of Result<_DataTable, Error>((id)inited, 0);
      swift_retain();
      uint64_t v11 = (uint64_t)specialized String.withCString<A>(_:)((void *(*)(uint64_t *__return_ptr, void *))partial apply for closure #1 in CMLTable.column(name:), v105, 0x73656369646E69, 0xE700000000000000);
      swift_release();
      outlined consume of Result<_DataTable, Error>((id)inited, 0);
      type metadata accessor for _UntypedColumn();
      *(void *)(swift_allocObject() + 16) = v11;
      swift_retain();
      _UntypedColumn.valueAtIndex(index:)(v104, (uint64_t)&v183);
      OUTLINED_FUNCTION_26_9();
      OUTLINED_FUNCTION_26_9();
      if (v185 != 3) {
        goto LABEL_73;
      }
      uint64_t v180 = v104;
      swift_retain();
      if (CMLSequence.size.getter()) {
        break;
      }
LABEL_58:
      uint64_t v104 = v180 + 1;
      OUTLINED_FUNCTION_2_49();
      OUTLINED_FUNCTION_2_49();
      uint64_t v103 = v176;
      if (v180 + 1 == v176) {
        goto LABEL_59;
      }
    }
    uint64_t v106 = 0;
    while (1)
    {
      swift_retain();
      CMLSequence.value(at:)(v106);
      uint64_t v108 = v107;
      OUTLINED_FUNCTION_2_49();
      MLDataValue.init(_:)(v108, (uint64_t)&v183);
      unint64_t v109 = (unint64_t)v183;
      uint64_t v11 = v185;
      swift_retain();
      uint64_t v110 = CMLSequence.size.getter();
      OUTLINED_FUNCTION_2_49();
      if (v106 >= v110)
      {
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
        goto LABEL_66;
      }
      if (v11) {
        goto LABEL_68;
      }
      outlined copy of Result<_DataTable, Error>((id)inited, 0);
      specialized MLDataTable.subscript.getter(v181, (uint64_t)&v188);
      outlined consume of Result<_DataTable, Error>((id)inited, 0);
      id v111 = v188;
      if (v189) {
        break;
      }
      outlined copy of Result<_DataTable, Error>(v188, 0);
      _UntypedColumn.valueAtIndex(index:)(v180, (uint64_t)&v183);
      OUTLINED_FUNCTION_26_9();
      uint64_t v11 = (uint64_t)v183;
      if (v185)
      {
        outlined consume of MLDataValue(v183, v184, v185);
        id v112 = v111;
        char v113 = 0;
LABEL_50:
        outlined consume of Result<_DataTable, Error>(v112, v113);
        uint64_t v11 = 0;
        if (swift_isUniquelyReferenced_nonNull_native()) {
          goto LABEL_51;
        }
        goto LABEL_56;
      }
      OUTLINED_FUNCTION_26_9();
      if (swift_isUniquelyReferenced_nonNull_native())
      {
LABEL_51:
        if ((v109 & 0x8000000000000000) != 0) {
          goto LABEL_63;
        }
        goto LABEL_52;
      }
LABEL_56:
      specialized _ArrayBuffer._consumeAndCreateNew()();
      uint64_t v98 = v114;
      if ((v109 & 0x8000000000000000) != 0) {
        goto LABEL_63;
      }
LABEL_52:
      if (v109 >= v98[2]) {
        goto LABEL_64;
      }
      ++v106;
      v98[v109 + 4] = v11;
      if (v106 == CMLSequence.size.getter()) {
        goto LABEL_58;
      }
    }
    id v112 = v188;
    char v113 = 1;
    goto LABEL_50;
  }
LABEL_59:
  uint64_t v115 = swift_bridgeObjectRelease();
  uint64_t v183 = v98;
  MEMORY[0x270FA5388](v115);
  OUTLINED_FUNCTION_3_49();
  uint64_t ML14_UntypedColumnC_s5Error_pTgm5 = (void *)_ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))_s8CreateML15MLUntypedColumnVyACxcSTRzAA22MLDataValueConvertible7ElementRpzlufcAA08_UntypedD0CyKXEfU_SaySiG_TG5TA_0);
  char v118 = v117 & 1;
  swift_bridgeObjectRelease();
  MLDataTable.willMutate()();
  uint64_t v183 = ML14_UntypedColumnC_s5Error_pTgm5;
  LOBYTE(v184) = v118;
  outlined copy of Result<_DataTable, Error>(ML14_UntypedColumnC_s5Error_pTgm5, v118);
  OUTLINED_FUNCTION_11_31();
  outlined consume of Result<_DataTable, Error>(ML14_UntypedColumnC_s5Error_pTgm5, v118);
  id v119 = v190;
  char v120 = v191;
  if ((v191 & 1) == 0)
  {
    outlined copy of Result<_DataTable, Error>(v190, 0);
    _DataTable.columnNamesDidChange()();
    OUTLINED_FUNCTION_26_9();
  }
  outlined consume of Result<_DataTable, Error>((id)inited, v169);
  outlined consume of Result<_DataTable, Error>((id)inited, v181);
  outlined consume of Result<_DataTable, Error>(ML14_UntypedColumnC_s5Error_pTgm5, v118);
  *(void *)uint64_t v159 = v119;
  *(unsigned char *)(v159 + 8) = v120;
}

void closure #1 in stratifiedSplitBySequenceGenerator<A>(proportions:generator:dataTable:by:on:)(uint64_t a1@<X0>, void *a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, void *a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v12 = *(void *)(a1 + 8);
  char v13 = *(unsigned char *)(a1 + 16);
  char v14 = a3 & 1;
  outlined copy of Result<_DataTable, Error>(a2, a3 & 1);
  MLDataTable.subscript.getter(a4, a5, (uint64_t)&v28);
  outlined consume of Result<_DataTable, Error>(a2, v14);
  uint64_t v15 = v28;
  LOBYTE(a5) = v29;
  *((void *)&v24 + 1) = v12;
  char v25 = v13;
  static MLUntypedColumn.== infix(_:_:)();
  outlined consume of Result<_DataTable, Error>(v15, (char)a5);
  uint64_t v16 = v30;
  LOBYTE(a4) = v31;
  id v26 = v30;
  char v27 = v31;
  outlined copy of Result<_DataTable, Error>(a2, v14);
  MLDataTable.subscript.getter((uint64_t)&v26, (uint64_t)&v28);
  outlined consume of Result<_DataTable, Error>(v16, a4);
  outlined consume of Result<_DataTable, Error>(a2, v14);
  char v17 = v28;
  char v18 = v29;
  *(void *)&long long v24 = v28;
  BYTE8(v24) = v29;
  MLDataTable.subscript.getter(a6, a7, (uint64_t)&v26);
  outlined consume of Result<_DataTable, Error>(v17, v18);
  id v19 = v26;
  if (v27)
  {
    outlined consume of Result<_DataTable, Error>(v26, 1);
    long long v20 = 0uLL;
    char v21 = 6;
  }
  else
  {
    swift_retain();
    _UntypedColumn.valueAtIndex(index:)(0, (uint64_t)&v24);
    outlined consume of Result<_DataTable, Error>(v19, 0);
    outlined consume of Result<_DataTable, Error>(v19, 0);
    long long v20 = v24;
    char v21 = v25;
  }
  *(_OWORD *)a8 = v20;
  *(unsigned char *)(a8 + 16) = v21;
}

void MersenneTwisterGenerator.twist()()
{
  uint64_t v1 = (uint64_t *)(v0 + 120);
  swift_beginAccess();
  unint64_t v2 = 0;
  for (unint64_t i = 156; ; ++i)
  {
    uint64_t v4 = *v1;
    unint64_t v5 = *(void *)(*v1 + 16);
    if (v2 >= v5) {
      break;
    }
    unint64_t v6 = v2 + 1;
    if (v2 == 623) {
      unint64_t v7 = 0;
    }
    else {
      unint64_t v7 = v2 + 1;
    }
    if (v7 >= v5) {
      goto LABEL_17;
    }
    unint64_t v8 = *(void *)(v4 + 32 + 8 * v7) % 0x270uLL;
    if (v8) {
      unint64_t v9 = ((v8 | ((unint64_t)*(unsigned int *)(v4 + 8 * v2 + 36) << 32)) >> 1) ^ 0xB5026F5AA96619E9;
    }
    else {
      unint64_t v9 = (v8 | ((unint64_t)*(unsigned int *)(v4 + 8 * v2 + 36) << 32)) >> 1;
    }
    if (v2 + 156 - 624 * (i / 0x270) >= v5) {
      goto LABEL_18;
    }
    uint64_t v10 = *(void *)(v4 + 1280 - 4992 * (i / 0x270) + 8 * v2);
    swift_beginAccess();
    uint64_t v11 = *v1;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v1 = v11;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _ArrayBuffer._consumeAndCreateNew()();
      uint64_t v11 = v13;
      *uint64_t v1 = v13;
    }
    if (v2 >= *(void *)(v11 + 16)) {
      goto LABEL_19;
    }
    *(void *)(v11 + 8 * v2 + 32) = v10 ^ v9;
    swift_endAccess();
    *(void *)(v0 + 128) = 0;
    ++v2;
    if (v6 == 624) {
      return;
    }
  }
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  __break(1u);
}

void MersenneTwisterGenerator.init(seed:)(uint64_t a1)
{
  *(_OWORD *)(v1 + 16) = xmmword_2272D1260;
  *(_OWORD *)(v1 + 32) = xmmword_2272D1270;
  *(_OWORD *)(v1 + 48) = xmmword_2272D1280;
  *(_OWORD *)(v1 + 64) = xmmword_2272D1290;
  *(_OWORD *)(v1 + 80) = xmmword_2272D12A0;
  *(_OWORD *)(v1 + 96) = xmmword_2272D12B0;
  *(void *)(v1 + 112) = 0x5851F42D4C957F2DLL;
  *(void *)(v1 + 128) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt64>);
  uint64_t v3 = swift_allocObject();
  unint64_t v4 = 0;
  *(_OWORD *)(v3 + 16) = xmmword_2272CB370;
  *(void *)(v3 + 32) = a1;
  while (1)
  {
    unint64_t v5 = v4 + 1;
    if (v4 >= v4 + 1) {
      break;
    }
    unint64_t v6 = *(void *)(v3 + 8 * v4 + 32) ^ (*(void *)(v3 + 8 * v4 + 32) >> 30);
    uint64_t v7 = 0x5851F42D00000000 * v6
       + 0x4C957F2D00000000 * HIDWORD(v6)
       + 1284865837 * (*(_DWORD *)(v3 + 8 * v4 + 32) ^ (*(void *)(v3 + 8 * v4 + 32) >> 30));
    unint64_t v8 = v7 + v5;
    if (__CFADD__(v7, v5)) {
      goto LABEL_9;
    }
    unint64_t v9 = *(void *)(v3 + 24);
    if (v5 >= v9 >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v4 + 2, 1, v3);
      uint64_t v3 = v10;
    }
    *(void *)(v3 + 16) = v4 + 2;
    *(void *)(v3 + 8 * v4++ + 40) = v8;
    if (v4 == 623)
    {
      *(void *)(v1 + 120) = v3;
      return;
    }
  }
  __break(1u);
LABEL_9:
  __break(1u);
}

Swift::UInt64 __swiftcall MersenneTwisterGenerator.next()()
{
  unint64_t v1 = *(void *)(v0 + 128);
  if (v1 == 624)
  {
    MersenneTwisterGenerator.twist()();
    unint64_t v1 = *(void *)(v0 + 128);
  }
  Swift::UInt64 result = swift_beginAccess();
  if ((v1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v3 = *(void *)(v0 + 120);
  if (v1 >= *(void *)(v3 + 16))
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v4 = *(void *)(v0 + 128);
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (!v5)
  {
    uint64_t v7 = (*(void *)(v3 + 8 * v1 + 32) >> 29) & 0x5555555555555555 ^ *(void *)(v3 + 8 * v1 + 32);
    unint64_t v8 = (((v7 << 17) & 0x71D67FFFEDA60000 ^ v7) << 37) & 0xFFF7EEE000000000 ^ (v7 << 17) & 0x71D67FFFEDA60000 ^ v7;
    Swift::UInt64 result = v8 ^ (v8 >> 43);
    *(void *)(v0 + 128) = v6;
    return result;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t MersenneTwisterGenerator.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

Swift::Int __swiftcall timestampSeed()()
{
  uint64_t v0 = type metadata accessor for Date();
  OUTLINED_FUNCTION_0();
  uint64_t v2 = v1;
  MEMORY[0x270FA5388](v3);
  BOOL v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  Date.timeIntervalSince1970.getter();
  double v7 = v6;
  Swift::Int result = (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v5, v0);
  double v9 = v7 * 1000.0;
  if ((~COERCE__INT64(v7 * 1000.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v9 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v9 < 9.22337204e18) {
    return (uint64_t)v9;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for MersenneTwisterGenerator()
{
  return self;
}

uint64_t specialized closure #1 in MLUntypedColumn.init<A>(_:)()
{
  type metadata accessor for _UntypedColumn();
  swift_allocObject();
  uint64_t v0 = swift_bridgeObjectRetain();
  return specialized _UntypedColumn.init<A>(_:)(v0);
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = *v4;
  *(void *)(v5 + 16) = result + 1;
  uint64_t v6 = v5 + 24 * result;
  *(void *)(v6 + 32) = a2;
  *(void *)(v6 + 40) = a3;
  *(unsigned char *)(v6 + 48) = a4;
  return result;
}

__n128 specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 40);
  uint64_t v5 = *v2;
  *(void *)(v5 + 16) = a1 + 1;
  uint64_t v6 = v5 + 48 * a1;
  *(_OWORD *)(v6 + 32) = *(_OWORD *)a2;
  *(unsigned char *)(v6 + 48) = v3;
  __n128 result = *(__n128 *)(a2 + 24);
  *(__n128 *)(v6 + 56) = result;
  *(unsigned char *)(v6 + 72) = v4;
  return result;
}

uint64_t specialized closure #1 in MLUntypedColumn.init<A>(_:)@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  return specialized closure #1 in MLUntypedColumn.init<A>(_:)(a1, a2, (uint64_t (*)(void))specialized closure #1 in MLUntypedColumn.init<A>(_:), a3);
}

{
  return specialized closure #1 in MLUntypedColumn.init<A>(_:)(a1, a2, specialized closure #1 in MLUntypedColumn.init<A>(_:), a3);
}

{
  return specialized closure #1 in MLUntypedColumn.init<A>(_:)(a1, a2, specialized closure #1 in MLUntypedColumn.init<A>(_:), a3);
}

uint64_t partial apply for specialized closure #1 in Sequence<>.contains(_:)(uint64_t *a1)
{
  return specialized closure #1 in Sequence<>.contains(_:)(a1, *(uint64_t **)(v1 + 16)) & 1;
}

uint64_t specialized closure #1 in MLUntypedColumn.init<A>(_:)@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = a3(*a1);
  if (v4) {
    *a2 = v4;
  }
  else {
    *a4 = result;
  }
  return result;
}

uint64_t _s8CreateML15MLUntypedColumnVyACxcSTRzAA11MLDataValueO7ElementRtzlufcAA08_UntypedD0CyKXEfU_SayAEG_TG5TA_0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return specialized closure #1 in MLUntypedColumn.init<A>(_:)(*(void **)(v2 + 16), a1, (uint64_t (*)(void))specialized closure #1 in MLUntypedColumn.init<A>(_:), a2);
}

uint64_t _s8CreateML15MLUntypedColumnVyACxcSTRzAA22MLDataValueConvertible7ElementRpzlufcAA08_UntypedD0CyKXEfU_SaySiG_TG5TA_0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return specialized closure #1 in MLUntypedColumn.init<A>(_:)(*(void **)(v2 + 16), a1, specialized closure #1 in MLUntypedColumn.init<A>(_:), a2);
}

uint64_t closure #1 in Sequence<>.contains(_:)specialized partial apply(uint64_t *a1)
{
  return partial apply for specialized closure #1 in Sequence<>.contains(_:)(a1) & 1;
}

void OUTLINED_FUNCTION_1_41()
{
  *(void *)(v0 - 288) = 0x2064696C61766E49;
  *(void *)(v0 - 280) = 0xE800000000000000;
}

void OUTLINED_FUNCTION_2_49()
{
  outlined consume of MLDataValue(v1, v0, 3);
}

uint64_t OUTLINED_FUNCTION_4_46()
{
  return swift_bridgeObjectRelease();
}

id OUTLINED_FUNCTION_5_40()
{
  *(void *)(v2 - 176) = v1;
  *(unsigned char *)(v2 - 168) = v0;
  return outlined copy of Result<_DataTable, Error>(v1, v0);
}

void OUTLINED_FUNCTION_6_35(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  char v26 = *(unsigned char *)(v24 - 280);
  *(void *)(v24 - 120) = *(void *)(v24 - 288);
  *(unsigned char *)(v24 - 112) = v26;
  Array<A>.init(_:)(v24 - 120, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24);
}

void OUTLINED_FUNCTION_7_36()
{
  uint64_t v2 = *(void **)(v0 - 280);
  uint64_t v3 = *(void **)(v0 - 272);
  int v4 = *(_DWORD *)(v0 - 260);
  outlined consume of MLDataValue(v2, v3, v4);
}

void OUTLINED_FUNCTION_11_31()
{
  MLDataTable.addImpl(newColumn:named:)();
}

uint64_t OUTLINED_FUNCTION_13_32()
{
  return 0x73656369646E69;
}

void OUTLINED_FUNCTION_14_27(uint64_t a1)
{
  *(void *)(a1 + 16) = v1;
  *(unsigned char *)(a1 + 24) = v2;
  outlined consume of Result<_DataTable, Error>(v3, 1);
}

void OUTLINED_FUNCTION_15_27()
{
  outlined consume of MLDataValue(v0, v1, v2);
}

uint64_t OUTLINED_FUNCTION_16_28()
{
  return 0;
}

BOOL OUTLINED_FUNCTION_22_23()
{
  return (!v1 & v0) != 0;
}

void OUTLINED_FUNCTION_23_18(uint64_t a1@<X8>)
{
  *(void *)(v1 - 288) = *(void *)(a1 - 256);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML11MLDataValueO_SitG_Sis5NeverOTg503_s8d4ML11fg20OS2iIgnyd_AC_SitSis5h126OIegnrzr_TR03_s8a68ML24stratifiedSplitGenerator11proportions9generator9dataTable2onAA06c31I0VSaySdG_xzAHSStKSGRzlFSiAA0K5D11O_N16XEfU0_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t result = v9;
    uint64_t v4 = (uint64_t *)(a1 + 56);
    do
    {
      uint64_t v6 = *v4;
      v4 += 4;
      uint64_t v5 = v6;
      uint64_t v10 = result;
      unint64_t v8 = *(void *)(result + 16);
      unint64_t v7 = *(void *)(result + 24);
      if (v8 >= v7 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
        uint64_t result = v10;
      }
      *(void *)(result + 16) = v8 + 1;
      *(void *)(result + 8 * v8 + 32) = v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

void specialized stratifiedSplitGenerator<A>(proportions:generator:dataTable:on:)(uint64_t a1@<X0>, void *a2@<X2>, int a3@<W3>, uint64_t a4@<X4>, void *a5@<X5>, uint64_t a6@<X8>)
{
  if (a3)
  {
    outlined copy of Result<_DataTable, Error>(a2, 1);
    uint64_t v12 = MEMORY[0x22A676370](0);
    if (!v12)
    {
LABEL_61:
      __break(1u);
      return;
    }
    uint64_t v13 = v12;
    type metadata accessor for CMLSequence();
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = v13;
    *(unsigned char *)(v14 + 24) = 1;
    outlined consume of Result<_DataTable, Error>(a2, 1);
  }
  else
  {
    outlined copy of Result<_DataTable, Error>(a2, 0);
    _DataTable.columnNames.getter(&v125);
    outlined consume of Result<_DataTable, Error>(a2, 0);
  }
  uint64_t v116 = (void *)a4;
  char v117 = a5;
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_12_24();
  char v16 = specialized Sequence.contains(where:)((uint64_t (*)(Swift::String *))partial apply for specialized closure #1 in Sequence<>.contains(_:));
  uint64_t v17 = v6;
  swift_release();
  if ((v16 & 1) == 0)
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(void *)uint64_t v80 = 0xD000000000000022;
    *(void *)(v80 + 8) = 0x80000002272D9450;
    *(_OWORD *)(v80 + 16) = 0u;
    *(_OWORD *)(v80 + 32) = 0u;
    *(unsigned char *)(v80 + 48) = 0;
    swift_willThrow();
    return;
  }
  uint64_t v116 = a2;
  LOBYTE(v117) = a3 & 1;
  outlined copy of Result<_DataTable, Error>(a2, a3 & 1);
  uint64_t v100 = a4;
  uint64_t v102 = (uint64_t)a5;
  MLDataTable.subscript.getter(a4, a5, (uint64_t)&v125);
  outlined consume of Result<_DataTable, Error>(a2, a3 & 1);
  id v18 = v125;
  char v19 = v126;
  id v123 = v125;
  char v124 = v126;
  MLUntypedColumn.dropDuplicates()(&v116);
  outlined consume of Result<_DataTable, Error>(v18, v19);
  id v125 = v116;
  char v126 = (char)v117;
  Array<A>.init(_:)((uint64_t)&v125, v20, v21, v22, v23, v24, v25, v26, v81, v83, v85, v87, v89, v91, v93, v96, v97, v98, v100,
    v102,
    v104,
    v106,
    v108,
    a1);
  uint64_t v28 = v27;
  uint64_t v116 = a2;
  LOBYTE(v117) = a3 & 1;
  uint64_t v29 = MLDataTable.size.getter();
  if (v29 < 0)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  HIDWORD(v105) = a3;
  uint64_t v84 = a6;
  uint64_t v30 = specialized _copyCollectionToContiguousArray<A>(_:)(0, v29);
  id v125 = a2;
  char v126 = a3 & 1;
  uint64_t v116 = a2;
  LOBYTE(v117) = a3 & 1;
  uint64_t v107 = a2;
  outlined copy of Result<_DataTable, Error>(a2, a3 & 1);
  uint64_t v31 = MLDataTable.size.getter();
  uint64_t v32 = specialized Array.init(repeating:count:)(0, v31);
  uint64_t v90 = *(void *)(v28 + 16);
  if (v90)
  {
    unint64_t v33 = 0;
    uint64_t v92 = v28 + 32;
    uint64_t v86 = v28;
    id v112 = v30;
    while (v33 < *(void *)(v28 + 16))
    {
      uint64_t v94 = v33;
      uint64_t v34 = v92 + 24 * v33;
      uint64_t v36 = *(void **)v34;
      uint64_t v35 = *(void **)(v34 + 8);
      int v37 = *(unsigned __int8 *)(v34 + 16);
      uint64_t v116 = v107;
      LOBYTE(v117) = BYTE4(v105) & 1;
      outlined copy of Result<_DataTable, Error>(v107, BYTE4(v105) & 1);
      outlined copy of MLDataValue(v36, v35, v37);
      MLDataTable.subscript.getter(v101, v103, (uint64_t)&v121);
      outlined consume of Result<_DataTable, Error>(v107, BYTE4(v105) & 1);
      uint64_t v38 = v121;
      char v39 = v122;
      id v119 = v121;
      char v120 = v122;
      uint64_t v116 = v36;
      char v117 = v35;
      HIDWORD(v99) = v37;
      char v118 = v37;
      static MLUntypedColumn.== infix(_:_:)();
      outlined consume of Result<_DataTable, Error>(v38, v39);
      uint64_t v116 = v123;
      LOBYTE(v117) = v124;
      Array<A>.init(_:)((uint64_t)&v116, v40, v41, v42, v43, v44, v45, v46, v82, v84, v86, v88, v90, v92, v94, (uint64_t)v36, (uint64_t)v35, v99, v101,
        (uint64_t)v103,
        v105,
        (uint64_t)v107,
        v109,
        v111);
      uint64_t v48 = v47;
      uint64_t v49 = *(void *)(v47 + 16);
      if (v49)
      {
        uint64_t v109 = v17;
        uint64_t v50 = v112;
        uint64_t v51 = v112[2];
        swift_retain();
        unint64_t v52 = 0;
        char v88 = v48;
        uint64_t v53 = (unsigned char *)(v48 + 48);
        uint64_t v54 = MEMORY[0x263F8EE78];
        uint64_t v113 = v51;
        uint64_t v114 = v49;
        while (1)
        {
          if (v51 == v52)
          {
LABEL_25:
            swift_release();
            uint64_t v17 = v109;
            goto LABEL_27;
          }
          if (v52 >= v50[2]) {
            break;
          }
          if (*v53) {
            BOOL v55 = 0;
          }
          else {
            BOOL v55 = *((void *)v53 - 2) == 1;
          }
          if (v55)
          {
            uint64_t v56 = *((void *)v53 - 1);
            uint64_t v57 = v50[v52 + 4];
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v116 = (void *)v54;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              uint64_t v50 = v112;
              uint64_t v54 = (uint64_t)v116;
            }
            unint64_t v59 = *(void *)(v54 + 16);
            if (v59 >= *(void *)(v54 + 24) >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              uint64_t v50 = v112;
              uint64_t v54 = (uint64_t)v116;
            }
            *(void *)(v54 + 16) = v59 + 1;
            uint64_t v60 = v54 + 32 * v59;
            *(void *)(v60 + 32) = 1;
            *(void *)(v60 + 40) = v56;
            *(unsigned char *)(v60 + 48) = 0;
            *(void *)(v60 + 56) = v57;
            uint64_t v51 = v113;
            uint64_t v49 = v114;
          }
          ++v52;
          v53 += 24;
          if (v49 == v52) {
            goto LABEL_25;
          }
        }
        __break(1u);
        goto LABEL_58;
      }
      uint64_t v54 = MEMORY[0x263F8EE78];
LABEL_27:
      swift_bridgeObjectRelease();
      uint64_t v61 = v17;
      ML11MLDataValueO_SitG_Sis5NeverOTg503_s8d4ML11fg20OS2iIgnyd_AC_SitSis5h126OIegnrzr_TR03_s8a68ML24stratifiedSplitGenerator11proportions9generator9dataTable2onAA06c31I0VSaySdG_xzAHSStKSGRzlFSiAA0K5D11O_N16XEfU0_Tf3nnnpf_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML11MLDataValueO_SitG_Sis5NeverOTg503_s8d4ML11fg20OS2iIgnyd_AC_SitSis5h126OIegnrzr_TR03_s8a68ML24stratifiedSplitGenerator11proportions9generator9dataTable2onAA06c31I0VSaySdG_xzAHSStKSGRzlFSiAA0K5D11O_N16XEfU0_Tf3nnnpf_nTf1cn_n(v54);
      swift_release();
      BOOL v63 = specialized _copyCollectionToContiguousArray<A>(_:)(0, *(void *)(ML11MLDataValueO_SitG_Sis5NeverOTg503_s8d4ML11fg20OS2iIgnyd_AC_SitSis5h126OIegnrzr_TR03_s8a68ML24stratifiedSplitGenerator11proportions9generator9dataTable2onAA06c31I0VSaySdG_xzAHSStKSGRzlFSiAA0K5D11O_N16XEfU0_Tf3nnnpf_nTf1cn_n+ 16));
      specialized randomSplit<A>(indices:proportions:generator:)((uint64_t)v63, v111);
      if (v17)
      {
LABEL_56:
        swift_bridgeObjectRelease();
        swift_release();
        OUTLINED_FUNCTION_7_36();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        outlined consume of Result<_DataTable, Error>(v107, BYTE4(v105) & 1);
        return;
      }
      uint64_t v65 = v64;
      swift_release();
      uint64_t v115 = *(void *)(v111 + 16);
      if (v115)
      {
        uint64_t v109 = 0;
        unint64_t v66 = 0;
        uint64_t v67 = v65 + 32;
        while (v66 < *(void *)(v65 + 16))
        {
          uint64_t v68 = *(void *)(*(void *)(v67 + 8 * v66) + 16);
          if (v68)
          {
            unint64_t v69 = 0;
            while (1)
            {
              uint64_t v70 = *(void *)(v67 + 8 * v66);
              if (v69 >= *(void *)(v70 + 16)) {
                break;
              }
              unint64_t v71 = *(void *)(v70 + 8 * v69 + 32);
              if ((v71 & 0x8000000000000000) != 0) {
                goto LABEL_52;
              }
              if (v71 >= *(void *)(ML11MLDataValueO_SitG_Sis5NeverOTg503_s8d4ML11fg20OS2iIgnyd_AC_SitSis5h126OIegnrzr_TR03_s8a68ML24stratifiedSplitGenerator11proportions9generator9dataTable2onAA06c31I0VSaySdG_xzAHSStKSGRzlFSiAA0K5D11O_N16XEfU0_Tf3nnnpf_nTf1cn_n
                                    + 16))
                goto LABEL_53;
              unint64_t v72 = *(void *)(ML11MLDataValueO_SitG_Sis5NeverOTg503_s8d4ML11fg20OS2iIgnyd_AC_SitSis5h126OIegnrzr_TR03_s8a68ML24stratifiedSplitGenerator11proportions9generator9dataTable2onAA06c31I0VSaySdG_xzAHSStKSGRzlFSiAA0K5D11O_N16XEfU0_Tf3nnnpf_nTf1cn_n
                              + 32
                              + 8 * v71);
              if (swift_isUniquelyReferenced_nonNull_native())
              {
                if ((v72 & 0x8000000000000000) != 0) {
                  goto LABEL_54;
                }
              }
              else
              {
                specialized _ArrayBuffer._consumeAndCreateNew()();
                uint64_t v32 = v73;
                if ((v72 & 0x8000000000000000) != 0) {
                  goto LABEL_54;
                }
              }
              if (v72 >= *(void *)(v32 + 16)) {
                goto LABEL_55;
              }
              ++v69;
              *(void *)(v32 + 8 * v72 + 32) = v66;
              if (v68 == v69) {
                goto LABEL_43;
              }
            }
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
LABEL_55:
            __break(1u);
            goto LABEL_56;
          }
LABEL_43:
          if (++v66 == v115)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v17 = v61;
            goto LABEL_46;
          }
        }
LABEL_58:
        __break(1u);
        break;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_46:
      uint64_t v28 = v86;
      unint64_t v33 = v95 + 1;
      OUTLINED_FUNCTION_7_36();
      if (v95 + 1 == v90) {
        goto LABEL_47;
      }
    }
    __break(1u);
    goto LABEL_60;
  }
LABEL_47:
  swift_release();
  uint64_t v74 = swift_bridgeObjectRelease();
  uint64_t v116 = (void *)v32;
  MEMORY[0x270FA5388](v74);
  OUTLINED_FUNCTION_12_24();
  uint64_t ML14_UntypedColumnC_s5Error_pTgm5 = (void *)_ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
  char v77 = v76 & 1;
  swift_bridgeObjectRelease();
  MLDataTable.willMutate()();
  uint64_t v116 = ML14_UntypedColumnC_s5Error_pTgm5;
  LOBYTE(v117) = v77;
  outlined copy of Result<_DataTable, Error>(ML14_UntypedColumnC_s5Error_pTgm5, v77);
  MLDataTable.addImpl(newColumn:named:)();
  outlined consume of Result<_DataTable, Error>(ML14_UntypedColumnC_s5Error_pTgm5, v77);
  id v78 = v125;
  char v79 = v126;
  if ((v126 & 1) == 0)
  {
    outlined copy of Result<_DataTable, Error>(v125, 0);
    _DataTable.columnNamesDidChange()();
    outlined consume of Result<_DataTable, Error>(v78, 0);
  }
  outlined consume of Result<_DataTable, Error>(ML14_UntypedColumnC_s5Error_pTgm5, v77);
  *(void *)uint64_t v84 = v78;
  *(unsigned char *)(v84 + 8) = v79;
}

uint64_t MLTextClassifier.DataSource.labeledTexts()()
{
  return static _TextUtilities.getTextLabeledDictionary(from:)(v0);
}

void MLTextClassifier.DataSource.stratifiedSplit(proportions:seed:labelColumn:textColumn:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v9 = v7;
  uint64_t v17 = static _TextUtilities.getTextLabeledDictionary(from:)(v9);
  if (!v8)
  {
    specialized generateTextTable<A>(_:textColumn:labelColumn:using:)(v17, a5, a6, a3, (uint64_t)a4, (uint64_t)&v21);
    swift_bridgeObjectRelease();
    if (a2 < 0)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    else
    {
      id v18 = v21;
      int v19 = v22;
      type metadata accessor for MersenneTwisterGenerator();
      swift_allocObject();
      MersenneTwisterGenerator.init(seed:)(a2);
      uint64_t v21 = v20;
      specialized stratifiedSplitGenerator<A>(proportions:generator:dataTable:on:)(a1, v18, v19, a3, a4, a7);
      swift_release();
      outlined consume of Result<_DataTable, Error>(v18, v19);
    }
  }
}

uint64_t specialized generateTextTable<A>(_:textColumn:labelColumn:using:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7 = v6;
  uint64_t v38 = a5;
  uint64_t v36 = unpackLabeledTexts(_:)(a1);
  specialized MutableCollection<>.shuffle<A>(using:)();
  uint64_t v10 = v36;
  uint64_t v11 = *(void *)(v36 + 16);
  if (v11)
  {
    uint64_t v31 = v6;
    uint64_t v32 = a6;
    uint64_t v36 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v12 = v36;
    uint64_t v33 = v10;
    uint64_t v13 = (uint64_t *)(v10 + 40);
    uint64_t v14 = v11;
    do
    {
      uint64_t v16 = *(v13 - 1);
      uint64_t v15 = *v13;
      uint64_t v36 = v12;
      unint64_t v18 = *(void *)(v12 + 16);
      unint64_t v17 = *(void *)(v12 + 24);
      swift_bridgeObjectRetain();
      if (v18 >= v17 >> 1)
      {
        OUTLINED_FUNCTION_2_50();
        uint64_t v12 = v36;
      }
      v13 += 4;
      *(void *)(v12 + 16) = v18 + 1;
      uint64_t v19 = v12 + 16 * v18;
      *(void *)(v19 + 32) = v16;
      *(void *)(v19 + 40) = v15;
      --v14;
    }
    while (v14);
    uint64_t v36 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v20 = v36;
    uint64_t v21 = (uint64_t *)(v33 + 56);
    do
    {
      uint64_t v22 = *(v21 - 1);
      uint64_t v10 = *v21;
      uint64_t v36 = v20;
      unint64_t v24 = *(void *)(v20 + 16);
      unint64_t v23 = *(void *)(v20 + 24);
      swift_bridgeObjectRetain();
      if (v24 >= v23 >> 1)
      {
        OUTLINED_FUNCTION_2_50();
        uint64_t v20 = v36;
      }
      *(void *)(v20 + 16) = v24 + 1;
      uint64_t v25 = v20 + 16 * v24;
      *(void *)(v25 + 32) = v22;
      *(void *)(v25 + 40) = v10;
      v21 += 4;
      --v11;
    }
    while (v11);
    swift_release();
    uint64_t v7 = v31;
    a6 = v32;
  }
  else
  {
    swift_release();
    uint64_t v20 = MEMORY[0x263F8EE78];
    uint64_t v12 = MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLUntypedColumn)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2272CB4D0;
  *(void *)(inited + 32) = a2;
  *(void *)(inited + 40) = a3;
  uint64_t v36 = v12;
  MEMORY[0x270FA5388](inited);
  swift_bridgeObjectRetain();
  _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
  OUTLINED_FUNCTION_3_50();
  *(void *)(inited + 48) = v10;
  *(unsigned char *)(inited + 56) = a3 & 1;
  uint64_t v27 = v38;
  *(void *)(inited + 64) = a4;
  *(void *)(inited + 72) = v27;
  uint64_t v36 = v20;
  MEMORY[0x270FA5388](v27);
  swift_bridgeObjectRetain();
  _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in MLUntypedColumn.init<A>(_:)specialized partial apply);
  OUTLINED_FUNCTION_3_50();
  *(void *)(inited + 80) = v10;
  *(unsigned char *)(inited + 88) = a3 & 1;
  uint64_t v28 = Dictionary.init(dictionaryLiteral:)();
  uint64_t result = specialized MLDataTable.init<A>(uniqueKeysWithValues:)(v28, (uint64_t)&v36);
  if (!v7)
  {
    char v30 = v37;
    *(void *)a6 = v36;
    *(unsigned char *)(a6 + 8) = v30;
  }
  return result;
}

uint64_t type metadata accessor for MLTextClassifier.DataSource()
{
  uint64_t result = type metadata singleton initialization cache for MLTextClassifier.DataSource;
  if (!type metadata singleton initialization cache for MLTextClassifier.DataSource) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void OUTLINED_FUNCTION_2_50()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_3_50()
{
  return swift_bridgeObjectRelease();
}

uint64_t LinearRegressorTrainingSessionDelegate.init(sessionParameters:)(uint64_t a1)
{
  OUTLINED_FUNCTION_108_0();
  uint64_t v3 = type metadata accessor for MLLinearRegressor.PersistentParameters();
  OUTLINED_FUNCTION_42_5(v3);
  DataFrame.init()();
  OUTLINED_FUNCTION_108_0();
  uint64_t v4 = type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_42_5(v4);
  OUTLINED_FUNCTION_108_0();
  uint64_t v5 = type metadata accessor for MLLinearRegressor.Regressor();
  OUTLINED_FUNCTION_42_5(v5);
  OUTLINED_FUNCTION_108_0();
  uint64_t v6 = type metadata accessor for MLLinearRegressor.Model();
  OUTLINED_FUNCTION_42_5(v6);
  OUTLINED_FUNCTION_40_12(OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingMetrics);
  uint64_t v7 = v1 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationMetrics;
  *(void *)uint64_t v7 = 0;
  *(void *)(v7 + 8) = 0;
  *(unsigned char *)(v7 + 16) = v8;
  outlined init with take of MLLinearRegressor.PersistentParameters(a1, v1 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_sessionParameters, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
  return v1;
}

void LinearRegressorTrainingSessionDelegate.init(trainingData:validationData:targetColumn:featureColumns:parameters:sessionParameters:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v44 = v3;
  uint64_t v45 = v4;
  uint64_t v42 = v5;
  uint64_t v43 = v6;
  uint64_t v8 = v7;
  uint64_t v47 = v9;
  uint64_t v11 = v10;
  OUTLINED_FUNCTION_4_12();
  uint64_t v12 = (int *)type metadata accessor for MLLinearRegressor.PersistentParameters();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_41_0();
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  uint64_t v15 = OUTLINED_FUNCTION_17(v14);
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_33_0();
  uint64_t v38 = v16;
  uint64_t v17 = type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v19 = v18;
  MEMORY[0x270FA5388](v20);
  OUTLINED_FUNCTION_33_0();
  uint64_t v37 = v21;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
  uint64_t v23 = OUTLINED_FUNCTION_17(v22);
  MEMORY[0x270FA5388](v23);
  OUTLINED_FUNCTION_33_0();
  uint64_t v40 = v24;
  uint64_t v39 = v0 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingParameters;
  __swift_storeEnumTagSinglePayload(v0 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingParameters, 1, 1, (uint64_t)v12);
  DataFrame.init()();
  OUTLINED_FUNCTION_3_26(v0 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationData, 1);
  uint64_t v25 = type metadata accessor for MLLinearRegressor.Regressor();
  OUTLINED_FUNCTION_42_15(v25);
  uint64_t v26 = type metadata accessor for MLLinearRegressor.Model();
  OUTLINED_FUNCTION_42_15(v26);
  OUTLINED_FUNCTION_40_12(OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingMetrics);
  uint64_t v27 = v0 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationMetrics;
  *(void *)uint64_t v27 = 0;
  *(void *)(v27 + 8) = 0;
  *(unsigned char *)(v27 + 16) = v28;
  static _FeatureUtilities.selectFeaturesFromTrainingData(trainingData:targetColumn:featureColumns:)(v11, v8, v42, v43);
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of MLLinearRegressor.Model(v44, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
    outlined destroy of MLLinearRegressor.ModelParameters(v45);
    _s10Foundation3URLVSgWOhTm_0(v47, &demangling cache variable for type metadata for DataFrame?);
    char v30 = *(void (**)(void))(v19 + 8);
    OUTLINED_FUNCTION_16_26();
    v30();
    _s10Foundation3URLVSgWOhTm_0(v0 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingParameters, &demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
    OUTLINED_FUNCTION_16_26();
    v30();
    _s10Foundation3URLVSgWOhTm_0(v0 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationData, &demangling cache variable for type metadata for DataFrame?);
    _s10Foundation3URLVSgWOhTm_0(v0 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_regressor, &demangling cache variable for type metadata for MLLinearRegressor.Regressor?);
    _s10Foundation3URLVSgWOhTm_0(v0 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_model, &demangling cache variable for type metadata for MLLinearRegressor.Model?);
    outlined consume of MLRegressorMetrics?(*(void **)(v0 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingMetrics), *(void *)(v0 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingMetrics + 8), *(unsigned char *)(v0 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingMetrics + 16));
    outlined consume of MLRegressorMetrics?(*(void **)(v0 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationMetrics), *(void *)(v0 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationMetrics + 8), *(unsigned char *)(v0 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationMetrics + 16));
    OUTLINED_FUNCTION_4_12();
    swift_deallocPartialClassInstance();
  }
  else
  {
    uint64_t v41 = v29;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v37, v11, v17);
    outlined init with copy of MLLogisticRegressionClassifier.Classifier?(v47, v38, &demangling cache variable for type metadata for DataFrame?);
    outlined init with copy of MLLinearRegressor.ModelParameters(v45, (uint64_t)v46);
    uint64_t v31 = v2 + v12[5];
    OUTLINED_FUNCTION_3_26(v31, 1);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32))(v2, v37, v17);
    outlined assign with take of MLClassifierMetrics?(v38, v31, &demangling cache variable for type metadata for DataFrame?);
    uint64_t v32 = (uint64_t *)(v2 + v12[6]);
    *uint64_t v32 = v8;
    v32[1] = (uint64_t)v42;
    *(void *)(v2 + v12[7]) = v41;
    memcpy((void *)(v2 + v12[8]), v46, 0x49uLL);
    outlined init with take of MLLinearRegressor.PersistentParameters(v2, v40, (void (*)(void))type metadata accessor for MLLinearRegressor.PersistentParameters);
    outlined destroy of MLLinearRegressor.ModelParameters(v45);
    _s10Foundation3URLVSgWOhTm_0(v47, &demangling cache variable for type metadata for DataFrame?);
    OUTLINED_FUNCTION_16_26();
    v33();
    OUTLINED_FUNCTION_82_1();
    __swift_storeEnumTagSinglePayload(v34, v35, v36, (uint64_t)v12);
    OUTLINED_FUNCTION_81_2();
    outlined assign with take of MLClassifierMetrics?(v40, v39, &demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
    swift_endAccess();
    outlined init with take of MLLinearRegressor.PersistentParameters(v44, v0 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_sessionParameters, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
  }
  OUTLINED_FUNCTION_8_1();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> LinearRegressorTrainingSessionDelegate.setUp()()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v2 = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLinearRegressor.Model?);
  uint64_t v4 = OUTLINED_FUNCTION_17(v3);
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_41_0();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLinearRegressor.Regressor?);
  uint64_t v6 = OUTLINED_FUNCTION_17(v5);
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_33();
  uint64_t v9 = (uint64_t *)(v7 - v8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = &v41[-v11 - 8];
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
  uint64_t v14 = OUTLINED_FUNCTION_17(v13);
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_3_0();
  uint64_t v17 = v16 - v15;
  uint64_t v18 = (int *)type metadata accessor for MLLinearRegressor.PersistentParameters();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_3_0();
  uint64_t v22 = v21 - v20;
  uint64_t v23 = v2 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_53();
  outlined init with copy of MLLogisticRegressionClassifier.Classifier?(v23, v17, &demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
  OUTLINED_FUNCTION_57_4(v17, 1, (uint64_t)v18);
  if (v24)
  {
    _s10Foundation3URLVSgWOhTm_0(v17, &demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
    __break(1u);
  }
  else
  {
    outlined init with take of MLLinearRegressor.PersistentParameters(v17, v22, (void (*)(void))type metadata accessor for MLLinearRegressor.PersistentParameters);
    uint64_t v25 = v2 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingData;
    OUTLINED_FUNCTION_5_41();
    type metadata accessor for DataFrame();
    OUTLINED_FUNCTION_8();
    (*(void (**)(uint64_t, uint64_t))(v26 + 24))(v25, v22);
    swift_endAccess();
    uint64_t v27 = v22 + v18[5];
    uint64_t v28 = v2 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationData;
    OUTLINED_FUNCTION_81_2();
    outlined assign with copy of DataFrame?(v27, v28);
    swift_endAccess();
    uint64_t v29 = (uint64_t *)(v22 + v18[6]);
    uint64_t v30 = *v29;
    uint64_t v31 = v29[1];
    uint64_t v32 = *(void *)(v22 + v18[7]);
    outlined init with copy of MLLinearRegressor.ModelParameters(v22 + v18[8], (uint64_t)v41);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    MLLinearRegressor.Regressor.init(annotationColumnName:featureColumnNames:parameters:)(v30, v31, v32, (uint64_t)v41, v12);
    uint64_t v33 = type metadata accessor for MLLinearRegressor.Regressor();
    OUTLINED_FUNCTION_3_26((uint64_t)v12, 0);
    uint64_t v34 = v2 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_regressor;
    OUTLINED_FUNCTION_5_41();
    outlined assign with take of MLClassifierMetrics?((uint64_t)v12, v34, &demangling cache variable for type metadata for MLLinearRegressor.Regressor?);
    swift_endAccess();
    uint64_t v35 = OUTLINED_FUNCTION_34_10();
    outlined init with copy of MLLogisticRegressionClassifier.Classifier?(v35, v36, &demangling cache variable for type metadata for MLLinearRegressor.Regressor?);
    OUTLINED_FUNCTION_57_4((uint64_t)v9, 1, v33);
    if (!v24)
    {
      uint64_t v38 = *v9;
      uint64_t v37 = v9[1];
      type metadata accessor for MLLinearRegressor.Model();
      swift_bridgeObjectRetain();
      BaseLinearRegressor.makeTransformer()();
      *uint64_t v1 = v38;
      v1[1] = v37;
      v1[3] = 0;
      v1[4] = 0;
      v1[2] = 0;
      outlined destroy of MLLinearRegressor.Model(v22, (void (*)(void))type metadata accessor for MLLinearRegressor.PersistentParameters);
      outlined destroy of MLLinearRegressor.Model((uint64_t)v9, (void (*)(void))type metadata accessor for MLLinearRegressor.Regressor);
      OUTLINED_FUNCTION_3_26((uint64_t)v1, 0);
      uint64_t v39 = v2 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_model;
      OUTLINED_FUNCTION_5_41();
      outlined assign with take of MLClassifierMetrics?((uint64_t)v1, v39, &demangling cache variable for type metadata for MLLinearRegressor.Model?);
      swift_endAccess();
      OUTLINED_FUNCTION_8_1();
      return;
    }
  }
  __break(1u);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> LinearRegressorTrainingSessionDelegate.resume(from:)(Swift::OpaquePointer from)
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v63 = v3;
  uint64_t v69 = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLinearRegressor.Model?);
  uint64_t v7 = OUTLINED_FUNCTION_17(v6);
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_33_0();
  uint64_t v64 = v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLinearRegressor.Regressor?);
  uint64_t v10 = OUTLINED_FUNCTION_17(v9);
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_33();
  uint64_t v66 = v11 - v12;
  MEMORY[0x270FA5388](v13);
  uint64_t v65 = (char *)&v63 - v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  uint64_t v16 = OUTLINED_FUNCTION_17(v15);
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_41_0();
  uint64_t v17 = type metadata accessor for MLCheckpoint();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_33_0();
  uint64_t v20 = v19;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
  uint64_t v22 = OUTLINED_FUNCTION_17(v21);
  MEMORY[0x270FA5388](v22);
  uint64_t v23 = OUTLINED_FUNCTION_18_20();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v24);
  OUTLINED_FUNCTION_3_0();
  uint64_t v27 = v26 - v25;
  uint64_t v67 = v2;
  uint64_t v28 = v2 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_53();
  outlined init with copy of MLLogisticRegressionClassifier.Classifier?(v28, v1, &demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
  OUTLINED_FUNCTION_57_4(v1, 1, v23);
  if (v29)
  {
    _s10Foundation3URLVSgWOhTm_0(v1, &demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v30 = OUTLINED_FUNCTION_34_10();
  outlined init with take of MLLinearRegressor.PersistentParameters(v30, v31, v32);
  specialized BidirectionalCollection.last.getter(v69, v4);
  OUTLINED_FUNCTION_57_4(v4, 1, v17);
  if (v29)
  {
    _s10Foundation3URLVSgWOhTm_0(v4, &demangling cache variable for type metadata for MLCheckpoint?);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_19_0(v33, 0xD00000000000001DLL);
LABEL_13:
    outlined destroy of MLLinearRegressor.Model(v27, (void (*)(void))type metadata accessor for MLLinearRegressor.PersistentParameters);
    goto LABEL_14;
  }
  outlined init with take of MLLinearRegressor.PersistentParameters(v4, v20, (void (*)(void))type metadata accessor for MLCheckpoint);
  switch(*(unsigned char *)(v20 + *(int *)(v17 + 20)))
  {
    case 2:
      swift_bridgeObjectRelease();
      goto LABEL_9;
    case 4:
      OUTLINED_FUNCTION_55_0();
      goto LABEL_8;
    default:
LABEL_8:
      char v34 = OUTLINED_FUNCTION_37_5();
      swift_bridgeObjectRelease();
      if ((v34 & 1) == 0)
      {
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        OUTLINED_FUNCTION_85();
        OUTLINED_FUNCTION_19_0(v62, 0xD000000000000027);
        outlined destroy of MLLinearRegressor.Model(v20, (void (*)(void))type metadata accessor for MLCheckpoint);
        goto LABEL_13;
      }
LABEL_9:
      uint64_t v35 = v67;
      OUTLINED_FUNCTION_5_41();
      type metadata accessor for DataFrame();
      OUTLINED_FUNCTION_8();
      uint64_t v36 = OUTLINED_FUNCTION_34_10();
      v37(v36);
      swift_endAccess();
      OUTLINED_FUNCTION_81_2();
      uint64_t v38 = OUTLINED_FUNCTION_0_5();
      outlined assign with copy of DataFrame?(v38, v39);
      swift_endAccess();
      uint64_t v40 = *(void *)(v27 + *(int *)(v23 + 28));
      outlined init with copy of MLLinearRegressor.ModelParameters(v27 + *(int *)(v23 + 32), (uint64_t)&v68);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v41 = (uint64_t)v65;
      uint64_t v42 = OUTLINED_FUNCTION_0_5();
      MLLinearRegressor.Regressor.init(annotationColumnName:featureColumnNames:parameters:)(v42, v43, v40, v44, v45);
      uint64_t v46 = type metadata accessor for MLLinearRegressor.Regressor();
      OUTLINED_FUNCTION_82_1();
      __swift_storeEnumTagSinglePayload(v47, v48, v49, v46);
      uint64_t v50 = v35 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_regressor;
      OUTLINED_FUNCTION_81_2();
      outlined assign with take of MLClassifierMetrics?(v41, v50, &demangling cache variable for type metadata for MLLinearRegressor.Regressor?);
      swift_endAccess();
      uint64_t v51 = v50;
      uint64_t v52 = v66;
      outlined init with copy of MLLogisticRegressionClassifier.Classifier?(v51, v66, &demangling cache variable for type metadata for MLLinearRegressor.Regressor?);
      uint64_t v53 = OUTLINED_FUNCTION_133();
      OUTLINED_FUNCTION_57_4(v53, v54, v46);
      if (v29)
      {
LABEL_16:
        __break(1u);
        JUMPOUT(0x2271C64FCLL);
      }
      lazy protocol witness table accessor for type MLLinearRegressor.Regressor and conformance MLLinearRegressor.Regressor();
      uint64_t v55 = v63;
      uint64_t v56 = v64;
      SupervisedTabularEstimator.read(from:)();
      outlined destroy of MLLinearRegressor.Model(v20, (void (*)(void))type metadata accessor for MLCheckpoint);
      outlined destroy of MLLinearRegressor.Model(v27, (void (*)(void))type metadata accessor for MLLinearRegressor.PersistentParameters);
      outlined destroy of MLLinearRegressor.Model(v52, (void (*)(void))type metadata accessor for MLLinearRegressor.Regressor);
      if (!v55)
      {
        type metadata accessor for MLLinearRegressor.Model();
        OUTLINED_FUNCTION_82_1();
        __swift_storeEnumTagSinglePayload(v57, v58, v59, v60);
        uint64_t v61 = v67 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_model;
        OUTLINED_FUNCTION_5_41();
        outlined assign with take of MLClassifierMetrics?(v56, v61, &demangling cache variable for type metadata for MLLinearRegressor.Model?);
        swift_endAccess();
      }
LABEL_14:
      OUTLINED_FUNCTION_8_1();
      return;
  }
}

Swift::Int_optional __swiftcall LinearRegressorTrainingSessionDelegate.itemCount(phase:)(CreateML::MLPhase phase)
{
  int v2 = *(unsigned __int8 *)phase;
  if (v2 == 2)
  {
    uint64_t v4 = v1 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_sessionParameters;
    Swift::Int v3 = *(void *)(v4 + *(int *)(type metadata accessor for MLTrainingSessionParameters() + 28));
  }
  else
  {
    Swift::Int v3 = 0;
  }
  Swift::Bool v5 = v2 != 2;
  result.value = v3;
  result.is_nil = v5;
  return result;
}

uint64_t LinearRegressorTrainingSessionDelegate.train(from:)(uint64_t a1)
{
  v2[14] = a1;
  v2[15] = v1;
  uint64_t v3 = type metadata accessor for MetricsKey();
  v2[16] = v3;
  OUTLINED_FUNCTION_1(v3);
  v2[17] = v4;
  v2[18] = OUTLINED_FUNCTION_5();
  uint64_t v5 = type metadata accessor for DataFrame();
  v2[19] = v5;
  OUTLINED_FUNCTION_1(v5);
  v2[20] = v6;
  v2[21] = OUTLINED_FUNCTION_5();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLinearRegressor.Regressor?);
  OUTLINED_FUNCTION_17(v7);
  v2[22] = OUTLINED_FUNCTION_5();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
  OUTLINED_FUNCTION_17(v8);
  v2[23] = OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

uint64_t LinearRegressorTrainingSessionDelegate.train(from:)()
{
  uint64_t v1 = v0[23];
  OUTLINED_FUNCTION_53();
  uint64_t v2 = OUTLINED_FUNCTION_0_5();
  outlined init with copy of MLLogisticRegressionClassifier.Classifier?(v2, v3, &demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
  uint64_t v4 = type metadata accessor for MLLinearRegressor.PersistentParameters();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v1, 1, v4);
  uint64_t result = _s10Foundation3URLVSgWOhTm_0(v1, &demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
  if (EnumTagSinglePayload == 1)
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v7 = v0[14];
  uint64_t v8 = v0[15] + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_sessionParameters;
  uint64_t result = type metadata accessor for MLTrainingSessionParameters();
  uint64_t v9 = *(void *)(v8 + *(int *)(result + 20));
  uint64_t v10 = v7 + v9;
  if (__OFADD__(v7, v9))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v11 = *(void *)(v8 + *(int *)(result + 28));
  if (__OFSUB__(v11, v7))
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v9 >= v11 - v7) {
    uint64_t v12 = v11 - v7;
  }
  else {
    uint64_t v12 = *(void *)(v8 + *(int *)(result + 20));
  }
  type metadata accessor for EventCollector();
  swift_allocObject();
  uint64_t result = EventCollector.init()();
  if (v12 < 0) {
    goto LABEL_23;
  }
  uint64_t v13 = result;
  uint64_t v41 = v11;
  uint64_t v42 = v10;
  uint64_t v43 = v12;
  if (!v12)
  {
LABEL_13:
    uint64_t v28 = v0[17];
    static MetricsKey.trainingMaximumError.getter();
    specialized EventCollector.getLast<A>(metric:type:)();
    char v30 = v29;
    uint64_t v31 = *(void (**)(void))(v28 + 8);
    OUTLINED_FUNCTION_24_5();
    v31();
    uint64_t v32 = (void *)MEMORY[0x263F8EE80];
    if ((v30 & 1) == 0)
    {
      swift_isUniquelyReferenced_nonNull_native();
      double v33 = OUTLINED_FUNCTION_40_11();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(8, v34, v33);
      uint64_t v32 = v46;
      swift_bridgeObjectRelease();
    }
    static MetricsKey.trainingError.getter();
    specialized EventCollector.getLast<A>(metric:type:)();
    char v36 = v35;
    OUTLINED_FUNCTION_34_10();
    OUTLINED_FUNCTION_24_5();
    v31();
    if ((v36 & 1) == 0)
    {
      swift_isUniquelyReferenced_nonNull_native();
      double v37 = OUTLINED_FUNCTION_40_11();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(7, v38, v37);
      uint64_t v32 = v46;
      swift_bridgeObjectRelease();
    }
    uint64_t v39 = specialized _dictionaryUpCast<A, B, C, D>(_:)(v32);
    swift_release();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v40 = (uint64_t (*)(uint64_t, void *, BOOL))v0[1];
    return v40(v43, v39, v42 >= v41);
  }
  uint64_t v14 = v0[20];
  uint64_t v15 = v0[15];
  uint64_t v16 = v15 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingData;
  uint64_t v17 = (uint64_t *)(v15 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_model);
  uint64_t v45 = v15 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_regressor;
  OUTLINED_FUNCTION_53();
  uint64_t v44 = v16;
  OUTLINED_FUNCTION_53();
  uint64_t v18 = (void (**)(void, uint64_t, void))(v14 + 16);
  uint64_t v19 = (void (**)(uint64_t, uint64_t))(v14 + 8);
  uint64_t v20 = v43;
  while (1)
  {
    uint64_t v21 = v0[22];
    outlined init with copy of MLLogisticRegressionClassifier.Classifier?(v45, v21, &demangling cache variable for type metadata for MLLinearRegressor.Regressor?);
    uint64_t v22 = type metadata accessor for MLLinearRegressor.Regressor();
    uint64_t result = __swift_getEnumTagSinglePayload(v21, 1, v22);
    if (result == 1) {
      break;
    }
    (*v18)(v0[21], v44, v0[19]);
    swift_beginAccess();
    uint64_t v23 = type metadata accessor for MLLinearRegressor.Model();
    uint64_t result = __swift_getEnumTagSinglePayload((uint64_t)v17, 1, v23);
    if (result == 1) {
      goto LABEL_25;
    }
    uint64_t v24 = v0[21];
    swift_retain();
    MLLinearRegressor.Regressor.update(_:with:eventHandler:)(v17, v24, (uint64_t)partial apply for closure #1 in LogisticRegressionClassifierTrainingSessionDelegate.train(from:), v13);
    uint64_t v26 = v0[21];
    uint64_t v25 = v0[22];
    uint64_t v27 = v0[19];
    swift_endAccess();
    swift_release();
    (*v19)(v26, v27);
    outlined destroy of MLLinearRegressor.Model(v25, (void (*)(void))type metadata accessor for MLLinearRegressor.Regressor);
    if (!--v20) {
      goto LABEL_13;
    }
  }
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

uint64_t LinearRegressorTrainingSessionDelegate.evaluate(from:)()
{
  v1[25] = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  OUTLINED_FUNCTION_17(v2);
  v1[26] = OUTLINED_FUNCTION_5();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  v1[27] = v3;
  OUTLINED_FUNCTION_1(v3);
  v1[28] = v4;
  v1[29] = OUTLINED_FUNCTION_5();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<Double>>);
  v1[30] = v5;
  OUTLINED_FUNCTION_1(v5);
  v1[31] = v6;
  v1[32] = OUTLINED_FUNCTION_24();
  v1[33] = swift_task_alloc();
  v1[34] = swift_task_alloc();
  v1[35] = swift_task_alloc();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLinearRegressor.Model?);
  OUTLINED_FUNCTION_17(v7);
  v1[36] = OUTLINED_FUNCTION_24();
  v1[37] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for DataFrame();
  v1[38] = v8;
  OUTLINED_FUNCTION_1(v8);
  v1[39] = v9;
  v1[40] = OUTLINED_FUNCTION_24();
  v1[41] = swift_task_alloc();
  v1[42] = swift_task_alloc();
  v1[43] = swift_task_alloc();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v10, v11, v12);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  int EnumTagSinglePayload;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(void);
  void (*v20)(void);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(void);
  void (*v34)(void);
  uint64_t v35;
  void *v36;
  uint64_t v37;
  unsigned __int8 v38;
  char *v39;
  unsigned __int8 v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  uint64_t v1 = v0[25] + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_53();
  uint64_t v2 = type metadata accessor for MLLinearRegressor.PersistentParameters();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v1, 1, v2);
  uint64_t v4 = 0;
  if (!EnumTagSinglePayload)
  {
    uint64_t v7 = v0[37];
    uint64_t v8 = v0[25] + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_model;
    OUTLINED_FUNCTION_53();
    outlined init with copy of MLLogisticRegressionClassifier.Classifier?(v8, v7, &demangling cache variable for type metadata for MLLinearRegressor.Model?);
    type metadata accessor for MLLinearRegressor.Model();
    uint64_t v9 = OUTLINED_FUNCTION_133();
    uint64_t v63 = v10;
    uint64_t result = __swift_getEnumTagSinglePayload(v9, v11, v10);
    if (result == 1)
    {
      __break(1u);
    }
    else
    {
      uint64_t v12 = v0[42];
      uint64_t v13 = v0[38];
      uint64_t v14 = v0[39];
      uint64_t v15 = v0[25] + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingData;
      OUTLINED_FUNCTION_53();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v12, v15, v13);
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_14();
      MLLinearRegressor.Model.applied(to:eventHandler:)(v16);
      uint64_t v59 = v0[38];
      uint64_t v17 = v0[37];
      uint64_t v18 = v0[28];
      uint64_t v57 = v0[26];
      uint64_t v55 = v0[25];
      uint64_t v53 = *(void (**)(uint64_t, uint64_t))(v0[39] + 8);
      OUTLINED_FUNCTION_9();
      v19();
      outlined destroy of MLLinearRegressor.Model(v17, (void (*)(void))type metadata accessor for MLLinearRegressor.Model);
      DataFrame.subscript.getter();
      v0[20] = 0;
      lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<Double> and conformance Column<A>, &demangling cache variable for type metadata for Column<Double>);
      OptionalColumnProtocol.filled(with:)();
      uint64_t v20 = *(void (**)(void))(v18 + 8);
      OUTLINED_FUNCTION_5_4();
      v20();
      swift_beginAccess();
      DataFrame.subscript.getter();
      swift_endAccess();
      v0[17] = 0;
      OptionalColumnProtocol.filled(with:)();
      OUTLINED_FUNCTION_5_4();
      v20();
      lazy protocol witness table accessor for type Double and conformance Double();
      lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FilledColumn<Column<Double>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<Double>>);
      OUTLINED_FUNCTION_20_26();
      maximumAbsoluteError<A, B, C>(_:_:)();
      uint64_t v21 = v0[18];
      OUTLINED_FUNCTION_20_26();
      rootMeanSquaredError<A, B, C>(_:_:)();
      uint64_t v22 = v0[19];
      uint64_t v23 = v55 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingMetrics;
      uint64_t v24 = *(void **)(v55 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingMetrics);
      uint64_t v25 = *(void *)(v55 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingMetrics + 8);
      *(void *)uint64_t v23 = v21;
      *(void *)(v23 + 8) = v22;
      uint64_t v26 = *(unsigned char *)(v23 + 16);
      *(unsigned char *)(v23 + 16) = 0;
      outlined consume of MLRegressorMetrics?(v24, v25, v26);
      uint64_t v27 = v55 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationData;
      OUTLINED_FUNCTION_53();
      outlined init with copy of MLLogisticRegressionClassifier.Classifier?(v27, v57, &demangling cache variable for type metadata for DataFrame?);
      uint64_t v28 = OUTLINED_FUNCTION_133();
      if (__swift_getEnumTagSinglePayload(v28, v29, v59) == 1)
      {
        char v30 = v0[31];
        uint64_t v32 = v0[25];
        uint64_t v31 = v0[26];
        swift_bridgeObjectRelease();
        double v33 = *(void (**)(void))(v30 + 8);
        OUTLINED_FUNCTION_24_5();
        v33();
        OUTLINED_FUNCTION_24_5();
        v33();
        OUTLINED_FUNCTION_9();
        v34();
        _s10Foundation3URLVSgWOhTm_0(v31, &demangling cache variable for type metadata for DataFrame?);
        char v35 = v32 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationMetrics;
        char v36 = *(void **)(v32 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationMetrics);
        double v37 = *(void *)(v32 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationMetrics + 8);
        *(void *)char v35 = 0;
        *(void *)(v35 + 8) = 0;
        uint64_t v40 = *(unsigned char *)(v35 + 16);
        uint64_t v39 = (char *)(v35 + 16);
        char v38 = v40;
        uint64_t v41 = -1;
LABEL_10:
        void *v39 = v41;
        outlined consume of MLRegressorMetrics?(v36, v37, v38);
        uint64_t v4 = 1;
        goto LABEL_2;
      }
      uint64_t v42 = v0[36];
      (*(void (**)(void, void, void))(v0[39] + 32))(v0[41], v0[26], v0[38]);
      outlined init with copy of MLLogisticRegressionClassifier.Classifier?(v8, v42, &demangling cache variable for type metadata for MLLinearRegressor.Model?);
      uint64_t v43 = OUTLINED_FUNCTION_133();
      uint64_t result = __swift_getEnumTagSinglePayload(v43, v44, v63);
      if (result != 1)
      {
        OUTLINED_FUNCTION_14();
        MLLinearRegressor.Model.applied(to:eventHandler:)(v45);
        uint64_t v62 = v0[43];
        uint64_t v64 = v0[41];
        uint64_t v54 = v0[40];
        uint64_t v61 = v0[35];
        uint64_t v58 = v0[38];
        uint64_t v60 = v0[34];
        uint64_t v51 = v0[33];
        uint64_t v52 = v0[32];
        uint64_t v46 = v0[30];
        uint64_t v56 = v0[31];
        uint64_t v66 = v0[25];
        outlined destroy of MLLinearRegressor.Model(v0[36], (void (*)(void))type metadata accessor for MLLinearRegressor.Model);
        DataFrame.subscript.getter();
        v0[21] = 0;
        OptionalColumnProtocol.filled(with:)();
        OUTLINED_FUNCTION_9();
        v20();
        DataFrame.subscript.getter();
        swift_bridgeObjectRelease();
        v0[22] = 0;
        OptionalColumnProtocol.filled(with:)();
        OUTLINED_FUNCTION_9();
        v20();
        OUTLINED_FUNCTION_21_27();
        maximumAbsoluteError<A, B, C>(_:_:)();
        uint64_t v47 = v0[23];
        OUTLINED_FUNCTION_21_27();
        rootMeanSquaredError<A, B, C>(_:_:)();
        uint64_t v48 = *(void (**)(uint64_t, uint64_t))(v56 + 8);
        v48(v52, v46);
        v48(v51, v46);
        v53(v54, v58);
        v53(v64, v58);
        v48(v60, v46);
        v48(v61, v46);
        v53(v62, v58);
        uint64_t v41 = 0;
        uint64_t v49 = v0[24];
        uint64_t v50 = v66 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationMetrics;
        char v36 = *(void **)(v66 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationMetrics);
        double v37 = *(void *)(v66 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationMetrics + 8);
        *(void *)uint64_t v50 = v47;
        *(void *)(v50 + 8) = v49;
        uint64_t v39 = (char *)(v50 + 16);
        char v38 = *(unsigned char *)(v50 + 16);
        goto LABEL_10;
      }
    }
    __break(1u);
    return result;
  }
LABEL_2:
  uint64_t v65 = v4;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v5(v65, 1);
}

uint64_t LinearRegressorTrainingSessionDelegate.saveCheckpoint(to:phase:iteration:)(uint64_t a1, unsigned char *a2)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLinearRegressor.Model?);
  uint64_t v7 = OUTLINED_FUNCTION_17(v6);
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_41_1();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLinearRegressor.Regressor?);
  uint64_t v9 = OUTLINED_FUNCTION_17(v8);
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_41_0();
  switch(*a2)
  {
    case 2:
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 4:
      OUTLINED_FUNCTION_55_0();
      goto LABEL_4;
    default:
LABEL_4:
      char v10 = OUTLINED_FUNCTION_37_5();
      swift_bridgeObjectRelease();
      if ((v10 & 1) == 0)
      {
        char v16 = 0;
        return v16 & 1;
      }
LABEL_5:
      uint64_t v11 = v2 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_regressor;
      OUTLINED_FUNCTION_53();
      outlined init with copy of MLLogisticRegressionClassifier.Classifier?(v11, v4, &demangling cache variable for type metadata for MLLinearRegressor.Regressor?);
      uint64_t v12 = type metadata accessor for MLLinearRegressor.Regressor();
      OUTLINED_FUNCTION_57_4(v4, 1, v12);
      if (v13)
      {
        __break(1u);
        goto LABEL_11;
      }
      uint64_t v14 = v2 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_model;
      OUTLINED_FUNCTION_53();
      outlined init with copy of MLLogisticRegressionClassifier.Classifier?(v14, v3, &demangling cache variable for type metadata for MLLinearRegressor.Model?);
      uint64_t v15 = type metadata accessor for MLLinearRegressor.Model();
      OUTLINED_FUNCTION_57_4(v3, 1, v15);
      if (v13)
      {
LABEL_11:
        __break(1u);
        JUMPOUT(0x2271C7848);
      }
      lazy protocol witness table accessor for type MLLinearRegressor.Regressor and conformance MLLinearRegressor.Regressor();
      char v16 = 1;
      SupervisedTabularEstimator.write(_:to:overwrite:)();
      outlined destroy of MLLinearRegressor.Model(v3, (void (*)(void))type metadata accessor for MLLinearRegressor.Model);
      outlined destroy of MLLinearRegressor.Model(v4, (void (*)(void))type metadata accessor for MLLinearRegressor.Regressor);
      return v16 & 1;
  }
}

uint64_t LinearRegressorTrainingSessionDelegate.save(to:)(uint64_t a1)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
  uint64_t v6 = OUTLINED_FUNCTION_17(v5);
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_41_1();
  uint64_t v7 = type metadata accessor for MLLinearRegressor.PersistentParameters();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_41_0();
  uint64_t v9 = v1 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_53();
  outlined init with copy of MLLogisticRegressionClassifier.Classifier?(v9, v2, &demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
  OUTLINED_FUNCTION_57_4(v2, 1, v7);
  if (v10)
  {
    _s10Foundation3URLVSgWOhTm_0(v2, &demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    *(void *)uint64_t v11 = 0xD000000000000030;
    *(void *)(v11 + 8) = 0x80000002272D69A0;
    *(_OWORD *)(v11 + 16) = 0u;
    *(_OWORD *)(v11 + 32) = 0u;
    *(unsigned char *)(v11 + 48) = 2;
    return swift_willThrow();
  }
  else
  {
    outlined init with take of MLLinearRegressor.PersistentParameters(v2, v3, (void (*)(void))type metadata accessor for MLLinearRegressor.PersistentParameters);
    MLLinearRegressor.PersistentParameters.save(toSessionDirectory:)(a1);
    return outlined destroy of MLLinearRegressor.Model(v3, (void (*)(void))type metadata accessor for MLLinearRegressor.PersistentParameters);
  }
}

void LinearRegressorTrainingSessionDelegate.restore(from:phase:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v28 = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
  uint64_t v4 = OUTLINED_FUNCTION_17(v3);
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_33();
  uint64_t v7 = v5 - v6;
  MEMORY[0x270FA5388](v8);
  char v10 = (char *)&v27 - v9;
  type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v11);
  uint64_t v12 = OUTLINED_FUNCTION_18_20();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_33();
  uint64_t v16 = v14 - v15;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v27 - v18;
  uint64_t v20 = OUTLINED_FUNCTION_0_5();
  v21(v20);
  MLLinearRegressor.PersistentParameters.init(sessionDirectory:)(v0, (uint64_t)v19);
  if (!v2)
  {
    uint64_t v22 = v28 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingParameters;
    OUTLINED_FUNCTION_53();
    outlined init with copy of MLLogisticRegressionClassifier.Classifier?(v22, (uint64_t)v10, &demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
    OUTLINED_FUNCTION_57_4((uint64_t)v10, 1, v12);
    if (v23)
    {
      _s10Foundation3URLVSgWOhTm_0((uint64_t)v10, &demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
      outlined init with take of MLLinearRegressor.PersistentParameters((uint64_t)v19, v7, (void (*)(void))type metadata accessor for MLLinearRegressor.PersistentParameters);
      OUTLINED_FUNCTION_82_1();
      __swift_storeEnumTagSinglePayload(v24, v25, v26, v12);
      OUTLINED_FUNCTION_81_2();
      outlined assign with take of MLClassifierMetrics?(v7, v22, &demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
      swift_endAccess();
    }
    else
    {
      outlined init with take of MLLinearRegressor.PersistentParameters((uint64_t)v10, v16, (void (*)(void))type metadata accessor for MLLinearRegressor.PersistentParameters);
      LinearRegressorTrainingSessionDelegate.verifyThatParametersAreCompatible(_:_:)((uint64_t)v19, v16);
      outlined destroy of MLLinearRegressor.Model(v16, (void (*)(void))type metadata accessor for MLLinearRegressor.PersistentParameters);
      outlined destroy of MLLinearRegressor.Model((uint64_t)v19, (void (*)(void))type metadata accessor for MLLinearRegressor.PersistentParameters);
    }
  }
  OUTLINED_FUNCTION_8_1();
}

uint64_t LinearRegressorTrainingSessionDelegate.verifyThatParametersAreCompatible(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MLLinearRegressor.PersistentParameters();
  uint64_t v5 = *(int *)(v4 + 24);
  uint64_t v6 = *(void *)(a1 + v5);
  uint64_t v7 = *(void *)(a1 + v5 + 8);
  uint64_t v8 = (void *)(a2 + v5);
  BOOL v9 = v6 == *v8 && v7 == v8[1];
  if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v10 = swift_bridgeObjectRetain();
    uint64_t v11 = specialized Set.init<A>(_:)(v10);
    uint64_t v12 = swift_bridgeObjectRetain();
    uint64_t v13 = specialized Set.init<A>(_:)(v12);
    specialized static Set.== infix(_:_:)(v11, v13);
    char v15 = v14;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v15)
    {
      static MLLinearRegressor.ModelParameters.firstIncompatibility(_:_:)(a1 + *(int *)(v4 + 32), a2 + *(int *)(v4 + 32), v25);
      uint64_t result = outlined init with take of (name: String, originalValue: String, newValue: String)?((uint64_t)v25, (uint64_t)&v26);
      unint64_t v17 = v27;
      if (!v27) {
        return result;
      }
      uint64_t v18 = v26;
      uint64_t v6 = v28;
      uint64_t v7 = v29;
      uint64_t v19 = v30;
      uint64_t v20 = v31;
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_85();
      *(void *)uint64_t v21 = v18;
    }
    else
    {
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
      uint64_t v6 = OUTLINED_FUNCTION_51_5();
      uint64_t v7 = v22;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_51_5();
      swift_bridgeObjectRelease();
      uint64_t v19 = String.init<A>(_:)();
      uint64_t v20 = v23;
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_85();
      *(void *)uint64_t v21 = 0xD000000000000011;
      unint64_t v17 = 0x80000002272D7080;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v19 = String.init<A>(_:)();
    uint64_t v20 = v24;
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    *(void *)uint64_t v21 = 0x6320746567726154;
    unint64_t v17 = 0xED00006E6D756C6FLL;
  }
  *(void *)(v21 + 8) = v17;
  *(void *)(v21 + 16) = v6;
  *(void *)(v21 + 24) = v7;
  *(void *)(v21 + 32) = v19;
  *(void *)(v21 + 40) = v20;
  *(unsigned char *)(v21 + 48) = 3;
  return swift_willThrow();
}

uint64_t LinearRegressorTrainingSessionDelegate.deinit()
{
  outlined destroy of MLLinearRegressor.Model(v0 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_sessionParameters, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
  _s10Foundation3URLVSgWOhTm_0(v0 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingParameters, &demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
  type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_8();
  uint64_t v1 = OUTLINED_FUNCTION_22_1();
  v2(v1);
  _s10Foundation3URLVSgWOhTm_0(v0 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationData, &demangling cache variable for type metadata for DataFrame?);
  _s10Foundation3URLVSgWOhTm_0(v0 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_regressor, &demangling cache variable for type metadata for MLLinearRegressor.Regressor?);
  _s10Foundation3URLVSgWOhTm_0(v0 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_model, &demangling cache variable for type metadata for MLLinearRegressor.Model?);
  outlined consume of MLRegressorMetrics?(*(void **)(v0 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingMetrics), *(void *)(v0 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingMetrics + 8), *(unsigned char *)(v0 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingMetrics + 16));
  outlined consume of MLRegressorMetrics?(*(void **)(v0 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationMetrics), *(void *)(v0 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationMetrics + 8), *(unsigned char *)(v0 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationMetrics + 16));
  return v0;
}

uint64_t LinearRegressorTrainingSessionDelegate.__deallocating_deinit()
{
  LinearRegressorTrainingSessionDelegate.deinit();
  OUTLINED_FUNCTION_4_12();

  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for LinearRegressorTrainingSessionDelegate()
{
  return type metadata accessor for LinearRegressorTrainingSessionDelegate();
}

uint64_t type metadata accessor for LinearRegressorTrainingSessionDelegate()
{
  uint64_t result = type metadata singleton initialization cache for LinearRegressorTrainingSessionDelegate;
  if (!type metadata singleton initialization cache for LinearRegressorTrainingSessionDelegate) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for LinearRegressorTrainingSessionDelegate()
{
  type metadata accessor for MLTrainingSessionParameters();
  if (v0 <= 0x3F)
  {
    type metadata accessor for MLLinearRegressor.PersistentParameters?(319, &lazy cache variable for type metadata for MLLinearRegressor.PersistentParameters?, (void (*)(uint64_t))type metadata accessor for MLLinearRegressor.PersistentParameters);
    if (v1 <= 0x3F)
    {
      type metadata accessor for DataFrame();
      if (v2 <= 0x3F)
      {
        type metadata accessor for MLLinearRegressor.PersistentParameters?(319, (unint64_t *)&lazy cache variable for type metadata for DataFrame?, MEMORY[0x263F1BEC8]);
        if (v3 <= 0x3F)
        {
          type metadata accessor for MLLinearRegressor.PersistentParameters?(319, &lazy cache variable for type metadata for MLLinearRegressor.Regressor?, (void (*)(uint64_t))type metadata accessor for MLLinearRegressor.Regressor);
          if (v4 <= 0x3F)
          {
            type metadata accessor for MLLinearRegressor.PersistentParameters?(319, &lazy cache variable for type metadata for MLLinearRegressor.Model?, (void (*)(uint64_t))type metadata accessor for MLLinearRegressor.Model);
            if (v5 <= 0x3F) {
              swift_updateClassMetadata2();
            }
          }
        }
      }
    }
  }
}

void type metadata accessor for MLLinearRegressor.PersistentParameters?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void protocol witness for TrainingSessionDelegate.setUp() in conformance LinearRegressorTrainingSessionDelegate()
{
}

void protocol witness for TrainingSessionDelegate.resume(from:) in conformance LinearRegressorTrainingSessionDelegate(Swift::OpaquePointer a1)
{
}

unint64_t protocol witness for TrainingSessionDelegate.itemCount(phase:) in conformance LinearRegressorTrainingSessionDelegate(CreateML::MLPhase a1)
{
  return (unint64_t)LinearRegressorTrainingSessionDelegate.itemCount(phase:)(a1);
}

uint64_t protocol witness for TrainingSessionDelegate.train(from:) in conformance LinearRegressorTrainingSessionDelegate(uint64_t a1)
{
  unint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *unint64_t v3 = v1;
  v3[1] = protocol witness for TrainingSessionDelegate.train(from:) in conformance LinearRegressorTrainingSessionDelegate;
  return LinearRegressorTrainingSessionDelegate.train(from:)(a1);
}

uint64_t protocol witness for TrainingSessionDelegate.train(from:) in conformance LinearRegressorTrainingSessionDelegate(uint64_t a1, uint64_t a2, char a3)
{
  OUTLINED_FUNCTION_2();
  uint64_t v13 = *v4;
  uint64_t v8 = swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 8);
  if (v3)
  {
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = a3 & 1;
    uint64_t v8 = a1;
    uint64_t v9 = a2;
  }
  return v10(v8, v9, v11);
}

uint64_t protocol witness for TrainingSessionDelegate.evaluate(from:) in conformance LinearRegressorTrainingSessionDelegate()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for TrainingSessionDelegate.evaluate(from:) in conformance LogisticRegressionClassifierTrainingSessionDelegate;
  return LinearRegressorTrainingSessionDelegate.evaluate(from:)();
}

uint64_t protocol witness for TrainingSessionDelegate.saveCheckpoint(to:phase:iteration:) in conformance LinearRegressorTrainingSessionDelegate(uint64_t a1, unsigned char *a2)
{
  return LinearRegressorTrainingSessionDelegate.saveCheckpoint(to:phase:iteration:)(a1, a2) & 1;
}

uint64_t protocol witness for TrainingSessionCodable.save(to:) in conformance LinearRegressorTrainingSessionDelegate(uint64_t a1)
{
  return LinearRegressorTrainingSessionDelegate.save(to:)(a1);
}

void protocol witness for TrainingSessionCodable.restore(from:phase:) in conformance LinearRegressorTrainingSessionDelegate()
{
}

unint64_t lazy protocol witness table accessor for type MLLinearRegressor.Regressor and conformance MLLinearRegressor.Regressor()
{
  unint64_t result = lazy protocol witness table cache variable for type MLLinearRegressor.Regressor and conformance MLLinearRegressor.Regressor;
  if (!lazy protocol witness table cache variable for type MLLinearRegressor.Regressor and conformance MLLinearRegressor.Regressor)
  {
    type metadata accessor for MLLinearRegressor.Regressor();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLLinearRegressor.Regressor and conformance MLLinearRegressor.Regressor);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MLLinearRegressor.Regressor and conformance MLLinearRegressor.Regressor;
  if (!lazy protocol witness table cache variable for type MLLinearRegressor.Regressor and conformance MLLinearRegressor.Regressor)
  {
    type metadata accessor for MLLinearRegressor.Regressor();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLLinearRegressor.Regressor and conformance MLLinearRegressor.Regressor);
  }
  return result;
}

void outlined consume of MLRegressorMetrics?(void *a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    outlined consume of Result<_RegressorMetrics, Error>(a1, a2, a3 & 1);
  }
}

uint64_t outlined init with copy of MLLinearRegressor.ModelParameters(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of MLLinearRegressor.Model(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_8();
  uint64_t v3 = OUTLINED_FUNCTION_22_1();
  v4(v3);
  return a1;
}

uint64_t outlined init with take of MLLinearRegressor.PersistentParameters(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_8();
  uint64_t v4 = OUTLINED_FUNCTION_32_17();
  v5(v4);
  return a2;
}

uint64_t OUTLINED_FUNCTION_5_41()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_18_20()
{
  return type metadata accessor for MLLinearRegressor.PersistentParameters();
}

uint64_t OUTLINED_FUNCTION_34_10()
{
  return v0;
}

void OUTLINED_FUNCTION_40_12(uint64_t a1@<X8>)
{
  uint64_t v2 = v1 + a1;
  *(void *)uint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  *(unsigned char *)(v2 + 16) = -1;
}

uint64_t OUTLINED_FUNCTION_42_15(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(v1, 1, 1, a1);
}

uint64_t CMLParameters.Key.rawValue.getter(char a1)
{
  uint64_t result = 0x6F635F6C6562616CLL;
  switch(a1)
  {
    case 1:
    case 57:
    case 74:
    case 75:
      return 0xD000000000000011;
    case 2:
      return 0xD000000000000013;
    case 3:
      uint64_t v3 = 0x6164696C6176;
      return v3 & 0xFFFFFFFFFFFFLL | 0x6974000000000000;
    case 4:
      return 1635017060;
    case 5:
      return 0x746567726174;
    case 6:
      uint64_t v4 = 0x6E6F6974706FLL;
      goto LABEL_62;
    case 7:
      return 7107189;
    case 8:
      return 1752457584;
    case 9:
      return 0x61625F726F727265;
    case 10:
      return 0x726564616568;
    case 11:
      return 0x6574696D696C6564;
    case 12:
      return 0x5F746E656D6D6F63;
    case 13:
      uint64_t v5 = 0x657061637365;
      return v5 & 0xFFFFFFFFFFFFLL | 0x635F000000000000;
    case 14:
      return 0x715F656C62756F64;
    case 15:
      return 0x68635F65746F7571;
    case 16:
      return 0xD000000000000012;
    case 17:
      return 0x65756C61765F616ELL;
    case 18:
      return 0x7265745F656E696CLL;
    case 19:
      uint64_t v5 = 0x74757074756FLL;
      return v5 & 0xFFFFFFFFFFFFLL | 0x635F000000000000;
    case 20:
      return 0x696D696C5F776F72;
    case 21:
      return 0x776F725F70696B73;
    case 22:
      return 0x6C6F635F74786574;
    case 23:
      return 0x6E6F697461636F6CLL;
    case 24:
      uint64_t v5 = 0x6874676E656CLL;
      return v5 & 0xFFFFFFFFFFFFLL | 0x635F000000000000;
    case 25:
      return 1954047348;
    case 26:
      return 0x6F635F6E656B6F74;
    case 27:
      return 0x656D616E656C6966;
    case 28:
      uint64_t v3 = 0x636964657270;
      return v3 & 0xFFFFFFFFFFFFLL | 0x6974000000000000;
    case 29:
      return 0x63697274656DLL;
    case 30:
      return 0x6F7272655F78616DLL;
    case 31:
      return 1702063474;
    case 32:
      return 0xD000000000000010;
    case 33:
      uint64_t v6 = 1953525599;
      return v6 & 0xFFFF0000FFFFFFFFLL | 0x7300000000;
    case 34:
      return 0x745F74757074756FLL;
    case 35:
      return 0x646C656966;
    case 36:
      return 0x65665F6F69647561;
    case 37:
      return 0x5F6E6F6973736573;
    case 38:
      uint64_t v6 = 1835365481;
      return v6 & 0xFFFF0000FFFFFFFFLL | 0x7300000000;
    case 39:
      return 107;
    case 40:
      uint64_t v7 = 0x736F62726576;
      goto LABEL_57;
    case 41:
      return 0x5F6C6C615F746567;
    case 42:
      uint64_t v8 = 0x657361746164;
      goto LABEL_78;
    case 43:
      unsigned int v9 = 1919251317;
      goto LABEL_48;
    case 44:
      unsigned int v9 = 1835365481;
LABEL_48:
      uint64_t result = v9 | 0x7461645F00000000;
      break;
    case 45:
      uint64_t result = 0x61645F6172747865;
      break;
    case 46:
      uint64_t result = 0x5F7473657261656ELL;
      break;
    case 47:
      uint64_t result = 1937010799;
      break;
    case 48:
      uint64_t result = 0x7972657571;
      break;
    case 49:
      uint64_t result = 0x6B5F706F74;
      break;
    case 50:
      uint64_t result = 0x7463697274736572;
      break;
    case 51:
      uint64_t v7 = 0x64756C637865;
LABEL_57:
      uint64_t result = v7 & 0xFFFFFFFFFFFFLL | 0x65000000000000;
      break;
    case 52:
      uint64_t result = 0xD00000000000001DLL;
      break;
    case 53:
      uint64_t result = 0xD000000000000017;
      break;
    case 54:
      uint64_t result = 0xD000000000000010;
      break;
    case 55:
      uint64_t v4 = 0x66666F747563;
LABEL_62:
      uint64_t result = v4 & 0xFFFFFFFFFFFFLL | 0x73000000000000;
      break;
    case 56:
      uint64_t result = 0xD000000000000017;
      break;
    case 58:
      uint64_t result = 0xD000000000000014;
      break;
    case 59:
      uint64_t result = 0xD000000000000016;
      break;
    case 60:
      uint64_t result = 0xD000000000000019;
      break;
    case 61:
      uint64_t result = 0x7963617275636361;
      break;
    case 62:
      uint64_t result = 0xD000000000000010;
      break;
    case 63:
      uint64_t result = 0x625F74726F706572;
      break;
    case 64:
      uint64_t result = 0xD000000000000012;
      break;
    case 65:
      uint64_t result = 0x6F69736963657270;
      break;
    case 66:
      uint64_t result = 0x6C6C61636572;
      break;
    case 67:
      uint64_t result = 6518113;
      break;
    case 68:
      uint64_t result = 0x767275635F636F72;
      break;
    case 69:
      uint64_t result = 0x65726F63735F3166;
      break;
    case 70:
      uint64_t result = 0x73736F6C5F676F6CLL;
      break;
    case 71:
      uint64_t result = 0x656C797473;
      break;
    case 72:
      uint64_t v8 = 0x6E65746E6F63;
LABEL_78:
      uint64_t result = v8 & 0xFFFFFFFFFFFFLL | 0x74000000000000;
      break;
    case 73:
      uint64_t result = 0xD000000000000013;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t MLTextClassifier.FeatureExtractorType.description.getter()
{
  unint64_t v1 = 0xD000000000000015;
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_3_0();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = type metadata accessor for MLTextClassifier.FeatureExtractorType();
  MEMORY[0x270FA5388](v7 - 8);
  OUTLINED_FUNCTION_3_0();
  uint64_t v10 = v9 - v8;
  outlined init with copy of MLTextClassifier.FeatureExtractorType(v0, v9 - v8);
  switch(__swift_getEnumTagSinglePayload(v10, 4, v2))
  {
    case 1u:
      return v1;
    case 2u:
      unint64_t v1 = 0xD000000000000016;
      break;
    case 3u:
      unint64_t v1 = 0xD000000000000027;
      break;
    case 4u:
      unint64_t v1 = 0xD000000000000046;
      break;
    default:
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v6, v10, v2);
      _StringGuts.grow(_:)(29);
      swift_bridgeObjectRelease();
      v11._uint64_t countAndFlagsBits = URL.path.getter();
      String.append(_:)(v11);
      swift_bridgeObjectRelease();
      v12._uint64_t countAndFlagsBits = 39;
      v12._id object = (void *)0xE100000000000000;
      String.append(_:)(v12);
      unint64_t v1 = 0xD00000000000001ALL;
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v6, v2);
      break;
  }
  return v1;
}

uint64_t type metadata accessor for MLTextClassifier.FeatureExtractorType()
{
  uint64_t result = type metadata singleton initialization cache for MLTextClassifier.FeatureExtractorType;
  if (!type metadata singleton initialization cache for MLTextClassifier.FeatureExtractorType) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined init with copy of MLTextClassifier.FeatureExtractorType(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MLTextClassifier.FeatureExtractorType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t MLTextClassifier.FeatureExtractorType.playgroundDescription.getter@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = MLTextClassifier.FeatureExtractorType.description.getter();
  a1[3] = MEMORY[0x263F8D310];
  *a1 = result;
  a1[1] = v3;
  return result;
}

id NLModelEmbeddingType.init(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MLTextClassifier.FeatureExtractorType();
  MEMORY[0x270FA5388](v2 - 8);
  OUTLINED_FUNCTION_3_0();
  uint64_t v5 = v4 - v3;
  outlined init with copy of MLTextClassifier.FeatureExtractorType(a1, v4 - v3);
  uint64_t v6 = type metadata accessor for URL();
  switch(__swift_getEnumTagSinglePayload(v5, 4, v6))
  {
    case 1u:
      uint64_t v7 = (id *)MEMORY[0x263F13ED0];
      goto LABEL_6;
    case 2u:
    case 3u:
      uint64_t v7 = (id *)MEMORY[0x263F13EC8];
      goto LABEL_6;
    case 4u:
      uint64_t v7 = (id *)MEMORY[0x263F13EB8];
LABEL_6:
      id v10 = *v7;
      outlined destroy of MLTextClassifier.FeatureExtractorType(a1);
      id result = v10;
      break;
    default:
      id v8 = (id)*MEMORY[0x263F13EC0];
      outlined destroy of MLTextClassifier.FeatureExtractorType(a1);
      outlined destroy of MLTextClassifier.FeatureExtractorType(v5);
      id result = v8;
      break;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for MLTextClassifier.FeatureExtractorType(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    uint64_t v7 = type metadata accessor for URL();
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 4, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 4, v7);
    }
  }
  return a1;
}

uint64_t destroy for MLTextClassifier.FeatureExtractorType(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t result = __swift_getEnumTagSinglePayload(a1, 4, v2);
  if (!result)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
    return v4(a1, v2);
  }
  return result;
}

void *initializeWithCopy for MLTextClassifier.FeatureExtractorType(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 4, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 4, v6);
  }
  return a1;
}

void *assignWithCopy for MLTextClassifier.FeatureExtractorType(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 4, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 4, v6);
  if (!EnumTagSinglePayload)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 4, v6);
  return a1;
}

void *initializeWithTake for MLTextClassifier.FeatureExtractorType(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 4, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 4, v6);
  }
  return a1;
}

void *assignWithTake for MLTextClassifier.FeatureExtractorType(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 4, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 4, v6);
  if (!EnumTagSinglePayload)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 4, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLTextClassifier.FeatureExtractorType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2271C9B14);
}

uint64_t sub_2271C9B14(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  unsigned int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(a1, a2, v4);
  if (EnumTagSinglePayload >= 5) {
    return EnumTagSinglePayload - 4;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for MLTextClassifier.FeatureExtractorType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2271C9B70);
}

uint64_t sub_2271C9B70(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 4);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = type metadata accessor for URL();

  return __swift_storeEnumTagSinglePayload(a1, v5, a3, v6);
}

uint64_t getEnumTag for MLTextClassifier.FeatureExtractorType(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();

  return __swift_getEnumTagSinglePayload(a1, 4, v2);
}

uint64_t destructiveInjectEnumTag for MLTextClassifier.FeatureExtractorType(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();

  return __swift_storeEnumTagSinglePayload(a1, a2, 4, v4);
}

uint64_t type metadata completion function for MLTextClassifier.FeatureExtractorType()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

unint64_t MLTextClassifier.ModelAlgorithmType.description.getter()
{
  unint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for MLTextClassifier.FeatureExtractorType();
  MEMORY[0x270FA5388](v3 - 8);
  OUTLINED_FUNCTION_4_47();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_2_51(v5, v8);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      OUTLINED_FUNCTION_5_42();
    }
    else
    {
      outlined init with take of MLTextClassifier.FeatureExtractorType(v1, v0);
      unint64_t v9 = MLTextClassifier.FeatureExtractorType.description.getter();
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_3_51();
      swift_bridgeObjectRelease();
      unint64_t v2 = v9;
      outlined destroy of MLTextClassifier.FeatureExtractorType(v0, (void (*)(void))type metadata accessor for MLTextClassifier.FeatureExtractorType);
    }
  }
  else
  {
    OUTLINED_FUNCTION_0_25();
  }
  return v2;
}

uint64_t type metadata accessor for MLTextClassifier.ModelAlgorithmType()
{
  uint64_t result = type metadata singleton initialization cache for MLTextClassifier.ModelAlgorithmType;
  if (!type metadata singleton initialization cache for MLTextClassifier.ModelAlgorithmType) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined init with copy of MLTextClassifier.ModelAlgorithmType(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MLTextClassifier.ModelAlgorithmType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t MLTextClassifier.ModelAlgorithmType.debugDescription.getter()
{
  unint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for MLTextClassifier.FeatureExtractorType();
  MEMORY[0x270FA5388](v3 - 8);
  OUTLINED_FUNCTION_4_47();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_2_51(v5, v8);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      OUTLINED_FUNCTION_5_42();
    }
    else
    {
      outlined init with take of MLTextClassifier.FeatureExtractorType(v1, v0);
      unint64_t v9 = MLTextClassifier.FeatureExtractorType.description.getter();
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_3_51();
      swift_bridgeObjectRelease();
      unint64_t v2 = v9;
      outlined destroy of MLTextClassifier.FeatureExtractorType(v0, (void (*)(void))type metadata accessor for MLTextClassifier.FeatureExtractorType);
    }
  }
  else
  {
    OUTLINED_FUNCTION_0_25();
  }
  return v2;
}

uint64_t MLTextClassifier.ModelAlgorithmType.playgroundDescription.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for MLTextClassifier.FeatureExtractorType();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for MLTextClassifier.ModelAlgorithmType();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v7);
  unint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MLTextClassifier.ModelAlgorithmType(v2, (uint64_t)v9);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result)
  {
    if (result == 1)
    {
      unint64_t v11 = 0x80000002272D97D0;
      unint64_t v12 = 0xD00000000000001ELL;
    }
    else
    {
      outlined init with take of MLTextClassifier.FeatureExtractorType((uint64_t)v9, (uint64_t)v6);
      unint64_t v14 = MLTextClassifier.FeatureExtractorType.description.getter();
      unint64_t v15 = v13;
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_3_51();
      swift_bridgeObjectRelease();
      unint64_t v12 = v14;
      unint64_t v11 = v15;
      uint64_t result = outlined destroy of MLTextClassifier.FeatureExtractorType((uint64_t)v6, (void (*)(void))type metadata accessor for MLTextClassifier.FeatureExtractorType);
    }
  }
  else
  {
    unint64_t v11 = 0xED00006C65646F4DLL;
    unint64_t v12 = 0x20746E452078614DLL;
  }
  a1[3] = MEMORY[0x263F8D310];
  *a1 = v12;
  a1[1] = v11;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for MLTextClassifier.ModelAlgorithmType(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      uint64_t v7 = type metadata accessor for URL();
      if (__swift_getEnumTagSinglePayload((uint64_t)a2, 4, v7))
      {
        uint64_t v8 = type metadata accessor for MLTextClassifier.FeatureExtractorType();
        memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
        __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 4, v7);
      }
      uint64_t v10 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLTextClassifier.FeatureExtractorType, revision: Int?))
                   + 48);
      unint64_t v11 = (char *)a1 + v10;
      unint64_t v12 = (char *)a2 + v10;
      *(void *)unint64_t v11 = *(void *)v12;
      v11[8] = v12[8];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
  }
  return a1;
}

uint64_t destroy for MLTextClassifier.ModelAlgorithmType(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
    uint64_t v3 = type metadata accessor for URL();
    uint64_t result = __swift_getEnumTagSinglePayload(a1, 4, v3);
    if (!result)
    {
      uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
      return v4(a1, v3);
    }
  }
  return result;
}

char *initializeWithCopy for MLTextClassifier.ModelAlgorithmType(char *a1, char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v6 = type metadata accessor for URL();
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 4, v6))
    {
      uint64_t v7 = type metadata accessor for MLTextClassifier.FeatureExtractorType();
      memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 4, v6);
    }
    uint64_t v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLTextClassifier.FeatureExtractorType, revision: Int?))
                + 48);
    uint64_t v9 = &a1[v8];
    uint64_t v10 = &a2[v8];
    *(void *)uint64_t v9 = *(void *)v10;
    v9[8] = v10[8];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

char *assignWithCopy for MLTextClassifier.ModelAlgorithmType(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of MLTextClassifier.FeatureExtractorType((uint64_t)a1, (void (*)(void))type metadata accessor for MLTextClassifier.ModelAlgorithmType);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      uint64_t v6 = type metadata accessor for URL();
      if (__swift_getEnumTagSinglePayload((uint64_t)a2, 4, v6))
      {
        uint64_t v7 = type metadata accessor for MLTextClassifier.FeatureExtractorType();
        memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 4, v6);
      }
      uint64_t v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLTextClassifier.FeatureExtractorType, revision: Int?))
                  + 48);
      uint64_t v9 = &a1[v8];
      uint64_t v10 = &a2[v8];
      char v11 = v10[8];
      *(void *)uint64_t v9 = *(void *)v10;
      v9[8] = v11;
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t outlined destroy of MLTextClassifier.FeatureExtractorType(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_8();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

char *initializeWithTake for MLTextClassifier.ModelAlgorithmType(char *a1, char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v6 = type metadata accessor for URL();
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 4, v6))
    {
      uint64_t v7 = type metadata accessor for MLTextClassifier.FeatureExtractorType();
      memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 4, v6);
    }
    uint64_t v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLTextClassifier.FeatureExtractorType, revision: Int?))
                + 48);
    uint64_t v9 = &a1[v8];
    uint64_t v10 = &a2[v8];
    *(void *)uint64_t v9 = *(void *)v10;
    v9[8] = v10[8];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for MLTextClassifier.ModelAlgorithmType(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of MLTextClassifier.FeatureExtractorType((uint64_t)a1, (void (*)(void))type metadata accessor for MLTextClassifier.ModelAlgorithmType);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      uint64_t v6 = type metadata accessor for URL();
      if (__swift_getEnumTagSinglePayload((uint64_t)a2, 4, v6))
      {
        uint64_t v7 = type metadata accessor for MLTextClassifier.FeatureExtractorType();
        memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
        __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 4, v6);
      }
      uint64_t v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLTextClassifier.FeatureExtractorType, revision: Int?))
                  + 48);
      uint64_t v9 = &a1[v8];
      uint64_t v10 = &a2[v8];
      *(void *)uint64_t v9 = *(void *)v10;
      v9[8] = v10[8];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for MLTextClassifier.ModelAlgorithmType()
{
  uint64_t v3 = "\t";
  uint64_t v4 = "\t";
  uint64_t result = type metadata accessor for MLTextClassifier.FeatureExtractorType();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    int v5 = &v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_2_51@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  return outlined init with copy of MLTextClassifier.ModelAlgorithmType(v2, (uint64_t)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0));
}

void OUTLINED_FUNCTION_3_51()
{
  uint64_t v1 = 0x6C65646F4D20;
  unint64_t v2 = 0xE600000000000000;
  String.append(_:)(*(Swift::String *)&v1);
}

uint64_t OUTLINED_FUNCTION_4_47()
{
  return type metadata accessor for MLTextClassifier.ModelAlgorithmType();
}

uint64_t static MLImageClassifier.__Defaults.validation.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for validation != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for MLImageClassifier.ModelParameters.ValidationData();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static MLImageClassifier.__Defaults.validation);
  return outlined init with copy of MLImageClassifier.ModelParameters.ValidationData(v3, a1, (uint64_t (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
}

uint64_t static MLImageClassifier.__Defaults.maximumIterations.getter()
{
  return 25;
}

uint64_t static MLImageClassifier.__Defaults.algorithm.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for algorithm != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static MLImageClassifier.__Defaults.algorithm);
  return outlined init with copy of MLImageClassifier.ModelParameters.ValidationData(v3, a1, (uint64_t (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
}

uint64_t static MLImageClassifier.__Defaults.batchSize.getter()
{
  return 32;
}

void static MLImageClassifier.__Defaults.augmentationOptions.getter(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t one-time initialization function for algorithm()
{
  uint64_t v0 = type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType();
  __swift_allocate_value_buffer(v0, static MLImageClassifier.__Defaults.algorithm);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)static MLImageClassifier.__Defaults.algorithm);
  *(void *)uint64_t v1 = 1;
  *(unsigned char *)(v1 + 8) = 0;
  type metadata accessor for MLImageClassifier.FeatureExtractorType(0);

  return swift_storeEnumTagMultiPayload();
}

uint64_t outlined init with copy of MLImageClassifier.ModelParameters.ValidationData(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t static MLImageClassifier.__Defaults.featureColumnName.getter()
{
  return 0x7365727574616566;
}

uint64_t static MLImageClassifier.__Defaults.labelColumnName.getter()
{
  return 0x62614C7373616C63;
}

ValueMetadata *type metadata accessor for MLImageClassifier.__Defaults()
{
  return &type metadata for MLImageClassifier.__Defaults;
}

uint64_t *initializeBufferWithCopyOfBuffer for AnyClassificationMetrics(uint64_t *a1, uint64_t *a2)
{
  int v4 = *(_DWORD *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>)
                             - 8)
                 + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v6 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v6 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<Int>);
    }
    else {
      uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<String>);
    }
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for AnyClassificationMetrics(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
  if (swift_getEnumCaseMultiPayload() == 1) {
    uint64_t v2 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
  }
  else {
    uint64_t v2 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
  }
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(v2);
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(a1, v3);
}

uint64_t initializeWithCopy for AnyClassificationMetrics(uint64_t a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
  if (swift_getEnumCaseMultiPayload() == 1) {
    int v4 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
  }
  else {
    int v4 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
  }
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for AnyClassificationMetrics(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>(a1);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      int v4 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      int v4 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(v4);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t outlined destroy of Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t initializeWithTake for AnyClassificationMetrics(uint64_t a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
  if (swift_getEnumCaseMultiPayload() == 1) {
    int v4 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
  }
  else {
    int v4 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
  }
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for AnyClassificationMetrics(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>(a1);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      int v4 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      int v4 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(v4);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyClassificationMetrics(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2271CB208);
}

uint64_t sub_2271CB208(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);

  return __swift_getEnumTagSinglePayload(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for AnyClassificationMetrics(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2271CB268);
}

uint64_t sub_2271CB268(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);

  return __swift_storeEnumTagSinglePayload(a1, a2, a2, v4);
}

uint64_t type metadata accessor for AnyClassificationMetrics()
{
  uint64_t result = type metadata singleton initialization cache for AnyClassificationMetrics;
  if (!type metadata singleton initialization cache for AnyClassificationMetrics) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for AnyClassificationMetrics()
{
  type metadata accessor for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void AnyClassificationMetrics.init(_:_:)()
{
  OUTLINED_FUNCTION_19_4();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v50 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  OUTLINED_FUNCTION_0();
  uint64_t v44 = v5;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_40_0();
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<Int>>);
  OUTLINED_FUNCTION_8();
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  uint64_t v42 = (char *)v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v41 = (char *)v36 - v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<Int>);
  OUTLINED_FUNCTION_0();
  uint64_t v46 = v12;
  uint64_t v47 = v11;
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_33_0();
  uint64_t v43 = v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  OUTLINED_FUNCTION_0();
  uint64_t v37 = v14;
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_3_0();
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<String>>);
  OUTLINED_FUNCTION_8();
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  MEMORY[0x270FA5388](v17);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<String>);
  OUTLINED_FUNCTION_0();
  uint64_t v39 = v19;
  uint64_t v40 = v18;
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_33_0();
  v36[1] = v20;
  AnyColumn.wrappedElementType.getter();
  uint64_t v49 = v1;
  AnyColumn.wrappedElementType.getter();
  uint64_t v21 = swift_dynamicCastMetatype();
  uint64_t v48 = v3;
  if (v21 && swift_dynamicCastMetatype())
  {
    AnyColumn.assumingType<A>(_:)();
    uint64_t v51 = 0;
    unint64_t v52 = 0xE000000000000000;
    lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>((unint64_t *)&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>);
    OptionalColumnProtocol.filled(with:)();
    uint64_t v22 = *(void (**)(uint64_t))(v37 + 8);
    uint64_t v23 = OUTLINED_FUNCTION_18_21();
    v22(v23);
    AnyColumn.assumingType<A>(_:)();
    uint64_t v51 = 0;
    unint64_t v52 = 0xE000000000000000;
    OptionalColumnProtocol.filled(with:)();
    uint64_t v24 = OUTLINED_FUNCTION_18_21();
    v22(v24);
    lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FilledColumn<Column<String>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<String>>);
    ClassificationMetrics.init<A, B>(_:_:)();
    type metadata accessor for AnyColumn();
    OUTLINED_FUNCTION_8();
    uint64_t v26 = *(void (**)(void))(v25 + 8);
    OUTLINED_FUNCTION_29_12();
    v26();
    OUTLINED_FUNCTION_29_12();
    v26();
    uint64_t v27 = OUTLINED_FUNCTION_13_33();
    v28(v27);
LABEL_7:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    swift_storeEnumTagMultiPayload();
    OUTLINED_FUNCTION_12_4();
    return;
  }
  if (swift_dynamicCastMetatype() && swift_dynamicCastMetatype())
  {
    AnyColumn.assumingType<A>(_:)();
    uint64_t v51 = 0;
    lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<Int> and conformance Column<A>, &demangling cache variable for type metadata for Column<Int>);
    OptionalColumnProtocol.filled(with:)();
    uint64_t v29 = *(void (**)(uint64_t))(v44 + 8);
    uint64_t v30 = OUTLINED_FUNCTION_16_29();
    v29(v30);
    AnyColumn.assumingType<A>(_:)();
    uint64_t v51 = 0;
    OptionalColumnProtocol.filled(with:)();
    uint64_t v31 = OUTLINED_FUNCTION_16_29();
    v29(v31);
    lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FilledColumn<Column<Int>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<Int>>);
    ClassificationMetrics.init<A, B>(_:_:)();
    type metadata accessor for AnyColumn();
    OUTLINED_FUNCTION_8();
    double v33 = *(void (**)(void))(v32 + 8);
    OUTLINED_FUNCTION_29_12();
    v33();
    OUTLINED_FUNCTION_29_12();
    v33();
    uint64_t v34 = OUTLINED_FUNCTION_13_33();
    v35(v34);
    goto LABEL_7;
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyClassificationMetrics.stringLabels.getter()
{
  OUTLINED_FUNCTION_19_4();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<Int>);
  OUTLINED_FUNCTION_0();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_40_0();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<String>);
  OUTLINED_FUNCTION_0();
  uint64_t v9 = v8;
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_3_0();
  uint64_t v13 = v12 - v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_41_0();
  outlined init with copy of Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>(v0, v1);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    OUTLINED_FUNCTION_3();
    v32();
    ClassificationMetrics.labels.getter();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v13, v7);
LABEL_15:
    OUTLINED_FUNCTION_12_4();
    return;
  }
  OUTLINED_FUNCTION_3();
  v15();
  uint64_t v16 = ClassificationMetrics.labels.getter();
  uint64_t v17 = *(void *)(v16 + 16);
  if (!v17)
  {
    swift_bridgeObjectRelease();
    uint64_t v18 = MEMORY[0x263F8EE78];
LABEL_14:
    specialized Set.init<A>(_:)(v18);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v3);
    goto LABEL_15;
  }
  uint64_t v33 = v2;
  uint64_t v34 = v5;
  uint64_t v35 = v3;
  uint64_t v37 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  uint64_t v18 = v37;
  uint64_t v19 = specialized _NativeSet.startIndex.getter(v16);
  uint64_t v21 = v20;
  char v23 = v22 & 1;
  while ((v19 & 0x8000000000000000) == 0 && v19 < 1 << *(unsigned char *)(v16 + 32))
  {
    if (((*(void *)(v16 + 56 + (((unint64_t)v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v19) & 1) == 0) {
      goto LABEL_17;
    }
    if (*(_DWORD *)(v16 + 36) != v21) {
      goto LABEL_18;
    }
    char v36 = v23;
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v26 = v25;
    unint64_t v27 = *(void *)(v37 + 16);
    if (v27 >= *(void *)(v37 + 24) >> 1) {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    *(void *)(v37 + 16) = v27 + 1;
    uint64_t v28 = v37 + 16 * v27;
    *(void *)(v28 + 32) = v24;
    *(void *)(v28 + 40) = v26;
    uint64_t v29 = specialized _NativeSet.index(after:)(v19, v21, v36 & 1, v16);
    uint64_t v19 = v29;
    uint64_t v21 = v30;
    char v23 = v31 & 1;
    if (!--v17)
    {
      outlined consume of [MLDataValue : MLDataValue].Index._Variant(v29, v30, v23);
      swift_bridgeObjectRelease();
      uint64_t v5 = v34;
      uint64_t v3 = v35;
      uint64_t v2 = v33;
      goto LABEL_14;
    }
  }
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
}

#error "2271CBD50: call analysis failed (funcsize=83)"

#error "2271CBEA8: call analysis failed (funcsize=81)"

double AnyClassificationMetrics.accuracy.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<Int>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_15();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<String>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_41_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_3_52(v3, v14);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = OUTLINED_FUNCTION_2_52();
    v5(v4);
    ClassificationMetrics.accuracy.getter();
    double v7 = v6;
    uint64_t v8 = OUTLINED_FUNCTION_8_31();
  }
  else
  {
    uint64_t v10 = OUTLINED_FUNCTION_6_36();
    v11(v10);
    ClassificationMetrics.accuracy.getter();
    double v7 = v12;
    uint64_t v8 = OUTLINED_FUNCTION_11_32();
  }
  v9(v8);
  return v7;
}

uint64_t outlined init with copy of Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void AnyClassificationMetrics.makeConfusionMatrix()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  OUTLINED_FUNCTION_19_4();
  a19 = v21;
  a20 = v22;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<Int>);
  OUTLINED_FUNCTION_0();
  uint64_t v25 = v24;
  MEMORY[0x270FA5388](v26);
  OUTLINED_FUNCTION_15();
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<String>);
  OUTLINED_FUNCTION_0();
  uint64_t v29 = v28;
  MEMORY[0x270FA5388](v30);
  uint64_t v32 = (char *)&a9 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v33);
  OUTLINED_FUNCTION_3_0();
  outlined init with copy of Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>(v20, v35 - v34);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    OUTLINED_FUNCTION_3();
    v36();
    ClassificationMetrics.makeConfusionMatrix<>()();
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v20, v23);
  }
  else
  {
    OUTLINED_FUNCTION_3();
    v37();
    ClassificationMetrics.makeConfusionMatrix<>()();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v32, v27);
  }
  OUTLINED_FUNCTION_12_4();
}

uint64_t OUTLINED_FUNCTION_2_52()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_3_52@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  return outlined init with copy of Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>(v2, (uint64_t)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0));
}

uint64_t OUTLINED_FUNCTION_6_36()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_8_31()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_11_32()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_13_33()
{
  return *(void *)(v0 - 104);
}

uint64_t OUTLINED_FUNCTION_16_29()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_18_21()
{
  return v0;
}

#error "2271CC3E8: call analysis failed (funcsize=24)"

#error "2271CC448: call analysis failed (funcsize=24)"

#error "2271CC4A8: call analysis failed (funcsize=24)"

#error "2271CC508: call analysis failed (funcsize=24)"

#error "2271CC568: call analysis failed (funcsize=24)"

#error "2271CC5C8: call analysis failed (funcsize=24)"

#error "2271CC628: call analysis failed (funcsize=24)"

#error "2271CC688: call analysis failed (funcsize=24)"

#error "2271CC6E8: call analysis failed (funcsize=24)"

#error "2271CC748: call analysis failed (funcsize=24)"

#error "2271CC7A8: call analysis failed (funcsize=24)"

#error "2271CC808: call analysis failed (funcsize=24)"

#error "2271CC868: call analysis failed (funcsize=24)"

#error "2271CC8C8: call analysis failed (funcsize=24)"

#error "2271CC928: call analysis failed (funcsize=24)"

#error "2271CC988: call analysis failed (funcsize=24)"

#error "2271CC9E8: call analysis failed (funcsize=24)"

#error "2271CCA48: call analysis failed (funcsize=24)"

#error "2271CCAA8: call analysis failed (funcsize=24)"

#error "2271CCB08: call analysis failed (funcsize=24)"

#error "2271CCB68: call analysis failed (funcsize=24)"

#error "2271CCBC8: call analysis failed (funcsize=24)"

#error "2271CCC28: call analysis failed (funcsize=24)"

#error "2271CCC88: call analysis failed (funcsize=24)"

#error "2271CCCE8: call analysis failed (funcsize=24)"

#error "2271CCD48: call analysis failed (funcsize=24)"

#error "2271CCDA8: call analysis failed (funcsize=24)"

#error "2271CCE08: call analysis failed (funcsize=24)"

#error "2271CCE68: call analysis failed (funcsize=24)"

#error "2271CCEC8: call analysis failed (funcsize=24)"

void specialized handling<A, B>(_:_:)()
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  OUTLINED_FUNCTION_36_16();
  MEMORY[0x22A6763B0]();
  if (v11)
  {
    if (tc_v1_error_message())
    {
      String.init(cString:)();
      OUTLINED_FUNCTION_34_11();
      if (one-time initialization token for table != -1) {
        swift_once();
      }
      unint64_t v3 = OUTLINED_FUNCTION_11_33();
      OUTLINED_FUNCTION_5_43();
      OUTLINED_FUNCTION_12_25();
      uint64_t v9 = (uint64_t)&v9;
      uint64_t v10 = v1;
      if (one-time initialization token for column != -1) {
        swift_once();
      }
      OUTLINED_FUNCTION_3_53();
      OUTLINED_FUNCTION_13_34();
      uint64_t v9 = (uint64_t)&v9;
      uint64_t v10 = v0;
      if (one-time initialization token for tableMap != -1) {
        swift_once();
      }
      OUTLINED_FUNCTION_3_53();
      OUTLINED_FUNCTION_12_25();
      uint64_t v9 = (uint64_t)&v9;
      uint64_t v10 = v1;
      if (one-time initialization token for columnMap != -1) {
        swift_once();
      }
      OUTLINED_FUNCTION_3_53();
      OUTLINED_FUNCTION_13_34();
      uint64_t v9 = (uint64_t)&v9;
      uint64_t v10 = v0;
      if (one-time initialization token for drop != -1) {
        swift_once();
      }
      OUTLINED_FUNCTION_3_53();
      OUTLINED_FUNCTION_12_25();
      uint64_t v9 = (uint64_t)&v9;
      uint64_t v10 = v1;
      if (one-time initialization token for sequence != -1) {
        swift_once();
      }
      OUTLINED_FUNCTION_3_53();
      OUTLINED_FUNCTION_13_34();
      uint64_t v9 = (uint64_t)&v9;
      uint64_t v10 = v0;
      if (one-time initialization token for double != -1) {
        swift_once();
      }
      OUTLINED_FUNCTION_3_53();
      OUTLINED_FUNCTION_12_25();
      uint64_t v9 = (uint64_t)&v9;
      uint64_t v10 = v1;
      if (one-time initialization token for integer != -1) {
        swift_once();
      }
      OUTLINED_FUNCTION_3_53();
      OUTLINED_FUNCTION_13_34();
      uint64_t v9 = (uint64_t)&v9;
      uint64_t v10 = v0;
      if (one-time initialization token for error != -1) {
        swift_once();
      }
      OUTLINED_FUNCTION_4_48();
      OUTLINED_FUNCTION_12_25();
      uint64_t v9 = (uint64_t)&v9;
      uint64_t v10 = v1;
      if (one-time initialization token for archive != -1) {
        swift_once();
      }
      OUTLINED_FUNCTION_4_48();
      OUTLINED_FUNCTION_13_34();
      uint64_t v9 = (uint64_t)&v9;
      uint64_t v10 = v0;
      if (one-time initialization token for limit != -1) {
        swift_once();
      }
      OUTLINED_FUNCTION_4_48();
      OUTLINED_FUNCTION_12_25();
      uint64_t v9 = (uint64_t)&v9;
      uint64_t v10 = v1;
      if (one-time initialization token for supportedStackTypes != -1) {
        swift_once();
      }
      OUTLINED_FUNCTION_4_48();
      OUTLINED_FUNCTION_6_37();
      uint64_t v9 = (uint64_t)&v9;
      uint64_t v10 = v2;
      if (one-time initialization token for sortTypes != -1) {
        swift_once();
      }
      OUTLINED_FUNCTION_4_48();
      OUTLINED_FUNCTION_26_17();
      type metadata accessor for OS_os_log();
      OUTLINED_FUNCTION_40_13();
      uint64_t v4 = (void *)static OS_os_log.default.getter();
      static os_log_type_t.error.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_9_8();
      unint64_t v6 = OUTLINED_FUNCTION_33_15(v5, (__n128)xmmword_2272CB370);
      OUTLINED_FUNCTION_39_16(v6);
      OUTLINED_FUNCTION_21_28();

      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      uint64_t v7 = OUTLINED_FUNCTION_85();
      *uint64_t v8 = v0;
      v8[1] = v3;
      OUTLINED_FUNCTION_8_4(v7, (uint64_t)v8);
      tc_v1_release();
    }
    else
    {
      __break(1u);
    }
  }
}

#error "2271CD3F0: call analysis failed (funcsize=24)"

void specialized handling<A, B>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  OUTLINED_FUNCTION_17_27();
  a29 = v34;
  a30 = v35;
  a20 = *MEMORY[0x263EF8340];
  OUTLINED_FUNCTION_36_16();
  v36();
  OUTLINED_FUNCTION_22_24();
  if (!v30)
  {
LABEL_30:
    OUTLINED_FUNCTION_25_24();
    OUTLINED_FUNCTION_16_30();
    return;
  }
  if (tc_v1_error_message())
  {
    String.init(cString:)();
    OUTLINED_FUNCTION_24_25();
    if (one-time initialization token for table != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_11_33();
    OUTLINED_FUNCTION_2_53();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for column != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for tableMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for columnMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for drop != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for sequence != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for double != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for integer != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for error != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for archive != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for limit != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_15_28();
    a17 = (uint64_t)&a17;
    a18 = v33;
    if (one-time initialization token for sortTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_14_28();
    type metadata accessor for OS_os_log();
    OUTLINED_FUNCTION_29_21();
    uint64_t v37 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v38 = (__n128 *)OUTLINED_FUNCTION_9_8();
    unint64_t v39 = OUTLINED_FUNCTION_23_19(v38, (__n128)xmmword_2272CB370);
    OUTLINED_FUNCTION_27_20(v39);
    OUTLINED_FUNCTION_9_31();

    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v40 = OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_8_32(v40, v41);
    tc_v1_release();
    goto LABEL_30;
  }
  __break(1u);
}

{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  __n128 *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;

  OUTLINED_FUNCTION_17_27();
  a29 = v34;
  a30 = v35;
  a20 = *MEMORY[0x263EF8340];
  OUTLINED_FUNCTION_36_16();
  MEMORY[0x22A6763A0]();
  OUTLINED_FUNCTION_22_24();
  if (!v30)
  {
LABEL_30:
    OUTLINED_FUNCTION_25_24();
    OUTLINED_FUNCTION_16_30();
    return;
  }
  if (tc_v1_error_message())
  {
    String.init(cString:)();
    OUTLINED_FUNCTION_24_25();
    if (one-time initialization token for table != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_11_33();
    OUTLINED_FUNCTION_2_53();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for column != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for tableMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for columnMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for drop != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for sequence != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for double != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for integer != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for error != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for archive != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for limit != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_15_28();
    a17 = (uint64_t)&a17;
    a18 = v33;
    if (one-time initialization token for sortTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_14_28();
    type metadata accessor for OS_os_log();
    OUTLINED_FUNCTION_29_21();
    char v36 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v37 = (__n128 *)OUTLINED_FUNCTION_9_8();
    uint64_t v38 = OUTLINED_FUNCTION_23_19(v37, (__n128)xmmword_2272CB370);
    OUTLINED_FUNCTION_27_20(v38);
    OUTLINED_FUNCTION_9_31();

    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    unint64_t v39 = OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_8_32(v39, v40);
    tc_v1_release();
    goto LABEL_30;
  }
  __break(1u);
}

{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(void);
  void *v37;
  __n128 *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;

  OUTLINED_FUNCTION_17_27();
  a29 = v34;
  a30 = v35;
  a20 = *MEMORY[0x263EF8340];
  OUTLINED_FUNCTION_36_16();
  v36();
  OUTLINED_FUNCTION_22_24();
  if (!v30)
  {
LABEL_30:
    OUTLINED_FUNCTION_25_24();
    OUTLINED_FUNCTION_16_30();
    return;
  }
  if (tc_v1_error_message())
  {
    String.init(cString:)();
    OUTLINED_FUNCTION_24_25();
    if (one-time initialization token for table != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_11_33();
    OUTLINED_FUNCTION_2_53();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for column != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for tableMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for columnMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for drop != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for sequence != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for double != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for integer != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for error != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for archive != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for limit != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_15_28();
    a17 = (uint64_t)&a17;
    a18 = v33;
    if (one-time initialization token for sortTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_14_28();
    type metadata accessor for OS_os_log();
    OUTLINED_FUNCTION_29_21();
    uint64_t v37 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v38 = (__n128 *)OUTLINED_FUNCTION_9_8();
    unint64_t v39 = OUTLINED_FUNCTION_23_19(v38, (__n128)xmmword_2272CB370);
    OUTLINED_FUNCTION_27_20(v39);
    OUTLINED_FUNCTION_9_31();

    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v40 = OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_8_32(v40, v41);
    tc_v1_release();
    goto LABEL_30;
  }
  __break(1u);
}

{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;
  __n128 *v37;
  unint64_t v38;
  uint64_t v39;
  void *v40;

  OUTLINED_FUNCTION_31_13();
  a29 = v33;
  a30 = v34;
  a20 = *MEMORY[0x263EF8340];
  OUTLINED_FUNCTION_36_16();
  MEMORY[0x22A676460]();
  if (!a19)
  {
LABEL_30:
    OUTLINED_FUNCTION_28_18();
    return;
  }
  if (tc_v1_error_message())
  {
    String.init(cString:)();
    OUTLINED_FUNCTION_34_11();
    if (one-time initialization token for table != -1) {
      swift_once();
    }
    uint64_t v35 = OUTLINED_FUNCTION_11_33();
    OUTLINED_FUNCTION_5_43();
    OUTLINED_FUNCTION_12_25();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for column != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_3_53();
    OUTLINED_FUNCTION_13_34();
    a17 = (uint64_t)&a17;
    a18 = v30;
    if (one-time initialization token for tableMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_3_53();
    OUTLINED_FUNCTION_12_25();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for columnMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_3_53();
    OUTLINED_FUNCTION_13_34();
    a17 = (uint64_t)&a17;
    a18 = v30;
    if (one-time initialization token for drop != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_3_53();
    OUTLINED_FUNCTION_12_25();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for sequence != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_3_53();
    OUTLINED_FUNCTION_13_34();
    a17 = (uint64_t)&a17;
    a18 = v30;
    if (one-time initialization token for double != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_3_53();
    OUTLINED_FUNCTION_12_25();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for integer != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_3_53();
    OUTLINED_FUNCTION_13_34();
    a17 = (uint64_t)&a17;
    a18 = v30;
    if (one-time initialization token for error != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_4_48();
    OUTLINED_FUNCTION_12_25();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for archive != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_4_48();
    OUTLINED_FUNCTION_13_34();
    a17 = (uint64_t)&a17;
    a18 = v30;
    if (one-time initialization token for limit != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_4_48();
    OUTLINED_FUNCTION_12_25();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_4_48();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for sortTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_4_48();
    OUTLINED_FUNCTION_26_17();
    type metadata accessor for OS_os_log();
    OUTLINED_FUNCTION_40_13();
    char v36 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v37 = (__n128 *)OUTLINED_FUNCTION_9_8();
    uint64_t v38 = OUTLINED_FUNCTION_33_15(v37, (__n128)xmmword_2272CB370);
    OUTLINED_FUNCTION_39_16(v38);
    OUTLINED_FUNCTION_21_28();

    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    unint64_t v39 = OUTLINED_FUNCTION_85();
    *uint64_t v40 = v30;
    v40[1] = v35;
    OUTLINED_FUNCTION_8_4(v39, (uint64_t)v40);
    tc_v1_release();
    goto LABEL_30;
  }
  __break(1u);
}

void specialized handling<A, B>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  OUTLINED_FUNCTION_17_27();
  a29 = v34;
  a30 = v35;
  OUTLINED_FUNCTION_37_14(*MEMORY[0x263EF8340]);
  MEMORY[0x22A676390](&a19);
  OUTLINED_FUNCTION_22_24();
  if (!v30)
  {
LABEL_30:
    OUTLINED_FUNCTION_25_24();
    OUTLINED_FUNCTION_16_30();
    return;
  }
  if (tc_v1_error_message())
  {
    String.init(cString:)();
    OUTLINED_FUNCTION_24_25();
    if (one-time initialization token for table != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_11_33();
    OUTLINED_FUNCTION_2_53();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for column != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for tableMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for columnMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for drop != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for sequence != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for double != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for integer != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for error != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for archive != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for limit != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_15_28();
    a17 = (uint64_t)&a17;
    a18 = v33;
    if (one-time initialization token for sortTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_14_28();
    type metadata accessor for OS_os_log();
    OUTLINED_FUNCTION_29_21();
    char v36 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v37 = (__n128 *)OUTLINED_FUNCTION_9_8();
    unint64_t v38 = OUTLINED_FUNCTION_23_19(v37, (__n128)xmmword_2272CB370);
    OUTLINED_FUNCTION_27_20(v38);
    OUTLINED_FUNCTION_9_31();

    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v39 = OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_8_32(v39, v40);
    tc_v1_release();
    goto LABEL_30;
  }
  __break(1u);
}

#error "2271CE238: call analysis failed (funcsize=24)"

#error "2271CE298: call analysis failed (funcsize=24)"

#error "2271CE2F8: call analysis failed (funcsize=24)"

#error "2271CE358: call analysis failed (funcsize=24)"

#error "2271CE3B8: call analysis failed (funcsize=24)"

#error "2271CED68: call analysis failed (funcsize=24)"

#error "2271CEDC8: call analysis failed (funcsize=24)"

#error "2271CEE28: call analysis failed (funcsize=24)"

#error "2271CEE88: call analysis failed (funcsize=24)"

#error "2271CEEE8: call analysis failed (funcsize=24)"

#error "2271CEF48: call analysis failed (funcsize=24)"

void specialized handling<A, B, C>(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  OUTLINED_FUNCTION_17_27();
  a29 = v34;
  a30 = v35;
  OUTLINED_FUNCTION_38_16();
  a20 = *MEMORY[0x263EF8340];
  OUTLINED_FUNCTION_32_18();
  v36();
  OUTLINED_FUNCTION_22_24();
  if (!v30)
  {
LABEL_30:
    OUTLINED_FUNCTION_25_24();
    OUTLINED_FUNCTION_16_30();
    return;
  }
  if (tc_v1_error_message())
  {
    String.init(cString:)();
    OUTLINED_FUNCTION_24_25();
    if (one-time initialization token for table != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_11_33();
    OUTLINED_FUNCTION_2_53();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for column != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for tableMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for columnMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for drop != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for sequence != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for double != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for integer != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for error != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for archive != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for limit != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_15_28();
    a17 = (uint64_t)&a17;
    a18 = v33;
    if (one-time initialization token for sortTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_14_28();
    type metadata accessor for OS_os_log();
    OUTLINED_FUNCTION_29_21();
    uint64_t v37 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    unint64_t v38 = (__n128 *)OUTLINED_FUNCTION_9_8();
    unint64_t v39 = OUTLINED_FUNCTION_23_19(v38, (__n128)xmmword_2272CB370);
    OUTLINED_FUNCTION_27_20(v39);
    OUTLINED_FUNCTION_9_31();

    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v40 = OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_8_32(v40, v41);
    tc_v1_release();
    goto LABEL_30;
  }
  __break(1u);
}

{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  __n128 *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;

  OUTLINED_FUNCTION_17_27();
  a29 = v34;
  a30 = v35;
  a20 = *MEMORY[0x263EF8340];
  OUTLINED_FUNCTION_32_18();
  MEMORY[0x22A676350]();
  OUTLINED_FUNCTION_22_24();
  if (!v30)
  {
LABEL_30:
    OUTLINED_FUNCTION_25_24();
    OUTLINED_FUNCTION_16_30();
    return;
  }
  if (tc_v1_error_message())
  {
    String.init(cString:)();
    OUTLINED_FUNCTION_24_25();
    if (one-time initialization token for table != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_11_33();
    OUTLINED_FUNCTION_2_53();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for column != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for tableMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for columnMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for drop != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for sequence != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for double != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for integer != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for error != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for archive != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for limit != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_15_28();
    a17 = (uint64_t)&a17;
    a18 = v33;
    if (one-time initialization token for sortTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_14_28();
    type metadata accessor for OS_os_log();
    char v36 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v37 = (__n128 *)OUTLINED_FUNCTION_9_8();
    unint64_t v38 = OUTLINED_FUNCTION_23_19(v37, (__n128)xmmword_2272CB370);
    OUTLINED_FUNCTION_20_27(v38);
    OUTLINED_FUNCTION_9_31();

    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    unint64_t v39 = OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_8_32(v39, v40);
    tc_v1_release();
    goto LABEL_30;
  }
  __break(1u);
}

{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  __n128 *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;

  OUTLINED_FUNCTION_17_27();
  a29 = v34;
  a30 = v35;
  a20 = *MEMORY[0x263EF8340];
  OUTLINED_FUNCTION_32_18();
  MEMORY[0x22A676450]();
  OUTLINED_FUNCTION_22_24();
  if (!v30)
  {
LABEL_30:
    OUTLINED_FUNCTION_25_24();
    OUTLINED_FUNCTION_16_30();
    return;
  }
  if (tc_v1_error_message())
  {
    String.init(cString:)();
    OUTLINED_FUNCTION_24_25();
    if (one-time initialization token for table != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_11_33();
    OUTLINED_FUNCTION_2_53();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for column != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for tableMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for columnMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for drop != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for sequence != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for double != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for integer != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for error != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for archive != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for limit != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_15_28();
    a17 = (uint64_t)&a17;
    a18 = v33;
    if (one-time initialization token for sortTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_14_28();
    type metadata accessor for OS_os_log();
    char v36 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v37 = (__n128 *)OUTLINED_FUNCTION_9_8();
    unint64_t v38 = OUTLINED_FUNCTION_23_19(v37, (__n128)xmmword_2272CB370);
    OUTLINED_FUNCTION_20_27(v38);
    OUTLINED_FUNCTION_9_31();

    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    unint64_t v39 = OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_8_32(v39, v40);
    tc_v1_release();
    goto LABEL_30;
  }
  __break(1u);
}

{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  __n128 *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;

  OUTLINED_FUNCTION_17_27();
  a29 = v34;
  a30 = v35;
  OUTLINED_FUNCTION_37_14(*MEMORY[0x263EF8340]);
  MEMORY[0x22A676470]();
  OUTLINED_FUNCTION_22_24();
  if (!v30)
  {
LABEL_30:
    OUTLINED_FUNCTION_25_24();
    OUTLINED_FUNCTION_16_30();
    return;
  }
  if (tc_v1_error_message())
  {
    String.init(cString:)();
    OUTLINED_FUNCTION_24_25();
    if (one-time initialization token for table != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_11_33();
    OUTLINED_FUNCTION_2_53();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for column != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for tableMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for columnMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for drop != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for sequence != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for double != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for integer != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for error != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for archive != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for limit != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_15_28();
    a17 = (uint64_t)&a17;
    a18 = v33;
    if (one-time initialization token for sortTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_14_28();
    type metadata accessor for OS_os_log();
    char v36 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v37 = (__n128 *)OUTLINED_FUNCTION_9_8();
    unint64_t v38 = OUTLINED_FUNCTION_23_19(v37, (__n128)xmmword_2272CB370);
    OUTLINED_FUNCTION_20_27(v38);
    OUTLINED_FUNCTION_9_31();

    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    unint64_t v39 = OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_8_32(v39, v40);
    tc_v1_release();
    goto LABEL_30;
  }
  __break(1u);
}

{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;
  __n128 *v37;
  unint64_t v38;
  uint64_t v39;
  void *v40;

  OUTLINED_FUNCTION_31_13();
  a29 = v33;
  a30 = v34;
  a20 = *MEMORY[0x263EF8340];
  OUTLINED_FUNCTION_32_18();
  MEMORY[0x22A6764F0]();
  if (!a19)
  {
LABEL_30:
    OUTLINED_FUNCTION_28_18();
    return;
  }
  if (tc_v1_error_message())
  {
    String.init(cString:)();
    OUTLINED_FUNCTION_34_11();
    if (one-time initialization token for table != -1) {
      swift_once();
    }
    uint64_t v35 = OUTLINED_FUNCTION_11_33();
    OUTLINED_FUNCTION_5_43();
    OUTLINED_FUNCTION_12_25();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for column != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_3_53();
    OUTLINED_FUNCTION_13_34();
    a17 = (uint64_t)&a17;
    a18 = v30;
    if (one-time initialization token for tableMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_3_53();
    OUTLINED_FUNCTION_12_25();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for columnMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_3_53();
    OUTLINED_FUNCTION_13_34();
    a17 = (uint64_t)&a17;
    a18 = v30;
    if (one-time initialization token for drop != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_3_53();
    OUTLINED_FUNCTION_12_25();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for sequence != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_3_53();
    OUTLINED_FUNCTION_13_34();
    a17 = (uint64_t)&a17;
    a18 = v30;
    if (one-time initialization token for double != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_3_53();
    OUTLINED_FUNCTION_12_25();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for integer != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_3_53();
    OUTLINED_FUNCTION_13_34();
    a17 = (uint64_t)&a17;
    a18 = v30;
    if (one-time initialization token for error != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_4_48();
    OUTLINED_FUNCTION_12_25();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for archive != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_4_48();
    OUTLINED_FUNCTION_13_34();
    a17 = (uint64_t)&a17;
    a18 = v30;
    if (one-time initialization token for limit != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_4_48();
    OUTLINED_FUNCTION_12_25();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_4_48();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for sortTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_4_48();
    OUTLINED_FUNCTION_26_17();
    type metadata accessor for OS_os_log();
    char v36 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v37 = (__n128 *)OUTLINED_FUNCTION_9_8();
    unint64_t v38 = OUTLINED_FUNCTION_33_15(v37, (__n128)xmmword_2272CB370);
    OUTLINED_FUNCTION_35_14(v38);
    OUTLINED_FUNCTION_21_28();

    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    unint64_t v39 = OUTLINED_FUNCTION_85();
    *uint64_t v40 = v30;
    v40[1] = v35;
    OUTLINED_FUNCTION_8_4(v39, (uint64_t)v40);
    tc_v1_release();
    goto LABEL_30;
  }
  __break(1u);
}

{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(void);
  void *v37;
  __n128 *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;

  OUTLINED_FUNCTION_17_27();
  a29 = v34;
  a30 = v35;
  OUTLINED_FUNCTION_38_16();
  a20 = *MEMORY[0x263EF8340];
  OUTLINED_FUNCTION_32_18();
  v36();
  OUTLINED_FUNCTION_22_24();
  if (!v30)
  {
LABEL_30:
    OUTLINED_FUNCTION_25_24();
    OUTLINED_FUNCTION_16_30();
    return;
  }
  if (tc_v1_error_message())
  {
    String.init(cString:)();
    OUTLINED_FUNCTION_24_25();
    if (one-time initialization token for table != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_11_33();
    OUTLINED_FUNCTION_2_53();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for column != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for tableMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for columnMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for drop != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for sequence != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for double != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for integer != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for error != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for archive != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for limit != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_15_28();
    a17 = (uint64_t)&a17;
    a18 = v33;
    if (one-time initialization token for sortTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_14_28();
    type metadata accessor for OS_os_log();
    uint64_t v37 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    unint64_t v38 = (__n128 *)OUTLINED_FUNCTION_9_8();
    unint64_t v39 = OUTLINED_FUNCTION_23_19(v38, (__n128)xmmword_2272CB370);
    OUTLINED_FUNCTION_20_27(v39);
    OUTLINED_FUNCTION_9_31();

    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v40 = OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_8_32(v40, v41);
    tc_v1_release();
    goto LABEL_30;
  }
  __break(1u);
}

{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(void);
  void *v37;
  __n128 *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;

  OUTLINED_FUNCTION_17_27();
  a29 = v34;
  a30 = v35;
  OUTLINED_FUNCTION_38_16();
  a20 = *MEMORY[0x263EF8340];
  OUTLINED_FUNCTION_32_18();
  v36();
  OUTLINED_FUNCTION_22_24();
  if (!v30)
  {
LABEL_30:
    OUTLINED_FUNCTION_25_24();
    OUTLINED_FUNCTION_16_30();
    return;
  }
  if (tc_v1_error_message())
  {
    String.init(cString:)();
    OUTLINED_FUNCTION_24_25();
    if (one-time initialization token for table != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_11_33();
    OUTLINED_FUNCTION_2_53();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for column != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for tableMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for columnMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for drop != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for sequence != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for double != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for integer != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for error != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for archive != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for limit != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_15_28();
    a17 = (uint64_t)&a17;
    a18 = v33;
    if (one-time initialization token for sortTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_14_28();
    type metadata accessor for OS_os_log();
    uint64_t v37 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    unint64_t v38 = (__n128 *)OUTLINED_FUNCTION_9_8();
    unint64_t v39 = OUTLINED_FUNCTION_23_19(v38, (__n128)xmmword_2272CB370);
    OUTLINED_FUNCTION_20_27(v39);
    OUTLINED_FUNCTION_9_31();

    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v40 = OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_8_32(v40, v41);
    tc_v1_release();
    goto LABEL_30;
  }
  __break(1u);
}

{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(void);
  void *v37;
  __n128 *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;

  OUTLINED_FUNCTION_17_27();
  a29 = v34;
  a30 = v35;
  OUTLINED_FUNCTION_38_16();
  a20 = *MEMORY[0x263EF8340];
  OUTLINED_FUNCTION_32_18();
  v36();
  OUTLINED_FUNCTION_22_24();
  if (!v30)
  {
LABEL_30:
    OUTLINED_FUNCTION_25_24();
    OUTLINED_FUNCTION_16_30();
    return;
  }
  if (tc_v1_error_message())
  {
    String.init(cString:)();
    OUTLINED_FUNCTION_24_25();
    if (one-time initialization token for table != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_11_33();
    OUTLINED_FUNCTION_2_53();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for column != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for tableMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for columnMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for drop != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for sequence != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for double != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for integer != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for error != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for archive != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for limit != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_15_28();
    a17 = (uint64_t)&a17;
    a18 = v33;
    if (one-time initialization token for sortTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_14_28();
    type metadata accessor for OS_os_log();
    uint64_t v37 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    unint64_t v38 = (__n128 *)OUTLINED_FUNCTION_9_8();
    unint64_t v39 = OUTLINED_FUNCTION_23_19(v38, (__n128)xmmword_2272CB370);
    OUTLINED_FUNCTION_20_27(v39);
    OUTLINED_FUNCTION_9_31();

    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v40 = OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_8_32(v40, v41);
    tc_v1_release();
    goto LABEL_30;
  }
  __break(1u);
}

#error "2271CF44C: call analysis failed (funcsize=24)"

#error "2271CFDEC: call analysis failed (funcsize=24)"

#error "2271CFE4C: call analysis failed (funcsize=24)"

#error "2271CFEAC: call analysis failed (funcsize=24)"

#error "2271CFF0C: call analysis failed (funcsize=24)"

#error "2271D0410: call analysis failed (funcsize=24)"

#error "2271D0470: call analysis failed (funcsize=24)"

#error "2271D0978: call analysis failed (funcsize=24)"

#error "2271D09D8: call analysis failed (funcsize=24)"

#error "2271D0A38: call analysis failed (funcsize=24)"

#error "2271D0F3C: call analysis failed (funcsize=24)"

#error "2271D1440: call analysis failed (funcsize=24)"

#error "2271D14A0: call analysis failed (funcsize=24)"

void specialized handling<A, B, C, D>(_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  OUTLINED_FUNCTION_17_27();
  a29 = v34;
  a30 = v35;
  OUTLINED_FUNCTION_37_14(*MEMORY[0x263EF8340]);
  MEMORY[0x22A676320]();
  OUTLINED_FUNCTION_22_24();
  if (!v30)
  {
LABEL_30:
    OUTLINED_FUNCTION_25_24();
    OUTLINED_FUNCTION_16_30();
    return;
  }
  if (tc_v1_error_message())
  {
    String.init(cString:)();
    OUTLINED_FUNCTION_24_25();
    if (one-time initialization token for table != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_11_33();
    OUTLINED_FUNCTION_2_53();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for column != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for tableMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for columnMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for drop != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for sequence != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for double != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for integer != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for error != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for archive != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for limit != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_15_28();
    a17 = (uint64_t)&a17;
    a18 = v33;
    if (one-time initialization token for sortTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_14_28();
    type metadata accessor for OS_os_log();
    char v36 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v37 = (__n128 *)OUTLINED_FUNCTION_9_8();
    unint64_t v38 = OUTLINED_FUNCTION_23_19(v37, (__n128)xmmword_2272CB370);
    OUTLINED_FUNCTION_20_27(v38);
    OUTLINED_FUNCTION_9_31();

    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v39 = OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_8_32(v39, v40);
    tc_v1_release();
    goto LABEL_30;
  }
  __break(1u);
}

{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  __n128 *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;

  OUTLINED_FUNCTION_17_27();
  a29 = v34;
  a30 = v35;
  OUTLINED_FUNCTION_41_13(*MEMORY[0x263EF8340]);
  MEMORY[0x22A676480]();
  OUTLINED_FUNCTION_22_24();
  if (!v30)
  {
LABEL_30:
    OUTLINED_FUNCTION_25_24();
    OUTLINED_FUNCTION_16_30();
    return;
  }
  if (tc_v1_error_message())
  {
    String.init(cString:)();
    OUTLINED_FUNCTION_24_25();
    if (one-time initialization token for table != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_11_33();
    OUTLINED_FUNCTION_2_53();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for column != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for tableMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for columnMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for drop != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for sequence != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for double != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for integer != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for error != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for archive != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for limit != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_15_28();
    a17 = (uint64_t)&a17;
    a18 = v33;
    if (one-time initialization token for sortTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_14_28();
    type metadata accessor for OS_os_log();
    char v36 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v37 = (__n128 *)OUTLINED_FUNCTION_9_8();
    unint64_t v38 = OUTLINED_FUNCTION_23_19(v37, (__n128)xmmword_2272CB370);
    OUTLINED_FUNCTION_20_27(v38);
    OUTLINED_FUNCTION_9_31();

    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v39 = OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_8_32(v39, v40);
    tc_v1_release();
    goto LABEL_30;
  }
  __break(1u);
}

{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(void);
  unint64_t v36;
  void *v37;
  __n128 *v38;
  unint64_t v39;
  uint64_t v40;
  void *v41;

  OUTLINED_FUNCTION_31_13();
  a29 = v33;
  a30 = v34;
  a20 = *MEMORY[0x263EF8340];
  a19 = 0;
  v35();
  if (!a19)
  {
LABEL_30:
    OUTLINED_FUNCTION_28_18();
    return;
  }
  if (tc_v1_error_message())
  {
    String.init(cString:)();
    OUTLINED_FUNCTION_34_11();
    if (one-time initialization token for table != -1) {
      swift_once();
    }
    char v36 = OUTLINED_FUNCTION_11_33();
    OUTLINED_FUNCTION_5_43();
    OUTLINED_FUNCTION_12_25();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for column != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_3_53();
    OUTLINED_FUNCTION_13_34();
    a17 = (uint64_t)&a17;
    a18 = v30;
    if (one-time initialization token for tableMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_3_53();
    OUTLINED_FUNCTION_12_25();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for columnMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_3_53();
    OUTLINED_FUNCTION_13_34();
    a17 = (uint64_t)&a17;
    a18 = v30;
    if (one-time initialization token for drop != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_3_53();
    OUTLINED_FUNCTION_12_25();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for sequence != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_3_53();
    OUTLINED_FUNCTION_13_34();
    a17 = (uint64_t)&a17;
    a18 = v30;
    if (one-time initialization token for double != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_3_53();
    OUTLINED_FUNCTION_12_25();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for integer != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_3_53();
    OUTLINED_FUNCTION_13_34();
    a17 = (uint64_t)&a17;
    a18 = v30;
    if (one-time initialization token for error != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_4_48();
    OUTLINED_FUNCTION_12_25();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for archive != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_4_48();
    OUTLINED_FUNCTION_13_34();
    a17 = (uint64_t)&a17;
    a18 = v30;
    if (one-time initialization token for limit != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_4_48();
    OUTLINED_FUNCTION_12_25();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_4_48();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for sortTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_4_48();
    OUTLINED_FUNCTION_26_17();
    type metadata accessor for OS_os_log();
    uint64_t v37 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    unint64_t v38 = (__n128 *)OUTLINED_FUNCTION_9_8();
    uint64_t v39 = OUTLINED_FUNCTION_33_15(v38, (__n128)xmmword_2272CB370);
    OUTLINED_FUNCTION_35_14(v39);
    OUTLINED_FUNCTION_21_28();

    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v40 = OUTLINED_FUNCTION_85();
    *uint64_t v41 = v30;
    v41[1] = v36;
    OUTLINED_FUNCTION_8_4(v40, (uint64_t)v41);
    tc_v1_release();
    goto LABEL_30;
  }
  __break(1u);
}

{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  __n128 *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;

  OUTLINED_FUNCTION_17_27();
  a29 = v34;
  a30 = v35;
  OUTLINED_FUNCTION_41_13(*MEMORY[0x263EF8340]);
  MEMORY[0x22A676520]();
  OUTLINED_FUNCTION_22_24();
  if (!v30)
  {
LABEL_30:
    OUTLINED_FUNCTION_25_24();
    OUTLINED_FUNCTION_16_30();
    return;
  }
  if (tc_v1_error_message())
  {
    String.init(cString:)();
    OUTLINED_FUNCTION_24_25();
    if (one-time initialization token for table != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_11_33();
    OUTLINED_FUNCTION_2_53();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for column != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for tableMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for columnMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for drop != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for sequence != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for double != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for integer != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for error != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for archive != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for limit != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_15_28();
    a17 = (uint64_t)&a17;
    a18 = v33;
    if (one-time initialization token for sortTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_14_28();
    type metadata accessor for OS_os_log();
    char v36 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v37 = (__n128 *)OUTLINED_FUNCTION_9_8();
    unint64_t v38 = OUTLINED_FUNCTION_23_19(v37, (__n128)xmmword_2272CB370);
    OUTLINED_FUNCTION_20_27(v38);
    OUTLINED_FUNCTION_9_31();

    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v39 = OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_8_32(v39, v40);
    tc_v1_release();
    goto LABEL_30;
  }
  __break(1u);
}

{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  __n128 *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;

  OUTLINED_FUNCTION_17_27();
  a29 = v34;
  a30 = v35;
  a20 = *MEMORY[0x263EF8340];
  OUTLINED_FUNCTION_32_18();
  MEMORY[0x22A676500]();
  OUTLINED_FUNCTION_22_24();
  if (!v30)
  {
LABEL_30:
    OUTLINED_FUNCTION_25_24();
    OUTLINED_FUNCTION_16_30();
    return;
  }
  if (tc_v1_error_message())
  {
    String.init(cString:)();
    OUTLINED_FUNCTION_24_25();
    if (one-time initialization token for table != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_11_33();
    OUTLINED_FUNCTION_2_53();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for column != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for tableMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for columnMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for drop != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for sequence != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for double != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for integer != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for error != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for archive != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for limit != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_15_28();
    a17 = (uint64_t)&a17;
    a18 = v33;
    if (one-time initialization token for sortTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_14_28();
    type metadata accessor for OS_os_log();
    char v36 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v37 = (__n128 *)OUTLINED_FUNCTION_9_8();
    unint64_t v38 = OUTLINED_FUNCTION_23_19(v37, (__n128)xmmword_2272CB370);
    OUTLINED_FUNCTION_20_27(v38);
    OUTLINED_FUNCTION_9_31();

    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v39 = OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_8_32(v39, v40);
    tc_v1_release();
    goto LABEL_30;
  }
  __break(1u);
}

{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(void);
  void *v37;
  __n128 *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;

  OUTLINED_FUNCTION_17_27();
  a29 = v34;
  a30 = v35;
  a20 = *MEMORY[0x263EF8340];
  a19 = 0;
  v36();
  OUTLINED_FUNCTION_22_24();
  if (!v30)
  {
LABEL_30:
    OUTLINED_FUNCTION_25_24();
    OUTLINED_FUNCTION_16_30();
    return;
  }
  if (tc_v1_error_message())
  {
    String.init(cString:)();
    OUTLINED_FUNCTION_24_25();
    if (one-time initialization token for table != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_11_33();
    OUTLINED_FUNCTION_2_53();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for column != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for tableMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for columnMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for drop != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for sequence != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for double != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for integer != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for error != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for archive != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for limit != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_15_28();
    a17 = (uint64_t)&a17;
    a18 = v33;
    if (one-time initialization token for sortTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_14_28();
    type metadata accessor for OS_os_log();
    uint64_t v37 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    unint64_t v38 = (__n128 *)OUTLINED_FUNCTION_9_8();
    uint64_t v39 = OUTLINED_FUNCTION_23_19(v38, (__n128)xmmword_2272CB370);
    OUTLINED_FUNCTION_20_27(v39);
    OUTLINED_FUNCTION_9_31();

    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v40 = OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_8_32(v40, v41);
    tc_v1_release();
    goto LABEL_30;
  }
  __break(1u);
}

#error "2271D22E0: call analysis failed (funcsize=24)"

#error "2271D2340: call analysis failed (funcsize=24)"

#error "2271D23A0: call analysis failed (funcsize=24)"

#error "2271D2400: call analysis failed (funcsize=24)"

#error "2271D2460: call analysis failed (funcsize=24)"

#error "2271D24C0: call analysis failed (funcsize=24)"

#error "2271D2520: call analysis failed (funcsize=24)"

#error "2271D2580: call analysis failed (funcsize=24)"

#error "2271D25E0: call analysis failed (funcsize=24)"

#error "2271D2640: call analysis failed (funcsize=24)"

#error "2271D2FF0: call analysis failed (funcsize=24)"

#error "2271D34F0: call analysis failed (funcsize=24)"

#error "2271D3550: call analysis failed (funcsize=24)"

void specialized handling<A, B, C, D, E>(_:_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  OUTLINED_FUNCTION_31_13();
  a29 = v33;
  a30 = v34;
  OUTLINED_FUNCTION_30_22(*MEMORY[0x263EF8340]);
  MEMORY[0x22A676340]();
  if (!a19)
  {
LABEL_30:
    OUTLINED_FUNCTION_28_18();
    return;
  }
  if (tc_v1_error_message())
  {
    String.init(cString:)();
    OUTLINED_FUNCTION_34_11();
    if (one-time initialization token for table != -1) {
      swift_once();
    }
    unint64_t v35 = OUTLINED_FUNCTION_11_33();
    OUTLINED_FUNCTION_5_43();
    OUTLINED_FUNCTION_12_25();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for column != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_3_53();
    OUTLINED_FUNCTION_13_34();
    a17 = (uint64_t)&a17;
    a18 = v30;
    if (one-time initialization token for tableMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_3_53();
    OUTLINED_FUNCTION_12_25();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for columnMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_3_53();
    OUTLINED_FUNCTION_13_34();
    a17 = (uint64_t)&a17;
    a18 = v30;
    if (one-time initialization token for drop != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_3_53();
    OUTLINED_FUNCTION_12_25();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for sequence != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_3_53();
    OUTLINED_FUNCTION_13_34();
    a17 = (uint64_t)&a17;
    a18 = v30;
    if (one-time initialization token for double != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_3_53();
    OUTLINED_FUNCTION_12_25();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for integer != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_3_53();
    OUTLINED_FUNCTION_13_34();
    a17 = (uint64_t)&a17;
    a18 = v30;
    if (one-time initialization token for error != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_4_48();
    OUTLINED_FUNCTION_12_25();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for archive != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_4_48();
    OUTLINED_FUNCTION_13_34();
    a17 = (uint64_t)&a17;
    a18 = v30;
    if (one-time initialization token for limit != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_4_48();
    OUTLINED_FUNCTION_12_25();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_4_48();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for sortTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_4_48();
    OUTLINED_FUNCTION_26_17();
    type metadata accessor for OS_os_log();
    OUTLINED_FUNCTION_40_13();
    char v36 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v37 = (__n128 *)OUTLINED_FUNCTION_9_8();
    unint64_t v38 = OUTLINED_FUNCTION_33_15(v37, (__n128)xmmword_2272CB370);
    OUTLINED_FUNCTION_39_16(v38);
    OUTLINED_FUNCTION_21_28();

    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v39 = OUTLINED_FUNCTION_85();
    *uint64_t v40 = v30;
    v40[1] = v35;
    OUTLINED_FUNCTION_8_4(v39, (uint64_t)v40);
    tc_v1_release();
    goto LABEL_30;
  }
  __break(1u);
}

{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  __n128 *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;

  OUTLINED_FUNCTION_17_27();
  a29 = v34;
  a30 = v35;
  OUTLINED_FUNCTION_30_22(*MEMORY[0x263EF8340]);
  MEMORY[0x22A676410]();
  OUTLINED_FUNCTION_22_24();
  if (!v30)
  {
LABEL_30:
    OUTLINED_FUNCTION_25_24();
    OUTLINED_FUNCTION_16_30();
    return;
  }
  if (tc_v1_error_message())
  {
    String.init(cString:)();
    OUTLINED_FUNCTION_24_25();
    if (one-time initialization token for table != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_11_33();
    OUTLINED_FUNCTION_2_53();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for column != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for tableMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for columnMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for drop != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for sequence != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for double != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for integer != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for error != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for archive != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for limit != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_15_28();
    a17 = (uint64_t)&a17;
    a18 = v33;
    if (one-time initialization token for sortTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_14_28();
    type metadata accessor for OS_os_log();
    OUTLINED_FUNCTION_29_21();
    char v36 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v37 = (__n128 *)OUTLINED_FUNCTION_9_8();
    unint64_t v38 = OUTLINED_FUNCTION_23_19(v37, (__n128)xmmword_2272CB370);
    OUTLINED_FUNCTION_27_20(v38);
    OUTLINED_FUNCTION_9_31();

    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v39 = OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_8_32(v39, v40);
    tc_v1_release();
    goto LABEL_30;
  }
  __break(1u);
}

{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  __n128 *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;

  OUTLINED_FUNCTION_17_27();
  a29 = v34;
  a30 = v35;
  OUTLINED_FUNCTION_30_22(*MEMORY[0x263EF8340]);
  MEMORY[0x22A6764C0]();
  OUTLINED_FUNCTION_22_24();
  if (!v30)
  {
LABEL_30:
    OUTLINED_FUNCTION_25_24();
    OUTLINED_FUNCTION_16_30();
    return;
  }
  if (tc_v1_error_message())
  {
    String.init(cString:)();
    OUTLINED_FUNCTION_24_25();
    if (one-time initialization token for table != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_11_33();
    OUTLINED_FUNCTION_2_53();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for column != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for tableMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for columnMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for drop != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for sequence != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for double != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for integer != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for error != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for archive != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for limit != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_15_28();
    a17 = (uint64_t)&a17;
    a18 = v33;
    if (one-time initialization token for sortTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_14_28();
    type metadata accessor for OS_os_log();
    OUTLINED_FUNCTION_29_21();
    char v36 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v37 = (__n128 *)OUTLINED_FUNCTION_9_8();
    unint64_t v38 = OUTLINED_FUNCTION_23_19(v37, (__n128)xmmword_2272CB370);
    OUTLINED_FUNCTION_27_20(v38);
    OUTLINED_FUNCTION_9_31();

    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v39 = OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_8_32(v39, v40);
    tc_v1_release();
    goto LABEL_30;
  }
  __break(1u);
}

{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(void);
  void *v37;
  __n128 *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;

  OUTLINED_FUNCTION_17_27();
  a29 = v34;
  a30 = v35;
  a20 = *MEMORY[0x263EF8340];
  a19 = 0;
  v36();
  OUTLINED_FUNCTION_22_24();
  if (!v30)
  {
LABEL_30:
    OUTLINED_FUNCTION_25_24();
    OUTLINED_FUNCTION_16_30();
    return;
  }
  if (tc_v1_error_message())
  {
    String.init(cString:)();
    OUTLINED_FUNCTION_24_25();
    if (one-time initialization token for table != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_11_33();
    OUTLINED_FUNCTION_2_53();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for column != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for tableMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for columnMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for drop != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for sequence != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for double != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for integer != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for error != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for archive != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for limit != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_15_28();
    a17 = (uint64_t)&a17;
    a18 = v33;
    if (one-time initialization token for sortTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_14_28();
    type metadata accessor for OS_os_log();
    OUTLINED_FUNCTION_29_21();
    uint64_t v37 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    unint64_t v38 = (__n128 *)OUTLINED_FUNCTION_9_8();
    uint64_t v39 = OUTLINED_FUNCTION_23_19(v38, (__n128)xmmword_2272CB370);
    OUTLINED_FUNCTION_27_20(v39);
    OUTLINED_FUNCTION_9_31();

    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v40 = OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_8_32(v40, v41);
    tc_v1_release();
    goto LABEL_30;
  }
  __break(1u);
}

{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  __n128 *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;

  OUTLINED_FUNCTION_17_27();
  a29 = v34;
  a30 = v35;
  OUTLINED_FUNCTION_30_22(*MEMORY[0x263EF8340]);
  MEMORY[0x22A676510]();
  OUTLINED_FUNCTION_22_24();
  if (!v30)
  {
LABEL_30:
    OUTLINED_FUNCTION_25_24();
    OUTLINED_FUNCTION_16_30();
    return;
  }
  if (tc_v1_error_message())
  {
    String.init(cString:)();
    OUTLINED_FUNCTION_24_25();
    if (one-time initialization token for table != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_11_33();
    OUTLINED_FUNCTION_2_53();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for column != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for tableMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for columnMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for drop != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for sequence != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for double != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for integer != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for error != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for archive != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for limit != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_15_28();
    a17 = (uint64_t)&a17;
    a18 = v33;
    if (one-time initialization token for sortTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_14_28();
    type metadata accessor for OS_os_log();
    OUTLINED_FUNCTION_29_21();
    char v36 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v37 = (__n128 *)OUTLINED_FUNCTION_9_8();
    unint64_t v38 = OUTLINED_FUNCTION_23_19(v37, (__n128)xmmword_2272CB370);
    OUTLINED_FUNCTION_27_20(v38);
    OUTLINED_FUNCTION_9_31();

    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v39 = OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_8_32(v39, v40);
    tc_v1_release();
    goto LABEL_30;
  }
  __break(1u);
}

{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(void);
  unint64_t v36;
  void *v37;
  __n128 *v38;
  unint64_t v39;
  uint64_t v40;
  void *v41;

  OUTLINED_FUNCTION_31_13();
  a29 = v33;
  a30 = v34;
  a20 = *MEMORY[0x263EF8340];
  a19 = 0;
  v35();
  if (!a19)
  {
LABEL_30:
    OUTLINED_FUNCTION_28_18();
    return;
  }
  if (tc_v1_error_message())
  {
    String.init(cString:)();
    OUTLINED_FUNCTION_34_11();
    if (one-time initialization token for table != -1) {
      swift_once();
    }
    char v36 = OUTLINED_FUNCTION_11_33();
    OUTLINED_FUNCTION_5_43();
    OUTLINED_FUNCTION_12_25();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for column != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_3_53();
    OUTLINED_FUNCTION_13_34();
    a17 = (uint64_t)&a17;
    a18 = v30;
    if (one-time initialization token for tableMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_3_53();
    OUTLINED_FUNCTION_12_25();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for columnMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_3_53();
    OUTLINED_FUNCTION_13_34();
    a17 = (uint64_t)&a17;
    a18 = v30;
    if (one-time initialization token for drop != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_3_53();
    OUTLINED_FUNCTION_12_25();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for sequence != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_3_53();
    OUTLINED_FUNCTION_13_34();
    a17 = (uint64_t)&a17;
    a18 = v30;
    if (one-time initialization token for double != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_3_53();
    OUTLINED_FUNCTION_12_25();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for integer != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_3_53();
    OUTLINED_FUNCTION_13_34();
    a17 = (uint64_t)&a17;
    a18 = v30;
    if (one-time initialization token for error != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_4_48();
    OUTLINED_FUNCTION_12_25();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for archive != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_4_48();
    OUTLINED_FUNCTION_13_34();
    a17 = (uint64_t)&a17;
    a18 = v30;
    if (one-time initialization token for limit != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_4_48();
    OUTLINED_FUNCTION_12_25();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_4_48();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for sortTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_4_48();
    OUTLINED_FUNCTION_26_17();
    type metadata accessor for OS_os_log();
    OUTLINED_FUNCTION_40_13();
    uint64_t v37 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    unint64_t v38 = (__n128 *)OUTLINED_FUNCTION_9_8();
    uint64_t v39 = OUTLINED_FUNCTION_33_15(v38, (__n128)xmmword_2272CB370);
    OUTLINED_FUNCTION_39_16(v39);
    OUTLINED_FUNCTION_21_28();

    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v40 = OUTLINED_FUNCTION_85();
    *uint64_t v41 = v30;
    v41[1] = v36;
    OUTLINED_FUNCTION_8_4(v40, (uint64_t)v41);
    tc_v1_release();
    goto LABEL_30;
  }
  __break(1u);
}

#error "2271D4838: call analysis failed (funcsize=24)"

#error "2271D4898: call analysis failed (funcsize=24)"

#error "2271D48F8: call analysis failed (funcsize=24)"

#error "2271D52A4: call analysis failed (funcsize=24)"

#error "2271D5304: call analysis failed (funcsize=24)"

#error "2271D5364: call analysis failed (funcsize=24)"

#error "2271D53C4: call analysis failed (funcsize=24)"

void specialized handling<A, B, C, D, E, F, G>(_:_:_:_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  OUTLINED_FUNCTION_17_27();
  a29 = v34;
  a30 = v35;
  OUTLINED_FUNCTION_37_14(*MEMORY[0x263EF8340]);
  MEMORY[0x22A676440]();
  OUTLINED_FUNCTION_22_24();
  if (!v30)
  {
LABEL_30:
    OUTLINED_FUNCTION_25_24();
    OUTLINED_FUNCTION_16_30();
    return;
  }
  if (tc_v1_error_message())
  {
    String.init(cString:)();
    OUTLINED_FUNCTION_24_25();
    if (one-time initialization token for table != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_11_33();
    OUTLINED_FUNCTION_2_53();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for column != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for tableMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for columnMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for drop != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for sequence != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for double != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for integer != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for error != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for archive != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for limit != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_15_28();
    a17 = (uint64_t)&a17;
    a18 = v33;
    if (one-time initialization token for sortTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_14_28();
    type metadata accessor for OS_os_log();
    char v36 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v37 = (__n128 *)OUTLINED_FUNCTION_9_8();
    unint64_t v38 = OUTLINED_FUNCTION_23_19(v37, (__n128)xmmword_2272CB370);
    OUTLINED_FUNCTION_20_27(v38);
    OUTLINED_FUNCTION_9_31();

    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v39 = OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_8_32(v39, v40);
    tc_v1_release();
    goto LABEL_30;
  }
  __break(1u);
}

{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  __n128 *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;

  OUTLINED_FUNCTION_17_27();
  a29 = v34;
  a30 = v35;
  OUTLINED_FUNCTION_37_14(*MEMORY[0x263EF8340]);
  MEMORY[0x22A676530]();
  OUTLINED_FUNCTION_22_24();
  if (!v30)
  {
LABEL_30:
    OUTLINED_FUNCTION_25_24();
    OUTLINED_FUNCTION_16_30();
    return;
  }
  if (tc_v1_error_message())
  {
    String.init(cString:)();
    OUTLINED_FUNCTION_24_25();
    if (one-time initialization token for table != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_11_33();
    OUTLINED_FUNCTION_2_53();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for column != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for tableMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for columnMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for drop != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for sequence != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for double != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for integer != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for error != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for archive != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for limit != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_15_28();
    a17 = (uint64_t)&a17;
    a18 = v33;
    if (one-time initialization token for sortTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_14_28();
    type metadata accessor for OS_os_log();
    char v36 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v37 = (__n128 *)OUTLINED_FUNCTION_9_8();
    unint64_t v38 = OUTLINED_FUNCTION_23_19(v37, (__n128)xmmword_2272CB370);
    OUTLINED_FUNCTION_20_27(v38);
    OUTLINED_FUNCTION_9_31();

    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v39 = OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_8_32(v39, v40);
    tc_v1_release();
    goto LABEL_30;
  }
  __break(1u);
}

void specialized handling<A, B, C, D, E, F>(_:_:_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  OUTLINED_FUNCTION_31_13();
  a29 = v33;
  a30 = v34;
  OUTLINED_FUNCTION_30_22(*MEMORY[0x263EF8340]);
  MEMORY[0x22A6764E0]();
  if (!a19)
  {
LABEL_30:
    OUTLINED_FUNCTION_28_18();
    return;
  }
  if (tc_v1_error_message())
  {
    String.init(cString:)();
    OUTLINED_FUNCTION_34_11();
    if (one-time initialization token for table != -1) {
      swift_once();
    }
    unint64_t v35 = OUTLINED_FUNCTION_11_33();
    OUTLINED_FUNCTION_5_43();
    OUTLINED_FUNCTION_12_25();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for column != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_3_53();
    OUTLINED_FUNCTION_13_34();
    a17 = (uint64_t)&a17;
    a18 = v30;
    if (one-time initialization token for tableMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_3_53();
    OUTLINED_FUNCTION_12_25();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for columnMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_3_53();
    OUTLINED_FUNCTION_13_34();
    a17 = (uint64_t)&a17;
    a18 = v30;
    if (one-time initialization token for drop != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_3_53();
    OUTLINED_FUNCTION_12_25();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for sequence != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_3_53();
    OUTLINED_FUNCTION_13_34();
    a17 = (uint64_t)&a17;
    a18 = v30;
    if (one-time initialization token for double != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_3_53();
    OUTLINED_FUNCTION_12_25();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for integer != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_3_53();
    OUTLINED_FUNCTION_13_34();
    a17 = (uint64_t)&a17;
    a18 = v30;
    if (one-time initialization token for error != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_4_48();
    OUTLINED_FUNCTION_12_25();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for archive != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_4_48();
    OUTLINED_FUNCTION_13_34();
    a17 = (uint64_t)&a17;
    a18 = v30;
    if (one-time initialization token for limit != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_4_48();
    OUTLINED_FUNCTION_12_25();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_4_48();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for sortTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_4_48();
    OUTLINED_FUNCTION_26_17();
    type metadata accessor for OS_os_log();
    char v36 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v37 = (__n128 *)OUTLINED_FUNCTION_9_8();
    unint64_t v38 = OUTLINED_FUNCTION_33_15(v37, (__n128)xmmword_2272CB370);
    OUTLINED_FUNCTION_35_14(v38);
    OUTLINED_FUNCTION_21_28();

    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v39 = OUTLINED_FUNCTION_85();
    *uint64_t v40 = v30;
    v40[1] = v35;
    OUTLINED_FUNCTION_8_4(v39, (uint64_t)v40);
    tc_v1_release();
    goto LABEL_30;
  }
  __break(1u);
}

{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  __n128 *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;

  OUTLINED_FUNCTION_17_27();
  a29 = v34;
  a30 = v35;
  a20 = *MEMORY[0x263EF8340];
  a19 = 0;
  MEMORY[0x22A6764A0]();
  OUTLINED_FUNCTION_22_24();
  if (!v30)
  {
LABEL_30:
    OUTLINED_FUNCTION_25_24();
    OUTLINED_FUNCTION_16_30();
    return;
  }
  if (tc_v1_error_message())
  {
    String.init(cString:)();
    OUTLINED_FUNCTION_24_25();
    if (one-time initialization token for table != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_11_33();
    OUTLINED_FUNCTION_2_53();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for column != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for tableMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for columnMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for drop != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for sequence != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for double != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for integer != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for error != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for archive != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for limit != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_15_28();
    a17 = (uint64_t)&a17;
    a18 = v33;
    if (one-time initialization token for sortTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_14_28();
    type metadata accessor for OS_os_log();
    char v36 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v37 = (__n128 *)OUTLINED_FUNCTION_9_8();
    unint64_t v38 = OUTLINED_FUNCTION_23_19(v37, (__n128)xmmword_2272CB370);
    OUTLINED_FUNCTION_20_27(v38);
    OUTLINED_FUNCTION_9_31();

    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v39 = OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_8_32(v39, v40);
    tc_v1_release();
    goto LABEL_30;
  }
  __break(1u);
}

{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  __n128 *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;

  OUTLINED_FUNCTION_17_27();
  a29 = v34;
  a30 = v35;
  a20 = *MEMORY[0x263EF8340];
  a19 = 0;
  MEMORY[0x22A6764D0]();
  OUTLINED_FUNCTION_22_24();
  if (!v30)
  {
LABEL_30:
    OUTLINED_FUNCTION_25_24();
    OUTLINED_FUNCTION_16_30();
    return;
  }
  if (tc_v1_error_message())
  {
    String.init(cString:)();
    OUTLINED_FUNCTION_24_25();
    if (one-time initialization token for table != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_11_33();
    OUTLINED_FUNCTION_2_53();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for column != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for tableMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for columnMap != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for drop != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for sequence != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for double != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for integer != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for error != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for archive != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_7_37();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for limit != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_6_37();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for supportedStackTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_15_28();
    a17 = (uint64_t)&a17;
    a18 = v33;
    if (one-time initialization token for sortTypes != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_1_42();
    OUTLINED_FUNCTION_14_28();
    type metadata accessor for OS_os_log();
    char v36 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v37 = (__n128 *)OUTLINED_FUNCTION_9_8();
    unint64_t v38 = OUTLINED_FUNCTION_23_19(v37, (__n128)xmmword_2272CB370);
    OUTLINED_FUNCTION_20_27(v38);
    OUTLINED_FUNCTION_9_31();

    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v39 = OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_8_32(v39, v40);
    tc_v1_release();
    goto LABEL_30;
  }
  __break(1u);
}

void one-time initialization function for table()
{
  static ErrorString.table = 0x656D61724653;
  unk_268166ED0 = 0xE600000000000000;
  qword_268166ED8 = 0x6C62615461746144;
  unk_268166EE0 = 0xE900000000000065;
}

void one-time initialization function for column()
{
  static ErrorString.column = 0x796172724153;
  unk_268166EF0 = 0xE600000000000000;
  qword_268166EF8 = 0x756C6F4361746144;
  unk_268166F00 = 0xEA00000000006E6DLL;
}

void one-time initialization function for tableMap()
{
  static ErrorString.tableMap = 0x6D617266735F6374;
  unk_268166F10 = 0xEF796C7070615F65;
  qword_268166F18 = 7364973;
  unk_268166F20 = 0xE300000000000000;
}

void one-time initialization function for columnMap()
{
  static ErrorString.columnMap = 0x61727261735F6374;
  unk_268166F30 = 0xEF796C7070615F79;
  qword_268166F38 = 7364973;
  unk_268166F40 = 0xE300000000000000;
}

void one-time initialization function for drop()
{
  static ErrorString.drop = 0x616E706F7264;
  unk_268166F50 = 0xE600000000000000;
  qword_268166F58 = 0x7373694D706F7264;
  unk_268166F60 = 0xEB00000000676E69;
}

void one-time initialization function for sequence()
{
  static ErrorString.sequence = 1953720684;
  unk_268166F70 = 0xE400000000000000;
  strcpy((char *)&qword_268166F78, "SequenceType");
  unk_268166F85 = 0;
  unk_268166F86 = -5120;
}

void one-time initialization function for double()
{
  static ErrorString.double = 0x74616F6C66;
  unk_268166F90 = 0xE500000000000000;
  qword_268166F98 = 0x656C62756F44;
  unk_268166FA0 = 0xE600000000000000;
}

void one-time initialization function for integer()
{
  static ErrorString.integer = 0x656765746E692061;
  unk_268166FB0 = 0xE900000000000072;
  qword_268166FB8 = 0x746E49206E61;
  unk_268166FC0 = 0xE600000000000000;
}

void one-time initialization function for error()
{
  static ErrorString.error = 0x203A726F727245;
  unk_268166FD0 = 0xE700000000000000;
  qword_268166FD8 = 0;
  unk_268166FE0 = 0xE000000000000000;
}

void one-time initialization function for archive()
{
  unk_268166FF7 = -18;
  qword_268166FF8 = 0xD000000000000023;
  unk_268167000 = 0x80000002272D9930;
}

void one-time initialization function for limit()
{
  static ErrorString.limit = 0xD000000000000016;
  unk_268167010 = 0x80000002272D98F0;
  qword_268167018 = 0xD000000000000017;
  unk_268167020 = 0x80000002272D9910;
}

void one-time initialization function for supportedStackTypes()
{
  static ErrorString.supportedStackTypes = 0xD000000000000020;
  unk_268167030 = 0x80000002272D98C0;
  strcpy((char *)&qword_268167038, "type Sequence.");
  unk_268167047 = -18;
}

void one-time initialization function for sortTypes()
{
  static ErrorString.sortTypes = 0xD000000000000034;
  unk_268167050 = 0x80000002272D9860;
  qword_268167058 = 0xD00000000000001FLL;
  unk_268167060 = 0x80000002272D98A0;
}

uint64_t OUTLINED_FUNCTION_0_26()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

uint64_t OUTLINED_FUNCTION_1_42()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

uint64_t OUTLINED_FUNCTION_2_53()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

uint64_t OUTLINED_FUNCTION_3_53()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

uint64_t OUTLINED_FUNCTION_4_48()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

uint64_t OUTLINED_FUNCTION_5_43()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

uint64_t OUTLINED_FUNCTION_6_37()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_7_37()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_8_32(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(unsigned char *)(a2 + 48) = 0;
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_9_31()
{
  return os_log(_:dso:log:type:_:)();
}

unint64_t OUTLINED_FUNCTION_11_33()
{
  return lazy protocol witness table accessor for type String and conformance String();
}

uint64_t OUTLINED_FUNCTION_12_25()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_13_34()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_14_28()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_15_28()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_20_27(uint64_t a1)
{
  v3[8] = a1;
  v3[4] = v2;
  v3[5] = v1;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_21_28()
{
  return os_log(_:dso:log:type:_:)();
}

unint64_t OUTLINED_FUNCTION_23_19(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  a1[3].n128_u64[1] = v2;
  return lazy protocol witness table accessor for type String and conformance String();
}

uint64_t OUTLINED_FUNCTION_25_24()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_26_17()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_27_20(uint64_t result)
{
  v3[8] = result;
  v3[4] = v2;
  v3[5] = v1;
  return result;
}

uint64_t OUTLINED_FUNCTION_29_21()
{
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_30_22(uint64_t a1@<X8>)
{
  *(void *)(v1 - 72) = a1;
}

unint64_t OUTLINED_FUNCTION_33_15(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  a1[3].n128_u64[1] = v2;
  return lazy protocol witness table accessor for type String and conformance String();
}

uint64_t OUTLINED_FUNCTION_35_14(uint64_t a1)
{
  v3[8] = a1;
  v3[4] = v2;
  v3[5] = v1;
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_37_14(uint64_t a1@<X8>)
{
  *(void *)(v1 - 72) = a1;
}

uint64_t OUTLINED_FUNCTION_39_16(uint64_t result)
{
  v3[8] = result;
  v3[4] = v2;
  v3[5] = v1;
  return result;
}

uint64_t OUTLINED_FUNCTION_40_13()
{
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_41_13(uint64_t a1@<X8>)
{
  *(void *)(v1 - 72) = a1;
}

uint64_t type metadata accessor for FeatureVectorizer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for FeatureVectorizer.Transformer()
{
  return __swift_instantiateGenericMetadata();
}

void closure #1 in FeatureVectorizer.fitted(to:)(void *a1@<X0>, void *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v7 = type metadata accessor for AnyColumn();
  MEMORY[0x270FA5388](v7 - 8);
  MEMORY[0x22A672220](*a1, a1[1]);
  ColumnDescriptor.init(_:)();
  if (v3)
  {
    *a2 = v3;
  }
  else
  {
    *(void *)a3 = v8;
    *(void *)(a3 + 8) = v9;
    *(void *)(a3 + 16) = v10;
    *(unsigned char *)(a3 + 24) = v11;
  }
}

uint64_t FeatureVectorizer.Transformer.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000011 && a2 == 0x80000002272D9960
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000002272D9980)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

unint64_t FeatureVectorizer.Transformer.CodingKeys.stringValue.getter(char a1)
{
  if (a1) {
    return 0xD000000000000016;
  }
  else {
    return 0xD000000000000011;
  }
}

uint64_t FeatureVectorizer.Transformer.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  v14[0] = a3;
  type metadata accessor for FeatureVectorizer.Transformer.CodingKeys();
  swift_getWitnessTable();
  uint64_t v6 = type metadata accessor for KeyedEncodingContainer();
  OUTLINED_FUNCTION_0();
  uint64_t v8 = v7;
  MEMORY[0x270FA5388](v9);
  char v11 = (char *)v14 - v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v17 = a2;
  char v16 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ColumnDescriptor]);
  lazy protocol witness table accessor for type [ColumnDescriptor] and conformance <A> [A](&lazy protocol witness table cache variable for type [ColumnDescriptor] and conformance <A> [A], (void (*)(void))lazy protocol witness table accessor for type ColumnDescriptor and conformance ColumnDescriptor);
  uint64_t v12 = v14[2];
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v12)
  {
    char v15 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v6);
}

uint64_t FeatureVectorizer.Transformer.init(from:)(void *a1)
{
  type metadata accessor for FeatureVectorizer.Transformer.CodingKeys();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for KeyedDecodingContainer();
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v4);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ColumnDescriptor]);
    lazy protocol witness table accessor for type [ColumnDescriptor] and conformance <A> [A](&lazy protocol witness table cache variable for type [ColumnDescriptor] and conformance <A> [A], (void (*)(void))lazy protocol witness table accessor for type ColumnDescriptor and conformance ColumnDescriptor);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t WitnessTable = v8;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v6 = OUTLINED_FUNCTION_1_43();
    v7(v6);
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return WitnessTable;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance FeatureVectorizer<A>.Transformer.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static Metadata.CodingKeys.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance FeatureVectorizer<A>.Transformer.CodingKeys()
{
  return Metadata.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance FeatureVectorizer<A>.Transformer.CodingKeys(uint64_t a1)
{
  Metadata.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FeatureVectorizer<A>.Transformer.CodingKeys()
{
  Hasher.init(_seed:)();
  Metadata.CodingKeys.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance FeatureVectorizer<A>.Transformer.CodingKeys()
{
  return FeatureVectorizer.Transformer.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance FeatureVectorizer<A>.Transformer.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = FeatureVectorizer.Transformer.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance FeatureVectorizer<A>.Transformer.CodingKeys()
{
  return Metadata.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance FeatureVectorizer<A>.Transformer.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = Metadata.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FeatureVectorizer<A>.Transformer.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270FA00B0](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FeatureVectorizer<A>.Transformer.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270FA00B8](a1, WitnessTable);
}

uint64_t protocol witness for Decodable.init(from:) in conformance FeatureVectorizer<A>.Transformer@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = FeatureVectorizer.Transformer.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FeatureVectorizer<A>.Transformer(void *a1)
{
  return FeatureVectorizer.Transformer.encode(to:)(a1, *v1, v1[1], v1[2]);
}

uint64_t type metadata accessor for FeatureVectorizer.Transformer.CodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type ColumnDescriptor and conformance ColumnDescriptor()
{
  unint64_t result = lazy protocol witness table cache variable for type ColumnDescriptor and conformance ColumnDescriptor;
  if (!lazy protocol witness table cache variable for type ColumnDescriptor and conformance ColumnDescriptor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColumnDescriptor and conformance ColumnDescriptor);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ColumnDescriptor and conformance ColumnDescriptor;
  if (!lazy protocol witness table cache variable for type ColumnDescriptor and conformance ColumnDescriptor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColumnDescriptor and conformance ColumnDescriptor);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [ColumnDescriptor] and conformance <A> [A](unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [ColumnDescriptor]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata instantiation function for FeatureVectorizer.Transformer.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 16);
}

unsigned char *storeEnumTagSinglePayload for FeatureVectorizer.Transformer.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2271D8188);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t base witness table accessor for Equatable in FeatureVectorizer<A>.Transformer.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in FeatureVectorizer<A>.Transformer.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in FeatureVectorizer<A>.Transformer.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t OUTLINED_FUNCTION_1_43()
{
  return v0;
}

void CMLDictionary.add(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v98 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v7 = MEMORY[0x270FA5388](v6 - 8);
  uint64_t v9 = (char *)&v98 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  char v11 = (char *)&v98 - v10;
  uint64_t v12 = type metadata accessor for _Model.Parameters();
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (uint64_t *)((char *)&v98 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of _Model.Parameters(a1, (uint64_t)v14);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch((int)EnumCaseMultiPayload)
  {
    case 1:
      specialized handling<A, B>(_:_:)(*v14, v16, v17, v18, v19, v20, v21, v22, v98, v99, v100, v101, v102, v103, v104, v105, v106, v107, v108,
        v109,
        v110,
        v111,
        v112,
        v113,
        v114,
        v115,
        v116,
        v117,
        v118,
        v119);
      OUTLINED_FUNCTION_3_54();
      if (!v69) {
        goto LABEL_61;
      }
      type metadata accessor for CMLFeatureValue();
      swift_initStackObject();
      OUTLINED_FUNCTION_4_28();
      OUTLINED_FUNCTION_2_54(0x69735F6863746162, 0xEA0000000000657ALL);
      break;
    case 2:
      OUTLINED_FUNCTION_7_38();
      OUTLINED_FUNCTION_29_21();
      OUTLINED_FUNCTION_4_49();
      OUTLINED_FUNCTION_5_44();
      OUTLINED_FUNCTION_6_38(0x6972616C696D6973, 0xEF657079745F7974);
      break;
    case 3:
      uint64_t v47 = v14[1];
      uint64_t v46 = v14[2];
      specialized handling<A, B>(_:_:)(EnumCaseMultiPayload, v16, v17, v18, v19, v20, v21, v22, v98, v99, v100, v101, v102, v103, v104, v105, v106, v107, v108,
        v109,
        v110,
        v111,
        v112,
        v113,
        v114,
        v115,
        v116,
        v117,
        v118,
        v119);
      OUTLINED_FUNCTION_3_54();
      if (!v48) {
        goto LABEL_57;
      }
      type metadata accessor for CMLFeatureValue();
      swift_initStackObject();
      uint64_t v49 = OUTLINED_FUNCTION_4_28();
      CMLDictionary.add(key:value:)(0x6C6F687365726874, 0xE900000000000064, v49);
      swift_release();
      specialized handling<A, B>(_:_:)(v47, v50, v51, v52, v53, v54, v55, v56, v98, v99, v100, v101, v102, v103, v104, v105, v106, v107, v108,
        v109,
        v110,
        v111,
        v112,
        v113,
        v114,
        v115,
        v116,
        v117,
        v118,
        v119);
      if (!v57) {
        goto LABEL_58;
      }
      swift_initStackObject();
      uint64_t v58 = OUTLINED_FUNCTION_4_28();
      OUTLINED_FUNCTION_94();
      CMLDictionary.add(key:value:)(v59 | 8, 0x80000002272D9B00, v58);
      swift_release();
      specialized handling<A, B>(_:_:)(v46, v60, v61, v62, v63, v64, v65, v66, v98, v99, v100, v101, v102, v103, v104, v105, v106, v107, v108,
        v109,
        v110,
        v111,
        v112,
        v113,
        v114,
        v115,
        v116,
        v117,
        v118,
        v119);
      if (!v67) {
        goto LABEL_59;
      }
      swift_initStackObject();
      OUTLINED_FUNCTION_4_28();
      OUTLINED_FUNCTION_2_54(0x617461645F78616DLL, 0xEF7365737361705FLL);
      break;
    case 4:
      uint64_t v43 = (void *)*v14;
      if (*v14)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        type metadata accessor for CMLFeatureValue();
        swift_bridgeObjectRetain();
        uint64_t v44 = CMLFeatureValue.__allocating_init(_:)();
        swift_bridgeObjectRelease();
        CMLDictionary.add(key:value:)(0x65676175676E616CLL, 0xE800000000000000, v44);
        swift_release();
      }
      return;
    case 5:
      OUTLINED_FUNCTION_7_38();
      OUTLINED_FUNCTION_29_21();
      OUTLINED_FUNCTION_4_49();
      OUTLINED_FUNCTION_5_44();
      OUTLINED_FUNCTION_6_38(0x687469726F676C61, 0xE90000000000006DLL);
      break;
    case 6:
      uint64_t v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, custom: URL?));
      outlined init with take of URL?((uint64_t)v14 + *(int *)(v85 + 48), (uint64_t)v11);
      uint64_t v86 = type metadata accessor for CMLFeatureValue();
      swift_bridgeObjectRetain();
      uint64_t v99 = v86;
      uint64_t v87 = CMLFeatureValue.__allocating_init(_:)();
      swift_bridgeObjectRelease();
      CMLDictionary.add(key:value:)(0x6E69646465626D65, 0xE900000000000067, v87);
      swift_release();
      outlined init with copy of URL?((uint64_t)v11, (uint64_t)v9);
      if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v2) == 1)
      {
        outlined destroy of URL?((uint64_t)v11);
        uint64_t v88 = (uint64_t)v9;
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v9, v2);
        URL.path.getter();
        swift_bridgeObjectRetain();
        uint64_t v97 = CMLFeatureValue.__allocating_init(_:)();
        swift_bridgeObjectRelease();
        CMLDictionary.add(key:value:)(0xD000000000000012, 0x80000002272D9AE0, v97);
        swift_release();
        (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
        uint64_t v88 = (uint64_t)v11;
      }
      outlined destroy of URL?(v88);
      return;
    case 7:
      specialized handling<A, B>(_:_:)(*v14, v16, v17, v18, v19, v20, v21, v22, v98, v99, v100, v101, v102, v103, v104, v105, v106, v107, v108,
        v109,
        v110,
        v111,
        v112,
        v113,
        v114,
        v115,
        v116,
        v117,
        v118,
        v119);
      OUTLINED_FUNCTION_3_54();
      if (!v68) {
        goto LABEL_60;
      }
      type metadata accessor for CMLFeatureValue();
      swift_initStackObject();
      OUTLINED_FUNCTION_4_28();
      OUTLINED_FUNCTION_2_54(0xD000000000000012, 0x80000002272D9AC0);
      break;
    case 8:
      specialized handling<A, B>(_:_:)(*v14, v16, v17, v18, v19, v20, v21, v22, v98, v99, v100, v101, v102, v103, v104, v105, v106, v107, v108,
        v109,
        v110,
        v111,
        v112,
        v113,
        v114,
        v115,
        v116,
        v117,
        v118,
        v119);
      OUTLINED_FUNCTION_3_54();
      if (!v92) {
        goto LABEL_68;
      }
      type metadata accessor for CMLFeatureValue();
      swift_initStackObject();
      OUTLINED_FUNCTION_4_28();
      OUTLINED_FUNCTION_2_54(0xD000000000000011, 0x80000002272D9AA0);
      break;
    case 9:
      OUTLINED_FUNCTION_7_38();
      OUTLINED_FUNCTION_29_21();
      OUTLINED_FUNCTION_4_49();
      OUTLINED_FUNCTION_5_44();
      OUTLINED_FUNCTION_6_38(0x705F656369766564, 0xED00007963696C6FLL);
      break;
    case 10:
      OUTLINED_FUNCTION_7_38();
      OUTLINED_FUNCTION_29_21();
      OUTLINED_FUNCTION_4_49();
      OUTLINED_FUNCTION_5_44();
      OUTLINED_FUNCTION_94();
      OUTLINED_FUNCTION_6_38(v91 - 2, 0x80000002272D9A80);
      break;
    case 11:
      OUTLINED_FUNCTION_7_38();
      OUTLINED_FUNCTION_29_21();
      OUTLINED_FUNCTION_4_49();
      OUTLINED_FUNCTION_5_44();
      OUTLINED_FUNCTION_6_38(0xD000000000000011, 0x80000002272D9A60);
      break;
    case 12:
      OUTLINED_FUNCTION_7_38();
      OUTLINED_FUNCTION_29_21();
      OUTLINED_FUNCTION_4_49();
      OUTLINED_FUNCTION_5_44();
      OUTLINED_FUNCTION_94();
      OUTLINED_FUNCTION_6_38(v45 | 1, 0x80000002272D9A40);
      break;
    case 13:
      uint64_t v74 = v14[1];
      specialized handling<A, B>(_:_:)(*v14, v16, v17, v18, v19, v20, v21, v22, v98, v99, v100, v101, v102, v103, v104, v105, v106, v107, v108,
        v109,
        v110,
        v111,
        v112,
        v113,
        v114,
        v115,
        v116,
        v117,
        v118,
        v119);
      OUTLINED_FUNCTION_3_54();
      if (!v75) {
        goto LABEL_65;
      }
      type metadata accessor for CMLFeatureValue();
      swift_initStackObject();
      uint64_t v76 = OUTLINED_FUNCTION_4_28();
      CMLDictionary.add(key:value:)(0x6469775F64697267, 0xEA00000000006874, v76);
      swift_release();
      specialized handling<A, B>(_:_:)(v74, v77, v78, v79, v80, v81, v82, v83, v98, v99, v100, v101, v102, v103, v104, v105, v106, v107, v108,
        v109,
        v110,
        v111,
        v112,
        v113,
        v114,
        v115,
        v116,
        v117,
        v118,
        v119);
      if (!v84) {
        goto LABEL_66;
      }
      swift_initStackObject();
      OUTLINED_FUNCTION_4_28();
      OUTLINED_FUNCTION_2_54(0x6965685F64697267, 0xEB00000000746867);
      break;
    case 14:
      OUTLINED_FUNCTION_7_38();
      OUTLINED_FUNCTION_29_21();
      OUTLINED_FUNCTION_4_49();
      OUTLINED_FUNCTION_5_44();
      OUTLINED_FUNCTION_6_38(0x6C65646F6DLL, 0xE500000000000000);
      break;
    case 15:
      OUTLINED_FUNCTION_7_38();
      OUTLINED_FUNCTION_29_21();
      OUTLINED_FUNCTION_4_49();
      OUTLINED_FUNCTION_5_44();
      OUTLINED_FUNCTION_6_38(0x6966697373616C63, 0xEA00000000007265);
      break;
    case 16:
      uint64_t v24 = *v14;
      uint64_t v25 = MEMORY[0x22A676370](0);
      if (!v25) {
        goto LABEL_55;
      }
      uint64_t v26 = v25;
      type metadata accessor for CMLSequence();
      uint64_t inited = swift_initStackObject();
      *(void *)(inited + 16) = v26;
      *(unsigned char *)(inited + 24) = 1;
      uint64_t v28 = *(void *)(v24 + 16);
      if (!v28) {
        goto LABEL_10;
      }
      swift_bridgeObjectRetain();
      uint64_t v29 = 0;
      uint64_t v30 = MEMORY[0x263F8D6C8];
      do
      {
        uint64_t v31 = *(void *)(v24 + 8 * v29 + 32);
        v120[3] = v30;
        v120[4] = &protocol witness table for Int;
        v120[0] = v31;
        uint64_t v32 = __swift_project_boxed_opaque_existential_1(v120, v30);
        specialized handling<A, B>(_:_:)(*v32, v33, v34, v35, v36, v37, v38, v39, v98, v99, v100, v101, v102, v103, v104, v105, v106, v107, v108,
          v109,
          v110,
          v111,
          v112,
          v113,
          v114,
          v115,
          v116,
          v117,
          v118,
          v119);
        if (!v40)
        {
          __break(1u);
LABEL_55:
          __break(1u);
LABEL_56:
          __break(1u);
LABEL_57:
          __break(1u);
LABEL_58:
          __break(1u);
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          __break(1u);
LABEL_62:
          __break(1u);
LABEL_63:
          __break(1u);
LABEL_64:
          __break(1u);
LABEL_65:
          __break(1u);
LABEL_66:
          __break(1u);
LABEL_67:
          __break(1u);
LABEL_68:
          __break(1u);
LABEL_69:
          __break(1u);
LABEL_70:
          __break(1u);
LABEL_71:
          __break(1u);
          OUTLINED_FUNCTION_71_3();
          while (1)
          {
            swift_unexpectedError();
            __break(1u);
            OUTLINED_FUNCTION_71_3();
          }
        }
        type metadata accessor for CMLFeatureValue();
        swift_initStackObject();
        uint64_t v41 = OUTLINED_FUNCTION_4_28();
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v120);
        CMLSequence.append(_:)(v41);
        ++v29;
        swift_release();
      }
      while (v28 != v29);
      swift_bridgeObjectRelease();
LABEL_10:
      type metadata accessor for CMLFeatureValue();
      uint64_t v42 = CMLFeatureValue.__allocating_init(_:)(inited);
      swift_bridgeObjectRelease();
      CMLDictionary.add(key:value:)(0x69735F726579616CLL, 0xEB0000000073657ALL, v42);
      break;
    case 17:
      specialized handling<A, B>(_:_:)(*v14, v16, v17, v18, v19, v20, v21, v22, v98, v99, v100, v101, v102, v103, v104, v105, v106, v107, v108,
        v109,
        v110,
        v111,
        v112,
        v113,
        v114,
        v115,
        v116,
        v117,
        v118,
        v119);
      OUTLINED_FUNCTION_3_54();
      if (!v70) {
        goto LABEL_62;
      }
      type metadata accessor for CMLFeatureValue();
      swift_initStackObject();
      OUTLINED_FUNCTION_4_28();
      OUTLINED_FUNCTION_94();
      OUTLINED_FUNCTION_2_54(v71 + 6, 0x80000002272D9A20);
      break;
    case 18:
      specialized handling<A, B>(_:_:)(*v14, v16, v17, v18, v19, v20, v21, v22, v98, v99, v100, v101, v102, v103, v104, v105, v106, v107, v108,
        v109,
        v110,
        v111,
        v112,
        v113,
        v114,
        v115,
        v116,
        v117,
        v118,
        v119);
      OUTLINED_FUNCTION_3_54();
      if (!v89) {
        goto LABEL_67;
      }
      type metadata accessor for CMLFeatureValue();
      swift_initStackObject();
      OUTLINED_FUNCTION_4_28();
      unint64_t v90 = OUTLINED_FUNCTION_11_34();
      OUTLINED_FUNCTION_2_54(v90, 0x80000002272D9A00);
      break;
    case 19:
      specialized handling<A, B>(_:_:)(*v14, v16, v17, v18, v19, v20, v21, v22, v98, v99, v100, v101, v102, v103, v104, v105, v106, v107, v108,
        v109,
        v110,
        v111,
        v112,
        v113,
        v114,
        v115,
        v116,
        v117,
        v118,
        v119);
      OUTLINED_FUNCTION_3_54();
      if (!v94) {
        goto LABEL_70;
      }
      type metadata accessor for CMLFeatureValue();
      swift_initStackObject();
      OUTLINED_FUNCTION_4_28();
      unint64_t v95 = OUTLINED_FUNCTION_11_34();
      OUTLINED_FUNCTION_2_54(v95, 0x80000002272D99E0);
      break;
    case 20:
      specialized handling<A, B>(_:_:)(*v14, v16, v17, v18, v19, v20, v21, v22, v98, v99, v100, v101, v102, v103, v104, v105, v106, v107, v108,
        v109,
        v110,
        v111,
        v112,
        v113,
        v114,
        v115,
        v116,
        v117,
        v118,
        v119);
      OUTLINED_FUNCTION_3_54();
      if (!v72) {
        goto LABEL_63;
      }
      type metadata accessor for CMLFeatureValue();
      swift_initStackObject();
      OUTLINED_FUNCTION_4_28();
      OUTLINED_FUNCTION_2_54(0xD000000000000012, 0x80000002272D99C0);
      break;
    case 21:
      specialized handling<A, B>(_:_:)(*v14, v16, v17, v18, v19, v20, v21, v22, v98, v99, v100, v101, v102, v103, v104, v105, v106, v107, v108,
        v109,
        v110,
        v111,
        v112,
        v113,
        v114,
        v115,
        v116,
        v117,
        v118,
        v119);
      OUTLINED_FUNCTION_3_54();
      if (!v73) {
        goto LABEL_64;
      }
      type metadata accessor for CMLFeatureValue();
      swift_initStackObject();
      OUTLINED_FUNCTION_4_28();
      OUTLINED_FUNCTION_2_54(0x645F6C6574786574, 0xEE00797469736E65);
      break;
    case 22:
      specialized handling<A, B>(_:_:)(*v14, v16, v17, v18, v19, v20, v21, v22, v98, v99, v100, v101, v102, v103, v104, v105, v106, v107, v108,
        v109,
        v110,
        v111,
        v112,
        v113,
        v114,
        v115,
        v116,
        v117,
        v118,
        v119);
      OUTLINED_FUNCTION_3_54();
      if (!v93) {
        goto LABEL_69;
      }
      type metadata accessor for CMLFeatureValue();
      swift_initStackObject();
      OUTLINED_FUNCTION_4_28();
      OUTLINED_FUNCTION_2_54(0x74735F656C797473, 0xEE006874676E6572);
      break;
    case 23:
      specialized handling<A, B>(_:_:)(*v14, v16, v17, v18, v19, v20, v21, v22, v98, v99, v100, v101, v102, v103, v104, v105, v106, v107, v108,
        v109,
        v110,
        v111,
        v112,
        v113,
        v114,
        v115,
        v116,
        v117,
        v118,
        v119);
      OUTLINED_FUNCTION_3_54();
      if (!v96) {
        goto LABEL_71;
      }
      type metadata accessor for CMLFeatureValue();
      swift_initStackObject();
      OUTLINED_FUNCTION_4_28();
      OUTLINED_FUNCTION_2_54(0x6D6172665F6D756ELL, 0xEA00000000007365);
      break;
    default:
      specialized handling<A, B>(_:_:)(*v14, v16, v17, v18, v19, v20, v21, v22, v98, v99, v100, v101, v102, v103, v104, v105, v106, v107, v108,
        v109,
        v110,
        v111,
        v112,
        v113,
        v114,
        v115,
        v116,
        v117,
        v118,
        v119);
      OUTLINED_FUNCTION_3_54();
      if (!v23) {
        goto LABEL_56;
      }
      type metadata accessor for CMLFeatureValue();
      swift_initStackObject();
      OUTLINED_FUNCTION_4_28();
      OUTLINED_FUNCTION_2_54(0x726574695F78616DLL, 0xEE00736E6F697461);
      break;
  }
  swift_release();
}

uint64_t type metadata accessor for _Model.Parameters()
{
  uint64_t result = type metadata singleton initialization cache for _Model.Parameters;
  if (!type metadata singleton initialization cache for _Model.Parameters) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined init with copy of _Model.Parameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for _Model.Parameters();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

char *initializeBufferWithCopyOfBuffer for _Model.Parameters(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *(void *)a1 = *a2;
    a1 = &v8[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
      case 5u:
      case 9u:
      case 0xAu:
      case 0xBu:
      case 0xCu:
      case 0xEu:
      case 0xFu:
        uint64_t v7 = a2[1];
        *(void *)a1 = *a2;
        *((void *)a1 + 1) = v7;
        swift_bridgeObjectRetain();
        goto LABEL_11;
      case 4u:
        uint64_t v9 = *a2;
        *(void *)a1 = *a2;
        uint64_t v10 = v9;
        goto LABEL_11;
      case 6u:
        char v11 = a2[1];
        *(void *)a1 = *a2;
        *((void *)a1 + 1) = v11;
        swift_bridgeObjectRetain();
        uint64_t v12 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, custom: URL?))
                     + 48);
        uint64_t v13 = &a1[v12];
        uint64_t v14 = (char *)a2 + v12;
        uint64_t v15 = type metadata accessor for URL();
        if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v15))
        {
          uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v13, v14, *(void *)(*(void *)(v16 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
          __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v15);
        }
        goto LABEL_11;
      case 0x10u:
        *(void *)a1 = *a2;
        swift_bridgeObjectRetain();
LABEL_11:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

void destroy for _Model.Parameters(void **a1)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 2u:
    case 5u:
    case 9u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
      swift_bridgeObjectRelease();
      break;
    case 4u:
      uint64_t v2 = *a1;

      break;
    case 6u:
      swift_bridgeObjectRelease();
      uint64_t v3 = (uint64_t)a1
         + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, custom: URL?))
                  + 48);
      uint64_t v4 = type metadata accessor for URL();
      if (!__swift_getEnumTagSinglePayload(v3, 1, v4))
      {
        int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
        v5(v3, v4);
      }
      break;
    default:
      return;
  }
}

void *initializeWithCopy for _Model.Parameters(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 2u:
    case 5u:
    case 9u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0xEu:
    case 0xFu:
      uint64_t v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      swift_bridgeObjectRetain();
      goto LABEL_9;
    case 4u:
      uint64_t v7 = (void *)*a2;
      *a1 = *a2;
      id v8 = v7;
      goto LABEL_9;
    case 6u:
      uint64_t v9 = a2[1];
      *a1 = *a2;
      a1[1] = v9;
      swift_bridgeObjectRetain();
      uint64_t v10 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, custom: URL?))
                   + 48);
      char v11 = (char *)a1 + v10;
      uint64_t v12 = (char *)a2 + v10;
      uint64_t v13 = type metadata accessor for URL();
      if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13))
      {
        uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v11, v12, *(void *)(*(void *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
        __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v13);
      }
      goto LABEL_9;
    case 0x10u:
      *a1 = *a2;
      swift_bridgeObjectRetain();
LABEL_9:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void *assignWithCopy for _Model.Parameters(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of _Model.Parameters((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
      case 5u:
      case 9u:
      case 0xAu:
      case 0xBu:
      case 0xCu:
      case 0xEu:
      case 0xFu:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        goto LABEL_10;
      case 4u:
        uint64_t v6 = (void *)*a2;
        *a1 = *a2;
        id v7 = v6;
        goto LABEL_10;
      case 6u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        uint64_t v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, custom: URL?))
                    + 48);
        uint64_t v9 = (char *)a1 + v8;
        uint64_t v10 = (char *)a2 + v8;
        uint64_t v11 = type metadata accessor for URL();
        if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
        {
          uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
          __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
        }
        goto LABEL_10;
      case 0x10u:
        *a1 = *a2;
        swift_bridgeObjectRetain();
LABEL_10:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t outlined destroy of _Model.Parameters(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for _Model.Parameters();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_OWORD *initializeWithTake for _Model.Parameters(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 6)
  {
    *a1 = *a2;
    uint64_t v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, custom: URL?))
                + 48);
    id v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for URL();
    if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9))
    {
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
      __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

_OWORD *assignWithTake for _Model.Parameters(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of _Model.Parameters((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 6)
    {
      *a1 = *a2;
      uint64_t v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, custom: URL?))
                  + 48);
      id v7 = (char *)a1 + v6;
      uint64_t v8 = (char *)a2 + v6;
      uint64_t v9 = type metadata accessor for URL();
      if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9))
      {
        uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
        __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

void type metadata completion function for _Model.Parameters()
{
  uint64_t v0 = MEMORY[0x263F8CF70] + 64;
  v2[4] = MEMORY[0x263F8CF70] + 64;
  v2[5] = MEMORY[0x263F8CF70] + 64;
  v2[6] = &unk_2272D1768;
  v2[7] = &unk_2272D1780;
  v2[8] = &unk_2272D1798;
  v2[9] = &unk_2272D1768;
  type metadata accessor for URL?();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v2[10] = v2;
    v2[11] = v0;
    v2[12] = v0;
    v2[13] = &unk_2272D1768;
    v2[14] = &unk_2272D1768;
    v2[15] = &unk_2272D1768;
    v2[16] = &unk_2272D1768;
    v2[17] = &unk_2272D17B0;
    v2[18] = &unk_2272D1768;
    v2[19] = &unk_2272D1768;
    v2[20] = MEMORY[0x263F8CF50] + 64;
    v2[21] = v0;
    v2[22] = v0;
    v2[23] = v0;
    v2[24] = v0;
    v2[25] = v0;
    v2[26] = v0;
    v2[27] = v0;
    swift_initEnumMetadataMultiPayload();
  }
}

uint64_t OUTLINED_FUNCTION_0_27()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_2_54(uint64_t a1, uint64_t a2)
{
  return CMLDictionary.add(key:value:)(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_4_49()
{
  return CMLFeatureValue.__allocating_init(_:)();
}

uint64_t OUTLINED_FUNCTION_5_44()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_6_38(uint64_t a1, uint64_t a2)
{
  return CMLDictionary.add(key:value:)(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_7_38()
{
  return type metadata accessor for CMLFeatureValue();
}

unint64_t OUTLINED_FUNCTION_11_34()
{
  return 0xD000000000000014;
}

char *initializeBufferWithCopyOfBuffer for MLSoundClassifier.ModelParameters.ValidationData(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *(void *)a1 = *a2;
    a1 = &v9[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(void *)a1 = *a2;
      swift_bridgeObjectRetain();
LABEL_13:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    if (EnumCaseMultiPayload == 1)
    {
      type metadata accessor for MLSoundClassifier.DataSource();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 2u:
          *(void *)a1 = *a2;
          swift_bridgeObjectRetain();
          break;
        case 3u:
          uint64_t v10 = *a2;
          char v11 = *((unsigned char *)a2 + 8);
          outlined copy of Result<_DataTable, Error>(*a2, v11);
          *(void *)a1 = v10;
          a1[8] = v11;
          uint64_t v12 = a2[3];
          *((void *)a1 + 2) = a2[2];
          *((void *)a1 + 3) = v12;
          uint64_t v13 = a2[5];
          *((void *)a1 + 4) = a2[4];
          *((void *)a1 + 5) = v13;
          long long v14 = *((_OWORD *)a2 + 4);
          *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
          *((_OWORD *)a1 + 4) = v14;
          a1[80] = *((unsigned char *)a2 + 80);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          break;
        case 4u:
          uint64_t v15 = type metadata accessor for DataFrame();
          (*(void (**)(char *, char **, uint64_t))(*(void *)(v15 - 8) + 16))(a1, a2, v15);
          uint64_t v16 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
          uint64_t v17 = v16[12];
          uint64_t v18 = &a1[v17];
          uint64_t v19 = (uint64_t *)((char *)a2 + v17);
          uint64_t v21 = *v19;
          uint64_t v20 = v19[1];
          *(void *)uint64_t v18 = v21;
          *((void *)v18 + 1) = v20;
          uint64_t v22 = v16[16];
          uint64_t v23 = &a1[v22];
          uint64_t v24 = (char **)((char *)a2 + v22);
          uint64_t v25 = v24[1];
          *(void *)uint64_t v23 = *v24;
          *((void *)v23 + 1) = v25;
          uint64_t v26 = v16[20];
          uint64_t v27 = &a1[v26];
          uint64_t v28 = (uint64_t)a2 + v26;
          long long v29 = *(_OWORD *)(v28 + 16);
          *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
          *((_OWORD *)v27 + 1) = v29;
          v27[32] = *(unsigned char *)(v28 + 32);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          break;
        default:
          uint64_t v8 = type metadata accessor for URL();
          (*(void (**)(char *, char **, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
          break;
      }
      swift_storeEnumTagMultiPayload();
      goto LABEL_13;
    }
    memcpy(a1, a2, *(void *)(v6 + 64));
  }
  return a1;
}

uint64_t destroy for MLSoundClassifier.ModelParameters.ValidationData(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
LABEL_8:
    return swift_bridgeObjectRelease();
  }
  else if (result == 1)
  {
    type metadata accessor for MLSoundClassifier.DataSource();
    uint64_t result = swift_getEnumCaseMultiPayload();
    switch((int)result)
    {
      case 0:
      case 1:
        uint64_t v3 = type metadata accessor for URL();
        uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
        uint64_t result = v4(a1, v3);
        break;
      case 2:
        goto LABEL_8;
      case 3:
        outlined consume of Result<_DataTable, Error>(*(id *)a1, *(unsigned char *)(a1 + 8));
        swift_bridgeObjectRelease();
        goto LABEL_8;
      case 4:
        uint64_t v5 = type metadata accessor for DataFrame();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
        swift_bridgeObjectRelease();
        goto LABEL_8;
      default:
        return result;
    }
  }
  return result;
}

char *initializeWithCopy for MLSoundClassifier.ModelParameters.ValidationData(char *a1, uint64_t *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *(void *)a1 = *a2;
    swift_bridgeObjectRetain();
LABEL_11:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  if (EnumCaseMultiPayload == 1)
  {
    type metadata accessor for MLSoundClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        *(void *)a1 = *a2;
        swift_bridgeObjectRetain();
        break;
      case 3u:
        uint64_t v8 = *a2;
        char v9 = *((unsigned char *)a2 + 8);
        outlined copy of Result<_DataTable, Error>((id)*a2, v9);
        *(void *)a1 = v8;
        a1[8] = v9;
        uint64_t v10 = a2[3];
        *((void *)a1 + 2) = a2[2];
        *((void *)a1 + 3) = v10;
        uint64_t v11 = a2[5];
        *((void *)a1 + 4) = a2[4];
        *((void *)a1 + 5) = v11;
        long long v12 = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 4) = v12;
        a1[80] = *((unsigned char *)a2 + 80);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 4u:
        uint64_t v13 = type metadata accessor for DataFrame();
        (*(void (**)(char *, uint64_t *, uint64_t))(*(void *)(v13 - 8) + 16))(a1, a2, v13);
        long long v14 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
        uint64_t v15 = v14[12];
        uint64_t v16 = &a1[v15];
        uint64_t v17 = (uint64_t *)((char *)a2 + v15);
        uint64_t v19 = *v17;
        uint64_t v18 = v17[1];
        *(void *)uint64_t v16 = v19;
        *((void *)v16 + 1) = v18;
        uint64_t v20 = v14[16];
        uint64_t v21 = &a1[v20];
        uint64_t v22 = (uint64_t *)((char *)a2 + v20);
        uint64_t v23 = v22[1];
        *(void *)uint64_t v21 = *v22;
        *((void *)v21 + 1) = v23;
        uint64_t v24 = v14[20];
        uint64_t v25 = &a1[v24];
        uint64_t v26 = (uint64_t)a2 + v24;
        long long v27 = *(_OWORD *)(v26 + 16);
        *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
        *((_OWORD *)v25 + 1) = v27;
        v25[32] = *(unsigned char *)(v26 + 32);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v7 = type metadata accessor for URL();
        (*(void (**)(char *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
        break;
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_11;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

char *assignWithCopy for MLSoundClassifier.ModelParameters.ValidationData(char *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 != (char *)a2)
  {
    outlined destroy of MLSoundClassifier.ModelParameters.ValidationData((uint64_t)a1, (void (*)(void))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(void *)a1 = *a2;
      swift_bridgeObjectRetain();
LABEL_12:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    if (EnumCaseMultiPayload == 1)
    {
      type metadata accessor for MLSoundClassifier.DataSource();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 2u:
          *(void *)a1 = *a2;
          swift_bridgeObjectRetain();
          break;
        case 3u:
          uint64_t v8 = *a2;
          char v9 = *((unsigned char *)a2 + 8);
          outlined copy of Result<_DataTable, Error>((id)*a2, v9);
          *(void *)a1 = v8;
          a1[8] = v9;
          *((void *)a1 + 2) = a2[2];
          *((void *)a1 + 3) = a2[3];
          *((void *)a1 + 4) = a2[4];
          *((void *)a1 + 5) = a2[5];
          long long v10 = *((_OWORD *)a2 + 3);
          long long v11 = *((_OWORD *)a2 + 4);
          a1[80] = *((unsigned char *)a2 + 80);
          *((_OWORD *)a1 + 3) = v10;
          *((_OWORD *)a1 + 4) = v11;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          break;
        case 4u:
          uint64_t v12 = type metadata accessor for DataFrame();
          (*(void (**)(char *, uint64_t *, uint64_t))(*(void *)(v12 - 8) + 16))(a1, a2, v12);
          uint64_t v13 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
          uint64_t v14 = v13[12];
          uint64_t v15 = &a1[v14];
          uint64_t v16 = (uint64_t *)((char *)a2 + v14);
          *(void *)uint64_t v15 = *v16;
          *((void *)v15 + 1) = v16[1];
          uint64_t v17 = v13[16];
          uint64_t v18 = &a1[v17];
          uint64_t v19 = (uint64_t *)((char *)a2 + v17);
          *(void *)uint64_t v18 = *v19;
          *((void *)v18 + 1) = v19[1];
          uint64_t v20 = v13[20];
          uint64_t v21 = &a1[v20];
          uint64_t v22 = (uint64_t)a2 + v20;
          char v23 = *(unsigned char *)(v22 + 32);
          long long v24 = *(_OWORD *)(v22 + 16);
          *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
          *((_OWORD *)v21 + 1) = v24;
          v21[32] = v23;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          break;
        default:
          uint64_t v7 = type metadata accessor for URL();
          (*(void (**)(char *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
          break;
      }
      swift_storeEnumTagMultiPayload();
      goto LABEL_12;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData()
{
  uint64_t result = type metadata singleton initialization cache for MLSoundClassifier.ModelParameters.ValidationData;
  if (!type metadata singleton initialization cache for MLSoundClassifier.ModelParameters.ValidationData) {
    return swift_getSingletonMetadata();
  }
  return result;
}

char *initializeWithTake for MLSoundClassifier.ModelParameters.ValidationData(char *a1, char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for MLSoundClassifier.DataSource();
    unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 4)
    {
      uint64_t v8 = type metadata accessor for DataFrame();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
      char v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
      *(_OWORD *)&a1[v9[12]] = *(_OWORD *)&a2[v9[12]];
      *(_OWORD *)&a1[v9[16]] = *(_OWORD *)&a2[v9[16]];
      uint64_t v10 = v9[20];
      long long v11 = &a1[v10];
      uint64_t v12 = &a2[v10];
      long long v13 = *((_OWORD *)v12 + 1);
      *(_OWORD *)long long v11 = *(_OWORD *)v12;
      *((_OWORD *)v11 + 1) = v13;
      v11[32] = v12[32];
    }
    else
    {
      if (EnumCaseMultiPayload > 1)
      {
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
        goto LABEL_9;
      }
      uint64_t v14 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(a1, a2, v14);
    }
    swift_storeEnumTagMultiPayload();
LABEL_9:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

char *assignWithTake for MLSoundClassifier.ModelParameters.ValidationData(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of MLSoundClassifier.ModelParameters.ValidationData((uint64_t)a1, (void (*)(void))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for MLSoundClassifier.DataSource();
      unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 4)
      {
        uint64_t v8 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
        char v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
        *(_OWORD *)&a1[v9[12]] = *(_OWORD *)&a2[v9[12]];
        *(_OWORD *)&a1[v9[16]] = *(_OWORD *)&a2[v9[16]];
        uint64_t v10 = v9[20];
        long long v11 = &a1[v10];
        uint64_t v12 = &a2[v10];
        long long v13 = *((_OWORD *)v12 + 1);
        *(_OWORD *)long long v11 = *(_OWORD *)v12;
        *((_OWORD *)v11 + 1) = v13;
        v11[32] = v12[32];
      }
      else
      {
        if (EnumCaseMultiPayload > 1)
        {
          memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
          goto LABEL_10;
        }
        uint64_t v14 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(a1, a2, v14);
      }
      swift_storeEnumTagMultiPayload();
LABEL_10:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t type metadata completion function for MLSoundClassifier.ModelParameters.ValidationData()
{
  uint64_t result = type metadata accessor for MLSoundClassifier.DataSource();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

Swift::tuple_training_OpaquePointer_validation_OpaquePointer_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MLSoundClassifier.ModelParameters.ValidationData.splitFeatures(trainingData:)(Swift::OpaquePointer trainingData)
{
  uint64_t v3 = type metadata accessor for MLSoundClassifier.DataSource();
  MEMORY[0x270FA5388](v3 - 8);
  OUTLINED_FUNCTION_3_0();
  uint64_t v6 = v5 - v4;
  type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_2_55(v8, v17);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with take of MLSoundClassifier.DataSource(v1, v6);
      unint64_t v11 = (unint64_t)MLSoundClassifier.DataSource.annotatedFeatures()();
      if (!v12)
      {
        uint64_t v1 = v11;
        if (v11)
        {
          swift_bridgeObjectRetain();
          outlined destroy of MLSoundClassifier.ModelParameters.ValidationData(v6, (void (*)(void))type metadata accessor for MLSoundClassifier.DataSource);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          break;
        }
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        OUTLINED_FUNCTION_85();
        OUTLINED_FUNCTION_19_0(v16, 0xD000000000000031);
      }
      outlined destroy of MLSoundClassifier.ModelParameters.ValidationData(v6, (void (*)(void))type metadata accessor for MLSoundClassifier.DataSource);
      break;
    case 2u:
      outlined destroy of MLSoundClassifier.ModelParameters.ValidationData(v1, (void (*)(void))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_85();
      OUTLINED_FUNCTION_19_0(v13, 0xD000000000000031);
      break;
    case 3u:
      swift_bridgeObjectRetain();
      uint64_t v1 = 0;
      break;
    default:
      uint64_t v1 = specialized Collection.randomSplit<A, B>(strategy:)(*(void *)v1, *(void *)(v1 + 8), *(unsigned __int8 *)(v1 + 16) | (unsigned __int16)(*(unsigned __int8 *)(v1 + 17) << 8), (uint64_t)trainingData._rawValue);
      trainingData._rawValue = v10;
      break;
  }
  rawValue = trainingData._rawValue;
  uint64_t v15 = (void *)v1;
  result.validation.value._rawValue = v15;
  result.training._rawValue = rawValue;
  result.validation.is_nil = v9;
  return result;
}

uint64_t outlined init with take of MLSoundClassifier.DataSource(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MLSoundClassifier.DataSource();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of MLSoundClassifier.ModelParameters.ValidationData(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_8();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

Swift::tuple_training_OpaquePointer_validation_OpaquePointer_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MLSoundClassifier.ModelParameters.ValidationData.splitFiles(trainingData:)(Swift::OpaquePointer trainingData)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for MLSoundClassifier.DataSource();
  OUTLINED_FUNCTION_8();
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  Swift::Bool v9 = &v25[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v7);
  unint64_t v11 = &v25[-v10];
  type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_3_0();
  uint64_t v15 = v14 - v13;
  outlined init with copy of MLSoundClassifier.ModelParameters.ValidationData(v3, v14 - v13);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with take of MLSoundClassifier.DataSource(v15, (uint64_t)v11);
      MLSoundClassifier.DataSource.labeledSounds()();
      if (v2) {
        goto LABEL_4;
      }
      uint64_t v5 = specialized Sequence.flatMap<A>(_:)(v18);
      swift_bridgeObjectRelease();
      if (!*(void *)(v5 + 16))
      {
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        OUTLINED_FUNCTION_85();
        OUTLINED_FUNCTION_19_0(v23, 0xD00000000000002ELL);
LABEL_4:
        uint64_t v19 = (uint64_t)v11;
        goto LABEL_7;
      }
      outlined destroy of MLSoundClassifier.ModelParameters.ValidationData((uint64_t)v11, (void (*)(void))type metadata accessor for MLSoundClassifier.DataSource);
      goto LABEL_12;
    case 2u:
      *Swift::Bool v9 = *(void *)v15;
      swift_storeEnumTagMultiPayload();
      MLSoundClassifier.DataSource.labeledSounds()();
      if (v2)
      {
        uint64_t v19 = (uint64_t)v9;
LABEL_7:
        outlined destroy of MLSoundClassifier.ModelParameters.ValidationData(v19, (void (*)(void))type metadata accessor for MLSoundClassifier.DataSource);
      }
      else
      {
        uint64_t v5 = specialized Sequence.flatMap<A>(_:)(v20);
        swift_bridgeObjectRelease();
        outlined destroy of MLSoundClassifier.ModelParameters.ValidationData((uint64_t)v9, (void (*)(void))type metadata accessor for MLSoundClassifier.DataSource);
        if (*(void *)(v5 + 16))
        {
LABEL_12:
          swift_bridgeObjectRetain();
        }
        else
        {
          swift_bridgeObjectRelease();
          lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
          OUTLINED_FUNCTION_85();
          OUTLINED_FUNCTION_19_0(v24, 0xD00000000000002ELL);
        }
      }
LABEL_13:
      rawValue = trainingData._rawValue;
      uint64_t v22 = (void *)v5;
      result.validation.value._rawValue = v22;
      result.training._rawValue = rawValue;
      result.validation.is_nil = v16;
      return result;
    case 3u:
      swift_bridgeObjectRetain();
      uint64_t v5 = 0;
      goto LABEL_13;
    default:
      uint64_t v5 = specialized Collection.randomSplit<A, B>(strategy:)(*(void *)v15, *(void *)(v15 + 8), *(unsigned __int8 *)(v15 + 16) | (unsigned __int16)(*(unsigned __int8 *)(v15 + 17) << 8), (uint64_t)trainingData._rawValue);
      trainingData._rawValue = v17;
      goto LABEL_13;
  }
}

uint64_t MLSoundClassifier.ModelParameters.ValidationData.validate(modelParameters:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for MLSoundClassifier.DataSource();
  MEMORY[0x270FA5388](v3 - 8);
  OUTLINED_FUNCTION_3_0();
  uint64_t v6 = v5 - v4;
  type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_2_55(v8, v12);
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 1:
      outlined init with take of MLSoundClassifier.DataSource(v1, v6);
      MLSoundClassifier.DataSource.validate(modelParameters:)(a1);
      uint64_t v10 = type metadata accessor for MLSoundClassifier.DataSource;
      uint64_t v11 = v6;
      goto LABEL_4;
    case 2:
      uint64_t v10 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData;
      uint64_t v11 = v1;
LABEL_4:
      uint64_t result = outlined destroy of MLSoundClassifier.ModelParameters.ValidationData(v11, (void (*)(void))v10);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_2_55@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  return outlined init with copy of MLSoundClassifier.ModelParameters.ValidationData(v2, (uint64_t)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0));
}

uint64_t Dictionary<>.updateValue(tensor:forKey:prefix:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = type metadata accessor for TensorShape();
  uint64_t v30 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = Dictionary<>.getTensorNames(forKey:prefix:)(a2, a3, a4, a5);
  uint64_t v17 = v16;
  v29[5] = v18;
  v29[6] = v19;
  Tensor.shape.getter();
  lazy protocol witness table accessor for type TensorShape and conformance TensorShape();
  uint64_t v20 = dispatch thunk of Collection.count.getter();
  if (!v20)
  {
LABEL_7:
    (*(void (**)(char *, uint64_t))(v30 + 8))(v14, v12);
    specialized Dictionary._Variant.setValue(_:forKey:)();
    swift_bridgeObjectRelease();
    Tensor.scalars<A>(as:)();
    specialized Dictionary._Variant.setValue(_:forKey:)();
    return swift_bridgeObjectRelease();
  }
  uint64_t v21 = v20;
  uint64_t v32 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20 & ~(v20 >> 63), 0);
  uint64_t v22 = v32;
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  if ((v21 & 0x8000000000000000) == 0)
  {
    v29[1] = v15;
    v29[2] = v17;
    v29[3] = a1;
    uint64_t v29[4] = v6;
    do
    {
      uint64_t v24 = (void (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v26 = *v25;
      v24(v31, 0);
      uint64_t v32 = v22;
      unint64_t v28 = *(void *)(v22 + 16);
      unint64_t v27 = *(void *)(v22 + 24);
      if (v28 >= v27 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1);
        uint64_t v22 = v32;
      }
      *(void *)(v22 + 16) = v28 + 1;
      *(double *)(v22 + 8 * v28 + 32) = (double)v26;
      dispatch thunk of Collection.formIndex(after:)();
      --v21;
    }
    while (v21);
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t Dictionary<>.getTensorNames(forKey:prefix:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    swift_bridgeObjectRetain();
    v6._uint64_t countAndFlagsBits = 46;
    v6._id object = (void *)0xE100000000000000;
    String.append(_:)(v6);
    v7._uint64_t countAndFlagsBits = a1;
    v7._id object = a2;
    String.append(_:)(v7);
    a1 = a3;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  v8._uint64_t countAndFlagsBits = 0x65706168732ELL;
  v8._id object = (void *)0xE600000000000000;
  String.append(_:)(v8);
  return a1;
}

void Dictionary<>.tensor(forKey:prefix:)(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TensorShape?);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = Dictionary<>.getTensorNames(forKey:prefix:)(a1, a2, a3, a4);
  uint64_t v18 = v17;
  uint64_t v21 = specialized Dictionary.subscript.getter(v19, v20, a5);
  swift_bridgeObjectRelease();
  if (v21 && (uint64_t v22 = specialized Dictionary.subscript.getter(v16, v18, a5), swift_bridgeObjectRelease(), v22))
  {
    uint64_t v23 = *(void *)(v21 + 16);
    if (!v23 || ((double v24 = *(double *)(v21 + 32), v25 = round(v24), v24 >= 1.0) ? (v26 = v25 == v24) : (v26 = 0), !v26))
    {
LABEL_8:
      swift_bridgeObjectRelease();
      uint64_t v27 = specialized _arrayForceCast<A, B>(_:)(v21);
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError();
      static MLCreateError.invalidTensorDimensions(value:)(v27, v28);
      swift_bridgeObjectRelease();
LABEL_9:
      swift_willThrow();
      return;
    }
    if (v23 == 1)
    {
LABEL_21:
      uint64_t v52 = a6;
      uint64_t v53 = v22;
      uint64_t v54 = v6;
      uint64_t v55 = (void *)MEMORY[0x263F8EE78];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23, 0);
      uint64_t v37 = 0;
      uint64_t v38 = v55;
      do
      {
        double v39 = *(double *)(v21 + 8 * v37 + 32);
        if ((~*(void *)&v39 & 0x7FF0000000000000) == 0)
        {
          __break(1u);
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          goto LABEL_41;
        }
        if (v39 <= -9.22337204e18) {
          goto LABEL_38;
        }
        if (v39 >= 9.22337204e18) {
          goto LABEL_39;
        }
        uint64_t v55 = v38;
        unint64_t v41 = v38[2];
        unint64_t v40 = v38[3];
        if (v41 >= v40 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v40 > 1, v41 + 1, 1);
          uint64_t v38 = v55;
        }
        ++v37;
        v38[2] = v41 + 1;
        v38[v41 + 4] = (uint64_t)v39;
      }
      while (v23 != v37);
      swift_bridgeObjectRelease();
      uint64_t v42 = v38[2];
      uint64_t v43 = v53;
      if (v42)
      {
        uint64_t v44 = v38 + 4;
        uint64_t v45 = 1;
        uint64_t v46 = v52;
        while (1)
        {
          uint64_t v47 = *v44++;
          uint64_t v48 = v45 * v47;
          if ((unsigned __int128)(v45 * (__int128)v47) >> 64 != (v45 * v47) >> 63) {
            goto LABEL_40;
          }
          uint64_t v45 = v48;
          if (!--v42) {
            goto LABEL_34;
          }
        }
      }
      uint64_t v48 = 1;
      uint64_t v46 = v52;
LABEL_34:
      if (*(void *)(v53 + 16) == v48)
      {
        MEMORY[0x22A672540](v38);
        uint64_t v49 = type metadata accessor for TensorShape();
        __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v49);
        Array<A>.floatTensor(shape:)((uint64_t)v15, v43, v46);
        swift_bridgeObjectRelease();
        outlined destroy of TensorShape?((uint64_t)v15);
        uint64_t v29 = type metadata accessor for Tensor();
        uint64_t v30 = v46;
        uint64_t v31 = 0;
        goto LABEL_11;
      }
      swift_bridgeObjectRelease();
      swift_release();
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError();
      static MLCreateError.invalidTensorSize(expected:actual:)(v50);
      goto LABEL_9;
    }
    uint64_t v32 = 5;
    while (1)
    {
      uint64_t v33 = v32 - 3;
      if (__OFADD__(v32 - 4, 1)) {
        break;
      }
      double v34 = *(double *)(v21 + 8 * v32);
      double v35 = round(v34);
      if (v34 < 1.0 || v35 != v34) {
        goto LABEL_8;
      }
      ++v32;
      if (v33 == v23) {
        goto LABEL_21;
      }
    }
LABEL_41:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v29 = type metadata accessor for Tensor();
    uint64_t v30 = a6;
    uint64_t v31 = 1;
LABEL_11:
    __swift_storeEnumTagSinglePayload(v30, v31, 1, v29);
  }
}

double static MLCreateError.invalidTensorDimensions(value:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Numeric);
  v5._uint64_t countAndFlagsBits = MEMORY[0x22A674D80](a1, v4);
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  *(void *)a2 = 0xD00000000000001BLL;
  *(void *)(a2 + 8) = 0x80000002272D9BB0;
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(unsigned char *)(a2 + 48) = 0;
  return result;
}

double static MLCreateError.invalidTensorSize(expected:actual:)@<D0>(uint64_t a1@<X8>)
{
  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 0x6C6175746361202CLL;
  v3._id object = (void *)0xE900000000000020;
  String.append(_:)(v3);
  v4._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  *(void *)a1 = 0xD00000000000001ELL;
  *(void *)(a1 + 8) = 0x80000002272D9B90;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(unsigned char *)(a1 + 48) = 0;
  return result;
}

unint64_t lazy protocol witness table accessor for type TensorShape and conformance TensorShape()
{
  unint64_t result = lazy protocol witness table cache variable for type TensorShape and conformance TensorShape;
  if (!lazy protocol witness table cache variable for type TensorShape and conformance TensorShape)
  {
    type metadata accessor for TensorShape();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TensorShape and conformance TensorShape);
  }
  return result;
}

uint64_t outlined destroy of TensorShape?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TensorShape?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void static _FeatureUtilities.selectFeaturesFromTrainingData(trainingData:targetColumn:featureColumns:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7 = DataFrame.columns.getter();
  MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n = (void *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11TabularData9AnyColumnVG_SSs5NeverOTg504_s11d75Data0B5FrameV8CreateMLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n(v7);
  swift_bridgeObjectRelease();
  uint64_t v9 = specialized Collection<>.firstIndex(of:)(a2, (uint64_t)a3, MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n);
  if (v10)
  {
    swift_bridgeObjectRelease();
    _StringGuts.grow(_:)(53);
    v17._uint64_t countAndFlagsBits = 0x6320746567726154;
    v17._id object = (void *)0xEF27206E6D756C6FLL;
    String.append(_:)(v17);
    v18._uint64_t countAndFlagsBits = a2;
    v18._id object = a3;
    String.append(_:)(v18);
    v19._id object = (void *)0x80000002272D9BD0;
    v19._uint64_t countAndFlagsBits = 0xD000000000000024;
    String.append(_:)(v19);
    unint64_t v16 = 0xE000000000000000;
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(void *)uint64_t v15 = 0;
    goto LABEL_8;
  }
  unint64_t v11 = v9;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew()();
    MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n = v20;
  }
  unint64_t v12 = MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n[2];
  if (v11 >= v12)
  {
    __break(1u);
    return;
  }
  unint64_t v13 = v12 - 1;
  specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)&MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n[2 * v11 + 6], v12 - 1 - v11, (char *)&MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n[2 * v11 + 4]);
  MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n[2] = v13;
  swift_bridgeObjectRelease();
  uint64_t v14 = static _FeatureUtilities.selectFeatures(from:select:)(MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n, a4);
  swift_bridgeObjectRelease();
  if (!*(void *)(v14 + 16))
  {
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(void *)uint64_t v15 = 0xD000000000000038;
    unint64_t v16 = 0x80000002272D9C00;
LABEL_8:
    *(void *)(v15 + 8) = v16;
    *(_OWORD *)(v15 + 16) = 0u;
    *(_OWORD *)(v15 + 32) = 0u;
    *(unsigned char *)(v15 + 48) = 1;
    swift_willThrow();
  }
}

uint64_t static _FeatureUtilities.selectFeatures(from:select:)(void *a1, uint64_t a2)
{
  if (!a2)
  {
    swift_bridgeObjectRetain();
    return (uint64_t)a1;
  }
  uint64_t v3 = *(void *)(a2 + 16);
  if (!v3) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v4 = a1[2];
  uint64_t v28 = a2 + 32;
  swift_bridgeObjectRetain();
  uint64_t v5 = 0;
  uint64_t v6 = MEMORY[0x263F8EE78];
  while (1)
  {
    uint64_t v7 = (uint64_t *)(v28 + 16 * v5);
    uint64_t v8 = *v7;
    uint64_t v9 = (void *)v7[1];
    if (v4)
    {
      BOOL v10 = a1[4] == v8 && a1[5] == (void)v9;
      if (v10 || (OUTLINED_FUNCTION_0_28() & 1) != 0)
      {
LABEL_10:
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v6 = v26;
        }
        unint64_t v11 = *(void *)(v6 + 16);
        if (v11 >= *(void *)(v6 + 24) >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v6 = v27;
        }
        *(void *)(v6 + 16) = v11 + 1;
        uint64_t v12 = v6 + 16 * v11;
        *(void *)(v12 + 32) = v8;
        *(void *)(v12 + 40) = v9;
        goto LABEL_17;
      }
      if (v4 != 1)
      {
        if (a1[6] == v8 && a1[7] == (void)v9) {
          goto LABEL_10;
        }
        uint64_t result = OUTLINED_FUNCTION_0_28();
        if (result) {
          goto LABEL_10;
        }
        if (v4 != 2) {
          break;
        }
      }
    }
LABEL_16:
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(66);
    v13._uint64_t countAndFlagsBits = 0x27206E6D756C6F43;
    v13._id object = (void *)0xE800000000000000;
    String.append(_:)(v13);
    v14._uint64_t countAndFlagsBits = v8;
    v14._id object = v9;
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._uint64_t countAndFlagsBits = 0xD000000000000038;
    v15._id object = (void *)0x80000002272D9C40;
    String.append(_:)(v15);
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_2272CB370;
    uint64_t v17 = MEMORY[0x263F8D310];
    *(void *)(v16 + 56) = MEMORY[0x263F8D310];
    *(void *)(v16 + 32) = 0;
    *(void *)(v16 + 40) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
    type metadata accessor for OS_os_log();
    Swift::String v18 = (void *)static OS_os_log.default.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_2272CB370;
    *(void *)(v19 + 56) = v17;
    *(void *)(v19 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v19 + 32) = 0;
    *(void *)(v19 + 40) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
LABEL_17:
    if (++v5 == v3)
    {
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t v22 = a1 + 9;
  uint64_t v23 = 2;
  while (1)
  {
    uint64_t v24 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (*(v22 - 1) == v8 && *v22 == (void)v9) {
      goto LABEL_10;
    }
    uint64_t result = OUTLINED_FUNCTION_0_28();
    if (result) {
      goto LABEL_10;
    }
    v22 += 2;
    ++v23;
    if (v24 == v4) {
      goto LABEL_16;
    }
  }
  __break(1u);
  return result;
}

uint64_t OUTLINED_FUNCTION_0_28()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t static MLStyleTransfer.__Defaults.maxIterations.getter()
{
  return 500;
}

uint64_t static MLStyleTransfer.__Defaults.textelDensity.getter()
{
  return 256;
}

uint64_t static MLStyleTransfer.__Defaults.styleStrength.getter()
{
  return 5;
}

uint64_t static MLStyleTransfer.__Constants.textelDensityRange.getter()
{
  return 64;
}

uint64_t static MLStyleTransfer.__Constants.styleStrengthRange.getter()
{
  return 1;
}

uint64_t static MLStyleTransfer.__Constants.inferenceHeight.getter()
{
  return 512;
}

uint64_t static MLStyleTransfer.__Constants.inferenceWidth.getter()
{
  return 512;
}

uint64_t static MLStyleTransfer.__Constants.inferenceChannels.getter()
{
  return 3;
}

ValueMetadata *type metadata accessor for MLStyleTransfer.__Constants()
{
  return &type metadata for MLStyleTransfer.__Constants;
}

ValueMetadata *type metadata accessor for MLStyleTransfer.__Defaults()
{
  return &type metadata for MLStyleTransfer.__Defaults;
}

id specialized EventCollector.getLast<A>(metric:type:)()
{
  id v1 = *(id *)(v0 + 16);
  id v2 = specialized NSLocking.withLock<A>(_:)((void (*)(uint64_t *__return_ptr, id))partial apply for specialized closure #1 in EventCollector.getLast<A>(metric:type:));

  return v2;
}

uint64_t specialized NSLocking.withLock<A>(_:)(void (*a1)(uint64_t *__return_ptr, id))
{
  a1(&v5, objc_msgSend(v1, sel_lock));
  objc_msgSend(v1, sel_unlock);
  if (!v2) {
    char v3 = v5;
  }
  return v3 & 1;
}

id specialized NSLocking.withLock<A>(_:)(void (*a1)(uint64_t *__return_ptr, id))
{
  a1(&v4, objc_msgSend(v1, sel_lock));
  if (v2) {
    return objc_msgSend(v1, sel_unlock);
  }
  objc_msgSend(v1, sel_unlock);
  return (id)v4;
}

id specialized NSLocking.withLock<A>(_:)(void (*a1)(id))
{
  a1(objc_msgSend(v1, sel_lock));
  return objc_msgSend(v1, sel_unlock);
}

uint64_t specialized closure #1 in EventCollector.getLast<A>(metric:type:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Event?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v18 = a2;
  *(void *)&v20[0] = v7;
  swift_bridgeObjectRetain();
  uint64_t v8 = specialized BidirectionalCollection.lastIndex(where:)((uint64_t (*)(uint64_t))partial apply for closure #1 in closure #1 in EventCollector.getLast<A>(metric:type:), (uint64_t)v17, v7);
  uint64_t v16 = v20;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyxs5NeverOqd_0_Isgnrzr_xSgAb2ERsd__Ri_d_0_r_0_lIetMgnrzo_Tpq5Si_18CreateMLComponents5EventVTg5((void *(*)(void *__return_ptr, uint64_t *))partial apply for specialized closure #1 in BidirectionalCollection.last(where:), v8, v9 & 1, v6);
  swift_bridgeObjectRelease();
  uint64_t v10 = type metadata accessor for Event();
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v10) == 1)
  {
    outlined destroy of URL?((uint64_t)v6, &demangling cache variable for type metadata for Event?);
    memset(v20, 0, sizeof(v20));
  }
  else
  {
    uint64_t v11 = Event.metrics.getter();
    (*(void (**)(void *, uint64_t))(*(void *)(v10 - 8) + 8))(v6, v10);
    specialized Dictionary.subscript.getter(v11, v20);
    swift_bridgeObjectRelease();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Sendable?);
  int v12 = swift_dynamicCast();
  uint64_t v13 = v19;
  if (!v12) {
    return 0;
  }
  return v13;
}

uint64_t TreeRegressorTrainingSessionDelegate.init(sessionParameters:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for PersistentParametersForTreeBasedMethods();
  OUTLINED_FUNCTION_42_5(v3);
  DataFrame.init()();
  uint64_t v4 = type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_42_5(v4);
  uint64_t v5 = type metadata accessor for TreeRegressor();
  OUTLINED_FUNCTION_42_5(v5);
  uint64_t v6 = type metadata accessor for TreeRegressorModel();
  OUTLINED_FUNCTION_42_5(v6);
  OUTLINED_FUNCTION_40_12(OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingMetrics);
  uint64_t v7 = v1 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics;
  *(void *)uint64_t v7 = 0;
  *(void *)(v7 + 8) = 0;
  *(unsigned char *)(v7 + 16) = v8;
  _s8CreateML18TreeRegressorModelVWObTm_2(a1, v1 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_sessionParameters, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
  return v1;
}

void TreeRegressorTrainingSessionDelegate.init(trainingData:validationData:targetColumn:featureColumns:configuration:sessionParameters:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v94 = v1;
  uint64_t v95 = v3;
  uint64_t v98 = v4;
  uint64_t v99 = v5;
  uint64_t v92 = v6;
  uint64_t v93 = v7;
  uint64_t v100 = v8;
  uint64_t v10 = v9;
  OUTLINED_FUNCTION_4_12();
  uint64_t v90 = v11;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TreeRegressor?);
  uint64_t v13 = OUTLINED_FUNCTION_17(v12);
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_33_0();
  uint64_t v89 = v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  uint64_t v16 = OUTLINED_FUNCTION_17(v15);
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_33_0();
  uint64_t v88 = v17;
  type metadata accessor for BoostedTreeConfiguration();
  OUTLINED_FUNCTION_0();
  uint64_t v96 = v19;
  uint64_t v97 = v18;
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_33_0();
  uint64_t v91 = v20;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  uint64_t v22 = OUTLINED_FUNCTION_17(v21);
  MEMORY[0x270FA5388](v22);
  OUTLINED_FUNCTION_33_0();
  uint64_t v84 = v23;
  uint64_t v24 = type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v26 = v25;
  MEMORY[0x270FA5388](v27);
  OUTLINED_FUNCTION_14_0();
  uint64_t v28 = (int *)type metadata accessor for PersistentParametersForTreeBasedMethods();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v29);
  OUTLINED_FUNCTION_33();
  uint64_t v32 = v30 - v31;
  MEMORY[0x270FA5388](v33);
  uint64_t v87 = (uint64_t)v83 - v34;
  uint64_t v85 = v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_79_1();
  __swift_storeEnumTagSinglePayload(v35, v36, v37, (uint64_t)v28);
  DataFrame.init()();
  OUTLINED_FUNCTION_79_1();
  __swift_storeEnumTagSinglePayload(v38, v39, v40, v24);
  type metadata accessor for TreeRegressor();
  OUTLINED_FUNCTION_79_1();
  uint64_t v86 = v41;
  __swift_storeEnumTagSinglePayload(v42, v43, v44, v41);
  uint64_t v45 = type metadata accessor for TreeRegressorModel();
  OUTLINED_FUNCTION_42_5(v45);
  OUTLINED_FUNCTION_40_12(OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingMetrics);
  uint64_t v46 = v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics;
  *(void *)uint64_t v46 = 0;
  *(void *)(v46 + 8) = 0;
  *(unsigned char *)(v46 + 16) = v47;
  uint64_t v48 = v10;
  uint64_t v49 = v10;
  uint64_t v50 = (uint64_t)v92;
  uint64_t v51 = v94;
  static _FeatureUtilities.selectFeaturesFromTrainingData(trainingData:targetColumn:featureColumns:)(v49, v98, v92, v93);
  uint64_t v94 = v51;
  if (v51)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of TreeRegressorModel(v95, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
    OUTLINED_FUNCTION_25_0();
    v53();
    outlined destroy of URL?(v100, &demangling cache variable for type metadata for DataFrame?);
    uint64_t v54 = *(void (**)(void))(v26 + 8);
    OUTLINED_FUNCTION_38_0();
    v54();
    outlined destroy of URL?(v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingParameters, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
    OUTLINED_FUNCTION_38_0();
    v54();
    outlined destroy of URL?(v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationData, &demangling cache variable for type metadata for DataFrame?);
    outlined destroy of URL?(v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_regressor, &demangling cache variable for type metadata for TreeRegressor?);
    outlined destroy of URL?(v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_model, &demangling cache variable for type metadata for TreeRegressorModel?);
    outlined consume of MLRegressorMetrics?(*(void **)(v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingMetrics), *(void *)(v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingMetrics + 8), *(unsigned char *)(v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingMetrics + 16));
    outlined consume of MLRegressorMetrics?(*(void **)(v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics), *(void *)(v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics + 8), *(unsigned char *)(v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics + 16));
    OUTLINED_FUNCTION_4_12();
    swift_deallocPartialClassInstance();
  }
  else
  {
    uint64_t v90 = v52;
    swift_bridgeObjectRelease();
    uint64_t v55 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16);
    v83[3] = v48;
    v55(v2, v48, v24);
    outlined init with copy of URL?(v100, v84, &demangling cache variable for type metadata for DataFrame?);
    v83[2] = v26;
    uint64_t v93 = v2;
    uint64_t v56 = v96;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v96 + 16))(v91, v99, v97);
    OUTLINED_FUNCTION_79_1();
    v83[1] = v24;
    __swift_storeEnumTagSinglePayload(v57, v58, v59, v24);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 32))(v32, v93, v24);
    swift_bridgeObjectRetain();
    uint64_t v60 = OUTLINED_FUNCTION_2_29();
    outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v60, v61, &demangling cache variable for type metadata for DataFrame?);
    uint64_t v62 = (void *)(v32 + v28[6]);
    uint64_t v63 = v98;
    *uint64_t v62 = v98;
    v62[1] = v50;
    uint64_t v64 = v50;
    uint64_t v65 = v91;
    *(void *)(v32 + v28[7]) = v90;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 32))(v32 + v28[8], v65, v97);
    uint64_t v66 = v32;
    uint64_t v67 = v87;
    _s8CreateML18TreeRegressorModelVWObTm_2(v66, v87, (void (*)(void))type metadata accessor for PersistentParametersForTreeBasedMethods);
    outlined init with copy of MLCheckpoint(v67, v88, (void (*)(void))type metadata accessor for PersistentParametersForTreeBasedMethods);
    uint64_t v68 = OUTLINED_FUNCTION_31_14();
    __swift_storeEnumTagSinglePayload(v68, v69, v70, (uint64_t)v28);
    OUTLINED_FUNCTION_81_2();
    uint64_t v71 = OUTLINED_FUNCTION_2_29();
    outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v71, v72, v73);
    swift_endAccess();
    uint64_t v74 = v95;
    outlined init with copy of MLCheckpoint(v95, v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_sessionParameters, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
    uint64_t v75 = *(void *)(v67 + v28[7]);
    swift_bridgeObjectRetain();
    BoostedTreeConfiguration.init()();
    uint64_t v76 = v89;
    TreeRegressor.init(annotationColumnName:featureColumnNames:configuration:)(v63, v64, v75, v65, v89);
    outlined destroy of TreeRegressorModel(v74, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
    OUTLINED_FUNCTION_25_0();
    v77();
    outlined destroy of URL?(v100, &demangling cache variable for type metadata for DataFrame?);
    OUTLINED_FUNCTION_25_0();
    v78();
    outlined destroy of TreeRegressorModel(v67, (void (*)(void))type metadata accessor for PersistentParametersForTreeBasedMethods);
    uint64_t v79 = OUTLINED_FUNCTION_31_14();
    __swift_storeEnumTagSinglePayload(v79, v80, v81, v86);
    uint64_t v82 = v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_regressor;
    OUTLINED_FUNCTION_81_2();
    outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata((uint64_t)v76, v82, &demangling cache variable for type metadata for TreeRegressor?);
    swift_endAccess();
  }
  OUTLINED_FUNCTION_8_1();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> TreeRegressorTrainingSessionDelegate.setUp()()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TreeRegressorModel?);
  uint64_t v5 = OUTLINED_FUNCTION_17(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_41_0();
  uint64_t v47 = type metadata accessor for BoostedTreeConfiguration();
  OUTLINED_FUNCTION_0();
  uint64_t v50 = v6;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_49();
  uint64_t v49 = v8;
  MEMORY[0x270FA5388](v9);
  uint64_t v48 = (char *)v45 - v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TreeRegressor?);
  uint64_t v12 = OUTLINED_FUNCTION_17(v11);
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_49();
  uint64_t v46 = (uint64_t *)v13;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)v45 - v15;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  uint64_t v18 = OUTLINED_FUNCTION_17(v17);
  MEMORY[0x270FA5388](v18);
  uint64_t v19 = (int *)OUTLINED_FUNCTION_34_6();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v20);
  OUTLINED_FUNCTION_40_0();
  uint64_t v21 = v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_53();
  outlined init with copy of URL?(v21, v1, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  OUTLINED_FUNCTION_57_4(v1, 1, (uint64_t)v19);
  if (v22)
  {
    outlined destroy of URL?(v1, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
    __break(1u);
    goto LABEL_6;
  }
  _s8CreateML18TreeRegressorModelVWObTm_2(v1, v3, (void (*)(void))type metadata accessor for PersistentParametersForTreeBasedMethods);
  uint64_t v23 = v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingData;
  OUTLINED_FUNCTION_81_2();
  type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_8();
  (*(void (**)(uint64_t))(v24 + 24))(v23);
  swift_endAccess();
  uint64_t v25 = v3 + v19[5];
  uint64_t v26 = v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationData;
  OUTLINED_FUNCTION_81_2();
  outlined assign with copy of DataFrame?(v25, v26);
  swift_endAccess();
  uint64_t v27 = (uint64_t *)(v3 + v19[6]);
  uint64_t v28 = *v27;
  uint64_t v29 = v27[1];
  uint64_t v30 = *(void *)(v3 + v19[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v31 = (uint64_t)v48;
  BoostedTreeConfiguration.init()();
  TreeRegressor.init(annotationColumnName:featureColumnNames:configuration:)(v28, v29, v30, v31, v16);
  uint64_t v32 = type metadata accessor for TreeRegressor();
  __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, v32);
  v45[0] = v0;
  uint64_t v33 = v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_regressor;
  OUTLINED_FUNCTION_81_2();
  outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata((uint64_t)v16, v33, &demangling cache variable for type metadata for TreeRegressor?);
  uint64_t v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 16);
  uint64_t v35 = v47;
  v34(v49, v3 + v19[8], v47);
  OUTLINED_FUNCTION_57_4(v33, 1, v32);
  if (v22)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v34((uint64_t)v48, v49, v35);
  BaseTreeRegressor.configuration.setter();
  OUTLINED_FUNCTION_25_0();
  v36();
  swift_endAccess();
  uint64_t v37 = v46;
  outlined init with copy of URL?(v33, (uint64_t)v46, &demangling cache variable for type metadata for TreeRegressor?);
  OUTLINED_FUNCTION_57_4((uint64_t)v37, 1, v32);
  if (!v22)
  {
    uint64_t v39 = *v37;
    uint64_t v38 = v37[1];
    uint64_t v40 = type metadata accessor for TreeRegressorModel();
    swift_bridgeObjectRetain();
    BaseTreeRegressor.makeTransformer()();
    *uint64_t v2 = v39;
    v2[1] = v38;
    v2[3] = 0;
    v2[4] = 0;
    v2[2] = 0;
    outlined destroy of TreeRegressorModel(v3, (void (*)(void))type metadata accessor for PersistentParametersForTreeBasedMethods);
    outlined destroy of TreeRegressorModel((uint64_t)v37, (void (*)(void))type metadata accessor for TreeRegressor);
    uint64_t v41 = OUTLINED_FUNCTION_31_14();
    __swift_storeEnumTagSinglePayload(v41, v42, v43, v40);
    uint64_t v44 = v45[0] + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_model;
    OUTLINED_FUNCTION_81_2();
    outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata((uint64_t)v2, v44, &demangling cache variable for type metadata for TreeRegressorModel?);
    swift_endAccess();
    OUTLINED_FUNCTION_8_1();
    return;
  }
LABEL_7:
  __break(1u);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> TreeRegressorTrainingSessionDelegate.resume(from:)(Swift::OpaquePointer from)
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v56 = v2;
  uint64_t v62 = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TreeRegressorModel?);
  uint64_t v7 = OUTLINED_FUNCTION_17(v6);
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_33_0();
  uint64_t v57 = v8;
  uint64_t v9 = type metadata accessor for BoostedTreeConfiguration();
  uint64_t v10 = OUTLINED_FUNCTION_17(v9);
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_33_0();
  uint64_t v58 = v11;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TreeRegressor?);
  uint64_t v13 = OUTLINED_FUNCTION_17(v12);
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_49();
  uint64_t v60 = v14;
  MEMORY[0x270FA5388](v15);
  uint64_t v59 = (char *)&v56 - v16;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  uint64_t v18 = OUTLINED_FUNCTION_17(v17);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for MLCheckpoint();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v22);
  OUTLINED_FUNCTION_33_0();
  uint64_t v24 = v23;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  uint64_t v26 = OUTLINED_FUNCTION_17(v25);
  MEMORY[0x270FA5388](v26);
  OUTLINED_FUNCTION_40_0();
  uint64_t v27 = type metadata accessor for PersistentParametersForTreeBasedMethods();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v28);
  OUTLINED_FUNCTION_24_4();
  uint64_t v61 = v1;
  uint64_t v29 = v1 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_53();
  outlined init with copy of URL?(v29, v4, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  OUTLINED_FUNCTION_57_4(v4, 1, v27);
  if (v30)
  {
    outlined destroy of URL?(v4, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
    __break(1u);
    goto LABEL_16;
  }
  _s8CreateML18TreeRegressorModelVWObTm_2(v4, v3, (void (*)(void))type metadata accessor for PersistentParametersForTreeBasedMethods);
  specialized BidirectionalCollection.last.getter(v62, (uint64_t)v20);
  OUTLINED_FUNCTION_57_4((uint64_t)v20, 1, v21);
  if (v30)
  {
    outlined destroy of URL?((uint64_t)v20, &demangling cache variable for type metadata for MLCheckpoint?);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_19_0(v31, 0xD00000000000001DLL);
LABEL_13:
    outlined destroy of TreeRegressorModel(v3, (void (*)(void))type metadata accessor for PersistentParametersForTreeBasedMethods);
    goto LABEL_14;
  }
  uint64_t v32 = v24;
  _s8CreateML18TreeRegressorModelVWObTm_2((uint64_t)v20, v24, (void (*)(void))type metadata accessor for MLCheckpoint);
  switch(*(unsigned char *)(v24 + *(int *)(v21 + 20)))
  {
    case 2:
      swift_bridgeObjectRelease();
      goto LABEL_9;
    case 4:
      OUTLINED_FUNCTION_55_0();
      goto LABEL_8;
    default:
LABEL_8:
      char v33 = OUTLINED_FUNCTION_37_5();
      swift_bridgeObjectRelease();
      if ((v33 & 1) == 0)
      {
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        OUTLINED_FUNCTION_85();
        OUTLINED_FUNCTION_19_0(v55, 0xD000000000000028);
        outlined destroy of TreeRegressorModel(v24, (void (*)(void))type metadata accessor for MLCheckpoint);
        goto LABEL_13;
      }
LABEL_9:
      uint64_t v34 = v61;
      uint64_t v35 = v61 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingData;
      OUTLINED_FUNCTION_81_2();
      type metadata accessor for DataFrame();
      OUTLINED_FUNCTION_8();
      (*(void (**)(uint64_t))(v36 + 24))(v35);
      swift_endAccess();
      OUTLINED_FUNCTION_81_2();
      uint64_t v37 = OUTLINED_FUNCTION_0_5();
      outlined assign with copy of DataFrame?(v37, v38);
      swift_endAccess();
      uint64_t v39 = *(void *)(v3 + *(int *)(v27 + 28));
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v40 = v58;
      BoostedTreeConfiguration.init()();
      uint64_t v41 = (uint64_t)v59;
      uint64_t v42 = OUTLINED_FUNCTION_0_5();
      TreeRegressor.init(annotationColumnName:featureColumnNames:configuration:)(v42, v43, v39, v40, v44);
      uint64_t v45 = type metadata accessor for TreeRegressor();
      __swift_storeEnumTagSinglePayload(v41, 0, 1, v45);
      uint64_t v46 = v34 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_regressor;
      OUTLINED_FUNCTION_81_2();
      outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v41, v46, &demangling cache variable for type metadata for TreeRegressor?);
      swift_endAccess();
      uint64_t v47 = v46;
      uint64_t v48 = v60;
      outlined init with copy of URL?(v47, v60, &demangling cache variable for type metadata for TreeRegressor?);
      uint64_t v49 = OUTLINED_FUNCTION_133();
      OUTLINED_FUNCTION_57_4(v49, v50, v45);
      if (v30)
      {
LABEL_16:
        __break(1u);
        JUMPOUT(0x2271DDCB4);
      }
      lazy protocol witness table accessor for type TreeRegressor and conformance TreeRegressor();
      uint64_t v51 = v56;
      uint64_t v52 = v57;
      SupervisedTabularEstimator.read(from:)();
      outlined destroy of TreeRegressorModel(v32, (void (*)(void))type metadata accessor for MLCheckpoint);
      outlined destroy of TreeRegressorModel(v3, (void (*)(void))type metadata accessor for PersistentParametersForTreeBasedMethods);
      outlined destroy of TreeRegressorModel(v48, (void (*)(void))type metadata accessor for TreeRegressor);
      if (!v51)
      {
        uint64_t v53 = type metadata accessor for TreeRegressorModel();
        __swift_storeEnumTagSinglePayload(v52, 0, 1, v53);
        uint64_t v54 = v61 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_model;
        OUTLINED_FUNCTION_81_2();
        outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v52, v54, &demangling cache variable for type metadata for TreeRegressorModel?);
        swift_endAccess();
      }
LABEL_14:
      OUTLINED_FUNCTION_8_1();
      return;
  }
}

Swift::Int_optional __swiftcall TreeRegressorTrainingSessionDelegate.itemCount(phase:)(CreateML::MLPhase phase)
{
  int v2 = *(unsigned __int8 *)phase;
  if (v2 == 2)
  {
    uint64_t v4 = v1 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_sessionParameters;
    Swift::Int v3 = *(void *)(v4 + *(int *)(type metadata accessor for MLTrainingSessionParameters() + 28));
  }
  else
  {
    Swift::Int v3 = 0;
  }
  Swift::Bool v5 = v2 != 2;
  result.value = v3;
  result.is_nil = v5;
  return result;
}

uint64_t TreeRegressorTrainingSessionDelegate.train(from:)(uint64_t a1)
{
  v2[19] = a1;
  v2[20] = v1;
  uint64_t v3 = type metadata accessor for MetricsKey();
  v2[21] = v3;
  OUTLINED_FUNCTION_1(v3);
  v2[22] = v4;
  v2[23] = OUTLINED_FUNCTION_5();
  uint64_t v5 = type metadata accessor for AnyColumn();
  v2[24] = v5;
  OUTLINED_FUNCTION_1(v5);
  v2[25] = v6;
  v2[26] = OUTLINED_FUNCTION_5();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DenseMatrix<Float>);
  v2[27] = v7;
  OUTLINED_FUNCTION_1(v7);
  void v2[28] = v8;
  v2[29] = OUTLINED_FUNCTION_5();
  uint64_t v9 = type metadata accessor for DataFrame();
  v2[30] = v9;
  OUTLINED_FUNCTION_1(v9);
  v2[31] = v10;
  v2[32] = OUTLINED_FUNCTION_24();
  v2[33] = swift_task_alloc();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TreeRegressor?);
  OUTLINED_FUNCTION_17(v11);
  v2[34] = OUTLINED_FUNCTION_5();
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  OUTLINED_FUNCTION_17(v12);
  v2[35] = OUTLINED_FUNCTION_5();
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TreeRegressorModel?);
  OUTLINED_FUNCTION_17(v13);
  v2[36] = OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v14, v15, v16);
}

uint64_t TreeRegressorTrainingSessionDelegate.train(from:)()
{
  uint64_t v1 = v0[36];
  uint64_t v2 = v0[20] + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_model;
  OUTLINED_FUNCTION_53();
  outlined init with copy of URL?(v2, v1, &demangling cache variable for type metadata for TreeRegressorModel?);
  type metadata accessor for TreeRegressorModel();
  uint64_t v3 = OUTLINED_FUNCTION_133();
  uint64_t v63 = v4;
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v3, v5, v4);
  uint64_t result = outlined destroy of URL?(v1, &demangling cache variable for type metadata for TreeRegressorModel?);
  if (EnumTagSinglePayload == 1)
  {
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v8 = v0[35];
  OUTLINED_FUNCTION_53();
  uint64_t v9 = OUTLINED_FUNCTION_0_5();
  outlined init with copy of URL?(v9, v10, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  type metadata accessor for PersistentParametersForTreeBasedMethods();
  uint64_t v11 = OUTLINED_FUNCTION_133();
  int v14 = __swift_getEnumTagSinglePayload(v11, v12, v13);
  uint64_t result = outlined destroy of URL?(v8, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  if (v14 == 1)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v15 = v0[19];
  uint64_t v16 = v0[20] + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_sessionParameters;
  uint64_t result = type metadata accessor for MLTrainingSessionParameters();
  uint64_t v17 = *(void *)(v16 + *(int *)(result + 20));
  uint64_t v18 = v15 + v17;
  if (__OFADD__(v15, v17))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v19 = *(void *)(v16 + *(int *)(result + 28));
  if (__OFSUB__(v19, v15))
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v17 >= v19 - v15) {
    uint64_t v20 = v19 - v15;
  }
  else {
    uint64_t v20 = *(void *)(v16 + *(int *)(result + 20));
  }
  type metadata accessor for EventCollector();
  swift_allocObject();
  uint64_t result = EventCollector.init()();
  if (v20 < 0) {
    goto LABEL_29;
  }
  uint64_t v54 = v19;
  uint64_t v55 = v20;
  if (!v20)
  {
LABEL_18:
    uint64_t v42 = v0[22];
    static MetricsKey.trainingMaximumError.getter();
    specialized EventCollector.getLast<A>(metric:type:)();
    char v44 = v43;
    uint64_t v45 = *(void (**)(void))(v42 + 8);
    OUTLINED_FUNCTION_5_4();
    v45();
    uint64_t v46 = (void *)MEMORY[0x263F8EE80];
    if ((v44 & 1) == 0)
    {
      swift_isUniquelyReferenced_nonNull_native();
      double v47 = OUTLINED_FUNCTION_42_16();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(8, v48, v47);
      uint64_t v46 = v64;
      swift_bridgeObjectRelease();
    }
    static MetricsKey.trainingError.getter();
    specialized EventCollector.getLast<A>(metric:type:)();
    char v50 = v49;
    OUTLINED_FUNCTION_111_0();
    OUTLINED_FUNCTION_5_4();
    v45();
    if ((v50 & 1) == 0)
    {
      swift_isUniquelyReferenced_nonNull_native();
      double v51 = OUTLINED_FUNCTION_42_16();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(7, v52, v51);
      uint64_t v46 = v64;
      swift_bridgeObjectRelease();
    }
    uint64_t v62 = specialized _dictionaryUpCast<A, B, C, D>(_:)(v46);
    swift_release();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v53 = (uint64_t (*)(uint64_t, void *, BOOL))v0[1];
    return v53(v55, v62, v18 >= v54);
  }
  uint64_t v59 = v0[34];
  uint64_t v21 = v0[31];
  uint64_t v22 = v0[20];
  uint64_t v23 = v22 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingData;
  uint64_t v57 = v22 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_regressor;
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_53();
  uint64_t v56 = (void (**)(void, uint64_t, void))(v21 + 16);
  uint64_t v24 = v55;
  uint64_t v58 = (uint64_t *)v2;
  uint64_t v61 = (void (**)(void))(v21 + 8);
  while (1)
  {
    outlined init with copy of URL?(v57, v0[34], &demangling cache variable for type metadata for TreeRegressor?);
    uint64_t v25 = type metadata accessor for TreeRegressor();
    uint64_t v26 = OUTLINED_FUNCTION_133();
    uint64_t result = __swift_getEnumTagSinglePayload(v26, v27, v25);
    if (result == 1) {
      break;
    }
    (*v56)(v0[33], v23, v0[30]);
    swift_beginAccess();
    uint64_t result = __swift_getEnumTagSinglePayload(v2, 1, v63);
    if (result == 1) {
      goto LABEL_31;
    }
    uint64_t v60 = v24;
    if (*(void *)(v2 + 16))
    {
      swift_retain();
    }
    else
    {
      uint64_t v28 = v0[33];
      uint64_t v29 = *(void *)(v59 + 16);
      uint64_t v30 = swift_task_alloc();
      *(void *)(v30 + 16) = v28;
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t ML16ColumnDescriptorVsAE_pTg5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_8CreateML16ColumnDescriptorVsAE_pTg5((uint64_t)partial apply for closure #1 in FeatureVectorizer.fitted(to:), v30, v29);
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      outlined consume of FeatureVectorizer<Float>.Transformer?(v58[2]);
      v58[2] = ML16ColumnDescriptorVsAE_pTg5;
      v58[3] = 0xD000000000000013;
      v58[4] = 0x80000002272D4D10;
    }
    uint64_t v32 = swift_bridgeObjectRetain();
    ML16ColumnDescriptorVG_SSs5NeverOTg503_s8d131ML17FeatureVectorizerV11TransformerV10vectorized_13includingBias0A12MLComponents11DenseMatrixVyxG11TabularData0M5FrameV_SbtKFSSAA16fG54Vcfu_33_44daf68368b8b9c6f03dca699c8750fcAPSSTf3nnnpk_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML16ColumnDescriptorVG_SSs5NeverOTg503_s8d131ML17FeatureVectorizerV11TransformerV10vectorized_13includingBias0A12MLComponents11DenseMatrixVyxG11TabularData0M5FrameV_SbtKFSSAA16fG54Vcfu_33_44daf68368b8b9c6f03dca699c8750fcAPSSTf3nnnpk_nTf1cn_n(v32);
    swift_bridgeObjectRelease();
    v0[18] = ML16ColumnDescriptorVG_SSs5NeverOTg503_s8d131ML17FeatureVectorizerV11TransformerV10vectorized_13includingBias0A12MLComponents11DenseMatrixVyxG11TabularData0M5FrameV_SbtKFSSAA16fG54Vcfu_33_44daf68368b8b9c6f03dca699c8750fcAPSSTf3nnnpk_nTf1cn_n;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
    DataFrame.selecting<A>(columnNames:)();
    swift_bridgeObjectRelease();
    specialized DataFrame.asMatrix<A>(of:descriptors:includingBias:)();
    uint64_t v34 = (void *)v0[34];
    uint64_t v35 = *v61;
    OUTLINED_FUNCTION_9();
    v35();
    MEMORY[0x22A672220](*v34, *(void *)(v59 + 8));
    AnyColumn.convertedToFloats()();
    uint64_t v37 = v36;
    OUTLINED_FUNCTION_25_0();
    uint64_t result = v38();
    if (!v37) {
      goto LABEL_32;
    }
    uint64_t v2 = (uint64_t)v58;
    BaseTreeRegressor.update(_:features:annotations:eventHandler:)();
    uint64_t v39 = v0[34];
    OUTLINED_FUNCTION_25_0();
    v40();
    swift_release();
    swift_endAccess();
    swift_release();
    uint64_t v41 = OUTLINED_FUNCTION_111_0();
    ((void (*)(uint64_t))v35)(v41);
    outlined destroy of TreeRegressorModel(v39, (void (*)(void))type metadata accessor for TreeRegressor);
    --v24;
    if (v60 == 1) {
      goto LABEL_18;
    }
  }
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

uint64_t TreeRegressorTrainingSessionDelegate.evaluate(from:)()
{
  v1[25] = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  OUTLINED_FUNCTION_17(v2);
  v1[26] = OUTLINED_FUNCTION_5();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  v1[27] = v3;
  OUTLINED_FUNCTION_1(v3);
  v1[28] = v4;
  v1[29] = OUTLINED_FUNCTION_5();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<Double>>);
  v1[30] = v5;
  OUTLINED_FUNCTION_1(v5);
  v1[31] = v6;
  v1[32] = OUTLINED_FUNCTION_24();
  v1[33] = swift_task_alloc();
  v1[34] = swift_task_alloc();
  v1[35] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DataFrame();
  v1[36] = v7;
  OUTLINED_FUNCTION_1(v7);
  v1[37] = v8;
  v1[38] = OUTLINED_FUNCTION_24();
  v1[39] = swift_task_alloc();
  v1[40] = swift_task_alloc();
  v1[41] = swift_task_alloc();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TreeRegressorModel?);
  OUTLINED_FUNCTION_17(v9);
  v1[42] = OUTLINED_FUNCTION_5();
  uint64_t v10 = type metadata accessor for TreeRegressorModel();
  v1[43] = v10;
  OUTLINED_FUNCTION_17(v10);
  v1[44] = OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v11, v12, v13);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(void);
  void (*v17)(void);
  void *v18;
  uint64_t v19;
  unsigned __int8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int EnumTagSinglePayload;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(void);
  void (*v29)(void);
  uint64_t v30;
  void *v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  void (*v35)(void);
  uint64_t v36;
  uint64_t v37;
  void (*v38)(void);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  uint64_t v1 = v0[42];
  uint64_t v2 = v0[43];
  uint64_t v3 = v0[25] + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_model;
  OUTLINED_FUNCTION_53();
  outlined init with copy of URL?(v3, v1, &demangling cache variable for type metadata for TreeRegressorModel?);
  if (__swift_getEnumTagSinglePayload(v1, 1, v2) == 1)
  {
    outlined destroy of URL?(v0[42], &demangling cache variable for type metadata for TreeRegressorModel?);
  }
  else
  {
    uint64_t v4 = v0[25];
    _s8CreateML18TreeRegressorModelVWObTm_2(v0[42], v0[44], (void (*)(void))type metadata accessor for TreeRegressorModel);
    uint64_t v5 = v4 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingParameters;
    OUTLINED_FUNCTION_0_5();
    OUTLINED_FUNCTION_53();
    uint64_t v6 = type metadata accessor for PersistentParametersForTreeBasedMethods();
    if (!__swift_getEnumTagSinglePayload(v5, 1, v6))
    {
      uint64_t v9 = v0[40];
      uint64_t v10 = v0[36];
      uint64_t v11 = v0[37];
      uint64_t v12 = v0[25] + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingData;
      OUTLINED_FUNCTION_53();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v9, v12, v10);
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_14();
      TreeRegressorModel.applied(to:eventHandler:)();
      char v44 = v0[36];
      uint64_t v13 = v0[29];
      uint64_t v15 = v0[27];
      int v14 = v0[28];
      char v43 = v0[26];
      uint64_t v41 = v0[25];
      uint64_t v46 = *(void (**)(uint64_t, uint64_t))(v0[37] + 8);
      OUTLINED_FUNCTION_9();
      v16();
      DataFrame.subscript.getter();
      v0[20] = 0;
      lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<Double> and conformance Column<A>, &demangling cache variable for type metadata for Column<Double>);
      OptionalColumnProtocol.filled(with:)();
      uint64_t v17 = *(void (**)(void))(v14 + 8);
      ((void (*)(uint64_t, uint64_t))v17)(v13, v15);
      swift_beginAccess();
      DataFrame.subscript.getter();
      swift_endAccess();
      v0[17] = 0;
      OptionalColumnProtocol.filled(with:)();
      uint64_t v38 = v17;
      ((void (*)(uint64_t, uint64_t))v17)(v13, v15);
      lazy protocol witness table accessor for type Double and conformance Double();
      lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FilledColumn<Column<Double>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<Double>>);
      OUTLINED_FUNCTION_21_29();
      maximumAbsoluteError<A, B, C>(_:_:)();
      OUTLINED_FUNCTION_111_0();
      OUTLINED_FUNCTION_21_29();
      rootMeanSquaredError<A, B, C>(_:_:)();
      uint64_t v18 = (void *)OUTLINED_FUNCTION_35_15(v0[19]);
      outlined consume of MLRegressorMetrics?(v18, v19, v20);
      uint64_t v21 = v41 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationData;
      OUTLINED_FUNCTION_53();
      outlined init with copy of URL?(v21, v43, &demangling cache variable for type metadata for DataFrame?);
      uint64_t v22 = OUTLINED_FUNCTION_133();
      int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v22, v23, v44);
      uint64_t v25 = v0[44];
      if (EnumTagSinglePayload == 1)
      {
        uint64_t v26 = v0[31];
        uint64_t v27 = v0[26];
        char v49 = v0[25];
        swift_bridgeObjectRelease();
        uint64_t v28 = *(void (**)(void))(v26 + 8);
        OUTLINED_FUNCTION_29_22();
        v28();
        OUTLINED_FUNCTION_29_22();
        v28();
        OUTLINED_FUNCTION_111_0();
        OUTLINED_FUNCTION_9();
        v29();
        outlined destroy of TreeRegressorModel(v25, (void (*)(void))type metadata accessor for TreeRegressorModel);
        outlined destroy of URL?(v27, &demangling cache variable for type metadata for DataFrame?);
        uint64_t v30 = v49 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics;
        uint64_t v31 = *(void **)(v49 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics);
        uint64_t v32 = *(void *)(v49 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics + 8);
        *(void *)uint64_t v30 = 0;
        *(void *)(v30 + 8) = 0;
        char v33 = *(unsigned char *)(v30 + 16);
        *(unsigned char *)(v30 + 16) = -1;
      }
      else
      {
        (*(void (**)(void, void, void))(v0[37] + 32))(v0[39], v0[26], v0[36]);
        OUTLINED_FUNCTION_14();
        TreeRegressorModel.applied(to:eventHandler:)();
        char v48 = v0[44];
        uint64_t v45 = v0[41];
        char v50 = v0[39];
        uint64_t v42 = v0[36];
        uint64_t v36 = v0[33];
        uint64_t v37 = v0[32];
        uint64_t v34 = v0[30];
        uint64_t v39 = v0[38];
        uint64_t v40 = v0[31];
        DataFrame.subscript.getter();
        v0[21] = 0;
        OptionalColumnProtocol.filled(with:)();
        OUTLINED_FUNCTION_9();
        v38();
        DataFrame.subscript.getter();
        swift_bridgeObjectRelease();
        v0[22] = 0;
        OptionalColumnProtocol.filled(with:)();
        OUTLINED_FUNCTION_9();
        v38();
        OUTLINED_FUNCTION_2_29();
        OUTLINED_FUNCTION_18_22();
        maximumAbsoluteError<A, B, C>(_:_:)();
        OUTLINED_FUNCTION_2_29();
        OUTLINED_FUNCTION_18_22();
        rootMeanSquaredError<A, B, C>(_:_:)();
        uint64_t v35 = *(void (**)(void))(v40 + 8);
        ((void (*)(uint64_t, uint64_t))v35)(v37, v34);
        ((void (*)(uint64_t, uint64_t))v35)(v36, v34);
        v46(v39, v42);
        v46(v50, v42);
        OUTLINED_FUNCTION_5_4();
        v35();
        OUTLINED_FUNCTION_5_4();
        v35();
        v46(v45, v42);
        outlined destroy of TreeRegressorModel(v48, (void (*)(void))type metadata accessor for TreeRegressorModel);
        uint64_t v31 = (void *)OUTLINED_FUNCTION_35_15(v0[24]);
      }
      outlined consume of MLRegressorMetrics?(v31, v32, v33);
      double v47 = 1;
      goto LABEL_6;
    }
    outlined destroy of TreeRegressorModel(v0[44], (void (*)(void))type metadata accessor for TreeRegressorModel);
  }
  double v47 = 0;
LABEL_6:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v7(v47, 1);
}

void TreeRegressorTrainingSessionDelegate.saveCheckpoint(to:phase:iteration:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v5 = v4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TreeRegressor?);
  uint64_t v7 = OUTLINED_FUNCTION_17(v6);
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_24_4();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TreeRegressorModel?);
  uint64_t v9 = OUTLINED_FUNCTION_17(v8);
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_14_0();
  uint64_t v10 = type metadata accessor for TreeRegressorModel();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_41_0();
  uint64_t v12 = *v5;
  uint64_t v13 = v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_model;
  OUTLINED_FUNCTION_53();
  outlined init with copy of URL?(v13, v3, &demangling cache variable for type metadata for TreeRegressorModel?);
  OUTLINED_FUNCTION_57_4(v3, 1, v10);
  if (v14)
  {
    outlined destroy of URL?(v3, &demangling cache variable for type metadata for TreeRegressorModel?);
  }
  else
  {
    _s8CreateML18TreeRegressorModelVWObTm_2(v3, v1, (void (*)(void))type metadata accessor for TreeRegressorModel);
    switch(v12)
    {
      case 2:
        swift_bridgeObjectRelease();
        goto LABEL_8;
      case 4:
        OUTLINED_FUNCTION_55_0();
        break;
      default:
        break;
    }
    char v15 = OUTLINED_FUNCTION_37_5();
    swift_bridgeObjectRelease();
    if (v15)
    {
LABEL_8:
      uint64_t v16 = v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_regressor;
      OUTLINED_FUNCTION_53();
      outlined init with copy of URL?(v16, v2, &demangling cache variable for type metadata for TreeRegressor?);
      uint64_t v17 = type metadata accessor for TreeRegressor();
      OUTLINED_FUNCTION_57_4(v2, 1, v17);
      if (v14)
      {
        __break(1u);
        JUMPOUT(0x2271DF418);
      }
      lazy protocol witness table accessor for type TreeRegressor and conformance TreeRegressor();
      SupervisedTabularEstimator.write(_:to:overwrite:)();
      outlined destroy of TreeRegressorModel(v1, (void (*)(void))type metadata accessor for TreeRegressorModel);
      outlined destroy of TreeRegressorModel(v2, (void (*)(void))type metadata accessor for TreeRegressor);
    }
    else
    {
      outlined destroy of TreeRegressorModel(v1, (void (*)(void))type metadata accessor for TreeRegressorModel);
    }
  }
  OUTLINED_FUNCTION_8_1();
}

uint64_t TreeRegressorTrainingSessionDelegate.save(to:)(uint64_t a1)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  uint64_t v6 = OUTLINED_FUNCTION_17(v5);
  MEMORY[0x270FA5388](v6);
  uint64_t v7 = OUTLINED_FUNCTION_34_6();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_41_0();
  uint64_t v9 = v1 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_53();
  outlined init with copy of URL?(v9, v2, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  OUTLINED_FUNCTION_57_4(v2, 1, v7);
  if (v10)
  {
    outlined destroy of URL?(v2, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    *(void *)uint64_t v11 = 0xD000000000000031;
    *(void *)(v11 + 8) = 0x80000002272D70A0;
    *(_OWORD *)(v11 + 16) = 0u;
    *(_OWORD *)(v11 + 32) = 0u;
    *(unsigned char *)(v11 + 48) = 2;
    return swift_willThrow();
  }
  else
  {
    _s8CreateML18TreeRegressorModelVWObTm_2(v2, v3, (void (*)(void))type metadata accessor for PersistentParametersForTreeBasedMethods);
    PersistentParametersForTreeBasedMethods.save(toSessionDirectory:)(a1);
    return outlined destroy of TreeRegressorModel(v3, (void (*)(void))type metadata accessor for PersistentParametersForTreeBasedMethods);
  }
}

void TreeRegressorTrainingSessionDelegate.restore(from:phase:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v26 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  uint64_t v3 = OUTLINED_FUNCTION_17(v2);
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_33();
  uint64_t v6 = v4 - v5;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v25 - v8;
  type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for PersistentParametersForTreeBasedMethods();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_33();
  uint64_t v17 = v15 - v16;
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v25 - v19;
  uint64_t v21 = OUTLINED_FUNCTION_0_5();
  v22(v21);
  PersistentParametersForTreeBasedMethods.init(sessionDirectory:)((uint64_t)v12, (uint64_t)v20);
  if (!v1)
  {
    uint64_t v23 = v26 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingParameters;
    OUTLINED_FUNCTION_53();
    outlined init with copy of URL?(v23, (uint64_t)v9, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
    OUTLINED_FUNCTION_57_4((uint64_t)v9, 1, v13);
    if (v24)
    {
      outlined destroy of URL?((uint64_t)v9, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
      _s8CreateML18TreeRegressorModelVWObTm_2((uint64_t)v20, v6, (void (*)(void))type metadata accessor for PersistentParametersForTreeBasedMethods);
      __swift_storeEnumTagSinglePayload(v6, 0, 1, v13);
      OUTLINED_FUNCTION_81_2();
      outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v6, v23, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
      swift_endAccess();
    }
    else
    {
      _s8CreateML18TreeRegressorModelVWObTm_2((uint64_t)v9, v17, (void (*)(void))type metadata accessor for PersistentParametersForTreeBasedMethods);
      TreeRegressorTrainingSessionDelegate.verifyThatParametersAreCompatible(_:_:)((uint64_t)v20, v17);
      outlined destroy of TreeRegressorModel(v17, (void (*)(void))type metadata accessor for PersistentParametersForTreeBasedMethods);
      outlined destroy of TreeRegressorModel((uint64_t)v20, (void (*)(void))type metadata accessor for PersistentParametersForTreeBasedMethods);
    }
  }
  OUTLINED_FUNCTION_8_1();
}

uint64_t TreeRegressorTrainingSessionDelegate.verifyThatParametersAreCompatible(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PersistentParametersForTreeBasedMethods();
  uint64_t v5 = *(int *)(v4 + 24);
  uint64_t v6 = *(void *)(a1 + v5);
  uint64_t v7 = *(void *)(a1 + v5 + 8);
  uint64_t v8 = (void *)(a2 + v5);
  BOOL v9 = v6 == *v8 && v7 == v8[1];
  if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v10 = swift_bridgeObjectRetain();
    uint64_t v11 = specialized Set.init<A>(_:)(v10);
    uint64_t v12 = swift_bridgeObjectRetain();
    uint64_t v13 = specialized Set.init<A>(_:)(v12);
    specialized static Set.== infix(_:_:)(v11, v13);
    char v15 = v14;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v15)
    {
      static BoostedTreeConfiguration.firstIncompatibility(_:_:)(a1 + *(int *)(v4 + 32), v25);
      uint64_t result = outlined init with take of (name: String, originalValue: String, newValue: String)?((uint64_t)v25, (uint64_t)&v26);
      unint64_t v17 = v27;
      if (!v27) {
        return result;
      }
      uint64_t v18 = v26;
      uint64_t v6 = v28;
      uint64_t v7 = v29;
      uint64_t v19 = v30;
      uint64_t v20 = v31;
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_85();
      *(void *)uint64_t v21 = v18;
    }
    else
    {
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
      uint64_t v6 = OUTLINED_FUNCTION_51_5();
      uint64_t v7 = v22;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_51_5();
      swift_bridgeObjectRelease();
      uint64_t v19 = String.init<A>(_:)();
      uint64_t v20 = v23;
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_85();
      *(void *)uint64_t v21 = 0xD000000000000011;
      unint64_t v17 = 0x80000002272D7080;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v19 = String.init<A>(_:)();
    uint64_t v20 = v24;
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    *(void *)uint64_t v21 = 0x6320746567726154;
    unint64_t v17 = 0xED00006E6D756C6FLL;
  }
  *(void *)(v21 + 8) = v17;
  *(void *)(v21 + 16) = v6;
  *(void *)(v21 + 24) = v7;
  *(void *)(v21 + 32) = v19;
  *(void *)(v21 + 40) = v20;
  *(unsigned char *)(v21 + 48) = 3;
  return swift_willThrow();
}

uint64_t TreeRegressorTrainingSessionDelegate.deinit()
{
  outlined destroy of TreeRegressorModel(v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_sessionParameters, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
  outlined destroy of URL?(v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingParameters, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_25_0();
  v1();
  outlined destroy of URL?(v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationData, &demangling cache variable for type metadata for DataFrame?);
  outlined destroy of URL?(v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_regressor, &demangling cache variable for type metadata for TreeRegressor?);
  outlined destroy of URL?(v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_model, &demangling cache variable for type metadata for TreeRegressorModel?);
  outlined consume of MLRegressorMetrics?(*(void **)(v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingMetrics), *(void *)(v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingMetrics + 8), *(unsigned char *)(v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingMetrics + 16));
  outlined consume of MLRegressorMetrics?(*(void **)(v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics), *(void *)(v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics + 8), *(unsigned char *)(v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics + 16));
  return v0;
}

uint64_t TreeRegressorTrainingSessionDelegate.__deallocating_deinit()
{
  TreeRegressorTrainingSessionDelegate.deinit();
  OUTLINED_FUNCTION_4_12();

  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for TreeRegressorTrainingSessionDelegate()
{
  return type metadata accessor for TreeRegressorTrainingSessionDelegate();
}

uint64_t type metadata accessor for TreeRegressorTrainingSessionDelegate()
{
  uint64_t result = type metadata singleton initialization cache for TreeRegressorTrainingSessionDelegate;
  if (!type metadata singleton initialization cache for TreeRegressorTrainingSessionDelegate) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for TreeRegressorTrainingSessionDelegate()
{
  type metadata accessor for MLTrainingSessionParameters();
  if (v0 <= 0x3F)
  {
    _s8CreateML39PersistentParametersForTreeBasedMethodsVSgMaTm_0(319, &lazy cache variable for type metadata for PersistentParametersForTreeBasedMethods?, (void (*)(uint64_t))type metadata accessor for PersistentParametersForTreeBasedMethods);
    if (v1 <= 0x3F)
    {
      type metadata accessor for DataFrame();
      if (v2 <= 0x3F)
      {
        _s8CreateML39PersistentParametersForTreeBasedMethodsVSgMaTm_0(319, (unint64_t *)&lazy cache variable for type metadata for DataFrame?, MEMORY[0x263F1BEC8]);
        if (v3 <= 0x3F)
        {
          _s8CreateML39PersistentParametersForTreeBasedMethodsVSgMaTm_0(319, &lazy cache variable for type metadata for TreeRegressor?, (void (*)(uint64_t))type metadata accessor for TreeRegressor);
          if (v4 <= 0x3F)
          {
            _s8CreateML39PersistentParametersForTreeBasedMethodsVSgMaTm_0(319, &lazy cache variable for type metadata for TreeRegressorModel?, (void (*)(uint64_t))type metadata accessor for TreeRegressorModel);
            if (v5 <= 0x3F) {
              swift_updateClassMetadata2();
            }
          }
        }
      }
    }
  }
}

void _s8CreateML39PersistentParametersForTreeBasedMethodsVSgMaTm_0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void protocol witness for TrainingSessionDelegate.setUp() in conformance TreeRegressorTrainingSessionDelegate()
{
}

void protocol witness for TrainingSessionDelegate.resume(from:) in conformance TreeRegressorTrainingSessionDelegate(Swift::OpaquePointer a1)
{
}

unint64_t protocol witness for TrainingSessionDelegate.itemCount(phase:) in conformance TreeRegressorTrainingSessionDelegate(CreateML::MLPhase a1)
{
  return (unint64_t)TreeRegressorTrainingSessionDelegate.itemCount(phase:)(a1);
}

uint64_t protocol witness for TrainingSessionDelegate.train(from:) in conformance TreeRegressorTrainingSessionDelegate(uint64_t a1)
{
  unint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *unint64_t v3 = v1;
  v3[1] = protocol witness for TrainingSessionDelegate.train(from:) in conformance LinearRegressorTrainingSessionDelegate;
  return TreeRegressorTrainingSessionDelegate.train(from:)(a1);
}

uint64_t protocol witness for TrainingSessionDelegate.evaluate(from:) in conformance TreeRegressorTrainingSessionDelegate()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for TrainingSessionDelegate.evaluate(from:) in conformance LogisticRegressionClassifierTrainingSessionDelegate;
  return TreeRegressorTrainingSessionDelegate.evaluate(from:)();
}

uint64_t protocol witness for TrainingSessionDelegate.saveCheckpoint(to:phase:iteration:) in conformance TreeRegressorTrainingSessionDelegate()
{
  TreeRegressorTrainingSessionDelegate.saveCheckpoint(to:phase:iteration:)();
  return v0 & 1;
}

uint64_t protocol witness for TrainingSessionCodable.save(to:) in conformance TreeRegressorTrainingSessionDelegate(uint64_t a1)
{
  return TreeRegressorTrainingSessionDelegate.save(to:)(a1);
}

void protocol witness for TrainingSessionCodable.restore(from:phase:) in conformance TreeRegressorTrainingSessionDelegate()
{
}

uint64_t specialized BidirectionalCollection.lastIndex(where:)(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  if (v4)
  {
    uint64_t v7 = *(void *)(type metadata accessor for Event() - 8);
    uint64_t v8 = *(void *)(v7 + 72);
    --v4;
    uint64_t v9 = a3 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)) + v8 * v4;
    uint64_t v10 = -v8;
    while (1)
    {
      char v11 = a1(v9);
      if (v3 || (v11 & 1) != 0) {
        break;
      }
      --v4;
      v9 += v10;
      if (v4 == -1) {
        return 0;
      }
    }
  }
  return v4;
}

unint64_t specialized closure #1 in BidirectionalCollection.last(where:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v4 = result;
    if (*(void *)(a2 + 16) > result)
    {
      uint64_t v6 = type metadata accessor for MLCheckpoint();
      OUTLINED_FUNCTION_1(v6);
      return outlined init with copy of MLCheckpoint(a2+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v8 + 72) * v4, a3, (void (*)(void))type metadata accessor for MLCheckpoint);
    }
  }
  __break(1u);
  return result;
}

{
  unint64_t v4;
  uint64_t v6;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v4 = result;
    if (*(void *)(a2 + 16) > result)
    {
      uint64_t v6 = type metadata accessor for Event();
      return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a3, a2+ ((*(unsigned __int8 *)(*(void *)(v6 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v6 - 8) + 80))+ *(void *)(*(void *)(v6 - 8) + 72) * v4, v6);
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in EventCollector.getLast<A>(metric:type:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = specialized closure #1 in EventCollector.getLast<A>(metric:type:)(a1, a2);
  if (!v3)
  {
    *(void *)a3 = result;
    *(unsigned char *)(a3 + 8) = v6 & 1;
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in EventCollector.getLast<A>(metric:type:)@<X0>(uint64_t a1@<X8>)
{
  return specialized closure #1 in EventCollector.getLast<A>(metric:type:)(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

BOOL partial apply for closure #1 in closure #1 in EventCollector.getLast<A>(metric:type:)()
{
  return closure #1 in closure #1 in EventCollector.getLast<A>(metric:type:)();
}

uint64_t outlined destroy of TreeRegressorModel(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_25_0();
  v3();
  return a1;
}

uint64_t _s8CreateML18TreeRegressorModelVWObTm_2(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_8();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t outlined init with copy of MLCheckpoint(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_8();
  uint64_t v4 = OUTLINED_FUNCTION_111();
  v5(v4);
  return a2;
}

uint64_t OUTLINED_FUNCTION_31_14()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_35_15@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = *v1;
  *uint64_t v1 = v2;
  v1[1] = a1;
  *((unsigned char *)v1 + 16) = 0;
  return result;
}

double OUTLINED_FUNCTION_42_16()
{
  *(void *)(v1 - 96) = v0;
  return v2;
}

uint64_t static BlobsFile.round(_:to:)(uint64_t result, uint64_t a2)
{
  if (__OFSUB__(result, 1))
  {
    __break(1u);
    goto LABEL_11;
  }
  if (!a2)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (result == 0x8000000000000001 && a2 == -1) {
    goto LABEL_14;
  }
  uint64_t v3 = (result - 1) / a2;
  BOOL v4 = __OFADD__(v3, 1);
  uint64_t v5 = v3 + 1;
  if (v4) {
    goto LABEL_12;
  }
  uint64_t result = a2 * v5;
  if ((unsigned __int128)(a2 * (__int128)v5) >> 64 != (a2 * v5) >> 63)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
  }
  return result;
}

double BlobsFile.init()@<D0>(uint64_t a1@<X8>)
{
  *(void *)char v11 = 0x200000000;
  memset(&v11[8], 0, 48);
  uint64_t v12 = 0;
  long long v8 = xmmword_2272D1890;
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v11;
  *(_OWORD *)&v9[16] = *(_OWORD *)&v11[16];
  *(_OWORD *)&v9[32] = *(_OWORD *)&v11[32];
  *(_OWORD *)&v9[48] = 0uLL;
  uint64_t v10 = MEMORY[0x263F8EE78];
  specialized Data.append<A>(contentsOf:)(64, 0);
  specialized Data._Representation.withUnsafeMutableBytes<A>(_:)((uint64_t *)&v8, (uint64_t)v11);
  uint64_t v2 = *(void *)&v9[56];
  uint64_t v3 = v10;
  double result = *(double *)v9;
  long long v5 = *(_OWORD *)&v9[8];
  long long v6 = *(_OWORD *)&v9[24];
  long long v7 = *(_OWORD *)&v9[40];
  *(_OWORD *)a1 = v8;
  *(double *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 56) = v7;
  *(void *)(a1 + 72) = v2;
  *(void *)(a1 + 80) = v3;
  return result;
}

Swift::Void __swiftcall BlobsFile.appendBlob(_:)(Swift::OpaquePointer a1)
{
  unint64_t v2 = *((void *)a1._rawValue + 2);
  if (v2 >> 61)
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v4 = static BlobsFile.round(_:to:)(4 * v2, 64);
  uint64_t v5 = Data.count.getter();
  if (__OFADD__(v5, 64))
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (((v5 + 64) & 0x8000000000000000) == 0)
  {
    if ((v4 & 0x8000000000000000) == 0)
    {
      *(void *)&long long v15 = 0x2DEADBEEFLL;
      *((void *)&v15 + 1) = v4;
      *(void *)uint64_t v16 = v5 + 64;
      memset(&v16[8], 0, 40);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v6 = *(void *)(*(void *)(v1 + 80) + 16);
      specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v6);
      uint64_t v7 = *(void *)(v1 + 80);
      *(void *)(v7 + 16) = v6 + 1;
      long long v8 = (_OWORD *)(v7 + (v6 << 6));
      long long v9 = *(_OWORD *)v16;
      _OWORD v8[2] = v15;
      void v8[3] = v9;
      long long v10 = *(_OWORD *)&v16[32];
      v8[4] = *(_OWORD *)&v16[16];
      v8[5] = v10;
      *(void *)(v1 + 80) = v7;
      LODWORD(v8) = *(_DWORD *)(v1 + 16);
      BOOL v11 = __CFADD__(v8, 1);
      int v12 = v8 + 1;
      if (!v11)
      {
        *(_DWORD *)(v1 + 16) = v12;
        int v13 = *(_DWORD *)(v1 + 20);
        uint64_t v14 = *(void *)(v1 + 72);
        v17[0] = v12;
        v17[1] = v13;
        long long v18 = *(_OWORD *)(v1 + 24);
        long long v19 = *(_OWORD *)(v1 + 40);
        long long v20 = *(_OWORD *)(v1 + 56);
        uint64_t v21 = v14;
        static BlobsFile.writeHeader(_:to:)((uint64_t)v17, (uint64_t *)v1);
        _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF8CreateML12BlobMetadataV_s5NeverOytTg503_s8F42ML9BlobsFileV10appendBlobyySaySfGFySWXEfU_AD0mN0VTf1nnc_n(&v15);
        specialized Array.withUnsafeBytes<A>(_:)((uint64_t)a1._rawValue, v1, (uint64_t)&v15, v4);
        return;
      }
      goto LABEL_10;
    }
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t BlobsFile.floatBlob(at:)(unint64_t a1)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    swift_release();
    swift_release();
    __break(1u);
LABEL_18:
    outlined release of Data((uint64_t)&v12);
    __break(1u);
    JUMPOUT(0x2271E0A9CLL);
  }
  uint64_t v3 = v1;
  uint64_t v4 = *(void *)(v1 + 80);
  if (*(void *)(v4 + 16) <= a1) {
    goto LABEL_15;
  }
  uint64_t v5 = v2;
  uint64_t v6 = (_OWORD *)(v4 + (a1 << 6));
  long long v7 = v6[3];
  v13[0] = v6[2];
  v13[1] = v7;
  long long v8 = v6[5];
  v13[2] = v6[4];
  v13[3] = v8;
  if (BlobMetadata.dataType.getter() == 1)
  {
    long long v12 = *(_OWORD *)v1;
    switch(*((void *)&v12 + 1) >> 62)
    {
      case 1:
        if ((uint64_t)v12 >> 32 < (int)v12) {
          goto LABEL_16;
        }
        uint64_t v3 = *((void *)&v12 + 1) & 0x3FFFFFFFFFFFFFFFLL;
        swift_retain();
        specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v12, (uint64_t)v12 >> 32, *((void *)&v12 + 1) & 0x3FFFFFFFFFFFFFFFLL, (uint64_t)v13);
        if (v2) {
          goto LABEL_18;
        }
        OUTLINED_FUNCTION_0_29();
        outlined release of Data((uint64_t)&v12);
        break;
      case 2:
        uint64_t v11 = *(void *)(v12 + 16);
        uint64_t v3 = *(void *)(v12 + 24);
        swift_retain();
        swift_retain();
        specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v11, v3, *((void *)&v12 + 1) & 0x3FFFFFFFFFFFFFFFLL, (uint64_t)v13);
        if (v5) {
          goto LABEL_17;
        }
        OUTLINED_FUNCTION_0_29();
        swift_release();
        swift_release();
        return v3;
      case 3:
        _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_A13Et_sAC_pSaySfGTg5037_s10Foundation4DataV06InlineB0V15withB35BytesyxxSWKXEKlFxSWKXEfU_SaySfG_TG5SWxsAC_pRi_zRi0_zlyAFIsgyrzo_SiTf1nc_n035_s8CreateML9BlobsFileV9floatBlob2atrS16GSi_tKFAFSWXEfU_0V2ML12BlobMetadataVTf1ncn_n(0, 0, 0, (uint64_t)v13);
        OUTLINED_FUNCTION_0_29();
        return v3;
      default:
        _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_A13Et_sAC_pSaySfGTg5037_s10Foundation4DataV06InlineB0V15withB35BytesyxxSWKXEKlFxSWKXEfU_SaySfG_TG5SWxsAC_pRi_zRi0_zlyAFIsgyrzo_SiTf1nc_n035_s8CreateML9BlobsFileV9floatBlob2atrS16GSi_tKFAFSWXEfU_0V2ML12BlobMetadataVTf1ncn_n(v12, *((void *)&v12 + 1) & 0xFFFFFFFFFFFFLL, BYTE14(v12), (uint64_t)v13);
        OUTLINED_FUNCTION_0_29();
        return v3;
    }
  }
  else
  {
    lazy protocol witness table accessor for type BlobsFileError and conformance BlobsFileError();
    swift_allocError();
    *long long v9 = 2;
    swift_willThrow();
  }
  return v3;
}

uint64_t *static BlobsFile.writeHeader(_:to:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = a2[1];
  switch(v3 >> 62)
  {
    case 1uLL:
      BOOL v6 = __OFSUB__(HIDWORD(v2), v2);
      LODWORD(v2) = HIDWORD(v2) - v2;
      if (v6)
      {
        __break(1u);
LABEL_10:
        __break(1u);
        JUMPOUT(0x2271E0B5CLL);
      }
      uint64_t v2 = (int)v2;
LABEL_6:
      if (v2 <= 63) {
LABEL_7:
      }
        specialized Data.append<A>(contentsOf:)(64, 0);
      return specialized Data._Representation.withUnsafeMutableBytes<A>(_:)(a2, a1);
    case 2uLL:
      uint64_t v9 = v2 + 16;
      uint64_t v7 = *(void *)(v2 + 16);
      uint64_t v8 = *(void *)(v9 + 8);
      BOOL v6 = __OFSUB__(v8, v7);
      uint64_t v2 = v8 - v7;
      if (!v6) {
        goto LABEL_6;
      }
      goto LABEL_10;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v2 = BYTE6(v3);
      goto LABEL_6;
  }
}

uint64_t specialized Data.append<A>(contentsOf:)(uint64_t a1, char a2)
{
  v35[5] = *MEMORY[0x263EF8340];
  uint64_t v31 = a1;
  char v32 = a2;
  uint64_t v29 = a1;
  char v30 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Repeated<UInt8>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousBytes);
  if (swift_dynamicCast())
  {
    outlined init with take of BinaryFloatingPoint(v33, (uint64_t)v35);
    unint64_t v3 = __swift_project_boxed_opaque_existential_1(v35, v35[3]);
    MEMORY[0x270FA5388](v3);
    uint64_t v28 = v2;
    dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)v35);
  }
  uint64_t v34 = 0;
  memset(v33, 0, sizeof(v33));
  outlined destroy of ContiguousBytes?((uint64_t)v33);
  uint64_t v5 = v31;
  uint64_t v6 = *v2;
  unint64_t v7 = v2[1];
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  switch(v7 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v6), v6)) {
        goto LABEL_43;
      }
      unint64_t v9 = HIDWORD(v6) - (int)v6;
      uint64_t v8 = v6 >> 32;
LABEL_8:
      if (__OFADD__(v8, v31)) {
        goto LABEL_37;
      }
      if (v8 + v31 < v8) {
        goto LABEL_38;
      }
      if (v8 < 0) {
        goto LABEL_39;
      }
      uint64_t v12 = Data._Representation.resetBytes(in:)();
      MEMORY[0x270FA5388](v12);
      v27[2] = v9;
      v27[3] = v31;
      uint64_t v28 = &v31;
      uint64_t result = (uint64_t)specialized Data._Representation.withUnsafeMutableBytes<A>(_:)((void *(*)(uint64_t *__return_ptr, char *, char *))partial apply for specialized closure #3 in Data.append<A>(contentsOf:), (uint64_t)v27);
      if (v15 != v5) {
        goto LABEL_23;
      }
      uint64_t v16 = result;
      uint64_t v17 = v14;
      memset(v35, 0, 15);
      if (v14 == result) {
        return result;
      }
      if (v14 < 0 || v14 >= result) {
        goto LABEL_22;
      }
      char v18 = v13;
      LOBYTE(v19) = 0;
      unint64_t v9 = (unint64_t)v33 + 14;
      uint64_t v20 = result - 1;
      break;
    case 2uLL:
      uint64_t v11 = v6 + 16;
      uint64_t v10 = *(void *)(v6 + 16);
      uint64_t v8 = *(void *)(v11 + 8);
      unint64_t v9 = v8 - v10;
      if (!__OFSUB__(v8, v10)) {
        goto LABEL_8;
      }
      goto LABEL_44;
    case 3uLL:
      goto LABEL_8;
    default:
      uint64_t v8 = BYTE6(v7);
      unint64_t v9 = BYTE6(v7);
      goto LABEL_8;
  }
  do
  {
    *((unsigned char *)v35 + v19) = v18;
    __int16 v19 = v19 + 1;
    if ((v19 & 0x100) != 0)
    {
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    if (v19 == 14)
    {
      *(void *)&v33[0] = v35[0];
      DWORD2(v33[0]) = v35[1];
      WORD6(v33[0]) = WORD2(v35[1]);
      uint64_t result = Data._Representation.append(contentsOf:)();
      if (v20 == v17) {
        return result;
      }
      LOBYTE(v19) = 0;
    }
    else if (v20 == v17)
    {
      *(void *)&v33[0] = v35[0];
      DWORD2(v33[0]) = v35[1];
      WORD6(v33[0]) = WORD2(v35[1]);
      return Data._Representation.append(contentsOf:)();
    }
    ++v17;
  }
  while (v17 < v16);
LABEL_22:
  __break(1u);
LABEL_23:
  uint64_t v21 = *v2;
  unint64_t v22 = v2[1];
  uint64_t v23 = 0;
  switch(v22 >> 62)
  {
    case 1uLL:
      uint64_t v23 = (int)v21;
      break;
    case 2uLL:
      uint64_t v23 = *(void *)(v21 + 16);
      break;
    default:
      break;
  }
  BOOL v24 = __OFADD__(v23, v9);
  uint64_t v25 = (char *)(v23 + v9);
  if (v24) {
    goto LABEL_40;
  }
  if (__OFADD__(v25, v15))
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
  }
  uint64_t v26 = 0;
  switch(v22 >> 62)
  {
    case 1uLL:
      uint64_t v26 = v21 >> 32;
      break;
    case 2uLL:
      uint64_t v26 = *(void *)(v21 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v26 = BYTE6(v22);
      break;
  }
  if (v26 < (uint64_t)&v25[v15]) {
    goto LABEL_42;
  }
  return Data._Representation.replaceSubrange(_:with:count:)();
}

const void *_ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_A13Et_sAC_pSaySfGTg5037_s10Foundation4DataV06InlineB0V15withB35BytesyxxSWKXEKlFxSWKXEfU_SaySfG_TG5SWxsAC_pRi_zRi0_zlyAFIsgyrzo_SiTf1nc_n035_s8CreateML9BlobsFileV9floatBlob2atrS16GSi_tKFAFSWXEfU_0V2ML12BlobMetadataVTf1ncn_n(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v7 = a1;
  __int16 v8 = a2;
  char v9 = BYTE2(a2);
  char v10 = BYTE3(a2);
  char v11 = BYTE4(a2);
  char v12 = BYTE5(a2);
  unint64_t v5 = *(void *)(a4 + 8);
  uint64_t v4 = *(void *)(a4 + 16);
  if (((v5 | v4) & 0x8000000000000000) != 0) {
    __break(1u);
  }
  return specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)&v7 + v4, v5 >> 2);
}

uint64_t _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF8CreateML12BlobMetadataV_s5NeverOytTg503_s8F42ML9BlobsFileV10appendBlobyySaySfGFySWXEfU_AD0mN0VTf1nnc_n(_OWORD *a1)
{
  v5[5] = *MEMORY[0x263EF8340];
  long long v1 = a1[1];
  v4[0] = *a1;
  v4[1] = v1;
  long long v2 = a1[3];
  v4[2] = a1[2];
  v4[3] = v2;
  v5[3] = MEMORY[0x263F8D3E8];
  v5[4] = MEMORY[0x263F07B80];
  v5[0] = v4;
  v5[1] = v5;
  __swift_project_boxed_opaque_existential_1(v5, MEMORY[0x263F8D3E8]);
  Data._Representation.append(contentsOf:)();
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v5);
}

uint64_t closure #2 in BlobsFile.appendBlob(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v11[3] = MEMORY[0x263F8D3E8];
  void v11[4] = MEMORY[0x263F07B80];
  v11[0] = a1;
  v11[1] = a2;
  __swift_project_boxed_opaque_existential_1(v11, MEMORY[0x263F8D3E8]);
  Data._Representation.append(contentsOf:)();
  uint64_t result = __swift_destroy_boxed_opaque_existential_0((uint64_t)v11);
  if (a1)
  {
    uint64_t v10 = a2 - a1;
    if ((unint64_t)(a2 - a1) >= *(void *)(a4 + 8)) {
      return result;
    }
  }
  else
  {
    if (!*(void *)(a4 + 8)) {
      return result;
    }
    uint64_t v10 = 0;
  }
  uint64_t result = a5 - v10;
  if (__OFSUB__(a5, v10))
  {
    __break(1u);
    goto LABEL_11;
  }
  if (result < 0)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  return specialized Data.append<A>(contentsOf:)(result, 0);
}

uint64_t specialized Array.withUnsafeBytes<A>(_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *(void *)(result + 16);
  if (!(v4 >> 61)) {
    return closure #2 in BlobsFile.appendBlob(_:)(result + 32, result + 32 + 4 * v4, a2, a3, a4);
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Error._domain.getter in conformance BlobsFileError()
{
  return MEMORY[0x270F9FB40]();
}

uint64_t protocol witness for Error._code.getter in conformance BlobsFileError()
{
  return MEMORY[0x270F9FB38]();
}

uint64_t protocol witness for Error._userInfo.getter in conformance BlobsFileError()
{
  return MEMORY[0x270F9FB48]();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance BlobsFileError()
{
  return MEMORY[0x270F9FB30]();
}

const void *specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = __DataStorage._bytes.getter();
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t result = (const void *)__DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
    uint64_t v9 = v7 + a1 - (void)result;
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t result = (const void *)__DataStorage._length.getter();
  if (!v9)
  {
    uint64_t result = 0;
    goto LABEL_9;
  }
  uint64_t v10 = *(void *)(a4 + 16);
  if ((v10 & 0x8000000000000000) == 0)
  {
    uint64_t result = (const void *)(v9 + v10);
LABEL_9:
    unint64_t v11 = *(void *)(a4 + 8);
    if ((v11 & 0x8000000000000000) == 0) {
      return specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)result, v11 >> 2);
    }
    __break(1u);
    goto LABEL_12;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t *specialized Data._Representation.withUnsafeMutableBytes<A>(_:)(uint64_t *result, uint64_t a2)
{
  uint64_t v3 = *result;
  unint64_t v2 = result[1];
  unint64_t v5 = result;
  switch(v2 >> 62)
  {
    case 1uLL:
      uint64_t v7 = v2 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)uint64_t result = xmmword_2272D1890;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v9 = v3 >> 32;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_10;
      }
      if (v9 < (int)v3) {
        goto LABEL_15;
      }
      if (__DataStorage._bytes.getter() && __OFSUB__((int)v3, __DataStorage._offset.getter())) {
        goto LABEL_16;
      }
      type metadata accessor for __DataStorage();
      swift_allocObject();
      uint64_t v11 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
      swift_release();
      uint64_t v7 = v11;
      uint64_t v9 = v3 >> 32;
LABEL_10:
      if (v9 < (int)v3)
      {
        __break(1u);
LABEL_15:
        __break(1u);
LABEL_16:
        __break(1u);
      }
      uint64_t result = (uint64_t *)specialized __DataStorage.withUnsafeMutableBytes<A>(in:apply:)((int)v3, v9, v7, (_OWORD *)a2);
      unint64_t v10 = v7 | 0x4000000000000000;
      *unint64_t v5 = v3;
LABEL_12:
      v5[1] = v10;
      return result;
    case 2uLL:
      uint64_t v12 = *result;
      uint64_t v13 = v2 & 0x3FFFFFFFFFFFFFFFLL;
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t result = (uint64_t *)specialized __DataStorage.withUnsafeMutableBytes<A>(in:apply:)(*(void *)(v12 + 16), *(void *)(v12 + 24), v13, (_OWORD *)a2);
      unint64_t v10 = v13 | 0x8000000000000000;
      *unint64_t v5 = v12;
      goto LABEL_12;
    case 3uLL:
      return result;
    default:
      unint64_t v6 = *(unsigned int *)(a2 + 8) | ((unint64_t)*(unsigned __int8 *)(a2 + 12) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 13) << 40) | ((unint64_t)*(unsigned __int8 *)(a2 + 14) << 48);
      *uint64_t result = *(void *)a2;
      result[1] = v6;
      return result;
  }
}

void *specialized Data._Representation.withUnsafeMutableBytes<A>(_:)(void *(*a1)(uint64_t *__return_ptr, char *, char *), uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v4 = *v2;
  unint64_t v3 = v2[1];
  unint64_t v5 = v2;
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)unint64_t v2 = xmmword_2272D1890;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = v4 >> 32;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_11;
      }
      if (v11 < (int)v4) {
        goto LABEL_16;
      }
      if (__DataStorage._bytes.getter() && __OFSUB__((int)v4, __DataStorage._offset.getter())) {
        goto LABEL_17;
      }
      type metadata accessor for __DataStorage();
      swift_allocObject();
      uint64_t v13 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
      swift_release();
      uint64_t v9 = v13;
      uint64_t v11 = v4 >> 32;
LABEL_11:
      if (v11 < (int)v4)
      {
        __break(1u);
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
      }
      uint64_t result = specialized __DataStorage.withUnsafeMutableBytes<A>(in:apply:)((int)v4, v11, a1);
      unint64_t v12 = v9 | 0x4000000000000000;
      *unint64_t v5 = v4;
LABEL_13:
      v5[1] = v12;
      return result;
    case 2uLL:
      *(void *)&long long v14 = *v2;
      *((void *)&v14 + 1) = v3 & 0x3FFFFFFFFFFFFFFFLL;
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t result = specialized __DataStorage.withUnsafeMutableBytes<A>(in:apply:)(*(void *)(v14 + 16), *(void *)(v14 + 24), a1);
      unint64_t v12 = *((void *)&v14 + 1) | 0x8000000000000000;
      *unint64_t v2 = v14;
      goto LABEL_13;
    case 3uLL:
      *(void *)((char *)&v14 + 7) = 0;
      *(void *)&long long v14 = 0;
      return _ss22withUnsafeMutableBytes2of_q0_xz_q0_Swq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_A13Et_sAC_ps16IndexingIteratorVys8RepeatedVyAEGG_SitTg5037_s10Foundation4DataV06InlineB0V22withbc17BytesyxxSwKXEKlFxs9KXEfU_s16hi4Vys8j4Vys5G11VGG_Sit_TG5SwxsAC_pRi_zRi0_zlyAK_SitIsgyrzo_SiTf1nc_n((uint64_t)&v14, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))a1, a2, 0);
    default:
      *(void *)&long long v14 = *v2;
      WORD4(v14) = v3;
      BYTE10(v14) = BYTE2(v3);
      BYTE11(v14) = BYTE3(v3);
      BYTE12(v14) = BYTE4(v3);
      BYTE13(v14) = BYTE5(v3);
      BYTE14(v14) = BYTE6(v3);
      uint64_t result = _ss22withUnsafeMutableBytes2of_q0_xz_q0_Swq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_A13Et_sAC_ps16IndexingIteratorVys8RepeatedVyAEGG_SitTg5037_s10Foundation4DataV06InlineB0V22withbc17BytesyxxSwKXEKlFxs9KXEfU_s16hi4Vys8j4Vys5G11VGG_Sit_TG5SwxsAC_pRi_zRi0_zlyAK_SitIsgyrzo_SiTf1nc_n((uint64_t)&v14, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))a1, a2, BYTE6(v3));
      unint64_t v8 = DWORD2(v14) | ((unint64_t)BYTE12(v14) << 32) | ((unint64_t)BYTE13(v14) << 40) | ((unint64_t)BYTE14(v14) << 48);
      *unint64_t v2 = v14;
      v2[1] = v8;
      return result;
  }
}

uint64_t specialized __DataStorage.withUnsafeMutableBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t result = __DataStorage._bytes.getter();
  if (result)
  {
    uint64_t v7 = result;
    uint64_t result = __DataStorage._offset.getter();
    if (!__OFSUB__(a1, result))
    {
      unint64_t v8 = (_OWORD *)(v7 + a1 - result);
      uint64_t result = __DataStorage._length.getter();
      long long v9 = a4[1];
      *unint64_t v8 = *a4;
      v8[1] = v9;
      long long v10 = a4[3];
      _OWORD v8[2] = a4[2];
      void v8[3] = v10;
      return result;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

char *specialized __DataStorage.withUnsafeMutableBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t result = (char *)__DataStorage._bytes.getter();
  if (!result) {
    goto LABEL_12;
  }
  unint64_t v8 = result;
  uint64_t result = (char *)__DataStorage._offset.getter();
  uint64_t v9 = a1 - (void)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v12 = __DataStorage._length.getter();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3) {
    return (char *)v14;
  }
  return result;
}

void *_ss22withUnsafeMutableBytes2of_q0_xz_q0_Swq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_A13Et_sAC_ps16IndexingIteratorVys8RepeatedVyAEGG_SitTg5037_s10Foundation4DataV06InlineB0V22withbc17BytesyxxSwKXEKlFxs9KXEfU_s16hi4Vys8j4Vys5G11VGG_Sit_TG5SwxsAC_pRi_zRi0_zlyAK_SitIsgyrzo_SiTf1nc_n(uint64_t a1, void *(*a2)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t result = a2(&v6, a1, a1 + a4);
  if (!v4) {
    return (void *)v6;
  }
  return result;
}

uint64_t specialized closure #3 in Data.append<A>(contentsOf:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if (!result) {
    return a5;
  }
  if (!__OFSUB__(a2 - result, a3))
  {
    specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v6, (unsigned char *)(result + a3), a2 - result - a3, a5, a6);
    return v6;
  }
  __break(1u);
  return result;
}

uint64_t outlined destroy of ContiguousBytes?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousBytes?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t specialized closure #3 in Data.append<A>(contentsOf:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t result = specialized closure #3 in Data.append<A>(contentsOf:)(a1, a2, a3, a4, *(void *)a5, *(unsigned char *)(a5 + 8));
  if (!v6)
  {
    *(void *)a6 = result;
    *(unsigned char *)(a6 + 8) = v9;
    *(void *)(a6 + 16) = v10;
    *(void *)(a6 + 24) = v11;
  }
  return result;
}

uint64_t partial apply for specialized closure #3 in Data.append<A>(contentsOf:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return specialized closure #3 in Data.append<A>(contentsOf:)(a1, a2, v3[2], v3[3], v3[4], a3);
}

uint64_t partial apply for closure #1 in Data.append<A>(contentsOf:)()
{
  return Data._Representation.append(contentsOf:)();
}

uint64_t outlined release of Data(uint64_t a1)
{
  return a1;
}

uint64_t getEnumTagSinglePayload for BlobsFileError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 2) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v5 = v6 - 3;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for BlobsFileError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2271E1BA4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BlobsFileError()
{
  return &type metadata for BlobsFileError;
}

uint64_t destroy for BlobsFile(uint64_t a1)
{
  outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for BlobsFile(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  outlined copy of Data._Representation(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  long long v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v7;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for BlobsFile(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  outlined copy of Data._Representation(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  outlined consume of Data._Representation(v6, v7);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for BlobsFile(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v4, v5);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v6 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for BlobsFile(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 88))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 80);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BlobsFile(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 80) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BlobsFile()
{
  return &type metadata for BlobsFile;
}

char *initializeBufferWithCopyOfBuffer for MLStyleTransfer.PersistentParameters(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    unint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
    v8(&a1[*(int *)(v9 + 48)], &a2[*(int *)(v9 + 48)], v7);
    uint64_t v10 = *(int *)(v9 + 64);
    uint64_t v11 = &a1[v10];
    uint64_t v12 = &a2[v10];
    *(void *)uint64_t v11 = *(void *)v12;
    v11[8] = v12[8];
    uint64_t v13 = a3[6];
    a1[a3[5]] = a2[a3[5]];
    uint64_t v14 = &a1[v13];
    uint64_t v15 = &a2[v13];
    if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v13], 1, v7))
    {
      uint64_t v16 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
      memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      v8(v14, v15, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v7);
    }
    uint64_t v18 = a3[8];
    *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
    *(void *)&a1[v18] = *(void *)&a2[v18];
    a1[a3[9]] = a2[a3[9]];
  }
  return a1;
}

uint64_t destroy for MLStyleTransfer.PersistentParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  unint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v8)((void *)(v4 - 8), a1, v4);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
  v8(a1 + *(int *)(v5 + 48), v4);
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  uint64_t result = __swift_getEnumTagSinglePayload(v6, 1, v4);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v8)(v6, v4);
  }
  return result;
}

char *initializeWithCopy for MLStyleTransfer.PersistentParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
  v7(&a1[*(int *)(v8 + 48)], &a2[*(int *)(v8 + 48)], v6);
  uint64_t v9 = *(int *)(v8 + 64);
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  *(void *)uint64_t v10 = *(void *)v11;
  v10[8] = v11[8];
  uint64_t v12 = a3[6];
  a1[a3[5]] = a2[a3[5]];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v12], 1, v6))
  {
    uint64_t v15 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    v7(v13, v14, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v6);
  }
  uint64_t v16 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  *(void *)&a1[v16] = *(void *)&a2[v16];
  a1[a3[9]] = a2[a3[9]];
  return a1;
}

char *assignWithCopy for MLStyleTransfer.PersistentParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
  v8(&a1[*(int *)(v9 + 48)], &a2[*(int *)(v9 + 48)], v6);
  uint64_t v10 = *(int *)(v9 + 64);
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  uint64_t v13 = *(void *)v12;
  v11[8] = v12[8];
  *(void *)uint64_t v11 = v13;
  a1[a3[5]] = a2[a3[5]];
  uint64_t v14 = a3[6];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)&a1[v14], 1, v6);
  int v18 = __swift_getEnumTagSinglePayload((uint64_t)v16, 1, v6);
  if (!EnumTagSinglePayload)
  {
    if (!v18)
    {
      v8(v15, v16, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v15, v6);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v19 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v15, v16, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v6);
LABEL_7:
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  a1[a3[9]] = a2[a3[9]];
  return a1;
}

char *initializeWithTake for MLStyleTransfer.PersistentParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
  v7(&a1[*(int *)(v8 + 48)], &a2[*(int *)(v8 + 48)], v6);
  uint64_t v9 = *(int *)(v8 + 64);
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  *(void *)uint64_t v10 = *(void *)v11;
  v10[8] = v11[8];
  uint64_t v12 = a3[6];
  a1[a3[5]] = a2[a3[5]];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v12], 1, v6))
  {
    uint64_t v15 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    v7(v13, v14, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v6);
  }
  uint64_t v16 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  *(void *)&a1[v16] = *(void *)&a2[v16];
  a1[a3[9]] = a2[a3[9]];
  return a1;
}

char *assignWithTake for MLStyleTransfer.PersistentParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
  v8(&a1[*(int *)(v9 + 48)], &a2[*(int *)(v9 + 48)], v6);
  uint64_t v10 = *(int *)(v9 + 64);
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  *(void *)uint64_t v11 = *(void *)v12;
  v11[8] = v12[8];
  uint64_t v13 = a3[6];
  a1[a3[5]] = a2[a3[5]];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)&a1[v13], 1, v6);
  int v17 = __swift_getEnumTagSinglePayload((uint64_t)v15, 1, v6);
  if (!EnumTagSinglePayload)
  {
    if (!v17)
    {
      v8(v14, v15, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v18 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v14, v15, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v6);
LABEL_7:
  uint64_t v19 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  *(void *)&a1[v19] = *(void *)&a2[v19];
  a1[a3[9]] = a2[a3[9]];
  return a1;
}

uint64_t getEnumTagSinglePayload for MLStyleTransfer.PersistentParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2271E2820);
}

uint64_t sub_2271E2820(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for MLStyleTransfer.DataSource(0);
  OUTLINED_FUNCTION_39_0(v6);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
    uint64_t v9 = a1;
  }
  else
  {
    if (a2 == 254)
    {
      unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
      if (v10 >= 2) {
        return v10 - 1;
      }
      else {
        return 0;
      }
    }
    uint64_t v8 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
    uint64_t v9 = a1 + *(int *)(a3 + 24);
  }

  return __swift_getEnumTagSinglePayload(v9, a2, v8);
}

uint64_t storeEnumTagSinglePayload for MLStyleTransfer.PersistentParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2271E28E8);
}

uint64_t sub_2271E28E8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for MLStyleTransfer.DataSource(0);
  uint64_t result = OUTLINED_FUNCTION_39_0(v8);
  if (*(_DWORD *)(v10 + 84) == a3)
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
    uint64_t v12 = a1;
  }
  else
  {
    if (a3 == 254)
    {
      *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
      return result;
    }
    uint64_t v11 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
    uint64_t v12 = a1 + *(int *)(a4 + 24);
  }

  return __swift_storeEnumTagSinglePayload(v12, a2, a2, v11);
}

uint64_t type metadata accessor for MLStyleTransfer.PersistentParameters()
{
  uint64_t result = type metadata singleton initialization cache for MLStyleTransfer.PersistentParameters;
  if (!type metadata singleton initialization cache for MLStyleTransfer.PersistentParameters) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for MLStyleTransfer.PersistentParameters()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout3();
    v3[4] = v3;
    v3[5] = &unk_2272D19B0;
    uint64_t result = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(319);
    if (v2 <= 0x3F)
    {
      v3[6] = *(void *)(result - 8) + 64;
      v3[7] = MEMORY[0x263F8CF70] + 64;
      v3[8] = MEMORY[0x263F8CF70] + 64;
      v3[9] = &unk_2272D19B0;
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t MLStyleTransfer.PersistentParameters.save(toSessionDirectory:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v95 = a1;
  uint64_t v105 = *MEMORY[0x263EF8340];
  uint64_t v3 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v92 = (uint64_t)&v80 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v7 = v6;
  uint64_t v96 = v6;
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  uint64_t v93 = (char *)&v80 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v86 = (char *)&v80 - v12;
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v80 - v14;
  uint64_t v16 = MEMORY[0x270FA5388](v13);
  uint64_t v18 = (char *)&v80 - v17;
  uint64_t v94 = (char *)&v80 - v17;
  MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v80 - v19;
  uint64_t v21 = type metadata accessor for MLStyleTransfer.DataSource(0);
  MEMORY[0x270FA5388](v21 - 8);
  uint64_t v23 = (char *)&v80 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v101 = Dictionary.init(dictionaryLiteral:)();
  uint64_t v91 = v2;
  outlined init with copy of MLStyleTransfer.DataSource(v2, (uint64_t)v23, type metadata accessor for MLStyleTransfer.DataSource);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
  uint64_t v25 = &v23[*(int *)(v24 + 48)];
  uint64_t v26 = &v23[*(int *)(v24 + 64)];
  uint64_t v81 = *(void **)v26;
  int v89 = v26[8];
  uint64_t v27 = v7 + 32;
  uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
  v28(v20, v23, v5);
  uint64_t v88 = v5;
  uint64_t v84 = v27;
  uint64_t v83 = (void (*)(char *, uint64_t, uint64_t))v28;
  v28(v18, v25, v5);
  uint64_t v90 = v20;
  id v102 = (id)URL.path.getter();
  unint64_t v103 = v29;
  uint64_t v99 = URL.path.getter();
  uint64_t v100 = v30;
  uint64_t v97 = 0;
  unint64_t v98 = 0xE000000000000000;
  unint64_t v79 = lazy protocol witness table accessor for type String and conformance String();
  OUTLINED_FUNCTION_7_39();
  OUTLINED_FUNCTION_4_50();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  URL.init(fileURLWithPath:)();
  swift_bridgeObjectRelease();
  uint64_t v31 = (void *)URL.path.getter();
  unint64_t v33 = v32;
  uint64_t v35 = v96 + 8;
  uint64_t v34 = *(void (**)(char *, uint64_t))(v96 + 8);
  v34(v15, v5);
  uint64_t v104 = MEMORY[0x263F8D310];
  id v102 = v31;
  unint64_t v103 = v33;
  specialized Dictionary.subscript.setter((uint64_t)&v102, 0x6D695F656C797473, 0xEB00000000656761);
  id v102 = (id)URL.path.getter();
  unint64_t v103 = v36;
  uint64_t v37 = URL.path.getter();
  OUTLINED_FUNCTION_12_26(v37, v38);
  uint64_t v82 = (char *)v79;
  uint64_t v83 = (void (*)(char *, uint64_t, uint64_t))v79;
  OUTLINED_FUNCTION_7_39();
  uint64_t v82 = (char *)v79;
  uint64_t v81 = (void *)v79;
  OUTLINED_FUNCTION_4_50();
  uint64_t v40 = v39;
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  URL.init(fileURLWithPath:)();
  uint64_t v41 = v34;
  uint64_t v42 = v88;
  swift_bridgeObjectRelease();
  char v43 = (void *)URL.path.getter();
  unint64_t v45 = v44;
  uint64_t v85 = v15;
  uint64_t v96 = v35;
  v41(v15, v42);
  uint64_t v104 = v40;
  id v102 = v43;
  unint64_t v103 = v45;
  specialized Dictionary.subscript.setter((uint64_t)&v102, 0xD000000000000011, 0x80000002272D9DA0);
  if (v89 != 1)
  {
    uint64_t v104 = MEMORY[0x263F8D9D0];
    id v102 = v81;
    specialized Dictionary.subscript.setter((uint64_t)&v102, 0xD000000000000011, 0x80000002272D9E00);
  }
  v41(v94, v42);
  v41(v90, v42);
  uint64_t v46 = (int *)type metadata accessor for MLStyleTransfer.PersistentParameters();
  uint64_t v47 = v91;
  BOOL v48 = *(unsigned char *)(v91 + v46[5]) == 0;
  uint64_t v49 = 7237219;
  if (*(unsigned char *)(v91 + v46[5])) {
    uint64_t v49 = 0x6574694C6E6E63;
  }
  unint64_t v50 = 0xE700000000000000;
  uint64_t v104 = v40;
  if (v48) {
    unint64_t v50 = 0xE300000000000000;
  }
  id v102 = (id)v49;
  unint64_t v103 = v50;
  specialized Dictionary.subscript.setter((uint64_t)&v102, 0x687469726F676C61, 0xE90000000000006DLL);
  double v51 = *(void **)(v47 + v46[7]);
  uint64_t v52 = MEMORY[0x263F8D6C8];
  uint64_t v104 = MEMORY[0x263F8D6C8];
  id v102 = v51;
  specialized Dictionary.subscript.setter((uint64_t)&v102, 0x645F6C6574786574, 0xEE00797469736E65);
  uint64_t v53 = *(void **)(v47 + v46[8]);
  uint64_t v104 = v52;
  id v102 = v53;
  specialized Dictionary.subscript.setter((uint64_t)&v102, 0x74735F656C797473, 0xEE006874676E6572);
  BOOL v54 = *(unsigned char *)(v47 + v46[9]) == 0;
  uint64_t v55 = 1869903201;
  if (*(unsigned char *)(v47 + v46[9])) {
    uint64_t v55 = 7696483;
  }
  unint64_t v56 = 0xE400000000000000;
  uint64_t v104 = v40;
  if (!v54) {
    unint64_t v56 = 0xE300000000000000;
  }
  id v102 = (id)v55;
  unint64_t v103 = v56;
  specialized Dictionary.subscript.setter((uint64_t)&v102, 0x656369766564, 0xE600000000000000);
  uint64_t v57 = v92;
  outlined init with copy of MLStyleTransfer.DataSource(v47 + v46[6], v92, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
  if (__swift_getEnumTagSinglePayload(v57, 1, v42) == 1)
  {
    outlined destroy of MLStyleTransfer.ModelParameters.ValidationData(v57);
  }
  else
  {
    uint64_t v58 = v41;
    uint64_t v59 = v86;
    v83(v86, v57, v42);
    id v102 = (id)URL.path.getter();
    unint64_t v103 = v60;
    uint64_t v61 = URL.path.getter();
    OUTLINED_FUNCTION_12_26(v61, v62);
    uint64_t v86 = v82;
    uint64_t v87 = v82;
    OUTLINED_FUNCTION_7_39();
    uint64_t v84 = v40;
    uint64_t v85 = v63;
    StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v64 = v85;
    URL.init(fileURLWithPath:)();
    swift_bridgeObjectRelease();
    uint64_t v65 = (void *)URL.path.getter();
    unint64_t v67 = v66;
    v58(v64, v42);
    uint64_t v104 = v40;
    id v102 = v65;
    unint64_t v103 = v67;
    specialized Dictionary.subscript.setter((uint64_t)&v102, 0x69746164696C6176, 0xEA00000000006E6FLL);
    uint64_t v68 = v59;
    uint64_t v41 = v58;
    v58(v68, v42);
  }
  uint64_t v69 = v93;
  uint64_t v70 = self;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v102 = 0;
  id v72 = objc_msgSend(v70, sel_dataWithPropertyList_format_options_error_, isa, 200, 0, &v102);

  id v73 = v102;
  if (v72)
  {
    uint64_t v74 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v76 = v75;

    URL.appendingPathComponent(_:)();
    Data.write(to:options:)();
    v41(v69, v42);
    return outlined consume of Data._Representation(v74, v76);
  }
  else
  {
    uint64_t v78 = v73;
    _convertNSErrorToError(_:)();

    return swift_willThrow();
  }
}

uint64_t MLStyleTransfer.PersistentParameters.init(sessionDirectory:)@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v108 = a2;
  uint64_t v114 = *MEMORY[0x263EF8340];
  uint64_t v3 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v5 = v4;
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = &v95[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = MEMORY[0x270FA5388](v7);
  uint64_t v12 = &v95[-v11];
  uint64_t v13 = MEMORY[0x270FA5388](v10);
  uint64_t v15 = &v95[-v14];
  uint64_t v16 = MEMORY[0x270FA5388](v13);
  uint64_t v18 = &v95[-v17];
  MEMORY[0x270FA5388](v16);
  uint64_t v20 = &v95[-v19];
  URL.appendingPathComponent(_:)();
  uint64_t v21 = v109;
  uint64_t v22 = Data.init(contentsOf:options:)();
  if (v21)
  {
    uint64_t v24 = *(void (**)(unsigned char *, uint64_t))(v5 + 8);
    v24(a1, v3);
    return ((uint64_t (*)(unsigned char *, uint64_t))v24)(v20, v3);
  }
  unint64_t v103 = v12;
  uint64_t v104 = v15;
  uint64_t v101 = v9;
  uint64_t v102 = 0;
  uint64_t v105 = v18;
  uint64_t v26 = a1;
  uint64_t v27 = v3;
  uint64_t v28 = *(void (**)(void))(v5 + 8);
  uint64_t v29 = v22;
  unint64_t v30 = v23;
  OUTLINED_FUNCTION_24_5();
  v28();
  uint64_t v31 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)&long long v111 = 0;
  id v33 = objc_msgSend(v31, sel_propertyListWithData_options_format_error_, isa, 0, 0, &v111);

  id v34 = (id)v111;
  if (!v33)
  {
    uint64_t v42 = v34;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    outlined consume of Data._Representation(v29, v30);
    OUTLINED_FUNCTION_24_5();
    return ((uint64_t (*)(void))v28)();
  }
  uint64_t v106 = v29;
  unint64_t v107 = v30;
  uint64_t v109 = v28;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v113, (uint64_t)&v111);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  if ((OUTLINED_FUNCTION_11_35() & 1) == 0)
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_19_0(v43, 0xD000000000000037);
    outlined consume of Data._Representation(v106, v107);
    OUTLINED_FUNCTION_24_5();
    v44();
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)v113);
  }
  uint64_t countAndFlagsBits = v110._countAndFlagsBits;
  specialized Dictionary.subscript.getter(0x687469726F676C61, 0xE90000000000006DLL, v110._countAndFlagsBits, &v111);
  unint64_t v36 = v109;
  uint64_t v37 = v26;
  if (!v112)
  {
    swift_bridgeObjectRelease();
    outlined destroy of Any?((uint64_t)&v111);
LABEL_14:
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_19_0(v45, 0xD000000000000044);
    outlined consume of Data._Representation(v106, v107);
    uint64_t v46 = v26;
LABEL_15:
    uint64_t v47 = v27;
LABEL_16:
    ((void (*)(unsigned char *, uint64_t))v36)(v46, v47);
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)v113);
  }
  if ((OUTLINED_FUNCTION_11_35() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  uint64_t v99 = v27;
  uint64_t v38 = countAndFlagsBits;
  Swift::Int v39 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of MLStyleTransfer.PersistentParameters.init(sessionDirectory:), v110);
  swift_bridgeObjectRelease();
  if (v39)
  {
    uint64_t v40 = v108;
    unint64_t v36 = v109;
    if (v39 != 1)
    {
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_85();
      OUTLINED_FUNCTION_19_0(v41, 0xD000000000000049);
      outlined consume of Data._Representation(v106, v107);
      OUTLINED_FUNCTION_24_5();
      v36();
      return __swift_destroy_boxed_opaque_existential_0((uint64_t)v113);
    }
  }
  else
  {
    uint64_t v40 = v108;
    unint64_t v36 = v109;
  }
  uint64_t v100 = (int *)type metadata accessor for MLStyleTransfer.PersistentParameters();
  *(unsigned char *)(v40 + v100[5]) = v39;
  specialized Dictionary.subscript.getter(0x645F6C6574786574, 0xEE00797469736E65, v38, &v111);
  if (v112)
  {
    if (OUTLINED_FUNCTION_1_44()) {
      uint64_t v48 = v110._countAndFlagsBits;
    }
    else {
      uint64_t v48 = 256;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v111);
    uint64_t v48 = 256;
  }
  *(void *)(v40 + v100[7]) = v48;
  uint64_t v49 = OUTLINED_FUNCTION_10_29();
  specialized Dictionary.subscript.getter(v49 & 0xFFFFFFFFFFFFLL | 0x7473000000000000, 0xEE006874676E6572, v38, v50);
  if (v112)
  {
    if (OUTLINED_FUNCTION_1_44())
    {
      uint64_t v51 = v110._countAndFlagsBits;
      goto LABEL_29;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v111);
  }
  uint64_t v51 = 5;
LABEL_29:
  *(void *)(v40 + v100[8]) = v51;
  specialized Dictionary.subscript.getter(0x656369766564, 0xE600000000000000, v38, &v111);
  if (v112)
  {
    if (OUTLINED_FUNCTION_1_44())
    {
      v52.value = _MLDevice.init(rawValue:)(v110).value & 1;
      goto LABEL_34;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v111);
  }
  v52.value = CreateML__MLDevice_auto;
LABEL_34:
  *(CreateML::_MLDevice_optional *)(v40 + v100[9]) = v52;
  uint64_t v53 = OUTLINED_FUNCTION_10_29();
  specialized Dictionary.subscript.getter(v53 & 0xFFFFFFFFFFFFLL | 0x6D69000000000000, 0xEB00000000656761, v38, v54);
  if (!v112)
  {
    swift_bridgeObjectRelease();
    outlined destroy of Any?((uint64_t)&v111);
LABEL_40:
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_19_0(v59, 0xD000000000000039);
    outlined consume of Data._Representation(v106, v107);
    uint64_t v46 = v26;
    uint64_t v47 = v99;
    goto LABEL_16;
  }
  if ((OUTLINED_FUNCTION_1_44() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_40;
  }
  uint64_t v55 = v110._countAndFlagsBits;
  id object = v110._object;
  id v97 = self;
  id v57 = objc_msgSend(v97, sel_defaultManager);
  uint64_t v58 = (void *)MEMORY[0x22A674AE0](v55, object);
  LODWORD(v98) = objc_msgSend(v57, sel_fileExistsAtPath_, v58);

  if (v98)
  {
    URL.init(fileURLWithPath:)();
    swift_bridgeObjectRelease();
    unint64_t v36 = v109;
  }
  else
  {
    URL.init(fileURLWithPath:)();
    swift_bridgeObjectRelease();
    URL.path.getter();
    unint64_t v36 = v60;
    URL.appendingPathComponent(_:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_9_32();
    v36();
  }
  unint64_t v61 = OUTLINED_FUNCTION_8_33();
  specialized Dictionary.subscript.getter(v61, v62, v38, v63);
  if (!v112)
  {
    swift_bridgeObjectRelease();
    outlined destroy of Any?((uint64_t)&v111);
LABEL_48:
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_19_0(v70, 0xD00000000000003FLL);
    outlined consume of Data._Representation(v106, v107);
    uint64_t v27 = v99;
    ((void (*)(unsigned char *, uint64_t))v36)(v26, v99);
    uint64_t v46 = v105;
    goto LABEL_15;
  }
  if ((OUTLINED_FUNCTION_1_44() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_48;
  }
  uint64_t v65 = v110._countAndFlagsBits;
  uint64_t v64 = v110._object;
  id v66 = objc_msgSend(v97, sel_defaultManager);
  unint64_t v67 = (void *)MEMORY[0x22A674AE0](v65, v64);
  unsigned int v68 = objc_msgSend(v66, sel_fileExistsAtPath_, v67);

  URL.init(fileURLWithPath:)();
  swift_bridgeObjectRelease();
  if (v68)
  {
    uint64_t v69 = v109;
  }
  else
  {
    URL.path.getter();
    uint64_t v69 = v71;
    URL.appendingPathComponent(_:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_9_32();
    v69();
  }
  uint64_t v72 = v108;
  unint64_t v73 = OUTLINED_FUNCTION_8_33();
  specialized Dictionary.subscript.getter(v73, v74, v38, v75);
  if (!v112)
  {
    outlined destroy of Any?((uint64_t)&v111);
    goto LABEL_55;
  }
  if ((OUTLINED_FUNCTION_1_44() & 1) == 0)
  {
LABEL_55:
    uint64_t v76 = 0;
    int v96 = 1;
LABEL_56:
    specialized Dictionary.subscript.getter(0x69746164696C6176, 0xEA00000000006E6FLL, v38, &v111);
    swift_bridgeObjectRelease();
    uint64_t v98 = v76;
    if (v112)
    {
      char v77 = OUTLINED_FUNCTION_1_44();
      uint64_t v78 = v99;
      if (v77)
      {
        uint64_t v79 = v110._countAndFlagsBits;
        uint64_t v80 = v110._object;
        id v81 = objc_msgSend(v97, sel_defaultManager);
        uint64_t v82 = (void *)MEMORY[0x22A674AE0](v79, v80);
        LODWORD(v97) = objc_msgSend(v81, sel_fileExistsAtPath_, v82);

        if (v97)
        {
          uint64_t v83 = v101;
          URL.init(fileURLWithPath:)();
          outlined consume of Data._Representation(v106, v107);
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_24_5();
          v84();
        }
        else
        {
          uint64_t v86 = v104;
          URL.init(fileURLWithPath:)();
          swift_bridgeObjectRelease();
          uint64_t v87 = v86;
          URL.path.getter();
          uint64_t v83 = v101;
          URL.appendingPathComponent(_:)();
          swift_bridgeObjectRelease();
          outlined consume of Data._Representation(v106, v107);
          uint64_t v88 = v109;
          OUTLINED_FUNCTION_24_5();
          v88();
          ((void (*)(unsigned char *, uint64_t))v88)(v87, v78);
        }
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v113);
        uint64_t v89 = v72 + v100[6];
        uint64_t v85 = *(void (**)(uint64_t, unsigned char *, uint64_t))(v5 + 32);
        v85(v89, v83, v78);
        __swift_storeEnumTagSinglePayload(v89, 0, 1, v78);
        goto LABEL_65;
      }
      outlined consume of Data._Representation(v106, v107);
    }
    else
    {
      outlined consume of Data._Representation(v106, v107);
      outlined destroy of Any?((uint64_t)&v111);
      uint64_t v78 = v99;
    }
    ((void (*)(unsigned char *, uint64_t))v69)(v37, v78);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v113);
    __swift_storeEnumTagSinglePayload(v72 + v100[6], 1, 1, v78);
    uint64_t v85 = *(void (**)(uint64_t, unsigned char *, uint64_t))(v5 + 32);
LABEL_65:
    uint64_t v90 = v105;
    uint64_t v91 = v103;
    uint64_t v92 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
    uint64_t v93 = v72 + *(int *)(v92 + 48);
    uint64_t v94 = v72 + *(int *)(v92 + 64);
    v85(v72, v90, v78);
    uint64_t result = ((uint64_t (*)(uint64_t, unsigned char *, uint64_t))v85)(v93, v91, v78);
    *(void *)uint64_t v94 = v98;
    *(unsigned char *)(v94 + 8) = v96;
    return result;
  }
  uint64_t v76 = v110._countAndFlagsBits;
  if ((v110._countAndFlagsBits & 0x8000000000000000) == 0)
  {
    int v96 = 0;
    goto LABEL_56;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined init with copy of MLStyleTransfer.DataSource(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of MLStyleTransfer.ModelParameters.ValidationData(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t OUTLINED_FUNCTION_1_44()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_7_39()
{
  return v0 - 152;
}

unint64_t OUTLINED_FUNCTION_8_33()
{
  return 0xD000000000000011;
}

uint64_t OUTLINED_FUNCTION_10_29()
{
  return 0x5F656C797473;
}

uint64_t OUTLINED_FUNCTION_11_35()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_12_26(uint64_t result, uint64_t a2)
{
  *(void *)(v2 - 152) = result;
  *(void *)(v2 - 144) = a2;
  *(void *)(v2 - 168) = 0;
  *(void *)(v2 - 160) = 0xE000000000000000;
  return result;
}

double MLSoundClassifier.FeatureExtractionParameters.featureExtractionTimeWindowSize.getter()
{
  double result = *(double *)(v0 + 8);
  if (*(unsigned char *)(v0 + 16)) {
    return 0.975;
  }
  return result;
}

void MLSoundClassifier.FeatureExtractionParameters.featureExtractionTimeWindowSize.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
  *(unsigned char *)(v1 + 16) = 0;
}

double MLSoundClassifier.FeatureExtractionParameters.overlapFactor.getter()
{
  return *(double *)v0;
}

void MLSoundClassifier.FeatureExtractionParameters.overlapFactor.setter(double a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*MLSoundClassifier.FeatureExtractionParameters.overlapFactor.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

void key path getter for MLSoundClassifier.FeatureExtractionParameters.featureExtractionTimeWindowSize : MLSoundClassifier.FeatureExtractionParameters(double *a1@<X8>)
{
  *a1 = MLSoundClassifier.FeatureExtractionParameters.featureExtractionTimeWindowSize.getter();
}

void *(*MLSoundClassifier.FeatureExtractionParameters.featureExtractionTimeWindowSize.modify(uint64_t a1))(void *result)
{
  *(void *)(a1 + 8) = v1;
  double v2 = *(double *)(v1 + 8);
  if (*(unsigned char *)(v1 + 16)) {
    double v2 = 0.975;
  }
  *(double *)a1 = v2;
  return MLSoundClassifier.FeatureExtractionParameters.featureExtractionTimeWindowSize.modify;
}

void *MLSoundClassifier.FeatureExtractionParameters.featureExtractionTimeWindowSize.modify(void *result)
{
  uint64_t v1 = result[1];
  *(void *)(v1 + 8) = *result;
  *(unsigned char *)(v1 + 16) = 0;
  return result;
}

void MLSoundClassifier.FeatureExtractionParameters.featureExtractor.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 32);
  *(void *)a1 = *(void *)(v1 + 24);
  *(unsigned char *)(a1 + 8) = v2;
}

uint64_t MLSoundClassifier.FeatureExtractionParameters.featureExtractor.setter(uint64_t result)
{
  char v2 = *(unsigned char *)(result + 8);
  *(void *)(v1 + 24) = *(void *)result;
  *(unsigned char *)(v1 + 32) = v2;
  return result;
}

uint64_t (*MLSoundClassifier.FeatureExtractionParameters.featureExtractor.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t *MLSoundClassifier.FeatureExtractionParameters.init(overlapFactor:featureExtractor:)@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v3 = *result;
  char v4 = *((unsigned char *)result + 8);
  *(double *)a2 = a3;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  *(void *)(a2 + 24) = v3;
  *(unsigned char *)(a2 + 32) = v4;
  return result;
}

uint64_t MLSoundClassifier.FeatureExtractionParameters.init(overlapFactor:featureExtractor:featureExtractionTimeWindowSize:)@<X0>(uint64_t result@<X0>, double a2@<X1>, char a3@<W2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v6 = *(void *)&a2;
  uint64_t v9 = *(void *)result;
  char v10 = *(unsigned char *)(result + 8);
  if ((a3 & 1) == 0)
  {
    if (a2 < 0.5)
    {
      OUTLINED_FUNCTION_5_15();
      v11._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_3_20();
      v11._id object = (void *)0x80000002272D63E0;
      String.append(_:)(v11);
      OUTLINED_FUNCTION_3_55();
      OUTLINED_FUNCTION_4_15((uint64_t)". Clamping it to ");
      OUTLINED_FUNCTION_3_55();
      v12._uint64_t countAndFlagsBits = 46;
      v12._id object = (void *)0xE100000000000000;
      String.append(_:)(v12);
      os_log_type_t v13 = static os_log_type_t.default.getter();
      log(_:type:)(v17, v13);
      uint64_t v6 = 0x3FE0000000000000;
LABEL_6:
      double result = swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    if (a2 > 15.0)
    {
      OUTLINED_FUNCTION_5_15();
      v14._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_3_20();
      v14._id object = (void *)0x80000002272D6360;
      String.append(_:)(v14);
      OUTLINED_FUNCTION_4_51();
      OUTLINED_FUNCTION_4_15((uint64_t)". Clamping it to ");
      OUTLINED_FUNCTION_4_51();
      v15._uint64_t countAndFlagsBits = 46;
      v15._id object = (void *)0xE100000000000000;
      String.append(_:)(v15);
      os_log_type_t v16 = static os_log_type_t.default.getter();
      log(_:type:)(v17, v16);
      uint64_t v6 = 0x402E000000000000;
      goto LABEL_6;
    }
  }
LABEL_7:
  *(double *)a4 = a5;
  *(void *)(a4 + 8) = v6;
  *(unsigned char *)(a4 + 16) = a3 & 1;
  *(void *)(a4 + 24) = v9;
  *(unsigned char *)(a4 + 32) = v10;
  return result;
}

void sub_2271E4428(double *a1)
{
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for MLSoundClassifier.FeatureExtractionParameters(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && *(unsigned char *)(a1 + 33))
    {
      int v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
      if (v3 <= 1) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MLSoundClassifier.FeatureExtractionParameters(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MLSoundClassifier.FeatureExtractionParameters()
{
  return &type metadata for MLSoundClassifier.FeatureExtractionParameters;
}

uint64_t OUTLINED_FUNCTION_3_55()
{
  return Double.write<A>(to:)();
}

uint64_t OUTLINED_FUNCTION_4_51()
{
  return Double.write<A>(to:)();
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MLTextClassifier.prediction(from:)(Swift::String from)
{
  int v2 = *v1;
  unsigned int v3 = (void *)MEMORY[0x22A674AE0](from._countAndFlagsBits, from._object);
  id v4 = objc_msgSend(v2, sel_predictedLabelForString_, v3);

  if (v4)
  {
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  uint64_t v8 = v5;
  uint64_t v9 = (void *)v7;
  result._id object = v9;
  result._uint64_t countAndFlagsBits = v8;
  return result;
}

void MLTextClassifier.predictions(from:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for MLTextClassifier();
  uint64_t v4 = OUTLINED_FUNCTION_17(v3);
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_1_45(v5, v19);
  uint64_t v6 = *(void *)(v2 + 16);
  if (v6)
  {
    uint64_t v20 = MEMORY[0x263F8EE78];
    OUTLINED_FUNCTION_7_40();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    unint64_t v7 = *v0;
    uint64_t v8 = (uint64_t *)(v2 + 40);
    do
    {
      uint64_t v9 = *(v8 - 1);
      uint64_t v10 = *v8;
      swift_bridgeObjectRetain();
      Swift::String v11 = (void *)MEMORY[0x22A674AE0](v9, v10);
      id v12 = objc_msgSend(v7, sel_predictedLabelForString_, v11);

      if (v12)
      {
        uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v15 = v14;
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v13 = 0;
        unint64_t v15 = 0xE000000000000000;
      }
      unint64_t v17 = *(void *)(v20 + 16);
      unint64_t v16 = *(void *)(v20 + 24);
      if (v17 >= v16 >> 1)
      {
        OUTLINED_FUNCTION_0_30(v16);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      v8 += 2;
      *(void *)(v20 + 16) = v17 + 1;
      uint64_t v18 = v20 + 16 * v17;
      *(void *)(v18 + 32) = v13;
      *(void *)(v18 + 40) = v15;
      --v6;
    }
    while (v6);
  }
  outlined destroy of MLTextClassifier((uint64_t)v0);
  OUTLINED_FUNCTION_8_1();
}

{
  uint64_t v0;
  void **v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t ML14_UntypedColumnC_s5Error_pTgm5;
  char v25;
  char v26;
  uint64_t v27;
  void **v28;
  uint64_t v29;
  uint64_t v30;

  OUTLINED_FUNCTION_9_0();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = type metadata accessor for MLTextClassifier();
  unint64_t v7 = OUTLINED_FUNCTION_17(v6);
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_41_0();
  uint64_t v8 = *(void **)v3;
  LOBYTE(v3) = *(unsigned char *)(v3 + 8);
  outlined copy of Result<_DataTable, Error>(v8, v3);
  uint64_t v9 = specialized Array<A>.init(_:)(v8, v3);
  outlined init with copy of MLTextClassifier(v0, (uint64_t)v1);
  uint64_t v10 = *(void *)(v9 + 16);
  if (v10)
  {
    uint64_t v29 = v5;
    unint64_t v30 = MEMORY[0x263F8EE78];
    OUTLINED_FUNCTION_7_40();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v27 = v9;
    uint64_t v28 = v1;
    Swift::String v11 = *v1;
    id v12 = (uint64_t *)(v9 + 40);
    do
    {
      unint64_t v14 = *(v12 - 1);
      uint64_t v13 = *v12;
      swift_bridgeObjectRetain();
      unint64_t v15 = (void *)MEMORY[0x22A674AE0](v14, v13);
      unint64_t v16 = objc_msgSend(v11, sel_predictedLabelForString_, v15, v27);

      if (v16)
      {
        unint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v19 = v18;
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        unint64_t v17 = 0;
        uint64_t v19 = 0xE000000000000000;
      }
      uint64_t v21 = *(void *)(v30 + 16);
      uint64_t v20 = *(void *)(v30 + 24);
      if (v21 >= v20 >> 1)
      {
        OUTLINED_FUNCTION_0_30(v20);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      v12 += 2;
      *(void *)(v30 + 16) = v21 + 1;
      uint64_t v22 = v30 + 16 * v21;
      *(void *)(v22 + 32) = v17;
      *(void *)(v22 + 40) = v19;
      --v10;
    }
    while (v10);
    uint64_t v5 = v29;
    uint64_t v1 = v28;
  }
  outlined destroy of MLTextClassifier((uint64_t)v1);
  unint64_t v23 = swift_bridgeObjectRelease();
  MEMORY[0x270FA5388](v23);
  OUTLINED_FUNCTION_2_56();
  uint64_t ML14_UntypedColumnC_s5Error_pTgm5 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
  uint64_t v26 = v25;
  swift_bridgeObjectRelease();
  *(void *)uint64_t v5 = ML14_UntypedColumnC_s5Error_pTgm5;
  *(unsigned char *)(v5 + 8) = v26 & 1;
  OUTLINED_FUNCTION_8_1();
}

uint64_t MLTextClassifier.predictionWithConfidence(from:)()
{
  return MLTextClassifier.predictionWithAllLabelsAndConfidences(text:)();
}

uint64_t MLTextClassifier.predictionWithAllLabelsAndConfidences(text:)()
{
  uint64_t v1 = *(void *)(v0 + 8);
  unint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = NLModel.predictedLabelHypotheses(for:maximumCount:)();
  uint64_t v4 = (void *)v3;
  unint64_t v5 = *(void *)(v3 + 16);
  if (v2 < v5)
  {
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(void *)uint64_t v6 = 0xD000000000000037;
    *(void *)(v6 + 8) = 0x80000002272D9E20;
    *(_OWORD *)(v6 + 16) = 0u;
    *(_OWORD *)(v6 + 32) = 0u;
    *(unsigned char *)(v6 + 48) = 0;
    swift_willThrow();
    return (uint64_t)v4;
  }
  if (v5 == v2) {
    return (uint64_t)v4;
  }
  specialized _NativeDictionary.makeIterator()(&v55, v3);
  int64_t v7 = v58;
  unint64_t v8 = v59;
  int64_t v9 = (unint64_t)(v57 + 64) >> 6;
  double v10 = 0.0;
  if (!v59) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v11 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  unint64_t v12 = v11 | (v7 << 6);
  while (1)
  {
    double v10 = v10 + *(double *)(*(void *)(v55 + 56) + 8 * v12);
    if (v8) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v13 = v7 + 1;
    if (__OFADD__(v7, 1)) {
      break;
    }
    if (v13 >= v9) {
      goto LABEL_26;
    }
    unint64_t v14 = *(void *)(v56 + 8 * v13);
    int64_t v15 = v7 + 1;
    if (!v14)
    {
      int64_t v15 = v7 + 2;
      if (v7 + 2 >= v9) {
        goto LABEL_26;
      }
      unint64_t v14 = *(void *)(v56 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v7 + 3;
        if (v7 + 3 >= v9) {
          goto LABEL_26;
        }
        unint64_t v14 = *(void *)(v56 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v7 + 4;
          if (v7 + 4 >= v9) {
            goto LABEL_26;
          }
          unint64_t v14 = *(void *)(v56 + 8 * v15);
          if (!v14)
          {
            int64_t v15 = v7 + 5;
            if (v7 + 5 >= v9) {
              goto LABEL_26;
            }
            unint64_t v14 = *(void *)(v56 + 8 * v15);
            if (!v14)
            {
              int64_t v15 = v7 + 6;
              if (v7 + 6 >= v9)
              {
LABEL_26:
                swift_bridgeObjectRetain_n();
                swift_release();
                uint64_t v17 = v4[2];
                swift_bridgeObjectRelease();
                double v18 = (1.0 - v10) / (double)(uint64_t)(v2 - v17);
                uint64_t v19 = v1 + 56;
                uint64_t v20 = 1 << *(unsigned char *)(v1 + 32);
                uint64_t v21 = -1;
                if (v20 < 64) {
                  uint64_t v21 = ~(-1 << v20);
                }
                unint64_t v22 = v21 & *(void *)(v1 + 56);
                int64_t v23 = (unint64_t)(v20 + 63) >> 6;
                swift_bridgeObjectRetain();
                int64_t v24 = 0;
                uint64_t v52 = v1 + 56;
                uint64_t v53 = v1;
                int64_t v54 = v23;
                while (1)
                {
                  if (v22)
                  {
                    unint64_t v25 = __clz(__rbit64(v22));
                    v22 &= v22 - 1;
                    unint64_t v26 = v25 | (v24 << 6);
                  }
                  else
                  {
                    int64_t v27 = v24 + 1;
                    if (__OFADD__(v24, 1)) {
                      goto LABEL_60;
                    }
                    if (v27 >= v23)
                    {
LABEL_57:
                      swift_release();
                      return (uint64_t)v4;
                    }
                    unint64_t v28 = *(void *)(v19 + 8 * v27);
                    ++v24;
                    if (!v28)
                    {
                      int64_t v24 = v27 + 1;
                      if (v27 + 1 >= v23) {
                        goto LABEL_57;
                      }
                      unint64_t v28 = *(void *)(v19 + 8 * v24);
                      if (!v28)
                      {
                        int64_t v24 = v27 + 2;
                        if (v27 + 2 >= v23) {
                          goto LABEL_57;
                        }
                        unint64_t v28 = *(void *)(v19 + 8 * v24);
                        if (!v28)
                        {
                          int64_t v29 = v27 + 3;
                          if (v29 >= v23) {
                            goto LABEL_57;
                          }
                          unint64_t v28 = *(void *)(v19 + 8 * v29);
                          if (!v28)
                          {
                            while (1)
                            {
                              int64_t v24 = v29 + 1;
                              if (__OFADD__(v29, 1)) {
                                goto LABEL_61;
                              }
                              if (v24 >= v23) {
                                goto LABEL_57;
                              }
                              unint64_t v28 = *(void *)(v19 + 8 * v24);
                              ++v29;
                              if (v28) {
                                goto LABEL_44;
                              }
                            }
                          }
                          int64_t v24 = v29;
                        }
                      }
                    }
LABEL_44:
                    unint64_t v22 = (v28 - 1) & v28;
                    unint64_t v26 = __clz(__rbit64(v28)) + (v24 << 6);
                  }
                  unint64_t v30 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v26);
                  uint64_t v32 = *v30;
                  uint64_t v31 = v30[1];
                  uint64_t v33 = v4[2];
                  swift_bridgeObjectRetain();
                  if (v33
                    && (swift_bridgeObjectRetain(),
                        specialized __RawDictionaryStorage.find<A>(_:)(v32, v31),
                        char v35 = v34,
                        swift_bridgeObjectRelease(),
                        (v35 & 1) != 0))
                  {
                    swift_bridgeObjectRelease();
                  }
                  else
                  {
                    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                    unint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(v32, v31);
                    uint64_t v39 = v4[2];
                    BOOL v40 = (v38 & 1) == 0;
                    Swift::Int v41 = v39 + v40;
                    if (__OFADD__(v39, v40)) {
                      goto LABEL_62;
                    }
                    unint64_t v42 = v37;
                    char v43 = v38;
                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Double>);
                    Swift::Bool v44 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v41);
                    int64_t v23 = v54;
                    if (v44)
                    {
                      unint64_t v45 = specialized __RawDictionaryStorage.find<A>(_:)(v32, v31);
                      if ((v43 & 1) != (v46 & 1)) {
                        goto LABEL_64;
                      }
                      unint64_t v42 = v45;
                    }
                    if (v43)
                    {
                      *(double *)(v4[7] + 8 * v42) = v18;
                    }
                    else
                    {
                      v4[(v42 >> 6) + 8] |= 1 << v42;
                      uint64_t v47 = (uint64_t *)(v4[6] + 16 * v42);
                      *uint64_t v47 = v32;
                      v47[1] = v31;
                      *(double *)(v4[7] + 8 * v42) = v18;
                      uint64_t v48 = v4[2];
                      BOOL v49 = __OFADD__(v48, 1);
                      uint64_t v50 = v48 + 1;
                      if (v49) {
                        goto LABEL_63;
                      }
                      v4[2] = v50;
                      swift_bridgeObjectRetain();
                    }
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    uint64_t v19 = v52;
                    uint64_t v1 = v53;
                  }
                }
              }
              unint64_t v14 = *(void *)(v56 + 8 * v15);
              if (!v14)
              {
                int64_t v16 = v7 + 7;
                do
                {
                  if (v16 >= v9) {
                    goto LABEL_26;
                  }
                  unint64_t v14 = *(void *)(v56 + 8 * v16++);
                }
                while (!v14);
                int64_t v15 = v16 - 1;
              }
            }
          }
        }
      }
    }
    unint64_t v8 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v7 = v15;
  }
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

#error "2271E4C1C: call analysis failed (funcsize=79)"

void MLTextClassifier.predictionsWithConfidence(from:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = type metadata accessor for MLTextClassifier();
  uint64_t v8 = OUTLINED_FUNCTION_17(v7);
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_41_0();
  int64_t v9 = *(void **)v4;
  LOBYTE(v4) = *(unsigned char *)(v4 + 8);
  outlined copy of Result<_DataTable, Error>(v9, v4);
  uint64_t v10 = specialized Array<A>.init(_:)(v9, v4);
  outlined init with copy of MLTextClassifier(v0, v2);
  uint64_t v11 = *(void *)(v10 + 16);
  if (v11)
  {
    uint64_t v23 = v6;
    uint64_t v24 = MEMORY[0x263F8EE78];
    char v12 = OUTLINED_FUNCTION_7_40();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12, v11, 0);
    uint64_t v13 = v10 + 40;
    while (1)
    {
      swift_bridgeObjectRetain();
      uint64_t v14 = MLTextClassifier.predictionWithAllLabelsAndConfidences(text:)();
      if (v1) {
        break;
      }
      uint64_t v15 = v14;
      swift_bridgeObjectRelease();
      unint64_t v17 = *(void *)(v24 + 16);
      unint64_t v16 = *(void *)(v24 + 24);
      if (v17 >= v16 >> 1)
      {
        char v18 = OUTLINED_FUNCTION_0_30(v16);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18, v17 + 1, 1);
      }
      v13 += 16;
      *(void *)(v24 + 16) = v17 + 1;
      *(void *)(v24 + 8 * v17 + 32) = v15;
      if (!--v11)
      {
        uint64_t v6 = v23;
        goto LABEL_9;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of MLTextClassifier(v2);
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_9:
    outlined destroy of MLTextClassifier(v2);
    uint64_t v19 = swift_bridgeObjectRelease();
    MEMORY[0x270FA5388](v19);
    OUTLINED_FUNCTION_2_56();
    uint64_t ML14_UntypedColumnC_s5Error_pTgm5 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
    char v22 = v21;
    swift_bridgeObjectRelease();
    *(void *)uint64_t v6 = ML14_UntypedColumnC_s5Error_pTgm5;
    *(unsigned char *)(v6 + 8) = v22 & 1;
  }
  OUTLINED_FUNCTION_8_1();
}

uint64_t outlined init with copy of MLTextClassifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MLTextClassifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of MLTextClassifier(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MLTextClassifier();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

BOOL OUTLINED_FUNCTION_0_30@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t OUTLINED_FUNCTION_1_45@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  return outlined init with copy of MLTextClassifier(v2, (uint64_t)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0));
}

uint64_t OUTLINED_FUNCTION_7_40()
{
  return 0;
}

uint64_t MLFewShotSoundClassifier.performValidationStep(on:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v31[0] = a1;
  v31[1] = a2;
  type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(0);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?);
  uint64_t v9 = OUTLINED_FUNCTION_17(v8);
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_33();
  uint64_t v12 = v10 - v11;
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)v31 - v14;
  uint64_t v16 = type metadata accessor for Tensor();
  OUTLINED_FUNCTION_1_46();
  uint64_t v18 = v17;
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_33();
  uint64_t v22 = v20 - v21;
  MEMORY[0x270FA5388](v23);
  unint64_t v25 = (char *)v31 - v24;
  __swift_storeEnumTagSinglePayload((uint64_t)v15, 1, 1, v16);
  int v26 = *(_DWORD *)(v3 + 24);
  uint64_t v27 = type metadata accessor for MLFewShotSoundClassifier();
  int32x2_t v28 = *(int32x2_t *)(v3 + 28);
  outlined init with copy of MLFewShotSoundClassifier.TemporalClassifier(v3 + *(int *)(v27 + 40), (uint64_t)v7);
  v31[4] = a3;
  int v32 = v26;
  int32x2_t v33 = vrev64_s32(v28);
  char v34 = v15;
  lazy protocol witness table accessor for type MLFewShotSoundClassifier.TemporalClassifier and conformance MLFewShotSoundClassifier.TemporalClassifier();
  valueWithGradient<A>(at:of:)();
  outlined destroy of MLFewShotSoundClassifier.TemporalClassifier.Output((uint64_t)v7, (void (*)(void))type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier);
  outlined init with copy of Tensor?((uint64_t)v15, v12);
  uint64_t result = __swift_getEnumTagSinglePayload(v12, 1, v16);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32))(v22, v12, v16);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v15, &demangling cache variable for type metadata for Tensor?);
    swift_bridgeObjectRelease();
    (*(void (**)(void, char *, uint64_t))(v18 + 16))(v31[0], v25, v16);
    softmax(_:alongAxis:)();
    unint64_t v30 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    v30(v22, v16);
    return ((uint64_t (*)(char *, uint64_t))v30)(v25, v16);
  }
  return result;
}

uint64_t closure #1 in MLFewShotSoundClassifier.performStep(on:)@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, float a5@<S0>, float a6@<S1>, float a7@<S2>)
{
  uint64_t v149 = a3;
  unint64_t v159 = a1;
  v147[5] = a4;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?);
  uint64_t v12 = OUTLINED_FUNCTION_17(v11);
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_33_0();
  uint64_t v148 = v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComputeDevice?);
  uint64_t v15 = OUTLINED_FUNCTION_17(v14);
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_33_0();
  uint64_t v167 = v16;
  uint64_t v161 = type metadata accessor for TensorShape();
  OUTLINED_FUNCTION_1_46();
  uint64_t v169 = v17;
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_33_0();
  uint64_t v160 = v19;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LossReduction?);
  uint64_t v21 = OUTLINED_FUNCTION_17(v20);
  MEMORY[0x270FA5388](v21);
  OUTLINED_FUNCTION_33_0();
  uint64_t v157 = v22;
  uint64_t v23 = type metadata accessor for Tensor();
  uint64_t v166 = *(void (**)(unint64_t, char *, uint64_t))(v23 - 8);
  uint64_t v168 = v23 - 8;
  OUTLINED_FUNCTION_1_46();
  uint64_t v175 = v24;
  MEMORY[0x270FA5388](v25);
  OUTLINED_FUNCTION_33();
  v147[2] = v26 - v27;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v28);
  OUTLINED_FUNCTION_45_3();
  uint64_t v151 = v29;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v30);
  OUTLINED_FUNCTION_45_3();
  uint64_t v158 = v31;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v32);
  OUTLINED_FUNCTION_45_3();
  uint64_t v163 = v33;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v34);
  OUTLINED_FUNCTION_45_3();
  uint64_t v162 = v35;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v36);
  OUTLINED_FUNCTION_45_3();
  uint64_t v164 = v37;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v38);
  OUTLINED_FUNCTION_45_3();
  uint64_t v171 = v39;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v40);
  OUTLINED_FUNCTION_45_3();
  uint64_t v172 = v41;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v42);
  OUTLINED_FUNCTION_45_3();
  uint64_t v174 = v43;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v44);
  OUTLINED_FUNCTION_45_3();
  uint64_t v177 = v45;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v46);
  OUTLINED_FUNCTION_45_3();
  uint64_t v176 = v47;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v48);
  OUTLINED_FUNCTION_45_3();
  uint64_t v173 = v49;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v50);
  OUTLINED_FUNCTION_45_3();
  uint64_t v170 = v51;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v52);
  OUTLINED_FUNCTION_45_3();
  uint64_t v165 = v53;
  OUTLINED_FUNCTION_20_3();
  uint64_t v55 = MEMORY[0x270FA5388](v54);
  uint64_t v178 = (char *)v147 - v56;
  MEMORY[0x270FA5388](v55);
  uint64_t v58 = (char *)v147 - v57;
  uint64_t v59 = type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier.Output(0);
  uint64_t v60 = v59 - 8;
  uint64_t v156 = v59 - 8;
  MEMORY[0x270FA5388](v59);
  uint64_t v62 = (char *)v147 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataSample<Tensor, Tensor>);
  DataSample.features.getter();
  type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(0);
  lazy protocol witness table accessor for type MLFewShotSoundClassifier.TemporalClassifier and conformance MLFewShotSoundClassifier.TemporalClassifier();
  uint64_t v153 = v62;
  Layer.callAsFunction(_:)();
  uint64_t v64 = *(void (**)(void))(v175 + 8);
  OUTLINED_FUNCTION_0_31();
  v64();
  uint64_t v65 = &v62[*(int *)(v60 + 36)];
  id v66 = v64;
  *(void *)&long long v154 = v63;
  unint64_t v155 = a2;
  DataSample.labels.getter();
  uint64_t v67 = *MEMORY[0x263F583C0];
  uint64_t v68 = type metadata accessor for LossReduction();
  OUTLINED_FUNCTION_8();
  uint64_t v70 = (uint64_t)v157;
  (*(void (**)(void (*)(void), uint64_t, uint64_t))(v69 + 104))(v157, v67, v68);
  __swift_storeEnumTagSinglePayload(v70, 0, 1, v68);
  v147[4] = v58;
  softmaxCrossEntropy(logits:labels:labelSmoothing:axis:reduction:)();
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v70, &demangling cache variable for type metadata for LossReduction?);
  OUTLINED_FUNCTION_0_31();
  v66();
  DataSample.labels.getter();
  v147[3] = v65;
  softmax(_:alongAxis:)();
  static Tensor.* infix(_:_:)();
  Tensor.sum(alongAxes:)();
  OUTLINED_FUNCTION_0_31();
  v66();
  Tensor.init(floatLiteral:)();
  static Tensor.- infix(_:_:)();
  OUTLINED_FUNCTION_0_31();
  v66();
  static Tensor.* infix(_:_:)();
  OUTLINED_FUNCTION_0_31();
  v66();
  Tensor.max(alongAxes:)();
  OUTLINED_FUNCTION_0_31();
  v66();
  static Tensor.- infix(_:_:)();
  OUTLINED_FUNCTION_0_31();
  v66();
  OUTLINED_FUNCTION_0_31();
  v66();
  OUTLINED_FUNCTION_0_31();
  v66();
  OUTLINED_FUNCTION_0_31();
  v66();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Tensor>);
  uint64_t v71 = *((void *)v166 + 9);
  uint64_t v72 = v175;
  unint64_t v73 = (*(unsigned __int8 *)(v175 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v175 + 80);
  uint64_t v74 = swift_allocObject();
  *(_OWORD *)(v74 + 16) = xmmword_2272CB360;
  unint64_t v159 = v73;
  unint64_t v75 = v74 + v73;
  DataSample.features.getter();
  uint64_t v76 = *(void (**)(unint64_t, char *, uint64_t))(v72 + 16);
  uint64_t v77 = (uint64_t)v153;
  v76(v75 + v71, v153, v23);
  uint64_t v78 = v156;
  v76(v75 + 2 * v71, (char *)(v77 + *(int *)(v156 + 28)), v23);
  v147[1] = 3 * v71;
  uint64_t v79 = v77 + *(int *)(v78 + 32);
  uint64_t v175 = v72 + 16;
  uint64_t v166 = v76;
  v76(v75 + 3 * v71, (char *)v79, v23);
  uint64_t v80 = gradient(at:of:)();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v168 = v80;
  if (!*(void *)(v80 + 16))
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v152 = v71;
  unint64_t v155 = v168 + v159;
  OUTLINED_FUNCTION_12_27();
  v82();
  uint64_t v156 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t v83 = swift_allocObject();
  long long v154 = xmmword_2272CB4D0;
  *(_OWORD *)(v83 + 16) = xmmword_2272CB4D0;
  Tensor.shape.getter();
  uint64_t v84 = TensorShape.subscript.getter();
  uint64_t v85 = v169;
  uint64_t v86 = *(void (**)(void))(v169 + 8);
  OUTLINED_FUNCTION_5_4();
  v86();
  *(void *)(v83 + 32) = v84;
  *(void *)(v83 + 40) = -1;
  MEMORY[0x22A672540](v83);
  uint64_t v87 = v173;
  Tensor.reshaped(to:)();
  uint64_t v169 = v85 + 8;
  uint64_t v157 = v86;
  OUTLINED_FUNCTION_5_4();
  uint64_t v88 = ((uint64_t (*)(void))v86)();
  MEMORY[0x270FA5388](v88);
  v147[-2] = v87;
  withoutGradient<A>(_:)();
  uint64_t v150 = 0;
  *(float *)&uint64_t v179 = a7;
  uint64_t v89 = MEMORY[0x263F585A0];
  uint64_t v90 = MEMORY[0x263F8D5C8];
  static Tensor.+ infix<A>(_:_:)();
  static Tensor./ infix(_:_:)();
  OUTLINED_FUNCTION_0_31();
  v66();
  uint64_t v181 = v90;
  uint64_t v182 = v89;
  *(float *)&uint64_t v179 = a5;
  Tensor.scalarType.getter();
  uint64_t v91 = type metadata accessor for ComputeDevice();
  __swift_storeEnumTagSinglePayload(v167, 1, 1, v91);
  OUTLINED_FUNCTION_14_29();
  float v92 = (float)(1.0 - a6) * a5;
  uint64_t v181 = MEMORY[0x263F8D5C8];
  uint64_t v182 = v89;
  *(float *)&uint64_t v179 = v92;
  Tensor.scalarType.getter();
  uint64_t v93 = OUTLINED_FUNCTION_5_45();
  unint64_t v159 = v91;
  OUTLINED_FUNCTION_20_28(v93, v94, v95, v91);
  OUTLINED_FUNCTION_14_29();
  static Tensor.- infix(_:_:)();
  relu(_:)();
  OUTLINED_FUNCTION_0_31();
  v66();
  static Tensor.+ infix(_:_:)();
  OUTLINED_FUNCTION_0_31();
  v66();
  static Tensor.- infix(_:_:)();
  relu(_:)();
  OUTLINED_FUNCTION_0_31();
  v66();
  static Tensor.- infix(_:_:)();
  OUTLINED_FUNCTION_0_31();
  v66();
  Tensor.mean()();
  OUTLINED_FUNCTION_0_31();
  v66();
  OUTLINED_FUNCTION_0_31();
  v66();
  OUTLINED_FUNCTION_0_31();
  v66();
  OUTLINED_FUNCTION_0_31();
  v66();
  OUTLINED_FUNCTION_0_31();
  v66();
  OUTLINED_FUNCTION_0_31();
  v66();
  OUTLINED_FUNCTION_0_31();
  v66();
  OUTLINED_FUNCTION_0_31();
  uint64_t result = ((uint64_t (*)(void))v66)();
  if (*(void *)(v168 + 16) < 2uLL)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  OUTLINED_FUNCTION_12_27();
  v96();
  id v97 = (__n128 *)OUTLINED_FUNCTION_9_33();
  OUTLINED_FUNCTION_10_30(v97);
  Tensor.shape.getter();
  TensorShape.subscript.getter();
  uint64_t v98 = v157;
  OUTLINED_FUNCTION_5_4();
  v98();
  OUTLINED_FUNCTION_18_23();
  Tensor.reshaped(to:)();
  OUTLINED_FUNCTION_5_4();
  uint64_t v99 = ((uint64_t (*)(void))v98)();
  MEMORY[0x270FA5388](v99);
  OUTLINED_FUNCTION_8_34();
  withoutGradient<A>(_:)();
  OUTLINED_FUNCTION_16_31((uint64_t)v180);
  uint64_t v100 = MEMORY[0x263F8D5C8];
  uint64_t v101 = MEMORY[0x263F585A0];
  static Tensor.+ infix<A>(_:_:)();
  static Tensor./ infix(_:_:)();
  OUTLINED_FUNCTION_0_31();
  v66();
  uint64_t v181 = v100;
  uint64_t v182 = v101;
  *(float *)&uint64_t v179 = a5;
  Tensor.scalarType.getter();
  OUTLINED_FUNCTION_6_39();
  uint64_t v103 = *(void *)(v102 - 256);
  OUTLINED_FUNCTION_20_28(v104, v105, v106, v103);
  OUTLINED_FUNCTION_14_29();
  uint64_t v181 = MEMORY[0x263F8D5C8];
  uint64_t v182 = v101;
  *(float *)&uint64_t v179 = v92;
  Tensor.scalarType.getter();
  uint64_t v107 = OUTLINED_FUNCTION_5_45();
  OUTLINED_FUNCTION_20_28(v107, v108, v109, v103);
  uint64_t v110 = v171;
  OUTLINED_FUNCTION_14_29();
  static Tensor.- infix(_:_:)();
  long long v111 = v162;
  relu(_:)();
  OUTLINED_FUNCTION_0_31();
  v66();
  static Tensor.+ infix(_:_:)();
  OUTLINED_FUNCTION_0_31();
  v66();
  static Tensor.- infix(_:_:)();
  relu(_:)();
  OUTLINED_FUNCTION_0_31();
  v66();
  static Tensor.- infix(_:_:)();
  OUTLINED_FUNCTION_0_31();
  v66();
  Tensor.mean()();
  OUTLINED_FUNCTION_0_31();
  v66();
  OUTLINED_FUNCTION_0_31();
  v66();
  OUTLINED_FUNCTION_0_31();
  v66();
  OUTLINED_FUNCTION_0_31();
  v66();
  OUTLINED_FUNCTION_0_31();
  v66();
  OUTLINED_FUNCTION_0_31();
  v66();
  OUTLINED_FUNCTION_0_31();
  v66();
  OUTLINED_FUNCTION_0_31();
  uint64_t result = ((uint64_t (*)(void))v66)();
  if (*(void *)(v168 + 16) < 3uLL)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  OUTLINED_FUNCTION_12_27();
  v112();
  uint64_t v113 = OUTLINED_FUNCTION_9_33();
  *(_OWORD *)(v113 + 16) = v154;
  uint64_t v114 = v160;
  Tensor.shape.getter();
  uint64_t v115 = TensorShape.subscript.getter();
  OUTLINED_FUNCTION_7_41();
  v111();
  *(void *)(v113 + 32) = v115;
  *(void *)(v113 + 40) = -1;
  MEMORY[0x22A672540](v113);
  Tensor.reshaped(to:)();
  uint64_t v116 = ((uint64_t (*)(uint64_t, uint64_t))v111)(v114, v110);
  MEMORY[0x270FA5388](v116);
  OUTLINED_FUNCTION_8_34();
  withoutGradient<A>(_:)();
  OUTLINED_FUNCTION_16_31((uint64_t)&v181);
  uint64_t v117 = v171;
  uint64_t v118 = MEMORY[0x263F8D5C8];
  uint64_t v119 = MEMORY[0x263F585A0];
  static Tensor.+ infix<A>(_:_:)();
  static Tensor./ infix(_:_:)();
  OUTLINED_FUNCTION_0_31();
  v66();
  uint64_t v181 = v118;
  uint64_t v182 = v119;
  *(float *)&uint64_t v179 = a5;
  Tensor.scalarType.getter();
  OUTLINED_FUNCTION_6_39();
  uint64_t v121 = *(void *)(v120 - 256);
  OUTLINED_FUNCTION_20_28(v122, v123, v124, v121);
  OUTLINED_FUNCTION_14_29();
  uint64_t v181 = v118;
  uint64_t v182 = MEMORY[0x263F585A0];
  *(float *)&uint64_t v179 = v92;
  Tensor.scalarType.getter();
  uint64_t v125 = OUTLINED_FUNCTION_5_45();
  OUTLINED_FUNCTION_20_28(v125, v126, v127, v121);
  uint64_t v128 = v164;
  OUTLINED_FUNCTION_14_29();
  uint64_t v129 = v158;
  static Tensor.- infix(_:_:)();
  relu(_:)();
  OUTLINED_FUNCTION_0_31();
  v66();
  static Tensor.+ infix(_:_:)();
  OUTLINED_FUNCTION_0_31();
  v66();
  static Tensor.- infix(_:_:)();
  relu(_:)();
  OUTLINED_FUNCTION_0_31();
  v66();
  static Tensor.- infix(_:_:)();
  OUTLINED_FUNCTION_0_31();
  v66();
  Tensor.mean()();
  OUTLINED_FUNCTION_0_31();
  v66();
  OUTLINED_FUNCTION_0_31();
  v66();
  OUTLINED_FUNCTION_0_31();
  v66();
  OUTLINED_FUNCTION_0_31();
  v66();
  OUTLINED_FUNCTION_0_31();
  v66();
  OUTLINED_FUNCTION_0_31();
  v66();
  OUTLINED_FUNCTION_0_31();
  v66();
  OUTLINED_FUNCTION_0_31();
  uint64_t result = ((uint64_t (*)(void))v66)();
  if (*(void *)(v168 + 16) >= 4uLL)
  {
    OUTLINED_FUNCTION_13_35();
    v130();
    swift_bridgeObjectRelease();
    uint64_t v131 = (__n128 *)OUTLINED_FUNCTION_9_33();
    OUTLINED_FUNCTION_10_30(v131);
    Tensor.shape.getter();
    TensorShape.subscript.getter();
    OUTLINED_FUNCTION_7_41();
    v128();
    OUTLINED_FUNCTION_18_23();
    Tensor.reshaped(to:)();
    uint64_t v132 = ((uint64_t (*)(uint64_t, uint64_t))v128)(v129, v117);
    uint64_t v133 = v167;
    MEMORY[0x270FA5388](v132);
    OUTLINED_FUNCTION_8_34();
    withoutGradient<A>(_:)();
    *(float *)&uint64_t v179 = a7;
    uint64_t v134 = MEMORY[0x263F8D5C8];
    uint64_t v135 = MEMORY[0x263F585A0];
    static Tensor.+ infix<A>(_:_:)();
    static Tensor./ infix(_:_:)();
    OUTLINED_FUNCTION_0_31();
    v66();
    uint64_t v181 = v134;
    uint64_t v182 = v135;
    *(float *)&uint64_t v179 = a5;
    Tensor.scalarType.getter();
    OUTLINED_FUNCTION_6_39();
    uint64_t v137 = *(void *)(v136 - 256);
    __swift_storeEnumTagSinglePayload(v138, v139, v140, v137);
    Tensor.init(coercing:scalarType:on:)();
    uint64_t v181 = MEMORY[0x263F8D5C8];
    uint64_t v182 = v135;
    *(float *)&uint64_t v179 = v92;
    Tensor.scalarType.getter();
    OUTLINED_FUNCTION_20_28(v133, 1, 1, v137);
    Tensor.init(coercing:scalarType:on:)();
    static Tensor.- infix(_:_:)();
    relu(_:)();
    OUTLINED_FUNCTION_0_31();
    v66();
    static Tensor.+ infix(_:_:)();
    OUTLINED_FUNCTION_0_31();
    v66();
    static Tensor.- infix(_:_:)();
    relu(_:)();
    OUTLINED_FUNCTION_0_31();
    v66();
    static Tensor.- infix(_:_:)();
    OUTLINED_FUNCTION_0_31();
    v66();
    Tensor.mean()();
    OUTLINED_FUNCTION_0_31();
    v66();
    OUTLINED_FUNCTION_0_31();
    v66();
    OUTLINED_FUNCTION_0_31();
    v66();
    OUTLINED_FUNCTION_0_31();
    v66();
    OUTLINED_FUNCTION_0_31();
    v66();
    OUTLINED_FUNCTION_0_31();
    v66();
    OUTLINED_FUNCTION_0_31();
    v66();
    OUTLINED_FUNCTION_0_31();
    v66();
    uint64_t v181 = MEMORY[0x263F8D538];
    uint64_t v182 = MEMORY[0x263F58598];
    uint64_t v179 = 0x3FD0000000000000;
    Tensor.scalarType.getter();
    OUTLINED_FUNCTION_6_39();
    OUTLINED_FUNCTION_20_28(v142, v143, v144, *(void *)(v141 - 256));
    Tensor.init(coercing:scalarType:on:)();
    static Tensor.+ infix(_:_:)();
    static Tensor.+ infix(_:_:)();
    OUTLINED_FUNCTION_0_31();
    v66();
    static Tensor.+ infix(_:_:)();
    OUTLINED_FUNCTION_0_31();
    v66();
    static Tensor.* infix(_:_:)();
    OUTLINED_FUNCTION_0_31();
    v66();
    static Tensor.+ infix(_:_:)();
    OUTLINED_FUNCTION_0_31();
    v66();
    OUTLINED_FUNCTION_0_31();
    v66();
    OUTLINED_FUNCTION_0_31();
    v66();
    OUTLINED_FUNCTION_0_31();
    v66();
    OUTLINED_FUNCTION_0_31();
    v66();
    OUTLINED_FUNCTION_0_31();
    v66();
    OUTLINED_FUNCTION_0_31();
    v66();
    OUTLINED_FUNCTION_0_31();
    v66();
    uint64_t v145 = v148;
    OUTLINED_FUNCTION_13_35();
    v146();
    outlined destroy of MLFewShotSoundClassifier.TemporalClassifier.Output((uint64_t)v153, (void (*)(void))type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier.Output);
    __swift_storeEnumTagSinglePayload(v145, 0, 1, v23);
    return outlined assign with take of Tensor?(v145, v149);
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t closure #1 in static MLFewShotSoundClassifier.localLoss(probabilities:gradients:gamma:alpha:epsilon:)()
{
  uint64_t v0 = type metadata accessor for Tensor();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = MEMORY[0x270FA5388](v0);
  uint64_t v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)v9 - v5;
  Tensor.squared()();
  Tensor.sum(alongAxes:)();
  uint64_t v7 = *(void (**)(char *, uint64_t))(v1 + 8);
  v7(v4, v0);
  sqrt(_:)();
  return ((uint64_t (*)(char *, uint64_t))v7)(v6, v0);
}

uint64_t partial apply for closure #1 in static MLFewShotSoundClassifier.localLoss(probabilities:gradients:gamma:alpha:epsilon:)()
{
  return closure #1 in static MLFewShotSoundClassifier.localLoss(probabilities:gradients:gamma:alpha:epsilon:)();
}

uint64_t outlined assign with take of Tensor?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of MLFewShotSoundClassifier.TemporalClassifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of MLFewShotSoundClassifier.TemporalClassifier.Output(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_8();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t closure #1 in static MLFewShotSoundClassifier.localLoss(probabilities:gradients:gamma:alpha:epsilon:)partial apply()
{
  return partial apply for closure #1 in static MLFewShotSoundClassifier.localLoss(probabilities:gradients:gamma:alpha:epsilon:)();
}

uint64_t OUTLINED_FUNCTION_5_45()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_9_33()
{
  return swift_allocObject();
}

__n128 OUTLINED_FUNCTION_10_30(__n128 *a1)
{
  __n128 result = *(__n128 *)(v1 - 384);
  a1[1] = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_14_29()
{
  return Tensor.init(coercing:scalarType:on:)();
}

void OUTLINED_FUNCTION_16_31(uint64_t a1@<X8>)
{
  *(void *)(a1 - 256) = v1;
  *(_DWORD *)(v2 - 168) = v3;
}

void OUTLINED_FUNCTION_18_23()
{
  *(void *)(v1 + 32) = v0;
  *(void *)(v1 + 40) = -1;
  JUMPOUT(0x22A672540);
}

uint64_t OUTLINED_FUNCTION_20_28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __swift_storeEnumTagSinglePayload(a1, a2, a3, a4);
  return v4 - 168;
}

void one-time initialization function for tmpPath()
{
  uint64_t v0 = NSTemporaryDirectory();
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  int v3 = v2;

  tmpPath._uint64_t countAndFlagsBits = v1;
  tmpPath._id object = v3;
}

uint64_t static BoostedTreeConfiguration.firstIncompatibility(_:_:)@<X0>(unint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v5 = BoostedTreeConfiguration.maximumIterations.getter();
  if (v5 != BoostedTreeConfiguration.maximumIterations.getter())
  {
    BoostedTreeConfiguration.maximumIterations.getter();
    OUTLINED_FUNCTION_1_47();
    OUTLINED_FUNCTION_0_32();
    BoostedTreeConfiguration.maximumIterations.getter();
    uint64_t result = OUTLINED_FUNCTION_1_47();
    unint64_t v11 = 0xEF736E6F69746172;
    unint64_t v10 = 0x657469202E78614DLL;
    goto LABEL_16;
  }
  uint64_t v5 = BoostedTreeConfiguration.maximumDepth.getter();
  if (v5 != BoostedTreeConfiguration.maximumDepth.getter())
  {
    BoostedTreeConfiguration.maximumDepth.getter();
    OUTLINED_FUNCTION_1_47();
    OUTLINED_FUNCTION_0_32();
    BoostedTreeConfiguration.maximumDepth.getter();
    uint64_t result = OUTLINED_FUNCTION_1_47();
    unint64_t v11 = 0xEA00000000006874;
    unint64_t v10 = 0x706564202E78614DLL;
    goto LABEL_16;
  }
  BoostedTreeConfiguration.minimumLossReduction.getter();
  OUTLINED_FUNCTION_2_57();
  BoostedTreeConfiguration.minimumLossReduction.getter();
  if (v2 != v6)
  {
    BoostedTreeConfiguration.minimumLossReduction.getter();
    Double.description.getter();
    OUTLINED_FUNCTION_0_32();
    BoostedTreeConfiguration.minimumLossReduction.getter();
    uint64_t result = Double.description.getter();
    unint64_t v10 = 0xD000000000000013;
    uint64_t v14 = "Min. loss reduction";
LABEL_13:
    unint64_t v11 = (unint64_t)(v14 - 32) | 0x8000000000000000;
    goto LABEL_16;
  }
  BoostedTreeConfiguration.minimumChildWeight.getter();
  OUTLINED_FUNCTION_2_57();
  BoostedTreeConfiguration.minimumChildWeight.getter();
  if (v2 != v7)
  {
    unint64_t v10 = 0xD000000000000011;
    BoostedTreeConfiguration.minimumChildWeight.getter();
    Double.description.getter();
    OUTLINED_FUNCTION_0_32();
    BoostedTreeConfiguration.minimumChildWeight.getter();
    uint64_t result = Double.description.getter();
    uint64_t v14 = "Min. child weight";
    goto LABEL_13;
  }
  uint64_t v5 = BoostedTreeConfiguration.randomSeed.getter();
  if (v5 != BoostedTreeConfiguration.randomSeed.getter())
  {
    BoostedTreeConfiguration.randomSeed.getter();
    OUTLINED_FUNCTION_1_47();
    OUTLINED_FUNCTION_0_32();
    BoostedTreeConfiguration.randomSeed.getter();
    uint64_t result = OUTLINED_FUNCTION_1_47();
    unint64_t v11 = 0xEB00000000646565;
    unint64_t v10 = 0x73206D6F646E6152;
    goto LABEL_16;
  }
  BoostedTreeConfiguration.rowSubsample.getter();
  OUTLINED_FUNCTION_2_57();
  BoostedTreeConfiguration.rowSubsample.getter();
  if (v2 != v8)
  {
    BoostedTreeConfiguration.rowSubsample.getter();
    Double.description.getter();
    OUTLINED_FUNCTION_0_32();
    BoostedTreeConfiguration.rowSubsample.getter();
    uint64_t result = Double.description.getter();
    unint64_t v11 = 0xEE00656C706D6173;
    unint64_t v10 = 0x2062757320776F52;
    goto LABEL_16;
  }
  BoostedTreeConfiguration.columnSubsample.getter();
  OUTLINED_FUNCTION_2_57();
  BoostedTreeConfiguration.columnSubsample.getter();
  if (v2 != v9)
  {
    unint64_t v10 = 0xD000000000000011;
    BoostedTreeConfiguration.columnSubsample.getter();
    Double.description.getter();
    OUTLINED_FUNCTION_0_32();
    BoostedTreeConfiguration.columnSubsample.getter();
    uint64_t result = Double.description.getter();
    uint64_t v14 = "Column sub sample";
    goto LABEL_13;
  }
  unint64_t v10 = 0;
  unint64_t v11 = 0;
  a1 = 0;
  uint64_t v5 = 0;
  uint64_t result = 0;
  unint64_t v13 = 0;
LABEL_16:
  *a2 = v10;
  a2[1] = v11;
  a2[2] = a1;
  a2[3] = v5;
  a2[4] = result;
  a2[5] = v13;
  return result;
}

uint64_t OUTLINED_FUNCTION_1_47()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

unint64_t MLImageClassifier.ModelParameters.ClassifierType.description.getter()
{
  return 0xD000000000000012;
}

uint64_t static MLImageClassifier.ModelParameters.ClassifierType.== infix(_:_:)()
{
  return 1;
}

void MLImageClassifier.ModelParameters.ClassifierType.hash(into:)()
{
}

Swift::Int MLImageClassifier.ModelParameters.ClassifierType.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MLImageClassifier.ModelParameters.ClassifierType()
{
  return MLImageClassifier.ModelParameters.ClassifierType.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance MLImageClassifier.ModelParameters.ClassifierType()
{
}

unint64_t lazy protocol witness table accessor for type MLImageClassifier.ModelParameters.ClassifierType and conformance MLImageClassifier.ModelParameters.ClassifierType()
{
  unint64_t result = lazy protocol witness table cache variable for type MLImageClassifier.ModelParameters.ClassifierType and conformance MLImageClassifier.ModelParameters.ClassifierType;
  if (!lazy protocol witness table cache variable for type MLImageClassifier.ModelParameters.ClassifierType and conformance MLImageClassifier.ModelParameters.ClassifierType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLImageClassifier.ModelParameters.ClassifierType and conformance MLImageClassifier.ModelParameters.ClassifierType);
  }
  return result;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLImageClassifier.ModelParameters.ClassifierType()
{
  return 0xD000000000000012;
}

unsigned char *storeEnumTagSinglePayload for MLImageClassifier.ModelParameters.ClassifierType(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x2271E7374);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for MLImageClassifier.ModelParameters.ClassifierType()
{
  return &type metadata for MLImageClassifier.ModelParameters.ClassifierType;
}

void MLDataTable.randomSplitBySequence(strategy:by:on:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6, void *a7)
{
  double v12 = *(double *)a3;
  char v26 = *(unsigned char *)(a3 + 16);
  char v13 = *(unsigned char *)(a3 + 17);
  id v14 = *(id *)v7;
  char v15 = *(unsigned char *)(v7 + 8);
  uint64_t v27 = *(void *)(a3 + 8);
  outlined copy of Result<_DataTable, Error>(*(id *)v7, v15);
  MLDataTable.subscript.getter((uint64_t)a4, a5, (uint64_t)&v28);
  outlined consume of Result<_DataTable, Error>(v14, v15);
  uint64_t v16 = v28;
  char v17 = v29;
  MLUntypedColumn.dropDuplicates()(&v30);
  outlined consume of Result<_DataTable, Error>(v16, v17);
  id v18 = v30;
  if (v31)
  {
    outlined consume of Result<_DataTable, Error>(v30, 1);
    if (v13) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
  swift_retain();
  uint64_t v19 = CMLColumn.size.getter();
  outlined consume of Result<_DataTable, Error>(v18, 0);
  outlined consume of Result<_DataTable, Error>(v18, 0);
  if ((v13 & 1) == 0)
  {
LABEL_7:
    if (v26) {
      uint64_t v20 = 1;
    }
    else {
      uint64_t v20 = v27;
    }
    if (v12 == 0.0) {
      goto LABEL_11;
    }
    goto LABEL_12;
  }
  if (v19 < 50)
  {
LABEL_11:
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 8) = -1;
    *(void *)a2 = v14;
    *(unsigned char *)(a2 + 8) = v15;
    outlined copy of Result<_DataTable, Error>(v14, v15);
    return;
  }
  double v12 = dbl_2272CC890[(unint64_t)v19 < 0xC8];
  uint64_t v20 = 1;
LABEL_12:
  MLDataTable.randomSplitBySequence(proportion:by:on:seed:)((uint64_t)&v30, (uint64_t)&v28, a4, a5, a6, a7, v20, v12);
  char v21 = v31;
  uint64_t v22 = v28;
  char v23 = v29;
  *(void *)a1 = v30;
  *(unsigned char *)(a1 + 8) = v21;
  *(void *)a2 = v22;
  *(unsigned char *)(a2 + 8) = v23;
}

void specialized stratifiedSplitBySequenceGenerator<A>(proportions:generator:dataTable:by:on:)(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X5>, void *a7@<X6>, void *a8@<X7>, uint64_t a9@<X8>)
{
  unint64_t v10 = (void *)v9;
  char v13 = a4;
  if (a4)
  {
    outlined copy of Result<_DataTable, Error>(a3, 1);
    uint64_t v16 = MEMORY[0x22A676370](0);
    if (!v16)
    {
LABEL_71:
      __break(1u);
LABEL_72:
      outlined copy of Result<_DataTable, Error>(v13, 1);
      swift_willThrow();
      uint64_t v164 = 0;
      id v165 = (id)0xE000000000000000;
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      uint64_t v108 = (void *)swift_allocError();
      *(void *)uint64_t v109 = 0xD000000000000027;
      *(void *)(v109 + 8) = 0x80000002272D9F30;
      *(_OWORD *)(v109 + 16) = 0u;
      *(_OWORD *)(v109 + 32) = 0u;
      *(unsigned char *)(v109 + 48) = 1;
      outlined consume of Result<_DataTable, Error>(v13, v162);
      outlined consume of Result<_DataTable, Error>(v108, 1);
LABEL_73:
      __break(1u);
      goto LABEL_74;
    }
    uint64_t v17 = v16;
    type metadata accessor for CMLSequence();
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = v17;
    *(unsigned char *)(v18 + 24) = 1;
    outlined consume of Result<_DataTable, Error>(a3, 1);
  }
  else
  {
    outlined copy of Result<_DataTable, Error>(a3, 0);
    _DataTable.columnNames.getter(&v171);
    outlined consume of Result<_DataTable, Error>(a3, 0);
  }
  uint64_t v164 = a5;
  id v165 = a6;
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_3_49();
  char v20 = specialized Sequence.contains(where:)((uint64_t (*)(Swift::String *))partial apply for specialized closure #1 in Sequence<>.contains(_:));
  swift_release();
  if ((v20 & 1) == 0)
  {
    OUTLINED_FUNCTION_1_41();
    uint64_t v25 = a5;
    char v26 = a6;
LABEL_28:
    String.append(_:)(*(Swift::String *)&v25);
    v77._uint64_t countAndFlagsBits = 46;
    v77._id object = (void *)0xE100000000000000;
    String.append(_:)(v77);
    id v78 = v165;
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(void *)uint64_t v79 = v164;
    *(void *)(v79 + 8) = v78;
    *(_OWORD *)(v79 + 16) = 0u;
    *(_OWORD *)(v79 + 32) = 0u;
    *(unsigned char *)(v79 + 48) = 0;
    swift_willThrow();
    return;
  }
  HIDWORD(v137) = v13 & 1;
  if (v13)
  {
    outlined copy of Result<_DataTable, Error>(a3, 1);
    uint64_t v21 = MEMORY[0x22A676370](0);
    if (!v21)
    {
LABEL_74:
      __break(1u);
LABEL_75:
      outlined consume of Result<_DataTable, Error>(v10, 1);
      goto LABEL_76;
    }
    uint64_t v22 = v21;
    type metadata accessor for CMLSequence();
    uint64_t v23 = swift_allocObject();
    *(void *)(v23 + 16) = v22;
    *(unsigned char *)(v23 + 24) = 1;
    outlined consume of Result<_DataTable, Error>(a3, 1);
  }
  else
  {
    outlined copy of Result<_DataTable, Error>(a3, 0);
    _DataTable.columnNames.getter(&v171);
    outlined consume of Result<_DataTable, Error>(a3, 0);
  }
  uint64_t v164 = a7;
  id v165 = a8;
  MEMORY[0x270FA5388](v24);
  OUTLINED_FUNCTION_3_49();
  char v27 = specialized Sequence.contains(where:)((uint64_t (*)(Swift::String *))closure #1 in Sequence<>.contains(_:)specialized partial apply);
  swift_release();
  if ((v27 & 1) == 0)
  {
    OUTLINED_FUNCTION_1_41();
    uint64_t v25 = a7;
    char v26 = a8;
    goto LABEL_28;
  }
  char v28 = BYTE4(v137);
  id v171 = a3;
  BOOL v29 = HIDWORD(v137) != 0;
  char v172 = HIDWORD(v137) != 0;
  uint64_t v164 = a3;
  LOBYTE(v165) = HIDWORD(v137) != 0;
  outlined copy of Result<_DataTable, Error>(a3, SBYTE4(v137));
  MLDataTable.subscript.getter((uint64_t)a5, a6, (uint64_t)&v169);
  id v30 = v169;
  char v31 = v170;
  id v167 = v169;
  v168[0] = v170;
  MLUntypedColumn.dropDuplicates()(&v164);
  char v32 = v31;
  uint64_t v33 = a8;
  outlined consume of Result<_DataTable, Error>(v30, v32);
  OUTLINED_FUNCTION_6_35(v34, v35, v36, v37, v38, v39, v40, v41, v110, v113, v116, v119, v123, v126, v129, v132, v134, v137, a1,
    a2,
    a9,
    (uint64_t)a8,
    v154,
    v158);
  uint64_t v43 = v42;
  outlined copy of Result<_DataTable, Error>(a3, v28);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t ML11MLDataValueOG_AHs5NeverOTg503_s8d81ML34stratifiedSplitBySequenceGenerator11proportions9generator9dataTable2by2onAA06f30K0VSaySdG_xzAIS2StKSGRzlFAA0N5G8OALXEfU_AF0F5TableVS2STf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML11MLDataValueOG_AHs5NeverOTg503_s8d81ML34stratifiedSplitBySequenceGenerator11proportions9generator9dataTable2by2onAA06f30K0VSaySdG_xzAIS2StKSGRzlFAA0N5G8OALXEfU_AF0F5TableVS2STf1cn_n(v43, a3, v28, (uint64_t)a5, a6, (uint64_t)a7, v33);
  uint64_t v44 = *(void *)(v43 + 16);
  uint64_t v45 = swift_bridgeObjectRetain();
  specialized Dictionary.init<A>(uniqueKeysWithValues:)(v45, 0, v44, v46, v47, v48, v49, v50, v111, v114, v117, v120, v9, (uint64_t)a7, ML11MLDataValueOG_AHs5NeverOTg503_s8d81ML34stratifiedSplitBySequenceGenerator11proportions9generator9dataTable2by2onAA06f30K0VSaySdG_xzAIS2StKSGRzlFAA0N5G8OALXEfU_AF0F5TableVS2STf1cn_n, v43, v135, v138);
  unint64_t v10 = v51;
  uint64_t v163 = (void *)specialized Array.init(repeating:count:)(MEMORY[0x263F8EE78], v44);
  id v169 = a3;
  BOOL v170 = v29;
  outlined copy of Result<_DataTable, Error>(a3, v28);
  MLDataTable.subscript.getter((uint64_t)a5, a6, (uint64_t)&v164);
  outlined consume of Result<_DataTable, Error>(a3, v28);
  OUTLINED_FUNCTION_6_35(v52, v53, v54, v55, v56, v57, v58, v59, v112, (uint64_t)a3, v118, v121, v124, v127, v131, v133, (uint64_t)a5, v139, v142,
    v145,
    v148,
    v151,
    v155,
    v159);
  uint64_t v160 = *(void *)(v60 + 16);
  if (v160)
  {
    uint64_t v122 = a6;
    uint64_t v61 = 0;
    uint64_t v62 = (char *)(v60 + 48);
    uint64_t v156 = v10;
    while (1)
    {
      uint64_t v63 = (void *)*((void *)v62 - 2);
      uint64_t v64 = (void *)*((void *)v62 - 1);
      char v65 = *v62;
      char v13 = (void *)v10[2];
      outlined copy of MLDataValue(v63, v64, *v62);
      if (!v13) {
        goto LABEL_70;
      }
      outlined copy of MLDataValue(v63, v64, v65);
      unint64_t v66 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v63, (unint64_t)v64, v65);
      if ((v67 & 1) == 0) {
        goto LABEL_69;
      }
      unint64_t v68 = *(void *)(v10[7] + 8 * v66);
      OUTLINED_FUNCTION_9_34();
      char v13 = v163;
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        if ((v68 & 0x8000000000000000) != 0) {
          goto LABEL_65;
        }
      }
      else
      {
        specialized _ArrayBuffer._consumeAndCreateNew()();
        char v13 = v74;
        if ((v68 & 0x8000000000000000) != 0) {
          goto LABEL_65;
        }
      }
      if (v68 >= v13[2]) {
        break;
      }
      uint64_t v163 = v13;
      uint64_t v69 = v13 + 4;
      uint64_t v70 = v69[v68];
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v69[v68] = v70;
      uint64_t v162 = v61;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v70 + 16) + 1, 1, v70);
        uint64_t v70 = v75;
        v69[v68] = v75;
      }
      unint64_t v73 = *(void *)(v70 + 16);
      unint64_t v72 = *(void *)(v70 + 24);
      if (v73 >= v72 >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v72 > 1, v73 + 1, 1, v70);
        uint64_t v70 = v76;
        v69[v68] = v76;
      }
      v62 += 24;
      *(void *)(v70 + 16) = v73 + 1;
      *(void *)(v70 + 8 * v73 + 32) = v162;
      OUTLINED_FUNCTION_9_34();
      uint64_t v61 = v162 + 1;
      unint64_t v10 = v156;
      if (v160 == v162 + 1)
      {
        swift_bridgeObjectRelease();
        a6 = v122;
        uint64_t v33 = v152;
        goto LABEL_30;
      }
    }
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    OUTLINED_FUNCTION_9_34();
LABEL_70:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_71;
  }
  swift_bridgeObjectRelease();
LABEL_30:
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLUntypedColumn)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2272CB4A0;
  *(void *)(inited + 32) = 0x73656369646E69;
  *(void *)(inited + 40) = 0xE700000000000000;
  uint64_t v164 = v163;
  MEMORY[0x270FA5388](inited);
  swift_bridgeObjectRetain();
  _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))_s8CreateML15MLUntypedColumnVyACxcSTRzAA22MLDataValueConvertible7ElementRpzlufcAA08_UntypedD0CyKXEfU_SaySaySiGG_TG5TA_0);
  OUTLINED_FUNCTION_4_46();
  *(void *)(inited + 48) = 0x73656369646E69;
  *(unsigned char *)(inited + 56) = v10 & 1;
  *(void *)(inited + 64) = v128;
  *(void *)(inited + 72) = v33;
  OUTLINED_FUNCTION_23_18((uint64_t)v168);
  MEMORY[0x270FA5388](v81);
  OUTLINED_FUNCTION_21_26();
  swift_bridgeObjectRetain();
  _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
  OUTLINED_FUNCTION_4_46();
  *(void *)(inited + 80) = 0x73656369646E69;
  *(unsigned char *)(inited + 88) = v10 & 1;
  *(void *)(inited + 96) = v136;
  *(void *)(inited + 104) = a6;
  OUTLINED_FUNCTION_23_18((uint64_t)&v169);
  MEMORY[0x270FA5388](v82);
  OUTLINED_FUNCTION_21_26();
  swift_bridgeObjectRetain();
  _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in MLUntypedColumn.init<A>(_:)specialized partial apply);
  OUTLINED_FUNCTION_4_46();
  *(void *)(inited + 112) = 0x73656369646E69;
  *(unsigned char *)(inited + 120) = v10 & 1;
  uint64_t v83 = Dictionary.init(dictionaryLiteral:)();
  specialized MLDataTable.init<A>(uniqueKeysWithValues:)(v83, (uint64_t)&v164);
  if (v125)
  {
    swift_bridgeObjectRelease();
    outlined consume of Result<_DataTable, Error>(v171, v172);
    return;
  }
  uint64_t v84 = v164;
  char v85 = (char)v165;
  specialized stratifiedSplitGenerator<A>(proportions:generator:dataTable:on:)(v143, v164, v165, v128, v33, (uint64_t)&v164);
  char v146 = v85;
  uint64_t v153 = v84;
  char v13 = v164;
  LOBYTE(v162) = (_BYTE)v165;
  id v169 = v115;
  BOOL v170 = v140 != 0;
  outlined copy of Result<_DataTable, Error>(v115, v140);
  MLDataTable.subscript.getter(v136, a6, (uint64_t)&v164);
  OUTLINED_FUNCTION_13_36();
  uint64_t v86 = v164;
  if (v165)
  {
    uint64_t v87 = -1;
  }
  else
  {
    swift_retain();
    uint64_t v87 = CMLColumn.size.getter();
    outlined consume of Result<_DataTable, Error>(v86, 0);
  }
  uint64_t v88 = v149;
  OUTLINED_FUNCTION_13_36();
  uint64_t v89 = (void *)specialized Array.init(repeating:count:)(0, v87);
  id v169 = v13;
  BOOL v170 = v162;
  outlined copy of Result<_DataTable, Error>(v13, v162);
  MLDataTable.subscript.getter(0x73656369646E69, (void *)0xE700000000000000, (uint64_t)&v164);
  outlined consume of Result<_DataTable, Error>(v13, v162);
  unint64_t v10 = v164;
  if (v165 == 1) {
    goto LABEL_75;
  }
  swift_retain();
  uint64_t v90 = CMLColumn.size.getter();
  outlined consume of Result<_DataTable, Error>(v10, 0);
  outlined consume of Result<_DataTable, Error>(v10, 0);
  if (v90 < 0)
  {
LABEL_76:
    __break(1u);
    OUTLINED_FUNCTION_1_48();
    swift_unexpectedError();
    __break(1u);
    return;
  }
  if (v90)
  {
    uint64_t v91 = 0;
    uint64_t v157 = v90;
    while (1)
    {
      if (v91 == v90) {
        goto LABEL_67;
      }
      if (v162) {
        goto LABEL_72;
      }
      uint64_t v92 = v13[2];
      outlined copy of Result<_DataTable, Error>(v13, 0);
      swift_retain();
      unint64_t v10 = specialized String.withCString<A>(_:)((void *(*)(uint64_t *__return_ptr, void *))partial apply for closure #1 in CMLTable.column(name:), v92, 0x73656369646E69, 0xE700000000000000);
      swift_release();
      outlined consume of Result<_DataTable, Error>(v13, 0);
      type metadata accessor for _UntypedColumn();
      *(void *)(swift_allocObject() + 16) = v10;
      swift_retain();
      _UntypedColumn.valueAtIndex(index:)(v91, (uint64_t)&v164);
      OUTLINED_FUNCTION_26_9();
      OUTLINED_FUNCTION_26_9();
      if (v166 != 3) {
        goto LABEL_73;
      }
      uint64_t v161 = v91;
      swift_retain();
      if (CMLSequence.size.getter()) {
        break;
      }
LABEL_58:
      uint64_t v91 = v161 + 1;
      OUTLINED_FUNCTION_1_48();
      OUTLINED_FUNCTION_1_48();
      uint64_t v90 = v157;
      uint64_t v88 = v149;
      if (v161 + 1 == v157) {
        goto LABEL_59;
      }
    }
    uint64_t v93 = 0;
    while (1)
    {
      swift_retain();
      CMLSequence.value(at:)(v93);
      uint64_t v95 = v94;
      OUTLINED_FUNCTION_1_48();
      MLDataValue.init(_:)(v95, (uint64_t)&v164);
      unint64_t v96 = (unint64_t)v164;
      unint64_t v10 = (void *)v166;
      swift_retain();
      uint64_t v97 = CMLSequence.size.getter();
      OUTLINED_FUNCTION_1_48();
      if (v93 >= v97)
      {
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
        goto LABEL_66;
      }
      if (v10) {
        goto LABEL_68;
      }
      outlined copy of Result<_DataTable, Error>(v13, 0);
      specialized MLDataTable.subscript.getter(v162, (uint64_t)&v169);
      outlined consume of Result<_DataTable, Error>(v13, 0);
      id v98 = v169;
      if (v170) {
        break;
      }
      outlined copy of Result<_DataTable, Error>(v169, 0);
      _UntypedColumn.valueAtIndex(index:)(v161, (uint64_t)&v164);
      OUTLINED_FUNCTION_26_9();
      unint64_t v10 = v164;
      if (v166)
      {
        outlined consume of MLDataValue(v164, v165, v166);
        id v99 = v98;
        char v100 = 0;
LABEL_50:
        outlined consume of Result<_DataTable, Error>(v99, v100);
        unint64_t v10 = 0;
        if (swift_isUniquelyReferenced_nonNull_native()) {
          goto LABEL_51;
        }
        goto LABEL_56;
      }
      OUTLINED_FUNCTION_26_9();
      if (swift_isUniquelyReferenced_nonNull_native())
      {
LABEL_51:
        if ((v96 & 0x8000000000000000) != 0) {
          goto LABEL_63;
        }
        goto LABEL_52;
      }
LABEL_56:
      specialized _ArrayBuffer._consumeAndCreateNew()();
      uint64_t v89 = v101;
      if ((v96 & 0x8000000000000000) != 0) {
        goto LABEL_63;
      }
LABEL_52:
      if (v96 >= v89[2]) {
        goto LABEL_64;
      }
      ++v93;
      v89[v96 + 4] = v10;
      if (v93 == CMLSequence.size.getter()) {
        goto LABEL_58;
      }
    }
    id v99 = v169;
    char v100 = 1;
    goto LABEL_50;
  }
LABEL_59:
  uint64_t v102 = swift_bridgeObjectRelease();
  uint64_t v164 = v89;
  MEMORY[0x270FA5388](v102);
  OUTLINED_FUNCTION_3_49();
  uint64_t ML14_UntypedColumnC_s5Error_pTgm5 = (void *)_ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
  char v105 = v104 & 1;
  swift_bridgeObjectRelease();
  MLDataTable.willMutate()();
  uint64_t v164 = ML14_UntypedColumnC_s5Error_pTgm5;
  LOBYTE(v165) = v105;
  outlined copy of Result<_DataTable, Error>(ML14_UntypedColumnC_s5Error_pTgm5, v105);
  MLDataTable.addImpl(newColumn:named:)();
  OUTLINED_FUNCTION_13_36();
  id v106 = v171;
  char v107 = v172;
  if ((v172 & 1) == 0)
  {
    outlined copy of Result<_DataTable, Error>(v171, 0);
    _DataTable.columnNamesDidChange()();
    OUTLINED_FUNCTION_26_9();
  }
  outlined consume of Result<_DataTable, Error>(v153, v146);
  outlined consume of Result<_DataTable, Error>(v13, v162);
  OUTLINED_FUNCTION_13_36();
  *(void *)uint64_t v88 = v106;
  *(unsigned char *)(v88 + 8) = v107;
}

void MLDataTable.stratifiedSplit<A>(proportions:on:generator:)(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  char v8 = *((unsigned char *)v7 + 8);
  uint64_t v9 = *v7;
  char v10 = v8;
  stratifiedSplitGenerator<A>(proportions:generator:dataTable:on:)(a1, a4, (uint64_t)&v9, a2, a3, a5, a6, a7);
}

uint64_t MLDataTable.stratifiedSplit(proportions:on:seed:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (a4 < 0)
  {
    OUTLINED_FUNCTION_2_14();
    uint64_t result = OUTLINED_FUNCTION_1_15();
    __break(1u);
  }
  else
  {
    unint64_t v11 = *(void **)v5;
    int v12 = *(unsigned __int8 *)(v5 + 8);
    type metadata accessor for MersenneTwisterGenerator();
    swift_allocObject();
    MersenneTwisterGenerator.init(seed:)(a4);
    specialized stratifiedSplitGenerator<A>(proportions:generator:dataTable:on:)(a1, v11, v12, a2, a3, a5);
    return swift_release();
  }
  return result;
}

void MLDataTable.randomSplit(by:seed:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v7 = *(void **)v4;
  if (*(unsigned char *)(v4 + 8))
  {
    id v8 = v7;
    *(void *)a1 = v7;
    *(unsigned char *)(a1 + 8) = 1;
    *(void *)a2 = v7;
    *(unsigned char *)(a2 + 8) = 1;
    id v11 = v7;
  }
  else
  {
    swift_retain();
    uint64_t v12 = CMLTable.split(fraction:seed:)(a3, a4);
    uint64_t v14 = v13;
    type metadata accessor for _DataTable();
    swift_allocObject();
    char v15 = _DataTable.init(impl:)(v12);
    swift_allocObject();
    uint64_t v16 = _DataTable.init(impl:)(v14);
    outlined consume of Result<_DataTable, Error>(v7, 0);
    *(void *)a1 = v15;
    *(unsigned char *)(a1 + 8) = 0;
    *(void *)a2 = v16;
    *(unsigned char *)(a2 + 8) = 0;
  }
}

void MLDataTable.randomSplitBySequence(proportion:by:on:seed:)(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7, double a8)
{
  uint64_t v16 = *(void **)v8;
  uint64_t v17 = (void *)*(unsigned __int8 *)(v8 + 8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2272CB4D0;
  *(double *)(inited + 32) = a8;
  *(double *)(inited + 40) = 1.0 - a8;
  if (a7 < 0)
  {
    OUTLINED_FUNCTION_2_14();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v19 = inited;
    type metadata accessor for MersenneTwisterGenerator();
    swift_allocObject();
    MersenneTwisterGenerator.init(seed:)(a7);
    uint64_t v70 = v20;
    specialized stratifiedSplitBySequenceGenerator<A>(proportions:generator:dataTable:by:on:)(v19, (uint64_t)&v70, v16, v17, a3, a4, a5, a6, (uint64_t)&v62);
    swift_release();
    swift_setDeallocating();
    id v21 = (id)v62;
    char v22 = v63;
    id v23 = outlined copy of Result<_DataTable, Error>((id)v62, v63);
    OUTLINED_FUNCTION_5_46((uint64_t)v23, v24, v25, v26, v27, v28, v29, v30, v53, v55, v57, v59);
    outlined consume of Result<_DataTable, Error>(v21, v22);
    char v31 = v68;
    char v32 = v69;
    id v66 = v68;
    uint64_t v33 = MEMORY[0x263F8D6C8];
    char v67 = v69;
    uint64_t v64 = MEMORY[0x263F8D6C8];
    char v65 = &protocol witness table for Int;
    uint64_t v62 = 0;
    static MLUntypedColumn.== infix(_:_:)();
    outlined consume of Result<_DataTable, Error>(v31, v32);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v62);
    uint64_t v34 = v70;
    char v35 = v71;
    id v68 = v21;
    char v69 = v22;
    id v66 = v70;
    char v67 = v71;
    outlined copy of Result<_DataTable, Error>(v21, v22);
    MLDataTable.subscript.getter((uint64_t)&v66, (uint64_t)&v62);
    outlined consume of Result<_DataTable, Error>(v34, v35);
    outlined consume of Result<_DataTable, Error>(v21, v22);
    id v36 = (id)v62;
    char v37 = v63;
    uint64_t v62 = (uint64_t)v21;
    char v63 = v22;
    id v38 = outlined copy of Result<_DataTable, Error>(v21, v22);
    OUTLINED_FUNCTION_5_46((uint64_t)v38, v39, v40, v41, v42, v43, v44, v45, v54, v56, v58, v60);
    outlined consume of Result<_DataTable, Error>(v21, v22);
    uint64_t v46 = v68;
    char v47 = v69;
    char v65 = &protocol witness table for Int;
    id v66 = v68;
    char v67 = v69;
    uint64_t v64 = v33;
    uint64_t v62 = 1;
    static MLUntypedColumn.== infix(_:_:)();
    outlined consume of Result<_DataTable, Error>(v46, v47);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v62);
    uint64_t v48 = v70;
    LOBYTE(v33) = v71;
    id v68 = v21;
    char v69 = v22;
    id v66 = v70;
    char v67 = v71;
    outlined copy of Result<_DataTable, Error>(v21, v22);
    MLDataTable.subscript.getter((uint64_t)&v66, (uint64_t)&v62);
    outlined consume of Result<_DataTable, Error>(v48, v33);
    outlined consume of Result<_DataTable, Error>(v21, v22);
    id v49 = (id)v62;
    char v50 = v63;
    uint64_t v62 = (uint64_t)v36;
    char v63 = v37;
    outlined copy of Result<_DataTable, Error>(v36, v37);
    MLDataTable.size.getter();
    uint64_t v51 = specialized RandomAccessCollection<>.distance(from:to:)();
    outlined consume of Result<_DataTable, Error>(v36, v37);
    uint64_t v62 = (uint64_t)v49;
    char v63 = v50;
    outlined copy of Result<_DataTable, Error>(v49, v50);
    MLDataTable.size.getter();
    uint64_t v52 = specialized RandomAccessCollection<>.distance(from:to:)();
    outlined consume of Result<_DataTable, Error>(v21, v22);
    outlined consume of Result<_DataTable, Error>(v49, v50);
    if (v51 >= v52)
    {
      *(void *)a1 = v49;
      *(unsigned char *)(a1 + 8) = v50;
      *(void *)a2 = v36;
      *(unsigned char *)(a2 + 8) = v37;
    }
    else
    {
      *(void *)a1 = v36;
      *(unsigned char *)(a1 + 8) = v37;
      *(void *)a2 = v49;
      *(unsigned char *)(a2 + 8) = v50;
    }
  }
}

uint64_t MLDataTable.stratifiedSplitBySequence(proportions:by:on:seed:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  if (a6 < 0)
  {
    OUTLINED_FUNCTION_2_14();
    uint64_t result = OUTLINED_FUNCTION_1_15();
    __break(1u);
  }
  else
  {
    uint64_t v14 = *(void **)v7;
    char v15 = (void *)*(unsigned __int8 *)(v7 + 8);
    type metadata accessor for MersenneTwisterGenerator();
    swift_allocObject();
    MersenneTwisterGenerator.init(seed:)(a6);
    uint64_t v19 = v16;
    specialized stratifiedSplitBySequenceGenerator<A>(proportions:generator:dataTable:by:on:)(a1, (uint64_t)&v19, v14, v15, a2, a3, a4, a5, a7);
    return swift_release();
  }
  return result;
}

void MLDataTable.stratifiedSplitBySequence<A>(proportions:by:on:generator:)(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  char v9 = *((unsigned char *)v8 + 8);
  uint64_t v10 = *v8;
  char v11 = v9;
  stratifiedSplitBySequenceGenerator<A>(proportions:generator:dataTable:by:on:)(a1, a6, (uint64_t)&v10, a2, a3, a4, a5, a7, a8);
}

uint64_t _s8CreateML15MLUntypedColumnVyACxcSTRzAA22MLDataValueConvertible7ElementRpzlufcAA08_UntypedD0CyKXEfU_SaySaySiGG_TG5TA_0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return specialized closure #1 in MLUntypedColumn.init<A>(_:)(*(void **)(v2 + 16), a1, a2);
}

void OUTLINED_FUNCTION_1_48()
{
  outlined consume of MLDataValue(v1, v0, 3);
}

void OUTLINED_FUNCTION_5_46(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  MLDataTable.subscript.getter(0x6F69746974726170, (void *)0xE90000000000006ELL, (uint64_t)va);
}

void OUTLINED_FUNCTION_9_34()
{
  outlined consume of MLDataValue(v0, v2, v1);
}

void OUTLINED_FUNCTION_13_36()
{
  outlined consume of Result<_DataTable, Error>(v0, v1);
}

uint64_t MLHandActionClassifier.GraphCNN.writeMLPackage(to:metadata:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v73 = a1;
  uint64_t v59 = type metadata accessor for Model();
  OUTLINED_FUNCTION_0();
  uint64_t v58 = v4;
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_33_0();
  uint64_t v66 = v6;
  type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v67 = v8;
  uint64_t v68 = v7;
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  char v63 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v62 = (char *)&v49 - v12;
  MEMORY[0x270FA5388](v11);
  char v65 = (char *)&v49 - v13;
  uint64_t v60 = type metadata accessor for Package();
  OUTLINED_FUNCTION_0();
  uint64_t v61 = v14;
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_33_0();
  uint64_t v64 = v16;
  type metadata accessor for MLPackageWritingOptions();
  OUTLINED_FUNCTION_0();
  uint64_t v69 = v18;
  uint64_t v70 = v17;
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_3_0();
  type metadata accessor for ScalarType();
  OUTLINED_FUNCTION_0();
  uint64_t v71 = v20;
  uint64_t v72 = v19;
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_3_0();
  uint64_t v23 = v22 - v21;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComputeDevice?);
  MEMORY[0x270FA5388](v24 - 8);
  OUTLINED_FUNCTION_3_0();
  uint64_t v27 = v26 - v25;
  uint64_t v28 = type metadata accessor for TensorShape();
  MEMORY[0x270FA5388](v28 - 8);
  OUTLINED_FUNCTION_3_0();
  uint64_t v57 = *a2;
  uint64_t v56 = a2[1];
  uint64_t v55 = a2[2];
  uint64_t v54 = a2[3];
  uint64_t v53 = a2[4];
  uint64_t v52 = a2[5];
  uint64_t v51 = a2[6];
  uint64_t v50 = a2[7];
  uint64_t v49 = a2[8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Tensor)>);
  uint64_t v29 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Tensor))
                  - 8);
  unint64_t v30 = (*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
  uint64_t v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_2272CB370;
  char v32 = (void *)(v31 + v30);
  *char v32 = 0x7365736F70;
  v32[1] = 0xE500000000000000;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_2272CB4A0;
  uint64_t v34 = v2 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_model;
  swift_beginAccess();
  *(void *)(v33 + 32) = *(void *)(v34
                                    + *(int *)(type metadata accessor for MLHandActionClassifier.GraphCNNModel(0) + 40));
  *(int8x16_t *)(v33 + 40) = vextq_s8(*(int8x16_t *)(v2 + 24), *(int8x16_t *)(v2 + 24), 8uLL);
  MEMORY[0x22A672540](v33);
  uint64_t v35 = type metadata accessor for ComputeDevice();
  __swift_storeEnumTagSinglePayload(v27, 1, 1, v35);
  (*(void (**)(uint64_t, void, uint64_t))(v71 + 104))(v23, *MEMORY[0x263F58330], v72);
  Tensor.init(zeros:scalarType:on:)();
  type metadata accessor for Tensor();
  Dictionary.init(dictionaryLiteral:)();
  v74[0] = v2;
  uint64_t v36 = swift_retain();
  MEMORY[0x22A672670](v36);
  lazy protocol witness table accessor for type MLHandActionClassifier.GraphCNN.MLPackageRepresentation and conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation();
  uint64_t v37 = v73;
  uint64_t v38 = v74[14];
  Layer<>.writeMLPackage(withInput:output:to:options:)();
  if (v38)
  {
    swift_bridgeObjectRelease();
    uint64_t v39 = OUTLINED_FUNCTION_2_58();
    v40(v39);
    return swift_release();
  }
  else
  {
    uint64_t v42 = v63;
    uint64_t v43 = v61;
    uint64_t v44 = v66;
    swift_bridgeObjectRelease();
    uint64_t v45 = OUTLINED_FUNCTION_2_58();
    v46(v45);
    swift_release();
    (*(void (**)(char *, uint64_t, uint64_t))(v67 + 16))(v65, v37, v68);
    uint64_t v47 = v64;
    Package.init(url:)();
    Package.rootModelURL.getter();
    Model.init(contentsOf:)();
    MLHandActionClassifier.GraphCNN.convertIntoClassifier(_:)(v44);
    Package.setRootModel(_:)();
    (*(void (**)(char *, uint64_t))(v67 + 8))(v42, v68);
    v74[0] = v57;
    v74[1] = v56;
    v74[2] = v55;
    v74[3] = v54;
    v74[4] = v53;
    v74[5] = v52;
    v74[6] = v51;
    unsigned char v74[7] = v50;
    v74[8] = v49;
    MLHandActionClassifier.GraphCNN.addMetadata(_:_:)(v47, v74);
    uint64_t v48 = v60;
    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v44, v59);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v43 + 8))(v47, v48);
  }
}

uint64_t MLHandActionClassifier.GraphCNN.MLPackageRepresentation.forward(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TensorShape();
  uint64_t v55 = *(void *)(v4 - 8);
  uint64_t v56 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v49 - v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: Tensor)?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (uint64_t *)((char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = type metadata accessor for Tensor();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v54 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v57 = (char *)&v49 - v18;
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)&v49 - v20;
  MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v49 - v22;
  if (*(void *)(a1 + 16) == 1)
  {
    uint64_t v24 = swift_bridgeObjectRetain();
    specialized Collection.first.getter(v24, v12);
    swift_bridgeObjectRelease();
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: Tensor));
    if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v25) == 1)
    {
      outlined destroy of (key: String, value: Tensor)?((uint64_t)v12);
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v26 = (char *)v12 + *(int *)(v25 + 48);
      uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
      v27(v21, v26, v13);
      v27(v23, v21, v13);
      Tensor.shape.getter();
      uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      uint64_t v28 = swift_allocObject();
      long long v51 = xmmword_2272CB4A0;
      *(_OWORD *)(v28 + 16) = xmmword_2272CB4A0;
      uint64_t v29 = a2 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_model;
      swift_beginAccess();
      uint64_t v50 = type metadata accessor for MLHandActionClassifier.GraphCNNModel(0);
      *(void *)(v28 + 32) = *(void *)(v29 + *(int *)(v50 + 40));
      *(int8x16_t *)(v28 + 40) = vextq_s8(*(int8x16_t *)(a2 + 24), *(int8x16_t *)(a2 + 24), 8uLL);
      MEMORY[0x22A672540](v28);
      uint64_t v30 = TensorShape.dimensions.getter();
      uint64_t v53 = a2;
      uint64_t v31 = v30;
      char v32 = (void *)TensorShape.dimensions.getter();
      char v33 = specialized static Array<A>.== infix(_:_:)(v31, v32);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v34 = v56;
      uint64_t v35 = *(void (**)(char *, uint64_t))(v55 + 8);
      v35(v7, v56);
      v35(v9, v34);
      if (v33)
      {
        uint64_t v36 = v54;
        Tensor.expandingShape(at:)();
        uint64_t v37 = v57;
        MLHandActionClassifier.GraphCNN.callAsFunction(_:)();
        uint64_t v38 = *(void (**)(char *, uint64_t))(v14 + 8);
        v38(v36, v13);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Tensor)>);
        uint64_t v39 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Tensor))
                    - 8);
        unint64_t v40 = (*(unsigned __int8 *)(*(void *)v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v39 + 80);
        uint64_t v41 = swift_allocObject();
        *(_OWORD *)(v41 + 16) = xmmword_2272CB370;
        uint64_t v42 = (void *)(v41 + v40);
        unint64_t v43 = v41 + v40 + v39[14];
        void *v42 = 0xD000000000000010;
        v42[1] = 0x80000002272D9FD0;
        (*(void (**)(unint64_t, char *, uint64_t))(v14 + 16))(v43, v37, v13);
        uint64_t v44 = Dictionary.init(dictionaryLiteral:)();
        v38(v37, v13);
        v38(v23, v13);
        return v44;
      }
      unint64_t v58 = 0;
      unint64_t v59 = 0xE000000000000000;
      _StringGuts.grow(_:)(29);
      swift_bridgeObjectRelease();
      unint64_t v58 = 0xD00000000000001ALL;
      unint64_t v59 = 0x80000002272DA010;
      uint64_t v46 = swift_allocObject();
      *(_OWORD *)(v46 + 16) = v51;
      *(void *)(v46 + 32) = *(void *)(v29 + *(int *)(v50 + 40));
      *(int8x16_t *)(v46 + 40) = vextq_s8(*(int8x16_t *)(v53 + 24), *(int8x16_t *)(v53 + 24), 8uLL);
      v47._uint64_t countAndFlagsBits = MEMORY[0x22A674D80]();
      String.append(_:)(v47);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v48._uint64_t countAndFlagsBits = 46;
      v48._id object = (void *)0xE100000000000000;
      String.append(_:)(v48);
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for Layer.forward(_:) in conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = MLHandActionClassifier.GraphCNN.MLPackageRepresentation.forward(_:)(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t protocol witness for _ComputeDevicePlaceable.place(on:) in conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation()
{
  lazy protocol witness table accessor for type MLHandActionClassifier.GraphCNN.MLPackageRepresentation and conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation();

  return Layer.place(on:)();
}

uint64_t protocol witness for _ComputeDevicePlaceable.placed(on:) in conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation()
{
  lazy protocol witness table accessor for type MLHandActionClassifier.GraphCNN.MLPackageRepresentation and conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation();

  return Layer.placed(on:)();
}

uint64_t MLHandActionClassifier.GraphCNN.convertIntoClassifier(_:)(uint64_t a1)
{
  uint64_t v26 = type metadata accessor for ModelKind();
  uint64_t v29 = *(void *)(v26 - 8);
  uint64_t v2 = MEMORY[0x270FA5388](v26);
  uint64_t v31 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v25 - v4;
  uint64_t v30 = type metadata accessor for MLProgram();
  uint64_t v27 = *(void *)(v30 - 8);
  MEMORY[0x270FA5388](v30);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for FeatureType();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = a1;
  Model.predictedFeatureName.setter();
  Model.predictedProbabilitiesName.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<FeatureDescription>);
  type metadata accessor for FeatureDescription();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_2272CB4D0;
  FeatureType.StringParameters.init(optional:)();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, *MEMORY[0x263F531D0], v8);
  uint64_t v12 = v26;
  FeatureDescription.init(name:type:description:)();
  static FeatureType.dictionaryWithStringKeys(optional:)();
  uint64_t v28 = (void *)0x80000002272D41B0;
  uint64_t v13 = v29;
  FeatureDescription.init(name:type:description:)();
  Model.outputs.setter();
  Model.kind.getter();
  uint64_t v14 = (*(uint64_t (**)(char *, uint64_t))(v13 + 88))(v5, v12);
  if (v14 == *MEMORY[0x263F53478])
  {
    uint64_t v15 = v14;
    (*(void (**)(char *, uint64_t))(v13 + 96))(v5, v12);
    uint64_t v16 = v27;
    uint64_t v17 = v5;
    uint64_t v18 = v30;
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v7, v17, v30);
    uint64_t v19 = swift_bridgeObjectRetain();
    v20._uint64_t countAndFlagsBits = 0xD000000000000010;
    v20._id object = (void *)0x80000002272D9FD0;
    v21._uint64_t countAndFlagsBits = 0xD000000000000012;
    v21._id object = v28;
    v22._uint64_t countAndFlagsBits = 0x6C6562616CLL;
    v22._id object = (void *)0xE500000000000000;
    MLProgram.addClassifierSpecification(classLabels:probabilityTensorName:outputProbabilityName:outputLabelName:)((Swift::OpaquePointer)v19, v20, v21, v22);
    swift_bridgeObjectRelease();
    uint64_t v23 = v31;
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v31, v7, v18);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 104))(v23, v15, v12);
    Model.kind.setter();
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v7, v18);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v5, v12);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t MLHandActionClassifier.GraphCNN.addMetadata(_:_:)(uint64_t a1, void *a2)
{
  uint64_t v19 = a1;
  uint64_t v22 = type metadata accessor for Package.ModelMetadata();
  uint64_t v20 = *(void *)(v22 - 8);
  uint64_t v3 = MEMORY[0x270FA5388](v22);
  uint64_t v18 = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v17 - v5;
  uint64_t v7 = a2[1];
  uint64_t v8 = a2[5];
  v17[1] = a2[4];
  uint64_t v9 = a2[8];
  Package.ModelMetadata.init()();
  if (v7)
  {
    swift_bridgeObjectRetain();
    Package.ModelMetadata.author.setter();
    swift_bridgeObjectRetain();
    Package.ModelMetadata.description.setter();
    swift_bridgeObjectRetain();
    Package.ModelMetadata.version.setter();
    if (v8)
    {
      swift_bridgeObjectRetain();
      Package.ModelMetadata.license.setter();
    }
    if (v9)
    {
      swift_bridgeObjectRetain();
      Package.ModelMetadata.creatorDefined.setter();
    }
  }
  else
  {
    uint64_t v10 = NSFullUserName();
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    Package.ModelMetadata.author.setter();
  }
  getOSVersion()();
  uint64_t v11 = (void (*)(char *, void))Package.ModelMetadata.creatorDefined.modify();
  specialized Dictionary._Variant.setValue(_:forKey:)();
  v11(v21, 0);
  uint64_t v12 = v20;
  uint64_t v13 = v18;
  uint64_t v14 = v22;
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v18, v6, v22);
  Package.writeMetadata(_:)();
  uint64_t v15 = *(void (**)(char *, uint64_t))(v12 + 8);
  v15(v13, v14);
  return ((uint64_t (*)(char *, uint64_t))v15)(v6, v14);
}

unint64_t lazy protocol witness table accessor for type MLHandActionClassifier.GraphCNN.MLPackageRepresentation and conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation()
{
  unint64_t result = lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNN.MLPackageRepresentation and conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation;
  if (!lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNN.MLPackageRepresentation and conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNN.MLPackageRepresentation and conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNN.MLPackageRepresentation and conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation;
  if (!lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNN.MLPackageRepresentation and conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNN.MLPackageRepresentation and conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNN.MLPackageRepresentation and conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation;
  if (!lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNN.MLPackageRepresentation and conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNN.MLPackageRepresentation and conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNN.MLPackageRepresentation and conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation;
  if (!lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNN.MLPackageRepresentation and conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNN.MLPackageRepresentation and conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation);
  }
  return result;
}

void *type metadata accessor for MLHandActionClassifier.GraphCNN.MLPackageRepresentation()
{
  return &unk_26DB43C10;
}

uint64_t outlined destroy of (key: String, value: Tensor)?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: Tensor)?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || (void *)result == a2) {
    return 1;
  }
  if (*(void *)(result + 32) != a2[4]) {
    return 0;
  }
  if (v2 == 1) {
    return 1;
  }
  if (*(void *)(result + 40) != a2[5]) {
    return 0;
  }
  if (v2 == 2) {
    return 1;
  }
  uint64_t v3 = 3 - v2;
  uint64_t v4 = (uint64_t *)(result + 48);
  uint64_t v5 = a2 + 6;
  while (v3 != 1)
  {
    uint64_t v7 = *v4++;
    uint64_t v6 = v7;
    uint64_t v8 = *v5++;
    unint64_t result = v6 == v8;
    if (v6 != v8 || v3++ == 0) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t OUTLINED_FUNCTION_2_58()
{
  return v0;
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF11TabularData0D5FrameV_s5NeverO8CreateML24MLDecisionTreeClassifierV15ModelParametersV010ValidationD0OTg503_s8g4ML24ijk3V15lm75V13configuration10validationAE0A12MLComponents07BoostedD13ConfigurationV_11c7Data0N5e12VSgtcfcAE010N21N0OAMcAPmcfu_ApMcfu0_AOXMtTf1ncn_n@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for DataFrame();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of URL?(a1, (uint64_t)v10, &demangling cache variable for type metadata for DataFrame?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v4) == 1)
  {
    uint64_t v11 = type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData();
    uint64_t v12 = a2;
    uint64_t v13 = 1;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 16))(a2, v7, v4);
    uint64_t v14 = type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    uint64_t v12 = a2;
    uint64_t v13 = 0;
    uint64_t v11 = v14;
  }
  return __swift_storeEnumTagSinglePayload(v12, v13, 1, v11);
}

id MLDecisionTreeClassifier.model.getter()
{
  char v1 = *(void **)(v0 + *(int *)(type metadata accessor for MLDecisionTreeClassifier() + 20));

  return v1;
}

uint64_t type metadata accessor for MLDecisionTreeClassifier()
{
  uint64_t result = type metadata singleton initialization cache for MLDecisionTreeClassifier;
  if (!type metadata singleton initialization cache for MLDecisionTreeClassifier) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void key path setter for MLDecisionTreeClassifier.model : MLDecisionTreeClassifier(id *a1)
{
  id v1 = *a1;
  MLDecisionTreeClassifier.model.setter();
}

void MLDecisionTreeClassifier.model.setter()
{
  uint64_t v2 = *(int *)(OUTLINED_FUNCTION_52_8() + 20);

  *(void *)(v1 + v2) = v0;
}

void (*MLDecisionTreeClassifier.model.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for MLDecisionTreeClassifier() + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = *(void **)(v1 + v3);
  *(void *)a1 = v4;
  id v5 = v4;
  return MLRandomForestRegressor.model.modify;
}

uint64_t MLDecisionTreeClassifier.targetColumn.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for MLDecisionTreeClassifier() + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MLDecisionTreeClassifier.targetColumn.setter(uint64_t a1, uint64_t a2)
{
  id v5 = (void *)(v2 + *(int *)(type metadata accessor for MLDecisionTreeClassifier() + 24));
  uint64_t result = swift_bridgeObjectRelease();
  *id v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*MLDecisionTreeClassifier.targetColumn.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLDecisionTreeClassifier.featureColumns.getter()
{
  type metadata accessor for MLDecisionTreeClassifier();

  return swift_bridgeObjectRetain();
}

uint64_t MLDecisionTreeClassifier.featureColumns.setter()
{
  uint64_t v2 = *(int *)(OUTLINED_FUNCTION_52_8() + 28);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v2) = v0;
  return result;
}

uint64_t (*MLDecisionTreeClassifier.featureColumns.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLDecisionTreeClassifier.modelParameters.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for MLDecisionTreeClassifier() + 32);

  return outlined init with copy of MLDecisionTreeClassifier.ModelParameters(v3, a1);
}

uint64_t outlined init with copy of MLDecisionTreeClassifier.ModelParameters(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t MLDecisionTreeClassifier.trainingMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for MLDecisionTreeClassifier();
  return _s8CreateML19MLClassifierMetricsVWOcTm_1(v1 + *(int *)(v3 + 36), a1, (void (*)(void))type metadata accessor for MLClassifierMetrics);
}

uint64_t MLDecisionTreeClassifier.validationMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for MLDecisionTreeClassifier();
  return _s8CreateML19MLClassifierMetricsVWOcTm_1(v1 + *(int *)(v3 + 40), a1, (void (*)(void))type metadata accessor for MLClassifierMetrics);
}

uint64_t static MLDecisionTreeClassifier._defaultSessionParameters.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for _defaultSessionParameters != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for MLTrainingSessionParameters();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static MLDecisionTreeClassifier._defaultSessionParameters);
  return _s8CreateML19MLClassifierMetricsVWOcTm_1(v3, a1, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
}

uint64_t MLDecisionTreeClassifier.init(_:targetColumn:featureColumns:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  v6[7] = a6;
  v6[4] = a3;
  v6[5] = a4;
  _OWORD v6[2] = a1;
  v6[3] = a2;
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

#error "2271EAB64: call analysis failed (funcsize=81)"

uint64_t MLDecisionTreeClassifier.init(_:targetColumn:featureColumns:parameters:)()
{
  OUTLINED_FUNCTION_60_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_2();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_7();
  void *v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_6();
  *uint64_t v8 = v7;
  *(void *)(v5 + 80) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 88) = v3;
  }
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

{
  void *v0;
  uint64_t v1;
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  long long v6;
  long long v7;
  long long v8;
  uint64_t (*v9)(void);
  uint64_t v11;

  OUTLINED_FUNCTION_60_0();
  uint64_t v2 = (_OWORD *)v0[7];
  uint64_t v1 = v0[8];
  uint64_t v4 = v0[2];
  uint64_t v3 = v0[3];
  *(void *)(v4 + *(int *)(v1 + 20)) = v0[11];
  _s8CreateML22AnyTreeClassifierModelVWObTm_1(v3, v4, (void (*)(void))type metadata accessor for AnyTreeClassifierModel);
  uint64_t v5 = (_OWORD *)(v4 + *(int *)(v1 + 32));
  uint64_t v7 = v2[2];
  uint64_t v6 = v2[3];
  uint64_t v8 = v2[1];
  *uint64_t v5 = *v2;
  v5[1] = v8;
  v5[2] = v7;
  v5[3] = v6;
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v3 = v2 + *(int *)(v0 + 100);
  uint64_t v4 = v2 + *(int *)(v0 + 96);
  outlined destroy of MLDecisionTreeClassifier.ModelParameters(*(void *)(v0 + 56));
  outlined destroy of MLDecisionTreeClassifier.ModelParameters.ValidationData(v1, (void (*)(void))type metadata accessor for AnyTreeClassifierModel);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of MLDecisionTreeClassifier.ModelParameters.ValidationData(v4, (void (*)(void))type metadata accessor for MLClassifierMetrics);
  outlined destroy of MLDecisionTreeClassifier.ModelParameters.ValidationData(v3, (void (*)(void))type metadata accessor for MLClassifierMetrics);
  OUTLINED_FUNCTION_30();
  return v5();
}

void MLDecisionTreeClassifier.init(trainingData:targetColumn:featureColumns:parameters:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v217 = v0;
  uint64_t v4 = v3;
  uint64_t v216 = v5;
  uint64_t v228 = v6;
  uint64_t v214 = v7;
  uint64_t v224 = v8;
  uint64_t v10 = v9;
  uint64_t v11 = type metadata accessor for AnyClassificationMetrics();
  uint64_t v12 = OUTLINED_FUNCTION_17(v11);
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_106();
  uint64_t v15 = OUTLINED_FUNCTION_17_3(v14);
  uint64_t v16 = type metadata accessor for MLClassifierMetrics(v15);
  uint64_t v17 = OUTLINED_FUNCTION_17(v16);
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_106();
  OUTLINED_FUNCTION_17_3(v19);
  uint64_t v20 = type metadata accessor for AnyTreeClassifierModel();
  uint64_t v21 = OUTLINED_FUNCTION_1(v20);
  uint64_t v200 = v22;
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  uint64_t v202 = (uint64_t)&v182 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v201 = v24;
  MEMORY[0x270FA5388](v23);
  OUTLINED_FUNCTION_106();
  uint64_t v204 = v25;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  uint64_t v27 = OUTLINED_FUNCTION_17(v26);
  MEMORY[0x270FA5388](v27);
  OUTLINED_FUNCTION_33_0();
  uint64_t v210 = v28;
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyColumn?);
  uint64_t v30 = OUTLINED_FUNCTION_17(v29);
  MEMORY[0x270FA5388](v30);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_17_3(v31);
  uint64_t v206 = type metadata accessor for AnyColumn();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v32);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v33);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v34);
  OUTLINED_FUNCTION_106();
  OUTLINED_FUNCTION_17_3(v35);
  uint64_t v36 = type metadata accessor for AnyTreeClassifier();
  uint64_t v37 = OUTLINED_FUNCTION_17(v36);
  MEMORY[0x270FA5388](v37);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_17_3(v38);
  uint64_t v223 = type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v219 = v39;
  MEMORY[0x270FA5388](v40);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v41);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v42);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v43);
  OUTLINED_FUNCTION_106();
  OUTLINED_FUNCTION_17_3(v44);
  type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v45);
  OUTLINED_FUNCTION_24_4();
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v47);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v48);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v49);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v50);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  uint64_t v52 = MEMORY[0x270FA5388](v51);
  uint64_t v54 = (char *)&v182 - v53;
  MEMORY[0x270FA5388](v52);
  uint64_t v56 = (char *)&v182 - v55;
  uint64_t v222 = type metadata accessor for BoostedTreeConfiguration();
  OUTLINED_FUNCTION_0();
  uint64_t v221 = v57;
  MEMORY[0x270FA5388](v58);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v59);
  OUTLINED_FUNCTION_36_15();
  uint64_t v60 = type metadata accessor for MLDecisionTreeClassifier();
  uint64_t v218 = (uint64_t)v10 + *(int *)(v60 + 36);
  MLClassifierMetrics.init()(v60, v61, v62, v63, v64, v65, v66, v67, (uint64_t)v182, v183, v184, (uint64_t)v185, v186, v187, v188, v189, v190, v191, v192,
    v193);
  uint64_t v199 = (int *)v60;
  uint64_t v68 = *(int *)(v60 + 40);
  uint64_t v203 = v10;
  uint64_t v69 = (void *)((char *)v10 + v68);
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  swift_allocError();
  OUTLINED_FUNCTION_32_2(v70, 0xD0000000000000C0);
  *uint64_t v69 = v71;
  uint64_t v72 = type metadata accessor for MLClassifierMetrics.Contents(0);
  uint64_t v215 = v69;
  uint64_t v196 = v72;
  swift_storeEnumTagMultiPayload();
  outlined init with copy of MLDecisionTreeClassifier.ModelParameters(v4, (uint64_t)v227);
  BoostedTreeConfiguration.init()();
  BoostedTreeConfiguration.maximumIterations.setter();
  BoostedTreeConfiguration.learningRate.setter();
  BoostedTreeConfiguration.maximumDepth.setter();
  BoostedTreeConfiguration.minimumLossReduction.setter();
  BoostedTreeConfiguration.minimumChildWeight.setter();
  BoostedTreeConfiguration.randomSeed.setter();
  outlined destroy of MLDecisionTreeClassifier.ModelParameters((uint64_t)v227);
  uint64_t v220 = v4;
  outlined init with copy of URL?(v4 + 8, (uint64_t)&v225, &demangling cache variable for type metadata for Any?);
  if (v226)
  {
    uint64_t v73 = (uint64_t)&v56[*(int *)(v46 + 48)];
    outlined init with take of Any(&v225, v227);
    swift_dynamicCast();
    uint64_t v74 = v217;
    MLDecisionTreeClassifier.ModelParameters.ValidationData.generateDataFrames(trainingData:)((uint64_t)v56, v73, v224);
    if (v74)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_25_25();
      OUTLINED_FUNCTION_25_0();
      v75();
      outlined destroy of MLDecisionTreeClassifier.ModelParameters.ValidationData(v1, (void (*)(void))type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData);
      (*(void (**)(uint64_t, uint64_t))(v221 + 8))(v2, v222);
    }
    else
    {
      uint64_t v217 = v73;
      uint64_t v188 = v46;
      outlined destroy of MLDecisionTreeClassifier.ModelParameters.ValidationData(v1, (void (*)(void))type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData);
      static _FeatureUtilities.selectFeaturesFromTrainingData(trainingData:targetColumn:featureColumns:)((uint64_t)v56, (uint64_t)v214, v228, (uint64_t)v216);
      uint64_t v77 = v219;
      uint64_t v184 = v76;
      uint64_t v186 = 0;
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_43_12();
      uint64_t v81 = (uint64_t)&v54[v80];
      uint64_t v82 = *(void (**)(uint64_t, char *, uint64_t))(v77 + 16);
      uint64_t v83 = v223;
      uint64_t v183 = v77 + 16;
      uint64_t v182 = v82;
      v82((uint64_t)v54, v56, v223);
      outlined init with copy of URL?(v217, v81, &demangling cache variable for type metadata for DataFrame?);
      int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v81, 1, v83);
      unsigned __int8 v185 = v56;
      if (EnumTagSinglePayload == 1)
      {
        outlined destroy of URL?(v81, &demangling cache variable for type metadata for DataFrame?);
        char v85 = *(void (**)(void))(v77 + 8);
        uint64_t v187 = (v77 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
        uint64_t v86 = OUTLINED_FUNCTION_48_1();
        ((void (*)(uint64_t))v85)(v86);
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v77 + 32))(v213, v81, v83);
        id v98 = *(void (**)(void))(v77 + 8);
        uint64_t v97 = v77 + 8;
        char v85 = v98;
        OUTLINED_FUNCTION_9_35();
        v98();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_2272CB370;
        char v100 = v214;
        *(void *)(inited + 32) = v214;
        *(void *)(inited + 40) = v228;
        swift_bridgeObjectRetain();
        v101._uint64_t countAndFlagsBits = 0x73616C4365657254;
        v101._id object = (void *)0xEE00726569666973;
        DataFrame.validateContainsColumns(_:context:)((Swift::OpaquePointer)inited, v101);
        if (v102)
        {
          swift_setDeallocating();
          specialized _ContiguousArrayStorage.__deallocating_deinit();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_25_25();
          OUTLINED_FUNCTION_9_35();
          v85();
          OUTLINED_FUNCTION_9_35();
          uint64_t v103 = ((uint64_t (*)(void))v85)();
          OUTLINED_FUNCTION_34_12(v103, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
          uint64_t v104 = OUTLINED_FUNCTION_5_47();
          v105(v104);
          goto LABEL_5;
        }
        swift_setDeallocating();
        specialized _ContiguousArrayStorage.__deallocating_deinit();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any.Type>);
        uint64_t v118 = swift_allocObject();
        uint64_t v119 = (uint64_t)v100;
        v120._rawValue = (void *)v118;
        *(_OWORD *)(v118 + 16) = xmmword_2272CB4D0;
        uint64_t v121 = MEMORY[0x263F8D6C8];
        *(void *)(v118 + 32) = MEMORY[0x263F8D310];
        *(void *)(v118 + 40) = v121;
        v122._uint64_t countAndFlagsBits = v119;
        v122._id object = v228;
        v123._uint64_t countAndFlagsBits = 0x73616C4365657254;
        v123._id object = (void *)0xEE00726569666973;
        DataFrame.validateColumnTypes(_:_:context:)(v122, v120, v123);
        uint64_t v124 = v222;
        if (v125)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_25_25();
          OUTLINED_FUNCTION_9_35();
          v85();
          OUTLINED_FUNCTION_9_35();
          uint64_t v126 = ((uint64_t (*)(void))v85)();
          OUTLINED_FUNCTION_34_12(v126, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
          (*(void (**)(uint64_t, uint64_t))(v221 + 8))(v2, v124);
          goto LABEL_5;
        }
        uint64_t v186 = 0;
        uint64_t v187 = v97 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
        OUTLINED_FUNCTION_9_35();
        v85();
        swift_bridgeObjectRelease();
        uint64_t v56 = v185;
      }
      uint64_t v216 = v85;
      uint64_t v87 = v188;
      uint64_t v88 = v208 + *(int *)(v188 + 48);
      uint64_t v89 = v182;
      v182(v208, v56, v83);
      uint64_t v213 = v88;
      outlined init with copy of URL?(v217, v88, &demangling cache variable for type metadata for DataFrame?);
      MEMORY[0x22A672220](v214, v228);
      OUTLINED_FUNCTION_46_11();
      v90();
      uint64_t v91 = v209 + *(int *)(v87 + 48);
      v89(v209, v56, v83);
      uint64_t v92 = OUTLINED_FUNCTION_47_4();
      outlined init with copy of URL?(v92, v93, &demangling cache variable for type metadata for DataFrame?);
      uint64_t v94 = v210;
      outlined init with take of DataFrame?(v91, v210);
      if (__swift_getEnumTagSinglePayload(v94, 1, v83) == 1)
      {
        OUTLINED_FUNCTION_48_1();
        OUTLINED_FUNCTION_46_11();
        v95();
        outlined destroy of URL?(v94, &demangling cache variable for type metadata for DataFrame?);
        uint64_t v96 = v207;
        __swift_storeEnumTagSinglePayload(v207, 1, 1, v206);
      }
      else
      {
        uint64_t v96 = v207;
        MEMORY[0x22A672220](v214, v228);
        uint64_t v106 = v94;
        char v107 = v216;
        ((void (*)(uint64_t, uint64_t))v216)(v106, v83);
        __swift_storeEnumTagSinglePayload(v96, 0, 1, v206);
        uint64_t v108 = OUTLINED_FUNCTION_48_1();
        ((void (*)(uint64_t))v107)(v108);
      }
      uint64_t v109 = v221;
      uint64_t v110 = v186;
      uint64_t v111 = v211;
      uint64_t v112 = v205;
      uint64_t v113 = v222;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v221 + 16))(v205, v2, v222);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      AnyTreeClassifier.init(trainingLabelsColumn:validationLabelsColumn:annotationColumnName:featureColumnNames:configuration:)(v212, v96, v214, (uint64_t)v228, v112, v111);
      if (v110)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_25_25();
        uint64_t v114 = OUTLINED_FUNCTION_11_36();
        uint64_t v116 = v115(v114);
        OUTLINED_FUNCTION_34_12(v116, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
        (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v2, v113);
        outlined destroy of URL?(v213, &demangling cache variable for type metadata for DataFrame?);
      }
      else
      {
        outlined destroy of URL?(v213, &demangling cache variable for type metadata for DataFrame?);
        uint64_t v117 = v204;
        AnyTreeClassifier.fitted(to:validateOn:eventHandler:)(v185, v217, 0, 0, v204);
        unsigned __int8 v127 = AnalyticsReporter.init()();
        uint64_t v128 = v220;
        if ((v127 & 1) == 0)
        {
          OUTLINED_FUNCTION_43_12();
          uint64_t v129 = v198;
          uint64_t v131 = v198 + v130;
          uint64_t v132 = v223;
          OUTLINED_FUNCTION_32_19();
          v133();
          outlined init with copy of URL?(v217, v131, &demangling cache variable for type metadata for DataFrame?);
          Swift::Int v134 = DataFrame.shape.getter();
          ((void (*)(uint64_t, uint64_t))v216)(v129, v132);
          v135._uint64_t countAndFlagsBits = 0xD000000000000015;
          v135._id object = (void *)0x80000002272D4D30;
          AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_decisionTreeClassifier, v135, v134);
          uint64_t v117 = v204;
          outlined destroy of URL?(v131, &demangling cache variable for type metadata for DataFrame?);
          v136._id object = (void *)0x80000002272D84F0;
          v136._uint64_t countAndFlagsBits = 0xD000000000000010;
          AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_decisionTreeClassifier, v136, *(void *)(v211[3] + 16));
        }
        uint64_t v137 = v199;
        uint64_t v138 = v203;
        uint64_t v139 = (void *)((char *)v203 + v199[6]);
        int v140 = v214;
        uint64_t v214 = v139;
        *uint64_t v139 = v140;
        v139[1] = v228;
        uint64_t v229 = (uint64_t)v138 + v137[8];
        outlined init with copy of MLDecisionTreeClassifier.ModelParameters(v128, v229);
        uint64_t v213 = v137[7];
        *(void *)((char *)v138 + v213) = v184;
        uint64_t v141 = v202;
        _s8CreateML19MLClassifierMetricsVWOcTm_1((uint64_t)v117, v202, (void (*)(void))type metadata accessor for AnyTreeClassifierModel);
        unint64_t v142 = (*(unsigned __int8 *)(v200 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v200 + 80);
        uint64_t v143 = swift_allocObject();
        _s8CreateML22AnyTreeClassifierModelVWObTm_1(v141, v143 + v142, (void (*)(void))type metadata accessor for AnyTreeClassifierModel);
        specialized blockAwait<A>(_:)();
        uint64_t v145 = v144;
        swift_release();
        uint64_t v146 = v137[5];
        *(void *)((char *)v138 + v146) = v145;
        _s8CreateML19MLClassifierMetricsVWOcTm_1((uint64_t)v117, (uint64_t)v138, (void (*)(void))type metadata accessor for AnyTreeClassifierModel);
        uint64_t v147 = v197;
        uint64_t v148 = v185;
        AnyTreeClassifierModel.applied(to:eventHandler:)(v197);
        uint64_t v186 = 0;
        uint64_t v212 = v146;
        uint64_t v153 = *v138;
        uint64_t v154 = v138[1];
        MEMORY[0x22A672220](*v138, v154);
        MEMORY[0x22A672220](v153, v154);
        uint64_t v155 = v195;
        AnyClassificationMetrics.init(_:_:)();
        uint64_t v156 = v223;
        uint64_t v157 = v216;
        ((void (*)(uint64_t, uint64_t))v216)(v147, v223);
        uint64_t v158 = v155;
        uint64_t v159 = v194;
        _s8CreateML22AnyTreeClassifierModelVWObTm_1(v158, v194, (void (*)(void))type metadata accessor for AnyClassificationMetrics);
        swift_storeEnumTagMultiPayload();
        outlined assign with take of MLClassifierMetrics(v159, v218);
        OUTLINED_FUNCTION_43_12();
        uint64_t v160 = v193;
        uint64_t v162 = v193 + v161;
        OUTLINED_FUNCTION_32_19();
        v163();
        outlined init with copy of URL?(v217, v162, &demangling cache variable for type metadata for DataFrame?);
        if (__swift_getEnumTagSinglePayload(v162, 1, v156) == 1)
        {
          OUTLINED_FUNCTION_25_25();
          ((void (*)(uint64_t, uint64_t))v157)(v224, v156);
          uint64_t v164 = outlined destroy of MLDecisionTreeClassifier.ModelParameters.ValidationData((uint64_t)v204, (void (*)(void))type metadata accessor for AnyTreeClassifierModel);
          OUTLINED_FUNCTION_51_9(v164, (void (*)(void))type metadata accessor for AnyTreeClassifier);
          outlined destroy of URL?((uint64_t)v148, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
          uint64_t v165 = OUTLINED_FUNCTION_5_47();
          v166(v165);
          outlined destroy of URL?(v162, &demangling cache variable for type metadata for DataFrame?);
          ((void (*)(uint64_t, uint64_t))v157)(v160, v156);
          goto LABEL_6;
        }
        uint64_t v167 = v192;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v219 + 32))(v192, v162, v156);
        ((void (*)(uint64_t, uint64_t))v157)(v160, v156);
        uint64_t v168 = v186;
        AnyTreeClassifierModel.applied(to:eventHandler:)(v191);
        uint64_t v169 = v224;
        BOOL v170 = v138;
        uint64_t v186 = v168;
        if (!v168)
        {
          uint64_t v172 = *v138;
          uint64_t v173 = v170[1];
          MEMORY[0x22A672220](v172, v173);
          uint64_t v174 = v192;
          MEMORY[0x22A672220](v172, v173);
          uint64_t v175 = v190;
          AnyClassificationMetrics.init(_:_:)();
          ((void (*)(uint64_t, uint64_t))v157)(v191, v156);
          OUTLINED_FUNCTION_25_25();
          ((void (*)(uint64_t, uint64_t))v157)(v224, v156);
          ((void (*)(uint64_t, uint64_t))v157)(v174, v156);
          uint64_t v176 = outlined destroy of MLDecisionTreeClassifier.ModelParameters.ValidationData((uint64_t)v204, (void (*)(void))type metadata accessor for AnyTreeClassifierModel);
          uint64_t v177 = OUTLINED_FUNCTION_51_9(v176, (void (*)(void))type metadata accessor for AnyTreeClassifier);
          OUTLINED_FUNCTION_34_12(v177, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
          uint64_t v178 = OUTLINED_FUNCTION_5_47();
          v179(v178);
          uint64_t v180 = v175;
          uint64_t v181 = v189;
          _s8CreateML22AnyTreeClassifierModelVWObTm_1(v180, v189, (void (*)(void))type metadata accessor for AnyClassificationMetrics);
          swift_storeEnumTagMultiPayload();
          outlined assign with take of MLClassifierMetrics(v181, (uint64_t)v215);
          goto LABEL_6;
        }
        outlined destroy of MLDecisionTreeClassifier.ModelParameters(v220);
        ((void (*)(uint64_t, uint64_t))v157)(v169, v156);
        ((void (*)(uint64_t, uint64_t))v157)(v167, v156);
        uint64_t v171 = v212;
        uint64_t v149 = outlined destroy of MLDecisionTreeClassifier.ModelParameters.ValidationData((uint64_t)v204, (void (*)(void))type metadata accessor for AnyTreeClassifierModel);
        uint64_t v150 = OUTLINED_FUNCTION_51_9(v149, (void (*)(void))type metadata accessor for AnyTreeClassifier);
        OUTLINED_FUNCTION_34_12(v150, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
        uint64_t v151 = OUTLINED_FUNCTION_5_47();
        v152(v151);
        outlined destroy of MLDecisionTreeClassifier.ModelParameters.ValidationData((uint64_t)v138, (void (*)(void))type metadata accessor for AnyTreeClassifierModel);

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined destroy of MLDecisionTreeClassifier.ModelParameters(v229);
      }
    }
LABEL_5:
    outlined destroy of MLDecisionTreeClassifier.ModelParameters.ValidationData(v218, (void (*)(void))type metadata accessor for MLClassifierMetrics);
    uint64_t v78 = OUTLINED_FUNCTION_47_4();
    outlined destroy of MLDecisionTreeClassifier.ModelParameters.ValidationData(v78, v79);
LABEL_6:
    OUTLINED_FUNCTION_8_1();
    return;
  }
  __break(1u);
}

uint64_t outlined destroy of MLDecisionTreeClassifier.ModelParameters(uint64_t a1)
{
  return a1;
}

uint64_t partial apply for closure #1 in MLDecisionTreeClassifier.init(trainingData:targetColumn:featureColumns:parameters:)()
{
  OUTLINED_FUNCTION_11();
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for AnyTreeClassifierModel();
  OUTLINED_FUNCTION_39_0(v2);
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)OUTLINED_FUNCTION_7_1(v3);
  void *v4 = v5;
  v4[1] = protocol witness for SupervisedEstimator.fitted<A>(to:eventHandler:) in conformance MLImageClassifier.Classifier;
  return closure #1 in MLRandomForestClassifier.init(trainingData:targetColumn:featureColumns:parameters:)(v1);
}

uint64_t MLDecisionTreeClassifier.init(trainingData:targetColumn:featureColumns:parameters:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = type metadata accessor for DataFrame();
  uint64_t v8 = OUTLINED_FUNCTION_17(v7);
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_3_0();
  uint64_t v11 = v10 - v9;
  LOBYTE(v10) = *((unsigned char *)a1 + 8);
  uint64_t v13 = *a1;
  char v14 = v10;
  DataFrame.init(_:)((uint64_t)&v13, v11);
  outlined init with copy of MLDecisionTreeClassifier.ModelParameters(a5, (uint64_t)&v13);
  MLDecisionTreeClassifier.init(trainingData:targetColumn:featureColumns:parameters:)();
  return outlined destroy of MLDecisionTreeClassifier.ModelParameters(a5);
}

void MLDecisionTreeClassifier.init(checkpoint:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v73 = (void *)v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v65 = type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_49();
  uint64_t v64 = v8;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_106();
  uint64_t v66 = v10;
  uint64_t v11 = type metadata accessor for BoostedTreeConfiguration();
  uint64_t v12 = OUTLINED_FUNCTION_17(v11);
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_24_8();
  type metadata accessor for AnyTreeClassifier();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_49();
  uint64_t v69 = v14;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v63 - v16;
  uint64_t v18 = type metadata accessor for AnyTreeClassifierModel();
  uint64_t v19 = OUTLINED_FUNCTION_1(v18);
  uint64_t v71 = v20;
  uint64_t v22 = *(void *)(v21 + 64);
  uint64_t v23 = MEMORY[0x270FA5388](v19);
  uint64_t v68 = (uint64_t)&v63 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  OUTLINED_FUNCTION_106();
  uint64_t v70 = v24;
  MEMORY[0x270FA5388](v25);
  OUTLINED_FUNCTION_36_15();
  MEMORY[0x270FA5388](v26);
  OUTLINED_FUNCTION_106();
  uint64_t v72 = v27;
  uint64_t v28 = type metadata accessor for MLDecisionTreeClassifier();
  MLClassifierMetrics.init()(v28, v29, v30, v31, v32, v33, v34, v35, (uint64_t)v63, v64, v65, (uint64_t)v66, v67, v68, v69, v70, v71, v72, (uint64_t)v73,
    v6 + *(int *)(v28 + 36));
  uint64_t v63 = (int *)v28;
  uint64_t v36 = *(int *)(v28 + 40);
  uint64_t v67 = v6;
  uint64_t v37 = (void *)(v6 + v36);
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  swift_allocError();
  OUTLINED_FUNCTION_32_2(v38, 0xD0000000000000C0);
  *uint64_t v37 = v39;
  type metadata accessor for MLClassifierMetrics.Contents(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v76 = v4;
  switch(*(unsigned char *)(v4 + *(int *)(type metadata accessor for MLCheckpoint() + 20)))
  {
    case 2:
      swift_bridgeObjectRelease();
      goto LABEL_4;
    default:
      char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v40)
      {
LABEL_4:
        specialized _setUpCast<A, B>(_:)(MEMORY[0x263F8EE88]);
        uint64_t v42 = v41;
        BoostedTreeConfiguration.init()();
        AnyTreeClassifier.init(labels:annotationColumnName:featureColumnNames:configuration:)(v42, 0, 0xE000000000000000, MEMORY[0x263F8EE78], v0, (uint64_t)v17);
        lazy protocol witness table accessor for type AnyTreeClassifier and conformance AnyTreeClassifier();
        uint64_t v43 = v73;
        UpdatableSupervisedTabularEstimator.readWithOptimizer(from:)();
        if (v43)
        {
          uint64_t v73 = v37;
          outlined destroy of MLDecisionTreeClassifier.ModelParameters.ValidationData((uint64_t)v17, (void (*)(void))type metadata accessor for AnyTreeClassifier);
          unint64_t v44 = specialized _setUpCast<A, B>(_:)(MEMORY[0x263F8EE88]);
          BoostedTreeConfiguration.init()();
          uint64_t v45 = v69;
          AnyTreeClassifier.init(labels:annotationColumnName:featureColumnNames:configuration:)(v44, 0, 0xE000000000000000, v0, v69);
          uint64_t v46 = v68;
          UpdatableSupervisedTabularEstimator.readWithOptimizer(from:)();
          outlined destroy of MLDecisionTreeClassifier.ModelParameters.ValidationData(v45, (void (*)(void))type metadata accessor for AnyTreeClassifier);

          uint64_t v2 = v46;
        }
        else
        {
          outlined destroy of MLDecisionTreeClassifier.ModelParameters.ValidationData((uint64_t)v17, (void (*)(void))type metadata accessor for AnyTreeClassifier);
        }
        uint64_t v48 = v2;
        uint64_t v49 = v72;
        _s8CreateML22AnyTreeClassifierModelVWObTm_1(v48, v72, (void (*)(void))type metadata accessor for AnyTreeClassifierModel);
        uint64_t v50 = v70;
        _s8CreateML19MLClassifierMetricsVWOcTm_1(v49, v70, (void (*)(void))type metadata accessor for AnyTreeClassifierModel);
        unint64_t v51 = (*(unsigned __int8 *)(v71 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80);
        uint64_t v52 = swift_allocObject();
        _s8CreateML22AnyTreeClassifierModelVWObTm_1(v50, v52 + v51, (void (*)(void))type metadata accessor for AnyTreeClassifierModel);
        specialized blockAwait<A>(_:)();
        uint64_t v54 = v53;
        swift_release();
        uint64_t v55 = v63;
        uint64_t v56 = v67;
        *(void *)(v67 + v63[5]) = v54;
        _s8CreateML19MLClassifierMetricsVWOcTm_1(v49, v56, (void (*)(void))type metadata accessor for AnyTreeClassifierModel);
        uint64_t v58 = v65;
        uint64_t v57 = v66;
        *uint64_t v66 = 0;
        v57[1] = 0;
        *((_WORD *)v57 + 8) = 256;
        swift_storeEnumTagMultiPayload();
        uint64_t v59 = v56 + v55[8];
        *(_OWORD *)(v59 + 24) = 0u;
        *(void *)uint64_t v59 = 6;
        *(_OWORD *)(v59 + 40) = xmmword_2272CB8D0;
        *(void *)(v59 + 56) = 42;
        *(_OWORD *)(v59 + 8) = 0u;
        uint64_t v60 = v64;
        _s8CreateML19MLClassifierMetricsVWOcTm_1((uint64_t)v57, v64, (void (*)(void))type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData);
        v75[3] = v58;
        boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v75);
        _s8CreateML22AnyTreeClassifierModelVWObTm_1(v60, (uint64_t)boxed_opaque_existential_0, (void (*)(void))type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData);
        outlined assign with take of Any?((uint64_t)v75, v59 + 8);
        outlined destroy of MLDecisionTreeClassifier.ModelParameters.ValidationData((uint64_t)v57, (void (*)(void))type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData);
        uint64_t v62 = (void *)(v56 + v55[6]);
        *uint64_t v62 = 0;
        v62[1] = 0xE000000000000000;
        outlined destroy of MLDecisionTreeClassifier.ModelParameters.ValidationData(v76, (void (*)(void))type metadata accessor for MLCheckpoint);
        outlined destroy of MLDecisionTreeClassifier.ModelParameters.ValidationData(v49, (void (*)(void))type metadata accessor for AnyTreeClassifierModel);
        *(void *)(v56 + v55[7]) = MEMORY[0x263F8EE78];
      }
      else
      {
        swift_allocError();
        *(void *)uint64_t v47 = 0xD00000000000004ELL;
        *(void *)(v47 + 8) = 0x80000002272DA030;
        *(_OWORD *)(v47 + 16) = 0u;
        *(_OWORD *)(v47 + 32) = 0u;
        *(unsigned char *)(v47 + 48) = 0;
        swift_willThrow();
        outlined destroy of MLDecisionTreeClassifier.ModelParameters.ValidationData(v76, (void (*)(void))type metadata accessor for MLCheckpoint);
        outlined destroy of MLDecisionTreeClassifier.ModelParameters.ValidationData(v74, (void (*)(void))type metadata accessor for MLClassifierMetrics);
        outlined destroy of MLDecisionTreeClassifier.ModelParameters.ValidationData((uint64_t)v37, (void (*)(void))type metadata accessor for MLClassifierMetrics);
      }
      OUTLINED_FUNCTION_8_1();
      return;
  }
}

void static MLDecisionTreeClassifier.train(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_42_0();
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_41_1();
  char v4 = *(unsigned char *)(v2 + 8);
  id v6 = *(id *)v2;
  char v7 = v4;
  outlined copy of Result<_DataTable, Error>(v6, v4);
  DataFrame.init(_:)((uint64_t)&v6, v1);
  static MLDecisionTreeClassifier.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)();
  OUTLINED_FUNCTION_11_3();
  v5();
  if (!v0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLDecisionTreeClassifier>);
    OUTLINED_FUNCTION_31_0();
    specialized MLJob.init(_:)();
  }
  OUTLINED_FUNCTION_8_1();
}

{
  uint64_t v0;

  static MLDecisionTreeClassifier.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)();
  if (!v0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLDecisionTreeClassifier>);
    OUTLINED_FUNCTION_31_0();
    specialized MLJob.init(_:)();
  }
}

void static MLDecisionTreeClassifier.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v2 = OUTLINED_FUNCTION_42_0();
  OUTLINED_FUNCTION_0();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_15();
  char v6 = *(unsigned char *)(v1 + 8);
  id v7 = *(id *)v1;
  char v8 = v6;
  outlined copy of Result<_DataTable, Error>(v7, v6);
  DataFrame.init(_:)((uint64_t)&v7, v0);
  static MLDecisionTreeClassifier.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0, v2);
  OUTLINED_FUNCTION_8_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(void);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(void);
  uint64_t v39;
  void v40[3];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  long long v49;
  uint64_t v50;
  _UNKNOWN **v51;
  long long v52;
  uint64_t v53;
  uint64_t v54;

  OUTLINED_FUNCTION_9_0();
  uint64_t v47 = v3;
  uint64_t v48 = v4;
  char v6 = v5;
  uint64_t v45 = v7;
  uint64_t v46 = v8;
  uint64_t v10 = v9;
  uint64_t v11 = type metadata accessor for MLTrainingSessionParameters();
  uint64_t v12 = OUTLINED_FUNCTION_17(v11);
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_49();
  uint64_t v42 = v13;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_106();
  unint64_t v44 = v15;
  uint64_t v16 = type metadata accessor for BoostedTreeConfiguration();
  uint64_t v17 = OUTLINED_FUNCTION_17(v16);
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_41_1();
  type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_15();
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v20);
  OUTLINED_FUNCTION_49();
  uint64_t v54 = v21;
  OUTLINED_FUNCTION_20_3();
  uint64_t v23 = MEMORY[0x270FA5388](v22);
  uint64_t v25 = (char *)v40 - v24;
  MEMORY[0x270FA5388](v23);
  OUTLINED_FUNCTION_36_15();
  uint64_t v43 = v6;
  outlined init with copy of URL?(v6 + 8, (uint64_t)&v52, &demangling cache variable for type metadata for Any?);
  if (v53)
  {
    uint64_t v26 = v2 + *(int *)(v19 + 48);
    outlined init with take of Any(&v52, &v49);
    swift_dynamicCast();
    MLDecisionTreeClassifier.ModelParameters.ValidationData.generateDataFrames(trainingData:)(v2, v26, v10);
    outlined destroy of MLDecisionTreeClassifier.ModelParameters.ValidationData(v0, (void (*)(void))type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData);
    if (!v1)
    {
      uint64_t v27 = (uint64_t)&v25[*(int *)(v19 + 48)];
      uint64_t v28 = type metadata accessor for DataFrame();
      v40[0] = v25;
      uint64_t v29 = v28;
      OUTLINED_FUNCTION_0();
      v40[1] = v30;
      uint64_t v32 = *(void (**)(void))(v31 + 16);
      ((void (*)(uint64_t, uint64_t, uint64_t))v32)(v33, v2, v29);
      uint64_t v41 = v27;
      outlined init with copy of URL?(v26, v27, &demangling cache variable for type metadata for DataFrame?);
      uint64_t v34 = v54 + *(int *)(v19 + 48);
      id v40[2] = v29;
      v32();
      outlined init with copy of URL?(v26, v34, &demangling cache variable for type metadata for DataFrame?);
      outlined init with copy of MLDecisionTreeClassifier.ModelParameters(v43, (uint64_t)&v49);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      BoostedTreeConfiguration.init()();
      BoostedTreeConfiguration.maximumIterations.setter();
      BoostedTreeConfiguration.learningRate.setter();
      BoostedTreeConfiguration.maximumDepth.setter();
      BoostedTreeConfiguration.minimumLossReduction.setter();
      BoostedTreeConfiguration.minimumChildWeight.setter();
      BoostedTreeConfiguration.randomSeed.setter();
      outlined destroy of MLDecisionTreeClassifier.ModelParameters((uint64_t)&v49);
      _s8CreateML19MLClassifierMetricsVWOcTm_1(v48, v44, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
      uint64_t v35 = type metadata accessor for TreeClassifierTrainingSessionDelegate();
      OUTLINED_FUNCTION_31_0();
      TreeClassifierTrainingSessionDelegate.init(trainingData:validationData:targetColumn:featureColumns:configuration:sessionParameters:)();
      uint64_t v37 = v36;
      OUTLINED_FUNCTION_25_0();
      v38();
      outlined destroy of URL?(v41, &demangling cache variable for type metadata for DataFrame?);
      uint64_t v50 = v35;
      unint64_t v51 = &protocol witness table for TreeClassifierTrainingSessionDelegate;
      *(void *)&uint64_t v49 = v37;
      uint64_t v39 = v42;
      _s8CreateML19MLClassifierMetricsVWOcTm_1(v48, v42, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLDecisionTreeClassifier>);
      OUTLINED_FUNCTION_31_0();
      swift_retain();
      specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)&v49, v39, 3);
      outlined destroy of URL?(v2, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
      swift_release();
    }
    OUTLINED_FUNCTION_8_1();
  }
  else
  {
    __break(1u);
  }
}

uint64_t static MLDecisionTreeClassifier.resume(_:)()
{
  return specialized MLJob.init(_:)();
}

void static MLDecisionTreeClassifier.restoreTrainingSession(sessionParameters:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for MLTrainingSessionParameters();
  uint64_t v4 = OUTLINED_FUNCTION_17(v3);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  id v7 = (char *)&v16[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v16[-1] - v8;
  _s8CreateML19MLClassifierMetricsVWOcTm_1(a1, (uint64_t)&v16[-1] - v8, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
  uint64_t v10 = type metadata accessor for TreeClassifierTrainingSessionDelegate();
  OUTLINED_FUNCTION_31_0();
  uint64_t v11 = TreeClassifierTrainingSessionDelegate.init(sessionParameters:)((uint64_t)v9);
  if (!v1)
  {
    void v16[3] = v10;
    v16[4] = &protocol witness table for TreeClassifierTrainingSessionDelegate;
    v16[0] = v11;
    uint64_t v12 = OUTLINED_FUNCTION_47_4();
    _s8CreateML19MLClassifierMetricsVWOcTm_1(v12, v13, v14);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLDecisionTreeClassifier>);
    OUTLINED_FUNCTION_31_0();
    specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)v16, (uint64_t)v7, 3);
  }
}

uint64_t closure #1 in closure #1 in static MLDecisionTreeClassifier.resume(_:)(void *a1, char a2, uint64_t a3, void (*a4)(void *), uint64_t a5)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLDecisionTreeClassifier, Error>);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_24_4();
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  uint64_t v13 = OUTLINED_FUNCTION_17(v12);
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_3_0();
  uint64_t v16 = v15 - v14;
  if (a2)
  {
    *uint64_t v5 = a1;
    swift_storeEnumTagMultiPayload();
    id v20 = a1;
    a4(v5);
    return outlined destroy of URL?((uint64_t)v5, &demangling cache variable for type metadata for Result<MLDecisionTreeClassifier, Error>);
  }
  else
  {
    outlined init with copy of TrainingSessionDelegate(a3 + direct field offset for MLTrainingSession.delegate, (uint64_t)v22);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingSessionDelegate);
    type metadata accessor for TreeClassifierTrainingSessionDelegate();
    swift_dynamicCast();
    uint64_t v17 = type metadata accessor for TaskPriority();
    __swift_storeEnumTagSinglePayload(v16, 1, 1, v17);
    uint64_t v18 = (void *)swift_allocObject();
    v18[2] = 0;
    v18[3] = 0;
    v18[4] = v21;
    v18[5] = a4;
    v18[6] = a5;
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v16, (uint64_t)&async function pointer to partial apply for closure #1 in static MLDecisionTreeClassifier.handleResult(_:session:fulfill:), (uint64_t)v18);
    return swift_release();
  }
}

uint64_t closure #1 in static MLDecisionTreeClassifier.handleResult(_:session:fulfill:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  _OWORD v6[2] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLDecisionTreeClassifier, Error>);
  v6[5] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in static MLDecisionTreeClassifier.handleResult(_:session:fulfill:), 0, 0);
}

uint64_t closure #1 in static MLDecisionTreeClassifier.handleResult(_:session:fulfill:)()
{
  OUTLINED_FUNCTION_11();
  uint64_t v3 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized Result<>.init(catching:)
                             + async function pointer to specialized Result<>.init(catching:));
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in static MLDecisionTreeClassifier.handleResult(_:session:fulfill:);
  return v3();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_6();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_11();
  uint64_t v1 = *(void *)(v0 + 40);
  (*(void (**)(uint64_t))(v0 + 24))(v1);
  outlined destroy of URL?(v1, &demangling cache variable for type metadata for Result<MLDecisionTreeClassifier, Error>);
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  return v2();
}

uint64_t MLDecisionTreeClassifier.init(delegate:)()
{
  OUTLINED_FUNCTION_11();
  v0[35] = v1;
  v0[36] = v2;
  uint64_t v3 = type metadata accessor for AnyClassificationMetrics();
  v0[37] = v3;
  OUTLINED_FUNCTION_17(v3);
  v0[38] = swift_task_alloc();
  v0[39] = swift_task_alloc();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyClassificationMetrics?);
  OUTLINED_FUNCTION_17(v4);
  v0[40] = swift_task_alloc();
  v0[41] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for MLClassifierMetrics(0);
  OUTLINED_FUNCTION_17(v5);
  v0[42] = OUTLINED_FUNCTION_5();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyTreeClassifierModel?);
  OUTLINED_FUNCTION_17(v6);
  v0[43] = OUTLINED_FUNCTION_5();
  uint64_t v7 = type metadata accessor for MLDecisionTreeClassifier();
  v0[44] = v7;
  OUTLINED_FUNCTION_17(v7);
  v0[45] = OUTLINED_FUNCTION_5();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLDecisionTreeClassifier.ModelParameters.ValidationData?);
  OUTLINED_FUNCTION_17(v8);
  v0[46] = OUTLINED_FUNCTION_5();
  uint64_t v9 = type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData();
  v0[47] = v9;
  OUTLINED_FUNCTION_17(v9);
  v0[48] = OUTLINED_FUNCTION_5();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  OUTLINED_FUNCTION_17(v10);
  v0[49] = OUTLINED_FUNCTION_5();
  uint64_t v11 = type metadata accessor for BoostedTreeConfiguration();
  v0[50] = v11;
  OUTLINED_FUNCTION_1(v11);
  v0[51] = v12;
  v0[52] = OUTLINED_FUNCTION_5();
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  OUTLINED_FUNCTION_17(v13);
  v0[53] = OUTLINED_FUNCTION_5();
  uint64_t v14 = type metadata accessor for PersistentParametersForTreeBasedMethods();
  v0[54] = v14;
  OUTLINED_FUNCTION_17(v14);
  v0[55] = OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v15, v16, v17);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *boxed_opaque_existential_0;
  void (*v22)(void);
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;

  uint64_t v1 = *(void *)(v0 + 424);
  uint64_t v2 = *(void *)(v0 + 432);
  uint64_t v3 = *(void *)(v0 + 288) + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_53();
  outlined init with copy of URL?(v3, v1, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  uint64_t result = __swift_getEnumTagSinglePayload(v1, 1, v2);
  if (result == 1)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v33 = (uint64_t *)(v0 + 144);
  uint64_t v6 = *(void *)(v0 + 432);
  uint64_t v5 = *(void *)(v0 + 440);
  uint64_t v7 = *(void *)(v0 + 416);
  uint64_t v9 = *(void *)(v0 + 400);
  uint64_t v8 = *(void *)(v0 + 408);
  uint64_t v10 = *(void *)(v0 + 392);
  uint64_t v12 = *(void *)(v0 + 368);
  uint64_t v11 = *(void *)(v0 + 376);
  _s8CreateML22AnyTreeClassifierModelVWObTm_1(*(void *)(v0 + 424), v5, (void (*)(void))type metadata accessor for PersistentParametersForTreeBasedMethods);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v5 + *(int *)(v6 + 32), v9);
  outlined init with copy of URL?(v5 + *(int *)(v6 + 20), v10, &demangling cache variable for type metadata for DataFrame?);
  *(_OWORD *)(v0 + 88) = 0u;
  *(_OWORD *)(v0 + 104) = 0u;
  *(void *)(v0 + 80) = BoostedTreeConfiguration.maximumDepth.getter();
  BoostedTreeConfiguration.minimumLossReduction.getter();
  *(void *)(v0 + 120) = v13;
  BoostedTreeConfiguration.minimumChildWeight.getter();
  *(void *)(v0 + 128) = v14;
  *(void *)(v0 + 136) = BoostedTreeConfiguration.randomSeed.getter();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF11TabularData0D5FrameV_s5NeverO8CreateML24MLDecisionTreeClassifierV15ModelParametersV010ValidationD0OTg503_s8g4ML24ijk3V15lm75V13configuration10validationAE0A12MLComponents07BoostedD13ConfigurationV_11c7Data0N5e12VSgtcfcAE010N21N0OAMcAPmcfu_ApMcfu0_AOXMtTf1ncn_n(v10, v12);
  if (__swift_getEnumTagSinglePayload(v12, 1, v11) == 1)
  {
    uint64_t v15 = *(void *)(v0 + 368);
    swift_storeEnumTagMultiPayload();
    outlined destroy of URL?(v15, &demangling cache variable for type metadata for MLDecisionTreeClassifier.ModelParameters.ValidationData?);
  }
  else
  {
    _s8CreateML22AnyTreeClassifierModelVWObTm_1(*(void *)(v0 + 368), *(void *)(v0 + 384), (void (*)(void))type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData);
  }
  uint64_t v17 = *(void *)(v0 + 432);
  uint64_t v16 = *(void *)(v0 + 440);
  uint64_t v18 = *(void *)(v0 + 392);
  uint64_t v19 = *(void *)(v0 + 384);
  id v20 = *(void *)(v0 + 344);
  uint64_t v32 = *(void *)(v0 + 288);
  *(void *)(v0 + 168) = *(void *)(v0 + 376);
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v33);
  _s8CreateML22AnyTreeClassifierModelVWObTm_1(v19, (uint64_t)boxed_opaque_existential_0, (void (*)(void))type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData);
  outlined assign with take of Any?((uint64_t)v33, v0 + 88);
  outlined destroy of URL?(v18, &demangling cache variable for type metadata for DataFrame?);
  OUTLINED_FUNCTION_11_3();
  v22();
  uint64_t v23 = (uint64_t *)(v16 + *(int *)(v17 + 24));
  uint64_t v25 = *v23;
  uint64_t v24 = v23[1];
  uint64_t v26 = *(void *)(v16 + *(int *)(v17 + 28));
  uint64_t v27 = v32 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_model;
  OUTLINED_FUNCTION_53();
  outlined init with copy of URL?(v27, v20, &demangling cache variable for type metadata for AnyTreeClassifierModel?);
  uint64_t v28 = type metadata accessor for AnyTreeClassifierModel();
  uint64_t result = __swift_getEnumTagSinglePayload(v20, 1, v28);
  if (result == 1) {
    goto LABEL_10;
  }
  outlined init with copy of MLDecisionTreeClassifier.ModelParameters(v0 + 80, v0 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v29 = (void *)swift_task_alloc();
  *(void *)(v0 + 448) = v29;
  *uint64_t v29 = v0;
  v29[1] = MLDecisionTreeClassifier.init(delegate:);
  uint64_t v30 = *(void *)(v0 + 360);
  uint64_t v31 = *(void *)(v0 + 344);
  return MLDecisionTreeClassifier.init(_:targetColumn:featureColumns:parameters:)(v30, v31, v25, v24, v26, v0 + 16);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_6();
  *uint64_t v5 = v4;
  *(void *)(v6 + 456) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void);
  uint64_t v21;

  uint64_t v1 = v0[41];
  uint64_t v3 = v0[36];
  uint64_t v2 = v0[37];
  _s8CreateML22AnyTreeClassifierModelVWObTm_1(v0[45], v0[35], (void (*)(void))type metadata accessor for MLDecisionTreeClassifier);
  uint64_t v4 = v3 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_trainingMetrics;
  OUTLINED_FUNCTION_53();
  outlined init with copy of URL?(v4, v1, &demangling cache variable for type metadata for AnyClassificationMetrics?);
  uint64_t result = __swift_getEnumTagSinglePayload(v1, 1, v2);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = v0[55];
    uint64_t v7 = v0[44];
    uint64_t v9 = v0[41];
    uint64_t v8 = v0[42];
    uint64_t v10 = v0[40];
    uint64_t v12 = v0[36];
    uint64_t v11 = v0[37];
    uint64_t v13 = v0[35];
    outlined destroy of MLDecisionTreeClassifier.ModelParameters((uint64_t)(v0 + 10));
    outlined destroy of MLDecisionTreeClassifier.ModelParameters.ValidationData(v6, (void (*)(void))type metadata accessor for PersistentParametersForTreeBasedMethods);
    _s8CreateML22AnyTreeClassifierModelVWObTm_1(v9, v8, (void (*)(void))type metadata accessor for AnyClassificationMetrics);
    type metadata accessor for MLClassifierMetrics.Contents(0);
    swift_storeEnumTagMultiPayload();
    outlined assign with take of MLClassifierMetrics(v8, v13 + *(int *)(v7 + 36));
    uint64_t v14 = v12 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_validationMetrics;
    OUTLINED_FUNCTION_48_1();
    OUTLINED_FUNCTION_53();
    outlined init with copy of URL?(v14, v10, &demangling cache variable for type metadata for AnyClassificationMetrics?);
    swift_release();
    if (__swift_getEnumTagSinglePayload(v10, 1, v11) == 1)
    {
      outlined destroy of URL?(v0[40], &demangling cache variable for type metadata for AnyClassificationMetrics?);
    }
    else
    {
      uint64_t v15 = v0[44];
      uint64_t v16 = v0[39];
      uint64_t v17 = v0[38];
      uint64_t v18 = v0[35];
      _s8CreateML22AnyTreeClassifierModelVWObTm_1(v0[40], v16, (void (*)(void))type metadata accessor for AnyClassificationMetrics);
      _s8CreateML22AnyTreeClassifierModelVWObTm_1(v16, v17, (void (*)(void))type metadata accessor for AnyClassificationMetrics);
      uint64_t v19 = v18 + *(int *)(v15 + 40);
      outlined destroy of MLDecisionTreeClassifier.ModelParameters.ValidationData(v19, (void (*)(void))type metadata accessor for MLClassifierMetrics);
      _s8CreateML22AnyTreeClassifierModelVWObTm_1(v17, v19, (void (*)(void))type metadata accessor for AnyClassificationMetrics);
      swift_storeEnumTagMultiPayload();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v20 = (uint64_t (*)(void))v0[1];
    return v20();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 440);
  swift_release();
  outlined destroy of MLDecisionTreeClassifier.ModelParameters(v0 + 80);
  outlined destroy of MLDecisionTreeClassifier.ModelParameters.ValidationData(v1, (void (*)(void))type metadata accessor for PersistentParametersForTreeBasedMethods);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  return v2();
}

void MLDecisionTreeClassifier.predictions(from:)()
{
  uint64_t v2 = type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_31_1();
  type metadata accessor for MLDecisionTreeClassifier();
  OUTLINED_FUNCTION_39_1();
  DataFrame.validateContainsColumns(_:context:)(v6, v7);
  if (!v8)
  {
    OUTLINED_FUNCTION_14();
    AnyTreeClassifierModel.applied(to:eventHandler:)(v9);
    MEMORY[0x22A672220](*v0, v0[1]);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v2);
  }
}

uint64_t MLDecisionTreeClassifier.predictions(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_31_1();
  uint64_t v8 = type metadata accessor for AnyColumn();
  uint64_t v9 = OUTLINED_FUNCTION_17(v8);
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_27_7();
  char v10 = *(unsigned char *)(a1 + 8);
  id v14 = *(id *)a1;
  char v15 = v10;
  outlined copy of Result<_DataTable, Error>(v14, v10);
  DataFrame.init(_:)((uint64_t)&v14, v3);
  MLDecisionTreeClassifier.predictions(from:)();
  uint64_t v11 = OUTLINED_FUNCTION_47_0();
  if (v2) {
    return v12(v11);
  }
  v12(v11);
  return MLUntypedColumn.init(_:convertArraysToShapedArrays:)(v4, 1, a2);
}

uint64_t MLDecisionTreeClassifier.evaluation(on:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v6 = type metadata accessor for AnyClassificationMetrics();
  uint64_t v7 = OUTLINED_FUNCTION_17(v6);
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_31_1();
  uint64_t v8 = type metadata accessor for MLDecisionTreeClassifier();
  OUTLINED_FUNCTION_39_1();
  DataFrame.validateContainsColumns(_:context:)(v9, v10);
  if (v11) {
    goto LABEL_5;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2272CB370;
  uint64_t v13 = (void *)(v2 + *(int *)(v8 + 24));
  uint64_t v14 = v13[1];
  *(void *)(inited + 32) = *v13;
  *(void *)(inited + 40) = v14;
  swift_bridgeObjectRetain();
  v15._uint64_t countAndFlagsBits = 0x6C6562614CLL;
  v15._id object = (void *)0xE500000000000000;
  DataFrame.validateContainsColumns(_:context:)((Swift::OpaquePointer)inited, v15);
  if (v11)
  {
    swift_setDeallocating();
    specialized _ContiguousArrayStorage.__deallocating_deinit();
LABEL_5:
    *a2 = v11;
    type metadata accessor for MLClassifierMetrics.Contents(0);
    return swift_storeEnumTagMultiPayload();
  }
  swift_setDeallocating();
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  AnyTreeClassifierModel.computeMetrics(on:)(a1, v3);
  _s8CreateML22AnyTreeClassifierModelVWObTm_1(v3, (uint64_t)a2, (void (*)(void))type metadata accessor for AnyClassificationMetrics);
  type metadata accessor for MLClassifierMetrics.Contents(0);
  return swift_storeEnumTagMultiPayload();
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  id v13;
  char v14;

  uint64_t v4 = type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_3_0();
  Swift::String v10 = v9 - v8;
  uint64_t v11 = *(unsigned char *)(a1 + 8);
  uint64_t v13 = *(id *)a1;
  uint64_t v14 = v11;
  outlined copy of Result<_DataTable, Error>(v13, v11);
  DataFrame.init(_:)((uint64_t)&v13, v10);
  MLDecisionTreeClassifier.evaluation(on:)(v10, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v10, v4);
}

void MLDecisionTreeClassifier.write(to:metadata:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v49 = v0;
  uint64_t v3 = v2;
  uint64_t v55 = v4;
  uint64_t v5 = type metadata accessor for AnyTreeClassifierModel();
  uint64_t v6 = OUTLINED_FUNCTION_17(v5);
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_33_0();
  uint64_t v54 = v7;
  uint64_t v47 = type metadata accessor for Model();
  OUTLINED_FUNCTION_0();
  uint64_t v52 = v8;
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_15();
  uint64_t v10 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v53 = v11;
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = *v3;
  uint64_t v48 = v3[1];
  unint64_t v15 = v3[3];
  unint64_t v50 = v3[2];
  uint64_t v51 = v14;
  uint64_t v16 = v3[4];
  uint64_t v17 = v3[5];
  uint64_t v18 = v3[6];
  unint64_t v19 = v3[7];
  uint64_t v20 = v3[8];
  static _ValidationUtilities.validateWriteLocation(atURL:defaultName:fileExtension:)(v55, 0xD000000000000016, (void *)0x80000002272DA080, 0x6C65646F6D6C6DLL, (void *)0xE700000000000000, (uint64_t)v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!v1)
  {
    uint64_t v40 = 0;
    uint64_t v41 = v20;
    unint64_t v42 = v19;
    uint64_t v43 = v18;
    uint64_t v44 = v17;
    uint64_t v45 = v16;
    unint64_t v46 = v15;
    uint64_t v55 = v0;
    v39[1] = v10;
    _s8CreateML19MLClassifierMetricsVWOcTm_1(v49, v54, (void (*)(void))type metadata accessor for AnyTreeClassifierModel);
    uint64_t v21 = v48;
    if (v48)
    {
      uint64_t v22 = v51;
      uint64_t v23 = v51;
      uint64_t v24 = v48;
      unint64_t v25 = v50;
      unint64_t v26 = v46;
      uint64_t v27 = v45;
      uint64_t v28 = v44;
      uint64_t v29 = v43;
      unint64_t v30 = v42;
      uint64_t v31 = v41;
    }
    else
    {
      uint64_t v33 = NSFullUserName();
      uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v24 = v34;

      uint64_t v27 = 0;
      uint64_t v28 = 0;
      uint64_t v31 = 0;
      unint64_t v25 = 0xD000000000000033;
      unint64_t v26 = 0x80000002272D4DC0;
      unint64_t v30 = 0xE100000000000000;
      uint64_t v29 = 49;
      uint64_t v22 = v51;
    }
    uint64_t v32 = v52;
    v56[0] = v23;
    v56[1] = v24;
    v56[2] = v25;
    v56[3] = v26;
    v56[4] = v27;
    v56[5] = v28;
    v56[6] = v29;
    v56[7] = v30;
    v56[8] = v31;
    outlined copy of MLModelMetadata?(v22, v21);
    uint64_t v35 = v54;
    uint64_t v36 = v55;
    uint64_t v37 = v40;
    specialized CoreMLExportable.export(metadata:)(v56);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of MLDecisionTreeClassifier.ModelParameters.ValidationData(v35, (void (*)(void))type metadata accessor for AnyTreeClassifierModel);
    if (!v37)
    {
      Model.write(to:)();
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v36, v47);
    }
    OUTLINED_FUNCTION_47_4();
    OUTLINED_FUNCTION_25_0();
    v38();
  }
  OUTLINED_FUNCTION_8_1();
}

void MLDecisionTreeClassifier.write(toFile:metadata:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v1 = type metadata accessor for URL.DirectoryHint();
  OUTLINED_FUNCTION_0();
  uint64_t v3 = v2;
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_3_0();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v9 = OUTLINED_FUNCTION_17(v8);
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_24_8();
  uint64_t v10 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_3_0();
  __swift_storeEnumTagSinglePayload(v0, 1, 1, v10);
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v7, *MEMORY[0x263F06E50], v1);
  swift_bridgeObjectRetain();
  URL.init(filePath:directoryHint:relativeTo:)();
  MLDecisionTreeClassifier.write(to:metadata:)();
  OUTLINED_FUNCTION_9_35();
  v12();
  OUTLINED_FUNCTION_8_1();
}

unint64_t MLDecisionTreeClassifier.debugDescription.getter()
{
  type metadata accessor for MLClassifierMetrics.Contents(0);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_27_7();
  uint64_t v3 = type metadata accessor for MLDecisionTreeClassifier();
  uint64_t v4 = MLDecisionTreeClassifier.ModelParameters.description.getter();
  uint64_t v6 = v5;
  unint64_t v7 = MLClassifierMetrics.description.getter();
  uint64_t v9 = v8;
  _s8CreateML19MLClassifierMetricsVWOcTm_1(v0 + *(int *)(v3 + 40), v1, (void (*)(void))type metadata accessor for MLClassifierMetrics.Contents);
  OUTLINED_FUNCTION_48_1();
  LODWORD(v3) = swift_getEnumCaseMultiPayload();
  outlined destroy of MLDecisionTreeClassifier.ModelParameters.ValidationData(v1, (void (*)(void))type metadata accessor for MLClassifierMetrics.Contents);
  unint64_t v10 = MLClassifierMetrics.description.getter();
  uint64_t v12 = v11;
  v13._uint64_t countAndFlagsBits = v4;
  v13._id object = v6;
  String.append(_:)(v13);
  v14._uint64_t countAndFlagsBits = v7;
  v14._id object = v9;
  String.append(_:)(v14);
  v15._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  v15._id object = (void *)0x80000002272D3FE0;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  if (v3 <= 1)
  {
    v16._uint64_t countAndFlagsBits = v10;
    v16._id object = v12;
    String.append(_:)(v16);
    v17._uint64_t countAndFlagsBits = 0xD000000000000020;
    v17._id object = (void *)0x80000002272D4000;
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0xD000000000000023;
}

NSAttributedString MLDecisionTreeClassifier.playgroundDescription.getter@<X0>(NSAttributedString *a1@<X8>)
{
  unint64_t v2 = type metadata accessor for NSAttributedString();
  v3._uint64_t countAndFlagsBits = MLDecisionTreeClassifier.debugDescription.getter();
  result.super.Class isa = NSAttributedString.__allocating_init(string:)(v3).super.isa;
  a1[3].super.Class isa = (Class)v2;
  a1->super.Class isa = result.super.isa;
  return result;
}

uint64_t partial apply for closure #1 in MLDecisionTreeClassifier.init(checkpoint:)()
{
  OUTLINED_FUNCTION_11();
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for AnyTreeClassifierModel();
  OUTLINED_FUNCTION_39_0(v2);
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)OUTLINED_FUNCTION_7_1(v3);
  void *v4 = v5;
  v4[1] = protocol witness for SupervisedEstimator.fitted<A, B>(to:validateOn:eventHandler:) in conformance MLImageClassifier.Classifier;
  return closure #1 in MLRandomForestClassifier.init(checkpoint:)(v1);
}

uint64_t _s8CreateML19MLClassifierMetricsVWOcTm_1(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_8();
  uint64_t v4 = OUTLINED_FUNCTION_111();
  v5(v4);
  return a2;
}

id sub_2271EF118@<X0>(void *a1@<X8>)
{
  id result = MLDecisionTreeClassifier.model.getter();
  *a1 = result;
  return result;
}

void *initializeBufferWithCopyOfBuffer for MLDecisionTreeClassifier(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (void *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v9 = a2 + 2;
    uint64_t v8 = a2[2];
    swift_bridgeObjectRetain();
    if (v8)
    {
      uint64_t v10 = a2[3];
      uint64_t v11 = a2[4];
      a1[2] = v8;
      a1[3] = v10;
      a1[4] = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *((_OWORD *)a1 + 1) = *v9;
      a1[4] = a2[4];
    }
    uint64_t v13 = type metadata accessor for AnyTreeClassifierModel();
    uint64_t v14 = *(int *)(v13 + 24);
    Swift::String v15 = (char *)a1 + v14;
    Swift::String v16 = (char *)a2 + v14;
    uint64_t v17 = type metadata accessor for BaseTreeClassifierModel();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
    uint64_t v18 = *(int *)(v13 + 28);
    unint64_t v19 = (char *)a1 + v18;
    uint64_t v20 = (char *)a2 + v18;
    uint64_t v21 = *(void *)v20;
    LOBYTE(v20) = v20[8];
    *(void *)unint64_t v19 = v21;
    v19[8] = (char)v20;
    uint64_t v22 = a3[5];
    uint64_t v23 = a3[6];
    uint64_t v24 = *(void **)((char *)a2 + v22);
    *(void *)((char *)a1 + v22) = v24;
    unint64_t v25 = (void *)((char *)a1 + v23);
    unint64_t v26 = (void *)((char *)a2 + v23);
    uint64_t v27 = v26[1];
    *unint64_t v25 = *v26;
    v25[1] = v27;
    uint64_t v28 = a3[8];
    uint64_t v66 = a3;
    *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
    uint64_t v29 = (char *)a1 + v28;
    unint64_t v30 = (char *)a2 + v28;
    *(void *)((char *)a1 + v28) = *(void *)((char *)a2 + v28);
    uint64_t v31 = (_OWORD *)((char *)a1 + v28 + 8);
    uint64_t v32 = (_OWORD *)((char *)a2 + v28 + 8);
    uint64_t v33 = *(void *)((char *)a2 + v28 + 32);
    swift_bridgeObjectRetain();
    id v34 = v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v33)
    {
      *((void *)v29 + 4) = v33;
      (**(void (***)(_OWORD *, _OWORD *, uint64_t))(v33 - 8))(v31, v32, v33);
    }
    else
    {
      long long v35 = v32[1];
      _OWORD *v31 = *v32;
      v31[1] = v35;
    }
    *(_OWORD *)(v29 + 40) = *(_OWORD *)(v30 + 40);
    *((void *)v29 + 7) = *((void *)v30 + 7);
    uint64_t v36 = a3;
    uint64_t v37 = a3[9];
    uint64_t v38 = (void **)((char *)a1 + v37);
    uint64_t v39 = (void **)((char *)a2 + v37);
    type metadata accessor for MLClassifierMetrics.Contents(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v45 = *v39;
      id v46 = v45;
      *uint64_t v38 = v45;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *uint64_t v38 = *v39;
      uint64_t v41 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v42 = *(int *)(v41 + 20);
      uint64_t v64 = (char *)v39 + v42;
      uint64_t v65 = (char *)v38 + v42;
      uint64_t v43 = type metadata accessor for DataFrame();
      uint64_t v44 = *(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 16);
      v44(v65, v64, v43);
      v44((char *)v38 + *(int *)(v41 + 24), (char *)v39 + *(int *)(v41 + 24), v43);
      uint64_t v36 = v66;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v47 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v47 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(v47);
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v48 - 8) + 16))(v38, v39, v48);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v49 = v36[10];
    unint64_t v50 = (void **)((char *)a1 + v49);
    uint64_t v51 = (void **)((char *)a2 + v49);
    int v52 = swift_getEnumCaseMultiPayload();
    if (v52 == 2)
    {
      uint64_t v59 = *v51;
      id v60 = v59;
      *unint64_t v50 = v59;
    }
    else if (v52 == 1)
    {
      *unint64_t v50 = *v51;
      uint64_t v53 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v54 = *(int *)(v53 + 20);
      uint64_t v55 = (char *)v50 + v54;
      uint64_t v56 = (char *)v51 + v54;
      uint64_t v57 = type metadata accessor for DataFrame();
      uint64_t v58 = *(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 16);
      v58(v55, v56, v57);
      v58((char *)v50 + *(int *)(v53 + 24), (char *)v51 + *(int *)(v53 + 24), v57);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v61 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v61 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(v61);
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v62 - 8) + 16))(v50, v51, v62);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}