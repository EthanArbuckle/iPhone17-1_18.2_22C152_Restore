void sub_1BB4648C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ParametricProcessor::calculateG(uint64_t a1, vDSP_Length *this, uint64_t a3, uint64_t a4)
{
  v8 = (CLiteMatrix *)(a1 + 6120);
  v9 = *(void **)(a1 + 6136);
  v10 = (const void *)CLiteMatrix::Get((CLiteMatrix *)this, *(int *)(a1 + 64), 0);
  memcpy(v9, v10, 4 * this[1]);
  v11 = (void *)(*(void *)(a1 + 6136) + 4 * ((uint64_t)(*(void *)(a1 + 6144) - *(void *)(a1 + 6136)) >> 3));
  CLiteMatrix::Get((CLiteMatrix *)this, *(int *)(a1 + 64), 0);
  memcpy(v11, v12, 4 * this[1]);
  v13 = *(void **)(a1 + 6176);
  v14 = (const void *)CLiteMatrix::Get((CLiteMatrix *)this, *(int *)(a1 + 68), 0);
  memcpy(v13, v14, 4 * this[1]);
  v15 = (void *)(*(void *)(a1 + 6176) + 4 * ((uint64_t)(*(void *)(a1 + 6184) - *(void *)(a1 + 6176)) >> 3));
  CLiteMatrix::Get((CLiteMatrix *)this, *(int *)(a1 + 68), 0);
  memcpy(v15, v16, 4 * this[1]);
  CLiteMatrix::ElementwiseMultiply(v8, (const CLiteMatrix *)(a1 + 6160), (const CLiteMatrix *)(a1 + 6200), (CLiteMatrix *)0xFFFFFFFFLL);
  vDSP_vsmul(*(const float **)(a1 + 6216), 1, (const float *)(a1 + 92), *(float **)(a1 + 6216), 1, this[1]);
  vDSP_vclip(*(const float **)(a3 + 16), 1, (const float *)(a1 + 200), (const float *)(a1 + 204), *(float **)(a3 + 16), 1, this[1]);
  vDSP_vdiv(*(const float **)(a3 + 16), 1, *(const float **)(a1 + 6216), 1, *(float **)(a1 + 6216), 1, this[1]);
  v17 = *(const float **)(a1 + 6216);
  v18 = *(float **)(a4 + 16);
  vDSP_Length v19 = this[1];

  vDSP_vclip(v17, 1, (const float *)(a1 + 84), (const float *)(a1 + 88), v18, 1, v19);
}

void std::vector<CLiteMatrix>::__assign_with_size[abi:ne180100]<CLiteMatrix*,CLiteMatrix*>(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = (uint64_t)(a1 + 2);
  uint64_t v9 = *a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) < a4)
  {
    std::vector<CLiteMatrix>::__vdeallocate(a1);
    if (a4 > 0x666666666666666) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333) {
      unint64_t v11 = 0x666666666666666;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<CLiteMatrix>::__vallocate[abi:ne180100](a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLiteMatrix>,CLiteMatrix*,CLiteMatrix*,CLiteMatrix*>(v8, a2, a3, a1[1]);
    goto LABEL_11;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[1] - v9) >> 3) < a4)
  {
    uint64_t v13 = a2 + 8 * ((a1[1] - v9) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CLiteMatrix *,CLiteMatrix *,CLiteMatrix *>(a2, v13, v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLiteMatrix>,CLiteMatrix*,CLiteMatrix*,CLiteMatrix*>(v8, v13, a3, a1[1]);
LABEL_11:
    a1[1] = v12;
    return;
  }
  uint64_t v14 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CLiteMatrix *,CLiteMatrix *,CLiteMatrix *>(a2, a3, v9);
  for (uint64_t i = a1[1]; i != v14; i -= 40)
  {
    v16 = *(void **)(i - 24);
    if (v16)
    {
      *(void *)(i - 16) = v16;
      operator delete(v16);
    }
  }
  a1[1] = v14;
}

void sub_1BB464C04(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1BB464C0C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CLiteMatrix *,CLiteMatrix *,CLiteMatrix *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      *(_OWORD *)a3 = *(_OWORD *)v5;
      if (v5 != a3) {
        std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a3 + 16), *(char **)(v5 + 16), *(void *)(v5 + 24), (uint64_t)(*(void *)(v5 + 24) - *(void *)(v5 + 16)) >> 2);
      }
      v5 += 40;
      a3 += 40;
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLiteMatrix>,CLiteMatrix*,CLiteMatrix*,CLiteMatrix*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(_OWORD *)uint64_t v4 = *(_OWORD *)v6;
      *(void *)(v4 + 24) = 0;
      *(void *)(v4 + 32) = 0;
      *(void *)(v4 + 16) = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(v4 + 16), *(const void **)(v6 + 16), *(void *)(v6 + 24), (uint64_t)(*(void *)(v6 + 24) - *(void *)(v6 + 16)) >> 2);
      uint64_t v4 = v11 + 40;
      v11 += 40;
      v6 += 40;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLiteMatrix>,CLiteMatrix*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1BB464D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLiteMatrix>,CLiteMatrix*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      uint64_t v5 = *(void **)(v3 - 24);
      if (v5)
      {
        *(void *)(v3 - 16) = v5;
        operator delete(v5);
      }
      v3 -= 40;
    }
  }
  return a1;
}

uint64_t AUSpatialCapture::SetAudioChannelLayout(AUSpatialCapture *this, int a2, int a3, const AudioChannelLayout *a4)
{
  if (a2 != 2) {
    return 4294956430;
  }
  if (a3) {
    return 4294956419;
  }
  if (a4)
  {
    AudioChannelLayoutTag mChannelLayoutTag = a4->mChannelLayoutTag;
    if (ChannelLayoutTagIsSupportedHOA(a4->mChannelLayoutTag))
    {
      HOA::HOA((uint64_t)&v12, mChannelLayoutTag, 0);
      HOA::createSphericalGridDecoder(&v12.mChannelLayoutTag);
      *(Float32 *)&unint64_t v8 = v12.mChannelDescriptions[0].mCoordinates[0];
      HOA::~HOA((HOA *)&v12);
    }
    else
    {
      LOBYTE(v12.mChannelLayoutTag) = 0;
      std::vector<char>::vector(&v17, 0x20uLL, (const std::vector<char>::value_type *)&v12);
      std::vector<char>::pointer begin = v17.__begin_;
      *((_DWORD *)v17.__begin_ + 1) = 0;
      *((_DWORD *)begin + 2) = 0;
      *(_DWORD *)std::vector<char>::pointer begin = mChannelLayoutTag;
      v25 = 0;
      v26 = 0;
      uint64_t v27 = 0;
      v22 = 0;
      v23 = 0;
      uint64_t v24 = 0;
      vDSP_Length v19 = 0;
      v20 = 0;
      uint64_t v21 = 0;
      GetChannelLayoutSphericalCoordinates(&v12, (float *)begin);
      v18[0] = &v25;
      v18[1] = &v22;
      v18[2] = &v19;
      std::__memberwise_forward_assign[abi:ne180100]<std::tuple<std::vector<float> &,std::vector<float> &,std::vector<float> &>,std::tuple<std::vector<float>,std::vector<float>,std::vector<float>>,std::vector<float>,std::vector<float>,std::vector<float>,0ul,1ul,2ul>(v18, (uint64_t)&v12);
      if (__p)
      {
        v16 = __p;
        operator delete(__p);
      }
      if (*(void *)&v12.mChannelDescriptions[0].mCoordinates[1])
      {
        uint64_t v13 = *(void *)&v12.mChannelDescriptions[0].mCoordinates[1];
        operator delete(*(void **)&v12.mChannelDescriptions[0].mCoordinates[1]);
      }
      if (*(void *)&v12.mChannelLayoutTag)
      {
        *(void *)&v12.mNumberChannelDescriptions = *(void *)&v12.mChannelLayoutTag;
        operator delete(*(void **)&v12.mChannelLayoutTag);
      }
      memset(&v12, 0, 24);
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v12, v25, (uint64_t)v26, (v26 - (unsigned char *)v25) >> 2);
      *(void *)&v12.mChannelDescriptions[0].mCoordinates[1] = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v12.mChannelDescriptions[0].mCoordinates[1], v22, (uint64_t)v23, (v23 - (unsigned char *)v22) >> 2);
      if (v19)
      {
        v20 = v19;
        operator delete(v19);
      }
      if (v22)
      {
        v23 = v22;
        operator delete(v22);
      }
      if (v25)
      {
        v26 = v25;
        operator delete(v25);
      }
      if (v17.__begin_)
      {
        v17.__end_ = v17.__begin_;
        operator delete(v17.__begin_);
      }
      uint64_t v10 = *(void **)&v12.mChannelLayoutTag;
      unint64_t v11 = *(void *)&v12.mNumberChannelDescriptions - *(void *)&v12.mChannelLayoutTag;
      if (*(void *)&v12.mChannelDescriptions[0].mCoordinates[1])
      {
        uint64_t v13 = *(void *)&v12.mChannelDescriptions[0].mCoordinates[1];
        operator delete(*(void **)&v12.mChannelDescriptions[0].mCoordinates[1]);
        uint64_t v10 = *(void **)&v12.mChannelLayoutTag;
      }
      unint64_t v8 = v11 >> 2;
      if (v10)
      {
        *(void *)&v12.mNumberChannelDescriptions = v10;
        operator delete(v10);
      }
    }
    if ((v8 - 1) > 0x7F)
    {
      return 4294956428;
    }
    else
    {
      uint64_t result = 0;
      *((_DWORD *)this + 200) = a4->mChannelLayoutTag;
    }
  }
  else
  {
    uint64_t result = 0;
    *((_DWORD *)this + 200) = 0;
  }
  return result;
}

uint64_t AUSpatialCapture::GetAudioChannelLayout(AUSpatialCapture *this, int a2, int a3, AudioChannelLayout *a4, BOOL *a5)
{
  if (a3) {
    ausdk::Throw((ausdk *)0xFFFFD583);
  }
  *a5 = a2 == 2;
  LOBYTE(__x.__begin_) = 0;
  std::vector<char>::vector(&v21, 0x20uLL, (const std::vector<char>::value_type *)&__x);
  std::vector<char>::pointer begin = v21.__begin_;
  *(void *)v21.__begin_ = 0;
  *((_DWORD *)begin + 2) = 0;
  if (a2 != 1)
  {
    if (a2 != 2) {
      ausdk::Throw((ausdk *)0xFFFFD58ELL);
    }
    int v9 = *((_DWORD *)this + 200);
    v23[0] = 0;
    std::vector<char>::vector(&__x, 0x20uLL, v23);
    std::vector<char>::pointer v10 = __x.__begin_;
    *((_DWORD *)__x.__begin_ + 1) = 0;
    *((_DWORD *)v10 + 2) = 0;
    *(_DWORD *)std::vector<char>::pointer v10 = v9;
    if (v21.__begin_)
    {
      v21.__end_ = v21.__begin_;
      operator delete(v21.__begin_);
      std::vector<char>::pointer v10 = __x.__begin_;
    }
    v21.__begin_ = v10;
    long long v11 = *(_OWORD *)&__x.__end_;
    goto LABEL_14;
  }
  if (!AUSpatialCapture::GetGraphInput(this, 0))
  {
    unsigned int v14 = -65532;
    goto LABEL_11;
  }
  uint64_t GraphInput = AUSpatialCapture::GetGraphInput(this, 0);
  uint64_t v13 = *(void *)(GraphInput + 88);
  if (*(void *)(GraphInput + 96) != v13)
  {
    unsigned int v14 = *(_DWORD *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v13 + 40))(v13) + 120) + 28) | 0xFFFF0000;
LABEL_11:
    LOBYTE(__x.__begin_) = 0;
    std::vector<char>::vector(&v20, 0x20uLL, (const std::vector<char>::value_type *)&__x);
    std::vector<char>::pointer v10 = v20.__begin_;
    *((_DWORD *)v20.__begin_ + 1) = 0;
    *((_DWORD *)v10 + 2) = 0;
    *(_DWORD *)std::vector<char>::pointer v10 = v14;
    if (v21.__begin_)
    {
      v21.__end_ = v21.__begin_;
      operator delete(v21.__begin_);
      std::vector<char>::pointer v10 = v20.__begin_;
    }
    v21.__begin_ = v10;
    long long v11 = *(_OWORD *)&v20.__end_;
LABEL_14:
    *(_OWORD *)&v21.__end_ = v11;
    if (*(_DWORD *)v10 == 0x10000)
    {
      uint8x8_t v15 = (uint8x8_t)vcnt_s8((int8x8_t)*((unsigned int *)v10 + 1));
      v15.i16[0] = vaddlv_u8(v15);
      if (v15.i32[0]) {
        goto LABEL_19;
      }
    }
    else
    {
      if (!*(_DWORD *)v10)
      {
        if (!*((_DWORD *)v10 + 2)) {
          goto LABEL_23;
        }
LABEL_19:
        uint64_t v16 = v11 - (void)v10;
        if (a4)
        {
          if (v16) {
            memcpy(a4, v10, (v11 - v10));
          }
        }
        goto LABEL_24;
      }
      if ((unsigned __int16)*(_DWORD *)v10) {
        goto LABEL_19;
      }
    }
LABEL_23:
    uint64_t v16 = 0;
LABEL_24:
    v21.__end_ = v10;
    operator delete(v10);
    return v16;
  }
  std::string::basic_string[abi:ne180100]<0>(&__x, "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
  std::string::basic_string[abi:ne180100]<0>(v23, "out");
  vDSP_Length v19 = (void *)(GraphInput + 32);
  if (*(char *)(GraphInput + 55) < 0) {
    vDSP_Length v19 = (void *)*v19;
  }
  DSPGraph::strprintf(v22, (DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v18, v19, (uint64_t)(*(void *)(GraphInput + 96) - *(void *)(GraphInput + 88)) >> 5, 0);
  uint64_t result = DSPGraph::ThrowException();
  __break(1u);
  return result;
}

void sub_1BB46528C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v23 - 57) < 0) {
    operator delete(*(void **)(v23 - 80));
  }
  if (*(char *)(v23 - 33) < 0) {
    operator delete(*(void **)(v23 - 56));
  }
  if (a15) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUSpatialCapture::GetGraphInput(AUSpatialCapture *this, unsigned int a2)
{
  uint64_t v3 = (DSPGraph::Graph *)*((void *)this + 101);
  if (!v3
    || DSPGraph::Graph::numInputs(v3) <= a2
    || !DSPGraph::Graph::in(*((DSPGraph::Graph **)this + 101)))
  {
    return 0;
  }
  uint64_t v4 = (DSPGraph::Graph *)*((void *)this + 101);

  return DSPGraph::Graph::in(v4);
}

uint64_t AUSpatialCapture::ValidFormat(AUSpatialCapture *this, int a2, unsigned int a3, const AudioStreamBasicDescription *a4)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  AudioFormatID mFormatID = a4->mFormatID;
  if (mFormatID == 1819304813) {
    BOOL v9 = a4->mBitsPerChannel == 32;
  }
  else {
    BOOL v9 = mFormatID == 1718773105 && a4->mBitsPerChannel == 64;
  }
  char v10 = v9;
  uint64_t v11 = *(_DWORD *)&v10 & ((a4->mFormatFlags & 0x20) >> 5);
  if (a2 == 2)
  {
    if (!AUSpatialCapture::GetGraphOutput(this)) {
      goto LABEL_39;
    }
    uint64_t GraphOutput = AUSpatialCapture::GetGraphOutput(this);
    uint64_t v13 = *(void *)(GraphOutput + 64);
    if (*(void *)(GraphOutput + 72) == v13)
    {
      std::string::basic_string[abi:ne180100]<0>(buf, "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v30, "in");
      v29 = (void *)(GraphOutput + 32);
      if (*(char *)(GraphOutput + 55) < 0) {
        v29 = (void *)*v29;
      }
      DSPGraph::strprintf((uint64_t *)__p, (DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v28, v29, (uint64_t)(*(void *)(GraphOutput + 72) - *(void *)(GraphOutput + 64)) >> 5, 0);
      uint64_t result = DSPGraph::ThrowException();
      goto LABEL_56;
    }
    goto LABEL_18;
  }
  if (a2 != 1 || !AUSpatialCapture::GetGraphInput(this, a3)) {
    goto LABEL_39;
  }
  uint64_t GraphInput = AUSpatialCapture::GetGraphInput(this, a3);
  uint64_t v13 = *(void *)(GraphInput + 88);
  if (*(void *)(GraphInput + 96) != v13)
  {
LABEL_18:
    uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 40))(v13);
    vDSP_Length v19 = *(const AudioStreamBasicDescription **)(v18 + 120);
    if (!v19) {
      goto LABEL_39;
    }
    if (v19->mSampleRate == a4->mSampleRate
      && v19->mFormatID == a4->mFormatID
      && v19->mBytesPerPacket == a4->mBytesPerPacket
      && v19->mFramesPerPacket == a4->mFramesPerPacket
      && v19->mChannelsPerFrame == a4->mChannelsPerFrame
      && v19->mBitsPerChannel == a4->mBitsPerChannel
      && (v11 & CA::Implementation::EquivalentFormatFlags(*(CA::Implementation **)(v18 + 120), a4, 0, 0) & 1) != 0)
    {
      uint64_t v11 = 1;
      goto LABEL_39;
    }
    if (SCLogScope(void)::once != -1) {
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
    }
    if (SCLogScope(void)::scope)
    {
      uint64_t v11 = (uint64_t)*(id *)SCLogScope(void)::scope;
      if (!v11) {
        goto LABEL_39;
      }
    }
    else
    {
      uint64_t v11 = MEMORY[0x1E4F14500];
      id v20 = MEMORY[0x1E4F14500];
    }
    std::vector<char> v21 = (id)v11;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      CAFormatter::CAFormatter((CAFormatter *)v30, a4);
      v22 = (void **)v30[0];
      CAFormatter::CAFormatter((CAFormatter *)__p, v19);
      *(_DWORD *)buf = 136316418;
      v36 = "AUSpatialCapture.mm";
      __int16 v37 = 1024;
      int v38 = 632;
      __int16 v39 = 1024;
      int v40 = a2;
      __int16 v41 = 1024;
      unsigned int v42 = a3;
      __int16 v43 = 2080;
      v44 = v22;
      __int16 v45 = 2080;
      v46 = __p[0];
      _os_log_impl(&dword_1BB0CE000, v21, OS_LOG_TYPE_INFO, "%25s:%-5d scope %u element %u: incoming (invalid) format %s. required fmt %s", buf, 0x32u);
      if (__p[0]) {
        free(__p[0]);
      }
      if (v30[0]) {
        free(v30[0]);
      }
    }

    uint64_t v11 = 0;
LABEL_39:
    if (SCLogScope(void)::once != -1) {
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
    }
    if (SCLogScope(void)::scope)
    {
      id v23 = *(id *)SCLogScope(void)::scope;
      if (!v23) {
        return v11;
      }
    }
    else
    {
      id v23 = (id)MEMORY[0x1E4F14500];
      id v24 = MEMORY[0x1E4F14500];
    }
    v25 = v23;
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
    {
      int16x8_t v26 = *(int16x8_t *)&a4->mBytesPerPacket;
      *(_OWORD *)v30 = *(_OWORD *)&a4->mSampleRate;
      int16x8_t v31 = v26;
      uint64_t v32 = *(void *)&a4->mBitsPerChannel;
      CA::StreamDescription::AsString((CA::StreamDescription *)v30, (uint64_t)__p, v26);
      uint64_t v27 = v34 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136316418;
      v36 = "AUSpatialCapture.mm";
      __int16 v37 = 1024;
      int v38 = 634;
      __int16 v39 = 1024;
      int v40 = a2;
      __int16 v41 = 1024;
      unsigned int v42 = a3;
      __int16 v43 = 2080;
      v44 = v27;
      __int16 v45 = 1024;
      LODWORD(v46) = v11;
      _os_log_impl(&dword_1BB0CE000, v25, OS_LOG_TYPE_DEBUG, "%25s:%-5d Format check for scope %i element %i: %s. Valid: %i", buf, 0x2Eu);
      if (v34 < 0) {
        operator delete(__p[0]);
      }
    }

    return v11;
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
  std::string::basic_string[abi:ne180100]<0>(v30, "out");
  uint8x8_t v15 = (void *)(GraphInput + 32);
  if (*(char *)(GraphInput + 55) < 0) {
    uint8x8_t v15 = (void *)*v15;
  }
  DSPGraph::strprintf((uint64_t *)__p, (DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v14, v15, (uint64_t)(*(void *)(GraphInput + 96) - *(void *)(GraphInput + 88)) >> 5, 0);
  uint64_t result = DSPGraph::ThrowException();
LABEL_56:
  __break(1u);
  return result;
}

void sub_1BB465868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUSpatialCapture::GetGraphOutput(AUSpatialCapture *this)
{
  uint64_t v2 = (DSPGraph::Graph *)*((void *)this + 101);
  if (!v2 || !DSPGraph::Graph::out(v2)) {
    return 0;
  }
  uint64_t v3 = (DSPGraph::Graph *)*((void *)this + 101);

  return DSPGraph::Graph::out(v3);
}

uint64_t AUSpatialCapture::SupportedNumChannels(AUSpatialCapture *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUSpatialCapture::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 1;
}

BOOL AUSpatialCapture::StreamFormatWritable(AUSpatialCapture *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUSpatialCapture::SupportsTail(AUSpatialCapture *this)
{
  return 0;
}

void AUSpatialCapture::GetLatency(AUSpatialCapture *this)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t GraphOutput = (DSPGraph::Box *)AUSpatialCapture::GetGraphOutput(this);
  if (!GraphOutput)
  {
    if (SCLogScope(void)::once != -1) {
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
    }
    if (SCLogScope(void)::scope)
    {
      unint64_t v8 = *(id *)SCLogScope(void)::scope;
      if (!v8) {
        return;
      }
    }
    else
    {
      unint64_t v8 = MEMORY[0x1E4F14500];
      id v14 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      id v20 = "AUSpatialCapture.mm";
      __int16 v21 = 1024;
      int v22 = 582;
      char v10 = "%25s:%-5d The host requested latency before the real value is available!";
      uint64_t v11 = v8;
      os_log_type_t v12 = OS_LOG_TYPE_ERROR;
      uint32_t v13 = 18;
      goto LABEL_19;
    }
LABEL_20:

    return;
  }
  uint64_t v2 = GraphOutput;
  unsigned int v3 = DSPGraph::Box::totalLatencyInSamples(GraphOutput);
  uint64_t v4 = *((void *)v2 + 8);
  if (*((void *)v2 + 9) != v4)
  {
    double v5 = (double)v3;
    double v6 = (double)**(double **)((*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4) + 120);
    if (SCLogScope(void)::once != -1) {
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
    }
    double v7 = v5 / v6;
    if (SCLogScope(void)::scope)
    {
      unint64_t v8 = *(id *)SCLogScope(void)::scope;
      if (!v8) {
        return;
      }
    }
    else
    {
      unint64_t v8 = MEMORY[0x1E4F14500];
      id v9 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315650;
      id v20 = "AUSpatialCapture.mm";
      __int16 v21 = 1024;
      int v22 = 580;
      __int16 v23 = 2048;
      double v24 = v7;
      char v10 = "%25s:%-5d Latency is %f";
      uint64_t v11 = v8;
      os_log_type_t v12 = OS_LOG_TYPE_DEBUG;
      uint32_t v13 = 28;
LABEL_19:
      _os_log_impl(&dword_1BB0CE000, v11, v12, v10, buf, v13);
      goto LABEL_20;
    }
    goto LABEL_20;
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
  std::string::basic_string[abi:ne180100]<0>(v18, "in");
  uint64_t v16 = (void *)((char *)v2 + 32);
  if (*((char *)v2 + 55) < 0) {
    uint64_t v16 = (void *)*v16;
  }
  DSPGraph::strprintf(v17, (DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v15, v16, (uint64_t)(*((void *)v2 + 9) - *((void *)v2 + 8)) >> 5, 0);
  DSPGraph::ThrowException();
  __break(1u);
}

void sub_1BB465C1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUSpatialCapture::GetParameterValueStrings(AUSpatialCapture *this, int a2, unsigned int a3, const __CFArray **a4)
{
  if (!a4) {
    return 0;
  }
  if (a2) {
    return 4294956430;
  }
  double v7 = (uint64_t *)(AUSpatialCapture::GetParameterMap(this) + 8);
  uint64_t result = *v7;
  if (*v7)
  {
    uint64_t v8 = (uint64_t)v7;
    uint64_t v9 = *v7;
    do
    {
      unsigned int v10 = *(_DWORD *)(v9 + 32);
      BOOL v11 = v10 >= a3;
      if (v10 >= a3) {
        os_log_type_t v12 = (uint64_t *)v9;
      }
      else {
        os_log_type_t v12 = (uint64_t *)(v9 + 8);
      }
      if (v11) {
        uint64_t v8 = v9;
      }
      uint64_t v9 = *v12;
    }
    while (*v12);
    if ((uint64_t *)v8 != v7 && *(_DWORD *)(v8 + 32) <= a3)
    {
      uint32_t v13 = std::map<unsigned int,SpatialCaptureParameterInfo>::at((uint64_t *)result, a3);
      if (v13[14] != v13[13])
      {
        id v14 = v13;
        uint8x8_t v15 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:0xAAAAAAAAAAAAAAABLL * ((v14[14] - v14[13]) >> 3)];
        uint64_t v16 = v14[13];
        for (uint64_t i = v14[14]; v16 != i; v16 += 24)
        {
          uint64_t v18 = v16;
          if (*(char *)(v16 + 23) < 0) {
            uint64_t v18 = *(void *)v16;
          }
          vDSP_Length v19 = [NSString stringWithUTF8String:v18];
          [v15 addObject:v19];
        }
        uint64_t result = 0;
        *a4 = (const __CFArray *)v15;
        return result;
      }
    }
    return 0;
  }
  return result;
}

void sub_1BB465D9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t AUSpatialCapture::GetParameterMap(AUSpatialCapture *this)
{
  uint64_t result = *((void *)this + 72);
  if (!result) {
    operator new();
  }
  return result;
}

uint64_t *std::map<unsigned int,SpatialCaptureParameterInfo>::at(uint64_t *a1, unsigned int a2)
{
  if (!a1) {
LABEL_7:
  }
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  while (1)
  {
    while (1)
    {
      unsigned int v2 = *((_DWORD *)a1 + 8);
      if (v2 <= a2) {
        break;
      }
      a1 = (uint64_t *)*a1;
      if (!a1) {
        goto LABEL_7;
      }
    }
    if (v2 >= a2) {
      return a1 + 5;
    }
    a1 = (uint64_t *)a1[1];
    if (!a1) {
      goto LABEL_7;
    }
  }
}

uint64_t *std::unique_ptr<std::map<unsigned int,SpatialCaptureParameterInfo>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    std::__tree<std::__value_type<unsigned int,SpatialCaptureParameterInfo>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,SpatialCaptureParameterInfo>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,SpatialCaptureParameterInfo>>>::destroy(*(void **)(v2 + 8));
    JUMPOUT(0x1C185D370);
  }
  return result;
}

void std::__tree<std::__value_type<unsigned int,SpatialCaptureParameterInfo>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,SpatialCaptureParameterInfo>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,SpatialCaptureParameterInfo>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,SpatialCaptureParameterInfo>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,SpatialCaptureParameterInfo>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,SpatialCaptureParameterInfo>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned int,SpatialCaptureParameterInfo>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,SpatialCaptureParameterInfo>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,SpatialCaptureParameterInfo>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<unsigned int const,SpatialCaptureParameterInfo>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<unsigned int const,SpatialCaptureParameterInfo>,0>(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 136);
  if (v2)
  {
    *(void *)(a1 + 144) = v2;
    operator delete(v2);
  }
  unsigned int v3 = (void **)(a1 + 112);
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v3);
}

uint64_t AUSpatialCapture::RestoreState(AUSpatialCapture *this, void *cf)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (!cf) {
    return 4294956445;
  }
  CFTypeID v4 = CFGetTypeID(cf);
  if (v4 != CFDictionaryGetTypeID()) {
    return 4294956445;
  }
  uint64_t v5 = ausdk::AUBase::RestoreState((OpaqueAudioComponentInstance **)this, cf);
  if (!v5)
  {
    atomic_fetch_add((atomic_uint *volatile)this + 148, 1u);
    uint64_t v25 = cf;
    AUSpatialCapture::LoadZoomCurveFromDictionary(this, (const __CFDictionary *)cf, "AU preset");
    uint64_t v9 = cf;
    unsigned int v10 = [v9 objectForKeyedSubscript:@"DebugDirectory"];

    if (v10)
    {
      BOOL v11 = [v9 objectForKeyedSubscript:@"DebugDirectory"];

      *(void *)buf = v11;
      (*(void (**)(AUSpatialCapture *, uint64_t, void, void, unsigned char *, uint64_t))(*(void *)this + 96))(this, 2004, 0, 0, buf, 8);
    }
    os_log_type_t v12 = [v9 objectForKeyedSubscript:@"SaveZoomCurveInPreset"];
    BOOL v13 = v12 == 0;

    if (!v13)
    {
      *(void *)buf = 0;
      id v14 = [v9 objectForKeyedSubscript:@"SaveZoomCurveInPreset"];

      *(void *)buf = v14;
      (*(void (**)(AUSpatialCapture *, uint64_t, void, void, unsigned char *, uint64_t))(*(void *)this + 96))(this, 2008, 0, 0, buf, 8);
    }
    uint8x8_t v15 = [v9 objectForKeyedSubscript:@"SavePlistAndPropertiesInPreset"];
    BOOL v16 = v15 == 0;

    if (v16) {
      goto LABEL_33;
    }
    std::vector<char> v17 = [v9 objectForKeyedSubscript:@"SavePlistAndPropertiesInPreset"];

    CFTypeRef cf1 = v17;
    (*(void (**)(AUSpatialCapture *, uint64_t, void, void, CFTypeRef *, uint64_t))(*(void *)this + 96))(this, 2009, 0, 0, &cf1, 8);
    if (!CFEqual(cf1, (CFTypeRef)*MEMORY[0x1E4F1CFD0]))
    {
LABEL_31:
      if (*((unsigned char *)this + 17))
      {
        (*(void (**)(AUSpatialCapture *))(*(void *)this + 64))(this);
        (*(void (**)(AUSpatialCapture *))(*(void *)this + 56))(this);
      }
LABEL_33:
      __int16 v21 = [v9 objectForKeyedSubscript:@"PlistPath"];
      BOOL v22 = v21 == 0;

      if (!v22)
      {
        __int16 v23 = [v9 objectForKeyedSubscript:@"PlistPath"];

        *(void *)buf = v23;
        (*(void (**)(AUSpatialCapture *, uint64_t, void, void, unsigned char *, uint64_t))(*(void *)this + 96))(this, 2006, 0, 0, buf, 8);
      }

      return 0;
    }
    if (SCLogScope(void)::once != -1) {
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
    }
    if (SCLogScope(void)::scope)
    {
      uint64_t v18 = *(id *)SCLogScope(void)::scope;
      if (!v18)
      {
LABEL_30:
        (*(void (**)(AUSpatialCapture *, uint64_t, void, void, void **, uint64_t))(*(void *)this + 96))(this, 1953263724, 0, 0, &v25, 8);
        goto LABEL_31;
      }
    }
    else
    {
      uint64_t v18 = MEMORY[0x1E4F14500];
      id v20 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "AUSpatialCapture.mm";
      __int16 v27 = 1024;
      int v28 = 497;
      _os_log_impl(&dword_1BB0CE000, v18, OS_LOG_TYPE_DEBUG, "%25s:%-5d Restoring plist from AU preset", buf, 0x12u);
    }

    goto LABEL_30;
  }
  uint64_t v6 = v5;
  if (SCLogScope(void)::once != -1) {
    dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
  }
  if (SCLogScope(void)::scope)
  {
    double v7 = *(id *)SCLogScope(void)::scope;
    if (!v7) {
      return v6;
    }
  }
  else
  {
    double v7 = MEMORY[0x1E4F14500];
    id v19 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "AUSpatialCapture.mm";
    __int16 v27 = 1024;
    int v28 = 510;
    __int16 v29 = 1024;
    int v30 = v6;
    _os_log_impl(&dword_1BB0CE000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d Error %i while restoring state", buf, 0x18u);
  }

  return v6;
}

void sub_1BB466460(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void AUSpatialCapture::LoadZoomCurveFromDictionary(AUSpatialCapture *this, const __CFDictionary *a2, const char *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  ZoomCurveValue::LoadFromDictionary((ZoomCurveValue *)v9, a2);
  if (v11)
  {
    if (SCLogScope(void)::once != -1) {
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
    }
    if (SCLogScope(void)::scope)
    {
      uint64_t v5 = *(id *)SCLogScope(void)::scope;
      if (!v5)
      {
LABEL_16:
        AUSpatialCapture::SetZoomCurve(this, (ZoomCurveValue *)v9);
        (*(void (**)(AUSpatialCapture *, uint64_t, void, void))(*(void *)this + 432))(this, 2007, 0, 0);
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v5 = MEMORY[0x1E4F14500];
      id v7 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "AUSpatialCapture.mm";
      __int16 v16 = 1024;
      int v17 = 642;
      __int16 v18 = 2080;
      id v19 = a3;
      _os_log_impl(&dword_1BB0CE000, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d Zoom curve loaded from %s", buf, 0x1Cu);
    }

    goto LABEL_16;
  }
  if (SCLogScope(void)::once != -1) {
    dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
  }
  if (SCLogScope(void)::scope)
  {
    uint64_t v6 = *(id *)SCLogScope(void)::scope;
    if (!v6) {
      goto LABEL_21;
    }
  }
  else
  {
    uint64_t v6 = MEMORY[0x1E4F14500];
    id v8 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "AUSpatialCapture.mm";
    __int16 v16 = 1024;
    int v17 = 646;
    __int16 v18 = 2080;
    id v19 = a3;
    _os_log_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s does not have zoom curve", buf, 0x1Cu);
  }

LABEL_21:
  if (v14 < 0) {
    operator delete(__p);
  }
  *(void *)buf = &v12;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(v10);
}

void sub_1BB4666E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ZoomCurveValue::~ZoomCurveValue((void **)va);
  _Unwind_Resume(a1);
}

void AUSpatialCapture::SetZoomCurve(AUSpatialCapture *this, ZoomCurveValue *a2)
{
  CFTypeID v4 = (char *)this + 904;
  if ((AUSpatialCapture *)((char *)this + 904) != a2)
  {
    std::__tree<std::__value_type<std::string,PiecewiseLinearTransform>,std::__map_value_compare<std::string,std::__value_type<std::string,PiecewiseLinearTransform>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,PiecewiseLinearTransform>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,PiecewiseLinearTransform>,std::__tree_node<std::__value_type<std::string,PiecewiseLinearTransform>,void *> *,long>>((uint64_t)this + 904, *(long long **)a2, (long long *)((char *)a2 + 8));
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)((char *)this + 928), *((std::string **)a2 + 3), *((long long **)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3));
  }
  std::string::operator=((std::string *)((char *)this + 952), (const std::string *)a2 + 2);
  ZoomCurveValue::ApplyToGraph((uint64_t)v4, (void *)this + 101);
  atomic_fetch_add((atomic_uint *volatile)this + 148, 1u);
}

void ZoomCurveValue::~ZoomCurveValue(void **this)
{
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  uint64_t v2 = this + 3;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(this[1]);
}

void std::__tree<std::__value_type<std::string,PiecewiseLinearTransform>,std::__map_value_compare<std::string,std::__value_type<std::string,PiecewiseLinearTransform>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,PiecewiseLinearTransform>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,PiecewiseLinearTransform>,std::__tree_node<std::__value_type<std::string,PiecewiseLinearTransform>,void *> *,long>>(uint64_t a1, long long *a2, long long *a3)
{
  if (*(void *)(a1 + 16))
  {
    uint64_t v6 = *(uint64_t **)a1;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)a1 = a1 + 8;
    *(void *)(v7 + 16) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    if (v6[1]) {
      id v8 = (uint64_t *)v6[1];
    }
    else {
      id v8 = v6;
    }
    id v19 = (uint64_t *)a1;
    uint64_t v20 = v8;
    __int16 v21 = v8;
    if (v8)
    {
      uint64_t v20 = std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        uint64_t v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 2));
          if (v8 != (uint64_t *)v9) {
            std::vector<std::pair<float,float>>::__assign_with_size[abi:ne180100]<std::pair<float,float>*,std::pair<float,float>*>(v8 + 7, *((uint64_t **)v9 + 7), *((uint64_t **)v9 + 8), (uint64_t)(*((void *)v9 + 8) - *((void *)v9 + 7)) >> 3);
          }
          unsigned int v10 = v21;
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,PiecewiseLinearTransform>,std::__map_value_compare<std::string,std::__value_type<std::string,PiecewiseLinearTransform>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,PiecewiseLinearTransform>>>::__find_leaf_high(a1, &v18, v21 + 4);
          std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at((uint64_t **)a1, v18, leaf_high, v10);
          id v8 = v20;
          __int16 v21 = v20;
          if (v20) {
            uint64_t v20 = std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::_DetachedTreeCache::__detach_next((uint64_t)v20);
          }
          uint64_t v12 = (long long *)*((void *)v9 + 1);
          if (v12)
          {
            do
            {
              a2 = v12;
              uint64_t v12 = *(long long **)v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              a2 = (long long *)*((void *)v9 + 2);
              BOOL v13 = *(void *)a2 == (void)v9;
              uint64_t v9 = a2;
            }
            while (!v13);
          }
          if (!v8) {
            break;
          }
          uint64_t v9 = a2;
        }
        while (a2 != a3);
      }
    }
    std::__tree<std::__value_type<std::string,PiecewiseLinearTransform>,std::__map_value_compare<std::string,std::__value_type<std::string,PiecewiseLinearTransform>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,PiecewiseLinearTransform>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v19);
  }
  if (a2 != a3)
  {
    do
    {
      std::__tree<std::__value_type<std::string,PiecewiseLinearTransform>,std::__map_value_compare<std::string,std::__value_type<std::string,PiecewiseLinearTransform>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,PiecewiseLinearTransform>>>::__construct_node<std::pair<std::string const,PiecewiseLinearTransform> const&>((uint64_t)&v19, a1, a2 + 2);
      char v14 = v19;
      uint8x8_t v15 = (uint64_t **)std::__tree<std::__value_type<std::string,PiecewiseLinearTransform>,std::__map_value_compare<std::string,std::__value_type<std::string,PiecewiseLinearTransform>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,PiecewiseLinearTransform>>>::__find_leaf_high(a1, &v18, v19 + 4);
      std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at((uint64_t **)a1, v18, v15, v14);
      id v19 = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,PiecewiseLinearTransform>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,PiecewiseLinearTransform>,void *>>>>::reset[abi:ne180100]((uint64_t)&v19);
      __int16 v16 = (long long *)*((void *)a2 + 1);
      if (v16)
      {
        do
        {
          int v17 = v16;
          __int16 v16 = *(long long **)v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          int v17 = (long long *)*((void *)a2 + 2);
          BOOL v13 = *(void *)v17 == (void)a2;
          a2 = v17;
        }
        while (!v13);
      }
      a2 = v17;
    }
    while (v17 != a3);
  }
}

void sub_1BB4669A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<std::string,PiecewiseLinearTransform>,std::__map_value_compare<std::string,std::__value_type<std::string,PiecewiseLinearTransform>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,PiecewiseLinearTransform>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(std::vector<std::string> *a1, std::string *__str, long long *a3, unint64_t a4)
{
  uint64_t v6 = (long long *)__str;
  uint64_t p_end_cap = (uint64_t)&a1->__end_cap_;
  std::vector<char>::pointer begin = a1->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) < a4)
  {
    std::vector<std::__fs::filesystem::path>::__vdeallocate(a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::__fs::filesystem::path>::__vallocate[abi:ne180100](a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(p_end_cap, v6, a3, a1->__end_);
LABEL_15:
    a1->__end_ = v12;
    return;
  }
  end = a1->__end_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3) < a4)
  {
    char v14 = (long long *)(&__str->__r_.__value_.__l.__data_ + (((char *)end - (char *)begin) >> 3));
    if (end != begin)
    {
      uint64_t v15 = 8 * (((char *)end - (char *)begin) >> 3);
      do
      {
        std::string::operator=(begin, (const std::string *)v6);
        uint64_t v6 = (long long *)((char *)v6 + 24);
        ++begin;
        v15 -= 24;
      }
      while (v15);
      std::vector<char>::pointer begin = a1->__end_;
    }
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(p_end_cap, v14, a3, begin);
    goto LABEL_15;
  }
  if (__str != (std::string *)a3)
  {
    do
    {
      std::string::operator=(begin, (const std::string *)v6);
      uint64_t v6 = (long long *)((char *)v6 + 24);
      ++begin;
    }
    while (v6 != a3);
    end = a1->__end_;
  }
  while (end != begin)
  {
    if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(end[-1].__r_.__value_.__l.__data_);
    }
    --end;
  }
  a1->__end_ = begin;
}

void sub_1BB466B58(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  CFTypeID v4 = this;
  unint64_t v11 = this;
  uint64_t v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        CFTypeID v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      uint64_t v6 = (long long *)((char *)v6 + 24);
      uint64_t v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1BB466C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 1) < 0) {
        operator delete(*(void **)(v3 - 24));
      }
      v3 -= 24;
    }
  }
  return a1;
}

void *std::__tree<std::__value_type<std::string,PiecewiseLinearTransform>,std::__map_value_compare<std::string,std::__value_type<std::string,PiecewiseLinearTransform>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,PiecewiseLinearTransform>>>::__find_leaf_high(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v5 = (void *)v4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, (void **)(v4 + 32)) & 0x80) == 0) {
          break;
        }
        uint64_t v4 = *v5;
        uint64_t result = v5;
        if (!*v5) {
          goto LABEL_8;
        }
      }
      uint64_t v4 = v5[1];
    }
    while (v4);
    uint64_t result = v5 + 1;
  }
  else
  {
    uint64_t result = (void *)(a1 + 8);
  }
LABEL_8:
  *a2 = v5;
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,PiecewiseLinearTransform>,std::__map_value_compare<std::string,std::__value_type<std::string,PiecewiseLinearTransform>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,PiecewiseLinearTransform>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(v2);
  }
  return a1;
}

std::string *std::__tree<std::__value_type<std::string,PiecewiseLinearTransform>,std::__map_value_compare<std::string,std::__value_type<std::string,PiecewiseLinearTransform>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,PiecewiseLinearTransform>>>::__construct_node<std::pair<std::string const,PiecewiseLinearTransform> const&>(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v5 = a2 + 8;
  uint64_t v6 = (char *)operator new(0x50uLL);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t result = std::pair<std::string const,PiecewiseLinearTransform>::pair[abi:ne180100]((std::string *)(v6 + 32), a3);
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

void sub_1BB466DA0(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,PiecewiseLinearTransform>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,PiecewiseLinearTransform>,void *>>>>::reset[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,PiecewiseLinearTransform>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,PiecewiseLinearTransform>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<float>>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

std::string *std::pair<std::string const,PiecewiseLinearTransform>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::pair<float,float>>::__init_with_size[abi:ne180100]<std::pair<float,float>*,std::pair<float,float>*>((char *)&this[1], *((uint64_t **)a2 + 3), *((uint64_t **)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3);
  return this;
}

void sub_1BB466E78(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<float,float>>::__init_with_size[abi:ne180100]<std::pair<float,float>*,std::pair<float,float>*>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<std::pair<unsigned int,float>>::__vallocate[abi:ne180100](result, a4);
    long long v7 = (void *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      uint64_t v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_1BB466EEC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<float,float>>::__assign_with_size[abi:ne180100]<std::pair<float,float>*,std::pair<float,float>*>(void *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 3)
  {
    uint64_t v18 = (char *)a1[1];
    BOOL v13 = a1 + 1;
    uint64_t v12 = v18;
    unint64_t v19 = (v18 - result) >> 3;
    if (v19 >= a4)
    {
      uint64_t v25 = result;
      while (v6 != a3)
      {
        uint64_t v26 = *v6++;
        *(void *)uint64_t v25 = v26;
        v25 += 8;
      }
      int v17 = (char *)(v25 - result);
      uint64_t v12 = result;
    }
    else
    {
      uint64_t v20 = &a2[v19];
      if (v12 != result)
      {
        uint64_t v21 = 8 * v19;
        do
        {
          uint64_t v22 = *v6++;
          *(void *)uint64_t result = v22;
          result += 8;
          v21 -= 8;
        }
        while (v21);
      }
      __int16 v23 = v12;
      while (v20 != a3)
      {
        uint64_t v24 = *v20++;
        *(void *)__int16 v23 = v24;
        v23 += 8;
      }
      int v17 = (char *)(v23 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 61) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<std::pair<unsigned int,float>>::__vallocate[abi:ne180100](a1, v11);
    char v14 = (char *)a1[1];
    BOOL v13 = a1 + 1;
    uint64_t v12 = v14;
    uint64_t v15 = v14;
    if (v6 != a3)
    {
      uint64_t v15 = v12;
      do
      {
        uint64_t v16 = *v6++;
        *(void *)uint64_t v15 = v16;
        v15 += 8;
      }
      while (v6 != a3);
    }
    int v17 = (char *)(v15 - v12);
  }
  void *v13 = &v17[(void)v12];
  return result;
}

uint64_t AUSpatialCapture::SaveState(AUSpatialCapture *this, ausdk **a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  ausdk::AUBase::SaveState(this, a2);
  long long v4 = *a2;
  if (!v4)
  {
    if (SCLogScope(void)::once != -1) {
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
    }
    if (SCLogScope(void)::scope)
    {
      uint64_t v6 = *(id *)SCLogScope(void)::scope;
      if (!v6) {
        return 4294956445;
      }
    }
    else
    {
      uint64_t v6 = MEMORY[0x1E4F14500];
      id v9 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "AUSpatialCapture.mm";
      __int16 v15 = 1024;
      int v16 = 565;
      _os_log_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d AUBase::SaveState didn't produce valid dictionary?", buf, 0x12u);
    }
    uint64_t v7 = 4294956445;
    goto LABEL_33;
  }
  if (*((unsigned char *)this + 896)) {
    ZoomCurveValue::SaveToDictionary((AUSpatialCapture *)((char *)this + 904), v4);
  }
  if (*((unsigned char *)this + 897))
  {
    if (SCLogScope(void)::once != -1) {
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
    }
    if (SCLogScope(void)::scope)
    {
      uint64_t v5 = *(id *)SCLogScope(void)::scope;
      if (!v5)
      {
LABEL_20:
        uint64_t v6 = v4;
        [v6 addEntriesFromDictionary:*((void *)this + 73)];
        CFTypeRef cf = 0;
        *(void *)buf = 0;
        CFTypeRef v11 = 0;
        CFTypeRef v12 = 0;
        (*(void (**)(AUSpatialCapture *, uint64_t, void, void, unsigned char *))(*(void *)this + 88))(this, 2004, 0, 0, buf);
        (*(void (**)(AUSpatialCapture *, uint64_t, void, void, CFTypeRef *))(*(void *)this + 88))(this, 2006, 0, 0, &cf);
        (*(void (**)(AUSpatialCapture *, uint64_t, void, void, CFTypeRef *))(*(void *)this + 88))(this, 2008, 0, 0, &v12);
        (*(void (**)(AUSpatialCapture *, uint64_t, void, void, CFTypeRef *))(*(void *)this + 88))(this, 2009, 0, 0, &v11);
        if (*(void *)buf)
        {
          [v6 setObject:*(void *)buf forKeyedSubscript:@"DebugDirectory"];
          CFRelease(*(CFTypeRef *)buf);
        }
        if (cf)
        {
          [v6 setObject:cf forKeyedSubscript:@"PlistPath"];
          CFRelease(cf);
        }
        if (v12)
        {
          [v6 setObject:v12 forKeyedSubscript:@"SaveZoomCurveInPreset"];
          CFRelease(v12);
        }
        if (v11)
        {
          [v6 setObject:v11 forKeyedSubscript:@"SavePlistAndPropertiesInPreset"];
          CFRelease(v11);
        }
        uint64_t v7 = 0;
LABEL_33:

        return v7;
      }
    }
    else
    {
      uint64_t v5 = MEMORY[0x1E4F14500];
      id v8 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "AUSpatialCapture.mm";
      __int16 v15 = 1024;
      int v16 = 525;
      _os_log_impl(&dword_1BB0CE000, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d Saving plist and properties to AU preset", buf, 0x12u);
    }

    goto LABEL_20;
  }
  return 0;
}

void sub_1BB4673C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 AUSpatialCapture::GetParameterInfo(AUSpatialCapture *this, int a2, unsigned int a3, AudioUnitParameterInfo *a4)
{
  if (!a2)
  {
    uint64_t v6 = (uint64_t **)(AUSpatialCapture::GetParameterMap(this) + 8);
    if (*v6)
    {
      id v8 = v6;
      id v9 = *v6;
      do
      {
        unsigned int v10 = *((_DWORD *)v9 + 8);
        BOOL v11 = v10 >= a3;
        if (v10 >= a3) {
          CFTypeRef v12 = v9;
        }
        else {
          CFTypeRef v12 = v9 + 1;
        }
        if (v11) {
          id v8 = (uint64_t **)v9;
        }
        id v9 = (uint64_t *)*v12;
      }
      while (*v12);
      if (v8 != v6 && *((_DWORD *)v8 + 8) <= a3)
      {
        BOOL v13 = std::map<unsigned int,SpatialCaptureParameterInfo>::at(*v6, a3);
        long long v15 = *((_OWORD *)v13 + 1);
        long long v14 = *((_OWORD *)v13 + 2);
        *(_OWORD *)a4->name = *(_OWORD *)v13;
        *(_OWORD *)&a4->name[16] = v15;
        *(_OWORD *)&a4->name[32] = v14;
        long long v16 = *((_OWORD *)v13 + 4);
        __n128 result = *((__n128 *)v13 + 5);
        long long v17 = *((_OWORD *)v13 + 3);
        *(void *)&a4->flags = v13[12];
        *(_OWORD *)&a4->clumpID = v16;
        *(__n128 *)&a4->unit = result;
        *(_OWORD *)&a4->name[48] = v17;
      }
    }
  }
  return result;
}

uint64_t AUSpatialCapture::GetParameterList(AUSpatialCapture *this, int a2, unsigned int *a3, unsigned int *a4)
{
  *a4 = 0;
  if (!a2)
  {
    ParameterMap = (void *)AUSpatialCapture::GetParameterMap(this);
    *a4 = ParameterMap[2];
    if (a3)
    {
      unsigned int v10 = (void *)*ParameterMap;
      id v8 = ParameterMap + 1;
      id v9 = v10;
      if (v10 != v8)
      {
        uint64_t v11 = 0;
        do
        {
          a3[v11] = *((_DWORD *)v9 + 8);
          CFTypeRef v12 = (void *)v9[1];
          if (v12)
          {
            do
            {
              BOOL v13 = v12;
              CFTypeRef v12 = (void *)*v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              BOOL v13 = (void *)v9[2];
              BOOL v14 = *v13 == (void)v9;
              id v9 = v13;
            }
            while (!v14);
          }
          ++v11;
          id v9 = v13;
        }
        while (v13 != v8);
      }
    }
  }
  return 0;
}

uint64_t AUSpatialCapture::SetBusCount(AUSpatialCapture *this, int a2, int a3)
{
  if (a2 != 1) {
    return 4294956430;
  }
  long long v4 = (char *)operator new(8uLL);
  if (a3 == 1)
  {
    uint64_t v5 = 0;
  }
  else
  {
    if (a3 != 3)
    {
      uint64_t v7 = v4 + 8;
      goto LABEL_9;
    }
    uint64_t v5 = 1;
  }
  uint64_t v7 = &v4[4 * v5];
LABEL_9:
  if (v7 - v4 == 8) {
    uint64_t v6 = 4294956428;
  }
  else {
    uint64_t v6 = 0;
  }
  operator delete(v4);
  return v6;
}

BOOL AUSpatialCapture::BusCountWritable(AUSpatialCapture *this, int a2)
{
  return a2 == 1 && *((unsigned char *)this + 17) == 0;
}

uint64_t AUSpatialCapture::Render(AUSpatialCapture *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  id v8 = (AUSpatialCapture *)((char *)this + 80);
  Element = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUSpatialCapture *)((char *)this + 80), 0);
  uint64_t result = ausdk::AUInputElement::PullInput(Element, a2, a3, 0, a4);
  if (!result)
  {
    uint64_t v11 = ausdk::AUScope::SafeGetElement((AUSpatialCapture *)((char *)this + 128), 0);
    uint64_t BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v11 + 144));
    uint64_t v12 = ausdk::AUScope::SafeGetElement(v8, 0);
    uint64_t v13 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v12 + 144));
    return (*(uint64_t (**)(AUSpatialCapture *, unsigned int *, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t *))(*(void *)this + 184))(this, a2, a4, 1, &v13, 1, &BufferList);
  }
  return result;
}

uint64_t AUSpatialCapture::ProcessMultipleBufferLists(AUSpatialCapture *this, unsigned int *a2, int a3, unsigned int a4, const AudioBufferList **a5, int a6, AudioBufferList **a7)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  id v8 = (DSPGraph::Graph *)*((void *)this + 101);
  if (!v8)
  {
    if (SCLogScope(void)::once != -1) {
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
    }
    if (SCLogScope(void)::scope)
    {
      __int16 v23 = *(id *)SCLogScope(void)::scope;
      if (!v23) {
        return 0;
      }
    }
    else
    {
      __int16 v23 = MEMORY[0x1E4F14500];
      id v38 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "AUSpatialCapture.mm";
      __int16 v73 = 1024;
      int v74 = 1369;
      _os_log_impl(&dword_1BB0CE000, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d Process called without a graph!", buf, 0x12u);
    }

    return 0;
  }
  if (DSPGraph::Graph::numInputs(v8) > a4
    || DSPGraph::Graph::numOutputs(*((DSPGraph::Graph **)this + 101)) != a6)
  {
    if (SCLogScope(void)::once != -1) {
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
    }
    if (SCLogScope(void)::scope)
    {
      uint64_t v22 = *(id *)SCLogScope(void)::scope;
      if (!v22) {
        return 4294956428;
      }
    }
    else
    {
      uint64_t v22 = MEMORY[0x1E4F14500];
      id v24 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "AUSpatialCapture.mm";
      __int16 v73 = 1024;
      int v74 = 1319;
      _os_log_impl(&dword_1BB0CE000, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d wrong number of buffer lists!", buf, 0x12u);
    }

    return 4294956428;
  }
  uint64_t v13 = DSPGraph::Graph::numInputs(*((DSPGraph::Graph **)this + 101));
  MEMORY[0x1F4188790](v13);
  long long v16 = &v68[-2 * v15];
  if (v14) {
    bzero(v16, 80 * ((80 * (unint64_t)v14 - 80) / 0x50) + 80);
  }
  unint64_t v17 = 0;
  uint64_t v18 = (_OWORD *)((char *)this + 272);
  unint64_t v19 = v16;
  while (v17 < DSPGraph::Graph::numInputs(*((DSPGraph::Graph **)this + 101)))
  {
    *(_DWORD *)unint64_t v19 = a3;
    *((_DWORD *)v19 + 1) = 0;
    long long v20 = *((_OWORD *)this + 18);
    *(_OWORD *)(v19 + 1) = *v18;
    *(_OWORD *)(v19 + 3) = v20;
    long long v21 = *((_OWORD *)this + 20);
    *(_OWORD *)(v19 + 5) = *((_OWORD *)this + 19);
    *(_OWORD *)(v19 + 7) = v21;
    v19[9] = a5[v17++];
    v19 += 10;
  }
  uint64_t v26 = DSPGraph::Graph::numOutputs(*((DSPGraph::Graph **)this + 101));
  MEMORY[0x1F4188790](v26);
  __int16 v29 = &v68[-2 * v28];
  if (v27) {
    bzero(v29, 80 * ((80 * (unint64_t)v27 - 80) / 0x50) + 80);
  }
  unint64_t v30 = 0;
  uint64_t v31 = v29;
  while (v30 < DSPGraph::Graph::numOutputs(*((DSPGraph::Graph **)this + 101)))
  {
    *uint64_t v31 = a3;
    v31[1] = 0;
    long long v32 = *((_OWORD *)this + 18);
    *(_OWORD *)(v31 + 2) = *v18;
    *(_OWORD *)(v31 + 6) = v32;
    long long v33 = *((_OWORD *)this + 20);
    *(_OWORD *)(v31 + 10) = *((_OWORD *)this + 19);
    *(_OWORD *)(v31 + 14) = v33;
    *((void *)v31 + 9) = a7[v30++];
    v31 += 20;
  }
  uint64_t GraphOutput = AUSpatialCapture::GetGraphOutput(this);
  uint64_t v35 = *(void *)(GraphOutput + 64);
  if (*(void *)(GraphOutput + 72) == v35)
  {
    std::string::basic_string[abi:ne180100]<0>(buf, "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v71, "in");
    v67 = (void *)(GraphOutput + 32);
    if (*(char *)(GraphOutput + 55) < 0) {
      v67 = (void *)*v67;
    }
    DSPGraph::strprintf(v70, (DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v66, v67, (uint64_t)(*(void *)(GraphOutput + 72) - *(void *)(GraphOutput + 64)) >> 5, 0);
    uint64_t result = DSPGraph::ThrowException();
    __break(1u);
    return result;
  }
  (*(void (**)(uint64_t))(*(void *)v35 + 40))(v35);
  unsigned int v36 = atomic_exchange((atomic_uint *volatile)this + 148, 0);
  v68[1] = v68;
  if (v36) {
    int v37 = AUSpatialCapture::ApplyParametersToGraphAndGetDidCameraDirectionChange(this);
  }
  else {
    int v37 = 0;
  }
  unsigned int v39 = atomic_load((unsigned int *)this + 151);
  unint64_t v40 = atomic_load((unsigned int *)this + 150);
  if (v39 != v40)
  {
    uint64_t v41 = *((void *)this + 101);
    if (v41)
    {
      (*(void (**)(void, uint64_t, float))(*(void *)v41 + 40))(*((void *)this + 101), 30, (float)v40);
      uint64_t AUBox = AUSpatialCapture::GetAUBox(this, "doaBeamit");
      uint64_t v43 = AUBox;
      if (AUBox)
      {
        uint64_t v44 = *((void *)this + 69);
        if (v40 >= (*((void *)this + 70) - v44) >> 3
          || ((*(void (**)(uint64_t, uint64_t, void, void, void, float))(*(void *)AUBox + 80))(AUBox, 4, 0, 0, 0, (float)*(unsigned int *)(v44 + 8 * v40)), uint64_t v45 = *((void *)this + 69), v40 >= (*((void *)this + 70) - v45) >> 3))
        {
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        }
        (*(void (**)(uint64_t, uint64_t, void, void, void, float))(*(void *)v43 + 80))(v43, 5, 0, 0, 0, (float)*(unsigned int *)(v45 + 8 * v40 + 4));
      }
      atomic_store(v40, (unsigned int *)this + 151);
      std::condition_variable::notify_one((std::condition_variable *)((char *)this + 744));
      Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpatialCapture *)((char *)this + 32), 0);
      ausdk::AUElement::SetParameter(Element, 0x1Eu, (float)v40, 0);
      goto LABEL_46;
    }
  }
  if (v37) {
LABEL_46:
  }
    atomic_store(*((void *)this + 35), (unint64_t *)this + 102);
  DSPGraph::Graph::preflight();
  v68[0] = v16;
  unsigned int v47 = 0;
  uint64_t v25 = 0;
  v48 = MEMORY[0x1E4F14500];
  *(void *)&long long v49 = 136315394;
  long long v69 = v49;
  while (v47 < DSPGraph::Graph::numOutputs(*((DSPGraph::Graph **)this + 101)))
  {
    if (*v29 == a3) {
      goto LABEL_60;
    }
    if (SCLogScope(void)::once != -1) {
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
    }
    if (!SCLogScope(void)::scope)
    {
      v51 = v48;
      v50 = v48;
LABEL_56:
      if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = v69;
        *(void *)&uint8_t buf[4] = "AUSpatialCapture.mm";
        __int16 v73 = 1024;
        int v74 = 1353;
        _os_log_impl(&dword_1BB0CE000, v50, OS_LOG_TYPE_ERROR, "%25s:%-5d preflight gave invalid number of frames to process!", buf, 0x12u);
      }

      goto LABEL_59;
    }
    v50 = *(id *)SCLogScope(void)::scope;
    if (v50) {
      goto LABEL_56;
    }
LABEL_59:
    uint64_t v25 = 4294956422;
LABEL_60:
    ++v47;
  }
  if (v25) {
    return v25;
  }
  DSPGraph::Graph::processMultiple();
  if (!*((void *)this + 101)) {
    return 0;
  }
  uint64_t v52 = 0;
  float v53 = 0.0;
  while (2)
  {
    std::string::basic_string[abi:ne180100]<0>(buf, off_1E623D8A8[v52]);
    uint64_t v54 = DSPGraph::Graph::box();
    uint64_t v55 = v54;
    if (v75 < 0)
    {
      operator delete(*(void **)buf);
      if (!v55) {
        goto LABEL_70;
      }
    }
    else if (!v54)
    {
      goto LABEL_70;
    }
    float v56 = (*(float (**)(uint64_t, uint64_t, void, void))(*(void *)v55 + 88))(v55, 28, 0, 0);
    if (v56 >= v53) {
      float v53 = v56;
    }
LABEL_70:
    if (++v52 != 3) {
      continue;
    }
    break;
  }
  v57 = (AUSpatialCapture *)((char *)this + 32);
  v58 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpatialCapture *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v58, 0x20u, v53, 0);
  std::string::basic_string[abi:ne180100]<0>(buf, "wideVsSpatialMix");
  uint64_t v59 = DSPGraph::Graph::box();
  if (v75 < 0) {
    operator delete(*(void **)buf);
  }
  if (v59)
  {
    float v60 = (*(float (**)(uint64_t, void, void, void))(*(void *)v59 + 88))(v59, 0, 0, 0);
    v61 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpatialCapture *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v61, 0x2Fu, v60, 0);
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "focusedVsSpatialMix");
  uint64_t v62 = DSPGraph::Graph::box();
  if (v75 < 0) {
    operator delete(*(void **)buf);
  }
  if (v62)
  {
    float v63 = (*(float (**)(uint64_t, void, void, void))(*(void *)v62 + 88))(v62, 0, 0, 0);
    v64 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v57, 0);
    ausdk::AUElement::SetParameter(v64, 0x30u, v63, 0);
    return 0;
  }
  return 0;
}

void sub_1BB467F84(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 161) < 0) {
    operator delete(*(void **)(v1 - 184));
  }
  if (*(char *)(v1 - 137) < 0) {
    operator delete(*(void **)(v1 - 160));
  }
  if (*(char *)(v1 - 105) < 0) {
    operator delete(*(void **)(v1 - 128));
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUSpatialCapture::ApplyParametersToGraphAndGetDidCameraDirectionChange(AUSpatialCapture *this)
{
  if (!*((void *)this + 101)) {
    return 0;
  }
  ParameterMap = (void *)AUSpatialCapture::GetParameterMap(this);
  uint64_t v3 = ParameterMap + 1;
  long long v4 = (void *)*ParameterMap;
  if ((void *)*ParameterMap == ParameterMap + 1)
  {
    char v5 = 0;
  }
  else
  {
    char v5 = 0;
    do
    {
      if (DSPGraph::Graph::hasParameter(*((DSPGraph::Graph **)this + 101)) && *((_DWORD *)v4 + 8) != 30)
      {
        Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpatialCapture *)((char *)this + 32), 0);
        float Parameter = ausdk::AUElement::GetParameter(Element, *((_DWORD *)v4 + 8));
        uint64_t v8 = *((unsigned int *)v4 + 8);
        if (!v8)
        {
          if (vabds_f32((*(float (**)(void))(**((void **)this + 101) + 48))(*((void *)this + 101)), Parameter) < 0.00000011921)char v5 = 1; {
          uint64_t v8 = *((unsigned int *)v4 + 8);
          }
        }
        (*(void (**)(void, uint64_t, float))(**((void **)this + 101) + 40))(*((void *)this + 101), v8, Parameter);
      }
      id v9 = (void *)v4[1];
      if (v9)
      {
        do
        {
          unsigned int v10 = v9;
          id v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          unsigned int v10 = (void *)v4[2];
          BOOL v11 = *v10 == (void)v4;
          long long v4 = v10;
        }
        while (!v11);
      }
      long long v4 = v10;
    }
    while (v10 != v3);
  }
  return v5 & 1;
}

id CALog::LogObjIfEnabled(id *a1)
{
  if (a1)
  {
    id v1 = *a1;
  }
  else
  {
    id v1 = (id)MEMORY[0x1E4F14500];
    id v2 = MEMORY[0x1E4F14500];
  }

  return v1;
}

uint64_t AUSpatialCapture::GetAUBox(AUSpatialCapture *this, char *a2)
{
  if (!*((void *)this + 101)) {
    return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  uint64_t v3 = DSPGraph::Graph::box();
  uint64_t v4 = v3;
  if (v10 < 0)
  {
    operator delete(__p[0]);
    if (!v4) {
      return 0;
    }
  }
  else if (!v3)
  {
    return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  uint64_t v5 = DSPGraph::Graph::box();
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 216))(v5);
  uint64_t v7 = v6;
  if (v10 < 0)
  {
    operator delete(__p[0]);
    if (v7) {
      return v7;
    }
    return 0;
  }
  if (!v6) {
    return 0;
  }
  return v7;
}

void sub_1BB468338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUSpatialCapture::CanScheduleParameters(AUSpatialCapture *this)
{
  return 0;
}

uint64_t AUSpatialCapture::SetParameter(AUSpatialCapture *this, AUSpatialCapture *a2, int a3, float a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a3) {
    return 4294956430;
  }
  Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpatialCapture *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(Element, a2, a4, 0);
  AUSpatialCapture::LogParameterValue(a2, (uint64_t)"Set", a4, v9);
  if ((int)a2 <= 25)
  {
    if (a2 == 1)
    {
      unsigned int v10 = a4;
      if (a4 - 1 > 3)
      {
        if (SCLogScope(void)::once != -1) {
          dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
        }
        if (SCLogScope(void)::scope)
        {
          uint64_t result = (uint64_t)*(id *)SCLogScope(void)::scope;
          BOOL v11 = result;
          if (!result) {
            return result;
          }
        }
        else
        {
          BOOL v11 = MEMORY[0x1E4F14500];
          id v12 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          int v13 = 136315650;
          unsigned int v14 = "AUSpatialCapture.mm";
          __int16 v15 = 1024;
          int v16 = 1205;
          __int16 v17 = 1024;
          unsigned int v18 = a4;
          _os_log_impl(&dword_1BB0CE000, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d Ignoring orientation update with unsupported value %u", (uint8_t *)&v13, 0x18u);
        }

        return 0;
      }
      std::mutex::lock((std::mutex *)((char *)this + 616));
      *((_DWORD *)this + 152) = v10;
      if (!*((unsigned char *)this + 612)) {
        atomic_store(v10, (unsigned int *)this + 150);
      }
      std::mutex::unlock((std::mutex *)((char *)this + 616));
    }
    else if (a2 == 10)
    {
      uint64_t result = AUSpatialCapture::GetAUBox(this, "spatialTimbreFilter");
      if (result)
      {
        (*(void (**)(uint64_t, BOOL))(*(void *)result + 56))(result, a4 < 0.5);
        return 0;
      }
      return result;
    }
LABEL_16:
    uint64_t result = 0;
    atomic_fetch_add((atomic_uint *volatile)this + 148, 1u);
    return result;
  }
  if (a2 == 26) {
    return 0;
  }
  uint64_t result = 0;
  if (a2 != 30) {
    goto LABEL_16;
  }
  return result;
}

void AUSpatialCapture::LogParameterValue(AUSpatialCapture *this, uint64_t a2, float a3, const char *a4)
{
  int v6 = (int)this;
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if ((int)this > 29)
  {
    if (this == 30) {
      return;
    }
    if (this == 46)
    {
      if (SCLogScope(void)::once != -1) {
        dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
      }
      if (SCLogScope(void)::scope)
      {
        id v9 = *(id *)SCLogScope(void)::scope;
        if (!v9) {
          return;
        }
      }
      else
      {
        id v9 = MEMORY[0x1E4F14500];
        id v12 = MEMORY[0x1E4F14500];
      }
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_49;
      }
      int v21 = 136316162;
      uint64_t v22 = "AUSpatialCapture.mm";
      __int16 v23 = 1024;
      int v24 = 1149;
      __int16 v25 = 2080;
      uint64_t v26 = a2;
      __int16 v27 = 1024;
      int v28 = 46;
      __int16 v29 = 2048;
      double v30 = a3;
      int v13 = "%25s:%-5d %s camera FOV (%u): %f";
      unsigned int v14 = v9;
      os_log_type_t v15 = OS_LOG_TYPE_DEFAULT;
      goto LABEL_43;
    }
LABEL_21:
    if (SCLogScope(void)::once != -1) {
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
    }
    if (SCLogScope(void)::scope)
    {
      id v9 = *(id *)SCLogScope(void)::scope;
      if (!v9) {
        return;
      }
    }
    else
    {
      id v9 = MEMORY[0x1E4F14500];
      id v18 = MEMORY[0x1E4F14500];
    }
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_49;
    }
    int v21 = 136316162;
    uint64_t v22 = "AUSpatialCapture.mm";
    __int16 v23 = 1024;
    int v24 = 1153;
    __int16 v25 = 2080;
    uint64_t v26 = a2;
    __int16 v27 = 1024;
    int v28 = v6;
    __int16 v29 = 2048;
    double v30 = a3;
    int v13 = "%25s:%-5d %s param %u: val=%f";
    unsigned int v14 = v9;
    os_log_type_t v15 = OS_LOG_TYPE_DEBUG;
LABEL_43:
    uint32_t v19 = 44;
LABEL_48:
    _os_log_impl(&dword_1BB0CE000, v14, v15, v13, (uint8_t *)&v21, v19);
    goto LABEL_49;
  }
  if (!this)
  {
    unsigned int v10 = a3;
    if (a3) {
      BOOL v11 = "?";
    }
    else {
      BOOL v11 = "Front";
    }
    if (SCLogScope(void)::once != -1) {
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
    }
    if (SCLogScope(void)::scope)
    {
      id v9 = *(id *)SCLogScope(void)::scope;
      if (!v9) {
        return;
      }
    }
    else
    {
      id v9 = MEMORY[0x1E4F14500];
      id v16 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v22 = "AUSpatialCapture.mm";
      __int16 v17 = "Back";
      int v21 = 136316418;
      __int16 v23 = 1024;
      if (v10 != 1) {
        __int16 v17 = v11;
      }
      int v24 = 1132;
      __int16 v25 = 2080;
      uint64_t v26 = a2;
      __int16 v27 = 1024;
      int v28 = 0;
      __int16 v29 = 2080;
      double v30 = *(double *)&v17;
      __int16 v31 = 2048;
      double v32 = a3;
      int v13 = "%25s:%-5d %s camera direction (%u): %s (%f)";
      unsigned int v14 = v9;
      os_log_type_t v15 = OS_LOG_TYPE_DEFAULT;
      goto LABEL_47;
    }
LABEL_49:

    return;
  }
  if (this != 1) {
    goto LABEL_21;
  }
  unsigned int v7 = a3 - 1;
  if (v7 > 3) {
    uint64_t v8 = "?";
  }
  else {
    uint64_t v8 = off_1E623D9D0[v7];
  }
  if (SCLogScope(void)::once != -1) {
    dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
  }
  if (!SCLogScope(void)::scope)
  {
    id v9 = MEMORY[0x1E4F14500];
    id v20 = MEMORY[0x1E4F14500];
LABEL_45:
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      int v21 = 136316418;
      uint64_t v22 = "AUSpatialCapture.mm";
      __int16 v23 = 1024;
      int v24 = 1140;
      __int16 v25 = 2080;
      uint64_t v26 = a2;
      __int16 v27 = 1024;
      int v28 = 1;
      __int16 v29 = 2080;
      double v30 = *(double *)&v8;
      __int16 v31 = 2048;
      double v32 = a3;
      int v13 = "%25s:%-5d %s TargetUI orientation (%u): %s (%f)";
      unsigned int v14 = v9;
      os_log_type_t v15 = OS_LOG_TYPE_DEBUG;
LABEL_47:
      uint32_t v19 = 54;
      goto LABEL_48;
    }
    goto LABEL_49;
  }
  id v9 = *(id *)SCLogScope(void)::scope;
  if (v9) {
    goto LABEL_45;
  }
}

uint64_t AUSpatialCapture::GetParameter(AUSpatialCapture *this, unsigned int a2, unsigned int a3, unsigned int a4, float *a5)
{
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  *a5 = ausdk::AUElement::GetParameter(Element, a2);
  if (!a3)
  {
    if (a2 == 30)
    {
      unsigned int v15 = atomic_load((unsigned int *)this + 151);
      *a5 = (float)v15;
    }
    else if (a2 == 1)
    {
      float v14 = (float)*((unsigned int *)this + 152);
      *a5 = v14;
      AUSpatialCapture::LogParameterValue((AUSpatialCapture *)1, (uint64_t)"Get", v14, v12);
    }
  }
  return 0;
}

uint64_t AUSpatialCapture::SetProperty(AUSpatialCapture *this, int a2, int a3, unsigned int a4, CFTypeRef *a5, int a6)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  if (a3) {
    return 4294956417;
  }
  uint64_t v6 = 4294956417;
  if (a2 <= 3699)
  {
    switch(a2)
    {
      case 2004:
        if (!a5)
        {
          if (SCLogScope(void)::once != -1) {
            dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
          }
          int v28 = CALog::LogObjIfEnabled((id *)SCLogScope(void)::scope);
          __int16 v29 = v28;
          if (v28 && os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "AUSpatialCapture.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 928;
            _os_log_impl(&dword_1BB0CE000, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d The CFStringRef passed to SetProperty is null.", buf, 0x12u);
          }
          goto LABEL_83;
        }
        CFTypeRef v9 = *a5;
        if (!*a5) {
          return 4294956417;
        }
        CFRetain(*a5);
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v9);
        if (!cf) {
          return 4294956417;
        }
        unsigned int v10 = (const __CFString **)applesauce::CF::StringRef::operator->(&cf);
        applesauce::CF::convert_to<std::string,0>(*v10, (uint64_t)&__str);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_str = &__str;
        }
        else {
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t size = __str.__r_.__value_.__l.__size_;
        }
        int v13 = (char *)p_str + size;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          float v14 = (char *)&__str + HIBYTE(__str.__r_.__value_.__r.__words[2]);
        }
        else {
          float v14 = (char *)(__str.__r_.__value_.__r.__words[0] + __str.__r_.__value_.__l.__size_);
        }
        unsigned int v15 = memchr(p_str, 0, size);
        if (v15) {
          id v16 = v15;
        }
        else {
          id v16 = v13;
        }
        std::string::erase(&__str, v16 - (unsigned char *)p_str, v14 - v16);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::size_type v17 = __str.__r_.__value_.__l.__size_;
          if (!__str.__r_.__value_.__l.__size_) {
            goto LABEL_148;
          }
          id v18 = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        else
        {
          std::string::size_type v17 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          if (!*((unsigned char *)&__str.__r_.__value_.__s + 23)) {
            goto LABEL_148;
          }
          id v18 = &__str;
        }
        if (v18->__r_.__value_.__s.__data_[v17 - 1] != 47)
        {
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void **)buf, (const void **)&__str.__r_.__value_.__l.__data_, "/");
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          std::string __str = *(std::string *)buf;
        }
LABEL_148:
        id v51 = objc_alloc_init(MEMORY[0x1E4F28CB8]);
        char v59 = 0;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v52 = &__str;
        }
        else {
          uint64_t v52 = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        float v53 = [NSString stringWithUTF8String:v52];
        int v54 = [v51 fileExistsAtPath:v53 isDirectory:&v59];

        if (v59) {
          int v55 = v54;
        }
        else {
          int v55 = 0;
        }
        if (v55 == 1)
        {
          std::string::operator=((std::string *)((char *)this + 824), &__str);
          uint64_t v6 = 0;
        }
        else
        {
          if (SCLogScope(void)::once != -1) {
            dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
          }
          float v56 = CALog::LogObjIfEnabled((id *)SCLogScope(void)::scope);
          v57 = v56;
          if (v56 && os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
          {
            v58 = &__str;
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              v58 = (std::string *)__str.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "AUSpatialCapture.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 949;
            *(_WORD *)&buf[18] = 2080;
            *(void *)&buf[20] = v58;
            _os_log_impl(&dword_1BB0CE000, v57, OS_LOG_TYPE_ERROR, "%25s:%-5d Directory does not exist %s", buf, 0x1Cu);
          }

          uint64_t v6 = 4294956445;
        }

        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        if (cf) {
          CFRelease(cf);
        }
        break;
      case 2006:
        if (a5)
        {
          CFTypeRef v24 = *a5;
          if (*a5)
          {
            CFRetain(*a5);
            applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&__str, v24);
            if (__str.__r_.__value_.__r.__words[0])
            {
              __int16 v25 = (const __CFString **)applesauce::CF::StringRef::operator->(&__str);
              applesauce::CF::convert_to<std::string,0>(*v25, (uint64_t)buf);
              uint64_t v26 = (void **)((char *)this + 872);
              if (*((char *)this + 895) < 0) {
                operator delete(*v26);
              }
              *(_OWORD *)uint64_t v26 = *(_OWORD *)buf;
              *((void *)this + 111) = *(void *)&buf[16];
              if (__str.__r_.__value_.__r.__words[0]) {
                CFRelease(__str.__r_.__value_.__l.__data_);
              }
            }
          }
          return 4294956445;
        }
        if (SCLogScope(void)::once != -1) {
          dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
        }
        double v30 = CALog::LogObjIfEnabled((id *)SCLogScope(void)::scope);
        __int16 v29 = v30;
        if (v30 && os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "AUSpatialCapture.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 959;
          _os_log_impl(&dword_1BB0CE000, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d The CFStringRef passed to SetProperty is null.", buf, 0x12u);
        }
        goto LABEL_83;
      case 2007:
        uint64_t v6 = 4294956445;
        if (a6 != 8 || !*a5) {
          return v6;
        }
        ZoomCurveValue::LoadFromDictionary((ZoomCurveValue *)buf, (const __CFDictionary *)*a5);
        AUSpatialCapture::SetZoomCurve(this, (ZoomCurveValue *)buf);
        ZoomCurveValue::~ZoomCurveValue((void **)buf);
        return 0;
      case 2008:
        uint64_t v6 = 0;
        *((unsigned char *)this + 896) = CFEqual(*a5, (CFTypeRef)*MEMORY[0x1E4F1CFD0]) != 0;
        return v6;
      case 2009:
        uint64_t v6 = 0;
        *((unsigned char *)this + 897) = CFEqual(*a5, (CFTypeRef)*MEMORY[0x1E4F1CFD0]) != 0;
        return v6;
      default:
        return v6;
    }
    return v6;
  }
  if (a2 > 1953263723)
  {
    if (a2 != 1970040690)
    {
      if (a2 == 1953263724)
      {
        if (a5)
        {
          if (*a5)
          {
            CFDictionaryRef Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CFDictionaryRef)*a5);
            applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)buf, Copy);
            uint64_t v22 = *((void *)this + 73);
            *((void *)this + 73) = *(void *)buf;
            *(void *)buf = v22;
            applesauce::CF::DictionaryRef::~DictionaryRef((const void **)buf);
            AUSpatialCapture::LoadZoomCurveFromDictionary(this, *((const __CFDictionary **)this + 73), "plist");
            if (*((char *)this + 895) < 0)
            {
              *((void *)this + 110) = 20;
              __int16 v23 = (char *)*((void *)this + 109);
            }
            else
            {
              __int16 v23 = (char *)this + 872;
              *((unsigned char *)this + 895) = 20;
            }
            uint64_t v6 = 0;
            strcpy(v23, "<plist path not set>");
          }
        }
        else
        {
          if (SCLogScope(void)::once != -1) {
            dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
          }
          uint64_t v35 = CALog::LogObjIfEnabled((id *)SCLogScope(void)::scope);
          __int16 v29 = v35;
          if (v35 && os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "AUSpatialCapture.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 909;
            _os_log_impl(&dword_1BB0CE000, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d The CFDictionaryRef passed to SetProperty is null.", buf, 0x12u);
          }
LABEL_83:

          return 4294956445;
        }
      }
      return v6;
    }
    if (SCLogScope(void)::once != -1) {
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
    }
    if (SCLogScope(void)::scope)
    {
      __int16 v27 = *(id *)SCLogScope(void)::scope;
      if (!v27) {
        goto LABEL_89;
      }
    }
    else
    {
      __int16 v27 = MEMORY[0x1E4F14500];
      id v36 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "AUSpatialCapture.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1005;
      _os_log_impl(&dword_1BB0CE000, v27, OS_LOG_TYPE_DEBUG, "%25s:%-5d Unlocking orientation", buf, 0x12u);
    }

LABEL_89:
    std::mutex::lock((std::mutex *)((char *)this + 616));
    if (*((unsigned char *)this + 612))
    {
LABEL_90:
      *((unsigned char *)this + 612) = 0;
      atomic_store(*((_DWORD *)this + 152), (unsigned int *)this + 150);
      std::mutex::unlock((std::mutex *)((char *)this + 616));
      return 0;
    }
    if (SCLogScope(void)::once != -1) {
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
    }
    if (SCLogScope(void)::scope)
    {
      int v37 = *(NSObject **)SCLogScope(void)::scope;
      if (!*(void *)SCLogScope(void)::scope) {
        goto LABEL_90;
      }
    }
    else
    {
      int v37 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "SCOrientationManager.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 76;
      _os_log_impl(&dword_1BB0CE000, v37, OS_LOG_TYPE_ERROR, "%25s:%-5d Unlock requested while already unlocked?!", buf, 0x12u);
    }
    goto LABEL_90;
  }
  if (a2 == 3700)
  {
    uint64_t v6 = 0;
    *((unsigned char *)this + 376) = *(_DWORD *)a5 != 0;
    return v6;
  }
  if (a2 == 1818980210)
  {
    unsigned int v19 = ClampOrientation(*(unsigned int *)a5);
    if (SCLogScope(void)::once != -1) {
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
    }
    if (SCLogScope(void)::scope)
    {
      id v20 = *(id *)SCLogScope(void)::scope;
      if (!v20) {
        goto LABEL_72;
      }
    }
    else
    {
      id v20 = (id)MEMORY[0x1E4F14500];
      id v31 = MEMORY[0x1E4F14500];
    }
    double v32 = v20;
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v33 = off_1E623D9D0[v19 - 1];
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "AUSpatialCapture.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 991;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = v33;
      __int16 v63 = 1024;
      unsigned int v64 = v19;
      _os_log_impl(&dword_1BB0CE000, v32, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Locking orientation at %s (%i)", buf, 0x22u);
    }

LABEL_72:
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)this + 680;
    __str.__r_.__value_.__s.__data_[8] = 1;
    std::mutex::lock((std::mutex *)((char *)this + 680));
    std::mutex::lock((std::mutex *)((char *)this + 616));
    if (*((unsigned char *)this + 612))
    {
      if (SCLogScope(void)::once != -1) {
        dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
      }
      if (SCLogScope(void)::scope)
      {
        char v34 = *(NSObject **)SCLogScope(void)::scope;
        if (!*(void *)SCLogScope(void)::scope) {
          goto LABEL_100;
        }
      }
      else
      {
        char v34 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "SCOrientationManager.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 54;
        _os_log_impl(&dword_1BB0CE000, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d Lock requested while already locked?!", buf, 0x12u);
      }
    }
LABEL_100:
    *((unsigned char *)this + 612) = 1;
    atomic_store(v19, (unsigned int *)this + 150);
    std::mutex::unlock((std::mutex *)((char *)this + 616));
    unsigned int v38 = atomic_load((unsigned int *)this + 151);
    unsigned int v39 = atomic_load((unsigned int *)this + 150);
    if (v38 == v39)
    {
      int v40 = 0;
      goto LABEL_115;
    }
    float v41 = 0.0;
    while (1)
    {
      std::chrono::steady_clock::now();
      v42.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (!v42.__d_.__rep_)
      {
        v43.__d_.__rep_ = 0;
        goto LABEL_111;
      }
      if (v42.__d_.__rep_ < 1)
      {
        if ((unint64_t)v42.__d_.__rep_ < 0xFFDF3B645A1CAC09)
        {
          v43.__d_.__rep_ = 0x8000000000000000;
          goto LABEL_111;
        }
      }
      else if ((unint64_t)v42.__d_.__rep_ > 0x20C49BA5E353F7)
      {
        v43.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_111;
      }
      v43.__d_.__rep_ = 1000 * v42.__d_.__rep_;
LABEL_111:
      std::condition_variable::__do_timed_wait((std::condition_variable *)((char *)this + 744), (std::unique_lock<std::mutex> *)&__str, v43);
      std::chrono::steady_clock::now();
      float v41 = v41 + 0.001;
      if (*((float *)this + 198) <= v41)
      {
        int v40 = 2;
LABEL_115:
        if (__str.__r_.__value_.__s.__data_[8]) {
          std::mutex::unlock((std::mutex *)__str.__r_.__value_.__l.__data_);
        }
        if (v40)
        {
          if (v40 != 1)
          {
            if (SCLogScope(void)::once != -1) {
              dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
            }
            v46 = CALog::LogObjIfEnabled((id *)SCLogScope(void)::scope);
            unsigned int v47 = v46;
            if (v46 && os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(void *)&uint8_t buf[4] = "AUSpatialCapture.mm";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 995;
              _os_log_impl(&dword_1BB0CE000, v47, OS_LOG_TYPE_ERROR, "%25s:%-5d Orientation locked timed out! Is IO running?", buf, 0x12u);
            }

            return 4294900551;
          }
          if (SCLogScope(void)::once != -1) {
            dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
          }
          v50 = CALog::LogObjIfEnabled((id *)SCLogScope(void)::scope);
          long long v49 = v50;
          if (v50 && os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "AUSpatialCapture.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 998;
            _os_log_impl(&dword_1BB0CE000, v49, OS_LOG_TYPE_DEBUG, "%25s:%-5d Orientation locked after waiting for IO thread", buf, 0x12u);
          }
        }
        else
        {
          if (SCLogScope(void)::once != -1) {
            dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
          }
          v48 = CALog::LogObjIfEnabled((id *)SCLogScope(void)::scope);
          long long v49 = v48;
          if (v48 && os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "AUSpatialCapture.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1000;
            _os_log_impl(&dword_1BB0CE000, v49, OS_LOG_TYPE_DEBUG, "%25s:%-5d Orientation locked without waiting for IO thread", buf, 0x12u);
          }
        }

        return 0;
      }
      unsigned int v44 = atomic_load((unsigned int *)this + 151);
      unsigned int v45 = atomic_load((unsigned int *)this + 150);
      if (v44 == v45)
      {
        int v40 = 1;
        goto LABEL_115;
      }
    }
  }
  return v6;
}

void sub_1BB4697CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, const void *a17, __int16 a18, char a19, char a20)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  applesauce::CF::StringRef::~StringRef(&a17);
  _Unwind_Resume(a1);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void **a1, const void **a2, char *__s)
{
  if (*((char *)a2 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  size_t v7 = strlen(__s);
  uint64_t result = std::string::basic_string[abi:ne180100]((uint64_t)a1, v6 + v7);
  if (*((char *)a1 + 23) < 0) {
    a1 = (void **)*a1;
  }
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0) {
      CFTypeRef v9 = a2;
    }
    else {
      CFTypeRef v9 = *a2;
    }
    uint64_t result = (uint64_t)memmove(a1, v9, v6);
  }
  unsigned int v10 = (char *)a1 + v6;
  if (v7) {
    uint64_t result = (uint64_t)memmove(v10, __s, v7);
  }
  v10[v7] = 0;
  return result;
}

uint64_t AUSpatialCapture::GetProperty(AUSpatialCapture *this, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  if (a3) {
    return 4294956417;
  }
  int v8 = a2;
  char v48 = 0;
  int v47 = 0;
  (*(void (**)(AUSpatialCapture *, uint64_t, uint64_t, uint64_t, int *, char *))(*(void *)this + 80))(this, a2, a3, a4, &v47, &v48);
  int v46 = v47;
  uint64_t v5 = 4294956417;
  if (v8 <= 3699)
  {
    switch(v8)
    {
      case 2001:
        if (!AUSpatialCapture::GetAUBox(this, "doaBeamit")) {
          return 4294956421;
        }
        uint64_t AUBox = AUSpatialCapture::GetAUBox(this, "doaBeamit");
        return (*(uint64_t (**)(uint64_t, uint64_t, void, void, int *, void *))(*(void *)AUBox + 304))(AUBox, 4632, 0, 0, &v46, a5);
      case 2002:
        if (!AUSpatialCapture::GetBox(this, v10)) {
          return 4294956421;
        }
        uint64_t Box = AUSpatialCapture::GetBox(this, v16);
        return (*(uint64_t (**)(uint64_t, uint64_t, void, void, int *, void *))(*(void *)Box + 304))(Box, 2002, 0, 0, &v46, a5);
      case 2003:
        uint64_t v5 = 0;
        *a5 = this;
        return v5;
      case 2004:
        CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        unsigned int v19 = (char *)this + 824;
        if (*((char *)this + 847) < 0) {
          unsigned int v19 = *(const char **)v19;
        }
        goto LABEL_33;
      case 2005:
        CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        unsigned int v19 = (char *)this + 848;
        if (*((char *)this + 871) < 0) {
          unsigned int v19 = *(const char **)v19;
        }
        goto LABEL_33;
      case 2006:
        CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        unsigned int v19 = (char *)this + 872;
        if (*((char *)this + 895) < 0) {
          unsigned int v19 = *(const char **)v19;
        }
LABEL_33:
        CFDictionaryRef Copy = (void *)CFStringCreateWithCString(v18, v19, 0x8000100u);
        if (Copy) {
          goto LABEL_34;
        }
        return 4294956433;
      case 2007:
        ZoomCurveValue::ZoomCurveValue((ZoomCurveValue *)&v49);
        if (!*((void *)this + 101)) {
          goto LABEL_114;
        }
        std::vector<std::string>::pointer end = v51.__end_;
        std::vector<std::string>::pointer begin = v51.__begin_;
        if (v51.__begin_ == v51.__end_) {
          goto LABEL_114;
        }
        char v22 = 1;
        break;
      case 2008:
        uint64_t v5 = 0;
        int v32 = *((unsigned __int8 *)this + 896);
        goto LABEL_80;
      case 2009:
        uint64_t v5 = 0;
        int v32 = *((unsigned __int8 *)this + 897);
LABEL_80:
        if (v32) {
          uint64_t v33 = (void *)MEMORY[0x1E4F1CFD0];
        }
        else {
          uint64_t v33 = (void *)MEMORY[0x1E4F1CFC8];
        }
        *a5 = *v33;
        return v5;
      default:
        return v5;
    }
    while (1)
    {
      if (SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v58, begin->__r_.__value_.__l.__data_, begin->__r_.__value_.__l.__size_);
      }
      else
      {
        long long v23 = *(_OWORD *)&begin->__r_.__value_.__l.__data_;
        *(void *)&v58[16] = *((void *)&begin->__r_.__value_.__l + 2);
        *(_OWORD *)v58 = v23;
      }
      if ((v58[23] & 0x80000000) != 0) {
        std::string::__init_copy_ctor_external(&v55, *(const std::string::value_type **)v58, *(std::string::size_type *)&v58[8]);
      }
      else {
        std::string v55 = *(std::string *)v58;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      uint64_t v26 = std::string::append(&v55, (const std::string::value_type *)p_p, size);
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      int64_t v57 = v26->__r_.__value_.__r.__words[2];
      long long v56 = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v55.__r_.__value_.__l.__data_);
      }
      if (v57 >= 0) {
        int v28 = (char *)&v56;
      }
      else {
        int v28 = (char *)v56;
      }
      std::string::basic_string[abi:ne180100]<0>(&v55, v28);
      uint64_t v29 = DSPGraph::Graph::box();
      uint64_t v30 = v29;
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v55.__r_.__value_.__l.__data_);
        if (v30)
        {
LABEL_58:
          memset(&v55, 0, sizeof(v55));
          int v54 = 24;
          if (!(*(unsigned int (**)(uint64_t, void, void, void, int *, std::string *))(*(void *)v30 + 304))(v30, 0, 0, 0, &v54, &v55))
          {
            if ((v58[23] & 0x80000000) != 0) {
              std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)v58, *(std::string::size_type *)&v58[8]);
            }
            else {
              std::string v53 = *(std::string *)v58;
            }
            id v31 = (std::string *)ZoomCurveValue::operator[]((uint64_t)&v49, (long long *)&v53);
            if (v31 != &v55) {
              std::vector<std::pair<float,float>>::__assign_with_size[abi:ne180100]<std::pair<float,float>*,std::pair<float,float>*>(v31, (uint64_t *)v55.__r_.__value_.__l.__data_, (uint64_t *)v55.__r_.__value_.__l.__size_, (uint64_t)(v55.__r_.__value_.__l.__size_ - v55.__r_.__value_.__r.__words[0]) >> 3);
            }
            if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v53.__r_.__value_.__l.__data_);
            }
          }
          if (v55.__r_.__value_.__r.__words[0])
          {
            v55.__r_.__value_.__l.__size_ = v55.__r_.__value_.__r.__words[0];
            operator delete(v55.__r_.__value_.__l.__data_);
          }
          goto LABEL_70;
        }
      }
      else if (v29)
      {
        goto LABEL_58;
      }
      char v22 = 0;
LABEL_70:
      if (SHIBYTE(v57) < 0) {
        operator delete((void *)v56);
      }
      if ((v58[23] & 0x80000000) != 0) {
        operator delete(*(void **)v58);
      }
      if (++begin == end)
      {
        if ((v22 & 1) == 0)
        {
          ZoomCurveValue::ZoomCurveValue((ZoomCurveValue *)v58);
          std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*((void **)&v49 + 1));
          long long v49 = *(_OWORD *)v58;
          uint64_t v50 = *(void *)&v58[16];
          if (*(void *)&v58[16])
          {
            *(void *)(*(void *)&v58[8] + 16) = (char *)&v49 + 8;
            *(void *)v58 = &v58[8];
            *(_OWORD *)&v58[8] = 0uLL;
          }
          else
          {
            *(void *)&long long v49 = (char *)&v49 + 8;
          }
          std::vector<std::__fs::filesystem::path>::__vdeallocate(&v51);
          std::vector<std::string> v51 = *(std::vector<std::string> *)&v58[24];
          memset(&v58[24], 0, 24);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::string __p = v59;
          *((unsigned char *)&v59.__r_.__value_.__s + 23) = 0;
          v59.__r_.__value_.__s.__data_[0] = 0;
          *(void *)&long long v56 = &v58[24];
          std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
          std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*(void **)&v58[8]);
        }
LABEL_114:
        if (v50)
        {
          if ((long long *)((char *)this + 904) != &v49)
          {
            std::__tree<std::__value_type<std::string,PiecewiseLinearTransform>,std::__map_value_compare<std::string,std::__value_type<std::string,PiecewiseLinearTransform>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,PiecewiseLinearTransform>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,PiecewiseLinearTransform>,std::__tree_node<std::__value_type<std::string,PiecewiseLinearTransform>,void *> *,long>>((uint64_t)this + 904, (long long *)v49, (long long *)((char *)&v49 + 8));
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)((char *)this + 928), v51.__begin_, (long long *)v51.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v51.__end_ - (char *)v51.__begin_) >> 3));
          }
          std::string::operator=((std::string *)((char *)this + 952), &__p);
        }
        std::map<std::string,PiecewiseLinearTransform>::map[abi:ne180100]((uint64_t)v42, (void *)this + 113);
        memset(&v44, 0, sizeof(v44));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v44, *((long long **)this + 116), *((long long **)this + 117), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 117) - *((void *)this + 116)) >> 3));
        if (*((char *)this + 975) < 0) {
          std::string::__init_copy_ctor_external(&v45, *((const std::string::value_type **)this + 119), *((void *)this + 120));
        }
        else {
          std::string v45 = *(std::string *)((char *)this + 952);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        *(void *)v58 = &v51;
        std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)v58);
        std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*((void **)&v49 + 1));
        unsigned int v39 = objc_opt_new();
        int v40 = v39;
        if (v39)
        {
          float v41 = v39;
          ZoomCurveValue::SaveToDictionary((ZoomCurveValue *)v42, v41);
          uint64_t v5 = 0;
          *a5 = v41;
        }
        else
        {
          uint64_t v5 = 4294956433;
        }

        if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v45.__r_.__value_.__l.__data_);
        }
        *(void *)v58 = &v44;
        std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)v58);
        std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(v43);
        return v5;
      }
    }
  }
  if (v8 > 1819309427)
  {
    if (v8 != 1819309428)
    {
      if (v8 != 1970040690)
      {
        if (v8 == 1953263724)
        {
          CFDictionaryRef v13 = (const __CFDictionary *)*((void *)this + 73);
          if (v13)
          {
            CFDictionaryRef Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v13);
LABEL_34:
            uint64_t v5 = 0;
            *a5 = Copy;
          }
          else
          {
            return 4294956433;
          }
        }
        return v5;
      }
      if (SCLogScope(void)::once != -1) {
        dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
      }
      if (SCLogScope(void)::scope)
      {
        unsigned int v15 = *(id *)SCLogScope(void)::scope;
        if (!v15) {
          return 0;
        }
      }
      else
      {
        unsigned int v15 = MEMORY[0x1E4F14500];
        id v38 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v58 = 136315394;
        *(void *)&v58[4] = "AUSpatialCapture.mm";
        *(_WORD *)&v58[12] = 1024;
        *(_DWORD *)&v58[14] = 850;
        _os_log_impl(&dword_1BB0CE000, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d Write-only property UnlockOrientation was read?", v58, 0x12u);
      }
      goto LABEL_108;
    }
    unint64_t v34 = atomic_load((unint64_t *)this + 102);
    if (SCLogScope(void)::once != -1) {
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
    }
    if (SCLogScope(void)::scope)
    {
      uint64_t v35 = *(id *)SCLogScope(void)::scope;
      if (!v35)
      {
LABEL_104:
        uint64_t v5 = 0;
        *a5 = v34;
        return v5;
      }
    }
    else
    {
      uint64_t v35 = MEMORY[0x1E4F14500];
      id v37 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v58 = 136315650;
      *(void *)&v58[4] = "AUSpatialCapture.mm";
      *(_WORD *)&v58[12] = 1024;
      *(_DWORD *)&v58[14] = 855;
      *(_WORD *)&v58[18] = 2048;
      *(void *)&v58[20] = v34;
      _os_log_impl(&dword_1BB0CE000, v35, OS_LOG_TYPE_DEBUG, "%25s:%-5d Last orientation / camera direction update mach absolute time was %llu", v58, 0x1Cu);
    }

    goto LABEL_104;
  }
  if (v8 == 3700)
  {
    uint64_t v5 = 0;
    *(_DWORD *)a5 = *((unsigned __int8 *)this + 376);
    return v5;
  }
  if (v8 == 1818980210)
  {
    if (SCLogScope(void)::once != -1) {
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
    }
    if (SCLogScope(void)::scope)
    {
      unsigned int v15 = *(id *)SCLogScope(void)::scope;
      if (!v15) {
        return 0;
      }
    }
    else
    {
      unsigned int v15 = MEMORY[0x1E4F14500];
      id v36 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v58 = 136315394;
      *(void *)&v58[4] = "AUSpatialCapture.mm";
      *(_WORD *)&v58[12] = 1024;
      *(_DWORD *)&v58[14] = 846;
      _os_log_impl(&dword_1BB0CE000, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d Write-only property LockOrientation was read?", v58, 0x12u);
    }
LABEL_108:

    return 0;
  }
  return v5;
}

void sub_1BB46A2C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
}

uint64_t AUSpatialCapture::GetBox(AUSpatialCapture *this, const char *a2)
{
  if (!*((void *)this + 101)) {
    return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "panner");
  uint64_t v2 = DSPGraph::Graph::box();
  uint64_t v3 = v2;
  if ((v7 & 0x80000000) == 0)
  {
    if (v2) {
      goto LABEL_4;
    }
    return 0;
  }
  operator delete(__p[0]);
  if (!v3) {
    return 0;
  }
LABEL_4:
  std::string::basic_string[abi:ne180100]<0>(__p, "panner");
  uint64_t v4 = DSPGraph::Graph::box();
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  return v4;
}

void sub_1BB46A478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::map<std::string,PiecewiseLinearTransform>::map[abi:ne180100](uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  uint64_t v4 = (void **)(a2 + 1);
  uint64_t v5 = (void **)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      size_t v6 = *(void **)(a1 + 8);
      if (*(void **)a1 == v3)
      {
        int v8 = v3;
        if (!v6) {
          goto LABEL_14;
        }
      }
      else
      {
        char v7 = v3;
        if (v6)
        {
          do
          {
            int v8 = v6;
            size_t v6 = (void *)v6[1];
          }
          while (v6);
        }
        else
        {
          do
          {
            int v8 = (void *)v7[2];
            BOOL v9 = *v8 == (void)v7;
            char v7 = v8;
          }
          while (v9);
        }
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8 + 4, v5 + 4) & 0x80) == 0)
        {
          unsigned int v10 = (uint64_t **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>(a1, &v15, v5 + 4);
          goto LABEL_11;
        }
        if (!*v3)
        {
LABEL_14:
          unsigned int v15 = v3;
          unsigned int v10 = (uint64_t **)v3;
LABEL_15:
          std::__tree<std::__value_type<std::string,PiecewiseLinearTransform>,std::__map_value_compare<std::string,std::__value_type<std::string,PiecewiseLinearTransform>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,PiecewiseLinearTransform>>>::__construct_node<std::pair<std::string const,PiecewiseLinearTransform> const&>((uint64_t)v14, a1, (long long *)v5 + 2);
          std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v15, v10, v14[0]);
          v14[0] = 0;
          std::unique_ptr<std::__tree_node<std::__value_type<std::string,PiecewiseLinearTransform>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,PiecewiseLinearTransform>,void *>>>>::reset[abi:ne180100]((uint64_t)v14);
          goto LABEL_16;
        }
      }
      unsigned int v15 = v8;
      unsigned int v10 = (uint64_t **)(v8 + 1);
LABEL_11:
      if (!*v10) {
        goto LABEL_15;
      }
LABEL_16:
      BOOL v11 = (void **)v5[1];
      if (v11)
      {
        do
        {
          id v12 = v11;
          BOOL v11 = (void **)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          id v12 = (void **)v5[2];
          BOOL v9 = *v12 == v5;
          uint64_t v5 = v12;
        }
        while (!v9);
      }
      uint64_t v5 = v12;
    }
    while (v12 != v4);
  }
  return a1;
}

void sub_1BB46A5EC(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    size_t v6 = result;
    std::vector<std::__fs::filesystem::path>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1BB46A668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t AUSpatialCapture::GetPropertyInfo(AUSpatialCapture *this, const char *a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t v9 = this;
  BOOL v10 = 1;
  LODWORD(this) = 8;
  uint64_t v6 = 4294956417;
  if ((int)a2 <= 3699)
  {
    switch((int)a2)
    {
      case 2001:
        *a5 = 0;
        if (!AUSpatialCapture::GetAUBox(v9, "doaBeamit")) {
          goto LABEL_23;
        }
        uint64_t AUBox = AUSpatialCapture::GetAUBox(v9, "doaBeamit");
        this = (AUSpatialCapture *)(*(uint64_t (**)(uint64_t, uint64_t, void, void))(*(void *)AUBox + 296))(AUBox, 4632, 0, 0);
        BOOL v10 = 0;
        uint64_t v6 = (uint64_t)this;
        goto LABEL_19;
      case 2002:
        *a5 = 0;
        if (!AUSpatialCapture::GetBox(v9, a2))
        {
LABEL_23:
          BOOL v10 = 0;
          goto LABEL_21;
        }
        uint64_t Box = AUSpatialCapture::GetBox(v9, v13);
        this = (AUSpatialCapture *)(*(uint64_t (**)(uint64_t, uint64_t, void, void))(*(void *)Box + 296))(Box, 2002, 0, 0);
        uint64_t v6 = (uint64_t)this;
        BOOL v10 = 0;
LABEL_19:
        if (v12) {
          goto LABEL_20;
        }
        return v6;
      case 2003:
      case 2005:
      case 2006:
        goto LABEL_12;
      case 2004:
      case 2007:
      case 2008:
      case 2009:
        goto LABEL_20;
      default:
        return v6;
    }
  }
  if ((int)a2 <= 1819309427)
  {
    if (a2 != 3700)
    {
      if (a2 != 1818980210) {
        return v6;
      }
      BOOL v10 = 1;
    }
    LODWORD(this) = 4;
  }
  else if (a2 == 1819309428)
  {
LABEL_12:
    BOOL v10 = 0;
    LODWORD(this) = 8;
  }
  else if (a2 != 1953263724)
  {
    if (a2 != 1970040690) {
      return v6;
    }
    LODWORD(this) = 1;
    BOOL v10 = 1;
  }
LABEL_20:
  *a5 = this;
LABEL_21:
  uint64_t v6 = 0;
  *a6 = v10;
  return v6;
}

uint64_t AUSpatialCapture::Reset(AUSpatialCapture *this)
{
  id v1 = (DSPGraph::Graph *)*((void *)this + 101);
  if (v1 && *((unsigned char *)v1 + 762)) {
    DSPGraph::Graph::reset(v1);
  }
  return 0;
}

uint64_t AUSpatialCapture::Cleanup(AUSpatialCapture *this)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (SCLogScope(void)::once != -1) {
    dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
  }
  if (SCLogScope(void)::scope)
  {
    uint64_t v2 = *(id *)SCLogScope(void)::scope;
    if (!v2) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4F14500];
    id v3 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    int v5 = 136315394;
    uint64_t v6 = "AUSpatialCapture.mm";
    __int16 v7 = 1024;
    int v8 = 451;
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d ----", (uint8_t *)&v5, 0x12u);
  }

LABEL_10:
  uint64_t result = *((void *)this + 101);
  *((void *)this + 101) = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t AUSpatialCapture::Initialize(AUSpatialCapture *this)
{
  v251[19] = *MEMORY[0x1E4F143B8];
  if (SCLogScope(void)::once != -1) {
    dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
  }
  if (SCLogScope(void)::scope)
  {
    id v1 = *(id *)SCLogScope(void)::scope;
    if (!v1) {
      goto LABEL_10;
    }
  }
  else
  {
    id v1 = (id)MEMORY[0x1E4F14500];
    id v2 = MEMORY[0x1E4F14500];
  }
  id v3 = v1;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "AUSpatialCapture.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 263;
    _os_log_impl(&dword_1BB0CE000, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d ---", buf, 0x12u);
  }

LABEL_10:
  uint64_t v4 = (void *)*((void *)this + 73);
  if (v4) {
    goto LABEL_37;
  }
  if (SCLogScope(void)::once != -1) {
    dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
  }
  if (SCLogScope(void)::scope)
  {
    int v5 = *(id *)SCLogScope(void)::scope;
    if (!v5) {
      goto LABEL_20;
    }
  }
  else
  {
    int v5 = MEMORY[0x1E4F14500];
    id v6 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "AUSpatialCapture.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 174;
    _os_log_impl(&dword_1BB0CE000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Initialize called without setting setting plist! Loading plist from path given by a defaults write", buf, 0x12u);
  }

LABEL_20:
  CFPropertyListRef v7 = CFPreferencesCopyAppValue(@"auspatialcaptureplistpath", @"com.apple.coreaudio");
  int v8 = (void *)v7;
  if (!v7) {
    goto LABEL_36;
  }
  CFTypeID v9 = CFGetTypeID(v7);
  if (v9 != CFStringGetTypeID())
  {
    CFRelease(v8);
    int v8 = 0;
    goto LABEL_36;
  }
  if (SCLogScope(void)::once != -1) {
    dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
  }
  if (!SCLogScope(void)::scope)
  {
    id v10 = (id)MEMORY[0x1E4F14500];
    id v11 = MEMORY[0x1E4F14500];
    goto LABEL_29;
  }
  id v10 = *(id *)SCLogScope(void)::scope;
  if (v10)
  {
LABEL_29:
    char v12 = v10;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = [v8 UTF8String];
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "AUSpatialCapture.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 177;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = v13;
      _os_log_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Plist path given as %s by defaults write value", buf, 0x1Cu);
    }
  }
  float v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithContentsOfFile:v8];
  unsigned int v15 = v14;
  if (v14)
  {
    id v16 = v14;
    CFRetain(v16);
    applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)buf, v16);

    std::string::size_type v17 = (const void *)*((void *)this + 73);
    *((void *)this + 73) = *(void *)buf;
    *(void *)buf = v17;
    if (v17) {
      CFRelease(v17);
    }
  }

LABEL_36:
  uint64_t v4 = (void *)*((void *)this + 73);
  if (!v4)
  {
    unsigned int v212 = 0;
LABEL_477:
    if (SCLogScope(void)::once != -1) {
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
    }
    if (SCLogScope(void)::scope)
    {
      id v192 = *(id *)SCLogScope(void)::scope;
      if (!v192) {
        return v212;
      }
    }
    else
    {
      id v192 = (id)MEMORY[0x1E4F14500];
      id v193 = MEMORY[0x1E4F14500];
    }
    v194 = v192;
    if (os_log_type_enabled(v194, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__s1[0]) = 136315650;
      *(uint64_t *)((char *)__s1 + 4) = (uint64_t)"AUSpatialCapture.mm";
      WORD2(__s1[1]) = 1024;
      *(_DWORD *)((char *)&__s1[1] + 6) = 338;
      WORD1(__s1[2]) = 1024;
      HIDWORD(__s1[2]) = v212;
      _os_log_impl(&dword_1BB0CE000, v194, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Done initializing uint64_t result = %i", (uint8_t *)__s1, 0x18u);
    }

    return v212;
  }
LABEL_37:
  id v203 = [v4 objectForKey:@"tuningName"];
  CFAllocatorRef v18 = (std::string *)((char *)this + 848);
  if (*((char *)this + 871) < 0)
  {
    std::string::__init_copy_ctor_external(&v227, *((const std::string::value_type **)this + 106), *((void *)this + 107));
  }
  else
  {
    *(_OWORD *)&v227.__r_.__value_.__l.__data_ = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v227.__r_.__value_.__r.__words[2] = *((void *)this + 108);
  }
  if (v203)
  {
    if (SCLogScope(void)::once != -1) {
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
    }
    if (SCLogScope(void)::scope)
    {
      id v19 = *(id *)SCLogScope(void)::scope;
      if (!v19)
      {
LABEL_52:
        std::string::__assign_external(v18, (const std::string::value_type *)[v203 UTF8String]);
        goto LABEL_56;
      }
    }
    else
    {
      id v19 = (id)MEMORY[0x1E4F14500];
      id v21 = MEMORY[0x1E4F14500];
    }
    char v22 = v19;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v23 = [v203 UTF8String];
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "AUSpatialCapture.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 279;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = v23;
      _os_log_impl(&dword_1BB0CE000, v22, OS_LOG_TYPE_DEBUG, "%25s:%-5d Tuning name '%s'", buf, 0x1Cu);
    }

    goto LABEL_52;
  }
  if (*((char *)this + 871) < 0)
  {
    *((void *)this + 107) = 18;
    id v20 = (char *)*((void *)this + 106);
  }
  else
  {
    *((unsigned char *)this + 871) = 18;
    id v20 = (char *)this + 848;
  }
  strcpy(v20, "<anoynmous tuning>");
LABEL_56:
  uint64_t v24 = HIBYTE(v227.__r_.__value_.__r.__words[2]);
  if ((v227.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v227.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v227.__r_.__value_.__l.__size_;
  }
  uint64_t v26 = *((unsigned __int8 *)this + 871);
  int v27 = (char)v26;
  if ((v26 & 0x80u) != 0) {
    uint64_t v26 = *((void *)this + 107);
  }
  if (size == v26)
  {
    if (v27 >= 0) {
      int v28 = (unsigned __int8 *)this + 848;
    }
    else {
      int v28 = (unsigned __int8 *)v18->__r_.__value_.__r.__words[0];
    }
    if ((*((unsigned char *)&v227.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (!memcmp(v227.__r_.__value_.__l.__data_, v28, v227.__r_.__value_.__l.__size_)) {
        goto LABEL_73;
      }
    }
    else
    {
      if (!*((unsigned char *)&v227.__r_.__value_.__s + 23)) {
        goto LABEL_73;
      }
      uint64_t v29 = &v227;
      while (v29->__r_.__value_.__s.__data_[0] == *v28)
      {
        uint64_t v29 = (std::string *)((char *)v29 + 1);
        ++v28;
        if (!--v24) {
          goto LABEL_73;
        }
      }
    }
  }
  (*(void (**)(AUSpatialCapture *, uint64_t, void, void))(*(void *)this + 432))(this, 2005, 0, 0);
LABEL_73:
  AUSpatialCapture::SetAudioChannelLayoutFromTuning(this, (const __CFDictionary *)v4);
  id v205 = v4;
  uint64_t v30 = [v205 objectForKeyedSubscript:@"renderModes"];
  id v31 = (uint64_t *)"ZoomableLinear";
  v204 = v30;
  if (v30)
  {
    long long v246 = 0u;
    long long v245 = 0u;
    long long v244 = 0u;
    long long v213 = 0u;
    *(_OWORD *)std::string __p = 0u;
    id obj = v30;
    int v32 = 0;
    uint64_t v33 = [obj countByEnumeratingWithState:__p objects:buf count:16];
    if (v33)
    {
      uint64_t v209 = *(void *)v244;
      long long v213 = 0u;
      do
      {
        unint64_t v34 = 0;
        v211 = (ausdk::AUScope *)v33;
        do
        {
          if (*(void *)v244 != v209) {
            objc_enumerationMutation(obj);
          }
          int v35 = 0;
          id v36 = (void *)*((void *)__p[1] + (void)v34);
          char v37 = 1;
          do
          {
            char v38 = v37;
            memset(__s1, 0, 24);
            if (v37)
            {
              qmemcpy(__s1, "Linear", 6);
              char v39 = 6;
              size_t v40 = 6;
            }
            else
            {
              __s1[0] = *v31;
              *(uint64_t *)((char *)__s1 + 6) = *(uint64_t *)((char *)v31 + 6);
              size_t v40 = 14;
              char v39 = 14;
            }
            HIBYTE(__s1[2]) = v39;
            float v41 = (const char *)[v36 UTF8String];
            if (strlen(v41) == v40 && !memcmp(__s1, v41, v40))
            {
              std::chrono::system_clock::time_point v42 = v31;
              std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v43 = (_DWORD *)v213;
              if ((unint64_t)v213 >= *((void *)&v213 + 1))
              {
                uint64_t v45 = (uint64_t)(v213 - (void)v32) >> 2;
                unint64_t v46 = v45 + 1;
                if ((unint64_t)(v45 + 1) >> 62) {
                  std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v47 = *((void *)&v213 + 1) - (void)v32;
                if ((uint64_t)(*((void *)&v213 + 1) - (void)v32) >> 1 > v46) {
                  unint64_t v46 = v47 >> 1;
                }
                if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v48 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v48 = v46;
                }
                if (v48) {
                  unint64_t v48 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v48);
                }
                else {
                  uint64_t v49 = 0;
                }
                uint64_t v50 = (int *)(v48 + 4 * v45);
                int *v50 = v35;
                std::string v44 = v50 + 1;
                while (v43 != v32)
                {
                  int v51 = *--v43;
                  *--uint64_t v50 = v51;
                }
                *((void *)&v213 + 1) = v48 + 4 * v49;
                if (v32) {
                  operator delete(v32);
                }
                int v32 = v50;
              }
              else
              {
                *(_DWORD *)long long v213 = v35;
                std::string v44 = (_DWORD *)(v213 + 4);
              }
              *((void *)&v52 + 1) = *((void *)&v213 + 1);
              *(void *)&long long v52 = v44;
              long long v213 = v52;
              if (SHIBYTE(__s1[2]) < 0) {
                operator delete((void *)__s1[0]);
              }
              id v31 = v42;
            }
            char v37 = 0;
            int v35 = 1;
          }
          while ((v38 & 1) != 0);
          unint64_t v34 = (ausdk::AUScope *)((char *)v34 + 1);
        }
        while (v34 != v211);
        uint64_t v33 = [obj countByEnumeratingWithState:__p objects:buf count:16];
      }
      while (v33);
    }
  }
  else
  {
    int v32 = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(1uLL);
    *int v32 = 0;
    *(void *)&long long v54 = v32 + 1;
    *((void *)&v54 + 1) = &v32[v53];
    long long v213 = v54;
  }

  std::string v55 = (void *)*((void *)this + 66);
  if (v55)
  {
    *((void *)this + 67) = v55;
    operator delete(v55);
    *((void *)this + 66) = 0;
    *((void *)this + 67) = 0;
    *((void *)this + 68) = 0;
  }
  *((void *)this + 66) = v32;
  *(_OWORD *)((char *)this + 536) = v213;
  obja = (_DWORD **)((char *)this + 528);
  v210 = (void *)((char *)this + 536);
  v225 = 0;
  uint64_t v226 = 0;
  v224 = 0;
  std::vector<SCRenderModes>::__init_with_size[abi:ne180100]<SCRenderModes*,SCRenderModes*>(&v224, v32, v213, (uint64_t)(v213 - (void)v32) >> 2);
  if (SCLogScope(void)::once != -1) {
    dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
  }
  if (SCLogScope(void)::scope)
  {
    if (*(unsigned char *)(SCLogScope(void)::scope + 8))
    {
      long long v56 = *(id *)SCLogScope(void)::scope;
      if (v56)
      {
        int64_t v57 = v56;
        if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "AUSpatialCapture.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 254;
          _os_log_impl(&dword_1BB0CE000, v57, OS_LOG_TYPE_DEBUG, "%25s:%-5d Supported render modes:", buf, 0x12u);
        }
      }
    }
  }
  std::string v59 = v224;
  v58 = v225;
  if (v224 != v225)
  {
    uint64_t v60 = v224;
    do
    {
      int v61 = *v60;
      if (SCLogScope(void)::once != -1) {
        dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
      }
      if (SCLogScope(void)::scope)
      {
        if (*(unsigned char *)(SCLogScope(void)::scope + 8))
        {
          id v62 = *(id *)SCLogScope(void)::scope;
          if (v62)
          {
            __int16 v63 = v62;
            if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
            {
              __p[1] = 0;
              __p[0] = 0;
              *(void *)&long long v244 = 0;
              if (v61 == 1)
              {
                BYTE7(v244) = 14;
                __p[0] = (void *)*v31;
                *(void **)((char *)__p + 6) = *(void **)((char *)v31 + 6);
              }
              else if (!v61)
              {
                BYTE7(v244) = 6;
                qmemcpy(__p, "Linear", 6);
              }
              *(_DWORD *)buf = 136315650;
              *(void *)&uint8_t buf[4] = "AUSpatialCapture.mm";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 256;
              *(_WORD *)&buf[18] = 2080;
              *(void *)&buf[20] = __p;
              _os_log_impl(&dword_1BB0CE000, v63, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s", buf, 0x1Cu);
              if (SBYTE7(v244) < 0) {
                operator delete(__p[0]);
              }
            }
          }
        }
      }
      ++v60;
    }
    while (v60 != v58);
  }
  if (v59)
  {
    v225 = v59;
    operator delete(v59);
  }
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUSpatialCapture *)((char *)this + 80), 0);
  long long v65 = *(_OWORD *)(Element + 96);
  v222[0] = *(_OWORD *)(Element + 80);
  v222[1] = v65;
  uint64_t v223 = *(void *)(Element + 112);
  int v66 = DWORD2(v222[0]);
  if (SCLogScope(void)::once != -1) {
    dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
  }
  if (SCLogScope(void)::scope)
  {
    id v67 = *(id *)SCLogScope(void)::scope;
    if (!v67) {
      goto LABEL_151;
    }
  }
  else
  {
    id v67 = (id)MEMORY[0x1E4F14500];
    id v68 = MEMORY[0x1E4F14500];
  }
  long long v69 = v67;
  if (os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG))
  {
    CA::StreamDescription::AsString((CA::StreamDescription *)v222, (uint64_t)__p, v70);
    v71 = (SBYTE7(v244) & 0x80u) == 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "AUSpatialCapture.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 294;
    *(_WORD *)&buf[18] = 2080;
    *(void *)&buf[20] = v71;
    _os_log_impl(&dword_1BB0CE000, v69, OS_LOG_TYPE_DEBUG, "%25s:%-5d Input format is %s", buf, 0x1Cu);
    if (SBYTE7(v244) < 0) {
      operator delete(__p[0]);
    }
  }

LABEL_151:
  uint64_t v72 = ausdk::AUScope::SafeGetElement((AUSpatialCapture *)((char *)this + 128), 0);
  long long v73 = *(_OWORD *)(v72 + 96);
  v220[0] = *(_OWORD *)(v72 + 80);
  v220[1] = v73;
  uint64_t v221 = *(void *)(v72 + 112);
  int v74 = DWORD2(v220[0]);
  if (SCLogScope(void)::once != -1) {
    dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
  }
  if (!SCLogScope(void)::scope)
  {
    id v75 = (id)MEMORY[0x1E4F14500];
    id v76 = MEMORY[0x1E4F14500];
LABEL_157:
    v77 = v75;
    if (os_log_type_enabled(v77, OS_LOG_TYPE_DEBUG))
    {
      CA::StreamDescription::AsString((CA::StreamDescription *)v220, (uint64_t)__p, v78);
      v79 = (SBYTE7(v244) & 0x80u) == 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "AUSpatialCapture.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 299;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = v79;
      _os_log_impl(&dword_1BB0CE000, v77, OS_LOG_TYPE_DEBUG, "%25s:%-5d Output format is %s", buf, 0x1Cu);
      if (SBYTE7(v244) < 0) {
        operator delete(__p[0]);
      }
    }

    goto LABEL_164;
  }
  id v75 = *(id *)SCLogScope(void)::scope;
  if (v75) {
    goto LABEL_157;
  }
LABEL_164:
  int v80 = *((_DWORD *)this + 200);
  v217 = 0;
  uint64_t v218 = 0;
  v216 = 0;
  std::vector<SCRenderModes>::__init_with_size[abi:ne180100]<SCRenderModes*,SCRenderModes*>(&v216, *((const void **)this + 66), *((void *)this + 67), (uint64_t)(*((void *)this + 67) - *((void *)this + 66)) >> 2);
  if (*((char *)this + 847) < 0) {
    std::string::__init_copy_ctor_external(&v215, *((const std::string::value_type **)this + 103), *((void *)this + 104));
  }
  else {
    std::string v215 = *(std::string *)((char *)this + 824);
  }
  v233 = 0;
  uint64_t v234 = 0;
  v232 = 0;
  v81 = v216;
  std::vector<SCRenderModes>::__init_with_size[abi:ne180100]<SCRenderModes*,SCRenderModes*>(&v232, v216, (uint64_t)v217, (v217 - v216) >> 2);
  if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v231, v215.__r_.__value_.__l.__data_, v215.__r_.__value_.__l.__size_);
  }
  else {
    std::string v231 = v215;
  }
  GetSpatialCaptureDSPGraphSource(&v235, v205, v80, (int **)&v232, (uint64_t)&v231, v66 != 1718773105, v74 != 1718773105);
  if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v231.__r_.__value_.__l.__data_);
  }
  if (v232)
  {
    v233 = v232;
    operator delete(v232);
  }
  MEMORY[0x1C185C420](__s1);
  std::string::basic_string[abi:ne180100]<0>(v236, "scmicselect");
  *(_OWORD *)&v228[0].__locale_ = xmmword_1BB87A8B0;
  int v229 = 0;
  *(void *)buf = MEMORY[0x1E4F143A8];
  *(void *)&buf[8] = 3221225472;
  *(void *)&buf[16] = ___Z28GetSpatialCaptureBoxRegistryPK14__CFDictionaryj_block_invoke;
  *(void *)&buf[24] = &__block_descriptor_44_e12__v16__0I8I12l;
  id v249 = v205;
  int v250 = v80;
  *((void *)&v244 + 1) = 0;
  __p[0] = &unk_1F14B9FF0;
  __p[1] = _Block_copy(buf);
  *((void *)&v244 + 1) = __p;
  DSPGraph::NewBoxRegistry::add();
  std::__function::__value_func<DSPGraph::Box * ()(unsigned int,unsigned int)>::~__value_func[abi:ne180100](__p);
  if (SBYTE7(v237) < 0) {
    operator delete(v236[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v236, "chansel");
  *(_OWORD *)&v228[0].__locale_ = xmmword_1BB87A8C0;
  int v229 = 0;
  __p[0] = &unk_1F14BA038;
  __p[1] = &__block_literal_global_279;
  *((void *)&v244 + 1) = __p;
  DSPGraph::NewBoxRegistry::add();
  std::__function::__value_func<DSPGraph::Box * ()(unsigned int,unsigned int)>::~__value_func[abi:ne180100](__p);
  if (SBYTE7(v237) < 0) {
    operator delete(v236[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v236, "scmx");
  *(_OWORD *)&v228[0].__locale_ = xmmword_1BB87A8D0;
  int v229 = 0;
  __p[0] = &unk_1F14BA080;
  __p[1] = &__block_literal_global_283;
  *((void *)&v244 + 1) = __p;
  DSPGraph::NewBoxRegistry::add();
  std::__function::__value_func<DSPGraph::Box * ()(unsigned int,unsigned int)>::~__value_func[abi:ne180100](__p);
  if (SBYTE7(v237) < 0) {
    operator delete(v236[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v236, "paramsw");
  *(_OWORD *)&v228[0].__locale_ = xmmword_1BB87A8E0;
  int v229 = 0;
  __p[0] = &unk_1F14BA0C8;
  __p[1] = &__block_literal_global_287;
  *((void *)&v244 + 1) = __p;
  DSPGraph::NewBoxRegistry::add();
  std::__function::__value_func<DSPGraph::Box * ()(unsigned int,unsigned int)>::~__value_func[abi:ne180100](__p);
  if (SBYTE7(v237) < 0) {
    operator delete(v236[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v236, "paramtx");
  *(_OWORD *)&v228[0].__locale_ = xmmword_1BB87A8F0;
  int v229 = 0;
  __p[0] = &unk_1F14BA110;
  __p[1] = &__block_literal_global_290;
  *((void *)&v244 + 1) = __p;
  DSPGraph::NewBoxRegistry::add();
  std::__function::__value_func<DSPGraph::Box * ()(unsigned int,unsigned int)>::~__value_func[abi:ne180100](__p);
  if (SBYTE7(v237) < 0) {
    operator delete(v236[0]);
  }
  MEMORY[0x1C185C3F0](__p, __s1);
  *(_OWORD *)v236 = 0u;
  long long v237 = 0u;
  int v238 = 1065353216;
  if (CACFPreferencesGetAppBooleanValue(@"debug_spatial_capture_graph", @"com.apple.coreaudio", 0))
  {
    if ((v215.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v82 = HIBYTE(v215.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v82 = v215.__r_.__value_.__l.__size_;
    }
    std::string::basic_string[abi:ne180100]((uint64_t)v228, v82 + 21);
    if (v230 >= 0) {
      locale = v228;
    }
    else {
      locale = v228[0].__locale_;
    }
    if (v82)
    {
      if ((v215.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v84 = &v215;
      }
      else {
        v84 = (std::string *)v215.__r_.__value_.__r.__words[0];
      }
      memmove(locale, v84, v82);
    }
    strcpy((char *)locale + v82, "auspatialcapture.dspg");
    std::ofstream::basic_ofstream((uint64_t *)buf);
    if (v230 < 0) {
      operator delete(v228[0].__locale_);
    }
    if ((v235.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v85 = &v235;
    }
    else {
      v85 = (std::string *)v235.__r_.__value_.__r.__words[0];
    }
    if ((v235.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v86 = HIBYTE(v235.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v86 = v235.__r_.__value_.__l.__size_;
    }
    v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)v85, v86);
    std::ios_base::getloc((const std::ios_base *)((char *)v87 + *(void *)(*v87 - 24)));
    v88 = std::locale::use_facet(v228, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v88->__vftable[2].~facet_0)(v88, 10);
    std::locale::~locale(v228);
    std::ostream::put();
    std::ostream::flush();
    *(void *)buf = *MEMORY[0x1E4FBA400];
    *(void *)&buf[*(void *)(*(void *)buf - 24)] = *(void *)(MEMORY[0x1E4FBA400] + 24);
    MEMORY[0x1C185CC40](&buf[8]);
    std::ostream::~ostream();
    MEMORY[0x1C185D210](v251);
  }
  if (SCLogScope(void)::once != -1) {
    dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
  }
  if (SCLogScope(void)::scope)
  {
    if (*(unsigned char *)(SCLogScope(void)::scope + 8))
    {
      v89 = *(id *)SCLogScope(void)::scope;
      if (v89)
      {
        v90 = v89;
        if (os_log_type_enabled(v89, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "SpatialCapture.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 562;
          _os_log_impl(&dword_1BB0CE000, v90, OS_LOG_TYPE_DEBUG, "%25s:%-5d Compiling graph", buf, 0x12u);
        }
      }
    }
  }
  memset(buf, 0, 24);
  DSPGraph::Interpreter::compileText();
  v228[0].__locale_ = (std::locale::__imp *)buf;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)v228);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v236);
  MEMORY[0x1C185C400](__p);
  __s1[0] = MEMORY[0x1E4F4EAF8] + 16;
  *(void *)buf = &v241;
  std::vector<std::pair<std::string,AudioComponentDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  std::__hash_table<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<AudioComponentDescription>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,true>,std::__unordered_map_equal<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,std::hash<AudioComponentDescription>,true>,std::allocator<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::~__hash_table((uint64_t)&v240);
  std::__hash_table<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::~__hash_table((uint64_t)&__s1[1]);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  uint64_t v91 = v219;
  uint64_t v219 = 0;
  uint64_t v92 = *((void *)this + 101);
  *((void *)this + 101) = v91;
  if (v92)
  {
    (*(void (**)(uint64_t))(*(void *)v92 + 8))(v92);
    uint64_t v93 = v219;
    uint64_t v219 = 0;
    if (v93) {
      (*(void (**)(uint64_t))(*(void *)v93 + 8))(v93);
    }
  }
  if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v215.__r_.__value_.__l.__data_);
  }
  if (v81)
  {
    v217 = v81;
    operator delete(v81);
  }
  if (SCLogScope(void)::once != -1) {
    dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
  }
  if (SCLogScope(void)::scope)
  {
    if (*(unsigned char *)(SCLogScope(void)::scope + 8))
    {
      v94 = *(id *)SCLogScope(void)::scope;
      if (v94)
      {
        v95 = v94;
        if (os_log_type_enabled(v94, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "AUSpatialCapture.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 394;
          _os_log_impl(&dword_1BB0CE000, v95, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting up beamformers", buf, 0x12u);
        }
      }
    }
  }
  v96 = (const char **)operator new(0x10uLL);
  v97 = v96;
  *v96 = "linFullSignal";
  v96[1] = "SDLSPlistFD";
  v98 = *obja;
  v99 = (_DWORD *)*v210;
  if (*obja != (_DWORD *)*v210)
  {
    while (*v98 != 1)
    {
      if (++v98 == v99)
      {
        v98 = (_DWORD *)*v210;
        break;
      }
    }
  }
  if (v98 == v99)
  {
    v214 = v96 + 2;
  }
  else
  {
    v100 = operator new(0x20uLL);
    v100[2] = "focused";
    v100[3] = "focusedBeams";
    *(_OWORD *)v100 = *(_OWORD *)v97;
    operator delete(v97);
    v101 = (const char **)operator new(0x40uLL);
    uint64_t v102 = 0;
    v101[4] = "wide";
    v101[5] = "wideBeams";
    v214 = v101 + 6;
    do
    {
      *(_OWORD *)&v101[v102 + 2] = *(_OWORD *)&v100[v102 + 2];
      v102 -= 2;
    }
    while (v102 != -4);
    v97 = v101;
    operator delete(v100);
  }
  LOBYTE(v103) = 1;
  v202 = v97;
  do
  {
    if (SCLogScope(void)::once != -1) {
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
    }
    if (SCLogScope(void)::scope)
    {
      if (*(unsigned char *)(SCLogScope(void)::scope + 8))
      {
        v104 = *(id *)SCLogScope(void)::scope;
        if (v104)
        {
          v105 = v104;
          if (os_log_type_enabled(v104, OS_LOG_TYPE_DEBUG))
          {
            v106 = *v97;
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "AUSpatialCapture.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 409;
            *(_WORD *)&buf[18] = 2080;
            *(void *)&buf[20] = v106;
            _os_log_impl(&dword_1BB0CE000, v105, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting up box %s", buf, 0x1Cu);
          }
        }
      }
    }
    v107 = GetSubDictionaryWithKey(*((const __CFDictionary **)this + 73), v97[1], 0);
    __p[0] = v107;
    v108 = [v107 objectForKeyedSubscript:@"LimitWindBoostRefChannel"];
    int v109 = [v108 intValue];
    if (v109 < 0)
    {
      if (SCLogScope(void)::once != -1) {
        dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
      }
      if (!SCLogScope(void)::scope)
      {
        v111 = MEMORY[0x1E4F14500];
        id v112 = MEMORY[0x1E4F14500];
LABEL_262:
        if (os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "AUSpatialCapture.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 415;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v109;
          _os_log_impl(&dword_1BB0CE000, v111, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Bad ref mic for limit wind boost %i", buf, 0x18u);
        }
        int v109 = 0;
LABEL_265:

        goto LABEL_266;
      }
      v111 = *(id *)SCLogScope(void)::scope;
      if (v111) {
        goto LABEL_262;
      }
      int v109 = 0;
    }
    else
    {
      if (SCLogScope(void)::once != -1) {
        dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
      }
      if (SCLogScope(void)::scope)
      {
        if (*(unsigned char *)(SCLogScope(void)::scope + 8))
        {
          v110 = *(id *)SCLogScope(void)::scope;
          if (v110)
          {
            v111 = v110;
            if (os_log_type_enabled(v110, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315650;
              *(void *)&uint8_t buf[4] = "AUSpatialCapture.mm";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 418;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v109;
              _os_log_impl(&dword_1BB0CE000, v111, OS_LOG_TYPE_DEBUG, "%25s:%-5d Limit wind boost ref is channel %i", buf, 0x18u);
            }
            goto LABEL_265;
          }
        }
      }
    }
LABEL_266:
    uint64_t AUBox = AUSpatialCapture::GetAUBox(this, (char *)*v97);
    if (__p[0])
    {
      uint64_t v114 = AUBox;
      if (AUBox)
      {
        int v115 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, void **))(*(void *)AUBox + 312))(AUBox, 4630, 0, 0, 8, __p);
        if (!v115) {
          goto LABEL_287;
        }
        if (SCLogScope(void)::once != -1) {
          dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
        }
        if (SCLogScope(void)::scope)
        {
          v116 = *(id *)SCLogScope(void)::scope;
          if (!v116) {
            goto LABEL_287;
          }
        }
        else
        {
          v116 = MEMORY[0x1E4F14500];
          id v119 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v116, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "AUSpatialCapture.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 424;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v115;
          _os_log_impl(&dword_1BB0CE000, v116, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to set beamformer coefficients, setPropertyError = %i", buf, 0x18u);
        }

LABEL_287:
        (*(void (**)(uint64_t, uint64_t, void, void, void, float))(*(void *)v114 + 80))(v114, 24, 0, 0, 0, (float)v109);
        (*(void (**)(uint64_t, uint64_t, void, void, void, float))(*(void *)v114 + 80))(v114, 1, 0, 0, 0, 4.0);
        v117 = [v107 objectForKeyedSubscript:@"latency"];
        int v103 = v103 & (v115 == 0);
        if (v117)
        {
          if (SCLogScope(void)::once != -1) {
            dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
          }
          if (SCLogScope(void)::scope)
          {
            if (*(unsigned char *)(SCLogScope(void)::scope + 8))
            {
              id v120 = *(id *)SCLogScope(void)::scope;
              if (v120)
              {
                v121 = v120;
                if (os_log_type_enabled(v121, OS_LOG_TYPE_DEBUG))
                {
                  [v117 floatValue];
                  *(_DWORD *)buf = 136315650;
                  *(void *)&uint8_t buf[4] = "AUSpatialCapture.mm";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 432;
                  *(_WORD *)&buf[18] = 2048;
                  *(double *)&buf[20] = v122;
                  _os_log_impl(&dword_1BB0CE000, v121, OS_LOG_TYPE_DEBUG, "%25s:%-5d Latency will be reported as %fs", buf, 0x1Cu);
                }
              }
            }
          }
          __s1[0] = (uint64_t)v117;
          int v123 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, uint64_t *))(*(void *)v114
                                                                                                 + 312))(v114, 4633, 0, 0, 8, __s1);
          if (!v123) {
            goto LABEL_311;
          }
          if (SCLogScope(void)::once != -1) {
            dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
          }
          if (SCLogScope(void)::scope)
          {
            v124 = *(id *)SCLogScope(void)::scope;
            if (!v124)
            {
LABEL_311:
              if (v123) {
                int v103 = 0;
              }
              goto LABEL_319;
            }
          }
          else
          {
            v124 = MEMORY[0x1E4F14500];
            id v126 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v124, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "AUSpatialCapture.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 435;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v123;
            _os_log_impl(&dword_1BB0CE000, v124, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to set reported latency, setPropertyError = %i", buf, 0x18u);
          }

          goto LABEL_311;
        }
        if (SCLogScope(void)::once != -1) {
          dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
        }
        if (SCLogScope(void)::scope)
        {
          v125 = *(id *)SCLogScope(void)::scope;
          if (!v125)
          {
LABEL_318:
            v117 = 0;
            goto LABEL_319;
          }
        }
        else
        {
          v125 = MEMORY[0x1E4F14500];
          id v127 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v125, OS_LOG_TYPE_DEFAULT))
        {
          v128 = *v97;
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "AUSpatialCapture.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 438;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = v128;
          _os_log_impl(&dword_1BB0CE000, v125, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Reported latency not supplied for box %s", buf, 0x1Cu);
        }

        goto LABEL_318;
      }
    }
    if (SCLogScope(void)::once != -1) {
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
    }
    if (SCLogScope(void)::scope)
    {
      v117 = *(id *)SCLogScope(void)::scope;
      if (!v117)
      {
        int v103 = 0;
        goto LABEL_320;
      }
    }
    else
    {
      v117 = MEMORY[0x1E4F14500];
      id v118 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v117, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "AUSpatialCapture.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 441;
      _os_log_impl(&dword_1BB0CE000, v117, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to find beamformer box or coefficients dictionary!", buf, 0x12u);
    }
    int v103 = 0;
LABEL_319:

LABEL_320:
    v97 += 2;
  }
  while (v97 != v214);
  operator delete(v202);
  if (v103) {
    unsigned int v212 = 0;
  }
  else {
    unsigned int v212 = -103;
  }
  int v129 = *((_DWORD *)this + 84);
  uint64_t GraphOutput = AUSpatialCapture::GetGraphOutput(this);
  uint64_t v131 = *(void *)(GraphOutput + 64);
  if (*(void *)(GraphOutput + 72) == v131)
  {
    std::string::basic_string[abi:ne180100]<0>(buf, "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(__p, "in");
    v199 = (void *)(GraphOutput + 32);
    if (*(char *)(GraphOutput + 55) < 0) {
      v199 = (void *)*v199;
    }
    DSPGraph::strprintf(__s1, (DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v198, v199, (uint64_t)(*(void *)(GraphOutput + 72) - *(void *)(GraphOutput + 64)) >> 5, 0);
    uint64_t result = DSPGraph::ThrowException();
  }
  else
  {
    v132 = (DSPGraph::Graph **)((char *)this + 808);
    double v133 = **(double **)((*(uint64_t (**)(uint64_t))(*(void *)v131 + 40))(v131) + 120);
    uint64_t v134 = *((void *)this + 101);
    if (SCLogScope(void)::once != -1) {
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
    }
    if (v134)
    {
      if (SCLogScope(void)::scope)
      {
        v135 = *(id *)SCLogScope(void)::scope;
        if (!v135) {
          goto LABEL_338;
        }
      }
      else
      {
        v135 = MEMORY[0x1E4F14500];
        id v137 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v135, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "AUSpatialCapture.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 193;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v129;
        *(_WORD *)&buf[24] = 1024;
        *(_DWORD *)&buf[26] = v133;
        _os_log_impl(&dword_1BB0CE000, v135, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting graph slice timing: max slice duration %u, fs %u", buf, 0x1Eu);
      }

LABEL_338:
      DSPGraph::Graph::setSliceDuration();
      *((unsigned char *)*v132 + 765) = 1;
      if (SCLogScope(void)::once != -1) {
        dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
      }
      if (SCLogScope(void)::scope)
      {
        if (*(unsigned char *)(SCLogScope(void)::scope + 8))
        {
          v138 = *(id *)SCLogScope(void)::scope;
          if (v138)
          {
            v139 = v138;
            if (os_log_type_enabled(v138, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315394;
              *(void *)&uint8_t buf[4] = "AUSpatialCapture.mm";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 198;
              _os_log_impl(&dword_1BB0CE000, v139, OS_LOG_TYPE_DEBUG, "%25s:%-5d Configuring graph", buf, 0x12u);
            }
          }
        }
      }
      DSPGraph::Graph::configure(*v132);
      if (SCLogScope(void)::once != -1) {
        dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
      }
      if (SCLogScope(void)::scope)
      {
        if (*(unsigned char *)(SCLogScope(void)::scope + 8))
        {
          v140 = *(id *)SCLogScope(void)::scope;
          if (v140)
          {
            v141 = v140;
            if (os_log_type_enabled(v140, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315394;
              *(void *)&uint8_t buf[4] = "AUSpatialCapture.mm";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 201;
              _os_log_impl(&dword_1BB0CE000, v141, OS_LOG_TYPE_DEBUG, "%25s:%-5d Initializing graph", buf, 0x12u);
            }
          }
        }
      }
      DSPGraph::Graph::initialize(*v132);
      if (CACFPreferencesGetAppBooleanValue(@"debug_spatial_capture_graph", @"com.apple.coreaudio", 0))
      {
        if (*((char *)this + 847) >= 0) {
          size_t v142 = *((unsigned __int8 *)this + 847);
        }
        else {
          size_t v142 = *((void *)this + 104);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)__p, v142 + 35);
        if ((SBYTE7(v244) & 0x80u) == 0) {
          v143 = __p;
        }
        else {
          v143 = (void **)__p[0];
        }
        if (v142)
        {
          if (*((char *)this + 847) >= 0) {
            v144 = (char *)this + 824;
          }
          else {
            v144 = (char *)*((void *)this + 103);
          }
          memmove(v143, v144, v142);
        }
        strcpy((char *)v143 + v142, "auspatialcapture-graph-printout.txt");
        std::ofstream::basic_ofstream((uint64_t *)buf);
        if (SBYTE7(v244) < 0) {
          operator delete(__p[0]);
        }
        (*(void (**)(DSPGraph::Graph *, uint8_t *, uint64_t, void))(*(void *)*v132 + 24))(*v132, buf, 6, 0);
        if (*((char *)this + 847) >= 0) {
          size_t v145 = *((unsigned __int8 *)this + 847);
        }
        else {
          size_t v145 = *((void *)this + 104);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)__s1, v145 + 36);
        if (__s1[2] >= 0) {
          v146 = __s1;
        }
        else {
          v146 = (uint64_t *)__s1[0];
        }
        if (v145)
        {
          if (*((char *)this + 847) >= 0) {
            v147 = (char *)this + 824;
          }
          else {
            v147 = (char *)*((void *)this + 103);
          }
          memmove(v146, v147, v145);
        }
        strcpy((char *)v146 + v145, "auspatialcapture-graph-decompile.txt");
        std::ofstream::basic_ofstream((uint64_t *)__p);
        if (SHIBYTE(__s1[2]) < 0) {
          operator delete((void *)__s1[0]);
        }
        if (*((char *)this + 847) >= 0) {
          size_t v148 = *((unsigned __int8 *)this + 847);
        }
        else {
          size_t v148 = *((void *)this + 104);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)v236, v148 + 20);
        if ((SBYTE7(v237) & 0x80u) == 0) {
          v149 = v236;
        }
        else {
          v149 = (void **)v236[0];
        }
        if (v148)
        {
          if (*((char *)this + 847) >= 0) {
            v150 = (char *)this + 824;
          }
          else {
            v150 = (char *)*((void *)this + 103);
          }
          memmove(v149, v150, v148);
        }
        strcpy((char *)v149 + v148, "auspatialcapture.dot");
        std::ofstream::basic_ofstream(__s1);
        if (SBYTE7(v237) < 0) {
          operator delete(v236[0]);
        }
        DSPGraph::Graph::decompile();
        DSPGraph::Graph::writeDotFile((uint64_t *)v236, *v132, "AUSpatialCapture");
        if ((SBYTE7(v237) & 0x80u) == 0) {
          v151 = v236;
        }
        else {
          v151 = (void **)v236[0];
        }
        if ((SBYTE7(v237) & 0x80u) == 0) {
          uint64_t v152 = BYTE7(v237);
        }
        else {
          uint64_t v152 = (uint64_t)v236[1];
        }
        v153 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__s1, (uint64_t)v151, v152);
        std::ios_base::getloc((const std::ios_base *)((char *)v153 + *(void *)(*v153 - 24)));
        v154 = std::locale::use_facet((const std::locale *)&v235, MEMORY[0x1E4FBA258]);
        ((void (*)(const std::locale::facet *, uint64_t))v154->__vftable[2].~facet_0)(v154, 10);
        std::locale::~locale((std::locale *)&v235);
        std::ostream::put();
        std::ostream::flush();
        if (SBYTE7(v237) < 0) {
          operator delete(v236[0]);
        }
        __s1[0] = *MEMORY[0x1E4FBA400];
        v155 = (void *)__s1[0];
        v156 = *(void **)(MEMORY[0x1E4FBA400] + 24);
        *(uint64_t *)((char *)__s1 + *(void *)(__s1[0] - 24)) = (uint64_t)v156;
        MEMORY[0x1C185CC40](&__s1[1]);
        std::ostream::~ostream();
        MEMORY[0x1C185D210](&v242);
        __p[0] = v155;
        *(void **)((char *)__p + *((void *)v155 - 3)) = v156;
        MEMORY[0x1C185CC40](&__p[1]);
        std::ostream::~ostream();
        MEMORY[0x1C185D210](&v247);
        *(void *)buf = v155;
        *(void *)&buf[*((void *)v155 - 3)] = v156;
        MEMORY[0x1C185CC40](&buf[8]);
        std::ostream::~ostream();
        MEMORY[0x1C185D210](v251);
      }
    }
    else
    {
      if (SCLogScope(void)::scope)
      {
        v136 = *(id *)SCLogScope(void)::scope;
        if (!v136) {
          goto LABEL_407;
        }
      }
      else
      {
        v136 = MEMORY[0x1E4F14500];
        id v157 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v136, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "AUSpatialCapture.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 217;
        _os_log_impl(&dword_1BB0CE000, v136, OS_LOG_TYPE_ERROR, "%25s:%-5d Graph is null", buf, 0x12u);
      }
    }
LABEL_407:
    ZoomCurveValue::ApplyToGraph((uint64_t)this + 904, v132);
    atomic_fetch_add((atomic_uint *volatile)this + 148, 1u);
    if (SCLogScope(void)::once != -1) {
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
    }
    if (SCLogScope(void)::scope)
    {
      if (*(unsigned char *)(SCLogScope(void)::scope + 8))
      {
        id v158 = *(id *)SCLogScope(void)::scope;
        if (v158)
        {
          v159 = v158;
          if (os_log_type_enabled(v159, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "AUSpatialCapture.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 311;
            _os_log_impl(&dword_1BB0CE000, v159, OS_LOG_TYPE_DEBUG, "%25s:%-5d Updating parameters", buf, 0x12u);
          }
        }
      }
    }
    if (!*v132)
    {
      if (SCLogScope(void)::once != -1) {
        dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
      }
      if (SCLogScope(void)::scope)
      {
        v179 = *(id *)SCLogScope(void)::scope;
        if (!v179) {
          goto LABEL_458;
        }
      }
      else
      {
        v179 = MEMORY[0x1E4F14500];
        id v180 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v179, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "AUSpatialCapture.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1036;
        _os_log_impl(&dword_1BB0CE000, v179, OS_LOG_TYPE_ERROR, "%25s:%-5d !mGraph", buf, 0x12u);
      }

      goto LABEL_458;
    }
    ParameterMap = (void *)AUSpatialCapture::GetParameterMap(this);
    v161 = ParameterMap + 1;
    v162 = (void *)*ParameterMap;
    if ((void *)*ParameterMap != ParameterMap + 1)
    {
      v163 = MEMORY[0x1E4F14500];
      while (1)
      {
        char v164 = 0;
        int v165 = 0;
        v166 = (_DWORD *)*v210;
        char v167 = 1;
        do
        {
          char v168 = v167;
          v169 = *obja;
          if (*obja != v166)
          {
            while (*v169 != v165)
            {
              if (++v169 == v166)
              {
                v169 = (_DWORD *)*v210;
                break;
              }
            }
          }
          if (v169 == v166)
          {
            BOOL v172 = 0;
          }
          else
          {
            v171 = (_DWORD *)v162[21];
            v170 = (_DWORD *)v162[22];
            if (v171 != v170)
            {
              while (*v171 != v165)
              {
                if (++v171 == v170)
                {
                  v171 = (_DWORD *)v162[22];
                  break;
                }
              }
            }
            BOOL v172 = v171 != v170;
          }
          char v167 = 0;
          v164 |= v172;
          int v165 = 1;
        }
        while ((v168 & 1) != 0);
        if (v164 & 1) == 0 || (DSPGraph::Graph::hasParameter(*v132)) {
          goto LABEL_442;
        }
        if (SCLogScope(void)::once != -1) {
          dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
        }
        if (!SCLogScope(void)::scope) {
          break;
        }
        v173 = *(id *)SCLogScope(void)::scope;
        if (v173) {
          goto LABEL_439;
        }
LABEL_442:
        v176 = (void *)v162[1];
        if (v176)
        {
          do
          {
            v177 = v176;
            v176 = (void *)*v176;
          }
          while (v176);
        }
        else
        {
          do
          {
            v177 = (void *)v162[2];
            BOOL v178 = *v177 == (void)v162;
            v162 = v177;
          }
          while (!v178);
        }
        v162 = v177;
        if (v177 == v161) {
          goto LABEL_458;
        }
      }
      v174 = v163;
      v173 = v163;
LABEL_439:
      if (os_log_type_enabled(v173, OS_LOG_TYPE_ERROR))
      {
        int v175 = *((_DWORD *)v162 + 8);
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "AUSpatialCapture.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1032;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v175;
        _os_log_impl(&dword_1BB0CE000, v173, OS_LOG_TYPE_ERROR, "%25s:%-5d param %i not found in graph", buf, 0x18u);
      }

      goto LABEL_442;
    }
LABEL_458:
    AUSpatialCapture::ApplyParametersToGraphAndGetDidCameraDirectionChange(this);
    if (SCLogScope(void)::once != -1) {
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
    }
    if (SCLogScope(void)::scope)
    {
      if (*(unsigned char *)(SCLogScope(void)::scope + 8))
      {
        id v181 = *(id *)SCLogScope(void)::scope;
        if (v181)
        {
          v182 = v181;
          if (os_log_type_enabled(v182, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "AUSpatialCapture.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 315;
            _os_log_impl(&dword_1BB0CE000, v182, OS_LOG_TYPE_DEBUG, "%25s:%-5d Updating stream formats", buf, 0x12u);
          }
        }
      }
    }
    uint64_t v183 = 0;
    do
    {
      if (AUSpatialCapture::GetGraphInput(this, v183))
      {
        uint64_t v184 = ausdk::AUScope::SafeGetElement((AUSpatialCapture *)((char *)this + 80), v183);
        uint64_t GraphInput = AUSpatialCapture::GetGraphInput(this, v183);
        uint64_t v186 = *(void *)(GraphInput + 88);
        if (*(void *)(GraphInput + 96) == v186)
        {
          std::string::basic_string[abi:ne180100]<0>(buf, "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
          std::string::basic_string[abi:ne180100]<0>(__p, "out");
          v197 = (void *)(GraphInput + 32);
          if (*(char *)(GraphInput + 55) < 0) {
            v197 = (void *)*v197;
          }
          DSPGraph::strprintf(__s1, (DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v196, v197, (uint64_t)(*(void *)(GraphInput + 96) - *(void *)(GraphInput + 88)) >> 5, 0);
          uint64_t result = DSPGraph::ThrowException();
          goto LABEL_497;
        }
        uint64_t v187 = (*(uint64_t (**)(uint64_t))(*(void *)v186 + 40))(v186);
        (*(void (**)(uint64_t, void))(*(void *)v184 + 56))(v184, *(void *)(v187 + 120));
        (*(void (**)(AUSpatialCapture *, uint64_t, uint64_t, uint64_t))(*(void *)this + 432))(this, 8, 1, v183);
      }
      uint64_t v183 = (v183 + 1);
    }
    while (v183 != 3);
    if (!AUSpatialCapture::GetGraphOutput(this))
    {
LABEL_474:
      if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v227.__r_.__value_.__l.__data_);
      }

      goto LABEL_477;
    }
    uint64_t v188 = ausdk::AUScope::SafeGetElement((AUSpatialCapture *)((char *)this + 128), 0);
    uint64_t v189 = AUSpatialCapture::GetGraphOutput(this);
    uint64_t v190 = *(void *)(v189 + 64);
    if (*(void *)(v189 + 72) != v190)
    {
      uint64_t v191 = (*(uint64_t (**)(uint64_t))(*(void *)v190 + 40))(v190);
      (*(void (**)(uint64_t, void))(*(void *)v188 + 56))(v188, *(void *)(v191 + 120));
      (*(void (**)(AUSpatialCapture *, uint64_t, uint64_t, void))(*(void *)this + 432))(this, 8, 2, 0);
      goto LABEL_474;
    }
    std::string::basic_string[abi:ne180100]<0>(buf, "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(__p, "in");
    v201 = (void *)(v189 + 32);
    if (*(char *)(v189 + 55) < 0) {
      v201 = (void *)*v201;
    }
    DSPGraph::strprintf(__s1, (DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v200, v201, (uint64_t)(*(void *)(v189 + 72) - *(void *)(v189 + 64)) >> 5, 0);
    uint64_t result = DSPGraph::ThrowException();
  }
LABEL_497:
  __break(1u);
  return result;
}

void sub_1BB46D81C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t AUSpatialCapture::SetAudioChannelLayoutFromTuning(AUSpatialCapture *this, const __CFDictionary *a2)
{
  MEMORY[0x1F4188790](this);
  uint64_t v3 = v2;
  uint64_t v493 = *MEMORY[0x1E4F143B8];
  id v5 = v4;
  id v6 = [v5 objectForKeyedSubscript:@"outputChannelLayout"];

  CFPropertyListRef v7 = (unsigned char *)(&xmmword_1E9F7EFF8 + 8);
  int v8 = (unsigned char *)(&xmmword_1E9F7EFF8 + 8);
  if (!v6) {
    goto LABEL_108;
  }
  id v9 = [v5 objectForKeyedSubscript:@"outputChannelLayout"];
  std::string::basic_string[abi:ne180100]<0>(&__str, (char *)[v9 UTF8String]);
  long long v69 = v9;
  std::string::basic_string[abi:ne180100]<0>(buf, "Mono");
  *(_DWORD *)&v86[10] = 6553601;
  id v70 = v5;
  std::string::basic_string[abi:ne180100]<0>(&v88[1], "Stereo");
  int v89 = 6619138;
  std::string::basic_string[abi:ne180100]<0>(&v90, "StereoHeadphones");
  int v92 = 6684674;
  std::string::basic_string[abi:ne180100]<0>(&v93, "MatrixStereo");
  int v94 = 6750210;
  std::string::basic_string[abi:ne180100]<0>(v95, "MidSide");
  int v96 = 6815746;
  std::string::basic_string[abi:ne180100]<0>(v97, "XY");
  int v98 = 6881282;
  std::string::basic_string[abi:ne180100]<0>(v99, "Binaural");
  int v100 = 6946818;
  std::string::basic_string[abi:ne180100]<0>(v101, "Ambisonic_B_Format");
  int v102 = 7012356;
  std::string::basic_string[abi:ne180100]<0>(v103, "Quadraphonic");
  int v104 = 7077892;
  std::string::basic_string[abi:ne180100]<0>(v105, "Pentagonal");
  int v106 = 7143429;
  std::string::basic_string[abi:ne180100]<0>(v107, "Hexagonal");
  uint64_t v68 = v3;
  int v108 = 7208966;
  std::string::basic_string[abi:ne180100]<0>(v109, "Octagonal");
  int v110 = 7274504;
  std::string::basic_string[abi:ne180100]<0>(v111, "Cube");
  int v112 = 7340040;
  std::string::basic_string[abi:ne180100]<0>(v113, "MPEG_1_0");
  int v114 = 6553601;
  std::string::basic_string[abi:ne180100]<0>(v115, "MPEG_2_0");
  int v116 = 6619138;
  std::string::basic_string[abi:ne180100]<0>(v117, "MPEG_3_0_A");
  int v118 = 7405571;
  std::string::basic_string[abi:ne180100]<0>(v119, "MPEG_3_0_B");
  int v120 = 7471107;
  std::string::basic_string[abi:ne180100]<0>(v121, "MPEG_4_0_A");
  int v122 = 7536644;
  std::string::basic_string[abi:ne180100]<0>(v123, "MPEG_4_0_B");
  int v124 = 7602180;
  std::string::basic_string[abi:ne180100]<0>(v125, "MPEG_5_0_A");
  int v126 = 7667717;
  std::string::basic_string[abi:ne180100]<0>(v127, "MPEG_5_0_B");
  int v128 = 7733253;
  std::string::basic_string[abi:ne180100]<0>(v129, "MPEG_5_0_C");
  int v130 = 7798789;
  std::string::basic_string[abi:ne180100]<0>(v131, "MPEG_5_0_D");
  int v132 = 7864325;
  std::string::basic_string[abi:ne180100]<0>(v133, "MPEG_5_1_A");
  int v134 = 7929862;
  std::string::basic_string[abi:ne180100]<0>(v135, "MPEG_5_1_B");
  int v136 = 7995398;
  std::string::basic_string[abi:ne180100]<0>(v137, "MPEG_5_1_C");
  int v138 = 8060934;
  std::string::basic_string[abi:ne180100]<0>(v139, "MPEG_5_1_D");
  int v140 = 8126470;
  std::string::basic_string[abi:ne180100]<0>(v141, "MPEG_6_1_A");
  int v142 = 8192007;
  std::string::basic_string[abi:ne180100]<0>(v143, "MPEG_7_1_A");
  int v144 = 8257544;
  std::string::basic_string[abi:ne180100]<0>(v145, "MPEG_7_1_B");
  int v146 = 8323080;
  std::string::basic_string[abi:ne180100]<0>(v147, "MPEG_7_1_C");
  int v148 = 8388616;
  std::string::basic_string[abi:ne180100]<0>(v149, "Emagic_Default_7_1");
  int v150 = 8454152;
  std::string::basic_string[abi:ne180100]<0>(v151, "SMPTE_DTV");
  int v152 = 8519688;
  std::string::basic_string[abi:ne180100]<0>(v153, "ITU_1_0");
  int v154 = 6553601;
  std::string::basic_string[abi:ne180100]<0>(v155, "ITU_2_0");
  int v156 = 6619138;
  std::string::basic_string[abi:ne180100]<0>(v157, "ITU_2_1");
  int v158 = 8585219;
  std::string::basic_string[abi:ne180100]<0>(v159, "ITU_2_2");
  int v160 = 8650756;
  std::string::basic_string[abi:ne180100]<0>(v161, "ITU_3_0");
  int v162 = 7405571;
  std::string::basic_string[abi:ne180100]<0>(v163, "ITU_3_1");
  int v164 = 7536644;
  std::string::basic_string[abi:ne180100]<0>(v165, "ITU_3_2");
  int v166 = 7667717;
  std::string::basic_string[abi:ne180100]<0>(v167, "ITU_3_2_1");
  int v168 = 7929862;
  std::string::basic_string[abi:ne180100]<0>(v169, "ITU_3_4_1");
  int v170 = 8388616;
  std::string::basic_string[abi:ne180100]<0>(v171, "DVD_0");
  int v172 = 6553601;
  std::string::basic_string[abi:ne180100]<0>(v173, "DVD_1");
  int v174 = 6619138;
  std::string::basic_string[abi:ne180100]<0>(v175, "DVD_2");
  int v176 = 8585219;
  std::string::basic_string[abi:ne180100]<0>(v177, "DVD_3");
  int v178 = 8650756;
  std::string::basic_string[abi:ne180100]<0>(v179, "DVD_4");
  int v180 = 8716291;
  std::string::basic_string[abi:ne180100]<0>(v181, "DVD_5");
  int v182 = 8781828;
  std::string::basic_string[abi:ne180100]<0>(v183, "DVD_6");
  int v184 = 8847365;
  std::string::basic_string[abi:ne180100]<0>(v185, "DVD_7");
  int v186 = 7405571;
  std::string::basic_string[abi:ne180100]<0>(v187, "DVD_8");
  int v188 = 7536644;
  std::string::basic_string[abi:ne180100]<0>(v189, "DVD_9");
  int v190 = 7667717;
  std::string::basic_string[abi:ne180100]<0>(v191, "DVD_10");
  int v192 = 8912900;
  std::string::basic_string[abi:ne180100]<0>(v193, "DVD_11");
  int v194 = 8978437;
  std::string::basic_string[abi:ne180100]<0>(v195, "DVD_12");
  int v196 = 7929862;
  std::string::basic_string[abi:ne180100]<0>(v197, "DVD_13");
  int v198 = 7536644;
  std::string::basic_string[abi:ne180100]<0>(v199, "DVD_14");
  int v200 = 7667717;
  std::string::basic_string[abi:ne180100]<0>(v201, "DVD_15");
  int v202 = 8912900;
  std::string::basic_string[abi:ne180100]<0>(v203, "DVD_16");
  int v204 = 8978437;
  std::string::basic_string[abi:ne180100]<0>(v205, "DVD_17");
  int v206 = 7929862;
  std::string::basic_string[abi:ne180100]<0>(v207, "DVD_18");
  int v208 = 9043973;
  std::string::basic_string[abi:ne180100]<0>(v209, "DVD_19");
  int v210 = 7733253;
  std::string::basic_string[abi:ne180100]<0>(v211, "DVD_20");
  int v212 = 7995398;
  std::string::basic_string[abi:ne180100]<0>(v213, "AudioUnit_4");
  int v214 = 7077892;
  std::string::basic_string[abi:ne180100]<0>(v215, "AudioUnit_5");
  int v216 = 7143429;
  std::string::basic_string[abi:ne180100]<0>(v217, "AudioUnit_6");
  int v218 = 7208966;
  std::string::basic_string[abi:ne180100]<0>(v219, "AudioUnit_8");
  int v220 = 7274504;
  std::string::basic_string[abi:ne180100]<0>(v221, "AudioUnit_5_0");
  int v222 = 7733253;
  std::string::basic_string[abi:ne180100]<0>(v223, "AudioUnit_6_0");
  int v224 = 9109510;
  std::string::basic_string[abi:ne180100]<0>(v225, "AudioUnit_7_0");
  int v226 = 9175047;
  std::string::basic_string[abi:ne180100]<0>(v227, "AudioUnit_7_0_Front");
  int v228 = 9699335;
  std::string::basic_string[abi:ne180100]<0>(v229, "AudioUnit_5_1");
  int v230 = 7929862;
  std::string::basic_string[abi:ne180100]<0>(v231, "AudioUnit_6_1");
  int v232 = 8192007;
  std::string::basic_string[abi:ne180100]<0>(v233, "AudioUnit_7_1");
  int v234 = 8388616;
  std::string::basic_string[abi:ne180100]<0>(v235, "AudioUnit_7_1_Front");
  int v236 = 8257544;
  std::string::basic_string[abi:ne180100]<0>(v237, "AAC_3_0");
  int v238 = 7471107;
  std::string::basic_string[abi:ne180100]<0>(v239, "AAC_Quadraphonic");
  int v240 = 7077892;
  std::string::basic_string[abi:ne180100]<0>(v241, "AAC_4_0");
  int v242 = 7602180;
  std::string::basic_string[abi:ne180100]<0>(v243, "AAC_5_0");
  int v244 = 7864325;
  std::string::basic_string[abi:ne180100]<0>(v245, "AAC_5_1");
  int v246 = 8126470;
  std::string::basic_string[abi:ne180100]<0>(v247, "AAC_6_0");
  int v248 = 9240582;
  std::string::basic_string[abi:ne180100]<0>(v249, "AAC_6_1");
  int v250 = 9306119;
  std::string::basic_string[abi:ne180100]<0>(v251, "AAC_7_0");
  int v252 = 9371655;
  std::string::basic_string[abi:ne180100]<0>(v253, "AAC_7_1");
  int v254 = 8323080;
  std::string::basic_string[abi:ne180100]<0>(v255, "AAC_7_1_B");
  int v256 = 11993096;
  std::string::basic_string[abi:ne180100]<0>(v257, "AAC_7_1_C");
  int v258 = 12058632;
  std::string::basic_string[abi:ne180100]<0>(v259, "AAC_Octagonal");
  int v260 = 9437192;
  std::string::basic_string[abi:ne180100]<0>(v261, "TMH_10_2_std");
  int v262 = 9502736;
  std::string::basic_string[abi:ne180100]<0>(v263, "TMH_10_2_full");
  int v264 = 9568277;
  std::string::basic_string[abi:ne180100]<0>(v265, "AC3_1_0_1");
  int v266 = 9764866;
  std::string::basic_string[abi:ne180100]<0>(v267, "AC3_3_0");
  int v268 = 9830403;
  std::string::basic_string[abi:ne180100]<0>(v269, "AC3_3_1");
  int v270 = 9895940;
  std::string::basic_string[abi:ne180100]<0>(v271, "AC3_3_0_1");
  int v272 = 9961476;
  std::string::basic_string[abi:ne180100]<0>(v273, "AC3_2_1_1");
  int v274 = 10027012;
  std::string::basic_string[abi:ne180100]<0>(v275, "AC3_3_1_1");
  int v276 = 10092549;
  std::string::basic_string[abi:ne180100]<0>(v277, "EAC_6_0_A");
  int v278 = 10158086;
  std::string::basic_string[abi:ne180100]<0>(v279, "EAC_7_0_A");
  int v280 = 10223623;
  std::string::basic_string[abi:ne180100]<0>(v281, "EAC3_6_1_A");
  int v282 = 10289159;
  std::string::basic_string[abi:ne180100]<0>(v283, "EAC3_6_1_B");
  int v284 = 10354695;
  std::string::basic_string[abi:ne180100]<0>(v285, "EAC3_6_1_C");
  int v286 = 10420231;
  std::string::basic_string[abi:ne180100]<0>(v287, "EAC3_7_1_A");
  int v288 = 10485768;
  std::string::basic_string[abi:ne180100]<0>(v289, "EAC3_7_1_B");
  int v290 = 10551304;
  std::string::basic_string[abi:ne180100]<0>(v291, "EAC3_7_1_C");
  int v292 = 10616840;
  std::string::basic_string[abi:ne180100]<0>(v293, "EAC3_7_1_D");
  int v294 = 10682376;
  std::string::basic_string[abi:ne180100]<0>(v295, "EAC3_7_1_E");
  int v296 = 10747912;
  std::string::basic_string[abi:ne180100]<0>(v297, "EAC3_7_1_F");
  int v298 = 10813448;
  std::string::basic_string[abi:ne180100]<0>(v299, "EAC3_7_1_G");
  int v300 = 10878984;
  std::string::basic_string[abi:ne180100]<0>(v301, "EAC3_7_1_H");
  int v302 = 10944520;
  std::string::basic_string[abi:ne180100]<0>(v303, "DTS_3_1");
  int v304 = 11010052;
  std::string::basic_string[abi:ne180100]<0>(v305, "DTS_4_1");
  int v306 = 11075589;
  std::string::basic_string[abi:ne180100]<0>(v307, "DTS_6_0_A");
  int v308 = 11141126;
  std::string::basic_string[abi:ne180100]<0>(v309, "DTS_6_0_B");
  int v310 = 11206662;
  std::string::basic_string[abi:ne180100]<0>(v311, "DTS_6_0_C");
  int v312 = 11272198;
  std::string::basic_string[abi:ne180100]<0>(v313, "DTS_6_1_A");
  int v314 = 11337735;
  std::string::basic_string[abi:ne180100]<0>(v315, "DTS_6_1_B");
  int v316 = 11403271;
  std::string::basic_string[abi:ne180100]<0>(v317, "DTS_6_1_C");
  int v318 = 11468807;
  std::string::basic_string[abi:ne180100]<0>(v319, "DTS_7_0");
  int v320 = 11534343;
  std::string::basic_string[abi:ne180100]<0>(v321, "DTS_7_1");
  int v322 = 11599880;
  std::string::basic_string[abi:ne180100]<0>(v323, "DTS_8_0_A");
  int v324 = 11665416;
  std::string::basic_string[abi:ne180100]<0>(v325, "DTS_8_0_B");
  int v326 = 11730952;
  std::string::basic_string[abi:ne180100]<0>(v327, "DTS_8_1_A");
  int v328 = 11796489;
  std::string::basic_string[abi:ne180100]<0>(v329, "DTS_8_1_B");
  int v330 = 11862025;
  std::string::basic_string[abi:ne180100]<0>(v331, "DTS_6_1_D");
  int v332 = 11927559;
  std::string::basic_string[abi:ne180100]<0>(v333, "WAVE_2_1");
  int v334 = 8716291;
  std::string::basic_string[abi:ne180100]<0>(v335, "WAVE_3_0");
  int v336 = 7405571;
  std::string::basic_string[abi:ne180100]<0>(v337, "WAVE_4_0_A");
  int v338 = 8650756;
  std::string::basic_string[abi:ne180100]<0>(v339, "WAVE_4_0_B");
  int v340 = 12124164;
  std::string::basic_string[abi:ne180100]<0>(v341, "WAVE_5_0_A");
  int v342 = 7667717;
  std::string::basic_string[abi:ne180100]<0>(v343, "WAVE_5_0_B");
  int v344 = 12189701;
  std::string::basic_string[abi:ne180100]<0>(v345, "WAVE_5_1_A");
  int v346 = 7929862;
  std::string::basic_string[abi:ne180100]<0>(v347, "WAVE_5_1_B");
  int v348 = 12255238;
  std::string::basic_string[abi:ne180100]<0>(v349, "WAVE_6_1");
  int v350 = 12320775;
  std::string::basic_string[abi:ne180100]<0>(v351, "WAVE_7_1");
  int v352 = 12386312;
  std::string::basic_string[abi:ne180100]<0>(v353, "Atmos_5_1_2");
  int v354 = 12713992;
  std::string::basic_string[abi:ne180100]<0>(v355, "Atmos_5_1_4");
  int v356 = 12779530;
  std::string::basic_string[abi:ne180100]<0>(v357, "Atmos_7_1_2");
  int v358 = 12845066;
  std::string::basic_string[abi:ne180100]<0>(v359, "Atmos_7_1_4");
  int v360 = 12582924;
  std::string::basic_string[abi:ne180100]<0>(v361, "Atmos_9_1_6");
  int v362 = 12648464;
  std::string::basic_string[abi:ne180100]<0>(v363, "Logic_Mono");
  int v364 = 6553601;
  std::string::basic_string[abi:ne180100]<0>(v365, "Logic_Stereo");
  int v366 = 6619138;
  std::string::basic_string[abi:ne180100]<0>(v367, "Logic_Quadraphonic");
  int v368 = 7077892;
  std::string::basic_string[abi:ne180100]<0>(v369, "Logic_4_0_A");
  int v370 = 7536644;
  std::string::basic_string[abi:ne180100]<0>(v371, "Logic_4_0_B");
  int v372 = 7602180;
  std::string::basic_string[abi:ne180100]<0>(v373, "Logic_4_0_C");
  int v374 = 12910596;
  std::string::basic_string[abi:ne180100]<0>(v375, "Logic_5_0_A");
  int v376 = 7667717;
  std::string::basic_string[abi:ne180100]<0>(v377, "Logic_5_0_B");
  int v378 = 7733253;
  std::string::basic_string[abi:ne180100]<0>(v379, "Logic_5_0_C");
  int v380 = 7798789;
  std::string::basic_string[abi:ne180100]<0>(v381, "Logic_5_0_D");
  int v382 = 7864325;
  std::string::basic_string[abi:ne180100]<0>(v383, "Logic_5_1_A");
  int v384 = 7929862;
  std::string::basic_string[abi:ne180100]<0>(v385, "Logic_5_1_B");
  int v386 = 7995398;
  std::string::basic_string[abi:ne180100]<0>(v387, "Logic_5_1_C");
  int v388 = 8060934;
  std::string::basic_string[abi:ne180100]<0>(v389, "Logic_5_1_D");
  int v390 = 8126470;
  std::string::basic_string[abi:ne180100]<0>(v391, "Logic_6_0_A");
  int v392 = 9240582;
  std::string::basic_string[abi:ne180100]<0>(v393, "Logic_6_0_B");
  int v394 = 12976134;
  std::string::basic_string[abi:ne180100]<0>(v395, "Logic_6_0_C");
  int v396 = 9109510;
  std::string::basic_string[abi:ne180100]<0>(v397, "Logic_6_1_A");
  int v398 = 9306119;
  std::string::basic_string[abi:ne180100]<0>(v399, "Logic_6_1_B");
  int v400 = 13041671;
  std::string::basic_string[abi:ne180100]<0>(v401, "Logic_6_1_C");
  int v402 = 8192007;
  std::string::basic_string[abi:ne180100]<0>(v403, "Logic_6_1_D");
  int v404 = 13107207;
  std::string::basic_string[abi:ne180100]<0>(v405, "Logic_7_1_A");
  int v406 = 8388616;
  std::string::basic_string[abi:ne180100]<0>(v407, "Logic_7_1_B");
  int v408 = 13172744;
  std::string::basic_string[abi:ne180100]<0>(v409, "Logic_7_1_C");
  int v410 = 8388616;
  std::string::basic_string[abi:ne180100]<0>(v411, "Logic_7_1_SDDS_A");
  int v412 = 8257544;
  std::string::basic_string[abi:ne180100]<0>(v413, "Logic_7_1_SDDS_B");
  int v414 = 8323080;
  std::string::basic_string[abi:ne180100]<0>(v415, "Logic_7_1_SDDS_C");
  int v416 = 8454152;
  std::string::basic_string[abi:ne180100]<0>(v417, "Logic_Atmos_5_1_2");
  int v418 = 12713992;
  std::string::basic_string[abi:ne180100]<0>(v419, "Logic_Atmos_5_1_4");
  int v420 = 12779530;
  std::string::basic_string[abi:ne180100]<0>(v421, "Logic_Atmos_7_1_2");
  int v422 = 12845066;
  std::string::basic_string[abi:ne180100]<0>(v423, "Logic_Atmos_7_1_4_A");
  int v424 = 12582924;
  std::string::basic_string[abi:ne180100]<0>(v425, "Logic_Atmos_7_1_4_B");
  int v426 = 13238284;
  std::string::basic_string[abi:ne180100]<0>(v427, "Logic_Atmos_7_1_6");
  int v428 = 13303822;
  std::string::basic_string[abi:ne180100]<0>(v429, "CICP_1");
  int v430 = 6553601;
  std::string::basic_string[abi:ne180100]<0>(v431, "CICP_2");
  int v432 = 6619138;
  std::string::basic_string[abi:ne180100]<0>(v433, "CICP_3");
  int v434 = 7405571;
  std::string::basic_string[abi:ne180100]<0>(v435, "CICP_4");
  int v436 = 7536644;
  std::string::basic_string[abi:ne180100]<0>(v437, "CICP_5");
  int v438 = 7667717;
  std::string::basic_string[abi:ne180100]<0>(v439, "CICP_6");
  int v440 = 7929862;
  std::string::basic_string[abi:ne180100]<0>(v441, "CICP_7");
  int v442 = 8323080;
  std::string::basic_string[abi:ne180100]<0>(v443, "CICP_9");
  int v444 = 8585219;
  std::string::basic_string[abi:ne180100]<0>(v445, "CICP_10");
  int v8 = (unsigned char *)(&xmmword_1E9F7EFF8 + 8);
  CFPropertyListRef v7 = (unsigned char *)(&xmmword_1E9F7EFF8 + 8);
  int v446 = 8650756;
  std::string::basic_string[abi:ne180100]<0>(v447, "CICP_11");
  int v448 = 8192007;
  std::string::basic_string[abi:ne180100]<0>(v449, "CICP_12");
  int v450 = 8388616;
  std::string::basic_string[abi:ne180100]<0>(v451, "CICP_13");
  int v452 = 13369368;
  std::string::basic_string[abi:ne180100]<0>(v453, "CICP_14");
  int v454 = 13434888;
  std::string::basic_string[abi:ne180100]<0>(v455, "CICP_15");
  int v456 = 13500428;
  std::string::basic_string[abi:ne180100]<0>(v457, "CICP_16");
  int v458 = 13565962;
  std::string::basic_string[abi:ne180100]<0>(v459, "CICP_17");
  int v460 = 13631500;
  std::string::basic_string[abi:ne180100]<0>(v461, "CICP_18");
  int v462 = 13697038;
  std::string::basic_string[abi:ne180100]<0>(v463, "CICP_19");
  int v464 = 13762572;
  std::string::basic_string[abi:ne180100]<0>(v465, "CICP_20");
  int v466 = 13828110;
  std::string::basic_string[abi:ne180100]<0>(v467, "Ogg_3_0");
  int v468 = 9830403;
  std::string::basic_string[abi:ne180100]<0>(v469, "Ogg_4_0");
  int v470 = 12124164;
  std::string::basic_string[abi:ne180100]<0>(v471, "Ogg_5_0");
  int v472 = 13893637;
  std::string::basic_string[abi:ne180100]<0>(v473, "Ogg_5_1");
  int v474 = 13959174;
  std::string::basic_string[abi:ne180100]<0>(v475, "Ogg_6_1");
  int v476 = 14024711;
  std::string::basic_string[abi:ne180100]<0>(v477, "Ogg_7_1");
  int v478 = 14090248;
  std::string::basic_string[abi:ne180100]<0>(v479, "MPEG_5_0_E");
  int v480 = 14155781;
  std::string::basic_string[abi:ne180100]<0>(v481, "MPEG_5_1_E");
  int v482 = 14221318;
  std::string::basic_string[abi:ne180100]<0>(v483, "MPEG_6_1_B");
  int v484 = 14286855;
  std::string::basic_string[abi:ne180100]<0>(v485, "MPEG_7_1_D");
  int v486 = 14352392;
  std::string::basic_string[abi:ne180100]<0>(v487, "BeginReserved");
  int v488 = -268435456;
  std::string::basic_string[abi:ne180100]<0>(v489, "EndReserved");
  int v490 = -65537;
  std::string::basic_string[abi:ne180100]<0>(v491, "Unknown");
  int v492 = -65536;
  std::map<std::string,unsigned int>::map[abi:ne180100]((uint64_t)v82, (long long *)buf, 203);
  for (uint64_t i = 0; i != -812; i -= 4)
  {
    if (SHIBYTE(v491[i + 2]) < 0) {
      operator delete((void *)v491[i]);
    }
  }
  int v81 = -65536;
  id v11 = v83[0];
  if (v83[0])
  {
    char v12 = v83;
    do
    {
      uint64_t v13 = v12;
      float v14 = v11 + 32;
      int v15 = (char)std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v11 + 4, (void **)&__str.__r_.__value_.__l.__data_);
      if (v15 >= 0) {
        id v16 = v11;
      }
      else {
        id v16 = v11 + 8;
      }
      if (v15 >= 0) {
        char v12 = (char **)v11;
      }
      else {
        char v12 = v13;
      }
      id v11 = *(char **)v16;
    }
    while (*(void *)v16);
    if (v12 != v83)
    {
      std::string::size_type v17 = v15 >= 0 ? (void **)v14 : (void **)(v13 + 4);
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__str, v17) & 0x80) == 0)
      {
        uint64_t v18 = *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>((uint64_t)v82, buf, (void **)&__str.__r_.__value_.__l.__data_);
        if (!v18) {
          std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
        }
        id v19 = (int *)(v18 + 56);
        uint64_t v3 = v68;
        goto LABEL_105;
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "HOA_ACN_SN3D");
  *(_DWORD *)&v86[10] = 12451840;
  std::string::basic_string[abi:ne180100]<0>(&v88[1], "HOA_ACN_N3D");
  int v89 = 12517376;
  std::map<std::string,unsigned int>::map[abi:ne180100]((uint64_t)&v79, (long long *)buf, 2);
  for (uint64_t j = 0; j != -32; j -= 16)
  {
    if (SHIBYTE(v88[j + 12]) < 0) {
      operator delete(*(void **)&v88[j + 1]);
    }
  }
  id v21 = v79;
  char v22 = (void *)MEMORY[0x1E4FBA410];
  if (v79 == v80)
  {
    int v73 = -65536;
    goto LABEL_68;
  }
  uint64_t v72 = *MEMORY[0x1E4FBA410];
  uint64_t v23 = &v86[2];
  uint64_t v71 = *(void *)(MEMORY[0x1E4FBA410] + 24);
  int v73 = -65536;
  do
  {
    std::string::size_type v24 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_str = &__str;
    }
    else {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int64_t size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      int64_t size = __str.__r_.__value_.__l.__size_;
    }
    int v27 = *((char *)v21 + 55);
    if (v27 >= 0) {
      int v28 = (char *)(v21 + 4);
    }
    else {
      int v28 = v21[4];
    }
    if (v27 >= 0) {
      int64_t v29 = *((unsigned __int8 *)v21 + 55);
    }
    else {
      int64_t v29 = (int64_t)v21[5];
    }
    if (!v29)
    {
LABEL_51:
      int v38 = *((_DWORD *)v21 + 14);
      int v81 = v38;
      if ((v24 & 0x80u) == 0) {
        std::string::size_type v39 = v24;
      }
      else {
        std::string::size_type v39 = __str.__r_.__value_.__l.__size_;
      }
      std::string::basic_string(&v77, &__str, v29, v39, (std::allocator<char> *)buf);
      LODWORD(v76.__r_.__value_.__l.__data_) = 0;
      std::istringstream::basic_istringstream[abi:ne180100]((uint64_t)buf, &v77);
      MEMORY[0x1C185CC80](buf, &v76);
      int v40 = *(_DWORD *)((char *)&v88[1] + *(void *)(*(void *)buf - 24));
      *(void *)buf = v72;
      *(void *)&buf[*(void *)(v72 - 24)] = v71;
      *(void *)&v86[2] = MEMORY[0x1E4FBA470] + 16;
      if (SHIBYTE(v93) < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::istream::~istream();
      MEMORY[0x1C185D210](&v94);
      int v41 = ((LODWORD(v76.__r_.__value_.__l.__data_) + 1) * (LODWORD(v76.__r_.__value_.__l.__data_) + 1)) | v38;
      if ((v40 & 5) != 0) {
        int v41 = -65536;
      }
      int v73 = v41;
      int v81 = v41;
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v77.__r_.__value_.__l.__data_);
      }
      goto LABEL_60;
    }
    if (size < v29) {
      goto LABEL_60;
    }
    uint64_t v30 = v23;
    id v31 = v22;
    int v32 = (std::string *)((char *)p_str + size);
    int v33 = *v28;
    unint64_t v34 = p_str;
    while (1)
    {
      int64_t v35 = size - v29;
      if (v35 == -1 || (id v36 = (std::string *)memchr(v34, v33, v35 + 1)) == 0)
      {
LABEL_47:
        char v22 = v31;
LABEL_48:
        uint64_t v23 = v30;
        goto LABEL_60;
      }
      char v37 = v36;
      if (!memcmp(v36, v28, v29)) {
        break;
      }
      unint64_t v34 = (std::string *)((char *)&v37->__r_.__value_.__l.__data_ + 1);
      int64_t size = (char *)v32 - ((char *)&v37->__r_.__value_.__l.__data_ + 1);
      if (size < v29) {
        goto LABEL_47;
      }
    }
    char v22 = v31;
    if (v37 == v32) {
      goto LABEL_48;
    }
    uint64_t v23 = v30;
    if (v37 == p_str) {
      goto LABEL_51;
    }
LABEL_60:
    std::chrono::system_clock::time_point v42 = v21[1];
    if (v42)
    {
      do
      {
        std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v43 = (char **)v42;
        std::chrono::system_clock::time_point v42 = *(char **)v42;
      }
      while (v42);
    }
    else
    {
      do
      {
        std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v43 = (char **)v21[2];
        BOOL v44 = *v43 == (char *)v21;
        id v21 = v43;
      }
      while (!v44);
    }
    id v21 = v43;
  }
  while (v43 != v80);
LABEL_68:
  std::string::basic_string[abi:ne180100]<0>(&v77, "DiscreteInOrder");
  int v78 = 9633792;
  std::string::size_type v45 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v46 = &__str;
  }
  else {
    unint64_t v46 = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64_t v47 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  else {
    int64_t v47 = __str.__r_.__value_.__l.__size_;
  }
  if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v48 = &v77;
  }
  else {
    unint64_t v48 = (std::string *)v77.__r_.__value_.__r.__words[0];
  }
  if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64_t v49 = HIBYTE(v77.__r_.__value_.__r.__words[2]);
  }
  else {
    int64_t v49 = v77.__r_.__value_.__l.__size_;
  }
  if (v49)
  {
    if (v47 >= v49)
    {
      uint64_t v50 = (std::string *)((char *)v46 + v47);
      int v51 = v48->__r_.__value_.__s.__data_[0];
      long long v52 = v46;
      do
      {
        int64_t v53 = v47 - v49;
        if (v53 == -1) {
          break;
        }
        long long v54 = (std::string *)memchr(v52, v51, v53 + 1);
        if (!v54) {
          break;
        }
        std::string v55 = v54;
        if (!memcmp(v54, v48, v49))
        {
          if (v55 == v50 || v55 != v46) {
            break;
          }
          goto LABEL_90;
        }
        long long v52 = (std::string *)((char *)&v55->__r_.__value_.__l.__data_ + 1);
        int64_t v47 = (char *)v50 - ((char *)&v55->__r_.__value_.__l.__data_ + 1);
      }
      while (v47 >= v49);
    }
  }
  else
  {
LABEL_90:
    int v81 = 9633792;
    if ((v45 & 0x80u) == 0) {
      std::string::size_type v56 = v45;
    }
    else {
      std::string::size_type v56 = __str.__r_.__value_.__l.__size_;
    }
    std::string::basic_string(&v76, &__str, v49, v56, (std::allocator<char> *)buf);
    int v75 = 0;
    std::istringstream::basic_istringstream[abi:ne180100]((uint64_t)buf, &v76);
    MEMORY[0x1C185CC80](buf, &v75);
    *(void *)buf = *v22;
    *(void *)&buf[*(void *)(*(void *)buf - 24)] = v22[3];
    *(void *)&v86[2] = MEMORY[0x1E4FBA470] + 16;
    if (SHIBYTE(v93) < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::istream::~istream();
    MEMORY[0x1C185D210](&v94);
    int v73 = v75 | 0x930000;
    int v81 = v75 | 0x930000;
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v76.__r_.__value_.__l.__data_);
    }
  }
  id v5 = v70;
  uint64_t v3 = v68;
  int v8 = (char *)&xmmword_1E9F7EFF8 + 8;
  CFPropertyListRef v7 = (char *)&xmmword_1E9F7EFF8 + 8;
  if (v73 == -65536)
  {
    std::istringstream::basic_istringstream[abi:ne180100]((uint64_t)buf, &__str);
    MEMORY[0x1C185CC80](buf, &v81);
    int v57 = *(_DWORD *)((unsigned char *)&v88[1] + *(void *)(*(void *)buf - 24)) & 5;
    *(void *)buf = *v22;
    *(void *)&buf[*(void *)(*(void *)buf - 24)] = v22[3];
    *(void *)&v86[2] = MEMORY[0x1E4FBA470] + 16;
    if (SHIBYTE(v93) < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::istream::~istream();
    MEMORY[0x1C185D210](&v94);
    if (v57) {
      int v81 = -65536;
    }
  }
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v77.__r_.__value_.__l.__data_);
  }
  std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy(v80[0]);
  id v19 = &v81;
LABEL_105:
  int v58 = *v19;
  std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy(v83[0]);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }

  if (v58 == -65536)
  {
LABEL_108:
    if (*((void *)v7 + 397) != -1) {
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
    }
    std::string v59 = (id *)*((void *)v8 + 398);
    if (v59)
    {
      uint64_t v60 = *v59;
      if (!v60) {
        goto LABEL_117;
      }
    }
    else
    {
      uint64_t v60 = MEMORY[0x1E4F14500];
      id v61 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "SpatialCapture.mm";
      __int16 v85 = 1024;
      *(_DWORD *)std::string::size_type v86 = 575;
      _os_log_impl(&dword_1BB0CE000, v60, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Plist has unknown outputChannelLayout. Using Binaural by default", buf, 0x12u);
    }

LABEL_117:
    int v58 = 6946818;
  }

  if (*((void *)v7 + 397) != -1) {
    dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
  }
  id v62 = (id *)*((void *)v8 + 398);
  if (v62)
  {
    id v63 = *v62;
    if (!v63) {
      goto LABEL_131;
    }
  }
  else
  {
    id v63 = (id)MEMORY[0x1E4F14500];
    id v64 = MEMORY[0x1E4F14500];
  }
  long long v65 = v63;
  if (os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG))
  {
    GetStringFromAudioChannelLayoutTag(&v77, v58);
    if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v66 = &v77;
    }
    else {
      int v66 = (std::string *)v77.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = "AUSpatialCapture.mm";
    __int16 v85 = 1024;
    *(_DWORD *)std::string::size_type v86 = 238;
    *(_WORD *)&v86[4] = 2080;
    *(void *)&v86[6] = v66;
    __int16 v87 = 1024;
    *(_DWORD *)v88 = v58;
    _os_log_impl(&dword_1BB0CE000, v65, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loaded output channel layout %s (%u) from tuning plist ", buf, 0x22u);
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v77.__r_.__value_.__l.__data_);
    }
  }

LABEL_131:
  *(_DWORD *)&uint8_t buf[4] = 0;
  *(_DWORD *)&buf[8] = 0;
  *(_DWORD *)buf = v58;
  return (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned char *))(*(void *)v3 + 536))(v3, 2, 0, buf);
}

void sub_1BB470418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char *a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a24 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void *std::vector<SCRenderModes>::__init_with_size[abi:ne180100]<SCRenderModes*,SCRenderModes*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    id v6 = result;
    uint64_t result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BB470910(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void AUSpatialCapture::~AUSpatialCapture(AUSpatialCapture *this)
{
  AUSpatialCapture::~AUSpatialCapture(this);

  JUMPOUT(0x1C185D370);
}

{
  uint64_t v2;
  const void *v3;
  void *v4;
  void *v5;
  void **v6;

  *(void *)this = &unk_1F14AE208;
  if (*((char *)this + 975) < 0) {
    operator delete(*((void **)this + 119));
  }
  id v6 = (void **)((char *)this + 928);
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v6);
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*((void **)this + 114));
  if (*((char *)this + 895) < 0) {
    operator delete(*((void **)this + 109));
  }
  if (*((char *)this + 871) < 0) {
    operator delete(*((void **)this + 106));
  }
  if (*((char *)this + 847) < 0) {
    operator delete(*((void **)this + 103));
  }
  uint64_t v2 = *((void *)this + 101);
  *((void *)this + 101) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 744));
  std::mutex::~mutex((std::mutex *)((char *)this + 680));
  std::mutex::~mutex((std::mutex *)((char *)this + 616));
  uint64_t v3 = (const void *)*((void *)this + 73);
  if (v3) {
    CFRelease(v3);
  }
  std::unique_ptr<std::map<unsigned int,SpatialCaptureParameterInfo>>::reset[abi:ne180100]((uint64_t *)this + 72, 0);
  id v4 = (void *)*((void *)this + 69);
  if (v4)
  {
    *((void *)this + 70) = v4;
    operator delete(v4);
  }
  id v5 = (void *)*((void *)this + 66);
  if (v5)
  {
    *((void *)this + 67) = v5;
    operator delete(v5);
  }
  ausdk::AUBase::~AUBase(this);
}

void AUSpatialCapture::AddParameterToMap(uint64_t **a1, unsigned int a2, unsigned int a3, int a4, const __CFString *a5, uint64_t a6, int a7, char **a8, float a9, float a10, float a11)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  long long v58 = 0u;
  long long v57 = 0u;
  long long v56 = 0u;
  bzero(buffer, 0x98uLL);
  *(void *)&long long v54 = __PAIR64__(LODWORD(a9), a3);
  *((void *)&v54 + 1) = __PAIR64__(LODWORD(a11), LODWORD(a10));
  LODWORD(v55) = a4;
  if (&v56 != (long long *)a6) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&v56, *(std::string **)a6, *(long long **)(a6 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 3));
  }
  if ((char **)((char *)&v57 + 8) != a8)
  {
    id v21 = *a8;
    char v22 = a8[1];
    int64_t v23 = v22 - *a8;
    unint64_t v24 = v23 >> 2;
    uint64_t v25 = *((void *)&v58 + 1);
    uint64_t v26 = (char *)*((void *)&v57 + 1);
    if (v23 >> 2 <= (unint64_t)((uint64_t)(*((void *)&v58 + 1) - *((void *)&v57 + 1)) >> 2))
    {
      unint64_t v30 = (uint64_t)(v58 - *((void *)&v57 + 1)) >> 2;
      if (v30 < v24)
      {
        id v31 = &v21[4 * v30];
        if ((void)v58 != *((void *)&v57 + 1))
        {
          memmove(*((void **)&v57 + 1), v21, v58 - *((void *)&v57 + 1));
          uint64_t v26 = (char *)v58;
        }
        int64_t v23 = v22 - v31;
        if (v22 == v31) {
          goto LABEL_23;
        }
        int v32 = v26;
        int v33 = v31;
        goto LABEL_22;
      }
    }
    else
    {
      if (*((void *)&v57 + 1))
      {
        *(void *)&long long v58 = *((void *)&v57 + 1);
        operator delete(*((void **)&v57 + 1));
        uint64_t v25 = 0;
        *((void *)&v57 + 1) = 0;
        long long v58 = 0uLL;
      }
      if (v23 < 0) {
        goto LABEL_37;
      }
      uint64_t v27 = v25 >> 1;
      if (v25 >> 1 <= v24) {
        uint64_t v27 = v23 >> 2;
      }
      unint64_t v28 = (unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v27;
      if (v28 >> 62) {
LABEL_37:
      }
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      uint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v28);
      *((void *)&v57 + 1) = v26;
      *(void *)&long long v58 = v26;
      *((void *)&v58 + 1) = &v26[4 * v29];
    }
    if (v22 == v21)
    {
LABEL_23:
      *(void *)&long long v58 = &v26[v23];
      goto LABEL_24;
    }
    int v32 = v26;
    int v33 = v21;
LABEL_22:
    memmove(v32, v33, v23);
    goto LABEL_23;
  }
LABEL_24:
  *((void *)&v53 + 1) = a5;
  LODWORD(v55) = v55 | 0x8000000;
  CFStringGetCString(a5, buffer, 52, 0x8000100u);
  LODWORD(v53) = a7;
  LODWORD(v55) = v55 | 0x100000;
  unint64_t v34 = (char *)a1[1];
  int64_t v35 = (char **)(a1 + 1);
  id v36 = (char **)(a1 + 1);
  if (v34)
  {
    while (1)
    {
      while (1)
      {
        id v36 = (char **)v34;
        unsigned int v37 = *((_DWORD *)v34 + 8);
        if (v37 <= a2) {
          break;
        }
        unint64_t v34 = *v36;
        int64_t v35 = v36;
        if (!*v36) {
          goto LABEL_31;
        }
      }
      if (v37 >= a2) {
        break;
      }
      unint64_t v34 = v36[1];
      if (!v34)
      {
        int64_t v35 = v36 + 1;
        goto LABEL_31;
      }
    }
  }
  else
  {
LABEL_31:
    int v38 = (char *)operator new(0xC0uLL);
    long long v39 = v51;
    *(_OWORD *)(v38 + 88) = v52;
    long long v40 = v54;
    *(_OWORD *)(v38 + 104) = v53;
    *(_OWORD *)(v38 + 120) = v40;
    long long v41 = v50;
    *(_OWORD *)(v38 + 40) = *(_OWORD *)buffer;
    *(_OWORD *)(v38 + 56) = v41;
    v47[0] = (void **)v38;
    v47[1] = (void **)(a1 + 1);
    *((_DWORD *)v38 + 8) = a2;
    std::chrono::system_clock::time_point v42 = (long long *)v56;
    *((void *)v38 + 17) = v55;
    *(_OWORD *)(v38 + 72) = v39;
    *((void *)v38 + 18) = 0;
    *((void *)v38 + 19) = 0;
    std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v43 = (long long *)*((void *)&v56 + 1);
    unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v56 + 1) - (void)v42) >> 3);
    *((void *)v38 + 20) = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v38 + 6, v42, v43, v44);
    *((void *)v38 + 21) = 0;
    *((void *)v38 + 22) = 0;
    *((void *)v38 + 23) = 0;
    std::vector<SCRenderModes>::__init_with_size[abi:ne180100]<SCRenderModes*,SCRenderModes*>((void *)v38 + 21, *((const void **)&v57 + 1), v58, (uint64_t)(v58 - *((void *)&v57 + 1)) >> 2);
    char v48 = 1;
    *(void *)int v38 = 0;
    *((void *)v38 + 1) = 0;
    *((void *)v38 + 2) = v36;
    *int64_t v35 = v38;
    std::string::size_type v45 = (uint64_t *)**a1;
    if (v45)
    {
      *a1 = v45;
      int v38 = *v35;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v38);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v47[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,SpatialCaptureParameterInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,SpatialCaptureParameterInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)v47);
  }
  if (*((void *)&v57 + 1))
  {
    *(void *)&long long v58 = *((void *)&v57 + 1);
    operator delete(*((void **)&v57 + 1));
  }
  v47[0] = (void **)&v56;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](v47);
}

void sub_1BB470E0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, void **);
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,SpatialCaptureParameterInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,SpatialCaptureParameterInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  SpatialCaptureParameterInfo::~SpatialCaptureParameterInfo((SpatialCaptureParameterInfo *)va2);
  _Unwind_Resume(a1);
}

void SpatialCaptureParameterInfo::~SpatialCaptureParameterInfo(SpatialCaptureParameterInfo *this)
{
  uint64_t v2 = (void *)*((void *)this + 16);
  if (v2)
  {
    *((void *)this + 17) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void **)((char *)this + 104);
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,SpatialCaptureParameterInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,SpatialCaptureParameterInfo>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<unsigned int const,SpatialCaptureParameterInfo>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void dft_v3::dftInit2(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  int v15 = malloc_type_malloc(0x80uLL, 0x2C8E6D5CuLL);
  if (!v15)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v27 = std::bad_alloc::bad_alloc(exception);
  }
  id v16 = v15;
  v15[7] = 0u;
  *(_OWORD *)((char *)v15 + 100) = 0u;
  *(_OWORD *)((char *)v15 + 84) = 0u;
  *(_OWORD *)((char *)v15 + 68) = 0u;
  *(_OWORD *)((char *)v15 + 52) = 0u;
  *(_OWORD *)((char *)v15 + 36) = 0u;
  *(_OWORD *)((char *)v15 + 20) = 0u;
  *(_OWORD *)((char *)v15 + 4) = 0u;
  *a1 = v15;
  int v17 = 2 * a3;
  int v18 = a3 + 1;
  *(_DWORD *)int v15 = 2 * a3;
  if (a8) {
    int v19 = a4 + 1;
  }
  else {
    int v19 = a4;
  }
  *((_DWORD *)v15 + 11) = a4;
  *((_DWORD *)v15 + 12) = v19;
  *((_DWORD *)v15 + 4) = a3;
  *((_DWORD *)v15 + 7) = a3;
  float v20 = (float)a3;
  *((float *)v15 + 8) = 1.0 / (float)a3;
  *((_DWORD *)v15 + 16) = a5;
  if (a6 && (int v21 = (int)(float)((float)a5 / 5000.0), *((_DWORD *)v15 + 17) = v21, v21 > 0))
  {
    if (v21 < 7) {
      goto LABEL_11;
    }
    int v22 = 6;
  }
  else
  {
    int v22 = 1;
  }
  *((_DWORD *)v15 + 17) = v22;
LABEL_11:
  float v23 = 0.0;
  float v24 = v20 / (float)a5;
  if (a5) {
    float v23 = v24 * 1000.0;
  }
  else {
    float v24 = 0.0;
  }
  *((float *)v15 + 5) = v24;
  *((float *)v15 + 6) = v23;
  *((_DWORD *)v15 + 9) = a3 >> 1;
  *((_DWORD *)v15 + 10) = v18;
  *((_DWORD *)v15 + 13) = a4 * a3;
  *((_DWORD *)v15 + 14) = v19 * v18;
  *((_DWORD *)v15 + 15) = v19 * a3;
  *((_DWORD *)v15 + 23) = 0;
  float v25 = powf((float)(1.0 / (float)((float)a2 * -3.0)) + 1.0, v20);
  *((_DWORD *)v16 + 19) = v17;
  *((_DWORD *)v16 + 20) = 1065353216;
  *((float *)v16 + 21) = 1.0 / (float)v17;
  *((float *)v16 + 22) = v25;
  *((_DWORD *)v16 + 24) = a7;
  *((_DWORD *)v16 + 25) = a8;
  *((_DWORD *)v16 + 18) = a4 * a3 + v17;
  MultiRadixRealFFT_Create();
}

void dft_v3::dftRemove(void **a1)
{
  if (*a1)
  {
    MultiRadixFFT_Dispose(*((void *)*a1 + 1));
    if (*a1)
    {
      free(*a1);
      *a1 = 0;
    }
  }
}

signed int *dft_v3::GetIndexSequence(signed int *this, int *a2, int a3, signed int a4)
{
  if (a4 <= 1) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = a4;
  }
  signed int v5 = a2
     + a4
     + a4
     * ((((a2 - a3 + 1) & ~(((int)a2 - a3 + 1) >> 31))
       - (a2
        - a3
        + 1)
       + (((int)a2 - a3 + 1) >> 31))
      / v4
      + ((a2 - a3 + 1) >> 31))
     - a3
     + 1;
  do
    v5 -= a4;
  while (v5 >= a4);
  *this = v5;
  if (a3 >= 2)
  {
    for (uint64_t i = 1; i != a3; this[i++] = v5)
    {
      v5 += 1
          + a4
          + a4
          * ((~v5 + ((v5 + 1) >> 31) + ((v5 + 1) & ~((v5 + 1) >> 31))) / v4
           + ((v5 + 1) >> 31));
      do
        v5 -= a4;
      while (v5 >= a4);
    }
  }
  return this;
}

void dft_v3::dftGenericAnalysis2ndHalf(const DSPComplex *a1, float *__C, float *a3, uint64_t a4, int a5)
{
  int v9 = *(_DWORD *)(a4 + 36);
  vDSP_Length v10 = v9;
  if (a5) {
    uint64_t v11 = *(unsigned int *)(a4 + 36);
  }
  else {
    uint64_t v11 = 0;
  }
  vDSP_vclr(__C, 1, 2 * v9);
  vDSP_vclr(a3, 1, 2 * v10);
  v14.realp = &__C[v11];
  v14.imagp = &a3[v11];
  vDSP_ctoz(a1, 2, &v14, 1, v10);
  v14.realp = __C;
  v14.imagp = a3;
  uint64_t v13 = *(MultiRadixRealFFT **)(a4 + 8);
  if (v13) {
    MultiRadixRealFFT::RealInPlaceTransform(v13, &v14, 1, v12);
  }
  vDSP_vsmul(__C, 1, (const float *)(a4 + 84), __C, 1, *(int *)(a4 + 16));
  vDSP_vsmul(a3, 1, (const float *)(a4 + 84), a3, 1, *(int *)(a4 + 16));
}

void dft_v3::dftGenericAnalysis2ndHalf_dsc(const void *a1, const void *a2, float *__C, float *a4, int *a5)
{
  int v10 = *a5 >> 2;
  vDSP_Length v11 = (uint64_t)*a5 >> 2;
  vDSP_vclr(__C, 1, v11);
  vDSP_vclr(a4, 1, v11);
  memcpy(&__C[v10], a1, 4 * v10);
  memcpy(&a4[v10], a2, 4 * v10);
  v15.realp = __C;
  v15.imagp = a4;
  uint64_t v13 = (MultiRadixRealFFT *)*((void *)a5 + 1);
  if (v13) {
    MultiRadixRealFFT::RealInPlaceTransform(v13, &v15, 1, v12);
  }
  vDSP_vsmul(__C, 1, (const float *)a5 + 21, __C, 1, (uint64_t)*a5 >> 1);
  vDSP_Length v14 = (uint64_t)*a5 >> 1;

  vDSP_vsmul(a4, 1, (const float *)a5 + 21, a4, 1, v14);
}

void dft_v3::dftSynthesis(float *__C, float *a2, uint64_t a3)
{
  float v4 = *(float *)(a3 + 80);
  float __B = v4;
  v8.realp = __C;
  v8.imagp = a2;
  if (v4 != 1.0)
  {
    vDSP_vsmul(__C, 1, &__B, __C, 1, *(int *)(a3 + 16));
    vDSP_vsmul(a2, 1, &__B, a2, 1, *(int *)(a3 + 16));
  }
  uint64_t v6 = *(MultiRadixRealFFT **)(a3 + 8);
  if (v6) {
    MultiRadixRealFFT::RealInPlaceTransform(v6, &v8, -1, v4);
  }
}

uint64_t AUNFNSwitch::ValidFormat(AUNFNSwitch *this, int a2, unsigned int a3, const AudioStreamBasicDescription *a4)
{
  if (a4->mBitsPerChannel == 32 && a4->mFormatID == 1819304813) {
    uint64_t result = (LOBYTE(a4->mFormatFlags) >> 5) & 1;
  }
  else {
    uint64_t result = 0;
  }
  if (a2 == 2)
  {
    BOOL v6 = a4->mChannelsPerFrame == 1;
  }
  else
  {
    if (a2 != 1) {
      return result;
    }
    BOOL v6 = a4->mChannelsPerFrame == 2;
  }
  if (v6) {
    return result;
  }
  else {
    return 0;
  }
}

uint64_t AUNFNSwitch::SupportedNumChannels(AUNFNSwitch *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUNFNSwitch::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 1;
}

BOOL AUNFNSwitch::StreamFormatWritable(AUNFNSwitch *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUNFNSwitch::SupportsTail(AUNFNSwitch *this)
{
  return 1;
}

double AUNFNSwitch::GetTailTime(AUNFNSwitch *this)
{
  return 0.05;
}

double AUNFNSwitch::GetLatency(AUNFNSwitch *this)
{
  return 0.0;
}

uint64_t AUNFNSwitch::GetParameterValueStrings(AUNFNSwitch *this, int a2, unsigned int a3, const __CFArray **a4)
{
  if (a4) {
    BOOL v4 = a2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return 0;
  }
  else {
    return 4294956430;
  }
}

uint64_t AUNFNSwitch::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result = ausdk::AUBase::RestoreState(this, a2);
  if (!result)
  {
    ++*((_DWORD *)this + 132);
    ++*((_DWORD *)this + 134);
  }
  return result;
}

uint64_t AUNFNSwitch::GetParameterInfo(AUNFNSwitch *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  buffer->AudioUnitParameterOptions flags = 0;
  buffer->unitName = 0;
  if (a2) {
    return 4294956430;
  }
  if (a3 > 0x1D) {
    return 4294956418;
  }
  CFStringRef v6 = off_1E623D8C0[a3];
  UInt32 v7 = dword_1BB8953B8[a3];
  AudioUnitParameterUnit v8 = dword_1BB895430[a3];
  AudioUnitParameterValue v9 = flt_1BB8954A8[a3];
  AudioUnitParameterValue v10 = flt_1BB895520[a3];
  AudioUnitParameterValue v11 = flt_1BB895598[a3];
  int v12 = dword_1BB895610[a3];
  buffer->cfNameString = v6;
  buffer->AudioUnitParameterOptions flags = 0x8000000;
  CFStringGetCString(v6, buffer->name, 52, 0x8000100u);
  uint64_t result = 0;
  buffer->clumpID = v7;
  AudioUnitParameterOptions flags = buffer->flags;
  buffer->unit = v8;
  buffer->maxValue = v11;
  buffer->defaultValue = v10;
  buffer->minValue = v9;
  buffer->AudioUnitParameterOptions flags = flags | v12;
  return result;
}

uint64_t AUNFNSwitch::GetParameterList(AUNFNSwitch *this, int a2, unsigned int *a3, unsigned int *a4)
{
  if (a2)
  {
    unsigned int v4 = 0;
    uint64_t result = 4294956430;
  }
  else
  {
    uint64_t result = 0;
    if (a3)
    {
      *(_OWORD *)a3 = xmmword_1BB8727D0;
      *((_OWORD *)a3 + 1) = xmmword_1BB879D60;
      *((_OWORD *)a3 + 2) = xmmword_1BB879E40;
      *((_OWORD *)a3 + 3) = xmmword_1BB879E50;
      *((_OWORD *)a3 + 4) = xmmword_1BB879E60;
    }
    unsigned int v4 = 20;
  }
  *a4 = v4;
  return result;
}

uint64_t AUNFNSwitch::Render(AUNFNSwitch *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  uint64_t v8 = 0;
  char v9 = 0;
  v20[2] = *MEMORY[0x1E4F143B8];
  AudioUnitParameterValue v10 = (AUNFNSwitch *)((char *)this + 80);
  do
  {
    uint64_t Element = ausdk::AUScope::GetElement(v10, v8);
    if (Element && *(_DWORD *)(Element + 172))
    {
      int v12 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v10, v8);
      uint64_t result = ausdk::AUInputElement::PullInput(v12, a2, a3, v8, a4);
      if (result) {
        return result;
      }
    }
    else
    {
      char v9 = 1;
    }
    uint64_t v8 = (v8 + 1);
  }
  while (v8 != 3);
  vDSP_Length v14 = (ausdk::AUIOElement *)ausdk::AUScope::SafeGetElement((AUNFNSwitch *)((char *)this + 128), 0);
  v20[0] = ausdk::AUIOElement::PrepareBuffer(v14, a4);
  DSPSplitComplex v15 = (ausdk::AUIOElement *)ausdk::AUScope::SafeGetElement((AUNFNSwitch *)((char *)this + 128), 1u);
  uint64_t v16 = ausdk::AUIOElement::PrepareBuffer(v15, a4);
  uint64_t result = 0;
  v20[1] = v16;
  if ((v9 & 1) == 0)
  {
    uint64_t v17 = 0;
    memset(v19, 0, sizeof(v19));
    do
    {
      uint64_t v18 = ausdk::AUScope::SafeGetElement(v10, v17);
      v19[v17++] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v18 + 144));
    }
    while (v17 != 3);
    return (*(uint64_t (**)(AUNFNSwitch *, unsigned int *, uint64_t, uint64_t, void *, uint64_t, void *))(*(void *)this + 184))(this, a2, a4, 3, v19, 2, v20);
  }
  return result;
}

uint64_t AUNFNSwitch::ProcessMultipleBufferLists(AUNFNSwitch *this, unsigned int *a2, int a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  int v11 = *((_DWORD *)this + 132);
  if (*((_DWORD *)this + 133) == v11) {
    goto LABEL_30;
  }
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNFNSwitch *)((char *)this + 32), 0);
  *((float *)this + 140) = ausdk::AUElement::GetParameter(Element, 0);
  uint64_t v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNFNSwitch *)((char *)this + 32), 0);
  *((float *)this + 141) = ausdk::AUElement::GetParameter(v13, 1u);
  vDSP_Length v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNFNSwitch *)((char *)this + 32), 0);
  *((float *)this + 142) = ausdk::AUElement::GetParameter(v14, 2u);
  DSPSplitComplex v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNFNSwitch *)((char *)this + 32), 0);
  *((float *)this + 143) = ausdk::AUElement::GetParameter(v15, 3u);
  uint64_t v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNFNSwitch *)((char *)this + 32), 0);
  *((float *)this + 144) = ausdk::AUElement::GetParameter(v16, 4u);
  uint64_t v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNFNSwitch *)((char *)this + 32), 0);
  *((float *)this + 145) = ausdk::AUElement::GetParameter(v17, 5u);
  uint64_t v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNFNSwitch *)((char *)this + 32), 0);
  *((float *)this + 146) = ausdk::AUElement::GetParameter(v18, 6u);
  int v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNFNSwitch *)((char *)this + 32), 0);
  *((float *)this + 147) = ausdk::AUElement::GetParameter(v19, 7u);
  float v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNFNSwitch *)((char *)this + 32), 0);
  *((float *)this + 148) = ausdk::AUElement::GetParameter(v20, 8u);
  int v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNFNSwitch *)((char *)this + 32), 0);
  *((float *)this + 149) = ausdk::AUElement::GetParameter(v21, 9u);
  int v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNFNSwitch *)((char *)this + 32), 0);
  *((float *)this + 150) = ausdk::AUElement::GetParameter(v22, 0xAu);
  float v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNFNSwitch *)((char *)this + 32), 0);
  *((float *)this + 151) = ausdk::AUElement::GetParameter(v23, 0xBu);
  float v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNFNSwitch *)((char *)this + 32), 0);
  *((float *)this + 152) = ausdk::AUElement::GetParameter(v24, 0xCu);
  float v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNFNSwitch *)((char *)this + 32), 0);
  *((float *)this + 153) = ausdk::AUElement::GetParameter(v25, 0xDu);
  uint64_t v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNFNSwitch *)((char *)this + 32), 0);
  *((float *)this + 154) = ausdk::AUElement::GetParameter(v26, 0xEu);
  uint64_t v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNFNSwitch *)((char *)this + 32), 0);
  *((float *)this + 155) = ausdk::AUElement::GetParameter(v27, 0xFu);
  unint64_t v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNFNSwitch *)((char *)this + 32), 0);
  *((unsigned char *)this + 624) = ausdk::AUElement::GetParameter(v28, 0x10u) != 0.0;
  uint64_t v29 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNFNSwitch *)((char *)this + 32), 0);
  *((_DWORD *)this + 157) = ausdk::AUElement::GetParameter(v29, 0x11u);
  unint64_t v30 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNFNSwitch *)((char *)this + 32), 0);
  *((_DWORD *)this + 158) = ausdk::AUElement::GetParameter(v30, 0x12u);
  id v31 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNFNSwitch *)((char *)this + 32), 0);
  *((_DWORD *)this + 159) = ausdk::AUElement::GetParameter(v31, 0x13u);
  float v32 = *(double *)(ausdk::AUScope::SafeGetElement((AUNFNSwitch *)((char *)this + 80), 0) + 80);
  float v33 = *((float *)this + 144);
  float v34 = v32 * 0.5;
  BOOL v35 = v33 <= (float)(v32 * 0.5);
  float v36 = v33;
  if (!v35)
  {
    *((float *)this + 144) = v34;
    float v36 = v34;
  }
  float v37 = *((float *)this + 145);
  if (v37 <= v34)
  {
    if (v36 <= v37)
    {
      if (v33 <= v34) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
  }
  else
  {
    *((float *)this + 145) = v34;
    float v37 = v34;
    if (v36 <= v34) {
      goto LABEL_10;
    }
  }
  *((float *)this + 144) = v37;
LABEL_10:
  int v38 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNFNSwitch *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v38, 4u, *((float *)this + 144), 0);
  long long v39 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNFNSwitch *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v39, 5u, *((float *)this + 145), 0);
LABEL_11:
  float v40 = *((float *)this + 146);
  float v41 = v40;
  if (v40 > v34)
  {
    *((float *)this + 146) = v34;
    float v41 = v34;
  }
  float v42 = *((float *)this + 147);
  if (v42 <= v34)
  {
    if (v41 <= v42)
    {
      if (v40 <= v34) {
        goto LABEL_20;
      }
      goto LABEL_19;
    }
  }
  else
  {
    *((float *)this + 147) = v34;
    float v42 = v34;
    if (v41 <= v34) {
      goto LABEL_19;
    }
  }
  *((float *)this + 146) = v42;
LABEL_19:
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v43 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNFNSwitch *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v43, 6u, *((float *)this + 146), 0);
  unint64_t v44 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNFNSwitch *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v44, 7u, *((float *)this + 147), 0);
LABEL_20:
  float v45 = *((float *)this + 148);
  float v46 = v45;
  if (v45 > v34)
  {
    *((float *)this + 148) = v34;
    float v46 = v34;
  }
  float v47 = *((float *)this + 149);
  if (v47 > v34)
  {
    *((float *)this + 149) = v34;
    float v47 = v34;
    if (v46 <= v34) {
      goto LABEL_28;
    }
    goto LABEL_26;
  }
  if (v46 > v47)
  {
LABEL_26:
    *((float *)this + 148) = v47;
LABEL_28:
    char v48 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNFNSwitch *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v48, 8u, *((float *)this + 148), 0);
    int64_t v49 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNFNSwitch *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v49, 9u, *((float *)this + 149), 0);
    goto LABEL_29;
  }
  if (v45 > v34) {
    goto LABEL_28;
  }
LABEL_29:
  *((_DWORD *)this + 133) = v11;
LABEL_30:
  int v50 = *((_DWORD *)this + 134);
  if (*((_DWORD *)this + 135) != v50)
  {
    long long v51 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNFNSwitch *)((char *)this + 32), 0);
    *((float *)this + 160) = ausdk::AUElement::GetParameter(v51, 0x14u);
    long long v52 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNFNSwitch *)((char *)this + 32), 0);
    *((float *)this + 161) = ausdk::AUElement::GetParameter(v52, 0x15u);
    long long v53 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNFNSwitch *)((char *)this + 32), 0);
    *((float *)this + 162) = ausdk::AUElement::GetParameter(v53, 0x16u);
    long long v54 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNFNSwitch *)((char *)this + 32), 0);
    *((float *)this + 163) = ausdk::AUElement::GetParameter(v54, 0x17u);
    uint64_t v55 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNFNSwitch *)((char *)this + 32), 0);
    *((float *)this + 164) = ausdk::AUElement::GetParameter(v55, 0x18u);
    long long v56 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNFNSwitch *)((char *)this + 32), 0);
    *((float *)this + 165) = ausdk::AUElement::GetParameter(v56, 0x19u);
    long long v57 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNFNSwitch *)((char *)this + 32), 0);
    *((float *)this + 166) = ausdk::AUElement::GetParameter(v57, 0x1Au);
    long long v58 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNFNSwitch *)((char *)this + 32), 0);
    *((float *)this + 167) = ausdk::AUElement::GetParameter(v58, 0x1Bu);
    uint64_t v59 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNFNSwitch *)((char *)this + 32), 0);
    *((float *)this + 168) = ausdk::AUElement::GetParameter(v59, 0x1Cu);
    uint64_t v60 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNFNSwitch *)((char *)this + 32), 0);
    *((float *)this + 169) = ausdk::AUElement::GetParameter(v60, 0x1Du);
    *((_DWORD *)this + 135) = v50;
  }
  uint64_t v61 = *((void *)this + 69);
  long long v62 = *((_OWORD *)this + 35);
  long long v63 = *((_OWORD *)this + 36);
  long long v64 = *((_OWORD *)this + 37);
  *(_OWORD *)(v61 + 104) = *((_OWORD *)this + 38);
  *(_OWORD *)(v61 + 88) = v64;
  *(_OWORD *)(v61 + 72) = v63;
  *(_OWORD *)(v61 + 56) = v62;
  long long v65 = *((_OWORD *)this + 39);
  long long v66 = *((_OWORD *)this + 40);
  long long v67 = *((_OWORD *)this + 41);
  *(void *)(v61 + 168) = *((void *)this + 84);
  *(_OWORD *)(v61 + 152) = v67;
  *(_OWORD *)(v61 + 136) = v66;
  *(_OWORD *)(v61 + 120) = v65;
  if (*((_DWORD *)this + 84) != a3) {
    return 4294956422;
  }
  uint64_t v68 = (uint64_t)*a5;
  if (!*a5) {
    return 4294956420;
  }
  if (*(_DWORD *)v68 != 2) {
    return 4294956428;
  }
  long long v69 = a5[1];
  if (!v69) {
    return 4294956420;
  }
  if (v69->mNumberBuffers != 2) {
    return 4294956428;
  }
  id v70 = a5[2];
  if (!v70) {
    return 4294956420;
  }
  if (v70->mNumberBuffers != 2) {
    return 4294956428;
  }
  uint64_t v71 = (uint64_t)*a7;
  if (*a7)
  {
    if (*(_DWORD *)v71 != 1) {
      return 4294956428;
    }
  }
  uint64_t v72 = a7[1];
  if (v72)
  {
    if (v72->mNumberBuffers != 1) {
      return 4294956428;
    }
  }
  int v73 = (long long *)((char *)this + 560);
  if (*((unsigned char *)this + 544))
  {
    if (v71)
    {
      memcpy(*(void **)(v71 + 16), *(const void **)&v69[1].mBuffers[0].mNumberChannels, *(&v69[1].mNumberBuffers + 1));
      uint64_t v72 = a7[1];
    }
    if (v72) {
      memcpy(v72->mBuffers[0].mData, *(const void **)&a5[2][1].mBuffers[0].mNumberChannels, *(&a5[2][1].mNumberBuffers + 1));
    }
    *((_DWORD *)this + 159) = 1;
    *((_DWORD *)this + 164) = *((_DWORD *)this + 169);
    *((_OWORD *)this + 40) = *(_OWORD *)((char *)this + 660);
    uint64_t v74 = *((void *)this + 69);
    long long v75 = *v73;
    long long v76 = *((_OWORD *)this + 36);
    long long v77 = *((_OWORD *)this + 38);
    *(_OWORD *)(v74 + 88) = *((_OWORD *)this + 37);
    *(_OWORD *)(v74 + 72) = v76;
    *(_OWORD *)(v74 + 56) = v75;
    *(_OWORD *)(v74 + 104) = v77;
    long long v79 = *((_OWORD *)this + 40);
    long long v78 = *((_OWORD *)this + 41);
    uint64_t v80 = *((void *)this + 84);
    *(_OWORD *)(v74 + 120) = *((_OWORD *)this + 39);
    *(_OWORD *)(v74 + 136) = v79;
    *(void *)(v74 + 168) = v80;
    *(_OWORD *)(v74 + 152) = v78;
  }
  else
  {
    NFNSwitchKernel::ProcessBufferLists(*((NFNSwitchKernel **)this + 69), *(const float **)(v68 + 16), *(const float **)(v68 + 32), (const float *)v69->mBuffers[0].mData, *(const float **)&v69[1].mBuffers[0].mNumberChannels, (float *)v70->mBuffers[0].mData, *(float **)&v70[1].mBuffers[0].mNumberChannels, *(float **)(v71 + 16), (float *)v72->mBuffers[0].mData);
    uint64_t v82 = *((void *)this + 69);
    long long v83 = *(_OWORD *)(v82 + 72);
    long long v84 = *(_OWORD *)(v82 + 104);
    long long v85 = *(_OWORD *)(v82 + 56);
    *((_OWORD *)this + 37) = *(_OWORD *)(v82 + 88);
    *((_OWORD *)this + 38) = v84;
    *int v73 = v85;
    *((_OWORD *)this + 36) = v83;
    long long v86 = *(_OWORD *)(v82 + 136);
    long long v87 = *(_OWORD *)(v82 + 152);
    long long v88 = *(_OWORD *)(v82 + 120);
    *((void *)this + 84) = *(void *)(v82 + 168);
    *((_OWORD *)this + 40) = v86;
    *((_OWORD *)this + 41) = v87;
    *((_OWORD *)this + 39) = v88;
    int v89 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNFNSwitch *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v89, 0xDu, *((float *)this + 153), 0);
    uint64_t v90 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNFNSwitch *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v90, 0xEu, *((float *)this + 154), 0);
    uint64_t v91 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNFNSwitch *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v91, 0xFu, *((float *)this + 155), 0);
    int v92 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNFNSwitch *)((char *)this + 32), 0);
    float v93 = 0.0;
    if (*((unsigned char *)this + 624)) {
      float v93 = 1.0;
    }
    ausdk::AUElement::SetParameter(v92, 0x10u, v93, 0);
    int v94 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNFNSwitch *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v94, 0x11u, (float)*((unsigned int *)this + 157), 0);
    v95 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNFNSwitch *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v95, 0x12u, (float)*((unsigned int *)this + 158), 0);
  }
  int v96 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNFNSwitch *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v96, 0x13u, (float)*((unsigned int *)this + 159), 0);
  v97 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNFNSwitch *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v97, 0x14u, *((float *)this + 160), 0);
  int v98 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNFNSwitch *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v98, 0x15u, *((float *)this + 161), 0);
  v99 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNFNSwitch *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v99, 0x16u, *((float *)this + 162), 0);
  int v100 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNFNSwitch *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v100, 0x17u, *((float *)this + 163), 0);
  v101 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNFNSwitch *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v101, 0x18u, *((float *)this + 164), 0);
  return 0;
}

uint64_t AUNFNSwitch::CanScheduleParameters(AUNFNSwitch *this)
{
  return 0;
}

uint64_t AUNFNSwitch::SetParameter(AUNFNSwitch *this, unsigned int a2, int a3, float a4)
{
  if (a3) {
    return 4294956418;
  }
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNFNSwitch *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(Element, a2, a4, 0);
  uint64_t result = 0;
  uint64_t v9 = 528;
  if (a2 - 20 < 0xA) {
    uint64_t v9 = 536;
  }
  ++*(_DWORD *)((char *)this + v9);
  return result;
}

uint64_t AUNFNSwitch::SetProperty(AUNFNSwitch *this, int a2, int a3, unsigned int a4, unsigned char *a5, unsigned int a6)
{
  if (a3) {
    return 4294956417;
  }
  if (a2 == 3700)
  {
    uint64_t result = 4294956445;
    if (a6 >= 4)
    {
      if (*a5) {
        return 0;
      }
      else {
        return 4294956445;
      }
    }
  }
  else
  {
    if (a2 != 21) {
      return 4294956417;
    }
    uint64_t result = 0;
    *((unsigned char *)this + 544) = *(_DWORD *)a5 != 0;
  }
  return result;
}

uint64_t AUNFNSwitch::GetProperty(AUNFNSwitch *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  if (a3) {
    return 4294956417;
  }
  if (a2 == 3700)
  {
    CFStringRef v6 = (unsigned __int8 *)this + 376;
  }
  else
  {
    if (a2 != 21) {
      return 4294956417;
    }
    CFStringRef v6 = (unsigned __int8 *)this + 544;
  }
  uint64_t result = 0;
  *a5 = *v6;
  return result;
}

uint64_t AUNFNSwitch::GetPropertyInfo(AUNFNSwitch *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3 || a2 != 3700 && a2 != 21) {
    return 4294956417;
  }
  uint64_t result = 0;
  *a6 = 1;
  *a5 = 4;
  return result;
}

uint64_t AUNFNSwitch::Reset(AUNFNSwitch *this)
{
  uint64_t v1 = *((void *)this + 69);
  *(void *)(v1 + 24) = 0;
  *(_DWORD *)(v1 + 20) = 0;
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v2 = *(void *)(v1 + 40);
  if (v2 != v3)
  {
    unint64_t v4 = 0;
    unsigned int v5 = 1;
    do
    {
      CFStringRef v6 = *(VPTimeFreqConverter **)(v3 + 8 * v4);
      if (v6)
      {
        VPTimeFreqConverter::~VPTimeFreqConverter(v6);
        MEMORY[0x1C185D370]();
        VPTimeFreqConverter_Create();
      }
      unint64_t v4 = v5++;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  return 0;
}

uint64_t AUNFNSwitch::Initialize(AUNFNSwitch *this)
{
  unsigned int v2 = 0;
  uint64_t v3 = (AUNFNSwitch *)((char *)this + 80);
  while (*(_DWORD *)(ausdk::AUScope::SafeGetElement(v3, v2) + 108) == 2)
  {
    if (++v2 == 3)
    {
      unsigned int v4 = 0;
      for (char i = 1; ; char i = 0)
      {
        char v6 = i;
        uint64_t Element = ausdk::AUScope::SafeGetElement((AUNFNSwitch *)((char *)this + 128), v4);
        if (*(_DWORD *)(Element + 108) != 1) {
          break;
        }
        unsigned int v4 = 1;
        if ((v6 & 1) == 0)
        {
          uint64_t v8 = *((void *)this + 69);
          int v9 = *((_DWORD *)this + 84);
          *(void *)(v8 + 8) = *(void *)(Element + 80);
          *(_DWORD *)(v8 + 16) = v9;
          uint64_t v13 = 0;
          std::vector<void *>::assign(v8 + 32, 5uLL, &v13);
          if (*(void *)(v8 + 40) != *(void *)(v8 + 32)) {
            VPTimeFreqConverter_Create();
          }
          unint64_t v10 = (2 * *(_DWORD *)(v8 + 16));
          LODWORD(v13) = 0;
          std::vector<float>::assign((char **)(v8 + 176), v10, &v13);
          unint64_t v11 = *(unsigned int *)(v8 + 16);
          LODWORD(v13) = 0;
          std::vector<float>::assign((char **)(v8 + 200), v11, &v13);
          *(unsigned char *)uint64_t v8 = 1;
          (*(void (**)(AUNFNSwitch *, void, void))(*(void *)this + 72))(this, 0, 0);
          return 0;
        }
      }
      return 4294956421;
    }
  }
  return 4294956421;
}

void AUNFNSwitch::~AUNFNSwitch(AUNFNSwitch *this)
{
  AUNFNSwitch::~AUNFNSwitch(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  VPTimeFreqConverter *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t vars8;

  *(void *)this = &unk_1F14AE458;
  unsigned int v2 = (void *)*((void *)this + 69);
  if (v2)
  {
    unsigned int v4 = v2[4];
    uint64_t v3 = v2[5];
    if (v3 != v4)
    {
      unsigned int v5 = 0;
      char v6 = 1;
      do
      {
        UInt32 v7 = *(VPTimeFreqConverter **)(v4 + 8 * v5);
        if (v7)
        {
          VPTimeFreqConverter::~VPTimeFreqConverter(v7);
          MEMORY[0x1C185D370]();
          *(void *)(v2[4] + 8 * v5) = 0;
          unsigned int v4 = v2[4];
          uint64_t v3 = v2[5];
        }
        unsigned int v5 = v6++;
      }
      while (v5 < (v3 - v4) >> 3);
    }
    uint64_t v8 = (void *)v2[25];
    if (v8)
    {
      v2[26] = v8;
      operator delete(v8);
    }
    int v9 = (void *)v2[22];
    if (v9)
    {
      v2[23] = v9;
      operator delete(v9);
    }
    unint64_t v10 = (void *)v2[4];
    if (v10)
    {
      v2[5] = v10;
      operator delete(v10);
    }
    MEMORY[0x1C185D370](v2, 0x1080C40FD18A842);
  }

  ausdk::AUBase::~AUBase(this);
}

uint64_t VoiceProcessorV3::ProcessDownlinkAudio(atomic_uint *this, AudioBufferList *a2, AudioBufferList *a3, AudioBufferList *a4, AudioBufferList *a5, uint64_t a6, uint64_t a7)
{
  int v9 = (VoiceProcessorV3 *)this;
  uint64_t v417 = *MEMORY[0x1E4F143B8];
  unint64_t v10 = (char *)(this + 3138);
  atomic_fetch_add(this + 621, 1u);
  if (this[620])
  {
    VoiceProcessorV2::LogIOError((uint64_t)this, 23.006, (float)this[3130], 0.0, 0.0, "processdl: tryer failed to acquire lock", a3, a4);
    unint64_t v11 = (VoiceProcessorV3 *)((char *)v9 + 2576);
    CADeprecated::CAMutex::Lock((VoiceProcessorV3 *)((char *)v9 + 2576));
LABEL_3:
    ++*((_DWORD *)v9 + 3130);
    CADeprecated::CAMutex::Unlock(v11);
    LOBYTE(v12) = 0;
    uint64_t v13 = 1937006964;
    double v14 = 0.0;
LABEL_602:
    if (v10[3409] && *((void *)v9 + 1579))
    {
      std::string v227 = (const AudioBufferList *)mach_absolute_time();
      int v228 = (int *)*((void *)v9 + 1579);
      data = (AudioUnitParameterValue *)&VPStrategyManager::StateAsString(unsigned long long)::stateNames;
      if (VPTimestampLogScope(void)::once != -1) {
        goto LABEL_633;
      }
      goto LABEL_605;
    }
    goto LABEL_614;
  }
  int v388 = a3;
  v389 = a2;
  v387 = a4;
  if (!*((unsigned char *)this + 477))
  {
    VoiceProcessorV2::LogIOError((uint64_t)this, 23.005, (float)this[3130], 0.0, 0.0, "processdl: not ok to process?!");
    unint64_t v11 = (VoiceProcessorV3 *)((char *)v9 + 2576);
    CADeprecated::CAMutex::Lock((VoiceProcessorV3 *)((char *)v9 + 2576));
    goto LABEL_3;
  }
  int v15 = *((unsigned __int8 *)this + 15961);
  uint64_t v379 = a6;
  if (v15)
  {
    if (*((void *)this + 1579))
    {
      double v14 = (double)mach_absolute_time() * 0.0000000416666667;
      if (*((double *)v9 + 1994) == 0.0) {
        *((double *)v9 + 1994) = v14;
      }
    }
    else
    {
      double v14 = 0.0;
    }
    if (v10[3409])
    {
      if (*v10)
      {
        double v16 = *((double *)v9 + 1568);
        double v17 = *(double *)a7;
        if (v16 != *(double *)a7)
        {
          VoiceProcessorV2::WriteTSOverload((std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)v9, v16, v17, 2);
          double v17 = *((double *)v9 + 1568);
          if (*(double *)a7 < v17)
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            uint64_t v18 = (void *)VPLogScope(void)::scope;
            if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
            {
              int v19 = (*v18 ? *v18 : MEMORY[0x1E4F14500]);
              if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
              {
                uint64_t v20 = *((void *)v9 + 1568);
                Float64 v21 = *(double *)a7;
                UInt64 v22 = *(void *)(a7 + 8);
                Float64 v23 = *(double *)(a7 + 16);
                AudioTimeStampFlags v24 = *(_DWORD *)(a7 + 56);
                LODWORD(buf.mSampleTime) = 136316674;
                *(void *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v3.cpp";
                WORD2(buf.mHostTime) = 1024;
                *(_DWORD *)((char *)&buf.mHostTime + 6) = 73;
                WORD1(buf.mRateScalar) = 2048;
                *(void *)((char *)&buf.mRateScalar + 4) = v20;
                WORD2(buf.mWordClockTime) = 2048;
                *(Float64 *)((char *)&buf.mWordClockTime + 6) = v21;
                HIWORD(buf.mSMPTETime.mCounter) = 2048;
                *(void *)&buf.mSMPTETime.mType = v22;
                buf.mSMPTETime.mHours = 2048;
                *(Float64 *)&buf.mSMPTETime.mMinutes = v23;
                HIWORD(buf.mFlags) = 1024;
                buf.mReserved = v24;
                _os_log_impl(&dword_1BB0CE000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> sprk sample time jumped backwards, expected sample time: %.2lf, input sample time: %.2lf, input host time: %lld, input rate scalar: %.2lf, input flag: %d", (uint8_t *)&buf, 0x40u);
              }
            }
            float v25 = (int *)*((void *)v9 + 1578);
            if (v25 && (v10[3409] || v10[3410]))
            {
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              CALegacyLog::log(v25, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v3/vpProcessDownlink_v3.cpp", 73, "ProcessDownlinkAudio", "sprk sample time jumped backwards, expected sample time: %.2lf, input sample time: %.2lf, input host time: %lld, input rate scalar: %.2lf, input flag: %d", *((double *)v9 + 1568), *(double *)a7, *(void *)(a7 + 8), *(double *)(a7 + 16), *(_DWORD *)(a7 + 56));
            }
            VoiceProcessorV2::LogIOError((uint64_t)v9, 23.008, (float)*((unsigned int *)v9 + 3130), 0.0, 0.0, "sprk sample time jumped backwards");
          }
        }
      }
      else
      {
        char *v10 = 1;
        VoiceProcessorV2::WriteTSOverload((std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)v9, 0.0, *(double *)a7, 2);
        double v17 = *((double *)v9 + 215);
        double v26 = *(double *)a7 - v17;
        double v27 = (float)((float)((float)(roundf(*((float *)v9 + 289) * (float)*((unsigned int *)v9 + 124))
                                    + (float)*((unsigned int *)v9 + 124))
                            + (float)*((unsigned int *)v9 + 293))
                    + (float)*((unsigned int *)v9 + 294));
        if (v26 != v27)
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          unint64_t v28 = (void *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
          {
            uint64_t v29 = (*v28 ? *v28 : MEMORY[0x1E4F14500]);
            if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
            {
              LODWORD(buf.mSampleTime) = 136315906;
              *(void *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v3.cpp";
              WORD2(buf.mHostTime) = 1024;
              *(_DWORD *)((char *)&buf.mHostTime + 6) = 63;
              WORD1(buf.mRateScalar) = 2048;
              *(double *)((char *)&buf.mRateScalar + 4) = v27;
              WORD2(buf.mWordClockTime) = 2048;
              *(double *)((char *)&buf.mWordClockTime + 6) = v26;
              _os_log_impl(&dword_1BB0CE000, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> bad mic-speaker delay: expected sample time diff: %.1lf, actual sample time diff: %.1lf", (uint8_t *)&buf, 0x26u);
            }
          }
          unint64_t v30 = (int *)*((void *)v9 + 1578);
          if (v30 && (v10[3409] || v10[3410]))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            CALegacyLog::log(v30, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v3/vpProcessDownlink_v3.cpp", 63, "ProcessDownlinkAudio", "bad mic-speaker delay: expected sample time diff: %.1lf, actual sample time diff: %.1lf", v27, v26);
          }
          VoiceProcessorV2::LogIOError((uint64_t)v9, 23.009, (float)*((unsigned int *)v9 + 3130), 0.0, 0.0, "bad relative mic-ref TS");
        }
      }
      LODWORD(v17) = *((_DWORD *)v9 + 121);
      *((double *)v9 + 1568) = *(double *)a7 + (double)*(unint64_t *)&v17;
    }
  }
  else
  {
    double v14 = 0.0;
  }
  int v406 = (char *)v9 + 2488;
  char v407 = 0;
  char v407 = (*(uint64_t (**)(void))(*((void *)v9 + 311) + 16))();
  CADeprecated::CAMutex::Lock((VoiceProcessorV3 *)((char *)v9 + 2576));
  ++*((_DWORD *)v9 + 3130);
  CADeprecated::CAMutex::Unlock((VoiceProcessorV3 *)((char *)v9 + 2576));
  unsigned int v31 = *((_DWORD *)v9 + 121);
  unsigned int v405 = v31;
  unsigned int NumberOfSourceFrames = v31;
  int v32 = v10[3409];
  if (!v10[3409])
  {
    if (a5->mNumberBuffers == *((_DWORD *)v9 + 89))
    {
      v367 = (VoiceProcessorV3 *)((char *)v9 + 328);
      if (!v10[3410]) {
        goto LABEL_81;
      }
      goto LABEL_55;
    }
LABEL_601:
    CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v406);
    uint64_t v13 = 0;
    LOBYTE(v12) = 1;
    goto LABEL_602;
  }
  v10[385] = 1;
  if (a5->mNumberBuffers != *((_DWORD *)v9 + 89)) {
    goto LABEL_601;
  }
  v367 = (VoiceProcessorV3 *)((char *)v9 + 328);
LABEL_55:
  if (!v389)
  {
    float v33 = (AudioBufferList *)*((void *)v9 + 199);
    UInt32 mNumberBuffers = v33->mNumberBuffers;
    v389 = v33;
    if (mNumberBuffers)
    {
      unint64_t v35 = 0;
      p_mData = &v33->mBuffers[0].mData;
      do
      {
        bzero(*p_mData, *((unsigned int *)p_mData - 1));
        ++v35;
        p_mData += 2;
      }
      while (v35 < v33->mNumberBuffers);
      int v32 = v10[3409];
    }
  }
  if (v32 && (VoiceProcessorV2::InjectionFilesReadSignal(v9, 1, v379, v389), v10[3409]) || v10[3410]) {
    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v9, 0x32u, v379, v389, (AudioTimeStamp *)a7);
  }
  if (!v388)
  {
    float v37 = (AudioBufferList *)*((void *)v9 + 200);
    UInt32 v38 = v37->mNumberBuffers;
    int v388 = v37;
    if (v38)
    {
      unint64_t v39 = 0;
      float v40 = &v37->mBuffers[0].mData;
      do
      {
        bzero(*v40, *((unsigned int *)v40 - 1));
        ++v39;
        v40 += 2;
      }
      while (v39 < v37->mNumberBuffers);
    }
  }
  if (v10[3409] && (VoiceProcessorV2::InjectionFilesReadSignal(v9, 10, v379, v388), v10[3409]) || v10[3410]) {
    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v9, 0x53u, v379, v388, (AudioTimeStamp *)a7);
  }
  if (!v387)
  {
    float v41 = (AudioBufferList *)*((void *)v9 + 201);
    UInt32 v42 = v41->mNumberBuffers;
    v387 = v41;
    if (v42)
    {
      unint64_t v43 = 0;
      unint64_t v44 = &v41->mBuffers[0].mData;
      do
      {
        bzero(*v44, *((unsigned int *)v44 - 1));
        ++v43;
        v44 += 2;
      }
      while (v43 < v41->mNumberBuffers);
    }
  }
  if (v10[3409] && (VoiceProcessorV2::InjectionFilesReadSignal(v9, 11, v379, v387), v10[3409]) || v10[3410]) {
    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v9, 0x54u, v379, v387, (AudioTimeStamp *)a7);
  }
  unsigned int v31 = *((_DWORD *)v9 + 121);
LABEL_81:
  int v380 = v9;
  v381 = v10;
  if (v31 != v379)
  {
    if (v10[3331])
    {
      double v55 = (double)(mach_absolute_time() - *((void *)v9 + 1988)) * 0.0000000416666667;
      double v56 = *((double *)v9 + 1991);
      if (v55 > v56)
      {
        *((double *)v9 + 1991) = v56 + 10.0;
        VoiceProcessorV2::LogIOError((uint64_t)v9, 23.002, (float)*((unsigned int *)v9 + 3130), (float)*((unsigned int *)v9 + 121), (float)v379, "processdownlinkaudio: <block size mismatch>");
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        long long v57 = (void *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
        {
          long long v58 = (*v57 ? *v57 : MEMORY[0x1E4F14500]);
          if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
          {
            LODWORD(buf.mSampleTime) = 136315650;
            *(void *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v3.cpp";
            WORD2(buf.mHostTime) = 1024;
            *(_DWORD *)((char *)&buf.mHostTime + 6) = 164;
            WORD1(buf.mRateScalar) = 2048;
            *(double *)((char *)&buf.mRateScalar + 4) = v55;
            _os_log_impl(&dword_1BB0CE000, v58, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> CoreAudio: ***** VP BLOCK SERIOUS ERROR: PROCESSDLAUDIO BAD BLOCK CONFIG for over %.6f seconds *****\n", (uint8_t *)&buf, 0x1Cu);
          }
        }
        uint64_t v59 = (int *)*((void *)v9 + 1578);
        if (v59 && (v10[3409] || v10[3410]))
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          CALegacyLog::log(v59, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v3/vpProcessDownlink_v3.cpp", 164, "ProcessDownlinkAudio", "CoreAudio: ***** VP BLOCK SERIOUS ERROR: PROCESSDLAUDIO BAD BLOCK CONFIG for over %.6f seconds *****\n", v55);
        }
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        uint64_t v60 = (void *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
        {
          uint64_t v61 = (*v60 ? *v60 : MEMORY[0x1E4F14500]);
          if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
          {
            UInt32 mDataByteSize = a5->mBuffers[0].mDataByteSize;
            int v63 = *((_DWORD *)v9 + 121);
            CAFormatter::CAFormatter((CAFormatter *)&v402, v367);
            int v64 = *((_DWORD *)v9 + 3130);
            LODWORD(buf.mSampleTime) = 136316674;
            *(void *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v3.cpp";
            WORD2(buf.mHostTime) = 1024;
            *(_DWORD *)((char *)&buf.mHostTime + 6) = 168;
            WORD1(buf.mRateScalar) = 1024;
            HIDWORD(buf.mRateScalar) = v379;
            LOWORD(buf.mWordClockTime) = 1024;
            *(_DWORD *)((char *)&buf.mWordClockTime + 2) = mDataByteSize;
            HIWORD(buf.mWordClockTime) = 1024;
            *(_DWORD *)&buf.mSMPTETime.mSubframes = v63;
            LOWORD(buf.mSMPTETime.mCounter) = 2080;
            *(Float64 *)((char *)&buf.mSMPTETime.mCounter + 2) = v402.mSampleTime;
            HIWORD(buf.mSMPTETime.mFlags) = 1024;
            *(_DWORD *)&buf.mSMPTETime.mHours = v64;
            _os_log_impl(&dword_1BB0CE000, v61, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> processdownlinkaudio: <block size mismatch btwn expected and actual> num frames received  = %u (data byte int64_t size = %u).\tdl mix blk int64_t size = %u\n\tdl mix asbd = %s\n\t process dl callcount = %u\n", (uint8_t *)&buf, 0x34u);
            if (*(void *)&v402.mSampleTime) {
              free(*(void **)&v402.mSampleTime);
            }
            unint64_t v10 = v381;
          }
        }
        long long v65 = (int *)*((void *)v9 + 1578);
        if (v65)
        {
          if (v10[3409] || v10[3410])
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            uint64_t v66 = VPLogScope(void)::scope;
            UInt32 v67 = a5->mBuffers[0].mDataByteSize;
            int v68 = *((_DWORD *)v9 + 121);
            CAFormatter::CAFormatter((CAFormatter *)&buf, v367);
            CALegacyLog::log(v65, 1, v66, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v3/vpProcessDownlink_v3.cpp", 168, "ProcessDownlinkAudio", "processdownlinkaudio: <block size mismatch btwn expected and actual> num frames received  = %u (data byte int64_t size = %u).\tdl mix blk int64_t size = %u\n\tdl mix asbd = %s\n\t process dl callcount = %u\n", v379, v67, v68, *(const char **)&buf.mSampleTime, *((_DWORD *)v9 + 3130));
LABEL_196:
            if (*(void *)&buf.mSampleTime) {
              free(*(void **)&buf.mSampleTime);
            }
          }
        }
      }
    }
    else
    {
      v10[3331] = 1;
      *((void *)v9 + 1988) = mach_absolute_time();
      *((void *)v9 + 1991) = 0x3FF0000000000000;
      VoiceProcessorV2::LogIOError((uint64_t)v9, 23.002, (float)*((unsigned int *)v9 + 3130), (float)*((unsigned int *)v9 + 121), (float)v379, "processdl: <block size mismatch>");
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      long long v76 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(2, VPLogScope(void)::scope, 0))
      {
        long long v77 = (*v76 ? *v76 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf.mSampleTime) = 136315394;
          *(void *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v3.cpp";
          WORD2(buf.mHostTime) = 1024;
          *(_DWORD *)((char *)&buf.mHostTime + 6) = 144;
          _os_log_impl(&dword_1BB0CE000, v77, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> CoreAudio: ***** VP BLOCK WARNING: PROCESSDLAUDIO TRANSIENT INCORRECT BLOCK CONFIG", (uint8_t *)&buf, 0x12u);
        }
      }
      long long v78 = (int *)*((void *)v9 + 1578);
      if (v78 && (v10[3409] || v10[3410]))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log(v78, 2, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v3/vpProcessDownlink_v3.cpp", 144, "ProcessDownlinkAudio", "CoreAudio: ***** VP BLOCK WARNING: PROCESSDLAUDIO TRANSIENT INCORRECT BLOCK CONFIG");
      }
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      long long v79 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(2, VPLogScope(void)::scope, 0))
      {
        uint64_t v80 = (*v79 ? *v79 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
        {
          UInt32 v81 = a5->mBuffers[0].mDataByteSize;
          int v82 = *((_DWORD *)v9 + 121);
          CAFormatter::CAFormatter((CAFormatter *)&v402, v367);
          int v83 = *((_DWORD *)v9 + 3130);
          LODWORD(buf.mSampleTime) = 136316674;
          *(void *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v3.cpp";
          WORD2(buf.mHostTime) = 1024;
          *(_DWORD *)((char *)&buf.mHostTime + 6) = 148;
          WORD1(buf.mRateScalar) = 1024;
          HIDWORD(buf.mRateScalar) = v379;
          LOWORD(buf.mWordClockTime) = 1024;
          *(_DWORD *)((char *)&buf.mWordClockTime + 2) = v81;
          HIWORD(buf.mWordClockTime) = 1024;
          *(_DWORD *)&buf.mSMPTETime.mSubframes = v82;
          LOWORD(buf.mSMPTETime.mCounter) = 2080;
          *(Float64 *)((char *)&buf.mSMPTETime.mCounter + 2) = v402.mSampleTime;
          HIWORD(buf.mSMPTETime.mFlags) = 1024;
          *(_DWORD *)&buf.mSMPTETime.mHours = v83;
          _os_log_impl(&dword_1BB0CE000, v80, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> warning: processdownlinkaudio: <transient block size mismatch btwn expected and actual> num frames received  = %u (data byte int64_t size = %u).\t dl mix buff int64_t size = %u\n\tdlmix asbd = %s\n\tprocess dl callcount = %u\n", (uint8_t *)&buf, 0x34u);
          if (*(void *)&v402.mSampleTime) {
            free(*(void **)&v402.mSampleTime);
          }
          unint64_t v10 = v381;
        }
      }
      long long v84 = (int *)*((void *)v9 + 1578);
      if (v84 && (v10[3409] || v10[3410]))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        uint64_t v85 = VPLogScope(void)::scope;
        UInt32 v86 = a5->mBuffers[0].mDataByteSize;
        int v87 = *((_DWORD *)v9 + 121);
        CAFormatter::CAFormatter((CAFormatter *)&buf, v367);
        CALegacyLog::log(v84, 2, v85, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v3/vpProcessDownlink_v3.cpp", 148, "ProcessDownlinkAudio", "warning: processdownlinkaudio: <transient block size mismatch btwn expected and actual> num frames received  = %u (data byte int64_t size = %u).\t dl mix buff int64_t size = %u\n\tdlmix asbd = %s\n\tprocess dl callcount = %u\n", v379, v86, v87, *(const char **)&buf.mSampleTime, *((_DWORD *)v9 + 3130));
        goto LABEL_196;
      }
    }
    if (v10[3409] && (VoiceProcessorV2::InjectionFilesReadSignal(v9, 2, v379, a5), v10[3409]) || v10[3410]) {
      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v9, 0x44u, v379, a5, (AudioTimeStamp *)a7);
    }
    uint64_t v75 = *((void *)v9 + 2003);
    if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
      dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_5887);
    }
    if (!AudioIssueDetectorLibraryLoader(void)::libSym) {
      goto LABEL_601;
    }
LABEL_205:
    AudioIssueDetectorLibraryLoader(void)::libSym(v75, 68, 0, a5, v379, a7);
    goto LABEL_601;
  }
  if (a5->mBuffers[0].mDataByteSize != *((_DWORD *)v9 + 88) * v379)
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    long long v69 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      id v70 = (*v69 ? *v69 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
      {
        UInt32 v71 = a5->mBuffers[0].mDataByteSize;
        int v72 = *((_DWORD *)v9 + 88) * v379;
        LODWORD(buf.mSampleTime) = 136315906;
        *(void *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v3.cpp";
        WORD2(buf.mHostTime) = 1024;
        *(_DWORD *)((char *)&buf.mHostTime + 6) = 182;
        WORD1(buf.mRateScalar) = 1024;
        HIDWORD(buf.mRateScalar) = v71;
        LOWORD(buf.mWordClockTime) = 1024;
        *(_DWORD *)((char *)&buf.mWordClockTime + 2) = v72;
        _os_log_impl(&dword_1BB0CE000, v70, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> processdownlinkaudio: SERIOUS ERROR: ioOutputData->mBuffers[0].UInt32 mDataByteSize = %u, expected = %u", (uint8_t *)&buf, 0x1Eu);
      }
    }
    int v73 = (int *)*((void *)v9 + 1578);
    int v74 = v10[3409];
    if (v73)
    {
      if (!v10[3409] && !v10[3410]) {
        goto LABEL_158;
      }
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      CALegacyLog::log(v73, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v3/vpProcessDownlink_v3.cpp", 182, "ProcessDownlinkAudio", "processdownlinkaudio: SERIOUS ERROR: ioOutputData->mBuffers[0].UInt32 mDataByteSize = %u, expected = %u", a5->mBuffers[0].mDataByteSize, *((_DWORD *)v9 + 88) * v379);
      int v74 = v10[3409];
    }
    if (v74)
    {
      VoiceProcessorV2::InjectionFilesReadSignal(v9, 2, v379, a5);
      if (v10[3409])
      {
LABEL_159:
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v9, 0x44u, v379, a5, (AudioTimeStamp *)a7);
LABEL_160:
        uint64_t v75 = *((void *)v9 + 2003);
        if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
          dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_5887);
        }
        if (!AudioIssueDetectorLibraryLoader(void)::libSym) {
          goto LABEL_601;
        }
        goto LABEL_205;
      }
    }
LABEL_158:
    if (!v10[3410]) {
      goto LABEL_160;
    }
    goto LABEL_159;
  }
  if (!v10[3331]) {
    goto LABEL_229;
  }
  v10[3331] = 0;
  double v45 = (double)(mach_absolute_time() - *((void *)v9 + 1988)) * 0.0000000416666667;
  VoiceProcessorV2::LogIOError((uint64_t)v9, 23.002, (float)*((unsigned int *)v9 + 3130), (float)*((unsigned int *)v9 + 121), (float)v379, "processdownlinkaudio: <block size no longer mismatched>");
  if (v45 <= 1.0)
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    long long v88 = CALog::LogObjIfEnabled(2, VPLogScope(void)::scope);
    if (v88)
    {
      int v89 = v88;
      if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf.mSampleTime) = 136315650;
        *(void *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v3.cpp";
        WORD2(buf.mHostTime) = 1024;
        *(_DWORD *)((char *)&buf.mHostTime + 6) = 205;
        WORD1(buf.mRateScalar) = 2048;
        *(double *)((char *)&buf.mRateScalar + 4) = v45;
        _os_log_impl(&dword_1BB0CE000, v89, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> CoreAudio: ***** VP BLOCK WARNING: BAD BLOCK CONFIG CORRECTED after %.6f seconds *****\n", (uint8_t *)&buf, 0x1Cu);
      }
    }
    uint64_t v90 = (int *)*((void *)v9 + 1578);
    if (v90 && (v10[3409] || v10[3410]))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      CALegacyLog::log(v90, 2, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v3/vpProcessDownlink_v3.cpp", 205, "ProcessDownlinkAudio", "CoreAudio: ***** VP BLOCK WARNING: BAD BLOCK CONFIG CORRECTED after %.6f seconds *****\n", v45);
    }
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    uint64_t v91 = CALog::LogObjIfEnabled(2, VPLogScope(void)::scope);
    if (v91)
    {
      int v92 = v91;
      if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
      {
        int v93 = *((_DWORD *)v9 + 121);
        LODWORD(buf.mSampleTime) = 136315906;
        *(void *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v3.cpp";
        WORD2(buf.mHostTime) = 1024;
        *(_DWORD *)((char *)&buf.mHostTime + 6) = 206;
        WORD1(buf.mRateScalar) = 1024;
        HIDWORD(buf.mRateScalar) = v379;
        LOWORD(buf.mWordClockTime) = 1024;
        *(_DWORD *)((char *)&buf.mWordClockTime + 2) = v93;
        _os_log_impl(&dword_1BB0CE000, v92, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> processdownlinkaudio: <block size no longer mismatched between expected and actual> num frames received = %u. hwio buff int64_t size = %u\n", (uint8_t *)&buf, 0x1Eu);
      }
    }
    long long v52 = (int *)*((void *)v9 + 1578);
    if (v52 && (v10[3409] || v10[3410]))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      uint64_t v53 = 206;
      int v54 = 2;
      goto LABEL_228;
    }
  }
  else
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    float v46 = CALog::LogObjIfEnabled(1, VPLogScope(void)::scope);
    if (v46)
    {
      float v47 = v46;
      if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf.mSampleTime) = 136315650;
        *(void *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v3.cpp";
        WORD2(buf.mHostTime) = 1024;
        *(_DWORD *)((char *)&buf.mHostTime + 6) = 200;
        WORD1(buf.mRateScalar) = 2048;
        *(double *)((char *)&buf.mRateScalar + 4) = v45;
        _os_log_impl(&dword_1BB0CE000, v47, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> CoreAudio: ***** VP BLOCK SERIOUS ERROR: BAD BLOCK CONFIG CORRECTED after %.6f seconds *****\n", (uint8_t *)&buf, 0x1Cu);
      }
    }
    char v48 = (int *)*((void *)v9 + 1578);
    if (v48 && (v10[3409] || v10[3410]))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      CALegacyLog::log(v48, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v3/vpProcessDownlink_v3.cpp", 200, "ProcessDownlinkAudio", "CoreAudio: ***** VP BLOCK SERIOUS ERROR: BAD BLOCK CONFIG CORRECTED after %.6f seconds *****\n", v45);
    }
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    int64_t v49 = CALog::LogObjIfEnabled(1, VPLogScope(void)::scope);
    if (v49)
    {
      int v50 = v49;
      if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
      {
        int v51 = *((_DWORD *)v9 + 121);
        LODWORD(buf.mSampleTime) = 136315906;
        *(void *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v3.cpp";
        WORD2(buf.mHostTime) = 1024;
        *(_DWORD *)((char *)&buf.mHostTime + 6) = 201;
        WORD1(buf.mRateScalar) = 1024;
        HIDWORD(buf.mRateScalar) = v379;
        LOWORD(buf.mWordClockTime) = 1024;
        *(_DWORD *)((char *)&buf.mWordClockTime + 2) = v51;
        _os_log_impl(&dword_1BB0CE000, v50, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> processdownlinkaudio: <block size no longer mismatched between expected and actual> num frames received = %u. hwio buff int64_t size = %u\n", (uint8_t *)&buf, 0x1Eu);
      }
    }
    long long v52 = (int *)*((void *)v9 + 1578);
    if (v52 && (v10[3409] || v10[3410]))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      uint64_t v53 = 201;
      int v54 = 1;
LABEL_228:
      CALegacyLog::log(v52, v54, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v3/vpProcessDownlink_v3.cpp", v53, "ProcessDownlinkAudio", "processdownlinkaudio: <block size no longer mismatched between expected and actual> num frames received = %u. hwio buff int64_t size = %u\n", v379, *((_DWORD *)v9 + 121));
    }
  }
LABEL_229:
  int v94 = (VoiceProcessor::SampleRateConverter **)*((void *)v9 + 48);
  unsigned int v95 = *((_DWORD *)v9 + 121);
  if (*((void *)v9 + 47))
  {
    if (v94)
    {
      unsigned int NumberOfSourceFrames = VoiceProcessor::SampleRateConverter::GetNumberOfSourceFrames(*v94);
      int v94 = (VoiceProcessor::SampleRateConverter **)*((void *)v9 + 47);
LABEL_236:
      unsigned int v95 = VoiceProcessor::SampleRateConverter::GetNumberOfSourceFrames(*v94);
      goto LABEL_237;
    }
    int v94 = (VoiceProcessor::SampleRateConverter **)*((void *)v9 + 47);
LABEL_235:
    unsigned int NumberOfSourceFrames = *((_DWORD *)v9 + 121);
    goto LABEL_236;
  }
  if (v94) {
    goto LABEL_235;
  }
LABEL_237:
  int v96 = (unsigned int *)*((void *)v9 + 13);
  uint64_t v97 = *v96;
  if ((int)v97 >= 1)
  {
    int v98 = v95 * *((_DWORD *)v9 + 58);
    v99 = (int *)(v96 + 3);
    do
    {
      int *v99 = v98;
      v99 += 4;
      --v97;
    }
    while (v97);
  }
  unsigned int v403 = v95;
  (*(void (**)(void))(*((void *)v9 + 12) + 16))();
  unsigned int v100 = v403;
  unsigned int v405 = v403;
  v101 = (const AudioBufferList *)*((void *)v9 + 13);
  if (v10[3409]
    && (VoiceProcessorV2::InjectionFilesReadSignal(v9, 0, v403, *((AudioBufferList **)v9 + 13)),
        v101 = (const AudioBufferList *)*((void *)v9 + 13),
        v10[3409])
    || v10[3410])
  {
    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v9, 0x33u, v403, v101, (AudioTimeStamp *)a7);
    v101 = (const AudioBufferList *)*((void *)v9 + 13);
  }
  uint64_t v102 = *((void *)v9 + 2003);
  if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_5887);
  }
  if (AudioIssueDetectorLibraryLoader(void)::libSym) {
    AudioIssueDetectorLibraryLoader(void)::libSym(v102, 51, 0, v101, v403, a7);
  }
  if (*((unsigned char *)v9 + 2082) || *((_DWORD *)v9 + 19) == 7 && *((float *)v9 + 3132) == 0.0) {
    bzero(*(void **)(*((void *)v9 + 13) + 16), 4 * v403);
  }
  int v103 = (const AudioBufferList *)*((void *)v9 + 13);
  int v104 = (CA::AudioSampleRateConverter **)*((void *)v9 + 47);
  int v374 = a5;
  if (v104)
  {
    VoiceProcessor::SampleRateConverter::Convert(v104, &v405, &NumberOfSourceFrames, v103, *((const AudioBufferList **)v9 + 23));
    unsigned int v100 = NumberOfSourceFrames;
    unsigned int v405 = NumberOfSourceFrames;
    int v103 = (const AudioBufferList *)*((void *)v9 + 23);
  }
  float v106 = VoiceProcessorV2::DetermineNoiseBasedVolume(v9);
  long long v107 = *(_OWORD *)(a7 + 16);
  *(_OWORD *)&buf.mSampleTime = *(_OWORD *)a7;
  *(_OWORD *)&buf.mRateScalar = v107;
  long long v108 = *(_OWORD *)(a7 + 48);
  long long v110 = *(_OWORD *)a7;
  long long v109 = *(_OWORD *)(a7 + 16);
  *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)(a7 + 32);
  *(_OWORD *)&buf.mSMPTETime.mHours = v108;
  long long v111 = *(_OWORD *)(a7 + 16);
  long long v112 = *(_OWORD *)(a7 + 32);
  *(_OWORD *)&v402.mSampleTime = *(_OWORD *)a7;
  *(_OWORD *)&v402.mRateScalar = v111;
  long long v113 = *(_OWORD *)(a7 + 48);
  *(_OWORD *)&v402.mSMPTETime.mSubframes = *(_OWORD *)(a7 + 32);
  *(_OWORD *)&v402.mSMPTETime.mHours = v113;
  long long v114 = *(_OWORD *)(a7 + 16);
  *(_OWORD *)&v401.mSampleTime = *(_OWORD *)a7;
  *(_OWORD *)&v401.mRateScalar = v114;
  long long v115 = *(_OWORD *)(a7 + 48);
  *(_OWORD *)&v401.mSMPTETime.mSubframes = *(_OWORD *)(a7 + 32);
  *(_OWORD *)&v401.mSMPTETime.mHours = v115;
  *(_OWORD *)&v400.mSampleTime = v110;
  *(_OWORD *)&v400.mRateScalar = v109;
  v375 = (AudioTimeStamp *)a7;
  long long v116 = *(_OWORD *)(a7 + 48);
  *(_OWORD *)&v400.mSMPTETime.mSubframes = v112;
  *(_OWORD *)&v400.mSMPTETime.mHours = v116;
  unsigned int v117 = *((_DWORD *)v9 + 130);
  if (v117)
  {
    unsigned int v118 = 0;
    unsigned int v119 = 0;
    uint64_t v120 = v100 / v117;
    int v386 = (AudioUnitParameterValue *)((char *)v9 + 16824);
    double v121 = (double)v120;
    do
    {
      if (v103->mNumberBuffers - 65 <= 0xFFFFFFBF)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          LODWORD(v415.mSampleTime) = 136315394;
          *(void *)((char *)&v415.mSampleTime + 4) = "vpProcessDownlink_v3.cpp";
          WORD2(v415.mHostTime) = 1024;
          *(_DWORD *)((char *)&v415.mHostTime + 6) = 309;
          _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v415, 0x12u);
        }
        exception = __cxa_allocate_exception(0x10uLL);
        *(void *)exception = &unk_1F14C8B68;
        exception[2] = -50;
      }
      MEMORY[0x1F4188790](Parameter);
      int v123 = (AudioBufferList *)((char *)&v365 - v122);
      bzero((char *)&v365 - v122, v124);
      uint64_t v125 = v103->mNumberBuffers;
      v123->UInt32 mNumberBuffers = v125;
      if (v125)
      {
        int v126 = &v123->mBuffers[0].mData;
        id v127 = &v103->mBuffers[0].mData;
        do
        {
          *((_DWORD *)v126 - 2) = 1;
          *((_DWORD *)v126 - 1) = 4 * v120;
          int v128 = (char *)*v127;
          v127 += 2;
          *int v126 = &v128[4 * v119];
          v126 += 2;
          --v125;
        }
        while (v125);
      }
      uint64_t v129 = *((void *)v9 + 1112);
      if ((v129 & 4) != 0 && (*((unsigned char *)v9 + 8904) & 4) != 0)
      {
        uint64_t Parameter = *((void *)v9 + 440);
        if (Parameter)
        {
          LODWORD(v415.mSampleTime) = 512;
          uint64_t Parameter = AudioUnitProcess((AudioUnit)Parameter, (AudioUnitRenderActionFlags *)&v415, &buf, v120, v123);
          if (v381[3409] || v381[3410]) {
            uint64_t Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v9, 0x55u, v120, v123, &buf);
          }
          buf.mSampleTime = buf.mSampleTime + v121;
          uint64_t v129 = *((void *)v9 + 1112);
        }
      }
      if ((v129 & 0x40) != 0 && (*((unsigned char *)v9 + 8904) & 0x40) != 0)
      {
        uint64_t Parameter = *((void *)v9 + 444);
        if (Parameter)
        {
          *(void *)&v415.mSampleTime = v123;
          v415.mHostTime = 0;
          *(void *)&v414.mSampleTime = v123;
          v414.mHostTime = 0;
          LODWORD(v399.mSampleTime) = 512;
          AudioUnitProcessMultiple((AudioUnit)Parameter, (AudioUnitRenderActionFlags *)&v399, &v402, v120, 2u, (const AudioBufferList **)&v415, 2u, (AudioBufferList **)&v414);
          v402.mSampleTime = v402.mSampleTime + v121;
          uint64_t Parameter = AudioUnitGetParameter(*((AudioUnit *)v9 + 444), 1u, 0, 0, v386);
          uint64_t v129 = *((void *)v9 + 1112);
        }
      }
      if (v129 & 0x100) != 0 && (*((unsigned char *)v9 + 8905))
      {
        uint64_t Parameter = *((void *)v9 + 446);
        if (Parameter)
        {
          AudioUnitSetParameter((AudioUnit)Parameter, 5u, 0, 0, v106, 0);
          LODWORD(v415.mSampleTime) = 512;
          uint64_t Parameter = AudioUnitProcess(*((AudioUnit *)v9 + 446), (AudioUnitRenderActionFlags *)&v415, &v401, v120, v123);
          if (v381[3409] || v381[3410]) {
            uint64_t Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v9, 0x36u, v120, v123, &v401);
          }
          v401.mSampleTime = v401.mSampleTime + v121;
          uint64_t v129 = *((void *)v9 + 1112);
        }
      }
      if ((v129 & 0x4000) != 0 && (*((unsigned char *)v9 + 8905) & 0x40) != 0 && *((void *)v9 + 452))
      {
        uint64_t Parameter = (*(uint64_t (**)(VoiceProcessorV3 *, AudioBufferList *, uint64_t, AudioTimeStamp *))(*(void *)v9 + 672))(v9, v123, v120, &v400);
        if (v381[3409] || v381[3410]) {
          uint64_t Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v9, 0x7Bu, v120, v123, &v400);
        }
        v400.mSampleTime = v400.mSampleTime + v121;
      }
      v119 += v120;
      ++v118;
    }
    while (v118 < *((_DWORD *)v9 + 130));
  }
  if (*((_DWORD *)v9 + 1130) == 1)
  {
    int v130 = (_DWORD *)*((void *)v9 + 197);
    if (v130) {
      ABLRingBuffer<float>::ReadFrom((_DWORD *)v9 + 384, *((_DWORD *)v9 + 121), v130);
    }
  }
  uint64_t v132 = *((void *)v9 + 47);
  uint64_t v131 = *((void *)v9 + 48);
  a5 = v374;
  unint64_t v10 = v381;
  if (v131)
  {
    double v133 = v375;
    if (v132)
    {
      unsigned int NumberOfSourceFrames = *((_DWORD *)v9 + 121);
      uint64_t v131 = VoiceProcessor::SampleRateConverter::Convert((CA::AudioSampleRateConverter **)v131, &v405, &NumberOfSourceFrames, *((const AudioBufferList **)v9 + 23), *((const AudioBufferList **)v9 + 24));
      int v134 = (UInt32 *)*((void *)v9 + 24);
      unsigned int v405 = NumberOfSourceFrames;
    }
    else
    {
      uint64_t v131 = VoiceProcessor::SampleRateConverter::Convert((CA::AudioSampleRateConverter **)v131, &v405, &NumberOfSourceFrames, *((const AudioBufferList **)v9 + 13), *((const AudioBufferList **)v9 + 24));
      unsigned int v405 = NumberOfSourceFrames;
      int v134 = (UInt32 *)*((void *)v9 + 24);
    }
  }
  else
  {
    double v133 = v375;
    if (v132) {
      int v134 = (UInt32 *)*((void *)v9 + 23);
    }
    else {
      int v134 = (UInt32 *)*((void *)v9 + 13);
    }
  }
  long long v135 = *(_OWORD *)&v133->mRateScalar;
  *(_OWORD *)&v415.mSampleTime = *(_OWORD *)&v133->mSampleTime;
  *(_OWORD *)&v415.mRateScalar = v135;
  long long v136 = *(_OWORD *)&v133->mSMPTETime.mHours;
  long long v138 = *(_OWORD *)&v133->mSampleTime;
  long long v137 = *(_OWORD *)&v133->mRateScalar;
  *(_OWORD *)&v415.mSMPTETime.mSubframes = *(_OWORD *)&v133->mSMPTETime.mSubframes;
  *(_OWORD *)&v415.mSMPTETime.mHours = v136;
  long long v139 = *(_OWORD *)&v133->mRateScalar;
  long long v140 = *(_OWORD *)&v133->mSMPTETime.mSubframes;
  *(_OWORD *)&v414.mSampleTime = *(_OWORD *)&v133->mSampleTime;
  *(_OWORD *)&v414.mRateScalar = v139;
  long long v141 = *(_OWORD *)&v133->mSMPTETime.mHours;
  *(_OWORD *)&v414.mSMPTETime.mSubframes = *(_OWORD *)&v133->mSMPTETime.mSubframes;
  *(_OWORD *)&v414.mSMPTETime.mHours = v141;
  long long v142 = *(_OWORD *)&v133->mRateScalar;
  *(_OWORD *)&v399.mSampleTime = *(_OWORD *)&v133->mSampleTime;
  *(_OWORD *)&v399.mRateScalar = v142;
  long long v143 = *(_OWORD *)&v133->mSMPTETime.mHours;
  *(_OWORD *)&v399.mSMPTETime.mSubframes = *(_OWORD *)&v133->mSMPTETime.mSubframes;
  *(_OWORD *)&v399.mSMPTETime.mHours = v143;
  long long v144 = *(_OWORD *)&v133->mRateScalar;
  *(_OWORD *)&v398.mSampleTime = *(_OWORD *)&v133->mSampleTime;
  *(_OWORD *)&v398.mRateScalar = v144;
  long long v145 = *(_OWORD *)&v133->mSMPTETime.mHours;
  *(_OWORD *)&v398.mSMPTETime.mSubframes = *(_OWORD *)&v133->mSMPTETime.mSubframes;
  *(_OWORD *)&v398.mSMPTETime.mHours = v145;
  long long v146 = *(_OWORD *)&v133->mRateScalar;
  *(_OWORD *)&v397.mSampleTime = *(_OWORD *)&v133->mSampleTime;
  *(_OWORD *)&v397.mRateScalar = v146;
  long long v147 = *(_OWORD *)&v133->mSMPTETime.mHours;
  *(_OWORD *)&v397.mSMPTETime.mSubframes = *(_OWORD *)&v133->mSMPTETime.mSubframes;
  *(_OWORD *)&v397.mSMPTETime.mHours = v147;
  v396[0] = v138;
  v396[1] = v137;
  long long v148 = *(_OWORD *)&v133->mSMPTETime.mHours;
  v396[2] = v140;
  v396[3] = v148;
  if (!*((_DWORD *)v9 + 130))
  {
LABEL_508:
    uint64_t DynamicsDSPChannelCount = VoiceProcessorV2::GetDynamicsDSPChannelCount(v9);
    UInt32 v296 = DynamicsDSPChannelCount;
    uint64_t v297 = *((void *)v9 + 1112);
    if ((v297 & 0x200000000) != 0 && (*((unsigned char *)v9 + 8908) & 2) != 0)
    {
      v313 = (OpaqueAudioComponentInstance *)*((void *)v9 + 471);
      a7 = (uint64_t)v375;
      if (v313)
      {
        if ((DynamicsDSPChannelCount - 65) <= 0xFFFFFFBF)
        {
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_663;
          }
          LODWORD(v408.mSampleTime) = 136315394;
          *(void *)((char *)&v408.mSampleTime + 4) = "vpProcessDownlink_v3.cpp";
          WORD2(v408.mHostTime) = 1024;
          *(_DWORD *)((char *)&v408.mHostTime + 6) = 736;
          v363 = MEMORY[0x1E4F14500];
          goto LABEL_662;
        }
        MEMORY[0x1F4188790](DynamicsDSPChannelCount);
        v315 = (AudioBufferList *)((char *)&v365 - v314);
        bzero((char *)&v365 - v314, v316);
        v315->UInt32 mNumberBuffers = v296;
        memcpy(v315->mBuffers, a5->mBuffers, 16 * v296);
        long long v317 = *(_OWORD *)(a7 + 16);
        *(_OWORD *)&v408.mSampleTime = *(_OWORD *)a7;
        *(_OWORD *)&v408.mRateScalar = v317;
        long long v318 = *(_OWORD *)(a7 + 48);
        *(_OWORD *)&v408.mSMPTETime.mSubframes = *(_OWORD *)(a7 + 32);
        *(_OWORD *)&v408.mSMPTETime.mHours = v318;
        v413.UInt32 mNumberBuffers = 512;
        uint64_t DynamicsDSPChannelCount = AudioUnitProcess(v313, &v413.mNumberBuffers, &v408, *((_DWORD *)v9 + 121), v315);
        if (v10[3409] || v10[3410]) {
          uint64_t DynamicsDSPChannelCount = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v9, 0x40u, v379, v315, &v408);
        }
        uint64_t v297 = *((void *)v9 + 1112);
      }
    }
    else
    {
      a7 = (uint64_t)v375;
    }
    if ((v297 & 0x1000000000) == 0) {
      goto LABEL_518;
    }
    if ((*((unsigned char *)v9 + 8908) & 0x10) == 0) {
      goto LABEL_518;
    }
    int v298 = (OpaqueAudioComponentInstance *)*((void *)v9 + 474);
    if (!v298) {
      goto LABEL_518;
    }
    if (v296 - 65 > 0xFFFFFFBF)
    {
      MEMORY[0x1F4188790](DynamicsDSPChannelCount);
      int v300 = (AudioBufferList *)((char *)&v365 - v299);
      bzero((char *)&v365 - v299, v301);
      v300->UInt32 mNumberBuffers = v296;
      memcpy(v300->mBuffers, a5->mBuffers, 16 * v296);
      long long v302 = *(_OWORD *)(a7 + 16);
      *(_OWORD *)&v408.mSampleTime = *(_OWORD *)a7;
      *(_OWORD *)&v408.mRateScalar = v302;
      long long v303 = *(_OWORD *)(a7 + 48);
      *(_OWORD *)&v408.mSMPTETime.mSubframes = *(_OWORD *)(a7 + 32);
      *(_OWORD *)&v408.mSMPTETime.mHours = v303;
      v413.UInt32 mNumberBuffers = 512;
      AudioUnitProcess(v298, &v413.mNumberBuffers, &v408, *((_DWORD *)v9 + 121), v300);
      if (v10[3409] || v10[3410]) {
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v9, 0x38u, v379, v300, &v408);
      }
LABEL_518:
      if (!*((unsigned char *)v9 + 2244) && a5->mNumberBuffers >= 2)
      {
        unint64_t v304 = 1;
        uint64_t v305 = 32;
        do
        {
          memcpy(*(void **)((char *)&a5->mNumberBuffers + v305), a5->mBuffers[0].mData, a5->mBuffers[0].mDataByteSize);
          ++v304;
          v305 += 16;
        }
        while (v304 < a5->mNumberBuffers);
      }
      uint64_t v306 = *((void *)v9 + 1112);
      if ((v306 & 0x200000000000) != 0 && (*((unsigned char *)v9 + 8909) & 0x20) != 0)
      {
        v319 = (OpaqueAudioComponentInstance *)*((void *)v9 + 483);
        uint64_t v307 = v379;
        if (v319)
        {
          *(void *)&v413.UInt32 mNumberBuffers = a5;
          *(void *)&v412.UInt32 mNumberBuffers = a5;
          long long v320 = *(_OWORD *)(a7 + 16);
          *(_OWORD *)&v408.mSampleTime = *(_OWORD *)a7;
          *(_OWORD *)&v408.mRateScalar = v320;
          long long v321 = *(_OWORD *)(a7 + 48);
          *(_OWORD *)&v408.mSMPTETime.mSubframes = *(_OWORD *)(a7 + 32);
          *(_OWORD *)&v408.mSMPTETime.mHours = v321;
          v395.UInt32 mNumberBuffers = 512;
          AudioUnitProcessMultiple(v319, &v395.mNumberBuffers, &v408, *((_DWORD *)v9 + 121), 1u, (const AudioBufferList **)&v413, 1u, (AudioBufferList **)&v412);
          uint64_t v306 = *((void *)v9 + 1112);
        }
      }
      else
      {
        uint64_t v307 = v379;
      }
      if (v306 & 0x100000000000000) != 0 && (*((unsigned char *)v9 + 8911))
      {
        int v308 = (OpaqueAudioComponentInstance *)*((void *)v9 + 494);
        if (v308)
        {
          *(void *)&v413.UInt32 mNumberBuffers = a5;
          *(void *)&v412.UInt32 mNumberBuffers = a5;
          long long v309 = *(_OWORD *)(a7 + 16);
          *(_OWORD *)&v408.mSampleTime = *(_OWORD *)a7;
          *(_OWORD *)&v408.mRateScalar = v309;
          long long v310 = *(_OWORD *)(a7 + 48);
          *(_OWORD *)&v408.mSMPTETime.mSubframes = *(_OWORD *)(a7 + 32);
          *(_OWORD *)&v408.mSMPTETime.mHours = v310;
          v395.UInt32 mNumberBuffers = 512;
          AudioUnitProcessMultiple(v308, &v395.mNumberBuffers, &v408, *((_DWORD *)v9 + 121), 1u, (const AudioBufferList **)&v413, 1u, (AudioBufferList **)&v412);
          if (v10[3409] || v10[3410]) {
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v9, 0x41u, v307, a5, &v408);
          }
          uint64_t v306 = *((void *)v9 + 1112);
        }
      }
      if ((v306 & 0x800000000000000) == 0 || (*((unsigned char *)v9 + 8911) & 8) == 0 && !*((unsigned char *)v9 + 472)) {
        goto LABEL_574;
      }
      LODWORD(v408.mSampleTime) = 1065353216;
      v413.UInt32 mNumberBuffers = 1065353216;
      if (*((unsigned char *)v9 + 2083) || *((unsigned char *)v9 + 472))
      {
        float v311 = *((float *)v9 + 1133);
        if (v311 != 0.0)
        {
          float v312 = __exp10f(v311 / 20.0);
          *(float *)&v413.UInt32 mNumberBuffers = v312;
          *(float *)&v408.mSampleTime = v312;
LABEL_561:
          a5 = v374;
          goto LABEL_562;
        }
      }
      float v322 = *((float *)v9 + 1131);
      if (v322 >= -300.0)
      {
        if (v322 == 0.0)
        {
          float v312 = 1.0;
        }
        else
        {
          float v323 = v322 / 20.0;
          BOOL v324 = v322 <= 60.0;
          float v325 = 3.0;
          if (v324) {
            float v325 = v323;
          }
          float v312 = __exp10f(v325);
          *(float *)&v408.mSampleTime = v312;
          a5 = v374;
        }
      }
      else
      {
        LODWORD(v408.mSampleTime) = 0;
        float v312 = 0.0;
      }
      float v326 = *((float *)v9 + 1132);
      if (v326 >= -300.0)
      {
        if (v326 != 0.0)
        {
          float v327 = v326 / 20.0;
          if (v326 > 60.0) {
            float v327 = 3.0;
          }
          v413.UInt32 mNumberBuffers = __exp10f(v327);
          float v312 = *(float *)&v408.mSampleTime;
          goto LABEL_561;
        }
      }
      else
      {
        v413.UInt32 mNumberBuffers = 0;
      }
LABEL_562:
      if (v312 == 0.0)
      {
        bzero(a5->mBuffers[0].mData, 4 * *((unsigned int *)v9 + 121));
        a7 = (uint64_t)v375;
        unint64_t v10 = v381;
      }
      else
      {
        a7 = (uint64_t)v375;
        unint64_t v10 = v381;
        if (v312 != 1.0) {
          vDSP_vsmul((const float *)a5->mBuffers[0].mData, 1, (const float *)&v408, (float *)a5->mBuffers[0].mData, 1, *((unsigned int *)v9 + 121));
        }
      }
      if (a5->mNumberBuffers >= 2)
      {
        unint64_t v328 = 1;
        uint64_t v329 = 32;
        do
        {
          if (*(float *)&v413.mNumberBuffers == 0.0)
          {
            bzero(*(void **)((char *)&a5->mNumberBuffers + v329), 4 * *((unsigned int *)v9 + 121));
          }
          else if (*(float *)&v413.mNumberBuffers != 1.0)
          {
            vDSP_vsmul(*(const float **)((char *)&a5->mNumberBuffers + v329), 1, (const float *)&v413.mNumberBuffers, *(float **)((char *)&a5->mNumberBuffers + v329), 1, *((unsigned int *)v9 + 121));
          }
          ++v328;
          v329 += 16;
        }
        while (v328 < a5->mNumberBuffers);
      }
      uint64_t v306 = *((void *)v9 + 1112);
LABEL_574:
      if ((v306 & 0x400000000000) != 0 && (*((unsigned char *)v9 + 8909) & 0x40) != 0)
      {
        int v330 = (OpaqueAudioComponentInstance *)*((void *)v9 + 484);
        if (v330)
        {
          long long v331 = *(_OWORD *)(a7 + 16);
          *(_OWORD *)&v408.mSampleTime = *(_OWORD *)a7;
          *(_OWORD *)&v408.mRateScalar = v331;
          long long v332 = *(_OWORD *)(a7 + 48);
          *(_OWORD *)&v408.mSMPTETime.mSubframes = *(_OWORD *)(a7 + 32);
          *(_OWORD *)&v408.mSMPTETime.mHours = v332;
          v413.UInt32 mNumberBuffers = 512;
          AudioUnitProcess(v330, &v413.mNumberBuffers, &v408, *((_DWORD *)v9 + 121), a5);
          uint64_t v306 = *((void *)v9 + 1112);
        }
      }
      if ((v306 & 0x1000000000000000) != 0 && (*((unsigned char *)v9 + 8911) & 0x10) != 0)
      {
        v333 = (OpaqueAudioComponentInstance *)*((void *)v9 + 498);
        if (v333)
        {
          long long v334 = *(_OWORD *)(a7 + 16);
          *(_OWORD *)&v408.mSampleTime = *(_OWORD *)a7;
          *(_OWORD *)&v408.mRateScalar = v334;
          long long v335 = *(_OWORD *)(a7 + 48);
          *(_OWORD *)&v408.mSMPTETime.mSubframes = *(_OWORD *)(a7 + 32);
          *(_OWORD *)&v408.mSMPTETime.mHours = v335;
          v413.UInt32 mNumberBuffers = 512;
          AudioUnitProcess(v333, &v413.mNumberBuffers, &v408, *((_DWORD *)v9 + 121), a5);
          uint64_t v306 = *((void *)v9 + 1112);
        }
      }
      if ((v306 & 0x4000000000000) != 0 && (*((unsigned char *)v9 + 8910) & 4) != 0)
      {
        int v336 = (OpaqueAudioComponentInstance *)*((void *)v9 + 488);
        if (v336)
        {
          long long v337 = *(_OWORD *)(a7 + 16);
          *(_OWORD *)&v408.mSampleTime = *(_OWORD *)a7;
          *(_OWORD *)&v408.mRateScalar = v337;
          long long v338 = *(_OWORD *)(a7 + 48);
          *(_OWORD *)&v408.mSMPTETime.mSubframes = *(_OWORD *)(a7 + 32);
          *(_OWORD *)&v408.mSMPTETime.mHours = v338;
          v413.UInt32 mNumberBuffers = 512;
          AudioUnitProcess(v336, &v413.mNumberBuffers, &v408, *((_DWORD *)v9 + 121), a5);
          if (v10[3409] || v10[3410]) {
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v9, 0x75u, v379, a5, &v408);
          }
        }
      }
      if (v10[3409] && (VoiceProcessorV2::InjectionFilesReadSignal(v9, 2, v379, a5), v10[3409]) || v10[3410]) {
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v9, 0x44u, v379, a5, (AudioTimeStamp *)a7);
      }
      uint64_t v339 = *((void *)v9 + 2003);
      if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
        dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_5887);
      }
      if (AudioIssueDetectorLibraryLoader(void)::libSym) {
        AudioIssueDetectorLibraryLoader(void)::libSym(v339, 68, 0, a5, v379, a7);
      }
      if (*((_DWORD *)v9 + 1129) == 1 && !v10[3688]) {
        VoiceProcessorV2::AppendReferenceSignal(v9, a5, (AudioTimeStamp *)a7, 0);
      }
      if (v10[3409]) {
        VoiceProcessorV2::LoopBackRead(v9, v379, a5);
      }
      goto LABEL_601;
    }
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
LABEL_663:
      int v364 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v364 = &unk_1F14C8B68;
      v364[2] = -50;
    }
    LODWORD(v408.mSampleTime) = 136315394;
    *(void *)((char *)&v408.mSampleTime + 4) = "vpProcessDownlink_v3.cpp";
    WORD2(v408.mHostTime) = 1024;
    *(_DWORD *)((char *)&v408.mHostTime + 6) = 748;
    v363 = MEMORY[0x1E4F14500];
LABEL_662:
    _os_log_impl(&dword_1BB0CE000, v363, OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v408, 0x12u);
    goto LABEL_663;
  }
  int v149 = 0;
  unsigned int v385 = 0;
  int v366 = (VoiceProcessorV3 *)((char *)v9 + 2744);
  double v150 = (float)v379;
  v371 = &v388->mBuffers[0].mData;
  int v372 = (uint64_t *)(v134 + 4);
  v369 = &v389->mBuffers[0].mData;
  int v370 = &v387->mBuffers[0].mData;
  int v368 = &a5->mBuffers[0].mData;
  a7 = 1;
  v373 = v134;
  while (1)
  {
    if (*v134 - 65 <= 0xFFFFFFBF)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        LODWORD(v408.mSampleTime) = 136315394;
        *(void *)((char *)&v408.mSampleTime + 4) = "vpProcessDownlink_v3.cpp";
        WORD2(v408.mHostTime) = 1024;
        *(_DWORD *)((char *)&v408.mHostTime + 6) = 412;
        _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v408, 0x12u);
      }
      int v352 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v352 = &unk_1F14C8B68;
      v352[2] = -50;
    }
    int v377 = v149;
    MEMORY[0x1F4188790](v131);
    int v152 = (AudioBufferList *)((char *)&v365 - v151);
    bzero((char *)&v365 - v151, v153);
    v152->UInt32 mNumberBuffers = *v134;
    if (v388)
    {
      UInt32 v155 = v388->mNumberBuffers;
      if (v388->mNumberBuffers - 65 <= 0xFFFFFFBF)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          LODWORD(v408.mSampleTime) = 136315394;
          *(void *)((char *)&v408.mSampleTime + 4) = "vpProcessDownlink_v3.cpp";
          WORD2(v408.mHostTime) = 1024;
          *(_DWORD *)((char *)&v408.mHostTime + 6) = 414;
          _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v408, 0x12u);
        }
        int v356 = __cxa_allocate_exception(0x10uLL);
        *(void *)int v356 = &unk_1F14C8B68;
        v356[2] = -50;
      }
    }
    else
    {
      UInt32 v155 = 1;
    }
    MEMORY[0x1F4188790](v154);
    id v157 = (UInt32 *)((char *)&v365 - v156);
    bzero((char *)&v365 - v156, v158);
    int v384 = v157;
    *id v157 = v155;
    if (v387)
    {
      UInt32 v160 = v387->mNumberBuffers;
      if (v387->mNumberBuffers - 65 <= 0xFFFFFFBF)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          LODWORD(v408.mSampleTime) = 136315394;
          *(void *)((char *)&v408.mSampleTime + 4) = "vpProcessDownlink_v3.cpp";
          WORD2(v408.mHostTime) = 1024;
          *(_DWORD *)((char *)&v408.mHostTime + 6) = 416;
          _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v408, 0x12u);
        }
        int v358 = __cxa_allocate_exception(0x10uLL);
        *(void *)int v358 = &unk_1F14C8B68;
        v358[2] = -50;
      }
    }
    else
    {
      UInt32 v160 = 1;
    }
    MEMORY[0x1F4188790](v159);
    int v162 = (UInt32 *)((char *)&v365 - v161);
    bzero((char *)&v365 - v161, v163);
    v383 = v162;
    UInt32 *v162 = v160;
    if (v389)
    {
      UInt32 v165 = v389->mNumberBuffers;
      if (v389->mNumberBuffers - 65 <= 0xFFFFFFBF)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          LODWORD(v408.mSampleTime) = 136315394;
          *(void *)((char *)&v408.mSampleTime + 4) = "vpProcessDownlink_v3.cpp";
          WORD2(v408.mHostTime) = 1024;
          *(_DWORD *)((char *)&v408.mHostTime + 6) = 418;
          _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v408, 0x12u);
        }
        int v360 = __cxa_allocate_exception(0x10uLL);
        *(void *)int v360 = &unk_1F14C8B68;
        v360[2] = -50;
      }
    }
    else
    {
      UInt32 v165 = 1;
    }
    MEMORY[0x1F4188790](v164);
    char v167 = (UInt32 *)((char *)&v365 - v166);
    bzero((char *)&v365 - v166, v168);
    *char v167 = v165;
    int v170 = (_DWORD *)*((void *)v9 + 203);
    if (*((unsigned char *)v9 + 2244))
    {
      if (!v170) {
        goto LABEL_320;
      }
      if (!*v170) {
        goto LABEL_318;
      }
      unint64_t v171 = 0;
      int v172 = (void **)(v170 + 4);
      do
      {
        bzero(*v172, *((unsigned int *)v172 - 1));
        ++v171;
        v172 += 2;
      }
      while (v171 < *v170);
      int v170 = (_DWORD *)*((void *)v9 + 203);
    }
    if (v170)
    {
LABEL_318:
      unsigned int v173 = *v170;
      if ((*v170 - 65) <= 0xFFFFFFBF)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          LODWORD(v408.mSampleTime) = 136315394;
          *(void *)((char *)&v408.mSampleTime + 4) = "vpProcessDownlink_v3.cpp";
          WORD2(v408.mHostTime) = 1024;
          *(_DWORD *)((char *)&v408.mHostTime + 6) = 424;
          _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v408, 0x12u);
        }
        int v362 = __cxa_allocate_exception(0x10uLL);
        *(void *)int v362 = &unk_1F14C8B68;
        v362[2] = -50;
      }
      goto LABEL_321;
    }
LABEL_320:
    unsigned int v173 = 1;
LABEL_321:
    MEMORY[0x1F4188790](v169);
    int v175 = (UInt32 *)((char *)&v365 - v174);
    bzero((char *)&v365 - v174, v176);
    int v382 = v175;
    *int v175 = v173;
    uint64_t v178 = a5->mNumberBuffers;
    if ((v178 - 65) <= 0xFFFFFFBF)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        LODWORD(v408.mSampleTime) = 136315394;
        *(void *)((char *)&v408.mSampleTime + 4) = "vpProcessDownlink_v3.cpp";
        WORD2(v408.mHostTime) = 1024;
        *(_DWORD *)((char *)&v408.mHostTime + 6) = 426;
        _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v408, 0x12u);
      }
      v353 = __cxa_allocate_exception(0x10uLL);
      *(void *)v353 = &unk_1F14C8B68;
      v353[2] = -50;
    }
    MEMORY[0x1F4188790](v177);
    int v12 = (UInt32 *)((char *)&v365 - v179);
    bzero((char *)&v365 - v179, v180);
    UInt32 *v12 = v178;
    uint64_t v181 = v152->mNumberBuffers;
    if (v181)
    {
      int v182 = 4 * *((_DWORD *)v9 + 129);
      uint64_t v183 = v385;
      int v184 = &v152->mBuffers[0].mData;
      v185 = v372;
      do
      {
        *((_DWORD *)v184 - 2) = 1;
        *((_DWORD *)v184 - 1) = v182;
        uint64_t v186 = *v185;
        v185 += 2;
        *int v184 = (void *)(v186 + 4 * v183);
        v184 += 2;
        --v181;
      }
      while (v181);
    }
    uint64_t v187 = *v384;
    if (v187)
    {
      int v188 = 4 * *((_DWORD *)v9 + 129);
      uint64_t v189 = v385;
      int v190 = (AudioBufferList **)(v384 + 4);
      uint64_t v191 = v371;
      do
      {
        *((_DWORD *)v190 - 2) = 1;
        *((_DWORD *)v190 - 1) = v188;
        int v192 = v388;
        if (v388) {
          int v192 = (AudioBufferList *)((char *)*v191 + 4 * v189);
        }
        *int v190 = v192;
        v190 += 2;
        v191 += 2;
        --v187;
      }
      while (v187);
    }
    uint64_t v193 = *v383;
    if (v193)
    {
      int v194 = 4 * *((_DWORD *)v9 + 129);
      uint64_t v195 = v385;
      int v196 = (AudioBufferList **)(v383 + 4);
      v197 = v370;
      do
      {
        *((_DWORD *)v196 - 2) = 1;
        *((_DWORD *)v196 - 1) = v194;
        int v198 = v387;
        if (v387) {
          int v198 = (AudioBufferList *)((char *)*v197 + 4 * v195);
        }
        const char *v196 = v198;
        v196 += 2;
        v197 += 2;
        --v193;
      }
      while (v193);
    }
    uint64_t v199 = *v167;
    if (v199)
    {
      int v200 = 4 * *((_DWORD *)v9 + 129);
      uint64_t v201 = v385;
      int v202 = (AudioBufferList **)(v167 + 4);
      id v203 = v369;
      do
      {
        *((_DWORD *)v202 - 2) = 1;
        *((_DWORD *)v202 - 1) = v200;
        int v204 = v389;
        if (v389) {
          int v204 = (AudioBufferList *)((char *)*v203 + 4 * v201);
        }
        *int v202 = v204;
        v202 += 2;
        v203 += 2;
        --v199;
      }
      while (v199);
    }
    if (v178)
    {
      int v205 = 4 * *((_DWORD *)v9 + 129);
      uint64_t v206 = v385;
      v207 = (uint64_t *)(v12 + 4);
      int v208 = v368;
      do
      {
        *((_DWORD *)v207 - 2) = 1;
        *((_DWORD *)v207 - 1) = v205;
        if (a5) {
          uint64_t v209 = (uint64_t)*v208 + 4 * v206;
        }
        else {
          uint64_t v209 = 0;
        }
        uint64_t *v207 = v209;
        v207 += 2;
        v208 += 2;
        --v178;
      }
      while (v178);
    }
    if (v173)
    {
      int v210 = 4 * *((_DWORD *)v9 + 129);
      uint64_t v211 = v385;
      uint64_t v212 = v173;
      long long v213 = v382 + 4;
      int v214 = v170 + 4;
      do
      {
        *(v213 - 2) = 1;
        *(v213 - 1) = v210;
        if (v170) {
          uint64_t v215 = *v214 + 4 * v211;
        }
        else {
          uint64_t v215 = 0;
        }
        *(void *)long long v213 = v215;
        v213 += 4;
        v214 += 2;
        --v212;
      }
      while (v212);
    }
    if (v389 && *((unsigned char *)v9 + 2244)) {
      CopyAllBuffersABL(v382, v389);
    }
    unsigned int v216 = *((_DWORD *)v9 + 129);
    MonoABL = GetMonoABL(v152, &v413, v216);
    if (v388) {
      int v218 = (AudioBufferList *)v384;
    }
    else {
      int v218 = 0;
    }
    uint64_t v13 = (uint64_t)GetMonoABL(v218, &v412, *((unsigned int *)v9 + 129));
    unsigned int v376 = v216;
    if (v387) {
      uint64_t v219 = (AudioBufferList *)v383;
    }
    else {
      uint64_t v219 = 0;
    }
    int v220 = GetMonoABL(v219, &v395, *((unsigned int *)v9 + 129));
    if (v389) {
      uint64_t v221 = (AudioBufferList *)v167;
    }
    else {
      uint64_t v221 = 0;
    }
    int v222 = GetMonoABL(v221, &v394, *((unsigned int *)v9 + 129));
    uint64_t v223 = *((void *)v9 + 1112);
    int v378 = v220;
    if ((v223 & 0x40000000) == 0) {
      goto LABEL_366;
    }
    uint64_t v224 = *((void *)v9 + 1113);
    if ((v224 & 0x40000000) == 0) {
      goto LABEL_366;
    }
    data = 0;
    if (!*((void *)v9 + 468) || (v223 & v224 & 0x80000000) == 0) {
      goto LABEL_367;
    }
    if (!*((void *)v9 + 469) || (id v249 = (uint64_t *)v366, !vp::Audio_Buffer::get_audio_buffer_list(v366)))
    {
LABEL_366:
      data = 0;
      goto LABEL_367;
    }
    vp::Audio_Buffer::prepare(v249, *((_DWORD *)v9 + 129));
    audio_buffer_list = (_DWORD *)vp::Audio_Buffer::get_audio_buffer_list((vp::Audio_Buffer *)v249);
    if (*audio_buffer_list)
    {
      v251 = audio_buffer_list;
      unint64_t v252 = 0;
      v253 = (void **)(audio_buffer_list + 4);
      do
      {
        bzero(*v253, *((unsigned int *)v253 - 1));
        ++v252;
        v253 += 2;
      }
      while (v252 < *v251);
    }
    data = (AudioUnitParameterValue *)vp::Audio_Buffer::get_audio_buffer_list(v366);
    LODWORD(v408.mSampleTime) = 512;
    AudioUnitSetParameter(*((AudioUnit *)v9 + 468), 1u, 0, 0, (float)(*((float *)v9 + 3132) + -1.0) * 24.0, 0);
    AudioUnitProcess(*((AudioUnit *)v9 + 468), (AudioUnitRenderActionFlags *)&v408, &v415, *((_DWORD *)v9 + 129), (AudioBufferList *)data);
    uint64_t v254 = *((unsigned int *)v9 + 129);
    v415.mSampleTime = v415.mSampleTime + (double)v254;
    if (v381[3409] || v381[3410])
    {
      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v9, 0x3Du, v254, (const AudioBufferList *)data, &v415);
      LODWORD(v254) = *((_DWORD *)v9 + 129);
    }
    LODWORD(v408.mSampleTime) = 512;
    AudioUnitProcess(*((AudioUnit *)v9 + 469), (AudioUnitRenderActionFlags *)&v408, &v414, v254, (AudioBufferList *)data);
    uint64_t v255 = *((unsigned int *)v9 + 129);
    if (!v381[3409] && !v381[3410])
    {
      v414.mSampleTime = v414.mSampleTime + (double)v255;
LABEL_506:
      if (!v381[3410]) {
        goto LABEL_367;
      }
      goto LABEL_507;
    }
    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v9, 0x3Eu, v255, (const AudioBufferList *)data, &v414);
    uint64_t v255 = *((unsigned int *)v9 + 129);
    int v256 = v381[3409];
    v414.mSampleTime = v414.mSampleTime + (double)v255;
    if (!v256) {
      goto LABEL_506;
    }
LABEL_507:
    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v9, 0x3Fu, v255, (const AudioBufferList *)data, &v414);
LABEL_367:
    int v226 = *((unsigned __int8 *)v9 + 2244);
    if (*((unsigned char *)v9 + 2244)) {
      std::string v227 = (const AudioBufferList *)v12;
    }
    else {
      std::string v227 = MonoABL;
    }
    if (*((unsigned char *)v9 + 2244)) {
      int v228 = (int *)v382;
    }
    else {
      int v228 = (int *)v222;
    }
    if (v228) {
      int v229 = (AudioUnitParameterValue *)v228;
    }
    else {
      int v229 = data;
    }
    int v386 = v229;
    uint64_t v230 = *((void *)v9 + 1112);
    if ((v230 & 0x8000) != 0)
    {
      uint64_t v231 = *((void *)v9 + 1113);
      if ((v231 & 0x8000) != 0)
      {
        if (*((void *)v9 + 453))
        {
          AudioUnitRenderActionFlags v393 = 512;
          UInt64 v232 = (UInt64)v384;
          if (v388 == 0 || v226 == 0) {
            UInt64 v232 = v13;
          }
          *(void *)&v408.mSampleTime = MonoABL;
          v408.mHostTime = v232;
          Float64 v233 = *(double *)&v383;
          if (v387 == 0 || v226 == 0) {
            Float64 v233 = *(double *)&v378;
          }
          p_UInt32 mNumberBuffers = v382;
          if (v389 == 0 || v226 == 0) {
            p_UInt32 mNumberBuffers = &v222->mNumberBuffers;
          }
          v408.mRateScalar = v233;
          v408.mWordClockTime = (UInt64)p_mNumberBuffers;
          *(void *)&v408.mSMPTETime.mSubframes = data;
          int v410 = (AudioBufferList *)v227;
          v411 = v386;
          if ((v230 & 0x8000000) != 0 && ((v231 & 0x8000000) != 0 || *((unsigned char *)v9 + 472)) && v228)
          {
            float v235 = 1.0;
            if (!v226) {
              float v235 = *((float *)v9 + 3135);
            }
            float v236 = *((float *)v9 + 1116) + (float)((float)(*((float *)v9 + 1117) - *((float *)v9 + 1116)) * v235);
            *((float *)v9 + 1115) = v236;
            float v392 = 0.0;
            float v392 = __exp10f(v236 / 20.0);
            v391 = v228;
            v409[0] = (AudioBufferList *)vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)&v391);
            v409[1] = v237;
            v390[0] = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)&v391);
            v390[1] = v238;
            while (vp::Audio_Buffer_Iterator::operator!=(v409, v390))
            {
              data = (AudioUnitParameterValue *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)v409);
              v239 = (float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)v409);
              vDSP_vsmul(data, 1, &v392, v239, 1, *((unsigned int *)v9 + 129));
              vp::Audio_Buffer_Iterator::operator++((uint64_t)v409);
            }
            uint64_t v230 = *((void *)v9 + 1112);
          }
          if ((v230 & 0x10000000) != 0 && (*((unsigned char *)v9 + 8907) & 0x10) != 0) {
            (*(void (**)(VoiceProcessorV3 *, AudioBufferList *, UInt32 *))(*(void *)v9 + 680))(v9, MonoABL, v382);
          }
          AudioUnitProcessMultiple(*((AudioUnit *)v9 + 453), &v393, &v399, *((_DWORD *)v9 + 129), 5u, (const AudioBufferList **)&v408, 2u, &v410);
          uint64_t v257 = *((unsigned int *)v9 + 129);
          v399.mSampleTime = v399.mSampleTime + (double)v257;
          if (v381[3409] || v381[3410])
          {
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v9, 0x59u, v257, v227, &v399);
            if (v381[3409] || v381[3410]) {
              VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v9, 0x76u, *((unsigned int *)v9 + 129), (const AudioBufferList *)v386, &v399);
            }
          }
          goto LABEL_443;
        }
      }
    }
    if (v13)
    {
      LODWORD(v408.mSampleTime) = 1055175620;
      vDSP_vsma(*(const float **)(v13 + 16), 1, (const float *)&v408, (const float *)MonoABL->mBuffers[0].mData, 1, (float *)MonoABL->mBuffers[0].mData, 1, *((unsigned int *)v9 + 129));
    }
    int v240 = data;
    if (v378) {
      vDSP_vadd((const float *)MonoABL->mBuffers[0].mData, 1, (const float *)v378->mBuffers[0].mData, 1, (float *)MonoABL->mBuffers[0].mData, 1, *((unsigned int *)v380 + 129));
    }
    unint64_t v241 = MonoABL->mNumberBuffers;
    if (v241)
    {
      uint64_t v13 = 0;
      int v228 = 0;
      data = (AudioUnitParameterValue *)&v227->mBuffers[0].mData;
      do
      {
        int v242 = *(void **)((char *)&MonoABL->mBuffers[0].mData + v13);
        v243 = *(void **)((char *)data + v13);
        if (v242 != v243)
        {
          memcpy(v243, v242, *(unsigned int *)((char *)&MonoABL->mBuffers[0].mDataByteSize + v13));
          unint64_t v241 = MonoABL->mNumberBuffers;
        }
        int v228 = (int *)((char *)v228 + 1);
        v13 += 16;
      }
      while ((unint64_t)v228 < v241);
    }
    if (!v222)
    {
      int v222 = (AudioBufferList *)v240;
LABEL_411:
      int v9 = v380;
      goto LABEL_412;
    }
    uint64_t v13 = (uint64_t)v380;
    if ((*((unsigned char *)v380 + 8899) & 8) != 0 && ((*((unsigned char *)v380 + 8907) & 8) != 0 || *((unsigned char *)v380 + 472)))
    {
      float v244 = *((float *)v380 + 1116)
           + (float)((float)(*((float *)v380 + 1117) - *((float *)v380 + 1116)) * *((float *)v380 + 3135));
      *((float *)v380 + 1115) = v244;
      LODWORD(v408.mSampleTime) = 0;
      LODWORD(v408.mSampleTime) = __exp10f(v244 / 20.0);
      vDSP_vsmul((const float *)v222->mBuffers[0].mData, 1, (const float *)&v408, (float *)v222->mBuffers[0].mData, 1, *(unsigned int *)(v13 + 516));
    }
    if (!v240) {
      goto LABEL_411;
    }
    long long v245 = (const float *)*((void *)v240 + 2);
    int v9 = v380;
    vDSP_vadd((const float *)v222->mBuffers[0].mData, 1, v245, 1, (float *)v222->mBuffers[0].mData, 1, *((unsigned int *)v380 + 129));
LABEL_412:
    if (v386)
    {
      if (v222)
      {
        unint64_t v246 = v222->mNumberBuffers;
        if (v246)
        {
          uint64_t v13 = 0;
          int v228 = 0;
          data = v386 + 4;
          do
          {
            uint64_t v247 = *(void **)((char *)&v222->mBuffers[0].mData + v13);
            int v248 = *(void **)((char *)data + v13);
            if (v247 != v248)
            {
              memcpy(v248, v247, *(unsigned int *)((char *)&v222->mBuffers[0].mDataByteSize + v13));
              unint64_t v246 = v222->mNumberBuffers;
            }
            int v228 = (int *)((char *)v228 + 1);
            v13 += 16;
          }
          while ((unint64_t)v228 < v246);
        }
      }
    }
LABEL_443:
    uint64_t v258 = *((void *)v9 + 1112);
    if ((v258 & 0x8000) == 0)
    {
      a5 = v374;
LABEL_446:
      unint64_t v10 = v381;
      goto LABEL_447;
    }
    a5 = v374;
    if ((*((unsigned char *)v9 + 8905) & 0x80) == 0) {
      goto LABEL_446;
    }
    unint64_t v10 = v381;
    if (*((void *)v9 + 453) && *((unsigned char *)v9 + 2244))
    {
      __n128 v290 = ((__n128 (*)(VoiceProcessorV3 *, const AudioBufferList *, _OWORD *))*(void *)(*(void *)v9 + 656))(v9, v227, v396);
      v290.n128_u32[0] = *((_DWORD *)v9 + 129);
      *(double *)int v396 = *(double *)v396 + (double)v290.n128_u64[0];
      uint64_t v258 = *((void *)v9 + 1112);
    }
LABEL_447:
    if ((v258 & 0x200000) != 0 && (*((unsigned char *)v9 + 8906) & 0x20) != 0 && *((void *)v9 + 459))
    {
      LODWORD(v411) = 0;
      int v410 = 0;
      float v259 = *((float *)v9 + 3133);
      float v260 = *((float *)v9 + 3134);
      if (v10[3409])
      {
        int v261 = *((_DWORD *)v9 + 3135);
        LODWORD(v410) = *((_DWORD *)v9 + 3133);
        *((float *)&v410 + 1) = v260;
        LODWORD(v411) = v261;
        VoiceProcessorV2::WriteControlDataToFile((uint64_t)v9, (char *)&v410, 0xCu, 0x34u);
      }
      double v262 = *(double *)v367;
      float v263 = (float)(v260 - v259) / (v150 / *(double *)v367);
      float v264 = 2000.0;
      if (v263 <= 2000.0)
      {
        float v264 = v263;
        if (v263 < -5000.0) {
          float v264 = -5000.0;
        }
      }
      uint64_t v13 = *((unsigned int *)v9 + 129);
      AudioUnitSetParameter(*((AudioUnit *)v9 + 459), 5u, 0, 0, 0.0, 0);
      float v265 = (float)v13 / v262 * v264;
      *((float *)v9 + 3133) = v259 + (float)((float)v13 * (float)(v265 / (float)v13));
      LODWORD(v390[0]) = 512;
      *(void *)&v408.mSampleTime = v227;
      v408.mHostTime = (UInt64)v386;
      v409[0] = (AudioBufferList *)v227;
      AudioUnitProcessMultiple(*((AudioUnit *)v9 + 459), (AudioUnitRenderActionFlags *)v390, &v398, *((_DWORD *)v9 + 129), 2u, (const AudioBufferList **)&v408, 1u, v409);
      LODWORD(v266) = *((_DWORD *)v9 + 129);
      v398.mSampleTime = v398.mSampleTime + (double)v266;
    }
    else
    {
      float v267 = 1.0;
      if (!*((unsigned char *)v9 + 2244)) {
        float v267 = *((float *)v9 + 3135);
      }
      *(float *)int v390 = v267;
      vp::Audio_Buffer_List_Ref::Audio_Buffer_List_Ref(&v408, v227);
      v409[0] = *(AudioBufferList **)&v408.mSampleTime;
      *(void *)&v408.mSampleTime = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)v409);
      v408.mHostTime = v268;
      int v410 = (AudioBufferList *)vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)v409);
      v411 = v269;
      while (vp::Audio_Buffer_Iterator::operator!=(&v408, &v410))
      {
        uint64_t v13 = vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v408);
        int v270 = (float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v408);
        vDSP_vsmul((const float *)v13, 1, (const float *)v390, v270, 1, *((unsigned int *)v9 + 129));
        vp::Audio_Buffer_Iterator::operator++((uint64_t)&v408);
      }
      if (v10[3409] || v10[3410]) {
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v9, 0x37u, *((unsigned int *)v9 + 129), v227, v375);
      }
    }
    if (!v227) {
      break;
    }
    if (!v386 || (*((unsigned char *)v9 + 8899) & 0x20) == 0 || (*((unsigned char *)v9 + 8907) & 0x20) == 0 && !*((unsigned char *)v9 + 472))
    {
      UInt32 v271 = *v12;
      if (*v12 >= v227->mNumberBuffers) {
        UInt32 v271 = v227->mNumberBuffers;
      }
      if (v271)
      {
        unint64_t v272 = 0;
        unint64_t v273 = 0;
        do
        {
          UInt32 v274 = v227->mBuffers[v272 / 0x10].mDataByteSize;
          UInt32 v275 = v12[v272 / 4 + 3];
          if (v274 >= v275) {
            size_t v276 = v275;
          }
          else {
            size_t v276 = v274;
          }
          memcpy(*(void **)&v12[v272 / 4 + 4], v227->mBuffers[v272 / 0x10].mData, v276);
          ++v273;
          LODWORD(v277) = *v12;
          if (*v12 >= v227->mNumberBuffers) {
            unint64_t v277 = v227->mNumberBuffers;
          }
          else {
            unint64_t v277 = v277;
          }
          v272 += 16;
        }
        while (v273 < v277);
      }
      goto LABEL_489;
    }
    if (*((unsigned char *)v9 + 2244))
    {
      int v278 = *((_DWORD *)v9 + 89);
      UInt32 v279 = v227->mNumberBuffers;
LABEL_483:
      if (v279)
      {
        unint64_t v280 = 0;
        unsigned int v281 = v278 - 1;
        uint64_t v282 = 4;
        do
        {
          if (v281 >= v280) {
            int v283 = v280;
          }
          else {
            int v283 = v281;
          }
          vDSP_vadd(*(const float **)((char *)&v227->mNumberBuffers + v282 * 4), 1, *(const float **)&v386[4 * v283 + 4], 1, *(float **)&v12[v282], 1, *((unsigned int *)v9 + 129));
          ++v280;
          v282 += 4;
        }
        while (v280 < v227->mNumberBuffers);
      }
      goto LABEL_489;
    }
    UInt32 v279 = v227->mNumberBuffers;
    int v278 = 1;
    int v291 = v227->mNumberBuffers - 1;
    if (v227->mNumberBuffers == 1) {
      goto LABEL_483;
    }
    while ((v291 & 0x80000000) == 0)
    {
      mData = (const float *)v227->mBuffers[v291].mData;
      v293 = *(const float **)&v386[4 * (v291 & (v291 >> 31)) + 4];
      int v294 = *(float **)&v12[4 * v291-- + 4];
      vDSP_vadd(mData, 1, v293, 1, v294, 1, *((unsigned int *)v9 + 129));
    }
LABEL_489:
    uint64_t v284 = VoiceProcessorV2::GetDynamicsDSPChannelCount(v9);
    if ((v284 - 65) <= 0xFFFFFFBF)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        LODWORD(v408.mSampleTime) = 136315394;
        *(void *)((char *)&v408.mSampleTime + 4) = "vpProcessDownlink_v3.cpp";
        WORD2(v408.mHostTime) = 1024;
        *(_DWORD *)((char *)&v408.mHostTime + 6) = 712;
        _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v408, 0x12u);
      }
      int v354 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v354 = &unk_1F14C8B68;
      v354[2] = -50;
    }
    UInt32 v285 = v284;
    MEMORY[0x1F4188790](v284);
    v287 = (AudioBufferList *)((char *)&v365 - v286);
    bzero((char *)&v365 - v286, v288);
    v287->UInt32 mNumberBuffers = v285;
    uint64_t v131 = (uint64_t)memcpy(v287->mBuffers, v12 + 2, 16 * v285);
    int v134 = v373;
    if (v10[3409] || v10[3410]) {
      uint64_t v131 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v9, 0x35u, *((unsigned int *)v9 + 129), v287, v375);
    }
    if (*((unsigned char *)v9 + 8900) & 1) != 0 && (*((unsigned char *)v9 + 8908))
    {
      uint64_t v131 = *((void *)v9 + 470);
      if (v131)
      {
        LODWORD(v408.mSampleTime) = 512;
        uint64_t v131 = AudioUnitProcess((AudioUnit)v131, (AudioUnitRenderActionFlags *)&v408, &v397, *((_DWORD *)v9 + 129), v287);
        LODWORD(v289) = *((_DWORD *)v9 + 129);
        v397.mSampleTime = v397.mSampleTime + (double)v289;
      }
    }
    v385 += v376;
    int v149 = v377 + 1;
    if ((v377 + 1) >= *((_DWORD *)v9 + 130)) {
      goto LABEL_508;
    }
  }
  _os_assert_log();
  _os_crash();
  __break(1u);
LABEL_633:
  dispatch_once(&VPTimestampLogScope(void)::once, &__block_literal_global_6_30742);
LABEL_605:
  double v340 = (double)(unint64_t)v227 * 0.0000000416666667 - v14;
  CALegacyLog::log(v228, 5, VPTimestampLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v3/vpProcessDownlink_v3.cpp", 876, "ProcessDownlinkAudio", "DL %f %f %f", *(double *)a7, v14, v340);
  unsigned int v341 = *((_DWORD *)v9 + 121);
  double v342 = *((double *)v9 + 41);
  if (v340 >= (double)v341 / v342)
  {
    v343 = (int *)*((void *)v9 + 1579);
    if (*((void *)data + 83) != -1) {
      dispatch_once(&VPTimestampLogScope(void)::once, &__block_literal_global_6_30742);
    }
    CALegacyLog::log(v343, 5, VPTimestampLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v3/vpProcessDownlink_v3.cpp", 878, "ProcessDownlinkAudio", "DL ERROR, processing slower than RT - %f", v340);
    unsigned int v341 = *((_DWORD *)v9 + 121);
    double v342 = *((double *)v9 + 41);
  }
  if (v14 - *((double *)v9 + 1994) > (double)(*((_DWORD *)v9 + 294) + v341) / v342)
  {
    int v344 = (int *)*((void *)v9 + 1579);
    if (*((void *)data + 83) != -1) {
      dispatch_once(&VPTimestampLogScope(void)::once, &__block_literal_global_6_30742);
    }
    CALegacyLog::log(v344, 5, VPTimestampLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v3/vpProcessDownlink_v3.cpp", 880, "ProcessDownlinkAudio", "DL ERROR, not being called in a timely manner - %f", v14 - *((double *)v9 + 1994));
  }
  *((double *)v9 + 1994) = v14;
LABEL_614:
  if (v12)
  {
    if (*((_DWORD *)v9 + 19) != 1)
    {
      if (*((unsigned char *)v9 + 1648)
        || (uint64_t v345 = FadeInOverFewFrames(*((AudioBufferList **)v9 + 204), a5, *((unsigned int *)v9 + 410), *((_DWORD *)v9 + 411)), *((unsigned char *)v9 + 1648) = v345, *((_DWORD *)v9 + 410) = HIDWORD(v345), (_BYTE)v345))
      {
        CopyAllBuffersABL(*((UInt32 **)v9 + 204), a5);
      }
    }
  }
  else
  {
    if (*((_DWORD *)v9 + 20) == 1)
    {
      if (!a5->mNumberBuffers) {
        goto LABEL_631;
      }
      unint64_t v346 = 0;
      v347 = &a5->mBuffers[0].mData;
      do
      {
        bzero(*v347, *((unsigned int *)v347 - 1));
        ++v346;
        v347 += 2;
      }
      while (v346 < a5->mNumberBuffers);
    }
    else
    {
      *((_DWORD *)v9 + 410) = 0;
      *((unsigned char *)v9 + 1648) = 0;
      FadeOutOverOneFrame(*((AudioBufferList **)v9 + 204), a5);
    }
    int v348 = *((_DWORD *)v9 + 20);
    if (v348 == 2 || v348 == 4) {
      uint64_t v13 = 0;
    }
  }
LABEL_631:
  atomic_fetch_add((atomic_uint *volatile)v9 + 621, 0xFFFFFFFF);
  return v13;
}

void sub_1BB4760F8(_Unwind_Exception *a1)
{
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)(v1 + 736));
  atomic_fetch_add((atomic_uint *volatile)(v2 + 2484), 0xFFFFFFFF);
  _Unwind_Resume(a1);
}

_DWORD *ABLRingBuffer<float>::ReadFrom(_DWORD *result, unsigned int a2, _DWORD *a3)
{
  if (a2)
  {
    unsigned int v4 = result;
    if (*a3 == result[1])
    {
      unsigned int v5 = result[2];
      if (v5)
      {
        if (v5 >= a2) {
          unsigned int v6 = a2;
        }
        else {
          unsigned int v6 = result[2];
        }
        unsigned int v7 = *result - result[3];
        if (v7 >= v6) {
          uint64_t v8 = v6;
        }
        else {
          uint64_t v8 = v7;
        }
        if (*a3)
        {
          unint64_t v9 = 0;
          unint64_t v10 = (void **)(a3 + 4);
          do
          {
            unint64_t v11 = *v10;
            v10 += 2;
            uint64_t result = memcpy(v11, (const void *)(*((void *)v4 + 3) + 4 * (v4[3] + *v4 * v9++)), 4 * v8);
            unint64_t v12 = v4[1];
          }
          while (v9 < v12);
          if (v6 > v7 && v12)
          {
            unint64_t v13 = 0;
            double v14 = (uint64_t *)(a3 + 4);
            do
            {
              uint64_t v15 = *v14;
              v14 += 2;
              uint64_t result = memcpy((void *)(v15 + 4 * v8), (const void *)(*((void *)v4 + 3) + 4 * (*v4 * v13++)), 4 * (v6 - v8));
            }
            while (v13 < v4[1]);
          }
        }
        unsigned int v16 = v4[3] + v6;
        v4[2] -= v6;
        v4[3] = v16;
        if (v16 >= *v4) {
          v4[3] = v16 - *v4;
        }
      }
    }
  }
  return result;
}

void CADeprecated::CAMutex::Locker::~Locker(CADeprecated::CAMutex::Locker *this)
{
  if (*((unsigned char *)this + 8)) {
    (*(void (**)(void))(**(void **)this + 24))();
  }
}

void *___Z31AudioIssueDetectorLibraryLoaderv_block_invoke()
{
  v0 = dlopen("/usr/lib/libAudioIssueDetector.dylib", 1);
  if (v0 || (v0 = dlopen("/usr/local/lib/libAudioIssueDetector.dylib", 1)) != 0)
  {
    AudioIssueDetectorLibraryLoader(void)::libSym = dlsym(v0, "AudioIssueDetectorCreate");
    AudioIssueDetectorLibraryLoader(void)::libSym = (uint64_t (*)(void))dlsym(v0, "AudioIssueDetectorInitialize");
    AudioIssueDetectorLibraryLoader(void)::libSym = (uint64_t (*)(void))dlsym(v0, "AudioIssueDetectorDispose");
    AudioIssueDetectorLibraryLoader(void)::libSym = (uint64_t (*)(void, void, void, void, void))dlsym(v0, "AudioIssueDetectorSetNodeFormat");
    AudioIssueDetectorLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioIssueDetectorSetNodeFormatWithDirection");
    AudioIssueDetectorLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioIssueDetectorReset");
    AudioIssueDetectorLibraryLoader(void)::libSym = (uint64_t (*)(void, void, void, void, void, void))dlsym(v0, "AudioIssueDetectorAnalyzeBuffer");
    AudioIssueDetectorLibraryLoader(void)::libSym = dlsym(v0, "AudioIssueDetectorUpdateReportingSessions");
    AudioIssueDetectorLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioIssueDetectorRemoveNode");
    AudioIssueDetectorLibraryLoader(void)::libSym = dlsym(v0, "AudioIssueDetectorSetUplinkMute");
    AudioIssueDetectorLibraryLoader(void)::libSym = dlsym(v0, "AudioIssueDetectorSetDownlinkVolume");
    AudioIssueDetectorLibraryLoader(void)::libSym = dlsym(v0, "AudioIssueDetectorSetRouteSpecificDownlinkGainAdjustment");
    AudioIssueDetectorLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioIssueDetectorSetSmartCaseMicMute");
  }
  uint64_t result = dlopen("/System/Library/Frameworks/AudioToolbox.framework/libAudioDSP.dylib", 1);
  if (result)
  {
    uint64_t result = dlsym(result, "RegisterAudioUnits_Analyzer");
    if (result)
    {
      return (void *)((uint64_t (*)(void))result)();
    }
  }
  return result;
}

void VoiceProcessorV3::DecorrelationAndCNGForMediaChat(VoiceProcessorV3 *this, AudioBufferList *a2, AudioTimeStamp *a3)
{
  inInputBufferLists[1] = *(AudioBufferList **)MEMORY[0x1E4F143B8];
  unsigned int v6 = (char *)this + 15961;
  AudioUnitParameterValue outValue = -200.0;
  AudioUnitGetParameter(*((AudioUnit *)this + 453), 0xCu, 0, 0, &outValue);
  if (outValue <= -60.0)
  {
    float v8 = *((float *)this + 413) + -1.5;
    if (v8 < -60.0) {
      float v8 = -60.0;
    }
  }
  else
  {
    if (*((unsigned char *)this + 8898) & 1) != 0 && (*((unsigned char *)this + 8906))
    {
      unsigned int v7 = (OpaqueAudioComponentInstance *)*((void *)this + 454);
      if (v7)
      {
        AudioUnitRenderActionFlags v14 = 512;
        ioOutputBufferLists = a2;
        inInputBufferLists[0] = a2;
        AudioUnitProcessMultiple(v7, &v14, a3, *((_DWORD *)this + 129), 1u, (const AudioBufferList **)inInputBufferLists, 1u, &ioOutputBufferLists);
      }
    }
    float v8 = *((float *)this + 413) + 0.5;
    if (v8 > 0.0) {
      float v8 = 0.0;
    }
  }
  *((float *)this + 413) = v8;
  if (*v6 || v6[1]) {
    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x78u, *((unsigned int *)this + 129), a2, a3);
  }
  uint64_t v9 = *((void *)this + 1112);
  if ((v9 & 0x20000) != 0 && (*((unsigned char *)this + 8906) & 2) != 0 && *((void *)this + 455))
  {
    (*(void (**)(VoiceProcessorV3 *, void, AudioTimeStamp *))(*(void *)this + 664))(this, 0, a3);
    mData = (const float *)a2->mBuffers[0].mData;
    uint64_t audio_buffer_list = vp::Audio_Buffer::get_audio_buffer_list((VoiceProcessorV3 *)((char *)this + 2752));
    vDSP_vadd(mData, 1, *(const float **)(audio_buffer_list + 16), 1, (float *)a2->mBuffers[0].mData, 1, *((unsigned int *)this + 129));
    uint64_t v9 = *((void *)this + 1112);
  }
  if ((v9 & 0x80000) != 0 && (*((unsigned char *)this + 8906) & 8) != 0 && *((void *)this + 457))
  {
    (*(void (**)(VoiceProcessorV3 *, uint64_t, AudioTimeStamp *))(*(void *)this + 664))(this, 1, a3);
    unint64_t v12 = *(const float **)&a2[1].mBuffers[0].mNumberChannels;
    uint64_t v13 = vp::Audio_Buffer::get_audio_buffer_list((VoiceProcessorV3 *)((char *)this + 2760));
    vDSP_vadd(v12, 1, *(const float **)(v13 + 16), 1, *(float **)&a2[1].mBuffers[0].mNumberChannels, 1, *((unsigned int *)this + 129));
  }
  if (*v6 || v6[1]) {
    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x79u, *((unsigned int *)this + 129), a2, a3);
  }
}

uint64_t VoiceProcessorV3::CNGAndEqForMediaChat(VoiceProcessorV3 *this, int a2, const AudioTimeStamp *a3)
{
  if (a2) {
    unsigned int v5 = (uint64_t *)((char *)this + 2760);
  }
  else {
    unsigned int v5 = (uint64_t *)((char *)this + 2752);
  }
  if (a2) {
    unsigned int v6 = 20;
  }
  else {
    unsigned int v6 = 18;
  }
  if (a2) {
    uint64_t v7 = 19;
  }
  else {
    uint64_t v7 = 17;
  }
  vp::Audio_Buffer::prepare(v5, *((_DWORD *)this + 129));
  uint64_t audio_buffer_list = (_DWORD *)vp::Audio_Buffer::get_audio_buffer_list((vp::Audio_Buffer *)v5);
  uint64_t v9 = (AudioBufferList *)audio_buffer_list;
  if (*audio_buffer_list)
  {
    unint64_t v10 = 0;
    unint64_t v11 = (void **)(audio_buffer_list + 4);
    do
    {
      bzero(*v11, *((unsigned int *)v11 - 1));
      ++v10;
      v11 += 2;
    }
    while (v10 < v9->mNumberBuffers);
  }
  AudioUnitRenderActionFlags ioActionFlags = 512;
  unint64_t v12 = (AudioUnit *)((char *)this + 8 * v7);
  AudioUnitSetParameter(v12[438], 1u, 0, 0, *((float *)this + 413) + (float)((float)(*((float *)this + 3132) + -1.0) * 24.0), 0);
  AudioUnitProcess(v12[438], &ioActionFlags, a3, *((_DWORD *)this + 129), v9);
  uint64_t result = VoiceProcessorV2::VPUseAUInProcess(this, v6, 0);
  if (result)
  {
    AudioUnitRenderActionFlags ioActionFlags = 512;
    return AudioUnitProcess(*((AudioUnit *)this + v6 + 438), &ioActionFlags, a3, *((_DWORD *)this + 129), v9);
  }
  return result;
}

uint64_t VoiceProcessorV3::DownlinkAGCForMediaChat(VoiceProcessorV3 *this, AudioBufferList *a2, unsigned int a3, const AudioTimeStamp *a4)
{
  UInt32 ioDataSize = 4;
  int outData = 0;
  AudioUnitParameterValue v37 = 0.0;
  uint64_t result = AudioUnitGetProperty(*((AudioUnit *)this + 452), 0x15u, 0, 0, &outData, &ioDataSize);
  if (!outData)
  {
    float __C = 0.0;
    vp::Audio_Buffer_List_Ref::Audio_Buffer_List_Ref(&v35, a2);
    *(void *)AudioUnitParameterValue outValue = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)&v35);
    uint64_t v34 = v9;
    int v10 = 0;
    int v11 = 0;
    uint64_t v31 = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)&v35);
    uint64_t v32 = v12;
    float v13 = -1.0;
    while (vp::Audio_Buffer_Iterator::operator!=(outValue, &v31))
    {
      data = (const float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)outValue);
      vDSP_svesq(data, 1, &__C, a3);
      if (__C > v13)
      {
        float v13 = __C;
        int v11 = v10;
      }
      ++v10;
      vp::Audio_Buffer_Iterator::operator++((uint64_t)outValue);
    }
    vp::Audio_Buffer::prepare((uint64_t *)this + 346, a3);
    uint64_t audio_buffer_list = vp::Audio_Buffer::get_audio_buffer_list((VoiceProcessorV3 *)((char *)this + 2768));
    memcpy(*(void **)(audio_buffer_list + 16), a2->mBuffers[v11].mData, a2->mBuffers[v11].mDataByteSize);
    AudioUnitRenderActionFlags ioActionFlags = 512;
    uint64_t v16 = *((void *)this + 1112);
    if ((v16 & 2) != 0 && (*((unsigned char *)this + 8904) & 2) != 0)
    {
      double v17 = (OpaqueAudioComponentInstance *)*((void *)this + 439);
      if (v17)
      {
        outValue[0] = 0.0;
        AudioUnitGetParameter(v17, 0x73707066u, 0, 0, outValue);
        AudioUnitSetParameter(*((AudioUnit *)this + 452), 0x23u, 0, 0, outValue[0], 0);
        uint64_t v16 = *((void *)this + 1112);
      }
    }
    if ((v16 & 0x8000) != 0 && (*((unsigned char *)this + 8905) & 0x80) != 0)
    {
      uint64_t v18 = (OpaqueAudioComponentInstance *)*((void *)this + 453);
      if (v18)
      {
        outValue[0] = -200.0;
        AudioUnitGetParameter(v18, 0x14u, 0, 0, outValue);
        int v19 = *((_DWORD *)this + 566);
        if (v19)
        {
          *((_DWORD *)this + 566) = v19 - 1;
        }
        else
        {
          float v28 = *((float *)this + 1122);
          if (outValue[0] <= v28 || *((_DWORD *)this + 568))
          {
            if (outValue[0] <= v28 && *((_DWORD *)this + 568) == 1)
            {
              AudioUnitSetParameter(*((AudioUnit *)this + 452), 8u, 0, 0, *((AudioUnitParameterValue *)this + 569), 0);
              AudioUnitSetParameter(*((AudioUnit *)this + 452), 0x2Bu, 0, 0, *((AudioUnitParameterValue *)this + 570), 0);
              *((_DWORD *)this + 566) = *((float *)this + 1123);
              *((_DWORD *)this + 568) = 0;
            }
          }
          else
          {
            AudioUnitSetParameter(*((AudioUnit *)this + 452), 8u, 0, 0, *((AudioUnitParameterValue *)this + 1121), 0);
            AudioUnitSetParameter(*((AudioUnit *)this + 452), 0x2Bu, 0, 0, *((AudioUnitParameterValue *)this + 1120), 0);
            *((_DWORD *)this + 566) = *((float *)this + 1123);
            *((_DWORD *)this + 568) = 1;
          }
        }
      }
    }
    uint64_t v20 = (OpaqueAudioComponentInstance *)*((void *)this + 452);
    Float64 v21 = (AudioBufferList *)vp::Audio_Buffer::get_audio_buffer_list((VoiceProcessorV3 *)((char *)this + 2768));
    AudioUnitProcess(v20, &ioActionFlags, a4, a3, v21);
    AudioUnitGetParameter(*((AudioUnit *)this + 452), 1u, 0, 0, &v37);
    float v22 = __exp10f(v37 / 20.0);
    Float64 v23 = (float *)((char *)this + 16896);
    float v29 = (float)(v22 - *v23) / (float)a3;
    unint64_t v35 = a2;
    *(void *)AudioUnitParameterValue outValue = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)&v35);
    uint64_t v34 = v24;
    uint64_t v31 = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)&v35);
    uint64_t v32 = v25;
    while (1)
    {
      uint64_t result = vp::Audio_Buffer_Iterator::operator!=(outValue, &v31);
      if ((result & 1) == 0) {
        break;
      }
      double v26 = (const float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)outValue);
      double v27 = (float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)outValue);
      vDSP_vrampmul(v26, 1, v23, &v29, v27, 1, a3);
      vp::Audio_Buffer_Iterator::operator++((uint64_t)outValue);
    }
    float *v23 = v22;
  }
  return result;
}

BOOL VoiceProcessorV3::ApplyMediaChatGains(VoiceProcessorV3 *this, AudioBufferList *a2, AudioBufferList *a3)
{
  float v6 = COERCE_FLOAT(atomic_load((unsigned int *)this + 562));
  if (*((float *)this + 563) == v6)
  {
    vp::Audio_Buffer_List_Ref::Audio_Buffer_List_Ref(&v39, a2);
    uint64_t v37 = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)&v39);
    uint64_t v38 = v23;
    uint64_t v35 = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)&v39);
    uint64_t v36 = v24;
    while (vp::Audio_Buffer_Iterator::operator!=(&v37, &v35))
    {
      data = (const float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v37);
      double v26 = (float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v37);
      unsigned int frame_count = vp::Audio_Buffer_Ref::get_frame_count((vp::Audio_Buffer_Ref *)&v37);
      vDSP_vsmul(data, 1, (const float *)this + 564, v26, 1, frame_count);
      vp::Audio_Buffer_Iterator::operator++((uint64_t)&v37);
    }
    vp::Audio_Buffer_List_Ref::Audio_Buffer_List_Ref(&v39, a3);
    uint64_t v37 = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)&v39);
    uint64_t v38 = v28;
    uint64_t v35 = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)&v39);
    uint64_t v36 = v29;
    unint64_t v30 = (const float *)((char *)this + 2260);
    while (1)
    {
      BOOL result = vp::Audio_Buffer_Iterator::operator!=(&v37, &v35);
      if (!result) {
        break;
      }
      uint64_t v31 = (const float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v37);
      uint64_t v32 = (float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v37);
      unsigned int v33 = vp::Audio_Buffer_Ref::get_frame_count((vp::Audio_Buffer_Ref *)&v37);
      vDSP_vsmul(v31, 1, v30, v32, 1, v33);
      vp::Audio_Buffer_Iterator::operator++((uint64_t)&v37);
    }
  }
  else
  {
    float v7 = 0.0;
    if (v6 <= 0.25)
    {
      float v8 = roundf(v6 * 16.0) * 0.0625;
      float v9 = (float)((float)((float)(v8 * 16.0) + -1.0) * -0.25) + 1.0;
      if (v8 <= 0.0625) {
        float v9 = 1.0;
      }
      float v7 = v9 * *((float *)this + 1124);
    }
    float v10 = __exp10f((float)((float)(*((float *)this + 1118)+ (float)(v6 * (float)(*((float *)this + 1119) - *((float *)this + 1118))))+ v7)* 0.05);
    float __Step = (float)(v10 - *((float *)this + 564)) / (float)*((unsigned int *)this + 129);
    vp::Audio_Buffer_List_Ref::Audio_Buffer_List_Ref(&v39, a2);
    uint64_t v37 = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)&v39);
    uint64_t v38 = v11;
    uint64_t v35 = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)&v39);
    uint64_t v36 = v12;
    while (vp::Audio_Buffer_Iterator::operator!=(&v37, &v35))
    {
      float v13 = (const float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v37);
      AudioUnitRenderActionFlags v14 = (float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v37);
      unsigned int v15 = vp::Audio_Buffer_Ref::get_frame_count((vp::Audio_Buffer_Ref *)&v37);
      vDSP_vrampmul(v13, 1, (float *)this + 564, &__Step, v14, 1, v15);
      vp::Audio_Buffer_Iterator::operator++((uint64_t)&v37);
    }
    float v16 = __exp10f((float)(*((float *)this + 1116) + (float)(v6 * (float)(*((float *)this + 1117) - *((float *)this + 1116))))* 0.05);
    float v34 = (float)(v16 - *((float *)this + 565)) / (float)*((unsigned int *)this + 129);
    vp::Audio_Buffer_List_Ref::Audio_Buffer_List_Ref(&v39, a3);
    uint64_t v37 = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)&v39);
    uint64_t v38 = v17;
    uint64_t v35 = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)&v39);
    uint64_t v36 = v18;
    while (1)
    {
      BOOL result = vp::Audio_Buffer_Iterator::operator!=(&v37, &v35);
      if (!result) {
        break;
      }
      uint64_t v20 = (const float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v37);
      Float64 v21 = (float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v37);
      unsigned int v22 = vp::Audio_Buffer_Ref::get_frame_count((vp::Audio_Buffer_Ref *)&v37);
      vDSP_vrampmul(v20, 1, (float *)this + 565, &v34, v21, 1, v22);
      vp::Audio_Buffer_Iterator::operator++((uint64_t)&v37);
    }
    *((float *)this + 563) = v6;
    *((float *)this + 564) = v10;
    *((float *)this + 565) = v16;
  }
  return result;
}

id GetSubDictionaryWithKey(const __CFDictionary *a1, const char *a2, char a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef v5 = a1;
  float v6 = [NSString stringWithUTF8String:a2];
  if ((a3 & 1) == 0)
  {
    float v7 = [(__CFDictionary *)v5 objectForKeyedSubscript:v6];

    if (!v7)
    {
      if (SCLogScope(void)::once != -1) {
        dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
      }
      if (SCLogScope(void)::scope)
      {
        id v8 = *(id *)SCLogScope(void)::scope;
        if (!v8) {
          goto LABEL_12;
        }
      }
      else
      {
        id v8 = (id)MEMORY[0x1E4F14500];
        id v9 = MEMORY[0x1E4F14500];
      }
      float v10 = v8;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        int v30 = 136315650;
        uint64_t v31 = "LoadSpatialCaptureTuning.mm";
        __int16 v32 = 1024;
        int v33 = 23;
        __int16 v34 = 2080;
        uint64_t v35 = (const char *)[v6 UTF8String];
        _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d required key missing '%s'", (uint8_t *)&v30, 0x1Cu);
      }
    }
  }
LABEL_12:
  uint64_t v11 = [(__CFDictionary *)v5 objectForKeyedSubscript:v6];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  if (isKindOfClass)
  {
    if (SCLogScope(void)::once != -1) {
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
    }
    if (SCLogScope(void)::scope)
    {
      id v13 = *(id *)SCLogScope(void)::scope;
      if (!v13)
      {
LABEL_30:
        unsigned int v22 = (void *)MEMORY[0x1E4F1C9E8];
        uint64_t v23 = [(__CFDictionary *)v5 objectForKeyedSubscript:v6];
        float v16 = [v22 dictionaryWithContentsOfFile:v23];

        if (v16) {
          goto LABEL_45;
        }
        if (SCLogScope(void)::once != -1) {
          dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
        }
        if (SCLogScope(void)::scope)
        {
          uint64_t v17 = *(id *)SCLogScope(void)::scope;
          if (!v17) {
            goto LABEL_44;
          }
        }
        else
        {
          uint64_t v17 = MEMORY[0x1E4F14500];
          id v24 = MEMORY[0x1E4F14500];
        }
        if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
          goto LABEL_43;
        }
        int v30 = 136315394;
        uint64_t v31 = "LoadSpatialCaptureTuning.mm";
        __int16 v32 = 1024;
        int v33 = 29;
        uint64_t v25 = "%25s:%-5d Dictionary file not present on disk!";
        double v26 = v17;
        uint32_t v27 = 18;
        goto LABEL_42;
      }
    }
    else
    {
      id v13 = (id)MEMORY[0x1E4F14500];
      id v18 = MEMORY[0x1E4F14500];
    }
    int v19 = v13;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      id v20 = [(__CFDictionary *)v5 objectForKeyedSubscript:v6];
      uint64_t v21 = [v20 UTF8String];
      int v30 = 136315906;
      uint64_t v31 = "LoadSpatialCaptureTuning.mm";
      __int16 v32 = 1024;
      int v33 = 27;
      __int16 v34 = 2080;
      uint64_t v35 = a2;
      __int16 v36 = 2080;
      uint64_t v37 = v21;
      _os_log_impl(&dword_1BB0CE000, v19, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading plist file for %s from %s", (uint8_t *)&v30, 0x26u);
    }
    goto LABEL_30;
  }
  AudioUnitRenderActionFlags v14 = [(__CFDictionary *)v5 objectForKeyedSubscript:v6];
  objc_opt_class();
  char v15 = objc_opt_isKindOfClass();

  if (v15)
  {
    float v16 = [(__CFDictionary *)v5 objectForKeyedSubscript:v6];
    goto LABEL_45;
  }
  if (a3) {
    goto LABEL_44;
  }
  if (SCLogScope(void)::once != -1) {
    dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
  }
  if (SCLogScope(void)::scope)
  {
    uint64_t v17 = *(id *)SCLogScope(void)::scope;
    if (!v17) {
      goto LABEL_44;
    }
  }
  else
  {
    uint64_t v17 = MEMORY[0x1E4F14500];
    id v28 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    int v30 = 136315650;
    uint64_t v31 = "LoadSpatialCaptureTuning.mm";
    __int16 v32 = 1024;
    int v33 = 33;
    __int16 v34 = 2080;
    uint64_t v35 = a2;
    uint64_t v25 = "%25s:%-5d Bad object for key '%s'";
    double v26 = v17;
    uint32_t v27 = 28;
LABEL_42:
    _os_log_impl(&dword_1BB0CE000, v26, OS_LOG_TYPE_ERROR, v25, (uint8_t *)&v30, v27);
  }
LABEL_43:

LABEL_44:
  float v16 = 0;
LABEL_45:

  return v16;
}

void sub_1BB4774A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t GetCameraDirectionFromString(NSString *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  uint64_t v2 = 0;
  char v3 = 1;
  while (1)
  {
    uint64_t v4 = v2;
    char v5 = v3;
    float v6 = (v3 & 1) != 0 ? "Front" : "?";
    float v7 = (v2 & 1) != 0 ? "Back" : v6;
    id v8 = [NSString stringWithUTF8String:v7];
    BOOL v9 = [(NSString *)v1 isEqualToString:v8];

    if (v9) {
      break;
    }
    char v3 = 0;
    uint64_t v2 = 1;
    if ((v5 & 1) == 0)
    {
      if (SCLogScope(void)::once != -1) {
        dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
      }
      if (SCLogScope(void)::scope)
      {
        id v10 = *(id *)SCLogScope(void)::scope;
        if (!v10) {
          break;
        }
      }
      else
      {
        id v10 = (id)MEMORY[0x1E4F14500];
        id v11 = MEMORY[0x1E4F14500];
      }
      uint64_t v12 = v10;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        int v14 = 136315650;
        char v15 = "LoadSpatialCaptureTuning.mm";
        __int16 v16 = 1024;
        int v17 = 96;
        __int16 v18 = 2080;
        uint64_t v19 = [(NSString *)v1 UTF8String];
        _os_log_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d Bad beam direction string: '%s'", (uint8_t *)&v14, 0x1Cu);
      }

      break;
    }
  }

  return v4;
}

void sub_1BB4776E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t GetOrientationFromString(NSString *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  for (uint64_t i = 0; i != 4; ++i)
  {
    char v3 = [NSString stringWithUTF8String:off_1E623D9D0[i]];
    BOOL v4 = [(NSString *)v1 isEqualToString:v3];

    if (v4)
    {
      uint64_t v6 = i + 1;
      goto LABEL_15;
    }
  }
  if (SCLogScope(void)::once != -1) {
    dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
  }
  if (!SCLogScope(void)::scope)
  {
    id v5 = (id)MEMORY[0x1E4F14500];
    id v7 = MEMORY[0x1E4F14500];
    goto LABEL_11;
  }
  id v5 = *(id *)SCLogScope(void)::scope;
  if (v5)
  {
LABEL_11:
    id v8 = v5;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315650;
      id v11 = "LoadSpatialCaptureTuning.mm";
      __int16 v12 = 1024;
      int v13 = 120;
      __int16 v14 = 2080;
      uint64_t v15 = [(NSString *)v1 UTF8String];
      _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d Bad orientation string: '%s'", (uint8_t *)&v10, 0x1Cu);
    }
  }
  uint64_t v6 = 1;
LABEL_15:

  return v6;
}

void sub_1BB4778A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t isAutomaticMicModeFeatureFlagOn(void)
{
  return _os_feature_enabled_impl();
}

applesauce::CF::StringRef *vp::ExtractBundleIDFromAVAUVoiceIOChatFlavorNotification(vp *this, CFDictionaryRef theDict)
{
  Value = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F15520]);
  BOOL v4 = Value;
  if (Value) {
    CFRetain(Value);
  }
  return applesauce::CF::StringRef::StringRef(this, v4);
}

id anonymous namespace'::log(_anonymous_namespace_ *this)
{
  return v1;
}

uint64_t ___ZN12_GLOBAL__N_13logEv_block_invoke()
{
  return MEMORY[0x1F41817F8]();
}

_anonymous_namespace_ *vp::GetRequestedChatFlavorForBundleID(vp *this, const applesauce::CF::StringRef *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (!this) {
    BOOL v4 = {;
  }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v9[0]) = 0;
      id v5 = "AUVoiceIO can't get requested ChatFlavor for null bundleID";
      uint64_t v6 = v4;
      uint32_t v7 = 2;
      goto LABEL_9;
    }
LABEL_6:

    return 0;
  }
  uint64_t v2 = (_anonymous_namespace_ *)AVAUVoiceIOGetPreferredChatFlavorForBundleID();
  char v3 = v2;
  if (v2 >= 3) {
    BOOL v4 = {;
  }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v9[0] = 67109120;
      v9[1] = v3;
      id v5 = "Unknown AVAUVoiceIOChatFlavor - %d. Return Default VP chat flavor instead";
      uint64_t v6 = v4;
      uint32_t v7 = 8;
LABEL_9:
      _os_log_error_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_ERROR, v5, (uint8_t *)v9, v7);
      goto LABEL_6;
    }
    goto LABEL_6;
  }
  return v3;
}

void sub_1BB477AF8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void vp::SetActiveChatFlavorForBundleID(_anonymous_namespace_ *a1, uint64_t a2)
{
  if (a2)
  {
    AVAUVoiceIOSetActiveChatFlavorForBundleID();
  }
  else {
    uint64_t v2 = {;
  }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)char v3 = 0;
      _os_log_error_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_ERROR, "AUVoiceIO can't set active ChatFlavor  for null bundleID", v3, 2u);
    }
  }
}

void vp::SetSupportedChatFlavorsForBundleID(vp *this, const applesauce::CF::ArrayRef *a2, const applesauce::CF::StringRef *a3)
{
  if (a2)
  {
    AVAUVoiceIOSetSupportedChatFlavorsForBundleID();
  }
  else {
    char v3 = {;
  }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)BOOL v4 = 0;
      _os_log_error_impl(&dword_1BB0CE000, v3, OS_LOG_TYPE_ERROR, "AUVoiceIO can't set suported ChatFlavors for null bundleID", v4, 2u);
    }
  }
}

uint64_t vp::IsAutomaticChatFlavorEnabledForBundleID(vp *this, const applesauce::CF::StringRef *a2)
{
  if (*(void *)this)
  {
    uint64_t result = isAutomaticMicModeFeatureFlagOn();
    if (result) {
      return AVAUVoiceIOIsAutoChatFlavorEnabledForBundleID();
    }
  }
  else {
    char v3 = {;
  }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)BOOL v4 = 0;
      _os_log_error_impl(&dword_1BB0CE000, v3, OS_LOG_TYPE_ERROR, "AUVoiceIO can't get automaic chat flavor update for null bundleID", v4, 2u);
    }

    return 0;
  }
  return result;
}

void std::vector<WindUtility::EventTracker<float>>::resize(void *a1, unint64_t a2)
{
  BOOL v4 = (char *)*a1;
  id v5 = (char *)a1[1];
  unint64_t v6 = 0x8E38E38E38E38E39 * ((uint64_t)&v5[-*a1] >> 3);
  unint64_t v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 >= v6) {
      return;
    }
    uint64_t v20 = &v4[72 * a2];
    goto LABEL_23;
  }
  uint64_t v8 = a1[2];
  if (0x8E38E38E38E38E39 * ((v8 - (uint64_t)v5) >> 3) >= v7)
  {
    uint64_t v20 = &v5[72 * v7];
    do
    {
      *((_OWORD *)v5 + 1) = 0uLL;
      *((_OWORD *)v5 + 2) = 0uLL;
      *(_OWORD *)id v5 = 0uLL;
      *((void *)v5 + 6) = 0;
      *((void *)v5 + 7) = 1;
      *((_DWORD *)v5 + 16) = 0;
      v5 += 72;
    }
    while (v5 != v20);
LABEL_23:
    a1[1] = v20;
    return;
  }
  if (a2 > 0x38E38E38E38E38ELL) {
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v9 = 0x8E38E38E38E38E39 * ((v8 - (uint64_t)v4) >> 3);
  uint64_t v10 = 2 * v9;
  if (2 * v9 <= a2) {
    uint64_t v10 = a2;
  }
  if (v9 >= 0x1C71C71C71C71C7) {
    unint64_t v11 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v11 = v10;
  }
  if (v11 > 0x38E38E38E38E38ELL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  __int16 v12 = (char *)operator new(72 * v11);
  int v13 = &v12[72 * v6];
  __int16 v14 = &v12[72 * a2];
  uint64_t v15 = v13;
  do
  {
    *((_OWORD *)v15 + 1) = 0uLL;
    *((_OWORD *)v15 + 2) = 0uLL;
    *(_OWORD *)uint64_t v15 = 0uLL;
    *((void *)v15 + 6) = 0;
    *((void *)v15 + 7) = 1;
    *((_DWORD *)v15 + 16) = 0;
    v15 += 72;
  }
  while (v15 != v14);
  uint64_t v16 = (char *)*a1;
  if (v5 != (char *)*a1)
  {
    do
    {
      *(_OWORD *)(v13 - 72) = *(_OWORD *)(v5 - 72);
      long long v17 = *(_OWORD *)(v5 - 56);
      long long v18 = *(_OWORD *)(v5 - 40);
      long long v19 = *(_OWORD *)(v5 - 24);
      *((_DWORD *)v13 - 2) = *((_DWORD *)v5 - 2);
      *(_OWORD *)(v13 - 24) = v19;
      *(_OWORD *)(v13 - 40) = v18;
      *(_OWORD *)(v13 - 56) = v17;
      v13 -= 72;
      v5 -= 72;
    }
    while (v5 != v16);
    id v5 = (char *)*a1;
  }
  *a1 = v13;
  a1[1] = v14;
  a1[2] = &v12[72 * v11];
  if (v5)
  {
    operator delete(v5);
  }
}

void WindSuppressorCore::~WindSuppressorCore(WindSuppressorCore *this)
{
  uint64_t v2 = (void *)*((void *)this + 39);
  if (v2)
  {
    *((void *)this + 40) = v2;
    operator delete(v2);
  }
  char v3 = (void *)*((void *)this + 36);
  if (v3)
  {
    *((void *)this + 37) = v3;
    operator delete(v3);
  }
  __int16 v12 = (void **)((char *)this + 264);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  BOOL v4 = (void *)*((void *)this + 30);
  if (v4)
  {
    *((void *)this + 31) = v4;
    operator delete(v4);
  }
  id v5 = (void *)*((void *)this + 27);
  if (v5)
  {
    *((void *)this + 28) = v5;
    operator delete(v5);
  }
  unint64_t v6 = (void *)*((void *)this + 24);
  if (v6)
  {
    *((void *)this + 25) = v6;
    operator delete(v6);
  }
  unint64_t v7 = (void *)*((void *)this + 21);
  if (v7)
  {
    *((void *)this + 22) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 18);
  if (v8)
  {
    *((void *)this + 19) = v8;
    operator delete(v8);
  }
  unint64_t v9 = (void *)*((void *)this + 15);
  if (v9)
  {
    *((void *)this + 16) = v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)*((void *)this + 12);
  if (v10)
  {
    *((void *)this + 13) = v10;
    operator delete(v10);
  }
  unint64_t v11 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v11;
    operator delete(v11);
  }
}

uint64_t WindUtility::EventTracker<float>::update(uint64_t result, float a2)
{
  float v2 = *(float *)result;
  float v3 = *(float *)(result + 4);
  switch(*(_DWORD *)(result + 64))
  {
    case 0:
      float v4 = *(float *)(result + 8);
      if (v2 < a2) {
        goto LABEL_14;
      }
      goto LABEL_23;
    case 1:
      unint64_t v5 = *(void *)(result + 56);
      float v4 = *(float *)(result + 20) + (float)(*(float *)(result + 24) * (float)v5);
      if (v3 > a2)
      {
        unint64_t v5 = 0;
        int v6 = 2;
LABEL_10:
        *(_DWORD *)(result + 64) = v6;
        goto LABEL_22;
      }
      float v8 = *(float *)(result + 12);
      if (v4 < v8) {
        goto LABEL_22;
      }
      goto LABEL_17;
    case 2:
      float v4 = *(float *)(result + 16);
      if (v2 < a2) {
        goto LABEL_14;
      }
      unint64_t v5 = *(void *)(result + 56);
      unint64_t v7 = *(void *)(result + 32);
      goto LABEL_19;
    case 3:
      float v4 = *(float *)(result + 12);
      if (v3 <= a2) {
        goto LABEL_23;
      }
      unint64_t v5 = 0;
      int v6 = 4;
      goto LABEL_10;
    case 4:
      if (v2 < a2)
      {
        float v8 = *(float *)(result + 12);
LABEL_17:
        *(_DWORD *)(result + 64) = 3;
        goto LABEL_27;
      }
      float v4 = *(float *)(result + 16);
      unint64_t v5 = *(void *)(result + 56);
      unint64_t v7 = *(void *)(result + 40);
LABEL_19:
      if (v5 > v7)
      {
        unint64_t v5 = 0;
        int v9 = 5;
        goto LABEL_21;
      }
      goto LABEL_22;
    case 5:
      unint64_t v5 = *(void *)(result + 56);
      float v4 = *(float *)(result + 20) + (float)(*(float *)(result + 28) * (float)v5);
      if (v2 < a2)
      {
LABEL_14:
        unint64_t v5 = 0;
        int v9 = 1;
LABEL_21:
        *(_DWORD *)(result + 64) = v9;
        *(float *)(result + 20) = v4;
        goto LABEL_22;
      }
      float v8 = *(float *)(result + 8);
      if (v4 > v8)
      {
LABEL_22:
        *(void *)(result + 56) = v5 + 1;
LABEL_23:
        float v8 = v4;
        goto LABEL_24;
      }
      *(_DWORD *)(result + 64) = 0;
LABEL_27:
      *(void *)(result + 56) = 0;
LABEL_24:
      *(float *)(result + 16) = v8;
      return result;
    default:
      unint64_t v5 = *(void *)(result + 56);
      float v4 = 0.0;
      goto LABEL_22;
  }
}

void IVA_HRLS_Rank1::CovarianceUpdate(IVA_HRLS_Rank1 *this)
{
  int v1 = *((_DWORD *)this + 11);
  int v23 = *((_DWORD *)this + 12);
  if (v1)
  {
    unint64_t v3 = 0;
    float v4 = (const float *)((char *)this + 1152);
    unint64_t v5 = (const float *)((char *)this + 108);
    int v6 = (const float *)((char *)this + 104);
    unint64_t v7 = (const float *)((char *)this + 112);
    do
    {
      float __B = 0.0;
      float __B = sqrtf(fmaxf(*((float *)this + 4) / (float)(*(float *)(*((void *)this + 105) + 4 * v3) + *((float *)this + 30)), 0.0));
      vDSP_vclr(*((float **)this + 100), 1, *((unsigned int *)this + 12));
      vDSP_vclr(*((float **)this + 101), 1, *((unsigned int *)this + 12));
      vDSP_vsmul(*(const float **)(*((void *)this + 135) + 24 * v3), 1, v4, *(float **)(*((void *)this + 135) + 24 * v3), 1, (*((_DWORD *)this + 12) * *((_DWORD *)this + 13)));
      vDSP_vsmul(*(const float **)(*((void *)this + 138) + 24 * v3), 1, v4, *(float **)(*((void *)this + 138) + 24 * v3), 1, (*((_DWORD *)this + 12) * *((_DWORD *)this + 13)));
      vDSP_vclr(*((float **)this + 76), 1, (*((_DWORD *)this + 12) * *((_DWORD *)this + 11)));
      vDSP_vclr(*((float **)this + 79), 1, (*((_DWORD *)this + 12) * *((_DWORD *)this + 11)));
      LODWORD(v8) = *((_DWORD *)this + 11);
      if (v8)
      {
        unint64_t v9 = 0;
        do
        {
          if (v8)
          {
            uint64_t v10 = 0;
            unint64_t v11 = 0;
            do
            {
              vDSP_zvcma((const DSPSplitComplex *)(*(void *)(*((void *)this + 141) + 24 * v3)+ 16 * (v9 + v8 * v11++)), 1, (const DSPSplitComplex *)(*((void *)this + 55) + v10), 1, (const DSPSplitComplex *)(*((void *)this + 94) + 16 * v9), 1, (const DSPSplitComplex *)(*((void *)this + 94) + 16 * v9), 1, *((unsigned int *)this + 12));
              unint64_t v8 = *((unsigned int *)this + 11);
              v10 += 16;
            }
            while (v11 < v8);
          }
          ++v9;
        }
        while (v9 < v8);
      }
      vDSP_vsmul(*((const float **)this + 76), 1, &__B, *((float **)this + 76), 1, (*((_DWORD *)this + 12) * v8));
      vDSP_vsmul(*((const float **)this + 79), 1, &__B, *((float **)this + 79), 1, (*((_DWORD *)this + 12) * *((_DWORD *)this + 11)));
      if (*((_DWORD *)this + 11))
      {
        uint64_t v12 = 0;
        unint64_t v13 = 0;
        do
        {
          vDSP_zvmgsa((const DSPSplitComplex *)(*((void *)this + 94) + v12), 1, *((const float **)this + 100), 1, *((float **)this + 100), 1, *((unsigned int *)this + 12));
          ++v13;
          v12 += 16;
        }
        while (v13 < *((unsigned int *)this + 11));
      }
      vDSP_vsadd(*((const float **)this + 100), 1, v5, **((float ***)this + 73), 1, *((unsigned int *)this + 12));
      vDSP_vthr(**((const float ***)this + 73), 1, *((const float **)this + 19), **((float ***)this + 73), 1, *((unsigned int *)this + 12));
      vvsqrtf(*((float **)this + 100), **((const float ***)this + 73), &v23);
      vDSP_vadd(*((const float **)this + 100), 1, **((const float ***)this + 73), 1, *((float **)this + 100), 1, *((unsigned int *)this + 12));
      vDSP_vthr(*((const float **)this + 100), 1, v6, *((float **)this + 100), 1, *((unsigned int *)this + 12));
      vDSP_svdiv(v7, *((const float **)this + 100), 1, **((float ***)this + 73), 1, *((unsigned int *)this + 12));
      vDSP_vclr(*((float **)this + 82), 1, (*((_DWORD *)this + 12) * *((_DWORD *)this + 11)));
      vDSP_vclr(*((float **)this + 85), 1, (*((_DWORD *)this + 12) * *((_DWORD *)this + 11)));
      LODWORD(v14) = *((_DWORD *)this + 11);
      if (v14)
      {
        unint64_t v15 = 0;
        do
        {
          if (v14)
          {
            uint64_t v16 = 0;
            unint64_t v17 = 0;
            do
            {
              vDSP_zvma((const DSPSplitComplex *)(*(void *)(*((void *)this + 141) + 24 * v3)+ 16 * (v17++ + v15 * v14)), 1, (const DSPSplitComplex *)(*((void *)this + 94) + v16), 1, (const DSPSplitComplex *)(*((void *)this + 97) + 16 * v15), 1, (const DSPSplitComplex *)(*((void *)this + 97) + 16 * v15), 1, *((unsigned int *)this + 12));
              unint64_t v14 = *((unsigned int *)this + 11);
              v16 += 16;
            }
            while (v17 < v14);
          }
          vDSP_zrvmul((const DSPSplitComplex *)(*((void *)this + 97) + 16 * v15), 1, **((const float ***)this + 73), 1, (const DSPSplitComplex *)(*((void *)this + 97) + 16 * v15), 1, *((unsigned int *)this + 12));
          ++v15;
          unint64_t v14 = *((unsigned int *)this + 11);
        }
        while (v15 < v14);
        if (v14)
        {
          unint64_t v18 = 0;
          do
          {
            if (v14)
            {
              uint64_t v19 = 0;
              for (unint64_t i = 0; i < v14; ++i)
              {
                uint64_t v21 = (const DSPSplitComplex *)(*(void *)(*((void *)this + 141) + 24 * v3)
                                              + 16 * (i + v18 * v14));
                vDSP_zvcma((const DSPSplitComplex *)(*((void *)this + 94) + v19), 1, (const DSPSplitComplex *)(*((void *)this + 97) + 16 * v18), 1, v21, 1, v21, 1, *((unsigned int *)this + 12));
                unint64_t v14 = *((unsigned int *)this + 11);
                v19 += 16;
              }
            }
            ++v18;
          }
          while (v18 < v14);
        }
      }
      ++v3;
    }
    while (v3 < v14);
  }
}

void IVA_HRLS_Rank1::WAUpdate(IVA_HRLS_Rank1 *this)
{
  LODWORD(v2) = *((_DWORD *)this + 11);
  if (v2)
  {
    unint64_t v3 = 0;
    do
    {
      vDSP_vclr(*((float **)this + 82), 1, (*((_DWORD *)this + 12) * v2));
      vDSP_vclr(*((float **)this + 85), 1, (*((_DWORD *)this + 12) * *((_DWORD *)this + 11)));
      unsigned int v4 = *((_DWORD *)this + 11);
      if (v4)
      {
        for (unint64_t i = 0; i < v4; ++i)
        {
          if (v4)
          {
            for (unsigned int j = 0; j < v4; ++j)
            {
              vDSP_zvcma((const DSPSplitComplex *)(*(void *)(*((void *)this + 141) + 24 * v3)+ 16 * (v4 * j + i)), 1, (const DSPSplitComplex *)(*((void *)this + 132) + 16 * (v4 * j + v3)), 1, (const DSPSplitComplex *)(*((void *)this + 97) + 16 * i), 1, (const DSPSplitComplex *)(*((void *)this + 97) + 16 * i), 1, *((unsigned int *)this + 12));
              unsigned int v4 = *((_DWORD *)this + 11);
            }
          }
        }
      }
      vDSP_vclr(*((float **)this + 76), 1, *((_DWORD *)this + 12) * v4);
      vDSP_vclr(*((float **)this + 79), 1, (*((_DWORD *)this + 12) * *((_DWORD *)this + 11)));
      LODWORD(v7) = *((_DWORD *)this + 11);
      if (v7)
      {
        unint64_t v8 = 0;
        do
        {
          if (v7)
          {
            uint64_t v9 = 0;
            unint64_t v10 = 0;
            do
            {
              vDSP_zvma((const DSPSplitComplex *)(*(void *)(*((void *)this + 141) + 24 * v3)+ 16 * (v10++ + v8 * v7)), 1, (const DSPSplitComplex *)(*((void *)this + 97) + v9), 1, (const DSPSplitComplex *)(*((void *)this + 94) + 16 * v8), 1, (const DSPSplitComplex *)(*((void *)this + 94) + 16 * v8), 1, *((unsigned int *)this + 12));
              unint64_t v7 = *((unsigned int *)this + 11);
              v9 += 16;
            }
            while (v10 < v7);
          }
          ++v8;
        }
        while (v8 < v7);
      }
      vDSP_vclr(**((float ***)this + 73), 1, *((unsigned int *)this + 12));
      if (*((_DWORD *)this + 11))
      {
        uint64_t v11 = 0;
        unint64_t v12 = 0;
        do
        {
          vDSP_zvmgsa((const DSPSplitComplex *)(*((void *)this + 97) + v11), 1, **((const float ***)this + 73), 1, **((float ***)this + 73), 1, *((unsigned int *)this + 12));
          ++v12;
          v11 += 16;
        }
        while (v12 < *((unsigned int *)this + 11));
      }
      vDSP_vsadd(**((const float ***)this + 73), 1, (const float *)this + 24, **((float ***)this + 73), 1, *((unsigned int *)this + 12));
      vDSP_svdiv((const float *)this + 27, **((const float ***)this + 73), 1, **((float ***)this + 73), 1, *((unsigned int *)this + 12));
      LODWORD(v13) = *((_DWORD *)this + 11);
      if (v13)
      {
        uint64_t v14 = 0;
        unint64_t v15 = 0;
        do
        {
          vDSP_zrvmul((const DSPSplitComplex *)(*((void *)this + 94) + v14), 1, **((const float ***)this + 73), 1, (const DSPSplitComplex *)(*((void *)this + 94) + v14), 1, *((unsigned int *)this + 12));
          ++v15;
          unint64_t v13 = *((unsigned int *)this + 11);
          v14 += 16;
        }
        while (v15 < v13);
      }
      vDSP_vsub((const float *)(*((void *)this + 111) + 4 * (v13 * v3 * *((_DWORD *)this + 12))), 1, *((const float **)this + 76), 1, *((float **)this + 82), 1, (*((_DWORD *)this + 12) * v13));
      vDSP_Length v16 = (*((_DWORD *)this + 12) * *((_DWORD *)this + 11));
      vDSP_vadd((const float *)(*((void *)this + 120) + 4 * (v16 * v3)), 1, *((const float **)this + 79), 1, *((float **)this + 85), 1, v16);
      vDSP_zvconj(*((const DSPSplitComplex **)this + 94), 1, (const DSPSplitComplex *)(*((void *)this + 129) + 16 * (*((_DWORD *)this + 11) * v3)), 1, (*((_DWORD *)this + 12) * *((_DWORD *)this + 11)));
      SeparationBase::rank1WInverseA(this, v3++);
      unint64_t v2 = *((unsigned int *)this + 11);
    }
    while (v3 < v2);
  }

  SeparationBase::minimumDistrotionPrinciple(this);
}

uint64_t AUNeuralNetRES::GetScopeExtended(AUNeuralNetRES *this, int a2)
{
  if (a2 == 4) {
    return (uint64_t)this + 568;
  }
  else {
    return 0;
  }
}

uint64_t AUNeuralNetRES::ChangeStreamFormat(AUNeuralNetRES *this, uint64_t a2, uint64_t a3, const AudioStreamBasicDescription *a4, const AudioStreamBasicDescription *a5)
{
  int v6 = a3;
  int v7 = a2;
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  ausdk::AUBase::ChangeStreamFormat(this, a2, a3, a4, a5);
  uint64_t v9 = 0;
  if (v7 == 1 && !v6)
  {
    if (ausdk::AUScope::GetElement((AUNeuralNetRES *)((char *)this + 80), 1u))
    {
      uint64_t Element = ausdk::AUScope::SafeGetElement((AUNeuralNetRES *)((char *)this + 80), 1u);
      uint64_t v9 = (*(uint64_t (**)(uint64_t, const AudioStreamBasicDescription *))(*(void *)Element + 56))(Element, a5);
      if (AUNeuralNetRESLogScope(void)::once != -1) {
        dispatch_once(&AUNeuralNetRESLogScope(void)::once, &__block_literal_global_6093);
      }
      if (AUNeuralNetRESLogScope(void)::scope)
      {
        uint64_t v11 = *(NSObject **)AUNeuralNetRESLogScope(void)::scope;
        if (!*(void *)AUNeuralNetRESLogScope(void)::scope) {
          return v9;
        }
      }
      else
      {
        uint64_t v11 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        int v13 = 136315394;
        uint64_t v14 = "AUNeuralNetRES.cpp";
        __int16 v15 = 1024;
        int v16 = 759;
        _os_log_impl(&dword_1BB0CE000, v11, OS_LOG_TYPE_INFO, "%25s:%-5d Setting the stream format for the second input bus to match the format of the first bus.\n", (uint8_t *)&v13, 0x12u);
      }
    }
    else
    {
      return 0;
    }
  }
  return v9;
}

void ___ZL22AUNeuralNetRESLogScopev_block_invoke()
{
}

uint64_t AUNeuralNetRES::ValidFormat(AUNeuralNetRES *this, int a2, unsigned int a3, const AudioStreamBasicDescription *a4)
{
  if (a4->mBitsPerChannel == 64 && a4->mFormatID == 1718773105) {
    uint64_t result = (LOBYTE(a4->mFormatFlags) >> 5) & 1;
  }
  else {
    uint64_t result = 0;
  }
  if (a2 == 2)
  {
    if (a4->mChannelsPerFrame == 1) {
      return result;
    }
    else {
      return 0;
    }
  }
  else if (a2 == 1)
  {
    if (a4->mChannelsPerFrame < 0x11) {
      return result;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t AUNeuralNetRES::SupportedNumChannels(AUNeuralNetRES *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUNeuralNetRES::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 16;
}

BOOL AUNeuralNetRES::StreamFormatWritable(AUNeuralNetRES *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUNeuralNetRES::SupportsTail(AUNeuralNetRES *this)
{
  return 1;
}

double AUNeuralNetRES::GetTailTime(AUNeuralNetRES *this)
{
  return 0.05;
}

double AUNeuralNetRES::GetLatency(AUNeuralNetRES *this)
{
  return 0.0;
}

uint64_t AUNeuralNetRES::GetParameterValueStrings(AUNeuralNetRES *this, int a2, unsigned int a3, const __CFArray **a4)
{
  if (a4) {
    BOOL v4 = a2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return 0;
  }
  else {
    return 4294956430;
  }
}

uint64_t AUNeuralNetRES::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result = ausdk::AUBase::RestoreState(this, a2);
  if (!result)
  {
    this[66] = (OpaqueAudioComponentInstance *)((char *)this[66] + 1);
    this[68] = (OpaqueAudioComponentInstance *)((char *)this[68] + 1);
  }
  return result;
}

UInt8 *AUNeuralNetRES::SaveExtendedScopes(AUNeuralNetRES *this, __CFData *a2)
{
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, 4u);

  return ausdk::AUScope::SaveState(Scope, a2);
}

uint64_t AUNeuralNetRES::GetParameterInfo(AUNeuralNetRES *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  buffer->AudioUnitParameterOptions flags = 0;
  buffer->unitName = 0;
  if (a2 == 4)
  {
    switch(a3)
    {
      case 'd':
        buffer->cfNameString = @"EC Delta EIR.";
        buffer->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"EC Delta EIR.", buffer->name, 52, 0x8000100u);
        buffer->unit = kAudioUnitParameterUnit_Generic;
        buffer->defaultValue = 0.0;
        uint64_t v5 = 0x501502F900000000;
        goto LABEL_19;
      case 'e':
        buffer->cfNameString = @"EC IR Delay.";
        buffer->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"EC IR Delay.", buffer->name, 52, 0x8000100u);
        buffer->unit = kAudioUnitParameterUnit_Generic;
        buffer->defaultValue = 0.0;
        uint64_t v5 = 0x43C8000000000000;
        goto LABEL_19;
      case 'f':
        CFStringRef v11 = @"EC Adapted flag.";
        goto LABEL_18;
      case 'g':
        buffer->cfNameString = @"EC Time aligned ref signal energy.";
        buffer->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"EC Time aligned ref signal energy.", buffer->name, 52, 0x8000100u);
        buffer->unit = kAudioUnitParameterUnit_Generic;
        buffer->defaultValue = 0.0;
        uint64_t v5 = 0x447A000000000000;
        goto LABEL_19;
      case 'h':
        CFStringRef v11 = @"EC Mic-Eclee cross correlation.";
LABEL_18:
        buffer->cfNameString = v11;
        buffer->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(v11, buffer->name, 52, 0x8000100u);
        buffer->unit = kAudioUnitParameterUnit_Generic;
        buffer->defaultValue = 0.0;
        uint64_t v5 = 0x3F80000000000000;
LABEL_19:
        *(void *)&buffer->minValue = v5;
        goto LABEL_20;
      default:
        return 4294956418;
    }
  }
  if (a2) {
    return 4294956430;
  }
  switch(a3)
  {
    case 0:
      buffer->cfNameString = @"Number of DNN layers";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Number of DNN layers", buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minValue = 0x4100000000000000;
      buffer->defaultValue = 0.0;
      goto LABEL_20;
    case 1:
      buffer->cfNameString = @"Number of frames for context window";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Number of frames for context window", buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minValue = 0x410000003F800000;
      AudioUnitParameterValue v7 = 1.0;
      break;
    case 2:
      buffer->cfNameString = @"Forgetting factor (time constant)";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Forgetting factor (time constant)", buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      *(void *)&buffer->minValue = 0x404000003E99999ALL;
      AudioUnitParameterValue v7 = 0.3;
      break;
    case 3:
      buffer->cfNameString = @"Echo suppression amount";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Echo suppression amount", buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(void *)&buffer->minValue = 3281387520;
      buffer->defaultValue = -300.0;
      AudioUnitParameterOptions v8 = buffer->flags | 0xC0000000;
      goto LABEL_22;
    case 4:
      buffer->cfNameString = @"Use gain floor?";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Use gain floor?", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 1;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Boolean;
      *(void *)&buffer->minValue = 0x3F80000000000000;
      buffer->defaultValue = 0.0;
      int v10 = -1072693248;
      goto LABEL_21;
    default:
      return 4294956418;
  }
  buffer->defaultValue = v7;
LABEL_20:
  AudioUnitParameterOptions flags = buffer->flags;
  int v10 = 1073774592;
LABEL_21:
  AudioUnitParameterOptions v8 = flags | v10;
LABEL_22:
  uint64_t result = 0;
  buffer->AudioUnitParameterOptions flags = v8;
  return result;
}

uint64_t AUNeuralNetRES::GetParameterList(AUNeuralNetRES *this, int a2, unsigned int *a3, unsigned int *a4)
{
  if (a2 == 4)
  {
    if (a3)
    {
      long long v4 = xmmword_1BB87A900;
      unsigned int v5 = 104;
      goto LABEL_7;
    }
LABEL_8:
    uint64_t result = 0;
    *a4 = 5;
    return result;
  }
  if (!a2)
  {
    if (a3)
    {
      long long v4 = xmmword_1BB8727D0;
      unsigned int v5 = 4;
LABEL_7:
      *(_OWORD *)a3 = v4;
      a3[4] = v5;
      goto LABEL_8;
    }
    goto LABEL_8;
  }
  return 4294956430;
}

uint64_t AUNeuralNetRES::Render(AUNeuralNetRES *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  uint64_t v8 = 0;
  char v9 = 0;
  v21[1] = *MEMORY[0x1E4F143B8];
  int v10 = (AUNeuralNetRES *)((char *)this + 80);
  char v11 = 1;
  do
  {
    char v12 = v11;
    uint64_t Element = ausdk::AUScope::GetElement(v10, v8);
    if (Element && *(_DWORD *)(Element + 172))
    {
      uint64_t v14 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v10, v8);
      uint64_t result = ausdk::AUInputElement::PullInput(v14, a2, a3, v8, a4);
      if (result) {
        return result;
      }
    }
    else
    {
      char v9 = 1;
    }
    char v11 = 0;
    uint64_t v8 = 1;
  }
  while ((v12 & 1) != 0);
  int v16 = (ausdk::AUIOElement *)ausdk::AUScope::SafeGetElement((AUNeuralNetRES *)((char *)this + 128), 0);
  uint64_t v17 = ausdk::AUIOElement::PrepareBuffer(v16, a4);
  uint64_t result = 0;
  v21[0] = v17;
  if ((v9 & 1) == 0)
  {
    uint64_t v18 = ausdk::AUScope::SafeGetElement(v10, 0);
    v20[0] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v18 + 144));
    uint64_t v19 = ausdk::AUScope::SafeGetElement(v10, 1u);
    v20[1] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v19 + 144));
    return (*(uint64_t (**)(AUNeuralNetRES *, unsigned int *, uint64_t, uint64_t, void *, uint64_t, void *))(*(void *)this + 184))(this, a2, a4, 2, v20, 1, v21);
  }
  return result;
}

uint64_t AUNeuralNetRES::ProcessMultipleBufferLists(AUNeuralNetRES *this, unsigned int *a2, AudioDSP::Utility *a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  int v9 = (int)a3;
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = *((void *)this + 66);
  if (*((void *)this + 67) != v11)
  {
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNeuralNetRES *)((char *)this + 32), 0);
    float Parameter = ausdk::AUElement::GetParameter(Element, 3u);
    float v14 = 1.0;
    if (Parameter != 0.0) {
      float v14 = __exp10f(Parameter / 20.0);
    }
    *((float *)this + 160) = v14;
    __int16 v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNeuralNetRES *)((char *)this + 32), 0);
    *((unsigned char *)this + 644) = ausdk::AUElement::GetParameter(v15, 4u) != 0.0;
    *((void *)this + 67) = v11;
  }
  uint64_t v16 = *((void *)this + 68);
  if (*((void *)this + 69) != v16)
  {
    if (*((_DWORD *)this + 158))
    {
      unint64_t v17 = 0;
      uint64_t v18 = (float *)((char *)this + 664);
      do
      {
        uint64_t v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNeuralNetRES *)((char *)this + 568), v17);
        *(v18 - 4) = ausdk::AUElement::GetParameter(v19, 0x64u);
        uint64_t v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNeuralNetRES *)((char *)this + 568), v17);
        *(v18 - 3) = ausdk::AUElement::GetParameter(v20, 0x65u);
        uint64_t v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNeuralNetRES *)((char *)this + 568), v17);
        *(v18 - 2) = ausdk::AUElement::GetParameter(v21, 0x66u);
        unsigned int v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNeuralNetRES *)((char *)this + 568), v17);
        *(v18 - 1) = ausdk::AUElement::GetParameter(v22, 0x67u);
        int v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNeuralNetRES *)((char *)this + 568), v17);
        float *v18 = ausdk::AUElement::GetParameter(v23, 0x68u);
        v18 += 5;
        ++v17;
      }
      while (v17 < *((unsigned int *)this + 158));
    }
    *((void *)this + 69) = v16;
  }
  if (*((_DWORD *)this + 84) != v9) {
    return 4294956422;
  }
  id v24 = (int *)*a5;
  if (!*a5)
  {
    if (AUNeuralNetRESLogScope(void)::once != -1) {
      dispatch_once(&AUNeuralNetRESLogScope(void)::once, &__block_literal_global_6093);
    }
    if (AUNeuralNetRESLogScope(void)::scope)
    {
      __int16 v32 = *(NSObject **)AUNeuralNetRESLogScope(void)::scope;
      if (!*(void *)AUNeuralNetRESLogScope(void)::scope) {
        return 4294956420;
      }
    }
    else
    {
      __int16 v32 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      v46.UInt32 mNumberBuffers = 136315394;
      *(void *)(&v46.mNumberBuffers + 1) = "AUNeuralNetRES.cpp";
      LOWORD(v46.mBuffers[0].mDataByteSize) = 1024;
      *(UInt32 *)((char *)&v46.mBuffers[0].mDataByteSize + 2) = 885;
      int v33 = "%25s:%-5d InputSignals cannot be NULL. It is a required input\n";
LABEL_43:
      _os_log_impl(&dword_1BB0CE000, v32, OS_LOG_TYPE_ERROR, v33, (uint8_t *)&v46, 0x12u);
    }
    return 4294956420;
  }
  int v25 = *v24;
  if (*v24 != *((_DWORD *)this + 158)) {
    return 4294956428;
  }
  double v26 = a5[1];
  if (!v26)
  {
    if (AUNeuralNetRESLogScope(void)::once != -1) {
      dispatch_once(&AUNeuralNetRESLogScope(void)::once, &__block_literal_global_6093);
    }
    if (AUNeuralNetRESLogScope(void)::scope)
    {
      __int16 v32 = *(NSObject **)AUNeuralNetRESLogScope(void)::scope;
      if (!*(void *)AUNeuralNetRESLogScope(void)::scope) {
        return 4294956420;
      }
    }
    else
    {
      __int16 v32 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      v46.UInt32 mNumberBuffers = 136315394;
      *(void *)(&v46.mNumberBuffers + 1) = "AUNeuralNetRES.cpp";
      LOWORD(v46.mBuffers[0].mDataByteSize) = 1024;
      *(UInt32 *)((char *)&v46.mBuffers[0].mDataByteSize + 2) = 893;
      int v33 = "%25s:%-5d EchoEstimates cannot be NULL when Beam selection is not Off.\n";
      goto LABEL_43;
    }
    return 4294956420;
  }
  if (v26->mNumberBuffers != v25 || *a7 && (*a7)->mNumberBuffers != 1) {
    return 4294956428;
  }
  __int16 v37 = 0;
  unsigned __int8 v36 = 0;
  uint32_t v27 = (AudioDSP::Utility *)(2 * *((_DWORD *)this + 155));
  *(void *)&v46.UInt32 mNumberBuffers = *((void *)this + 78);
  v46.mBuffers[0] = (AudioBuffer)xmmword_1BB8727B0;
  int v47 = 4;
  int v48 = v25;
  uint64_t v49 = 32;
  AudioDSP::Utility::DetectNonFinites(v27, v24, &v46, (const AudioStreamBasicDescription *)((char *)&v37 + 1), (BOOL *)a5);
  AudioDSP::Utility::DetectNonFinites(v27, a5[1], &v46, (const AudioStreamBasicDescription *)&v37, v28);
  if (!*((unsigned char *)this + 560))
  {
    float v29 = *((float *)this + 160);
    if (v29 != 1.0 && (!(HIBYTE(v37) | v37) || !*((unsigned char *)this + 636)))
    {
      NeuralNetRES::ProcessBufferList(*((NeuralNetRES **)this + 121), *a5, a5[1], *a7, v29, *((unsigned __int8 *)this + 644), 0, 2.2204e-16);
      AudioDSP::Utility::DetectNonFinites(v27, *a7, &v46, (const AudioStreamBasicDescription *)&v36, v34);
      if (!v36 || !*((unsigned char *)this + 636)) {
        return 0;
      }
      if (AUNeuralNetRESLogScope(void)::once != -1) {
        dispatch_once(&AUNeuralNetRESLogScope(void)::once, &__block_literal_global_6093);
      }
      if (AUNeuralNetRESLogScope(void)::scope)
      {
        uint64_t v35 = *(NSObject **)AUNeuralNetRESLogScope(void)::scope;
        if (!*(void *)AUNeuralNetRESLogScope(void)::scope)
        {
LABEL_61:
          (*(void (**)(AUNeuralNetRES *))(*(void *)this + 64))(this);
          CopyBufferList(&(*a5)->mNumberBuffers, *a7);
          return 0;
        }
      }
      else
      {
        uint64_t v35 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        int v38 = 136315650;
        uint64_t v39 = "AUNeuralNetRES.cpp";
        __int16 v40 = 1024;
        int v41 = 942;
        __int16 v42 = 1024;
        int v43 = v36;
        _os_log_impl(&dword_1BB0CE000, v35, OS_LOG_TYPE_ERROR, "%25s:%-5d AUNeuralNetRES: (OutputSignals) is NOT finite: (%u)", (uint8_t *)&v38, 0x18u);
      }
      goto LABEL_61;
    }
  }
  CopyBufferList(&(*a5)->mNumberBuffers, *a7);
  if (HIBYTE(v37) | v37)
  {
    if (AUNeuralNetRESLogScope(void)::once != -1) {
      dispatch_once(&AUNeuralNetRESLogScope(void)::once, &__block_literal_global_6093);
    }
    if (AUNeuralNetRESLogScope(void)::scope)
    {
      int v30 = *(NSObject **)AUNeuralNetRESLogScope(void)::scope;
      if (!*(void *)AUNeuralNetRESLogScope(void)::scope) {
        return 0;
      }
    }
    else
    {
      int v30 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      int v38 = 136315906;
      uint64_t v39 = "AUNeuralNetRES.cpp";
      __int16 v40 = 1024;
      int v41 = 925;
      __int16 v42 = 1024;
      int v43 = HIBYTE(v37);
      __int16 v44 = 1024;
      int v45 = v37;
      _os_log_impl(&dword_1BB0CE000, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d AUNeuralNetRES: (InputSignals, EchoEstimates) is NOT finite: (%u, %u)\n", (uint8_t *)&v38, 0x1Eu);
    }
  }
  return 0;
}

uint64_t AUNeuralNetRES::CanScheduleParameters(AUNeuralNetRES *this)
{
  return 0;
}

uint64_t AUNeuralNetRES::SetParameter(AUNeuralNetRES *this, unsigned int a2, int a3, unsigned int a4, float a5)
{
  if (a3 == 4)
  {
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNeuralNetRES *)((char *)this + 568), a4);
    ausdk::AUElement::SetParameter(Element, a2, a5, 0);
    int v9 = (char *)this + 544;
    goto LABEL_5;
  }
  if (!a3)
  {
    uint64_t v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNeuralNetRES *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v8, a2, a5, 0);
    int v9 = (char *)this + 528;
LABEL_5:
    uint64_t result = 0;
    ++*(void *)v9;
    return result;
  }
  return 4294956418;
}

uint64_t AUNeuralNetRES::SetProperty(AUNeuralNetRES *this, int a2, int a3, unsigned int a4, _DWORD *a5, unsigned int a6)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (a3) {
    return 4294956417;
  }
  if (a2 != 3700)
  {
    if (a2 != 3698)
    {
      if (a2 == 21)
      {
        uint64_t result = 0;
        *((unsigned char *)this + 560) = *a5 != 0;
        return result;
      }
      return 4294956417;
    }
    if (a5)
    {
      if (*((void *)this + 121)) {
        std::unique_ptr<NeuralNetRES>::reset[abi:ne180100]((uint64_t *)this + 121, 0);
      }
      if (AUNeuralNetRESLogScope(void)::once != -1) {
        dispatch_once(&AUNeuralNetRESLogScope(void)::once, &__block_literal_global_6093);
      }
      operator new();
    }
    if (AUNeuralNetRESLogScope(void)::once != -1) {
      dispatch_once(&AUNeuralNetRESLogScope(void)::once, &__block_literal_global_6093);
    }
    if (AUNeuralNetRESLogScope(void)::scope)
    {
      uint64_t v8 = *(NSObject **)AUNeuralNetRESLogScope(void)::scope;
      if (!*(void *)AUNeuralNetRESLogScope(void)::scope) {
        return 4294956445;
      }
    }
    else
    {
      uint64_t v8 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      int v10 = "AUNeuralNetRES.cpp";
      __int16 v11 = 1024;
      int v12 = 382;
      _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d The CFDictionaryRef passed to SetProperty is null.\n", buf, 0x12u);
    }
    return 4294956445;
  }
  uint64_t result = 4294956445;
  if (a6 >= 4)
  {
    if (*(unsigned char *)a5) {
      return 0;
    }
    else {
      return 4294956445;
    }
  }
  return result;
}

void sub_1BB479964(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception a9, int a10, long long buf, __int16 a12, __int16 a13, int a14)
{
  MEMORY[0x1C185D370](v14, 0x10E0C403CD53A6ALL);
  if (a2 != 1) {
    _Unwind_Resume(a1);
  }
  exception_ptr = __cxa_get_exception_ptr(a1);
  a9.__vftable = (std::exception_vtbl *)&unk_1F14C8B68;
  a10 = exception_ptr[2];
  __cxa_begin_catch(a1);
  if (*(void *)(v16 + 2680) != -1) {
    dispatch_once(&AUNeuralNetRESLogScope(void)::once, &__block_literal_global_6093);
  }
  uint64_t v20 = *(NSObject ***)(v15 + 2672);
  if (v20)
  {
    uint64_t v21 = *v20;
    if (!*v20) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v21 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf) = 136315650;
    *(void *)((char *)&buf + 4) = "AUNeuralNetRES.cpp";
    WORD6(buf) = 1024;
    *(_DWORD *)((char *)&buf + 14) = 396;
    a13 = 1024;
    a14 = a10;
    _os_log_impl(&dword_1BB0CE000, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d Could not load NeuralNetRES plist, exception (%d).\n", (uint8_t *)&buf, 0x18u);
  }
LABEL_10:
  std::exception::~exception(&a9);
  __cxa_end_catch();
  JUMPOUT(0x1BB479910);
}

uint64_t *std::unique_ptr<NeuralNetRES>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    unint64_t v3 = *(void **)(v2 + 48);
    if (v3)
    {
      sparse_matrix_destroy(v3);
      *(void *)(v2 + 48) = 0;
    }
    long long v4 = *(void **)(v2 + 192);
    if (v4)
    {
      *(void *)(v2 + 200) = v4;
      operator delete(v4);
    }
    unsigned int v5 = *(void **)(v2 + 168);
    if (v5)
    {
      *(void *)(v2 + 176) = v5;
      operator delete(v5);
    }
    std::unique_ptr<NeuralNet>::reset[abi:ne180100]((NeuralNet **)(v2 + 152), 0);
    int v6 = *(void **)(v2 + 128);
    if (v6)
    {
      *(void *)(v2 + 136) = v6;
      operator delete(v6);
    }
    AudioUnitParameterValue v7 = *(void **)(v2 + 104);
    if (v7)
    {
      *(void *)(v2 + 112) = v7;
      operator delete(v7);
    }
    uint64_t v8 = *(void **)(v2 + 80);
    if (v8)
    {
      *(void *)(v2 + 88) = v8;
      operator delete(v8);
    }
    int v9 = *(void **)(v2 + 56);
    if (v9)
    {
      *(void *)(v2 + 64) = v9;
      operator delete(v9);
    }
    JUMPOUT(0x1C185D370);
  }
  return result;
}

uint64_t AUNeuralNetRES::GetProperty(AUNeuralNetRES *this, int a2, int a3, unsigned int a4, _DWORD *__dst)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 <= 3699)
  {
    if (a2 != 21)
    {
      if (a2 == 3699)
      {
        memcpy(__dst, *(const void **)(*((void *)this + 121) + 192), 4 * (*((_DWORD *)this + 155) + 1));
        return 0;
      }
      return result;
    }
    uint64_t result = 0;
    int v9 = *((unsigned __int8 *)this + 560);
LABEL_12:
    *__dst = v9;
    return result;
  }
  if (a2 == 3700)
  {
    uint64_t result = 0;
    int v9 = *((unsigned __int8 *)this + 376);
    goto LABEL_12;
  }
  if (a2 == 103699)
  {
    CFArrayRef CFArray = applesauce::CF::details::make_CFArrayRef<float>((void *)(*((void *)this + 121) + 192));
    uint64_t result = 0;
    *(void *)__dst = CFArray;
  }
  return result;
}

uint64_t AUNeuralNetRES::GetPropertyInfo(AUNeuralNetRES *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 <= 3699)
  {
    if (a2 != 21)
    {
      if (a2 != 3699) {
        return result;
      }
      *a6 = 0;
      int v8 = 4 * *((_DWORD *)this + 155) + 4;
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  if (a2 == 3700)
  {
LABEL_10:
    *a6 = 1;
    int v8 = 4;
    goto LABEL_11;
  }
  if (a2 != 103699) {
    return result;
  }
  *a6 = 0;
  int v8 = 8;
LABEL_11:
  uint64_t result = 0;
  *a5 = v8;
  return result;
}

uint64_t AUNeuralNetRES::Reset(AUNeuralNetRES *this)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (AUNeuralNetRESLogScope(void)::once != -1) {
    dispatch_once(&AUNeuralNetRESLogScope(void)::once, &__block_literal_global_6093);
  }
  if (AUNeuralNetRESLogScope(void)::scope)
  {
    int v1 = *(NSObject **)AUNeuralNetRESLogScope(void)::scope;
    if (!*(void *)AUNeuralNetRESLogScope(void)::scope) {
      return 0;
    }
  }
  else
  {
    int v1 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
  {
    int v3 = 136315394;
    long long v4 = "AUNeuralNetRES.cpp";
    __int16 v5 = 1024;
    int v6 = 190;
    _os_log_impl(&dword_1BB0CE000, v1, OS_LOG_TYPE_INFO, "%25s:%-5d AUNeuralNetRES: Reset.\n", (uint8_t *)&v3, 0x12u);
  }
  return 0;
}

void AUNeuralNetRES::Cleanup(NeuralNetRES **this)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (AUNeuralNetRESLogScope(void)::once != -1) {
    dispatch_once(&AUNeuralNetRESLogScope(void)::once, &__block_literal_global_6093);
  }
  if (AUNeuralNetRESLogScope(void)::scope)
  {
    uint64_t v2 = *(NSObject **)AUNeuralNetRESLogScope(void)::scope;
    if (!*(void *)AUNeuralNetRESLogScope(void)::scope) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v3 = 136315394;
    long long v4 = "AUNeuralNetRES.cpp";
    __int16 v5 = 1024;
    int v6 = 178;
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_INFO, "%25s:%-5d AUNeuralNetRES: Cleanup().\n", (uint8_t *)&v3, 0x12u);
  }
LABEL_9:
  if (*((unsigned char *)this + 616)) {
    NeuralNetRES::Cleanup(this[121]);
  }
}

uint64_t AUNeuralNetRES::Initialize(AUNeuralNetRES *this)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (AUNeuralNetRESLogScope(void)::once != -1) {
    dispatch_once(&AUNeuralNetRESLogScope(void)::once, &__block_literal_global_6093);
  }
  if (AUNeuralNetRESLogScope(void)::scope)
  {
    uint64_t v2 = *(NSObject **)AUNeuralNetRESLogScope(void)::scope;
    if (!*(void *)AUNeuralNetRESLogScope(void)::scope) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v23 = 136315394;
    id v24 = "AUNeuralNetRES.cpp";
    __int16 v25 = 1024;
    int v26 = 107;
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_INFO, "%25s:%-5d AUNeuralNetRES: Initialize.\n", (uint8_t *)&v23, 0x12u);
  }
LABEL_9:
  if (!*((unsigned char *)this + 616))
  {
    if (AUNeuralNetRESLogScope(void)::once != -1) {
      dispatch_once(&AUNeuralNetRESLogScope(void)::once, &__block_literal_global_6093);
    }
    if (AUNeuralNetRESLogScope(void)::scope)
    {
      uint64_t v13 = *(NSObject **)AUNeuralNetRESLogScope(void)::scope;
      if (!*(void *)AUNeuralNetRESLogScope(void)::scope)
      {
LABEL_29:
        *((unsigned char *)this + 560) = 1;
        uint64_t Element = ausdk::AUScope::SafeGetElement((AUNeuralNetRES *)((char *)this + 80), 0);
        uint64_t result = 0;
        uint64_t v15 = *(void *)(Element + 80);
        *((_DWORD *)this + 158) = *(_DWORD *)(Element + 108);
        *((void *)this + 78) = v15;
        return result;
      }
    }
    else
    {
      uint64_t v13 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      int v23 = 136315394;
      id v24 = "AUNeuralNetRES.cpp";
      __int16 v25 = 1024;
      int v26 = 114;
      _os_log_impl(&dword_1BB0CE000, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Initialize called without setting setting NeuralNetRESLayers plist! Setting AU in Bypass mode.\n", (uint8_t *)&v23, 0x12u);
    }
    goto LABEL_29;
  }
  (*(void (**)(AUNeuralNetRES *))(*(void *)this + 64))(this);
  uint64_t v3 = ausdk::AUScope::SafeGetElement((AUNeuralNetRES *)((char *)this + 80), 0);
  unsigned int v4 = 0;
  uint64_t v5 = *(void *)(v3 + 80);
  *((_DWORD *)this + 158) = *(_DWORD *)(v3 + 108);
  *((void *)this + 78) = v5;
  char v6 = 1;
  do
  {
    char v7 = v6;
    if (*(_DWORD *)(ausdk::AUScope::SafeGetElement((AUNeuralNetRES *)((char *)this + 80), v4) + 108) != *((_DWORD *)this + 158)) {
      return 4294956421;
    }
    char v6 = 0;
    unsigned int v4 = 1;
  }
  while ((v7 & 1) != 0);
  if (*(_DWORD *)(ausdk::AUScope::SafeGetElement((AUNeuralNetRES *)((char *)this + 128), 0) + 108) != 1) {
    return 4294956421;
  }
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, 4u);
  ausdk::AUScope::SetNumberOfElements(Scope, 0x10u);
  int v9 = *((_DWORD *)this + 84);
  *((_DWORD *)this + 155) = v9;
  uint64_t v10 = *((void *)this + 121);
  if (*((double *)this + 78) != *(double *)v10)
  {
    if (AUNeuralNetRESLogScope(void)::once != -1) {
      dispatch_once(&AUNeuralNetRESLogScope(void)::once, &__block_literal_global_6093);
    }
    if (AUNeuralNetRESLogScope(void)::scope)
    {
      __int16 v11 = *(NSObject **)AUNeuralNetRESLogScope(void)::scope;
      if (!*(void *)AUNeuralNetRESLogScope(void)::scope)
      {
LABEL_33:
        *((unsigned char *)this + 560) = 1;
        int v9 = *((_DWORD *)this + 155);
        uint64_t v10 = *((void *)this + 121);
        goto LABEL_34;
      }
    }
    else
    {
      __int16 v11 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      int v23 = 136315394;
      id v24 = "AUNeuralNetRES.cpp";
      __int16 v25 = 1024;
      int v26 = 150;
      _os_log_impl(&dword_1BB0CE000, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Sample rate is not supported! Setting AU in Bypass mode.\n", (uint8_t *)&v23, 0x12u);
    }
    goto LABEL_33;
  }
LABEL_34:
  if (v9 == *(_DWORD *)(v10 + 8)) {
    goto LABEL_44;
  }
  if (AUNeuralNetRESLogScope(void)::once != -1) {
    dispatch_once(&AUNeuralNetRESLogScope(void)::once, &__block_literal_global_6093);
  }
  if (!AUNeuralNetRESLogScope(void)::scope)
  {
    uint64_t v16 = MEMORY[0x1E4F14500];
LABEL_41:
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      int v23 = 136315394;
      id v24 = "AUNeuralNetRES.cpp";
      __int16 v25 = 1024;
      int v26 = 154;
      _os_log_impl(&dword_1BB0CE000, v16, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Block size is not supported! Setting AU in Bypass mode.\n", (uint8_t *)&v23, 0x12u);
    }
    goto LABEL_43;
  }
  uint64_t v16 = *(NSObject **)AUNeuralNetRESLogScope(void)::scope;
  if (*(void *)AUNeuralNetRESLogScope(void)::scope) {
    goto LABEL_41;
  }
LABEL_43:
  *((unsigned char *)this + 560) = 1;
LABEL_44:
  (*(void (**)(AUNeuralNetRES *, void, void))(*(void *)this + 72))(this, 0, 0);
  unint64_t v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNeuralNetRES *)((char *)this + 32), 0);
  uint64_t v18 = **(void **)(*((void *)this + 121) + 152);
  unsigned int v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
  ausdk::AUElement::SetParameter(v17, 0, (float)v19, 0);
  uint64_t v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNeuralNetRES *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v20, 1u, (float)*(unsigned int *)(*((void *)this + 121) + 12), 0);
  uint64_t v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNeuralNetRES *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v21, 2u, *(float *)(*((void *)this + 121) + 16), 0);
  if (AUNeuralNetRESLogScope(void)::once != -1) {
    dispatch_once(&AUNeuralNetRESLogScope(void)::once, &__block_literal_global_6093);
  }
  if (AUNeuralNetRESLogScope(void)::scope)
  {
    unsigned int v22 = *(NSObject **)AUNeuralNetRESLogScope(void)::scope;
    if (!*(void *)AUNeuralNetRESLogScope(void)::scope) {
      return 0;
    }
  }
  else
  {
    unsigned int v22 = MEMORY[0x1E4F14500];
  }
  uint64_t result = os_log_type_enabled(v22, OS_LOG_TYPE_INFO);
  if (!result) {
    return result;
  }
  int v23 = 136315394;
  id v24 = "AUNeuralNetRES.cpp";
  __int16 v25 = 1024;
  int v26 = 166;
  _os_log_impl(&dword_1BB0CE000, v22, OS_LOG_TYPE_INFO, "%25s:%-5d AUNeuralNetRES: Successfully Initialized.\n", (uint8_t *)&v23, 0x12u);
  return 0;
}

void AUNeuralNetRES::CreateExtendedElements(AUNeuralNetRES *this)
{
  int v1 = (AUNeuralNetRES *)((char *)this + 568);
  ausdk::AUScope::Initialize((AUNeuralNetRES *)((char *)this + 568), this, 4, 16);
  for (unsigned int i = 0; i != 16; ++i)
  {
    std::to_string(&v10, i);
    uint64_t v3 = std::string::insert(&v10, 0, "Mic", 3uLL);
    long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    int64_t v12 = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v10.__r_.__value_.__l.__data_);
    }
    if (v12 >= 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    if (v5)
    {
      if (v12 >= 0) {
        CFIndex v6 = HIBYTE(v12);
      }
      else {
        CFIndex v6 = (CFIndex)__p[1];
      }
      CFStringRef v7 = CFStringCreateWithBytes(0, (const UInt8 *)v5, v6, 0x8000100u, 0);
      v10.__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
      if (!v7)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
    }
    else
    {
      CFStringRef v7 = 0;
      v10.__r_.__value_.__r.__words[0] = 0;
    }
    uint64_t Element = ausdk::AUScope::GetElement(v1, i);
    ausdk::Owned<__CFString const*>::operator=((const void **)(Element + 72), v7);
    if (v7) {
      CFRelease(v7);
    }
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1BB47A588(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AUNeuralNetRES::~AUNeuralNetRES(AUNeuralNetRES *this)
{
  AUNeuralNetRES::~AUNeuralNetRES(this);

  JUMPOUT(0x1C185D370);
}

{
  uint64_t *v2;
  void **v3;
  uint64_t vars8;

  *(void *)this = &unk_1F14AE708;
  uint64_t v2 = (uint64_t *)((char *)this + 968);
  std::unique_ptr<NeuralNetRES>::reset[abi:ne180100]((uint64_t *)this + 121, 0);
  std::unique_ptr<NeuralNetRES>::reset[abi:ne180100](v2, 0);
  uint64_t v3 = (void **)((char *)this + 584);
  std::vector<std::unique_ptr<ausdk::AUElement>>::__destroy_vector::operator()[abi:ne180100](&v3);

  ausdk::AUBase::~AUBase(this);
}

float applesauce::CF::details::find_at_key<float,__CFString const* const&>(const __CFDictionary *a1, const void *a2)
{
  CFNumberRef v2 = (const __CFNumber *)applesauce::CF::details::at_key<__CFString const* const&>(a1, a2);
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
  }

  return applesauce::CF::convert_to<float,0>(v2);
}

void sub_1BB47A708(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t applesauce::CF::details::find_at_key<unsigned int,__CFString const* const&>(const __CFDictionary *a1, const void *a2)
{
  CFNumberRef v2 = (const __CFNumber *)applesauce::CF::details::at_key<__CFString const* const&>(a1, a2);
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
  }

  return applesauce::CF::convert_to<unsigned int,0>(v2);
}

void sub_1BB47A784(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL AUSM::RoomCongruence::TuningParameters::operator==(uint64_t a1, uint64_t a2)
{
  return *(float *)a1 == *(float *)a2
      && *(float *)(a1 + 4) == *(float *)(a2 + 4)
      && *(float *)(a1 + 16) == *(float *)(a2 + 16)
      && *(float *)(a1 + 20) == *(float *)(a2 + 20)
      && *(float *)(a1 + 8) == *(float *)(a2 + 8)
      && *(float *)(a1 + 12) == *(float *)(a2 + 12)
      && *(unsigned __int8 *)(a1 + 28) == *(unsigned __int8 *)(a2 + 28)
      && *(unsigned __int8 *)(a1 + 29) == *(unsigned __int8 *)(a2 + 29)
      && *(unsigned __int8 *)(a1 + 30) == *(unsigned __int8 *)(a2 + 30)
      && *(float *)(a1 + 24) == *(float *)(a2 + 24)
      && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32);
}

void aec_v5::aec_init(void **a1, int a2, int *a3)
{
  int v5 = *a3;
  int v6 = a3[1];
  int v7 = a3[3];
  int v14 = *((unsigned __int8 *)a3 + 84);
  int v8 = a3[27];
  int v9 = malloc_type_malloc(0x78uLL, 0x2C8E6D5CuLL);
  if (v9)
  {
    v9[14] = 0;
    *((_OWORD *)v9 + 5) = 0u;
    *((_OWORD *)v9 + 6) = 0u;
    *((_OWORD *)v9 + 3) = 0u;
    *((_OWORD *)v9 + 4) = 0u;
    *((_OWORD *)v9 + 1) = 0u;
    *((_OWORD *)v9 + 2) = 0u;
    *(_OWORD *)int v9 = 0u;
    *a1 = v9;
    std::string v10 = malloc_type_malloc(0x1E0uLL, 0x2C8E6D5CuLL);
    if (v10)
    {
      v10[28] = 0u;
      v10[29] = 0u;
      v10[26] = 0u;
      v10[27] = 0u;
      v10[24] = 0u;
      v10[25] = 0u;
      v10[22] = 0u;
      v10[23] = 0u;
      v10[20] = 0u;
      v10[21] = 0u;
      v10[18] = 0u;
      v10[19] = 0u;
      v10[16] = 0u;
      v10[17] = 0u;
      v10[14] = 0u;
      v10[15] = 0u;
      v10[12] = 0u;
      v10[13] = 0u;
      v10[10] = 0u;
      v10[11] = 0u;
      v10[8] = 0u;
      v10[9] = 0u;
      v10[6] = 0u;
      v10[7] = 0u;
      v10[4] = 0u;
      v10[5] = 0u;
      v10[2] = 0u;
      v10[3] = 0u;
      _OWORD *v10 = 0u;
      v10[1] = 0u;
      if (v5 / v6 <= 1) {
        int v11 = 1;
      }
      else {
        int v11 = v5 / v6;
      }
      (*a1)[7] = v10;
      dft_v5::paramInit_v5(*a1, v11 * v6, v6, v11, a2, v14 != 0, v7, v8);
    }
  }
  exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
  uint64_t v13 = std::bad_alloc::bad_alloc(exception);
}

void aec_v5::get_EchoEst_Err(DSPComplex *__C, float *a2, float *a3, float *a4, const float *a5, uint64_t a6)
{
  v10.realp = a3;
  v10.imagp = a4;
  vDSP_ztoc(&v10, 1, __C, 2, *(int *)(a6 + 36));
  vDSP_vsub((const float *)__C, 1, a5, 1, a2, 1, *(int *)(a6 + 28));
}

void aec_v5::run_aec(float **a1, _DWORD *a2, float *a3, _DWORD *a4, _DWORD *a5, const float *a6, void *a7, float *a8, _DWORD *a9, int a10, _DWORD *a11, _DWORD *a12)
{
  uint64_t v13 = *a1;
  int64_t v12 = a1[1];
  uint64_t v15 = (uint64_t)a1[6];
  int v14 = a1[7];
  uint64_t v16 = a1[8];
  uint64_t v640 = (uint64_t)a1[9];
  unint64_t v17 = a1[2];
  v590 = a1[3];
  v609 = (float *)*((void *)v14 + 1);
  v610 = *(float **)v14;
  v612 = (float *)*((void *)v14 + 9);
  v613 = (float *)*((void *)v14 + 8);
  v605 = (DSPComplex *)*((void *)v14 + 10);
  v594 = (float *)*((void *)v14 + 12);
  v577 = a1[4];
  v578 = (float *)*((void *)v14 + 13);
  v579 = (float *)*((void *)v14 + 15);
  uint64_t v18 = (DSPComplex *)*((void *)v14 + 16);
  v580 = (float *)*((void *)v14 + 17);
  v581 = (DSPComplex *)*((void *)v14 + 11);
  vDSP_Length v19 = *((int *)*a1 + 4);
  uint64_t v614 = *((int *)*a1 + 34);
  unsigned int v20 = *((_DWORD *)*a1 + 7);
  uint64_t v618 = *((int *)*a1 + 9);
  uint64_t v21 = (float *)*((unsigned int *)*a1 + 32);
  *(_DWORD *)(v15 + 604) = 0;
  float v22 = *(float *)(v15 + 568);
  vDSP_Length v607 = v19;
  v608 = v18;
  float v589 = (float)(int)v19;
  v606 = (float *)(v15 + 28);
  if (v22 < 100.0 && (float)(*v606 / v589) > 0.00000001) {
    *(float *)(v15 + 568) = v22 + v13[5];
  }
  int v23 = *((_DWORD *)v13 + 40);
  v692 = (char **)v12;
  uint64_t v667 = v15;
  v650 = v17;
  v651 = v14;
  unsigned int v593 = v20;
  v619 = v21;
  v603 = v16;
  if (v23 < 1)
  {
    double v55 = (float *)a6;
    goto LABEL_86;
  }
  if ((int)v21 >= 1)
  {
    id v24 = 0;
    __int16 v25 = (char *)*((void *)v12 + 15);
    int v26 = (char *)*((void *)v12 + 18);
    do
    {
      if (*((unsigned char *)v24 + (void)v25))
      {
        *(_DWORD *)&v26[4 * (void)v24] = 0;
        *((unsigned char *)v24 + *((void *)v12 + 16)) = 1;
      }
      else
      {
        int v27 = *(_DWORD *)&v26[4 * (void)v24];
        int v28 = *((_DWORD *)v13 + 11) - 1;
        if (v27 == v28) {
          *((unsigned char *)v24 + *((void *)v12 + 16)) = 0;
        }
        if (v27 < v28) {
          *(_DWORD *)&v26[4 * (void)v24] = v27 + 1;
        }
      }
      id v24 = (float *)((char *)v24 + 1);
    }
    while (v21 != v24);
  }
  if (*((unsigned char *)v13 + 178))
  {
    vDSP_Length v29 = *((int *)v13 + 4);
    LODWORD(__C.realp) = 0;
    vDSP_svesq(a6, 1, (float *)&__C, v29);
    float v30 = (float)(*(float *)&__C.realp / (float)(int)v29) + 1.0e-20;
    *(float *)&__C.realp = log10f(v30) * 10.0;
    vDSP_Length v31 = *((int *)v17 + 9);
    __int16 v32 = (float *)*((void *)v17 + 12);
    int v33 = (void *)*((void *)v17 + 13);
    __int16 v34 = (float *)*((void *)v17 + 14);
    LODWORD(__Z.realp) = 0;
    LODWORD(v699.realp) = 0;
    LODWORD(v698.realp) = 0;
    uint64_t v35 = (const void *)*((void *)v17 + 6);
    unsigned __int8 v36 = v17;
    uint64_t v37 = 4 * v31;
    memcpy(v33, v35, 4 * v31);
    vDSP_vsub(v32, 1, (const float *)v33, 1, v34, 1, v31);
    vDSP_svesq(v32, 1, (float *)&__Z, v31);
    vDSP_svesq((const float *)v33, 1, (float *)&v699, v31);
    vDSP_svesq(v34, 1, (float *)&v698, v31);
    float v38 = *(float *)&v698.realp;
    float v39 = *(float *)&v699.realp;
    float v40 = *(float *)&__Z.realp;
    memcpy(v32, v33, 4 * v31);
    LODWORD(v694.realp) = 0;
    int v41 = (float *)*((void *)v36 + 15);
    int v42 = *((_DWORD *)v13 + 32);
    if (v42 < 1)
    {
      int v54 = 0;
      float v51 = 0.0;
      uint64_t v15 = v667;
    }
    else
    {
      uint64_t v43 = 0;
      uint64_t v44 = 0;
      int v45 = *((_DWORD *)v13 + 11);
      do
      {
        if (v45 < 1)
        {
          float v48 = 0.0;
        }
        else
        {
          int v46 = 0;
          int v47 = (const float *)(*((void *)v650 + 6) + v43);
          float v48 = 0.0;
          do
          {
            vDSP_svesq(v47, 1, (float *)&v694, v29);
            if (*(float *)&v694.realp > v48) {
              float v48 = *(float *)&v694.realp;
            }
            ++v46;
            int v45 = *((_DWORD *)v13 + 11);
            v47 += v29;
          }
          while (v46 < v45);
          int v42 = *((_DWORD *)v13 + 32);
        }
        v41[v44++] = v48;
        v43 += v37;
      }
      while (v44 < v42);
      uint64_t v15 = v667;
      if (v42 >= 1)
      {
        uint64_t v49 = (int *)*((void *)v12 + 20);
        uint64_t v50 = v42;
        float v51 = 0.0;
        long long v52 = v41;
        uint64_t v21 = v619;
        do
        {
          int v53 = *v49++;
          if (v53 && *v52 > v51) {
            float v51 = *v52;
          }
          ++v52;
          --v50;
        }
        while (v50);
        int v54 = 1;
LABEL_36:
        float v56 = *v41 / (v51 + 1.0e-20) + 1.0e-20;
        float v57 = log10f(v56);
        int v14 = v651;
        if (*(_DWORD *)(v15 + 148) != 1)
        {
LABEL_75:
          uint64_t v16 = v603;
          goto LABEL_76;
        }
        float v58 = v57;
        float v59 = v38 / (v40 * 0.8 + v39 * 0.2 + 1.0e-20);
        float v690 = v13[48];
        int v60 = *((_DWORD *)v13 + 49);
        float v62 = v13[45];
        float v61 = v13[46];
        float v63 = *(float *)(v15 + 140) + 1.0e-20;
        float v64 = log10f(v63) * 10.0;
        float v65 = v13[47];
        float v66 = *(float *)(v15 + 24) / (*(float *)(v15 + 28) + 1.0e-20) + 1.0e-20;
        float v67 = log10f(v66) * 10.0;
        if (*(float *)&__C.realp > -70.0 && v67 > v65 || v64 > v62 || v61 < v59)
        {
          if (v54)
          {
            uint64_t v71 = 0;
            int v72 = (char *)*((void *)v12 + 20);
            do
            {
              if (*(_DWORD *)&v72[4 * v71]) {
                *(unsigned char *)(*((void *)v12 + 16) + v71) = 0;
              }
              ++v71;
            }
            while (v42 != v71);
            uint64_t v73 = 0;
            *(_DWORD *)(v15 + 640) = -1110651699;
            do
            {
              if (*(_DWORD *)(*((void *)v12 + 20) + 4 * v73) == 1)
              {
                int v74 = *((_DWORD *)v650 + 9);
                int v75 = v74 * v73;
                size_t v76 = 4 * v74;
                bzero((void *)(*(void *)v650 + 4 * v74 * (int)v73), v76);
                bzero((void *)(*((void *)v650 + 1) + 4 * v75), v76);
                bzero((void *)(*((void *)v650 + 2) + 4 * v75), v76);
                bzero((void *)(*((void *)v650 + 3) + 4 * v75), v76);
                bzero((void *)(*((void *)v650 + 6) + 4 * v75), v76);
                int v42 = *((_DWORD *)v13 + 32);
              }
              ++v73;
            }
            while (v73 < v42);
            goto LABEL_75;
          }
        }
        else
        {
          if ((float)(v58 * 10.0) <= v690)
          {
            int v80 = -1110651699;
            if (v54)
            {
              uint64_t v81 = 0;
              int v82 = (char *)*((void *)v12 + 20);
              do
              {
                if (*(_DWORD *)&v82[4 * v81]) {
                  *(unsigned char *)(*((void *)v12 + 16) + v81) = 1;
                }
                ++v81;
              }
              while (v42 != v81);
            }
            goto LABEL_74;
          }
          if (v54)
          {
            uint64_t v77 = 0;
            long long v78 = (char *)*((void *)v12 + 20);
            do
            {
              if (*(_DWORD *)&v78[4 * v77]) {
                *(unsigned char *)(*((void *)v12 + 16) + v77) = 1;
              }
              ++v77;
            }
            while (v42 != v77);
          }
          int v79 = *(_DWORD *)(v15 + 644);
          if (v79 == v60)
          {
            int v80 = 1059481190;
LABEL_74:
            *(_DWORD *)(v15 + 640) = v80;
            goto LABEL_75;
          }
          *(_DWORD *)(v15 + 644) = v79 + 1;
        }
        int v80 = -1110651699;
        goto LABEL_74;
      }
      int v54 = 0;
      float v51 = 0.0;
    }
    uint64_t v21 = v619;
    goto LABEL_36;
  }
LABEL_76:
  v12[38] = 0.0;
  double v55 = (float *)a6;
  if ((int)v21 < 1) {
    goto LABEL_83;
  }
  int v83 = 0;
  long long v84 = (char *)*((void *)v12 + 16);
  uint64_t v85 = v21;
  do
  {
    if (*v84++) {
      *((_DWORD *)v12 + 38) = ++v83;
    }
    uint64_t v85 = (float *)((char *)v85 - 1);
  }
  while (v85);
  if (v83 < 1)
  {
LABEL_83:
    int v87 = *((_DWORD *)v13 + 42);
    if (v87 <= 1) {
      *((_DWORD *)v13 + 42) = v87 + 1;
    }
  }
  else
  {
    v13[42] = 0.0;
  }
  int v23 = *((_DWORD *)v13 + 40);
LABEL_86:
  if (v23 < 2)
  {
    int v93 = (char *)*((void *)v12 + 17);
    *int v93 = 1;
    int v92 = v21 - 1;
    if ((int)v21 > 1) {
      goto LABEL_95;
    }
  }
  else if (v23 == 2)
  {
    if ((int)v21 >= 1)
    {
      int v94 = (char *)*((void *)v12 + 16);
      unsigned int v95 = (char *)*((void *)v12 + 17);
      int v96 = v21;
      do
      {
        char v97 = *v94++;
        *v95++ = v97;
        int v96 = (float *)((char *)v96 - 1);
      }
      while (v96);
    }
  }
  else if (v23 == 3)
  {
    if ((int)v21 >= 1)
    {
      long long v88 = (char *)*((void *)v12 + 16);
      int v89 = (char *)*((void *)v12 + 17);
      uint64_t v90 = v21;
      do
      {
        char v91 = *v88++;
        *v89++ = v91;
        uint64_t v90 = (float *)((char *)v90 - 1);
      }
      while (v90);
    }
    int v92 = *((_DWORD *)v13 + 41);
    if (v92 >= 1)
    {
      int v93 = (char *)*((void *)v12 + 17);
LABEL_95:
      bzero(v93 + 1, v92);
    }
  }
  else if ((int)v21 >= 1)
  {
    int v98 = (char *)*((void *)v12 + 16);
    v99 = (char *)*((void *)v12 + 17);
    unsigned int v100 = v21;
    do
    {
      char v101 = *v98++;
      *v99++ = v101;
      unsigned int v100 = (float *)((char *)v100 - 1);
    }
    while (v100);
  }
  uint64_t v611 = v15 + 284;
  int v102 = *((_DWORD *)v13 + 26);
  if (v102 < 1 || *((int *)v12 + 38) < 1)
  {
    BOOL v588 = 0;
  }
  else
  {
    BOOL v103 = v102 > 1 || *(float *)(v15 + 568) < (float)(*(float *)(v15 + 552) + 2.0);
    BOOL v588 = v103;
  }
  *(unsigned char *)uint64_t v15 = a10 == 0;
  *(_DWORD *)(v15 + 516) = *(_DWORD *)(v15 + 40);
  *(_DWORD *)(v15 + 556) = *(_DWORD *)(v15 + 408);
  *(void *)(v15 + 532) = *(void *)(v15 + 524);
  *(_DWORD *)(v15 + 592) = 0;
  v691 = v13;
  if (*((_DWORD *)v13 + 25) || *(_DWORD *)(v15 + 148))
  {
    *(_DWORD *)(v15 + 376) = *(_DWORD *)(v15 + 4);
    memcpy(*((void **)v14 + 21), v55, 4 * *((int *)v13 + 4));
    vDSP_Length v105 = v607;
    goto LABEL_113;
  }
  int v160 = *((_DWORD *)v13 + 18);
  int v161 = *((_DWORD *)v13 + 33);
  int __na = v160;
  if (v161 < 1)
  {
    *((float *)&v571 + 1) = v13[33];
  }
  else
  {
    uint64_t v162 = 0;
    unsigned int v163 = v160 - v607;
    vDSP_Length v685 = v160 - (int)v607;
    do
    {
      if (*(unsigned char *)(*((void *)v12 + 17) + v162))
      {
        uint64_t v164 = *(void *)(*((void *)v12 + 8) + 8 * v162);
        uint64_t v165 = *(void *)(*((void *)v12 + 7) + 8 * v162);
        if (v160 != v607)
        {
          unsigned int v166 = 0;
          do
          {
            memcpy((void *)(v165 + 4 * v166), (const void *)(v165 + 4 * (v607 + v166)), (4 * v607));
            memcpy((void *)(v164 + 4 * v166), (const void *)(v164 + 4 * (v607 + v166)), (4 * v607));
            v166 += v607;
          }
          while (v166 < v163);
        }
        char v167 = (void *)(v165 + 4 * v685);
        memcpy(v167, v55, (4 * v607));
        vDSP_vsq((const float *)v167, 1, (float *)(v164 + 4 * v685), 1, v607);
        int v161 = *((_DWORD *)v13 + 33);
        int64_t v12 = (float *)v692;
        int v160 = __na;
      }
      v55 += v607;
      ++v162;
    }
    while (v162 < v161);
    HIDWORD(v571) = v161;
    int __na = *((_DWORD *)v13 + 18);
    uint64_t v15 = v667;
    int v14 = v651;
  }
  v621 = (char *)*((void *)v12 + 7);
  v600 = (char *)*((void *)v12 + 8);
  v602 = (lmsfilt_v5 *)*((void *)v12 + 17);
  size_t v168 = (DSPSplitComplex *)*((int *)v13 + 4);
  vDSP_Length v686 = *(int *)(v640 + 16);
  HIDWORD(v695) = *(_DWORD *)(v15 + 372);
  *(float *)&uint64_t v695 = 1.0 - *((float *)&v695 + 1);
  vDSP_Length __Nh = *(int *)(v15 + 356);
  uint64_t v169 = (char *)*((void *)v14 + 22);
  int v170 = (float *)*((void *)v14 + 30);
  DSPSplitComplex v694 = *(DSPSplitComplex *)(v14 + 54);
  unint64_t v171 = (DSPComplex *)*((void *)v14 + 24);
  int v172 = (const float *)*((void *)v14 + 36);
  unsigned int v173 = v14;
  v569 = v168;
  uint64_t v174 = &v169[4 * (void)v168];
  size_t v175 = 4 * (int)v168;
  memcpy(v169, v174, v175);
  v567 = (const BOOL *)v175;
  memcpy(v174, a7, v175);
  size_t v176 = (float *)*((void *)v173 + 34);
  vDSP_vmul((const float *)v169, 1, v172, 1, (float *)v171, 1, v686);
  dft_v5::dftGenericAnalysis2ndHalf(v171, v694.realp, v694.imagp, v640, 0);
  vDSP_zvmags(&v694, 1, v170, 1, __Nh);
  vDSP_vsmul(v170, 1, (const float *)&v695, v170, 1, __Nh);
  v635 = v170;
  BOOL v573 = (BOOL)v176;
  vDSP_vsma(v176, 1, (const float *)&v695 + 1, v170, 1, v176, 1, __Nh);
  if ((uint64_t)v571 <= 0)
  {
    int v227 = 0;
    v225 = *(int **)(v667 + 328);
    float v230 = 0.0;
    uint64_t v15 = v667;
    int v14 = v651;
    vDSP_Length v105 = v607;
    uint64_t v16 = v603;
    uint64_t v21 = v619;
    double v55 = (float *)a6;
LABEL_195:
    int v229 = __na;
    float v234 = sqrtf(v230);
    if (v234 <= 1.0) {
      float v228 = v234;
    }
    else {
      float v228 = 1.0;
    }
    v225 += v227;
    goto LABEL_199;
  }
  uint64_t v177 = 0;
  int v178 = 0;
  __dst = (void *)*((void *)v651 + 23);
  uint64_t v179 = HIDWORD(v571);
  int v584 = __na - v686;
  int v582 = (int)(float)((float)((float)(__na - (int)v686) / 3.0) + (float)((float)(__na - (int)v686) / 3.0));
  float v180 = 0.0;
  uint64_t v15 = v667;
  int v14 = v651;
  double v55 = (float *)a6;
  uint64_t v181 = v602;
  do
  {
    if (*((unsigned char *)v181 + v177))
    {
      int v661 = v178;
      int v182 = v13;
      uint64_t v183 = *(void *)&v621[8 * v177];
      uint64_t v184 = *(void *)&v600[8 * v177];
      __Da = *(float **)(*((void *)v14 + 33) + 8 * v177);
      uint64_t v657 = v177;
      uint64_t v185 = *((void *)v14 + 35) + 16 * v177;
      __lena = *(float **)v185;
      v649 = *(float **)(v185 + 8);
      int v186 = *((_DWORD *)v182 + 17);
      uint64_t v187 = (const float *)*((void *)v14 + 22);
      int v188 = v584 - v186;
      LODWORD(__C.realp) = 0;
      LODWORD(__Z.realp) = 0;
      LODWORD(v699.realp) = 0;
      if (v584 - v186 >= v582) {
        uint64_t v189 = (v188 - v582 + 1) & ~((v188 - v582 + 1) >> 31);
      }
      else {
        uint64_t v189 = 0;
      }
      uint64_t __Na = v184;
      vDSP_sve((const float *)(v184 + 4 * v189), 1, (float *)&__Z, v686);
      vDSP_dotpr(v187, 1, v187, 1, (float *)&__C, v686);
      float v190 = *(float *)&__Z.realp;
      uint64_t v191 = (v188 + 2);
      if ((int)v189 >= (int)v191)
      {
        int v196 = v189;
      }
      else
      {
        int v192 = v189 + v686 - v186;
        int v193 = v189 - v186;
        float v194 = 0.0;
        uint64_t v195 = v189;
        int v196 = v189;
        do
        {
          vDSP_dotpr((const float *)(v183 + 4 * v195), 1, v187, 1, (float *)&v699, v686);
          if (v195 <= v189)
          {
            float v197 = *(float *)&__Z.realp;
          }
          else
          {
            float v197 = *(float *)&__Z.realp;
            if (v195 >= v186 && v186 >= 1)
            {
              int v198 = (float *)(__Na + 4 * v193);
              int v199 = v186;
              int v200 = (float *)(__Na + 4 * v192);
              do
              {
                float v201 = *v198++;
                float v202 = v197 - v201;
                float v203 = *v200++;
                float v197 = v202 + v203;
                --v199;
              }
              while (v199);
              *(float *)&__Z.realp = v197;
            }
          }
          float v204 = *(float *)&v699.realp / (sqrtf(v197 * *(float *)&__C.realp) + 2.2204e-16);
          float v205 = fabsf(v204);
          if (v205 > v194)
          {
            float v190 = v197;
            float v194 = v205;
            int v196 = v195;
          }
          v195 += v186;
          v192 += v186;
          v193 += v186;
        }
        while (v195 < v191);
      }
      memcpy(__dst, (const void *)(v183 + 4 * v196), 4 * v686);
      uint64_t v15 = v667;
      *(float *)(v667 + 376) = v190;
      *(_DWORD *)(v667 + 324) = v196;
      __C.realp = __lena;
      __C.imagp = v649;
      int v14 = v651;
      v207 = (DSPComplex *)*((void *)v651 + 23);
      int v208 = (const float *)*((void *)v651 + 36);
      vDSP_Length v209 = *(int *)(v640 + 16);
      DSPSplitComplex v210 = *(DSPSplitComplex *)(v651 + 54);
      DSPSplitComplex v699 = *(DSPSplitComplex *)(v651 + 50);
      DSPSplitComplex __Z = v210;
      uint64_t v211 = (float *)*((void *)v651 + 29);
      DSPSplitComplex v698 = *(DSPSplitComplex *)(v651 + 62);
      int v212 = *(_DWORD *)(v667 + 352);
      int v213 = *(_DWORD *)(v667 + 356);
      float v697 = *(float *)(v667 + 372);
      float v696 = 1.0 - v697;
      vDSP_vmul((const float *)v207, 1, v208, 1, (float *)v207, 1, v209);
      dft_v5::dftGenericAnalysis2ndHalf(v207, v699.realp, v699.imagp, v640, 0);
      vDSP_zvmags(&v699, 1, v211, 1, v213);
      vDSP_zvcmul(&__Z, 1, &v699, 1, &v698, 1, v213);
      vDSP_vsmul(v211, 1, &v696, v211, 1, v213);
      vDSP_vsma(__Da, 1, &v697, v211, 1, __Da, 1, v213);
      vDSP_vsmul(v698.realp, 1, &v696, v698.realp, 1, v213);
      vDSP_vsmul(v698.imagp, 1, &v696, v698.imagp, 1, v213);
      vDSP_vsmul(__lena, 1, &v697, __lena, 1, v213);
      vDSP_vsmul(v649, 1, &v697, v649, 1, v213);
      vDSP_zvadd(&__C, 1, &v698, 1, &__C, 1, v213);
      vDSP_zvabs(&__C, 1, v635, 1, v213);
      float v214 = 0.0;
      int v215 = v213 - v212;
      if (v213 >= v212)
      {
        unsigned int v216 = &__Da[v212 - 1];
        int v217 = v215 + 1;
        int v218 = (float *)(v573 + 4 * (v212 - 1));
        uint64_t v219 = &v635[v212 - 1];
        do
        {
          float v220 = *v219++;
          double v221 = v220;
          float v222 = *v218++;
          float v223 = v222;
          float v224 = *v216++;
          float v214 = v221 / (sqrtf(v223 * v224) + 0.00000001) + v214;
          --v217;
        }
        while (v217);
      }
      float v180 = v180 + v190;
      int v178 = v661 + 1;
      float v206 = v214 / (float)(v215 + 1);
      int64_t v12 = (float *)v692;
      uint64_t v13 = v691;
      double v55 = (float *)a6;
      uint64_t v181 = v602;
      uint64_t v179 = HIDWORD(v571);
      uint64_t v177 = v657;
    }
    else
    {
      int v196 = 0;
      float v206 = 0.0;
    }
    v225 = *(int **)(v15 + 328);
    v225[v177] = v196;
    int v226 = *(float **)(v15 + 312);
    v226[v177++] = v206;
  }
  while (v177 != v179);
  vDSP_Length v105 = v607;
  uint64_t v16 = v603;
  uint64_t v21 = v619;
  if (v178 >= 2) {
    *(float *)(v15 + 376) = v180 / (float)v178;
  }
  if (HIDWORD(v571) != 1)
  {
    uint64_t v231 = 0;
    int v227 = 0;
    float v232 = 0.0;
    float v230 = 0.0;
    do
    {
      if (*((unsigned char *)v181 + v231))
      {
        float v233 = v226[v231];
        if (v233 > v232)
        {
          int v227 = v231;
          float v232 = v226[v231];
        }
        float v230 = v230 + (float)(v233 * v233);
      }
      ++v231;
    }
    while (v179 != v231);
    goto LABEL_195;
  }
  int v227 = 0;
  float v228 = *v226;
  int v229 = __na;
LABEL_199:
  int v235 = v229 - v569;
  int v236 = *v225;
  if (v236 >= v235) {
    int v236 = v235;
  }
  memcpy(*((void **)v14 + 21), (const void *)(*(void *)&v621[8 * v227] + 4 * v236), (size_t)v567);
  *(float *)(v15 + 320) = v228;
LABEL_113:
  v599 = (DSPSplitComplex *)(v14 + 8);
  v601 = (DSPSplitComplex *)(v14 + 4);
  v598 = (float **)(v14 + 12);
  int v106 = *((_DWORD *)v12 + 20);
  long long v107 = (char *)*((void *)v12 + 4);
  uint64_t v108 = *((void *)v14 + 18);
  BOOL v109 = v106 == 0;
  if (v106) {
    long long v110 = &v107[4 * v614];
  }
  else {
    long long v110 = (char *)*((void *)v12 + 4);
  }
  if (v109)
  {
    v107 += 4 * v614;
    vDSP_Length v111 = *((void *)v14 + 18);
  }
  else
  {
    vDSP_Length v111 = v108 + 4 * v105;
  }
  if (v109) {
    v108 += 4 * v105;
  }
  *((void *)v12 + 5) = v110;
  *((void *)v12 + 6) = v107;
  *((void *)v14 + 19) = v111;
  *((void *)v14 + 20) = v108;
  lmsfilt_v5::preemphasisFilter((lmsfilt_v5 *)v55, (const float *)*((unsigned int *)v13 + 4), *(float **)v16, *((float **)v12 + 5), v21, *((unsigned __int8 **)v12 + 15), v104);
  unsigned __int8 v693 = 1;
  lmsfilt_v5::preemphasisFilter((lmsfilt_v5 *)a7, (const float *)*((unsigned int *)v13 + 4), v16 + 2, *((float **)v14 + 19), (float *)1, &v693, v112);
  long long v113 = (int *)*((unsigned int *)v12 + 18);
  *((_DWORD *)v12 + 19) = v113;
  dft_v3::GetIndexSequence(*((signed int **)v12 + 11), v113, *((_DWORD *)v13 + 11), *((_DWORD *)v13 + 12));
  v684 = (const DSPComplex *)*((void *)v12 + 5);
  long long v114 = *(float **)(v15 + 56);
  vDSP_Length v115 = *((int *)v13 + 4);
  long long v116 = (float *)*((unsigned int *)v13 + 32);
  unsigned int v117 = (char **)v12;
  vDSP_Length v119 = *((int *)v13 + 9);
  vDSP_Length v118 = *((int *)v13 + 10);
  int v120 = *((_DWORD *)v117 + 19);
  double v121 = v117[2];
  uint64_t v122 = v117[3];
  int v123 = v13;
  size_t v124 = *v117;
  uint64_t v125 = v117[1];
  int v126 = *((_DWORD *)v123 + 11);
  id v127 = v117[12];
  int v128 = (float *)v117[13];
  LODWORD(v699.realp) = 1065353216;
  v660 = v116;
  if ((int)v116 >= 1)
  {
    uint64_t v129 = 0;
    int v130 = (float *)&v127[4 * v120 * (int)v118];
    vDSP_Length __N = v115;
    int v131 = v120 * v115;
    uint64_t v132 = (float *)&v122[4 * v131];
    size_t __n = 4 * (int)v119;
    size_t v634 = 4 * v119;
    uint64_t v620 = (int)v118 - 1;
    __Ba = v123 + 22;
    int v641 = v126;
    uint64_t v648 = v126 - 1;
    size_t __len = 4 * v648;
    int v615 = v118 - 2;
    double v133 = (float *)&v121[4 * v131];
    vDSP_Length v656 = v118;
    uint64_t __D = 4 * v118;
    vDSP_Length __Aa = v119;
    do
    {
      if (*((unsigned char *)v129 + (void)v692[16]))
      {
        memcpy(v133, v124, __n);
        memcpy(v132, v125, __n);
        __Z.realp = &v133[__Aa];
        __Z.imagp = &v132[__Aa];
        vDSP_ctoz(v684, 2, &__Z, 1, __Aa);
        memcpy(v124, &v133[__Aa], v634);
        memcpy(v125, &v132[__Aa], v634);
        __Z.realp = v133;
        __Z.imagp = v132;
        long long v135 = (MultiRadixRealFFT *)*((void *)v691 + 1);
        if (v135) {
          MultiRadixRealFFT::RealInPlaceTransform(v135, &__Z, 1, v134);
        }
        vDSP_vsmul(v133, 1, __Ba, v133, 1, (uint64_t)*(int *)v691 >> 1);
        vDSP_vsmul(v132, 1, __Ba, v132, 1, (uint64_t)*(int *)v691 >> 1);
        __C.realp = v133;
        __C.imagp = v132;
        vDSP_zvmags(&__C, 1, v114, 1, __N);
        *long long v114 = *v133 * *v133;
        v114[__N] = *v132 * *v132;
        float v136 = v691[43];
        *int v130 = v136 + *v114;
        v130[v620] = v136 + v114[v620];
        if ((int)v656 >= 3)
        {
          uint64_t v137 = 1;
          int v138 = v615;
          do
          {
            v130[v137] = v136 + (float)((float)((float)(v114[v137] + v114[v137 - 1]) + v114[v137 + 1]) * 0.33333);
            ++v137;
            --v138;
          }
          while (v138);
        }
        if (v641 == 1)
        {
          vDSP_vfill((const float *)&v699, v128, 1, 1uLL);
        }
        else
        {
          LODWORD(__C.realp) = 0;
          vDSP_sve(v130, 1, (float *)&__C, v656);
          float v141 = log10f(*(float *)&__C.realp) * 10.0;
          memmove(v128, v128 + 1, __len);
          v128[v648] = v141;
        }
        long long v139 = (int *)v691;
        vDSP_Length v140 = __Aa;
      }
      else
      {
        long long v139 = (int *)v691;
        vDSP_vclr(v133, 1, *((int *)v691 + 4));
        vDSP_vclr(v132, 1, *((int *)v691 + 4));
        vDSP_Length v140 = __Aa;
        vDSP_vclr((float *)v124, 1, __Aa);
        vDSP_vclr((float *)v125, 1, __Aa);
        vDSP_vclr(v114, 1, v656);
        vDSP_vclr(v130, 1, *((int *)v691 + 10));
        memmove(v128, v128 + 1, __len);
        v128[v648] = -90.458;
      }
      uint64_t v142 = v139[15];
      v133 += v142;
      v132 += v142;
      v124 += 4 * v140;
      v125 += 4 * v140;
      v684 = (const DSPComplex *)((char *)v684 + 4 * __N);
      long long v114 = (float *)((char *)v114 + __D);
      v130 += v139[14];
      uint64_t v129 = (float *)((char *)v129 + 1);
      v128 += v139[11];
    }
    while (v129 != v660);
    int v126 = v139[11];
    vDSP_Length v105 = v607;
  }
  long long v143 = v650;
  long long v144 = v651;
  uint64_t v145 = v667;
  uint64_t v147 = v618;
  int v146 = (int)v619;
  long long v148 = v692;
  if (*((_DWORD *)v650 + 17) == 1)
  {
    if (*(_DWORD *)(v667 + 148) != 1)
    {
LABEL_233:
      if (*((int *)v691 + 26) >= 1) {
        *((void *)a1[5] + 9) = *((void *)v143 + 9);
      }
      goto LABEL_235;
    }
    int v149 = v126;
    LODWORD(__C.realp) = 0;
    int v151 = *((_DWORD *)v650 + 18);
    int v150 = *((_DWORD *)v650 + 19);
    float v152 = 1.0;
    if (v126 < 1)
    {
      int v154 = 0;
      int v157 = 0;
      float v156 = 0.0;
LABEL_207:
      float v237 = *(float *)(v667 + 608) * 0.95;
      *(float *)(v667 + 608) = v237;
      if ((float)(v156 * 0.9) <= v237)
      {
        int v154 = *(_DWORD *)(v667 + 612);
      }
      else
      {
        *(_DWORD *)(v667 + 612) = v154;
        *(float *)(v667 + 608) = v156;
      }
      int v238 = (v154 - *((_DWORD *)v650 + 20)) & ~((v154 - *((_DWORD *)v650 + 20)) >> 31);
      if (v238 + *((_DWORD *)v650 + 21) >= v126) {
        int v239 = v126;
      }
      else {
        int v239 = v238 + *((_DWORD *)v650 + 21);
      }
      vDSP_sve((const float *)(*(void *)(v667 + 120) + 4 * v238), 1, (float *)&__C, v239 - v238);
      int v240 = v239 - 1 - v238 + v157;
      if (v240 <= 1) {
        int v240 = 1;
      }
      float v241 = v156 / (float)((float)(v152 * (float)(*(float *)&__C.realp - v156)) / (float)v240);
      float v242 = *(float *)(v667 + 568);
      if (v242 <= 2.0 || v241 <= 5.0)
      {
        vDSP_Length v105 = v607;
        int v146 = (int)v619;
        if (v242 <= 2.0)
        {
          long long v148 = v692;
          uint64_t v145 = v667;
          long long v144 = v651;
          uint64_t v147 = v618;
        }
        else
        {
          long long v148 = v692;
          uint64_t v145 = v667;
          long long v144 = v651;
          uint64_t v147 = v618;
          if (v241 < 3.0)
          {
            ++v150;
            --v151;
          }
        }
      }
      else
      {
        if (v151 <= v238) {
          int v243 = 0;
        }
        else {
          int v243 = -1;
        }
        if (v151 < v238) {
          int v243 = 1;
        }
        v151 += v243;
        if (v150 >= v239 - 1) {
          v150 -= v150 >= v239;
        }
        else {
          ++v150;
        }
        long long v148 = v692;
        uint64_t v145 = v667;
        long long v144 = v651;
        vDSP_Length v105 = v607;
        uint64_t v147 = v618;
        int v146 = (int)v619;
      }
      int v244 = v149 - 1;
      if (v150 < v149) {
        int v244 = v150;
      }
      long long v143 = v650;
      *((_DWORD *)v650 + 18) = v151 & ~(v151 >> 31);
      *((_DWORD *)v650 + 19) = v244;
      goto LABEL_233;
    }
    uint64_t v153 = 0;
    int v154 = 0;
    uint64_t v155 = *(void *)(v667 + 120);
    float v156 = 0.0;
    do
    {
      if (*(float *)(v155 + 4 * v153) > v156)
      {
        int v154 = v153;
        float v156 = *(float *)(v155 + 4 * v153);
      }
      ++v153;
    }
    while (v126 != v153);
    int v157 = 0;
    if (v126 < 4 || v691[6] >= 12.0) {
      goto LABEL_207;
    }
    uint64_t v158 = v154 + 1;
    if (v158 == v126)
    {
      float v159 = *(float *)(v155 + 4 * v154 - 4);
    }
    else
    {
      if (v154)
      {
        float v156 = v156 + (float)((float)(*(float *)(v155 + 4 * v154 - 4) + *(float *)(v155 + 4 * v158)) * 0.5);
LABEL_206:
        float v152 = 2.0;
        int v157 = -1;
        goto LABEL_207;
      }
      float v159 = *(float *)(v155 + 4);
    }
    float v156 = v156 + v159;
    goto LABEL_206;
  }
LABEL_235:
  *((float *)&v557 + 1) = v691[15];
  *(float *)&v563 = v143[9];
  LODWORD(v557) = v146;
  lmsfilt_v5::runLmsFilter_v5(v601, v599, (DSPSplitComplex *)*((unsigned int *)v691 + 4), *((void *)v143 + 2), *((void *)v143 + 3), (uint64_t)v148[2], (float *)v148[3], (float *)v148[11], *((float **)v143 + 9), v557, v563, (unsigned __int8 *)v148[16], v598, v148[20], *((unsigned char *)v148 + 168), v565, v567, v569, v571,
    v573);
  dft_v5::dftSynthesis(*((float **)v144 + 4), *((float **)v144 + 5), (uint64_t)v691);
  aec_v5::get_EchoEst_Err(v605, (float *)v608, (float *)(*((void *)v144 + 4) + 4 * v147), (float *)(*((void *)v144 + 5) + 4 * v147), *((const float **)v144 + 19), (uint64_t)v691);
  if (*((unsigned char *)v148 + 168))
  {
    dft_v5::dftSynthesis(*((float **)v144 + 6), *((float **)v144 + 7), (uint64_t)v691);
    aec_v5::get_EchoEst_Err(v581, v580, (float *)(*((void *)v144 + 6) + 4 * v147), (float *)(*((void *)v144 + 7) + 4 * v147), *((const float **)v144 + 19), (uint64_t)v691);
  }
  long long v245 = (float *)(v145 + 4);
  unint64_t v246 = (const float *)*((void *)v144 + 19);
  vDSP_Length v247 = *((int *)v691 + 4);
  vDSP_svesq((const float *)v148[5], 1, (float *)(v145 + 4), v247);
  vDSP_svesq(v246, 1, v606, v247);
  int v248 = *(_DWORD **)(v145 + 8);
  *int v248 = *(_DWORD *)(v145 + 4);
  uint64_t v249 = *((unsigned int *)v691 + 33);
  if ((int)v249 <= 1)
  {
    if (v146 > 1) {
      bzero(v248 + 1, 4 * (v146 - 1));
    }
  }
  else
  {
    uint64_t v250 = 0;
    unint64_t v251 = 0;
    uint64_t v252 = 0;
    int v253 = 0;
    float v254 = 0.0;
    uint64_t v255 = 4 * v249;
    uint64_t v256 = 4 * v105;
    do
    {
      if (v148[17][v252])
      {
        ++v253;
        vDSP_svesq((const float *)&v148[5][v250], 1, (float *)&v248[v251 / 4], *((int *)v691 + 4));
        int v248 = *(_DWORD **)(v667 + 8);
        float v254 = v254 + *(float *)&v248[v251 / 4];
      }
      else
      {
        v248[v251 / 4] = 0;
      }
      ++v252;
      v251 += 4;
      v250 += v256;
    }
    while (v255 != v251);
    *long long v245 = v254 / (float)v253;
    uint64_t v145 = v667;
    long long v144 = v651;
  }
  float v257 = *(float *)(v145 + 28);
  int v258 = *((_DWORD *)v691 + 4);
  float v259 = log10((float)(*(float *)(v145 + 4) / (float)v258) + 1.0e-20) * 10.0;
  *(float *)(v145 + 16) = v259;
  learnrate_v4::updateStatistics_echo(v258, (const float *)v608, (const float *)v605, (float *)v145);
  float v260 = *(float *)(v145 + 24);
  float v261 = (v260 + 1.0e-13) / (*(float *)(v145 + 36) + 1.0e-13);
  *(float *)(v145 + 604) = log10f(v261) * 10.0;
  long long v262 = *((_OWORD *)v144 + 8);
  long long v263 = *((_OWORD *)v144 + 5);
  float v264 = (const void **)v650;
  v616 = v144 + 74;
  if (*((int *)v148 + 38) >= 1)
  {
    *(_OWORD *)__Ab = *((_OWORD *)v144 + 5);
    *(_OWORD *)__Nb = *((_OWORD *)v144 + 8);
    int v265 = 0;
    *(_OWORD *)__Db = *(_OWORD *)(v144 + 78);
    *(_OWORD *)v658 = *(_OWORD *)(v144 + 74);
    int v266 = *((_DWORD *)v691 + 32);
    int v267 = *((_DWORD *)v650 + 9);
    int v268 = *((_DWORD *)v691 + 15);
    float v269 = *(float *)(v145 + 260);
    float v270 = *(float *)(v145 + 264);
    float v271 = *(float *)(v145 + 268);
    float v272 = *(float *)(v145 + 272);
    float v273 = *(float *)(v145 + 276);
    uint64_t v274 = *((int *)v691 + 9);
    float v275 = v691[8];
    v590[15] = 0.0;
    unsigned int v276 = *(_DWORD *)(v145 + 232);
    if (v276 <= 1)
    {
      if (v276 != 1) {
        goto LABEL_251;
      }
      int v265 = 2;
    }
    *(_DWORD *)(v145 + 232) = v265;
LABEL_251:
    float v277 = v275 * v260;
    if (*((_DWORD *)v590 + 14) == 1)
    {
      *((void *)v590 + 7) = 0x100000000;
      **(_DWORD **)(v145 + 192) = 1;
      float v278 = 0.0;
    }
    else
    {
      float __Bb = v270;
      float __nb = v271;
      float v636 = v272;
      float v662 = v275 * v260;
      LODWORD(v564) = v267;
      lmsfilt_v5::runLmsFilter_v5((DSPSplitComplex *)(v144 + 82), (DSPSplitComplex *)(v144 + 86), (DSPSplitComplex *)*((unsigned int *)v691 + 4), *((void *)v590 + 2), *((void *)v590 + 3), (uint64_t)v148[2], (float *)v148[3], (float *)v148[11], *((float **)v590 + 9), (float *)__PAIR64__(v268, v266), v564, (unsigned __int8 *)v148[16], (float **)v144 + 45, v148[20], *((unsigned char *)v148 + 168), v566, v568, v570, v572,
        v574);
      dft_v5::dftSynthesis(*((float **)v144 + 43), *((float **)v144 + 44), (uint64_t)v691);
      aec_v5::get_EchoEst_Err((DSPComplex *)v658[0], __Db[0], (float *)(*((void *)v144 + 43) + 4 * v274), (float *)(*((void *)v144 + 44) + 4 * v274), *((const float **)v144 + 19), (uint64_t)v691);
      if (*((unsigned char *)v148 + 168))
      {
        dft_v5::dftSynthesis(*((float **)v144 + 45), *((float **)v144 + 46), (uint64_t)v691);
        aec_v5::get_EchoEst_Err((DSPComplex *)v658[1], __Db[1], (float *)(*((void *)v144 + 45) + 4 * v274), (float *)(*((void *)v144 + 46) + 4 * v274), *((const float **)v144 + 19), (uint64_t)v691);
      }
      float v286 = v273;
      vDSP_svesq(__Db[0], 1, (float *)(v145 + 216), *((int *)v691 + 4));
      float v287 = *(float *)(v145 + 216);
      *(float *)(v145 + 220) = v287;
      float v288 = (float)((float)*(int *)v691 * 100.0) * 9.3132e-10;
      if (v287 < v288) {
        *(float *)(v145 + 216) = v287 + v288;
      }
      LODWORD(__C.realp) = 0;
      vDSP_svesq((const float *)v658[0], 1, (float *)&__C, *((int *)v691 + 4));
      double v289 = *(float *)(v145 + 220) + 1.0e-13;
      float v290 = (*(float *)&__C.realp + 1.0e-13) / v289;
      float __lenb = log10f(v290);
      double v291 = *(float *)(v145 + 36) + 1.0e-13;
      double v292 = *(float *)(v145 + 28) + 0.000000001;
      double v293 = v269;
      float v294 = v291 / v292 + v269;
      float v295 = log10f(v294) * 10.0;
      float v296 = v289 / v292 + v293;
      float v297 = log10f(v296) * 10.0;
      float v298 = v291 / (*(float *)(v145 + 24) + 0.000000001) + v293;
      float v299 = log10f(v298) * 10.0;
      int v300 = *(_DWORD *)(v145 + 236);
      long long v302 = *(float **)(v145 + 160);
      size_t v301 = *(float **)(v145 + 168);
      unint64_t v304 = *(float **)(v145 + 176);
      long long v303 = *(BOOL **)(v145 + 184);
      uint64_t v306 = *(_DWORD **)(v145 + 192);
      uint64_t v305 = *(_DWORD **)(v145 + 200);
      unsigned int v307 = v300 - 1;
      if (v300 != 1)
      {
        uint64_t v308 = 0;
        uint64_t v309 = *(void *)(v145 + 208);
        uint64_t v310 = v309 + 4 * v307;
        int v311 = v300 - 2;
        unsigned int v312 = v307 - 1;
        v313 = &v305[v307];
        uint64_t v314 = &v306[v307];
        v315 = &v303[v307];
        size_t v316 = &v304[v307];
        long long v317 = &v301[v307];
        long long v318 = &v302[v307];
        do
        {
          v318[v308] = v302[(v311 + v308)];
          v317[v308] = v301[(v311 + v308)];
          v316[v308] = v304[(v311 + v308)];
          v315[v308] = v303[(v311 + v308)];
          v314[v308] = v306[(v311 + v308)];
          v313[v308] = v305[(v311 + v308)];
          *(_DWORD *)(v310 + 4 * v308) = *(_DWORD *)(v309 + 4 * (v311 + v308));
        }
        while (v312 + v308--);
      }
      *long long v302 = v295 - v297;
      *size_t v301 = v295;
      *unint64_t v304 = v299;
      float v320 = *v302;
      BOOL v321 = (float)(__Bb + *v302) < 0.0;
      float v273 = v286;
      float v277 = v662;
      if (v662 < v273) {
        BOOL v321 = 1;
      }
      *long long v303 = v321;
      *uint64_t v306 = v320 < __nb;
      *uint64_t v305 = *(float *)(v145 + 36) > *(float *)(v145 + 220);
      BOOL v322 = v299 < v636 && *(float *)(v145 + 16) < -9.0;
      float v323 = *(BOOL **)(v145 + 208);
      *float v323 = v322;
      int v324 = *(_DWORD *)(v145 + 252);
      if (v324 > *(_DWORD *)(v145 + 236)) {
        goto LABEL_294;
      }
      if (v324 < 1)
      {
        int v325 = 0;
      }
      else
      {
        int v325 = 0;
        uint64_t v326 = *(unsigned int *)(v145 + 252);
        do
        {
          int v327 = *v303++;
          v325 += v327;
          --v326;
        }
        while (v326);
      }
      unsigned int v328 = *(_DWORD *)(v145 + 228);
      BOOL v329 = v328 >= 2 && v325 == 0;
      BOOL v330 = v329 || v328 >= v324;
      if (v330 && *(unsigned char *)v145)
      {
        size_t v331 = 4 * *((_DWORD *)v650 + 22);
        memcpy(*(void **)v650, *(const void **)v590, v331);
        memcpy(*((void **)v650 + 1), *((const void **)v590 + 1), v331);
        memcpy(*((void **)v650 + 2), *((const void **)v590 + 2), v331);
        memcpy(*((void **)v650 + 3), *((const void **)v590 + 3), v331);
        memcpy(*((void **)v650 + 6), *((const void **)v590 + 6), v331);
        *((void *)v650 + 9) = *((void *)v590 + 9);
        *(_DWORD *)(v145 + 232) = 1;
        *(_OWORD *)v637 = *(_OWORD *)(v144 + 78);
        *(_OWORD *)__Ab = *v616;
        int v332 = 4 * *((_DWORD *)v691 + 34);
        size_t v333 = 4 * *((_DWORD *)v691 + 4);
        memcpy((void *)__Nb[0], __Db[0], v333);
        memcpy((void *)__Nb[1], __Db[1], v333);
        size_t v334 = v332;
        long long v144 = v651;
        memcpy(*((void **)v651 + 2), *((const void **)v651 + 41), v334);
        size_t v335 = v334;
        float v264 = (const void **)v650;
        memcpy(*((void **)v144 + 3), *((const void **)v144 + 42), v335);
        memcpy(*((void **)v144 + 4), *((const void **)v144 + 43), v333);
        memcpy(*((void **)v144 + 5), *((const void **)v144 + 44), v333);
        memcpy(*((void **)v144 + 6), *((const void **)v144 + 45), v333);
        memcpy(*((void **)v144 + 7), *((const void **)v144 + 46), v333);
        *(void *)(v145 + 88) = *(void *)v611;
        size_t v336 = 4 * *((_DWORD *)v691 + 10);
        memcpy(*(void **)(v145 + 72), *(const void **)(v145 + 296), v336);
        memcpy(*(void **)(v145 + 80), *(const void **)(v145 + 304), v336);
        **(_DWORD **)(v145 + 184) = 1;
        *(_DWORD *)(v145 + 228) = 0;
        *(_OWORD *)__Nb = *(_OWORD *)v637;
      }
      else
      {
LABEL_294:
        long long v337 = *(int **)(v145 + 192);
        int v338 = *(_DWORD *)(v145 + 244);
        if (v338 < 1)
        {
          int v339 = 0;
          float v264 = (const void **)v650;
        }
        else
        {
          int v339 = 0;
          double v340 = *(int **)(v145 + 192);
          uint64_t v341 = *(unsigned int *)(v145 + 244);
          float v264 = (const void **)v650;
          do
          {
            int v342 = *v340++;
            v339 += v342;
            --v341;
          }
          while (v341);
        }
        int v343 = *(_DWORD *)(v145 + 248);
        if (v343 < 1)
        {
          int v344 = 0;
        }
        else
        {
          int v344 = 0;
          uint64_t v345 = *(unsigned int *)(v145 + 248);
          do
          {
            int v346 = *v337++;
            v344 += v346;
            --v345;
          }
          while (v345);
        }
        int v347 = *(_DWORD *)(v145 + 256);
        if (v347 < 1)
        {
          int v348 = 0;
        }
        else
        {
          int v348 = 0;
          uint64_t v349 = *(unsigned int *)(v145 + 256);
          do
          {
            int v350 = *v323++;
            v348 += v350;
            --v349;
          }
          while (v349);
        }
        float v351 = v301[1];
        if (*v301 < v351 || v351 < v301[2])
        {
          BOOL v352 = *(unsigned char *)v145 && v339 == v338;
          BOOL v353 = v352 && v348 == v347;
          if (v353 && (float)((float)v344 * 1.5) > (float)v343) {
            *((_DWORD *)v590 + 15) = 1;
          }
        }
      }
      float v278 = __lenb * 10.0;
    }
    int v355 = *((_DWORD *)v590 + 15);
    if (v355 == 1)
    {
      *(_DWORD *)(v145 + 224) = 0;
      size_t v356 = 4 * *((_DWORD *)v590 + 22);
      memcpy(*(void **)v590, *v264, v356);
      memcpy(*((void **)v590 + 1), v264[1], v356);
      memcpy(*((void **)v590 + 2), v264[2], v356);
      memcpy(*((void **)v590 + 3), v264[3], v356);
      memcpy(*((void **)v590 + 6), v264[6], v356);
      *((void *)v590 + 9) = v264[9];
      *(void *)uint64_t v611 = *(void *)(v145 + 88);
      size_t v357 = 4 * *((_DWORD *)v691 + 10);
      memcpy(*(void **)(v145 + 296), *(const void **)(v145 + 72), v357);
      memcpy(*(void **)(v145 + 304), *(const void **)(v145 + 80), v357);
      **(_DWORD **)(v145 + 184) = 0;
      **(_DWORD **)(v145 + 192) = 0;
      **(_DWORD **)(v145 + 200) = 0;
      **(_DWORD **)(v145 + 208) = 0;
      int v358 = *(_DWORD *)(v145 + 624);
      if (v358 <= 3) {
        *(_DWORD *)(v145 + 624) = v358 + 1;
      }
    }
    else
    {
      if (!*(unsigned char *)v145) {
        goto LABEL_329;
      }
      *(float *)(v145 + 224) = *(float *)(v145 + 224) + 1.0;
    }
    int v355 = *((_DWORD *)v590 + 15);
LABEL_329:
    if (!v355)
    {
      int v359 = *(_DWORD *)(v145 + 240);
      if (v359 < 1)
      {
        int v360 = 0;
      }
      else
      {
        int v360 = 0;
        v361 = *(int **)(v145 + 200);
        uint64_t v362 = *(unsigned int *)(v145 + 240);
        do
        {
          int v363 = *v361++;
          v360 += v363;
          --v362;
        }
        while (v362);
      }
      if (v360 == v359)
      {
        *(_DWORD *)(v145 + 36) = *(_DWORD *)(v145 + 220);
        if (v277 >= v273 && *(unsigned char *)v145) {
          ++*(_DWORD *)(v145 + 228);
        }
        *(_DWORD *)(v145 + 232) = 1;
        *(float *)(v145 + 604) = v278;
        goto LABEL_342;
      }
      *(_DWORD *)(v145 + 228) = 0;
    }
    *(_OWORD *)__Db = *(_OWORD *)__Nb;
    *(_OWORD *)v658 = *(_OWORD *)__Ab;
    goto LABEL_342;
  }
  int v279 = *((_DWORD *)v691 + 42);
  if (v279 == 1)
  {
    *(_OWORD *)__Ac = *((_OWORD *)v144 + 5);
    *(_OWORD *)__Nc = *((_OWORD *)v144 + 8);
    vDSP_Length v280 = *(int *)(v145 + 236);
    vDSP_vclr(*(float **)(v145 + 160), 1, v280);
    vDSP_vclr(*(float **)(v145 + 168), 1, v280);
    vDSP_vclr(*(float **)(v145 + 176), 1, v280);
    if ((int)v280 >= 1)
    {
      uint64_t v281 = v280;
      uint64_t v282 = *(_DWORD **)(v145 + 192);
      int v283 = *(_DWORD **)(v145 + 200);
      uint64_t v284 = *(_DWORD **)(v145 + 208);
      do
      {
        *v282++ = 1;
        *v283++ = 1;
        *v284++ = 1;
        --v281;
      }
      while (v281);
    }
    int v285 = *(_DWORD *)(v145 + 236);
    if (v285 <= *(_DWORD *)(v145 + 252)) {
      int v285 = *(_DWORD *)(v145 + 252);
    }
    if (v285 >= 1) {
      memset_pattern16(*(void **)(v145 + 184), &unk_1BB87C2B0, 4 * v285);
    }
    vDSP_vclr(*(float **)v148[7], 1, *((int *)v691 + 19));
    vDSP_vclr(*(float **)v148[8], 1, *((int *)v691 + 19));
    vDSP_vclr(*((float **)v144 + 22), 1, *((int *)v691 + 20));
    vDSP_vclr(**((float ***)v144 + 33), 1, *((int *)v691 + 32) * (uint64_t)*((int *)v691 + 20));
    vDSP_vclr(*((float **)v144 + 34), 1, *((int *)v691 + 20));
    vDSP_vclr(**((float ***)v144 + 35), 1, 2 * *((int *)v691 + 20) * (uint64_t)*((int *)v691 + 32));
    int v279 = *((_DWORD *)v691 + 42);
    long long v263 = *(_OWORD *)__Ac;
    long long v262 = *(_OWORD *)__Nc;
  }
  if (v279 >= 1)
  {
    *(_DWORD *)(v145 + 568) = 0;
    *(void *)(v145 + 148) = 0;
  }
  *(_OWORD *)__Db = v262;
  *(_OWORD *)v658 = v263;
LABEL_342:
  v638 = (float *)(v145 + 408);
  dft_v5::dftGenericAnalysis2ndHalf(v608, v613, v612, (uint64_t)v691, 1);
  dft_v5::dftGenericAnalysis2ndHalf_dsc((const void *)(*((void *)v144 + 4) + 4 * v147), (const void *)(*((void *)v144 + 5) + 4 * v147), v610, v609, (int *)v691);
  uint64_t __Nd = (uint64_t)a1[10];
  uint64_t v365 = (DSPComplex *)*((void *)v144 + 57);
  int v364 = (DSPComplex *)*((void *)v144 + 58);
  int v366 = (DSPComplex *)*((void *)v144 + 59);
  uint64_t v367 = *((int *)v691 + 4);
  int v368 = *(_DWORD *)(v145 + 424) - v367;
  DSPSplitComplex v369 = *(DSPSplitComplex *)(v144 + 102);
  DSPSplitComplex v699 = *(DSPSplitComplex *)(v144 + 106);
  DSPSplitComplex __Z = v369;
  DSPSplitComplex v698 = *(DSPSplitComplex *)(v144 + 110);
  uint64_t __Ad = *(int *)(v145 + 432);
  int v663 = *(_DWORD *)(v145 + 436);
  vDSP_Length v370 = *(int *)(v145 + 444);
  v371 = *(float **)(v145 + 496);
  __lenc = *(float **)(v145 + 504);
  __nc = *(float **)(v145 + 480);
  uint64_t v372 = v145;
  v373 = *(float **)(v145 + 488);
  LODWORD(v694.realp) = *(_DWORD *)(v372 + 416);
  float v697 = 1.0 - *(float *)&v694.realp;
  if (v368 >= 1)
  {
    memmove(v365, (char *)v365 + 4 * v367, 4 * v368);
    memmove(v364, (char *)v364 + 4 * v367, 4 * v368);
    memmove(v366, (char *)v366 + 4 * v367, 4 * v368);
  }
  memcpy((char *)v365 + 4 * v368, *((const void **)v651 + 19), 4 * v367);
  memcpy((char *)v364 + 4 * v368, *((const void **)v651 + 10), 4 * v367);
  memcpy((char *)v366 + 4 * v368, *((const void **)v651 + 16), 4 * v367);
  dft_v5::dftGenericAnalysis2ndHalf(v365, __Z.realp, __Z.imagp, __Nd, 0);
  dft_v5::dftGenericAnalysis2ndHalf(v364, v699.realp, v699.imagp, __Nd, 0);
  realp = v698.realp;
  imagp = v698.imagp;
  vDSP_zvmags(&__Z, 1, v371, 1, v370);
  vDSP_vsmul(v371, 1, &v697, realp, 1, v370);
  vDSP_vsmul(__lenc, 1, (const float *)&v694, imagp, 1, v370);
  vDSP_vadd(realp, 1, imagp, 1, __lenc, 1, v370);
  vDSP_zvcmul(&__Z, 1, &v699, 1, &v698, 1, v370);
  vDSP_zvabs(&v698, 1, __nc, 1, v370);
  vDSP_vsmul(__nc, 1, &v697, realp, 1, v370);
  vDSP_vsmul(v373, 1, (const float *)&v694, imagp, 1, v370);
  vDSP_vadd(realp, 1, imagp, 1, v373, 1, v370);
  float v696 = 2.2204e-16;
  vDSP_vsadd(__lenc, 1, &v696, realp, 1, v370);
  vDSP_vdiv(realp, 1, v373, 1, imagp, 1, v370);
  vDSP_meanv(&imagp[__Ad], 1, v638, v663 - (int)__Ad + 1);
  uint64_t v376 = v667;
  *(float *)(v667 + 408) = fmaxf(fminf(*(float *)(v667 + 408), 1.0), 0.0);
  dft_v5::dftGenericAnalysis2ndHalf(v366, v698.realp, v698.imagp, __Nd, 0);
  int v377 = v698.realp;
  int v378 = v698.imagp;
  uint64_t v379 = v699.realp;
  int v380 = v699.imagp;
  v381 = *(float **)(v667 + 448);
  int v382 = *(float **)(v667 + 456);
  v383 = *(float **)(v667 + 472);
  __Ae = *(float **)(v667 + 464);
  uint64_t v695 = 0;
  float v384 = *(float *)(v667 + 412);
  float v385 = *(float *)(v667 + 420);
  vDSP_Length v386 = *(int *)(v667 + 424);
  int v387 = *(_DWORD *)(v667 + 428);
  unsigned int __Ne = *(_DWORD *)(v667 + 440);
  DSPSplitComplex __C = v698;
  vDSP_zvmags(&__C, 1, v382, 1, v386);
  *int v382 = *v377 * *v377;
  v382[v386] = *v378 * *v378;
  __C.realp = v379;
  __C.imagp = v380;
  vDSP_zvmags(&__C, 1, v381, 1, v386);
  float *v381 = *v379 * *v379;
  v381[v386] = *v380 * *v380;
  learnrate_v3::crossCorrSpec_raw((learnrate_v3 *)v382, v383, v381, __Ae, (const float *)&v695 + 1, (float *)&v695, (float *)((v387 >> 1) + 1));
  float v388 = sqrtf(*(float *)&v695);
  float v389 = (float)(*((float *)&v695 + 1) / v388) / (float)(v388 + v696);
  if (v389 <= 0.001) {
    float v389 = 0.001;
  }
  *(float *)(v667 + 400) = v389;
  *(float *)(v667 + 404) = (float)((float)(1.0 - v384) * v389) + (float)(v384 * *(float *)(v667 + 404));
  VPEchoGateV3::GatesmoothPowerSpectrum((VPEchoGateV3 *)v383, v382, (const float *)__Ne, v385);
  VPEchoGateV3::GatesmoothPowerSpectrum((VPEchoGateV3 *)__Ae, v381, (const float *)__Ne, v385);
  *a11 = *(_DWORD *)(v667 + 408);
  uint64_t v390 = (uint64_t)v691;
  int v391 = *(_DWORD *)v691;
  LODWORD(__Z.realp) = 0;
  LODWORD(v699.realp) = 0;
  vDSP_Length v392 = *((int *)v691 + 4);
  AudioUnitRenderActionFlags v393 = (const float *)*((unsigned int *)v691 + 10);
  AudioBufferList v394 = *(float **)(v667 + 48);
  __C.realp = v613;
  __C.imagp = v612;
  vDSP_zvmags(&__C, 1, v394, 1, v392);
  *AudioBufferList v394 = *v613 * *v613;
  v394[v392] = *v612 * *v612;
  AudioBufferList v395 = *(float **)(v667 + 64);
  __C.realp = v610;
  __C.imagp = v609;
  vDSP_zvmags(&__C, 1, v395, 1, v392);
  *AudioBufferList v395 = *v610 * *v610;
  v395[v392] = *v609 * *v609;
  learnrate_v3::crossCorrSpec_raw(*(learnrate_v3 **)(v667 + 48), *(const float **)(v667 + 72), *(const float **)(v667 + 64), *(const float **)(v667 + 80), (const float *)&__Z, (float *)&v699, (float *)((v391 >> 1) + 1));
  float v396 = sqrtf(*(float *)&v699.realp);
  float v397 = *(float *)(v667 + 24);
  float v398 = *(float *)(v667 + 136);
  float v399 = *(float *)(v667 + 132) * v397;
  float v400 = *(float *)(v667 + 32);
  if (v399 > (float)(v398 * v400)) {
    float v399 = v398 * v400;
  }
  float v401 = v399 / v400;
  if (v400 < 9.3132e-19) {
    float v401 = *(float *)(v667 + 136);
  }
  float v402 = (float)((float)(*(float *)&__Z.realp / v396) * v401) + (float)((float)(1.0 - v401) * *(float *)(v667 + 88));
  float v403 = (float)(v401 * v396) + (float)((float)(1.0 - v401) * *(float *)(v667 + 92));
  if (v403 < 9.3132e-10) {
    float v403 = 9.3132e-10;
  }
  if (v402 >= (float)(v403 * 0.005)) {
    float v404 = v402;
  }
  else {
    float v404 = v403 * 0.005;
  }
  if (v404 <= v403) {
    float v405 = v404;
  }
  else {
    float v405 = v403;
  }
  *(float *)&v699.realp = v396;
  *(float *)&__Z.realp = *(float *)&__Z.realp / v396;
  *(float *)(v667 + 88) = v402;
  *(float *)(v667 + 92) = v403;
  if (v402 < (float)(v403 * 0.005) || v404 > v403) {
    *(float *)(v667 + 88) = v405;
  }
  float v407 = v405 / v403;
  float v408 = (float)((float)(v397 * (float)(v407 * 3.0)) + (float)(*(float *)(v667 + 4) * 0.0001)) / v400;
  float v409 = (float)(*(float *)(v667 + 20) * *(float *)(v667 + 20)) / (float)((float)(v400 * v397) + 8.6736e-19);
  if (v408 >= v409) {
    float v409 = v408;
  }
  if (v409 > 0.5) {
    float v409 = 0.5;
  }
  *(float *)(v667 + 140) = v407;
  *(float *)(v667 + 144) = v409;
  int v410 = *(_DWORD *)(v667 + 148);
  v411 = v692;
  AudioBufferList v412 = v650;
  if (v410)
  {
    AudioBufferList v413 = v651;
    if (v410 != 1) {
      goto LABEL_377;
    }
    if (*(float *)(v667 + 404) < *(float *)(v667 + 392) && *(float *)(v667 + 408) < *(float *)(v667 + 396)) {
      *(_DWORD *)(v667 + 144) = 0;
    }
  }
  else
  {
    AudioBufferList v413 = v651;
    if (*(float *)(v667 + 152) <= (float)*((int *)v691 + 11)) {
      goto LABEL_377;
    }
    *(_DWORD *)(v667 + 148) = 1;
  }
  if (*((_DWORD *)v691 + 26) == 3 && v407 > 0.0631)
  {
    *(void *)(v667 + 148) = 0;
    vDSP_vclr(*(float **)v692[8], 1, *((int *)v691 + 19));
    vDSP_vclr(*(float **)v692[7], 1, *((int *)v691 + 19));
    vDSP_vclr(*((float **)v413 + 22), 1, *((int *)v691 + 20));
    vDSP_vclr(**((float ***)v413 + 33), 1, *((int *)v691 + 32) * (uint64_t)*((int *)v691 + 20));
    vDSP_vclr(*((float **)v413 + 34), 1, *((int *)v691 + 20));
    vDSP_vclr(**((float ***)v413 + 35), 1, 2 * *((int *)v691 + 20) * (uint64_t)*((int *)v691 + 32));
  }
LABEL_377:
  learnrate_v4::getAdaptationRate4_v6(v667);
  VPEchoGateV3::GatesmoothPowerSpectrum(*(VPEchoGateV3 **)(v667 + 72), *(const float **)(v667 + 48), v393, *(float *)(v667 + 128));
  VPEchoGateV3::GatesmoothPowerSpectrum(*(VPEchoGateV3 **)(v667 + 80), *(const float **)(v667 + 64), v393, *(float *)(v667 + 128));
  if (!a10)
  {
    v419 = *(float **)(v667 + 104);
    uint64_t v420 = *((unsigned int *)v691 + 11);
    uint64_t v421 = (int)v420;
    if (*((_DWORD *)v691 + 25))
    {
      float v422 = -0.1;
    }
    else if (*(_DWORD *)(v667 + 148))
    {
      if (*(float *)(v667 + 404) <= 2.6) {
        float v422 = *(float *)(v667 + 640);
      }
      else {
        float v422 = 0.65;
      }
    }
    else
    {
      float v422 = 0.65;
    }
    v423 = (float *)v692[13];
    vDSP_Length v687 = *((int *)v691 + 4);
    vDSP_Length v424 = *((int *)v691 + 39);
    v425 = *(char **)(v667 + 632);
    __Nf = v692[16];
    int v426 = *((_DWORD *)v692 + 38);
    uint64_t v427 = *(void *)(v667 + 120);
    float v428 = v691[6];
    uint64_t v429 = *((int *)v650 + 9);
    LODWORD(__C.realp) = 0;
    LODWORD(__Z.realp) = 0;
    LODWORD(v698.realp) = 1065353216;
    if (v420 == 1)
    {
      vDSP_vfill((const float *)&v698, v419, 1, v424);
      *a3 = v428 * 0.5;
LABEL_450:
      vDSP_Length v688 = *(int *)(v390 + 56);
      vDSP_Length v477 = *(int *)(v390 + 40);
      uint64_t v478 = *(int *)(v390 + 44);
      uint64_t v479 = *(unsigned int *)(v390 + 128);
      LODWORD(__C.realp) = 0;
      int v480 = v411[12];
      v481 = *(float **)(v667 + 96);
      uint64_t v482 = *(void *)(v667 + 104);
      vDSP_vclr(v481, 1, v477);
      if ((int)v479 >= 1)
      {
        for (uint64_t i = 0; i != v479; ++i)
        {
          if (v692[16][i]) {
            BOOL v484 = (int)v478 < 1;
          }
          else {
            BOOL v484 = 1;
          }
          if (!v484)
          {
            uint64_t v485 = 0;
            do
            {
              LODWORD(__C.realp) = *(_DWORD *)(v482 + v485);
              if (*(float *)&__C.realp != 0.0) {
                vDSP_vsma((const float *)&v480[4 * *(_DWORD *)&v692[11][v485] * (int)v477], 1, (const float *)&__C, v481, 1, v481, 1, v477);
              }
              v485 += 4;
            }
            while (4 * v478 != v485);
          }
          v480 += 4 * v688;
          v482 += 4 * v478;
        }
      }
      LODWORD(__Z.realp) = 1065353216;
      vDSP_svdiv((const float *)&__Z, v481, 1, v481, 1, v477);
      v411 = v692;
      uint64_t v390 = (uint64_t)v691;
      if (*((int *)v692 + 38) >= 1)
      {
        BOOL v416 = *(float *)(v667 + 568) < *(float *)(v667 + 552) || *(_DWORD *)(v667 + 148) == 0;
        BOOL v417 = *(float *)(v667 + 404) > 0.15 && *v638 > 0.65;
        int v418 = v417;
        if (*((_DWORD *)v691 + 26) == 3) {
          int v418 = *v638 > 0.9 || v417;
        }
        if ((v588 & (v416 | v418)) == 1)
        {
          a1[2] = v577;
          a1[4] = v650;
          learnrate_v5::adaptLmsFilter_v4((uint64_t)v613);
          float v415 = *(float *)(v667 + 36);
          v664 = v650;
          AudioBufferList v412 = v577;
          goto LABEL_474;
        }
      }
      uint64_t v376 = v667;
      learnrate_v5::adaptLmsFilter_v4((uint64_t)v613);
      float v415 = *(float *)(v667 + 36);
      AudioBufferList v413 = v651;
LABEL_490:
      long long v500 = *(_OWORD *)__Db;
      long long v501 = *(_OWORD *)v658;
      goto LABEL_491;
    }
    if ((int)v420 <= 1)
    {
      int v430 = 0;
      float v433 = *v423;
    }
    else
    {
      int v430 = 0;
      float v431 = *v419;
      for (uint64_t j = 1; j != v420; ++j)
      {
        if (v419[j] >= v431)
        {
          int v430 = j;
          float v431 = v419[j];
        }
      }
      float v433 = v423[v430];
      int v434 = v430 - 1;
      if (v430 >= 1)
      {
        float v435 = v423[v434];
        if (v430 == 1)
        {
          int v430 = 1;
          float v556 = v423[v434];
        }
        else
        {
          float v556 = v423[v430 - 2];
        }
        goto LABEL_400;
      }
    }
    float v435 = v433;
    float v556 = v433;
LABEL_400:
    float v436 = v433;
    if (v430 < (int)v421 - 1) {
      float v436 = v423[v430 + 1];
    }
    float v437 = v436;
    if (v430 < (int)v421 - 2) {
      float v437 = v423[v430 + 2];
    }
    float v438 = vabds_f32(v556, v435);
    float v439 = vabds_f32(v435, v433);
    float v440 = vabds_f32(v433, v436);
    float v441 = vabds_f32(v436, v437);
    float v442 = vabds_f32(v436, v435);
    float v443 = vabds_f32(v556, v433);
    if (vabds_f32(v433, v437) <= 10.0
      && v443 <= 10.0
      && v442 <= 10.0
      && v441 <= 8.0
      && v440 <= 8.0
      && v439 <= 8.0
      && v438 <= 8.0)
    {
      uint64_t v622 = v429;
      int v583 = v426;
      uint64_t v591 = v421;
      __dsta = v425;
      LODWORD(v699.realp) = 0;
      vDSP_Length v450 = *((unsigned int *)v650 + 18);
      size_t __nd = (int)v450;
      __lstd::vector<std::string>::pointer end = *((_DWORD *)v650 + 19);
      uint64_t v451 = v427;
      if (*((_DWORD *)v650 + 17) == 1 && (int)v619 >= 1)
      {
        uint64_t v452 = 0;
        uint64_t v453 = 4 * v421;
        vDSP_Length v454 = (v421 - (__lend + 1));
        uint64_t v455 = v427 + 4 * (__lend + 1);
        int v456 = (int)v619;
        do
        {
          if ((int)v450 >= 1)
          {
            vDSP_vfill((const float *)&v699, (float *)((char *)v419 + v452), 1, v450);
            AudioBufferList v412 = v650;
            vDSP_vfill((const float *)&v699, (float *)(v451 + v452), 1, v450);
          }
          if ((int)v454 >= 1)
          {
            vDSP_vfill((const float *)&v699, (float *)((char *)&v419[__lend + 1] + v452), 1, v454);
            vDSP_vfill((const float *)&v699, (float *)(v455 + v452), 1, v454);
          }
          v452 += v453;
          --v456;
        }
        while (v456);
      }
      int v665 = v450;
      v585 = v419;
      uint64_t v457 = *(void *)v412;
      uint64_t v458 = *((void *)v412 + 1);
      ++learnrate_v5::adjustProp_v5(float *,float *,float *,float *,LMS_FILTER5 *,float *,int,float,int,int,int,float,int,int,float *,BOOL *,int,float)::count;
      float v459 = 0.0;
      float v460 = 0.0;
      size_t v461 = (int)v450;
      if ((int)v619 >= 1)
      {
        int v462 = 0;
        v463 = &__dsta[4 * __nd];
        size_t v464 = v451 + 4 * __nd;
        uint64_t v623 = 4 * v622;
        __Bc = (float *)(4 * v591);
        do
        {
          if ((int)v461 <= __lend)
          {
            uint64_t v465 = 0;
            uint64_t v466 = 4 * (int)__nd * (int)v687;
            do
            {
              vDSP_svesq((const float *)(v457 + v466), 1, (float *)&__C, v687);
              vDSP_svesq((const float *)(v458 + v466), 1, (float *)&__Z, v687);
              float v467 = *(float *)&__C.realp + *(float *)&__Z.realp;
              *(float *)(v464 + 4 * v465) = (float)(*(float *)&__C.realp + *(float *)&__Z.realp) + 1.0e-20;
              float v468 = sqrtf((float)(1.0 / (float)(int)v687) * v467) + 0.02;
              *(float *)&v463[4 * v465] = v468;
              if (!v462)
              {
                float v460 = v460 + (float)((float)(v665 + v465) * v467);
                *(float *)&v699.realp = v467 + *(float *)&v699.realp;
              }
              if (!*((unsigned char *)v462 + (void)__Nf)) {
                float v468 = -0.0;
              }
              float v459 = v459 + v468;
              ++v465;
              v466 += 4 * v687;
            }
            while (v665 + ~__lend + v465);
          }
          int v462 = (float *)((char *)v462 + 1);
          size_t v461 = __nd;
          v463 = (char *)__Bc + (void)v463;
          v464 += (size_t)__Bc;
          v458 += v623;
          v457 += v623;
        }
        while (v462 != v619);
      }
      float v469 = *(float *)&v699.realp;
      *a2 = v699.realp;
      float v470 = (float)((float)((float)(int)v591 + -0.5) - (float)(v460 * (float)(1.0 / (float)(v469 + 1.0e-20)))) * v428;
      if (v470 < 0.0) {
        float v470 = 0.0;
      }
      *a3 = v470;
      v411 = v692;
      uint64_t v390 = (uint64_t)v691;
      v471 = v585;
      int v472 = __dsta;
      if ((int)v619 >= 1)
      {
        int v473 = 0;
        uint64_t v474 = 4 * v591;
        do
        {
          if ((int)v461 <= __lend)
          {
            uint64_t v475 = v461;
            int v476 = __lend - v665 + 1;
            do
            {
              v471[v475] = (float)((float)(1.0 - v422) / (float)((float)(v583 * v591) + (float)(v583 * v591)))
                         + (float)((float)((float)(v422 + 1.0) / (float)(v459 + v459)) * *(float *)&v472[v475 * 4]);
              ++v475;
              --v476;
            }
            while (v476);
          }
          ++v473;
          v471 = (float *)((char *)v471 + v474);
          v472 += v474;
        }
        while (v473 != v619);
      }
    }
    goto LABEL_450;
  }
  float v415 = *(float *)(v667 + 36);
  if (!v588) {
    goto LABEL_490;
  }
  BOOL v416 = 0;
  BOOL v417 = 0;
  LOBYTE(v418) = 0;
  v664 = v577;
LABEL_474:
  *(_OWORD *)__lene = v616[6];
  *(_OWORD *)v639 = v616[5];
  int v486 = v651;
  *(void *)(v667 + 576) = 0;
  float v487 = *(float *)(v667 + 40) + 1.0e-20;
  *(float *)(v667 + 540) = log10f(v487 / (float)(*(float *)(v667 + 28) + 1.0e-20)) * 10.0;
  *(_DWORD *)(v667 + 548) = 0;
  __Af = (float **)(v651 + 90);
  HIDWORD(v558) = *(_DWORD *)(v390 + 60);
  *(float *)&v564 = v412[9];
  LODWORD(v558) = v619;
  v689 = (DSPSplitComplex *)(v651 + 82);
  __Ng = (DSPSplitComplex *)(v651 + 86);
  lmsfilt_v5::runLmsFilter_v5((DSPSplitComplex *)(v651 + 82), (DSPSplitComplex *)(v651 + 86), (DSPSplitComplex *)*(unsigned int *)(v390 + 16), *((void *)v412 + 2), *((void *)v412 + 3), (uint64_t)v692[2], (float *)v692[3], (float *)v692[11], *((float **)v412 + 9), v558, v564, (unsigned __int8 *)v692[16], (float **)v651 + 45, v692[20], 0, v566, v568, v570, v572,
    v574);
  dft_v5::dftSynthesis(*((float **)v486 + 43), *((float **)v486 + 44), v390);
  aec_v5::get_EchoEst_Err((DSPComplex *)v639[0], (float *)__lene[0], (float *)(*((void *)v486 + 43) + 4 * v618), (float *)(*((void *)v486 + 44) + 4 * v618), *((const float **)v486 + 19), v390);
  int v488 = v412;
  vDSP_Length v489 = *(int *)(v390 + 16);
  vDSP_svesq((const float *)__lene[0], 1, (float *)(v667 + 512), v489);
  vDSP_svesq((const float *)v639[0], 1, (float *)(v667 + 564), v489);
  float v490 = *(float *)(v667 + 512);
  *(float *)(v667 + 544) = log10f((float)(v490 + 1.0e-20) / (float)(*(float *)(v667 + 28) + 1.0e-20)) * 10.0;
  float v491 = log10f((float)(v490 + 1.0e-20) / v487) * -10.0;
  *(float *)(v667 + 596) = v491;
  int v492 = *(_DWORD *)(v667 + 40);
  *(float *)(v667 + 40) = v490;
  if (*(_DWORD *)(v667 + 148) == 1 && *(float *)(v667 + 568) > *(float *)(v667 + 552))
  {
    uint64_t v493 = v488;
    if (*(float *)(v667 + 540) < -20.0 && v491 < -2.0)
    {
      *(_DWORD *)(v667 + 580) = 1;
      signed int v495 = *(_DWORD *)(v390 + 48);
      if (v495 <= 1) {
        unsigned int v496 = 1;
      }
      else {
        unsigned int v496 = *(_DWORD *)(v390 + 48);
      }
      int v494 = *((_DWORD *)v692 + 18) - 1;
      LODWORD(v497) = v494
                    + v495
                    + v495
                    * (((v494 & ~(v494 >> 31)) - (v494 + (v494 >> 31))) / v496 + (v494 >> 31));
      do
        v497 = (int *)(v497 - v495);
      while ((int)v497 >= v495);
      *((_DWORD *)v692 + 19) = v497;
      dft_v3::GetIndexSequence((signed int *)v692[11], v497, *(_DWORD *)(v390 + 44), v495);
      HIDWORD(v559) = *(_DWORD *)(v390 + 60);
      *(float *)&v564 = v488[9];
      LODWORD(v559) = v619;
      lmsfilt_v5::runLmsFilter_v5(v689, __Ng, (DSPSplitComplex *)*(unsigned int *)(v390 + 16), *((void *)v488 + 2), *((void *)v488 + 3), (uint64_t)v692[2], (float *)v692[3], (float *)v692[11], *((float **)v488 + 9), v559, v564, (unsigned __int8 *)v692[16], __Af, v692[20], 0, v566, v568, v570, v572,
        v574);
      dft_v5::dftSynthesis(*((float **)v651 + 43), *((float **)v651 + 44), v390);
      aec_v5::get_EchoEst_Err((DSPComplex *)v639[0], (float *)__lene[0], (float *)(*((void *)v651 + 43) + 4 * v618), (float *)(*((void *)v651 + 44) + 4 * v618), *((const float **)v651 + 20), v390);
      LODWORD(__C.realp) = 0;
      vDSP_svesq((const float *)__lene[0], 1, (float *)&__C, v607);
      float v498 = log10f((float)(*(float *)&__C.realp + 1.0e-20) / (float)(*(float *)(v667 + 516) + 1.0e-20)) * -10.0;
      *(float *)(v667 + 600) = v498;
      if (v498 >= -0.5)
      {
        v499 = v488;
      }
      else
      {
        *(_DWORD *)(v667 + 576) = 1;
        v499 = v664;
        a1[2] = v664;
        a1[4] = v488;
        *(_DWORD *)(v667 + 40) = v492;
        *(_DWORD *)(v667 + 512) = v492;
      }
      long long v500 = *(_OWORD *)__Db;
      long long v501 = *(_OWORD *)v658;
      uint64_t v493 = v499;
      v411 = v692;
      goto LABEL_487;
    }
  }
  else
  {
    uint64_t v493 = v488;
  }
  v411 = v692;
  long long v500 = *(_OWORD *)__Db;
  long long v501 = *(_OWORD *)v658;
LABEL_487:
  uint64_t v502 = v667;
  *(_DWORD *)(v667 + 584) = 0;
  v650 = v493;
  if (*(_DWORD *)(v667 + 580))
  {
LABEL_488:
    *(_DWORD *)(v502 + 588) = 1;
    uint64_t v376 = v502;
    AudioBufferList v413 = v651;
    goto LABEL_491;
  }
  if (v416)
  {
    uint64_t v502 = v667;
    if (*(float *)(v667 + 404) <= 0.02 && *(_DWORD *)(v390 + 104) != 3) {
      goto LABEL_488;
    }
  }
  else
  {
    uint64_t v502 = v667;
    if ((v418 & 1) == 0) {
      goto LABEL_488;
    }
  }
  float __ne = v415;
  *(_DWORD *)(v502 + 584) = 1;
  v536 = a1[5];
  uint64_t v537 = v502;
  if (*(_DWORD *)(v502 + 588) == 1)
  {
    *(_DWORD *)(v502 + 588) = 0;
    size_t v538 = 4 * *((_DWORD *)v536 + 22);
    memcpy(*(void **)v536, *(const void **)v493, v538);
    memcpy(*((void **)v536 + 1), *((const void **)v493 + 1), v538);
    memcpy(*((void **)v536 + 2), *((const void **)v493 + 2), v538);
    memcpy(*((void **)v536 + 3), *((const void **)v493 + 3), v538);
    memcpy(*((void **)v536 + 6), *((const void **)v493 + 6), v538);
    *((void *)v536 + 9) = *((void *)v493 + 9);
  }
  int v539 = *(unsigned __int8 *)(v390 + 176);
  float v540 = 2.5;
  if (v539) {
    float v540 = 1.25;
  }
  float v592 = v540;
  v666 = (float *)(v537 + 520);
  v541 = (float *)(v537 + 560);
  int v617 = !v417;
  float v542 = 1.0;
  char v543 = 1;
  do
  {
    *((float *)&v562 + 1) = v691[15];
    *(float *)&v564 = v493[9];
    LODWORD(v562) = v619;
    lmsfilt_v5::runLmsFilter_v5(v689, __Ng, (DSPSplitComplex *)*((unsigned int *)v691 + 4), *((void *)v536 + 2), *((void *)v536 + 3), (uint64_t)v692[2], (float *)v692[3], (float *)v692[11], *((float **)v536 + 9), v562, v564, (unsigned __int8 *)v692[16], __Af, v692[20], *((unsigned char *)v692 + 168), v566, v568, v570, v572,
      v574);
    dft_v5::dftSynthesis(*((float **)v651 + 43), *((float **)v651 + 44), (uint64_t)v691);
    aec_v5::get_EchoEst_Err((DSPComplex *)v639[0], (float *)__lene[0], (float *)(*((void *)v651 + 43) + 4 * v618), (float *)(*((void *)v651 + 44) + 4 * v618), *((const float **)v651 + 19), (uint64_t)v691);
    if (*((unsigned char *)v692 + 168))
    {
      dft_v5::dftSynthesis(*((float **)v651 + 45), *((float **)v651 + 46), (uint64_t)v691);
      aec_v5::get_EchoEst_Err((DSPComplex *)v639[1], (float *)__lene[1], (float *)(*((void *)v651 + 45) + 4 * v618), (float *)(*((void *)v651 + 46) + 4 * v618), *((const float **)v651 + 19), (uint64_t)v691);
    }
    vDSP_Length v544 = *((int *)v691 + 4);
    int v545 = 1;
    vDSP_svesq((const float *)__lene[0], 1, v666, v544);
    vDSP_svesq((const float *)v639[0], 1, v541, v544);
    float v546 = *(float *)(v667 + 520);
    double v547 = v546 + 1.0e-20;
    float v548 = log10(v547 / (*(float *)(v667 + 36) + 1.0e-20)) * 10.0;
    *(float *)(v667 + 524) = v548;
    float v549 = log10(v547 / (*(float *)(v667 + 220) + 1.0e-20)) * 10.0;
    *(float *)(v667 + 528) = v549;
    *(_DWORD *)(v667 + 548) = 0;
    float v550 = 0.0;
    if (v548 < -1.0 && v549 < -1.0)
    {
      if (*(float *)(v611 + 248) >= 0.0
        || *(float *)(v667 + 536) >= 0.0
        || (float)(*v541 / v589) <= 0.0000001
        || *v541 >= (float)(*(float *)(v667 + 24) * 10.0))
      {
        int v545 = 1;
      }
      else
      {
        int v545 = 0;
        *(_DWORD *)(v667 + 548) = 1065353216;
        float v550 = 1.0;
      }
    }
    if (*((_DWORD *)v691 + 26) == 3
      && v548 < -0.25
      && v550 == 0.0
      && v549 < -0.25
      && *(float *)(v611 + 248) < 0.0
      && *(float *)(v667 + 536) < 0.0)
    {
      *(_DWORD *)(v667 + 548) = 1065353216;
    }
    else if (v550 != v542)
    {
      goto LABEL_556;
    }
    float v552 = (*(float *)(v667 + 560) + 1.0e-13) / (v546 + 1.0e-13);
    *(float *)(v667 + 604) = log10f(v552) * 10.0;
    *(_DWORD *)(v667 + 592) = 1;
    float __ne = v546;
    *(_OWORD *)__Db = *(_OWORD *)__lene;
    *(_OWORD *)v658 = *(_OWORD *)v639;
LABEL_556:
    if (v548 <= 4.0)
    {
      learnrate_v4::updateStatistics_echo(*((_DWORD *)v691 + 4), (const float *)__lene[0], (const float *)v639[0], (float *)v667);
      dft_v5::dftGenericAnalysis2ndHalf((const DSPComplex *)__lene[0], v613, v612, (uint64_t)v691, 1);
      dft_v5::dftGenericAnalysis2ndHalf_dsc((const void *)(*((void *)v651 + 43) + 4 * v618), (const void *)(*((void *)v651 + 44) + 4 * v618), v610, v609, (int *)v691);
      float v554 = fminf(fmaxf(v592 * *(float *)(v667 + 144), 0.5), 1.0);
      float v542 = 1.0;
      *(float *)(v667 + 140) = fminf(v592 * *(float *)(v667 + 140), 1.0);
      *(float *)(v667 + 144) = v554;
      learnrate_v4::getAdaptationRate4_v6(v667);
      learnrate_v5::adaptLmsFilter_v4((uint64_t)v613);
      uint64_t v493 = v650;
    }
    else
    {
      uint64_t v493 = v650;
      if (((v545 | v617) & 1) == 0)
      {
        size_t v553 = 4 * *((_DWORD *)v536 + 22);
        memcpy(*(void **)v536, *(const void **)v650, v553);
        memcpy(*((void **)v536 + 1), *((const void **)v650 + 1), v553);
        memcpy(*((void **)v536 + 2), *((const void **)v650 + 2), v553);
        memcpy(*((void **)v536 + 3), *((const void **)v650 + 3), v553);
        memcpy(*((void **)v536 + 6), *((const void **)v650 + 6), v553);
        *((void *)v536 + 9) = *((void *)v650 + 9);
      }
    }
    char v555 = (v539 != 0) & v543;
    char v543 = 0;
  }
  while ((v555 & 1) != 0);
  v411 = v692;
  uint64_t v390 = (uint64_t)v691;
  uint64_t v376 = v667;
  AudioBufferList v413 = v651;
  long long v500 = *(_OWORD *)__Db;
  long long v501 = *(_OWORD *)v658;
  float v415 = __ne;
LABEL_491:
  float v503 = *v606;
  float v504 = *v606 * 3.0;
  v505 = (float *)v500;
  if (v415 > v504) {
    v505 = (float *)*((void *)v413 + 19);
  }
  __D_8 = (float *)*((void *)&v500 + 1);
  *(_OWORD *)v659 = v501;
  if (*(int *)(v390 + 124) >= 1)
  {
    if (*(float *)(v376 + 40) <= v504
      || *(float *)(v376 + 604) <= -3.0
      || *(float *)(v376 + 16) <= -70.0
      || (float v506 = *(float *)(v376 + 24), v506 <= (float)(v503 * 8.0))
      || (float)(v257 / v589) <= 0.00000001
      || *(int *)(v376 + 624) < 2)
    {
      *(void *)(v376 + 616) = 0;
    }
    else
    {
      float v507 = *(float *)(v390 + 24);
      float v508 = v507 + *(float *)(v376 + 616);
      *(float *)(v376 + 616) = v508;
      if (v506 > (float)(v503 * 32.0)) {
        *(float *)(v376 + 620) = v507 + *(float *)(v376 + 620);
      }
      if (v508 > 100.0)
      {
        LODWORD(__C.realp) = 1056964608;
        if (*(float *)(v376 + 620) > 100.0) {
          LODWORD(__C.realp) = 1048576000;
        }
        v509 = (const float **)v650;
        vDSP_Length v510 = *((int *)v650 + 22);
        vDSP_vsmul(*(const float **)v650, 1, (const float *)&__C, *(float **)v650, 1, v510);
        vDSP_vsmul(v509[1], 1, (const float *)&__C, (float *)v509[1], 1, v510);
        vDSP_vsmul(v509[2], 1, (const float *)&__C, (float *)v509[2], 1, v510);
        vDSP_vsmul(v509[3], 1, (const float *)&__C, (float *)v509[3], 1, v510);
        vDSP_vsmul(v509[6], 1, (const float *)&__C, (float *)v509[6], 1, v510);
        *(void *)(v376 + 616) = 0;
        *(void *)&long long v501 = v659[0];
      }
    }
  }
  if (*(unsigned char *)(v390 + 177))
  {
    if (*(float *)(v376 + 548) == 1.0)
    {
      v511 = (DSPSplitComplex *)(v413 + 82);
      v512 = (DSPSplitComplex *)(v413 + 86);
      v513 = (float **)(v413 + 90);
      v514 = (DSPComplex *)*((void *)v651 + 47);
      v515 = (DSPComplex *)*((void *)v651 + 48);
      v516 = (float *)*((void *)v651 + 49);
      v517 = (float *)*((void *)v651 + 50);
      HIDWORD(v560) = *(_DWORD *)(v390 + 60);
      *(float *)&v564 = v650[9];
      LODWORD(v560) = v619;
      lmsfilt_v5::runLmsFilter_v5(v511, v512, (DSPSplitComplex *)*(unsigned int *)(v390 + 16), *((void *)a1[5] + 2), *((void *)a1[5] + 3), (uint64_t)v411[2], (float *)v411[3], (float *)v411[11], *((float **)a1[5] + 9), v560, v564, (unsigned __int8 *)v411[16], v513, v411[20], *((unsigned char *)v411 + 168), v566, v568, v570, v572,
        v574);
      dft_v5::dftSynthesis(*((float **)v651 + 43), *((float **)v651 + 44), v390);
      v518 = v514;
      AudioBufferList v413 = v651;
      v519 = v516;
      uint64_t v376 = v667;
      aec_v5::get_EchoEst_Err(v518, v519, (float *)(*((void *)v651 + 43) + 4 * v618), (float *)(*((void *)v651 + 44) + 4 * v618), *((const float **)v651 + 19), v390);
      *(void *)&long long v501 = v659[0];
      if (*((unsigned char *)v411 + 168))
      {
        dft_v5::dftSynthesis(*((float **)v651 + 45), *((float **)v651 + 46), v390);
        v520 = (float *)(*((void *)v651 + 45) + 4 * v618);
        v521 = (float *)(*((void *)v651 + 46) + 4 * v618);
        v522 = (const float *)*((void *)v651 + 19);
        v523 = v515;
        v524 = v517;
        goto LABEL_513;
      }
    }
    else
    {
      HIDWORD(v561) = *(_DWORD *)(v390 + 60);
      *(float *)&v564 = v650[9];
      LODWORD(v561) = v619;
      lmsfilt_v5::runLmsFilter_v5(v601, v599, (DSPSplitComplex *)*(unsigned int *)(v390 + 16), *((void *)v650 + 2), *((void *)v650 + 3), (uint64_t)v411[2], (float *)v411[3], (float *)v411[11], *((float **)v650 + 9), v561, v564, (unsigned __int8 *)v411[16], v598, v411[20], *((unsigned char *)v411 + 168), v566, v568, v570, v572,
        v574);
      dft_v5::dftSynthesis(*((float **)v413 + 4), *((float **)v413 + 5), v390);
      aec_v5::get_EchoEst_Err(v605, (float *)v608, (float *)(*((void *)v413 + 4) + 4 * v618), (float *)(*((void *)v413 + 5) + 4 * v618), *((const float **)v413 + 19), v390);
      *(void *)&long long v501 = v659[0];
      if (*((unsigned char *)v411 + 168))
      {
        dft_v5::dftSynthesis(*((float **)v413 + 6), *((float **)v413 + 7), v390);
        v520 = (float *)(*((void *)v413 + 6) + 4 * v618);
        v521 = (float *)(*((void *)v413 + 7) + 4 * v618);
        v522 = (const float *)*((void *)v413 + 19);
        v524 = v580;
        v523 = v581;
LABEL_513:
        aec_v5::get_EchoEst_Err(v523, v524, v520, v521, v522, v390);
        *(void *)&long long v501 = v659[0];
      }
    }
  }
  v525 = (const float *)v501;
  lmsfilt_v5::deemphasisFilterDuo((lmsfilt_v5 *)v593, (float *)v501, v603 + 4, v594, v505, v603 + 3, a8, v414);
  if (*((unsigned char *)v411 + 168))
  {
    lmsfilt_v5::deemphasisFilterDuo((lmsfilt_v5 *)v593, (float *)v659[1], v603 + 5, v578, __D_8, v603 + 7, v579, v526);
    vDSP_vsub((const float *)v659[1], 1, v525, 1, *((float **)v413 + 14), 1, v607);
  }
  *a4 = *(_DWORD *)(v376 + 148);
  *a5 = *(_DWORD *)(v376 + 376);
  *a9 = *(_DWORD *)(v376 + 604);
  *a12 = *(_DWORD *)(v376 + 140);
  unsigned int v528 = *(_DWORD *)(v390 + 48);
  if (v528 <= 1) {
    unsigned int v529 = 1;
  }
  else {
    unsigned int v529 = *(_DWORD *)(v390 + 48);
  }
  int v527 = *((_DWORD *)v411 + 18) + 1;
  signed int v530 = v527
       + v528
       + v528 * (((v527 & ~(v527 >> 31)) - (v527 + (v527 >> 31))) / v529 + (v527 >> 31));
  do
    v530 -= v528;
  while (v530 >= (int)v528);
  *((_DWORD *)v411 + 18) = v530;
  int v531 = *((_DWORD *)v411 + 20);
  int v532 = v531 + 1;
  unsigned int v533 = (((v531 + 1) & ~((v531 + 1) >> 31))
        - (v531
         + 1
         + ((v531 + 1) >> 31))
        + 2 * ((v531 + 1) >> 31)) & 0xFFFFFFFE;
  int v534 = v531 + v533;
  int v535 = v533 + v532;
  if (v535 >= 1) {
    int v535 = 1;
  }
  *((_DWORD *)v411 + 20) = v534 - ((v534 - v535 + 2) & 0xFFFFFFFE) + 1;
}

void CartesianPannerNN::panAtmos906Side(CartesianPannerNN *this, float a2, float a3, float a4, float a5, float *a6)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  __A[0] = a2;
  __A[1] = a3;
  __A[2] = a4;
  __A[3] = a5;
  v12[0] = 4;
  *(_OWORD *)&v12[1] = xmmword_1BB87A940;
  long long v13 = xmmword_1BB87A950;
  int v14 = -1082130432;
  vDSP_vsbm(__A, 1, (const float *)&v12[1], 1, (const float *)&v13, 1, __D, 1, 4uLL);
  vDSP_vsadd(__D, 1, (const float *)&v14, __D, 1, 4uLL);
  int v31 = 1074682858;
  v29[2] = xmmword_1BB89752C;
  v29[3] = unk_1BB89753C;
  v29[4] = xmmword_1BB89754C;
  long long __B = xmmword_1BB8974F8;
  v29[0] = xmmword_1BB89750C;
  v29[1] = unk_1BB89751C;
  vDSP_mmul((const float *)v29, 1, __D, 1, __C, 1, 5uLL, 1uLL, 4uLL);
  vDSP_vadd(__C, 1, (const float *)&__B, 1, __C, 1, 5uLL);
  for (uint64_t i = 0; i != 5; ++i)
    __C[i] = (float)(2.0 / (float)(expf(__C[i] * -2.0) + 1.0)) + -1.0;
  v26[0] = xmmword_1BB89755C;
  v26[1] = unk_1BB89756C;
  unint64_t v27 = 0xC1A9E704C1278D50;
  v24[10] = xmmword_1BB897624;
  v24[11] = unk_1BB897634;
  uint64_t v25 = 0x3F168251C0AB6EC1;
  v24[6] = xmmword_1BB8975E4;
  v24[7] = unk_1BB8975F4;
  v24[8] = xmmword_1BB897604;
  v24[9] = unk_1BB897614;
  v24[2] = xmmword_1BB8975A4;
  v24[3] = unk_1BB8975B4;
  v24[4] = xmmword_1BB8975C4;
  v24[5] = unk_1BB8975D4;
  v24[0] = xmmword_1BB897584;
  v24[1] = unk_1BB897594;
  vDSP_mmul((const float *)v24, 1, __C, 1, v23, 1, 0xAuLL, 1uLL, 5uLL);
  vDSP_vadd(v23, 1, (const float *)v26, 1, v23, 1, 0xAuLL);
  for (uint64_t j = 0; j != 10; ++j)
    v23[j] = (float)(2.0 / (float)(expf(v23[j] * -2.0) + 1.0)) + -1.0;
  v21[0] = xmmword_1BB89764C;
  v21[1] = unk_1BB89765C;
  v22[0] = xmmword_1BB89766C;
  *(_OWORD *)((char *)v22 + 12) = *(long long *)((char *)&xmmword_1BB89766C + 12);
  memcpy(__dst, &unk_1BB897688, sizeof(__dst));
  vDSP_mmul(__dst, 1, v23, 1, v19, 1, 0xFuLL, 1uLL, 0xAuLL);
  vDSP_vadd(v19, 1, (const float *)v21, 1, v19, 1, 0xFuLL);
  for (uint64_t k = 0; k != 15; ++k)
    v19[k] = (float)(2.0 / (float)(expf(v19[k] * -2.0) + 1.0)) + -1.0;
  v18[0] = xmmword_1BB8978E0;
  v18[1] = unk_1BB8978F0;
  memcpy(v17, &unk_1BB897900, sizeof(v17));
  vDSP_mmul(v17, 1, v19, 1, v16, 1, 8uLL, 1uLL, 0xFuLL);
  vDSP_vadd(v16, 1, (const float *)v18, 1, v16, 1, 8uLL);
  v10[0] = xmmword_1BB897B4C;
  v10[1] = unk_1BB897B5C;
  v11[0] = xmmword_1BB897B6C;
  v11[1] = unk_1BB897B7C;
  float v15 = 1.0;
  vDSP_vsadd(v16, 1, &v15, (float *)this, 1, 8uLL);
  vDSP_vdiv((const float *)v10, 1, (const float *)this, 1, (float *)this, 1, 8uLL);
  vDSP_vadd((const float *)this, 1, (const float *)v11, 1, (float *)this, 1, 8uLL);
}

void sub_1BB480F04(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void CartesianPannerNN::panAtmos704Side(CartesianPannerNN *this, float a2, float a3, float a4, float a5, float *a6)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  __A[0] = a2;
  __A[1] = a3;
  __A[2] = a4;
  __A[3] = a5;
  v14[0] = 4;
  *(_OWORD *)&v14[1] = xmmword_1BB87A940;
  long long v15 = xmmword_1BB87A950;
  int v16 = -1082130432;
  vDSP_vsbm(__A, 1, (const float *)&v14[1], 1, (const float *)&v15, 1, __D, 1, 4uLL);
  vDSP_vsadd(__D, 1, (const float *)&v16, __D, 1, 4uLL);
  int v34 = 1066657309;
  v32[2] = xmmword_1BB896FC4;
  v32[3] = unk_1BB896FD4;
  v32[4] = xmmword_1BB896FE4;
  long long __B = xmmword_1BB896F90;
  v32[0] = xmmword_1BB896FA4;
  v32[1] = unk_1BB896FB4;
  vDSP_mmul((const float *)v32, 1, __D, 1, __C, 1, 5uLL, 1uLL, 4uLL);
  vDSP_vadd(__C, 1, (const float *)&__B, 1, __C, 1, 5uLL);
  for (uint64_t i = 0; i != 5; ++i)
    __C[i] = (float)(2.0 / (float)(expf(__C[i] * -2.0) + 1.0)) + -1.0;
  v29[0] = xmmword_1BB896FF4;
  v29[1] = unk_1BB897004;
  uint64_t v30 = 0x42515653416462B7;
  v27[10] = xmmword_1BB8970BC;
  v27[11] = unk_1BB8970CC;
  uint64_t v28 = 0x3CD09C65C271BBCDLL;
  v27[6] = xmmword_1BB89707C;
  v27[7] = unk_1BB89708C;
  v27[8] = xmmword_1BB89709C;
  v27[9] = unk_1BB8970AC;
  v27[2] = xmmword_1BB89703C;
  v27[3] = unk_1BB89704C;
  v27[4] = xmmword_1BB89705C;
  v27[5] = unk_1BB89706C;
  v27[0] = xmmword_1BB89701C;
  v27[1] = unk_1BB89702C;
  vDSP_mmul((const float *)v27, 1, __C, 1, v26, 1, 0xAuLL, 1uLL, 5uLL);
  vDSP_vadd(v26, 1, (const float *)v29, 1, v26, 1, 0xAuLL);
  for (uint64_t j = 0; j != 10; ++j)
    v26[j] = (float)(2.0 / (float)(expf(v26[j] * -2.0) + 1.0)) + -1.0;
  v24[0] = xmmword_1BB8970E4;
  v24[1] = unk_1BB8970F4;
  v25[0] = xmmword_1BB897104;
  *(_OWORD *)((char *)v25 + 12) = *(long long *)((char *)&xmmword_1BB897104 + 12);
  memcpy(__dst, &unk_1BB897120, sizeof(__dst));
  vDSP_mmul(__dst, 1, v26, 1, v22, 1, 0xFuLL, 1uLL, 0xAuLL);
  vDSP_vadd(v22, 1, (const float *)v24, 1, v22, 1, 0xFuLL);
  for (uint64_t k = 0; k != 15; ++k)
    v22[k] = (float)(2.0 / (float)(expf(v22[k] * -2.0) + 1.0)) + -1.0;
  long long v20 = xmmword_1BB897378;
  unint64_t v21 = 0xC09B02F3C1175C7DLL;
  memcpy(v19, &unk_1BB897390, sizeof(v19));
  vDSP_mmul(v19, 1, v22, 1, v18, 1, 6uLL, 1uLL, 0xFuLL);
  vDSP_vadd(v18, 1, (const float *)&v20, 1, v18, 1, 6uLL);
  long long v10 = xmmword_1BB897B1C;
  uint64_t v11 = 0x4001C5824001C582;
  long long v12 = xmmword_1BB897B34;
  uint64_t v13 = 0x381098ED381098EDLL;
  float v17 = 1.0;
  vDSP_vsadd(v18, 1, &v17, (float *)this, 1, 6uLL);
  vDSP_vdiv((const float *)&v10, 1, (const float *)this, 1, (float *)this, 1, 6uLL);
  vDSP_vadd((const float *)this, 1, (const float *)&v12, 1, (float *)this, 1, 6uLL);
}

void sub_1BB481394(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void CartesianPannerNN::panAtmos702Side(CartesianPannerNN *this, float a2, float a3, float a4, float a5, float *a6)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  __A[0] = a2;
  __A[1] = a3;
  __A[2] = a4;
  __A[3] = a5;
  v14[0] = 4;
  *(_OWORD *)&v14[1] = xmmword_1BB87A940;
  long long v15 = xmmword_1BB87A950;
  int v16 = -1082130432;
  vDSP_vsbm(__A, 1, (const float *)&v14[1], 1, (const float *)&v15, 1, __D, 1, 4uLL);
  vDSP_vsadd(__D, 1, (const float *)&v16, __D, 1, 4uLL);
  int v34 = 1067328649;
  v32[2] = xmmword_1BB896A9C;
  v32[3] = unk_1BB896AAC;
  v32[4] = xmmword_1BB896ABC;
  long long __B = xmmword_1BB896A68;
  v32[0] = xmmword_1BB896A7C;
  v32[1] = unk_1BB896A8C;
  vDSP_mmul((const float *)v32, 1, __D, 1, __C, 1, 5uLL, 1uLL, 4uLL);
  vDSP_vadd(__C, 1, (const float *)&__B, 1, __C, 1, 5uLL);
  for (uint64_t i = 0; i != 5; ++i)
    __C[i] = (float)(2.0 / (float)(expf(__C[i] * -2.0) + 1.0)) + -1.0;
  v29[0] = xmmword_1BB896ACC;
  v29[1] = unk_1BB896ADC;
  uint64_t v30 = 0x3E703B823F0C02E2;
  v27[10] = xmmword_1BB896B94;
  v27[11] = unk_1BB896BA4;
  unint64_t v28 = 0xBFF32CA5BFB925EELL;
  v27[6] = xmmword_1BB896B54;
  v27[7] = unk_1BB896B64;
  v27[8] = xmmword_1BB896B74;
  v27[9] = unk_1BB896B84;
  v27[2] = xmmword_1BB896B14;
  v27[3] = unk_1BB896B24;
  v27[4] = xmmword_1BB896B34;
  v27[5] = unk_1BB896B44;
  v27[0] = xmmword_1BB896AF4;
  v27[1] = unk_1BB896B04;
  vDSP_mmul((const float *)v27, 1, __C, 1, v26, 1, 0xAuLL, 1uLL, 5uLL);
  vDSP_vadd(v26, 1, (const float *)v29, 1, v26, 1, 0xAuLL);
  for (uint64_t j = 0; j != 10; ++j)
    v26[j] = (float)(2.0 / (float)(expf(v26[j] * -2.0) + 1.0)) + -1.0;
  v24[0] = xmmword_1BB896BBC;
  v24[1] = unk_1BB896BCC;
  v25[0] = xmmword_1BB896BDC;
  *(_OWORD *)((char *)v25 + 12) = *(long long *)((char *)&xmmword_1BB896BDC + 12);
  memcpy(__dst, &unk_1BB896BF8, sizeof(__dst));
  vDSP_mmul(__dst, 1, v26, 1, v22, 1, 0xFuLL, 1uLL, 0xAuLL);
  vDSP_vadd(v22, 1, (const float *)v24, 1, v22, 1, 0xFuLL);
  for (uint64_t k = 0; k != 15; ++k)
    v22[k] = (float)(2.0 / (float)(expf(v22[k] * -2.0) + 1.0)) + -1.0;
  int v21 = 1043507737;
  long long v20 = xmmword_1BB896E50;
  memcpy(v19, &unk_1BB896E64, sizeof(v19));
  vDSP_mmul(v19, 1, v22, 1, v18, 1, 5uLL, 1uLL, 0xFuLL);
  vDSP_vadd(v18, 1, (const float *)&v20, 1, v18, 1, 5uLL);
  int v11 = 1074619650;
  long long v10 = xmmword_1BB897AF4;
  int v13 = 940611821;
  long long v12 = xmmword_1BB897B08;
  float v17 = 1.0;
  vDSP_vsadd(v18, 1, &v17, (float *)this, 1, 5uLL);
  vDSP_vdiv((const float *)&v10, 1, (const float *)this, 1, (float *)this, 1, 5uLL);
  vDSP_vadd((const float *)this, 1, (const float *)&v12, 1, (float *)this, 1, 5uLL);
}

void sub_1BB481830(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void CartesianPannerNN::panAtmos700Side(CartesianPannerNN *this, float a2, float a3, float a4, float a5, float *a6)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  __A[0] = a2;
  __A[1] = a3;
  __A[2] = a4;
  __A[3] = a5;
  v13[0] = 4;
  *(_OWORD *)&v13[1] = xmmword_1BB87A940;
  long long v14 = xmmword_1BB87A950;
  int v15 = -1082130432;
  vDSP_vsbm(__A, 1, (const float *)&v13[1], 1, (const float *)&v14, 1, __D, 1, 4uLL);
  vDSP_vsadd(__D, 1, (const float *)&v15, __D, 1, 4uLL);
  int v32 = -1086603607;
  v30[2] = xmmword_1BB8965C4;
  v30[3] = unk_1BB8965D4;
  v30[4] = xmmword_1BB8965E4;
  long long __B = xmmword_1BB896590;
  v30[0] = xmmword_1BB8965A4;
  v30[1] = unk_1BB8965B4;
  vDSP_mmul((const float *)v30, 1, __D, 1, __C, 1, 5uLL, 1uLL, 4uLL);
  vDSP_vadd(__C, 1, (const float *)&__B, 1, __C, 1, 5uLL);
  for (uint64_t i = 0; i != 5; ++i)
    __C[i] = (float)(2.0 / (float)(expf(__C[i] * -2.0) + 1.0)) + -1.0;
  v27[0] = xmmword_1BB8965F4;
  v27[1] = unk_1BB896604;
  uint64_t v28 = 0x40102D0E404A0A52;
  v25[10] = xmmword_1BB8966BC;
  v25[11] = unk_1BB8966CC;
  uint64_t v26 = 0x40B9ADD63F32ECD0;
  v25[6] = xmmword_1BB89667C;
  v25[7] = unk_1BB89668C;
  v25[8] = xmmword_1BB89669C;
  v25[9] = unk_1BB8966AC;
  _OWORD v25[2] = xmmword_1BB89663C;
  v25[3] = unk_1BB89664C;
  v25[4] = xmmword_1BB89665C;
  v25[5] = unk_1BB89666C;
  v25[0] = xmmword_1BB89661C;
  v25[1] = unk_1BB89662C;
  vDSP_mmul((const float *)v25, 1, __C, 1, v24, 1, 0xAuLL, 1uLL, 5uLL);
  vDSP_vadd(v24, 1, (const float *)v27, 1, v24, 1, 0xAuLL);
  for (uint64_t j = 0; j != 10; ++j)
    v24[j] = (float)(2.0 / (float)(expf(v24[j] * -2.0) + 1.0)) + -1.0;
  v22[0] = xmmword_1BB8966E4;
  v22[1] = unk_1BB8966F4;
  v23[0] = xmmword_1BB896704;
  *(_OWORD *)((char *)v23 + 12) = *(long long *)((char *)&xmmword_1BB896704 + 12);
  memcpy(__dst, &unk_1BB896720, sizeof(__dst));
  vDSP_mmul(__dst, 1, v24, 1, v20, 1, 0xFuLL, 1uLL, 0xAuLL);
  vDSP_vadd(v20, 1, (const float *)v22, 1, v20, 1, 0xFuLL);
  for (uint64_t k = 0; k != 15; ++k)
    v20[k] = (float)(2.0 / (float)(expf(v20[k] * -2.0) + 1.0)) + -1.0;
  v18[12] = xmmword_1BB896A38;
  v18[13] = unk_1BB896A48;
  v18[14] = xmmword_1BB896A58;
  long long v19 = xmmword_1BB87C110;
  v18[8] = xmmword_1BB8969F8;
  v18[9] = unk_1BB896A08;
  v18[10] = xmmword_1BB896A18;
  v18[11] = unk_1BB896A28;
  v18[4] = xmmword_1BB8969B8;
  float v18[5] = unk_1BB8969C8;
  float v18[6] = xmmword_1BB8969D8;
  v18[7] = unk_1BB8969E8;
  v18[0] = xmmword_1BB896978;
  v18[1] = unk_1BB896988;
  _OWORD v18[2] = xmmword_1BB896998;
  void v18[3] = unk_1BB8969A8;
  vDSP_mmul((const float *)v18, 1, v20, 1, v17, 1, 4uLL, 1uLL, 0xFuLL);
  vDSP_vadd(v17, 1, (const float *)&v19, 1, v17, 1, 4uLL);
  *(_OWORD *)&v10[1] = xmmword_1BB87A960;
  long long v11 = xmmword_1BB87A970;
  int v12 = 940611821;
  float v16 = 1.0;
  vDSP_vsadd(v17, 1, &v16, (float *)this, 1, 4uLL);
  vDSP_vdiv((const float *)&v10[2], 1, (const float *)this, 1, (float *)this, 1, 4uLL);
  vDSP_vadd((const float *)this, 1, (const float *)&v11 + 1, 1, (float *)this, 1, 4uLL);
}

void sub_1BB481CD4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void CartesianPannerNN::panAtmos504Side(CartesianPannerNN *this, float a2, float a3, float a4, float a5, float *a6)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  __A[0] = a2;
  __A[1] = a3;
  __A[2] = a4;
  __A[3] = a5;
  v14[0] = 4;
  *(_OWORD *)&v14[1] = xmmword_1BB87A940;
  long long v15 = xmmword_1BB87A950;
  int v16 = -1082130432;
  vDSP_vsbm(__A, 1, (const float *)&v14[1], 1, (const float *)&v15, 1, __D, 1, 4uLL);
  vDSP_vsadd(__D, 1, (const float *)&v16, __D, 1, 4uLL);
  int v34 = 1069091767;
  v32[2] = xmmword_1BB89609C;
  v32[3] = unk_1BB8960AC;
  v32[4] = xmmword_1BB8960BC;
  long long __B = xmmword_1BB896068;
  v32[0] = xmmword_1BB89607C;
  v32[1] = unk_1BB89608C;
  vDSP_mmul((const float *)v32, 1, __D, 1, __C, 1, 5uLL, 1uLL, 4uLL);
  vDSP_vadd(__C, 1, (const float *)&__B, 1, __C, 1, 5uLL);
  for (uint64_t i = 0; i != 5; ++i)
    __C[i] = (float)(2.0 / (float)(expf(__C[i] * -2.0) + 1.0)) + -1.0;
  v29[0] = xmmword_1BB8960CC;
  v29[1] = unk_1BB8960DC;
  unint64_t v30 = 0xC185B40541A38275;
  v27[10] = xmmword_1BB896194;
  v27[11] = unk_1BB8961A4;
  uint64_t v28 = 0x42018241C11ACAACLL;
  v27[6] = xmmword_1BB896154;
  v27[7] = unk_1BB896164;
  v27[8] = xmmword_1BB896174;
  v27[9] = unk_1BB896184;
  _OWORD v27[2] = xmmword_1BB896114;
  v27[3] = unk_1BB896124;
  v27[4] = xmmword_1BB896134;
  v27[5] = unk_1BB896144;
  v27[0] = xmmword_1BB8960F4;
  v27[1] = unk_1BB896104;
  vDSP_mmul((const float *)v27, 1, __C, 1, v26, 1, 0xAuLL, 1uLL, 5uLL);
  vDSP_vadd(v26, 1, (const float *)v29, 1, v26, 1, 0xAuLL);
  for (uint64_t j = 0; j != 10; ++j)
    v26[j] = (float)(2.0 / (float)(expf(v26[j] * -2.0) + 1.0)) + -1.0;
  v24[0] = xmmword_1BB8961BC;
  v24[1] = unk_1BB8961CC;
  v25[0] = xmmword_1BB8961DC;
  *(_OWORD *)((char *)v25 + 12) = *(long long *)((char *)&xmmword_1BB8961DC + 12);
  memcpy(__dst, &unk_1BB8961F8, sizeof(__dst));
  vDSP_mmul(__dst, 1, v26, 1, v22, 1, 0xFuLL, 1uLL, 0xAuLL);
  vDSP_vadd(v22, 1, (const float *)v24, 1, v22, 1, 0xFuLL);
  for (uint64_t k = 0; k != 15; ++k)
    v22[k] = (float)(2.0 / (float)(expf(v22[k] * -2.0) + 1.0)) + -1.0;
  int v21 = -1059880803;
  long long v20 = xmmword_1BB896450;
  memcpy(v19, &unk_1BB896464, sizeof(v19));
  vDSP_mmul(v19, 1, v22, 1, v18, 1, 5uLL, 1uLL, 0xFuLL);
  vDSP_vadd(v18, 1, (const float *)&v20, 1, v18, 1, 5uLL);
  int v11 = 1075454526;
  long long v10 = xmmword_1BB897AE0;
  int v13 = 940611821;
  long long v12 = xmmword_1BB897B08;
  float v17 = 1.0;
  vDSP_vsadd(v18, 1, &v17, (float *)this, 1, 5uLL);
  vDSP_vdiv((const float *)&v10, 1, (const float *)this, 1, (float *)this, 1, 5uLL);
  vDSP_vadd((const float *)this, 1, (const float *)&v12, 1, (float *)this, 1, 5uLL);
}

void sub_1BB482170(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void CartesianPannerNN::panAtmos502Side(CartesianPannerNN *this, float a2, float a3, float a4, float a5, float *a6)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  __A[0] = a2;
  __A[1] = a3;
  __A[2] = a4;
  __A[3] = a5;
  v13[0] = 4;
  *(_OWORD *)&v13[1] = xmmword_1BB87A940;
  long long v14 = xmmword_1BB87A950;
  int v15 = -1082130432;
  vDSP_vsbm(__A, 1, (const float *)&v13[1], 1, (const float *)&v14, 1, __D, 1, 4uLL);
  vDSP_vsadd(__D, 1, (const float *)&v15, __D, 1, 4uLL);
  int v32 = 1059530213;
  v30[2] = xmmword_1BB895BC4;
  v30[3] = unk_1BB895BD4;
  v30[4] = xmmword_1BB895BE4;
  long long __B = xmmword_1BB895B90;
  v30[0] = xmmword_1BB895BA4;
  v30[1] = unk_1BB895BB4;
  vDSP_mmul((const float *)v30, 1, __D, 1, __C, 1, 5uLL, 1uLL, 4uLL);
  vDSP_vadd(__C, 1, (const float *)&__B, 1, __C, 1, 5uLL);
  for (uint64_t i = 0; i != 5; ++i)
    __C[i] = (float)(2.0 / (float)(expf(__C[i] * -2.0) + 1.0)) + -1.0;
  v27[0] = xmmword_1BB895BF4;
  v27[1] = unk_1BB895C04;
  uint64_t v28 = 0x405C1284408482D4;
  v25[10] = xmmword_1BB895CBC;
  v25[11] = unk_1BB895CCC;
  unint64_t v26 = 0xBEBA8390BF73FF9BLL;
  v25[6] = xmmword_1BB895C7C;
  v25[7] = unk_1BB895C8C;
  v25[8] = xmmword_1BB895C9C;
  v25[9] = unk_1BB895CAC;
  _OWORD v25[2] = xmmword_1BB895C3C;
  v25[3] = unk_1BB895C4C;
  v25[4] = xmmword_1BB895C5C;
  v25[5] = unk_1BB895C6C;
  v25[0] = xmmword_1BB895C1C;
  v25[1] = unk_1BB895C2C;
  vDSP_mmul((const float *)v25, 1, __C, 1, v24, 1, 0xAuLL, 1uLL, 5uLL);
  vDSP_vadd(v24, 1, (const float *)v27, 1, v24, 1, 0xAuLL);
  for (uint64_t j = 0; j != 10; ++j)
    v24[j] = (float)(2.0 / (float)(expf(v24[j] * -2.0) + 1.0)) + -1.0;
  v22[0] = xmmword_1BB895CE4;
  v22[1] = unk_1BB895CF4;
  v23[0] = xmmword_1BB895D04;
  *(_OWORD *)((char *)v23 + 12) = *(long long *)((char *)&xmmword_1BB895D04 + 12);
  memcpy(__dst, &unk_1BB895D20, sizeof(__dst));
  vDSP_mmul(__dst, 1, v24, 1, v20, 1, 0xFuLL, 1uLL, 0xAuLL);
  vDSP_vadd(v20, 1, (const float *)v22, 1, v20, 1, 0xFuLL);
  for (uint64_t k = 0; k != 15; ++k)
    v20[k] = (float)(2.0 / (float)(expf(v20[k] * -2.0) + 1.0)) + -1.0;
  v18[12] = xmmword_1BB896038;
  v18[13] = unk_1BB896048;
  v18[14] = xmmword_1BB896058;
  long long v19 = xmmword_1BB87C100;
  v18[8] = xmmword_1BB895FF8;
  v18[9] = unk_1BB896008;
  v18[10] = xmmword_1BB896018;
  v18[11] = unk_1BB896028;
  v18[4] = xmmword_1BB895FB8;
  float v18[5] = unk_1BB895FC8;
  float v18[6] = xmmword_1BB895FD8;
  v18[7] = unk_1BB895FE8;
  v18[0] = xmmword_1BB895F78;
  v18[1] = unk_1BB895F88;
  _OWORD v18[2] = xmmword_1BB895F98;
  void v18[3] = unk_1BB895FA8;
  vDSP_mmul((const float *)v18, 1, v20, 1, v17, 1, 4uLL, 1uLL, 0xFuLL);
  vDSP_vadd(v17, 1, (const float *)&v19, 1, v17, 1, 4uLL);
  *(_OWORD *)&v10[1] = xmmword_1BB87A980;
  long long v11 = xmmword_1BB87A990;
  int v12 = 940611821;
  float v16 = 1.0;
  vDSP_vsadd(v17, 1, &v16, (float *)this, 1, 4uLL);
  vDSP_vdiv((const float *)&v10[2], 1, (const float *)this, 1, (float *)this, 1, 4uLL);
  vDSP_vadd((const float *)this, 1, (const float *)&v11 + 1, 1, (float *)this, 1, 4uLL);
}

void sub_1BB482614(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void CartesianPannerNN::panAtmos500Side(CartesianPannerNN *this, float a2, float a3, float a4, float a5, float *a6)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  __A[0] = a2;
  __A[1] = a3;
  __A[2] = a4;
  __A[3] = a5;
  v13[0] = 4;
  *(_OWORD *)&v13[1] = xmmword_1BB87A940;
  long long v14 = xmmword_1BB87A950;
  int v15 = -1082130432;
  vDSP_vsbm(__A, 1, (const float *)&v13[1], 1, (const float *)&v14, 1, __D, 1, 4uLL);
  vDSP_vsadd(__D, 1, (const float *)&v15, __D, 1, 4uLL);
  int v34 = 1049795033;
  v32[2] = xmmword_1BB89571C;
  v32[3] = unk_1BB89572C;
  v32[4] = xmmword_1BB89573C;
  long long __B = xmmword_1BB8956E8;
  v32[0] = xmmword_1BB8956FC;
  v32[1] = unk_1BB89570C;
  vDSP_mmul((const float *)v32, 1, __D, 1, __C, 1, 5uLL, 1uLL, 4uLL);
  vDSP_vadd(__C, 1, (const float *)&__B, 1, __C, 1, 5uLL);
  for (uint64_t i = 0; i != 5; ++i)
    __C[i] = (float)(2.0 / (float)(expf(__C[i] * -2.0) + 1.0)) + -1.0;
  v29[0] = xmmword_1BB89574C;
  v29[1] = unk_1BB89575C;
  unint64_t v30 = 0xC05DFE33BFBCF4C7;
  v27[10] = xmmword_1BB895814;
  v27[11] = unk_1BB895824;
  uint64_t v28 = 0x4144C2F8C02AF1FELL;
  v27[6] = xmmword_1BB8957D4;
  v27[7] = unk_1BB8957E4;
  v27[8] = xmmword_1BB8957F4;
  v27[9] = unk_1BB895804;
  _OWORD v27[2] = xmmword_1BB895794;
  v27[3] = unk_1BB8957A4;
  v27[4] = xmmword_1BB8957B4;
  v27[5] = unk_1BB8957C4;
  v27[0] = xmmword_1BB895774;
  v27[1] = unk_1BB895784;
  vDSP_mmul((const float *)v27, 1, __C, 1, v26, 1, 0xAuLL, 1uLL, 5uLL);
  vDSP_vadd(v26, 1, (const float *)v29, 1, v26, 1, 0xAuLL);
  for (uint64_t j = 0; j != 10; ++j)
    v26[j] = (float)(2.0 / (float)(expf(v26[j] * -2.0) + 1.0)) + -1.0;
  v24[0] = xmmword_1BB89583C;
  v24[1] = unk_1BB89584C;
  v25[0] = xmmword_1BB89585C;
  *(_OWORD *)((char *)v25 + 12) = *(long long *)((char *)&xmmword_1BB89585C + 12);
  memcpy(__dst, &unk_1BB895878, sizeof(__dst));
  vDSP_mmul(__dst, 1, v26, 1, v22, 1, 0xFuLL, 1uLL, 0xAuLL);
  vDSP_vadd(v22, 1, (const float *)v24, 1, v22, 1, 0xFuLL);
  for (uint64_t k = 0; k != 15; ++k)
    v22[k] = (float)(2.0 / (float)(expf(v22[k] * -2.0) + 1.0)) + -1.0;
  v18[7] = unk_1BB895B4C;
  v18[8] = xmmword_1BB895B5C;
  v18[9] = unk_1BB895B6C;
  v18[10] = xmmword_1BB895B7C;
  void v18[3] = unk_1BB895B0C;
  v18[4] = xmmword_1BB895B1C;
  float v18[5] = unk_1BB895B2C;
  float v18[6] = xmmword_1BB895B3C;
  v18[0] = xmmword_1BB895ADC;
  v18[1] = unk_1BB895AEC;
  int v21 = -1061062149;
  uint64_t v20 = 0x420055813FD26D48;
  _OWORD v18[2] = xmmword_1BB895AFC;
  int v19 = 1053414079;
  vDSP_mmul((const float *)v18, 1, v22, 1, v17, 1, 3uLL, 1uLL, 0xFuLL);
  vDSP_vadd(v17, 1, (const float *)&v20, 1, v17, 1, 3uLL);
  *(_OWORD *)&v10[1] = xmmword_1BB87A9A0;
  int32x2_t v11 = vdup_n_s32(0x381098EDu);
  int v12 = 940611821;
  float v16 = 1.0;
  vDSP_vsadd(v17, 1, &v16, (float *)this, 1, 3uLL);
  vDSP_vdiv((const float *)&v10[2], 1, (const float *)this, 1, (float *)this, 1, 3uLL);
  vDSP_vadd((const float *)this, 1, (const float *)&v11, 1, (float *)this, 1, 3uLL);
}

void sub_1BB482AC4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void CDSPSplitComplex::resize(CDSPSplitComplex *this, uint64_t a2)
{
  unint64_t v2 = 2 * a2;
  if (v2)
  {
    std::valarray<float>::resize((uint64_t)this + 16, v2, 0.0);
    uint64_t v4 = *((void *)this + 2);
    uint64_t v5 = v4 + 4 * ((*((void *)this + 3) - v4) >> 3);
    *(void *)this = v4;
    *((void *)this + 1) = v5;
  }
}

void FreqDomainConvolver::Reset(FreqDomainConvolver *this)
{
  unint64_t v2 = (void *)*((void *)this + 17);
  uint64_t v3 = *((void *)this + 18) - (void)v2;
  if (v3 >= 1) {
    bzero(v2, 4 * (((unint64_t)v3 >> 2) - ((unint64_t)v3 > 3)) + 4);
  }
  uint64_t v4 = (void *)*((void *)this + 14);
  uint64_t v5 = *((void *)this + 15) - (void)v4;
  if (v5 >= 1) {
    bzero(v4, 4 * (((unint64_t)v5 >> 2) - ((unint64_t)v5 > 3)) + 4);
  }
  int v6 = (void *)*((void *)this + 8);
  uint64_t v7 = *((void *)this + 9) - (void)v6;
  if (v7 >= 1)
  {
    bzero(v6, 4 * (((unint64_t)v7 >> 2) - ((unint64_t)v7 > 3)) + 4);
  }
}

void CDSPSplitComplex::~CDSPSplitComplex(CDSPSplitComplex *this)
{
  uint64_t v3 = (void *)((char *)this + 16);
  unint64_t v2 = (unsigned char *)*((void *)this + 2);
  if (v2)
  {
    uint64_t v4 = (unsigned char *)v3[1];
    if (v4 != v2) {
      *((void *)this + 3) = &v4[(v2 - v4 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v2);
    *uint64_t v3 = 0;
    v3[1] = 0;
  }
}

void FreqDomainConvolver::FreqDomainConvolver(FreqDomainConvolver *this, unsigned int a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  *((_OWORD *)this + 1) = 0u;
  uint64_t v3 = (FreqDomainConvolver *)((char *)this + 16);
  *((_OWORD *)this + 3) = 0u;
  uint64_t v4 = (FreqDomainConvolver *)((char *)this + 48);
  *((_OWORD *)this + 5) = 0u;
  uint64_t v5 = (FreqDomainConvolver *)((char *)this + 80);
  *((_OWORD *)this + 7) = 0u;
  int v6 = (char *)this + 112;
  uint64_t v7 = (char *)this + 136;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *((_DWORD *)this + 40) = a2;
  uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v8.i16[0] = vaddlv_u8(v8);
  BOOL v9 = v8.i32[0] > 1u;
  if (v8.i32[0] >= 2u)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v17, v9);
      *(_DWORD *)std::string __p = 136315906;
      *(void *)&__p[4] = "FreqDomainConvolver.cpp";
      *(_WORD *)&__p[12] = 1024;
      *(_DWORD *)&__p[14] = 30;
      __int16 v19 = 2080;
      uint64_t v20 = v17;
      __int16 v21 = 2080;
      float v22 = "Block size must be power of 2";
      _os_log_impl(&dword_1BB0CE000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", __p, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "Block size must be power of 2", v9);
  }
  unsigned int v10 = MultiRadixRealFFT::Initialize(this, 2 * a2);
  if (v10)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v17, v10);
      *(_DWORD *)std::string __p = 136315906;
      *(void *)&__p[4] = "FreqDomainConvolver.cpp";
      *(_WORD *)&__p[12] = 1024;
      *(_DWORD *)&__p[14] = 31;
      __int16 v19 = 2080;
      uint64_t v20 = v17;
      __int16 v21 = 2080;
      float v22 = "FFT initialization failed";
      _os_log_impl(&dword_1BB0CE000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", __p, 0x26u);
    }
    float v16 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v16, "FFT initialization failed", v10);
  }
  CDSPSplitComplex::resize(v4, *((unsigned int *)this + 40));
  CDSPSplitComplex::resize(v5, *((unsigned int *)this + 40));
  CDSPSplitComplex::resize(v3, *((unsigned int *)this + 40));
  std::vector<float>::resize((uint64_t)v7, (2 * *((_DWORD *)this + 40)));
  std::vector<float>::resize((uint64_t)v6, *((unsigned int *)this + 40));
  unint64_t v11 = *((unsigned int *)this + 40);
  v17[0] = 0.0;
  std::vector<float>::vector(__p, v11, v17);
  int v12 = *(const DSPComplex **)__p;
  if (*(void *)&__p[8] == *(void *)__p) {
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  }
  **(_DWORD **)std::string __p = 1065353216;
  vDSP_ctoz(v12, 2, (const DSPSplitComplex *)v3, 1, (unint64_t)*((unsigned int *)this + 40) >> 1);
  if (*(void *)this) {
    float v13 = (float)**(unsigned int **)this;
  }
  else {
    float v13 = 0.0;
  }
  v17[0] = 1.0 / v13;
  vDSP_vsmul(*((const float **)this + 2), 1, v17, *((float **)this + 2), 1, *((unsigned int *)this + 40));
  vDSP_vsmul(*((const float **)this + 3), 1, v17, *((float **)this + 3), 1, *((unsigned int *)this + 40));
  MultiRadixRealFFT::RealInPlaceTransform(this, (DSPSplitComplex *)v3, 1, v14);
  FreqDomainConvolver::Reset(this);
  if (*(void *)__p)
  {
    *(void *)&__p[8] = *(void *)__p;
    operator delete(*(void **)__p);
  }
}

void sub_1BB482FC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  __int16 v19 = *v17;
  if (*v17)
  {
    v12[18] = v19;
    operator delete(v19);
  }
  uint64_t v20 = *v16;
  if (*v16)
  {
    v12[15] = v20;
    operator delete(v20);
  }
  CDSPSplitComplex::~CDSPSplitComplex(v15);
  CDSPSplitComplex::~CDSPSplitComplex(v14);
  CDSPSplitComplex::~CDSPSplitComplex(v13);
  __int16 v21 = (std::__shared_weak_count *)v12[1];
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  _Unwind_Resume(a1);
}

void FreqDomainConvolver::Initialize(DSPSplitComplex *this, DSPComplex *__C, unint64_t a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  realp = this[2].realp;
  uint64_t v7 = (char *)this[2].imagp - (char *)realp;
  if (v7 >= 1) {
    bzero(realp, 4 * (((unint64_t)v7 >> 2) - ((unint64_t)v7 > 3)) + 4);
  }
  if (a3)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v15, a3 & 1);
      float __B = 4.8153e-34;
      float v17 = "FreqDomainConvolver.cpp";
      __int16 v18 = 1024;
      int v19 = 57;
      __int16 v20 = 2080;
      __int16 v21 = v15;
      __int16 v22 = 2080;
      uint64_t v23 = "Filter length must be even";
      _os_log_impl(&dword_1BB0CE000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", (uint8_t *)&__B, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "Filter length must be even", a3 & 1);
  }
  unint64_t realp_low = LODWORD(this[10].realp);
  BOOL v9 = realp_low < a3;
  if (realp_low < a3)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v15, v9);
      float __B = 4.8153e-34;
      float v17 = "FreqDomainConvolver.cpp";
      __int16 v18 = 1024;
      int v19 = 58;
      __int16 v20 = 2080;
      __int16 v21 = v15;
      __int16 v22 = 2080;
      uint64_t v23 = "Filter length must be less than or equal to block size";
      _os_log_impl(&dword_1BB0CE000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", (uint8_t *)&__B, 0x26u);
    }
    float v14 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v14, "Filter length must be less than or equal to block size", v9);
  }
  vDSP_ctoz(__C, 2, this + 1, 1, a3 >> 1);
  if (this->realp) {
    float v10 = (float)*(unsigned int *)this->realp;
  }
  else {
    float v10 = 0.0;
  }
  float __B = 1.0 / v10;
  vDSP_vsmul(this[1].realp, 1, &__B, this[1].realp, 1, LODWORD(this[10].realp));
  vDSP_vsmul(this[1].imagp, 1, &__B, this[1].imagp, 1, LODWORD(this[10].realp));
  MultiRadixRealFFT::RealInPlaceTransform((MultiRadixRealFFT *)this, this + 1, 1, v11);
  FreqDomainConvolver::Reset((FreqDomainConvolver *)this);
}

void sub_1BB483330(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void FreqDomainConvolver::Process(DSPSplitComplex *this, const float *__src, float *a3, unint64_t a4, void **a5, DSPSplitComplex *a6)
{
  if (LODWORD(this[10].realp) >= a4)
  {
    imagp = this[8].imagp;
    realp = this[9].realp;
    uint64_t v14 = a4;
    unint64_t v15 = realp - imagp;
    float v16 = &imagp[a4];
    if (v15 > a4 && realp != v16)
    {
      memmove(imagp, v16, (char *)realp - (char *)v16);
      imagp = this[8].imagp;
      unint64_t v15 = this[9].realp - imagp;
    }
    if (v15 <= v15 - v14
      || (memcpy(&imagp[v15 - v14], __src, 4 * v14),
          __int16 v18 = (const DSPComplex *)this[8].imagp,
          (const DSPComplex *)this[9].realp == v18))
    {
      std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
    }
    vDSP_ctoz(v18, 2, this + 3, 1, LODWORD(this[10].realp));
    MultiRadixRealFFT::RealInPlaceTransform((MultiRadixRealFFT *)this, this + 3, 1, v19);
    if (a5)
    {
      memcpy(*a5, this[3].realp, 4 * LODWORD(this[10].realp));
      memcpy(a5[1], this[3].imagp, 4 * LODWORD(this[10].realp));
    }
    vDSP_zvmul(this + 3, 1, this + 1, 1, this + 5, 1, LODWORD(this[10].realp), 1);
    *this[5].realp = *this[3].realp * *this[1].realp;
    float v20 = *this[3].imagp * *this[1].imagp;
    *this[5].imagp = v20;
    if (a3)
    {
      MultiRadixRealFFT::RealInPlaceTransform((MultiRadixRealFFT *)this, this + 5, -1, v20);
      __int16 v21 = (DSPComplex *)this[7].realp;
      vDSP_Length v22 = (unint64_t)LODWORD(this[10].realp) >> 1;
      uint64_t v23 = &this[5].imagp[v22];
      v26.realp = &this[5].realp[v22];
      v26.imagp = v23;
      if ((DSPComplex *)this[7].imagp == v21
        || (vDSP_ztoc(&v26, 1, v21, 2, v22), uint64_t v24 = this[7].realp, v25 = this[7].imagp - v24, v25 <= v25 - a4))
      {
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      }
      memcpy(a3, &v24[v25 - a4], 4 * a4);
    }
  }
}

void sub_1BB483640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1BB48386C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BB4838F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1BB483974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  float v10 = v9;

  a9.super_class = (Class)VPEmergencyCallStateObserver;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1BB483AA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Cns::deallocate_memory(uint64_t this)
{
  if (*(_DWORD *)this)
  {
    uint64_t v1 = this;
    *(_DWORD *)this = 0;
    if (*(void *)(this + 208))
    {
      uint64_t v2 = 0;
      char v3 = 1;
      do
      {
        char v4 = v3;
        uint64_t v5 = *(void *)(*(void *)(v1 + 208) + 8 * v2);
        if (v5) {
          MEMORY[0x1C185D340](v5, 0x1000C8052888210);
        }
        char v3 = 0;
        uint64_t v2 = 1;
      }
      while ((v4 & 1) != 0);
      uint64_t v6 = *(void *)(v1 + 208);
      if (v6) {
        MEMORY[0x1C185D340](v6, 0x10C80436913F5);
      }
      *(void *)(v1 + 208) = 0;
    }
    if (*(void *)(v1 + 328))
    {
      if (*(_DWORD *)(v1 + 4) + *(_DWORD *)(v1 + 28) < 1) {
        goto LABEL_33;
      }
      uint64_t v7 = 0;
      uint64_t v8 = 64;
      do
      {
        uint64_t v9 = *(void *)(v1 + 328);
        uint64_t v10 = *(void *)(v9 + v8 - 64);
        if (v10)
        {
          MEMORY[0x1C185D340](v10, 0x1000C8052888210);
          uint64_t v9 = *(void *)(v1 + 328);
        }
        uint64_t v11 = *(void *)(v9 + v8 - 56);
        if (v11)
        {
          MEMORY[0x1C185D340](v11, 0x1000C8052888210);
          uint64_t v9 = *(void *)(v1 + 328);
        }
        uint64_t v12 = *(void *)(v9 + v8 - 48);
        if (v12)
        {
          MEMORY[0x1C185D340](v12, 0x1000C8052888210);
          uint64_t v9 = *(void *)(v1 + 328);
        }
        uint64_t v13 = *(void *)(v9 + v8 - 40);
        if (v13)
        {
          MEMORY[0x1C185D340](v13, 0x1000C8052888210);
          uint64_t v9 = *(void *)(v1 + 328);
        }
        uint64_t v14 = *(void *)(v9 + v8 - 32);
        if (v14)
        {
          MEMORY[0x1C185D340](v14, 0x1000C8052888210);
          uint64_t v9 = *(void *)(v1 + 328);
        }
        uint64_t v15 = *(void *)(v9 + v8 - 24);
        if (v15)
        {
          MEMORY[0x1C185D340](v15, 0x1000C8052888210);
          uint64_t v9 = *(void *)(v1 + 328);
        }
        uint64_t v16 = *(void *)(v9 + v8 - 16);
        if (v16)
        {
          MEMORY[0x1C185D340](v16, 0x1000C8052888210);
          uint64_t v9 = *(void *)(v1 + 328);
        }
        uint64_t v17 = *(void *)(v9 + v8 - 8);
        if (v17)
        {
          MEMORY[0x1C185D340](v17, 0x1000C8052888210);
          uint64_t v9 = *(void *)(v1 + 328);
        }
        uint64_t v18 = *(void *)(v9 + v8);
        if (v18) {
          MEMORY[0x1C185D340](v18, 0x1000C8052888210);
        }
        ++v7;
        v8 += 112;
      }
      while (v7 < *(int *)(v1 + 4) + (uint64_t)*(int *)(v1 + 28));
      if (*(void *)(v1 + 328)) {
LABEL_33:
      }
        MEMORY[0x1C185D340]();
      *(void *)(v1 + 328) = 0;
    }
    uint64_t v19 = *(void *)(v1 + 104);
    if (v19) {
      MEMORY[0x1C185D340](v19, 0x1000C8052888210);
    }
    *(void *)(v1 + 104) = 0;
    uint64_t v20 = *(void *)(v1 + 72);
    if (v20) {
      MEMORY[0x1C185D340](v20, 0x1000C8052888210);
    }
    *(void *)(v1 + 72) = 0;
    uint64_t v21 = *(void *)(v1 + 80);
    if (v21) {
      MEMORY[0x1C185D340](v21, 0x1000C8052888210);
    }
    *(void *)(v1 + 80) = 0;
    uint64_t v22 = *(void *)(v1 + 88);
    if (v22) {
      MEMORY[0x1C185D340](v22, 0x1000C8052888210);
    }
    uint64_t v23 = *(void *)(v1 + 96);
    if (v23) {
      MEMORY[0x1C185D340](v23, 0x1000C8052888210);
    }
    *(void *)(v1 + 96) = 0;
    uint64_t v24 = *(void *)(v1 + 112);
    if (v24) {
      MEMORY[0x1C185D340](v24, 0x1000C8052888210);
    }
    *(void *)(v1 + 112) = 0;
    uint64_t v25 = *(void *)(v1 + 120);
    if (v25) {
      MEMORY[0x1C185D340](v25, 0x1000C8052888210);
    }
    *(void *)(v1 + 120) = 0;
    uint64_t v26 = *(void *)(v1 + 128);
    if (v26) {
      MEMORY[0x1C185D340](v26, 0x1000C8052888210);
    }
    *(void *)(v1 + 128) = 0;
    uint64_t v27 = *(void *)(v1 + 224);
    if (v27) {
      MEMORY[0x1C185D340](v27, 0x1000C8052888210);
    }
    *(void *)(v1 + 224) = 0;
    uint64_t v28 = *(void *)(v1 + 232);
    if (v28) {
      MEMORY[0x1C185D340](v28, 0x1000C8052888210);
    }
    *(void *)(v1 + 232) = 0;
    uint64_t v29 = *(void *)(v1 + 240);
    if (v29) {
      MEMORY[0x1C185D340](v29, 0x1000C8052888210);
    }
    *(void *)(v1 + 240) = 0;
    uint64_t v30 = *(void *)(v1 + 248);
    if (v30) {
      MEMORY[0x1C185D340](v30, 0x1000C8052888210);
    }
    *(void *)(v1 + 248) = 0;
    uint64_t v31 = *(void *)(v1 + 8);
    if (v31) {
      MEMORY[0x1C185D340](v31, 0x1000C8052888210);
    }
    *(void *)(v1 + 8) = 0;
    uint64_t v32 = *(void *)(v1 + 144);
    if (v32) {
      MEMORY[0x1C185D340](v32, 0x1000C8052888210);
    }
    *(void *)(v1 + 144) = 0;
    uint64_t v33 = *(void *)(v1 + 152);
    if (v33) {
      MEMORY[0x1C185D340](v33, 0x1000C8052888210);
    }
    *(void *)(v1 + 152) = 0;
    this = *(void *)(v1 + 288);
    if (this) {
      this = MEMORY[0x1C185D340](this, 0x1000C8052888210);
    }
    *(void *)(v1 + 288) = 0;
  }
  return this;
}

uint64_t Cns::init(Cns *this)
{
  if (*(_DWORD *)this) {
    Cns::deallocate_memory((uint64_t)this);
  }
  *(_DWORD *)this = 1;
  int v2 = *((_DWORD *)this + 1) + *((_DWORD *)this + 7);
  if (v2 < 0) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 4 * v2;
  }
  char v4 = operator new[](v3, MEMORY[0x1E4FBA2D0]);
  *((void *)this + 1) = v4;
  if (!v4) {
    return 4294967294;
  }
  if (v2 >= 1) {
    memset_pattern16(v4, &unk_1BB87C2B0, 4 * (v2 - 1) + 4);
  }
  int v5 = *((_DWORD *)this + 6);
  size_t v6 = v5 < -2 ? -1 : 4 * (v5 + 2);
  uint64_t v7 = operator new[](v6, MEMORY[0x1E4FBA2D0]);
  *((void *)this + 14) = v7;
  if (!v7) {
    return 4294967294;
  }
  if (v5 >= -1) {
    bzero(v7, 4 * (v5 + 1) + 4);
  }
  if (v5 >= 0) {
    int v8 = v5;
  }
  else {
    int v8 = v5 + 1;
  }
  int v9 = v8 >> 1;
  int v10 = (v8 >> 1) - 1;
  *((_DWORD *)this + 8) = v10;
  int v11 = (v8 >> 1) - 2;
  if (v5 >= 104) {
    int v11 = 50;
  }
  *((_DWORD *)this + 10) = v11;
  int v12 = v9 + 1;
  size_t v13 = v5 < -3 ? -1 : 4 * v12;
  uint64_t v14 = operator new[](v13, MEMORY[0x1E4FBA2D0]);
  *((void *)this + 29) = v14;
  if (!v14) {
    return 4294967294;
  }
  size_t v15 = v5 < 2 ? -1 : 4 * v10;
  uint64_t v16 = operator new[](v15, MEMORY[0x1E4FBA2D0]);
  *((void *)this + 15) = v16;
  if (!v16) {
    return 4294967294;
  }
  uint64_t v17 = v16;
  uint64_t v18 = (int *)operator new[](v15, MEMORY[0x1E4FBA2D0]);
  *((void *)this + 16) = v18;
  if (!v18) {
    return 4294967294;
  }
  if (v5 > -2)
  {
    uint64_t v22 = v18;
    uint64_t v19 = 0;
    int v23 = 0;
    int v24 = 2;
    int v25 = 1;
    do
    {
      unsigned int v26 = v25;
      float v27 = (double)v24 / 21.4;
      float v28 = __exp10f(v27);
      float v20 = *((float *)this + 4);
      int v5 = *((_DWORD *)this + 6);
      float v21 = (float)v5;
      float v29 = (float)(v28 + -1.0) / 0.00437;
      do
        int v30 = v23++;
      while (v29 > (float)((float)(v20 * (float)v23) / v21));
      if (v23 >= v12) {
        int v31 = v9 + 1;
      }
      else {
        int v31 = v23;
      }
      v22[v19++] = v31 - 1;
      v24 += 2;
      int v25 = v26 + 1;
    }
    while (v30 < v9);
    _DWORD *v17 = 0;
    if (v19 >= 2)
    {
      uint64_t v32 = v26 - 1;
      uint64_t v33 = v17 + 1;
      do
      {
        int v34 = *v22++;
        *v33++ = v34 + 1;
        --v32;
      }
      while (v32);
    }
  }
  else
  {
    LODWORD(v19) = 0;
    _DWORD *v17 = 0;
    float v20 = *((float *)this + 4);
    float v21 = (float)v5;
  }
  int v35 = (int)(float)((float)(1625.0 / v20) * v21);
  *((_DWORD *)this + 9) = v19;
  *((_DWORD *)this + 11) = v35;
  uint64_t v36 = (v35 + 1);
  size_t v37 = v35 < -1 ? -1 : 4 * (int)v36;
  float v38 = (float *)operator new[](v37, MEMORY[0x1E4FBA2D0]);
  *((void *)this + 30) = v38;
  if (!v38) {
    return 4294967294;
  }
  float v39 = v38;
  if (*((_DWORD *)this + 16))
  {
    if (v35 <= 0x7FFFFFFE && (float)(v20 / v21) > 0.0)
    {
      uint64_t v40 = 0;
      do
      {
        float v41 = (float)((float)(v20 / v21) * (float)(int)v40) / 125.0;
        int v42 = vcvtps_s32_f32(v41);
        float v43 = 0.35481;
        if (v42 <= 13)
        {
          int v44 = vcvtms_s32_f32(v41);
          if (v42 == v44) {
            float v43 = preemph16x128[v44];
          }
          else {
            float v43 = preemph16x128[v44]
          }
                + (float)((float)(v41 - (float)v44)
                        * (float)((float)(preemph16x128[v42] - preemph16x128[v44]) / (float)(v42 - v44)));
        }
        v38[v40++] = v43;
      }
      while (v36 != v40);
    }
  }
  else if ((v35 & 0x80000000) == 0)
  {
    memset_pattern16(v38, &unk_1BB873A60, 4 * (v35 + 1));
  }
  uint64_t v45 = *((int *)this + 8);
  size_t v46 = (int)v45 < 0 ? -1 : 4 * v45;
  int v47 = (float *)operator new[](v46, MEMORY[0x1E4FBA2D0]);
  *((void *)this + 31) = v47;
  if (!v47) {
    return 4294967294;
  }
  float v48 = v47;
  if ((int)v45 >= 1) {
    memset_pattern16(v47, &unk_1BB873A60, 4 * v45);
  }
  if ((v35 & 0x80000000) == 0)
  {
    do
    {
      float v49 = *v39++;
      *v48++ = 1.0 / v49;
      --v36;
    }
    while (v36);
  }
  int v50 = v5 >= 0 ? v5 : v5 + 1;
  *((float *)this + 12) = (float)(500 / (v50 >> 1));
  *((_DWORD *)this + 34) = 1055439407;
  *((float *)this + 35) = v21 * 0.09375;
  int v51 = *((_DWORD *)this + 1) + *((_DWORD *)this + 7);
  size_t v52 = v51 < 0 ? -1 : 4 * v51;
  int v53 = operator new[](v52, MEMORY[0x1E4FBA2D0]);
  *((void *)this + 18) = v53;
  if (!v53) {
    return 4294967294;
  }
  int v54 = v53;
  double v55 = operator new[](v52, MEMORY[0x1E4FBA2D0]);
  *((void *)this + 19) = v55;
  if (!v55) {
    return 4294967294;
  }
  float v56 = v55;
  float v57 = operator new[](v52, MEMORY[0x1E4FBA2D0]);
  *((void *)this + 36) = v57;
  if (!v57) {
    return 4294967294;
  }
  unsigned int v59 = v51 - 1;
  if (v51 >= 1)
  {
    int v60 = v57;
    size_t v61 = 4 * (v51 - 1) + 4;
    memset_pattern16(v54, &unk_1BB87C120, 4 * v59 + 4);
    memset_pattern16(v56, &unk_1BB87C130, v61);
    memset_pattern16(v60, &unk_1BB87C130, v61);
  }
  *(float *)v58.i32 = (float)*((int *)this + 5);
  float v186 = *((float *)this + 4);
  int32x2_t v187 = v58;
  double v62 = (float)(v186 / *(float *)v58.i32);
  float v63 = exp(-1.0 / (v62 * 0.004));
  *((float *)this + 40) = v63;
  float v64 = exp(-1.0 / (v62 * 0.015));
  *((float *)this + 41) = v64;
  float v65 = exp(-1.0 / (v62 * 7.0));
  *((float *)this + 42) = v65;
  float v66 = exp(-1.0 / (v62 * 0.05));
  *((float *)this + 43) = v66;
  *(void *)((char *)this + 180) = 0x3600000000000000;
  *((float *)this + 48) = v21 * 0.1875;
  *((_DWORD *)this + 47) = 905969664;
  *((_DWORD *)this + 64) = (int)(float)((float)((float)(v186 * 200.0) / *(float *)v187.i32) / 1000.0);
  *((_DWORD *)this + 65) = 1068960317;
  int32x2_t v184 = vcvt_s32_f32(vdiv_f32(vdiv_f32(vmul_n_f32((float32x2_t)0x4320000043A00000, v186), (float32x2_t)vdup_lane_s32(v187, 0)), (float32x2_t)vdup_n_s32(0x447A0000u)));
  *((int32x2_t *)this + 33) = v184;
  int v67 = (int)(float)((float)((float)(v186 * 40.0) / *(float *)v187.i32) / 1000.0);
  *((_DWORD *)this + 68) = v67;
  v68.i64[0] = v184.i32[0];
  v68.i64[1] = v184.i32[1];
  *(float32x2_t *)((char *)this + 276) = vcvt_f32_f64(vmulq_f64(vcvtq_f64_s64(v68), (float64x2_t)vdupq_n_s64(0x3FB999999999999AuLL)));
  float v69 = (double)v67 * 0.5;
  *((float *)this + 71) = v69;
  *((_DWORD *)this + 74) = 1050728607;
  float v70 = exp(-1.0 / (v62 * 0.24));
  *((float *)this + 75) = v70;
  float v71 = exp(-1.0 / (v62 * 0.16));
  *((float *)this + 76) = v71;
  float v72 = exp(-1.0 / (v62 * 0.04));
  *((float *)this + 77) = v72;
  *((float *)this + 78) = v72;
  *((float *)this + 79) = v72;
  __int32 v73 = v184.i32[1];
  if (v184.i32[0] > v184.i32[1]) {
    __int32 v73 = v184.i32[0];
  }
  *((_DWORD *)this + 80) = v73;
  float v74 = exp(-1.0 / (v62 * 0.5));
  *((float *)this + 49) = v74;
  *((void *)this + 25) = 0x3840000000000000;
  int v75 = (int **)operator new[](0x10uLL, MEMORY[0x1E4FBA2D0]);
  *((void *)this + 26) = v75;
  if (!v75) {
    return 4294967294;
  }
  size_t v76 = v75;
  *int v75 = 0;
  v75[1] = 0;
  uint64_t v77 = (int *)*((void *)this + 16);
  if (*v77 <= 0)
  {
    uint64_t v79 = 0;
    uint64_t v78 = *((_DWORD *)this + 9) & ~(*((int *)this + 9) >> 31);
    while (v78 != v79)
    {
      int v80 = v79 + 1;
      int v81 = v77[++v79];
      if (v81 >= 1)
      {
        LODWORD(v78) = v80;
        break;
      }
    }
  }
  else
  {
    LODWORD(v78) = 0;
  }
  int v82 = *((_DWORD *)this + 8);
  int v83 = v78 + v82 - 1;
  if (*v77 >= v83)
  {
    LODWORD(v85) = 0;
  }
  else
  {
    uint64_t v84 = 0;
    uint64_t v85 = *((_DWORD *)this + 9) & ~(*((int *)this + 9) >> 31);
    while (v85 != v84)
    {
      int v86 = v84 + 1;
      int v87 = v77[++v84];
      if (v87 >= v83)
      {
        LODWORD(v85) = v86;
        break;
      }
    }
  }
  int v88 = v85 - v78;
  int v89 = v85 - v78 + 1;
  *((_DWORD *)this + 54) = v89;
  size_t v90 = (int)v85 - (int)v78 < -1 ? -1 : 4 * v89;
  char v91 = (int *)operator new[](v90, MEMORY[0x1E4FBA2D0]);
  *size_t v76 = v91;
  if (!v91) {
    return 4294967294;
  }
  int v92 = v91;
  int v93 = (int *)operator new[](v90, MEMORY[0x1E4FBA2D0]);
  v76[1] = v93;
  if (!v93) {
    return 4294967294;
  }
  int v94 = v93;
  if (v85 >= v78)
  {
    unsigned int v95 = &v77[v78];
    int v96 = (int *)(*((void *)this + 15) + 4 * v78);
    unsigned int v97 = v78 - 1;
    int v98 = v92;
    v99 = v93;
    do
    {
      int v100 = *v96++;
      int v101 = v100 - 1;
      if (v100 <= 1) {
        int v101 = 0;
      }
      *v98++ = v101;
      int v102 = *v95++;
      int v103 = v102 - 1;
      if (v102 <= 1) {
        int v103 = 0;
      }
      *v99++ = v103;
      ++v97;
    }
    while (v85 > v97);
  }
  v93[v88] = v78 + v82 - 2;
  uint64_t v104 = *((int *)this + 9);
  size_t v105 = (int)v104 < 0 ? -1 : 4 * v104;
  int v106 = (float *)operator new[](v105, MEMORY[0x1E4FBA2D0]);
  *((void *)this + 28) = v106;
  if (!v106) {
    return 4294967294;
  }
  long long v107 = v106;
  if ((int)v104 >= 1) {
    bzero(v106, 4 * v104);
  }
  if ((v88 & 0x80000000) == 0)
  {
    uint64_t v108 = v94;
    BOOL v109 = v92;
    uint64_t v110 = (v88 + 1);
    do
    {
      int v112 = *v108++;
      int v111 = v112;
      int v113 = *v109++;
      float v114 = sqrtf((float)(v111 - v113) + 1.0);
      if (v114 >= 1.4) {
        float v114 = 1.4;
      }
      *v107++ = v114;
      --v110;
    }
    while (v110);
    uint64_t v115 = 0;
    do
    {
      uint64_t v116 = v92[v115];
      if ((int)v116 <= v94[v115])
      {
        uint64_t v117 = *((void *)this + 29);
        do
          *(_DWORD *)(v117 + 4 * v116) = v115;
        while (v116++ < v94[v115]);
        int v89 = *((_DWORD *)this + 54);
      }
      ++v115;
    }
    while (v115 < v89);
  }
  uint64_t v119 = v94[v89 - 1];
  if ((int)v119 < *((_DWORD *)this + 6) / 2)
  {
    uint64_t v120 = *((void *)this + 29);
    do
      *(_DWORD *)(v120 + 4 + 4 * v119++) = *(_DWORD *)(v120 + 4 * v94[*((int *)this + 54) - 1]);
    while (v119 < *((_DWORD *)this + 6) / 2);
  }
  uint64_t v121 = *((int *)this + 8);
  size_t v122 = (int)v121 < 0 ? -1 : 8 * v121;
  int v123 = operator new[](v122, MEMORY[0x1E4FBA2D0]);
  *((void *)this + 12) = v123;
  if (!v123) {
    return 4294967294;
  }
  size_t v124 = (int)v121 < 0 ? -1 : 4 * v121;
  uint64_t v125 = operator new[](v124, MEMORY[0x1E4FBA2D0]);
  *((void *)this + 9) = v125;
  if (!v125) {
    return 4294967294;
  }
  *((void *)this + 13) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  uint64_t v126 = *((int *)this + 1);
  unint64_t v127 = v126 + *((int *)this + 7);
  size_t v128 = is_mul_ok(v127, 0x70uLL) ? 112 * v127 : -1;
  uint64_t v129 = operator new[](v128, MEMORY[0x1E4FBA2D0]);
  *((void *)this + 41) = v129;
  if (!v129) {
    return 4294967294;
  }
  int v182 = v126;
  bzero(v129, 112 * (int)v127);
  unint64_t v183 = v127;
  if ((int)v127 >= 1)
  {
    uint64_t v130 = 0;
    uint64_t v131 = *((int *)this + 9);
    if ((int)v131 < 0) {
      size_t v132 = -1;
    }
    else {
      size_t v132 = 4 * v131;
    }
    uint64_t v188 = *((unsigned int *)this + 9);
    double v133 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
    size_t v185 = v132;
    do
    {
      float v134 = operator new[](v132, v133);
      uint64_t v135 = *((void *)this + 41);
      *(void *)(v135 + 112 * v130) = v134;
      if (!v134) {
        return 4294967294;
      }
      float v136 = (void *)(v135 + 112 * v130);
      v136[5] = 0;
      v136[6] = 0;
      uint64_t v137 = operator new[](v132, v133);
      v136[1] = v137;
      int v138 = (_DWORD **)(v136 + 1);
      if (!v137) {
        return 4294967294;
      }
      long long v139 = operator new[](v132, v133);
      uint64_t v140 = v135 + 112 * v130;
      *(void *)(v140 + 56) = v139;
      float v141 = (_DWORD **)(v140 + 56);
      if (!v139) {
        return 4294967294;
      }
      uint64_t v142 = operator new[](v132, v133);
      uint64_t v143 = v135 + 112 * v130;
      *(void *)(v143 + 16) = v142;
      long long v144 = (_DWORD **)(v143 + 16);
      if (!v142) {
        return 4294967294;
      }
      uint64_t v145 = v133;
      uint64_t v146 = v135 + 112 * v130;
      *(void *)(v146 + 64) = 0;
      uint64_t v147 = operator new[](v132, v145);
      *(void *)(v146 + 24) = v147;
      long long v148 = (_DWORD **)(v146 + 24);
      if (!v147) {
        return 4294967294;
      }
      uint64_t v149 = *((int *)this + 80);
      size_t v150 = (int)v149 < 0 ? -1 : 4 * v149;
      int v151 = operator new[](v150, v145);
      *(void *)(v135 + 112 * v130 + 32) = v151;
      if (!v151) {
        return 4294967294;
      }
      if ((int)v188 >= 1)
      {
        float v152 = *(_DWORD **)(v135 + 112 * v130);
        uint64_t v153 = *v138;
        int v154 = *v141;
        uint64_t v155 = *v144;
        uint64_t v156 = v188;
        int v157 = *v148;
        do
        {
          *v152++ = 0;
          *v153++ = *((_DWORD *)this + 12);
          *v154++ = 966787072;
          *v155++ = 1065353216;
          *v157++ = 0;
          --v156;
        }
        while (v156);
      }
      if ((int)v149 >= 1) {
        bzero(v151, 4 * v149);
      }
      uint64_t v158 = v135 + 112 * v130;
      *(float *)(v158 + 72) = (float)*((int *)this + 6);
      *(_DWORD *)(v158 + 76) = 1065353216;
      *(void *)(v158 + 92) = 0;
      *(void *)(v158 + 84) = 0;
      *(void *)(v158 + 100) = 0x3F800000000000C8;
      ++v130;
      size_t v132 = v185;
      double v133 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
    }
    while (v130 != v183);
  }
  if (!v182) {
    goto LABEL_177;
  }
  uint64_t v159 = *((int *)this + 8);
  if ((int)v159 < 0) {
    size_t v160 = -1;
  }
  else {
    size_t v160 = 4 * v159;
  }
  int v161 = operator new[](v160, MEMORY[0x1E4FBA2D0]);
  *((void *)this + 10) = v161;
  if (v161)
  {
    uint64_t v162 = operator new[](v160, MEMORY[0x1E4FBA2D0]);
    *((void *)this + 11) = v162;
    if (v162)
    {
      size_t v163 = (v183 & 0x80000000) != 0 ? -1 : 4 * v183;
      uint64_t v164 = operator new[](v163, MEMORY[0x1E4FBA2D0]);
      *((void *)this + 13) = v164;
      if (v164)
      {
        if ((int)v183 >= 1)
        {
          uint64_t v165 = v164;
          uint64_t v166 = 0;
          uint64_t v167 = *((int *)this + 9);
          if ((int)v167 < 0) {
            size_t v168 = -1;
          }
          else {
            size_t v168 = 4 * v167;
          }
          uint64_t v189 = *((unsigned int *)this + 9);
          uint64_t v169 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
          do
          {
            int v170 = operator new[](v168, v169);
            uint64_t v171 = *((void *)this + 41);
            uint64_t v172 = v171 + 112 * v166;
            *(void *)(v172 + 40) = v170;
            unsigned int v173 = (_DWORD **)(v172 + 40);
            if (!v170) {
              return 4294967294;
            }
            uint64_t v174 = operator new[](v168, v169);
            uint64_t v175 = v171 + 112 * v166;
            *(void *)(v175 + 48) = v174;
            size_t v176 = (_DWORD **)(v175 + 48);
            if (!v174) {
              return 4294967294;
            }
            uint64_t v177 = operator new[](v168, v169);
            *(void *)(v171 + 112 * v166 + 64) = v177;
            if (!v177) {
              return 4294967294;
            }
            if ((int)v189 >= 1)
            {
              int v178 = *v173;
              uint64_t v179 = *v176;
              uint64_t v180 = v189;
              do
              {
                *v178++ = 0;
                *v179++ = 0;
                *v177++ = 1036831949;
                --v180;
              }
              while (v180);
            }
            v165[v166++] = 0;
          }
          while (v166 != v183);
        }
LABEL_177:
        uint64_t result = 0;
        *((void *)this + 7) = 0x3F33333339687B18;
        return result;
      }
    }
  }
  return 4294967294;
}

uint64_t Cns::process(uint64_t this, float **a2)
{
  if (!*(_DWORD *)(this + 4))
  {
    uint64_t v158 = *(int *)(this + 28);
    if ((int)v158 >= 1)
    {
      uint64_t v2 = 0;
      uint64_t v3 = *(void *)(this + 112);
      uint64_t v4 = v3 + 8;
      uint64_t v5 = *(unsigned int *)(this + 44);
      uint64_t v6 = *(unsigned int *)(this + 32);
      uint64_t v7 = *(float **)(this + 72);
      uint64_t v8 = *(unsigned int *)(this + 216);
      uint64_t v9 = *(void *)(this + 328);
      unint64_t v10 = *(unsigned int *)(this + 320);
      int v11 = *(float **)(this + 96);
      uint64_t v157 = *(void *)(this + 288);
      int v156 = *(_DWORD *)(this + 52);
      float v12 = (float)(int)v6;
      size_t v13 = (float *)(v3 + 12);
      uint64_t v14 = v5 & ~((int)v5 >> 31);
      uint64_t v155 = v6 - v14;
      unsigned int v154 = 2 * v14;
      uint64_t v15 = 4 * v8;
      uint64_t v153 = v13;
      do
      {
        uint64_t v16 = a2[v2];
        if ((int)v5 < 1)
        {
          int v24 = 0;
        }
        else
        {
          uint64_t v17 = (float *)(*(void *)(this + 240) + 4);
          uint64_t v18 = v16 + 3;
          uint64_t v19 = v13;
          uint64_t v20 = v5;
          do
          {
            *(v19 - 1) = *(v18 - 1) * *v17;
            float v21 = *v17++;
            float v22 = v21;
            float v23 = *v18;
            v18 += 2;
            *uint64_t v19 = v23 * v22;
            v19 += 2;
            --v20;
          }
          while (v20);
          int v24 = v5;
        }
        int v25 = v16 + 2;
        unsigned int v26 = v154;
        uint64_t v27 = v155;
        if (v24 < (int)v6)
        {
          do
          {
            *(float *)(v4 + 4 * v26) = v25[v26];
            *(float *)(v4 + 4 * (v26 + 1)) = v25[v26 + 1];
            v26 += 2;
            --v27;
          }
          while (v27);
        }
        if ((int)v6 >= 1)
        {
          float v28 = v13;
          float v29 = v7;
          uint64_t v30 = v6;
          do
          {
            *v29++ = fabsf(*(v28 - 1)) + fabsf(*v28);
            v28 += 2;
            --v30;
          }
          while (v30);
        }
        if ((int)v8 >= 1)
        {
          uint64_t v31 = 0;
          uint64_t v32 = *(uint64_t **)(this + 208);
          uint64_t v33 = *v32;
          uint64_t v34 = v32[1];
          do
          {
            uint64_t v35 = *(int *)(v33 + 4 * v31);
            int v36 = *(_DWORD *)(v34 + 4 * v31);
            if ((int)v35 <= v36)
            {
              int v39 = v36 + 1;
              int v40 = v39 - v35;
              float v41 = &v7[v35];
              float v38 = 0.0;
              do
              {
                float v42 = *v41++;
                float v38 = v38 + v42;
                --v40;
              }
              while (v40);
              int v37 = v39 - v35;
            }
            else
            {
              int v37 = 0;
              float v38 = 0.0;
            }
            v7[v31++] = v38 / (float)v37;
          }
          while (v31 != v8);
          float v43 = *(float **)(v9 + 112 * v2);
          float v44 = *(float *)(this + 180);
          uint64_t v45 = v7;
          uint64_t v46 = v8;
          do
          {
            float v47 = *v45++;
            float v48 = v47 + (float)(*(float *)(this + 160 + 4 * (v47 <= *v43)) * (float)(*v43 - v47));
            if (v48 <= v44) {
              float v48 = v44;
            }
            *v43++ = v48;
            --v46;
          }
          while (v46);
        }
        uint64_t v49 = v9 + 112 * (int)v2;
        float v51 = *(float *)(v49 + 88);
        int v50 = (float *)(v49 + 88);
        if (v51 < *(float *)(this + 280)) {
          *(_DWORD *)(v9 + 112 * (int)v2 + 100) = *(_DWORD *)(this + 256);
        }
        size_t v52 = (float **)(v9 + 112 * (int)v2);
        if ((int)v8 <= 0)
        {
          double v55 = *v52;
          *(float *)(v9 + 112 * (int)v2 + 96) = 0.0 / (float)(int)v6;
          float v66 = 0.0 / (float)(int)v6;
        }
        else
        {
          unint64_t v53 = 0;
          uint64_t v54 = *(void *)(v9 + 112 * (int)v2 + 24);
          double v55 = *v52;
          float v56 = 0.0;
          do
          {
            float v57 = *(float *)(v54 + v53);
            float v58 = v55[v53 / 4];
            if (v57 <= v58) {
              float v59 = v55[v53 / 4];
            }
            else {
              float v59 = *(float *)(v54 + v53);
            }
            float v60 = fmaxf(v59, 0.000030518);
            if (v57 >= v58) {
              float v57 = v55[v53 / 4];
            }
            float v56 = v56
                + (float)((float)(v60 / fmaxf(v57, 0.000030518))
                        * (float)(*(_DWORD *)(*(void *)(*(void *)(this + 208) + 8) + v53)
                                - *(_DWORD *)(**(void **)(this + 208) + v53)
                                + 1));
            v53 += 4;
          }
          while (v15 != v53);
          unint64_t v61 = 0;
          uint64_t v62 = v9 + 112 * (int)v2;
          *(float *)(v62 + 96) = v56 / v12;
          float v63 = (float *)(v62 + 96);
          float v64 = *(float *)(this + 180);
          do
          {
            float v65 = v55[v61 / 4]
                + (float)(*(float *)(this + 312 + 4 * (v55[v61 / 4] <= *(float *)(v54 + v61)))
                        * (float)(*(float *)(v54 + v61) - v55[v61 / 4]));
            if (v65 <= v64) {
              float v65 = v64;
            }
            *(float *)(v54 + v61) = v65;
            v61 += 4;
          }
          while (v15 != v61);
          float v66 = *v63;
        }
        if (v66 <= *(float *)(this + 260))
        {
          uint64_t v68 = v9 + 112 * (int)v2;
          int v71 = *(_DWORD *)(v68 + 100);
          float v69 = (int *)(v68 + 100);
          int v70 = v71;
          if (v71)
          {
            if (*(float *)(v9 + 112 * (int)v2 + 92) <= *(float *)(this + 284))
            {
              int v67 = 1;
            }
            else
            {
              BOOL v72 = __OFSUB__(v70, 1);
              int v73 = v70 - 1;
              if ((v73 < 0) ^ v72 | (v73 == 0)) {
                int v67 = 0;
              }
              else {
                int v67 = v73;
              }
              *float v69 = v67;
            }
          }
          else
          {
            int v67 = 0;
          }
        }
        else
        {
          int v67 = *(_DWORD *)(this + 256);
          *(_DWORD *)(v9 + 112 * (int)v2 + 100) = v67;
        }
        if ((int)v10 > 1)
        {
          uint64_t v74 = *(void *)(v9 + 112 * (int)v2 + 32);
          unint64_t v75 = v10;
          do
          {
            *(_DWORD *)(v74 + 4 * (v75 - 1)) = *(_DWORD *)(v74 + 4 * (v75 - 2));
            BOOL v104 = v75-- > 2;
          }
          while (v104);
        }
        uint64_t v76 = v9 + 112 * (int)v2;
        uint64_t v79 = *(float **)(v76 + 8);
        uint64_t v78 = (float **)(v76 + 8);
        uint64_t v77 = v79;
        if ((int)v8 < 1)
        {
          float v87 = 0.0;
        }
        else
        {
          int v80 = v11;
          uint64_t v81 = v8;
          do
          {
            float v82 = *v55++;
            float v83 = v82;
            float v84 = *v77++;
            *v80++ = v83 / v84;
            --v81;
          }
          while (v81);
          int v86 = **(int ***)(this + 208);
          uint64_t v85 = *(int **)(*(void *)(this + 208) + 8);
          float v87 = 0.0;
          int v88 = v11;
          uint64_t v89 = v8;
          do
          {
            float v90 = *v88++;
            float v91 = v90;
            int v93 = *v85++;
            int v92 = v93;
            int v94 = *v86++;
            float v87 = v87 + (float)(v91 * (float)(v92 - v94 + 1));
            --v89;
          }
          while (v89);
        }
        uint64_t v95 = v9 + 112 * (int)v2;
        int v96 = *(float **)(v95 + 32);
        if ((float)((float)(v87 / v12) * *(float *)(v157 + 4 * (int)v2)) <= *(float *)(this + 296)) {
          float v97 = 0.0;
        }
        else {
          float v97 = 1.0;
        }
        *int v96 = v97;
        float v98 = v97 + (float)(*(float *)(this + 300) * *(float *)(v95 + 84));
        *(float *)(v95 + 84) = v98;
        float *v50 = *v96 + (float)(*(float *)(this + 304) * *v50);
        *(float *)(v95 + 92) = *v96 + (float)(*(float *)(this + 308) * *(float *)(v95 + 92));
        if (v67) {
          BOOL v99 = v98 < *(float *)(this + 276);
        }
        else {
          BOOL v99 = 1;
        }
        if (v99) {
          float v100 = 0.0;
        }
        else {
          float v100 = 1.0;
        }
        *(float *)(v95 + 104) = v100;
        uint64_t v101 = v9 + 112 * v2;
        float v103 = *(float *)(v101 + 104);
        int v102 = (float *)(v101 + 104);
        if ((int)v103) {
          BOOL v104 = 1;
        }
        else {
          BOOL v104 = (int)v8 < 1;
        }
        if (!v104)
        {
          size_t v105 = (float *)*((void *)v102 - 12);
          int v106 = v7;
          uint64_t v107 = v8;
          do
          {
            float v108 = *v106++;
            float v109 = v108;
            float v110 = *v105 - v108;
            if (v108 <= *v105) {
              uint64_t v111 = 172;
            }
            else {
              uint64_t v111 = 168;
            }
            float v112 = v109 + (float)(*(float *)(this + v111) * v110);
            float *v105 = v112;
            if (v112 <= *(float *)(this + 184)) {
              float v112 = *(float *)(this + 184);
            }
            *v105++ = v112;
            --v107;
          }
          while (v107);
        }
        int v113 = *v52;
        uint64_t v114 = v9 + 112 * (int)v2;
        *(_DWORD *)(v114 + 72) = 0;
        uint64_t v115 = (float *)(v114 + 72);
        if ((int)v8 < 1)
        {
          float v135 = 0.0;
        }
        else
        {
          uint64_t v116 = *(float **)(this + 224);
          uint64_t v117 = *v78;
          vDSP_Length v118 = *(float **)(v9 + 112 * (int)v2 + 16);
          uint64_t v120 = **(int ***)(this + 208);
          uint64_t v119 = *(int **)(*(void *)(this + 208) + 8);
          uint64_t v122 = *(void *)(this + 144);
          uint64_t v121 = *(void *)(this + 152);
          uint64_t v123 = v8;
          do
          {
            float v124 = *v113++;
            float v125 = v124;
            float v126 = *v116++;
            float v127 = v125 * (float)(*(float *)(v121 + 4 * (int)v2) * v126);
            float v128 = *v117++;
            float v129 = v128;
            if (v128 <= *(float *)(this + 188)) {
              float v129 = *(float *)(this + 188);
            }
            float v130 = v127 / v129;
            if (v130 > 1.0) {
              float v130 = 1.0;
            }
            int v132 = *v119++;
            int v131 = v132;
            int v133 = *v120++;
            *vDSP_Length v118 = v130;
            *uint64_t v115 = *v115 + (float)(v130 * (float)(v131 - v133 + 1));
            float v134 = *v118;
            if (*v118 <= *(float *)(v122 + 4 * (int)v2)) {
              float v134 = *(float *)(v122 + 4 * (int)v2);
            }
            if (v134 > 1.0) {
              float v134 = 1.0;
            }
            *v118++ = v134;
            --v123;
          }
          while (v123);
          float v135 = *v115;
          size_t v13 = v153;
        }
        uint64_t v136 = v9 + 112 * (int)v2;
        float v138 = *(float *)(v136 + 76);
        uint64_t v137 = (float *)(v136 + 76);
        float v139 = v138 * v135;
        *uint64_t v115 = v138 * v135;
        float v140 = 1.0;
        if (v139 <= *(float *)(this + 140)) {
          float v140 = *(float *)(this + 136);
        }
        *uint64_t v137 = v140;
        if ((int)v8 >= 1)
        {
          uint64_t v141 = *(void *)(v9 + 112 * (int)v2 + 16);
          float v142 = *(float *)(v141 + 4 * (v8 - 1));
          uint64_t v143 = 4 * (v8 - 1);
          do
          {
            float v142 = *(float *)(v141 + v143) + (float)((float)(v142 - *(float *)(v141 + v143)) * 0.5);
            *(float *)(v141 + v143) = v142;
            v143 -= 4;
          }
          while (v143 != -4);
        }
        if (!v156 && !(int)*v102 && (int)v8 >= 1)
        {
          uint64_t v145 = *(float **)(v9 + 112 * v2 + 56);
          uint64_t v146 = v7;
          uint64_t v147 = v8;
          do
          {
            float v148 = *v146++;
            float v149 = v148;
            float v150 = *v145 - v148;
            if (v148 <= *v145) {
              uint64_t v151 = 172;
            }
            else {
              uint64_t v151 = 168;
            }
            float v152 = v149 + (float)(*(float *)(this + v151) * v150);
            *uint64_t v145 = v152;
            if (v152 <= *(float *)(this + 184)) {
              float v152 = *(float *)(this + 184);
            }
            *v145++ = v152;
            --v147;
          }
          while (v147);
        }
        ++v2;
      }
      while (v2 != v158);
    }
  }
  return this;
}

uint64_t Cns::setMinGain(uint64_t this, float a2)
{
  uint64_t v2 = (*(_DWORD *)(this + 4) + *(_DWORD *)(this + 28));
  if ((int)v2 >= 1)
  {
    double v3 = a2;
    float v4 = fmaxf(a2, 0.25);
    double v5 = v3 / 0.3548;
    double v6 = fmax(v5, 0.717);
    double v7 = v5 * 0.0549999997;
    BOOL v8 = v5 <= 0.717;
    double v9 = 0.0394349998;
    if (!v8) {
      double v9 = v7;
    }
    if (v6 >= 1.0) {
      double v9 = 0.0549999997;
    }
    float v10 = v9;
    int v11 = *(float **)(this + 288);
    float v12 = *(float **)(this + 144);
    size_t v13 = *(float **)(this + 152);
    do
    {
      *v12++ = v4;
      *v11++ = v10;
      *v13++ = v10;
      --v2;
    }
    while (v2);
  }
  return this;
}

uint64_t Cns::setMinGain(uint64_t this, float a2, int a3)
{
  double v3 = a2;
  float v4 = fmaxf(a2, 0.25);
  int v5 = *(_DWORD *)(this + 28) + *(_DWORD *)(this + 4) - 1;
  if (v5 >= a3) {
    int v5 = a3;
  }
  uint64_t v6 = *(void *)(this + 152);
  *(float *)(*(void *)(this + 144) + 4 * v5) = v4;
  double v7 = v3 / 0.3548;
  BOOL v8 = v3 / 0.3548 <= 0.717;
  BOOL v9 = v3 / 0.3548 < 1.0 || v3 / 0.3548 <= 0.717;
  if (v7 >= 1.0) {
    BOOL v8 = 1;
  }
  float v10 = 0.055;
  if (v9) {
    float v10 = 0.039435;
  }
  float v11 = v7 * 0.0549999997;
  if (v8) {
    float v11 = v10;
  }
  *(float *)(*(void *)(this + 288) + 4 * v5) = v11;
  *(float *)(v6 + 4 * v5) = v11;
  return this;
}

uint64_t Cns::add_comf_noise(uint64_t this, DSPSplitComplex *a2, const DSPSplitComplex *a3, float *a4, float *a5, float *a6, int a7)
{
  uint64_t v7 = *(unsigned int *)(this + 40);
  if ((int)v7 >= 1)
  {
    uint64_t v8 = *(void *)(this + 144);
    uint64_t v9 = *(void *)(*(void *)(this + 328) + 112 * a7 + 56);
    float v10 = *(int **)(this + 232);
    float v11 = (float *)(*(void *)(this + 248) + 4);
    uint64_t v12 = 0x100000000;
    do
    {
      float v13 = *a6++;
      float v14 = *(float *)(v8 + 4 * a7);
      float v15 = 1.0 - v13;
      BOOL v16 = v13 < v14;
      float v17 = v14 * *(float *)(this + 56);
      uint64_t v18 = *v10++;
      float v19 = *(float *)(v9 + 4 * v18);
      if (!v16) {
        float v15 = 0.0;
      }
      float v20 = *v11++;
      float v21 = v15 * (float)((float)(v17 * (float)(v19 - *(float *)(this + 184))) * v20);
      float v22 = *a4++;
      uint64_t v23 = v12 >> 30;
      *(float *)((char *)&a2->realp + v23) = *(float *)((char *)&a2->realp + (v12 >> 30)) + (float)(v21 * v22);
      float v24 = *a5++;
      *(float *)((char *)&a3->realp + v23) = *(float *)((char *)&a3->realp + (v12 >> 30)) + (float)(v21 * v24);
      v12 += 0x100000000;
      --v7;
    }
    while (v7);
  }
  return this;
}

float *Cns::comf_noise(float *this, float *a2)
{
  if ((int)a2 >= 1)
  {
    uint64_t v2 = this;
    uint64_t v3 = a2;
    do
    {
      this = (float *)rand();
      float v4 = ((float)((float)(int)this * 4.6566e-10) + -0.5) * 32767.0;
      *v2++ = v4;
      --v3;
    }
    while (v3);
  }
  return this;
}

uint64_t AUSpatialProbability::SetMaxFramesPerSlice(AUSpatialProbability *this, int a2)
{
  uint64_t result = ausdk::AUBase::SetMaxFramesPerSlice((uint64_t)this, a2);
  if (*((_DWORD *)this + 145) != a2) {
    *((_DWORD *)this + 145) = a2;
  }
  return result;
}

uint64_t AUSpatialProbability::ChangeStreamFormat(AUSpatialProbability *this, uint64_t a2, uint64_t a3, const AudioStreamBasicDescription *a4, const AudioStreamBasicDescription *a5)
{
  if (a4->mSampleRate != a5->mSampleRate) {
    *((void *)this + 73) = *(void *)&a5->mSampleRate;
  }
  return 0;
}

uint64_t AUSpatialProbability::ValidFormat(AUSpatialProbability *this, int a2, unsigned int a3, const AudioStreamBasicDescription *a4)
{
  if (a4->mBitsPerChannel == 64 && a4->mFormatID == 1718773105) {
    uint64_t result = (LOBYTE(a4->mFormatFlags) >> 5) & 1;
  }
  else {
    uint64_t result = 0;
  }
  if (a2 == 2 || a2 == 1)
  {
    if (a4->mChannelsPerFrame < 0x11) {
      return result;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t AUSpatialProbability::SupportedNumChannels(AUSpatialProbability *this, const AUChannelInfo **a2)
{
  uint64_t v2 = 0;
  int16x8_t v3 = (int16x8_t)xmmword_1BB87A9B0;
  v4.i64[0] = 0x1000100010001;
  v4.i64[1] = 0x1000100010001;
  v5.i64[0] = 0x8000800080008;
  v5.i64[1] = 0x8000800080008;
  do
  {
    v8.val[0] = vaddq_s16(v3, v4);
    v8.val[1] = v8.val[0];
    uint64_t v6 = (__int16 *)((char *)&AUSpatialProbability::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs
                   + v2);
    vst2q_s16(v6, v8);
    int16x8_t v3 = vaddq_s16(v3, v5);
    v2 += 32;
  }
  while (v2 != 64);
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUSpatialProbability::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 16;
}

BOOL AUSpatialProbability::StreamFormatWritable(AUSpatialProbability *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUSpatialProbability::SupportsTail(AUSpatialProbability *this)
{
  return 1;
}

double AUSpatialProbability::GetTailTime(AUSpatialProbability *this)
{
  return 0.05;
}

double AUSpatialProbability::GetLatency(AUSpatialProbability *this)
{
  return 0.0;
}

uint64_t AUSpatialProbability::GetParameterValueStrings(AUSpatialProbability *this, int a2, int a3, const __CFArray **a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (!a4) {
    return 0;
  }
  if (a2) {
    return 4294956430;
  }
  uint64_t result = 0;
  switch(a3)
  {
    case 0:
      uint64_t v7 = &xmmword_1E623DA60;
      goto LABEL_13;
    case 4:
      int16x8x2_t v8 = &xmmword_1E623DA78;
      goto LABEL_11;
    case 5:
    case 6:
      long long v11 = xmmword_1E623DAA0;
      long long v12 = *(_OWORD *)&off_1E623DAB0;
      long long v13 = xmmword_1E623DAC0;
      CFIndex v6 = 6;
      goto LABEL_14;
    case 7:
      int16x8x2_t v8 = &xmmword_1E623DAE0;
LABEL_11:
      long long v9 = v8[1];
      long long v11 = *v8;
      long long v12 = v9;
      *(void *)&long long v13 = *((void *)v8 + 4);
      CFIndex v6 = 5;
      goto LABEL_14;
    case 10:
      long long v11 = xmmword_1E623DAD0;
      CFIndex v6 = 2;
      goto LABEL_14;
    case 16:
      uint64_t v7 = &xmmword_1E623DB08;
LABEL_13:
      long long v11 = *v7;
      *(void *)&long long v12 = *((void *)v7 + 2);
      CFIndex v6 = 3;
LABEL_14:
      CFArrayRef v10 = CFArrayCreate(0, (const void **)&v11, v6, 0);
      uint64_t result = 0;
      *a4 = v10;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t AUSpatialProbability::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result = ausdk::AUBase::RestoreState(this, a2);
  if (!result) {
    this[66] = (OpaqueAudioComponentInstance *)((char *)this[66] + 1);
  }
  return result;
}

uint64_t AUSpatialProbability::GetParameterInfo(AUSpatialProbability *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  buffer->AudioUnitParameterOptions flags = 0;
  buffer->unitName = 0;
  if (a2) {
    return 4294956430;
  }
  switch(a3)
  {
    case 0:
      buffer->cfNameString = @"Target definition mode. Used to define the centroid for the target model.";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Target definition mode. Used to define the centroid for the target model.", buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      *(void *)&buffer->minValue = 0x4000000000000000;
      buffer->defaultValue = 0.0;
      AudioUnitParameterOptions flags = buffer->flags;
      int v7 = -1056964608;
      goto LABEL_49;
    case 1:
      buffer->cfNameString = @"Target azimuth, used for DOA mode.";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Target azimuth, used for DOA mode.", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 1;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Degrees;
      uint64_t v8 = 0x43340000C3340000;
      goto LABEL_45;
    case 2:
      buffer->cfNameString = @"Target elevation, used for DOA mode.";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Target elevation, used for DOA mode.", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 1;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Degrees;
      uint64_t v8 = 0x42B40000C2B40000;
      goto LABEL_45;
    case 3:
      buffer->cfNameString = @"Target distance, used for DOA mode.";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Target distance, used for DOA mode.", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 1;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Meters;
      uint64_t v9 = 0x41A0000000000000;
      goto LABEL_30;
    case 4:
      CFStringRef v10 = @"DOA-based target source model (used for TargetDefinitionMode: DOA).";
      goto LABEL_13;
    case 5:
      buffer->cfNameString = @"Steering vector-based target source model (used for TargetDefinitionMode: SteeringVectorDictionary and ExternalSteeringVector).";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Steering vector-based target source model (used for TargetDefinitionMode: SteeringVectorDictionary and ExternalSteeringVector).", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 2;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      uint64_t v11 = 0x40A0000000000000;
      goto LABEL_22;
    case 6:
      buffer->cfNameString = @"Steering vector-based interfering source model (used for TargetDefinitionMode: SteeringVectorDictionary and ExternalSteeringVector).";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Steering vector-based interfering source model (used for TargetDefinitionMode: SteeringVectorDictionary and ExternalSteeringVector).", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 2;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      *(void *)&buffer->minValue = 0x40A0000000000000;
      AudioUnitParameterValue v12 = 1.0;
      goto LABEL_25;
    case 7:
      CFStringRef v10 = @"Shape parameter for the target model (fixed or frequency weighted).";
LABEL_13:
      buffer->cfNameString = v10;
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(v10, buffer->name, 52, 0x8000100u);
      buffer->clumpID = 2;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      uint64_t v11 = 0x4080000000000000;
      goto LABEL_22;
    case 8:
      buffer->cfNameString = @"Maximum value of the shape parameter for the target model.";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Maximum value of the shape parameter for the target model.", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 2;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minValue = 0x424800003F800000;
      AudioUnitParameterValue v13 = 10.0;
      goto LABEL_47;
    case 9:
      buffer->cfNameString = @"Minimum value of the shape parameter for the target model.";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Minimum value of the shape parameter for the target model.", buffer->name, 52, 0x8000100u);
      UInt32 v14 = 2;
      goto LABEL_43;
    case 10:
      buffer->cfNameString = @"Prior probability mode for the target and interferer (fixed or weighted).";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Prior probability mode for the target and interferer (fixed or weighted).", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      AudioUnitParameterOptions flags = buffer->flags;
      AudioUnitParameterUnit v15 = kAudioUnitParameterUnit_Indexed;
      goto LABEL_21;
    case 11:
      CFStringRef v16 = @"Prior probability of a source (either target or interfererer).";
      goto LABEL_19;
    case 12:
      CFStringRef v16 = @"Conditional prior probability of the target source.";
LABEL_19:
      buffer->cfNameString = v16;
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(v16, buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minValue = 0x3F80000000000000;
      AudioUnitParameterValue v13 = 0.5;
      goto LABEL_47;
    case 13:
      buffer->cfNameString = @"Smooth subband DOA estimates? (used for TargetDefinitionMode: DOA)";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Smooth subband DOA estimates? (used for TargetDefinitionMode: DOA)", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 4;
      AudioUnitParameterOptions flags = buffer->flags;
      AudioUnitParameterUnit v15 = kAudioUnitParameterUnit_Boolean;
LABEL_21:
      buffer->unit = v15;
      uint64_t v11 = 0x3F80000000000000;
LABEL_22:
      *(void *)&buffer->minValue = v11;
      buffer->defaultValue = 0.0;
      goto LABEL_26;
    case 14:
      buffer->cfNameString = @"Temporal smoothing of the subband DOA estimates (time constant, in seconds).";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Temporal smoothing of the subband DOA estimates (time constant, in seconds).", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 4;
      AudioUnitParameterOptions v17 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      *(void *)&buffer->minValue = 0x40A0000000000000;
      buffer->defaultValue = 0.0;
      AudioUnitParameterOptions v18 = v17 | 0xC0100000;
      goto LABEL_50;
    case 15:
      buffer->cfNameString = @"Frequency smoothing of the subband DOA estimates (bandwith, in octaves).";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Frequency smoothing of the subband DOA estimates (bandwith, in octaves).", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 4;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minValue = 0x4000000000000000;
      AudioUnitParameterValue v12 = 0.5;
LABEL_25:
      buffer->defaultValue = v12;
LABEL_26:
      int v7 = -1055916032;
      goto LABEL_49;
    case 16:
      buffer->cfNameString = @"Post-mask definition mode. Used to define computation of the real-vaued gain.";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Post-mask definition mode. Used to define computation of the real-vaued gain.", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 5;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      uint64_t v8 = 0x4000000000000000;
      goto LABEL_45;
    case 17:
      CFStringRef v19 = @"Minimum gain for the post-mask (in dB).";
      goto LABEL_38;
    case 18:
      buffer->cfNameString = @"Scaling parameter for sigmoid mapping from CDR to shape parameter.";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Scaling parameter for sigmoid mapping from CDR to shape parameter.", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 2;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      uint64_t v9 = 0x40A0000000000000;
LABEL_30:
      *(void *)&buffer->minValue = v9;
      AudioUnitParameterValue v13 = 1.0;
      goto LABEL_47;
    case 19:
      buffer->cfNameString = @"Offset parameter for sigmoid mapping from CDR to shape parameter (in dB).";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Offset parameter for sigmoid mapping from CDR to shape parameter (in dB).", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 2;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      uint64_t v8 = 0x41A00000C1A00000;
      goto LABEL_45;
    case 20:
      CFStringRef v20 = @"Average presence probability of the target source for the current frame (averaged across subbands).";
      goto LABEL_35;
    case 21:
      CFStringRef v20 = @"Average presence probability of an interfering source for the current frame (averaged across subbands).";
      goto LABEL_35;
    case 22:
      CFStringRef v20 = @"Average presence probability of the background noise component for the current frame (averaged across subbands).";
LABEL_35:
      buffer->cfNameString = v20;
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(v20, buffer->name, 52, 0x8000100u);
      buffer->clumpID = 6;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minValue = 0x3F80000000000000;
      buffer->defaultValue = 0.0;
      int v7 = 1074823168;
      goto LABEL_49;
    case 23:
      buffer->cfNameString = @"Bypass with external probability as the target probability estimate?";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Bypass with external probability as the target probability estimate?", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 7;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Boolean;
      goto LABEL_44;
    case 24:
      CFStringRef v19 = @"Lower bound for the estimated target probability (in dB).";
LABEL_38:
      buffer->cfNameString = v19;
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(v19, buffer->name, 52, 0x8000100u);
      buffer->clumpID = 5;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(void *)&buffer->minValue = 3281387520;
      AudioUnitParameterValue v13 = -300.0;
      goto LABEL_47;
    case 25:
      buffer->cfNameString = @"Cutoff frequency to start decaying concentration parameter (in Hz).";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Cutoff frequency to start decaying concentration parameter (in Hz).", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 2;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Hertz;
      *(void *)&buffer->minValue = 0x461C4000447A0000;
      AudioUnitParameterValue v13 = 4000.0;
      goto LABEL_47;
    case 26:
      buffer->cfNameString = @"Target beam index for steering vector-based models.";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Target beam index for steering vector-based models.", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 1;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      uint64_t v8 = 0x428E000000000000;
      goto LABEL_45;
    case 27:
      buffer->cfNameString = @"Minimum gain for the post-mask in noise (in dB).";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Minimum gain for the post-mask in noise (in dB).", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 5;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(void *)&buffer->minValue = 3281387520;
      AudioUnitParameterValue v13 = -20.0;
      goto LABEL_47;
    case 28:
      buffer->cfNameString = @"Apply extra suppression if average SPP is lower than this threshold (constant probability).";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Apply extra suppression if average SPP is lower than this threshold (constant probability).", buffer->name, 52, 0x8000100u);
      UInt32 v14 = 5;
LABEL_43:
      buffer->clumpID = v14;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
LABEL_44:
      uint64_t v8 = 0x3F80000000000000;
LABEL_45:
      *(void *)&buffer->minValue = v8;
      buffer->defaultValue = 0.0;
      goto LABEL_48;
    case 29:
      buffer->cfNameString = @"Hangover time of the decision of identifying a speech frame based on the SPP value (time constant, in seconds)";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Hangover time of the decision of identifying a speech frame based on the SPP value (time constant, in seconds)", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 5;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      *(void *)&buffer->minValue = 0x3F80000000000000;
      AudioUnitParameterValue v13 = 0.05;
LABEL_47:
      buffer->defaultValue = v13;
LABEL_48:
      int v7 = -1072693248;
LABEL_49:
      AudioUnitParameterOptions v18 = flags | v7;
LABEL_50:
      uint64_t result = 0;
      buffer->AudioUnitParameterOptions flags = v18;
      break;
    default:
      uint64_t result = 4294956418;
      break;
  }
  return result;
}

uint64_t AUSpatialProbability::GetParameterList(AUSpatialProbability *this, int a2, unsigned int *a3, unsigned int *a4)
{
  if (a2) {
    return 4294956430;
  }
  if (a3)
  {
    *(_OWORD *)a3 = xmmword_1BB8727D0;
    *((_OWORD *)a3 + 1) = xmmword_1BB879D60;
    *((_OWORD *)a3 + 2) = xmmword_1BB879E40;
    *((_OWORD *)a3 + 3) = xmmword_1BB879E50;
    *((_OWORD *)a3 + 4) = xmmword_1BB879E60;
    *((_OWORD *)a3 + 5) = xmmword_1BB879E70;
    *((_OWORD *)a3 + 6) = xmmword_1BB87A9C0;
    *((void *)a3 + 14) = 0x1D0000001CLL;
  }
  uint64_t result = 0;
  *a4 = 30;
  return result;
}

uint64_t AUSpatialProbability::Render(AUSpatialProbability *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  v16[1] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = (AUSpatialProbability *)((char *)this + 80);
  uint64_t Element = ausdk::AUScope::GetElement((AUSpatialProbability *)((char *)this + 80), 0);
  if (Element && *(_DWORD *)(Element + 172))
  {
    CFStringRef v10 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 0);
    uint64_t result = ausdk::AUInputElement::PullInput(v10, a2, a3, 0, a4);
    if (!result)
    {
      AudioUnitParameterValue v12 = (ausdk::AUIOElement *)ausdk::AUScope::SafeGetElement((AUSpatialProbability *)((char *)this + 128), 0);
      v16[0] = ausdk::AUIOElement::PrepareBuffer(v12, a4);
      uint64_t v13 = ausdk::AUScope::SafeGetElement(v8, 0);
      uint64_t BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v13 + 144));
      return (*(uint64_t (**)(AUSpatialProbability *, unsigned int *, uint64_t, uint64_t, uint64_t *, uint64_t, void *))(*(void *)this + 184))(this, a2, a4, 1, &BufferList, 1, v16);
    }
  }
  else
  {
    UInt32 v14 = (ausdk::AUIOElement *)ausdk::AUScope::SafeGetElement((AUSpatialProbability *)((char *)this + 128), 0);
    ausdk::AUIOElement::PrepareBuffer(v14, a4);
    return 0;
  }
  return result;
}

uint64_t AUSpatialProbability::ProcessMultipleBufferLists(AUSpatialProbability *this, unsigned int *a2, int a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = *((void *)this + 66);
  if (*((void *)this + 67) != v11)
  {
    AUSpatialProbability::UpdateState(this);
    *((void *)this + 67) = v11;
  }
  if (*((void *)this + 91)
    && (*((void *)this + 68) != *((void *)this + 69) || *((void *)this + 70) != *((void *)this + 71)))
  {
    AUSpatialProbability::UpdateKappaState(this);
  }
  if (*((_DWORD *)this + 145) != a3) {
    return 4294956422;
  }
  AudioUnitParameterValue v12 = (int *)*a5;
  if (!*a5)
  {
    if (AUSpatialProbabilityLogScope(void)::once != -1) {
      dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
    }
    if (AUSpatialProbabilityLogScope(void)::scope)
    {
      AudioUnitParameterOptions v17 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
      if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
        return 4294956420;
      }
    }
    else
    {
      AudioUnitParameterOptions v17 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v51.UInt32 mNumberBuffers = 136315394;
      *(void *)(&v51.mNumberBuffers + 1) = "AUSpatialProbability.cpp";
      LOWORD(v51.mBuffers[0].mDataByteSize) = 1024;
      *(UInt32 *)((char *)&v51.mBuffers[0].mDataByteSize + 2) = 1671;
      _os_log_impl(&dword_1BB0CE000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d InputSignals cannot be NULL. It is a required input.\n", (uint8_t *)&v51, 0x12u);
    }
    return 4294956420;
  }
  int v13 = *v12;
  if (*v12 != *((_DWORD *)this + 148))
  {
    if (AUSpatialProbabilityLogScope(void)::once != -1) {
      dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
    }
    if (AUSpatialProbabilityLogScope(void)::scope)
    {
      AudioUnitParameterOptions v18 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
      if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
        return 4294956428;
      }
    }
    else
    {
      AudioUnitParameterOptions v18 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      int v19 = *((_DWORD *)this + 148);
      v51.UInt32 mNumberBuffers = 136315650;
      *(void *)(&v51.mNumberBuffers + 1) = "AUSpatialProbability.cpp";
      LOWORD(v51.mBuffers[0].mDataByteSize) = 1024;
      *(UInt32 *)((char *)&v51.mBuffers[0].mDataByteSize + 2) = 1678;
      WORD1(v51.mBuffers[0].mData) = 1024;
      HIDWORD(v51.mBuffers[0].mData) = v19;
      CFStringRef v20 = "%25s:%-5d Number of channels on the input bus in not matching the expected number of channels (%u).\n";
LABEL_52:
      _os_log_impl(&dword_1BB0CE000, v18, OS_LOG_TYPE_ERROR, v20, (uint8_t *)&v51, 0x18u);
    }
    return 4294956428;
  }
  if (*a7 && (*a7)->mNumberBuffers != v13)
  {
    if (AUSpatialProbabilityLogScope(void)::once != -1) {
      dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
    }
    if (AUSpatialProbabilityLogScope(void)::scope)
    {
      AudioUnitParameterOptions v18 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
      if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
        return 4294956428;
      }
    }
    else
    {
      AudioUnitParameterOptions v18 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      int v23 = *((_DWORD *)this + 148);
      v51.UInt32 mNumberBuffers = 136315650;
      *(void *)(&v51.mNumberBuffers + 1) = "AUSpatialProbability.cpp";
      LOWORD(v51.mBuffers[0].mDataByteSize) = 1024;
      *(UInt32 *)((char *)&v51.mBuffers[0].mDataByteSize + 2) = 1689;
      WORD1(v51.mBuffers[0].mData) = 1024;
      HIDWORD(v51.mBuffers[0].mData) = v23;
      CFStringRef v20 = "%25s:%-5d Number of channels on the output bus in not matching the expected number of channels (%u).\n";
      goto LABEL_52;
    }
    return 4294956428;
  }
  float v43 = a7;
  __int16 v44 = 0;
  *(void *)&v51.UInt32 mNumberBuffers = *((void *)this + 73);
  v51.mBuffers[0] = (AudioBuffer)xmmword_1BB8727B0;
  int v52 = 4;
  int v53 = v13;
  uint64_t v54 = 32;
  AudioDSP::Utility::DetectNonFinites((AudioDSP::Utility *)(2 * a3), v12, &v51, (const AudioStreamBasicDescription *)((char *)&v44 + 1), (BOOL *)a5);
  if (!*((unsigned char *)this + 576) && (!HIBYTE(v44) || !*((unsigned char *)this + 596)))
  {
    vDSP_Length v21 = (*((_DWORD *)this + 145) + 1);
    float v22 = (const void **)*((void *)this + 91);
    if (*((unsigned char *)this + 696))
    {
      memcpy(*((void **)this + 111), v22[35], 4 * (*((_DWORD *)this + 145) + 1));
      vDSP_vclr(*((float **)this + 114), 1, v21);
      vDSP_meanv(*((const float **)this + 111), 1, (float *)this + 171, v21);
      *((_DWORD *)this + 172) = 0;
      *((float *)this + 173) = 1.0 - *((float *)this + 171);
      memcpy(*((void **)this + 117), *((const void **)this + 105), 4 * v21);
    }
    else
    {
      (*((void (**)(const void **, void))*v22 + 6))(v22, *a5);
      memcpy(*((void **)this + 111), *(const void **)(*((void *)this + 91) + 304), 4 * v21);
      memcpy(*((void **)this + 114), *(const void **)(*((void *)this + 91) + 328), 4 * v21);
      uint64_t v24 = *((void *)this + 91);
      *(void *)((char *)this + 684) = *(void *)(v24 + 352);
      *((_DWORD *)this + 173) = *(_DWORD *)(v24 + 360);
      int v25 = *((_DWORD *)this + 167);
      switch(v25)
      {
        case 2:
          HIDWORD(v45) = 1065353216;
          vDSP_vfill((const float *)&v45 + 1, *((float **)this + 117), 1, v21);
          vDSP_vsub(*((const float **)this + 114), 1, *((const float **)this + 117), 1, *((float **)this + 117), 1, v21);
          vDSP_vthr(*((const float **)this + 117), 1, (const float *)this + 168, *((float **)this + 117), 1, v21);
          break;
        case 1:
          HIDWORD(v45) = 0;
          vDSP_meanv(*((const float **)this + 111), 1, (float *)&v45 + 1, *((unsigned int *)this + 145));
          float v26 = *((float *)&v45 + 1);
          float v27 = *((float *)this + 180);
          float v28 = 0.0;
          if (v27 != 0.0)
          {
            float v29 = *((double *)this + 73);
            float v28 = expf((float)((float)-(float)*((unsigned int *)this + 145) / v29) / v27);
          }
          float v30 = (float)(v28
                      * *(float *)&AUSpatialProbability::UpdateProbabilitiesAndPostMask(AudioBufferList const&)::SPPHangover)
              + (float)((float)(1.0 - v28) * v26);
          if (v26 >= *(float *)&AUSpatialProbability::UpdateProbabilitiesAndPostMask(AudioBufferList const&)::SPPHangover) {
            float v30 = v26;
          }
          AUSpatialProbability::UpdateProbabilitiesAndPostMask(AudioBufferList const&)::SPPHangover = LODWORD(v30);
          if (v30 >= *((float *)this + 179)) {
            vDSP_vthr(*((const float **)this + 111), 1, (const float *)this + 168, *((float **)this + 117), 1, v21);
          }
          else {
            vDSP_vfill((const float *)this + 178, *((float **)this + 117), 1, v21);
          }
          break;
        case 0:
          HIDWORD(v45) = 1065353216;
          vDSP_vfill((const float *)&v45 + 1, *((float **)this + 117), 1, v21);
          break;
      }
      vDSP_vthr(*((const float **)this + 111), 1, (const float *)this + 175, *((float **)this + 111), 1, v21);
    }
    uint64_t v31 = (int *)*a5;
    uint64_t v32 = *v43;
    int v33 = *((_DWORD *)this + 145);
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpatialProbability *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(Element, 0x14u, *((float *)this + 171), 0);
    uint64_t v35 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpatialProbability *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v35, 0x15u, *((float *)this + 172), 0);
    int v36 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpatialProbability *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v36, 0x16u, *((float *)this + 173), 0);
    if (v32->mNumberBuffers)
    {
      unint64_t v38 = 0;
      vDSP_Length v39 = (v33 + 1);
      vDSP_Length v40 = (v33 - 1);
      uint64_t v41 = 4;
      do
      {
        vDSP_vmul(*((const float **)this + 117), 1, *(const float **)&v31[v41], 1, *(float **)((char *)&v32->mNumberBuffers + v41 * 4), 1, v39);
        vDSP_vmul((const float *)(*((void *)this + 117) + 4), 1, (const float *)(*(void *)&v31[v41] + 4 * v39), 1, (float *)(*(void *)((char *)&v32->mNumberBuffers + v41 * 4) + 4 * v39), 1, v40);
        ++v38;
        v41 += 4;
      }
      while (v38 < v32->mNumberBuffers);
    }
    AudioDSP::Utility::DetectNonFinites((AudioDSP::Utility *)(2 * a3), *v43, &v51, (const AudioStreamBasicDescription *)&v44, v37);
    if (!(_BYTE)v44 || !*((unsigned char *)this + 596)) {
      return 0;
    }
    if (AUSpatialProbabilityLogScope(void)::once != -1) {
      dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
    }
    if (AUSpatialProbabilityLogScope(void)::scope)
    {
      float v42 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
      if (!*(void *)AUSpatialProbabilityLogScope(void)::scope)
      {
LABEL_80:
        AUSpatialProbability::InitializeSpatialProbabilityClasses(this);
        CopyBufferList(&(*a5)->mNumberBuffers, *v43);
        return 0;
      }
    }
    else
    {
      float v42 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      HIDWORD(v45) = 136315650;
      uint64_t v46 = "AUSpatialProbability.cpp";
      __int16 v47 = 1024;
      int v48 = 1735;
      __int16 v49 = 1024;
      int v50 = v44;
      _os_log_impl(&dword_1BB0CE000, v42, OS_LOG_TYPE_ERROR, "%25s:%-5d (OutputSignals) is NOT finite: (%u)\n", (uint8_t *)&v45 + 4, 0x18u);
    }
    goto LABEL_80;
  }
  CopyBufferList(&(*a5)->mNumberBuffers, *a7);
  uint64_t v45 = 0x3F80000000000000;
  vDSP_Length v14 = (*((_DWORD *)this + 145) + 1);
  vDSP_vfill((const float *)&v45 + 1, *((float **)this + 117), 1, v14);
  vDSP_vfill((const float *)&v45 + 1, *((float **)this + 111), 1, v14);
  vDSP_vfill((const float *)&v45, *((float **)this + 114), 1, v14);
  if (HIBYTE(v44))
  {
    if (AUSpatialProbabilityLogScope(void)::once != -1) {
      dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
    }
    if (AUSpatialProbabilityLogScope(void)::scope)
    {
      AudioUnitParameterUnit v15 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
      if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
        return 0;
      }
    }
    else
    {
      AudioUnitParameterUnit v15 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HIDWORD(v45) = 136315650;
      uint64_t v46 = "AUSpatialProbability.cpp";
      __int16 v47 = 1024;
      int v48 = 1716;
      __int16 v49 = 1024;
      int v50 = HIBYTE(v44);
      _os_log_impl(&dword_1BB0CE000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d (InputSignals) is NOT finite: (%u)\n", (uint8_t *)&v45 + 4, 0x18u);
    }
  }
  return 0;
}

uint64_t AUSpatialProbability::UpdateState(AUSpatialProbability *this)
{
  uint64_t v2 = (AUSpatialProbability *)((char *)this + 32);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpatialProbability *)((char *)this + 32), 0);
  *((_DWORD *)this + 150) = (int)ausdk::AUElement::GetParameter(Element, 0);
  int16x8_t v4 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 151) = ausdk::AUElement::GetParameter(v4, 1u);
  int16x8_t v5 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 152) = ausdk::AUElement::GetParameter(v5, 2u);
  CFIndex v6 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 153) = ausdk::AUElement::GetParameter(v6, 3u);
  int v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((_DWORD *)this + 154) = (int)ausdk::AUElement::GetParameter(v7, 4u);
  uint64_t v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((_DWORD *)this + 155) = (int)ausdk::AUElement::GetParameter(v8, 5u);
  uint64_t v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((_DWORD *)this + 156) = (int)ausdk::AUElement::GetParameter(v9, 6u);
  CFStringRef v10 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((_DWORD *)this + 157) = (int)ausdk::AUElement::GetParameter(v10, 7u);
  uint64_t v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 158) = ausdk::AUElement::GetParameter(v11, 8u);
  AudioUnitParameterValue v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 159) = ausdk::AUElement::GetParameter(v12, 9u);
  int v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((_DWORD *)this + 160) = (int)ausdk::AUElement::GetParameter(v13, 0xAu);
  vDSP_Length v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 161) = ausdk::AUElement::GetParameter(v14, 0xBu);
  AudioUnitParameterUnit v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 162) = ausdk::AUElement::GetParameter(v15, 0xCu);
  CFStringRef v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((unsigned char *)this + 652) = ausdk::AUElement::GetParameter(v16, 0xDu) != 0.0;
  AudioUnitParameterOptions v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 164) = ausdk::AUElement::GetParameter(v17, 0xEu);
  AudioUnitParameterOptions v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 166) = ausdk::AUElement::GetParameter(v18, 0xFu);
  int v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((_DWORD *)this + 167) = (int)ausdk::AUElement::GetParameter(v19, 0x10u);
  CFStringRef v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float Parameter = ausdk::AUElement::GetParameter(v20, 0x11u);
  float v22 = 1.0;
  float v23 = 1.0;
  if (Parameter != 0.0) {
    float v23 = __exp10f(Parameter / 20.0);
  }
  *((float *)this + 168) = v23;
  uint64_t v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 169) = ausdk::AUElement::GetParameter(v24, 0x12u);
  int v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 170) = ausdk::AUElement::GetParameter(v25, 0x13u);
  float v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 171) = ausdk::AUElement::GetParameter(v26, 0x14u);
  float v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 172) = ausdk::AUElement::GetParameter(v27, 0x15u);
  float v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 173) = ausdk::AUElement::GetParameter(v28, 0x16u);
  float v29 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((unsigned char *)this + 696) = ausdk::AUElement::GetParameter(v29, 0x17u) != 0.0;
  float v30 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v31 = ausdk::AUElement::GetParameter(v30, 0x18u);
  if (v31 != 0.0) {
    float v22 = __exp10f(v31 / 20.0);
  }
  *((float *)this + 175) = v22;
  uint64_t v32 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 176) = ausdk::AUElement::GetParameter(v32, 0x19u);
  int v33 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((_DWORD *)this + 177) = ausdk::AUElement::GetParameter(v33, 0x1Au);
  uint64_t v34 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v35 = ausdk::AUElement::GetParameter(v34, 0x1Bu);
  float v36 = 1.0;
  if (v35 != 0.0) {
    float v36 = __exp10f(v35 / 20.0);
  }
  *((float *)this + 178) = v36;
  int v37 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 179) = ausdk::AUElement::GetParameter(v37, 0x1Cu);
  unint64_t v38 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 180) = ausdk::AUElement::GetParameter(v38, 0x1Du);
  vDSP_Length v39 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v40 = ausdk::AUElement::GetParameter(v39, 0xEu);
  float v41 = 0.0;
  if (v40 != 0.0)
  {
    float v42 = *((double *)this + 73);
    float v41 = expf((float)((float)-(float)*((unsigned int *)this + 145) / v42) / v40);
  }
  *((float *)this + 165) = v41;
  uint64_t result = *((void *)this + 91);
  if (result)
  {
    (*(void (**)(uint64_t, float))(*(void *)result + 56))(result, *((float *)this + 151));
    (*(void (**)(void, float))(**((void **)this + 91) + 64))(*((void *)this + 91), *((float *)this + 152));
    uint64_t result = (*(uint64_t (**)(void, float))(**((void **)this + 91) + 72))(*((void *)this + 91), *((float *)this + 153));
    if (*((void *)this + 91))
    {
      if (*((void *)this + 68) != *((void *)this + 69) || *((void *)this + 70) != *((void *)this + 71))
      {
        return AUSpatialProbability::UpdateKappaState(this);
      }
    }
  }
  return result;
}

uint64_t AUSpatialProbability::UpdateKappaState(AUSpatialProbability *this)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 91);
  *(_OWORD *)(v2 + 16) = *((_OWORD *)this + 34);
  *(_OWORD *)(v2 + 32) = *((_OWORD *)this + 35);
  float v3 = *((float *)this + 158);
  if (v3 >= 0.0 && *(float *)(v2 + 56) <= v3)
  {
    *(float *)(v2 + 52) = v3;
  }
  else
  {
    if (AUSpatialProbabilityLogScope(void)::once != -1) {
      dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
    }
    if (AUSpatialProbabilityLogScope(void)::scope)
    {
      int16x8_t v4 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
      if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
        goto LABEL_12;
      }
    }
    else
    {
      int16x8_t v4 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      double v5 = *(float *)(v2 + 52);
      double v6 = *(float *)(v2 + 56);
      int v17 = 136316162;
      AudioUnitParameterOptions v18 = "SpatialProbabilityBase.cpp";
      __int16 v19 = 1024;
      int v20 = 300;
      __int16 v21 = 2048;
      double v22 = v3;
      __int16 v23 = 2048;
      double v24 = v5;
      __int16 v25 = 2048;
      double v26 = v6;
      _os_log_impl(&dword_1BB0CE000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d SpatialProbabilityBase: Shape parameter max not set to (%f), it remains at the current value (%f). KappaMax should be >= (%f).\n", (uint8_t *)&v17, 0x30u);
    }
  }
LABEL_12:
  uint64_t v7 = *((void *)this + 91);
  float v8 = *((float *)this + 159);
  if (v8 >= 0.0 && *(float *)(v7 + 52) >= v8)
  {
    *(float *)(v7 + 56) = v8;
    goto LABEL_23;
  }
  if (AUSpatialProbabilityLogScope(void)::once != -1) {
    dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
  }
  if (AUSpatialProbabilityLogScope(void)::scope)
  {
    uint64_t v9 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
    if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
      goto LABEL_23;
    }
  }
  else
  {
    uint64_t v9 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    double v10 = *(float *)(v7 + 56);
    double v11 = *(float *)(v7 + 52);
    int v17 = 136316162;
    AudioUnitParameterOptions v18 = "SpatialProbabilityBase.cpp";
    __int16 v19 = 1024;
    int v20 = 315;
    __int16 v21 = 2048;
    double v22 = v8;
    __int16 v23 = 2048;
    double v24 = v10;
    __int16 v25 = 2048;
    double v26 = v11;
    _os_log_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d SpatialProbabilityBase: Shape parameter min not set to (%f), it remains at the current value (%f). KappaMin should be in range [0, %f].\n", (uint8_t *)&v17, 0x30u);
  }
LABEL_23:
  SpatialProbabilityBase::SetPriorProbabilities(*((SpatialProbabilityBase **)this + 91), *((float *)this + 161), *((float *)this + 162));
  uint64_t result = (*(uint64_t (**)(void, float))(**((void **)this + 91) + 88))(*((void *)this + 91), *((float *)this + 165));
  uint64_t v13 = *((void *)this + 91);
  *(void *)(v13 + 392) = *(void *)((char *)this + 676);
  unsigned int v14 = *((_DWORD *)this + 145);
  float v15 = (float)*((double *)this + 73) / ((float)v14 + (float)v14);
  unsigned int v16 = vcvtas_u32_f32(fabsf(*((float *)this + 176) / v15));
  if (v16 >= v14) {
    unsigned int v16 = *((_DWORD *)this + 145);
  }
  *(_DWORD *)(v13 + 88) = v16;
  *((void *)this + 69) = *((void *)this + 68);
  *((void *)this + 71) = *((void *)this + 70);
  return result;
}

void AUSpatialProbability::InitializeSpatialProbabilityClasses(AUSpatialProbability *this)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (AUSpatialProbabilityLogScope(void)::once != -1) {
    dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
  }
  if (AUSpatialProbabilityLogScope(void)::scope)
  {
    uint64_t v2 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
    if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int buf = 136315394;
    buf_4 = "AUSpatialProbability.cpp";
    __int16 v11 = 1024;
    int v12 = 2028;
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Initialize Spatial Probability Classes.\n", (uint8_t *)&buf, 0x12u);
  }
LABEL_9:
  int v3 = *((_DWORD *)this + 145);
  (*(void (**)(AUSpatialProbability *))(*(void *)this + 64))(this);
  unint64_t v4 = (v3 + 1);
  int v5 = *((_DWORD *)this + 150);
  switch(v5)
  {
    case 2:
      if (AUSpatialProbabilityLogScope(void)::once != -1) {
        dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
      }
      if (AUSpatialProbabilityLogScope(void)::scope)
      {
        float v8 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
        if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
          goto LABEL_34;
        }
      }
      else
      {
        float v8 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        int buf = 136315394;
        buf_4 = "AUSpatialProbability.cpp";
        __int16 v11 = 1024;
        int v12 = 2120;
        _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d Create SV-based estimator (external SV)\n", (uint8_t *)&buf, 0x12u);
      }
LABEL_34:
      operator new();
    case 1:
      if (AUSpatialProbabilityLogScope(void)::once != -1) {
        dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
      }
      if (AUSpatialProbabilityLogScope(void)::scope)
      {
        uint64_t v7 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
        if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v7 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        int buf = 136315394;
        buf_4 = "AUSpatialProbability.cpp";
        __int16 v11 = 1024;
        int v12 = 2064;
        _os_log_impl(&dword_1BB0CE000, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d Create SV-based estimator (SV dictionary)\n", (uint8_t *)&buf, 0x12u);
      }
LABEL_30:
      operator new();
    case 0:
      if (AUSpatialProbabilityLogScope(void)::once != -1) {
        dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
      }
      if (AUSpatialProbabilityLogScope(void)::scope)
      {
        double v6 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
        if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
          goto LABEL_38;
        }
      }
      else
      {
        double v6 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        int buf = 136315394;
        buf_4 = "AUSpatialProbability.cpp";
        __int16 v11 = 1024;
        int v12 = 2039;
        _os_log_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d Create DOA-based estimator\n", (uint8_t *)&buf, 0x12u);
      }
LABEL_38:
      operator new();
  }
  *((void *)this + 94) = *((void *)this + 93);
  std::vector<float>::resize((uint64_t)this + 744, (2 * v4));
  *((void *)this + 97) = *((void *)this + 96);
  std::vector<float>::resize((uint64_t)this + 768, v4);
  *((void *)this + 100) = *((void *)this + 99);
  std::vector<float>::resize((uint64_t)this + 792, (*((_DWORD *)this + 148) * 2 * v4));
  *((void *)this + 103) = *((void *)this + 102);
  std::vector<float>::resize((uint64_t)this + 816, v4);
  *((void *)this + 106) = *((void *)this + 105);
  std::vector<float>::resize((uint64_t)this + 840, v4);
  *((void *)this + 112) = *((void *)this + 111);
  std::vector<float>::resize((uint64_t)this + 888, v4);
  *((void *)this + 115) = *((void *)this + 114);
  std::vector<float>::resize((uint64_t)this + 912, v4);
  *((void *)this + 118) = *((void *)this + 117);
  std::vector<float>::resize((uint64_t)this + 936, v4);
}

void sub_1BB48940C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, void **a11, uint64_t *a12, void **a13, void **a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43)
{
  uint64_t v46 = *a10;
  if (*a10)
  {
    v43[22] = v46;
    operator delete(v46);
  }
  __int16 v47 = *a9;
  if (*a9)
  {
    v43[18] = v47;
    operator delete(v47);
  }
  int v48 = *a11;
  if (*a11)
  {
    v43[14] = v48;
    operator delete(v48);
  }
  __int16 v49 = (void *)v43[9];
  if (v49)
  {
    v43[10] = v49;
    operator delete(v49);
  }
  uint64_t v50 = v43[8];
  v43[8] = 0;
  if (v50) {
    (*(void (**)(uint64_t))(*(void *)v50 + 8))(v50);
  }
  uint64_t v51 = *a12;
  *a12 = 0;
  if (v51) {
    (*(void (**)(uint64_t))(*(void *)v51 + 8))(v51);
  }
  if (a37 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C185D370](v43, 0x10A1C403A5A1335);
  operator delete(a20);
  int v52 = *a13;
  if (*a13)
  {
    *((void *)v44 + 72) = v52;
    operator delete(v52);
  }
  int v53 = *a14;
  if (*a14)
  {
    *((void *)v44 + 69) = v53;
    operator delete(v53);
  }
  uint64_t v54 = *((void *)v44 + 67);
  *((void *)v44 + 67) = 0;
  if (v54) {
    (*(void (**)(uint64_t))(*(void *)v54 + 8))(v54);
  }
  uint64_t v55 = *a15;
  if (*a15)
  {
    *((void *)v44 + 65) = v55;
    operator delete(v55);
  }
  uint64_t v56 = *((void *)v44 + 60);
  *((void *)v44 + 60) = 0;
  if (v56) {
    (*(void (**)(uint64_t))(*(void *)v56 + 24))(v56);
  }
  uint64_t v57 = *((void *)v44 + 59);
  *((void *)v44 + 59) = 0;
  if (v57) {
    (*(void (**)(uint64_t))(*(void *)v57 + 24))(v57);
  }
  uint64_t v58 = *a19;
  *a19 = 0;
  if (v58) {
    (*(void (**)(uint64_t))(*(void *)v58 + 24))(v58);
  }
  SpatialProbabilityBase::~SpatialProbabilityBase(v44);
  MEMORY[0x1C185D370](v44, 0x10A1C400B54FBFBLL);
  _Unwind_Resume(a1);
}

uint64_t AUSpatialProbability::CanScheduleParameters(AUSpatialProbability *this)
{
  return 0;
}

uint64_t AUSpatialProbability::SetParameter(AUSpatialProbability *this, unsigned int a2, int a3, float a4)
{
  if (a3) {
    return 4294956418;
  }
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpatialProbability *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(Element, a2, a4, 0);
  uint64_t result = 0;
  ++*((void *)this + 66);
  if (a2 <= 0x19 && ((1 << a2) & 0x20C5B80) != 0)
  {
    uint64_t result = 0;
    ++*((void *)this + 68);
  }
  return result;
}

uint64_t AUSpatialProbability::SetProperty(AUSpatialProbability *this, int a2, int a3, unsigned int a4, const __CFDictionary **__src, size_t __n)
{
  uint64_t v125 = *MEMORY[0x1E4F143B8];
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 <= 107300)
  {
    switch(a2)
    {
      case 7301:
        if (__n != 8 * (*((_DWORD *)this + 145) + 1))
        {
          if (AUSpatialProbabilityLogScope(void)::once != -1) {
            dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
          }
          if (AUSpatialProbabilityLogScope(void)::scope)
          {
            double v26 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
            if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
              return 4294956445;
            }
          }
          else
          {
            double v26 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 136315650;
            *(void *)&uint8_t buf[4] = "AUSpatialProbability.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 497;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = 7301;
            uint64_t v46 = "%25s:%-5d Input size of SpatialProbabilityInputSubbandDOA is not equal to the expected size (prop id: %u).\n";
            goto LABEL_259;
          }
          return 4294956445;
        }
        (*(void (**)(void, const __CFDictionary **, size_t))(**((void **)this + 91) + 80))(*((void *)this + 91), __src, __n);
        if (!*((_DWORD *)this + 150)) {
          return 0;
        }
        if (AUSpatialProbabilityLogScope(void)::once != -1) {
          dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
        }
        if (AUSpatialProbabilityLogScope(void)::scope)
        {
          uint64_t v9 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
          if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
            return 0;
          }
        }
        else
        {
          uint64_t v9 = MEMORY[0x1E4F14500];
        }
        BOOL v57 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
        uint64_t result = 0;
        if (v57)
        {
          int v58 = *((_DWORD *)this + 150);
          *(_DWORD *)int buf = 136315650;
          *(void *)&uint8_t buf[4] = "AUSpatialProbability.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 507;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v58;
          float v59 = "%25s:%-5d Subband DOA is only used for the DOA mode. Current mode is (%d)";
          goto LABEL_329;
        }
        return result;
      case 7302:
      case 7305:
        goto LABEL_13;
      case 7303:
LABEL_66:
        if (__n != 8
                                * *((unsigned int *)this + 148)
                                * (unint64_t)(*((_DWORD *)this + 145) + 1))
        {
          if (AUSpatialProbabilityLogScope(void)::once != -1) {
            dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
          }
          if (AUSpatialProbabilityLogScope(void)::scope)
          {
            double v26 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
            if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
              return 4294956445;
            }
          }
          else
          {
            double v26 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 136315650;
            *(void *)&uint8_t buf[4] = "AUSpatialProbability.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 544;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = 7303;
            uint64_t v46 = "%25s:%-5d Input size of SpatialProbabilityInputSteeringVector is not equal to the expected size (prop id: %u).\n";
            goto LABEL_259;
          }
          return 4294956445;
        }
        (*(void (**)(void, const __CFDictionary **, size_t))(**((void **)this + 91) + 112))(*((void *)this + 91), __src, __n);
        int v25 = *((_DWORD *)this + 150);
        if (v25 == 1)
        {
          if (AUSpatialProbabilityLogScope(void)::once != -1) {
            dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
          }
          if (AUSpatialProbabilityLogScope(void)::scope)
          {
            uint64_t v9 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
            if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
              return 0;
            }
          }
          else
          {
            uint64_t v9 = MEMORY[0x1E4F14500];
          }
          BOOL v62 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0;
          if (v62)
          {
            int v63 = *((_DWORD *)this + 150);
            *(_DWORD *)int buf = 136315650;
            *(void *)&uint8_t buf[4] = "AUSpatialProbability.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 558;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v63;
            float v59 = "%25s:%-5d Steering vector loaded from plist will be overwritten in the current mode. Current mode is (%d)";
            goto LABEL_329;
          }
        }
        else
        {
          if (v25) {
            return 0;
          }
          if (AUSpatialProbabilityLogScope(void)::once != -1) {
            dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
          }
          if (AUSpatialProbabilityLogScope(void)::scope)
          {
            uint64_t v9 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
            if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
              return 0;
            }
          }
          else
          {
            uint64_t v9 = MEMORY[0x1E4F14500];
          }
          BOOL v60 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0;
          if (v60)
          {
            int v61 = *((_DWORD *)this + 150);
            *(_DWORD *)int buf = 136315650;
            *(void *)&uint8_t buf[4] = "AUSpatialProbability.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 554;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v61;
            float v59 = "%25s:%-5d Steering vector is not used in the current mode. Current mode is (%d)";
            goto LABEL_329;
          }
        }
        return result;
      case 7304:
LABEL_58:
        if (AUSpatialProbabilityLogScope(void)::once != -1) {
          dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
        }
        if (__src)
        {
          if (AUSpatialProbabilityLogScope(void)::scope)
          {
            double v24 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
            if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
              goto LABEL_157;
            }
          }
          else
          {
            double v24 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)int buf = 136315394;
            *(void *)&uint8_t buf[4] = "AUSpatialProbability.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 611;
            _os_log_impl(&dword_1BB0CE000, v24, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Steering vector to be loaded from a plist.", buf, 0x12u);
            uint64_t v47 = AUSpatialProbabilityLogScope(void)::once;
            CFDictionaryRef v48 = *__src;
            uint64_t v49 = *((void *)this + 92);
            unsigned int v50 = *((_DWORD *)this + 177);
            *(unsigned char *)(v49 + 60) = 0;
            uint64_t v51 = (unsigned char *)(v49 + 60);
            int v122 = 0;
            if (v47 != -1) {
              dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
            }
LABEL_158:
            if (AUSpatialProbabilityLogScope(void)::scope)
            {
              int v52 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
              if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
                goto LABEL_164;
              }
            }
            else
            {
              int v52 = MEMORY[0x1E4F14500];
            }
            if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)int buf = 136315394;
              *(void *)&uint8_t buf[4] = "SVBasedProbability.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 220;
              _os_log_impl(&dword_1BB0CE000, v52, OS_LOG_TYPE_INFO, "%25s:%-5d Loading sampleRate from topLevelDict.\n", buf, 0x12u);
            }
LABEL_164:
            if (DictionaryBlobReader::ReadScalarFromDictionary<unsigned int>(*(uint64_t ***)(v49 + 64), v48, @"SampleRate", &v122))
            {
              if (AUSpatialProbabilityLogScope(void)::once != -1) {
                dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
              }
              if (AUSpatialProbabilityLogScope(void)::scope)
              {
                int v53 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
                if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
                  goto LABEL_317;
                }
              }
              else
              {
                int v53 = MEMORY[0x1E4F14500];
              }
              if (!os_log_type_enabled(v53, OS_LOG_TYPE_ERROR)) {
                goto LABEL_317;
              }
              *(_DWORD *)int buf = 136315394;
              *(void *)&uint8_t buf[4] = "SVBasedProbability.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 225;
              uint64_t v55 = "%25s:%-5d Failed to load the sampling rate from the plist.\n";
LABEL_316:
              _os_log_impl(&dword_1BB0CE000, v53, OS_LOG_TYPE_ERROR, v55, buf, 0x12u);
              goto LABEL_317;
            }
            unsigned int v121 = 0;
            if (AUSpatialProbabilityLogScope(void)::once != -1) {
              dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
            }
            if (AUSpatialProbabilityLogScope(void)::scope)
            {
              uint64_t v54 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
              if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
                goto LABEL_219;
              }
            }
            else
            {
              uint64_t v54 = MEMORY[0x1E4F14500];
            }
            if (os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)int buf = 136315394;
              *(void *)&uint8_t buf[4] = "SVBasedProbability.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 231;
              _os_log_impl(&dword_1BB0CE000, v54, OS_LOG_TYPE_INFO, "%25s:%-5d Loading nMicsUsed from topLevelDict.\n", buf, 0x12u);
            }
LABEL_219:
            if (DictionaryBlobReader::ReadScalarFromDictionary<unsigned int>(*(uint64_t ***)(v49 + 64), v48, @"nMicsUsed", &v121))
            {
              if (AUSpatialProbabilityLogScope(void)::once != -1) {
                dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
              }
              if (AUSpatialProbabilityLogScope(void)::scope)
              {
                int v53 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
                if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
                  goto LABEL_317;
                }
              }
              else
              {
                int v53 = MEMORY[0x1E4F14500];
              }
              if (!os_log_type_enabled(v53, OS_LOG_TYPE_ERROR)) {
                goto LABEL_317;
              }
              *(_DWORD *)int buf = 136315394;
              *(void *)&uint8_t buf[4] = "SVBasedProbability.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 236;
              uint64_t v55 = "%25s:%-5d Failed to load the number of mics from the plist.\n";
              goto LABEL_316;
            }
            int v120 = 0;
            if (AUSpatialProbabilityLogScope(void)::once != -1) {
              dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
            }
            if (AUSpatialProbabilityLogScope(void)::scope)
            {
              uint64_t v56 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
              if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
                goto LABEL_268;
              }
            }
            else
            {
              uint64_t v56 = MEMORY[0x1E4F14500];
            }
            if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)int buf = 136315394;
              *(void *)&uint8_t buf[4] = "SVBasedProbability.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 242;
              _os_log_impl(&dword_1BB0CE000, v56, OS_LOG_TYPE_INFO, "%25s:%-5d Loading nCoefficients from topLevelDict.\n", buf, 0x12u);
            }
LABEL_268:
            if (DictionaryBlobReader::ReadScalarFromDictionary<unsigned int>(*(uint64_t ***)(v49 + 64), v48, @"nCoefficients", &v120))
            {
              if (AUSpatialProbabilityLogScope(void)::once != -1) {
                dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
              }
              if (AUSpatialProbabilityLogScope(void)::scope)
              {
                int v53 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
                if (!*(void *)AUSpatialProbabilityLogScope(void)::scope)
                {
LABEL_317:
                  if (AUSpatialProbabilityLogScope(void)::once != -1) {
                    dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
                  }
                  if (AUSpatialProbabilityLogScope(void)::scope)
                  {
                    uint64_t v27 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
                    if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
                      return 4294956445;
                    }
                  }
                  else
                  {
                    uint64_t v27 = MEMORY[0x1E4F14500];
                  }
                  if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)int buf = 136315394;
                    *(void *)&uint8_t buf[4] = "AUSpatialProbability.cpp";
                    *(_WORD *)&unsigned char buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 622;
                    uint64_t v46 = "%25s:%-5d Loading SteeringVectorDictionary was not successful.\n";
                    goto LABEL_325;
                  }
                  return 4294956445;
                }
              }
              else
              {
                int v53 = MEMORY[0x1E4F14500];
              }
              if (!os_log_type_enabled(v53, OS_LOG_TYPE_ERROR)) {
                goto LABEL_317;
              }
              *(_DWORD *)int buf = 136315394;
              *(void *)&uint8_t buf[4] = "SVBasedProbability.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 247;
              uint64_t v55 = "%25s:%-5d Failed to load the number of filter coefficients from the plist.\n";
              goto LABEL_316;
            }
            int v72 = v120;
            unint64_t v71 = v121;
            *(_DWORD *)(v49 + 48) = v121;
            int v73 = v122;
            *(_DWORD *)(v49 + 52) = v72;
            *(_DWORD *)(v49 + 56) = v73;
            std::vector<std::vector<float>>::resize((uint64_t *)v49, v71);
            std::vector<std::vector<float>>::resize((uint64_t *)(v49 + 24), *(unsigned int *)(v49 + 48));
            std::to_string((std::string *)buf, v50);
            uint64_t v74 = std::string::insert((std::string *)buf, 0, "Beam", 4uLL);
            long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
            int64_t v119 = v74->__r_.__value_.__r.__words[2];
            *(_OWORD *)std::string __p = v75;
            v74->__r_.__value_.__l.__size_ = 0;
            v74->__r_.__value_.__r.__words[2] = 0;
            v74->__r_.__value_.__r.__words[0] = 0;
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
            if (v119 >= 0) {
              uint64_t v76 = __p;
            }
            else {
              uint64_t v76 = (void **)__p[0];
            }
            CFStringRef v77 = CFStringCreateWithCString(0, (const char *)v76, 0x8000100u);
            CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v48, v77);
            if (Value)
            {
              if (AUSpatialProbabilityLogScope(void)::once != -1) {
                dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
              }
              if (AUSpatialProbabilityLogScope(void)::scope)
              {
                uint64_t v79 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
                if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
                  goto LABEL_343;
                }
              }
              else
              {
                uint64_t v79 = MEMORY[0x1E4F14500];
              }
              if (os_log_type_enabled(v79, OS_LOG_TYPE_INFO))
              {
                int v94 = __p;
                if (v119 < 0) {
                  int v94 = (void **)__p[0];
                }
                *(_DWORD *)int buf = 136315650;
                *(void *)&uint8_t buf[4] = "SVBasedProbability.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 275;
                *(_WORD *)&buf[18] = 2080;
                *(void *)&buf[20] = v94;
                _os_log_impl(&dword_1BB0CE000, v79, OS_LOG_TYPE_INFO, "%25s:%-5d Found the dictionary: %s\n", buf, 0x1Cu);
              }
LABEL_343:
              CFRelease(v77);
              CFDictionaryRef v95 = (const __CFDictionary *)CFDictionaryGetValue(Value, @"RealCoefficients");
              if (!v95)
              {
                if (AUSpatialProbabilityLogScope(void)::once != -1) {
                  dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
                }
                if (AUSpatialProbabilityLogScope(void)::scope)
                {
                  float v97 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
                  if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
                    goto LABEL_427;
                  }
                }
                else
                {
                  float v97 = MEMORY[0x1E4F14500];
                }
                if (os_log_type_enabled(v97, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)int buf = 136315394;
                  *(void *)&uint8_t buf[4] = "SVBasedProbability.cpp";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 284;
                  float v109 = "%25s:%-5d Missing dictionary RealCoefficients.\n";
LABEL_419:
                  _os_log_impl(&dword_1BB0CE000, v97, OS_LOG_TYPE_ERROR, v109, buf, 0x12u);
                }
LABEL_426:
                LOBYTE(v97) = 0;
                goto LABEL_427;
              }
              if (AUSpatialProbabilityLogScope(void)::once != -1) {
                dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
              }
              if (AUSpatialProbabilityLogScope(void)::scope)
              {
                int v96 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
                if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
                  goto LABEL_357;
                }
              }
              else
              {
                int v96 = MEMORY[0x1E4F14500];
              }
              if (os_log_type_enabled(v96, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)int buf = 136315394;
                *(void *)&uint8_t buf[4] = "SVBasedProbability.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 289;
                _os_log_impl(&dword_1BB0CE000, v96, OS_LOG_TYPE_INFO, "%25s:%-5d Found the dictionary RealCoefficients.\n", buf, 0x12u);
              }
LABEL_357:
              if (v121)
              {
                uint64_t v98 = 0;
                unint64_t v99 = 0;
                while (1)
                {
                  std::to_string(&v124, v99);
                  float v100 = std::string::insert(&v124, 0, "Mic", 3uLL);
                  long long v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
                  *(void *)&buf[16] = *((void *)&v100->__r_.__value_.__l + 2);
                  *(_OWORD *)int buf = v101;
                  v100->__r_.__value_.__l.__size_ = 0;
                  v100->__r_.__value_.__r.__words[2] = 0;
                  v100->__r_.__value_.__r.__words[0] = 0;
                  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v124.__r_.__value_.__l.__data_);
                  }
                  int v102 = buf[23] >= 0 ? buf : *(const char **)buf;
                  CFStringRef v103 = CFStringCreateWithCString(0, v102, 0x8000100u);
                  int VectorFromDictionary = DictionaryBlobReader::ReadVectorFromDictionary(*(NSObject ****)(v49 + 64), v95, v103, (char **)(*(void *)v49 + v98));
                  CFRelease(v103);
                  if (VectorFromDictionary) {
                    break;
                  }
                  if ((buf[23] & 0x80000000) != 0) {
                    operator delete(*(void **)buf);
                  }
                  ++v99;
                  v98 += 24;
                  if (v99 >= v121) {
                    goto LABEL_368;
                  }
                }
                if (AUSpatialProbabilityLogScope(void)::once != -1) {
                  dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
                }
                if (AUSpatialProbabilityLogScope(void)::scope)
                {
                  float v108 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
                  if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
                    goto LABEL_424;
                  }
                }
                else
                {
                  float v108 = MEMORY[0x1E4F14500];
                }
                if (!os_log_type_enabled(v108, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_424;
                }
                LODWORD(v124.__r_.__value_.__l.__data_) = 136315394;
                *(std::string::size_type *)((char *)v124.__r_.__value_.__r.__words + 4) = (std::string::size_type)"SVBasedProbability.cpp";
                WORD2(v124.__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&v124.__r_.__value_.__r.__words[1] + 6) = 301;
                uint64_t v117 = "%25s:%-5d Error loading RealCoefficients.\n";
                goto LABEL_423;
              }
LABEL_368:
              CFDictionaryRef v105 = (const __CFDictionary *)CFDictionaryGetValue(Value, @"ImagCoefficients");
              if (v105)
              {
                if (AUSpatialProbabilityLogScope(void)::once != -1) {
                  dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
                }
                if (AUSpatialProbabilityLogScope(void)::scope)
                {
                  int v106 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
                  if (!*(void *)AUSpatialProbabilityLogScope(void)::scope)
                  {
LABEL_396:
                    if (!v121)
                    {
LABEL_407:
                      LOBYTE(v97) = 1;
                      unsigned char *v51 = 1;
                      goto LABEL_427;
                    }
                    uint64_t v110 = 0;
                    unint64_t v111 = 0;
                    while (1)
                    {
                      std::to_string(&v124, v111);
                      float v112 = std::string::insert(&v124, 0, "Mic", 3uLL);
                      long long v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
                      *(void *)&buf[16] = *((void *)&v112->__r_.__value_.__l + 2);
                      *(_OWORD *)int buf = v113;
                      v112->__r_.__value_.__l.__size_ = 0;
                      v112->__r_.__value_.__r.__words[2] = 0;
                      v112->__r_.__value_.__r.__words[0] = 0;
                      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v124.__r_.__value_.__l.__data_);
                      }
                      uint64_t v114 = buf[23] >= 0 ? buf : *(const char **)buf;
                      CFStringRef v115 = CFStringCreateWithCString(0, v114, 0x8000100u);
                      int v116 = DictionaryBlobReader::ReadVectorFromDictionary(*(NSObject ****)(v49 + 64), v105, v115, (char **)(*(void *)(v49 + 24) + v110));
                      CFRelease(v115);
                      if (v116) {
                        break;
                      }
                      if ((buf[23] & 0x80000000) != 0) {
                        operator delete(*(void **)buf);
                      }
                      ++v111;
                      v110 += 24;
                      if (v111 >= v121) {
                        goto LABEL_407;
                      }
                    }
                    if (AUSpatialProbabilityLogScope(void)::once != -1) {
                      dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
                    }
                    if (AUSpatialProbabilityLogScope(void)::scope)
                    {
                      float v108 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
                      if (!*(void *)AUSpatialProbabilityLogScope(void)::scope)
                      {
LABEL_424:
                        if ((buf[23] & 0x80000000) != 0) {
                          operator delete(*(void **)buf);
                        }
                        goto LABEL_426;
                      }
                    }
                    else
                    {
                      float v108 = MEMORY[0x1E4F14500];
                    }
                    if (!os_log_type_enabled(v108, OS_LOG_TYPE_ERROR)) {
                      goto LABEL_424;
                    }
                    LODWORD(v124.__r_.__value_.__l.__data_) = 136315394;
                    *(std::string::size_type *)((char *)v124.__r_.__value_.__r.__words + 4) = (std::string::size_type)"SVBasedProbability.cpp";
                    WORD2(v124.__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&v124.__r_.__value_.__r.__words[1] + 6) = 329;
                    uint64_t v117 = "%25s:%-5d Error loading ImagCoefficients.\n";
LABEL_423:
                    _os_log_impl(&dword_1BB0CE000, v108, OS_LOG_TYPE_ERROR, v117, (uint8_t *)&v124, 0x12u);
                    goto LABEL_424;
                  }
                }
                else
                {
                  int v106 = MEMORY[0x1E4F14500];
                }
                if (os_log_type_enabled(v106, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)int buf = 136315394;
                  *(void *)&uint8_t buf[4] = "SVBasedProbability.cpp";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 317;
                  _os_log_impl(&dword_1BB0CE000, v106, OS_LOG_TYPE_INFO, "%25s:%-5d Found the dictionary ImagCoefficients.\n", buf, 0x12u);
                }
                goto LABEL_396;
              }
              if (AUSpatialProbabilityLogScope(void)::once != -1) {
                dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
              }
              if (AUSpatialProbabilityLogScope(void)::scope)
              {
                float v97 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
                if (!*(void *)AUSpatialProbabilityLogScope(void)::scope)
                {
LABEL_427:
                  if (SHIBYTE(v119) < 0) {
                    operator delete(__p[0]);
                  }
                  if (v97) {
                    return 0;
                  }
                  goto LABEL_317;
                }
              }
              else
              {
                float v97 = MEMORY[0x1E4F14500];
              }
              if (os_log_type_enabled(v97, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)int buf = 136315394;
                *(void *)&uint8_t buf[4] = "SVBasedProbability.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 312;
                float v109 = "%25s:%-5d Missing dictionary ImagCoefficients.\n";
                goto LABEL_419;
              }
              goto LABEL_426;
            }
            if (AUSpatialProbabilityLogScope(void)::once != -1) {
              dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
            }
            if (AUSpatialProbabilityLogScope(void)::scope)
            {
              int v93 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
              if (!*(void *)AUSpatialProbabilityLogScope(void)::scope)
              {
LABEL_379:
                CFRelease(v77);
                goto LABEL_426;
              }
            }
            else
            {
              int v93 = MEMORY[0x1E4F14500];
            }
            if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR))
            {
              uint64_t v107 = __p;
              if (v119 < 0) {
                uint64_t v107 = (void **)__p[0];
              }
              *(_DWORD *)int buf = 136315650;
              *(void *)&uint8_t buf[4] = "SVBasedProbability.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 268;
              *(_WORD *)&buf[18] = 2080;
              *(void *)&buf[20] = v107;
              _os_log_impl(&dword_1BB0CE000, v93, OS_LOG_TYPE_ERROR, "%25s:%-5d Missing dictionary: %s\n", buf, 0x1Cu);
            }
            goto LABEL_379;
          }
LABEL_157:
          CFDictionaryRef v48 = *__src;
          uint64_t v49 = *((void *)this + 92);
          unsigned int v50 = *((_DWORD *)this + 177);
          *(unsigned char *)(v49 + 60) = 0;
          uint64_t v51 = (unsigned char *)(v49 + 60);
          int v122 = 0;
          goto LABEL_158;
        }
        if (AUSpatialProbabilityLogScope(void)::scope)
        {
          uint64_t v27 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
          if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
            return 4294956445;
          }
        }
        else
        {
          uint64_t v27 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136315394;
          *(void *)&uint8_t buf[4] = "AUSpatialProbability.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 606;
          uint64_t v46 = "%25s:%-5d The CFDictionaryRef passed to SetProperty is null.\n";
LABEL_325:
          float v66 = v27;
          uint32_t v67 = 18;
          goto LABEL_260;
        }
        break;
      case 7306:
LABEL_64:
        if (__n == 4 * (*((_DWORD *)this + 145) + 1))
        {
          memcpy(*((void **)this + 105), __src, __n);
          return 0;
        }
        if (AUSpatialProbabilityLogScope(void)::once != -1) {
          dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
        }
        if (AUSpatialProbabilityLogScope(void)::scope)
        {
          double v26 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
          if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
            return 4294956445;
          }
        }
        else
        {
          double v26 = MEMORY[0x1E4F14500];
        }
        if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
          return 4294956445;
        }
        *(_DWORD *)int buf = 136315650;
        *(void *)&uint8_t buf[4] = "AUSpatialProbability.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 681;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 7306;
        uint64_t v46 = "%25s:%-5d Input size of SpatialProbabilityInputPostMask is not equal to the expected size (prop id: %u).\n";
        goto LABEL_259;
      default:
        if (a2 == 21)
        {
          uint64_t result = 0;
          *((unsigned char *)this + 576) = *(_DWORD *)__src != 0;
        }
        else if (a2 == 3700)
        {
          uint64_t result = 4294956445;
          if (__n >= 4)
          {
            if (*(unsigned char *)__src) {
              return 0;
            }
            else {
              return 4294956445;
            }
          }
        }
        return result;
    }
    return 4294956445;
  }
  switch(a2)
  {
    case 107301:
LABEL_14:
      if (__n != 8
        || (uint64_t v10 = *((void *)this + 94) - *((void *)this + 93), CFArrayGetCount(*__src) != v10 >> 2))
      {
        if (AUSpatialProbabilityLogScope(void)::once != -1) {
          dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
        }
        if (AUSpatialProbabilityLogScope(void)::scope)
        {
          double v26 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
          if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
            return 4294956445;
          }
        }
        else
        {
          double v26 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136315650;
          *(void *)&uint8_t buf[4] = "AUSpatialProbability.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 518;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = 107301;
          uint64_t v46 = "%25s:%-5d Input size of SpatialProbabilityInputSubbandDOA_CF is not equal to the expected size (prop id: %u).\n";
          goto LABEL_259;
        }
        return 4294956445;
      }
      if (*((void *)this + 94) != *((void *)this + 93))
      {
        uint64_t v11 = 0;
        unint64_t v12 = 0;
        do
        {
          CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(*__src, v12);
          CFNumberGetValue(ValueAtIndex, kCFNumberFloat32Type, (void *)(*((void *)this + 93) + v11));
          ++v12;
          v11 += 4;
        }
        while (v12 < (uint64_t)(*((void *)this + 94) - *((void *)this + 93)) >> 2);
      }
      (*(void (**)(void))(**((void **)this + 91) + 80))(*((void *)this + 91));
      if (!*((_DWORD *)this + 150)) {
        return 0;
      }
      if (AUSpatialProbabilityLogScope(void)::once != -1) {
        dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
      }
      if (AUSpatialProbabilityLogScope(void)::scope)
      {
        uint64_t v9 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
        if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
          return 0;
        }
      }
      else
      {
        uint64_t v9 = MEMORY[0x1E4F14500];
      }
      BOOL v64 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (v64)
      {
        int v65 = *((_DWORD *)this + 150);
        *(_DWORD *)int buf = 136315650;
        *(void *)&uint8_t buf[4] = "AUSpatialProbability.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 532;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v65;
        float v59 = "%25s:%-5d Subband DOA is only used for the DOA mode. Current mode is (%d)";
        goto LABEL_329;
      }
      return result;
    case 107302:
    case 107305:
    case 107307:
LABEL_13:
      ++*((void *)this + 70);
      switch(a2)
      {
        case 107301:
          goto LABEL_14;
        case 107302:
          if (__n != 8
            || (uint64_t v28 = *((void *)this + 97) - *((void *)this + 96), CFArrayGetCount(*__src) != v28 >> 2))
          {
            if (AUSpatialProbabilityLogScope(void)::once != -1) {
              dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
            }
            if (AUSpatialProbabilityLogScope(void)::scope)
            {
              double v26 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
              if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
                return 4294956445;
              }
            }
            else
            {
              double v26 = MEMORY[0x1E4F14500];
            }
            if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)int buf = 136315650;
              *(void *)&uint8_t buf[4] = "AUSpatialProbability.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 469;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = 107302;
              uint64_t v46 = "%25s:%-5d Input size of SpatialProbabilityInputSourceProbability_CF is not equal to the expected siz"
                    "e (prop id: %u).\n";
              goto LABEL_259;
            }
            return 4294956445;
          }
          float v29 = (const void *)*((void *)this + 97);
          if (v29 == *((const void **)this + 96))
          {
            size_t v33 = 0;
          }
          else
          {
            uint64_t v30 = 0;
            unint64_t v31 = 0;
            do
            {
              CFNumberRef v32 = (const __CFNumber *)CFArrayGetValueAtIndex(*__src, v31);
              CFNumberGetValue(v32, kCFNumberFloat32Type, (void *)(*((void *)this + 96) + v30));
              ++v31;
              float v29 = (const void *)*((void *)this + 96);
              v30 += 4;
            }
            while (v31 < (uint64_t)(*((void *)this + 97) - (void)v29) >> 2);
            size_t v33 = (*((_DWORD *)this + 194) - v29);
          }
          memcpy(*(void **)(*((void *)this + 91) + 280), v29, v33);
          if (*((_DWORD *)this + 160) == 1 && *((_DWORD *)this + 157) == 1) {
            return 0;
          }
          if (AUSpatialProbabilityLogScope(void)::once != -1) {
            dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
          }
          if (AUSpatialProbabilityLogScope(void)::scope)
          {
            unsigned int v14 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
            if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
              return 0;
            }
          }
          else
          {
            unsigned int v14 = MEMORY[0x1E4F14500];
          }
          BOOL v86 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0;
          if (v86)
          {
            int v87 = *((_DWORD *)this + 160);
            int v88 = *((_DWORD *)this + 157);
            *(_DWORD *)int buf = 136315906;
            *(void *)&uint8_t buf[4] = "AUSpatialProbability.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 484;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v87;
            *(_WORD *)&buf[24] = 1024;
            *(_DWORD *)&buf[26] = v88;
            float v59 = "%25s:%-5d ExternalSourceProbability is not used in the current mode: (%d, %d)";
LABEL_312:
            uint64_t v89 = v14;
            uint32_t v90 = 30;
            goto LABEL_330;
          }
          return result;
        case 107303:
          goto LABEL_40;
        case 107304:
          return result;
        case 107305:
          if (__n != 8
            || (uint64_t v34 = *((void *)this + 94) - *((void *)this + 93), CFArrayGetCount(*__src) != v34 >> 2))
          {
            if (AUSpatialProbabilityLogScope(void)::once != -1) {
              dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
            }
            if (AUSpatialProbabilityLogScope(void)::scope)
            {
              double v26 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
              if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
                return 4294956445;
              }
            }
            else
            {
              double v26 = MEMORY[0x1E4F14500];
            }
            if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)int buf = 136315650;
              *(void *)&uint8_t buf[4] = "AUSpatialProbability.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 654;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = 107305;
              uint64_t v46 = "%25s:%-5d Input size of SpatialProbabilityInputCDR_CF is not equal to the expected size (prop id: %u).\n";
              goto LABEL_259;
            }
            return 4294956445;
          }
          float v35 = (const void *)*((void *)this + 103);
          if (v35 == *((const void **)this + 102))
          {
            size_t v39 = 0;
          }
          else
          {
            uint64_t v36 = 0;
            unint64_t v37 = 0;
            do
            {
              CFNumberRef v38 = (const __CFNumber *)CFArrayGetValueAtIndex(*__src, v37);
              CFNumberGetValue(v38, kCFNumberFloat32Type, (void *)(*((void *)this + 102) + v36));
              ++v37;
              float v35 = (const void *)*((void *)this + 102);
              v36 += 4;
            }
            while (v37 < (uint64_t)(*((void *)this + 103) - (void)v35) >> 2);
            size_t v39 = (*((_DWORD *)this + 206) - v35);
          }
          memcpy(*(void **)(*((void *)this + 91) + 368), v35, v39);
          if (*((_DWORD *)this + 157) == 2) {
            return 0;
          }
          if (AUSpatialProbabilityLogScope(void)::once != -1) {
            dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
          }
          if (AUSpatialProbabilityLogScope(void)::scope)
          {
            uint64_t v9 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
            if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
              return 0;
            }
          }
          else
          {
            uint64_t v9 = MEMORY[0x1E4F14500];
          }
          BOOL v91 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0;
          if (v91)
          {
            int v92 = *((_DWORD *)this + 157);
            *(_DWORD *)int buf = 136315650;
            *(void *)&uint8_t buf[4] = "AUSpatialProbability.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 669;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v92;
            float v59 = "%25s:%-5d External CDR is not used in the current mode. Current mode is (%d)";
            goto LABEL_329;
          }
          return result;
        case 107306:
          goto LABEL_52;
        case 107307:
          if (__n != 8)
          {
            if (AUSpatialProbabilityLogScope(void)::once != -1) {
              dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
            }
            if (AUSpatialProbabilityLogScope(void)::scope)
            {
              double v26 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
              if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
                return 4294956445;
              }
            }
            else
            {
              double v26 = MEMORY[0x1E4F14500];
            }
            if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)int buf = 136315650;
              *(void *)&uint8_t buf[4] = "AUSpatialProbability.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 716;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = 107307;
              uint64_t v46 = "%25s:%-5d Pointer size of SpatialProbabilityInputShapeParameterPerFrequency_CF is not equal to the e"
                    "xpected size (prop id: %u).\n";
              goto LABEL_259;
            }
            return 4294956445;
          }
          CFIndex Count = CFArrayGetCount(*__src);
          uint64_t v41 = *((void *)this + 109);
          uint64_t v42 = *((void *)this + 108);
          if (Count != (v41 - v42) >> 2)
          {
            std::vector<float>::resize((uint64_t)this + 864, Count);
            uint64_t v41 = *((void *)this + 109);
            uint64_t v42 = *((void *)this + 108);
          }
          if (v41 != v42)
          {
            uint64_t v43 = 0;
            unint64_t v44 = 0;
            do
            {
              CFNumberRef v45 = (const __CFNumber *)CFArrayGetValueAtIndex(*__src, v44);
              CFNumberGetValue(v45, kCFNumberFloat32Type, (void *)(*((void *)this + 108) + v43));
              uint64_t result = 0;
              ++v44;
              v43 += 4;
            }
            while (v44 < (uint64_t)(*((void *)this + 109) - *((void *)this + 108)) >> 2);
            return result;
          }
          break;
        default:
          switch(a2)
          {
            case 7302:
              if (__n != 4 * (*((_DWORD *)this + 145) + 1))
              {
                if (AUSpatialProbabilityLogScope(void)::once != -1) {
                  dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
                }
                if (AUSpatialProbabilityLogScope(void)::scope)
                {
                  double v26 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
                  if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
                    return 4294956445;
                  }
                }
                else
                {
                  double v26 = MEMORY[0x1E4F14500];
                }
                if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)int buf = 136315650;
                  *(void *)&uint8_t buf[4] = "AUSpatialProbability.cpp";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 448;
                  *(_WORD *)&buf[18] = 1024;
                  *(_DWORD *)&buf[20] = 7302;
                  uint64_t v46 = "%25s:%-5d Input size of SpatialProbabilityInputSourceProbability is not equal to the expected si"
                        "ze (prop id: %u).\n";
                  goto LABEL_259;
                }
                return 4294956445;
              }
              memcpy(*(void **)(*((void *)this + 91) + 280), __src, __n);
              if (*((_DWORD *)this + 160) == 1 && *((_DWORD *)this + 157) == 1) {
                return 0;
              }
              if (AUSpatialProbabilityLogScope(void)::once != -1) {
                dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
              }
              if (AUSpatialProbabilityLogScope(void)::scope)
              {
                unsigned int v14 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
                if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
                  return 0;
                }
              }
              else
              {
                unsigned int v14 = MEMORY[0x1E4F14500];
              }
              BOOL v68 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
              uint64_t result = 0;
              if (v68)
              {
                int v69 = *((_DWORD *)this + 160);
                int v70 = *((_DWORD *)this + 157);
                *(_DWORD *)int buf = 136315906;
                *(void *)&uint8_t buf[4] = "AUSpatialProbability.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 458;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v69;
                *(_WORD *)&buf[24] = 1024;
                *(_DWORD *)&buf[26] = v70;
                float v59 = "%25s:%-5d ExternalSourceProbability is not used in the current mode: (%d, %d)";
                goto LABEL_312;
              }
              return result;
            case 7303:
              goto LABEL_66;
            case 7304:
              goto LABEL_58;
            case 7305:
              if (__n != 4 * (*((_DWORD *)this + 145) + 1))
              {
                if (AUSpatialProbabilityLogScope(void)::once != -1) {
                  dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
                }
                if (AUSpatialProbabilityLogScope(void)::scope)
                {
                  double v26 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
                  if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
                    return 4294956445;
                  }
                }
                else
                {
                  double v26 = MEMORY[0x1E4F14500];
                }
                if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)int buf = 136315650;
                  *(void *)&uint8_t buf[4] = "AUSpatialProbability.cpp";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 633;
                  *(_WORD *)&buf[18] = 1024;
                  *(_DWORD *)&buf[20] = 7305;
                  uint64_t v46 = "%25s:%-5d Input size of SpatialProbabilityInputCDR is not equal to the expected size (prop id: %u).\n";
                  goto LABEL_259;
                }
                return 4294956445;
              }
              memcpy(*(void **)(*((void *)this + 91) + 368), __src, __n);
              if (*((_DWORD *)this + 157) == 2) {
                return 0;
              }
              if (AUSpatialProbabilityLogScope(void)::once != -1) {
                dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
              }
              if (AUSpatialProbabilityLogScope(void)::scope)
              {
                uint64_t v9 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
                if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
                  return 0;
                }
              }
              else
              {
                uint64_t v9 = MEMORY[0x1E4F14500];
              }
              BOOL v84 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
              uint64_t result = 0;
              if (v84)
              {
                int v85 = *((_DWORD *)this + 157);
                *(_DWORD *)int buf = 136315650;
                *(void *)&uint8_t buf[4] = "AUSpatialProbability.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 643;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v85;
                float v59 = "%25s:%-5d External CDR is not used in the current mode. Current mode is (%d)";
                goto LABEL_329;
              }
              break;
            case 7306:
              goto LABEL_64;
            default:
              return result;
          }
          return result;
      }
      return 0;
    case 107303:
LABEL_40:
      if (__n != 8
        || (uint64_t v15 = *((void *)this + 100) - *((void *)this + 99), CFArrayGetCount(*__src) != v15 >> 2))
      {
        if (AUSpatialProbabilityLogScope(void)::once != -1) {
          dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
        }
        if (AUSpatialProbabilityLogScope(void)::scope)
        {
          double v26 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
          if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
            return 4294956445;
          }
        }
        else
        {
          double v26 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136315650;
          *(void *)&uint8_t buf[4] = "AUSpatialProbability.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 569;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = 107303;
          uint64_t v46 = "%25s:%-5d Input size of SpatialProbabilityInputSteeringVector_CF is not equal to the expected size (prop id: %u).\n";
          goto LABEL_259;
        }
        return 4294956445;
      }
      if (*((void *)this + 100) != *((void *)this + 99))
      {
        uint64_t v16 = 0;
        unint64_t v17 = 0;
        do
        {
          CFNumberRef v18 = (const __CFNumber *)CFArrayGetValueAtIndex(*__src, v17);
          CFNumberGetValue(v18, kCFNumberFloat32Type, (void *)(*((void *)this + 99) + v16));
          ++v17;
          v16 += 4;
        }
        while (v17 < (uint64_t)(*((void *)this + 100) - *((void *)this + 99)) >> 2);
      }
      (*(void (**)(void))(**((void **)this + 91) + 112))(*((void *)this + 91));
      int v19 = *((_DWORD *)this + 150);
      if (v19)
      {
        if (v19 != 1) {
          return 0;
        }
        if (AUSpatialProbabilityLogScope(void)::once != -1) {
          dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
        }
        if (AUSpatialProbabilityLogScope(void)::scope)
        {
          uint64_t v9 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
          if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
            return 0;
          }
        }
        else
        {
          uint64_t v9 = MEMORY[0x1E4F14500];
        }
        BOOL v80 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
        uint64_t result = 0;
        if (v80)
        {
          int v81 = *((_DWORD *)this + 150);
          *(_DWORD *)int buf = 136315650;
          *(void *)&uint8_t buf[4] = "AUSpatialProbability.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 588;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v81;
          float v59 = "%25s:%-5d Steering vector loaded from plist will be overwritten in the current mode. Current mode is (%d)";
          goto LABEL_329;
        }
      }
      else
      {
        if (AUSpatialProbabilityLogScope(void)::once != -1) {
          dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
        }
        if (AUSpatialProbabilityLogScope(void)::scope)
        {
          uint64_t v9 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
          if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
            return 0;
          }
        }
        else
        {
          uint64_t v9 = MEMORY[0x1E4F14500];
        }
        BOOL v82 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
        uint64_t result = 0;
        if (v82)
        {
          int v83 = *((_DWORD *)this + 150);
          *(_DWORD *)int buf = 136315650;
          *(void *)&uint8_t buf[4] = "AUSpatialProbability.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 584;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v83;
          float v59 = "%25s:%-5d Steering vector is not used in the current mode. Current mode is (%d)";
LABEL_329:
          uint64_t v89 = v9;
          uint32_t v90 = 24;
LABEL_330:
          _os_log_impl(&dword_1BB0CE000, v89, OS_LOG_TYPE_DEFAULT, v59, buf, v90);
          return 0;
        }
      }
      return result;
    case 107306:
LABEL_52:
      if (__n == 8)
      {
        uint64_t v20 = *((void *)this + 106) - *((void *)this + 105);
        if (CFArrayGetCount(*__src) == v20 >> 2)
        {
          if (*((void *)this + 106) == *((void *)this + 105)) {
            return 0;
          }
          uint64_t v21 = 0;
          unint64_t v22 = 0;
          do
          {
            CFNumberRef v23 = (const __CFNumber *)CFArrayGetValueAtIndex(*__src, v22);
            CFNumberGetValue(v23, kCFNumberFloat32Type, (void *)(*((void *)this + 105) + v21));
            uint64_t result = 0;
            ++v22;
            v21 += 4;
          }
          while (v22 < (uint64_t)(*((void *)this + 106) - *((void *)this + 105)) >> 2);
          return result;
        }
      }
      if (AUSpatialProbabilityLogScope(void)::once != -1) {
        dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
      }
      if (AUSpatialProbabilityLogScope(void)::scope)
      {
        double v26 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
        if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
          return 4294956445;
        }
      }
      else
      {
        double v26 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315650;
        *(void *)&uint8_t buf[4] = "AUSpatialProbability.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 697;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 107306;
        uint64_t v46 = "%25s:%-5d Input size of SpatialProbabilityInputPostMask_CF is not equal to the expected size (prop id: %u).\n";
LABEL_259:
        float v66 = v26;
        uint32_t v67 = 24;
LABEL_260:
        _os_log_impl(&dword_1BB0CE000, v66, OS_LOG_TYPE_ERROR, v46, buf, v67);
      }
      return 4294956445;
    default:
      return result;
  }
}

void sub_1BB48BA90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUSpatialProbability::GetProperty(AUSpatialProbability *this, int a2, int a3, unsigned int a4, CFArrayRef *__dst)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 > 7402)
  {
    if (a2 > 107400)
    {
      switch(a2)
      {
        case 107401:
          float v8 = (char *)this + 888;
          break;
        case 107402:
          float v8 = (char *)this + 912;
          break;
        case 107403:
          float v8 = (char *)this + 936;
          break;
        default:
          return result;
      }
LABEL_20:
      CFArrayRef CFArray = applesauce::CF::details::make_CFArrayRef<float>(v8);
      uint64_t result = 0;
      void *__dst = CFArray;
      return result;
    }
    if (a2 != 7403)
    {
      if (a2 != 107307) {
        return result;
      }
      float v8 = (char *)this + 864;
      goto LABEL_20;
    }
    uint64_t v10 = (const void *)*((void *)this + 117);
    goto LABEL_25;
  }
  if (a2 > 7400)
  {
    if (a2 == 7401) {
      uint64_t v10 = (const void *)*((void *)this + 111);
    }
    else {
      uint64_t v10 = (const void *)*((void *)this + 114);
    }
LABEL_25:
    memcpy(__dst, v10, 4 * (*((_DWORD *)this + 145) + 1));
    return 0;
  }
  if (a2 == 21)
  {
    uint64_t result = 0;
    int v9 = *((unsigned __int8 *)this + 576);
  }
  else
  {
    if (a2 != 3700) {
      return result;
    }
    uint64_t result = 0;
    int v9 = *((unsigned __int8 *)this + 376);
  }
  *(_DWORD *)__dst = v9;
  return result;
}

uint64_t AUSpatialProbability::GetPropertyInfo(AUSpatialProbability *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 > 7402)
  {
    if (a2 > 107400)
    {
      if (a2 == 107401 || a2 == 107402)
      {
LABEL_15:
        *a6 = 0;
        int v9 = 8;
        goto LABEL_17;
      }
      unsigned __int16 v8 = -23669;
LABEL_14:
      if (a2 != (v8 | 0x10000)) {
        return result;
      }
      goto LABEL_15;
    }
    if (a2 != 7403)
    {
      unsigned __int16 v8 = -23765;
      goto LABEL_14;
    }
LABEL_16:
    *a6 = 0;
    int v9 = 4 * *((_DWORD *)this + 145) + 4;
    goto LABEL_17;
  }
  if (a2 > 7400) {
    goto LABEL_16;
  }
  if (a2 == 21 || a2 == 3700)
  {
    *a6 = 1;
    int v9 = 4;
LABEL_17:
    uint64_t result = 0;
    *a5 = v9;
  }
  return result;
}

uint64_t AUSpatialProbability::Reset(AUSpatialProbability *this)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (AUSpatialProbabilityLogScope(void)::once != -1) {
    dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
  }
  if (AUSpatialProbabilityLogScope(void)::scope)
  {
    uint64_t v2 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
    if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315394;
    double v6 = "AUSpatialProbability.cpp";
    __int16 v7 = 1024;
    int v8 = 187;
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Reset.\n", (uint8_t *)&v5, 0x12u);
  }
LABEL_9:
  uint64_t v3 = *((void *)this + 91);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  return 0;
}

uint64_t AUSpatialProbability::Cleanup(AUSpatialProbability *this)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (AUSpatialProbabilityLogScope(void)::once != -1) {
    dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
  }
  if (AUSpatialProbabilityLogScope(void)::scope)
  {
    uint64_t v2 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
    if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315394;
    int v5 = "AUSpatialProbability.cpp";
    __int16 v6 = 1024;
    int v7 = 177;
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Cleanup.\n", (uint8_t *)&v4, 0x12u);
  }
LABEL_9:
  uint64_t result = *((void *)this + 91);
  *((void *)this + 91) = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 32))(result);
  }
  return result;
}

uint64_t AUSpatialProbability::Initialize(AUSpatialProbability *this)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (AUSpatialProbabilityLogScope(void)::once != -1) {
    dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
  }
  if (AUSpatialProbabilityLogScope(void)::scope)
  {
    uint64_t v2 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
    if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v18 = 136315394;
    int v19 = "AUSpatialProbability.cpp";
    __int16 v20 = 1024;
    int v21 = 124;
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Initialize\n", (uint8_t *)&v18, 0x12u);
  }
LABEL_9:
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUSpatialProbability *)((char *)this + 80), 0);
  uint64_t v4 = *(void *)(Element + 80);
  *((_DWORD *)this + 148) = *(_DWORD *)(Element + 108);
  *((void *)this + 73) = v4;
  if (AUSpatialProbabilityLogScope(void)::once != -1) {
    dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
  }
  if (AUSpatialProbabilityLogScope(void)::scope)
  {
    int v5 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
    if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
      goto LABEL_17;
    }
  }
  else
  {
    int v5 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    int v18 = 136315394;
    int v19 = "AUSpatialProbability.cpp";
    __int16 v20 = 1024;
    int v21 = 132;
    _os_log_impl(&dword_1BB0CE000, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d Check input format\n", (uint8_t *)&v18, 0x12u);
  }
LABEL_17:
  int v6 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUSpatialProbability *)((char *)this + 80), 0) + 108);
  int v7 = *((_DWORD *)this + 148);
  if (AUSpatialProbabilityLogScope(void)::once != -1) {
    dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
  }
  if (v6 == v7)
  {
    if (AUSpatialProbabilityLogScope(void)::scope)
    {
      uint64_t v8 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
      if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v8 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      int v18 = 136315394;
      int v19 = "AUSpatialProbability.cpp";
      __int16 v20 = 1024;
      int v21 = 142;
      _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d Check output form\n", (uint8_t *)&v18, 0x12u);
    }
LABEL_29:
    int v10 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUSpatialProbability *)((char *)this + 128), 0) + 108);
    if (v10 == *((_DWORD *)this + 148))
    {
      *((_DWORD *)this + 145) = *((_DWORD *)this + 84);
      uint64_t v11 = *((void *)this + 66);
      AUSpatialProbability::UpdateState(this);
      *((void *)this + 67) = v11;
      AUSpatialProbability::InitializeSpatialProbabilityClasses(this);
      (*(void (**)(AUSpatialProbability *, void, void))(*(void *)this + 72))(this, 0, 0);
      if (AUSpatialProbabilityLogScope(void)::once != -1) {
        dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
      }
      if (AUSpatialProbabilityLogScope(void)::scope)
      {
        unint64_t v12 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
        if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
          return 0;
        }
      }
      else
      {
        unint64_t v12 = MEMORY[0x1E4F14500];
      }
      BOOL v15 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (!v15) {
        return result;
      }
      int v18 = 136315394;
      int v19 = "AUSpatialProbability.cpp";
      __int16 v20 = 1024;
      int v21 = 166;
      _os_log_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Successfully initialized.\n", (uint8_t *)&v18, 0x12u);
      return 0;
    }
    if (AUSpatialProbabilityLogScope(void)::once != -1) {
      dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
    }
    if (AUSpatialProbabilityLogScope(void)::scope)
    {
      uint64_t v9 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
      if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
        return 4294956421;
      }
    }
    else
    {
      uint64_t v9 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v17 = *((_DWORD *)this + 148);
      int v18 = 136315906;
      int v19 = "AUSpatialProbability.cpp";
      __int16 v20 = 1024;
      int v21 = 147;
      __int16 v22 = 1024;
      int v23 = v10;
      __int16 v24 = 1024;
      int v25 = v17;
      unsigned int v14 = "%25s:%-5d Number of channel in the output stream (%u) not equal to the expected number of channels (%u).\n";
      goto LABEL_50;
    }
    return 4294956421;
  }
  if (AUSpatialProbabilityLogScope(void)::scope)
  {
    uint64_t v9 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
    if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
      return 4294956421;
    }
  }
  else
  {
    uint64_t v9 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    int v13 = *((_DWORD *)this + 148);
    int v18 = 136315906;
    int v19 = "AUSpatialProbability.cpp";
    __int16 v20 = 1024;
    int v21 = 137;
    __int16 v22 = 1024;
    int v23 = v6;
    __int16 v24 = 1024;
    int v25 = v13;
    unsigned int v14 = "%25s:%-5d Number of channel in the input stream (%u) not equal to the expected number of channels (%u).\n";
LABEL_50:
    _os_log_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_ERROR, v14, (uint8_t *)&v18, 0x1Eu);
  }
  return 4294956421;
}

void AUSpatialProbability::~AUSpatialProbability(AUSpatialProbability *this)
{
  AUSpatialProbability::~AUSpatialProbability(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t vars8;

  *(void *)this = &unk_1F14AE978;
  AUSpatialProbability::Cleanup(this);
  uint64_t v2 = (void *)*((void *)this + 117);
  if (v2)
  {
    *((void *)this + 118) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 114);
  if (v3)
  {
    *((void *)this + 115) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 111);
  if (v4)
  {
    *((void *)this + 112) = v4;
    operator delete(v4);
  }
  int v5 = (void *)*((void *)this + 108);
  if (v5)
  {
    *((void *)this + 109) = v5;
    operator delete(v5);
  }
  int v6 = (void *)*((void *)this + 105);
  if (v6)
  {
    *((void *)this + 106) = v6;
    operator delete(v6);
  }
  int v7 = (void *)*((void *)this + 102);
  if (v7)
  {
    *((void *)this + 103) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 99);
  if (v8)
  {
    *((void *)this + 100) = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)*((void *)this + 96);
  if (v9)
  {
    *((void *)this + 97) = v9;
    operator delete(v9);
  }
  int v10 = (void *)*((void *)this + 93);
  if (v10)
  {
    *((void *)this + 94) = v10;
    operator delete(v10);
  }
  std::unique_ptr<stvPlistHolder>::reset[abi:ne180100]((uint64_t *)this + 92, 0);
  uint64_t v11 = *((void *)this + 91);
  *((void *)this + 91) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 32))(v11);
  }

  ausdk::AUBase::~AUBase(this);
}

uint64_t *std::unique_ptr<stvPlistHolder>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 64);
    *(void *)(v2 + 64) = 0;
    if (v3) {
      MEMORY[0x1C185D370](v3, 0x60C4044C4A2DFLL);
    }
    uint64_t v4 = (void **)(v2 + 24);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
    uint64_t v4 = (void **)v2;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
    JUMPOUT(0x1C185D370);
  }
  return result;
}

uint64_t AUOneChannelNSV4::SetBypassEffect(uint64_t this, char a2)
{
  *(unsigned char *)(this + 536) = a2;
  return this;
}

uint64_t AUOneChannelNSV4::ShouldBypassEffect(AUOneChannelNSV4 *this)
{
  return *((unsigned __int8 *)this + 536);
}

uint64_t AUOneChannelNSV4::ValidFormat(AUOneChannelNSV4 *this, const AudioStreamBasicDescription *a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  int v5 = (int)a2;
  uint64_t result = ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2);
  if ((v5 - 1) <= 1)
  {
    if (a4->mFormatID == 1718773105) {
      int v7 = result;
    }
    else {
      int v7 = 1;
    }
    if (v7 == 1)
    {
      UInt32 mChannelsPerFrame = a4->mChannelsPerFrame;
    }
    else
    {
      UInt32 mBytesPerPacket = a4->mBytesPerPacket;
      UInt32 mBytesPerFrame = a4->mBytesPerFrame;
      UInt32 mChannelsPerFrame = a4->mChannelsPerFrame;
      UInt32 mBitsPerChannel = a4->mBitsPerChannel;
      BOOL v12 = a4->mFramesPerPacket == 1 && mBytesPerFrame == mBytesPerPacket;
      BOOL v14 = !v12 || mBitsPerChannel >> 3 > mBytesPerFrame || mChannelsPerFrame == 0;
      if (!v14
        && ((AudioFormatFlags mFormatFlags = a4->mFormatFlags, (mFormatFlags & 0x20) != 0)
         || (BOOL v12 = mBytesPerPacket == mBytesPerPacket / mChannelsPerFrame * mChannelsPerFrame,
             mBytesPerPacket /= mChannelsPerFrame,
             v12)))
      {
        int v16 = 8 * mBytesPerPacket;
        BOOL v17 = mBytesPerPacket == 8 && (a4->mFormatFlags & 0x1F84) == 0;
        if (mFormatFlags)
        {
          BOOL v18 = (a4->mFormatFlags & 0x1F84) == 0;
        }
        else
        {
          BOOL v17 = 0;
          BOOL v18 = 1;
        }
        BOOL v19 = v16 == mBitsPerChannel;
        BOOL v20 = v16 == mBitsPerChannel && v17;
        int v21 = !v19 || v18;
        if ((mFormatFlags & 2) != 0)
        {
          BOOL v20 = 0;
          int v21 = 1;
        }
      }
      else
      {
        BOOL v20 = 0;
        int v21 = 0;
      }
      LODWORD(result) = v20 & v21;
    }
    if (mChannelsPerFrame == 1) {
      return result;
    }
    else {
      return 0;
    }
  }
  return result;
}

BOOL ausdk::ASBD::IsCommonFloat32(ausdk::ASBD *this, const AudioStreamBasicDescription *a2)
{
  if (*((_DWORD *)this + 2) != 1819304813 || *((_DWORD *)this + 5) != 1) {
    return 0;
  }
  uint64_t v3 = *((unsigned int *)this + 4);
  if (v3 != *((_DWORD *)this + 6)) {
    return 0;
  }
  int v4 = *((_DWORD *)this + 3);
  if ((v4 & 1) == 0 || (v4 & 0x20) == 0 && *((_DWORD *)this + 7) != 1) {
    return 0;
  }
  uint64_t v5 = 0;
  if ((v4 & 2) == 0 && *((_DWORD *)this + 8) == 32)
  {
    if ((v4 & 0x20) != 0) {
      unsigned int v7 = 1;
    }
    else {
      unsigned int v7 = *((_DWORD *)this + 7);
    }
    return v3 == 4 * v7;
  }
  return v5;
}

uint64_t AUOneChannelNSV4::SupportedNumChannels(AUOneChannelNSV4 *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUOneChannelNSV4::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 1;
}

BOOL AUOneChannelNSV4::StreamFormatWritable(AUOneChannelNSV4 *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUOneChannelNSV4::SupportsTail(AUOneChannelNSV4 *this)
{
  return 1;
}

double AUOneChannelNSV4::GetTailTime(AUOneChannelNSV4 *this)
{
  return 0.0;
}

double AUOneChannelNSV4::GetLatency(AUOneChannelNSV4 *this)
{
  double v2 = *(double *)(ausdk::AUScope::SafeGetElement((AUOneChannelNSV4 *)((char *)this + 128), 0) + 80);
  if (*((unsigned char *)this + 376))
  {
    LODWORD(v3) = *((_DWORD *)this + 84);
    double v4 = (double)v3;
  }
  else
  {
    double v4 = 1024.0;
    if (v2 < 16000.0) {
      double v4 = 512.0;
    }
    if (v2 >= 32000.0) {
      double v4 = 2048.0;
    }
  }
  return v4 / v2;
}

uint64_t AUOneChannelNSV4::GetParameterValueStrings(AUOneChannelNSV4 *this, int a2, int a3, const __CFArray **a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a2) {
    return 4294956430;
  }
  if (a3 == 8 && a4)
  {
    long long v8 = xmmword_1E623DB20;
    long long v9 = *(_OWORD *)&off_1E623DB30;
    int v10 = @"LPC Noise";
    CFIndex v6 = 5;
LABEL_9:
    CFArrayRef v7 = CFArrayCreate(0, (const void **)&v8, v6, 0);
    uint64_t result = 0;
    *a4 = v7;
    return result;
  }
  uint64_t result = 0;
  if (a3 == 10 && a4)
  {
    long long v8 = xmmword_1E623DB48;
    long long v9 = unk_1E623DB58;
    int v10 = 0;
    CFIndex v6 = 2;
    goto LABEL_9;
  }
  return result;
}

uint64_t AUOneChannelNSV4::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result = ausdk::AUBase::RestoreState(this, a2);
  if (!result) {
    ++*((_DWORD *)this + 135);
  }
  return result;
}

uint64_t AUOneChannelNSV4::GetParameterInfo(AUOneChannelNSV4 *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  buffer->AudioUnitParameterOptions flags = 0x40000000;
  buffer->unitName = 0;
  if (a2) {
    return 4294956418;
  }
  switch(a3)
  {
    case 0:
      buffer->cfNameString = @"noise supp level";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"noise supp level", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(void *)&buffer->minCFDictionaryRef Value = 0x42C80000C2C80000;
      AudioUnitParameterValue v6 = -18.0;
      goto LABEL_14;
    case 1:
      buffer->cfNameString = @"speech prob";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"speech prob", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      uint64_t v7 = 0x3F80000000000000;
      goto LABEL_8;
    case 2:
      CFStringRef v8 = @"noise SPL (gated PS)";
      goto LABEL_11;
    case 3:
      buffer->cfNameString = @"AGC dynamic gain";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"AGC dynamic gain", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      uint64_t v7 = 0x41A00000C1A00000;
LABEL_8:
      *(void *)&buffer->minCFDictionaryRef Value = v7;
      AudioUnitParameterOptions v9 = buffer->flags | 0x8000;
      goto LABEL_20;
    case 4:
      buffer->cfNameString = @"AGC post gain";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"AGC post gain", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(void *)&buffer->minCFDictionaryRef Value = 0x41A00000C1A00000;
      buffer->defaultCFDictionaryRef Value = 0.0;
      return result;
    case 5:
      CFStringRef v8 = @"noise SPL (one mic)";
LABEL_11:
      buffer->cfNameString = v8;
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(v8, buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFDictionaryRef Value = 0x42C8000041A00000;
      AudioUnitParameterValue v6 = 40.0;
      AudioUnitParameterOptions v10 = buffer->flags | 0x8000;
      goto LABEL_17;
    case 6:
      buffer->cfNameString = @"SPL Meter Calibration";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"SPL Meter Calibration", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(void *)&buffer->minCFDictionaryRef Value = 0x42C80000C1C80000;
      AudioUnitParameterValue v6 = 80.0;
      goto LABEL_14;
    case 7:
      buffer->cfNameString = @"SPL Time Constant";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"SPL Time Constant", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFDictionaryRef Value = 0x4120000000000000;
      AudioUnitParameterValue v6 = 5.0;
LABEL_14:
      AudioUnitParameterOptions v10 = buffer->flags | 0x80000000;
      goto LABEL_17;
    case 8:
      buffer->cfNameString = @"LPC Mode";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"LPC Mode", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      uint64_t v11 = 0x4080000000000000;
      goto LABEL_19;
    case 9:
      buffer->cfNameString = @"LPC VAD Clip Threshold";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"LPC VAD Clip Threshold", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(void *)&buffer->minCFDictionaryRef Value = 0x447A000000000000;
      AudioUnitParameterValue v6 = 1000.0;
      AudioUnitParameterOptions v10 = buffer->flags | 0x84000000;
LABEL_17:
      buffer->defaultCFDictionaryRef Value = v6;
      buffer->AudioUnitParameterOptions flags = v10;
      break;
    case 10:
      buffer->cfNameString = @"Noise Estimator";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"Noise Estimator", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      uint64_t v11 = 0x3F80000000000000;
LABEL_19:
      *(void *)&buffer->minCFDictionaryRef Value = v11;
      AudioUnitParameterOptions v9 = buffer->flags | 0x84000000;
LABEL_20:
      buffer->defaultCFDictionaryRef Value = 0.0;
      buffer->AudioUnitParameterOptions flags = v9;
      break;
    default:
      return 4294956418;
  }
  return result;
}

uint64_t AUOneChannelNSV4::GetParameterList(AUOneChannelNSV4 *this, int a2, unsigned int *a3, unsigned int *a4)
{
  if (a2)
  {
    unsigned int v4 = 0;
  }
  else
  {
    if (a3)
    {
      *(_OWORD *)a3 = xmmword_1BB8727D0;
      *((_OWORD *)a3 + 1) = xmmword_1BB879D60;
      *((void *)a3 + 4) = 0x900000008;
      a3[10] = 10;
    }
    unsigned int v4 = 11;
  }
  *a4 = v4;
  return 0;
}

uint64_t AUOneChannelNSV4::SetBusCount(AUOneChannelNSV4 *this, int a2, unsigned int a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a2 == 2)
  {
    if (a3 - 1 <= 2)
    {
      unsigned int v4 = (AUOneChannelNSV4 *)((char *)this + 128);
      goto LABEL_7;
    }
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      return 4294956445;
    }
    int v8 = 136315650;
    AudioUnitParameterOptions v9 = "AUOneChannelNSV4.cpp";
    __int16 v10 = 1024;
    int v11 = 286;
    __int16 v12 = 1024;
    unsigned int v13 = a3;
    AudioUnitParameterValue v6 = MEMORY[0x1E4F14500];
    uint64_t v7 = "%25s:%-5d Invalid number (%u) of output buses requested. We only support 1–3 buses.";
    goto LABEL_13;
  }
  if (a2 != 1) {
    return 4294956430;
  }
  if (a3 - 1 <= 2)
  {
    unsigned int v4 = (AUOneChannelNSV4 *)((char *)this + 80);
LABEL_7:
    ausdk::AUScope::SetNumberOfElements(v4, a3);
    return 0;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v8 = 136315650;
    AudioUnitParameterOptions v9 = "AUOneChannelNSV4.cpp";
    __int16 v10 = 1024;
    int v11 = 277;
    __int16 v12 = 1024;
    unsigned int v13 = a3;
    AudioUnitParameterValue v6 = MEMORY[0x1E4F14500];
    uint64_t v7 = "%25s:%-5d Invalid number (%u) of input buses requested. We only support 1–3 buses.";
LABEL_13:
    _os_log_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_ERROR, v7, (uint8_t *)&v8, 0x18u);
  }
  return 4294956445;
}

BOOL AUOneChannelNSV4::BusCountWritable(AUOneChannelNSV4 *this, int a2)
{
  return (a2 - 1) <= 1 && *((unsigned char *)this + 17) == 0;
}

uint64_t AUOneChannelNSV4::Render(AUOneChannelNSV4 *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  void v19[3] = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 376) && *((_DWORD *)this + 84) != a4) {
    return 4294956422;
  }
  uint64_t Element = ausdk::AUScope::GetElement((AUOneChannelNSV4 *)((char *)this + 80), 0);
  if (!Element || !*(_DWORD *)(Element + 172)) {
    return 4294956420;
  }
  uint64_t v9 = ausdk::AUScope::GetElement((AUOneChannelNSV4 *)((char *)this + 80), 0);
  if (v9 && *(_DWORD *)(v9 + 172))
  {
    __int16 v10 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUOneChannelNSV4 *)((char *)this + 80), 0);
    uint64_t result = ausdk::AUInputElement::PullInput(v10, a2, a3, 0, a4);
    if (result) {
      return result;
    }
    uint64_t v12 = ausdk::AUScope::SafeGetElement((AUOneChannelNSV4 *)((char *)this + 80), 0);
    uint64_t BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v12 + 144));
  }
  else
  {
    uint64_t BufferList = 0;
  }
  uint64_t v14 = ausdk::AUScope::GetElement((AUOneChannelNSV4 *)((char *)this + 80), 1u);
  if (v14)
  {
    if (*(_DWORD *)(v14 + 172))
    {
      BOOL v15 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUOneChannelNSV4 *)((char *)this + 80), 1u);
      uint64_t result = ausdk::AUInputElement::PullInput(v15, a2, a3, 1, a4);
      if (result) {
        return result;
      }
      uint64_t v16 = ausdk::AUScope::SafeGetElement((AUOneChannelNSV4 *)((char *)this + 80), 1u);
      uint64_t v14 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v16 + 144));
    }
    else
    {
      uint64_t v14 = 0;
    }
  }
  v19[0] = BufferList;
  v19[1] = v14;
  v19[2] = BufferList;
  BOOL v17 = (ausdk::AUBufferList *)(ausdk::AUScope::SafeGetElement((AUOneChannelNSV4 *)((char *)this + 128), 0) + 144);
  v18[0] = ausdk::AUBufferList::GetBufferList(v17);
  v18[1] = ausdk::AUBufferList::GetBufferList(v17);
  _OWORD v18[2] = ausdk::AUBufferList::GetBufferList(v17);
  return (*(uint64_t (**)(AUOneChannelNSV4 *, unsigned int *, uint64_t, uint64_t, void *, uint64_t, void *))(*(void *)this + 184))(this, a2, a4, 3, v19, 3, v18);
}

uint64_t AUOneChannelNSV4::ProcessMultipleBufferLists(AUOneChannelNSV4 *this, unsigned int *a2, unsigned int a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  if (*((unsigned char *)this + 376) && *((_DWORD *)this + 84) != a3) {
    return 4294956422;
  }
  if (*((_DWORD *)this + 156) != a4 || *((_DWORD *)this + 157) != a6) {
    return 4294956419;
  }
  if ((*(unsigned int (**)(AUOneChannelNSV4 *, unsigned int *))(*(void *)this + 576))(this, a2))
  {
    if (a6 >= 2)
    {
      unsigned int v13 = a7[1];
      if (v13)
      {
        mData = (float *)v13->mBuffers[0].mData;
        LODWORD(v53[0]) = 1065353216;
        if (mData) {
          vDSP_vfill((const float *)v53, mData, 1, (unint64_t)v13->mBuffers[0].mDataByteSize >> 2);
        }
      }
      if (a6 >= 3)
      {
        BOOL v15 = a7[2];
        if (v15)
        {
          uint64_t v16 = (float *)v15->mBuffers[0].mData;
          LODWORD(v53[0]) = 0;
          if (v16) {
            vDSP_vfill((const float *)v53, v16, 1, (unint64_t)v15->mBuffers[0].mDataByteSize >> 2);
          }
        }
      }
    }
    if (*((unsigned __int8 *)this + 548) != *((unsigned __int8 *)this + 549))
    {
      bzero((*a7)->mBuffers[0].mData, (*a7)->mBuffers[0].mDataByteSize);
      return 0;
    }
    BOOL v17 = (*a5)->mBuffers[0].mData;
    BOOL v18 = (*a7)->mBuffers[0].mData;
    if (v17 == v18) {
      return 0;
    }
    size_t mDataByteSize = (*a7)->mBuffers[0].mDataByteSize;
LABEL_17:
    memcpy(v18, v17, mDataByteSize);
    return 0;
  }
  int v21 = *((_DWORD *)this + 135);
  if (v21 != *((_DWORD *)this + 136))
  {
    AUOneChannelNSV4::UpdateParameters(this);
    *((_DWORD *)this + 136) = v21;
  }
  if (a4 >= 2 && (__int16 v22 = a5[1]) != 0) {
    int v23 = v22->mBuffers[0].mData;
  }
  else {
    int v23 = 0;
  }
  __int16 v24 = (float *)(*a5)->mBuffers[0].mData;
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUOneChannelNSV4 *)((char *)this + 32), 0);
  float Parameter = ausdk::AUElement::GetParameter(Element, 8u);
  uint64_t v27 = 0;
  if (a4 >= 3 && Parameter)
  {
    uint64_t v28 = a5[2];
    if (v28) {
      uint64_t v27 = (const float *)v28->mBuffers[0].mData;
    }
    else {
      uint64_t v27 = 0;
    }
  }
  if (*((unsigned char *)this + 376))
  {
    if (*((unsigned char *)this + 548))
    {
      float v29 = &v24[*((unsigned int *)this + 84)];
      v53[0] = v24;
      v53[1] = v29;
      uint64_t v30 = *((void *)this + 77);
      *(void *)(v30 + 600) = v23;
      CNoiseSuppressorV4::speex_preprocess_run_freq(v30, v53, 0, v27);
    }
    else
    {
      uint64_t v32 = *((void *)this + 77);
      *(void *)(v32 + 600) = v23;
      CNoiseSuppressorV4::speex_preprocess_run((int *)v32, (char *)v24, 0, v24);
    }
    uint64_t v33 = *((void *)this + 77);
    if (v33) {
      float v34 = *(float *)(v33 + 332);
    }
    else {
      float v34 = 0.0;
    }
    float v35 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUOneChannelNSV4 *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v35, 1u, v34, 0);
    uint64_t v36 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUOneChannelNSV4 *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v36, 2u, *(float *)(*((void *)this + 77) + 336), 0);
    unint64_t v37 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUOneChannelNSV4 *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v37, 5u, *(float *)(*((void *)this + 77) + 340), 0);
    CFNumberRef v38 = (char *)(*a7)->mBuffers[0].mData;
    if (*((unsigned char *)this + 549))
    {
      if (a6 >= 2 && (size_t v39 = a7[1]) != 0) {
        float v40 = (char *)v39->mBuffers[0].mData;
      }
      else {
        float v40 = 0;
      }
      uint64_t v41 = *((unsigned int *)this + 84);
      uint64_t v42 = &v38[4 * v41];
      uint64_t v43 = *((void *)this + 77);
      if (v43)
      {
        unint64_t v44 = *(const void **)(v43 + 584);
        CFNumberRef v45 = *(float **)(v43 + 592);
      }
      else
      {
        unint64_t v44 = 0;
        CFNumberRef v45 = 0;
      }
      memcpy((*a7)->mBuffers[0].mData, v44, 4 * v41);
      size_t v47 = 4 * *((unsigned int *)this + 84);
      CFDictionaryRef v48 = v42;
      uint64_t v49 = v45;
    }
    else
    {
      if (a6 >= 2 && (uint64_t v46 = a7[1]) != 0) {
        float v40 = (char *)v46->mBuffers[0].mData;
      }
      else {
        float v40 = 0;
      }
      size_t v47 = 4 * *((unsigned int *)this + 84);
      CFDictionaryRef v48 = (*a7)->mBuffers[0].mData;
      uint64_t v49 = v24;
    }
    memcpy(v48, v49, v47);
    if (v40 && v40 != v38) {
      memcpy(v40, *(const void **)(*((void *)this + 77) + 168), 4 * *(int *)(*((void *)this + 77) + 4));
    }
    if (a6 < 3) {
      return 0;
    }
    unsigned int v50 = a7[2];
    if (!v50) {
      return 0;
    }
    uint64_t result = 0;
    uint64_t v51 = v50->mBuffers[0].mData;
    if (v51 && v51 != (*a7)->mBuffers[0].mData)
    {
      uint64_t v52 = *((void *)this + 77);
      if (!v52) {
        return 0;
      }
      BOOL v17 = *(void **)(v52 + 192);
      size_t mDataByteSize = 4 * *(int *)(v52 + 4);
      BOOL v18 = v51;
      goto LABEL_17;
    }
  }
  else
  {
    *(void *)(*((void *)this + 77) + 600) = v23;
    unint64_t v31 = (BlockProcessor *)*((void *)this + 66);
    return BlockProcessor::Process(v31, a3, a5, a7);
  }
  return result;
}

void AUOneChannelNSV4::UpdateParameters(AUOneChannelNSV4 *this)
{
  double v2 = (AUOneChannelNSV4 *)((char *)this + 32);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUOneChannelNSV4 *)((char *)this + 32), 0);
  float Parameter = ausdk::AUElement::GetParameter(Element, 0);
  uint64_t v5 = *((void *)this + 77);
  if (v5)
  {
    int v6 = (int)Parameter;
    if ((int)Parameter >= 0) {
      int v6 = -v6;
    }
    *(_DWORD *)(v5 + 52) = v6;
    *(_DWORD *)(v5 + 472) = 1;
  }
  uint64_t v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v8 = ausdk::AUElement::GetParameter(v7, 6u);
  *(float *)(*((void *)this + 77) + 356) = v8;
  uint64_t v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v10 = ausdk::AUElement::GetParameter(v9, 7u);
  uint64_t v11 = *((void *)this + 77);
  *(float *)(v11 + 360) = 1.0 - expf(-1.0 / (float)(v10 * (float)((float)*(int *)(v11 + 8) / (float)*(int *)(v11 + 4))));
  uint64_t v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v13 = ausdk::AUElement::GetParameter(v12, 8u);
  uint64_t v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v15 = ausdk::AUElement::GetParameter(v14, 9u);
  uint64_t v16 = *((void *)this + 77);
  if (v16)
  {
    uint64_t v17 = *(void *)(v16 + 688);
    if (v17)
    {
      *(_DWORD *)(v17 + 212) = v13;
      if (v15 <= 400.0) {
        float v18 = v15 / 20.0;
      }
      else {
        float v18 = 20.0;
      }
      float v19 = __exp10(v18);
      *(float *)(v17 + 164) = v19;
      *(float *)(*(void *)(*((void *)this + 77) + 688) + 148) = v8;
    }
  }
}

uint64_t AUOneChannelNSV4::CanScheduleParameters(AUOneChannelNSV4 *this)
{
  return 0;
}

uint64_t AUOneChannelNSV4::SetParameter(AUOneChannelNSV4 *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  if (!a3)
  {
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUOneChannelNSV4 *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(Element, a2, a5, 0);
    ++*((_DWORD *)this + 135);
    if (a2 == 10)
    {
      uint64_t v11 = *((void *)this + 77);
      if (v11)
      {
        int v12 = a5 == 1.0 && a5 != 0.0;
        CNoiseSuppressorV4::SetNoiseEstimator(v11, v12);
      }
    }
  }
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  uint64_t v14 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  ausdk::AUElement::SetParameter(v14, a2, a5, 0);
  return 0;
}

uint64_t AUOneChannelNSV4::SetProperty(AUOneChannelNSV4 *this, int a2, int a3, unsigned int a4, CFDictionaryRef *a5, unsigned int a6)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 <= 4520)
  {
    if (a2 != 21)
    {
      if (a2 == 3700)
      {
        if (a6 >= 4)
        {
          uint64_t result = 0;
          *((unsigned char *)this + 376) = *(unsigned char *)a5;
          return result;
        }
      }
      else
      {
        if (a2 != 4520) {
          return result;
        }
        if (*((unsigned char *)this + 17)) {
          return 4294956447;
        }
        if (a5)
        {
          CFDictionaryRef v16 = *a5;
          CFDictionaryRef Value = CFDictionaryGetValue(*a5, @"NoiseUpperBound");
          BOOL v18 = Value != 0;
          if (!Value || (uint64_t result = AUOneChannelNSV4::SetNoiseBound((uint64_t)this, 0, Value), !result))
          {
            uint64_t result = (uint64_t)CFDictionaryGetValue(v16, @"NoiseLowerBound");
            if (result)
            {
              LODWORD(result) = AUOneChannelNSV4::SetNoiseBound((uint64_t)this, 1, (CFTypeRef)result);
              if (Value) {
                BOOL v19 = 1;
              }
              else {
                BOOL v19 = result == 0;
              }
              BOOL v18 = v19;
            }
            if (v18) {
              return result;
            }
            else {
              return 4294956445;
            }
          }
          return result;
        }
      }
      return 4294956445;
    }
    if (a6 < 4) {
      return 4294956445;
    }
    int v14 = *(_DWORD *)a5;
    int v15 = *(_DWORD *)a5 != 0;
    if (v15 != (*(unsigned int (**)(AUOneChannelNSV4 *))(*(void *)this + 576))(this)) {
      (*(void (**)(AUOneChannelNSV4 *, BOOL))(*(void *)this + 584))(this, v14 != 0);
    }
    return 0;
  }
  if ((a2 - 4521) >= 2)
  {
    if (a2 != 4523) {
      return result;
    }
    if (a5)
    {
      uint64_t result = 4294956445;
      if (*(float *)a5 < 0.0) {
        return result;
      }
      float v9 = *((float *)a5 + 1);
      if (v9 < 0.0) {
        return result;
      }
      uint64_t v10 = *((unsigned int *)a5 + 2);
      CFDictionaryRef v11 = a5[2];
      *((_DWORD *)this + 148) = *(_DWORD *)a5;
      *((float *)this + 149) = v9;
      *((_DWORD *)this + 150) = v10;
      if (v10)
      {
        size_t v12 = 8 * v10;
        float v13 = malloc_type_malloc(8 * v10, 0x100004000313F17uLL);
        *((void *)this + 76) = v13;
        memcpy(v13, v11, v12);
      }
    }
    return 0;
  }
  uint64_t result = 4294956445;
  if (a6 == 4)
  {
    int v8 = *(_DWORD *)a5;
    if (*(_DWORD *)a5 <= 1u)
    {
      uint64_t result = 0;
      if (a2 == 4521) {
        *((_DWORD *)this + 146) = v8;
      }
      else {
        *((_DWORD *)this + 147) = v8;
      }
    }
  }
  return result;
}

uint64_t AUOneChannelNSV4::SetNoiseBound(uint64_t a1, int a2, CFTypeRef cf)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1 + 552;
  if (a2) {
    uint64_t v4 = a1 + 568;
  }
  if (a2 == 1) {
    uint64_t v5 = a1 + 568;
  }
  else {
    uint64_t v5 = v4;
  }
  CFRetain(cf);
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&cfa, cf);
  if (!cfa)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFBooleanRef v6 = applesauce::CF::details::find_at_key_or_optional<double,char const(&)[11]>((const __CFDictionary *)cfa, "SampleRate");
  char v8 = v7;
  if (!cfa)
  {
    int v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v21, "Could not construct");
  }
  double v9 = *(double *)&v6;
  applesauce::CF::details::find_at_key_or_optional<std::vector<unsigned char>,char const(&)[13]>(&__p, (const __CFDictionary *)cfa, "NoiseProfile");
  if (v8)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136315650;
      *(void *)&uint8_t buf[4] = "AUOneChannelNSV4.cpp";
      __int16 v27 = 1024;
      int v28 = 655;
      __int16 v29 = 1024;
      unsigned int v30 = v9;
      _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "%25s:%-5d Successfully retrieved sample rate (%iHz).", buf, 0x18u);
    }
    if (v24)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
      {
        uint64_t v10 = (unsigned int *)__p;
        unint64_t v11 = v23 - (void)__p;
        *(_DWORD *)int buf = 136315650;
        *(void *)&uint8_t buf[4] = "AUOneChannelNSV4.cpp";
        __int16 v27 = 1024;
        int v28 = 662;
        __int16 v29 = 1024;
        unsigned int v30 = v23 - __p;
        _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "%25s:%-5d Successfully retrieved profile vector (length %i).", buf, 0x18u);
      }
      else
      {
        uint64_t v10 = (unsigned int *)__p;
        unint64_t v11 = v23 - (void)__p;
      }
      unint64_t v14 = v11 >> 2;
      std::vector<float>::vector(buf, v11 >> 2);
      if (v11 >= 4)
      {
        int v15 = *(_DWORD **)buf;
        CFDictionaryRef v16 = v10;
        do
        {
          unsigned int v17 = *v16++;
          *v15++ = bswap32(v17);
          --v14;
        }
        while (v14);
      }
      uint64_t v18 = *(void *)(v5 + 8);
      if (v18) {
        MEMORY[0x1C185D340](v18, 0x1000C8052888210);
      }
      *(void *)(v5 + 8) = 0;
      operator new[]();
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "AUOneChannelNSV4.cpp";
      __int16 v27 = 1024;
      int v28 = 664;
      size_t v12 = MEMORY[0x1E4F14500];
      float v13 = "%25s:%-5d Profile vector is not present in the dictionary.";
      goto LABEL_18;
    }
  }
  else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)int buf = 136315394;
    *(void *)&uint8_t buf[4] = "AUOneChannelNSV4.cpp";
    __int16 v27 = 1024;
    int v28 = 657;
    size_t v12 = MEMORY[0x1E4F14500];
    float v13 = "%25s:%-5d Sample rate is not present in the dictionary.";
LABEL_18:
    _os_log_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_ERROR, v13, buf, 0x12u);
  }
  if (v24 && __p) {
    operator delete(__p);
  }
  if (cfa) {
    CFRelease(cfa);
  }
  return 4294956445;
}

void sub_1BB48DD7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, const void *a14, void *__p, uint64_t a16)
{
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  if (v16) {
    operator delete(v16);
  }
  applesauce::CF::DictionaryRef::~DictionaryRef(&a14);
  _Unwind_Resume(a1);
}

const __CFBoolean *applesauce::CF::details::find_at_key_or_optional<double,char const(&)[11]>(const __CFDictionary *a1, char *a2)
{
  CFBooleanRef result = (const __CFBoolean *)applesauce::CF::details::at_key<char const(&)[11]>(a1, a2);
  if (result) {
    return applesauce::CF::convert_as<double,0>(result);
  }
  return result;
}

const void *applesauce::CF::details::find_at_key_or_optional<std::vector<unsigned char>,char const(&)[13]>(unsigned char *a1, const __CFDictionary *a2, char *__s)
{
  CFBooleanRef result = applesauce::CF::details::at_key<char const(&)[13]>(a2, __s);
  if (result)
  {
    return (const void *)applesauce::CF::convert_as<std::vector<unsigned char>,0>((uint64_t)a1, result);
  }
  else
  {
    *a1 = 0;
    a1[24] = 0;
  }
  return result;
}

CFTypeID applesauce::CF::convert_as<std::vector<unsigned char>,0>(uint64_t a1, const void *a2)
{
  CFTypeID TypeID = CFDataGetTypeID();
  CFTypeID result = CFGetTypeID(a2);
  if (TypeID == result)
  {
    BytePtr = CFDataGetBytePtr((CFDataRef)a2);
    CFIndex Length = CFDataGetLength((CFDataRef)a2);
    long long v8 = 0uLL;
    uint64_t v9 = 0;
    CFTypeID result = (CFTypeID)std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(&v8, BytePtr, (uint64_t)&BytePtr[Length], Length);
    *(_OWORD *)a1 = v8;
    *(void *)(a1 + 16) = v9;
    *(unsigned char *)(a1 + 24) = 1;
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  return result;
}

uint64_t AUOneChannelNSV4::GetProperty(AUOneChannelNSV4 *this, int a2, int a3, unsigned int a4, void *a5)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 <= 4520)
  {
    if (a2 == 21)
    {
      int v9 = (*(uint64_t (**)(AUOneChannelNSV4 *))(*(void *)this + 576))(this);
      uint64_t result = 0;
    }
    else
    {
      if (a2 != 3700) {
        return result;
      }
      uint64_t result = 0;
      int v9 = *((unsigned __int8 *)this + 376);
    }
    goto LABEL_14;
  }
  switch(a2)
  {
    case 4521:
      uint64_t result = 0;
      int v9 = *((_DWORD *)this + 146);
LABEL_14:
      *(_DWORD *)a5 = v9;
      return result;
    case 4522:
      uint64_t result = 0;
      int v9 = *((_DWORD *)this + 147);
      goto LABEL_14;
    case 4523:
      uint64_t result = 0;
      long long v8 = *((_OWORD *)this + 37);
      a5[2] = *((void *)this + 76);
      *(_OWORD *)a5 = v8;
      break;
  }
  return result;
}

uint64_t AUOneChannelNSV4::GetPropertyInfo(AUOneChannelNSV4 *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3) {
    return 4294956417;
  }
  unsigned int v8 = 4;
  char v9 = 1;
  uint64_t result = 4294956417;
  if (a2 > 4520)
  {
    if (a2 != 4521)
    {
      if (a2 != 4522)
      {
        if (a2 != 4523) {
          return result;
        }
        unsigned int v8 = 24;
      }
      char v9 = *((unsigned char *)this + 17) ^ 1;
    }
    goto LABEL_11;
  }
  if (a2 == 21 || a2 == 3700)
  {
LABEL_11:
    uint64_t result = 0;
    *a6 = v9;
    *a5 = v8;
  }
  return result;
}

uint64_t *AUOneChannelNSV4::Cleanup(AUOneChannelNSV4 *this)
{
  uint64_t v2 = *((void *)this + 77);
  if (v2)
  {
    CNoiseSuppressorV4::speex_preprocess_state_destroy(v2);
    *((void *)this + 77) = 0;
  }

  return std::unique_ptr<BlockProcessor>::reset[abi:ne180100]((uint64_t *)this + 66, 0);
}

uint64_t AUOneChannelNSV4::Initialize(AUOneChannelNSV4 *this)
{
  (*(void (**)(AUOneChannelNSV4 *))(*(void *)this + 64))(this);
  uint64_t v2 = *((void *)this + 15);
  if (v2) {
    LODWORD(v3) = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  else {
    uint64_t v3 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
  }
  *((_DWORD *)this + 156) = v3;
  uint64_t v4 = *((void *)this + 21);
  if (v4)
  {
    LODWORD(v5) = (*(uint64_t (**)(void))(*(void *)v4 + 24))(*((void *)this + 21));
    LODWORD(v3) = *((_DWORD *)this + 156);
  }
  else
  {
    uint64_t v5 = (*((void *)this + 19) - *((void *)this + 18)) >> 3;
  }
  *((_DWORD *)this + 157) = v5;
  if ((v3 - 4) >= 0xFFFFFFFD && v5 != 0 && v5 <= 3)
  {
    *((unsigned char *)this + 548) = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUOneChannelNSV4 *)((char *)this + 80), 0) + 88) == 1718773105;
    *((unsigned char *)this + 549) = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUOneChannelNSV4 *)((char *)this + 128), 0) + 88) == 1718773105;
    double v8 = *(double *)(ausdk::AUScope::SafeGetElement((AUOneChannelNSV4 *)((char *)this + 128), 0) + 80);
    if (*((unsigned char *)this + 376))
    {
      int v9 = *((_DWORD *)this + 84);
      uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUOneChannelNSV4 *)((char *)this + 32), 0);
      float Parameter = ausdk::AUElement::GetParameter(Element, 0xAu);
      CNoiseSuppressorV4::speex_preprocess_state_init(v9, v8, 0, 1, (int)Parameter, 1, 0);
    }
    ausdk::AUScope::SafeGetElement((AUOneChannelNSV4 *)((char *)this + 128), 0);
    ausdk::AUScope::SafeGetElement((AUOneChannelNSV4 *)((char *)this + 80), 0);
    ausdk::AUScope::SafeGetElement((AUOneChannelNSV4 *)((char *)this + 128), 0);
    operator new();
  }
  return 4294956421;
}

void sub_1BB48E3AC(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x1080C40622722D2);
  _Unwind_Resume(a1);
}

uint64_t AUOneChannelNSV4::BlockProcessClassFunc(int **this, void *a2, uint64_t a3, const AudioBufferList **a4, AudioBufferList **a5)
{
  unsigned int v6 = a2;
  double v8 = *(char **)(*(void *)a3 + 16);
  CNoiseSuppressorV4::speex_preprocess_run(this[77], v8, 0, (const float *)v8);
  int v9 = this[77];
  if (v9) {
    float v10 = *((float *)v9 + 83);
  }
  else {
    float v10 = 0.0;
  }
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(this + 4), 0);
  ausdk::AUElement::SetParameter(Element, 1u, v10, 0);
  size_t v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(this + 4), 0);
  ausdk::AUElement::SetParameter(v12, 2u, *((float *)this[77] + 84), 0);
  float v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(this + 4), 0);
  ausdk::AUElement::SetParameter(v13, 5u, *((float *)this[77] + 85), 0);
  memcpy((*a4)->mBuffers[0].mData, v8, 4 * v6);
  return 0;
}

void AUOneChannelNSV4::~AUOneChannelNSV4(AUOneChannelNSV4 *this)
{
  AUOneChannelNSV4::~AUOneChannelNSV4(this);

  JUMPOUT(0x1C185D370);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_1F14AEBC8;
  AUOneChannelNSV4::Cleanup(this);
  uint64_t v2 = *((void *)this + 70);
  if (v2) {
    MEMORY[0x1C185D340](v2, 0x1000C8052888210);
  }
  *((void *)this + 69) = 0;
  *((void *)this + 70) = 0;
  uint64_t v3 = *((void *)this + 72);
  if (v3) {
    MEMORY[0x1C185D340](v3, 0x1000C8052888210);
  }
  *((void *)this + 71) = 0;
  *((void *)this + 72) = 0;
  uint64_t v4 = (void *)*((void *)this + 76);
  if (v4) {
    free(v4);
  }
  std::unique_ptr<BlockProcessor>::reset[abi:ne180100]((uint64_t *)this + 66, 0);

  ausdk::AUBase::~AUBase(this);
}

uint64_t *std::map<std::pair<unsigned int,unsigned int>,double>::map[abi:ne180100](uint64_t *result, uint64_t a2)
{
  qword_1E9F7EAD8 = 0;
  qword_1E9F7EAD0 = 0;
  GetVPPreferredClientSampleRateInfoMap(void)::infoMap = (uint64_t)&qword_1E9F7EAD0;
  if (a2)
  {
    uint64_t v2 = (unsigned int *)result;
    uint64_t v3 = 0;
    uint64_t v4 = (unsigned int *)&result[2 * a2];
    uint64_t v5 = &qword_1E9F7EAD0;
    while (1)
    {
      if (v5 == &qword_1E9F7EAD0)
      {
        char v7 = &qword_1E9F7EAD0;
      }
      else
      {
        unsigned int v6 = (uint64_t *)v3;
        if (v3)
        {
          do
          {
            char v7 = v6;
            unsigned int v6 = (uint64_t *)v6[1];
          }
          while (v6);
        }
        else
        {
          double v8 = &qword_1E9F7EAD0;
          do
          {
            char v7 = (uint64_t *)v8[2];
            BOOL v10 = *v7 == (void)v8;
            double v8 = v7;
          }
          while (v10);
        }
        unsigned int v9 = *((_DWORD *)v7 + 8);
        BOOL v10 = v9 == *v2;
        if (v9 >= *v2) {
          char v11 = 1;
        }
        else {
          char v11 = -1;
        }
        if (v10)
        {
          unsigned int v12 = *((_DWORD *)v7 + 9);
          unsigned int v13 = v2[1];
          BOOL v14 = v12 == v13;
          char v11 = v12 >= v13 ? 1 : -1;
          if (v14) {
            char v11 = 0;
          }
        }
        if ((v11 & 0x80) == 0)
        {
          uint64_t result = std::__tree<std::__value_type<std::pair<unsigned int,unsigned int>,double>,std::__map_value_compare<std::pair<unsigned int,unsigned int>,std::__value_type<std::pair<unsigned int,unsigned int>,double>,std::less<std::pair<unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<unsigned int,unsigned int>,double>>>::__find_equal<std::pair<unsigned int,unsigned int>>(&v18, *v2, v2[1]);
          int v15 = result;
          goto LABEL_25;
        }
      }
      if (v3)
      {
        uint64_t v18 = v7;
        int v15 = v7 + 1;
      }
      else
      {
        uint64_t v18 = &qword_1E9F7EAD0;
        int v15 = &qword_1E9F7EAD0;
      }
LABEL_25:
      if (!*v15)
      {
        CFDictionaryRef v16 = operator new(0x30uLL);
        void v16[2] = *(_OWORD *)v2;
        unsigned int v17 = v18;
        *(void *)CFDictionaryRef v16 = 0;
        *((void *)v16 + 1) = 0;
        *((void *)v16 + 2) = v17;
        uint64_t *v15 = (uint64_t)v16;
        if (*(void *)GetVPPreferredClientSampleRateInfoMap(void)::infoMap)
        {
          GetVPPreferredClientSampleRateInfoMap(void)::infoMap = *(void *)GetVPPreferredClientSampleRateInfoMap(void)::infoMap;
          CFDictionaryRef v16 = (_OWORD *)*v15;
        }
        uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1E9F7EAD0, (uint64_t *)v16);
        ++qword_1E9F7EAD8;
      }
      v2 += 4;
      if (v2 == v4) {
        return result;
      }
      uint64_t v5 = (uint64_t *)GetVPPreferredClientSampleRateInfoMap(void)::infoMap;
      uint64_t v3 = qword_1E9F7EAD0;
    }
  }
  return result;
}

void sub_1BB48E72C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(v1);
  _Unwind_Resume(a1);
}

uint64_t std::map<std::pair<unsigned int,unsigned int>,double>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::pair<unsigned int,unsigned int>,double>,std::__map_value_compare<std::pair<unsigned int,unsigned int>,std::__value_type<std::pair<unsigned int,unsigned int>,double>,std::less<std::pair<unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<unsigned int,unsigned int>,double>>>::__find_equal<std::pair<unsigned int,unsigned int>>(uint64_t **a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3 = &qword_1E9F7EAD0;
  uint64_t v4 = qword_1E9F7EAD0;
  if (qword_1E9F7EAD0)
  {
    uint64_t v5 = &qword_1E9F7EAD0;
    while (1)
    {
      uint64_t v3 = (uint64_t *)v4;
      unsigned int v6 = *(_DWORD *)(v4 + 32);
      if (v6 == a2)
      {
        unsigned int v7 = *((_DWORD *)v3 + 9);
        BOOL v8 = v7 == a3;
        if (v7 <= a3)
        {
          if (v7 >= a3) {
            char v9 = 1;
          }
          else {
            char v9 = -1;
          }
          if (v8) {
            char v9 = 0;
          }
          if ((v9 & 0x80) == 0) {
            goto LABEL_22;
          }
          goto LABEL_19;
        }
LABEL_13:
        uint64_t v4 = *v3;
        uint64_t v5 = v3;
        if (!*v3) {
          goto LABEL_22;
        }
      }
      else
      {
        if (v6 > a2) {
          goto LABEL_13;
        }
        if (v6 >= a2) {
          char v10 = 1;
        }
        else {
          char v10 = -1;
        }
        if ((v10 & 0x80) == 0) {
          goto LABEL_22;
        }
LABEL_19:
        uint64_t v5 = v3 + 1;
        uint64_t v4 = v3[1];
        if (!v4) {
          goto LABEL_22;
        }
      }
    }
  }
  uint64_t v5 = &qword_1E9F7EAD0;
LABEL_22:
  *a1 = v3;
  return v5;
}

uint64_t GetVPPreferredClientSampleRate(unsigned int a1, unsigned int a2)
{
  v10[20] = *(uint64_t **)MEMORY[0x1E4F143B8];
  uint64_t v3 = a1 - 125;
  if (v3 > 0x37) {
    goto LABEL_6;
  }
  if (((1 << (a1 - 125)) & 0x10FFFFE1E600) == 0)
  {
    if (((1 << (a1 - 125)) & 0x10000000000001) != 0) {
      goto LABEL_13;
    }
    if (v3 == 55)
    {
LABEL_8:
      unsigned int v4 = 5;
      goto LABEL_9;
    }
LABEL_6:
    if (a1 > 0x2E) {
      goto LABEL_14;
    }
    if (((1 << a1) & 0x40FF9C060600) != 0) {
      goto LABEL_8;
    }
    if (((1 << a1) & 0x3000000) == 0)
    {
LABEL_14:
      unsigned int v4 = 2;
      goto LABEL_9;
    }
LABEL_13:
    unsigned int v4 = 0;
    goto LABEL_9;
  }
  unsigned int v4 = 1;
LABEL_9:
  {
    unsigned int v7 = a2;
    unsigned int v9 = v4;
    unsigned int v4 = v9;
    a2 = v7;
    if (v8)
    {
      v10[0] = (uint64_t *)0x600000000;
      v10[1] = (uint64_t *)0x40CF400000000000;
      _OWORD v10[2] = (uint64_t *)0x500000000;
      v10[3] = (uint64_t *)0x40CF400000000000;
      v10[4] = (uint64_t *)0x600000001;
      _DWORD v10[5] = (uint64_t *)0x40D7700000000000;
      v10[6] = (uint64_t *)0x500000001;
      v10[7] = (uint64_t *)0x40D7700000000000;
      v10[8] = (uint64_t *)0x600000002;
      v10[9] = (uint64_t *)0x40D7700000000000;
      v10[10] = (uint64_t *)0x500000002;
      v10[11] = (uint64_t *)0x40D7700000000000;
      v10[12] = (uint64_t *)0x600000003;
      v10[13] = (uint64_t *)0x40D7700000000000;
      v10[14] = (uint64_t *)0x500000003;
      v10[15] = (uint64_t *)0x40D7700000000000;
      v10[16] = (uint64_t *)0x600000005;
      v10[17] = (uint64_t *)0x40DF400000000000;
      v10[18] = (uint64_t *)0x500000005;
      v10[19] = (uint64_t *)0x40DF400000000000;
      std::map<std::pair<unsigned int,unsigned int>,double>::map[abi:ne180100]((uint64_t *)v10, 10);
      __cxa_atexit((void (*)(void *))std::map<std::pair<unsigned int,unsigned int>,double>::~map[abi:ne180100], &GetVPPreferredClientSampleRateInfoMap(void)::infoMap, &dword_1BB0CE000);
      a2 = v7;
      unsigned int v4 = v9;
    }
  }
  uint64_t v5 = *std::__tree<std::__value_type<std::pair<unsigned int,unsigned int>,double>,std::__map_value_compare<std::pair<unsigned int,unsigned int>,std::__value_type<std::pair<unsigned int,unsigned int>,double>,std::less<std::pair<unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<unsigned int,unsigned int>,double>>>::__find_equal<std::pair<unsigned int,unsigned int>>(v10, v4, a2);
  if (!v5) {
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  }
  return *(void *)(v5 + 40);
}

void sub_1BB48EA38(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BB48E8C0);
  }
  _Unwind_Resume(exception_object);
}

float DirectionalStatistics::DirectionalMean(float *a1, float *a2)
{
  if (a2 == a1)
  {
    float v5 = 0.0;
    float v4 = 0.0;
  }
  else
  {
    uint64_t v2 = a1;
    if ((unint64_t)(a2 - a1) <= 1) {
      uint64_t v3 = 1;
    }
    else {
      uint64_t v3 = a2 - a1;
    }
    float v4 = 0.0;
    float v5 = 0.0;
    do
    {
      float v6 = *v2++;
      __float2 v7 = __sincosf_stret(v6);
      float v4 = v4 + v7.__cosval;
      float v5 = v5 + v7.__sinval;
      --v3;
    }
    while (v3);
  }

  return atan2f(v5, v4);
}

void ZoomCurveValue::ZoomCurveValue(ZoomCurveValue *this)
{
  *(void *)&long long v10 = *MEMORY[0x1E4F143B8];
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v2 = (std::vector<std::string> *)((char *)this + 24);
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 6) = *(void *)"FOVToBeamMix";
  *(void *)this = (char *)this + 8;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((unsigned char *)this + 71) = 12;
  *((_DWORD *)this + 14) = 2020167021;
  std::string::basic_string[abi:ne180100]<0>(&v8, "focused");
  std::string::basic_string[abi:ne180100]<0>(v9, "wide");
  long long v4 = 0uLL;
  uint64_t v5 = 0;
  float v6 = (void **)&v4;
  char v7 = 0;
  *(void *)&long long v4 = operator new(0x30uLL);
  *((void *)&v4 + 1) = v4;
  uint64_t v5 = v4 + 48;
  *((void *)&v4 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v5, &v8, &v10, (std::string *)v4);
  std::vector<std::__fs::filesystem::path>::__vdeallocate(v2);
  *(_OWORD *)((char *)this + 24) = v4;
  *((void *)this + 5) = v5;
  uint64_t v5 = 0;
  long long v4 = 0uLL;
  float v6 = (void **)&v4;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v6);
  for (uint64_t i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v9[i + 2]) < 0) {
      operator delete((void *)v9[i]);
    }
  }
}

void sub_1BB48EC74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&a12);
  uint64_t v29 = 0;
  while (1)
  {
    if (*(&a25 + v29) < 0) {
      operator delete(*(void **)((char *)&a20 + v29));
    }
    v29 -= 24;
    if (v29 == -48)
    {
      if (*(char *)(v25 + 71) < 0) {
        operator delete(*v27);
      }
      std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*v26);
      _Unwind_Resume(a1);
    }
  }
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  long long v4 = this;
  char v11 = this;
  unsigned int v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  _DWORD v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    float v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        long long v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      float v6 = (long long *)((char *)v6 + 24);
      unsigned int v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1BB48EDB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ZoomCurveValue::ZoomCurveValue(uint64_t a1, uint64_t a2, std::string *__str)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  *(_OWORD *)(a1 + 24) = 0u;
  uint64_t v5 = (std::vector<std::string> *)(a1 + 24);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  std::string::operator=((std::string *)(a1 + 48), __str);
  if (v5 != (std::vector<std::string> *)a2) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v5, *(std::string **)a2, *(long long **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  }
  return a1;
}

void sub_1BB48EE60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 71) < 0) {
    operator delete(*v3);
  }
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*v4);
  _Unwind_Resume(a1);
}

void ZoomCurveValue::SaveToDictionary(ZoomCurveValue *this, __CFDictionary *a2)
{
  uint64_t v3 = a2;
  uint64_t v23 = this;
  long long v4 = *(ZoomCurveValue **)this;
  int v21 = v3;
  __int16 v22 = (ZoomCurveValue **)((char *)this + 8);
  if (*(ZoomCurveValue **)this != (ZoomCurveValue *)((char *)this + 8))
  {
    char v24 = (void *)((char *)this + 48);
    do
    {
      std::pair<std::string const,PiecewiseLinearTransform>::pair[abi:ne180100](&v30, (long long *)v4 + 2);
      uint64_t v5 = &v30;
      if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v5 = (std::string *)v30.__r_.__value_.__r.__words[0];
      }
      float v6 = v24;
      if (*((char *)v23 + 71) < 0) {
        float v6 = (void *)*v24;
      }
      uint64_t v7 = objc_msgSend(NSString, "stringWithFormat:", @"%s%s", v5, v6);
      __int16 v27 = 0;
      int v28 = 0;
      uint64_t v29 = 0;
      std::vector<std::pair<float,float>>::__init_with_size[abi:ne180100]<std::pair<float,float>*,std::pair<float,float>*>((char *)&v27, (uint64_t *)__p, v32, ((char *)v32 - (unsigned char *)__p) >> 3);
      uint64_t v25 = (void *)v7;
      uint64_t v26 = objc_opt_new();
      long long v8 = objc_opt_new();
      char v11 = v27;
      char v10 = v28;
      for (uint64_t i = v27; i != v10; i += 2)
      {
        unsigned int v13 = (void *)MEMORY[0x1E4F1C978];
        LODWORD(v9) = *i;
        BOOL v14 = [NSNumber numberWithFloat:v9];
        LODWORD(v15) = i[1];
        CFDictionaryRef v16 = [NSNumber numberWithFloat:v15];
        unsigned int v17 = objc_msgSend(v13, "arrayWithObjects:", v14, v16, 0);
        [v8 addObject:v17];
      }
      [v26 setObject:v8 forKeyedSubscript:@"Breakpoints"];

      if (v11)
      {
        int v28 = v11;
        operator delete(v11);
      }
      if (v26) {
        [(__CFDictionary *)v21 setObject:v26 forKeyedSubscript:v25];
      }

      if (__p)
      {
        uint64_t v32 = (uint64_t *)__p;
        operator delete(__p);
      }
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v30.__r_.__value_.__l.__data_);
      }
      uint64_t v18 = (ZoomCurveValue *)*((void *)v4 + 1);
      if (v18)
      {
        do
        {
          BOOL v19 = (ZoomCurveValue **)v18;
          uint64_t v18 = *(ZoomCurveValue **)v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          BOOL v19 = (ZoomCurveValue **)*((void *)v4 + 2);
          BOOL v20 = *v19 == v4;
          long long v4 = (ZoomCurveValue *)v19;
        }
        while (!v20);
      }
      long long v4 = (ZoomCurveValue *)v19;
    }
    while (v19 != v22);
  }
}

void sub_1BB48F0C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21)
{
  std::pair<std::string const,PiecewiseLinearTransform>::~pair((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,PiecewiseLinearTransform>::~pair(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

float PiecewiseLinearTransform::ApplyFunctionToChangeXValues(char **a1, uint64_t a2, double a3)
{
  uint64_t v3 = *a1;
  long long v4 = a1[1];
  if (*a1 == v4)
  {
    long long v8 = (float *)*a1;
  }
  else
  {
    do
    {
      int v12 = *(_DWORD *)v3;
      uint64_t v7 = *(void *)(a2 + 24);
      if (!v7) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      *(float *)&a3 = (*(float (**)(uint64_t, int *))(*(void *)v7 + 48))(v7, &v12);
      *(_DWORD *)uint64_t v3 = LODWORD(a3);
      v3 += 8;
    }
    while (v3 != v4);
    long long v8 = (float *)*a1;
    uint64_t v3 = a1[1];
  }
  unint64_t v9 = 126 - 2 * __clz((v3 - (char *)v8) >> 3);
  if (v3 == (char *)v8) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = v9;
  }
  return _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEELb0EEEvT1_SC_S5_NS_15iterator_traitsISC_E15difference_typeEb(v8, (unint64_t)v3, v10, 1, a3);
}

void *std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

float _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEELb0EEEvT1_SC_S5_NS_15iterator_traitsISC_E15difference_typeEb(float *a1, unint64_t a2, uint64_t a3, char a4, double a5)
{
  while (2)
  {
    char v11 = (_DWORD *)(a2 - 8);
    unint64_t v12 = (unint64_t)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (float *)v12;
          uint64_t v13 = a2 - v12;
          unint64_t v14 = (uint64_t)(a2 - v12) >> 3;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return *(float *)&a5;
              case 2uLL:
                LODWORD(a5) = *v11;
                float v41 = *(float *)v12;
                if (*(float *)v11 < *(float *)v12)
                {
                  *(_DWORD *)unint64_t v12 = LODWORD(a5);
                  *(float *)(a2 - 8) = v41;
                  LODWORD(a5) = *(_DWORD *)(v12 + 4);
                  *(_DWORD *)(v12 + 4) = *(_DWORD *)(a2 - 4);
                  *(_DWORD *)(a2 - 4) = LODWORD(a5);
                }
                break;
              case 3uLL:
                *(float *)&a5 = _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEjT1_SC_SC_S5_((float *)v12, (float *)(v12 + 8), (float *)(a2 - 8));
                break;
              case 4uLL:
                *(float *)&a5 = _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEvT1_SC_SC_SC_S5_((float *)v12, v12 + 8, v12 + 16, a2 - 8);
                break;
              case 5uLL:
                *(float *)&a5 = _ZNSt3__17__sort5B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEvT1_SC_SC_SC_SC_S5_((float *)v12, (float *)(v12 + 8), (float *)(v12 + 16), (float *)(v12 + 24), (float *)(a2 - 8));
                break;
              default:
                JUMPOUT(0);
            }
            return *(float *)&a5;
          }
          if (v13 <= 191)
          {
            unint64_t v42 = v12 + 8;
            BOOL v44 = v12 == a2 || v42 == a2;
            if (a4)
            {
              if (!v44)
              {
                uint64_t v45 = 0;
                unint64_t v46 = v12;
                do
                {
                  unint64_t v47 = v42;
                  LODWORD(a5) = *(_DWORD *)(v46 + 8);
                  float v48 = *(float *)v46;
                  if (*(float *)&a5 < *(float *)v46)
                  {
                    int v49 = *(_DWORD *)(v46 + 12);
                    uint64_t v50 = v45;
                    while (1)
                    {
                      uint64_t v51 = v12 + v50;
                      int v52 = *(_DWORD *)(v12 + v50 + 4);
                      *(float *)(v51 + 8) = v48;
                      *(_DWORD *)(v51 + 12) = v52;
                      if (!v50) {
                        break;
                      }
                      float v48 = *(float *)(v51 - 8);
                      v50 -= 8;
                      if (*(float *)&a5 >= v48)
                      {
                        int v53 = (_DWORD *)(v12 + v50 + 8);
                        goto LABEL_82;
                      }
                    }
                    int v53 = (_DWORD *)v12;
LABEL_82:
                    *int v53 = LODWORD(a5);
                    v53[1] = v49;
                  }
                  unint64_t v42 = v47 + 8;
                  v45 += 8;
                  unint64_t v46 = v47;
                }
                while (v47 + 8 != a2);
              }
            }
            else if (!v44)
            {
              BOOL v80 = (float *)(v12 + 12);
              do
              {
                int v81 = (float *)v42;
                *(float *)&a5 = a1[2];
                float v82 = *a1;
                if (*(float *)&a5 < *a1)
                {
                  int v83 = *((_DWORD *)a1 + 3);
                  BOOL v84 = v80;
                  do
                  {
                    int v85 = v84;
                    *(v84 - 1) = v82;
                    int v86 = *((_DWORD *)v84 - 2);
                    v84 -= 2;
                    *(_DWORD *)int v85 = v86;
                    float v82 = *(v85 - 5);
                  }
                  while (*(float *)&a5 < v82);
                  *(v84 - 1) = *(float *)&a5;
                  *(_DWORD *)BOOL v84 = v83;
                }
                unint64_t v42 = (unint64_t)(v81 + 2);
                v80 += 2;
                a1 = v81;
              }
              while (v81 + 2 != (float *)a2);
            }
            return *(float *)&a5;
          }
          if (!a3)
          {
            if (v12 != a2)
            {
              int64_t v54 = (v14 - 2) >> 1;
              int64_t v55 = v54;
              do
              {
                int64_t v56 = v55;
                if (v54 >= v55)
                {
                  uint64_t v57 = (2 * v55) | 1;
                  unint64_t v58 = v12 + 8 * v57;
                  if (2 * v56 + 2 < (uint64_t)v14 && *(float *)v58 < *(float *)(v58 + 8))
                  {
                    v58 += 8;
                    uint64_t v57 = 2 * v56 + 2;
                  }
                  unint64_t v59 = v12 + 8 * v56;
                  float v60 = *(float *)v58;
                  float v61 = *(float *)v59;
                  if (*(float *)v58 >= *(float *)v59)
                  {
                    int v62 = *(_DWORD *)(v59 + 4);
                    do
                    {
                      int v63 = (float *)v59;
                      unint64_t v59 = v58;
                      *int v63 = v60;
                      v63[1] = *(float *)(v58 + 4);
                      if (v54 < v57) {
                        break;
                      }
                      uint64_t v64 = 2 * v57;
                      uint64_t v57 = (2 * v57) | 1;
                      unint64_t v58 = v12 + 8 * v57;
                      uint64_t v65 = v64 + 2;
                      if (v65 < (uint64_t)v14 && *(float *)v58 < *(float *)(v58 + 8))
                      {
                        v58 += 8;
                        uint64_t v57 = v65;
                      }
                      float v60 = *(float *)v58;
                    }
                    while (*(float *)v58 >= v61);
                    *(float *)unint64_t v59 = v61;
                    *(_DWORD *)(v59 + 4) = v62;
                  }
                }
                int64_t v55 = v56 - 1;
              }
              while (v56);
              uint64_t v66 = (unint64_t)v13 >> 3;
              do
              {
                uint64_t v67 = 0;
                float v68 = *(float *)v12;
                LODWORD(a5) = *(_DWORD *)(v12 + 4);
                int v69 = (_DWORD *)v12;
                do
                {
                  int v70 = v69;
                  v69 += 2 * v67 + 2;
                  uint64_t v71 = 2 * v67;
                  uint64_t v67 = (2 * v67) | 1;
                  uint64_t v72 = v71 + 2;
                  if (v72 < v66 && *(float *)v69 < *((float *)v69 + 2))
                  {
                    v69 += 2;
                    uint64_t v67 = v72;
                  }
                  *int v70 = *v69;
                  v70[1] = v69[1];
                }
                while (v67 <= (uint64_t)((unint64_t)(v66 - 2) >> 1));
                if (v69 == (_DWORD *)(a2 - 8))
                {
                  *(float *)int v69 = v68;
                  v69[1] = LODWORD(a5);
                }
                else
                {
                  *int v69 = *(_DWORD *)(a2 - 8);
                  v69[1] = *(_DWORD *)(a2 - 4);
                  *(float *)(a2 - 8) = v68;
                  *(_DWORD *)(a2 - 4) = LODWORD(a5);
                  uint64_t v73 = (uint64_t)v69 - v12 + 8;
                  if (v73 >= 9)
                  {
                    unint64_t v74 = (unint64_t)((v73 >> 3) - 2) >> 1;
                    long long v75 = (float *)(v12 + 8 * v74);
                    float v76 = *v75;
                    LODWORD(a5) = *v69;
                    if (*v75 < *(float *)v69)
                    {
                      int v77 = v69[1];
                      do
                      {
                        uint64_t v78 = (float *)v69;
                        int v69 = v75;
                        *uint64_t v78 = v76;
                        v78[1] = v75[1];
                        if (!v74) {
                          break;
                        }
                        unint64_t v74 = (v74 - 1) >> 1;
                        long long v75 = (float *)(v12 + 8 * v74);
                        float v76 = *v75;
                      }
                      while (*v75 < *(float *)&a5);
                      *int v69 = LODWORD(a5);
                      v69[1] = v77;
                    }
                  }
                }
                a2 -= 8;
              }
              while (v66-- > 2);
            }
            return *(float *)&a5;
          }
          unint64_t v15 = v14 >> 1;
          CFDictionaryRef v16 = (float *)(v12 + 8 * (v14 >> 1));
          if ((unint64_t)v13 >= 0x401)
          {
            _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEjT1_SC_SC_S5_(a1, &a1[2 * (v14 >> 1)], (float *)(a2 - 8));
            _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEjT1_SC_SC_S5_(a1 + 2, v16 - 2, (float *)(a2 - 16));
            _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEjT1_SC_SC_S5_(a1 + 4, &a1[2 * v15 + 2], (float *)(a2 - 24));
            _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEjT1_SC_SC_S5_(v16 - 2, v16, &a1[2 * v15 + 2]);
            double v17 = *(double *)a1;
            *(void *)a1 = *(void *)v16;
            *(double *)CFDictionaryRef v16 = v17;
          }
          else
          {
            _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEjT1_SC_SC_S5_(&a1[2 * (v14 >> 1)], a1, (float *)(a2 - 8));
          }
          --a3;
          if ((a4 & 1) != 0 || *(a1 - 2) < *a1) {
            break;
          }
          a5 = *(double *)a1;
          if (COERCE_FLOAT(*(void *)a1) >= *(float *)v11)
          {
            uint64_t v33 = a1 + 2;
            do
            {
              unint64_t v12 = (unint64_t)v33;
              if ((unint64_t)v33 >= a2) {
                break;
              }
              ++v33;
            }
            while (*(float *)&a5 >= *(float *)v12);
          }
          else
          {
            unint64_t v12 = (unint64_t)a1;
            do
            {
              float v32 = *(float *)(v12 + 8);
              v12 += 8;
            }
            while (*(float *)&a5 >= v32);
          }
          float v34 = (float *)a2;
          if (v12 < a2)
          {
            float v34 = (float *)a2;
            do
            {
              float v35 = *(v34 - 2);
              v34 -= 2;
            }
            while (*(float *)&a5 < v35);
          }
          if (v12 < (unint64_t)v34)
          {
            float v36 = *(float *)v12;
            float v37 = *v34;
            do
            {
              *(float *)unint64_t v12 = v37;
              *float v34 = v36;
              int v38 = *(_DWORD *)(v12 + 4);
              *(float *)(v12 + 4) = v34[1];
              *((_DWORD *)v34 + 1) = v38;
              do
              {
                float v39 = *(float *)(v12 + 8);
                v12 += 8;
                float v36 = v39;
              }
              while (*(float *)&a5 >= v39);
              do
              {
                float v40 = *(v34 - 2);
                v34 -= 2;
                float v37 = v40;
              }
              while (*(float *)&a5 < v40);
            }
            while (v12 < (unint64_t)v34);
          }
          BOOL v5 = v12 - 8 >= (unint64_t)a1;
          BOOL v6 = v12 - 8 == (void)a1;
          if ((float *)(v12 - 8) != a1)
          {
            *a1 = *(float *)(v12 - 8);
            a1[1] = *(float *)(v12 - 4);
          }
          a4 = 0;
          *(double *)(v12 - 8) = a5;
        }
        double v18 = *(double *)a1;
        BOOL v19 = a1;
        do
        {
          BOOL v20 = v19;
          float v21 = v19[2];
          v19 += 2;
          float v22 = v21;
        }
        while (v21 < *(float *)&v18);
        uint64_t v23 = (float *)a2;
        if (v20 == a1)
        {
          uint64_t v23 = (float *)a2;
          do
          {
            if (v19 >= v23) {
              break;
            }
            float v25 = *(v23 - 2);
            v23 -= 2;
          }
          while (v25 >= *(float *)&v18);
        }
        else
        {
          do
          {
            float v24 = *(v23 - 2);
            v23 -= 2;
          }
          while (v24 >= *(float *)&v18);
        }
        if (v19 >= v23)
        {
          unint64_t v12 = (unint64_t)v19;
        }
        else
        {
          float v26 = *v23;
          unint64_t v12 = (unint64_t)v19;
          __int16 v27 = v23;
          do
          {
            *(float *)unint64_t v12 = v26;
            *__int16 v27 = v22;
            int v28 = *(_DWORD *)(v12 + 4);
            *(float *)(v12 + 4) = v27[1];
            *((_DWORD *)v27 + 1) = v28;
            do
            {
              float v29 = *(float *)(v12 + 8);
              v12 += 8;
              float v22 = v29;
            }
            while (v29 < *(float *)&v18);
            do
            {
              float v30 = *(v27 - 2);
              v27 -= 2;
              float v26 = v30;
            }
            while (v30 >= *(float *)&v18);
          }
          while (v12 < (unint64_t)v27);
        }
        if ((float *)(v12 - 8) != a1)
        {
          *a1 = *(float *)(v12 - 8);
          a1[1] = *(float *)(v12 - 4);
        }
        *(double *)(v12 - 8) = v18;
        if (v19 >= v23) {
          break;
        }
LABEL_32:
        _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEELb0EEEvT1_SC_S5_NS_15iterator_traitsISC_E15difference_typeEb(a1, v12 - 8, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v31 = _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEbT1_SC_S5_((uint64_t)a1, v12 - 8);
      if (_ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEbT1_SC_S5_(v12, a2))
      {
        break;
      }
      if (!v31) {
        goto LABEL_32;
      }
    }
    a2 = v12 - 8;
    if (!v31) {
      continue;
    }
    return *(float *)&a5;
  }
}

float _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEjT1_SC_SC_S5_(float *a1, float *a2, float *a3)
{
  float result = *a2;
  float v4 = *a1;
  float v5 = *a3;
  if (*a2 < *a1)
  {
    if (v5 >= result)
    {
      *a1 = result;
      *a2 = v4;
      int v11 = *((_DWORD *)a1 + 1);
      a1[1] = a2[1];
      *((_DWORD *)a2 + 1) = v11;
      float result = *a2;
      if (*a3 >= *a2) {
        return result;
      }
      *a2 = *a3;
      *a3 = result;
      uint64_t v7 = a3 + 1;
      BOOL v6 = a2 + 1;
    }
    else
    {
      *a1 = v5;
      BOOL v6 = a1 + 1;
      *a3 = v4;
      uint64_t v7 = a3 + 1;
    }
    long long v8 = v7;
    goto LABEL_10;
  }
  if (v5 < result)
  {
    *a2 = v5;
    *a3 = result;
    long long v8 = a2 + 1;
    int v9 = *((_DWORD *)a2 + 1);
    a2[1] = a3[1];
    *((_DWORD *)a3 + 1) = v9;
    float result = *a2;
    float v10 = *a1;
    if (*a2 < *a1)
    {
      *a1 = result;
      BOOL v6 = a1 + 1;
      *a2 = v10;
LABEL_10:
      float result = *v6;
      *BOOL v6 = *v8;
      float *v8 = result;
    }
  }
  return result;
}

float _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEvT1_SC_SC_SC_S5_(float *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEjT1_SC_SC_S5_(a1, (float *)a2, (float *)a3);
  float result = *(float *)a4;
  float v9 = *(float *)a3;
  if (*(float *)a4 < *(float *)a3)
  {
    *(float *)a3 = result;
    *(float *)a4 = v9;
    int v10 = *(_DWORD *)(a3 + 4);
    *(_DWORD *)(a3 + 4) = *(_DWORD *)(a4 + 4);
    *(_DWORD *)(a4 + 4) = v10;
    float result = *(float *)a3;
    float v11 = *(float *)a2;
    if (*(float *)a3 < *(float *)a2)
    {
      *(float *)a2 = result;
      *(float *)a3 = v11;
      int v12 = *(_DWORD *)(a2 + 4);
      *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
      *(_DWORD *)(a3 + 4) = v12;
      float result = *(float *)a2;
      float v13 = *a1;
      if (*(float *)a2 < *a1)
      {
        *a1 = result;
        *(float *)a2 = v13;
        float result = a1[1];
        a1[1] = *(float *)(a2 + 4);
        *(float *)(a2 + 4) = result;
      }
    }
  }
  return result;
}

float _ZNSt3__17__sort5B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEvT1_SC_SC_SC_SC_S5_(float *a1, float *a2, float *a3, float *a4, float *a5)
{
  _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEvT1_SC_SC_SC_S5_(a1, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
  float result = *a5;
  float v11 = *a4;
  if (*a5 < *a4)
  {
    *a4 = result;
    *a5 = v11;
    int v12 = *((_DWORD *)a4 + 1);
    a4[1] = a5[1];
    *((_DWORD *)a5 + 1) = v12;
    float result = *a4;
    float v13 = *a3;
    if (*a4 < *a3)
    {
      *a3 = result;
      *a4 = v13;
      int v14 = *((_DWORD *)a3 + 1);
      a3[1] = a4[1];
      *((_DWORD *)a4 + 1) = v14;
      float result = *a3;
      float v15 = *a2;
      if (*a3 < *a2)
      {
        *a2 = result;
        *a3 = v15;
        int v16 = *((_DWORD *)a2 + 1);
        a2[1] = a3[1];
        *((_DWORD *)a3 + 1) = v16;
        float result = *a2;
        float v17 = *a1;
        if (*a2 < *a1)
        {
          *a1 = result;
          *a2 = v17;
          float result = a1[1];
          a1[1] = a2[1];
          a2[1] = result;
        }
      }
    }
  }
  return result;
}

BOOL _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEbT1_SC_S5_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      float v6 = *(float *)(a2 - 8);
      float v7 = *(float *)a1;
      if (v6 < *(float *)a1)
      {
        *(float *)a1 = v6;
        *(float *)(a2 - 8) = v7;
        int v8 = *(_DWORD *)(a1 + 4);
        *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 - 4);
        *(_DWORD *)(a2 - 4) = v8;
      }
      return result;
    case 3:
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEjT1_SC_SC_S5_((float *)a1, (float *)(a1 + 8), (float *)(a2 - 8));
      return 1;
    case 4:
      _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEvT1_SC_SC_SC_S5_((float *)a1, a1 + 8, a1 + 16, a2 - 8);
      return 1;
    case 5:
      _ZNSt3__17__sort5B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEvT1_SC_SC_SC_SC_S5_((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), (float *)(a1 + 24), (float *)(a2 - 8));
      return 1;
    default:
      float v9 = (float *)(a1 + 16);
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEjT1_SC_SC_S5_((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16));
      uint64_t v10 = a1 + 24;
      if (a1 + 24 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    float v13 = *(float *)v10;
    float v14 = *v9;
    if (*(float *)v10 < *v9)
    {
      int v15 = *(_DWORD *)(v10 + 4);
      uint64_t v16 = v11;
      while (1)
      {
        uint64_t v17 = a1 + v16;
        int v18 = *(_DWORD *)(a1 + v16 + 20);
        *(float *)(v17 + 24) = v14;
        *(_DWORD *)(v17 + 28) = v18;
        if (v16 == -16) {
          break;
        }
        float v14 = *(float *)(v17 + 8);
        v16 -= 8;
        if (v13 >= v14)
        {
          uint64_t v19 = a1 + v16 + 24;
          goto LABEL_12;
        }
      }
      uint64_t v19 = a1;
LABEL_12:
      *(float *)uint64_t v19 = v13;
      *(_DWORD *)(v19 + 4) = v15;
      if (++v12 == 8) {
        return v10 + 8 == a2;
      }
    }
    float v9 = (float *)v10;
    v11 += 8;
    v10 += 8;
    if (v10 == a2) {
      return 1;
    }
  }
}

uint64_t std::__function::__func<float({block_pointer} {__strong})(float),std::allocator<float({block_pointer} {__strong})(float)>,float ()(float)>::operator()(uint64_t a1, float *a2)
{
  return (*(uint64_t (**)(float))(*(void *)(a1 + 8) + 16))(*a2);
}

uint64_t std::__function::__func<float({block_pointer} {__strong})(float),std::allocator<float({block_pointer} {__strong})(float)>,float ()(float)>::destroy(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  return MEMORY[0x1F41817F8]();
}

void *std::__function::__func<float({block_pointer} {__strong})(float),std::allocator<float({block_pointer} {__strong})(float)>,float ()(float)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F14B8440;
  BOOL result = _Block_copy(*(const void **)(a1 + 8));
  a2[1] = result;
  return result;
}

uint64_t std::__function::__func<float({block_pointer} {__strong})(float),std::allocator<float({block_pointer} {__strong})(float)>,float ()(float)>::__clone()
{
  return 0;
}

void std::__function::__func<float({block_pointer} {__strong})(float),std::allocator<float({block_pointer} {__strong})(float)>,float ()(float)>::~__func(uint64_t a1)
{
  JUMPOUT(0x1C185D370);
}

uint64_t std::__function::__func<float({block_pointer} {__strong})(float),std::allocator<float({block_pointer} {__strong})(float)>,float ()(float)>::~__func(uint64_t a1)
{
  return a1;
}

void ZoomCurveValue::LoadFromDictionary(ZoomCurveValue *this, const __CFDictionary *a2)
{
  *(void *)&long long v14 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&v12, "focused");
  std::string::basic_string[abi:ne180100]<0>(v13, "wide");
  float v7 = 0;
  int v8 = 0;
  float v9 = 0;
  uint64_t v10 = &v7;
  char v11 = 0;
  float v7 = (std::string *)operator new(0x30uLL);
  int v8 = v7;
  float v9 = (long long *)&v7[2];
  int v8 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v9, &v12, &v14, v7);
  std::string::basic_string[abi:ne180100]<0>(__p, "FOVToBeamMix");
  ZoomCurveValue::LoadFromDictionary((uint64_t)this, a2, (long long **)&v7, (uint64_t *)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v10 = &v7;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
  for (uint64_t i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v13[i + 2]) < 0) {
      operator delete((void *)v13[i]);
    }
  }
}

void sub_1BB48FFF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, char *a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  a19 = &a16;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  uint64_t v33 = 0;
  while (1)
  {
    if (*(&a32 + v33) < 0) {
      operator delete(*(void **)((char *)&a27 + v33));
    }
    v33 -= 24;
    if (v33 == -48) {
      _Unwind_Resume(a1);
    }
  }
}

void ZoomCurveValue::LoadFromDictionary(uint64_t a1, void *a2, long long **a3, uint64_t *a4)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  memset(&v56, 0, sizeof(v56));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v56, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  if (*((char *)a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__str, (const std::string::value_type *)*a4, a4[1]);
  }
  else {
    std::string __str = *(std::string *)a4;
  }
  ZoomCurveValue::ZoomCurveValue(a1, (uint64_t)&v56, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  uint64_t v64 = &v56;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v64);
  if (a2)
  {
    id v5 = a2;
    BOOL v44 = a3[1];
    if (*a3 == v44)
    {
    }
    else
    {
      char v6 = *a3;
      unint64_t v46 = v5;
      char v42 = 1;
      float v7 = a4;
      do
      {
        float v48 = v6;
        if (*((char *)v6 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v54, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        }
        else
        {
          long long v8 = *v6;
          v54.__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
          *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v8;
        }
        float v9 = &v54;
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          float v9 = (std::string *)v54.__r_.__value_.__r.__words[0];
        }
        uint64_t v10 = v7;
        if (*((char *)v7 + 23) < 0) {
          uint64_t v10 = (uint64_t *)*v7;
        }
        int v49 = objc_msgSend(NSString, "stringWithFormat:", @"%s%s", v9, v10);
        char v11 = objc_msgSend(v46, "objectForKeyedSubscript:");
        BOOL v12 = v11 == 0;

        if (v12)
        {
          char v42 = 0;
        }
        else
        {
          id v13 = [v46 objectForKeyedSubscript:v49];
          long long v60 = 0u;
          long long v61 = 0u;
          long long v62 = 0u;
          long long v63 = 0u;
          id v47 = v13;
          long long v14 = [v13 objectForKeyedSubscript:@"Breakpoints"];
          int v15 = 0;
          uint64_t v16 = 0;
          uint64_t v17 = [v14 countByEnumeratingWithState:&v60 objects:&v64 count:16];
          if (v17)
          {
            unint64_t v18 = 0;
            uint64_t v19 = *(void *)v61;
            do
            {
              for (uint64_t i = 0; i != v17; ++i)
              {
                if (*(void *)v61 != v19) {
                  objc_enumerationMutation(v14);
                }
                float v21 = *(void **)(*((void *)&v60 + 1) + 8 * i);
                if ((unint64_t)[v21 count] >= 2)
                {
                  float v22 = [v21 objectAtIndexedSubscript:0];
                  [v22 floatValue];
                  int v24 = v23;
                  float v25 = [v21 objectAtIndexedSubscript:1];
                  [v25 floatValue];
                  int v27 = v26;
                  if ((unint64_t)v16 >= v18)
                  {
                    uint64_t v28 = (v16 - v15) >> 3;
                    unint64_t v29 = v28 + 1;
                    if ((unint64_t)(v28 + 1) >> 61) {
                      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                    }
                    if ((uint64_t)(v18 - (void)v15) >> 2 > v29) {
                      unint64_t v29 = (uint64_t)(v18 - (void)v15) >> 2;
                    }
                    if (v18 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v30 = v29;
                    }
                    if (v30) {
                      unint64_t v30 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v30);
                    }
                    else {
                      uint64_t v31 = 0;
                    }
                    float v32 = (_DWORD *)(v30 + 8 * v28);
                    *float v32 = v24;
                    v32[1] = v27;
                    uint64_t v33 = v32;
                    while (v16 != v15)
                    {
                      uint64_t v34 = *((void *)v16 - 1);
                      v16 -= 8;
                      *((void *)v33 - 1) = v34;
                      v33 -= 2;
                    }
                    unint64_t v18 = v30 + 8 * v31;
                    uint64_t v16 = (char *)(v32 + 2);
                    if (v15) {
                      operator delete(v15);
                    }
                    int v15 = (char *)v33;
                  }
                  else
                  {
                    *(_DWORD *)uint64_t v16 = v24;
                    *((_DWORD *)v16 + 1) = v26;
                    v16 += 8;
                  }
                }
              }
              uint64_t v17 = [v14 countByEnumeratingWithState:&v60 objects:&v64 count:16];
            }
            while (v17);
          }

          std::string __p = 0;
          unint64_t v58 = 0;
          uint64_t v59 = 0;
          std::vector<std::pair<float,float>>::__init_with_size[abi:ne180100]<std::pair<float,float>*,std::pair<float,float>*>((char *)&__p, (uint64_t *)v15, (uint64_t *)v16, (v16 - v15) >> 3);
          PiecewiseLinearTransform::PiecewiseLinearTransform((uint64_t **)&v52, (uint64_t **)&__p, v35);
          if (__p)
          {
            unint64_t v58 = __p;
            operator delete(__p);
          }
          if (v15) {
            operator delete(v15);
          }

          uint64_t v64 = &v54;
          float v36 = std::__tree<std::__value_type<std::string,PiecewiseLinearTransform>,std::__map_value_compare<std::string,std::__value_type<std::string,PiecewiseLinearTransform>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,PiecewiseLinearTransform>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, (void **)&v54.__r_.__value_.__l.__data_, (long long **)&v64)+ 7;
          if (v36 != (uint64_t *)&v52) {
            std::vector<std::pair<float,float>>::__assign_with_size[abi:ne180100]<std::pair<float,float>*,std::pair<float,float>*>(v36, (uint64_t *)v52, v53, ((char *)v53 - (unsigned char *)v52) >> 3);
          }
          if (v52)
          {
            int v53 = (uint64_t *)v52;
            operator delete(v52);
          }
        }

        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v54.__r_.__value_.__l.__data_);
        }
        char v6 = (long long *)((char *)v48 + 24);
        float v7 = a4;
      }
      while ((long long *)((char *)v48 + 24) != v44);

      if ((v42 & 1) == 0)
      {
        memset(&v51, 0, sizeof(v51));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v51, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
        if (*((char *)a4 + 23) < 0) {
          std::string::__init_copy_ctor_external(&v50, (const std::string::value_type *)*a4, a4[1]);
        }
        else {
          std::string v50 = *(std::string *)a4;
        }
        ZoomCurveValue::ZoomCurveValue((uint64_t)&v64, (uint64_t)&v51, &v50);
        uint64_t v37 = a1 + 8;
        std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*(void **)(a1 + 8));
        int v38 = v65;
        *(void *)a1 = v64;
        *(void *)(a1 + 8) = v38;
        uint64_t v39 = v66;
        *(void *)(a1 + 16) = v66;
        if (v39)
        {
          v38[2] = v37;
          uint64_t v64 = (std::string *)&v65;
          uint64_t v65 = 0;
          uint64_t v66 = 0;
        }
        else
        {
          *(void *)a1 = v37;
        }
        std::vector<std::__fs::filesystem::path>::__vdeallocate((std::vector<std::string> *)(a1 + 24));
        *(_OWORD *)(a1 + 24) = v67;
        *(void *)(a1 + 40) = v68;
        uint64_t v68 = 0;
        long long v67 = 0uLL;
        float v40 = (void **)(a1 + 48);
        if (*(char *)(a1 + 71) < 0) {
          operator delete(*v40);
        }
        *(_OWORD *)float v40 = v69;
        *(void *)(a1 + 64) = v70;
        HIBYTE(v70) = 0;
        LOBYTE(v69) = 0;
        *(void *)&long long v60 = &v67;
        std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
        std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(v65);
        if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v50.__r_.__value_.__l.__data_);
        }
        *(void *)&long long v60 = &v51;
        std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
      }
    }
  }
}

void sub_1BB490614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,char *a54)
{
  a54 = &a28;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&a54);
  ZoomCurveValue::~ZoomCurveValue(a14);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,PiecewiseLinearTransform>,std::__map_value_compare<std::string,std::__value_type<std::string,PiecewiseLinearTransform>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,PiecewiseLinearTransform>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, long long **a3)
{
  id v5 = (uint64_t **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  char v6 = *v5;
  if (!*v5)
  {
    float v7 = v5;
    char v6 = (uint64_t *)operator new(0x50uLL);
    v12[0] = v6;
    v12[1] = a1 + 1;
    char v13 = 0;
    long long v8 = (std::string *)(v6 + 4);
    float v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((void *)v9 + 1));
    }
    else
    {
      long long v10 = *v9;
      v6[6] = *((void *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    v6[7] = 0;
    v6[8] = 0;
    v6[9] = 0;
    char v13 = 1;
    std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at(a1, v14, v7, v6);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,PiecewiseLinearTransform>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,PiecewiseLinearTransform>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
  }
  return v6;
}

void sub_1BB490834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ZoomCurveValue::ApplyToGraph(uint64_t a1, void *a2)
{
  if (*a2)
  {
    uint64_t v3 = *(long long **)(a1 + 24);
    uint64_t v4 = *(long long **)(a1 + 32);
    while (v3 != v4)
    {
      if (*((char *)v3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)v3, *((void *)v3 + 1));
      }
      else
      {
        long long v5 = *v3;
        v18.__r_.__value_.__r.__words[2] = *((void *)v3 + 2);
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v5;
      }
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&__p, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
      }
      else {
        std::string __p = v18;
      }
      int v6 = *(char *)(a1 + 71);
      if (v6 >= 0) {
        float v7 = (const std::string::value_type *)(a1 + 48);
      }
      else {
        float v7 = *(const std::string::value_type **)(a1 + 48);
      }
      if (v6 >= 0) {
        std::string::size_type v8 = *(unsigned __int8 *)(a1 + 71);
      }
      else {
        std::string::size_type v8 = *(void *)(a1 + 56);
      }
      float v9 = std::string::append(&__p, v7, v8);
      long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      int64_t v17 = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)uint64_t v16 = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v17 >= 0) {
        char v11 = (char *)v16;
      }
      else {
        char v11 = (char *)v16[0];
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, v11);
      uint64_t v12 = DSPGraph::Graph::box();
      uint64_t v13 = v12;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v13)
        {
LABEL_24:
          if (std::__tree<std::__value_type<std::string,PiecewiseLinearTransform>,std::__map_value_compare<std::string,std::__value_type<std::string,PiecewiseLinearTransform>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,PiecewiseLinearTransform>>>::__count_unique<std::string>(*(void ***)(a1 + 8), (void **)&v18.__r_.__value_.__l.__data_))
          {
            uint64_t v14 = *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>(a1, &__p, (void **)&v18.__r_.__value_.__l.__data_);
            if (!v14) {
              std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
            }
            (*(void (**)(uint64_t, void, void, void, uint64_t, uint64_t))(*(void *)v13 + 312))(v13, 0, 0, 0, 24, v14 + 56);
            __p.__r_.__value_.__s.__data_[0] = 1;
            (*(void (**)(uint64_t, uint64_t, void, void, uint64_t, std::string *))(*(void *)v13 + 312))(v13, 1, 0, 0, 1, &__p);
          }
        }
      }
      else if (v12)
      {
        goto LABEL_24;
      }
      if (SHIBYTE(v17) < 0) {
        operator delete(v16[0]);
      }
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v18.__r_.__value_.__l.__data_);
      }
      uint64_t v3 = (long long *)((char *)v3 + 24);
    }
  }
}

void sub_1BB490A7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BB490AD0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1BB490AA8);
}

uint64_t std::__tree<std::__value_type<std::string,PiecewiseLinearTransform>,std::__map_value_compare<std::string,std::__value_type<std::string,PiecewiseLinearTransform>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,PiecewiseLinearTransform>>>::__count_unique<std::string>(void **a1, void **a2)
{
  if (a1)
  {
    uint64_t v3 = a1;
    uint64_t v4 = 1;
    do
    {
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v3 + 4) & 0x80) == 0)
      {
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3 + 4, a2) & 0x80) == 0) {
          return v4;
        }
        ++v3;
      }
      uint64_t v3 = (void **)*v3;
    }
    while (v3);
  }
  return 0;
}

uint64_t *ZoomCurveValue::operator[](uint64_t a1, long long *a2)
{
  if (!std::__tree<std::__value_type<std::string,PiecewiseLinearTransform>,std::__map_value_compare<std::string,std::__value_type<std::string,PiecewiseLinearTransform>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,PiecewiseLinearTransform>>>::__count_unique<std::string>(*(void ***)(a1 + 8), (void **)a2))
  {
    std::string::size_type v8 = a2;
    uint64_t v4 = std::__tree<std::__value_type<std::string,PiecewiseLinearTransform>,std::__map_value_compare<std::string,std::__value_type<std::string,PiecewiseLinearTransform>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,PiecewiseLinearTransform>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, (void **)a2, &v8);
    int v6 = v4 + 7;
    long long v5 = (void *)v4[7];
    if (v5)
    {
      v4[8] = (uint64_t)v5;
      operator delete(v5);
    }
    *int v6 = 0;
    v6[1] = 0;
    v6[2] = 0;
  }
  std::string::size_type v8 = a2;
  return std::__tree<std::__value_type<std::string,PiecewiseLinearTransform>,std::__map_value_compare<std::string,std::__value_type<std::string,PiecewiseLinearTransform>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,PiecewiseLinearTransform>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, (void **)a2, &v8)+ 7;
}

uint64_t **PiecewiseLinearTransform::PiecewiseLinearTransform(uint64_t **a1, uint64_t **a2, double a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a1 == a2)
  {
    unint64_t v5 = 0;
    uint64_t v4 = 0;
  }
  else
  {
    std::vector<std::pair<float,float>>::__assign_with_size[abi:ne180100]<std::pair<float,float>*,std::pair<float,float>*>(a1, *a2, a2[1], a2[1] - *a2);
    uint64_t v4 = (float *)*a1;
    unint64_t v5 = (unint64_t)a1[1];
  }
  unint64_t v6 = 126 - 2 * __clz((uint64_t)(v5 - (void)v4) >> 3);
  if ((float *)v5 == v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v6;
  }
  _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEELb0EEEvT1_SC_S5_NS_15iterator_traitsISC_E15difference_typeEb(v4, v5, v7, 1, a3);
  return a1;
}

void sub_1BB490C60(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void AUsubMAEC::myAecBuffers::~myAecBuffers(AUsubMAEC::myAecBuffers *this)
{
  if (this)
  {
    uint64_t v2 = *(void **)this;
    if (*(void *)this)
    {
      free(v2);
      *(void *)this = 0;
    }
  }
  uint64_t v3 = (void *)*((void *)this + 6);
  if (v3)
  {
    free(v3);
    *((void *)this + 6) = 0;
  }
  uint64_t v4 = (void *)*((void *)this + 2);
  if (v4)
  {
    free(v4);
    *((void *)this + 2) = 0;
  }
  unint64_t v5 = (void *)*((void *)this + 4);
  if (v5)
  {
    free(v5);
    *((void *)this + 4) = 0;
  }
  unint64_t v6 = (void *)*((void *)this + 8);
  if (v6)
  {
    free(v6);
    *((void *)this + 8) = 0;
  }
}

void AUsubMAEC::myAecBuffers::myAecBuffersInit(uint64_t a1, _DWORD *a2, int a3)
{
  int v5 = a2[6];
  *(_DWORD *)(a1 + 72) = v5;
  *(_DWORD *)(a1 + 76) = a2[3];
  *(_DWORD *)(a1 + 84) = a2[2];
  *(_DWORD *)(a1 + 80) = a2[5];
  int v6 = 8 * v5;
  int v7 = 8 * v5;
  std::string::size_type v8 = (char *)malloc_type_malloc(8 * v5, 0x2C8E6D5CuLL);
  if (v6) {
    BOOL v9 = v8 == 0;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9) {
    goto LABEL_18;
  }
  long long v10 = v8;
  bzero(v8, v6);
  char v11 = &v10[4 * *(int *)(a1 + 72)];
  *(void *)a1 = v10;
  *(void *)(a1 + 8) = v11;
  uint64_t v12 = (char *)malloc_type_malloc(v6, 0x2C8E6D5CuLL);
  if (v7 && v12 == 0) {
    goto LABEL_18;
  }
  uint64_t v14 = v12;
  bzero(v12, v6);
  int v15 = &v14[4 * *(int *)(a1 + 72)];
  *(void *)(a1 + 16) = v14;
  *(void *)(a1 + 24) = v15;
  if (a3)
  {
    uint64_t v16 = (char *)malloc_type_malloc(v6, 0x2C8E6D5CuLL);
    int64_t v17 = v16;
    if (v7 && !v16) {
      goto LABEL_18;
    }
    bzero(v16, v6);
    std::string v18 = &v17[4 * *(int *)(a1 + 72)];
    *(void *)(a1 + 32) = v17;
    *(void *)(a1 + 40) = v18;
  }
  uint64_t v19 = (char *)malloc_type_malloc(v6, 0x2C8E6D5CuLL);
  BOOL v20 = v19;
  if (v7)
  {
    if (!v19) {
      goto LABEL_18;
    }
  }
  bzero(v19, v6);
  float v21 = &v20[4 * *(int *)(a1 + 72)];
  *(void *)(a1 + 48) = v20;
  *(void *)(a1 + 56) = v21;
  int v22 = 4 * *(_DWORD *)(a1 + 84);
  int v23 = malloc_type_malloc(v22, 0x2C8E6D5CuLL);
  int v24 = v23;
  if (v22)
  {
    if (!v23)
    {
LABEL_18:
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      int v26 = std::bad_alloc::bad_alloc(exception);
    }
  }
  bzero(v23, v22);
  *(void *)(a1 + 64) = v24;
}

void AUSpatialMixerV2OcclusionFilter::processInplace(AUSpatialMixerV2OcclusionFilter *this, float *a2, unsigned int a3)
{
  if (*(void *)this)
  {
    float v4 = COERCE_FLOAT(atomic_load((unsigned int *)this + 4));
    float v5 = v4;
    float v6 = *((float *)this + 3);
    if (v6 <= -0.2 || v6 != v4)
    {
      unsigned int v8 = a3;
      v12[0] = 1;
      for (void v12[2] = 1; v8; v8 -= v10)
      {
        if (v8 >= 0x100) {
          uint64_t v10 = 256;
        }
        else {
          uint64_t v10 = v8;
        }
        uint64_t v13 = a2;
        v12[3] = 4 * v10;
        float v11 = *((float *)this + 3);
        if (v11 != v5)
        {
          AUSpatialMixerV2OcclusionFilter::updateFilter(this, v5);
          float v11 = *((float *)this + 3);
        }
        if (v11 < -0.2) {
          (*(void (**)(void, uint64_t, _DWORD *, _DWORD *))(**(void **)this + 32))(*(void *)this, v10, v12, v12);
        }
        a2 += v10;
      }
    }
  }
}

void AUSpatialMixerV2OcclusionFilter::updateFilter(AUSpatialMixerV2OcclusionFilter *this, float a2)
{
  if (vabds_f32(*((float *)this + 3)+ (float)((float)(a2 - *((float *)this + 3)) * flt_1BB878E80[*((float *)this + 3) < -40.0]), a2) >= 0.4)a2 = *((float *)this + 3)+ (float)((float)(a2 - *((float *)this + 3)) * flt_1BB878E80[*((float *)this + 3) < -40.0]); {
  *((float *)this + 3) = a2;
  }
  if (a2 <= -0.2)
  {
    double v3 = a2 * 0.5;
    double v4 = __exp10(v3 * 0.25 * 0.05);
    double v5 = __exp10(v3 * 0.75 * 0.05);
    long double v6 = cos(31415.9265 / *((float *)this + 2));
    __asm { FMOV            V2.2D, #-2.0 }
    _Q2.f64[1] = (1.0 - v5 * v6 - sqrt(-(v5 * v5) * (1.0 - v6 * v6) + (v5 + v5) * (1.0 - v6))) / (1.0 - v5);
    float64x2_t v17 = vmulq_n_f64(_Q2, _Q2.f64[1]);
    double v18 = v4 * (_Q2.f64[1] * -2.0 + 1.0 + _Q2.f64[1] * _Q2.f64[1]);
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    if (*(void *)this)
    {
      double v11 = (*(double (**)(void, uint64_t, float64x2_t *))(**(void **)this + 16))(*(void *)this, 1, &v17);
      BiquadCoefficients::GetT((BiquadCoefficients *)&v17, v11);
      float v13 = v12;
      unsigned int v14 = v13;
      if ((SLODWORD(v13) <= -1 || ((LODWORD(v13) & 0x7FFFFFFFu) - 0x800000) >> 24 >= 0x7F)
        && (LODWORD(v13) - 1) >= 0x7FFFFF)
      {
        unsigned int v14 = 0;
      }
      *((_DWORD *)this + 5) = v14;
    }
  }
}

char *NoiseSuppression::Noise::HendriksSPP::GetNoiseBins(NoiseSuppression::Noise::HendriksSPP *this)
{
  uint64_t v2 = (char *)this + 200;
  unint64_t v3 = *((void *)this + 26);
  char v8 = 0;
  std::vector<BOOL>::assign((uint64_t)this + 200, v3, &v8);
  unint64_t v4 = *((void *)this + 26);
  if (v4)
  {
    unint64_t v5 = 0;
    uint64_t v6 = *((void *)this + 17);
    do
    {
      if (*(float *)(v6 + 4 * v5) < 0.4)
      {
        *(void *)(*((void *)this + 25) + ((v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v5;
        unint64_t v4 = *((void *)this + 26);
      }
      ++v5;
    }
    while (v4 > v5);
  }
  return v2;
}

void **NoiseSuppression::Noise::HendriksSPP::Process(void **this, const float *__src, float *a3, vDSP_Length __N)
{
  if (*((unsigned char *)this + 24))
  {
    unsigned int v4 = __N;
    uint64_t v7 = (uint64_t)this;
    vDSP_Length v8 = __N;
    if (!*((_DWORD *)this + 5))
    {
      memcpy(this[4], __src, 4 * __N);
      float __B = (*(float (**)(uint64_t))(*(void *)v7 + 40))(v7);
      vDSP_vthr(*(const float **)(v7 + 32), 1, &__B, *(float **)(v7 + 32), 1, v4);
    }
    vDSP_vthr(*(const float **)(v7 + 32), 1, &NoiseSuppression::EPS, *(float **)(v7 + 112), 1, v8);
    vDSP_vdiv(*(const float **)(v7 + 112), 1, __src, 1, *(float **)(v7 + 112), 1, v8);
    vDSP_vmul(*(const float **)(v7 + 112), 1, (const float *)(v7 + 196), 0, *(float **)(v7 + 112), 1, v8);
    int v14 = v4;
    vvexpf(*(float **)(v7 + 112), *(const float **)(v7 + 112), &v14);
    vDSP_vsmsa(*(const float **)(v7 + 112), 1, (const float *)(v7 + 184), &NoiseSuppression::Noise::HendriksSPP::one, *(float **)(v7 + 112), 1, v8);
    vDSP_svdiv(&NoiseSuppression::Noise::HendriksSPP::one, *(const float **)(v7 + 112), 1, *(float **)(v7 + 112), 1, v8);
    vDSP_vmma(*(const float **)(v7 + 136), 1, (const float *)(v7 + 96), 0, *(const float **)(v7 + 112), 1, (const float *)(v7 + 192), 0, *(float **)(v7 + 136), 1, v8);
    if (v4)
    {
      uint64_t v9 = 0;
      uint64_t v10 = *(void *)(v7 + 136);
      do
      {
        float v11 = *(float *)(v7 + 104);
        if (*(float *)(v10 + 4 * v9) > v11)
        {
          uint64_t v12 = *(void *)(v7 + 112);
          if (*(float *)(v12 + 4 * v9) < v11) {
            float v11 = *(float *)(v12 + 4 * v9);
          }
          *(float *)(v12 + 4 * v9) = v11;
        }
        ++v9;
      }
      while (v8 != v9);
    }
    vDSP_vsub(*(const float **)(v7 + 112), 1, &NoiseSuppression::Noise::HendriksSPP::one, 0, *(float **)(v7 + 160), 1, v8);
    vDSP_vmul(*(const float **)(v7 + 160), 1, __src, 1, *(float **)(v7 + 160), 1, v8);
    vDSP_vma(*(const float **)(v7 + 112), 1, *(const float **)(v7 + 32), 1, *(const float **)(v7 + 160), 1, *(float **)(v7 + 160), 1, v8);
    float __D = 1.0 - *(float *)(v7 + 100);
    vDSP_vmma(*(const float **)(v7 + 32), 1, (const float *)(v7 + 100), 0, *(const float **)(v7 + 160), 1, &__D, 0, *(float **)(v7 + 32), 1, v8);
    this = (void **)memcpy(a3, *(const void **)(v7 + 32), 4 * v8);
    ++*(_DWORD *)(v7 + 20);
  }
  return this;
}

float NoiseSuppression::Noise::HendriksSPP::Init(NoiseSuppression::Noise::HendriksSPP *this)
{
  float v2 = *((float *)this + 4);
  *((float *)this + 24) = expf(-1.0 / (float)(*((float *)this + 22) * v2));
  *((float *)this + 25) = expf(-1.0 / (float)(v2 * *((float *)this + 23)));
  std::vector<float>::resize((uint64_t)this + 112, *((unsigned int *)this + 3));
  unint64_t v3 = *((unsigned int *)this + 3);
  int v10 = 0;
  std::vector<float>::assign((char **)this + 14, v3, &v10);
  std::vector<float>::resize((uint64_t)this + 136, *((unsigned int *)this + 3));
  unint64_t v4 = *((unsigned int *)this + 3);
  int v10 = 0;
  std::vector<float>::assign((char **)this + 17, v4, &v10);
  std::vector<float>::resize((uint64_t)this + 32, *((unsigned int *)this + 3));
  unint64_t v5 = *((unsigned int *)this + 3);
  int v10 = 0;
  std::vector<float>::assign((char **)this + 4, v5, &v10);
  std::vector<float>::resize((uint64_t)this + 160, *((unsigned int *)this + 3));
  unint64_t v6 = *((unsigned int *)this + 3);
  int v10 = 0;
  std::vector<float>::assign((char **)this + 20, v6, &v10);
  std::vector<BOOL>::resize((uint64_t)this + 200, *((unsigned int *)this + 3), 0);
  unint64_t v7 = *((unsigned int *)this + 3);
  LOBYTE(v10) = 0;
  std::vector<BOOL>::assign((uint64_t)this + 200, v7, &v10);
  float result = 1.0 - *((float *)this + 24);
  float v9 = -*((float *)this + 47);
  *((float *)this + 48) = result;
  *((float *)this + 49) = v9;
  *((unsigned char *)this + 24) = 1;
  return result;
}

void NoiseSuppression::Noise::HendriksSPP::~HendriksSPP(NoiseSuppression::Noise::HendriksSPP *this)
{
  NoiseSuppression::Noise::HendriksSPP::~HendriksSPP(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t vars8;

  *(void *)this = &unk_1F14C26D0;
  float v2 = (void *)*((void *)this + 25);
  if (v2) {
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 20);
  if (v3)
  {
    *((void *)this + 21) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)*((void *)this + 17);
  if (v4)
  {
    *((void *)this + 18) = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)*((void *)this + 14);
  if (v5)
  {
    *((void *)this + 15) = v5;
    operator delete(v5);
  }

  NoiseSuppression::Noise::NoiseEstimator::~NoiseEstimator(this);
}

NoiseSuppression::Noise::HendriksSPP *NoiseSuppression::Noise::HendriksSPP::HendriksSPP(NoiseSuppression::Noise::HendriksSPP *this, float a2, int a3, float a4)
{
  *((float *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((float *)this + 4) = a4;
  *((_DWORD *)this + 5) = 0;
  *((unsigned char *)this + 24) = 0;
  *((_DWORD *)this + 7) = 981668463;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *(void *)this = &unk_1F14C26D0;
  *((_DWORD *)this + 20) = 1097859072;
  *((void *)this + 11) = 0x3CF5C28F3E19999ALL;
  *((_DWORD *)this + 26) = 1065185444;
  *((void *)this + 26) = 0;
  *((void *)this + 27) = 0;
  *((void *)this + 25) = 0;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((void *)this + 22) = 0;
  float v5 = __exp10f(1.5);
  *((float *)this + 21) = v5;
  *((float *)this + 46) = v5 + 1.0;
  *((float *)this + 47) = v5 / (float)(v5 + 1.0);
  return this;
}

BOOL AUHearingLossCompensator::ValidFormat(AUHearingLossCompensator *this, unsigned int a2, unsigned int a3, const AudioStreamBasicDescription *a4)
{
  long long v5 = *(_OWORD *)&a4->mBytesPerPacket;
  long long v12 = *(_OWORD *)&a4->mSampleRate;
  long long v13 = v5;
  uint64_t v14 = *(void *)&a4->mBitsPerChannel;
  int v16 = 0;
  if (CAStreamBasicDescription::IdentifyCommonPCMFormat(&v12, &v16, 0) && v16 == 1) {
    return a4->mChannelsPerFrame - 1 < 2;
  }
  long long v7 = *(_OWORD *)&a4->mBytesPerPacket;
  long long v12 = *(_OWORD *)&a4->mSampleRate;
  long long v13 = v7;
  uint64_t v14 = *(void *)&a4->mBitsPerChannel;
  int v16 = 0;
  int v8 = CAStreamBasicDescription::IdentifyCommonPCMFormat(&v12, &v16, 0);
  if (v16 == 1) {
    int v9 = v8;
  }
  else {
    int v9 = 0;
  }
  if ((v9 & 1) != 0 || a4->mFormatID != 1718773105)
  {
    if (!v9) {
      return 0;
    }
    return a4->mChannelsPerFrame - 1 < 2;
  }
  long long v10 = *(_OWORD *)&a4->mBytesPerPacket;
  long long v12 = *(_OWORD *)&a4->mSampleRate;
  long long v13 = v10;
  uint64_t v14 = *(void *)&a4->mBitsPerChannel;
  DWORD2(v12) = 1819304813;
  int v16 = 0;
  int v11 = CAStreamBasicDescription::IdentifyCommonPCMFormat(&v12, &v16, &v15);
  BOOL result = 0;
  if (v11)
  {
    if (v16 == 4) {
      return a4->mChannelsPerFrame - 1 < 2;
    }
  }
  return result;
}

uint64_t AUHearingLossCompensator::SupportedNumChannels(AUHearingLossCompensator *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUHearingLossCompensator::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 2;
}

BOOL AUHearingLossCompensator::StreamFormatWritable(AUHearingLossCompensator *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUHearingLossCompensator::SupportsTail(AUHearingLossCompensator *this)
{
  return 1;
}

double AUHearingLossCompensator::GetTailTime(AUHearingLossCompensator *this)
{
  return 0.0;
}

double AUHearingLossCompensator::GetLatency(AUHearingLossCompensator *this)
{
  uint64_t v1 = *((void *)this + 72);
  if (v1)
  {
    if (*(unsigned char *)(v1 + 76)) {
      unsigned int v2 = 0;
    }
    else {
      unsigned int v2 = *(_DWORD *)(v1 + 32);
    }
    *(_DWORD *)(v1 + 44) = v2;
  }
  else
  {
    unsigned int v2 = 0;
  }
  if (*((unsigned char *)this + 561)) {
    v2 += *((_DWORD *)this + 138);
  }
  return (double)v2
       / *(double *)(ausdk::AUScope::SafeGetElement((AUHearingLossCompensator *)((char *)this + 128), 0) + 80);
}

uint64_t AUHearingLossCompensator::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result = ausdk::AUBase::RestoreState(this, a2);
  if (!result)
  {
    if (this[72])
    {
      uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(this + 4), 0);
      ausdk::AUElement::SetParameter(Element, 0x17u, *(float *)(*(void *)this[72] + 92), 0);
      long long v5 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(this + 4), 0);
      ausdk::AUElement::SetParameter(v5, 0x18u, *(float *)(*(void *)this[72] + 96), 0);
      unint64_t v6 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(this + 4), 0);
      ausdk::AUElement::SetParameter(v6, 0x19u, *(float *)(*(void *)this[72] + 100), 0);
      long long v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(this + 4), 0);
      ausdk::AUElement::SetParameter(v7, 0x1Au, *(float *)(*(void *)this[72] + 104), 0);
      int v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(this + 4), 0);
      ausdk::AUElement::SetParameter(v8, 0x1Bu, *(float *)(*(void *)this[72] + 108), 0);
    }
    for (unsigned int i = 0; i != 40; ++i)
      AUHearingLossCompensator::RefreshKernelParamValue((AUHearingLossCompensator *)this, i);
    return 0;
  }
  return result;
}

void AUHearingLossCompensator::RefreshKernelParamValue(AUHearingLossCompensator *this, unsigned int a2)
{
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUHearingLossCompensator *)((char *)this + 32), 0);
  float Parameter = ausdk::AUElement::GetParameter(Element, a2);
  unint64_t v6 = (HearingLossCompensator_Core *)*((void *)this + 72);
  if (v6)
  {
    HearingLossCompensator_Core::SetParameter(v6, a2, Parameter);
  }
}

uint64_t AUHearingLossCompensator::GetParameterInfo(AUHearingLossCompensator *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result = 4294956418;
  if ((a2 & 0xFFFFFFFB) == 0 && a3 <= 0x27)
  {
    uint64_t v5 = AUHearingLossCompensator::kUserParameter[a3];
    buffer->unit = AUHearingLossCompensator::kParameterUnit[v5];
    buffer->minCFDictionaryRef Value = HearingLossCompensator_Core::kMinValue[v5];
    buffer->maxCFDictionaryRef Value = HearingLossCompensator_Core::kMaxValue[v5];
    int v6 = AUHearingLossCompensator::kParameterFlag[v5];
    CFStringRef v7 = AUHearingLossCompensator::kParameterName[v5];
    buffer->defaultCFDictionaryRef Value = AUHearingLossCompensator::kUserParameterDefault[a3];
    buffer->cfNameString = v7;
    buffer->AudioUnitParameterOptions flags = (v6 | 0x8000000) + 0x40000000;
    CFStringGetCString(v7, buffer->name, 52, 0x8000100u);
    return 0;
  }
  return result;
}

uint64_t AUHearingLossCompensator::Render(AUHearingLossCompensator *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  v15[1] = *MEMORY[0x1E4F143B8];
  unsigned int v13 = 0;
  int v8 = (AUHearingLossCompensator *)((char *)this + 80);
  uint64_t Element = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUHearingLossCompensator *)((char *)this + 80), 0);
  uint64_t result = ausdk::AUInputElement::PullInput(Element, &v13, a3, 0, a4);
  if (!result)
  {
    uint64_t v11 = ausdk::AUScope::SafeGetElement(v8, 0);
    v15[0] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v11 + 144));
    uint64_t v12 = ausdk::AUScope::SafeGetElement((AUHearingLossCompensator *)((char *)this + 128), 0);
    uint64_t BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v12 + 144));
    return (*(uint64_t (**)(AUHearingLossCompensator *, unsigned int *, uint64_t, uint64_t, void *, uint64_t, uint64_t *))(*(void *)this + 184))(this, a2, a4, 1, v15, 1, &BufferList);
  }
  return result;
}

uint64_t AUHearingLossCompensator::ProcessMultipleBufferLists(AUHearingLossCompensator *this, unsigned int *a2, unsigned int a3, int a4, const AudioBufferList **a5, int a6, AudioBufferList **a7)
{
  uint64_t result = 4294956428;
  if (a4 == 1 && a6 == 1 && (*a5)->mNumberBuffers == (*a7)->mNumberBuffers)
  {
    if (*((_DWORD *)this + 135) && *((_DWORD *)this + 137) >= *((_DWORD *)this + 136))
    {
      unint64_t v18 = *((unsigned int *)this + 139);
      if (v18)
      {
        unint64_t v19 = 0;
        uint64_t v20 = 16;
        do
        {
          if (a3)
          {
            float v21 = *(const void **)((char *)&(*a5)->mNumberBuffers + v20);
            int v22 = *(void **)((char *)&(*a7)->mNumberBuffers + v20);
            if (v21 != v22)
            {
              memmove(v22, v21, 4 * a3);
              unint64_t v18 = *((unsigned int *)this + 139);
            }
          }
          ++v19;
          v20 += 16;
        }
        while (v19 < v18);
      }
    }
    else
    {
      if (*((unsigned char *)this + 561))
      {
        BlockProcessor::Process(*((BlockProcessor **)this + 71), a3, a5, a7);
      }
      else if (*((unsigned char *)this + 560))
      {
        unint64_t v23 = *((unsigned int *)this + 139);
        unsigned int v24 = *((_DWORD *)this + 138);
        if (v23)
        {
          uint64_t v25 = 0;
          unint64_t v26 = 0;
          int v27 = 2 * v24;
          size_t v28 = 8 * v24;
          uint64_t v29 = 16;
          do
          {
            if (v27)
            {
              memmove(*(void **)(*((void *)this + 73) + v25), *(const void **)((char *)&(*a5)->mNumberBuffers + v29), v28);
              unint64_t v23 = *((unsigned int *)this + 139);
            }
            ++v26;
            v25 += 24;
            v29 += 16;
          }
          while (v26 < v23);
          unsigned int v24 = *((_DWORD *)this + 138);
        }
        HearingLossCompensator_Core::Process(*((int ***)this + 72), (void *)this + 73, (void *)this + 76, v24);
        unint64_t v30 = *((unsigned int *)this + 139);
        if (v30)
        {
          uint64_t v31 = 0;
          unint64_t v32 = 0;
          uint64_t v33 = (2 * *((_DWORD *)this + 138));
          uint64_t v34 = 16;
          do
          {
            if (v33)
            {
              memmove(*(void **)((char *)&(*a7)->mNumberBuffers + v34), *(const void **)(*((void *)this + 76) + v31), 4 * v33);
              unint64_t v30 = *((unsigned int *)this + 139);
            }
            ++v32;
            v34 += 16;
            v31 += 24;
          }
          while (v32 < v30);
        }
      }
      else if (a3)
      {
        unsigned int v35 = 0;
        unint64_t v36 = *((unsigned int *)this + 139);
        LODWORD(v37) = *((_DWORD *)this + 138);
        unsigned int v45 = a3;
        do
        {
          if (v36)
          {
            uint64_t v38 = 0;
            unint64_t v39 = 0;
            uint64_t v40 = 16;
            do
            {
              if (v37)
              {
                memmove(*(void **)(*((void *)this + 73) + v38), (const void *)(*(void *)((char *)&(*a5)->mNumberBuffers + v40) + 4 * v35), 4 * v37);
                unint64_t v36 = *((unsigned int *)this + 139);
              }
              ++v39;
              v38 += 24;
              v40 += 16;
            }
            while (v39 < v36);
            LODWORD(v37) = *((_DWORD *)this + 138);
          }
          HearingLossCompensator_Core::Process(*((int ***)this + 72), (void *)this + 73, (void *)this + 76, v37);
          unint64_t v36 = *((unsigned int *)this + 139);
          uint64_t v37 = *((unsigned int *)this + 138);
          if (v36)
          {
            uint64_t v41 = 0;
            unint64_t v42 = 0;
            uint64_t v43 = 16;
            do
            {
              if (v37)
              {
                memmove((void *)(*(void *)((char *)&(*a7)->mNumberBuffers + v43) + 4 * v35), *(const void **)(*((void *)this + 76) + v41), 4 * v37);
                unint64_t v36 = *((unsigned int *)this + 139);
              }
              ++v42;
              v43 += 16;
              v41 += 24;
            }
            while (v42 < v36);
            LODWORD(v37) = *((_DWORD *)this + 138);
          }
          else
          {
            unint64_t v36 = 0;
          }
          v35 += v37;
          v45 -= v37;
        }
        while (v45);
      }
      unsigned int v12 = *((_DWORD *)this + 137);
      unsigned int v13 = *((_DWORD *)this + 136);
      if (v12 <= v13)
      {
        unsigned int v14 = v12 + 1;
        float v15 = (float)v14 / (float)(v13 + 1);
        if (!*((_DWORD *)this + 135)) {
          float v15 = 1.0 - v15;
        }
        float __B = v15;
        float __D = 1.0 - v15;
        if (*((_DWORD *)this + 139))
        {
          unint64_t v16 = 0;
          uint64_t v17 = 16;
          do
          {
            vDSP_vsmsma(*(const float **)((char *)&(*a5)->mNumberBuffers + v17), 1, &__B, *(const float **)((char *)&(*a7)->mNumberBuffers + v17), 1, &__D, *(float **)((char *)&(*a7)->mNumberBuffers + v17), 1, a3);
            ++v16;
            v17 += 16;
          }
          while (v16 < *((unsigned int *)this + 139));
          unsigned int v14 = *((_DWORD *)this + 137) + 1;
        }
        *((_DWORD *)this + 137) = v14;
      }
    }
    uint64_t result = 0;
    *((unsigned char *)this + 562) = 1;
  }
  return result;
}

uint64_t AUHearingLossCompensator::CanScheduleParameters(AUHearingLossCompensator *this)
{
  return 0;
}

uint64_t AUHearingLossCompensator::SetParameter(AUHearingLossCompensator *this, unsigned int a2, int a3, float a4)
{
  if (a3) {
    return 4294956418;
  }
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUHearingLossCompensator *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(Element, a2, a4, 0);
  AUHearingLossCompensator::RefreshKernelParamValue(this, a2);
  return 0;
}

uint64_t AUHearingLossCompensator::SetProperty(AUHearingLossCompensator *this, int a2, int a3, unsigned int a4, unsigned char *__src, unsigned int a6)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (!a3)
  {
    if (a2 == 64009) {
      goto LABEL_14;
    }
    if (a2 == 3700)
    {
      if (a6 < 4) {
        return 4294956445;
      }
      uint64_t result = 0;
      *((unsigned char *)this + 376) = *__src;
      return result;
    }
    if (a2 != 21) {
      return 4294956417;
    }
    if (*((unsigned char *)this + 562) && *((_DWORD *)this + 135) != *(_DWORD *)__src)
    {
      *((_DWORD *)this + 137) = 0;
      if (AUHearingLossCompensatorLogScope(void)::once != -1) {
        dispatch_once(&AUHearingLossCompensatorLogScope(void)::once, &__block_literal_global_6893);
      }
      if (AUHearingLossCompensatorLogScope(void)::scope)
      {
        int v8 = *(NSObject **)AUHearingLossCompensatorLogScope(void)::scope;
        if (!*(void *)AUHearingLossCompensatorLogScope(void)::scope) {
          goto LABEL_27;
        }
      }
      else
      {
        int v8 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = *((_DWORD *)this + 137);
        int v16 = 136315650;
        uint64_t v17 = "AUHearingLossCompensator.cpp";
        __int16 v18 = 1024;
        int v19 = 422;
        __int16 v20 = 1024;
        int v21 = v13;
        _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Cross-fade Triggered: mBypassCounter: %u\n", (uint8_t *)&v16, 0x18u);
      }
    }
LABEL_27:
    *((_DWORD *)this + 135) = *(_DWORD *)__src;
    if (AUHearingLossCompensatorLogScope(void)::once != -1) {
      dispatch_once(&AUHearingLossCompensatorLogScope(void)::once, &__block_literal_global_6893);
    }
    if (AUHearingLossCompensatorLogScope(void)::scope)
    {
      unsigned int v14 = *(NSObject **)AUHearingLossCompensatorLogScope(void)::scope;
      if (!*(void *)AUHearingLossCompensatorLogScope(void)::scope)
      {
LABEL_35:
        AUHearingLossCompensator::RefreshKernelParamValue(this, 0x19u);
        return 0;
      }
    }
    else
    {
      unsigned int v14 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = *((_DWORD *)this + 135);
      int v16 = 136315650;
      uint64_t v17 = "AUHearingLossCompensator.cpp";
      __int16 v18 = 1024;
      int v19 = 425;
      __int16 v20 = 1024;
      int v21 = v15;
      _os_log_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d mBypass: %u\n", (uint8_t *)&v16, 0x18u);
    }
    goto LABEL_35;
  }
  if (a2 != 64009) {
    return 4294956417;
  }
LABEL_14:
  uint64_t v9 = *((void *)this + 72);
  if (!v9) {
    return 0;
  }
  if (*(_DWORD *)(v9 + 36) != a6 >> 2) {
    __assert_rtn("SetNoiseEstimate", "HearingLossCompensator_Core.cpp", 331, "numBins == mNumBins");
  }
  if (*(_DWORD *)(v9 + 24))
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    do
    {
      memcpy(*(void **)(*(void *)(v9 + 472) + v10), __src, 4 * *(unsigned int *)(v9 + 36));
      ++v11;
      v10 += 24;
    }
    while (v11 < *(unsigned int *)(v9 + 24));
  }
  uint64_t result = 0;
  *(unsigned char *)(v9 + 78) = 0;
  return result;
}

void ___ZL32AUHearingLossCompensatorLogScopev_block_invoke()
{
}

uint64_t AUHearingLossCompensator::GetProperty(AUHearingLossCompensator *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  if (a3) {
    return 4294956417;
  }
  switch(a2)
  {
    case 64001:
      if (!*((unsigned char *)this + 17)) {
        return 4294956429;
      }
      uint64_t v8 = *((void *)this + 72);
      uint64_t v9 = *(const void ***)(v8 + 496);
      goto LABEL_26;
    case 64002:
      if (!*((unsigned char *)this + 17)) {
        return 4294956429;
      }
      uint64_t v11 = *((void *)this + 72);
      bzero(a5, 0x800uLL);
      memcpy(a5, **(const void ***)(v11 + 520), 4 * *(unsigned int *)(v11 + 32));
      uint64_t result = 0;
      *(_DWORD *)(v11 + 48) = 1;
      return result;
    case 64003:
      if (!*((unsigned char *)this + 17)) {
        return 4294956429;
      }
      FrequencyDomainCompressor::GetGainTargets(**(FrequencyDomainCompressor ***)(*((void *)this + 72) + 720), a5);
      return 0;
    case 64004:
      if (!*((unsigned char *)this + 17)) {
        return 4294956429;
      }
      uint64_t v12 = *((void *)this + 72);
      int v13 = *(const void ***)(v12 + 544);
      goto LABEL_21;
    case 64005:
      if (!*((unsigned char *)this + 17)) {
        return 4294956429;
      }
      uint64_t v12 = *((void *)this + 72);
      int v13 = *(const void ***)(v12 + 568);
      goto LABEL_21;
    case 64006:
      if (!*((unsigned char *)this + 17)) {
        return 4294956429;
      }
      uint64_t v12 = *((void *)this + 72);
      int v13 = *(const void ***)(v12 + 592);
      goto LABEL_21;
    case 64007:
      if (!*((unsigned char *)this + 17)) {
        return 4294956429;
      }
      uint64_t v12 = *((void *)this + 72);
      int v13 = *(const void ***)(v12 + 616);
LABEL_21:
      unsigned int v14 = *v13;
      uint64_t v15 = *(unsigned int *)(v12 + 40);
      goto LABEL_27;
    case 64008:
      if (!*((unsigned char *)this + 17)) {
        return 4294956429;
      }
      uint64_t v8 = *((void *)this + 72);
      uint64_t v9 = *(const void ***)(v8 + 424);
      goto LABEL_26;
    case 64009:
      if (!*((unsigned char *)this + 17)) {
        return 4294956429;
      }
      uint64_t v8 = *((void *)this + 72);
      uint64_t v9 = *(const void ***)(v8 + 472);
LABEL_26:
      unsigned int v14 = *v9;
      uint64_t v15 = *(unsigned int *)(v8 + 36);
LABEL_27:
      memcpy(a5, v14, 4 * v15);
      return 0;
    default:
      if (a2 == 3700)
      {
        uint64_t result = 0;
        int v10 = *((unsigned __int8 *)this + 376);
        goto LABEL_31;
      }
      if (a2 == 21)
      {
        uint64_t result = 0;
        int v10 = *((_DWORD *)this + 135);
LABEL_31:
        *a5 = v10;
        return result;
      }
      return 4294956417;
  }
}

uint64_t AUHearingLossCompensator::GetPropertyInfo(AUHearingLossCompensator *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3) {
    return 4294956417;
  }
  switch(a2)
  {
    case 64001:
    case 64002:
    case 64008:
      BOOL v7 = 0;
      unsigned int v8 = 2048;
      break;
    case 64003:
      BOOL v7 = 0;
      unsigned int v8 = 1260;
      break;
    case 64004:
    case 64005:
    case 64006:
    case 64007:
      BOOL v7 = 0;
      unsigned int v8 = 180;
      break;
    case 64009:
      unsigned int v8 = 2048;
      BOOL v7 = 1;
      break;
    default:
      unsigned int v8 = 4;
      BOOL v7 = 1;
      if (a2 != 21 && a2 != 3700) {
        return 4294956417;
      }
      break;
  }
  uint64_t result = 0;
  *a6 = v7;
  *a5 = v8;
  return result;
}

uint64_t AUHearingLossCompensator::Reset(AUHearingLossCompensator *this)
{
  uint64_t v1 = (BlockProcessor *)*((void *)this + 71);
  if (v1) {
    BlockProcessor::Reset(v1);
  }
  return 0;
}

uint64_t AUHearingLossCompensator::Initialize(AUHearingLossCompensator *this)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if (AUHearingLossCompensatorLogScope(void)::once != -1) {
    dispatch_once(&AUHearingLossCompensatorLogScope(void)::once, &__block_literal_global_6893);
  }
  if (AUHearingLossCompensatorLogScope(void)::scope)
  {
    unsigned int v2 = *(NSObject **)AUHearingLossCompensatorLogScope(void)::scope;
    if (!*(void *)AUHearingLossCompensatorLogScope(void)::scope) {
      goto LABEL_9;
    }
  }
  else
  {
    unsigned int v2 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    buf[0] = 136315394;
    *(void *)&buf[1] = "AUHearingLossCompensator.cpp";
    __int16 v43 = 1024;
    int v44 = 128;
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUHearingLossCompensator::Initialize()\n", (uint8_t *)buf, 0x12u);
  }
LABEL_9:
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUHearingLossCompensator *)((char *)this + 80), 0);
  uint64_t v4 = ausdk::AUScope::SafeGetElement((AUHearingLossCompensator *)((char *)this + 128), 0);
  int v5 = *(_DWORD *)(Element + 88);
  char v6 = v5 == 1718773105;
  *((unsigned char *)this + 560) = v5 == 1718773105;
  int v7 = *(_DWORD *)(Element + 108);
  uint64_t v40 = this;
  *((_DWORD *)this + 139) = v7;
  if ((v5 == 1819304813 || v5 == 1718773105) && v7 == *(_DWORD *)(v4 + 108))
  {
    double v8 = *(double *)(Element + 80);
    if (v8 == *(double *)(v4 + 80))
    {
      *((double *)this + 66) = v8;
      unsigned int v10 = *((_DWORD *)this + 84);
      unsigned int v39 = v10;
      if (*((unsigned char *)this + 376))
      {
        if (v5 == 1718773105)
        {
          *((unsigned char *)this + 561) = 0;
          *((_DWORD *)this + 138) = v10;
          unsigned int v11 = v10;
          goto LABEL_59;
        }
        unsigned int v12 = vcvtmd_u64_f64(v8 * 0.003);
        unsigned int v13 = vcvtpd_u64_f64(v8 * 0.01);
        double v14 = v8 * 0.005;
        unsigned int v15 = vcvtpd_u64_f64(v14);
        if (v12 <= v13)
        {
          unsigned int v11 = 0;
          unsigned int v16 = 2 * v12;
          unsigned int v17 = v12;
          unsigned int v18 = v13;
          int v19 = -2 * v12;
          do
          {
            if (v10 % v17) {
              BOOL v20 = 1;
            }
            else {
              BOOL v20 = v19 == 0;
            }
            if (!v20)
            {
              if ((v16 & (v16 - 1)) == 0) {
                goto LABEL_29;
              }
              if (v19 == -3 * (v16 / 3) && v16 >= 3)
              {
                LODWORD(v14) = v16 / 3;
                double v14 = COERCE_DOUBLE(vcnt_s8(*(int8x8_t *)&v14));
                LOWORD(v14) = vaddlv_u8(*(uint8x8_t *)&v14);
                if (LODWORD(v14) <= 1)
                {
                  double v14 = log2((double)(v16 / 3));
                  unsigned int v10 = v39;
                  if (v14 >= 4.0) {
                    goto LABEL_29;
                  }
                }
              }
              LODWORD(v14) = v16 / 5;
              double v14 = COERCE_DOUBLE(vcnt_s8(*(int8x8_t *)&v14));
              LOWORD(v14) = vaddlv_u8(*(uint8x8_t *)&v14);
              BOOL v22 = v19 == -5 * (v16 / 5) && v16 >= 5;
              BOOL v23 = !v22 || LODWORD(v14) > 1;
              if (!v23 && (v14 = log2((double)(v16 / 5)), unsigned int v10 = v39, v14 >= 4.0)
                || v19 == -15 * (v16 / 0xF)
                && v16 >= 0xF
                && (LODWORD(v14) = v16 / 0xF,
                    double v14 = COERCE_DOUBLE(vcnt_s8(*(int8x8_t *)&v14)),
                    LOWORD(v14) = vaddlv_u8(*(uint8x8_t *)&v14),
                    LODWORD(v14) <= 1)
                && (v14 = log2((double)(v16 / 0xF)), unsigned int v10 = v39, v14 >= 4.0))
              {
LABEL_29:
                unsigned int v21 = v17 - v15;
                if ((int)(v17 - v15) < 0) {
                  unsigned int v21 = v15 - v17;
                }
                if (v21 < v18)
                {
                  unsigned int v18 = v21;
                  unsigned int v11 = v17;
                }
              }
            }
            ++v17;
            v16 += 2;
            v19 -= 2;
          }
          while (v17 <= v13);
          if (v11)
          {
            *((_DWORD *)v40 + 138) = v11;
            *((unsigned char *)v40 + 561) = 0;
LABEL_59:
            memset(v41, 0, sizeof(v41));
            buf[0] = 0;
            std::vector<float>::assign((char **)v41, v11 << v6, buf);
            uint64_t v25 = v40;
            std::vector<std::vector<float>>::assign((uint64_t *)v40 + 73, *((unsigned int *)v40 + 139), (uint64_t)v41);
            std::vector<std::vector<float>>::assign((uint64_t *)v25 + 76, *((unsigned int *)v25 + 139), (uint64_t)v41);
            unint64_t v26 = *((unsigned int *)v40 + 138);
            buf[0] = 0;
            std::vector<float>::assign((char **)v40 + 79, v26, buf);
            LODWORD(v27) = *((_DWORD *)v40 + 138);
            double v28 = *((float *)v25 + 134) / ((double)v27 * 1000.0 / *((double *)v25 + 66));
            if (v28 < 10.0) {
              double v28 = 10.0;
            }
            unsigned int v29 = vcvtpd_u64_f64(v28);
            *((_DWORD *)v40 + 136) = v29;
            *((_DWORD *)v40 + 137) = v29 + 1;
            *((unsigned char *)v40 + 562) = 0;
            operator new();
          }
        }
        *((unsigned char *)v40 + 561) = 1;
      }
      else
      {
        *((unsigned char *)this + 561) = 1;
        if (v5 == 1718773105) {
          return 4294956428;
        }
        unsigned int v12 = vcvtmd_u64_f64(v8 * 0.003);
        unsigned int v13 = vcvtpd_u64_f64(v8 * 0.01);
        double v14 = v8 * 0.005;
        unsigned int v15 = vcvtpd_u64_f64(v14);
      }
      if (v12 <= v13)
      {
        unsigned int v24 = 0;
        int v30 = -v15;
        unsigned int v31 = 2 * v12;
        unsigned int v32 = v13;
        int v33 = -2 * v12;
        do
        {
          if (v33)
          {
            if ((v31 & (v31 - 1)) == 0) {
              goto LABEL_65;
            }
            LODWORD(v14) = v31 / 3;
            double v14 = COERCE_DOUBLE(vcnt_s8(*(int8x8_t *)&v14));
            LOWORD(v14) = vaddlv_u8(*(uint8x8_t *)&v14);
            BOOL v35 = v33 == -3 * (v31 / 3) && v31 >= 3;
            if (v35 && LODWORD(v14) <= 1)
            {
              double v14 = log2((double)(v31 / 3));
              if (v14 >= 4.0) {
                goto LABEL_65;
              }
            }
            LODWORD(v14) = v31 / 5;
            double v14 = COERCE_DOUBLE(vcnt_s8(*(int8x8_t *)&v14));
            LOWORD(v14) = vaddlv_u8(*(uint8x8_t *)&v14);
            BOOL v37 = v33 == -5 * (v31 / 5) && v31 >= 5;
            BOOL v38 = !v37 || LODWORD(v14) > 1;
            if (!v38 && (double v14 = log2((double)(v31 / 5)), v14 >= 4.0)
              || v33 == -15 * (v31 / 0xF)
              && v31 >= 0xF
              && (LODWORD(v14) = v31 / 0xF,
                  double v14 = COERCE_DOUBLE(vcnt_s8(*(int8x8_t *)&v14)),
                  LOWORD(v14) = vaddlv_u8(*(uint8x8_t *)&v14),
                  LODWORD(v14) <= 1)
              && (double v14 = log2((double)(v31 / 0xF)), v14 >= 4.0))
            {
LABEL_65:
              unsigned int v34 = v30 + v12;
              if ((int)(v30 + v12) < 0) {
                unsigned int v34 = -v34;
              }
              if (v34 < v32)
              {
                unsigned int v32 = v34;
                unsigned int v24 = v12;
              }
            }
          }
          ++v12;
          v31 += 2;
          v33 -= 2;
        }
        while (v12 <= v13);
      }
      else
      {
        unsigned int v24 = 0;
      }
      *((_DWORD *)v40 + 138) = v24;
      operator new();
    }
  }
  return 4294956428;
}

void sub_1BB494598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, void **a13, void **a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **a27,void **a28,void **a29,void **a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,char a41,void *a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49)
{
  MEMORY[0x1C185D370](v50, 0x10A0C40A3058978);
  if (__p) {
    operator delete(__p);
  }
  int v53 = *(void **)(v51 - 240);
  if (v53)
  {
    *(void *)(v51 - 232) = v53;
    operator delete(v53);
  }
  *(void *)(v51 - 240) = v49 + 792;
  std::vector<std::unique_ptr<HlcSuppressor>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 240));
  *(void *)(v51 - 240) = v49 + 768;
  std::vector<std::unique_ptr<SmoothedNoiseEstimator<float,NoiseSuppression::Noise::HendriksSPP>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 240));
  *(void *)(v51 - 240) = v49 + 744;
  std::vector<std::unique_ptr<MicSenseUtils::DynamicFIR<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 240));
  *(void *)(v51 - 240) = v49 + 720;
  std::vector<std::unique_ptr<FrequencyDomainCompressor>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 240));
  *(void *)(v51 - 240) = v49 + 696;
  std::vector<std::unique_ptr<VPTimeFreqConverter>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 240));
  *(void *)(v51 - 240) = v49 + 672;
  std::vector<std::unique_ptr<VPTimeFreqConverter>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 240));
  std::unique_ptr<MicSenseUtils::GainsToFIR>::reset[abi:ne180100]((void *)(v49 + 664), 0);
  for (uint64_t i = 656; i != 640; i -= 8)
    std::unique_ptr<PrescriptiveAmplification>::reset[abi:ne180100]((void *)(v49 + i), 0);
  uint64_t v55 = *(void *)(v49 + 640);
  *(void *)(v49 + 640) = 0;
  if (v55) {
    MEMORY[0x1C185D370](v55, 0x1090C4010D369B9);
  }
  *(void *)(v51 - 240) = a15;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 240));
  *(void *)(v51 - 240) = a16;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 240));
  *(void *)(v51 - 240) = a17;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 240));
  *(void *)(v51 - 240) = a18;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 240));
  *(void *)(v51 - 240) = a19;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 240));
  *(void *)(v51 - 240) = a20;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 240));
  *(void *)(v51 - 240) = a21;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 240));
  *(void *)(v51 - 240) = a22;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 240));
  *(void *)(v51 - 240) = a23;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 240));
  *(void *)(v51 - 240) = a24;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 240));
  *(void *)(v51 - 240) = a9;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 240));
  std::string v56 = *(void **)(v49 + 352);
  if (v56)
  {
    *(void *)(v49 + 360) = v56;
    operator delete(v56);
  }
  uint64_t v57 = *a27;
  if (*a27)
  {
    *(void *)(v49 + 336) = v57;
    operator delete(v57);
  }
  unint64_t v58 = *a13;
  if (*a13)
  {
    *(void *)(v49 + 312) = v58;
    operator delete(v58);
  }
  uint64_t v59 = *a28;
  if (*a28)
  {
    *(void *)(v49 + 288) = v59;
    operator delete(v59);
  }
  long long v60 = *a30;
  if (*a30)
  {
    *(void *)(v49 + 264) = v60;
    operator delete(v60);
  }
  uint64_t v61 = 0;
  while (1)
  {
    long long v62 = *(void **)(v49 + v61 + 232);
    if (v62)
    {
      *(void *)(v49 + v61 + 240) = v62;
      operator delete(v62);
    }
    v61 -= 24;
    if (v61 == -48)
    {
      long long v63 = *a14;
      if (*a14)
      {
        *(void *)(v49 + 192) = v63;
        operator delete(v63);
      }
      uint64_t v64 = *a29;
      if (*a29)
      {
        *(void *)(v49 + 168) = v64;
        operator delete(v64);
      }
      uint64_t v65 = *a10;
      if (*a10)
      {
        *(void *)(v49 + 144) = v65;
        operator delete(v65);
      }
      uint64_t v66 = *a11;
      if (*a11)
      {
        *(void *)(v49 + 120) = v66;
        operator delete(v66);
      }
      long long v67 = *a12;
      if (*a12)
      {
        *(void *)(v49 + 96) = v67;
        operator delete(v67);
      }
      uint64_t v68 = *(void **)v49;
      if (*(void *)v49)
      {
        *(void *)(v49 + 8) = v68;
        operator delete(v68);
      }
      MEMORY[0x1C185D370](v49, 0x10A0C401C64A62ELL);
      if (a38) {
        operator delete(a38);
      }
      _Unwind_Resume(a1);
    }
  }
}

uint64_t *std::unique_ptr<HearingLossCompensator_Core>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    unint64_t v3 = *(void **)(v2 + 640);
    if (v3)
    {
      if (*v3)
      {
        MEMORY[0x1C185D370](*v3, 0x1000C4052888210);
        unint64_t v3 = *(void **)(v2 + 640);
      }
      uint64_t v4 = v3[1];
      if (v4)
      {
        MEMORY[0x1C185D370](v4, 0x1000C4052888210);
        unint64_t v3 = *(void **)(v2 + 640);
      }
      uint64_t v5 = v3[2];
      if (v5)
      {
        MEMORY[0x1C185D370](v5, 0x1000C4052888210);
        unint64_t v3 = *(void **)(v2 + 640);
      }
      uint64_t v6 = v3[3];
      if (v6)
      {
        MEMORY[0x1C185D370](v6, 0x1000C4052888210);
        unint64_t v3 = *(void **)(v2 + 640);
      }
      uint64_t v7 = v3[6];
      if (v7)
      {
        MEMORY[0x1C185D370](v7, 0x1000C4052888210);
        unint64_t v3 = *(void **)(v2 + 640);
      }
      uint64_t v8 = v3[7];
      if (v8)
      {
        MEMORY[0x1C185D370](v8, 0x1000C4052888210);
        unint64_t v3 = *(void **)(v2 + 640);
      }
      uint64_t v9 = v3[4];
      if (v9) {
        MEMORY[0x1C185D370](v9, 0x1000C4052888210);
      }
    }
    uint64_t v25 = (void **)(v2 + 792);
    std::vector<std::unique_ptr<HlcSuppressor>>::__destroy_vector::operator()[abi:ne180100](&v25);
    uint64_t v25 = (void **)(v2 + 768);
    std::vector<std::unique_ptr<SmoothedNoiseEstimator<float,NoiseSuppression::Noise::HendriksSPP>>>::__destroy_vector::operator()[abi:ne180100](&v25);
    uint64_t v25 = (void **)(v2 + 744);
    std::vector<std::unique_ptr<MicSenseUtils::DynamicFIR<float>>>::__destroy_vector::operator()[abi:ne180100](&v25);
    uint64_t v25 = (void **)(v2 + 720);
    std::vector<std::unique_ptr<FrequencyDomainCompressor>>::__destroy_vector::operator()[abi:ne180100](&v25);
    uint64_t v25 = (void **)(v2 + 696);
    std::vector<std::unique_ptr<VPTimeFreqConverter>>::__destroy_vector::operator()[abi:ne180100](&v25);
    uint64_t v25 = (void **)(v2 + 672);
    std::vector<std::unique_ptr<VPTimeFreqConverter>>::__destroy_vector::operator()[abi:ne180100](&v25);
    std::unique_ptr<MicSenseUtils::GainsToFIR>::reset[abi:ne180100]((void *)(v2 + 664), 0);
    for (uint64_t i = 656; i != 640; i -= 8)
      std::unique_ptr<PrescriptiveAmplification>::reset[abi:ne180100]((void *)(v2 + i), 0);
    uint64_t v11 = *(void *)(v2 + 640);
    *(void *)(v2 + 640) = 0;
    if (v11) {
      MEMORY[0x1C185D370](v11, 0x1090C4010D369B9);
    }
    uint64_t v25 = (void **)(v2 + 616);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v25);
    uint64_t v25 = (void **)(v2 + 592);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v25);
    uint64_t v25 = (void **)(v2 + 568);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v25);
    uint64_t v25 = (void **)(v2 + 544);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v25);
    uint64_t v25 = (void **)(v2 + 520);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v25);
    uint64_t v25 = (void **)(v2 + 496);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v25);
    uint64_t v25 = (void **)(v2 + 472);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v25);
    uint64_t v25 = (void **)(v2 + 448);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v25);
    uint64_t v25 = (void **)(v2 + 424);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v25);
    uint64_t v25 = (void **)(v2 + 400);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v25);
    uint64_t v25 = (void **)(v2 + 376);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v25);
    unsigned int v12 = *(void **)(v2 + 352);
    if (v12)
    {
      *(void *)(v2 + 360) = v12;
      operator delete(v12);
    }
    unsigned int v13 = *(void **)(v2 + 328);
    if (v13)
    {
      *(void *)(v2 + 336) = v13;
      operator delete(v13);
    }
    double v14 = *(void **)(v2 + 304);
    if (v14)
    {
      *(void *)(v2 + 312) = v14;
      operator delete(v14);
    }
    unsigned int v15 = *(void **)(v2 + 280);
    if (v15)
    {
      *(void *)(v2 + 288) = v15;
      operator delete(v15);
    }
    unsigned int v16 = *(void **)(v2 + 256);
    if (v16)
    {
      *(void *)(v2 + 264) = v16;
      operator delete(v16);
    }
    uint64_t v17 = 0;
    while (1)
    {
      unsigned int v18 = *(void **)(v2 + v17 + 232);
      if (v18)
      {
        *(void *)(v2 + v17 + 240) = v18;
        operator delete(v18);
      }
      v17 -= 24;
      if (v17 == -48)
      {
        int v19 = *(void **)(v2 + 184);
        if (v19)
        {
          *(void *)(v2 + 192) = v19;
          operator delete(v19);
        }
        BOOL v20 = *(void **)(v2 + 160);
        if (v20)
        {
          *(void *)(v2 + 168) = v20;
          operator delete(v20);
        }
        unsigned int v21 = *(void **)(v2 + 136);
        if (v21)
        {
          *(void *)(v2 + 144) = v21;
          operator delete(v21);
        }
        BOOL v22 = *(void **)(v2 + 112);
        if (v22)
        {
          *(void *)(v2 + 120) = v22;
          operator delete(v22);
        }
        BOOL v23 = *(void **)(v2 + 88);
        if (v23)
        {
          *(void *)(v2 + 96) = v23;
          operator delete(v23);
        }
        unsigned int v24 = *(void **)v2;
        if (*(void *)v2)
        {
          *(void *)(v2 + 8) = v24;
          operator delete(v24);
        }
        JUMPOUT(0x1C185D370);
      }
    }
  }
  return result;
}

uint64_t AUHearingLossCompensator::BlockProcessClassFunc(AUHearingLossCompensator *this, void *a2, void *a3, const AudioBufferList **a4, AudioBufferList **a5)
{
  unsigned int v6 = a2;
  unint64_t v8 = *((unsigned int *)this + 139);
  if (v8)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    uint64_t v12 = 16;
    vDSP_Length v13 = a2;
    do
    {
      if (v6)
      {
        memmove(*(void **)(*((void *)this + 73) + v10), *(const void **)(*a3 + v12), 4 * v6);
        unint64_t v8 = *((unsigned int *)this + 139);
      }
      ++v11;
      v10 += 24;
      v12 += 16;
    }
    while (v11 < v8);
  }
  else
  {
    vDSP_Length v13 = a2;
  }
  HearingLossCompensator_Core::Process(*((int ***)this + 72), (void *)this + 73, (void *)this + 76, v13);
  unint64_t v14 = *((unsigned int *)this + 139);
  if (v14)
  {
    uint64_t v15 = 0;
    unint64_t v16 = 0;
    size_t v17 = 4 * v13;
    uint64_t v18 = 16;
    do
    {
      if (v6)
      {
        memmove(*(void **)((char *)&(*a4)->mNumberBuffers + v18), *(const void **)(*((void *)this + 76) + v15), v17);
        unint64_t v14 = *((unsigned int *)this + 139);
      }
      ++v16;
      v18 += 16;
      v15 += 24;
    }
    while (v16 < v14);
  }
  return 0;
}

void AUHearingLossCompensator::~AUHearingLossCompensator(AUHearingLossCompensator *this)
{
  AUHearingLossCompensator::~AUHearingLossCompensator(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  void *v3;
  void **v4;

  *(void *)this = &unk_1F14AEE28;
  uint64_t v2 = (void *)*((void *)this + 82);
  if (v2)
  {
    *((void *)this + 83) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 79);
  if (v3)
  {
    *((void *)this + 80) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void **)((char *)this + 608);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = (void **)((char *)this + 584);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::unique_ptr<HearingLossCompensator_Core>::reset[abi:ne180100]((uint64_t *)this + 72, 0);
  std::unique_ptr<BlockProcessor>::reset[abi:ne180100]((uint64_t *)this + 71, 0);
  ausdk::AUBase::~AUBase(this);
}

void *std::vector<float const*>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::tuple<unsigned int,float>>::__vallocate[abi:ne180100](a1, a2);
    unsigned int v6 = (void *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1BB495150(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::unique_ptr<SmartFIR>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    unint64_t v3 = *(void **)(v2 + 384);
    if (v3)
    {
      *(void *)(v2 + 392) = v3;
      operator delete(v3);
    }
    uint64_t v4 = *(void **)(v2 + 360);
    if (v4)
    {
      *(void *)(v2 + 368) = v4;
      operator delete(v4);
    }
    uint64_t v5 = *(void **)(v2 + 336);
    if (v5)
    {
      *(void *)(v2 + 344) = v5;
      operator delete(v5);
    }
    unsigned int v6 = *(void **)(v2 + 312);
    if (v6)
    {
      *(void *)(v2 + 320) = v6;
      operator delete(v6);
    }
    uint64_t v7 = *(void **)(v2 + 288);
    if (v7)
    {
      *(void *)(v2 + 296) = v7;
      operator delete(v7);
    }
    uint64_t v8 = *(void **)(v2 + 264);
    if (v8)
    {
      *(void *)(v2 + 272) = v8;
      operator delete(v8);
    }
    uint64_t v9 = *(void **)(v2 + 240);
    if (v9)
    {
      *(void *)(v2 + 248) = v9;
      operator delete(v9);
    }
    CDSPSplitComplex::~CDSPSplitComplex((CDSPSplitComplex *)(v2 + 200));
    uint64_t v12 = (void **)(v2 + 176);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
    uint64_t v12 = (void **)(v2 + 152);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
    uint64_t v12 = (void **)(v2 + 128);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
    uint64_t v12 = (void **)(v2 + 104);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
    uint64_t v10 = *(void **)(v2 + 80);
    if (v10)
    {
      *(void *)(v2 + 88) = v10;
      operator delete(v10);
    }
    unint64_t v11 = *(std::__shared_weak_count **)(v2 + 72);
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    uint64_t v12 = (void **)(v2 + 32);
    std::vector<FreqDomainConvolver>::__destroy_vector::operator()[abi:ne180100](&v12);
    JUMPOUT(0x1C185D370);
  }
  return result;
}

void std::vector<FreqDomainConvolver>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 21;
        std::__destroy_at[abi:ne180100]<FreqDomainConvolver,0>(v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<FreqDomainConvolver,0>(void *a1)
{
  uint64_t v2 = (void *)a1[17];
  if (v2)
  {
    a1[18] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[14];
  if (v3)
  {
    a1[15] = v3;
    operator delete(v3);
  }
  CDSPSplitComplex::~CDSPSplitComplex((CDSPSplitComplex *)(a1 + 10));
  CDSPSplitComplex::~CDSPSplitComplex((CDSPSplitComplex *)(a1 + 6));
  CDSPSplitComplex::~CDSPSplitComplex((CDSPSplitComplex *)(a1 + 2));
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void CircArrayKernel::CircArrayKernel(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v9 = (void *)a1;
  *(_DWORD *)a1 = a4;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = a1 + 16;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 116) = 0;
  *(unsigned char *)(a1 + 118) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = &unk_1F14AB190;
  *(void *)(a1 + 120) = 0x100000001;
  *(_WORD *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)(a1 + 136), *(const void **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2);
  v9[20] = 0;
  v9[21] = 0;
  v9[22] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v9 + 20, *(const void **)a6, *(void *)(a6 + 8), (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 2);
  v9[23] = 0;
  v9[24] = 0;
  v9 += 23;
  _DWORD v9[2] = 0;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v9, *a7, a7[1], 0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3));
  operator new();
}

void sub_1BB497FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void **a15, void **a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21,void **a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t *a29,void **a30,void **a31,uint64_t a32,uint64_t a33,void **a34,void ***a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void **a40,void **a41,void **a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void **a52,uint64_t a53)
{
  uint64_t v55 = *(void **)(v53 - 192);
  if (v55)
  {
    *(void *)(v53 - 184) = v55;
    operator delete(v55);
  }
  std::string v56 = *(void **)(v53 - 168);
  if (v56)
  {
    *(void *)(v53 - 160) = v56;
    operator delete(v56);
  }
  uint64_t v57 = *a21;
  if (*a21)
  {
    *(void *)(a53 + 3128) = v57;
    operator delete(v57);
  }
  unint64_t v58 = *a30;
  if (*a30)
  {
    *(void *)(a53 + 3104) = v58;
    operator delete(v58);
  }
  uint64_t v59 = *a17;
  if (*a17)
  {
    *(void *)(a53 + 3080) = v59;
    operator delete(v59);
  }
  *(void *)(v53 - 192) = a18;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 192));
  *(void *)(v53 - 192) = a19;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 192));
  *(void *)(v53 - 192) = a20;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 192));
  *(void *)(v53 - 192) = a26;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 192));
  *(void *)(v53 - 192) = a23;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 192));
  long long v60 = *a22;
  if (*a22)
  {
    *(void *)(a53 + 2936) = v60;
    operator delete(v60);
  }
  *(void *)(v53 - 192) = a24;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 192));
  *(void *)(v53 - 192) = a27;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 192));
  *(void *)(v53 - 192) = a28;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 192));
  *(void *)(v53 - 192) = a25;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 192));
  uint64_t v61 = *a34;
  if (*a34)
  {
    *(void *)(a53 + 2816) = v61;
    operator delete(v61);
  }
  long long v62 = *a31;
  if (*a31)
  {
    *(void *)(a53 + 2792) = v62;
    operator delete(v62);
  }
  std::unique_ptr<SmartFIR>::reset[abi:ne180100](a29, 0);
  uint64_t v63 = 0;
  while (1)
  {
    uint64_t v64 = *(void **)(a53 + v63 + 2752);
    if (v64)
    {
      *(void *)(a53 + v63 + 2760) = v64;
      operator delete(v64);
    }
    v63 -= 24;
    if (v63 == -48)
    {
      uint64_t v65 = 0;
      while (1)
      {
        uint64_t v66 = *(void **)(a53 + v65 + 2704);
        if (v66)
        {
          *(void *)(a53 + v65 + 2712) = v66;
          operator delete(v66);
        }
        v65 -= 24;
        if (v65 == -48)
        {
          for (uint64_t i = 0; i != -16; i -= 8)
            std::unique_ptr<SmartFIR>::reset[abi:ne180100]((uint64_t *)(a53 + 2672 + i), 0);
          *(void *)(v53 - 192) = a45;
          std::vector<FreqDomainConvolver>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 192));
          *(void *)(v53 - 192) = a46;
          std::vector<FreqDomainConvolver>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 192));
          uint64_t v68 = *(void **)(a53 + 2592);
          if (v68)
          {
            *(void *)(a53 + 2600) = v68;
            operator delete(v68);
          }
          long long v69 = *a40;
          if (*a40)
          {
            *(void *)(a53 + 2576) = v69;
            operator delete(v69);
          }
          uint64_t v70 = *(void *)(a53 + 2552);
          *(void *)(a53 + 2552) = 0;
          if (v70) {
            (*(void (**)(void))(a53 + 2560))();
          }
          uint64_t v71 = *a41;
          if (*a41)
          {
            *(void *)(a53 + 2536) = v71;
            operator delete(v71);
          }
          uint64_t v72 = *a42;
          if (*a42)
          {
            *(void *)(a53 + 2512) = v72;
            operator delete(v72);
          }
          uint64_t v73 = *(void *)(a53 + 2488);
          *(void *)(a53 + 2488) = 0;
          if (v73) {
            (*(void (**)(void))(a53 + 2496))();
          }
          unint64_t v74 = *a10;
          if (*a10)
          {
            *(void *)(a53 + 2472) = v74;
            operator delete(v74);
          }
          *(void *)(v53 - 192) = a32;
          std::vector<CDSPSplitComplex>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 192));
          *(void *)(v53 - 192) = a44;
          std::vector<CDSPSplitComplex>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 192));
          *(void *)(v53 - 192) = a43;
          std::vector<CircularDelay>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 192));
          *a13 = a12;
          ca::concurrent::deferred_deletion_queue<std::vector<std::vector<float>>,10ul,std::default_delete<std::vector<std::vector<float>>>>::~deferred_deletion_queue(a11);
          std::unique_ptr<std::vector<std::vector<float>>>::reset[abi:ne180100](a35, 0);
          *(void *)(v53 - 192) = a14;
          std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 192));
          long long v75 = *a52;
          if (*a52)
          {
            *(void *)(a53 + 168) = v75;
            operator delete(v75);
          }
          float v76 = *a15;
          if (*a15)
          {
            *(void *)(a53 + 144) = v76;
            operator delete(v76);
          }
          std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::destroy(a51, *a16);
          _Unwind_Resume(a1);
        }
      }
    }
  }
}

uint64_t *std::vector<FreqDomainConvolver>::reserve(uint64_t *result, unint64_t a2)
{
  if (0xCF3CF3CF3CF3CF3DLL * ((result[2] - *result) >> 3) < a2)
  {
    if (a2 >= 0x186186186186187) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v2 = result;
    uint64_t v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<FreqDomainConvolver>>(a2);
    v5[1] = v5[0] + v3;
    v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 168 * v4;
    std::vector<FreqDomainConvolver>::__swap_out_circular_buffer(v2, v5);
    return (uint64_t *)std::__split_buffer<FreqDomainConvolver>::~__split_buffer((uint64_t)v5);
  }
  return result;
}

void sub_1BB498800(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<FreqDomainConvolver>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<unsigned int,float>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,float>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(uint64_t **a1, unsigned int a2, unsigned int *a3)
{
  unsigned int v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        unsigned int v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        unsigned int v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        unsigned int v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v9 + 28) = *a3;
    std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at(a1, (uint64_t)v7, v6, v9);
    return v9;
  }
  return (uint64_t *)v7;
}

void CDSPSplitComplex::CDSPSplitComplex(CDSPSplitComplex *this, uint64_t a2)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  CDSPSplitComplex::resize(this, a2);
}

void sub_1BB4988EC(_Unwind_Exception *a1)
{
  CDSPSplitComplex::~CDSPSplitComplex(v1);
  _Unwind_Resume(a1);
}

void CircArrayKernel::CalcBeamMixingMat(CircArrayKernel *this)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  MEMORY[0x1F4188790](this);
  __Z.realp = (float *)((char *)v43 - ((v2 + 15) & 0x7FFFFFFF0));
  __Z.imagp = &__Z.realp[v3];
  MEMORY[0x1F4188790](v4);
  __B.realp = (float *)((char *)v43 - v6);
  __B.imagp = (float *)((char *)v43 + 4 * v5 - v6);
  MEMORY[0x1F4188790](v7);
  if (*(_DWORD *)(v10 + 2368))
  {
    unint64_t v11 = 0;
    v43[0] = (char *)this + 2880;
    v43[1] = (char *)this + 3000;
    v43[2] = (char *)this + 184;
    unint64_t v12 = v8;
    int v44 = (DSPComplex *)((char *)v43 - v9);
    while (1)
    {
      uint64_t v13 = *((void *)this + 363);
      if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 364) - v13) >> 3) <= v12) {
LABEL_26:
      }
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      uint64_t v15 = (uint64_t *)(v13 + 24 * v12);
      uint64_t v14 = *v15;
      if (v11 >= (v15[1] - *v15) >> 2) {
        goto LABEL_27;
      }
      unint64_t v16 = *(unsigned int *)(v14 + 4 * v11);
      uint64_t v17 = *((void *)this + 23);
      if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 24) - v17) >> 3) <= v16) {
        break;
      }
      uint64_t v18 = (void *)(v17 + 24 * v16);
      if (v18[1] - *v18 <= 4uLL) {
        goto LABEL_25;
      }
      vDSP_ctoz((const DSPComplex *)(*v18 + 4), 2, &__Z, 1, *(unsigned int *)this);
      vDSP_Length v19 = *(unsigned int *)this;
      if (v19)
      {
        uint64_t v20 = *((void *)this + 360);
        if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 361) - v20) >> 3) <= v12) {
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        }
        unsigned int v21 = (uint64_t *)(v20 + 24 * v12);
        uint64_t v22 = *v21;
        if (v11 >= (v21[1] - *v21) >> 2) {
          goto LABEL_25;
        }
        uint64_t v23 = 0;
        realp = __B.realp;
        imagp = __B.imagp;
        if ((v19 + 1) > 2) {
          uint64_t v26 = (v19 + 1);
        }
        else {
          uint64_t v26 = 2;
        }
        uint64_t v27 = v26 - 1;
        do
        {
          float v28 = (float)(v23 + 1);
          realp[v23] = cosf(*(float *)(v22 + 4 * v11) * v28);
          imagp[v23++] = sinf(*(float *)(v22 + 4 * v11) * v28);
        }
        while (v27 != v23);
      }
      vDSP_zvmul(&__Z, 1, &__B, 1, &__Z, 1, v19, 1);
      uint64_t v29 = *((void *)this + 363);
      if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 364) - v29) >> 3) <= v12) {
        goto LABEL_26;
      }
      unsigned int v31 = (uint64_t *)(v29 + 24 * v12);
      uint64_t v30 = *v31;
      unsigned int v32 = v44;
      if (v11 >= (v31[1] - *v31) >> 2) {
LABEL_27:
      }
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      unint64_t v33 = *(unsigned int *)(v30 + 4 * v11);
      uint64_t v34 = *((void *)this + 23);
      if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 24) - v34) >> 3) <= v33) {
        break;
      }
      uint64_t v35 = v34 + 24 * v33;
      unint64_t v36 = *(_DWORD **)v35;
      if (*(void *)(v35 + 8) == *(void *)v35) {
        goto LABEL_25;
      }
      uint64_t v37 = *((void *)this + 375);
      if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 376) - v37) >> 3) <= v12) {
        goto LABEL_29;
      }
      BOOL v38 = (void *)(v37 + 24 * v12);
      if (v11 >= (uint64_t)(v38[1] - *v38) >> 2) {
        goto LABEL_25;
      }
      *(_DWORD *)(*v38 + 4 * v11) = *v36;
      vDSP_ztoc(&__Z, 1, v32, 2, *(unsigned int *)this);
      float v45 = 0.0;
      uint64_t v39 = *((void *)this + 375);
      if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 376) - v39) >> 3) <= v12) {
LABEL_29:
      }
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      uint64_t v40 = (void *)(v39 + 24 * v12);
      vDSP_Stride v41 = *((unsigned int *)this + 592);
      unint64_t v42 = (v41 + v11);
      if (v42 >= (uint64_t)(v40[1] - *v40) >> 2) {
LABEL_25:
      }
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      vDSP_vsadd((const float *)v32, 1, &v45, (float *)(*v40 + 4 * v42), v41, (2 * *(_DWORD *)this));
      if (++v11 >= *((unsigned int *)this + 592)) {
        return;
      }
    }
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  }
}

void CircArrayKernel::Reset(CircArrayKernel *this)
{
  uint64_t v2 = (void *)*((void *)this + 366);
  uint64_t v3 = *((void *)this + 367) - (void)v2;
  if (v3 >= 1) {
    bzero(v2, 4 * (((unint64_t)v3 >> 2) - ((unint64_t)v3 > 3)) + 4);
  }
  uint64_t v4 = (void *)*((void *)this + 308);
  uint64_t v5 = *((void *)this + 309) - (void)v4;
  if (v5 >= 1) {
    bzero(v4, 4 * (((unint64_t)v5 >> 2) - ((unint64_t)v5 > 3)) + 4);
  }
  uint64_t v6 = *((void *)this + 372);
  uint64_t v7 = *((void *)this + 373);
  while (v6 != v7)
  {
    uint64_t v8 = *(void *)(v6 + 8) - *(void *)v6;
    if (v8 >= 1) {
      bzero(*(void **)v6, 4 * (((unint64_t)v8 >> 2) - ((unint64_t)v8 > 3)) + 4);
    }
    v6 += 24;
  }
  uint64_t v9 = *((void *)this + 378);
  uint64_t v10 = *((void *)this + 379);
  while (v9 != v10)
  {
    uint64_t v11 = *(void *)(v9 + 8) - *(void *)v9;
    if (v11 >= 1) {
      bzero(*(void **)v9, 4 * (((unint64_t)v11 >> 2) - ((unint64_t)v11 > 3)) + 4);
    }
    v9 += 24;
  }
  unint64_t v12 = (void *)*((void *)this + 384);
  uint64_t v13 = *((void *)this + 385) - (void)v12;
  if (v13 >= 1) {
    bzero(v12, 4 * (((unint64_t)v13 >> 2) - ((unint64_t)v13 > 3)) + 4);
  }
  uint64_t v14 = (void *)*((void *)this + 390);
  uint64_t v15 = *((void *)this + 391) - (void)v14;
  if (v15 >= 1) {
    bzero(v14, 4 * (((unint64_t)v15 >> 2) - ((unint64_t)v15 > 3)) + 4);
  }
  vDSP_biquadm_ResetState(*((vDSP_biquadm_Setup *)this + 319));
  if (*((_DWORD *)this + 592))
  {
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    unint64_t v19 = 0;
    do
    {
      uint64_t v20 = *((void *)this + 369);
      if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 370) - v20) >> 3) <= v19) {
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v21 = v20 + v18;
      uint64_t v22 = *(void **)v21;
      uint64_t v23 = *(void *)(v21 + 8) - *(void *)v21;
      if (v23 >= 1) {
        bzero(v22, 4 * (((unint64_t)v23 >> 2) - ((unint64_t)v23 > 3)) + 4);
      }
      uint64_t v24 = *((void *)this + 354);
      if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 355) - v24) >> 3) <= v19) {
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v25 = v24 + v18;
      uint64_t v26 = *(void **)v25;
      uint64_t v27 = *(void *)(v25 + 8) - *(void *)v25;
      if (v27 >= 1) {
        bzero(v26, 4 * (((unint64_t)v27 >> 2) - ((unint64_t)v27 > 3)) + 4);
      }
      vDSP_biquadm_ResetState(*((vDSP_biquadm_Setup *)this + 311));
      uint64_t v28 = *((void *)this + 327);
      if (0xCF3CF3CF3CF3CF3DLL * ((*((void *)this + 328) - v28) >> 3) <= v19) {
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      }
      FreqDomainConvolver::Reset((FreqDomainConvolver *)(v28 + v17));
      uint64_t v29 = *((void *)this + 299);
      if (0x8E38E38E38E38E39 * ((*((void *)this + 300) - v29) >> 3) <= v19) {
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      }
      CircularDelay::Reset((CircularDelay *)(v29 + v16));
      ++v19;
      v18 += 24;
      v17 += 168;
      v16 += 72;
    }
    while (v19 < *((unsigned int *)this + 592));
  }
  for (uint64_t i = 0; i != 16; i += 8)
    SmartFIR::Reset(*(void ***)((char *)this + i + 2664));
  SmartFIR::Reset(*((void ***)this + 347));
  *((unsigned char *)this + 129) = 1;
}

void std::vector<CDSPSplitComplex>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        CDSPSplitComplex::~CDSPSplitComplex((CDSPSplitComplex *)(v4 - 32));
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<CircularDelay>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (void *)*((void *)v4 - 7);
        if (v6)
        {
          *((void *)v4 - 6) = v6;
          operator delete(v6);
        }
        v4 -= 72;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t ca::concurrent::deferred_deletion_queue<std::vector<std::vector<float>>,10ul,std::default_delete<std::vector<std::vector<float>>>>::~deferred_deletion_queue(uint64_t a1)
{
  *(void *)a1 = &unk_1F14B7420;
  ca::concurrent::deferred_deletion_queue<std::vector<std::vector<float>>,10ul,std::default_delete<std::vector<std::vector<float>>>>::drain_trash(a1);
  uint64_t v4 = 0;
  while (boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::pop<std::vector<std::vector<float>> *>((atomic_uint *)(a1 + 64), &v4))
  {
    uint64_t v2 = v4;
    if (v4)
    {
      uint64_t v5 = v4;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
      MEMORY[0x1C185D370](v2, 0x20C40960023A9);
    }
  }
  boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::~queue(a1 + 1024);
  boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::~queue(a1 + 64);
  return a1;
}

void ***std::unique_ptr<std::vector<std::vector<float>>>::reset[abi:ne180100](void ***result, void **a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    uint64_t v3 = v2;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
    return (void ***)MEMORY[0x1C185D370](v2, 0x20C40960023A9);
  }
  return result;
}

BOOL ca::concurrent::deferred_deletion_queue<std::vector<std::vector<float>>,10ul,std::default_delete<std::vector<std::vector<float>>>>::drain_trash(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t v1 = (atomic_uint *)(a1 + 1024);
  while (1)
  {
    BOOL result = boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::pop<std::vector<std::vector<float>> *>(v1, &v4);
    if (!result) {
      break;
    }
    uint64_t v3 = v4;
    if (!v4) {
      __assert_rtn("drain_trash", "deferred_deletion_queue.h", 146, "trashObject");
    }
    uint64_t v5 = v4;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
    MEMORY[0x1C185D370](v3, 0x20C40960023A9);
  }
  return result;
}

BOOL boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::pop<std::vector<std::vector<float>> *>(atomic_uint *a1, void *a2)
{
  unint64_t v2 = ((unint64_t)a1 + 191) & 0xFFFFFFFFFFFFFFC0;
  while (1)
  {
    while (1)
    {
      do
      {
        unsigned int explicit = atomic_load_explicit(a1, memory_order_acquire);
        int v4 = (unsigned __int16)explicit;
        int v5 = (unsigned __int16)explicit;
        uint64_t v6 = (_WORD *)(v2 + ((unint64_t)(unsigned __int16)explicit << 6));
        if ((unsigned __int16)explicit == 11) {
          uint64_t v7 = 0;
        }
        else {
          uint64_t v7 = (atomic_uint *)(v2 + ((unint64_t)(unsigned __int16)explicit << 6));
        }
        unsigned int v8 = atomic_load_explicit(a1 + 16, memory_order_acquire);
        uint64_t v9 = (unsigned __int16)atomic_load_explicit(v7, memory_order_acquire);
        unint64_t v10 = v2 + (v9 << 6);
        if (v9 == 11) {
          unint64_t v10 = 0;
        }
        unsigned int v11 = atomic_load_explicit(a1, memory_order_acquire);
        BOOL v12 = (unsigned __int16)explicit == (unsigned __int16)v11 && HIWORD(explicit) == HIWORD(v11);
      }
      while (!v12);
      if ((unsigned __int16)explicit != (unsigned __int16)v8) {
        break;
      }
      if (!v10) {
        return v4 != (unsigned __int16)v8;
      }
      atomic_compare_exchange_strong(a1 + 16, &v14, (v8 & 0xFFFF0000 | v9) + 0x10000);
    }
    if (v10)
    {
      *a2 = *(void *)(v10 + 8);
      unsigned int v13 = explicit;
      atomic_compare_exchange_strong(a1, &v13, (explicit & 0xFFFF0000 | v9) + 0x10000);
      if (v13 == explicit) {
        break;
      }
    }
  }
  unsigned int v15 = atomic_load_explicit(a1 + 224, memory_order_acquire);
  *uint64_t v6 = v15;
  unsigned int v16 = v15;
  atomic_compare_exchange_strong(a1 + 224, &v16, v15 & 0xFFFF0000 | (unsigned __int16)explicit);
  if (v16 != v15)
  {
    unsigned int v17 = v16;
    do
    {
      *uint64_t v6 = v16;
      atomic_compare_exchange_strong(a1 + 224, &v17, v16 & 0xFFFF0000 | v5);
      BOOL v12 = v17 == v16;
      unsigned int v16 = v17;
    }
    while (!v12);
  }
  return v4 != (unsigned __int16)v8;
}

void boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::~queue(uint64_t a1)
{
  unint64_t v1 = (a1 + 191) & 0xFFFFFFFFFFFFFFC0;
  while (1)
  {
    while (1)
    {
      int v2 = (unsigned __int16)*(_DWORD *)a1;
      uint64_t v3 = (unsigned __int16)*(_DWORD *)a1;
      int v4 = v2 == 11 ? 0 : (_DWORD *)(v1 + (v3 << 6));
      int v5 = *(_DWORD *)(a1 + 64);
      int v6 = (unsigned __int16)*v4;
      BOOL v7 = v6 == 11 || v1 == 0;
      BOOL v8 = v7;
      if (v2 == (unsigned __int16)v5) {
        break;
      }
      if (!v8)
      {
        atomic_store((*(_DWORD *)a1 & 0xFFFF0000 | v6) + 0x10000, (unsigned int *)a1);
        unsigned int explicit = atomic_load_explicit((atomic_uint *volatile)(a1 + 896), memory_order_acquire);
        *(_WORD *)(v1 + (v3 << 6)) = explicit;
        atomic_store(explicit & 0xFFFF0000 | v3, (unsigned int *)(a1 + 896));
      }
    }
    if (v8) {
      break;
    }
    atomic_store((v5 & 0xFFFF0000 | v6) + 0x10000, (unsigned int *)(a1 + 64));
  }
  uint64_t v10 = (unsigned __int16)*(_DWORD *)a1;
  unsigned int v11 = atomic_load_explicit((atomic_uint *volatile)(a1 + 896), memory_order_acquire);
  *(_WORD *)(v1 + (v10 << 6)) = v11;
  atomic_store(v11 & 0xFFFF0000 | v10, (unsigned int *)(a1 + 896));
}

void ca::concurrent::deferred_deletion_queue<std::vector<std::vector<float>>,10ul,std::default_delete<std::vector<std::vector<float>>>>::~deferred_deletion_queue(uint64_t a1)
{
  ca::concurrent::deferred_deletion_queue<std::vector<std::vector<float>>,10ul,std::default_delete<std::vector<std::vector<float>>>>::~deferred_deletion_queue(a1);

  JUMPOUT(0x1C185D360);
}

std::vector<unsigned int> *__cdecl std::vector<unsigned int>::vector(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](this, __n);
    std::vector<unsigned int>::pointer end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_1BB4994A8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<CDSPSplitComplex>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CDSPSplitComplex>,std::reverse_iterator<CDSPSplitComplex*>,std::reverse_iterator<CDSPSplitComplex*>,std::reverse_iterator<CDSPSplitComplex*>>(a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = result;
  uint64_t v5 = *a1;
  *a1 = result;
  a2[1] = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  uint64_t v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<CDSPSplitComplex>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
    CDSPSplitComplex::~CDSPSplitComplex((CDSPSplitComplex *)(i - 32));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CDSPSplitComplex>,std::reverse_iterator<CDSPSplitComplex*>,std::reverse_iterator<CDSPSplitComplex*>,std::reverse_iterator<CDSPSplitComplex*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2 != a4)
  {
    uint64_t v9 = -16;
    do
    {
      uint64_t v10 = std::valarray<float>::valarray((void *)(a6 + v9), (int **)(a2 + v9));
      uint64_t v11 = *v10 + 4 * ((uint64_t)(v10[1] - *v10) >> 3);
      *(v10 - 2) = *v10;
      *(v10 - 1) = v11;
      v9 -= 32;
    }
    while (a2 + v9 + 16 != a4);
    a6 += v9 + 16;
  }
  return a6;
}

void *std::valarray<float>::valarray(void *a1, int **a2)
{
  *a1 = 0;
  a1[1] = 0;
  uint64_t v3 = a2[1];
  size_t v4 = (char *)v3 - (char *)*a2;
  if (v3 != *a2)
  {
    if ((v4 & 0x8000000000000000) != 0) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v6 = (char *)operator new(v4);
    *a1 = v6;
    a1[1] = v6;
    uint64_t v7 = *a2;
    if (*a2 != a2[1])
    {
      BOOL v8 = v6 + 4;
      do
      {
        int v9 = *v7++;
        *((_DWORD *)v8 - 1) = v9;
        a1[1] = v8;
        v8 += 4;
      }
      while (v7 != a2[1]);
    }
  }
  return a1;
}

uint64_t std::__split_buffer<CircularDelay>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 72;
    size_t v4 = *(void **)(v2 - 56);
    if (v4)
    {
      *(void *)(v2 - 48) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 72;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<FreqDomainConvolver>>(unint64_t a1)
{
  if (a1 >= 0x186186186186187) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(168 * a1);
}

void std::vector<FreqDomainConvolver>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = a2[1];
  for (uint64_t i = 168; ; i -= 168)
  {
    uint64_t v8 = v6 + i;
    if (v4 + i - 168 == v5) {
      break;
    }
    int v9 = (const FreqDomainConvolver *)(v4 + i - 336);
    FreqDomainConvolver::FreqDomainConvolver((FreqDomainConvolver *)(v8 - 336), v9);
  }
  uint64_t v10 = v8 - 168;
  a2[1] = v10;
  uint64_t v11 = *a1;
  *a1 = v10;
  a2[1] = v11;
  uint64_t v12 = a1[1];
  a1[1] = a2[2];
  a2[2] = v12;
  uint64_t v13 = a1[2];
  a1[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
}

uint64_t std::__split_buffer<FreqDomainConvolver>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 168;
    std::__destroy_at[abi:ne180100]<FreqDomainConvolver,0>((void *)(i - 168));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void FreqDomainConvolver::FreqDomainConvolver(FreqDomainConvolver *this, const FreqDomainConvolver *a2)
{
  uint64_t v4 = *((void *)a2 + 1);
  *(void *)this = *(void *)a2;
  *((void *)this + 1) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  std::valarray<float>::valarray((void *)this + 4, (int **)a2 + 4);
  uint64_t v5 = *((void *)this + 4);
  uint64_t v6 = v5 + 4 * ((*((void *)this + 5) - v5) >> 3);
  *((void *)this + 2) = v5;
  *((void *)this + 3) = v6;
  std::valarray<float>::valarray((void *)this + 8, (int **)a2 + 8);
  uint64_t v7 = *((void *)this + 8);
  uint64_t v8 = v7 + 4 * ((*((void *)this + 9) - v7) >> 3);
  *((void *)this + 6) = v7;
  *((void *)this + 7) = v8;
  std::valarray<float>::valarray((void *)this + 12, (int **)a2 + 12);
  *((void *)this + 14) = 0;
  uint64_t v9 = *((void *)this + 12);
  uint64_t v10 = v9 + 4 * ((*((void *)this + 13) - v9) >> 3);
  *((void *)this + 10) = v9;
  *((void *)this + 11) = v10;
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)this + 14, *((const void **)a2 + 14), *((void *)a2 + 15), (uint64_t)(*((void *)a2 + 15) - *((void *)a2 + 14)) >> 2);
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)this + 17, *((const void **)a2 + 17), *((void *)a2 + 18), (uint64_t)(*((void *)a2 + 18) - *((void *)a2 + 17)) >> 2);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
}

void sub_1BB499970(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    v1[15] = v4;
    operator delete(v4);
  }
  CDSPSplitComplex::~CDSPSplitComplex((CDSPSplitComplex *)(v1 + 10));
  CDSPSplitComplex::~CDSPSplitComplex((CDSPSplitComplex *)(v1 + 6));
  CDSPSplitComplex::~CDSPSplitComplex((CDSPSplitComplex *)(v1 + 2));
  uint64_t v5 = (std::__shared_weak_count *)v1[1];
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  _Unwind_Resume(a1);
}

unsigned int *boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::queue(unsigned int *a1)
{
  *a1 = 0;
  a1[16] = 0;
  uint64_t v2 = (uint64_t)(a1 + 32);
  bzero(a1 + 32, 0x300uLL);
  uint64_t v3 = 0;
  a1[224] = 11;
  uint64_t v4 = (_WORD *)(((unint64_t)a1 + 191) & 0xFFFFFFFFFFFFFFC0);
  do
  {
    *uint64_t v4 = 11;
    unsigned int explicit = atomic_load_explicit((atomic_uint *volatile)a1 + 224, memory_order_acquire);
    *uint64_t v4 = explicit;
    v4 += 32;
    atomic_store(v3++ + (explicit & 0xFFFF0000), a1 + 224);
  }
  while (v3 != 11);
  boost::lockfree::detail::fixed_size_freelist<boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::node,boost::lockfree::detail::compiletime_sized_freelist_storage<boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::node,11ul>>::allocate<true>(v2);
  if (v6 == 11)
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = (_DWORD *)((((unint64_t)a1 + 191) & 0xFFFFFFFFFFFFFFC0) + ((unint64_t)v6 << 6));
    *uint64_t v7 = 11;
  }
  if (v7) {
    unsigned int v8 = (unsigned __int16)((v7 - ((a1 + 191) & 0x3FFFC0)) >> 6);
  }
  else {
    unsigned int v8 = 11;
  }
  *a1 = v8;
  atomic_store(v8, a1 + 16);
  return a1;
}

void boost::lockfree::detail::fixed_size_freelist<boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::node,boost::lockfree::detail::compiletime_sized_freelist_storage<boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::node,11ul>>::allocate<true>(uint64_t a1)
{
  uint64_t explicit = atomic_load_explicit((atomic_uint *volatile)(a1 + 768), memory_order_acquire);
  if ((unsigned __int16)explicit != 11)
  {
    unint64_t v2 = (a1 + 63) & 0xFFFFFFFFFFFFFFC0;
    uint64_t v3 = explicit;
    atomic_compare_exchange_strong((atomic_uint *volatile)(a1 + 768), (unsigned int *)&v3, (explicit & 0xFFFF0000 | *(unsigned __int16 *)(v2 + ((unint64_t)(unsigned __int16)explicit << 6)))+ 0x10000);
    if (v3 != explicit)
    {
      do
      {
        if ((unsigned __int16)v3 == 11) {
          break;
        }
        uint64_t v4 = v3;
        atomic_compare_exchange_strong((atomic_uint *volatile)(a1 + 768), (unsigned int *)&v4, (v3 & 0xFFFF0000 | *(unsigned __int16 *)(v2 + ((unint64_t)(unsigned __int16)v3 << 6))) + 0x10000);
        BOOL v5 = v4 == v3;
        uint64_t v3 = v4;
      }
      while (!v5);
    }
  }
}

void ca::concurrent::deferred_deletion_stash<std::vector<std::vector<float>>,10ul,std::default_delete<std::vector<std::vector<float>>>>::~deferred_deletion_stash(void *a1)
{
  *a1 = &unk_1F14B7400;
  ca::concurrent::deferred_deletion_queue<std::vector<std::vector<float>>,10ul,std::default_delete<std::vector<std::vector<float>>>>::~deferred_deletion_queue((uint64_t)(a1 + 8));

  JUMPOUT(0x1C185D360);
}

void *ca::concurrent::deferred_deletion_stash<std::vector<std::vector<float>>,10ul,std::default_delete<std::vector<std::vector<float>>>>::~deferred_deletion_stash(void *a1)
{
  *a1 = &unk_1F14B7400;
  ca::concurrent::deferred_deletion_queue<std::vector<std::vector<float>>,10ul,std::default_delete<std::vector<std::vector<float>>>>::~deferred_deletion_queue((uint64_t)(a1 + 8));
  return a1;
}

BOOL ca::concurrent::deferred_deletion_queue<std::vector<std::vector<float>>,10ul,std::default_delete<std::vector<std::vector<float>>>>::pop(uint64_t a1, void ***a2)
{
  uint64_t v10 = 0;
  BOOL v4 = boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::pop<std::vector<std::vector<float>> *>((atomic_uint *)(a1 + 64), &v10);
  if (v4)
  {
    BOOL v5 = v10;
    if (!v10) {
      __assert_rtn("pop", "deferred_deletion_queue.h", 113, "pendingObject");
    }
    unsigned int v6 = *a2;
    if (*a2)
    {
      *a2 = 0;
      uint64_t v9 = v6;
      if (!boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::do_push<false>(a1 + 1024, &v9))
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "trash queue exceeded capacity, object memory leaked");
      }
    }
    std::unique_ptr<std::vector<std::vector<float>>>::reset[abi:ne180100](a2, v5);
  }
  return v4;
}

void sub_1BB499CA4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::do_push<false>(uint64_t a1, void *a2)
{
  uint64_t v4 = a1 + 128;
  boost::lockfree::detail::fixed_size_freelist<boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::node,boost::lockfree::detail::compiletime_sized_freelist_storage<boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::node,11ul>>::allocate<true>(a1 + 128);
  if (v5 != 11)
  {
    unint64_t v6 = (v4 + 63) & 0xFFFFFFFFFFFFFFC0;
    unint64_t v7 = v6 + ((unint64_t)v5 << 6);
    *(void *)(v7 + 8) = *a2;
    atomic_store((*(_DWORD *)v7 & 0xFFFF0000) + 65547, (unsigned int *)v7);
    int v8 = (v4 + 63) & 0x3FFFC0;
    int v9 = (unsigned __int16)((v7 - v8) >> 6);
    do
    {
      while (1)
      {
        do
        {
          unsigned int explicit = atomic_load_explicit((atomic_uint *volatile)(a1 + 64), memory_order_acquire);
          uint64_t v11 = (atomic_uint *)(v6 + ((unint64_t)(unsigned __int16)explicit << 6));
          if ((unsigned __int16)explicit == 11) {
            uint64_t v11 = 0;
          }
          unsigned int v12 = atomic_load_explicit(v11, memory_order_acquire);
          if ((unsigned __int16)v12 == 11) {
            unint64_t v13 = 0;
          }
          else {
            unint64_t v13 = v6 + ((unint64_t)(unsigned __int16)v12 << 6);
          }
          unsigned int v14 = atomic_load_explicit((atomic_uint *volatile)(a1 + 64), memory_order_acquire);
        }
        while ((unsigned __int16)explicit != (unsigned __int16)v14 || HIWORD(explicit) != HIWORD(v14));
        if (!v13) {
          break;
        }
        atomic_compare_exchange_strong((atomic_uint *volatile)(a1 + 64), &v16, (explicit & 0xFFFF0000 | (unsigned __int16)((v13 - v8) >> 6)) + 0x10000);
      }
      unsigned int v17 = v12;
      atomic_compare_exchange_strong(v11, &v17, (v12 & 0xFFFF0000 | v9) + 0x10000);
    }
    while (v17 != v12);
    atomic_compare_exchange_strong((atomic_uint *volatile)(a1 + 64), &v18, (explicit & 0xFFFF0000 | v9) + 0x10000);
  }
  return v5 != 11;
}

void CircArrayKernel::Process(float const* const*,float * const*,unsigned int)::$_0::operator()(uint64_t a1, unsigned int a2)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 2368))
  {
    unint64_t v2 = 0;
    uint64_t v28 = (uint64_t **)(a1 + 8);
    do
    {
      v30[0] = v2;
      *(void *)DSPSplitComplex __B = v30;
      uint64_t v3 = std::__tree<std::__value_type<unsigned int,float>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,float>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v28, v30, (uint64_t)&std::piecewise_construct, (unsigned int **)__B);
      uint64_t v4 = *(void *)(a1 + 2880);
      if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 2888) - v4) >> 3) <= a2) {
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      }
      unsigned int v5 = (void *)(v4 + 24 * a2);
      if (v2 >= (uint64_t)(v5[1] - *v5) >> 2) {
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      }
      *(float *)(*v5 + 4 * v2) = (float)(*((float *)v3 + 8) * -3.1416) / 180.0;
      v30[0] = v2 + 8;
      *(void *)DSPSplitComplex __B = v30;
      unint64_t v6 = std::__tree<std::__value_type<unsigned int,float>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,float>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v28, v30, (uint64_t)&std::piecewise_construct, (unsigned int **)__B);
      unsigned int v7 = -1 - 1431655765 * ((*(void *)(a1 + 192) - *(void *)(a1 + 184)) >> 3);
      if (v7 > *((float *)v6 + 8))
      {
        v30[0] = v2 + 8;
        *(void *)DSPSplitComplex __B = v30;
        unsigned int v7 = *((float *)std::__tree<std::__value_type<unsigned int,float>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,float>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v28, v30, (uint64_t)&std::piecewise_construct, (unsigned int **)__B)+ 8);
      }
      uint64_t v8 = *(void *)(a1 + 2904);
      if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 2912) - v8) >> 3) <= a2) {
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v10 = (uint64_t *)(v8 + 24 * a2);
      uint64_t v9 = *v10;
      if (v2 >= (v10[1] - *v10) >> 2) {
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      }
      *(_DWORD *)(v9 + 4 * v2) = v7;
      uint64_t v11 = *(void **)(a1 + 208);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11[1] - *v11) >> 3) <= v7) {
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v12 = *v11 + 24 * v7;
      unint64_t v13 = *(DSPComplex **)v12;
      if (*(void *)(v12 + 8) == *(void *)v12) {
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v14 = *(void *)(a1 + 2664 + 8 * a2);
      if (*(void *)(v14 + 16) <= v2)
      {
        if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
        {
          CAX4CCString::CAX4CCString((CAX4CCString *)v30, 0xFFFFFFFF);
          *(_DWORD *)DSPSplitComplex __B = 136315906;
          *(void *)&__B[4] = "SmartFIR.mm";
          __int16 v32 = 1024;
          int v33 = 236;
          __int16 v34 = 2080;
          uint64_t v35 = v30;
          __int16 v36 = 2080;
          uint64_t v37 = "Trying to initialize channel out of bounds";
          _os_log_impl(&dword_1BB0CE000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", __B, 0x26u);
        }
        exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
        CAXException::CAXException(exception, "Trying to initialize channel out of bounds", -1);
      }
      if (*(void *)(v14 + 8) >= *(void *)v14) {
        unint64_t v15 = *(void *)v14;
      }
      else {
        unint64_t v15 = *(void *)(v14 + 8);
      }
      FreqDomainConvolver::Initialize((DSPSplitComplex *)(*(void *)(v14 + 32) + 168 * v2), v13, v15);
      if (*(_DWORD *)(v14 + 56))
      {
        uint64_t v16 = 0;
        unint64_t v17 = 0;
        LODWORD(v18) = 0;
        vDSP_Length v19 = v15 >> 1;
        vDSP_Length v20 = *(void *)v14;
        do
        {
          bzero(*(void **)(*(void *)(*(void *)(v14 + 104) + 24 * v2) + v16), 4 * v20);
          bzero(*(void **)(*(void *)(*(void *)(v14 + 104) + 24 * v2) + v16 + 8), 4 * *(void *)v14);
          vDSP_ctoz((DSPComplex *)((char *)v13 + 4 * v18), 2, (const DSPSplitComplex *)(*(void *)(*(void *)(v14 + 104) + 24 * v2) + v16), 1, v19);
          *(_DWORD *)DSPSplitComplex __B = 0;
          uint64_t v21 = *(_DWORD **)(v14 + 64);
          if (v21) {
            LODWORD(v21) = *v21;
          }
          *(float *)DSPSplitComplex __B = 1.0 / (float)v21;
          uint64_t v22 = *(float **)(*(void *)(*(void *)(v14 + 104) + 24 * v2) + v16);
          vDSP_vsmul(v22, 1, (const float *)__B, v22, 1, *(void *)v14);
          uint64_t v23 = *(float **)(*(void *)(*(void *)(v14 + 104) + 24 * v2) + v16 + 8);
          vDSP_vsmul(v23, 1, (const float *)__B, v23, 1, *(void *)v14);
          MultiRadixRealFFT::RealInPlaceTransform((MultiRadixRealFFT *)(v14 + 64), (DSPSplitComplex *)(*(void *)(*(void *)(v14 + 104) + 24 * v2) + v16), 1, v24);
          vDSP_Length v20 = *(void *)v14;
          uint64_t v18 = *(void *)v14 + v18;
          ++v17;
          v16 += 16;
        }
        while (v17 < *(unsigned int *)(v14 + 56));
      }
      ++v2;
    }
    while (v2 < *(unsigned int *)(a1 + 2368));
  }
  CircArrayKernel::CalcBeamMixingMat((CircArrayKernel *)a1);
}

void sub_1BB49A2A0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AUECMIMO::ValidFormat(AUECMIMO *this, unsigned int a2, unsigned int a3, const AudioStreamBasicDescription *a4)
{
  if (a4->mBitsPerChannel != 32 || a4->mFormatID != 1819304813 || a4->mChannelsPerFrame >= 9) {
    return 0;
  }
  else {
    return (LOBYTE(a4->mFormatFlags) >> 5) & 1;
  }
}

uint64_t AUECMIMO::SupportedNumChannels(AUECMIMO *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUECMIMO::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 8;
}

BOOL AUECMIMO::StreamFormatWritable(AUECMIMO *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUECMIMO::SupportsTail(AUECMIMO *this)
{
  return 1;
}

double AUECMIMO::GetTailTime(AUECMIMO *this)
{
  return 0.0;
}

double AUECMIMO::GetLatency(AUECMIMO *this)
{
  return 0.0;
}

uint64_t AUECMIMO::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result = ausdk::AUBase::RestoreState(this, a2);
  if (!result) {
    ++*((_DWORD *)this + 133);
  }
  return result;
}

uint64_t AUECMIMO::GetParameterInfo(AUECMIMO *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  buffer->AudioUnitParameterOptions flags = 0x40000000;
  buffer->unitName = 0;
  uint64_t result = 4294956418;
  if (!a2 && a3 <= 0x23)
  {
    CFStringRef v6 = off_1E623DCF0[a3];
    AudioUnitParameterUnit v7 = dword_1BB897E40[a3];
    AudioUnitParameterValue v8 = flt_1BB897ED0[a3];
    AudioUnitParameterValue v9 = flt_1BB897F60[a3];
    AudioUnitParameterValue v10 = flt_1BB897FF0[a3];
    int v11 = dword_1BB898080[a3];
    buffer->cfNameString = v6;
    buffer->AudioUnitParameterOptions flags = 1207959552;
    CFStringGetCString(v6, buffer->name, 52, 0x8000100u);
    uint64_t result = 0;
    buffer->unit = v7;
    buffer->minCFDictionaryRef Value = v8;
    buffer->maxCFDictionaryRef Value = v9;
    buffer->defaultCFDictionaryRef Value = v10;
    buffer->flags |= v11;
  }
  return result;
}

uint64_t AUECMIMO::GetParameterList(AUECMIMO *this, int a2, unsigned int *a3, unsigned int *a4)
{
  if (a2) {
    return 4294956430;
  }
  if (a3)
  {
    *(_OWORD *)a3 = xmmword_1BB8727D0;
    *((_OWORD *)a3 + 1) = xmmword_1BB879D60;
    *((_OWORD *)a3 + 2) = xmmword_1BB879E40;
    *((_OWORD *)a3 + 3) = xmmword_1BB879E50;
    *((_OWORD *)a3 + 4) = xmmword_1BB879E60;
    *((_OWORD *)a3 + 5) = xmmword_1BB879E70;
    *((_OWORD *)a3 + 6) = xmmword_1BB87A9C0;
    *((_OWORD *)a3 + 7) = xmmword_1BB87A9E0;
    *((_OWORD *)a3 + 8) = xmmword_1BB87A9F0;
  }
  uint64_t result = 0;
  *a4 = 36;
  return result;
}

BOOL AUECMIMO::BusCountWritable(AUECMIMO *this, int a2)
{
  return (a2 - 1) < 2;
}

uint64_t AUECMIMO::Render(AUECMIMO *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  if (*((_DWORD *)this + 84) != a4) {
    return 4294956422;
  }
  AudioUnitParameterValue v8 = (AUECMIMO *)((char *)this + 80);
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUECMIMO *)((char *)this + 80), 0);
  uint64_t v10 = ausdk::AUScope::SafeGetElement((AUECMIMO *)((char *)this + 128), 0);
  uint64_t v11 = ausdk::AUScope::GetElement(v8, 0);
  if (!v11 || !*(_DWORD *)(v11 + 172)) {
    return 4294956420;
  }
  uint64_t v12 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 0);
  uint64_t result = ausdk::AUInputElement::PullInput(v12, a2, a3, 0, a4);
  if (!result)
  {
    uint64_t BufferList = (AudioBufferList *)ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144));
    ausdk::AUBufferList::CopyBufferContentsTo((void *)(Element + 144), BufferList);
    return 0;
  }
  return result;
}

uint64_t AUECMIMO::ProcessMultipleBufferLists(AUECMIMO *this, unsigned int *a2, int a3, int a4, const AudioBufferList **a5, int a6, AudioBufferList **a7, double a8, double a9)
{
  uint64_t v101 = *MEMORY[0x1E4F143B8];
  LODWORD(a8) = *((_DWORD *)this + 137);
  LODWORD(a9) = *((_DWORD *)this + 136);
  *((double *)this + 80) = *((double *)this + 80) + (double)*(unint64_t *)&a8 / (double)*(unint64_t *)&a9;
  if (*((_DWORD *)this + 84) != a3)
  {
    if (AUECMIMOLogScope(void)::once != -1) {
      dispatch_once(&AUECMIMOLogScope(void)::once, &__block_literal_global_7117);
    }
    if (AUECMIMOLogScope(void)::scope)
    {
      vDSP_Length v20 = *(NSObject **)AUECMIMOLogScope(void)::scope;
      if (!*(void *)AUECMIMOLogScope(void)::scope) {
        return 4294956422;
      }
    }
    else
    {
      vDSP_Length v20 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      int v21 = *((_DWORD *)this + 84);
      float v91 = 4.8153e-34;
      int v92 = "AUECMIMO.cpp";
      __int16 v93 = 1024;
      int v94 = 1148;
      __int16 v95 = 1024;
      int v96 = a3;
      __int16 v97 = 1024;
      int v98 = v21;
      _os_log_impl(&dword_1BB0CE000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d AUECMIMO::ProcessMultipleBufferLists error - wrong (%u) block size expected (%u)\n", (uint8_t *)&v91, 0x1Eu);
    }
    return 4294956422;
  }
  uint64_t result = 4294956428;
  if (a4 != 2 || a6 != 3) {
    return result;
  }
  uint64_t v11 = *a5;
  uint64_t v12 = (uint64_t)*a7;
  if (*((unsigned char *)this + 528))
  {
    if ((_DWORD *)v12 != v11 && *((_DWORD *)this + 138))
    {
      unint64_t v13 = 0;
      uint64_t v14 = (const void **)(v11 + 4);
      unint64_t v15 = (void **)(v12 + 16);
      do
      {
        unint64_t v17 = *v15;
        v15 += 2;
        uint64_t v16 = v17;
        uint64_t v18 = *v14;
        v14 += 2;
        memcpy(v16, v18, 4 * *((unsigned int *)this + 137));
        ++v13;
      }
      while (v13 < *((unsigned int *)this + 138));
    }
LABEL_88:
    uint64_t result = 0;
    *((void *)this + 79) = 0;
    return result;
  }
  uint64_t v22 = a5[1];
  float v24 = a7[1];
  uint64_t v23 = a7[2];
  int v25 = *((_DWORD *)this + 133);
  if (v25 != *((_DWORD *)this + 134))
  {
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMO *)((char *)this + 32), 0);
    *((float *)this + 162) = ausdk::AUElement::GetParameter(Element, 1u);
    uint64_t v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMO *)((char *)this + 32), 0);
    float Parameter = ausdk::AUElement::GetParameter(v27, 2u);
    *((float *)this + 163) = Parameter;
    (*(void (**)(void, float, float))(**((void **)this + 90) + 136))(*((void *)this + 90), *((float *)this + 162), Parameter);
    *((_DWORD *)this + 134) = v25;
  }
  (*(void (**)(void, _DWORD *, const AudioBufferList *, _DWORD *, uint64_t, AudioBufferList *, AudioBufferList *, void))(**((void **)this + 90) + 40))(*((void *)this + 90), v11, v22, v11, v12, v24, v23, 0);
  uint64_t v29 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMO *)((char *)this + 32), 0);
  float v30 = ausdk::AUElement::GetParameter(v29, 0x15u);
  unsigned int v31 = (*(uint64_t (**)(void))(**((void **)this + 90) + 144))(*((void *)this + 90));
  int v32 = 0;
  if ((v31 & 1) == 0)
  {
    int v33 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMO *)((char *)this + 32), 0);
    *((float *)this + 148) = ausdk::AUElement::GetParameter(v33, 0x19u);
    __int16 v34 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMO *)((char *)this + 32), 0);
    *((float *)this + 149) = ausdk::AUElement::GetParameter(v34, 0x1Au);
    if (*v11)
    {
      unint64_t v35 = 0;
      unsigned int v36 = *((_DWORD *)this + 137);
      float v37 = 0.0;
      uint64_t v38 = 4;
      float v39 = 0.0;
      do
      {
        float v91 = 0.0;
        vDSP_svesq(*(const float **)&v11[v38], 1, &v91, v36);
        unsigned int v36 = *((_DWORD *)this + 137);
        float v40 = log10f((float)(v91 / (float)v36) + 1.0e-20) * 10.0;
        if (!v35)
        {
          float v39 = v40;
          float v40 = -0.0;
        }
        float v37 = v37 + v40;
        ++v35;
        unint64_t v41 = *v11;
        v38 += 4;
      }
      while (v35 < v41);
      if (v41 > 2) {
        float v37 = v37 / (float)(v41 - 1);
      }
    }
    else
    {
      float v39 = 0.0;
      float v37 = 0.0;
    }
    if (v37 >= *((float *)this + 148) || (float)(v39 - v37) <= *((float *)this + 149))
    {
      int v32 = 0;
    }
    else
    {
      if (*((double *)this + 72) > 0.0)
      {
        unint64_t v42 = (caulk::concurrent::messenger *)*((void *)this + 97);
        if (v42)
        {
          uint64_t v43 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 24, 8);
          *(_DWORD *)(v43 + 16) = 0;
          *(void *)uint64_t v43 = &unk_1F14AF3A8;
          *(void *)(v43 + 8) = 0;
          caulk::concurrent::messenger::enqueue(v42, (caulk::concurrent::message *)v43);
        }
      }
      int v32 = 1;
    }
  }
  unsigned int v44 = (*(uint64_t (**)(void))(**((void **)this + 90) + 152))(*((void *)this + 90));
  if (v30 == 0.0) {
    int v45 = 1;
  }
  else {
    int v45 = v31;
  }
  int v46 = v45 | v32;
  if (v30 == 0.0) {
    int v47 = v31;
  }
  else {
    int v47 = 1;
  }
  if (v46) {
    float v48 = 1.0;
  }
  else {
    float v48 = 0.0;
  }
  if (v47 | v32) {
    float v49 = 1.0;
  }
  else {
    float v49 = 0.0;
  }
  uint64_t v50 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMO *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v50, 0x16u, (float)v31, 0);
  uint64_t v51 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMO *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v51, 0x17u, v48, 0);
  int v52 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMO *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v52, 0x18u, v49, 0);
  uint64_t v53 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMO *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v53, 0x23u, (float)v44, 0);
  if (*((_DWORD *)this + 150))
  {
    *((float *)this + 154) = (*(float (**)(void))(**((void **)this + 90) + 128))(*((void *)this + 90));
    *((float *)this + 155) = (*(float (**)(void))(**((void **)this + 90) + 120))(*((void *)this + 90));
    std::string v54 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMO *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v54, 0x1Fu, *((float *)this + 154), 0);
    uint64_t v55 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMO *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v55, 0x20u, *((float *)this + 155), 0);
  }
  int v56 = (*(uint64_t (**)(void))(**((void **)this + 90) + 72))(*((void *)this + 90));
  int v57 = (*(uint64_t (**)(void))(**((void **)this + 90) + 88))(*((void *)this + 90));
  int v58 = (*(uint64_t (**)(void))(**((void **)this + 90) + 80))(*((void *)this + 90));
  int v59 = v58;
  if (v56 && v57 && (v58 & 1) != 0) {
    goto LABEL_76;
  }
  if (AUECMIMOLogScope(void)::once != -1) {
    dispatch_once(&AUECMIMOLogScope(void)::once, &__block_literal_global_7117);
  }
  if (!AUECMIMOLogScope(void)::scope)
  {
    long long v60 = MEMORY[0x1E4F14500];
LABEL_60:
    if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
    {
      float v91 = 4.8154e-34;
      int v92 = "AUECMIMO.cpp";
      __int16 v93 = 1024;
      int v94 = 1268;
      __int16 v95 = 1024;
      int v96 = v56;
      __int16 v97 = 1024;
      int v98 = v57;
      __int16 v99 = 1024;
      int v100 = v59;
      _os_log_impl(&dword_1BB0CE000, v60, OS_LOG_TYPE_ERROR, "%25s:%-5d AUECMIMO: ********* Reset begins *********\nAUECMIMO: state variables have finite values (1 if True): %u\nAUECMIMO: ref-signal buffers have finite values (1 if True): %u\nAUECMIMO: EC output buffers have valid values (1 if True): %u\n", (uint8_t *)&v91, 0x24u);
    }
    goto LABEL_62;
  }
  long long v60 = *(NSObject **)AUECMIMOLogScope(void)::scope;
  if (*(void *)AUECMIMOLogScope(void)::scope) {
    goto LABEL_60;
  }
LABEL_62:
  (*(void (**)(void))(**((void **)this + 90) + 16))(*((void *)this + 90));
  if (*((_DWORD *)this + 138))
  {
    unint64_t v61 = 0;
    long long v62 = (const void **)(v11 + 4);
    p_mData = (float **)&v24->mBuffers[0].mData;
    uint64_t v64 = (void **)(v12 + 16);
    do
    {
      uint64_t v65 = *p_mData;
      memcpy(*v64, *v62, 4 * *((unsigned int *)this + 137));
      vDSP_vclr(v65, 1, *((unsigned int *)this + 137));
      ++v61;
      v62 += 2;
      p_mData += 2;
      v64 += 2;
    }
    while (v61 < *((unsigned int *)this + 138));
  }
  if (*((_DWORD *)this + 139))
  {
    unint64_t v66 = 0;
    long long v67 = (float **)&v23->mBuffers[0].mData;
    do
    {
      vDSP_vclr(*v67, 1, *((unsigned int *)this + 137));
      ++v66;
      v67 += 2;
    }
    while (v66 < *((unsigned int *)this + 139));
  }
  if (AUECMIMOLogScope(void)::once != -1) {
    dispatch_once(&AUECMIMOLogScope(void)::once, &__block_literal_global_7117);
  }
  if (AUECMIMOLogScope(void)::scope)
  {
    uint64_t v68 = *(NSObject **)AUECMIMOLogScope(void)::scope;
    if (!*(void *)AUECMIMOLogScope(void)::scope) {
      goto LABEL_76;
    }
  }
  else
  {
    uint64_t v68 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
  {
    float v91 = 4.8151e-34;
    int v92 = "AUECMIMO.cpp";
    __int16 v93 = 1024;
    int v94 = 1291;
    _os_log_impl(&dword_1BB0CE000, v68, OS_LOG_TYPE_ERROR, "%25s:%-5d AUECMIMO: ********* Reset ends *********\n", (uint8_t *)&v91, 0x12u);
  }
LABEL_76:
  long long v69 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMO *)((char *)this + 32), 0);
  float v70 = ausdk::AUElement::GetParameter(v69, 0xEu);
  uint64_t result = 0;
  *((double *)this + 72) = v70;
  LODWORD(v71) = *((_DWORD *)this + 137);
  LODWORD(v72) = *((_DWORD *)this + 136);
  double v73 = *((double *)this + 79) + (double)v71 / (double)v72;
  if (v73 < 0.0) {
    double v73 = 0.0;
  }
  *((double *)this + 79) = v73;
  if (v70 > 0.0 && v73 > v70)
  {
    unint64_t v74 = (caulk::concurrent::messenger *)*((void *)this + 97);
    if (!v74) {
      return 0;
    }
    char v75 = (*(uint64_t (**)(void))(**((void **)this + 90) + 72))(*((void *)this + 90));
    char v76 = (*(uint64_t (**)(void))(**((void **)this + 90) + 88))(*((void *)this + 90));
    char v77 = (*(uint64_t (**)(void))(**((void **)this + 90) + 80))(*((void *)this + 90));
    uint64_t v78 = (void *)MEMORY[0x1E4FB7E90];
    uint64_t v79 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
    *(void *)(v79 + 8) = 0;
    *(_DWORD *)(v79 + 16) = 0;
    *(_OWORD *)(v79 + 24) = *(_OWORD *)((char *)this + 632);
    *(unsigned char *)(v79 + 40) = v75;
    *(unsigned char *)(v79 + 41) = v76;
    *(unsigned char *)(v79 + 42) = v77;
    *(void *)uint64_t v79 = &unk_1F14AF308;
    caulk::concurrent::messenger::enqueue(v74, (caulk::concurrent::message *)v79);
    if (*((_DWORD *)this + 138))
    {
      uint64_t v80 = 0;
      do
      {
        int v81 = (caulk::concurrent::messenger *)*((void *)this + 97);
        float v82 = (*(float (**)(void, uint64_t))(**((void **)this + 90) + 96))(*((void *)this + 90), v80);
        float v83 = (*(float (**)(void, uint64_t))(**((void **)this + 90) + 104))(*((void *)this + 90), v80);
        uint64_t v84 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v78 + 16))(*v78, 40, 8);
        *(_DWORD *)(v84 + 16) = 0;
        *(_DWORD *)(v84 + 24) = v80;
        *(float *)(v84 + 28) = v82;
        *(float *)(v84 + 32) = v83;
        *(void *)uint64_t v84 = &unk_1F14AF330;
        *(void *)(v84 + 8) = 0;
        caulk::concurrent::messenger::enqueue(v81, (caulk::concurrent::message *)v84);
        uint64_t v80 = (v80 + 1);
      }
      while (v80 < *((_DWORD *)this + 138));
    }
    if (*((_DWORD *)this + 139))
    {
      uint64_t v85 = 0;
      do
      {
        int v86 = (caulk::concurrent::messenger *)*((void *)this + 97);
        float v87 = (*(float (**)(void, uint64_t))(**((void **)this + 90) + 112))(*((void *)this + 90), v85);
        uint64_t v88 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v78 + 16))(*v78, 32, 8);
        *(_DWORD *)(v88 + 16) = 0;
        *(_DWORD *)(v88 + 24) = v85;
        *(float *)(v88 + 28) = v87;
        *(void *)uint64_t v88 = &unk_1F14AF358;
        *(void *)(v88 + 8) = 0;
        caulk::concurrent::messenger::enqueue(v86, (caulk::concurrent::message *)v88);
        uint64_t v85 = (v85 + 1);
      }
      while (v85 < *((_DWORD *)this + 139));
    }
    uint64_t v89 = (caulk::concurrent::messenger *)*((void *)this + 97);
    uint64_t v90 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v78 + 16))(*v78, 24, 8);
    *(_DWORD *)(v90 + 16) = 0;
    *(void *)uint64_t v90 = &unk_1F14AF380;
    *(void *)(v90 + 8) = 0;
    caulk::concurrent::messenger::enqueue(v89, (caulk::concurrent::message *)v90);
    goto LABEL_88;
  }
  return result;
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECMIMO::LogMaster(void)::$_2,int &,float>::perform(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v5 = (caulk::concurrent::message *)a1;
  int v1 = *(_DWORD *)(a1 + 24);
  float v2 = *(float *)(a1 + 28);
  if (AUECMIMOLogScope(void)::once != -1) {
    dispatch_once(&AUECMIMOLogScope(void)::once, &__block_literal_global_7117);
  }
  if (AUECMIMOLogScope(void)::scope)
  {
    uint64_t v3 = *(NSObject **)AUECMIMOLogScope(void)::scope;
    if (!*(void *)AUECMIMOLogScope(void)::scope) {
      return caulk::concurrent::details::rt_message_call<AUECMIMO::LogMaster(void)::$_2,int &,float>::rt_cleanup::~rt_cleanup(&v5);
    }
  }
  else
  {
    uint64_t v3 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 136315906;
    AudioUnitParameterUnit v7 = "AUECMIMO.cpp";
    __int16 v8 = 1024;
    int v9 = 1334;
    __int16 v10 = 1024;
    int v11 = v1;
    __int16 v12 = 2048;
    double v13 = v2;
    _os_log_impl(&dword_1BB0CE000, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECMIMO: energy measure in [dB] for ref-channel %u : %f\n", buf, 0x22u);
  }
  return caulk::concurrent::details::rt_message_call<AUECMIMO::LogMaster(void)::$_2,int &,float>::rt_cleanup::~rt_cleanup(&v5);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECMIMO::LogMaster(void)::$_2,int &,float>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  float v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], v2, 32, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AUECMIMO::LogMaster(void)::$_2,int &,float>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C185D370);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECMIMO::LogMaster(void)::$_3>::perform(caulk::concurrent::message *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  if (AUECMIMOLogScope(void)::once != -1) {
    dispatch_once(&AUECMIMOLogScope(void)::once, &__block_literal_global_7117);
  }
  if (AUECMIMOLogScope(void)::scope)
  {
    int v1 = *(NSObject **)AUECMIMOLogScope(void)::scope;
    if (!*(void *)AUECMIMOLogScope(void)::scope) {
      return caulk::concurrent::details::rt_message_call<AUECMIMO::LogMaster(void)::$_3>::rt_cleanup::~rt_cleanup(&v3);
    }
  }
  else
  {
    int v1 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 136315394;
    unsigned int v5 = "AUECMIMO.cpp";
    __int16 v6 = 1024;
    int v7 = 1339;
    _os_log_impl(&dword_1BB0CE000, v1, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECMIMO: ********* Logging ends *********\n", buf, 0x12u);
  }
  return caulk::concurrent::details::rt_message_call<AUECMIMO::LogMaster(void)::$_3>::rt_cleanup::~rt_cleanup(&v3);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECMIMO::LogMaster(void)::$_3>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  float v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], v2, 24, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AUECMIMO::LogMaster(void)::$_3>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C185D370);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECMIMO::LogMaster(void)::$_1,int &,float,float>::perform(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  __int16 v6 = (caulk::concurrent::message *)a1;
  int v1 = *(_DWORD *)(a1 + 24);
  float v2 = *(float *)(a1 + 28);
  float v3 = *(float *)(a1 + 32);
  if (AUECMIMOLogScope(void)::once != -1) {
    dispatch_once(&AUECMIMOLogScope(void)::once, &__block_literal_global_7117);
  }
  if (AUECMIMOLogScope(void)::scope)
  {
    uint64_t v4 = *(NSObject **)AUECMIMOLogScope(void)::scope;
    if (!*(void *)AUECMIMOLogScope(void)::scope) {
      return caulk::concurrent::details::rt_message_call<AUECMIMO::LogMaster(void)::$_1,int &,float,float>::rt_cleanup::~rt_cleanup(&v6);
    }
  }
  else
  {
    uint64_t v4 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 136316162;
    uint64_t v8 = "AUECMIMO.cpp";
    __int16 v9 = 1024;
    int v10 = 1326;
    __int16 v11 = 1024;
    int v12 = v1;
    __int16 v13 = 2048;
    double v14 = v2;
    __int16 v15 = 2048;
    double v16 = v3;
    _os_log_impl(&dword_1BB0CE000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECMIMO: ERLE measure in [dB] for mic-channel %u , internal: %f (dB), external: %f (dB)\n", buf, 0x2Cu);
  }
  return caulk::concurrent::details::rt_message_call<AUECMIMO::LogMaster(void)::$_1,int &,float,float>::rt_cleanup::~rt_cleanup(&v6);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECMIMO::LogMaster(void)::$_1,int &,float,float>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  float v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], v2, 40, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AUECMIMO::LogMaster(void)::$_1,int &,float,float>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C185D370);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECMIMO::LogMaster(void)::$_0,double &,double &,BOOL,BOOL,BOOL>::perform(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = (caulk::concurrent::message *)a1;
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v1 = *(void *)(a1 + 32);
  int v3 = *(unsigned __int8 *)(a1 + 40);
  int v4 = *(unsigned __int8 *)(a1 + 41);
  int v5 = *(unsigned __int8 *)(a1 + 42);
  if (AUECMIMOLogScope(void)::once != -1) {
    dispatch_once(&AUECMIMOLogScope(void)::once, &__block_literal_global_7117);
  }
  if (AUECMIMOLogScope(void)::scope)
  {
    __int16 v6 = *(NSObject **)AUECMIMOLogScope(void)::scope;
    if (!*(void *)AUECMIMOLogScope(void)::scope) {
      return caulk::concurrent::details::rt_message_call<AUECMIMO::LogMaster(void)::$_0,double &,double &,BOOL,BOOL,BOOL>::rt_cleanup::~rt_cleanup(&v8);
    }
  }
  else
  {
    __int16 v6 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 136316674;
    int v10 = "AUECMIMO.cpp";
    __int16 v11 = 1024;
    int v12 = 1318;
    __int16 v13 = 2048;
    uint64_t v14 = v2;
    __int16 v15 = 2048;
    uint64_t v16 = v1;
    __int16 v17 = 1024;
    int v18 = v3;
    __int16 v19 = 1024;
    int v20 = v4;
    __int16 v21 = 1024;
    int v22 = v5;
    _os_log_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECMIMO: ********* Logging begins *********\nAUECMIMO: logging (period, timestamp): (%f, %f) (s)\nAUECMIMO: state variables have finite values (1 if True): %u\nAUECMIMO: ref-signal buffers have finite values (1 if True): %u\nAUECMIMO: EC output buffers have valid values (1 if True): %u\n", buf, 0x38u);
  }
  return caulk::concurrent::details::rt_message_call<AUECMIMO::LogMaster(void)::$_0,double &,double &,BOOL,BOOL,BOOL>::rt_cleanup::~rt_cleanup(&v8);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECMIMO::LogMaster(void)::$_0,double &,double &,BOOL,BOOL,BOOL>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  uint64_t v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], v2, 48, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AUECMIMO::LogMaster(void)::$_0,double &,double &,BOOL,BOOL,BOOL>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C185D370);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECMIMO::CheckForAOPMode(BOOL,AudioBufferList const*)::$_0>::perform(caulk::concurrent::message *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v3 = a1;
  if (AUECMIMOLogScope(void)::once != -1) {
    dispatch_once(&AUECMIMOLogScope(void)::once, &__block_literal_global_7117);
  }
  if (AUECMIMOLogScope(void)::scope)
  {
    uint64_t v1 = *(NSObject **)AUECMIMOLogScope(void)::scope;
    if (!*(void *)AUECMIMOLogScope(void)::scope) {
      return caulk::concurrent::details::rt_message_call<AUECMIMO::CheckForAOPMode(BOOL,AudioBufferList const*)::$_0>::rt_cleanup::~rt_cleanup(&v3);
    }
  }
  else
  {
    uint64_t v1 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 136315394;
    int v5 = "AUECMIMO.cpp";
    __int16 v6 = 1024;
    int v7 = 1409;
    _os_log_impl(&dword_1BB0CE000, v1, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECMIMO: AOPMode detected (non-realtime logging).\n", buf, 0x12u);
  }
  return caulk::concurrent::details::rt_message_call<AUECMIMO::CheckForAOPMode(BOOL,AudioBufferList const*)::$_0>::rt_cleanup::~rt_cleanup(&v3);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECMIMO::CheckForAOPMode(BOOL,AudioBufferList const*)::$_0>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  uint64_t v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], v2, 24, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AUECMIMO::CheckForAOPMode(BOOL,AudioBufferList const*)::$_0>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C185D370);
}

void ___ZL16AUECMIMOLogScopev_block_invoke()
{
}

uint64_t AUECMIMO::CanScheduleParameters(AUECMIMO *this)
{
  return 0;
}

uint64_t AUECMIMO::SetParameter(AUECMIMO *this, unsigned int a2, int a3, float a4)
{
  if (a3) {
    return 4294956418;
  }
  ++*((_DWORD *)this + 133);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMO *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(Element, a2, a4, 0);
  return 0;
}

uint64_t AUECMIMO::SetProperty(AUECMIMO *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result = 4294956417;
  if (a2 == 21 && !a3)
  {
    uint64_t result = 0;
    *((unsigned char *)this + 528) = *a5 != 0;
  }
  return result;
}

uint64_t AUECMIMO::GetProperty(AUECMIMO *this, int a2, int a3, unsigned int a4, unsigned int *a5)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 <= 7698)
  {
    if (a2 <= 4698)
    {
      switch(a2)
      {
        case 21:
          uint64_t result = 0;
          unsigned int v9 = *((unsigned __int8 *)this + 528);
          break;
        case 3700:
          uint64_t result = 0;
          unsigned int v9 = *((unsigned __int8 *)this + 376);
          break;
        case 3800:
          goto LABEL_26;
        default:
          return result;
      }
LABEL_38:
      *a5 = v9;
      return result;
    }
    if (a2 != 4699)
    {
      if (a2 == 5699)
      {
        uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMO *)((char *)this + 32), 0);
        unsigned int v11 = 24;
      }
      else
      {
        if (a2 != 6699) {
          return result;
        }
        uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMO *)((char *)this + 32), 0);
        unsigned int v11 = 22;
      }
      float Parameter = ausdk::AUElement::GetParameter(Element, v11);
      uint64_t result = 0;
      unsigned int v9 = Parameter;
      goto LABEL_38;
    }
    __int16 v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMO *)((char *)this + 32), 0);
    float v20 = ausdk::AUElement::GetParameter(v19, 0x17u);
    uint64_t result = 0;
    BOOL v18 = v20 == 1.0;
LABEL_33:
    unsigned int v9 = v18;
    goto LABEL_38;
  }
  if (a2 <= 303799)
  {
    if (a2 != 7699)
    {
      if (a2 != 103800)
      {
        if (a2 != 203800) {
          return result;
        }
        uint64_t result = 0;
        unsigned int v9 = *((_DWORD *)this + 138);
        goto LABEL_38;
      }
LABEL_26:
      int v12 = (char *)this + 728;
      (*(void (**)(void, char *))(**((void **)this + 90) + 48))(*((void *)this + 90), (char *)this + 728);
      if (a2 != 103800)
      {
        __int16 v13 = (const void *)*((void *)this + 91);
        unsigned int v14 = *((_DWORD *)this + 139) * *((_DWORD *)this + 138) * *((_DWORD *)this + 141);
        goto LABEL_41;
      }
LABEL_27:
      CFArrayRef CFArray = applesauce::CF::details::make_CFArrayRef<float>(v12);
      uint64_t result = 0;
      *(void *)a5 = CFArray;
      return result;
    }
    uint64_t v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMO *)((char *)this + 32), 0);
    float v17 = ausdk::AUElement::GetParameter(v16, 0x17u);
    uint64_t result = 0;
    BOOL v18 = v17 == 0.0;
    goto LABEL_33;
  }
  if (a2 <= 503799)
  {
    if (a2 == 303800)
    {
      uint64_t result = 0;
      unsigned int v9 = *((_DWORD *)this + 139);
    }
    else
    {
      if (a2 != 403800) {
        return result;
      }
      uint64_t result = 0;
      unsigned int v9 = *((_DWORD *)this + 141);
    }
    goto LABEL_38;
  }
  if (a2 == 503800 || a2 == 603800)
  {
    int v12 = (char *)this + 752;
    (*(void (**)(void, char *))(**((void **)this + 90) + 64))(*((void *)this + 90), (char *)this + 752);
    if (a2 != 603800)
    {
      __int16 v13 = (const void *)*((void *)this + 94);
      unsigned int v14 = 2 * *((_DWORD *)this + 138) * *((_DWORD *)this + 139) * *((_DWORD *)this + 146) * *((_DWORD *)this + 137);
LABEL_41:
      memcpy(a5, v13, 4 * v14);
      return 0;
    }
    goto LABEL_27;
  }
  return result;
}

uint64_t AUECMIMO::GetPropertyInfo(AUECMIMO *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 <= 7698)
  {
    if (a2 <= 4698)
    {
      if (a2 == 21)
      {
        *a6 = 1;
        goto LABEL_21;
      }
      if (a2 != 3700)
      {
        if (a2 != 3800) {
          return result;
        }
        *a6 = 0;
        int v9 = 4 * *((_DWORD *)this + 138) * *((_DWORD *)this + 139) * *((_DWORD *)this + 141);
        goto LABEL_22;
      }
      goto LABEL_20;
    }
    if (a2 == 4699 || a2 == 5699) {
      goto LABEL_20;
    }
    int v8 = 6699;
    goto LABEL_19;
  }
  if (a2 <= 303799)
  {
    if (a2 == 7699) {
      goto LABEL_20;
    }
    if (a2 == 103800) {
      goto LABEL_26;
    }
    int v8 = 203800;
LABEL_19:
    if (a2 != v8) {
      return result;
    }
    goto LABEL_20;
  }
  if (a2 <= 503799)
  {
    if (a2 != 303800)
    {
      int v8 = 403800;
      goto LABEL_19;
    }
LABEL_20:
    *a6 = 0;
LABEL_21:
    int v9 = 4;
LABEL_22:
    uint64_t result = 0;
    *a5 = v9;
    return result;
  }
  if (a2 == 503800)
  {
    *a6 = 0;
    int v9 = 8 * *((_DWORD *)this + 138) * *((_DWORD *)this + 139) * *((_DWORD *)this + 146) * *((_DWORD *)this + 137);
    goto LABEL_22;
  }
  if (a2 == 603800)
  {
LABEL_26:
    *a6 = 0;
    int v9 = 8;
    goto LABEL_22;
  }
  return result;
}

uint64_t AUECMIMO::Reset(AUECMIMO *this)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (AUECMIMOLogScope(void)::once != -1) {
    dispatch_once(&AUECMIMOLogScope(void)::once, &__block_literal_global_7117);
  }
  if (AUECMIMOLogScope(void)::scope)
  {
    uint64_t v2 = *(NSObject **)AUECMIMOLogScope(void)::scope;
    if (!*(void *)AUECMIMOLogScope(void)::scope) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315394;
    int v5 = "AUECMIMO.cpp";
    __int16 v6 = 1024;
    int v7 = 480;
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECMIMO: Reset.\n", (uint8_t *)&v4, 0x12u);
  }
LABEL_9:
  if (*((unsigned char *)this + 17)) {
    (*(void (**)(void))(**((void **)this + 90) + 16))(*((void *)this + 90));
  }
  return 0;
}

uint64_t AUECMIMO::Initialize(AUECMIMO *this)
{
  *(void *)&v86[5] = *MEMORY[0x1E4F143B8];
  if (AUECMIMOLogScope(void)::once != -1) {
    dispatch_once(&AUECMIMOLogScope(void)::once, &__block_literal_global_7117);
  }
  if (AUECMIMOLogScope(void)::scope)
  {
    uint64_t v2 = *(NSObject **)AUECMIMOLogScope(void)::scope;
    if (!*(void *)AUECMIMOLogScope(void)::scope) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    buf[0] = 136315394;
    *(void *)&buf[1] = "AUECMIMO.cpp";
    __int16 v83 = 1024;
    int v84 = 234;
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECMIMO: Initialize.\n", (uint8_t *)buf, 0x12u);
  }
LABEL_9:
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUECMIMO *)((char *)this + 80), 0);
  uint64_t v4 = ausdk::AUScope::SafeGetElement((AUECMIMO *)((char *)this + 80), 1u);
  uint64_t v5 = ausdk::AUScope::SafeGetElement((AUECMIMO *)((char *)this + 128), 0);
  uint64_t v6 = ausdk::AUScope::SafeGetElement((AUECMIMO *)((char *)this + 128), 1u);
  uint64_t v7 = ausdk::AUScope::SafeGetElement((AUECMIMO *)((char *)this + 128), 2u);
  int v8 = *(_DWORD *)(Element + 108);
  *((_DWORD *)this + 138) = v8;
  int v9 = *(_DWORD *)(v4 + 108);
  *((_DWORD *)this + 139) = v9;
  double v10 = *(double *)(Element + 80);
  *((_DWORD *)this + 136) = v10;
  if (v10 != *(double *)(v4 + 80)) {
    return 4294956428;
  }
  uint64_t v12 = v7;
  double v13 = *(double *)(v5 + 80);
  uint64_t result = 4294956428;
  if (v13 == v10 && v13 == *(double *)(v12 + 80) && v13 == *(double *)(v6 + 80))
  {
    int v14 = *(_DWORD *)(v5 + 108);
    if (v14 == v8 && v14 == *(_DWORD *)(v6 + 108) && v9 == *(_DWORD *)(v12 + 108))
    {
      __int16 v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMO *)((char *)this + 32), 0);
      *((_DWORD *)this + 135) = ausdk::AUElement::GetParameter(v15, 0);
      uint64_t v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMO *)((char *)this + 32), 0);
      *((float *)this + 162) = ausdk::AUElement::GetParameter(v16, 1u);
      float v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMO *)((char *)this + 32), 0);
      *((float *)this + 163) = ausdk::AUElement::GetParameter(v17, 2u);
      BOOL v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMO *)((char *)this + 32), 0);
      *((float *)this + 164) = ausdk::AUElement::GetParameter(v18, 3u);
      __int16 v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMO *)((char *)this + 32), 0);
      *((float *)this + 165) = ausdk::AUElement::GetParameter(v19, 4u);
      *((_DWORD *)this + 137) = *((_DWORD *)this + 84);
      float v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMO *)((char *)this + 32), 0);
      *((float *)this + 166) = ausdk::AUElement::GetParameter(v20, 5u);
      __int16 v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMO *)((char *)this + 32), 0);
      *((float *)this + 167) = ausdk::AUElement::GetParameter(v21, 6u);
      int v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMO *)((char *)this + 32), 0);
      *((float *)this + 168) = ausdk::AUElement::GetParameter(v22, 7u);
      uint64_t v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMO *)((char *)this + 32), 0);
      *((float *)this + 169) = ausdk::AUElement::GetParameter(v23, 8u);
      float v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMO *)((char *)this + 32), 0);
      *((float *)this + 170) = ausdk::AUElement::GetParameter(v24, 9u);
      int v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMO *)((char *)this + 32), 0);
      *((float *)this + 171) = ausdk::AUElement::GetParameter(v25, 0xAu);
      uint64_t v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMO *)((char *)this + 32), 0);
      *((float *)this + 172) = ausdk::AUElement::GetParameter(v26, 0xBu);
      uint64_t v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMO *)((char *)this + 32), 0);
      *((float *)this + 173) = ausdk::AUElement::GetParameter(v27, 0xCu);
      uint64_t v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMO *)((char *)this + 32), 0);
      *((_DWORD *)this + 147) = ausdk::AUElement::GetParameter(v28, 0xFu);
      uint64_t v29 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMO *)((char *)this + 32), 0);
      *((_DWORD *)this + 174) = (int)ausdk::AUElement::GetParameter(v29, 0x10u);
      float v30 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMO *)((char *)this + 32), 0);
      float Parameter = ausdk::AUElement::GetParameter(v30, 0x11u);
      *((float *)this + 175) = Parameter;
      *((_DWORD *)this + 176) = vcvtps_u32_f32((float)(Parameter * (float)*((unsigned int *)this + 136)) / 1000.0);
      int v32 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMO *)((char *)this + 32), 0);
      *((unsigned char *)this + 708) = ausdk::AUElement::GetParameter(v32, 0x12u) != 0.0;
      int v33 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMO *)((char *)this + 32), 0);
      *((float *)this + 178) = ausdk::AUElement::GetParameter(v33, 0x13u);
      __int16 v34 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMO *)((char *)this + 32), 0);
      *((_DWORD *)this + 179) = ausdk::AUElement::GetParameter(v34, 0x14u);
      unint64_t v35 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMO *)((char *)this + 32), 0);
      *((float *)this + 148) = ausdk::AUElement::GetParameter(v35, 0x19u);
      unsigned int v36 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMO *)((char *)this + 32), 0);
      *((float *)this + 149) = ausdk::AUElement::GetParameter(v36, 0x1Au);
      float v37 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMO *)((char *)this + 32), 0);
      *((_DWORD *)this + 150) = ausdk::AUElement::GetParameter(v37, 0x1Bu);
      uint64_t v38 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMO *)((char *)this + 32), 0);
      *((float *)this + 151) = ausdk::AUElement::GetParameter(v38, 0x1Cu);
      float v39 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMO *)((char *)this + 32), 0);
      *((float *)this + 152) = ausdk::AUElement::GetParameter(v39, 0x1Du);
      float v40 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMO *)((char *)this + 32), 0);
      *((float *)this + 153) = ausdk::AUElement::GetParameter(v40, 0x1Eu);
      unint64_t v41 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMO *)((char *)this + 32), 0);
      *((float *)this + 154) = ausdk::AUElement::GetParameter(v41, 0x1Fu);
      unint64_t v42 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMO *)((char *)this + 32), 0);
      *((float *)this + 155) = ausdk::AUElement::GetParameter(v42, 0x20u);
      uint64_t v43 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMO *)((char *)this + 32), 0);
      *((float *)this + 156) = ausdk::AUElement::GetParameter(v43, 0x21u);
      unsigned int v44 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMO *)((char *)this + 32), 0);
      *((float *)this + 157) = ausdk::AUElement::GetParameter(v44, 0x22u);
      int v45 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMO *)((char *)this + 32), 0);
      unsigned int v46 = ausdk::AUElement::GetParameter(v45, 0xDu);
      *((_DWORD *)this + 142) = v46;
      unsigned int v47 = *((_DWORD *)this + 137);
      float v48 = (float)*((unsigned int *)this + 136);
      float v49 = (float)v47;
      unsigned int v50 = v47
          * vcvtps_u32_f32((float)(float)((float)(v48 * (float)*((unsigned int *)this + 135)) / 1000.0) / (float)v47);
      *((_DWORD *)this + 140) = v50;
      if (v50 <= v47)
      {
        *((_DWORD *)this + 140) = v47;
        *((_DWORD *)this + 135) = (float)((float)(v49 / v48) * 1000.0);
        unsigned int v50 = v47;
      }
      unsigned int v51 = v47 * vcvtps_u32_f32((float)(float)((float)(v48 * (float)v46) / 1000.0) / v49);
      *((_DWORD *)this + 141) = v51;
      if (v51 <= v47)
      {
        *((_DWORD *)this + 141) = v47;
        *((_DWORD *)this + 142) = (float)((float)(v49 / v48) * 1000.0);
        unsigned int v51 = v47;
      }
      if (*((_DWORD *)this + 174))
      {
        if (-858993459 * v50 >= 0x33333334) {
          int v52 = 1;
        }
        else {
          int v52 = 5;
        }
        if (-1431655765 * v50 >= 0x55555556) {
          int v53 = 4;
        }
        else {
          int v53 = 12;
        }
        for (float i = (float)(v53 * v52); i < (float)v50; float i = i + i)
          ;
        unsigned int v50 = i;
        *((_DWORD *)this + 140) = i;
        *((_DWORD *)this + 135) = (float)((float)((float)i / v48) * 1000.0);
      }
      if (v51 <= v50)
      {
        float v55 = (float)v50;
      }
      else
      {
        *((_DWORD *)this + 141) = v50;
        float v55 = (float)v50;
        *((_DWORD *)this + 142) = (float)((float)((float)v50 / v48) * 1000.0);
      }
      *((_DWORD *)this + 146) = vcvtps_u32_f32(v55 / v49);
      if (AUECMIMOLogScope(void)::once != -1) {
        dispatch_once(&AUECMIMOLogScope(void)::once, &__block_literal_global_7117);
      }
      if (AUECMIMOLogScope(void)::scope)
      {
        int v56 = *(NSObject **)AUECMIMOLogScope(void)::scope;
        if (!*(void *)AUECMIMOLogScope(void)::scope) {
          goto LABEL_44;
        }
      }
      else
      {
        int v56 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
      {
        int v57 = *((_DWORD *)this + 140);
        int v58 = *((_DWORD *)this + 141);
        buf[0] = 136315906;
        *(void *)&buf[1] = "AUECMIMO.cpp";
        __int16 v83 = 1024;
        int v84 = 316;
        __int16 v85 = 1024;
        v86[0] = v57;
        LOWORD(v86[1]) = 1024;
        *(_DWORD *)((char *)&v86[1] + 2) = v58;
        _os_log_impl(&dword_1BB0CE000, v56, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECMIMO: filter (readout) length is set to %u (%u) samples.\n", (uint8_t *)buf, 0x1Eu);
      }
LABEL_44:
      if (*((_DWORD *)this + 174))
      {
        unsigned int v59 = *((_DWORD *)this + 140) - *((_DWORD *)this + 137);
        if (*((_DWORD *)this + 176) > v59) {
          *((_DWORD *)this + 176) = v59;
        }
        if (AUECMIMOLogScope(void)::once != -1) {
          dispatch_once(&AUECMIMOLogScope(void)::once, &__block_literal_global_7117);
        }
        if (AUECMIMOLogScope(void)::scope)
        {
          long long v60 = *(NSObject **)AUECMIMOLogScope(void)::scope;
          if (!*(void *)AUECMIMOLogScope(void)::scope) {
            goto LABEL_55;
          }
        }
        else
        {
          long long v60 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
        {
          int v61 = *((_DWORD *)this + 176);
          buf[0] = 136315650;
          *(void *)&buf[1] = "AUECMIMO.cpp";
          __int16 v83 = 1024;
          int v84 = 321;
          __int16 v85 = 1024;
          v86[0] = v61;
          _os_log_impl(&dword_1BB0CE000, v60, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECMIMO: IQRD mode delay is set to %u samples.\n", (uint8_t *)buf, 0x18u);
        }
      }
LABEL_55:
      *((_DWORD *)this + 134) = *((_DWORD *)this + 133);
      long long v62 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMO *)((char *)this + 32), 0);
      *((double *)this + 72) = ausdk::AUElement::GetParameter(v62, 0xEu);
      *(_OWORD *)((char *)this + 632) = 0u;
      BOOL v81 = 0;
      v64.n128_f64[0] = CACFPreferencesGetAppFloatValue(@"ecmimo_log_period_in_seconds", @"com.apple.coreaudio", &v81);
      if (v81)
      {
        float v65 = v64.n128_f64[0];
        if (v65 > 0.0)
        {
          *((double *)this + 72) = v65;
          unint64_t v66 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMO *)((char *)this + 32), 0);
          ausdk::AUElement::SetParameter(v66, 0xEu, v65, 0);
          if (AUECMIMOLogScope(void)::once != -1) {
            dispatch_once(&AUECMIMOLogScope(void)::once, &__block_literal_global_7117);
          }
          if (AUECMIMOLogScope(void)::scope)
          {
            long long v67 = *(NSObject **)AUECMIMOLogScope(void)::scope;
            if (!*(void *)AUECMIMOLogScope(void)::scope) {
              goto LABEL_65;
            }
          }
          else
          {
            long long v67 = MEMORY[0x1E4F14500];
          }
          BOOL v63 = os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT);
          if (v63)
          {
            buf[0] = 136315650;
            *(void *)&buf[1] = "AUECMIMO.cpp";
            __int16 v83 = 1024;
            int v84 = 336;
            __int16 v85 = 2048;
            *(double *)int v86 = v65;
            _os_log_impl(&dword_1BB0CE000, v67, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECMIMO: Using logPeriod of (%g)s as specified in defaults write ecmimo_log_period_in_seconds.\n", (uint8_t *)buf, 0x1Cu);
          }
        }
      }
LABEL_65:
      if (!*((void *)this + 97))
      {
        v64.n128_u64[0] = *((void *)this + 72);
        if (v64.n128_f64[0] > 0.0)
        {
          caulk::concurrent::messenger::shared_logging_priority((caulk::concurrent::messenger *)v63);
          std::make_unique[abi:ne180100]<caulk::concurrent::messenger,caulk::concurrent::messenger::thread_strategy,caulk::thread::attributes &>();
        }
      }
      uint64_t v68 = *((void *)this + 90);
      *((void *)this + 90) = 0;
      if (v68) {
        (*(void (**)(uint64_t, __n128))(*(void *)v68 + 8))(v68, v64);
      }
      if (*((_DWORD *)this + 174))
      {
        if (AUECMIMOLogScope(void)::once != -1) {
          dispatch_once(&AUECMIMOLogScope(void)::once, &__block_literal_global_7117);
        }
        if (AUECMIMOLogScope(void)::scope)
        {
          long long v69 = *(NSObject **)AUECMIMOLogScope(void)::scope;
          if (!*(void *)AUECMIMOLogScope(void)::scope)
          {
LABEL_84:
            uint64_t v71 = *((void *)this + 90);
            if (!v71) {
              operator new();
            }
            HIDWORD(v79) = *((_DWORD *)this + 156);
            LODWORD(v79) = *((_DWORD *)this + 153);
            LODWORD(v77) = *((_DWORD *)this + 179);
            HIDWORD(v77) = *((_DWORD *)this + 150);
            (*(void (**)(uint64_t, void, void, void, void, void, void, void, float, float, float, float, float, float, float, float, _BYTE, uint64_t, uint64_t, _DWORD))(*(void *)v71 + 32))(v71, *((unsigned int *)this + 138), *((unsigned int *)this + 139), *((unsigned int *)this + 136), *((unsigned int *)this + 140), *((unsigned int *)this + 137), *((unsigned int *)this + 141), *((unsigned int *)this + 176), *((float *)this + 171), *((float *)this + 170), *((float *)this + 165), *((float *)this + 166), *((float *)this + 173), *((float *)this + 178), *((float *)this + 151), *((float *)this + 152), *((unsigned char *)this + 708), v77, v79,
              *((_DWORD *)this + 157));
            goto LABEL_93;
          }
        }
        else
        {
          long long v69 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
        {
          buf[0] = 136315394;
          *(void *)&buf[1] = "AUECMIMO.cpp";
          __int16 v83 = 1024;
          int v84 = 418;
          _os_log_impl(&dword_1BB0CE000, v69, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECMIMO: Set iQRD mode.\n", (uint8_t *)buf, 0x12u);
        }
        goto LABEL_84;
      }
      if (AUECMIMOLogScope(void)::once != -1) {
        dispatch_once(&AUECMIMOLogScope(void)::once, &__block_literal_global_7117);
      }
      if (AUECMIMOLogScope(void)::scope)
      {
        float v70 = *(NSObject **)AUECMIMOLogScope(void)::scope;
        if (!*(void *)AUECMIMOLogScope(void)::scope)
        {
LABEL_90:
          uint64_t v72 = *((void *)this + 90);
          if (!v72) {
            operator new();
          }
          HIDWORD(v80) = *((_DWORD *)this + 138);
          LODWORD(v80) = *((_DWORD *)this + 141);
          LODWORD(v78) = *((_DWORD *)this + 167);
          HIDWORD(v78) = *((_DWORD *)this + 173);
          HIDWORD(v76) = *((float *)this + 168);
          LODWORD(v76) = *((_DWORD *)this + 166);
          (*(void (**)(uint64_t, void, void, void, void, void, void, void, float, float, float, float, float, float, float, float, uint64_t, uint64_t, uint64_t, _DWORD))(*(void *)v72 + 24))(v72, 0, HIDWORD(v80), *((unsigned int *)this + 139), HIDWORD(v80), *((unsigned int *)this + 136), *((unsigned int *)this + 140), *((unsigned int *)this + 137), *((float *)this + 162), *((float *)this + 163), *((float *)this + 172), *((float *)this + 169), *((float *)this + 171), *((float *)this + 170), *((float *)this + 165), *((float *)this + 164), v76, v78, v80,
            *((_DWORD *)this + 147));
LABEL_93:
          unint64_t v73 = (*((_DWORD *)this + 139) * *((_DWORD *)this + 138) * *((_DWORD *)this + 141));
          buf[0] = 0;
          std::vector<float>::assign((char **)this + 91, v73, buf);
          unint64_t v74 = (2
                             * *((_DWORD *)this + 138)
                             * *((_DWORD *)this + 139)
                             * *((_DWORD *)this + 146)
                             * *((_DWORD *)this + 137));
          buf[0] = 0;
          std::vector<float>::assign((char **)this + 94, v74, buf);
          *((void *)this + 79) = 0;
          *((void *)this + 80) = 0;
          (*(void (**)(AUECMIMO *, void, void))(*(void *)this + 72))(this, 0, 0);
          if (AUECMIMOLogScope(void)::once != -1) {
            dispatch_once(&AUECMIMOLogScope(void)::once, &__block_literal_global_7117);
          }
          if (AUECMIMOLogScope(void)::scope)
          {
            char v75 = *(NSObject **)AUECMIMOLogScope(void)::scope;
            if (!*(void *)AUECMIMOLogScope(void)::scope) {
              return 0;
            }
          }
          else
          {
            char v75 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
          {
            buf[0] = 136315394;
            *(void *)&buf[1] = "AUECMIMO.cpp";
            __int16 v83 = 1024;
            int v84 = 352;
            _os_log_impl(&dword_1BB0CE000, v75, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECMIMO: Successfully initialized.\n", (uint8_t *)buf, 0x12u);
          }
          return 0;
        }
      }
      else
      {
        float v70 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
      {
        buf[0] = 136315394;
        *(void *)&buf[1] = "AUECMIMO.cpp";
        __int16 v83 = 1024;
        int v84 = 445;
        _os_log_impl(&dword_1BB0CE000, v70, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECMIMO: Set classic mode.\n", (uint8_t *)buf, 0x12u);
      }
      goto LABEL_90;
    }
  }
  return result;
}

void std::make_unique[abi:ne180100]<caulk::concurrent::messenger,caulk::concurrent::messenger::thread_strategy,caulk::thread::attributes &>()
{
}

void sub_1BB49CFBC(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    MEMORY[0x1C185C240]();
    JUMPOUT(0x1C185D370);
  }
  return result;
}

void AUECMIMO::~AUECMIMO(AUECMIMO *this)
{
  AUECMIMO::~AUECMIMO(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_1F14AF098;
  std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100]((uint64_t *)this + 97, 0);
  uint64_t v2 = (void *)*((void *)this + 94);
  if (v2)
  {
    *((void *)this + 95) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 91);
  if (v3)
  {
    *((void *)this + 92) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *((void *)this + 90);
  *((void *)this + 90) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  ausdk::AUBase::~AUBase(this);
}

vDSP_Length ActiveIntensityAnalysis::findNearestPoint(const float *a1, uint64_t a2, uint64_t a3, float a4, float a5, float a6)
{
  float v15 = a5;
  float __B = a4;
  float v14 = a6;
  uint64_t v6 = *(void *)(a3 + 8) - *(void *)a3;
  if ((v6 >> 1) + (v6 >> 2) != (a2 - (uint64_t)a1) >> 2) {
    __assert_rtn("findNearestPoint", "ActiveIntensityAnalysis.cpp", 28, "grid.size() == 3 * N");
  }
  vDSP_Length v8 = v6 >> 2;
  int v9 = &a1[v6 >> 2];
  double v10 = &v9[v6 >> 2];
  vDSP_vsmul(a1, 1, &__B, *(float **)a3, 1, v6 >> 2);
  vDSP_vsma(v9, 1, &v15, *(const float **)a3, 1, *(float **)a3, 1, v8);
  vDSP_vsma(v10, 1, &v14, *(const float **)a3, 1, *(float **)a3, 1, v8);
  float __C = 0.0;
  vDSP_Length __I = 0;
  vDSP_maxvi(*(const float **)a3, 1, &__C, &__I, v8);
  return __I;
}

void ActiveIntensityAnalysis::calculateCartesianActiveIntensity(uint64_t a1, CLiteMatrix *this)
{
  uint64_t v4 = (const float *)CLiteMatrix::Get(this, 0, 0);
  uint64_t v6 = v5;
  uint64_t v7 = (const float *)CLiteMatrix::Get(this, 1uLL, 0);
  int v9 = v8;
  double v10 = (const float *)CLiteMatrix::Get(this, 2uLL, 0);
  uint64_t v12 = v11;
  double v13 = (const float *)CLiteMatrix::Get(this, 3uLL, 0);
  float v15 = v14;
  vDSP_vmul(v4, 1, v7, 1, *(float **)(a1 + 32), 1, *(void *)a1);
  vDSP_vmul(v4, 1, v13, 1, (float *)(*(void *)(a1 + 32) + 4 * *(void *)a1), 1, *(void *)a1);
  vDSP_vmul(v4, 1, v10, 1, (float *)(*(void *)(a1 + 32) + 8 * *(void *)a1), 1, *(void *)a1);
  vDSP_vma(v6, 1, v9, 1, *(const float **)(a1 + 32), 1, *(float **)(a1 + 32), 1, *(void *)a1);
  uint64_t v16 = (float *)(*(void *)(a1 + 32) + 4 * *(void *)a1);
  vDSP_vma(v6, 1, v15, 1, v16, 1, v16, 1, *(void *)a1);
  float v17 = (float *)(*(void *)(a1 + 32) + 8 * *(void *)a1);
  vDSP_vma(v6, 1, v12, 1, v17, 1, v17, 1, *(void *)a1);
}

void ActiveIntensityAnalysis::convertCartesianActiveIntensityToPolar(vDSP_Length *a1, float **a2)
{
  vDSP_Length v4 = *a1;
  uint64_t v5 = *a2;
  if (*a1)
  {
    uint64_t v6 = (float *)a1[4];
    uint64_t v7 = *a2;
    vDSP_Length v8 = *a1;
    do
    {
      float v9 = *v6;
      float v10 = v6[v4];
      float v11 = v6[2 * v4];
      *uint64_t v7 = -atan2f(*v6, v10);
      float v12 = hypotf(v10, v9);
      v7[v4] = atan2f(v11, v12);
      ++v7;
      ++v6;
      --v8;
    }
    while (v8);
  }
  vDSP_vsmul(v5, 1, &kRad2DegAz, v5, 1, v4);
  vDSP_Length v13 = *a1;
  float v14 = &(*a2)[*a1];

  vDSP_vsmul(v14, 1, &kRad2DegEl, v14, 1, v13);
}

double ParameterSwitchBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result = 2.16744447e233;
  *(_OWORD *)a1 = xmmword_1BB87A8E0;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

float ParameterSwitchBox::getParameter(ParameterSwitchBox *this)
{
  unint64_t v1 = *((int *)this + 200);
  uint64_t v2 = *((void *)this + 97);
  if (v1 >= (*((void *)this + 98) - v2) >> 2) {
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  }
  return *(float *)(v2 + 4 * v1);
}

uint64_t ParameterSwitchBox::setParameter(uint64_t this, unsigned int a2, float a3)
{
  uint64_t v3 = *(void *)(this + 776);
  uint64_t v4 = *(void *)(this + 784) - v3;
  if (a2)
  {
    unint64_t v5 = v4 >> 2;
    if (v5 + 1 > a2)
    {
      unint64_t v6 = a2 - 1;
      if (v5 <= v6) {
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      }
      *(float *)(v3 + 4 * v6) = a3;
    }
  }
  else
  {
    int v7 = (int)a3;
    int v8 = ((unint64_t)v4 >> 2) - 1;
    if (v8 < (int)a3) {
      int v7 = v8;
    }
    *(_DWORD *)(this + 800) = v7 & ~(v7 >> 31);
  }
  return this;
}

const char *DSPGraph::Box::ClassName(DSPGraph::Box *this)
{
  return "Box";
}

void ParameterSwitchBox::~ParameterSwitchBox(ParameterSwitchBox *this)
{
  *(void *)this = &unk_1F14AF3D0;
  uint64_t v2 = (void *)*((void *)this + 97);
  if (v2)
  {
    *((void *)this + 98) = v2;
    operator delete(v2);
  }
  DSPGraph::Box::~Box(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F14AF3D0;
  uint64_t v2 = (void *)*((void *)this + 97);
  if (v2)
  {
    *((void *)this + 98) = v2;
    operator delete(v2);
  }

  DSPGraph::Box::~Box(this);
}

uint64_t SourceExtentProcessor::initialize(uint64_t a1, float a2, uint64_t a3, uint64_t a4, int a5, CFTypeRef *a6)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)(a1 + 240) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  if (a5) {
    *(_DWORD *)(a1 + 220) = a5;
  }
  CFTypeRef v9 = *a6;
  if (*a6)
  {
    CFRetain(*a6);
    CFTypeRef v49 = v9;
    IR::IRDataAttributes::IRDataAttributes((uint64_t)&v50, v9, 0, 1, 0.0);
  }
  else
  {
    IR::IRDataAttributes::IRDataAttributes((uint64_t)&v50, a1 + 8);
  }
  float v11 = (CFURLRef *)(a1 + 8);
  std::string::size_type v10 = *(void *)(a1 + 8);
  *(std::string *)(a1 + 8) = v50;
  *(_OWORD *)(a1 + 32) = v51;
  *(_OWORD *)(a1 + 48) = v52;
  *(unsigned char *)(a1 + 64) = v53;
  float v12 = *(const void **)(a1 + 72);
  CFTypeRef v13 = cf;
  *(void *)(a1 + 72) = v54;
  v50.__r_.__value_.__r.__words[0] = v10;
  CFTypeRef v54 = v12;
  *(_OWORD *)(a1 + 80) = v55;
  CFTypeRef v14 = *(CFTypeRef *)(a1 + 96);
  *(void *)(a1 + 96) = v13;
  long long v15 = v57[0];
  *(_OWORD *)(a1 + 113) = *(_OWORD *)((char *)v57 + 9);
  *(_OWORD *)(a1 + 104) = v15;
  uint64_t v16 = *(const void **)(a1 + 136);
  *(_DWORD *)(a1 + 152) = v60;
  float v17 = v58;
  uint64_t v18 = v59;
  CFTypeRef cf = v14;
  int v58 = v16;
  *(void *)(a1 + 136) = v17;
  *(void *)(a1 + 144) = v18;
  if (v16)
  {
    CFRelease(v16);
    CFTypeRef v14 = cf;
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v54) {
    CFRelease(v54);
  }
  if (v50.__r_.__value_.__r.__words[0]) {
    CFRelease(v50.__r_.__value_.__l.__data_);
  }
  if (v9) {
    CFRelease(v9);
  }
  IsReachable = (IR::IRDataLoader *)CFURLResourceIsReachable(*v11, 0);
  if (IsReachable)
  {
    if (*(_DWORD *)(a1 + 224) != 2)
    {
LABEL_27:
      uint64_t v24 = *(void *)(a1 + 168);
      if (v24 != *(void *)(a1 + 160)) {
        operator new();
      }
      *(void *)(a1 + 240) = 0x3F80000000000000;
      (*(void (**)(std::string *__return_ptr))(**(void **)(*(void *)v24 + 24) + 64))(&v50);
      CFDictionaryRef v25 = (const __CFDictionary *)v50.__r_.__value_.__r.__words[0];
      if (v50.__r_.__value_.__r.__words[0])
      {
        CFStringRef v26 = CFStringCreateWithBytes(0, (const UInt8 *)"SourceExtentFilterDelay", 23, 0x8000100u, 0);
        if (!v26)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
        }
        CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v25, v26);
        CFRelease(v26);
        if (Value)
        {
          uint64_t v28 = applesauce::CF::convert_as<float,0>(Value);
          if ((v28 & 0xFF00000000) != 0) {
            *(_DWORD *)(a1 + 240) = vcvtas_u32_f32(*(float *)&v28 * a2);
          }
        }
        if (!v50.__r_.__value_.__r.__words[0])
        {
          unsigned int v46 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v46, "Could not construct");
        }
        CFNumberRef v29 = applesauce::CF::DictionaryRef_proxy::at_as<float,char const(&)[23]>((const __CFDictionary *)v50.__r_.__value_.__l.__data_, "SourceExtentSizeWeight");
        if (((unint64_t)v29 & 0xFF00000000) != 0) {
          *(_DWORD *)(a1 + 244) = v29;
        }
        if (v50.__r_.__value_.__r.__words[0]) {
          CFRelease(v50.__r_.__value_.__l.__data_);
        }
      }
      uint64_t result = 0;
      *(unsigned char *)(a1 + 208) = 1;
      return result;
    }
    float v20 = (IR::IRDataLoader *)IR::IRDataLoader::instance(IsReachable);
    int v21 = IR::IRDataLoader::getAudioChannelLayoutTag(v20, (const IR::IRDataAttributes *)(a1 + 8)) & 0xFFFF0000;
    int v22 = 2 * (v21 != 12517376);
    if (v21 == 12451840) {
      int v22 = 1;
    }
    *(_DWORD *)(a1 + 232) = v22;
    BOOL v23 = v21 == 12517376 || v21 == 12451840;
    if (*(unsigned char *)(a1 + 236) && v23)
    {
      if (MEMORY[0x1C185BFE0](a1 + 8) > *(_DWORD *)(a1 + 228)) {
        *(_DWORD *)(a1 + 108) = MEMORY[0x1C185BFC0](a1 + 8) & 0xFFFF0000 | *(_DWORD *)(a1 + 228);
      }
      goto LABEL_27;
    }
    unint64_t v35 = *(IR::IRProcessor ***)(a1 + 160);
    __int16 v34 = *(IR::IRProcessor ***)(a1 + 168);
    while (v35 != v34)
      std::unique_ptr<IR::IRProcessor>::reset[abi:ne180100](v35++, 0);
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    unsigned int v36 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      std::string::basic_string[abi:ne180100]<0>(&v47, "SourceExtentProcessor");
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("::", &v47, &v48);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("initialize", &v48, &v50);
      if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unsigned int v44 = &v50;
      }
      else {
        unsigned int v44 = (std::string *)v50.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)int v61 = 136315138;
      *(void *)&v61[4] = v44;
      _os_log_error_impl(&dword_1BB0CE000, v36, OS_LOG_TYPE_ERROR, "%s: Unsupported normalization in the source extent IR file, Spatializer will ignore source size.", v61, 0xCu);
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v50.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v48.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v47.__r_.__value_.__l.__data_);
      }
    }
    if (*a6) {
      return 4294956445;
    }
    else {
      return 0;
    }
  }
  else
  {
    int v32 = *(IR::IRProcessor ***)(a1 + 160);
    unsigned int v31 = *(IR::IRProcessor ***)(a1 + 168);
    while (v32 != v31)
      std::unique_ptr<IR::IRProcessor>::reset[abi:ne180100](v32++, 0);
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    int v33 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      std::string::basic_string[abi:ne180100]<0>(&v47, "SourceExtentProcessor");
      float v37 = std::string::append(&v47, "::", 2uLL);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      float v39 = std::string::append(&v48, "initialize", 0xAuLL);
      long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v41 = &v50;
      }
      else {
        unint64_t v41 = (std::string *)v50.__r_.__value_.__r.__words[0];
      }
      CFStringRef v42 = CFCopyDescription(*v11);
      applesauce::CF::details::CFString_get_value<true>(v42, (uint64_t)v61);
      if (v42) {
        CFRelease(v42);
      }
      uint64_t v43 = v61;
      if (v62 < 0) {
        uint64_t v43 = *(unsigned char **)v61;
      }
      *(_DWORD *)int buf = 136315394;
      __n128 v64 = v41;
      __int16 v65 = 2080;
      unint64_t v66 = v43;
      _os_log_error_impl(&dword_1BB0CE000, v33, OS_LOG_TYPE_ERROR, "%s: Could not locate an IR file at %s", buf, 0x16u);
      if (v62 < 0) {
        operator delete(*(void **)v61);
      }
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v50.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v48.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v47.__r_.__value_.__l.__data_);
      }
    }
    return 4294956445;
  }
}

void sub_1BB49DF34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,int a23,const void *a24)
{
}

const __CFNumber *applesauce::CF::DictionaryRef_proxy::at_as<float,char const(&)[23]>(const __CFDictionary *a1, char *a2)
{
  CFNumberRef result = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[23]>(a1, a2);
  if (result)
  {
    return (const __CFNumber *)applesauce::CF::convert_as<float,0>(result);
  }
  return result;
}

const void *applesauce::CF::details::at_key<char const(&)[23]>(const __CFDictionary *a1, char *__s)
{
  CFIndex v5 = strlen(__s);
  CFStringRef v6 = CFStringCreateWithBytes(0, (const UInt8 *)__s, v5, 0x8000100u, 0);
  if (!v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  if (a1) {
    CFNumberRef Value = CFDictionaryGetValue(a1, v6);
  }
  CFRelease(v6);
  if (!a1) {
    return 0;
  }
  return Value;
}

void sub_1BB49E178(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void SourceExtentProcessor::updateExtentParameters(SourceExtentProcessor *this, float a2, float a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 208))
  {
    uint64_t v4 = *((void *)this + 20);
    for (uint64_t i = *((void *)this + 21); v4 != i; v4 += 8)
    {
      if (*(void *)v4)
      {
        (*(void (**)(void, void, float))(**(void **)(*(void *)v4 + 24) + 48))(*(void *)(*(void *)v4 + 24), 0, (float)(*((float *)this + 61) * a2) * 360.0);
        (*(void (**)(void, uint64_t, float))(**(void **)(*(void *)v4 + 24) + 48))(*(void *)(*(void *)v4 + 24), 1, (float)(*((float *)this + 61) * a3) * 180.0);
      }
    }
  }
  else
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    int v8 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      std::string::basic_string[abi:ne180100]<0>(&v14, "SourceExtentProcessor");
      CFTypeRef v9 = std::string::append(&v14, "::", 2uLL);
      long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v15.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      float v11 = std::string::append(&v15, "updateExtentParameters", 0x16uLL);
      long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      int64_t v17 = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      CFTypeRef v13 = __p;
      if (v17 < 0) {
        CFTypeRef v13 = (void **)__p[0];
      }
      *(_DWORD *)int buf = 136315138;
      __int16 v19 = v13;
      _os_log_error_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_ERROR, "%s: Uninitialized", buf, 0xCu);
      if (SHIBYTE(v17) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v15.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v14.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_1BB49E400(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void StringArrayDecoder::BlobToStringArray_Priv(float **a1, uint64_t a2)
{
  std::vector<std::__fs::filesystem::path>::__clear[abi:ne180100]((uint64_t *)a2);
  uint64_t v4 = *a1;
  double v5 = **a1 + 0.5;
  unint64_t v6 = (unint64_t)v5;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)a2) >> 3) >= (unint64_t)v5)
  {
    if (!v6) {
      return;
    }
  }
  else
  {
    if (v6 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v7 = *(void *)(a2 + 8) - *(void *)a2;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
    __v.__first_ = (std::__split_buffer<std::string>::pointer)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>(a2 + 16, (unint64_t)v5);
    __v.__begin_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v7);
    __v.__end_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v7);
    __v.__end_cap_.__value_ = &__v.__first_[v8];
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
  uint64_t v9 = 0;
  do
  {
    memset(&__v, 0, 24);
    long long v10 = v4 + 1;
    float v11 = v4[1];
    std::string::reserve((std::string *)&__v, (unint64_t)(v11 + 0.5));
    unint64_t v12 = (unint64_t)v11;
    if ((unint64_t)v11)
    {
      CFTypeRef v13 = v4 + 2;
      uint64_t v14 = 4 * v12;
      do
      {
        std::string::push_back((std::string *)&__v, (int)(*v13++ + 0.5));
        v14 -= 4;
      }
      while (v14);
    }
    unint64_t v15 = *(void *)(a2 + 8);
    if (v15 >= *(void *)(a2 + 16))
    {
      uint64_t v17 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a2, (long long *)&__v);
    }
    else
    {
      if (SHIBYTE(__v.__end_) < 0)
      {
        std::string::__init_copy_ctor_external(*(std::string **)(a2 + 8), (const std::string::value_type *)__v.__first_, (std::string::size_type)__v.__begin_);
      }
      else
      {
        long long v16 = *(_OWORD *)&__v.__first_;
        *(void *)(v15 + 16) = __v.__end_;
        *(_OWORD *)unint64_t v15 = v16;
      }
      uint64_t v17 = v15 + 24;
      *(void *)(a2 + 8) = v15 + 24;
    }
    *(void *)(a2 + 8) = v17;
    if (SHIBYTE(__v.__end_) < 0) {
      operator delete(__v.__first_);
    }
    uint64_t v4 = &v10[v12];
    ++v9;
  }
  while (v9 != v6);
}

void sub_1BB49E5D8(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t std::__split_buffer<std::vector<std::string>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    unint64_t v6 = v4;
    std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

double MoorePenrose::setMandN(MoorePenrose *this, unint64_t a2, unint64_t a3)
{
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v22, a2, a2);
  *(_OWORD *)this = v22;
  unint64_t v6 = (void *)*((void *)this + 2);
  if (v6)
  {
    *((void *)this + 3) = v6;
    operator delete(v6);
  }
  *((_OWORD *)this + 1) = v23;
  *((void *)this + 4) = v24;
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v22, a2, a2);
  *(_OWORD *)((char *)this + 40) = v22;
  uint64_t v7 = (void *)*((void *)this + 7);
  if (v7)
  {
    *((void *)this + 8) = v7;
    operator delete(v7);
  }
  *(_OWORD *)((char *)this + 56) = v23;
  *((void *)this + 9) = v24;
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v22, a2, a3);
  *((_OWORD *)this + 5) = v22;
  uint64_t v8 = (void *)*((void *)this + 12);
  if (v8)
  {
    *((void *)this + 13) = v8;
    operator delete(v8);
  }
  *((_OWORD *)this + 6) = v23;
  *((void *)this + 14) = v24;
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v22, a2, a3);
  *(_OWORD *)((char *)this + 120) = v22;
  uint64_t v9 = (void *)*((void *)this + 17);
  if (v9)
  {
    *((void *)this + 18) = v9;
    operator delete(v9);
  }
  *(_OWORD *)((char *)this + 136) = v23;
  *((void *)this + 19) = v24;
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v22, a3, a2);
  *((_OWORD *)this + 10) = v22;
  long long v10 = (void *)*((void *)this + 22);
  if (v10)
  {
    *((void *)this + 23) = v10;
    operator delete(v10);
  }
  *((_OWORD *)this + 11) = v23;
  *((void *)this + 24) = v24;
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v22, a3, a3);
  *(_OWORD *)((char *)this + 200) = v22;
  float v11 = (void *)*((void *)this + 27);
  if (v11)
  {
    *((void *)this + 28) = v11;
    operator delete(v11);
  }
  *(_OWORD *)((char *)this + 216) = v23;
  *((void *)this + 29) = v24;
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v22, a3, a3);
  *((_OWORD *)this + 15) = v22;
  unint64_t v12 = (void *)*((void *)this + 32);
  if (v12)
  {
    *((void *)this + 33) = v12;
    operator delete(v12);
  }
  *((_OWORD *)this + 16) = v23;
  *((void *)this + 34) = v24;
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v22, a3, a2);
  *(_OWORD *)((char *)this + 280) = v22;
  CFTypeRef v13 = (void *)*((void *)this + 37);
  if (v13)
  {
    *((void *)this + 38) = v13;
    operator delete(v13);
  }
  *(_OWORD *)((char *)this + 296) = v23;
  *((void *)this + 39) = v24;
  std::vector<__CLPK_complex>::vector(&v22, a3 * a2);
  uint64_t v14 = (void *)*((void *)this + 40);
  if (v14)
  {
    *((void *)this + 41) = v14;
    operator delete(v14);
  }
  *((_OWORD *)this + 20) = v22;
  *((void *)this + 42) = v23;
  if (a3 >= a2) {
    unint64_t v15 = a2;
  }
  else {
    unint64_t v15 = a3;
  }
  std::vector<float>::vector(&v22, v15);
  long long v16 = (void *)*((void *)this + 43);
  if (v16)
  {
    *((void *)this + 44) = v16;
    operator delete(v16);
  }
  *(_OWORD *)((char *)this + 344) = v22;
  *((void *)this + 45) = v23;
  std::vector<__CLPK_complex>::vector(&v22, a2 * a2);
  uint64_t v17 = (void *)*((void *)this + 46);
  if (v17)
  {
    *((void *)this + 47) = v17;
    operator delete(v17);
  }
  *((_OWORD *)this + 23) = v22;
  *((void *)this + 48) = v23;
  std::vector<__CLPK_complex>::vector(&v22, a3 * a3);
  uint64_t v18 = (void *)*((void *)this + 49);
  if (v18)
  {
    *((void *)this + 50) = v18;
    operator delete(v18);
  }
  *(_OWORD *)((char *)this + 392) = v22;
  *((void *)this + 51) = v23;
  std::vector<__CLPK_complex>::vector(&v22, a3 + 2 * a2);
  __int16 v19 = (void *)*((void *)this + 52);
  if (v19)
  {
    *((void *)this + 53) = v19;
    operator delete(v19);
  }
  *((_OWORD *)this + 26) = v22;
  *((void *)this + 54) = v23;
  std::vector<float>::vector(&v22, 5 * v15);
  uint64_t v20 = (void *)*((void *)this + 55);
  if (v20)
  {
    *((void *)this + 56) = v20;
    operator delete(v20);
  }
  double result = *(double *)&v22;
  *(_OWORD *)((char *)this + 440) = v22;
  *((void *)this + 57) = v23;
  return result;
}

void *std::vector<__CLPK_complex>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 61) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v4 = 8 * a2;
    double v5 = (char *)operator new(8 * a2);
    *a1 = v5;
    a1[2] = &v5[8 * a2];
    bzero(v5, 8 * a2);
    a1[1] = &v5[v4];
  }
  return a1;
}

void sub_1BB49EA00(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MoorePenrose::pseudoInverse(MoorePenrose *this, CLiteMatrix *a2, const CLiteMatrix *a3)
{
  uint64_t v3 = *(void *)a3;
  if (*(void *)a3 != *((void *)a2 + 1)) {
    __assert_rtn("pseudoInverse", "MoorePenrose.cpp", 43, "A.NumRows()==Aplus.NumCols()");
  }
  uint64_t v5 = *((void *)a3 + 1);
  if (v5 != *(void *)a2) {
    __assert_rtn("pseudoInverse", "MoorePenrose.cpp", 44, "A.NumCols()==Aplus.NumRows()");
  }
  __CLPK_integer __n = *((void *)a3 + 1);
  __CLPK_integer __lda = v3;
  CLiteMatrix::ToCLPKComplex(a3, (void *)this + 40);
  if ((int)v5 >= (int)v3) {
    int v7 = v3;
  }
  else {
    int v7 = v5;
  }
  if ((int)v3 <= (int)v5) {
    int v8 = v5;
  }
  else {
    int v8 = v3;
  }
  __CLPK_integer v25 = 0;
  __CLPK_integer v26 = v8 + 2 * v7;
  char __jobu = 65;
  char __jobvt = 65;
  cgesvd_(&__jobu, &__jobvt, &__lda, &__n, *((__CLPK_complex **)this + 40), &__lda, *((__CLPK_real **)this + 43), *((__CLPK_complex **)this + 46), &__lda, *((__CLPK_complex **)this + 49), &__n, *((__CLPK_complex **)this + 52), &v26, *((__CLPK_real **)this + 55), &v25);
  CLiteMatrix::FromCLPKComplex((unint64_t *)this, (void *)this + 46);
  CLiteMatrix::FromCLPKComplex((unint64_t *)this + 30, (void *)this + 49);
  uint64_t v9 = (vDSP_Length *)((char *)this + 200);
  CLiteMatrix::SetWithConjugateTranposeOfOther((MoorePenrose *)((char *)this + 200), (MoorePenrose *)((char *)this + 240));
  __CLPK_integer v10 = __n;
  if (__n >= __lda) {
    __CLPK_integer v10 = __lda;
  }
  if (v10)
  {
    for (unint64_t i = 0; i < v17; ++i)
    {
      int v12 = *(_DWORD *)(*((void *)this + 43) + 4 * i);
      *(_DWORD *)CLiteMatrix::Get((MoorePenrose *)((char *)this + 80), i, i) = v12;
      float v13 = *(float *)(*((void *)this + 43) + 4 * i);
      float v14 = fabsf(v13);
      float v15 = 1.0 / v13;
      if (v14 >= 0.00000011921) {
        float v16 = v15;
      }
      else {
        float v16 = 0.0;
      }
      *(float *)CLiteMatrix::Get((MoorePenrose *)((char *)this + 120), i, i) = v16;
      __CLPK_integer v17 = __n;
      if (__n >= __lda) {
        __CLPK_integer v17 = __lda;
      }
    }
  }
  uint64_t v18 = (MoorePenrose *)((char *)this + 40);
  CLiteMatrix::SetWithConjugateTranposeOfOther((MoorePenrose *)((char *)this + 40), this);
  __int16 v19 = (MoorePenrose *)((char *)this + 160);
  CLiteMatrix::SetWithConjugateTranposeOfOther((MoorePenrose *)((char *)this + 160), (MoorePenrose *)((char *)this + 120));
  uint64_t v20 = (MoorePenrose *)((char *)this + 280);
  CLiteMatrix::MatrixMultiply(v9, v19, v20, v21);
  CLiteMatrix::MatrixMultiply((vDSP_Length *)v20, v18, a2, v22);
}

void CLiteMatrix::ToCLPKComplex(CLiteMatrix *this, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)this;
  unint64_t v3 = *((void *)this + 1);
  if (*(void *)this * v3 != (uint64_t)(a2[1] - *a2) >> 3)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315394;
      int v12 = "LiteMatrix.h";
      __int16 v13 = 1024;
      int v14 = 319;
      _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  bad argument size", (uint8_t *)&v11, 0x12u);
    }
    __break(1u);
  }
  if (v3)
  {
    uint64_t v6 = 0;
    for (unint64_t i = 0; i < v3; ++i)
    {
      if (v2)
      {
        unint64_t v8 = 0;
        uint64_t v9 = 8 * v6;
        do
        {
          *(float *)(*a2 + v9) = CLiteMatrix::Get(this, v8, i);
          CLiteMatrix::Get(this, v8, i);
          *(_DWORD *)(*a2 + v9 + 4) = v10;
          ++v8;
          uint64_t v2 = *(void *)this;
          v9 += 8;
        }
        while (v8 < *(void *)this);
        v6 += v8;
        unint64_t v3 = *((void *)this + 1);
      }
    }
  }
}

unint64_t *CLiteMatrix::FromCLPKComplex(unint64_t *this, void *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = *this;
  unint64_t v3 = this[1];
  if (*this * v3 != (uint64_t)(a2[1] - *a2) >> 3)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315394;
      int v14 = "LiteMatrix.h";
      __int16 v15 = 1024;
      int v16 = 340;
      _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  bad argument size", (uint8_t *)&v13, 0x12u);
    }
    __break(1u);
  }
  if (v3)
  {
    uint64_t v5 = this;
    uint64_t v6 = 0;
    for (unint64_t i = 0; i < v3; ++i)
    {
      if (v2)
      {
        unint64_t v8 = 0;
        uint64_t v9 = 8 * v6;
        do
        {
          int v10 = *(_DWORD *)(*a2 + v9);
          *(_DWORD *)CLiteMatrix::Get((CLiteMatrix *)v5, v8, i) = v10;
          int v11 = *(_DWORD *)(*a2 + v9 + 4);
          this = (unint64_t *)CLiteMatrix::Get((CLiteMatrix *)v5, v8, i);
          _DWORD *v12 = v11;
          ++v8;
          unint64_t v2 = *v5;
          v9 += 8;
        }
        while (v8 < *v5);
        v6 += v8;
        unint64_t v3 = v5[1];
      }
    }
  }
  return this;
}

float CLiteMatrix::Get(CLiteMatrix *this, unint64_t a2, unint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (*(void *)this <= a2 || (unint64_t v3 = *((void *)this + 1), v3 <= a3))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315394;
      uint64_t v6 = "LiteMatrix.h";
      __int16 v7 = 1024;
      int v8 = 270;
      _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  subscript out of bounds", (uint8_t *)&v5, 0x12u);
    }
    __break(1u);
  }
  return *(float *)(*((void *)this + 2) + 4 * (a3 + v3 * a2));
}

float ViterbiOdep::normalizeLik(vDSP_Length *this, float *__A)
{
  float __C = 0.0;
  vDSP_sve(__A, 1, &__C, *this);
  float __C = 1.0 / __C;
  vDSP_vsmul(__A, 1, &__C, __A, 1, *this);
  return result;
}

void *HRTFNFSpatializer::getInHeadParams(HRTFNFSpatializer *this)
{
  uint64_t v2 = *((unsigned int *)this + 19);
  float result = &SpatializerWithInHeadRendering::mInHeadParams_BinauralCompatibilityMode_Near;
  switch(v2)
  {
    case 1:
      return result;
    case 2:
      float result = &SpatializerWithInHeadRendering::mInHeadParams_BinauralCompatibilityMode_Far;
      break;
    case 3:
      float result = &SpatializerWithInHeadRendering::mInHeadParams_BinauralCompatibilityMode_Mid;
      break;
    case 4:
      float result = (char *)this + 332;
      break;
    default:
      float result = &SpatializerWithInHeadRendering::mInHeadParams_BinauralCompatibilityMode_Bypass;
      break;
  }
  return result;
}

uint64_t HRTFNFSpatializer::getLatencyFrames(HRTFNFSpatializer *this)
{
  uint64_t v1 = *((void *)this + 44);
  if (!v1) {
    return 5;
  }
  unsigned int v2 = atomic_load((unsigned int *)(v1 + 148));
  return v2 + 5;
}

BOOL HRTFNFSpatializer::setIRSource(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 352);
  int v3 = *(unsigned __int8 *)(v2 + 145);
  if (*(unsigned char *)(v2 + 145))
  {
    uint64_t v4 = (std::__shared_weak_count *)a2[1];
    v6[0] = *a2;
    v6[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    IR::DynamicIRProcessor::setIRSource(v2, v6);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  return v3 != 0;
}

void sub_1BB49F15C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HRTFNFSpatializer::processAccumulating(HRTFNFSpatializer *this, IR::IRProcessor *a2, float *const *a3, int a4, float **a5, unsigned int a6, vDSP_Length a7, float a8, IR::ComplexDataCircBuffer *a9)
{
  uint64_t v244 = *MEMORY[0x1E4F143B8];
  if (a6 == a4)
  {
    if (*((unsigned char *)this + 16))
    {
      if (*((void *)this + 86))
      {
        unsigned __int8 v13 = atomic_load((unsigned __int8 *)this + 322);
        if (v13)
        {
          CFDictionaryRef v14 = (const __CFDictionary *)*((void *)this + 4);
          if (v14)
          {
            if (applesauce::CF::details::has_key<__CFString const*&>(v14, (const void *)kBinauralSourceExtentIRCustomURLParamName))
            {
              CFDictionaryRef v15 = (const __CFDictionary *)*((void *)this + 4);
              if (!v15)
              {
                exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                applesauce::CF::construct_error(exception);
              }
              int v16 = (uint64_t (***)(void, uint64_t, uint64_t, uint64_t, CFTypeRef *, void, void, float))*((void *)this + 86);
              float v17 = *((float *)this + 2);
              uint64_t v18 = *((unsigned int *)this + 3);
              applesauce::CF::details::find_at_key_or_optional<applesauce::CF::URLRef,__CFString const*&>(&__p, v15, (const void *)kBinauralSourceExtentIRCustomURLParamName);
              CFTypeRef cf = (CFTypeRef)__p.__r_.__value_.__r.__words[0];
              __p.__r_.__value_.__r.__words[0] = 0;
              int v19 = (**v16)(v16, v18, 512, 512, &cf, 0, 0, v17);
              if (cf) {
                CFRelease(cf);
              }
              std::__optional_destruct_base<applesauce::CF::URLRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&__p);
              if (!v19) {
                *((unsigned char *)this + 320) = 1;
              }
              atomic_store(0, (unsigned __int8 *)this + 322);
            }
          }
        }
      }
      unsigned int v230 = 0;
      float v20 = *((float *)this + 20);
      if (a6 < 2 || v20 <= 0.0)
      {
LABEL_190:
        float v121 = *((float *)this + 14);
        int v122 = *((_DWORD *)this + 19);
        float v123 = *((float *)this + 169);
        float v124 = *((float *)this + 170);
        if (v122 != 1)
        {
          if (v122 == 2)
          {
            float v125 = 8.0;
          }
          else
          {
            if (v122 != 3) {
              goto LABEL_202;
            }
            float v125 = 4.0;
          }
          float v121 = v121 * v125;
        }
        __float2 v126 = __sincosf_stret(v123 * 0.017453);
        __float2 v127 = __sincosf_stret(v124 * 0.017453);
        float v128 = v127.__cosval * (float)(v126.__sinval * v121);
        float v129 = v127.__sinval * v121;
        float v130 = v127.__cosval * (float)-(float)(v121 * v126.__cosval);
        float v121 = sqrtf((float)((float)(v129 * v129) + (float)(v128 * v128)) + (float)(v130 * v130));
        if (v121 != 0.0)
        {
          float v131 = fabsf(v128);
          float v132 = fabsf(v129);
          float v133 = fabsf(v130);
          if (v131 < v132) {
            float v131 = v132;
          }
          if (v131 < v133) {
            float v131 = v133;
          }
          float v121 = sqrtf((float)((float)((float)(v129 * (float)(v131 / v121)) * (float)(v129 * (float)(v131 / v121)))+ (float)((float)(v128 * (float)(v131 / v121)) * (float)(v128 * (float)(v131 / v121))))+ (float)((float)(v130 * (float)(v131 / v121)) * (float)(v130 * (float)(v131 / v121))));
        }
LABEL_202:
        if (!*((unsigned char *)this + 320) && !*((unsigned char *)this + 17)) {
          goto LABEL_238;
        }
        *((unsigned char *)this + 320) = 0;
        uint64_t v134 = *((void *)this + 44);
        LODWORD(__p.__r_.__value_.__l.__data_) = 0;
        atomic_store(LODWORD(v123), (unsigned int *)std::__tree<std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::__map_value_compare<IR::IRCoordinateType,std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::less<IR::IRCoordinateType>,true>,std::allocator<std::__value_type<IR::IRCoordinateType,std::atomic<float>>>>::__emplace_unique_key_args<IR::IRCoordinateType,std::piecewise_construct_t const&,std::tuple<IR::IRCoordinateType const&>,std::tuple<>>((uint64_t **)(v134 + 88), 0, &__p)+ 8);
        __dmb(0xBu);
        atomic_store(1u, (unsigned __int8 *)(v134 + 112));
        uint64_t v135 = *((void *)this + 44);
        LODWORD(__p.__r_.__value_.__l.__data_) = 1;
        atomic_store(LODWORD(v124), (unsigned int *)std::__tree<std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::__map_value_compare<IR::IRCoordinateType,std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::less<IR::IRCoordinateType>,true>,std::allocator<std::__value_type<IR::IRCoordinateType,std::atomic<float>>>>::__emplace_unique_key_args<IR::IRCoordinateType,std::piecewise_construct_t const&,std::tuple<IR::IRCoordinateType const&>,std::tuple<>>((uint64_t **)(v135 + 88), 1u, &__p)+ 8);
        __dmb(0xBu);
        atomic_store(1u, (unsigned __int8 *)(v135 + 112));
        uint64_t v136 = *((void *)this + 44);
        LODWORD(__p.__r_.__value_.__l.__data_) = 2;
        atomic_store(LODWORD(v121), (unsigned int *)std::__tree<std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::__map_value_compare<IR::IRCoordinateType,std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::less<IR::IRCoordinateType>,true>,std::allocator<std::__value_type<IR::IRCoordinateType,std::atomic<float>>>>::__emplace_unique_key_args<IR::IRCoordinateType,std::piecewise_construct_t const&,std::tuple<IR::IRCoordinateType const&>,std::tuple<>>((uint64_t **)(v136 + 88), 2u, &__p)+ 8);
        __dmb(0xBu);
        atomic_store(1u, (unsigned __int8 *)(v136 + 112));
        uint64_t v137 = *((void *)this + 44);
        unsigned int v138 = *((_DWORD *)this + 30);
        LODWORD(__p.__r_.__value_.__l.__data_) = 7;
        atomic_store(COERCE_UNSIGNED_INT((float)v138), (unsigned int *)std::__tree<std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::__map_value_compare<IR::IRCoordinateType,std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::less<IR::IRCoordinateType>,true>,std::allocator<std::__value_type<IR::IRCoordinateType,std::atomic<float>>>>::__emplace_unique_key_args<IR::IRCoordinateType,std::piecewise_construct_t const&,std::tuple<IR::IRCoordinateType const&>,std::tuple<>>((uint64_t **)(v137 + 88), 7u, &__p)+ 8);
        __dmb(0xBu);
        atomic_store(1u, (unsigned __int8 *)(v137 + 112));
        float v139 = (unsigned char *)*((void *)this + 86);
        if (v139)
        {
          if (v139[208])
          {
            BOOL v140 = fabsf(*((float *)this + 49)) >= 0.00000011921 || fabsf(*((float *)this + 50)) >= 0.00000011921;
            BOOL v142 = fabsf(*((float *)this + 15)) >= 0.00000011921 || fabsf(*((float *)this + 16)) >= 0.00000011921;
            (*(void (**)(unsigned char *, BOOL))(*(void *)v139 + 56))(v139, v142);
            uint64_t v143 = *((void *)this + 44);
            if (*(unsigned char *)(*((void *)this + 86) + 209))
            {
              if (*((float *)this + 15) >= *((float *)this + 16)) {
                unsigned int v144 = *((_DWORD *)this + 15);
              }
              else {
                unsigned int v144 = *((_DWORD *)this + 16);
              }
            }
            else
            {
              unsigned int v144 = 0;
            }
            LODWORD(__p.__r_.__value_.__l.__data_) = 8;
            atomic_store(v144, (unsigned int *)std::__tree<std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::__map_value_compare<IR::IRCoordinateType,std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::less<IR::IRCoordinateType>,true>,std::allocator<std::__value_type<IR::IRCoordinateType,std::atomic<float>>>>::__emplace_unique_key_args<IR::IRCoordinateType,std::piecewise_construct_t const&,std::tuple<IR::IRCoordinateType const&>,std::tuple<>>((uint64_t **)(v143 + 88), 8u, &__p)+ 8);
            __dmb(0xBu);
            atomic_store(1u, (unsigned __int8 *)(v143 + 112));
            SourceExtentProcessor::updateExtentParameters(*((SourceExtentProcessor **)this + 86), *((float *)this + 15), *((float *)this + 16));
            (*(void (**)(void, void, BOOL))(**((void **)this + 86) + 40))(*((void *)this + 86), *((unsigned __int8 *)this + 17), v140);
LABEL_220:
            *(void *)((char *)this + 196) = *(void *)((char *)this + 60);
            *((_DWORD *)this + 51) = *((_DWORD *)this + 17);
            if (*((unsigned char *)this + 669))
            {
              float v145 = cosf(v124 * 0.017453);
              float v146 = cosf((float)(-100.0 - v123) * 0.017453);
              float v147 = acosf(v146 * v145) * 57.296;
              float v148 = cosf((float)(100.0 - v123) * 0.017453);
              float v149 = acosf(v148 * v145);
              (*(void (**)(void, void, void, float))(**((void **)this + 45) + 72))(*((void *)this + 45), 0, 0, v147);
              float v150 = (void *)((char *)this + 360);
              (*(void (**)(void, uint64_t, void, float))(**((void **)this + 45) + 72))(*((void *)this + 45), 2, 0, v121);
              (*(void (**)(void, void, uint64_t, float))(*(void *)*v150 + 72))(*v150, 0, 1, v149 * 57.296);
              (*(void (**)(void, uint64_t, uint64_t, float))(*(void *)*v150 + 72))(*v150, 2, 1, v121);
              float v151 = v121 + 0.001;
              float v152 = v121 + -0.001;
              uint64_t v153 = (unsigned __int8 *)*((void *)this + 45);
              if (*((unsigned char *)this + 17))
              {
                BOOL v154 = v151 < 1.0
                    && v152 > *(float *)((*(uint64_t (**)(HRTFNFSpatializer *))(*(void *)this + 320))(this)
                                       + 4);
                (*(void (**)(unsigned __int8 *, BOOL))(*(void *)v153 + 56))(v153, v154);
                (*(void (**)(void, void, void))(**((void **)this + 45) + 40))(*((void *)this + 45), *((unsigned __int8 *)this + 17), 0);
                goto LABEL_237;
              }
              int v155 = v153[209];
              if (v152 <= 1.0)
              {
                uint64_t v156 = (*(uint64_t (**)(HRTFNFSpatializer *))(*(void *)this + 320))(this);
                if (!v155 || v151 >= *(float *)(v156 + 4))
                {
LABEL_233:
                  if (v151 < 1.0)
                  {
                    uint64_t v157 = (*(uint64_t (**)(HRTFNFSpatializer *))(*(void *)this + 320))(this);
                    if (!v155 && v152 > *(float *)(v157 + 4))
                    {
                      (*(void (**)(void, uint64_t))(**((void **)this + 45) + 56))(*((void *)this + 45), 1);
                      (*(void (**)(void, void, void))(**((void **)this + 45) + 40))(*((void *)this + 45), *((unsigned __int8 *)this + 17), 0);
                    }
                  }
                  goto LABEL_237;
                }
                uint64_t v153 = (unsigned __int8 *)*((void *)this + 45);
              }
              else if (!v153[209])
              {
                goto LABEL_233;
              }
              (*(void (**)(unsigned __int8 *, void))(*(void *)v153 + 56))(v153, 0);
              (*(void (**)(void, void, uint64_t))(**((void **)this + 45) + 40))(*((void *)this + 45), *((unsigned __int8 *)this + 17), 1);
            }
LABEL_237:
            *((_DWORD *)this + 48) = *((_DWORD *)this + 14);
LABEL_238:
            uint64_t v158 = (*(uint64_t (**)(HRTFNFSpatializer *))(*(void *)this + 320))(this);
            float v160 = *(float *)(v158 + 4);
            float v159 = *(float *)(v158 + 8);
            if (v160 >= v159)
            {
              BOOL v67 = v159 <= v121;
              float v163 = 0.0;
              if (!v67) {
                float v163 = 1.0;
              }
            }
            else
            {
              float v161 = (float)(v121 - v160) / (float)(v159 - v160);
              float v162 = 1.0 - v161;
              if (v161 > 1.0) {
                float v162 = 0.0;
              }
              if (v161 >= 0.0) {
                float v163 = v162;
              }
              else {
                float v163 = 1.0;
              }
            }
            float v232 = v163;
            uint64_t v164 = (float *)(*(uint64_t (**)(HRTFNFSpatializer *))(*(void *)this + 320))(this);
            float v165 = *v164;
            float v166 = v164[1];
            if (*v164 >= v166)
            {
              if (v165 <= v121) {
                float v169 = 0.0;
              }
              else {
                float v169 = 1.0;
              }
            }
            else
            {
              float v167 = (float)(v121 - v165) / (float)(v166 - v165);
              float v168 = 1.0 - v167;
              if (v167 > 1.0) {
                float v168 = 0.0;
              }
              if (v167 >= 0.0) {
                float v169 = v168;
              }
              else {
                float v169 = 1.0;
              }
            }
            uint64_t v170 = (*(uint64_t (**)(HRTFNFSpatializer *))(*(void *)this + 320))(this);
            v171.n128_u32[0] = *(_DWORD *)v170;
            v172.n128_u32[0] = *(_DWORD *)(v170 + 8);
            if (v172.n128_f32[0] <= *(float *)v170)
            {
              BOOL v67 = v171.n128_f32[0] <= v121;
              float v176 = 1.0;
              if (!v67) {
                float v176 = 0.0;
              }
            }
            else
            {
              float v173 = (float)(v121 - v171.n128_f32[0]) / (float)(v172.n128_f32[0] - v171.n128_f32[0]);
              float v174 = 1.0;
              if (v173 <= 1.0) {
                float v174 = v173;
              }
              BOOL v175 = v173 < 0.0;
              float v176 = 0.0;
              if (!v175) {
                float v176 = v174;
              }
            }
            float v177 = (float)((float)(1.0 - v20) * a8)
                 * (float)(v176 + (float)((float)(1.0 - v176) * *(float *)(v170 + 12)));
            float v178 = 0.0;
            if (*((unsigned char *)this + 132)) {
              float v178 = v177;
            }
            float v231 = v178;
            float v179 = (float)(1.0 - v232) * v178;
            BOOL v180 = 1;
            if (v169 >= 1.0 && v179 <= 0.0 && *((float *)this + 165) <= 0.0) {
              BOOL v180 = *((_DWORD *)this + 168) < *((_DWORD *)this + 5);
            }
            BOOL v181 = 0;
            if (*((unsigned char *)this + 669) && v180)
            {
              uint64_t v182 = *((void *)this + 45);
              if (*(unsigned char *)(v182 + 208))
              {
                if (*(_DWORD *)(v182 + 212)) {
                  BOOL v181 = 1;
                }
                else {
                  BOOL v181 = *(unsigned __int8 *)(v182 + 209) != 0;
                }
              }
              else
              {
                BOOL v181 = 0;
              }
            }
            float v229 = (float)(1.0 - v232) * v178;
            if (v180)
            {
              uint64_t v183 = *((void *)this + 86);
              if (v183 && *(unsigned char *)(v183 + 208))
              {
                if (*(_DWORD *)(v183 + 212)) {
                  BOOL v184 = 1;
                }
                else {
                  BOOL v184 = *(unsigned __int8 *)(v183 + 209) != 0;
                }
              }
              else
              {
                BOOL v184 = 0;
              }
              size_t v185 = (std::string::size_type *)*((void *)this + 60);
              std::string::size_type v186 = *v185;
              std::string::size_type v187 = v185[3];
              __p.__r_.__value_.__r.__words[0] = v186;
              __p.__r_.__value_.__l.__size_ = v187;
              uint64_t v188 = *((void *)this + 44);
              float v189 = -1.0;
              if (!*((_DWORD *)this + 81)) {
                float v189 = 3000.0;
              }
              *(float *)(v188 + 80) = v189;
              if (a6 >= 2) {
                unsigned int v190 = 2;
              }
              else {
                unsigned int v190 = a6;
              }
              IR::DynamicIRProcessor::processInternal(v188, a2, a5, v190, a7, v179, (float *const *)&__p, 0, 0);
            }
            else
            {
              BOOL v184 = 0;
            }
            if (v232 > 0.0 || *((float *)this + 164) > 0.0)
            {
              if ((*((_DWORD *)this + 19) | 4) != 4)
              {
                uint64_t v191 = *((void *)this + 89);
                float v192 = -0.00033333;
                if (*((_DWORD *)this + 81)) {
                  float v192 = 1.0;
                }
                *(float *)(v191 + 96) = expf(v192);
                IR::DelayLine::setDelay(v191, 50.0);
                int v193 = (IR::DelayLine *)*((void *)this + 89);
                __p.__r_.__value_.__r.__words[0] = *((void *)this + 90);
                IR::DelayLine::process(v193, (const float *)a2, (float **)&__p, a7);
                a2 = (IR::IRProcessor *)*((void *)this + 90);
              }
              if (*((unsigned char *)this + 448))
              {
                __n128 v171 = IR::FixedIntegerDelay::process((HRTFNFSpatializer *)((char *)this + 392), (float *)a2, (float *)*((void *)this + 90), a7);
                a2 = (IR::IRProcessor *)*((void *)this + 90);
              }
            }
            if (a6 >= 2) {
              uint64_t v194 = 2;
            }
            else {
              uint64_t v194 = a6;
            }
            if (v194)
            {
              unint64_t v195 = 0;
              float v196 = v232 * v231;
              v172.n128_u64[0] = 1.0;
              do
              {
                float v197 = a5[v195];
                if (v181)
                {
                  __p.__r_.__value_.__r.__words[0] = 0;
                  __p.__r_.__value_.__r.__words[0] = **((void **)this + 60);
                  int v198 = (void *)*((void *)this + 45);
                  if (*((_DWORD *)this + 81)) {
                    float v199 = -1.0;
                  }
                  else {
                    float v199 = 3000.0;
                  }
                  uint64_t v200 = v198[20];
                  uint64_t v201 = v198[21];
                  while (v200 != v201)
                  {
                    if (*(void *)v200) {
                      *(float *)(*(void *)v200 + 160) = v199;
                    }
                    v200 += 8;
                  }
                  (*(void (**)(void *, float *, std::string *, unint64_t, uint64_t, vDSP_Length, float, __n128))(*v198 + 8))(v198, v197, &__p, v195, 1, a7, 1.0, v172);
                  (*(void (**)(void, float *, std::string::size_type, unint64_t, void, vDSP_Length))(**((void **)this + 45) + 24))(*((void *)this + 45), a5[v195], __p.__r_.__value_.__r.__words[0], v195, 0, a7);
                  float v197 = (float *)__p.__r_.__value_.__r.__words[0];
                }
                if (v184)
                {
                  __p.__r_.__value_.__r.__words[0] = *(void *)(*((void *)this + 60) + 24);
                  float v202 = (void *)*((void *)this + 86);
                  if (*((_DWORD *)this + 81)) {
                    float v203 = -1.0;
                  }
                  else {
                    float v203 = 3000.0;
                  }
                  uint64_t v204 = v202[20];
                  uint64_t v205 = v202[21];
                  while (v204 != v205)
                  {
                    if (*(void *)v204) {
                      *(float *)(*(void *)v204 + 160) = v203;
                    }
                    v204 += 8;
                  }
                  (*(void (**)(void *, float *, std::string *, unint64_t, uint64_t, vDSP_Length, float, __n128))(*v202 + 8))(v202, v197, &__p, v195, 1, a7, 1.0, v172);
                  (*(void (**)(void, float *, std::string::size_type, unint64_t, void, vDSP_Length))(**((void **)this + 86) + 24))(*((void *)this + 86), v197, __p.__r_.__value_.__r.__words[0], v195, 0, a7);
                  float v197 = (float *)__p.__r_.__value_.__r.__words[0];
                }
                if (v196 <= 0.0 && (float)(*((float *)this + 166) * *((float *)this + 164)) <= 0.0)
                {
                  *(_DWORD *)(*((void *)this + 57) + 4 * v195) = 0;
                }
                else
                {
                  float v206 = v196
                       * (float)((float)((float)(1.0 - v169) * 0.70711)
                               + (float)(v169 * *(float *)(*((void *)this + 17) + 4 * v195)));
                  *(float *)&__p.__r_.__value_.__l.__data_ = v206;
                  if (*((unsigned char *)this + 17) || (v207 = (float *)(*((void *)this + 57) + 4 * v195), v206 == *v207))
                  {
                    if (v180) {
                      vDSP_vsma((const float *)a2, 1, (const float *)&__p, v197, 1, v197, 1, a7);
                    }
                    else {
                      vDSP_vsmul((const float *)a2, 1, (const float *)&__p, v197, 1, a7);
                    }
                  }
                  else if (a7)
                  {
                    LODWORD(v238.__r_.__value_.__l.__data_) = 0;
                    *(float *)&v238.__r_.__value_.__l.__data_ = (float)(v206 - *v207) / (float)a7;
                    if (v180) {
                      vDSP_vrampmuladd((const float *)a2, 1, v207, (const float *)&v238, v197, 1, a7);
                    }
                    else {
                      vDSP_vrampmul((const float *)a2, 1, v207, (const float *)&v238, v197, 1, a7);
                    }
                  }
                  *(_DWORD *)(*((void *)this + 57) + 4 * v195) = __p.__r_.__value_.__l.__data_;
                }
                uint64_t v208 = *(void *)(*((void *)this + 44) + 32);
                v171.n128_u64[0] = 0;
                float v209 = 0.0;
                if (v208)
                {
                  uint64_t v211 = v208 + 112;
                  uint64_t v210 = *(void *)(v208 + 112);
                  if (v195 < (*(void *)(v211 + 8) - v210) >> 2) {
                    float v209 = *(float *)(v210 + 4 * v195);
                  }
                }
                if (v181) {
                  v171.n128_f32[0] = (*(float (**)(void, unint64_t, void, __n128))(**((void **)this + 45) + 88))(*((void *)this + 45), v195, 0, v171);
                }
                float v212 = (1.0 - v169) * (float)(v209 + v171.n128_f32[0]);
                uint64_t v213 = *(void *)(*((void *)this + 46) + 8 * v195);
                float v214 = 1.0;
                if (!*((_DWORD *)this + 81)) {
                  float v214 = -0.00033333;
                }
                *(float *)(v213 + 96) = expf(v214);
                IR::DelayLine::setDelay(v213, v212);
                int v215 = *(IR::DelayLine **)(*((void *)this + 46) + 8 * v195);
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v197;
                IR::DelayLine::process(v215, v197, (float **)&__p, a7);
                vDSP_vadd(v197, 1, a3[v195], 1, a3[v195], 1, a7);
                ++v195;
              }
              while (v195 != v194);
            }
            if (v184) {
              (*(void (**)(void, vDSP_Length))(**((void **)this + 86) + 48))(*((void *)this + 86), a7);
            }
            if (v181) {
              (*(void (**)(void, vDSP_Length))(**((void **)this + 45) + 48))(*((void *)this + 45), a7);
            }
            *((unsigned char *)this + 268) = *((unsigned char *)this + 132);
            float v216 = v229;
            if (v232 >= 1.0 && *((float *)this + 164) >= 1.0)
            {
              unsigned int v217 = *((_DWORD *)this + 168);
              unsigned int v218 = *((_DWORD *)this + 5);
              if (v217 < v218)
              {
                BOOL v219 = __CFADD__(v217, a7);
                unsigned int v220 = v217 + a7;
                if (v219) {
                  unsigned int v220 = -1;
                }
                *((_DWORD *)this + 168) = v220;
                if (v220 >= v218)
                {
                  IR::DynamicIRProcessor::reset(*((IR::DynamicIRProcessor **)this + 44));
                  uint64_t v221 = *(void *)(*((void *)this + 44) + 32);
                  if (v221) {
                    *(unsigned char *)(v221 + 168) = 0;
                  }
                  if (*((unsigned char *)this + 669)) {
                    (*(void (**)(void, void))(**((void **)this + 45) + 32))(*((void *)this + 45), 0);
                  }
                  uint64_t v222 = *((void *)this + 86);
                  float v216 = v229;
                  if (v222)
                  {
                    (*(void (**)(uint64_t, void))(*(void *)v222 + 32))(v222, 0);
                    float v216 = v229;
                  }
                }
              }
            }
            else
            {
              *((_DWORD *)this + 168) = 0;
            }
            *((float *)this + 164) = v232;
            *((float *)this + 165) = v216;
            *((float *)this + 166) = v231;
            *((unsigned char *)this + 17) = 0;
            return v230;
          }
          (*(void (**)(unsigned char *, void))(*(void *)v139 + 56))(v139, 0);
        }
        uint64_t v141 = *((void *)this + 44);
        LODWORD(__p.__r_.__value_.__l.__data_) = 8;
        atomic_store(0, (unsigned int *)std::__tree<std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::__map_value_compare<IR::IRCoordinateType,std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::less<IR::IRCoordinateType>,true>,std::allocator<std::__value_type<IR::IRCoordinateType,std::atomic<float>>>>::__emplace_unique_key_args<IR::IRCoordinateType,std::piecewise_construct_t const&,std::tuple<IR::IRCoordinateType const&>,std::tuple<>>((uint64_t **)(v141 + 88), 8u, &__p)+ 8);
        __dmb(0xBu);
        atomic_store(1u, (unsigned __int8 *)(v141 + 112));
        goto LABEL_220;
      }
      float v21 = v20 * a8;
      if (*((_DWORD *)this + 19))
      {
        if (*((unsigned char *)this + 16))
        {
          if (*((void *)this + 89))
          {
            float v22 = *((float *)this + 15);
            float v23 = *((float *)this + 16);
            float v24 = *((float *)this + 17);
            if (v22 >= v23) {
              float v25 = *((float *)this + 15);
            }
            else {
              float v25 = *((float *)this + 16);
            }
            if (v25 >= v24) {
              float v26 = v25;
            }
            else {
              float v26 = *((float *)this + 17);
            }
            if (*((unsigned char *)this + 320) || *((unsigned char *)this + 17))
            {
              *((unsigned char *)this + 320) = 0;
              uint64_t v27 = (unsigned char *)*((void *)this + 86);
              if (v27 && v27[208])
              {
                BOOL v28 = fabsf(*((float *)this + 49)) >= 0.00000011921
                   || fabsf(*((float *)this + 50)) >= 0.00000011921
                   || fabsf(*((float *)this + 51)) >= 0.00000011921;
                (*(void (**)(unsigned char *, BOOL))(*(void *)v27 + 56))(v27, fabsf(v26) >= 0.00000011921);
                SourceExtentProcessor::updateExtentParameters(*((SourceExtentProcessor **)this + 86), v26, v26);
                (*(void (**)(void, void, BOOL))(**((void **)this + 86) + 40))(*((void *)this + 86), *((unsigned __int8 *)this + 17), v28);
                float v22 = *((float *)this + 15);
                float v23 = *((float *)this + 16);
                float v24 = *((float *)this + 17);
              }
              *((float *)this + 49) = v22;
              *((float *)this + 50) = v23;
              *((float *)this + 51) = v24;
            }
            uint64_t v53 = *((void *)this + 86);
            if (v53 && *(unsigned char *)(v53 + 208))
            {
              if (*(_DWORD *)(v53 + 212)) {
                BOOL v54 = 1;
              }
              else {
                BOOL v54 = *(unsigned __int8 *)(v53 + 209) != 0;
              }
            }
            else
            {
              BOOL v54 = 0;
            }
            uint64_t v55 = *((void *)this + 44);
            if (v55)
            {
              unsigned int v56 = atomic_load((unsigned int *)(v55 + 148));
              float v57 = (float)(v56 + 55);
            }
            else
            {
              float v57 = 55.0;
            }
            IR::DelayLine::setDelay(*((void *)this + 89), v57);
            int v58 = (IR::DelayLine *)*((void *)this + 89);
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)*a5;
            IR::DelayLine::process(v58, (const float *)a2, (float **)&__p, a7);
            float v59 = *((float *)this + 21);
            float v60 = 90.0;
            if (v59 <= 90.0) {
              float v60 = *((float *)this + 21);
            }
            if (v59 >= 0.0) {
              float v61 = v60;
            }
            else {
              float v61 = 0.0;
            }
            float v62 = *((float *)this + 12);
            float v63 = 180.0 - v62;
            float v64 = -180.0 - v62;
            if (v62 >= -90.0) {
              float v64 = *((float *)this + 12);
            }
            if (v62 <= 90.0) {
              float v63 = v64;
            }
            float v65 = v63 / v61;
            if (v63 <= (float)-v61) {
              float v65 = -1.0;
            }
            float v66 = *((float *)this + 14);
            BOOL v67 = v63 > (float)-v61 || v63 < v61;
            if (v67) {
              float v68 = 1.0;
            }
            else {
              float v68 = 0.0;
            }
            if (v63 < v61) {
              float v69 = v65;
            }
            else {
              float v69 = v68;
            }
            float v70 = cosf(*((float *)this + 13) * 0.017453) * v69;
            if (v66 <= 1.0) {
              float v71 = v66;
            }
            else {
              float v71 = 1.0;
            }
            if (v66 < 0.0) {
              float v71 = 0.0;
            }
            __float2 v72 = __sincosf_stret((float)((float)(v71 * v70) + 1.0) * 0.7854);
            uint64_t v73 = 0;
            *((float *)this + 174) = v72.__cosval * v21;
            *((float *)this + 175) = v72.__sinval * v21;
            char v74 = 1;
            do
            {
              char v75 = v74;
              uint64_t v76 = (float *)((char *)this + 4 * v73 + 696);
              float v77 = *v76;
              if (*v76 <= 0.00001)
              {
                *uint64_t v76 = 0.0;
                float v77 = 0.0;
              }
              uint64_t v78 = *a5;
              if (v54)
              {
                __p.__r_.__value_.__r.__words[0] = *(void *)(*((void *)this + 60) + 24);
                (*(void (**)(void, const float *, std::string *, uint64_t, uint64_t, vDSP_Length, void, float))(**((void **)this + 86) + 8))(*((void *)this + 86), v78, &__p, v73, 1, a7, *((unsigned int *)this + 81), 1.0);
                (*(void (**)(void, const float *, std::string::size_type, uint64_t, void, vDSP_Length))(**((void **)this + 86) + 24))(*((void *)this + 86), v78, __p.__r_.__value_.__r.__words[0], v73, 0, a7);
                uint64_t v78 = (const float *)__p.__r_.__value_.__r.__words[0];
                float v77 = *v76;
              }
              if (*((unsigned char *)this + 17) || (v79 = (float *)((char *)this + 4 * v73), float v80 = v79[176], v77 == v80))
              {
                if (v77 != 0.0) {
                  vDSP_vsma(v78, 1, (const float *)this + v73 + 174, a3[v73], 1, a3[v73], 1, a7);
                }
              }
              else
              {
                *(float *)&__p.__r_.__value_.__l.__data_ = (float)(v77 - v80) / (float)a7;
                vDSP_vrampmuladd(v78, 1, v79 + 176, (const float *)&__p, a3[v73], 1, a7);
              }
              char v74 = 0;
              *((float *)this + v73 + 176) = *v76;
              uint64_t v73 = 1;
            }
            while ((v75 & 1) != 0);
LABEL_187:
            if (v54) {
              (*(void (**)(void, vDSP_Length))(**((void **)this + 86) + 48))(*((void *)this + 86), a7);
            }
            unsigned int v230 = 0;
            *((unsigned char *)this + 17) = 0;
            goto LABEL_190;
          }
LABEL_60:
          int v46 = -10851;
LABEL_73:
          unsigned int v230 = v46;
          goto LABEL_190;
        }
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        long long v40 = getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
        {
          std::string::basic_string[abi:ne180100]<0>(&v237, "HRTFNFSpatializer");
          unint64_t v41 = std::string::append(&v237, "::", 2uLL);
          long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
          v238.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v42;
          v41->__r_.__value_.__l.__size_ = 0;
          v41->__r_.__value_.__r.__words[2] = 0;
          v41->__r_.__value_.__r.__words[0] = 0;
          uint64_t v43 = std::string::append(&v238, "processAccumulatingStereo", 0x19uLL);
          long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v44;
          v43->__r_.__value_.__l.__size_ = 0;
          v43->__r_.__value_.__r.__words[2] = 0;
          v43->__r_.__value_.__r.__words[0] = 0;
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)int buf = 136315138;
          int v240 = p_p;
LABEL_368:
          _os_log_debug_impl(&dword_1BB0CE000, v40, OS_LOG_TYPE_DEBUG, "%s: ERROR: not initialized", buf, 0xCu);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v238.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v237.__r_.__value_.__l.__data_);
          }
        }
      }
      else
      {
        if (*((unsigned char *)this + 16))
        {
          if (*((void *)this + 89))
          {
            float v33 = *((float *)this + 15);
            float v34 = *((float *)this + 16);
            float v35 = *((float *)this + 17);
            if (v33 >= v34) {
              float v36 = *((float *)this + 15);
            }
            else {
              float v36 = *((float *)this + 16);
            }
            if (v36 >= v35) {
              float v37 = v36;
            }
            else {
              float v37 = *((float *)this + 17);
            }
            if (*((unsigned char *)this + 320) || *((unsigned char *)this + 17))
            {
              *((unsigned char *)this + 320) = 0;
              long long v38 = (unsigned char *)*((void *)this + 86);
              if (v38 && v38[208])
              {
                BOOL v39 = fabsf(*((float *)this + 49)) >= 0.00000011921
                   || fabsf(*((float *)this + 50)) >= 0.00000011921
                   || fabsf(*((float *)this + 51)) >= 0.00000011921;
                (*(void (**)(unsigned char *, BOOL))(*(void *)v38 + 56))(v38, fabsf(v37) >= 0.00000011921);
                SourceExtentProcessor::updateExtentParameters(*((SourceExtentProcessor **)this + 86), v37, v37);
                (*(void (**)(void, void, BOOL))(**((void **)this + 86) + 40))(*((void *)this + 86), *((unsigned __int8 *)this + 17), v39);
                float v33 = *((float *)this + 15);
                float v34 = *((float *)this + 16);
                float v35 = *((float *)this + 17);
              }
              *((float *)this + 49) = v33;
              *((float *)this + 50) = v34;
              *((float *)this + 51) = v35;
            }
            uint64_t v81 = *((void *)this + 86);
            if (v81 && *(unsigned char *)(v81 + 208))
            {
              if (*(_DWORD *)(v81 + 212)) {
                BOOL v54 = 1;
              }
              else {
                BOOL v54 = *(unsigned __int8 *)(v81 + 209) != 0;
              }
            }
            else
            {
              BOOL v54 = 0;
            }
            uint64_t v82 = *((void *)this + 44);
            if (v82)
            {
              unsigned int v83 = atomic_load((unsigned int *)(v82 + 148));
              float v84 = (float)(v83 + 55);
            }
            else
            {
              float v84 = 55.0;
            }
            IR::DelayLine::setDelay(*((void *)this + 89), v84);
            __int16 v85 = (IR::DelayLine *)*((void *)this + 89);
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)*a5;
            IR::DelayLine::process(v85, (const float *)a2, (float **)&__p, a7);
            float v86 = *((float *)this + 13);
            float v87 = *((float *)this + 14);
            __float2 v88 = __sincosf_stret(*((float *)this + 12) * 0.017453);
            __float2 v89 = __sincosf_stret(v86 * 0.017453);
            float v90 = v88.__sinval * (float)(v87 * v89.__cosval);
            float v91 = v88.__cosval * (float)(v87 * v89.__cosval);
            float v92 = v87 * v89.__sinval;
            if (v37 <= 1.0) {
              float v93 = v37;
            }
            else {
              float v93 = 1.0;
            }
            float v94 = 0.0;
            if (v37 >= 0.0) {
              float v95 = v93;
            }
            else {
              float v95 = 0.0;
            }
            if (v90 <= 1.0) {
              float v96 = v88.__sinval * (float)(v87 * v89.__cosval);
            }
            else {
              float v96 = 1.0;
            }
            if (v90 >= -1.0) {
              float v97 = v96;
            }
            else {
              float v97 = -1.0;
            }
            if (v91 <= 1.0) {
              float v98 = v88.__cosval * (float)(v87 * v89.__cosval);
            }
            else {
              float v98 = 1.0;
            }
            if (v91 >= -1.0) {
              float v99 = v98;
            }
            else {
              float v99 = -1.0;
            }
            if (v92 <= 1.0) {
              float v100 = v92;
            }
            else {
              float v100 = 1.0;
            }
            if (v92 >= 0.0) {
              float v101 = v100;
            }
            else {
              float v101 = 0.0;
            }
            if (v95 == 0.0)
            {
              if (v97 >= -1.0) {
                float v94 = (float)((float)(v97 + 1.0) * 0.5) * 1.5708;
              }
              __float2 v102 = __sincosf_stret(v94);
              float sinval = v102.__sinval;
              float cosval = v102.__cosval;
              float v105 = v20 * a8;
            }
            else if (v95 >= 0.25)
            {
              __p.__r_.__value_.__r.__words[0] = __PAIR64__(LODWORD(v101), LODWORD(v95));
              __p.__r_.__value_.__l.__size_ = __PAIR64__(LODWORD(v97), LODWORD(v99));
              float v105 = v20 * a8;
              LODWORD(cosval) = BCMBypassedStereo::panWithSize((float *)&__p).u32[0];
              float sinval = v111;
            }
            else
            {
              float v106 = (float)((float)(v97 + 1.0) * 0.5) * 1.5708;
              if (v97 < -1.0) {
                float v106 = 0.0;
              }
              __float2 v107 = __sincosf_stret(v106);
              LODWORD(__p.__r_.__value_.__l.__data_) = 1048576000;
              *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = __PAIR64__(LODWORD(v99), LODWORD(v101));
              *((float *)&__p.__r_.__value_.__r.__words[1] + 1) = v97;
              float v108 = BCMBypassedStereo::panWithSize((float *)&__p).f32[0];
              float v105 = v20 * a8;
              float v109 = 1.0 - (float)(v95 * 4.0);
              float cosval = sqrtf((float)((float)(v95 * 4.0) * (float)(v108 * v108))+ (float)((float)(v107.__cosval * v107.__cosval) * v109));
              float sinval = sqrtf((float)((float)(v95 * 4.0) * (float)(v110 * v110))+ (float)((float)(v107.__sinval * v107.__sinval) * v109));
            }
            uint64_t v112 = 0;
            float v113 = 1.0 / hypotf(cosval, sinval);
            *((float *)this + 174) = (float)(cosval * v113) * v105;
            *((float *)this + 175) = (float)(sinval * v113) * v105;
            char v114 = 1;
            do
            {
              char v115 = v114;
              int v116 = (float *)((char *)this + 4 * v112 + 696);
              float v117 = *v116;
              if (*v116 <= 0.00001)
              {
                float *v116 = 0.0;
                float v117 = 0.0;
              }
              vDSP_Length v118 = *a5;
              if (v54)
              {
                __p.__r_.__value_.__r.__words[0] = *(void *)(*((void *)this + 60) + 24);
                (*(void (**)(void, const float *, std::string *, uint64_t, uint64_t, vDSP_Length, void, float))(**((void **)this + 86) + 8))(*((void *)this + 86), v118, &__p, v112, 1, a7, *((unsigned int *)this + 81), 1.0);
                (*(void (**)(void, const float *, std::string::size_type, uint64_t, void, vDSP_Length))(**((void **)this + 86) + 24))(*((void *)this + 86), v118, __p.__r_.__value_.__r.__words[0], v112, 0, a7);
                vDSP_Length v118 = (const float *)__p.__r_.__value_.__r.__words[0];
                float v117 = *v116;
              }
              if (*((unsigned char *)this + 17) || (int64_t v119 = (float *)((char *)this + 4 * v112), v120 = v119[176], v117 == v120))
              {
                if (v117 != 0.0) {
                  vDSP_vsma(v118, 1, (const float *)this + v112 + 174, a3[v112], 1, a3[v112], 1, a7);
                }
              }
              else
              {
                *(float *)&__p.__r_.__value_.__l.__data_ = (float)(v117 - v120) / (float)a7;
                vDSP_vrampmuladd(v118, 1, v119 + 176, (const float *)&__p, a3[v112], 1, a7);
              }
              char v114 = 0;
              *((float *)this + v112 + 176) = *v116;
              uint64_t v112 = 1;
            }
            while ((v115 & 1) != 0);
            goto LABEL_187;
          }
          goto LABEL_60;
        }
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        long long v40 = getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
        {
          std::string::basic_string[abi:ne180100]<0>(&v237, "HRTFNFSpatializer");
          float v223 = std::string::append(&v237, "::", 2uLL);
          long long v224 = *(_OWORD *)&v223->__r_.__value_.__l.__data_;
          v238.__r_.__value_.__r.__words[2] = v223->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v224;
          v223->__r_.__value_.__l.__size_ = 0;
          v223->__r_.__value_.__r.__words[2] = 0;
          v223->__r_.__value_.__r.__words[0] = 0;
          v225 = std::string::append(&v238, "processAccumulatingBCMStereo", 0x1CuLL);
          long long v226 = *(_OWORD *)&v225->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v225->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v226;
          v225->__r_.__value_.__l.__size_ = 0;
          v225->__r_.__value_.__r.__words[2] = 0;
          v225->__r_.__value_.__r.__words[0] = 0;
          int v227 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            int v227 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)int buf = 136315138;
          int v240 = v227;
          goto LABEL_368;
        }
      }
      int v46 = -10867;
      goto LABEL_73;
    }
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    int v32 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      std::string::basic_string[abi:ne180100]<0>(&v237, "HRTFNFSpatializer");
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("::", &v237, &v238);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("processAccumulating", &v238, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v52 = &__p;
      }
      else {
        long long v52 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)int buf = 136315138;
      int v240 = v52;
      _os_log_debug_impl(&dword_1BB0CE000, v32, OS_LOG_TYPE_DEBUG, "%s: ERROR: not initialized", buf, 0xCu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v238.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v237.__r_.__value_.__l.__data_);
      }
    }
    return 4294956429;
  }
  else
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    float v30 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      std::string::basic_string[abi:ne180100]<0>(&v237, "HRTFNFSpatializer");
      std::string v47 = std::string::append(&v237, "::", 2uLL);
      long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
      v238.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v48;
      v47->__r_.__value_.__l.__size_ = 0;
      v47->__r_.__value_.__r.__words[2] = 0;
      v47->__r_.__value_.__r.__words[0] = 0;
      CFTypeRef v49 = std::string::append(&v238, "processAccumulating", 0x13uLL);
      long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v50;
      v49->__r_.__value_.__l.__size_ = 0;
      v49->__r_.__value_.__r.__words[2] = 0;
      v49->__r_.__value_.__r.__words[0] = 0;
      long long v51 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        long long v51 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)int buf = 136315394;
      int v240 = v51;
      __int16 v241 = 1024;
      int v242 = a4;
      _os_log_debug_impl(&dword_1BB0CE000, v30, OS_LOG_TYPE_DEBUG, "%s: ERROR: wrong number of output channels %d", buf, 0x12u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v238.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v237.__r_.__value_.__l.__data_);
      }
    }
    return 4294956445;
  }
}

void sub_1BB4A0FAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  __cxa_free_exception(v33);
  _Unwind_Resume(a1);
}

void HRTFNFSpatializer::reset(IR::DynamicIRProcessor **this)
{
  IR::DynamicIRProcessor::reset(this[44]);
  uint64_t v2 = this[86];
  if (v2) {
    (*(void (**)(IR::DynamicIRProcessor *, uint64_t))(*(void *)v2 + 32))(v2, 1);
  }
  int v3 = this[45];
  if (v3) {
    (*(void (**)(IR::DynamicIRProcessor *, uint64_t))(*(void *)v3 + 32))(v3, 1);
  }
  uint64_t v4 = (IR::DelayLine **)this[46];
  int v5 = (IR::DelayLine **)this[47];
  while (v4 != v5)
  {
    if (*v4) {
      IR::DelayLine::reset(*v4);
    }
    ++v4;
  }
  uint64_t v6 = this[89];
  if (v6) {
    IR::DelayLine::reset(v6);
  }
  *((unsigned char *)this + 17) = 1;
  *((unsigned char *)this + 268) = *((unsigned char *)this + 132);
  *((_DWORD *)this + 168) = -1;
}

void HRTFNFSpatializer::initialize(HRTFNFSpatializer *this, float a2, unsigned int a3, unsigned int a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  *((float *)this + 2) = a2;
  *((_DWORD *)this + 3) = a4;
  *((unsigned char *)this + 669) = *((unsigned char *)this + 668);
  int v8 = (IR::DelayLine **)*((void *)this + 46);
  __int16 v7 = (IR::DelayLine **)*((void *)this + 47);
  if (v7 != v8)
  {
    do
      std::unique_ptr<IR::DelayLine>::reset[abi:ne180100](--v7, 0);
    while (v7 != v8);
    __int16 v7 = (IR::DelayLine **)*((void *)this + 46);
  }
  *((void *)this + 47) = v8;
  uint64_t v9 = *((void *)this + 48);
  if ((unint64_t)(v9 - (void)v7) <= 0xF)
  {
    float v23 = (char *)this + 384;
    int v10 = (char *)operator new(0x10uLL);
    int v11 = &v10[((char *)v8 - (char *)v7) & 0xFFFFFFFFFFFFFFF8];
    if (v8 == v7)
    {
      int64x2_t v14 = vdupq_n_s64((unint64_t)v8);
      int v12 = &v10[((char *)v8 - (char *)v7) & 0xFFFFFFFFFFFFFFF8];
    }
    else
    {
      int v12 = &v10[((char *)v8 - (char *)v7) & 0xFFFFFFFFFFFFFFF8];
      do
      {
        uint64_t v13 = (uint64_t)*--v8;
        void *v8 = 0;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v8 != v7);
      int64x2_t v14 = *((int64x2_t *)this + 23);
      uint64_t v9 = *((void *)this + 48);
    }
    *((void *)this + 46) = v12;
    *((void *)this + 47) = v11;
    *(int64x2_t *)&v21[8] = v14;
    *((void *)this + 48) = v10 + 16;
    uint64_t v22 = v9;
    *(void *)float v21 = v14.i64[0];
    std::__split_buffer<std::unique_ptr<IR::DelayLine>>::~__split_buffer((uint64_t)v21);
  }
  *(_DWORD *)float v21 = 0;
  std::vector<float>::assign((char **)this + 57, 2uLL, v21);
  IR::DynamicIRProcessor::initialize(*((IR::DynamicIRProcessor **)this + 44), a2, a4);
  if (getAUSMV2Log(void)::onceToken != -1) {
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
  }
  CFDictionaryRef v15 = getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    std::string::basic_string[abi:ne180100]<0>(&v24, "HRTFNFSpatializer");
    int v16 = std::string::append(&v24, "::", 2uLL);
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    uint64_t v18 = std::string::append(&v25, "initialize", 0xAuLL);
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    *(void *)&v21[16] = *((void *)&v18->__r_.__value_.__l + 2);
    *(_OWORD *)float v21 = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    float v20 = v21;
    if (v21[23] < 0) {
      float v20 = *(unsigned char **)v21;
    }
    buf[0] = 136315138;
    *(void *)&buf[1] = v20;
    _os_log_debug_impl(&dword_1BB0CE000, v15, OS_LOG_TYPE_DEBUG, "%s: Initializing.", (uint8_t *)buf, 0xCu);
    if ((v21[23] & 0x80000000) != 0) {
      operator delete(*(void **)v21);
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
  }
  if (*((unsigned char *)this + 669)) {
    operator new();
  }
  operator new();
}

void sub_1BB4A1B50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::default_delete<BypassableIRProcessor>::operator()[abi:ne180100](uint64_t a1)
{
  *(void *)a1 = &unk_1F14BECB8;
  uint64_t v2 = (IR::IRDataAttributes *)(a1 + 8);
  uint64_t v4 = (void **)(a1 + 184);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = (void **)(a1 + 160);
  std::vector<std::unique_ptr<IR::IRProcessor>>::__destroy_vector::operator()[abi:ne180100](&v4);
  IR::IRDataAttributes::~IRDataAttributes(v2);
  return MEMORY[0x1C185D370](a1, 0x10E1C40B0B4C639);
}

uint64_t HRTFNFSpatializer::setElevation(uint64_t this, float a2)
{
  *(float *)(this + 52) = a2;
  if (vabds_f32(a2, *(float *)(this + 680)) > 0.2)
  {
    *(float *)(this + 680) = a2;
    *(unsigned char *)(this + 320) = 1;
  }
  return this;
}

uint64_t HRTFNFSpatializer::setAzimuth(uint64_t this, float a2)
{
  *(float *)(this + 48) = a2;
  if (vabds_f32(a2, *(float *)(this + 676)) > 0.2)
  {
    *(float *)(this + 676) = a2;
    *(unsigned char *)(this + 320) = 1;
  }
  return this;
}

double HRTFNFSpatializer::setParams(HRTFNFSpatializer *this, const SpatializerParams *a2)
{
  Spatializer::setParams(this, a2);
  double result = *((double *)this + 6);
  *(double *)((char *)this + 676) = result;
  return result;
}

void HRTFNFSpatializer::~HRTFNFSpatializer(HRTFNFSpatializer *this)
{
  HRTFNFSpatializer::~HRTFNFSpatializer(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;

  *(void *)this = &unk_1F14AF6D0;
  uint64_t v2 = (void *)*((void *)this + 90);
  if (v2)
  {
    *((void *)this + 91) = v2;
    operator delete(v2);
  }
  std::unique_ptr<IR::DelayLine>::reset[abi:ne180100]((IR::DelayLine **)this + 89, 0);
  int v3 = *((void *)this + 86);
  *((void *)this + 86) = 0;
  if (v3) {
    std::default_delete<SourceExtentProcessor>::operator()[abi:ne180100](v3);
  }
  IR::IRDataAttributes::~IRDataAttributes((HRTFNFSpatializer *)((char *)this + 504));
  __int16 v7 = (void **)((char *)this + 480);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v7);
  uint64_t v4 = (void *)*((void *)this + 57);
  if (v4)
  {
    *((void *)this + 58) = v4;
    operator delete(v4);
  }
  std::__optional_destruct_base<IR::FixedIntegerDelay,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 392);
  __int16 v7 = (void **)((char *)this + 368);
  std::vector<std::unique_ptr<IR::DelayLine>>::__destroy_vector::operator()[abi:ne180100](&v7);
  int v5 = *((void *)this + 45);
  *((void *)this + 45) = 0;
  if (v5) {
    std::default_delete<BypassableIRProcessor>::operator()[abi:ne180100](v5);
  }
  uint64_t v6 = *((void *)this + 44);
  *((void *)this + 44) = 0;
  if (v6) {
    std::default_delete<IR::DynamicIRProcessor>::operator()[abi:ne180100](v6);
  }
  Spatializer::~Spatializer(this);
}

uint64_t std::__optional_destruct_base<IR::FixedIntegerDelay,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56))
  {
    uint64_t v2 = *(void **)(a1 + 32);
    if (v2)
    {
      *(void *)(a1 + 40) = v2;
      operator delete(v2);
    }
    int v3 = *(void **)(a1 + 8);
    if (v3)
    {
      *(void *)(a1 + 16) = v3;
      operator delete(v3);
    }
  }
  return a1;
}

void std::default_delete<IR::DynamicIRProcessor>::operator()[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(void **)(a1 + 96));
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
  std::unique_ptr<IR::IRProcessor>::reset[abi:ne180100]((IR::IRProcessor **)(a1 + 48), 0);
  std::unique_ptr<IR::IRProcessor>::reset[abi:ne180100]((IR::IRProcessor **)(a1 + 40), 0);
  std::unique_ptr<IR::IRProcessor>::reset[abi:ne180100]((IR::IRProcessor **)(a1 + 32), 0);
  int v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }

  JUMPOUT(0x1C185D370);
}

IR::DataLoaderSource *std::allocate_shared[abi:ne180100]<IR::DataLoaderSource,std::allocator<IR::DataLoaderSource>,IR::IRDataAttributes const&,void>(IR::DataLoaderSource **a1, const IR::IRDataAttributes *a2)
{
  uint64_t v4 = operator new(0x108uLL);
  v4[1] = 0;
  v4[2] = 0;
  *uint64_t v4 = &unk_1F14BD908;
  double result = IR::DataLoaderSource::DataLoaderSource((IR::DataLoaderSource *)(v4 + 3), a2);
  *a1 = result;
  a1[1] = (IR::DataLoaderSource *)v4;
  return result;
}

void sub_1BB4A2044(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<IR::DynamicIRProcessor,std::shared_ptr<IR::Source> &,IR::DynamicIRProcessor::ConfigParams &,std::shared_ptr<caulk::concurrent::messenger>>()
{
}

void sub_1BB4A2138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MEMORY[0x1C185D370](v10, 0x10A0C402959731ALL);
  _Unwind_Resume(a1);
}

const __CFNumber *applesauce::CF::DictionaryRef_proxy::at_as<float,char const(&)[19]>(const __CFDictionary *a1, char *a2)
{
  CFNumberRef result = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[19]>(a1, a2);
  if (result)
  {
    return (const __CFNumber *)applesauce::CF::convert_as<float,0>(result);
  }
  return result;
}

const __CFNumber *applesauce::CF::DictionaryRef_proxy::at_as<float,char const(&)[13]>(const __CFDictionary *a1, char *a2)
{
  CFNumberRef result = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[13]>(a1, a2);
  if (result)
  {
    return (const __CFNumber *)applesauce::CF::convert_as<float,0>(result);
  }
  return result;
}

void ClosedLoopSpeakerProtectionKernel::LogCoeffs(ClosedLoopSpeakerProtectionKernel *this)
{
  uint64_t v2 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 101);
  if (v2)
  {
    float v3 = *((double *)this + 12);
    float __src = v3;
    clsp::CLSP_Log::LogCLSPData(v2, &__src, 1);
    uint64_t v4 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 101);
    if (v4)
    {
      float __src = *((float *)this + 26);
      clsp::CLSP_Log::LogCLSPData(v4, &__src, 1);
      int v5 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 101);
      if (v5)
      {
        float v6 = *((double *)this + 56);
        float __src = v6;
        clsp::CLSP_Log::LogCLSPData(v5, &__src, 1);
        __int16 v7 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 101);
        if (v7)
        {
          float v8 = *((double *)this + 50);
          float __src = v8;
          clsp::CLSP_Log::LogCLSPData(v7, &__src, 1);
          uint64_t v9 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 101);
          if (v9)
          {
            float v10 = *((double *)this + 51);
            float __src = v10;
            clsp::CLSP_Log::LogCLSPData(v9, &__src, 1);
            int v11 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 101);
            if (v11)
            {
              float v12 = *((double *)this + 52);
              float __src = v12;
              clsp::CLSP_Log::LogCLSPData(v11, &__src, 1);
              uint64_t v13 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 101);
              if (v13)
              {
                float v14 = *((double *)this + 53);
                float __src = v14;
                clsp::CLSP_Log::LogCLSPData(v13, &__src, 1);
                CFDictionaryRef v15 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 101);
                if (v15)
                {
                  float v16 = *((double *)this + 55);
                  float __src = v16;
                  clsp::CLSP_Log::LogCLSPData(v15, &__src, 1);
                  long long v17 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 101);
                  if (v17)
                  {
                    float v18 = *((double *)this + 54);
                    float __src = v18;
                    clsp::CLSP_Log::LogCLSPData(v17, &__src, 1);
                    long long v19 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 101);
                    if (v19)
                    {
                      float v20 = *((double *)this + 49);
                      float __src = v20;
                      clsp::CLSP_Log::LogCLSPData(v19, &__src, 1);
                      float v21 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 101);
                      if (v21)
                      {
                        float v22 = *((double *)this + 57);
                        float __src = v22;
                        clsp::CLSP_Log::LogCLSPData(v21, &__src, 1);
                        float v23 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 101);
                        if (v23)
                        {
                          float v24 = *((double *)this + 43);
                          float __src = v24;
                          clsp::CLSP_Log::LogCLSPData(v23, &__src, 1);
                          std::string v25 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 101);
                          if (v25)
                          {
                            float v26 = *((double *)this + 44);
                            float __src = v26;
                            clsp::CLSP_Log::LogCLSPData(v25, &__src, 1);
                            uint64_t v27 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 101);
                            if (v27)
                            {
                              float __src = *((float *)this + 29);
                              clsp::CLSP_Log::LogCLSPData(v27, &__src, 1);
                              BOOL v28 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 101);
                              if (v28)
                              {
                                float __src = *((float *)this + 30);
                                clsp::CLSP_Log::LogCLSPData(v28, &__src, 1);
                                CFNumberRef v29 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 101);
                                if (v29)
                                {
                                  float v30 = *((double *)this + 45);
                                  float __src = v30;
                                  clsp::CLSP_Log::LogCLSPData(v29, &__src, 1);
                                  unsigned int v31 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 101);
                                  if (v31)
                                  {
                                    float v32 = *((double *)this + 46);
                                    float __src = v32;
                                    clsp::CLSP_Log::LogCLSPData(v31, &__src, 1);
                                    float v33 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 101);
                                    if (v33)
                                    {
                                      float __src = *((float *)this + 41);
                                      clsp::CLSP_Log::LogCLSPData(v33, &__src, 1);
                                      float v34 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 101);
                                      if (v34)
                                      {
                                        float __src = *((float *)this + 42);
                                        clsp::CLSP_Log::LogCLSPData(v34, &__src, 1);
                                        float v35 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22)
                                                                                 + 101);
                                        if (v35)
                                        {
                                          float __src = *((float *)this + 50);
                                          clsp::CLSP_Log::LogCLSPData(v35, &__src, 1);
                                          float v36 = (clsp::CLSP_Log *)*((void *)this
                                                                  + 2 * *((unsigned int *)this + 22)
                                                                  + 101);
                                          if (v36)
                                          {
                                            float v37 = *((double *)this + 47);
                                            float __src = v37;
                                            clsp::CLSP_Log::LogCLSPData(v36, &__src, 1);
                                            long long v38 = (clsp::CLSP_Log *)*((void *)this
                                                                    + 2 * *((unsigned int *)this + 22)
                                                                    + 101);
                                            if (v38)
                                            {
                                              float __src = *((float *)this + 82);
                                              clsp::CLSP_Log::LogCLSPData(v38, &__src, 1);
                                              BOOL v39 = (clsp::CLSP_Log *)*((void *)this
                                                                      + 2 * *((unsigned int *)this + 22)
                                                                      + 101);
                                              if (v39)
                                              {
                                                float __src = *((float *)this + 64);
                                                clsp::CLSP_Log::LogCLSPData(v39, &__src, 1);
                                                long long v40 = (clsp::CLSP_Log *)*((void *)this
                                                                        + 2 * *((unsigned int *)this + 22)
                                                                        + 101);
                                                if (v40)
                                                {
                                                  float __src = *((float *)this + 65);
                                                  clsp::CLSP_Log::LogCLSPData(v40, &__src, 1);
                                                  unint64_t v41 = (clsp::CLSP_Log *)*((void *)this
                                                                          + 2 * *((unsigned int *)this + 22)
                                                                          + 101);
                                                  if (v41)
                                                  {
                                                    float __src = *((float *)this + 66);
                                                    clsp::CLSP_Log::LogCLSPData(v41, &__src, 1);
                                                    long long v42 = (clsp::CLSP_Log *)*((void *)this
                                                                            + 2 * *((unsigned int *)this + 22)
                                                                            + 101);
                                                    if (v42)
                                                    {
                                                      float __src = *((float *)this + 67);
                                                      clsp::CLSP_Log::LogCLSPData(v42, &__src, 1);
                                                      uint64_t v43 = (clsp::CLSP_Log *)*((void *)this
                                                                              + 2 * *((unsigned int *)this + 22)
                                                                              + 101);
                                                      if (v43)
                                                      {
                                                        float __src = *((float *)this + 68);
                                                        clsp::CLSP_Log::LogCLSPData(v43, &__src, 1);
                                                        long long v44 = (clsp::CLSP_Log *)*((void *)this
                                                                                + 2 * *((unsigned int *)this + 22)
                                                                                + 101);
                                                        if (v44)
                                                        {
                                                          float __src = *((float *)this + 37);
                                                          clsp::CLSP_Log::LogCLSPData(v44, &__src, 1);
                                                          int v45 = (clsp::CLSP_Log *)*((void *)this
                                                                                  + 2 * *((unsigned int *)this + 22)
                                                                                  + 101);
                                                          if (v45)
                                                          {
                                                            float __src = *((float *)this + 56);
                                                            clsp::CLSP_Log::LogCLSPData(v45, &__src, 1);
                                                            int v46 = (clsp::CLSP_Log *)*((void *)this
                                                                                    + 2 * *((unsigned int *)this + 22)
                                                                                    + 101);
                                                            if (v46)
                                                            {
                                                              float __src = *((float *)this + 57);
                                                              clsp::CLSP_Log::LogCLSPData(v46, &__src, 1);
                                                              std::string v47 = (clsp::CLSP_Log *)*((void *)this
                                                                                      + 2 * *((unsigned int *)this + 22)
                                                                                      + 101);
                                                              if (v47)
                                                              {
                                                                float __src = *((float *)this + 58);
                                                                clsp::CLSP_Log::LogCLSPData(v47, &__src, 1);
                                                                long long v48 = (clsp::CLSP_Log *)*((void *)this
                                                                                        + 2
                                                                                        * *((unsigned int *)this + 22)
                                                                                        + 101);
                                                                if (v48)
                                                                {
                                                                  float __src = *((float *)this + 60);
                                                                  clsp::CLSP_Log::LogCLSPData(v48, &__src, 1);
                                                                  CFTypeRef v49 = (clsp::CLSP_Log *)*((void *)this
                                                                                          + 2
                                                                                          * *((unsigned int *)this + 22)
                                                                                          + 101);
                                                                  if (v49)
                                                                  {
                                                                    float __src = *((float *)this + 61);
                                                                    clsp::CLSP_Log::LogCLSPData(v49, &__src, 1);
                                                                    long long v50 = (clsp::CLSP_Log *)*((void *)this
                                                                                            + 2
                                                                                            * *((unsigned int *)this + 22)
                                                                                            + 101);
                                                                    if (v50)
                                                                    {
                                                                      float __src = *((float *)this + 62);
                                                                      clsp::CLSP_Log::LogCLSPData(v50, &__src, 1);
                                                                      long long v51 = (clsp::CLSP_Log *)*((void *)this
                                                                                              + 2
                                                                                              * *((unsigned int *)this
                                                                                                + 22)
                                                                                              + 101);
                                                                      if (v51)
                                                                      {
                                                                        float __src = *((float *)this + 59);
                                                                        clsp::CLSP_Log::LogCLSPData(v51, &__src, 1);
                                                                        long long v52 = (clsp::CLSP_Log *)*((void *)this
                                                                                                + 2
                                                                                                * *((unsigned int *)this
                                                                                                  + 22)
                                                                                                + 101);
                                                                        if (v52)
                                                                        {
                                                                          float __src = *((float *)this + 40);
                                                                          clsp::CLSP_Log::LogCLSPData(v52, &__src, 1);
                                                                          uint64_t v53 = (clsp::CLSP_Log *)*((void *)this
                                                                                                  + 2 * *((unsigned int *)this + 22)
                                                                                                  + 101);
                                                                          if (v53)
                                                                          {
                                                                            float __src = *((float *)this + 38);
                                                                            clsp::CLSP_Log::LogCLSPData(v53, &__src, 1);
                                                                            BOOL v54 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 101);
                                                                            if (v54)
                                                                            {
                                                                              float __src = *((float *)this + 39);
                                                                              clsp::CLSP_Log::LogCLSPData(v54, &__src, 1);
                                                                              uint64_t v55 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 101);
                                                                              if (v55)
                                                                              {
                                                                                float __src = *((float *)this + 43);
                                                                                clsp::CLSP_Log::LogCLSPData(v55, &__src, 1);
                                                                                unsigned int v56 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 101);
                                                                                if (v56)
                                                                                {
                                                                                  float __src = *((float *)this + 49);
                                                                                  clsp::CLSP_Log::LogCLSPData(v56, &__src, 1);
                                                                                  float v57 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 101);
                                                                                  if (v57)
                                                                                  {
                                                                                    float __src = *((float *)this + 47);
                                                                                    clsp::CLSP_Log::LogCLSPData(v57, &__src, 1);
                                                                                    int v58 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 101);
                                                                                    if (v58)
                                                                                    {
                                                                                      float __src = *((float *)this + 48);
                                                                                      clsp::CLSP_Log::LogCLSPData(v58, &__src, 1);
                                                                                      float v59 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 101);
                                                                                      if (v59)
                                                                                      {
                                                                                        float __src = *((float *)this + 73);
                                                                                        clsp::CLSP_Log::LogCLSPData(v59, &__src, 1);
                                                                                        float v60 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 101);
                                                                                        if (v60)
                                                                                        {
                                                                                          float __src = *((float *)this + 74);
                                                                                          clsp::CLSP_Log::LogCLSPData(v60, &__src, 1);
                                                                                          float v61 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 101);
                                                                                          if (v61)
                                                                                          {
                                                                                            float __src = *((float *)this + 75);
                                                                                            clsp::CLSP_Log::LogCLSPData(v61, &__src, 1);
                                                                                            float v62 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 101);
                                                                                            if (v62)
                                                                                            {
                                                                                              float __src = *((float *)this + 76);
                                                                                              clsp::CLSP_Log::LogCLSPData(v62, &__src, 1);
                                                                                              float v63 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 101);
                                                                                              if (v63)
                                                                                              {
                                                                                                float __src = *((float *)this + 77);
                                                                                                clsp::CLSP_Log::LogCLSPData(v63, &__src, 1);
                                                                                                float v64 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 101);
                                                                                                if (v64)
                                                                                                {
                                                                                                  float __src = *((float *)this + 32);
                                                                                                  clsp::CLSP_Log::LogCLSPData(v64, &__src, 1);
                                                                                                  float v65 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 101);
                                                                                                  if (v65)
                                                                                                  {
                                                                                                    float __src = *((float *)this + 21);
                                                                                                    clsp::CLSP_Log::LogCLSPData(v65, &__src, 1);
                                                                                                    float v66 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 101);
                                                                                                    if (v66)
                                                                                                    {
                                                                                                      float __src = *((float *)this + 34);
                                                                                                      clsp::CLSP_Log::LogCLSPData(v66, &__src, 1);
                                                                                                      BOOL v67 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 101);
                                                                                                      if (v67)
                                                                                                      {
                                                                                                        float __src = (float)*((unsigned int *)this + 3);
                                                                                                        clsp::CLSP_Log::LogCLSPData(v67, &__src, 1);
                                                                                                        float v68 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 101);
                                                                                                        if (v68)
                                                                                                        {
                                                                                                          float __src = *((float *)this + 5);
                                                                                                          clsp::CLSP_Log::LogCLSPData(v68, &__src, 1);
                                                                                                          float v69 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 101);
                                                                                                          if (v69)
                                                                                                          {
                                                                                                            float __src = *((float *)this + 6);
                                                                                                            clsp::CLSP_Log::LogCLSPData(v69, &__src, 1);
                                                                                                            float v70 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 101);
                                                                                                            if (v70)
                                                                                                            {
                                                                                                              float __src = *((float *)this + 7);
                                                                                                              clsp::CLSP_Log::LogCLSPData(v70, &__src, 1);
                                                                                                              float v71 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 101);
                                                                                                              if (v71)
                                                                                                              {
                                                                                                                float v72 = *((double *)this + 60);
                                                                                                                float __src = v72;
                                                                                                                clsp::CLSP_Log::LogCLSPData(v71, &__src, 1);
                                                                                                                uint64_t v73 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 101);
                                                                                                                if (v73)
                                                                                                                {
                                                                                                                  float v74 = *((double *)this + 58);
                                                                                                                  float __src = v74;
                                                                                                                  clsp::CLSP_Log::LogCLSPData(v73, &__src, 1);
                                                                                                                  char v75 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 101);
                                                                                                                  if (v75)
                                                                                                                  {
                                                                                                                    float v76 = *((double *)this + 61);
                                                                                                                    float __src = v76;
                                                                                                                    clsp::CLSP_Log::LogCLSPData(v75, &__src, 1);
                                                                                                                    float v77 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 101);
                                                                                                                    if (v77)
                                                                                                                    {
                                                                                                                      float v78 = *((double *)this + 59);
                                                                                                                      float __src = v78;
                                                                                                                      clsp::CLSP_Log::LogCLSPData(v77, &__src, 1);
                                                                                                                      uint64_t v79 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 101);
                                                                                                                      if (v79)
                                                                                                                      {
                                                                                                                        float __src = *((float *)this + 9);
                                                                                                                        clsp::CLSP_Log::LogCLSPData(v79, &__src, 1);
                                                                                                                        float v80 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 101);
                                                                                                                        if (v80)
                                                                                                                        {
                                                                                                                          float __src = *((float *)this + 10);
                                                                                                                          clsp::CLSP_Log::LogCLSPData(v80, &__src, 1);
                                                                                                                          uint64_t v81 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 101);
                                                                                                                          if (v81)
                                                                                                                          {
                                                                                                                            float __src = *((float *)this + 8);
                                                                                                                            clsp::CLSP_Log::LogCLSPData(v81, &__src, 1);
                                                                                                                            uint64_t v82 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 101);
                                                                                                                            if (v82)
                                                                                                                            {
                                                                                                                              float __src = *((float *)this + 12);
                                                                                                                              clsp::CLSP_Log::LogCLSPData(v82, &__src, 1);
                                                                                                                              unsigned int v83 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 101);
                                                                                                                              if (v83)
                                                                                                                              {
                                                                                                                                float __src = *((float *)this + 13);
                                                                                                                                clsp::CLSP_Log::LogCLSPData(v83, &__src, 1);
                                                                                                                                float v84 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 101);
                                                                                                                                if (v84)
                                                                                                                                {
                                                                                                                                  float __src = *((float *)this + 11);
                                                                                                                                  clsp::CLSP_Log::LogCLSPData(v84, &__src, 1);
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void ClosedLoopSpeakerProtectionKernel::PrintCoeffs(ClosedLoopSpeakerProtectionKernel *this, uint64_t a2, const char *a3)
{
  uint64_t v4 = (clsp::CLSP_Log *)(*((_DWORD *)this + 211) & 1);
  double v5 = *((float *)this + 12);
  double v6 = *((float *)this + 13);
  double v7 = *((float *)this + 5);
  double v8 = *((float *)this + 32);
  clsp::CLSP_Log::printToSyslog(v4, "ClosedLoopSpeakerProtectionKernel coeffs Ch %u:\n at1C=%f;\n"
    " at2C=%f;\n"
    " csigma=%f;\n"
    " bt0C=%f;\n"
    " bt1C=%f;\n"
    " bt2C=%f;\n"
    " ca10=%f;\n"
    " ca11=%f;\n"
    " ca12=%f;\n"
    " ca20=%f;\n"
    " ca21=%f;\n"
    " ca22=%f;\n"
    " xUL=%f;\n"
    " sze0=%f;\n"
    " at1A=%f;\n"
    " at2A=%f;\n"
    " szc0=%f;\n"
    " at1B=%f;\n"
    " at2B=%f;\n"
    " ptp.ap1=%f;\n"
    " ptp.ap1a=%f;\n"
    " ptp.xlim=%f;\n"
    " flvavg=%f;\n"
    "Thermal Coeffs:\n"
    " AmbTemp=%f;\n"
    " th_ag=%f;\n"
    " invRt=%f;\n"
    " thermAtk=%f;\n"
    " thermRel=%f;\n"
    " th_ac1=%f;\n"
    " th_bc0=%f;\n"
    " th_bc1=%f;\n"
    " th_am1=%f;\n"
    " th_bm0=%f;\n"
    " th_bm1=%f;\n"
    " ThermalPeriod=%u;\n"
    " invThermalPeriod=%f;\n"
    " ThermalLim=%f;\n"
    " HardTempLimHR=%f;\n"
    " Thermal_kI=%f;\n"
    " ",
    a3,
    *((unsigned int *)this + 22),
    *((float *)this + 64),
    *((float *)this + 65),
    *((float *)this + 37),
    *((float *)this + 66),
    *((float *)this + 67),
    *((float *)this + 68),
    *((float *)this + 56),
    *((float *)this + 57),
    *((float *)this + 58),
    *((float *)this + 60),
    *((float *)this + 61),
    *((float *)this + 62),
    *((float *)this + 59),
    *((float *)this + 40),
    *((float *)this + 38),
    *((float *)this + 39),
    *((float *)this + 49),
    *((float *)this + 47),
    *((float *)this + 48),
    *((float *)this + 41),
    *((float *)this + 42),
    *((float *)this + 43),
    *((float *)this + 82),
    *((float *)this + 21),
    *((float *)this + 6),
    *((float *)this + 7),
    *((float *)this + 29),
    *((float *)this + 30),
    *((float *)this + 8),
    *((float *)this + 9),
    *((float *)this + 10),
    *((float *)this + 11),
    *(void *)&v5,
    *(void *)&v6,
    *((unsigned int *)this + 3),
    *(void *)&v7,
    *(void *)&v8,
    *((float *)this + 33),
    *((float *)this + 34),
    *((float *)this + 68),
    *((float *)this + 67),
    *((float *)this + 66),
    *((float *)this + 37),
    *((float *)this + 65),
    *((float *)this + 64));
}

uint64_t ClosedLoopSpeakerProtectionKernel::ZapBadValues(uint64_t this)
{
  float32x2_t v1 = *(float32x2_t *)(this + 256);
  float64x2_t v2 = vcvtq_f64_f32(vabs_f32(v1));
  float64x2_t v3 = (float64x2_t)vdupq_n_s64(0x3CD203AF9EE75616uLL);
  float64x2_t v4 = (float64x2_t)vdupq_n_s64(0x430C6BF526340000uLL);
  *(int8x8_t *)(this + 256) = vand_s8((int8x8_t)v1, (int8x8_t)vmovn_s64((int64x2_t)vandq_s8((int8x16_t)vcgtq_f64(v2, v3), (int8x16_t)vcgtq_f64(v4, v2))));
  float32x4_t v5 = *(float32x4_t *)(this + 276);
  float32x4_t v6 = vabsq_f32(v5);
  float64x2_t v7 = vcvt_hight_f64_f32(v6);
  float64x2_t v8 = vcvtq_f64_f32(*(float32x2_t *)v6.f32);
  *(int8x16_t *)(this + 276) = vandq_s8((int8x16_t)v5, (int8x16_t)vuzp1q_s32((int32x4_t)vandq_s8((int8x16_t)vcgtq_f64(v8, v3), (int8x16_t)vcgtq_f64(v4, v8)), (int32x4_t)vandq_s8((int8x16_t)vcgtq_f64(v7, v3), (int8x16_t)vcgtq_f64(v4, v7))));
  v5.i64[0] = *(void *)(this + 176);
  float64x2_t v9 = vcvtq_f64_f32(vabs_f32(*(float32x2_t *)v5.f32));
  *(int8x8_t *)(this + 176) = vand_s8(*(int8x8_t *)v5.f32, (int8x8_t)vmovn_s64((int64x2_t)vandq_s8((int8x16_t)vcgtq_f64(v9, v3), (int8x16_t)vcgtq_f64(v4, v9))));
  float v10 = *(float *)(this + 184);
  double v11 = fabsf(v10);
  if (v11 >= 1.0e15 || v11 <= 1.0e-15) {
    float v10 = 0.0;
  }
  *(float *)(this + 184) = v10;
  float32x2_t v13 = *(float32x2_t *)(this + 212);
  float64x2_t v14 = vcvtq_f64_f32(vabs_f32(v13));
  *(int8x8_t *)(this + 212) = vand_s8((int8x8_t)v13, (int8x8_t)vmovn_s64((int64x2_t)vandq_s8((int8x16_t)vcgtq_f64(v14, v3), (int8x16_t)vcgtq_f64(v4, v14))));
  float v15 = *(float *)(this + 220);
  double v16 = fabsf(v15);
  if (v16 >= 1.0e15 || v16 <= 1.0e-15) {
    float v15 = 0.0;
  }
  *(float *)(this + 220) = v15;
  float v19 = *(float *)(this + 56);
  float v18 = *(float *)(this + 60);
  double v20 = fabsf(v19);
  if (v20 >= 1.0e15 || v20 <= 1.0e-15) {
    float v19 = 0.0;
  }
  *(float *)(this + 56) = v19;
  if (v18 < 0.0 || v18 > 1000.0 || (float v22 = *(float *)(this + 64), v22 < 0.0) || v22 > 1000.0)
  {
    float32x2_t v23 = vcvt_f32_f64(*(float64x2_t *)(this + 464));
    *(float32x2_t *)(this + 60) = vdiv_f32(vmul_n_f32(v23, *(float *)(this + 128) - *(float *)(this + 84)), (float32x2_t)vdup_lane_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v23, 1), v23), 0));
  }
  float32x2_t v24 = *(float32x2_t *)(this + 68);
  float64x2_t v25 = vcvtq_f64_f32(vabs_f32(v24));
  float64x2_t v26 = (float64x2_t)vdupq_n_s64(0x3CD203AF9EE75616uLL);
  float64x2_t v27 = (float64x2_t)vdupq_n_s64(0x430C6BF526340000uLL);
  *(int8x8_t *)(this + 68) = vand_s8((int8x8_t)v24, (int8x8_t)vmovn_s64((int64x2_t)vandq_s8((int8x16_t)vcgtq_f64(v25, v26), (int8x16_t)vcgtq_f64(v27, v25))));
  float v28 = *(float *)(this + 76);
  double v29 = fabsf(v28);
  if (v29 >= 1.0e15 || v29 <= 1.0e-15) {
    float v28 = 0.0;
  }
  *(float *)(this + 76) = v28;
  float v31 = *(float *)(this + 144);
  double v32 = fabsf(v31);
  if (v32 >= 1.0e15 || v32 <= 1.0e-15) {
    float v31 = 0.0;
  }
  *(float *)(this + 144) = v31;
  double v34 = fabsf(*(float *)(this + 108));
  if (v34 >= 1.0e15 || v34 <= 1.0e-15) {
    float v36 = 0.0;
  }
  else {
    float v36 = *(float *)(this + 108);
  }
  *(float *)(this + 108) = v36;
  float32x2_t v37 = *(float32x2_t *)(this + 332);
  float64x2_t v38 = vcvtq_f64_f32(vabs_f32(v37));
  *(int8x8_t *)(this + 332) = vand_s8((int8x8_t)v37, (int8x8_t)vmovn_s64((int64x2_t)vandq_s8((int8x16_t)vcgtq_f64(v38, v26), (int8x16_t)vcgtq_f64(v27, v38))));
  unsigned int v39 = *(_DWORD *)(this + 12);
  if (*(_DWORD *)(this + 8) > v39) {
    *(_DWORD *)(this + 8) = v39;
  }
  return this;
}

void ClosedLoopSpeakerProtectionKernel::CalcSmoothingCoeffs(ClosedLoopSpeakerProtectionKernel *this, double a2, uint64_t a3, const char *a4)
{
  double v6 = *((double *)this + 43);
  double v7 = v6 * a2;
  float v8 = 0.0;
  float v9 = 0.0;
  if (v7 >= 0.00001) {
    float v9 = exp(-4.60517019 / v7);
  }
  *((float *)this + 29) = 1.0 - v9;
  double v10 = *((double *)this + 44);
  if (v10 * a2 >= 0.00001) {
    float v8 = exp(-4.60517019 / (v10 * a2));
  }
  *((float *)this + 30) = 1.0 - v8;
  double v11 = *((double *)this + 45);
  double v12 = 0.0;
  double v13 = 0.0;
  if (v11 * a2 >= 0.00001) {
    double v13 = exp(-4.60517019 / (v11 * a2));
  }
  float v14 = 1.0 - v13;
  *((float *)this + 42) = v14;
  double v15 = *((double *)this + 46);
  if (v15 * a2 >= 0.00001) {
    double v12 = exp(-4.60517019 / (v15 * a2));
  }
  float v16 = 1.0 - v12;
  *((float *)this + 50) = v16;
  *((float *)this + 41) = v16;
  double v17 = *((double *)this + 47);
  float v18 = 0.0;
  if (v17 * a2 >= 0.00001) {
    float v18 = exp(-4.60517019 / (v17 * a2));
  }
  *((float *)this + 82) = 1.0 - v18;
  clsp::CLSP_Log::printToSyslog((clsp::CLSP_Log *)(*((_DWORD *)this + 211) & 1), "CLSPKernel CalcCoeffs atk/rel params Ch %u: ThermalGainAtkTime=%f; ThermalGainRelTime=%f; PeakDispAtkTime=%f; PeakDi"
    "spDecayTime=%f; FeedbackIntTime=%f; ",
    a4,
    *((unsigned int *)this + 22),
    *(void *)&v6,
    *(void *)&v10,
    *(void *)&v11,
    *(void *)&v15,
    *(void *)&v17);
}

uint64_t ClosedLoopSpeakerProtectionKernel::CreateAppropriateLogs(uint64_t result, char a2)
{
  if ((a2 & 4) != 0)
  {
    int v2 = *(_DWORD *)(result + 88);
    float64x2_t v3 = operator new(0x48uLL);
    v3[1] = 0;
    v3[2] = 0;
    *float64x2_t v3 = &unk_1F14C1BF0;
    if (v2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "PredDisp_Data_r");
      clsp::CLSP_Log::CLSP_Log((uint64_t)(v3 + 3), (uint64_t)__p);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "PredDisp_Data");
    clsp::CLSP_Log::CLSP_Log((uint64_t)(v3 + 3), (uint64_t)__p);
  }
  if ((a2 & 0x20) != 0)
  {
    int v4 = *(_DWORD *)(result + 88);
    float32x4_t v5 = operator new(0x48uLL);
    v5[1] = 0;
    v5[2] = 0;
    *float32x4_t v5 = &unk_1F14C1BF0;
    if (v4)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "PredDispMore_Data_r");
      clsp::CLSP_Log::CLSP_Log((uint64_t)(v5 + 3), (uint64_t)__p);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "PredDispMore_Data");
    clsp::CLSP_Log::CLSP_Log((uint64_t)(v5 + 3), (uint64_t)__p);
  }
  if ((a2 & 8) != 0)
  {
    if (*(_DWORD *)(result + 88)) {
      std::allocate_shared[abi:ne180100]<clsp::CLSP_Log,std::allocator<clsp::CLSP_Log>,char const(&)[11],void>((uint64_t)__p, "Reb_Data_r");
    }
    std::allocate_shared[abi:ne180100]<clsp::CLSP_Log,std::allocator<clsp::CLSP_Log>,char const(&)[9],void>((uint64_t)__p, "Reb_Data");
  }
  if ((a2 & 0x10) != 0)
  {
    if (*(_DWORD *)(result + 88)) {
      std::allocate_shared[abi:ne180100]<clsp::CLSP_Log,std::allocator<clsp::CLSP_Log>,char const(&)[11],void>((uint64_t)__p, "CoeffLog_r");
    }
    std::allocate_shared[abi:ne180100]<clsp::CLSP_Log,std::allocator<clsp::CLSP_Log>,char const(&)[9],void>((uint64_t)__p, "CoeffLog");
  }
  return result;
}

void sub_1BB4A3624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v14);
  operator delete(v16);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<clsp::CLSP_Log,std::allocator<clsp::CLSP_Log>,char const(&)[9],void>(uint64_t a1, char *a2)
{
  float64x2_t v3 = operator new(0x48uLL);
  v3[1] = 0;
  v3[2] = 0;
  *float64x2_t v3 = &unk_1F14C1BF0;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  clsp::CLSP_Log::CLSP_Log((uint64_t)(v3 + 3), (uint64_t)__p);
}

void sub_1BB4A3714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<clsp::CLSP_Log,std::allocator<clsp::CLSP_Log>,char const(&)[8],void>(uint64_t a1, char *a2)
{
  float64x2_t v3 = operator new(0x48uLL);
  v3[1] = 0;
  v3[2] = 0;
  *float64x2_t v3 = &unk_1F14C1BF0;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  clsp::CLSP_Log::CLSP_Log((uint64_t)(v3 + 3), (uint64_t)__p);
}

void sub_1BB4A37D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<clsp::CLSP_Log,std::allocator<clsp::CLSP_Log>,char const(&)[10],void>(uint64_t a1, char *a2)
{
  float64x2_t v3 = operator new(0x48uLL);
  v3[1] = 0;
  v3[2] = 0;
  *float64x2_t v3 = &unk_1F14C1BF0;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  clsp::CLSP_Log::CLSP_Log((uint64_t)(v3 + 3), (uint64_t)__p);
}

void sub_1BB4A3894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<clsp::CLSP_Log,std::allocator<clsp::CLSP_Log>,char const(&)[11],void>(uint64_t a1, char *a2)
{
  float64x2_t v3 = operator new(0x48uLL);
  v3[1] = 0;
  v3[2] = 0;
  *float64x2_t v3 = &unk_1F14C1BF0;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  clsp::CLSP_Log::CLSP_Log((uint64_t)(v3 + 3), (uint64_t)__p);
}

void sub_1BB4A3954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<clsp::CLSP_Log>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<clsp::CLSP_Log>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14C1BF0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

void std::__shared_ptr_emplace<clsp::CLSP_Log>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14C1BF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

float ClosedLoopSpeakerProtectionKernel::ProcessIV(ClosedLoopSpeakerProtectionKernel *this, float *a2, __int16 *a3, __int16 *a4)
{
  return NAN;
}

float ClosedLoopSpeakerProtectionKernel::GetThermalTargetGain(ClosedLoopSpeakerProtectionKernel *this, float a2)
{
  float v2 = *((float *)this + 32);
  float v3 = v2 * 0.9;
  if (v2 >= a2)
  {
    if (v3 >= a2)
    {
      *((_DWORD *)this + 36) = 0;
      float result = 1.0;
      goto LABEL_13;
    }
    float v9 = v2 - a2;
    float v10 = (float)(a2 - v3) / (float)((float)(v2 - v3) + (float)(v2 - v3));
    float v11 = v9 / v2;
    float v12 = *((float *)this + 36);
    if (v12 <= v11) {
      float v13 = 0.0;
    }
    else {
      float v13 = v12 - v11;
    }
    *((float *)this + 36) = v13;
    float result = sqrtf((float)(v10 * -0.5) + 1.0) - (float)(v13 * *((float *)this + 34));
    BOOL v8 = result > 0.0;
  }
  else
  {
    float v4 = a2 - v2;
    float v5 = v4 / (float)((float)(v2 - v3) + (float)(v2 - v3));
    float v6 = (float)(v4 / v2) + *((float *)this + 36);
    *((float *)this + 36) = v6;
    float result = 0.0;
    if (v5 >= 0.75) {
      goto LABEL_13;
    }
    float result = sqrtf(0.75 - v5) - (float)(v6 * *((float *)this + 34));
    BOOL v8 = result > 0.0;
  }
  if (!v8) {
    float result = 0.0;
  }
LABEL_13:
  if (result < 0.25) {
    return 0.25;
  }
  return result;
}

float ClosedLoopSpeakerProtectionKernel::GetOLPwr(ClosedLoopSpeakerProtectionKernel *this)
{
  return *((float *)this + 19);
}

float ClosedLoopSpeakerProtectionKernel::GetTemperature(ClosedLoopSpeakerProtectionKernel *this)
{
  return *((float *)this + 35);
}

uint64_t ClosedLoopSpeakerProtectionKernel::Reset(ClosedLoopSpeakerProtectionKernel *this, __n128 a2)
{
  uint64_t v3 = 0;
  *((void *)this + 12) = a2.n128_u64[0];
  *((_DWORD *)this + 36) = 0;
  *((void *)this + 32) = 0;
  *((void *)this + 22) = 0;
  *((_DWORD *)this + 46) = 0;
  *(void *)((char *)this + 212) = 0;
  *((_DWORD *)this + 55) = 0;
  *((_DWORD *)this + 83) = 0;
  *(void *)((char *)this + 284) = 0;
  *(void *)((char *)this + 276) = 0;
  float v4 = *((double *)this + 57);
  *((float *)this + 84) = v4;
  *((_DWORD *)this + 2) = 0;
  *((void *)this + 9) = 0;
  *((_DWORD *)this + 20) = 0;
  *(void *)((char *)this + 508) = 0;
  *((_DWORD *)this + 129) = 0;
  char v5 = 1;
  do
  {
    char v6 = v5;
    double v7 = (char *)this + 16 * v3;
    BOOL v8 = (clsp::CLSP_Log *)*((void *)v7 + 65);
    if (v8) {
      clsp::CLSP_Log::FlushLog(v8);
    }
    float v9 = (clsp::CLSP_Log *)*((void *)v7 + 69);
    if (v9) {
      clsp::CLSP_Log::FlushLog(v9);
    }
    float v10 = (char *)this + 16 * v3;
    float v11 = (clsp::CLSP_Log *)*((void *)v10 + 73);
    if (v11) {
      clsp::CLSP_Log::FlushLog(v11);
    }
    float v12 = (clsp::CLSP_Log *)*((void *)v10 + 77);
    if (v12) {
      clsp::CLSP_Log::FlushLog(v12);
    }
    float v13 = (char *)this + 16 * v3;
    float v14 = (clsp::CLSP_Log *)*((void *)v13 + 81);
    if (v14) {
      clsp::CLSP_Log::FlushLog(v14);
    }
    double v15 = (clsp::CLSP_Log *)*((void *)v13 + 85);
    if (v15) {
      clsp::CLSP_Log::FlushLog(v15);
    }
    float v16 = (char *)this + 16 * v3;
    double v17 = (clsp::CLSP_Log *)*((void *)v16 + 89);
    if (v17) {
      clsp::CLSP_Log::FlushLog(v17);
    }
    float v18 = (clsp::CLSP_Log *)*((void *)v16 + 93);
    if (v18) {
      clsp::CLSP_Log::FlushLog(v18);
    }
    float v19 = (char *)this + 16 * v3;
    double v20 = (clsp::CLSP_Log *)*((void *)v19 + 97);
    if (v20) {
      clsp::CLSP_Log::FlushLog(v20);
    }
    float v21 = (clsp::CLSP_Log *)*((void *)v19 + 101);
    if (v21) {
      clsp::CLSP_Log::FlushLog(v21);
    }
    char v5 = 0;
    uint64_t v3 = 1;
  }
  while ((v6 & 1) != 0);
  *((unsigned char *)this + 840) = 1;
  a2.n128_u64[0] = *((void *)this + 12);
  float v22 = *(uint64_t (**)(ClosedLoopSpeakerProtectionKernel *, __n128))(*(void *)this + 88);

  return v22(this, a2);
}

uint64_t ClosedLoopSpeakerProtectionKernel::Initialize(ClosedLoopSpeakerProtectionKernel *this, double a2)
{
  return (*(uint64_t (**)(double))(*(void *)this + 24))(a2);
}

void ClosedLoopSpeakerProtectionKernel::~ClosedLoopSpeakerProtectionKernel(ClosedLoopSpeakerProtectionKernel *this)
{
  *(void *)this = &unk_1F14AF828;
  for (uint64_t i = 832; i != 800; i -= 16)
  {
    uint64_t v3 = *(std::__shared_weak_count **)((char *)this + i);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  do
  {
    float v4 = *(std::__shared_weak_count **)((char *)this + i);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    i -= 16;
  }
  while (i != 768);
  do
  {
    char v5 = *(std::__shared_weak_count **)((char *)this + i);
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    i -= 16;
  }
  while (i != 736);
  do
  {
    char v6 = *(std::__shared_weak_count **)((char *)this + i);
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    i -= 16;
  }
  while (i != 704);
  do
  {
    double v7 = *(std::__shared_weak_count **)((char *)this + i);
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    i -= 16;
  }
  while (i != 672);
  do
  {
    BOOL v8 = *(std::__shared_weak_count **)((char *)this + i);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    i -= 16;
  }
  while (i != 640);
  do
  {
    float v9 = *(std::__shared_weak_count **)((char *)this + i);
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    i -= 16;
  }
  while (i != 608);
  do
  {
    float v10 = *(std::__shared_weak_count **)((char *)this + i);
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    i -= 16;
  }
  while (i != 576);
  do
  {
    float v11 = *(std::__shared_weak_count **)((char *)this + i);
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    i -= 16;
  }
  while (i != 544);
  do
  {
    float v12 = *(std::__shared_weak_count **)((char *)this + i);
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    i -= 16;
  }
  while (i != 512);
}

float ClosedLoopSpeakerProtectionKernel::GetDisplacementFilterGain(ClosedLoopSpeakerProtectionKernel *this)
{
  float v1 = (*((float *)this + 64) + 1.0 - *((float *)this + 65))
     * *((float *)this + 37)
     * (float)((float)(*((float *)this + 66) + *((float *)this + 67)) + *((float *)this + 68))
     / (1.0 - *((float *)this + 64) - *((float *)this + 65));
  return log10f(v1) * 20.0;
}

uint64_t VoiceProcessorV9::OverrideMiscUseCase(VoiceProcessorV9 *this)
{
  return 0x1766F3234;
}

BOOL VoiceProcessorV9::ShouldUseFullIOCycle(VoiceProcessorV9 *this)
{
  return **((_DWORD **)this + 292) == 1886613611
      || VoiceProcessorV2::GetChatFlavor(this) == 2 && (*((unsigned char *)this + 16608) & 4) != 0
      || *((_DWORD *)this + 19) != 1;
}

BOOL VoiceProcessorV9::ShouldApplyThirdPartyAppTuningOverride(VoiceProcessorV9 *this)
{
  return **((_DWORD **)this + 292) == 1886613611 && !*((_DWORD *)this + 19);
}

uint64_t VoiceProcessorV9::ShouldThirdPartyAppUseFaceTimeDSPAndTuning(VoiceProcessorV9 *this)
{
  return 1;
}

void VoiceProcessorV9::SetupDownlinkBasicAUChain(AUPropertyItem **this)
{
  v9[1] = *MEMORY[0x1E4F143B8];
  VoiceProcessorV7::SetupDownlinkBasicAUChain((VoiceProcessorV7 *)this);
  unint64_t v2 = (unint64_t)this[1112] & 0xFFFFEFF8FFFFFC43;
  this[1112] = (AUPropertyItem *)(v2 | 0x1004000002B8);
  unsigned int v3 = *((_DWORD *)this + 18);
  if (v3 <= 0x34)
  {
    if (((1 << v3) & 0xDE60000000000) != 0)
    {
      if ((0x1FFFE33F3FFEF0uLL >> v3))
      {
        this[1112] = (AUPropertyItem *)(v2 | 0x1001004000002B8);
        LODWORD(v9[0]) = 1;
        AUPropAndParamHelper::AddItemToAUPropsList(this + 1539, 0xFA02u, 0, 0, 4uLL, v9, 1);
        int v8 = 0;
        AUPropAndParamHelper::AddItemToAUPropsList(this + 1539, 0xFA04u, 0, 0, 4uLL, &v8, 1);
        if (this[278]) {
          AUPropAndParamHelper::AddItemToAUPropsList(this + 1539, 0xFA08u, 0, 0, 8uLL, this + 278, 1);
        }
      }
    }
    else
    {
      if (((1 << v3) & 0x198000000000) != 0)
      {
        if (((0x1FFFE33F3FFEF0uLL >> v3) & 1) == 0) {
          return;
        }
        uint64_t v4 = 0x81004000002B8;
      }
      else
      {
        if (((1 << v3) & 0x12000000000000) == 0) {
          return;
        }
        char v5 = _os_feature_enabled_simple_impl();
        uint64_t v6 = *((unsigned int *)this + 18);
        if (v6 == 52) {
          char v7 = v5;
        }
        else {
          char v7 = 0;
        }
        if (v6 <= 0x34 && ((0x1FFFE33F3FFEF0uLL >> v6) & 1) != 0 && (v7 & 1) == 0)
        {
          this[1112] = (AUPropertyItem *)((unint64_t)this[1112] | 0x100000000000000);
          int v8 = 1;
          AUPropAndParamHelper::AddItemToAUPropsList(this + 1539, 0xFA04u, 0, 0, 4uLL, &v8, 1);
          v9[0] = 1;
          AUPropAndParamHelper::AddItemToAUPropsList(this + 1539, 0xFA06u, 0, 0, 8uLL, v9, 1);
          if (this[278]) {
            AUPropAndParamHelper::AddItemToAUPropsList(this + 1539, 0xFA08u, 0, 0, 8uLL, this + 278, 1);
          }
        }
        unint64_t v2 = (unint64_t)this[1112] & 0xFFFFFFF3F9FFFFFFLL;
        uint64_t v4 = 0x804000000;
      }
      this[1112] = (AUPropertyItem *)(v2 | v4);
    }
  }
}

uint64_t VoiceProcessorV9::SetupUplink_NNVI_Multi(uint64_t this, unsigned int a2)
{
  if (a2 >= 2)
  {
    uint64_t v2 = this;
    uint64_t v3 = 25166606;
    if (a2 > 3) {
      uint64_t v3 = 58722078;
    }
    if (a2 == 2) {
      uint64_t v3 = 8388870;
    }
    *(void *)(this + 4664) = *(void *)(this + 4664) & 0xE3FFF7EFBF7FFEF8 | v3 | 0x800001000000001;
    if (*(unsigned char *)(this + 2246))
    {
      this = VoiceProcessorV2::IsDeviceSupportingAdvancedChatFlavors((VoiceProcessorV2 *)this);
      if (this) {
        *(void *)(v2 + 4672) |= 8uLL;
      }
    }
  }
  return this;
}

uint64_t VoiceProcessorV9::SetupUplink_MS(uint64_t this, unsigned int a2)
{
  if (a2 != 1)
  {
    uint64_t v2 = this;
    uint64_t v3 = *(void *)(this + 4664);
    uint64_t v4 = v3 | 0x800101;
    uint64_t v5 = 8388895;
    if (a2 == 3) {
      uint64_t v5 = 8388879;
    }
    uint64_t v6 = v3 | v5;
    if (a2 >= 3)
    {
      BOOL v7 = a2 != 3;
    }
    else
    {
      uint64_t v6 = v3 | 0x800107;
      BOOL v7 = 0;
    }
    BOOL v8 = a2 >= 3;
    if (a2) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = v4;
    }
    if (a2) {
      BOOL v10 = v7;
    }
    else {
      BOOL v10 = 0;
    }
    if (!a2) {
      BOOL v8 = 0;
    }
    unint64_t v11 = v9 & 0xF3FFFFFFBBFFE7FFLL;
    *(void *)(this + 4664) = v11 | 0xC00000004001800;
    if ((*(_DWORD *)(this + 72) - 26) <= 3)
    {
      if (v8) {
        uint64_t v12 = v11 | 0xC00000004001A00;
      }
      else {
        uint64_t v12 = v11 | 0xC00000004001800;
      }
      if (v10) {
        uint64_t v13 = v12 | 0x400;
      }
      else {
        uint64_t v13 = v12;
      }
      *(void *)(this + 4664) = v13 & 0xFFBA6FFFBC7FFFFFLL | 0x45100003800000;
    }
    if (VoiceProcessorV2::GetChatFlavor((VoiceProcessorV2 *)this) == 1
      && (*(unsigned char *)(v2 + 16608) & 2) != 0)
    {
      *(void *)(v2 + 4664) |= 0x8000000000000uLL;
    }
    this = VoiceProcessorV2::GetChatFlavor((VoiceProcessorV2 *)v2);
    if (this == 2 && (*(unsigned char *)(v2 + 16608) & 4) != 0)
    {
      *(void *)(v2 + 4664) |= 0x1000000000000000uLL;
      if (*(unsigned char *)(v2 + 2246))
      {
        this = VoiceProcessorV2::IsDeviceSupportingAdvancedChatFlavors((VoiceProcessorV2 *)this);
        if (this) {
          *(void *)(v2 + 4672) |= 8uLL;
        }
      }
    }
  }
  return this;
}

void VoiceProcessorV9::SetupUplinkPowerWatchAUChain(VoiceProcessorV9 *this)
{
  uint64_t v5 = (char *)this + 4664;
  int v6 = 0;
  std::__fill_n[abi:ne180100]<false,std::__bitset<2ul,72ul>>((uint64_t)&v5);
  *((void *)this + 583) |= 0x8000000010000380;
  uint64_t v2 = *((void *)this + 584);
  *((void *)this + 584) = v2 | 0x21;
  int v3 = *((_DWORD *)this + 571);
  if (v3 == 1 || v3 == -1) {
    *((void *)this + 584) = v2 | 0x25;
  }
}

uint64_t VoiceProcessorV9::Initialize(VoiceProcessorV9 *this)
{
  uint64_t v2 = (BOOL *)this + 17200;
  VoiceProcessorV8::Initialize(this);
  if (*((_DWORD *)this + 3114) == 12) {
    myAllocABLDynamic((const AudioStreamBasicDescription *)((char *)this + 904), *((_DWORD *)v2 + 30) + *((_DWORD *)this + 127), (AudioBufferList **)this + 2220);
  }
  myAllocABLDynamic((const AudioStreamBasicDescription *)((char *)this + 904), 2 * *((_DWORD *)this + 127), (AudioBufferList **)this + 2191);
  int v3 = *((_DWORD *)this + 18);
  if ((v3 - 26) <= 3)
  {
    VoiceProcessorV7::LoadTrimGains(this);
    int v3 = *((_DWORD *)this + 18);
  }
  if ((v3 - 9) < 0xD || (v3 - 26) <= 3)
  {
    myAllocABLDynamic((const AudioStreamBasicDescription *)((char *)this + 904), 2 * *((_DWORD *)this + 127), (AudioBufferList **)this + 2200);
    myAllocABLDynamic((const AudioStreamBasicDescription *)((char *)this + 904), 2 * *((_DWORD *)this + 127), (AudioBufferList **)this + 2201);
    myAllocABLDynamic((const AudioStreamBasicDescription *)((char *)this + 904), 2 * *((_DWORD *)this + 127), (AudioBufferList **)this + 2202);
    myAllocABLDynamic((const AudioStreamBasicDescription *)((char *)this + 904), 2 * *((_DWORD *)this + 127), (AudioBufferList **)this + 2203);
    myAllocABLDynamic((const AudioStreamBasicDescription *)((char *)this + 904), 2 * *((_DWORD *)this + 127), (AudioBufferList **)this + 2204);
    myAllocABLDynamic((const AudioStreamBasicDescription *)((char *)this + 904), 2 * *((_DWORD *)this + 127), (AudioBufferList **)this + 2219);
    uint64_t v4 = (VPTimeFreqConverter *)*((void *)this + 2205);
    if (v4)
    {
      VPTimeFreqConverter::~VPTimeFreqConverter(v4);
      MEMORY[0x1C185D370]();
    }
    VPTimeFreqConverter_Create();
  }
  if ((v3 - 9) <= 0xC) {
    v2[472] = 1;
  }
  *uint64_t v2 = 0;
  uint64_t v5 = (_DWORD *)*((void *)this + 292);
  BOOL v6 = v5 != *((_DWORD **)this + 293) && *v5 == 1886613611;
  unsigned int v7 = *((_DWORD *)this + 18);
  if (v7 <= 0x26)
  {
    if (((1 << v7) & 0x3B00000000) != 0)
    {
      if (v6)
      {
        BOOL v8 = 1;
        goto LABEL_21;
      }
    }
    else if (((1 << v7) & 0x403C000000) != 0)
    {
      BOOL v8 = *((_DWORD *)this + 3114) == 3;
LABEL_21:
      *uint64_t v2 = v8;
    }
  }
  return 0;
}

BOOL VoiceProcessorV9::SupportsSWB(VoiceProcessorV9 *this)
{
  return (*((_DWORD *)this + 18) - 9) < 0xD;
}

uint64_t VoiceProcessorV9::GetVersion(VoiceProcessorV9 *this)
{
  return 9;
}

void VoiceProcessorV9::~VoiceProcessorV9(VoiceProcessorV9 *this)
{
  VoiceProcessorV9::~VoiceProcessorV9(this);

  JUMPOUT(0x1C185D370);
}

{
  void **v2;
  int v3;
  VPTimeFreqConverter *v4;
  VPTimeFreqConverter *v5;
  VPTimeFreqConverter *v6;
  VPTimeFreqConverter *v7;
  std::__shared_weak_count *v8;
  uint64_t vars8;

  *(void *)this = &unk_1F14AF8B8;
  caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::invalidate((uint64_t)this + 16696);
  uint64_t v2 = (void **)*((void *)this + 2221);
  if (v2) {
    vp::CFNotificationDelegate::shutdown(v2);
  }
  myFreeABLDynamic((AudioBufferList **)this + 2191);
  int v3 = *((_DWORD *)this + 18);
  if ((v3 - 9) < 0xD || (v3 - 26) <= 3)
  {
    myFreeABLDynamic((AudioBufferList **)this + 2200);
    myFreeABLDynamic((AudioBufferList **)this + 2201);
    myFreeABLDynamic((AudioBufferList **)this + 2202);
    myFreeABLDynamic((AudioBufferList **)this + 2203);
    myFreeABLDynamic((AudioBufferList **)this + 2204);
    myFreeABLDynamic((AudioBufferList **)this + 2219);
    uint64_t v4 = (VPTimeFreqConverter *)*((void *)this + 2205);
    if (v4)
    {
      VPTimeFreqConverter::~VPTimeFreqConverter(v4);
      MEMORY[0x1C185D370]();
      *((void *)this + 2205) = 0;
    }
    uint64_t v5 = (VPTimeFreqConverter *)*((void *)this + 2206);
    if (v5)
    {
      VPTimeFreqConverter::~VPTimeFreqConverter(v5);
      MEMORY[0x1C185D370]();
      *((void *)this + 2206) = 0;
    }
    BOOL v6 = (VPTimeFreqConverter *)*((void *)this + 2207);
    if (v6)
    {
      VPTimeFreqConverter::~VPTimeFreqConverter(v6);
      MEMORY[0x1C185D370]();
      *((void *)this + 2207) = 0;
    }
    unsigned int v7 = (VPTimeFreqConverter *)*((void *)this + 2208);
    if (v7)
    {
      VPTimeFreqConverter::~VPTimeFreqConverter(v7);
      MEMORY[0x1C185D370]();
      *((void *)this + 2208) = 0;
    }
  }
  if (*((_DWORD *)this + 3114) == 12) {
    myFreeABLDynamic((AudioBufferList **)this + 2220);
  }
  BOOL v8 = (std::__shared_weak_count *)*((void *)this + 2222);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }

  VoiceProcessorV8::~VoiceProcessorV8(this);
}

void *std::__function::__value_func<void ()(__CFDictionary const*)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<VoiceProcessorV9::VoiceProcessorV9(vp::Context const&)::$_0,std::allocator<VoiceProcessorV9::VoiceProcessorV9(vp::Context const&)::$_0>,void ()(__CFDictionary const*)>::operator()(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 8);
  if ((*(unsigned char *)(v1 + 8902) & 0x80) != 0 && (*(unsigned char *)(v1 + 8910) & 0x80) != 0 && *(void *)(v1 + 3944))
  {
    if (FigCaptureSpeakerInterferenceMitigationIsRequired()) {
      float v2 = 1.0;
    }
    else {
      float v2 = 0.0;
    }
    AudioUnitSetParameter(*(AudioUnit *)(v1 + 3944), 5u, 0, 0, v2, 0);
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    int v3 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(4, VPLogScope(void)::scope, 0))
    {
      uint64_t v4 = (*v3 ? *v3 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)int buf = 136315650;
        BOOL v8 = "VoiceProcessor_v9.cpp";
        __int16 v9 = 1024;
        int v10 = 33;
        __int16 v11 = 2048;
        double v12 = v2;
        _os_log_impl(&dword_1BB0CE000, v4, OS_LOG_TYPE_INFO, "%25s:%-5d  <vp> notification: mitigate front camera noise: %f", buf, 0x1Cu);
      }
    }
    uint64_t v5 = *(int **)(v1 + 12624);
    if (v5 && (*(unsigned char *)(v1 + 15961) || *(unsigned char *)(v1 + 15962)))
    {
      if (VPLogScope(void)::once != -1)
      {
        BOOL v6 = *(int **)(v1 + 12624);
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        uint64_t v5 = v6;
      }
      CALegacyLog::log(v5, 4, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v9/VoiceProcessor_v9.cpp", 33, "operator()", "notification: mitigate front camera noise: %f", v2);
    }
  }
}

uint64_t std::__function::__func<VoiceProcessorV9::VoiceProcessorV9(vp::Context const&)::$_0,std::allocator<VoiceProcessorV9::VoiceProcessorV9(vp::Context const&)::$_0>,void ()(__CFDictionary const*)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14AFBD8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<VoiceProcessorV9::VoiceProcessorV9(vp::Context const&)::$_0,std::allocator<VoiceProcessorV9::VoiceProcessorV9(vp::Context const&)::$_0>,void ()(__CFDictionary const*)>::__clone(uint64_t a1)
{
  float result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *float result = &unk_1F14AFBD8;
  result[1] = v3;
  return result;
}

void std::__function::__func<VoiceProcessorV9::VoiceProcessorV9(vp::Context const&)::$_0,std::allocator<VoiceProcessorV9::VoiceProcessorV9(vp::Context const&)::$_0>,void ()(__CFDictionary const*)>::~__func()
{
}

void vp::v9::create(vp::v9 *this, const vp::Context *a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1BB4A4D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  __cxa_free_exception(v20);
  applesauce::CF::StringRef::~StringRef((const void **)&a9);
  float v22 = (std::__shared_weak_count *)*((void *)v19 + 2222);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  VoiceProcessorV8::~VoiceProcessorV8(v19);
  MEMORY[0x1C185D370](v19, 0x10F3C402BD85C83);
  _Unwind_Resume(a1);
}

void VoiceProcessorV2::TryLoadingTuningPlists(VoiceProcessorV2 *this, const char *a2, const char *a3, const char *__s1, unsigned int a5, unsigned int a6, unsigned int a7)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  uint64_t v37 = 0;
  float64x2_t v38 = &v37;
  uint64_t v39 = 0x2000000000;
  uint64_t v40 = 0;
  BOOL v14 = (!__s1 || strcmp(__s1, "gen")) && *((unsigned char *)this + 60) != 0;
  v25[0] = MEMORY[0x1E4F143A8];
  v25[1] = 0x40000000;
  float64x2_t v26 = ___ZN16VoiceProcessorV222TryLoadingTuningPlistsEPKcS1_S1_jjj_block_invoke;
  float64x2_t v27 = &unk_1E623DE18;
  BOOL v36 = v14;
  unsigned int v33 = a5;
  unsigned int v34 = a6;
  unsigned int v35 = a7;
  float v30 = __s1;
  float v31 = a2;
  double v32 = a3;
  float v28 = &v37;
  double v29 = this;
  int v15 = ___ZN16VoiceProcessorV222TryLoadingTuningPlistsEPKcS1_S1_jjj_block_invoke((uint64_t)v25, v62, "ulnk");
  float v16 = (const void *)v38[3];
  if (v16)
  {
    CACFString::operator=((uint64_t)this + 4544, v16);
    CFRelease((CFTypeRef)v38[3]);
    v38[3] = 0;
  }
  int v17 = v26((uint64_t)v25, v62, "dlnk");
  float v18 = (const void *)v38[3];
  if (v18)
  {
    CACFString::operator=((uint64_t)this + 4560, v18);
    CFRelease((CFTypeRef)v38[3]);
    v38[3] = 0;
  }
  if (!(v15 | v17))
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    float v19 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
    {
      double v20 = (*v19 ? *v19 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)v43, a5);
        CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)v42, a6);
        CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)v41, a7);
        float v21 = (void *)((char *)this + 8);
        if (*((char *)this + 31) < 0) {
          float v21 = (void *)*v21;
        }
        *(_DWORD *)int buf = 136317186;
        int v45 = "vpAspen_v2.cpp";
        __int16 v46 = 1024;
        int v47 = 159;
        __int16 v48 = 2080;
        CFTypeRef v49 = v43;
        __int16 v50 = 2080;
        long long v51 = v42;
        __int16 v52 = 2080;
        uint64_t v53 = v41;
        __int16 v54 = 2080;
        uint64_t v55 = v21;
        __int16 v56 = 2080;
        float v57 = a2;
        __int16 v58 = 2080;
        float v59 = a3;
        __int16 v60 = 2080;
        float v61 = v62;
        _os_log_impl(&dword_1BB0CE000, v20, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Tunings loaded successfully for %s-%s-%s! '%s/%s/%s/%s'", buf, 0x58u);
      }
    }
    float v22 = (int *)*((void *)this + 1578);
    if (v22 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      uint64_t v23 = VPLogScope(void)::scope;
      CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)buf, a5);
      CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)v43, a6);
      CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)v42, a7);
      float32x2_t v24 = (char *)this + 8;
      if (*((char *)this + 31) < 0) {
        float32x2_t v24 = *(const char **)v24;
      }
      CALegacyLog::log(v22, 3, v23, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpAspen_v2.cpp", 159, "TryLoadingTuningPlists", "Tunings loaded successfully for %s-%s-%s! '%s/%s/%s/%s'", (const char *)buf, v43, v42, v24, a2, a3, v62);
    }
    *((unsigned char *)this + 4576) = 1;
  }
  _Block_object_dispose(&v37, 8);
}

void sub_1BB4A51BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t ___ZN16VoiceProcessorV222TryLoadingTuningPlistsEPKcS1_S1_jjj_block_invoke(uint64_t a1, char *a2, const char *a3)
{
  v73[19] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 40);
  if (*(unsigned char *)(a1 + 84))
  {
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)buf, *(_DWORD *)(a1 + 72));
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)__s, *(_DWORD *)(a1 + 76));
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)__p, *(_DWORD *)(a1 + 80));
    unsigned int v7 = snprintf(a2, 0x40uLL, "%s-%s-%s-%s");
  }
  else
  {
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)buf, *(_DWORD *)(a1 + 72));
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)__s, *(_DWORD *)(a1 + 76));
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)__p, *(_DWORD *)(a1 + 80));
    unsigned int v7 = snprintf(a2, 0x40uLL, "%s-%s-%s-%s-%s");
  }
  BOOL v8 = (unsigned char *)(v6 + 15961);
  if (v7 >= 0x41)
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    __int16 v9 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      int v10 = (*v9 ? *v9 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        *(void *)&uint8_t buf[4] = "vpAspen_v2.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 117;
        _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> snprintf error", buf, 0x12u);
      }
    }
    __int16 v11 = *(int **)(v6 + 12624);
    if (v11 && (*v8 || *(unsigned char *)(v6 + 15962)))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      CALegacyLog::log(v11, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpAspen_v2.cpp", 117, "TryLoadingTuningPlists_block_invoke", "snprintf error");
    }
    return 0xFFFFFFFFLL;
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)buf);
  CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)__s, *(_DWORD *)(a1 + 72));
  size_t v13 = strlen(__s);
  BOOL v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)__s, v13);
  int v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"-", 1);
  CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)__p, *(_DWORD *)(a1 + 76));
  size_t v16 = strlen((const char *)__p);
  int v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)__p, v16);
  float v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"-", 1);
  CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)&v67, *(_DWORD *)(a1 + 80));
  size_t v19 = strlen((const char *)&v67);
  double v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)&v67, v19);
  float v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"-", 1);
  size_t v22 = strlen(a3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)a3, v22);
  if (*(unsigned char *)(a1 + 84))
  {
    GetHWIdentifierString((uint64_t)__s, *(void *)(v6 + 56));
    int v23 = SBYTE3(v64);
    float32x2_t v24 = *(const char **)__s;
    std::string::basic_string[abi:ne180100]<0>(&v67, "/");
    if (v23 >= 0) {
      float32x2_t v24 = __s;
    }
    size_t v25 = strlen(v24);
    float64x2_t v26 = std::string::insert(&v67, 0, v24, v25);
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    std::string::size_type v69 = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v67.__r_.__value_.__l.__data_);
    }
    if (!BYTE4(v64)) {
      goto LABEL_31;
    }
  }
  else
  {
    float v28 = *(const char **)(a1 + 48);
    std::string::basic_string[abi:ne180100]<0>(__s, "-");
    size_t v29 = strlen(v28);
    float v30 = std::string::insert((std::string *)__s, 0, v28, v29);
    long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    std::string::size_type v69 = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
  }
  if (SBYTE3(v64) < 0) {
    operator delete(*(void **)__s);
  }
LABEL_31:
  if (VPLogScope(void)::once != -1) {
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
  }
  double v32 = (void *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
  {
    unsigned int v33 = (*v32 ? *v32 : MEMORY[0x1E4F14500]);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
    {
      int v34 = SHIBYTE(v69);
      unsigned int v35 = (void **)__p[0];
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&buf[8], &v67);
      BOOL v36 = __p;
      if (v34 < 0) {
        BOOL v36 = v35;
      }
      if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v37 = &v67;
      }
      else {
        uint64_t v37 = (std::string *)v67.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)__s = 136315906;
      *(void *)&__s[4] = "vpAspen_v2.cpp";
      __int16 v61 = 1024;
      int v62 = 126;
      __int16 v63 = 2080;
      float v64 = v36;
      __int16 v65 = 2080;
      float v66 = v37;
      _os_log_impl(&dword_1BB0CE000, v33, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> Trying to load tuning %s%s", __s, 0x26u);
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v67.__r_.__value_.__l.__data_);
      }
    }
  }
  float64x2_t v38 = *(int **)(v6 + 12624);
  if (v38 && (*v8 || *(unsigned char *)(v6 + 15962)))
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    uint64_t v39 = VPLogScope(void)::scope;
    int v40 = SHIBYTE(v69);
    unint64_t v41 = (void **)__p[0];
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&buf[8], __s);
    long long v42 = __p;
    if (v40 < 0) {
      long long v42 = v41;
    }
    if (SBYTE3(v64) >= 0) {
      uint64_t v43 = __s;
    }
    else {
      uint64_t v43 = *(const char **)__s;
    }
    CALegacyLog::log(v38, 5, v39, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpAspen_v2.cpp", 126, "TryLoadingTuningPlists_block_invoke", "Trying to load tuning %s%s", (const char *)v42, v43);
    if (SBYTE3(v64) < 0) {
      operator delete(*(void **)__s);
    }
  }
  uint64_t Tuning = TuningPListMgr::loadTuning(*(void *)(v6 + 2728), *(const char **)(a1 + 56), *(const char **)(a1 + 64), a2, 0);
  if (Tuning)
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    long long v44 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
    {
      int v45 = (*v44 ? *v44 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__s = 136315394;
        *(void *)&__s[4] = "vpAspen_v2.cpp";
        __int16 v61 = 1024;
        int v62 = 132;
        _os_log_impl(&dword_1BB0CE000, v45, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> Couldn't load tuning strip", __s, 0x12u);
      }
    }
    __int16 v46 = *(int **)(v6 + 12624);
    if (v46 && (*v8 || *(unsigned char *)(v6 + 15962)))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      CALegacyLog::log(v46, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpAspen_v2.cpp", 132, "TryLoadingTuningPlists_block_invoke", "Couldn't load tuning strip");
    }
  }
  else
  {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0x8000100u);
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    int v47 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
    {
      __int16 v48 = (*v47 ? *v47 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
      {
        int v49 = SHIBYTE(v69);
        __int16 v50 = (void **)__p[0];
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&buf[8], &v67);
        long long v51 = __p;
        if (v49 < 0) {
          long long v51 = v50;
        }
        if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          __int16 v52 = &v67;
        }
        else {
          __int16 v52 = (std::string *)v67.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)__s = 136315906;
        *(void *)&__s[4] = "vpAspen_v2.cpp";
        __int16 v61 = 1024;
        int v62 = 138;
        __int16 v63 = 2080;
        float v64 = v51;
        __int16 v65 = 2080;
        float v66 = v52;
        _os_log_impl(&dword_1BB0CE000, v48, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> Succesfully loaded tuning strip %s%s", __s, 0x26u);
        if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v67.__r_.__value_.__l.__data_);
        }
      }
    }
    uint64_t v53 = *(int **)(v6 + 12624);
    if (v53 && (*v8 || *(unsigned char *)(v6 + 15962)))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      uint64_t v54 = VPLogScope(void)::scope;
      int v55 = SHIBYTE(v69);
      __int16 v56 = (void **)__p[0];
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&buf[8], __s);
      float v57 = __p;
      if (v55 < 0) {
        float v57 = v56;
      }
      if (SBYTE3(v64) >= 0) {
        __int16 v58 = __s;
      }
      else {
        __int16 v58 = *(const char **)__s;
      }
      CALegacyLog::log(v53, 5, v54, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpAspen_v2.cpp", 138, "TryLoadingTuningPlists_block_invoke", "Succesfully loaded tuning strip %s%s", (const char *)v57, v58);
      if (SBYTE3(v64) < 0) {
        operator delete(*(void **)__s);
      }
    }
  }
  if (SHIBYTE(v69) < 0) {
    operator delete(__p[0]);
  }
  *(void *)int buf = *MEMORY[0x1E4FBA418];
  *(void *)&buf[*(void *)(*(void *)buf - 24)] = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *(void *)&buf[8] = MEMORY[0x1E4FBA470] + 16;
  if (v72 < 0) {
    operator delete(v71);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C185D210](v73);
  return Tuning;
}

void sub_1BB4A5BE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,char a36)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a36);
  _Unwind_Resume(a1);
}

uint64_t CACFString::operator=(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef v4 = *(CFTypeRef *)a1;
  if (v4 != cf)
  {
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 8) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      CFRelease(v4);
    }
    *(void *)a1 = cf;
  }
  *(unsigned char *)(a1 + 8) = 1;
  if (cf) {
    CFRetain(cf);
  }
  return a1;
}

uint64_t TuningPListMgr::loadTuning(uint64_t a1, const char *a2, const char *a3, const char *a4, unsigned int a5)
{
  float v17[3] = *(const __CFString ***)MEMORY[0x1E4F143B8];
  CFStringRef v15 = CFStringCreateWithCString(0, a2, 0x600u);
  char v16 = 1;
  CFStringRef v13 = CFStringCreateWithCString(0, a3, 0x600u);
  char v14 = 1;
  CFStringRef v11 = CFStringCreateWithCString(0, a4, 0x600u);
  char v12 = 1;
  v17[0] = &v15;
  v17[1] = &v13;
  v17[2] = &v11;
  uint64_t TuningInSubdirs = TuningPListMgr::loadTuningInSubdirs_(a1, v17, 3u, a5);
  CACFString::~CACFString((CACFString *)&v11);
  CACFString::~CACFString((CACFString *)&v13);
  CACFString::~CACFString((CACFString *)&v15);
  return TuningInSubdirs;
}

void sub_1BB4A5DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
}

uint64_t GetPortCodeForTuning(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int (*a8)(uint64_t, uint64_t, uint64_t), unsigned int (*a9)(uint64_t, uint64_t, uint64_t), uint64_t a10, char a11)
{
  unsigned int v14 = a4;
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (a8(a3, a4, a5))
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    float v18 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
    {
      size_t v19 = (*v18 ? *v18 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)v32, v14);
        *(_DWORD *)int buf = 136315906;
        int v34 = "vpAspen_v2.cpp";
        __int16 v35 = 1024;
        int v36 = 179;
        __int16 v37 = 2080;
        uint64_t v38 = a10;
        __int16 v39 = 2080;
        int v40 = v32;
        double v20 = "%25s:%-5d a known sub port type overrode the %s port type %s";
LABEL_11:
        _os_log_impl(&dword_1BB0CE000, v19, OS_LOG_TYPE_DEBUG, v20, buf, 0x26u);
      }
    }
  }
  else
  {
    unsigned int v14 = a2;
    if (a9(a3, a6, a5))
    {
      int v23 = *(uint64_t **)(a7 + 8);
      size_t v22 = (uint64_t *)(a7 + 8);
      float v21 = v23;
      unsigned int v14 = a2;
      if (v23)
      {
        float32x2_t v24 = v22;
        size_t v25 = v21;
        do
        {
          unsigned int v26 = *((_DWORD *)v25 + 7);
          BOOL v27 = v26 >= a6;
          if (v26 >= a6) {
            float v28 = (uint64_t **)v25;
          }
          else {
            float v28 = (uint64_t **)(v25 + 1);
          }
          if (v27) {
            float32x2_t v24 = v25;
          }
          size_t v25 = *v28;
        }
        while (*v28);
        unsigned int v14 = a2;
        if (v24 != v22)
        {
          unsigned int v14 = a2;
          if (*((_DWORD *)v24 + 7) <= a6)
          {
            while (1)
            {
              while (1)
              {
                unsigned int v29 = *((_DWORD *)v21 + 7);
                if (v29 <= a6) {
                  break;
                }
                float v21 = (uint64_t *)*v21;
                if (!v21) {
                  goto LABEL_29;
                }
              }
              if (v29 >= a6) {
                break;
              }
              float v21 = (uint64_t *)v21[1];
              if (!v21) {
LABEL_29:
              }
                std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
            }
            unsigned int v14 = *((_DWORD *)v21 + 8);
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            float v30 = (void *)VPLogScope(void)::scope;
            if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
            {
              size_t v19 = (*v30 ? *v30 : MEMORY[0x1E4F14500]);
              if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
              {
                CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)v32, v14);
                *(_DWORD *)int buf = 136315906;
                int v34 = "vpAspen_v2.cpp";
                __int16 v35 = 1024;
                int v36 = 187;
                __int16 v37 = 2080;
                uint64_t v38 = a10;
                __int16 v39 = 2080;
                int v40 = v32;
                double v20 = "%25s:%-5d a known port endpoint type overrode the %s port type %s";
                goto LABEL_11;
              }
            }
          }
        }
      }
    }
  }
  if ((a1 - 39) <= 0xD && (a2 == 1886216820 || a2 == 1885892706)) {
    unsigned int v14 = 1987079284;
  }
  if (a11) {
    return 1751676528;
  }
  else {
    return v14;
  }
}

uint64_t VoiceProcessorV2::GetRefPortCodeForTuning(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  qmemcpy(v22, "pspepspettpeottphvpehvpe", sizeof(v22));
  std::map<unsigned int,unsigned int>::map[abi:ne180100](v21, (unsigned int *)v22, 3);
  int v12 = *(_DWORD *)(a1 + 72);
  std::map<unsigned int,unsigned int>::map[abi:ne180100](v20, v21);
  PortCodeForuint64_t Tuning = GetPortCodeForTuning(v12, a2, a2, a3, a4, a5, (uint64_t)v20, (unsigned int (*)(uint64_t, uint64_t, uint64_t))VoiceProcessorV2::portSubTypeCanOverrideRefPortType, (unsigned int (*)(uint64_t, uint64_t, uint64_t))VoiceProcessorV2::portEndpointTypeCanOverrideRefPortType, (uint64_t)"ref", *(unsigned char *)(a1 + 2085));
  uint64_t v14 = 1885433971;
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy((void *)v20[1]);
  if (PortCodeForTuning != 1885631344 && PortCodeForTuning != 1885889645)
  {
    if (a6 != 1835361379 || (a6 & 0xFF00000000) == 0 || *(unsigned char *)(a1 + 2244) == 0) {
      unsigned int v17 = 1885892727;
    }
    else {
      unsigned int v17 = 1886152047;
    }
    if (PortCodeForTuning == 1886152047 && a4 == 1886152041) {
      uint64_t v14 = v17;
    }
    else {
      uint64_t v14 = PortCodeForTuning;
    }
  }
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy((void *)v21[1]);
  return v14;
}

void sub_1BB4A62E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17)
{
}

uint64_t *std::map<unsigned int,unsigned int>::map[abi:ne180100](uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  a1[1] = 0;
  CFTypeRef v4 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  if (a3)
  {
    uint64_t v6 = 8 * a3;
    do
    {
      std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_hint_unique_key_args<unsigned int,std::pair<unsigned int const,unsigned int> const&>(a1, v4, *a2, *(void *)a2);
      a2 += 2;
      v6 -= 8;
    }
    while (v6);
  }
  return a1;
}

void sub_1BB4A6374(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t *std::map<unsigned int,unsigned int>::map[abi:ne180100](uint64_t *a1, void *a2)
{
  a1[1] = 0;
  uint64_t v3 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  CFTypeRef v4 = a2 + 1;
  BOOL v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_hint_unique_key_args<unsigned int,std::pair<unsigned int const,unsigned int> const&>(a1, v3, *((_DWORD *)v5 + 7), *(void *)((char *)v5 + 28));
      uint64_t v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          unsigned int v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          unsigned int v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          BOOL v5 = v7;
        }
        while (!v8);
      }
      BOOL v5 = v7;
    }
    while (v7 != v4);
  }
  return a1;
}

void sub_1BB4A6420(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t VoiceProcessorV2::portEndpointTypeCanOverrideRefPortType(VoiceProcessorV2 *this, int a2)
{
  v6[1] = *MEMORY[0x1E4F143B8];
  {
    int v5 = (int)this;
    int v3 = a2;
    a2 = v3;
    int v4 = (int)this;
    LODWORD(this) = v5;
    if (v4)
    {
      v6[0] = 0x70687062706C656FLL;
      std::vector<unsigned int>::vector[abi:ne180100](VoiceProcessorV2::portEndpointTypeCanOverrideRefPortType(unsigned int,unsigned int,unsigned int)::endpointTypesThatCanBeOverridden, v6, 2uLL);
      __cxa_atexit((void (*)(void *))std::vector<unsigned int>::~vector[abi:ne180100], VoiceProcessorV2::portEndpointTypeCanOverrideRefPortType(unsigned int,unsigned int,unsigned int)::endpointTypesThatCanBeOverridden, &dword_1BB0CE000);
      a2 = v3;
      LODWORD(this) = v5;
    }
  }
  return portEndpointTypeCanOverridePortType((int)this, a2, VoiceProcessorV2::portEndpointTypeCanOverrideRefPortType(unsigned int,unsigned int,unsigned int)::endpointTypesThatCanBeOverridden);
}

void sub_1BB4A6524(_Unwind_Exception *a1)
{
}

void *std::vector<unsigned int>::vector[abi:ne180100](void *a1, const void *a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](a1, a3);
    uint64_t v6 = (char *)a1[1];
    memmove(v6, a2, 4 * a3);
    a1[1] = &v6[4 * a3];
  }
  return a1;
}

void sub_1BB4A65AC(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t portEndpointTypeCanOverridePortType(int a1, int a2, void *a3)
{
  v17[2] = *MEMORY[0x1E4F143B8];
  {
    int v15 = a2;
    int v16 = a1;
    int v12 = a3;
    a3 = v12;
    int v14 = v13;
    a2 = v15;
    a1 = v16;
    if (v14)
    {
      qmemcpy(v17, "hvpepspettpe", 12);
      std::vector<unsigned int>::vector[abi:ne180100](&portEndpointTypeCanOverridePortType(unsigned int,unsigned int,std::vector<unsigned int> const&)::endpointTypesThatCanOverride, v17, 3uLL);
      __cxa_atexit((void (*)(void *))std::vector<unsigned int>::~vector[abi:ne180100], &portEndpointTypeCanOverridePortType(unsigned int,unsigned int,std::vector<unsigned int> const&)::endpointTypesThatCanOverride, &dword_1BB0CE000);
      a2 = v15;
      a1 = v16;
      a3 = v12;
    }
  }
  if (*(void *)algn_1E9F7EB10 == portEndpointTypeCanOverridePortType(unsigned int,unsigned int,std::vector<unsigned int> const&)::endpointTypesThatCanOverride)
  {
    char v4 = 0;
  }
  else
  {
    uint64_t v3 = 0;
    char v4 = 0;
    do
      v4 |= *(_DWORD *)(portEndpointTypeCanOverridePortType(unsigned int,unsigned int,std::vector<unsigned int> const&)::endpointTypesThatCanOverride
                      + 4 * v3++) == a2;
    while ((*(void *)algn_1E9F7EB10
           - portEndpointTypeCanOverridePortType(unsigned int,unsigned int,std::vector<unsigned int> const&)::endpointTypesThatCanOverride) >> 2 > (unint64_t)v3);
  }
  uint64_t v5 = a3[1];
  uint64_t v6 = v5 - *a3;
  if (v5 == *a3)
  {
    char v10 = 0;
  }
  else
  {
    uint64_t v7 = 0;
    char v8 = 0;
    unint64_t v9 = v6 >> 2;
    do
      v8 |= *(_DWORD *)(*a3 + 4 * v7++) == a1;
    while (v9 > v7);
    char v10 = v8 & v4;
  }
  return v10 & 1;
}

void sub_1BB4A6740(_Unwind_Exception *a1)
{
}

uint64_t std::vector<unsigned int>::~vector[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

BOOL VoiceProcessorV2::portSubTypeCanOverrideRefPortType(VoiceProcessorV2 *this, unsigned int a2, int a3)
{
  return this == 1885892727 && a2 >> 1 == 823859251 && a3 == 1886222185;
}

uint64_t *std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_hint_unique_key_args<unsigned int,std::pair<unsigned int const,unsigned int> const&>(uint64_t *result, uint64_t *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = (uint64_t **)result;
  uint64_t v6 = (uint64_t **)(result + 1);
  if (result + 1 == a2 || (unsigned int v7 = *((_DWORD *)a2 + 7), v7 > a3))
  {
    char v8 = (uint64_t *)*a2;
    if ((uint64_t *)*result == a2)
    {
      char v10 = a2;
LABEL_16:
      if (v8) {
        int v13 = (uint64_t **)v10;
      }
      else {
        int v13 = (uint64_t **)a2;
      }
      if (v8) {
        CFStringRef v11 = (uint64_t **)(v10 + 1);
      }
      else {
        CFStringRef v11 = (uint64_t **)a2;
      }
      goto LABEL_22;
    }
    if (v8)
    {
      unint64_t v9 = (uint64_t *)*a2;
      do
      {
        char v10 = v9;
        unint64_t v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      int v15 = a2;
      do
      {
        char v10 = (uint64_t *)v15[2];
        BOOL v16 = *v10 == (void)v15;
        int v15 = v10;
      }
      while (v16);
    }
    if (*((_DWORD *)v10 + 7) < a3) {
      goto LABEL_16;
    }
    unsigned int v17 = *v6;
    if (*v6)
    {
      while (1)
      {
        while (1)
        {
          int v13 = (uint64_t **)v17;
          unsigned int v18 = *((_DWORD *)v17 + 7);
          if (v18 <= a3) {
            break;
          }
          unsigned int v17 = *v13;
          uint64_t v6 = v13;
          if (!*v13) {
            goto LABEL_44;
          }
        }
        if (v18 >= a3) {
          break;
        }
        uint64_t v6 = v13 + 1;
        unsigned int v17 = v13[1];
        if (!v17) {
          goto LABEL_44;
        }
      }
LABEL_47:
      CFStringRef v11 = v6;
      goto LABEL_22;
    }
  }
  else
  {
    if (v7 >= a3) {
      return result;
    }
    CFStringRef v11 = (uint64_t **)(a2 + 1);
    int v12 = (uint64_t *)a2[1];
    if (v12)
    {
      do
      {
        CFStringRef v11 = (uint64_t **)v12;
        int v12 = (uint64_t *)*v12;
        int v13 = v11;
        int v14 = v11;
      }
      while (v12);
    }
    else
    {
      int v14 = (uint64_t **)a2;
      do
      {
        size_t v19 = (uint64_t *)v14;
        int v14 = (uint64_t **)v14[2];
      }
      while (*v14 != v19);
      int v13 = (uint64_t **)a2;
    }
    if (v14 == v6 || *((_DWORD *)v14 + 7) > a3)
    {
LABEL_22:
      uint64_t v6 = v11;
      if (*v11) {
        return result;
      }
      goto LABEL_44;
    }
    double v20 = *v6;
    if (*v6)
    {
      while (1)
      {
        while (1)
        {
          int v13 = (uint64_t **)v20;
          unsigned int v21 = *((_DWORD *)v20 + 7);
          if (v21 <= a3) {
            break;
          }
          double v20 = *v13;
          uint64_t v6 = v13;
          if (!*v13) {
            goto LABEL_44;
          }
        }
        if (v21 >= a3) {
          goto LABEL_47;
        }
        uint64_t v6 = v13 + 1;
        double v20 = v13[1];
        if (!v20) {
          goto LABEL_44;
        }
      }
    }
  }
  int v13 = (uint64_t **)(result + 1);
LABEL_44:
  size_t v22 = (uint64_t *)operator new(0x28uLL);
  *(uint64_t *)((char *)v22 + 28) = a4;

  return std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at(v5, (uint64_t)v13, v6, v22);
}

uint64_t VoiceProcessorV2::GetMicPortCodeForTuning(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  qmemcpy(v19, "pspepspettpeittphvpehvpe", sizeof(v19));
  std::map<unsigned int,unsigned int>::map[abi:ne180100](v18, (unsigned int *)v19, 3);
  int v12 = *(_DWORD *)(a1 + 72);
  std::map<unsigned int,unsigned int>::map[abi:ne180100](v17, v18);
  PortCodeForuint64_t Tuning = GetPortCodeForTuning(v12, a4, a2, a3, a4, a5, (uint64_t)v17, (unsigned int (*)(uint64_t, uint64_t, uint64_t))VoiceProcessorV2::portSubTypeCanOverrideMicPortType, (unsigned int (*)(uint64_t, uint64_t, uint64_t))VoiceProcessorV2::portEndpointTypeCanOverrideMicPortType, (uint64_t)"mic", *(unsigned char *)(a1 + 2085));
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy((void *)v17[1]);
  if (a2 == 1886152047 && PortCodeForTuning == 1886152041)
  {
    if (a6 != 1835361379 || (a6 & 0xFF00000000) == 0 || *(unsigned char *)(a1 + 2244) == 0) {
      PortCodeForuint64_t Tuning = 1886222185;
    }
    else {
      PortCodeForuint64_t Tuning = 1886152041;
    }
  }
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy((void *)v18[1]);
  return PortCodeForTuning;
}

void sub_1BB4A6AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17)
{
}

uint64_t VoiceProcessorV2::portEndpointTypeCanOverrideMicPortType(VoiceProcessorV2 *this, int a2, int a3)
{
  int v3 = a3;
  {
    int v5 = a2;
    a2 = v5;
    int v7 = v6;
    int v3 = a3;
    if (v7)
    {
      int v9 = 1886216820;
      std::vector<unsigned int>::vector[abi:ne180100](VoiceProcessorV2::portEndpointTypeCanOverrideMicPortType(unsigned int,unsigned int,unsigned int)::endpointTypesThatCanBeOverridden, &v9, 1uLL);
      __cxa_atexit((void (*)(void *))std::vector<unsigned int>::~vector[abi:ne180100], VoiceProcessorV2::portEndpointTypeCanOverrideMicPortType(unsigned int,unsigned int,unsigned int)::endpointTypesThatCanBeOverridden, &dword_1BB0CE000);
      a2 = v5;
      int v3 = a3;
    }
  }
  return portEndpointTypeCanOverridePortType(v3, a2, VoiceProcessorV2::portEndpointTypeCanOverrideMicPortType(unsigned int,unsigned int,unsigned int)::endpointTypesThatCanBeOverridden);
}

void sub_1BB4A6BE0(_Unwind_Exception *a1)
{
}

BOOL VoiceProcessorV2::portSubTypeCanOverrideMicPortType(VoiceProcessorV2 *this, unsigned int a2, int a3)
{
  return this == 1885892727 && a2 >> 1 == 823859251 && a3 == 1886222185;
}

uint64_t VoiceProcessorV2::LoadTuningsPlists(VoiceProcessorV2 *this)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = **((unsigned int **)this + 292);
  uint64_t v3 = *((unsigned int *)this + 596);
  uint64_t v4 = **((unsigned int **)this + 295);
  uint64_t v5 = *((unsigned int *)this + 597);
  unsigned int v6 = (*(uint64_t (**)(VoiceProcessorV2 *, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)this
                                                                                                 + 496))(this, v2, v3, v4, v5, 0);
  unsigned int v67 = v4;
  unsigned int v7 = (*(uint64_t (**)(VoiceProcessorV2 *, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)this
                                                                                                 + 504))(this, v2, v3, v4, v5, 0);
  unsigned int v8 = *((_DWORD *)this + 21);
  qmemcpy(buf, "anpf80pfa6pfawpfa9pfa6pfaopfawpfawpf61pfenpf80pfe6pfewpfe9pfe6pfeopfewpfewpf61pf42pf42ovbntr42pfbwtr42pf", sizeof(buf));
  std::map<unsigned int,unsigned int>::map[abi:ne180100](&v76, (unsigned int *)buf, 13);
  float v66 = (char *)this + 15961;
  int v9 = (char *)this + 4576;
  while (1)
  {
    unsigned int v10 = v6;
    unsigned int v11 = v7;
    if (!VoiceProcessorV2::GetVPVocoderTypeOrUseCaseOverrideForTuningOverride(this))
    {
      VoiceProcessorV2::GetHardwareModelNameForTuning((std::string *)buf, (uint64_t)this);
      if (buf[23] >= 0) {
        unsigned int v26 = buf;
      }
      else {
        unsigned int v26 = *(const char **)buf;
      }
      VoiceProcessorV2::GetVersionNameForTuning(&v86, (uint64_t)this);
      int v27 = SHIBYTE(v86.__r_.__value_.__r.__words[2]);
      std::string::size_type v28 = v86.__r_.__value_.__r.__words[0];
      VoiceProcessorV2::GetDeviceCodeNameForTuning((VoiceProcessorV2 *)&__p, (uint64_t)this);
      if (v27 >= 0) {
        unsigned int v29 = &v86;
      }
      else {
        unsigned int v29 = (std::string *)v28;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      VoiceProcessorV2::TryLoadingTuningPlists(this, v26, (const char *)v29, (const char *)p_p, v10, v11, v8);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v86.__r_.__value_.__l.__data_);
      }
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
LABEL_67:
      int v12 = *v9;
      goto LABEL_68;
    }
    unsigned int v8 = (*(uint64_t (**)(VoiceProcessorV2 *))(*(void *)this + 480))(this);
    int v12 = *v9;
    if (!*v9 && v78)
    {
      LODWORD(v13) = 0;
      while (1)
      {
        VoiceProcessorV2::GetHardwareModelNameForTuning((std::string *)buf, (uint64_t)this);
        if (buf[23] >= 0) {
          int v14 = buf;
        }
        else {
          int v14 = *(const char **)buf;
        }
        VoiceProcessorV2::GetVersionNameForTuning(&v86, (uint64_t)this);
        int v15 = SHIBYTE(v86.__r_.__value_.__r.__words[2]);
        std::string::size_type v16 = v86.__r_.__value_.__r.__words[0];
        VoiceProcessorV2::GetDeviceCodeNameForTuning((VoiceProcessorV2 *)&__p, (uint64_t)this);
        if (v15 >= 0) {
          unsigned int v17 = &v86;
        }
        else {
          unsigned int v17 = (std::string *)v16;
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unsigned int v18 = &__p;
        }
        else {
          unsigned int v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        VoiceProcessorV2::TryLoadingTuningPlists(this, v14, (const char *)v17, (const char *)v18, v10, v11, v8);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v86.__r_.__value_.__l.__data_);
        }
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        if (v8 == *((_DWORD *)this + 21)) {
          goto LABEL_67;
        }
        size_t v19 = v77;
        if (!v77) {
          goto LABEL_52;
        }
        uint64_t v20 = &v77;
        do
        {
          unsigned int v21 = v19;
          size_t v22 = v20;
          unsigned int v23 = *((_DWORD *)v19 + 7);
          float32x2_t v24 = v19 + 1;
          if (v23 >= v8)
          {
            float32x2_t v24 = v21;
            uint64_t v20 = (void **)v21;
          }
          size_t v19 = (void *)*v24;
        }
        while (v19);
        if (v20 == &v77 || (v23 >= v8 ? (size_t v25 = v21) : (size_t v25 = v22), v8 < *((_DWORD *)v25 + 7)))
        {
LABEL_52:
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          long long v31 = (void *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
          {
            double v32 = (*v31 ? *v31 : MEMORY[0x1E4F14500]);
            if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
            {
              CAX4CCString::CAX4CCString((CAX4CCString *)&v86, v8);
              *(_DWORD *)int buf = 136315650;
              *(void *)&uint8_t buf[4] = "vpAspen_v2.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 307;
              *(_WORD *)&buf[18] = 2080;
              *(void *)&buf[20] = &v86;
              _os_log_impl(&dword_1BB0CE000, v32, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> No vocoder tuning fallback could be found for vocoder type %s", buf, 0x1Cu);
            }
          }
          unsigned int v33 = (int *)*((void *)this + 1578);
          if (v33 && (*v66 || *((unsigned char *)this + 15962)))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            uint64_t v34 = VPLogScope(void)::scope;
            CAX4CCString::CAX4CCString((CAX4CCString *)buf, v8);
            CALegacyLog::log(v33, 3, v34, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpAspen_v2.cpp", 307, "LoadTuningsPlists", "No vocoder tuning fallback could be found for vocoder type %s", buf);
          }
          goto LABEL_67;
        }
        if (v23 < v8) {
          unsigned int v21 = v22;
        }
        unsigned int v8 = *((_DWORD *)v21 + 8);
        if (!*v9)
        {
          unint64_t v13 = (v13 + 1);
          if (v78 > v13) {
            continue;
          }
        }
        goto LABEL_67;
      }
    }
LABEL_68:
    if (v12)
    {
      uint64_t v39 = 0;
      *((_DWORD *)this + 23) = v8;
      goto LABEL_150;
    }
    if (v10 == v2 && v11 == v67) {
      break;
    }
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    __int16 v35 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      int v36 = (*v35 ? *v35 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)&v86, v10);
        CAX4CCString::CAX4CCString((CAX4CCString *)&__p, v11);
        *(_DWORD *)int buf = 136315906;
        *(void *)&uint8_t buf[4] = "vpAspen_v2.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 320;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = &v86;
        *(_WORD *)&unsigned char buf[28] = 2080;
        *(void *)&unsigned char buf[30] = &__p;
        _os_log_impl(&dword_1BB0CE000, v36, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> no custom tuning plists found for headphone, headset or endpoint-specific device %s-%s; trying"
          " to find tunings for the original ref & mic port types...\n",
          buf,
          0x26u);
      }
    }
    __int16 v37 = (int *)*((void *)this + 1578);
    unsigned int v7 = v67;
    unsigned int v6 = v2;
    if (v37)
    {
      if (*v66 || (v7 = v67, unsigned int v6 = v2, *((unsigned char *)this + 15962)))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        uint64_t v38 = VPLogScope(void)::scope;
        CAX4CCString::CAX4CCString((CAX4CCString *)buf, v10);
        CAX4CCString::CAX4CCString((CAX4CCString *)&v86, v11);
        CALegacyLog::log(v37, 1, v38, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpAspen_v2.cpp", 320, "LoadTuningsPlists", "no custom tuning plists found for headphone, headset or endpoint-specific device %s-%s; trying to find tunings"
          " for the original ref & mic port types...\n",
          buf,
          (const char *)&v86);
        unsigned int v7 = v67;
        unsigned int v6 = v2;
      }
    }
  }
  *((_DWORD *)this + 23) = v8;
  if (VoiceProcessorV2::GetVPVocoderTypeOrUseCaseOverrideForTuningOverride(this))
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    int v40 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      uint64_t v41 = (*v40 ? *v40 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      {
        CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)&v86, v2);
        CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)&__p, v67);
        CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)&v83, v8);
        *(_DWORD *)int buf = 136316162;
        *(void *)&uint8_t buf[4] = "vpAspen_v2.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 333;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = &v86;
        *(_WORD *)&unsigned char buf[28] = 2080;
        *(void *)&unsigned char buf[30] = &__p;
        *(_WORD *)&buf[38] = 2080;
        *(void *)&buf[40] = &v83;
        _os_log_impl(&dword_1BB0CE000, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> NEW TUNING LOGIC <SERIOUS ERROR>: no tuning plists found. Using default paramters!!! Use case %s-%s-%s", buf, 0x30u);
      }
    }
    long long v42 = (int *)*((void *)this + 1578);
    if (v42 && (*v66 || *((unsigned char *)this + 15962)))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      uint64_t v43 = VPLogScope(void)::scope;
      CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)buf, v2);
      CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)&v86, v67);
      CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)&__p, v8);
      CALegacyLog::log(v42, 1, v43, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpAspen_v2.cpp", 333, "LoadTuningsPlists", "NEW TUNING LOGIC <SERIOUS ERROR>: no tuning plists found. Using default paramters!!! Use case %s-%s-%s", buf, (const char *)&v86, (const char *)&__p);
    }
    *(void *)&buf[8] = 0;
    *(void *)&buf[16] = 0;
    *(void *)int buf = &buf[8];
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)__s, v2);
    std::string::basic_string[abi:ne180100]<0>(&v74, __s);
    long long v44 = std::string::insert(&v74, 0, "No tuning plists found, using default paramters. Use case ", 0x3AuLL);
    long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    __int16 v46 = std::string::append(&v75, "-", 1uLL);
    long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
    v83.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v47;
    v46->__r_.__value_.__l.__size_ = 0;
    v46->__r_.__value_.__r.__words[2] = 0;
    v46->__r_.__value_.__r.__words[0] = 0;
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)v81, v67);
    std::string::basic_string[abi:ne180100]<0>(v72, v81);
    if ((v73 & 0x80u) == 0) {
      __int16 v48 = v72;
    }
    else {
      __int16 v48 = (void **)v72[0];
    }
    if ((v73 & 0x80u) == 0) {
      std::string::size_type v49 = v73;
    }
    else {
      std::string::size_type v49 = (std::string::size_type)v72[1];
    }
    __int16 v50 = std::string::append(&v83, (const std::string::value_type *)v48, v49);
    long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    __int16 v52 = std::string::append(&__p, "-", 1uLL);
    long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    v86.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v53;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)v80, v8);
    std::string::basic_string[abi:ne180100]<0>(v70, v80);
    if ((v71 & 0x80u) == 0) {
      uint64_t v54 = v70;
    }
    else {
      uint64_t v54 = (void **)v70[0];
    }
    if ((v71 & 0x80u) == 0) {
      std::string::size_type v55 = v71;
    }
    else {
      std::string::size_type v55 = (std::string::size_type)v70[1];
    }
    __int16 v56 = std::string::append(&v86, (const std::string::value_type *)v54, v55);
    std::string::size_type v57 = v56->__r_.__value_.__r.__words[0];
    v84[0] = v56->__r_.__value_.__l.__size_;
    *(void *)((char *)v84 + 7) = *(std::string::size_type *)((char *)&v56->__r_.__value_.__r.__words[1] + 7);
    char v58 = HIBYTE(v56->__r_.__value_.__r.__words[2]);
    v56->__r_.__value_.__l.__size_ = 0;
    v56->__r_.__value_.__r.__words[2] = 0;
    v56->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(v68, "vp_tuning_setup_error");
    uint64_t v79 = v68;
    float v59 = (void **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)buf, v68, (_OWORD **)&v79);
    __int16 v60 = v59;
    if (*((char *)v59 + 79) < 0) {
      operator delete(v59[7]);
    }
    __int16 v61 = (void *)v84[0];
    v60[7] = (void *)v57;
    v60[8] = v61;
    *(void **)((char *)v60 + 71) = *(void **)((char *)v84 + 7);
    *((unsigned char *)v60 + 79) = v58;
    if (v69 < 0) {
      operator delete(v68[0]);
    }
    if ((char)v71 < 0) {
      operator delete(v70[0]);
    }
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v86.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((char)v73 < 0) {
      operator delete(v72[0]);
    }
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v83.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v75.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v74.__r_.__value_.__l.__data_);
    }
    AudioStatisticsHelperSendMessage(*((uint64_t **)this + 270), *((_DWORD *)this + 542), (const UInt8 **)buf, 6);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(void **)&buf[8]);
  }
  else
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    int v62 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
    {
      __int16 v63 = (*v62 ? *v62 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int buf = 136315394;
        *(void *)&uint8_t buf[4] = "vpAspen_v2.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 341;
        _os_log_impl(&dword_1BB0CE000, v63, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> No tuning plists found due to unknown vocoder type. This could be transient. Using default paramters.", buf, 0x12u);
      }
    }
    float v64 = (int *)*((void *)this + 1578);
    if (v64 && (*v66 || v66[1]))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      CALegacyLog::log(v64, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpAspen_v2.cpp", 341, "LoadTuningsPlists", "No tuning plists found due to unknown vocoder type. This could be transient. Using default paramters.");
    }
  }
  uint64_t v39 = 0xFFFFFFFFLL;
LABEL_150:
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(v77);
  return v39;
}

void sub_1BB4A786C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36)
{
}

uint64_t VoiceProcessorV2::GetVPVocoderTypeOrUseCaseOverrideForTuningOverride(VoiceProcessorV2 *this)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *((_DWORD *)this + 19);
  unsigned int v2 = v1;
  if (v1 - 7 >= 0xFFFFFFFE)
  {
    unsigned int v8 = *((_DWORD *)this + 18) - 1;
    if (v8 > 0x2D || (dword_1BB8AD344[v8] == 4 ? (BOOL v9 = v1 - 7 >= 0xFFFFFFFE) : (BOOL v9 = 0), v9))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      uint64_t v6 = 1718628916;
      unsigned int v11 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        int v12 = (*v11 ? *v11 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          CAX4CCString::CAX4CCString((CAX4CCString *)v15, 0x66703234u);
          *(_DWORD *)int buf = 136315650;
          unsigned int v17 = "vpAspen_v2.cpp";
          __int16 v18 = 1024;
          int v19 = 827;
          __int16 v20 = 2080;
          unsigned int v21 = v15;
          _os_log_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d setting use case override to %s", buf, 0x1Cu);
        }
      }
      return v6;
    }
    unsigned int v10 = *((_DWORD *)this + 18) - 1;
    if (v10 > 0x2D) {
      return 0;
    }
    unsigned int v2 = dword_1BB8AD344[v10];
  }
  if (v2 != 1) {
    return 0;
  }
  BOOL v3 = v1 > 6;
  int v4 = (1 << v1) & 0x62;
  if (v3 || v4 == 0) {
    return 0;
  }
  uint64_t v6 = 1718644321;
  int v7 = *((_DWORD *)this + 549);
  if (v7 > 1718755359)
  {
    if (v7 <= 1935764849)
    {
      if (v7 == 1718755360 || v7 == 1752309792) {
        return v6;
      }
      int v13 = 1902341232;
    }
    else
    {
      if (v7 <= 1936029298)
      {
        if (v7 == 1935764850) {
          return v6;
        }
        if (v7 == 1935767394) {
          return 1718646625;
        }
        return 0;
      }
      if (v7 == 1936029299) {
        return 1718642038;
      }
      int v13 = 1970037111;
    }
    if (v7 != v13) {
      return 0;
    }
    return 1718644325;
  }
  if (v7 <= 1700883825)
  {
    if (v7 != 880176738)
    {
      if (v7 == 880176759) {
        return 1718644581;
      }
      if (v7 == 880179042) {
        return 1718646629;
      }
      return 0;
    }
    return 1718644325;
  }
  if ((v7 - 1702261346) < 2) {
    return 1718644325;
  }
  if (v7 == 1700883826) {
    return 1718644577;
  }
  if (v7 != 1701212704) {
    return 0;
  }
  return v6;
}

_OWORD *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, void **a2, _OWORD **a3)
{
  uint64_t v5 = (void **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>((uint64_t)a1, &v13, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    int v7 = (uint64_t **)v5;
    uint64_t v6 = operator new(0x50uLL);
    v11[1] = a1 + 1;
    unsigned int v8 = *a3;
    uint64_t v9 = *((void *)*a3 + 2);
    void v6[2] = **a3;
    *((void *)v6 + 6) = v9;
    void *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    *((void *)v6 + 8) = 0;
    *((void *)v6 + 9) = 0;
    *((void *)v6 + 7) = 0;
    char v12 = 1;
    std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at(a1, v13, v7, (uint64_t *)v6);
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v11);
  }
  return v6;
}

BOOL VoiceProcessorV2::ShouldBypassTuningLoading(VoiceProcessorV2 *this)
{
  return **((_DWORD **)this + 292) == 1885892727
      && *((_DWORD *)this + 596) == 1752709424
      && **((_DWORD **)this + 295) == 1886222185;
}

uint64_t VoiceProcessorV2::GetVPVocoderOrUseCaseOverrideTuning4CC(VoiceProcessorV2 *this)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  float v2 = *((double *)this + 103);
  if (v2 <= 8000.0) {
    uint64_t v3 = 1718628408;
  }
  else {
    uint64_t v3 = 1718628662;
  }
  {
    *(void *)int buf = 1718644321;
    *(void *)&buf[8] = 0x66706E6100000000;
    *(void *)&buf[16] = 1718644321;
    *(void *)&buf[24] = 0x6670366100000001;
    *(void *)&uint8_t buf[32] = 1718644577;
    uint64_t v30 = 0x6670396100000001;
    uint64_t v31 = 0x166706F61;
    uint64_t v32 = 0x66706F6100000001;
    uint64_t v33 = 0x166707761;
    uint64_t v34 = 0x6670776100000001;
    uint64_t v35 = 1718644577;
    uint64_t v36 = 0x6670303800000000;
    uint64_t v37 = 0x166706F61;
    uint64_t v38 = 0x6670303800000000;
    uint64_t v39 = 0x166707761;
    uint64_t v40 = 0x6670303800000000;
    uint64_t v41 = 1718644325;
    uint64_t v42 = 0x66706E6500000000;
    uint64_t v43 = 1718644325;
    uint64_t v44 = 0x6670366500000001;
    uint64_t v45 = 1718644581;
    uint64_t v46 = 0x6670396500000001;
    uint64_t v47 = 0x166706F65;
    uint64_t v48 = 0x66706F6500000001;
    uint64_t v49 = 0x166707765;
    uint64_t v50 = 0x6670776500000001;
    uint64_t v51 = 1718644581;
    uint64_t v52 = 0x66706E6500000000;
    uint64_t v53 = 0x166706F65;
    uint64_t v54 = 0x66706E6500000000;
    uint64_t v55 = 0x166707765;
    uint64_t v56 = 0x6670303800000000;
    *(_DWORD *)std::string::size_type v28 = 1718628916;
    uint64_t v57 = 1718628916;
    uint64_t v58 = 0x72746E6200000001;
    *(void *)&v28[4] = 0x100000001;
    uint64_t v59 = *(void *)v28;
    uint64_t v60 = 0x7274776200000001;
    std::map<std::pair<unsigned int,std::pair<unsigned int,unsigned int>>,unsigned int>::map[abi:ne180100]((uint64_t)buf, 18);
    __cxa_atexit((void (*)(void *))std::map<std::pair<unsigned int,std::pair<unsigned int,unsigned int>>,unsigned int>::~map[abi:ne180100], &VoiceProcessorV2::GetVPVocoderTuning4CCList(void)const::vocoderTuning4CCList, &dword_1BB0CE000);
  }
  uint64_t v4 = v2 > 8000.0;
  unsigned int v5 = *((float *)this + 550);
  unsigned int VPVocoderTypeOrUseCaseOverrideForTuningOverride = VoiceProcessorV2::GetVPVocoderTypeOrUseCaseOverrideForTuningOverride(this);
  *(_DWORD *)int buf = VPVocoderTypeOrUseCaseOverrideForTuningOverride;
  *(void *)&uint8_t buf[4] = (v5 > 0x1F40) | (unint64_t)(v4 << 32);
  int v7 = (_DWORD *)qword_1E9F7EB70;
  if (!qword_1E9F7EB70) {
    goto LABEL_35;
  }
  unsigned int v8 = &qword_1E9F7EB70;
  do
  {
    unsigned int v9 = v7[7];
    BOOL v10 = v9 == *(_DWORD *)buf;
    if (v9 < *(_DWORD *)buf) {
      char v11 = -1;
    }
    else {
      char v11 = 1;
    }
    if (v10)
    {
      unsigned int v12 = v7[8];
      BOOL v13 = v12 == *(_DWORD *)&buf[4];
      char v11 = v12 < *(_DWORD *)&buf[4] ? -1 : 1;
      if (v13)
      {
        unsigned int v14 = v7[9];
        BOOL v15 = v14 == v4;
        char v11 = __PAIR64__(v14, 8000.0) < LODWORD(v2) ? -1 : 1;
        if (v15) {
          char v11 = 0;
        }
      }
    }
    BOOL v16 = v11 < 0;
    if (v11 >= 0) {
      unsigned int v17 = v7;
    }
    else {
      unsigned int v17 = v7 + 2;
    }
    if (!v16) {
      unsigned int v8 = (uint64_t *)v7;
    }
    int v7 = (_DWORD *)*v17;
  }
  while (*v17);
  if (v8 == &qword_1E9F7EB70) {
    goto LABEL_35;
  }
  unsigned int v18 = *((_DWORD *)v8 + 7);
  BOOL v19 = v18 > *(_DWORD *)buf;
  if (v18 != *(_DWORD *)buf
    || (v20 = *((_DWORD *)v8 + 8), v10 = v20 == *(_DWORD *)&buf[4], BOOL v19 = v20 > *(_DWORD *)&buf[4], !v10))
  {
    if (v19) {
      goto LABEL_35;
    }
    return *((unsigned int *)v8 + 10);
  }
  if (*((_DWORD *)v8 + 9) <= v4) {
    return *((unsigned int *)v8 + 10);
  }
LABEL_35:
  if (VPLogScope(void)::once != -1) {
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
  }
  double v21 = v2;
  double v22 = (double)v5;
  unsigned int v23 = (void *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
  {
    float32x2_t v24 = (*v23 ? *v23 : MEMORY[0x1E4F14500]);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v28, VPVocoderTypeOrUseCaseOverrideForTuningOverride);
      *(_DWORD *)int buf = 136316162;
      *(void *)&uint8_t buf[4] = "vpAspen_v2.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 880;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = v28;
      *(_WORD *)&unsigned char buf[28] = 2048;
      *(double *)&unsigned char buf[30] = v22;
      *(_WORD *)&buf[38] = 2048;
      uint64_t v30 = *(void *)&v21;
      _os_log_impl(&dword_1BB0CE000, v24, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> No vocoder specific tuning list entry for vocoder type %s, vocoder sample rate = %f and hardware sample rate = %f!", buf, 0x30u);
    }
  }
  size_t v25 = (int *)*((void *)this + 1578);
  if (v25 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    uint64_t v26 = VPLogScope(void)::scope;
    CAX4CCString::CAX4CCString((CAX4CCString *)buf, VPVocoderTypeOrUseCaseOverrideForTuningOverride);
    CALegacyLog::log(v25, 5, v26, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpAspen_v2.cpp", 880, "GetVPVocoderOrUseCaseOverrideTuning4CC", "No vocoder specific tuning list entry for vocoder type %s, vocoder sample rate = %f and hardware sample rate = %f!", buf, v22, v21);
  }
  return v3;
}

void sub_1BB4A8384(_Unwind_Exception *a1)
{
}

uint64_t std::operator<=>[abi:ne180100]<unsigned int,std::pair<unsigned int,unsigned int>,unsigned int,std::pair<unsigned int,unsigned int>>(int *a1, _DWORD *a2)
{
  int v3 = *a1;
  if (*a1 < *a2) {
    uint64_t result = 0xFFFFFFFFLL;
  }
  else {
    uint64_t result = 1;
  }
  if (v3 == *a2)
  {
    unsigned int v5 = a1[1];
    unsigned int v6 = a2[1];
    uint64_t result = v5 < v6 ? 0xFFFFFFFFLL : 1;
    if (v5 == v6)
    {
      unsigned int v7 = a1[2];
      unsigned int v8 = a2[2];
      BOOL v9 = v7 == v8;
      if (v7 < v8) {
        unsigned int v10 = -1;
      }
      else {
        unsigned int v10 = 1;
      }
      if (v9) {
        return 0;
      }
      else {
        return v10;
      }
    }
  }
  return result;
}

uint64_t std::map<std::pair<unsigned int,std::pair<unsigned int,unsigned int>>,unsigned int>::map[abi:ne180100](uint64_t result, uint64_t a2)
{
  qword_1E9F7EB78 = 0;
  qword_1E9F7EB70 = 0;
  VoiceProcessorV2::GetVPVocoderTuning4CCList(void)const::vocoderTuning4CCList = (uint64_t)&qword_1E9F7EB70;
  if (a2)
  {
    float v2 = (int *)result;
    uint64_t v3 = 0;
    uint64_t v4 = (int *)(result + 16 * a2);
    for (uint64_t i = &qword_1E9F7EB70;
          i != &qword_1E9F7EB70;
          uint64_t i = (uint64_t *)VoiceProcessorV2::GetVPVocoderTuning4CCList(void)const::vocoderTuning4CCList)
    {
      unsigned int v6 = (uint64_t *)v3;
      if (v3)
      {
        do
        {
          unsigned int v7 = v6;
          unsigned int v6 = (uint64_t *)v6[1];
        }
        while (v6);
      }
      else
      {
        unsigned int v8 = &qword_1E9F7EB70;
        do
        {
          unsigned int v7 = (uint64_t *)v8[2];
          BOOL v9 = *v7 == (void)v8;
          unsigned int v8 = v7;
        }
        while (v9);
      }
      uint64_t result = std::operator<=>[abi:ne180100]<unsigned int,std::pair<unsigned int,unsigned int>,unsigned int,std::pair<unsigned int,unsigned int>>((int *)v7 + 7, v2);
      if ((result & 0x80) != 0) {
        goto LABEL_19;
      }
      if (v3)
      {
        uint64_t v10 = v3;
        do
        {
          while (1)
          {
            unsigned int v7 = (uint64_t *)v10;
            char v11 = (int *)(v10 + 28);
            if ((std::operator<=>[abi:ne180100]<unsigned int,std::pair<unsigned int,unsigned int>,unsigned int,std::pair<unsigned int,unsigned int>>(v2, (_DWORD *)(v10 + 28)) & 0x80) == 0)break; {
            uint64_t v10 = *v7;
            }
            unsigned int v12 = v7;
            if (!*v7) {
              goto LABEL_23;
            }
          }
          uint64_t result = std::operator<=>[abi:ne180100]<unsigned int,std::pair<unsigned int,unsigned int>,unsigned int,std::pair<unsigned int,unsigned int>>(v11, v2);
          if ((result & 0x80) == 0) {
            goto LABEL_26;
          }
          unsigned int v12 = v7 + 1;
          uint64_t v10 = v7[1];
        }
        while (v10);
        goto LABEL_23;
      }
LABEL_22:
      unsigned int v7 = &qword_1E9F7EB70;
      unsigned int v12 = &qword_1E9F7EB70;
LABEL_23:
      BOOL v13 = (char *)operator new(0x30uLL);
      *(_OWORD *)(v13 + 28) = *(_OWORD *)v2;
      *(void *)BOOL v13 = 0;
      *((void *)v13 + 1) = 0;
      *((void *)v13 + 2) = v7;
      uint64_t *v12 = (uint64_t)v13;
      if (*(void *)VoiceProcessorV2::GetVPVocoderTuning4CCList(void)const::vocoderTuning4CCList)
      {
        VoiceProcessorV2::GetVPVocoderTuning4CCList(void)const::vocoderTuning4CCList = *(void *)VoiceProcessorV2::GetVPVocoderTuning4CCList(void)const::vocoderTuning4CCList;
        BOOL v13 = (char *)*v12;
      }
      uint64_t result = (uint64_t)std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1E9F7EB70, (uint64_t *)v13);
      uint64_t v3 = qword_1E9F7EB70;
      ++qword_1E9F7EB78;
LABEL_26:
      v2 += 4;
      if (v2 == v4) {
        return result;
      }
    }
    unsigned int v7 = &qword_1E9F7EB70;
LABEL_19:
    if (v3)
    {
      unsigned int v12 = v7 + 1;
      if (v7[1]) {
        goto LABEL_26;
      }
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  return result;
}

void sub_1BB4A8574(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(v1);
  _Unwind_Resume(a1);
}

uint64_t std::map<std::pair<unsigned int,std::pair<unsigned int,unsigned int>>,unsigned int>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

void VoiceProcessorV2::InitializeVPParams(VoiceProcessorV2 *this)
{
  uint64_t v222 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = *((_DWORD *)this + 18);
  BOOL v212 = 0;
  uint64_t v3 = (int *)*((void *)this + 292);
  if (v3 == *((int **)this + 293) || (uint64_t v4 = (int *)*((void *)this + 295), v4 == *((int **)this + 296)))
  {
    int v5 = 48;
    goto LABEL_6;
  }
  if (v2 == 53)
  {
    int v5 = 45;
LABEL_6:
    unsigned int v206 = v5;
    goto LABEL_7;
  }
  unsigned int v11 = v2 & 0xFFFFFFFE;
  if ((v2 & 0xFFFFFFFE) == 0x36)
  {
    int v5 = 46;
    goto LABEL_6;
  }
  int v12 = *v3;
  int v13 = *v4;
  if (v12 == 1886613611 && v13 == 1886216809)
  {
    unsigned int v206 = 18;
    if (v2 - 39 < 0xA) {
      goto LABEL_7;
    }
    if (v11 == 50) {
      goto LABEL_7;
    }
    unsigned int v206 = 19;
    if (v2 == 49 || v2 == 52) {
      goto LABEL_7;
    }
    if (v2 - 1 < 0x15)
    {
      int v5 = 12;
      goto LABEL_6;
    }
    if (v2 - 34 < 3)
    {
      int v5 = 27;
      goto LABEL_6;
    }
    if (v2 - 30 < 9 && ((0x18Fu >> (v2 - 30)) & 1) != 0)
    {
      int v5 = 26;
      goto LABEL_6;
    }
    if (v11 == 22)
    {
      int v5 = 31;
      goto LABEL_6;
    }
    if (v2 - 24 < 6)
    {
      int v5 = 38;
      goto LABEL_6;
    }
    goto LABEL_706;
  }
  if (v12 == 1886545251 && v13 == 1886216809)
  {
    if (v2 - 1 < 0x15)
    {
      int v5 = 13;
      goto LABEL_6;
    }
    goto LABEL_706;
  }
  BOOL v16 = v12 == 1885892674 || v12 == 1885892727;
  if (v16 && v13 == 1886216809)
  {
    if (v2 - 1 < 0x15)
    {
      int v5 = 14;
      goto LABEL_6;
    }
    if (v2 - 30 < 9)
    {
      int v5 = 24;
      goto LABEL_6;
    }
    if (v11 == 22)
    {
      int v5 = 32;
      goto LABEL_6;
    }
    if (v2 - 24 < 6)
    {
      int v5 = 39;
      goto LABEL_6;
    }
    goto LABEL_706;
  }
  if (v12 == 1886152047 && v13 == 1886216809)
  {
    if (v2 - 1 < 0x15)
    {
      int v5 = 15;
      goto LABEL_6;
    }
    if (v2 - 30 < 9)
    {
      int v5 = 25;
      goto LABEL_6;
    }
    if (v11 == 22)
    {
      int v5 = 33;
      goto LABEL_6;
    }
    if (v2 - 24 < 6)
    {
      int v5 = 40;
      goto LABEL_6;
    }
    goto LABEL_706;
  }
  if (v12 == 1885888867 && v13 == 1886216809)
  {
    if (v2 - 1 < 0x15)
    {
      int v5 = 16;
      goto LABEL_6;
    }
LABEL_706:
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    unsigned int v190 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      uint64_t v191 = (*v190 ? *v190 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v191, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpAspen_v2.cpp";
        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 764;
        _os_log_impl(&dword_1BB0CE000, v191, OS_LOG_TYPE_ERROR, "%25s:%-5d <SERIOUS ERROR> Route unknown! Aborting if defaults write not set, otherwise using default config!", (uint8_t *)buf, 0x12u);
      }
    }
    int v189 = 7;
    goto LABEL_716;
  }
  if (v12 == 1886613611 && v13 == 1886745449)
  {
    unsigned int v188 = v2 - 22;
    if (v2 - 22 < 0x11)
    {
      if ((0x18CFFu >> v188)) {
        int v5 = dword_1BB898378[v188];
      }
      else {
        int v5 = 10;
      }
      goto LABEL_6;
    }
    int v189 = 10;
    goto LABEL_716;
  }
  if (v12 == 1885631344 && v13 == 1886216809)
  {
    int v189 = 5;
LABEL_716:
    unsigned int v206 = v189;
    goto LABEL_717;
  }
  if (v12 == 1885889645 && v13 == 1886216809)
  {
    int v189 = 6;
    goto LABEL_716;
  }
  if (v12 == 1886154613 && v13 == 1886216809)
  {
    int v189 = 8;
    goto LABEL_716;
  }
  if (v13 != 1886216809)
  {
    if (v12 == 1885892727 && v13 == 1886222185)
    {
      if (*((_DWORD *)this + 596) == 1781740087) {
        int v189 = 47;
      }
      else {
        int v189 = 0;
      }
      goto LABEL_716;
    }
    if (v12 == 1885892706 && v13 == 1886216820)
    {
      int v196 = 1;
    }
    else
    {
      if (v12 == 1886152047 && v13 == 1886152041)
      {
        unsigned int v206 = 0;
        goto LABEL_717;
      }
      if (v12 == 1886745455 && v13 == 1886745449)
      {
        unsigned int v194 = v2 - 22;
        if (v2 - 22 < 0x11)
        {
          if (((0x18CFFu >> v194) & 1) == 0)
          {
            int v195 = 2;
            goto LABEL_759;
          }
          int v198 = &unk_1BB898400;
          goto LABEL_758;
        }
        int v196 = 2;
        goto LABEL_750;
      }
      if (v12 == 1886680175 && v13 == 1886680169)
      {
        int v196 = 3;
      }
      else
      {
        if (v12 != 1886614639 || v13 != 1886614633) {
          goto LABEL_774;
        }
        int v196 = 4;
      }
    }
LABEL_750:
    unsigned int v206 = v196;
    goto LABEL_717;
  }
  switch(v12)
  {
    case 1886745455:
LABEL_735:
      unsigned int v194 = v2 - 22;
      if (v2 - 22 < 0x11)
      {
        if (((0x18CFFu >> v194) & 1) == 0)
        {
          int v195 = 9;
LABEL_759:
          unsigned int v206 = v195;
          goto LABEL_7;
        }
        int v198 = &unk_1BB8983BC;
LABEL_758:
        int v195 = v198[v194];
        goto LABEL_759;
      }
      int v196 = 9;
      goto LABEL_750;
    case 1885889645:
      if (_os_feature_enabled_impl()) {
        goto LABEL_735;
      }
      break;
    case 1885433971:
      if (v11 == 22)
      {
        int v197 = 34;
      }
      else
      {
        if (v2 - 24 >= 6)
        {
          if (v2 - 1 >= 7 && v2 - 9 >= 0xD) {
            int v202 = 7;
          }
          else {
            int v202 = 17;
          }
          unsigned int v206 = v202;
          goto LABEL_717;
        }
        int v197 = 41;
      }
      unsigned int v206 = v197;
      goto LABEL_7;
  }
LABEL_774:
  if (VPLogScope(void)::once != -1) {
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
  }
  float v199 = CALog::LogObjIfEnabled(2, VPLogScope(void)::scope);
  if (v199 && (uint64_t v200 = v199, os_log_type_enabled(v199, OS_LOG_TYPE_DEFAULT)))
  {
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpAspen_v2.cpp";
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 755;
    _os_log_impl(&dword_1BB0CE000, v200, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Couldn't determine route from port type, using default route", (uint8_t *)buf, 0x12u);
    unsigned int v206 = 7;
  }
  else
  {
    unsigned int v206 = 7;
  }
LABEL_717:
  if (!v2)
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    float v192 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      int v193 = (*v192 ? *v192 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v193, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpAspen_v2.cpp";
        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 770;
        _os_log_impl(&dword_1BB0CE000, v193, OS_LOG_TYPE_ERROR, "%25s:%-5d USING UNKNOWN DEVICE ROUTE", (uint8_t *)buf, 0x12u);
      }
    }
    int v5 = 11;
    goto LABEL_6;
  }
LABEL_7:
  *(void *)((char *)this + 84) = 0x766F6963766F3234;
  int v6 = *((_DWORD *)this + 19);
  if ((v6 - 5) > 1)
  {
    if (v6 == 8) {
      goto LABEL_68;
    }
    if (v6 == 4)
    {
      *((_DWORD *)this + 21) = 1986998836;
      if (VoiceProcessorV2::GetChatFlavor(this) == 2)
      {
        int v9 = 1986622319;
      }
      else
      {
        if (VoiceProcessorV2::GetChatFlavor(this) != 1) {
          goto LABEL_14;
        }
        int v9 = 1986884451;
      }
LABEL_13:
      *((_DWORD *)this + 21) = v9;
LABEL_14:
      *((_DWORD *)this + 22) = 1987012963;
      goto LABEL_68;
    }
    if (v6 != 1) {
      goto LABEL_47;
    }
LABEL_18:
    if (*((double *)this + 103) <= 8000.0) {
      int v10 = 1718628408;
    }
    else {
      int v10 = 1718628662;
    }
    *((_DWORD *)this + 21) = v10;
    *((_DWORD *)this + 22) = 1987012963;
    goto LABEL_68;
  }
  unsigned int v7 = *((_DWORD *)this + 18) - 1;
  if (v7 <= 0x2D && dword_1BB8AD344[v7] == 1) {
    goto LABEL_18;
  }
  unsigned int v8 = *((_DWORD *)this + 18) - 1;
  if (v8 > 0x2D || dword_1BB8AD344[v8] == 4)
  {
    int v9 = 1986998836;
    goto LABEL_13;
  }
  unsigned int v17 = *((_DWORD *)this + 18) - 1;
  if (v17 > 0x2D) {
    goto LABEL_45;
  }
  if (dword_1BB8AD344[v17] == 8) {
    goto LABEL_68;
  }
  if ((v6 - 5) <= 1)
  {
LABEL_45:
    unsigned int v18 = *((_DWORD *)this + 18) - 1;
    if (v18 > 0x2D)
    {
LABEL_56:
      *(int32x2_t *)((char *)this + 84) = vdup_n_s32(0x6D697363u);
      goto LABEL_68;
    }
    int v6 = dword_1BB8AD344[v18];
  }
LABEL_47:
  if (v6 != 2 && (v6 || !(*(unsigned int (**)(VoiceProcessorV2 *))(*(void *)this + 488))(this))) {
    goto LABEL_56;
  }
  if (v2 - 41 < 0xC) {
    goto LABEL_53;
  }
  int v19 = **((_DWORD **)this + 292);
  if (v2 <= 0x28 && ((1 << v2) & 0x18000000100) != 0) {
    goto LABEL_53;
  }
  uint64_t v184 = 0;
  char v185 = 0;
  do
  {
    BOOL v186 = dword_1BB8A9780[v184] == v19 && dword_1BB8A9798[v184] == **((_DWORD **)this + 295);
    v185 |= v186;
    ++v184;
  }
  while (v184 != 6);
  if (v185) {
    goto LABEL_53;
  }
  uint64_t v20 = 0x7669646376693234;
  if (v19 > 1885892673)
  {
    if (v19 > 1886545250)
    {
      if (v19 == 1886745455) {
        goto LABEL_53;
      }
      int v187 = 1886545251;
    }
    else
    {
      if (v19 == 1885892674) {
        goto LABEL_53;
      }
      int v187 = 1886154613;
    }
LABEL_696:
    if (v19 != v187) {
      goto LABEL_54;
    }
    goto LABEL_53;
  }
  if (v19 > 1885888866)
  {
    if (v19 == 1885888867) {
      goto LABEL_53;
    }
    int v187 = 1885889645;
    goto LABEL_696;
  }
  if (v19 != 1885433971)
  {
    int v187 = 1885631344;
    goto LABEL_696;
  }
LABEL_53:
  uint64_t v20 = 0x766F6963766F3234;
LABEL_54:
  *(void *)((char *)this + 84) = v20;
  if (VoiceProcessorV2::GetChatFlavor(this) == 2)
  {
    int v21 = 1986622319;
  }
  else
  {
    if (VoiceProcessorV2::GetChatFlavor(this) != 1) {
      goto LABEL_68;
    }
    int v21 = 1986884451;
  }
  *((_DWORD *)this + 21) = v21;
LABEL_68:
  if (VPLogScope(void)::once != -1) {
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
  }
  double v22 = (void *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
  {
    unsigned int v23 = (*v22 ? *v22 : MEMORY[0x1E4F14500]);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)&__p, *((_DWORD *)this + 21));
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpAspen_v2.cpp";
      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1171;
      WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
      *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)&__p;
      _os_log_impl(&dword_1BB0CE000, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> SetVPUseCase: chat category is set to = %s", (uint8_t *)buf, 0x1Cu);
    }
  }
  uint64_t v208 = (char *)this + 12524;
  float32x2_t v24 = (int *)*((void *)this + 1578);
  if (v24 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    uint64_t v25 = VPLogScope(void)::scope;
    CAX4CCString::CAX4CCString((CAX4CCString *)buf, *((_DWORD *)this + 21));
    CALegacyLog::log(v24, 5, v25, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpAspen_v2.cpp", 1171, "SetVPUseCase", "SetVPUseCase: chat category is set to = %s", (const char *)buf);
  }
  if (VPLogScope(void)::once != -1) {
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
  }
  uint64_t v26 = (void *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
  {
    int v27 = (*v26 ? *v26 : MEMORY[0x1E4F14500]);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)&__p, *((_DWORD *)this + 22));
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpAspen_v2.cpp";
      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1172;
      WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
      *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)&__p;
      _os_log_impl(&dword_1BB0CE000, v27, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> SetVPUseCase: main chat category is set to = %s", (uint8_t *)buf, 0x1Cu);
    }
  }
  std::string::size_type v28 = (int *)*((void *)this + 1578);
  if (v28 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    uint64_t v29 = VPLogScope(void)::scope;
    CAX4CCString::CAX4CCString((CAX4CCString *)buf, *((_DWORD *)this + 22));
    CALegacyLog::log(v28, 5, v29, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpAspen_v2.cpp", 1172, "SetVPUseCase", "SetVPUseCase: main chat category is set to = %s", (const char *)buf);
  }
  uint64_t v205 = (char *)this + 16624;
  *((unsigned char *)this + 1676) = 1;
  *((_DWORD *)this + 100) = 0;
  if (*((unsigned char *)this + 479))
  {
    int v30 = *((_DWORD *)this + 153);
    if (v30)
    {
      int v31 = 0;
      do
      {
        int v31 = (2 * v31) | 1;
        --v30;
      }
      while (v30);
      *((_DWORD *)this + 100) = v31;
    }
  }
  v207 = (_OWORD *)((char *)this + 2104);
  VPChannelConfig::SetChConfig((VoiceProcessorV2 *)((char *)this + 424), 1, "main", 0);
  VPChannelConfig::SetChConfig((VoiceProcessorV2 *)((char *)this + 448), 1, "main", 0);
  int v32 = 0;
  int v33 = 0;
  int v34 = 0;
  unsigned int v35 = *((_DWORD *)this + 112);
  int v36 = *((_DWORD *)this + 106);
  do
  {
    if (((1 << v32) & v35) == 0 || ((1 << v32) & v36) == 0) {
      v33 += ((v36 | v35) >> v32) & 1;
    }
    else {
      v34 |= 1 << v33++;
    }
    ++v32;
  }
  while (v32 != 32);
  *((_DWORD *)this + 105) = v34;
  BOOL v212 = 0;
  AppIntegerCFNumberRef Value = CACFPreferencesGetAppIntegerValue(@"BuiltInMicDataSource", @"com.apple.audio.virtualaudio", &v212);
  if (v212)
  {
    int v39 = AppIntegerValue;
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    uint64_t v40 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
    {
      uint64_t v41 = (*v40 ? *v40 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpAspen_v2.cpp";
        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 923;
        WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v39;
        _os_log_impl(&dword_1BB0CE000, v41, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> initializevpparams: VAD-BuiltInMicDataSource = %i", (uint8_t *)buf, 0x18u);
      }
    }
    uint64_t v42 = (int *)*((void *)this + 1578);
    if (v42 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      CALegacyLog::log(v42, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpAspen_v2.cpp", 923, "InitializeVPParams", "initializevpparams: VAD-BuiltInMicDataSource = %i", v39);
    }
  }
  BOOL v212 = 0;
  int v43 = CACFPreferencesGetAppIntegerValue(@"BuiltInMicSelection", @"com.apple.audio.virtualaudio", &v212);
  if (v212)
  {
    int v44 = v43;
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    uint64_t v45 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
    {
      uint64_t v46 = (*v45 ? *v45 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpAspen_v2.cpp";
        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 926;
        WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v44;
        _os_log_impl(&dword_1BB0CE000, v46, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> initializevpparams: VAD-BuiltInMicSelection = 0x%x", (uint8_t *)buf, 0x18u);
      }
    }
    uint64_t v47 = (int *)*((void *)this + 1578);
    if (v47 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      CALegacyLog::log(v47, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpAspen_v2.cpp", 926, "InitializeVPParams", "initializevpparams: VAD-BuiltInMicSelection = 0x%x", v44);
    }
  }
  VoiceProcessorV2::VPEchoProcessingParams::Reset((VoiceProcessorV2 *)((char *)this + 4360));
  int ReferenceSignalInternally = VoiceProcessorV2::ShouldGenerateReferenceSignalInternally(this);
  *((_DWORD *)this + 1129) = ReferenceSignalInternally;
  if ((ReferenceSignalInternally & 1) == 0 && *v208)
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    uint64_t v49 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(4, VPLogScope(void)::scope, 0))
    {
      uint64_t v50 = (*v49 ? *v49 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpAspen_v2.cpp";
        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 943;
        _os_log_impl(&dword_1BB0CE000, v50, OS_LOG_TYPE_INFO, "%25s:%-5d  <vp> dl mix fmt & hw ref fmt were out-of-sync..re-setting while using external ref", (uint8_t *)buf, 0x12u);
      }
    }
    uint64_t v51 = (int *)*((void *)this + 1578);
    if (v51 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      CALegacyLog::log(v51, 4, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpAspen_v2.cpp", 943, "InitializeVPParams", "dl mix fmt & hw ref fmt were out-of-sync..re-setting while using external ref");
    }
    *uint64_t v208 = 0;
  }
  if (*((void *)this + 292) != *((void *)this + 293) && *((void *)this + 295) != *((void *)this + 296))
  {
    if (v2)
    {
      if ((*(unsigned int (**)(VoiceProcessorV2 *))(*(void *)this + 520))(this))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        uint64_t v52 = (void *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
        {
          uint64_t v53 = (*v52 ? *v52 : MEMORY[0x1E4F14500]);
          if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpAspen_v2.cpp";
            WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 961;
            _os_log_impl(&dword_1BB0CE000, v53, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Tuning loading is bypassed for this device", (uint8_t *)buf, 0x12u);
          }
        }
        uint64_t v54 = (int *)*((void *)this + 1578);
        if (v54 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          CALegacyLog::log(v54, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpAspen_v2.cpp", 961, "InitializeVPParams", "Tuning loading is bypassed for this device");
        }
      }
      else
      {
        (*(void (**)(VoiceProcessorV2 *))(*(void *)this + 512))(this);
      }
    }
    else
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      uint64_t v55 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        uint64_t v56 = (*v55 ? *v55 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpAspen_v2.cpp";
          WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 955;
          _os_log_impl(&dword_1BB0CE000, v56, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> Hey I just met you, and this is crazy, but here's my component 'Audio - DSP Software', so file a radar maybe.", (uint8_t *)buf, 0x12u);
        }
      }
      uint64_t v57 = (int *)*((void *)this + 1578);
      if (v57 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log(v57, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpAspen_v2.cpp", 955, "InitializeVPParams", "Hey I just met you, and this is crazy, but here's my component 'Audio - DSP Software', so file a radar maybe.");
      }
      VoiceProcessorV2::TryLoadingTuningPlists(this, "Generic", "VPV3", "gen", 0x6576696Cu, 0x76696C65u, 0x666F756Cu);
    }
    (*(void (**)(VoiceProcessorV2 *))(*(void *)this + 312))(this);
    (*(void (**)(VoiceProcessorV2 *))(*(void *)this + 400))(this);
    (*(void (**)(VoiceProcessorV2 *))(*(void *)this + 464))(this);
    VoiceProcessorV2::DispatchVPRouteSetup(this, v206, v2);
    HIBYTE(v218) = 0;
    LODWORD(v209.__r_.__value_.__l.__data_) = -1;
    VoiceProcessorV2::ReadDefaultsOverride(@"vp_mode", (const __CFString *)3, (BOOL *)&v209, (BOOL *)&v218 + 1, v58);
    if (HIBYTE(v218))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      uint64_t v60 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        uint64_t v61 = (*v60 ? *v60 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
        {
          int v62 = *((_DWORD *)this + 19);
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpDebug_DefaultsOverride.cpp";
          WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 146;
          WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v209.__r_.__value_.__l.__data_;
          LOWORD(buf[1].__r_.__value_.__l.__data_) = 1024;
          *(_DWORD *)&buf[1].__r_.__value_.__s.__data_[2] = v62;
          _os_log_impl(&dword_1BB0CE000, v61, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> DEFAULTS OVERRIDE: vp mode %i (was %i)", (uint8_t *)buf, 0x1Eu);
        }
      }
      __int16 v63 = (int *)*((void *)this + 1578);
      if (v63 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log(v63, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_DefaultsOverride.cpp", 146, "ApplyDebugModeDefaultsOverrides", "DEFAULTS OVERRIDE: vp mode %i (was %i)", LODWORD(v209.__r_.__value_.__l.__data_), *((_DWORD *)this + 19));
      }
      (*(void (**)(VoiceProcessorV2 *, void))(*(void *)this + 96))(this, LODWORD(v209.__r_.__value_.__l.__data_));
    }
    __int16 v218 = 0;
    VoiceProcessorV2::ReadDefaultsOverride(@"vp_disable_gating", 0, (BOOL *)&v218, (BOOL *)&v218 + 1, v59);
    if (HIBYTE(v218)) {
      *((unsigned char *)this + 1676) = (_BYTE)v218 == 0;
    }
    VoiceProcessorV2::ReadAndApplyDefaultsOverride(this, @"vp_bypass", 0, (float *)this + 118, v64);
    VoiceProcessorV2::ReadAndApplyDefaultsOverride(this, @"vp_clear_ref", 0, (float *)this + 3990, v65);
    VoiceProcessorV2::ReadAndApplyDefaultsOverride(this, @"vp_mute_output", 0, (float *)this + 520, v66);
    VoiceProcessorV2::ReadAndApplyDefaultsOverride(this, @"vp_mute_downlink_voice", 0, (float *)((char *)this + 2082), v67);
    VoiceProcessorV2::ReadAndApplyDefaultsOverride(this, @"vp_disable_vp", 0, (float *)((char *)this + 2083), v68);
    char v69 = (char *)this + 2085;
    VoiceProcessorV2::ReadAndApplyDefaultsOverride(this, @"vp_hw_has_vp", 0, (float *)((char *)this + 2085), v70);
    VoiceProcessorV2::ReadAndApplyDefaultsOverride(this, @"vp_vocoder_sample_rate", 2, (float *)this + 550, v71);
    VoiceProcessorV2::ReadAndApplyDefaultsOverride(this, @"vp_vocoder_type_int", 1, (float *)this + 549, v72);
    VoiceProcessorV2::ReadAndApplyDefaultsOverride(this, @"vp_uplink_proto", 1, (float *)this + 3148, v73);
    VoiceProcessorV2::ReadAndApplyDefaultsOverride(this, @"vp_downlink_proto", 1, (float *)this + 3149, v74);
    HIBYTE(v218) = 0;
    unsigned int v217 = 0;
    VoiceProcessorV2::ReadDefaultsOverride(@"vp_beam_direction", (const __CFString *)1, (BOOL *)&v217, (BOOL *)&v218 + 1, v75);
    if (HIBYTE(v218))
    {
      unsigned int v77 = v217;
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      unint64_t v78 = (void *)VPLogScope(void)::scope;
      if (v77 > 1)
      {
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
        {
          std::string v86 = (*v78 ? *v78 : MEMORY[0x1E4F14500]);
          if (os_log_type_enabled(v86, OS_LOG_TYPE_DEBUG))
          {
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpDebug_DefaultsOverride.cpp";
            WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 182;
            _os_log_impl(&dword_1BB0CE000, v86, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> DEFAULTS OVERRIDE: beam former directio unsupported", (uint8_t *)buf, 0x12u);
          }
        }
        float v87 = (int *)*((void *)this + 1578);
        if (v87 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          CALegacyLog::log(v87, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_DefaultsOverride.cpp", 182, "ApplyDebugModeDefaultsOverrides", "DEFAULTS OVERRIDE: beam former directio unsupported");
        }
      }
      else
      {
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
        {
          uint64_t v79 = (*v78 ? *v78 : MEMORY[0x1E4F14500]);
          if (os_log_type_enabled(v79, OS_LOG_TYPE_DEBUG))
          {
            float v80 = "top back mic";
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpDebug_DefaultsOverride.cpp";
            int v81 = *((_DWORD *)this + 684);
            if (v217) {
              uint64_t v82 = "top back mic";
            }
            else {
              uint64_t v82 = "top front mic";
            }
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
            WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
            if (!v81) {
              float v80 = "top front mic";
            }
            *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 178;
            WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
            *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v82;
            WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
            *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)v80;
            _os_log_impl(&dword_1BB0CE000, v79, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> DEFAULTS OVERRIDE:beam former direction = %s (was %s)", (uint8_t *)buf, 0x26u);
          }
        }
        std::string v83 = (int *)*((void *)this + 1578);
        if (v83 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          float v84 = "top back mic";
          if (v217) {
            __int16 v85 = "top back mic";
          }
          else {
            __int16 v85 = "top front mic";
          }
          if (!*((_DWORD *)this + 684)) {
            float v84 = "top front mic";
          }
          CALegacyLog::log(v83, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_DefaultsOverride.cpp", 178, "ApplyDebugModeDefaultsOverrides", "DEFAULTS OVERRIDE:beam former direction = %s (was %s)", v85, v84);
        }
        *((_DWORD *)this + 684) = v217;
      }
    }
    unsigned int v216 = 0;
    HIBYTE(v218) = 0;
    VoiceProcessorV2::ReadDefaultsOverride(@"vp_mic_selector_mode", (const __CFString *)1, (BOOL *)&v216, (BOOL *)&v218 + 1, v76);
    if (HIBYTE(v218))
    {
      if (v216 < 5)
      {
        AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 5416, 0, (float)v216);
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        float v92 = (void *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
        {
          float v93 = (*v92 ? *v92 : MEMORY[0x1E4F14500]);
          if (os_log_type_enabled(v93, OS_LOG_TYPE_DEBUG))
          {
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpDebug_DefaultsOverride.cpp";
            WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 194;
            WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
            HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v216;
            _os_log_impl(&dword_1BB0CE000, v93, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> InitializeVPParams: MicSelector mode override = %d", (uint8_t *)buf, 0x18u);
          }
        }
        float v94 = (int *)*((void *)this + 1578);
        if (v94 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          CALegacyLog::log(v94, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_DefaultsOverride.cpp", 194, "ApplyDebugModeDefaultsOverrides", "InitializeVPParams: MicSelector mode override = %d", v216);
        }
      }
      else
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        __float2 v89 = (void *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
        {
          float v90 = (*v89 ? *v89 : MEMORY[0x1E4F14500]);
          if (os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG))
          {
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpDebug_DefaultsOverride.cpp";
            WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 191;
            WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
            HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v216;
            _os_log_impl(&dword_1BB0CE000, v90, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> InitializeVPParams: MicSelector mode override, invalid mode = %d, using default mode", (uint8_t *)buf, 0x18u);
          }
        }
        float v91 = (int *)*((void *)this + 1578);
        if (v91 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          CALegacyLog::log(v91, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_DefaultsOverride.cpp", 191, "ApplyDebugModeDefaultsOverrides", "InitializeVPParams: MicSelector mode override, invalid mode = %d, using default mode", v216);
        }
      }
    }
    BOOL v215 = 0;
    HIBYTE(v218) = 0;
    VoiceProcessorV2::ReadDefaultsOverride(@"vp_agc_calibration_mode", 0, &v215, (BOOL *)&v218 + 1, v88);
    if (HIBYTE(v218))
    {
      float v96 = 0.0;
      if (v215) {
        float v96 = 1.0;
      }
      AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 6280, 41, v96);
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      float v97 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        float v98 = (*v97 ? *v97 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v98, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpDebug_DefaultsOverride.cpp";
          WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 204;
          WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v215;
          _os_log_impl(&dword_1BB0CE000, v98, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> InitializeVPParams: AGC calibration mode override = %d", (uint8_t *)buf, 0x18u);
        }
      }
      float v99 = (int *)*((void *)this + 1578);
      if (v99 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log(v99, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_DefaultsOverride.cpp", 204, "ApplyDebugModeDefaultsOverrides", "InitializeVPParams: AGC calibration mode override = %d", v215);
      }
    }
    VoiceProcessorV2::ReadAndApplyDefaultsOverride(this, @"vp_downlink_mix_gain", 2, (float *)this + 1115, v95);
    HIBYTE(v218) = 0;
    *(_DWORD *)float v214 = 0;
    VoiceProcessorV2::ReadDefaultsOverride(@"vp_downlink_enable_softclipi", (const __CFString *)1, v214, (BOOL *)&v218 + 1, v100);
    if (HIBYTE(v218))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      __float2 v102 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        CFStringRef v103 = (*v102 ? *v102 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v103, OS_LOG_TYPE_DEBUG))
        {
          BOOL v104 = "NO";
          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpDebug_DefaultsOverride.cpp";
          uint64_t v105 = *((void *)this + 1112);
          if (*(_DWORD *)v214) {
            float v106 = "NO";
          }
          else {
            float v106 = "YES";
          }
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
          WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
          if ((v105 & 0x1000000000) != 0) {
            BOOL v104 = "YES";
          }
          *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 215;
          WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
          *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v106;
          WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
          *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)v104;
          _os_log_impl(&dword_1BB0CE000, v103, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> DEFAULTS OVERRIDE: enable downlink SCi %s (was %s)", (uint8_t *)buf, 0x26u);
        }
      }
      __float2 v107 = (int *)*((void *)this + 1578);
      if (v107 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        float v108 = "NO";
        if (*(_DWORD *)v214) {
          float v109 = "NO";
        }
        else {
          float v109 = "YES";
        }
        if ((*((void *)this + 1112) & 0x1000000000) != 0) {
          float v108 = "YES";
        }
        CALegacyLog::log(v107, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_DefaultsOverride.cpp", 215, "ApplyDebugModeDefaultsOverrides", "DEFAULTS OVERRIDE: enable downlink SCi %s (was %s)", v109, v108);
      }
      *((void *)this + 1112) |= 0x1000000000uLL;
    }
    HIBYTE(v218) = 0;
    int v213 = 0;
    VoiceProcessorV2::ReadDefaultsOverride(@"vp_downlink_enable_softclip", (const __CFString *)1, (BOOL *)&v213, (BOOL *)&v218 + 1, v101);
    if (HIBYTE(v218))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      float v111 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        uint64_t v112 = (*v111 ? *v111 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v112, OS_LOG_TYPE_DEBUG))
        {
          float v113 = "NO";
          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpDebug_DefaultsOverride.cpp";
          uint64_t v114 = *((void *)this + 1112);
          if (v213) {
            char v115 = "NO";
          }
          else {
            char v115 = "YES";
          }
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
          WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
          if ((v114 & 0x1000000000000000) != 0) {
            float v113 = "YES";
          }
          *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 225;
          WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
          *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v115;
          WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
          *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)v113;
          _os_log_impl(&dword_1BB0CE000, v112, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> DEFAULTS OVERRIDE: enable downlink SC %s (was %s)", (uint8_t *)buf, 0x26u);
        }
      }
      int v116 = (int *)*((void *)this + 1578);
      if (v116 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        float v117 = "NO";
        if (v213) {
          vDSP_Length v118 = "NO";
        }
        else {
          vDSP_Length v118 = "YES";
        }
        if ((*((void *)this + 1112) & 0x1000000000000000) != 0) {
          float v117 = "YES";
        }
        CALegacyLog::log(v116, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_DefaultsOverride.cpp", 225, "ApplyDebugModeDefaultsOverrides", "DEFAULTS OVERRIDE: enable downlink SC %s (was %s)", v118, v117);
      }
      *((void *)this + 1112) |= 0x1000000000000000uLL;
    }
    HIBYTE(v218) = 0;
    cf[0] = 0;
    VoiceProcessorV2::ReadDefaultsOverride(@"vp_mic_trim_gains", (const __CFString *)4, (BOOL *)cf, (BOOL *)&v218 + 1, v110);
    if (HIBYTE(v218))
    {
      CFTypeRef v119 = cf[0];
      if (cf[0])
      {
        CFRetain(cf[0]);
        applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)buf, v119);
        if (buf[0].__r_.__value_.__r.__words[0])
        {
          applesauce::CF::convert_as<std::vector<float>,0>((uint64_t)&__p, (const __CFArray *)buf[0].__r_.__value_.__l.__data_);
          if (buf[0].__r_.__value_.__r.__words[0]) {
            CFRelease(buf[0].__r_.__value_.__l.__data_);
          }
          int v120 = v220;
          if (v220)
          {
            int v204 = v220;
            float v121 = (void *)((char *)this + 2096);
            int v122 = (void *)*((void *)this + 262);
            if (v122)
            {
              *((void *)this + 263) = v122;
              operator delete(v122);
              void *v121 = 0;
              *((void *)this + 263) = 0;
              *((void *)this + 264) = 0;
            }
            std::string::size_type v123 = __p.__r_.__value_.__r.__words[0];
            *((void *)this + 262) = __p.__r_.__value_.__r.__words[0];
            std::string::size_type size = __p.__r_.__value_.__l.__size_;
            _OWORD *v207 = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
            memset(&__p, 0, sizeof(__p));
            if (size != v123)
            {
              unint64_t v125 = 0;
              do
              {
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                __float2 v126 = (void *)VPLogScope(void)::scope;
                if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
                {
                  __float2 v127 = (*v126 ? *v126 : MEMORY[0x1E4F14500]);
                  if (os_log_type_enabled(v127, OS_LOG_TYPE_DEBUG))
                  {
                    double v128 = *(float *)(*v121 + 4 * v125);
                    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
                    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpDebug_DefaultsOverride.cpp";
                    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 238;
                    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2048;
                    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = v125;
                    WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2048;
                    *(double *)((char *)buf[1].__r_.__value_.__r.__words + 6) = v128;
                    _os_log_impl(&dword_1BB0CE000, v127, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> DEFAULTS OVERRIDE: mic trim gain(ch-%lu) = %f dB", (uint8_t *)buf, 0x26u);
                  }
                }
                float v129 = (int *)*((void *)this + 1578);
                if (v129 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
                {
                  if (VPLogScope(void)::once != -1) {
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                  }
                  CALegacyLog::log(v129, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_DefaultsOverride.cpp", 238, "ApplyDebugModeDefaultsOverrides", "DEFAULTS OVERRIDE: mic trim gain(ch-%lu) = %f dB", v125, *(float *)(*v121 + 4 * v125));
                }
                ++v125;
              }
              while (v125 < (uint64_t)(*(void *)v207 - *v121) >> 2);
            }
            char v69 = (char *)this + 2085;
            int v120 = v204;
            if (*((unsigned char *)this + 15961)) {
              VoiceProcessorV2::PListWriteMicTrimGainParameters(this, (float **)this + 262);
            }
          }
          if (cf[0]) {
            CFRelease(cf[0]);
          }
          cf[0] = 0;
          if (v120 && __p.__r_.__value_.__r.__words[0]) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          goto LABEL_394;
        }
      }
      else
      {
        buf[0].__r_.__value_.__r.__words[0] = 0;
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
LABEL_394:
    if (*v69)
    {
      (*(void (**)(VoiceProcessorV2 *))(*(void *)this + 320))(this);
      *((void *)this + 584) |= 4uLL;
      (*(void (**)(VoiceProcessorV2 *))(*(void *)this + 408))(this);
      atomic_store(0x3F800000u, (unsigned int *)this + 562);
      *((_DWORD *)this + 563) = 0;
    }
    (*(void (**)(VoiceProcessorV2 *))(*(void *)this + 448))(this);
    (*(void (**)(VoiceProcessorV2 *))(*(void *)this + 440))(this);
    if (VoiceProcessorV2::GetChatFlavor(this) == 1) {
      (*(void (**)(VoiceProcessorV2 *))(*(void *)this + 456))(this);
    }
    if ((*(unsigned int (**)(VoiceProcessorV2 *))(*(void *)this + 112))(this) >= 7)
    {
      if (*((unsigned char *)this + 2244)) {
        BOOL v130 = 1;
      }
      else {
        BOOL v130 = *v205 != 0;
      }
      (*(void (**)(VoiceProcessorV2 *, BOOL))(*(void *)this + 432))(this, v130);
    }
    if ((*((_DWORD *)this + 18) - 1) <= 0x25 && *((unsigned char *)this + 2245)) {
      (*(void (**)(VoiceProcessorV2 *))(*(void *)this + 424))(this);
    }
    if (!*((unsigned char *)this + 2244))
    {
      unsigned int OutputPortProductIDForPME = VoiceProcessorV2::GetOutputPortProductIDForPME(this);
      if (OutputPortProductIDForPME >= 0x200A && OutputPortProductIDForPME != 8208) {
        *((void *)this + 1112) |= 0x200000000000uLL;
      }
    }
    unsigned int v132 = **((_DWORD **)this + 292) - 1885892674;
    if (v132 > 0x35 || ((1 << v132) & 0x20000100000001) == 0)
    {
LABEL_432:
      (*(void (**)(VoiceProcessorV2 *))(*(void *)this + 552))(this);
      CFDictionaryRef v140 = (const __CFDictionary *)*((void *)this + 276);
      if (v140) {
        VoiceProcessorV2::ApplyCustomTelephonyDSPOverrides(this, v140, 1);
      }
      CFDictionaryRef v141 = (const __CFDictionary *)*((void *)this + 277);
      if (v141) {
        VoiceProcessorV2::ApplyCustomTelephonyDSPOverrides(this, v141, 0);
      }
      if (*((unsigned char *)this + 2083))
      {
        buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)this + 4664;
        LODWORD(buf[0].__r_.__value_.__r.__words[1]) = 0;
        std::__fill_n[abi:ne180100]<false,std::__bitset<2ul,72ul>>((uint64_t)buf);
        *((void *)this + 1112) |= 0x28000000uLL;
      }
      if (v206 <= 9 && ((1 << v206) & 0x360) != 0)
      {
        AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 7024, 3, 0.0);
        AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 7024, 4, 0.0);
        AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 7024, 5, 0.0);
        AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 7024, 6, 0.0);
        AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 7024, 7, 0.0);
        AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 7024, 8, 0.0);
        AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 7024, 9, 0.0);
        AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 7024, 10, 0.0);
        AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 7024, 11, 0.0);
      }
      if ((*((_DWORD *)this + 19) - 5) <= 1)
      {
        uint64_t v142 = *((void *)this + 583);
        if ((v142 & 0x20000000000000) != 0 && (*((unsigned char *)this + 4686) & 0x20) != 0 && *((void *)this + 400))
        {
          AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 5968, 0, -18.0);
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          uint64_t v143 = (void *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
          {
            unsigned int v144 = (*v143 ? *v143 : MEMORY[0x1E4F14500]);
            if (os_log_type_enabled(v144, OS_LOG_TYPE_DEBUG))
            {
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"VoiceProcessor_v2.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 2665;
              WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2048;
              *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = 0xC032000000000000;
              WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
              *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"(UL-)OCNS";
              _os_log_impl(&dword_1BB0CE000, v144, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> override noise suppression level to %f for %s AU", (uint8_t *)buf, 0x26u);
            }
          }
          float v145 = (int *)*((void *)this + 1578);
          if (v145 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            CALegacyLog::log(v145, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 2665, "ApplyNSTuningOverride", "override noise suppression level to %f for %s AU", -18.0, "(UL-)OCNS");
          }
        }
        else if ((v142 & 0x40000000000000) != 0 && (*((unsigned char *)this + 4686) & 0x40) != 0 && *((void *)this + 401))
        {
          AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 5992, 0, -18.0);
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          float v146 = (void *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
          {
            float v147 = (*v146 ? *v146 : MEMORY[0x1E4F14500]);
            if (os_log_type_enabled(v147, OS_LOG_TYPE_DEBUG))
            {
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"VoiceProcessor_v2.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 2670;
              WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2048;
              *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = 0xC032000000000000;
              WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
              *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"(UL-)OCNSV4";
              _os_log_impl(&dword_1BB0CE000, v147, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> override noise suppression level to %f for %s AU", (uint8_t *)buf, 0x26u);
            }
          }
          float v148 = (int *)*((void *)this + 1578);
          if (v148 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            CALegacyLog::log(v148, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 2670, "ApplyNSTuningOverride", "override noise suppression level to %f for %s AU", -18.0, "(UL-)OCNSV4");
          }
        }
        else if ((v142 & 0x80000000000000) != 0 && (*((unsigned char *)this + 4686) & 0x80) != 0 && *((void *)this + 402))
        {
          AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 6016, 1, -24.0);
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          float v149 = (void *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
          {
            float v150 = (*v149 ? *v149 : MEMORY[0x1E4F14500]);
            if (os_log_type_enabled(v150, OS_LOG_TYPE_DEBUG))
            {
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"VoiceProcessor_v2.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 2676;
              WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2048;
              *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = 0xC038000000000000;
              WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
              *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"(UL-)MagDiffNS";
              _os_log_impl(&dword_1BB0CE000, v150, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> override noise suppression level to %f for %s AU", (uint8_t *)buf, 0x26u);
            }
          }
          float v151 = (int *)*((void *)this + 1578);
          if (v151 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            CALegacyLog::log(v151, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 2676, "ApplyNSTuningOverride", "override noise suppression level to %f for %s AU", -24.0, "(UL-)MagDiffNS");
          }
        }
        else if ((v142 & 0x100000000000000) != 0 && (*((unsigned char *)this + 4687) & 1) != 0 && *((void *)this + 403))
        {
          AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 6040, 1, -24.0);
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          float v152 = (void *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
          {
            uint64_t v153 = (*v152 ? *v152 : MEMORY[0x1E4F14500]);
            if (os_log_type_enabled(v153, OS_LOG_TYPE_DEBUG))
            {
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"VoiceProcessor_v2.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 2681;
              WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2048;
              *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = 0xC038000000000000;
              WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
              *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"(UL-)MagDiffNSV4";
              _os_log_impl(&dword_1BB0CE000, v153, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> override noise suppression level to %f for %s AU", (uint8_t *)buf, 0x26u);
            }
          }
          BOOL v154 = (int *)*((void *)this + 1578);
          if (v154 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            CALegacyLog::log(v154, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 2681, "ApplyNSTuningOverride", "override noise suppression level to %f for %s AU", -24.0, "(UL-)MagDiffNSV4");
          }
        }
      }
      unsigned int v155 = *((_DWORD *)this + 18);
      if ((*((unsigned char *)this + 4671) & 1) != 0 && (v155 - 9 < 0xD || v155 <= 7 && ((1 << v155) & 0xB6) != 0))
      {
        int v156 = **((_DWORD **)this + 292);
        if (v156 == 1886545251 || v156 == 1885888867)
        {
          v209.__r_.__value_.__s.__data_[0] = 0;
          unsigned int IsAttached = GetVPSmartCoverIsAttached((BOOL *)&v209);
          if (IsAttached)
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            uint64_t v158 = (void *)VPLogScope(void)::scope;
            if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
            {
              float v159 = (*v158 ? *v158 : MEMORY[0x1E4F14500]);
              if (os_log_type_enabled(v159, OS_LOG_TYPE_ERROR))
              {
                CAX4CCString::CAX4CCString((CAX4CCString *)&__p, IsAttached);
                LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"VoiceProcessor_v2.cpp";
                WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 2735;
                WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)&__p;
                _os_log_impl(&dword_1BB0CE000, v159, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> couldn't query smart cover state: error = %s", (uint8_t *)buf, 0x1Cu);
              }
            }
            float v160 = (int *)*((void *)this + 1578);
            if (v160 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
            {
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              uint64_t v161 = VPLogScope(void)::scope;
              CAX4CCString::CAX4CCString((CAX4CCString *)buf, IsAttached);
              CALegacyLog::log(v160, 1, v161, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 2735, "ApplyNSSmartCoverOverride", "couldn't query smart cover state: error = %s", (const char *)buf);
            }
          }
          else
          {
            int v162 = v209.__r_.__value_.__s.__data_[0];
            if (*((unsigned char *)this + 15961))
            {
              if (*((void *)this + 1892))
              {
                buf[0].__r_.__value_.__r.__words[0] = 0;
                VoiceProcessorV2::PListCopyDictionaryForWrite(this, (__CFDictionary **)buf);
                float v163 = (const void *)buf[0].__r_.__value_.__r.__words[0];
                if (buf[0].__r_.__value_.__r.__words[0])
                {
                  LODWORD(cf[0]) = v162;
                  VPGetPropsPListStringForKey((applesauce::CF::StringRef *)&__p, 58);
                  WriteItemToDictionary((__CFDictionary **)buf, (const void **)&__p.__r_.__value_.__l.__data_, 1, 4uLL, (const char *)cf);
                  if (__p.__r_.__value_.__r.__words[0]) {
                    CFRelease(__p.__r_.__value_.__l.__data_);
                  }
                  CFRelease(v163);
                }
              }
            }
            if (v162)
            {
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              uint64_t v164 = (void *)VPLogScope(void)::scope;
              if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
              {
                float v165 = (*v164 ? *v164 : MEMORY[0x1E4F14500]);
                if (os_log_type_enabled(v165, OS_LOG_TYPE_DEFAULT))
                {
                  LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
                  *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"VoiceProcessor_v2.cpp";
                  WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 2724;
                  _os_log_impl(&dword_1BB0CE000, v165, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> smart cover case detected", (uint8_t *)buf, 0x12u);
                }
              }
              float v166 = (int *)*((void *)this + 1578);
              if (v166 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
              {
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                CALegacyLog::log(v166, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 2724, "ApplyNSSmartCoverOverride", "smart cover case detected");
              }
              AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 6040, 0, 1.0);
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              float v167 = (void *)VPLogScope(void)::scope;
              if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
              {
                float v168 = (*v167 ? *v167 : MEMORY[0x1E4F14500]);
                if (os_log_type_enabled(v168, OS_LOG_TYPE_DEFAULT))
                {
                  LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
                  *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"VoiceProcessor_v2.cpp";
                  WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 2730;
                  WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
                  HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = 1;
                  LOWORD(buf[1].__r_.__value_.__l.__data_) = 2080;
                  *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 2) = (std::string::size_type)"(UL-)MagDiffNSV4";
                  _os_log_impl(&dword_1BB0CE000, v168, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> override noise suppression mode to %u for %s AU", (uint8_t *)buf, 0x22u);
                }
              }
              float v169 = (int *)*((void *)this + 1578);
              if (v169 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
              {
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                CALegacyLog::log(v169, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 2730, "ApplyNSSmartCoverOverride", "override noise suppression mode to %u for %s AU", 1, "(UL-)MagDiffNSV4");
              }
            }
          }
          unsigned int v155 = *((_DWORD *)this + 18);
        }
      }
      if ((v155 - 9 < 0xD || v155 <= 7 && ((1 << v155) & 0xB0) != 0) && **((_DWORD **)this + 295) == 1886216809) {
        *((void *)this + 584) |= 0x10uLL;
      }
      uint64_t v170 = (void *)((char *)this + 4664);
      if (*((unsigned char *)this + 2245))
      {
        if (VoiceProcessorV2::GetFarEndVoiceMixChannelCount(this) >= 2)
        {
          *((void *)this + 583) &= 0xFFFFFFFFF3FFFFFFLL;
          uint64_t v171 = *((void *)this + 1112);
          *((void *)this + 1112) = v171 & 0xFFFFFFFFFFFFFFBFLL;
          if ((*((_DWORD *)this + 18) - 22) <= 7)
          {
            if (**((_DWORD **)this + 292) == 1886613611 && !*((unsigned char *)this + 2244)) {
              unint64_t v172 = v171 & 0xFFFFFFFFFEFFFFBFLL | 0x1000000;
            }
            else {
              unint64_t v172 = v171 & 0xFFFFFFFFFEFFFFBFLL;
            }
            *((void *)this + 1112) = v172;
          }
        }
      }
      if (*((unsigned char *)this + 2244) || *v205) {
        *v170 &= 0xFFFFFFFFF3DFFFFFLL;
      }
      if (*((unsigned char *)this + 4576))
      {
        CFStringGetCString(*((CFStringRef *)this + 568), (char *)buf, 128, 0x600u);
        for (unint64_t i = 0; i != 72; ++i)
        {
          if (((*(void *)((char *)v170 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i) & 1) != 0 && i != 63) {
            VoiceProcessorV2::GetAndPopulateAUTuningPreset(this, i, 1, (char *)buf);
          }
        }
        VoiceProcessorV2::GetAndPopulateAuxAUTuningPreset(this, 1, (char *)buf);
        CFStringGetCString(*((CFStringRef *)this + 570), (char *)buf, 128, 0x600u);
        for (uint64_t j = 0; j != 62; ++j)
        {
          if ((*((void *)this + 1112) >> j) & 1) != 0 && ((0x17FFFFFFC7FFFFFFuLL >> j)) {
            VoiceProcessorV2::GetAndPopulateAUTuningPreset(this, j, 0, (char *)buf);
          }
        }
        VoiceProcessorV2::GetAndPopulateAuxAUTuningPreset(this, 0, (char *)buf);
      }
      (*(void (**)(VoiceProcessorV2 *, void))(*(void *)this + 536))(this, *((unsigned int *)this + 596));
      VoiceProcessorV2::GetHardwareModelNameForTuning(&__p, (uint64_t)this);
      VoiceProcessorV2::GetRouteSpecificGenericTuningSubDir(buf, (uint64_t)this);
      if (buf[1].__r_.__value_.__s.__data_[0])
      {
        if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v209, buf[0].__r_.__value_.__l.__data_, buf[0].__r_.__value_.__l.__size_);
        }
        else {
          std::string v209 = buf[0];
        }
        BOOL v175 = std::string::insert(&v209, 0, "/", 1uLL);
        long long v176 = *(_OWORD *)&v175->__r_.__value_.__l.__data_;
        int64_t v211 = v175->__r_.__value_.__r.__words[2];
        *(_OWORD *)CFTypeRef cf = v176;
        v175->__r_.__value_.__l.__size_ = 0;
        v175->__r_.__value_.__r.__words[2] = 0;
        v175->__r_.__value_.__r.__words[0] = 0;
        if (v211 >= 0) {
          float v177 = cf;
        }
        else {
          float v177 = (CFTypeRef *)cf[0];
        }
        if (v211 >= 0) {
          std::string::size_type v178 = HIBYTE(v211);
        }
        else {
          std::string::size_type v178 = (std::string::size_type)cf[1];
        }
        std::string::append(&__p, (const std::string::value_type *)v177, v178);
        if (SHIBYTE(v211) < 0) {
          operator delete((void *)cf[0]);
        }
        if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v209.__r_.__value_.__l.__data_);
        }
        if (buf[1].__r_.__value_.__s.__data_[0] && SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf[0].__r_.__value_.__l.__data_);
        }
      }
      VoiceProcessorV2::GetDeviceCodeNameForTuning((VoiceProcessorV2 *)buf, (uint64_t)this);
      int v180 = SHIBYTE(buf[0].__r_.__value_.__r.__words[2]);
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      {
        if (!buf[0].__r_.__value_.__l.__size_) {
          goto LABEL_625;
        }
        BOOL v181 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
      }
      else
      {
        if (!*((unsigned char *)&buf[0].__r_.__value_.__s + 23)) {
          goto LABEL_625;
        }
        BOOL v181 = buf;
      }
      if (!strcmp((const char *)v181, "gen"))
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if (v180 >= 0) {
          uint64_t v183 = buf;
        }
        else {
          uint64_t v183 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
        }
LABEL_639:
        VoiceProcessorV2::LoadAUDataPreset(this, (const char *)p_p, (char *)v183, v179);
        if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf[0].__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        return;
      }
LABEL_625:
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (v180 >= 0) {
        uint64_t v183 = buf;
      }
      else {
        uint64_t v183 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
      }
      if (*((unsigned char *)this + 60)) {
        uint64_t v183 = 0;
      }
      goto LABEL_639;
    }
    if (objc_opt_class())
    {
      float v133 = (void *)MEMORY[0x1C185DEF0]();
      id v134 = objc_alloc_init(MEMORY[0x1E4F4E7C8]);
      uint64_t v135 = [v134 getPreferenceFor:*MEMORY[0x1E4F4E7B8]];
      if ([v135 BOOLValue])
      {
        uint64_t v136 = [v134 getPreferenceFor:*MEMORY[0x1E4F4E7C0]];

        if (v136)
        {
          unsigned int v137 = [v136 intValue];
          uint64_t v135 = v136;
        }
        else
        {
          uint64_t v135 = 0;
          unsigned int v137 = 100;
        }
      }
      else
      {
        unsigned int v137 = 0;
      }
    }
    else
    {
      unsigned int v137 = 0;
    }
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    if (VPLogScope(void)::scope)
    {
      unsigned int v138 = *(id *)VPLogScope(void)::scope;
      if (!v138)
      {
LABEL_429:
        *((float *)this + 582) = (float)v137;
        if (*((_DWORD *)this + 19) == 3 && v137)
        {
          *((void *)this + 1112) |= 0x4400000000000uLL;
          (*(void (**)(VoiceProcessorV2 *))(*(void *)this + 512))(this);
        }
        goto LABEL_432;
      }
    }
    else
    {
      unsigned int v138 = MEMORY[0x1E4F14500];
      id v139 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v138, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpADASManagerInterface.mm";
      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 52;
      WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v137;
      _os_log_impl(&dword_1BB0CE000, v138, OS_LOG_TYPE_INFO, "%25s:%-5d [VolumeLimit] SPL Target Settings SPL: %u", (uint8_t *)buf, 0x18u);
    }

    goto LABEL_429;
  }
}

void sub_1BB4ABF40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52,char a53)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *VPChannelConfig::SetChConfig(VPChannelConfig *this, int a2, const char *__s1, unsigned int a4)
{
  *(_DWORD *)this = a2;
  unsigned int v7 = (void *)*((void *)this + 1);
  if (v7) {
    free(v7);
  }
  *((void *)this + 1) = 0;
  uint64_t result = strdup(__s1);
  *((void *)this + 1) = result;
  if (a4 <= 3)
  {
    int v9 = 1 << a4;
    if ((*(_DWORD *)this & (1 << a4)) == 0)
    {
      int v10 = 0;
      while (((*(_DWORD *)this >> v10) & 1) == 0)
      {
        if (++v10 == 32)
        {
          LOBYTE(v10) = 33;
          break;
        }
      }
      int v9 = 1 << v10;
    }
  }
  else
  {
    int v9 = 0;
  }
  *((_DWORD *)this + 4) = v9;
  return result;
}

uint64_t VoiceProcessorV2::VPEchoProcessingParams::Reset(VoiceProcessorV2::VPEchoProcessingParams *this)
{
  *(void *)this = 0;
  if (!*((unsigned char *)this + 216))
  {
    uint64_t v2 = 0;
    *(void *)((char *)this + 164) = 0;
    *((void *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    do
    {
      *(void *)((char *)this + v2 * 4 + 20) = dword_1BB898330[v2];
      v2 += 2;
    }
    while (v2 != 18);
    *(void *)((char *)this + 92) = 0x2000000000;
    *((_DWORD *)this + 29) = 0;
    *(_OWORD *)((char *)this + 100) = xmmword_1BB87AA30;
    *(_OWORD *)((char *)this + 140) = xmmword_1BB87AA40;
  }
  *((unsigned char *)this + 216) = 0;
  *((_WORD *)this + 88) = 0;
  *((unsigned char *)this + 178) = 0;
  *((_DWORD *)this + 39) = 0;
  *((_DWORD *)this + 40) = 0;
  unsigned int v8 = (char *)this + 304;
  int v9 = 0;
  std::__fill_n[abi:ne180100]<false,std::__bitset<2ul,72ul>>((uint64_t)&v8);
  uint64_t v3 = 0;
  uint64_t v4 = *((void *)this + 41) | 0xFFLL;
  *((void *)this + 40) = -1;
  *((void *)this + 41) = v4;
  do
  {
    *(void *)((char *)this + v3 + 344) = *(void *)((char *)this + v3 + 336);
    std::vector<AUPropertyItem>::__base_destruct_at_end[abi:ne180100]((uint64_t)this + v3 + 2712, *(void *)((char *)this + v3 + 2712));
    v3 += 24;
  }
  while (v3 != 1728);
  std::vector<AUPropertyItem>::__base_destruct_at_end[abi:ne180100]((uint64_t)this + 2640, *((void *)this + 330));
  *((void *)this + 334) = *((void *)this + 333);
  CACFString::operator=((uint64_t)this + 2696, @"(UL)-AuxVP");
  unsigned int v8 = (char *)this + 4536;
  int v9 = 0;
  std::__fill_n[abi:ne180100]<false,std::__bitset<1ul,62ul>>((uint64_t)&v8);
  *((void *)this + 568) |= 0x3FFFFFFFFFFFFFFFuLL;
  int v5 = (void *)((char *)this + 4552);
  uint64_t v6 = 62;
  do
  {
    v5[1] = *v5;
    std::vector<AUPropertyItem>::__base_destruct_at_end[abi:ne180100]((uint64_t)(v5 + 257), v5[257]);
    v5 += 3;
    --v6;
  }
  while (v6);
  std::vector<AUPropertyItem>::__base_destruct_at_end[abi:ne180100]((uint64_t)this + 6536, *((void *)this + 817));
  *((void *)this + 821) = *((void *)this + 820);

  return CACFString::operator=((uint64_t)this + 6592, @"(DL)-AuxVP");
}

void std::vector<AUPropertyItem>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 24)
  {
    int v5 = *(void **)(i - 8);
    if (v5)
    {
      free(v5);
      *(void *)(i - 8) = 0;
    }
    *(void *)(i - 24) = 0;
    *(void *)(i - 16) = 0;
  }
  *(void *)(a1 + 8) = a2;
}

uint64_t std::__fill_n[abi:ne180100]<false,std::__bitset<1ul,62ul>>(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 8);
  uint64_t v2 = *(void **)result;
  char v3 = 62;
  if (!v1
    || ((64 - v1) >= 0x3EuLL ? (char v4 = 62) : (char v4 = 64 - v1),
        *v2 &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v1 - v4)) & (-1 << v1)),
        ++v2,
        *(void *)uint64_t result = v2,
        (char v3 = (62 - v4) & 0x3F) != 0))
  {
    *(void *)uint64_t result = v2;
    *v2 &= ~(0xFFFFFFFFFFFFFFFFLL >> -v3);
  }
  return result;
}

void VoiceProcessorV2::GetAndPrintPortSubtype(AudioObjectID inObjectID, unsigned int *a2, unsigned int *a3)
{
  GetAndPrintPortTypeProperty(0x6F757470u, (int)a2, inObjectID, 0x70737562u, "sub", a3);
  int v4 = *a3;
  if ((int)*a3 > 1647718501)
  {
    if ((v4 - 1647718502) >= 2 && v4 != 1752709424 && v4 != 1781740087) {
LABEL_16:
    }
      *a3 = 0;
  }
  else
  {
    if (v4 > 1633759843)
    {
      if (v4 == 1633759844) {
        return;
      }
      int v5 = 1634231920;
    }
    else
    {
      if (v4 == 1214329654) {
        return;
      }
      int v5 = 1214394677;
    }
    if (v4 != v5) {
      goto LABEL_16;
    }
  }
}

uint64_t VoiceProcessorV2::ApplyPortSubtypeTuningOverride(VoiceProcessorV2 *this, unsigned int a2)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  if (!(*(unsigned int (**)(VoiceProcessorV2 *, void, void, void))(*(void *)this + 528))(this, **((unsigned int **)this + 292), *((unsigned int *)this + 596), **((unsigned int **)this + 295)))return 0; {
  if (VPLogScope(void)::once != -1)
  }
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
  int v4 = (void *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
  {
    int v5 = (*v4 ? *v4 : MEMORY[0x1E4F14500]);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)v43, *((_DWORD *)this + 596));
      LODWORD(buf[0]) = 136315650;
      *(void *)((char *)buf + 4) = "vpAspen_v2.cpp";
      WORD6(buf[0]) = 1024;
      *(_DWORD *)((char *)buf + 14) = 1214;
      WORD1(buf[1]) = 2080;
      *(void *)((char *)&buf[1] + 4) = v43;
      _os_log_impl(&dword_1BB0CE000, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> known headphones with HW EQ AU preset override detected %s", (uint8_t *)buf, 0x1Cu);
    }
  }
  int v36 = (char *)this + 15961;
  uint64_t v6 = (int *)*((void *)this + 1578);
  if (v6 && (*v36 || *((unsigned char *)this + 15962)))
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    uint64_t v7 = VPLogScope(void)::scope;
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)buf, *((_DWORD *)this + 596));
    CALegacyLog::log(v6, 5, v7, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpAspen_v2.cpp", 1214, "ApplyPortSubtypeTuningOverride", "known headphones with HW EQ AU preset override detected %s", (const char *)buf);
  }
  memset(buf, 0, 255);
  if (*((double *)this + 78) <= 0x5DC0)
  {
    int TuningInSubdirs = 0;
    int v9 = (const char **)((char *)this + 8);
    int v10 = 3;
    unsigned int v11 = 8000;
    do
    {
      if (v11 >= *((double *)this + 78))
      {
        if (a2)
        {
          CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)v43, a2);
          int v12 = v43;
        }
        else
        {
          int v12 = "gen";
        }
        snprintf((char *)buf, 0xFFuLL, "%s_%u%s", v12, v11, "Hz");
        uint64_t v41 = (long long *)CFStringCreateWithCString(0, (const char *)buf, 0x600u);
        char v42 = 1;
        uint64_t v13 = *((void *)this + 341);
        CFTypeRef cf = CFStringCreateWithCString(0, "Generic", 0x600u);
        char v40 = 1;
        CFStringRef v37 = CFStringCreateWithCString(0, "Headphones", 0x600u);
        char v38 = 1;
        *(void *)int v43 = &cf;
        *(void *)&v43[8] = &v37;
        *(void *)&char v43[16] = &v41;
        int TuningInSubdirs = TuningPListMgr::loadTuningInSubdirs_(v13, (const __CFString ***)v43, 3u, 1u);
        CACFString::~CACFString((CACFString *)&v37);
        CACFString::~CACFString((CACFString *)&cf);
        if (!TuningInSubdirs)
        {
          CACFString::~CACFString((CACFString *)&v41);
          goto LABEL_48;
        }
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        unsigned int v14 = (void *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
        {
          BOOL v15 = (*v14 ? *v14 : MEMORY[0x1E4F14500]);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          {
            BOOL v16 = (char *)this + 8;
            if (*((char *)this + 31) < 0) {
              BOOL v16 = *v9;
            }
            *(_DWORD *)int v43 = 136315906;
            *(void *)&v43[4] = "vpAspen_v2.cpp";
            *(_WORD *)&v43[12] = 1024;
            *(_DWORD *)&v43[14] = 1228;
            *(_WORD *)&v43[18] = 2080;
            *(void *)&v43[20] = v16;
            __int16 v44 = 2080;
            uint64_t v45 = (const char *)buf;
            _os_log_impl(&dword_1BB0CE000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> : failed to find Headphone EQ aupreset: %s/Generic/Headphones/%s", v43, 0x26u);
          }
        }
        unsigned int v17 = (int *)*((void *)this + 1578);
        if (v17 && (*v36 || *((unsigned char *)this + 15962)))
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          unsigned int v18 = (char *)this + 8;
          if (*((char *)this + 31) < 0) {
            unsigned int v18 = *v9;
          }
          CALegacyLog::log(v17, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpAspen_v2.cpp", 1228, "ApplyPortSubtypeTuningOverride", ": failed to find Headphone EQ aupreset: %s/Generic/Headphones/%s", v18, (const char *)buf);
        }
        CACFString::~CACFString((CACFString *)&v41);
      }
      v11 += 8000;
      --v10;
    }
    while (v10);
    if (TuningInSubdirs) {
      goto LABEL_49;
    }
  }
LABEL_48:
  if (*((double *)this + 78) < 0x5DC1)
  {
LABEL_74:
    int v27 = TuningPListMgr::lookupPlist_(*((void *)this + 341), (const char *)buf, 1u);
    CFTypeRef cf = v27;
    if (v27)
    {
      CFRetain(v27);
      AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1470, 0, 0, 0, 8uLL, &cf, 1);
      CFRelease(cf);
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      std::string::size_type v28 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        uint64_t v29 = (*v28 ? *v28 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)int v43 = 136315906;
          *(void *)&v43[4] = "vpAspen_v2.cpp";
          *(_WORD *)&v43[12] = 1024;
          *(_DWORD *)&v43[14] = 1253;
          *(_WORD *)&v43[18] = 2080;
          *(void *)&v43[20] = buf;
          __int16 v44 = 2080;
          uint64_t v45 = "(DL-)HwEQ";
          _os_log_impl(&dword_1BB0CE000, v29, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> found Headphone EQ aupreset:%s for %s", v43, 0x26u);
        }
      }
      int v30 = (int *)*((void *)this + 1578);
      if (v30 && (*v36 || *((unsigned char *)this + 15962)))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log(v30, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpAspen_v2.cpp", 1253, "ApplyPortSubtypeTuningOverride", "found Headphone EQ aupreset:%s for %s", (const char *)buf, "(DL-)HwEQ");
      }
      std::string::basic_string[abi:ne180100]<0>(v43, "(DL-)HwEQ");
      uint64_t v41 = (long long *)v43;
      int v31 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)this + 4584, v43, (uint64_t)&std::piecewise_construct, &v41);
      std::string::__assign_external((std::string *)(v31 + 40), (const std::string::value_type *)buf);
      if ((v43[23] & 0x80000000) != 0) {
        operator delete(*(void **)v43);
      }
    }
    else
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      int v32 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        int v33 = (*v32 ? *v32 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int v43 = 136315906;
          *(void *)&v43[4] = "vpAspen_v2.cpp";
          *(_WORD *)&v43[12] = 1024;
          *(_DWORD *)&v43[14] = 1256;
          *(_WORD *)&v43[18] = 2080;
          *(void *)&v43[20] = buf;
          __int16 v44 = 2080;
          uint64_t v45 = "(DL-)HwEQ";
          _os_log_impl(&dword_1BB0CE000, v33, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> : failed to load Headphone EQ tuning aupreset:%s for %s", v43, 0x26u);
        }
      }
      int v34 = (int *)*((void *)this + 1578);
      if (v34 && (*v36 || v36[1]))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log(v34, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpAspen_v2.cpp", 1256, "ApplyPortSubtypeTuningOverride", ": failed to load Headphone EQ tuning aupreset:%s for %s", (const char *)buf, "(DL-)HwEQ");
      }
    }
    return 0;
  }
LABEL_49:
  if (a2)
  {
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)v43, a2);
    int v19 = v43;
  }
  else
  {
    int v19 = "gen";
  }
  snprintf((char *)buf, 0xFFuLL, "%s", v19);
  uint64_t v41 = (long long *)CFStringCreateWithCString(0, (const char *)buf, 0x600u);
  char v42 = 1;
  uint64_t v20 = *((void *)this + 341);
  CFTypeRef cf = CFStringCreateWithCString(0, "Generic", 0x600u);
  char v40 = 1;
  CFStringRef v37 = CFStringCreateWithCString(0, "Headphones", 0x600u);
  char v38 = 1;
  *(void *)int v43 = &cf;
  *(void *)&v43[8] = &v37;
  *(void *)&char v43[16] = &v41;
  uint64_t v21 = TuningPListMgr::loadTuningInSubdirs_(v20, (const __CFString ***)v43, 3u, 1u);
  CACFString::~CACFString((CACFString *)&v37);
  CACFString::~CACFString((CACFString *)&cf);
  if (!v21)
  {
    CACFString::~CACFString((CACFString *)&v41);
    goto LABEL_74;
  }
  if (VPLogScope(void)::once != -1) {
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
  }
  double v22 = (void *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
  {
    unsigned int v23 = (*v22 ? *v22 : MEMORY[0x1E4F14500]);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      float32x2_t v24 = (void *)((char *)this + 8);
      if (*((char *)this + 31) < 0) {
        float32x2_t v24 = (void *)*v24;
      }
      *(_DWORD *)int v43 = 136315906;
      *(void *)&v43[4] = "vpAspen_v2.cpp";
      *(_WORD *)&v43[12] = 1024;
      *(_DWORD *)&v43[14] = 1241;
      *(_WORD *)&v43[18] = 2080;
      *(void *)&v43[20] = v24;
      __int16 v44 = 2080;
      uint64_t v45 = (const char *)buf;
      _os_log_impl(&dword_1BB0CE000, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> : failed to find Headphone EQ aupreset: %s/Generic/Headphones/%s", v43, 0x26u);
    }
  }
  uint64_t v25 = (int *)*((void *)this + 1578);
  if (v25 && (*v36 || *((unsigned char *)this + 15962)))
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    uint64_t v26 = (char *)this + 8;
    if (*((char *)this + 31) < 0) {
      uint64_t v26 = *(const char **)v26;
    }
    CALegacyLog::log(v25, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpAspen_v2.cpp", 1241, "ApplyPortSubtypeTuningOverride", ": failed to find Headphone EQ aupreset: %s/Generic/Headphones/%s", v26, (const char *)buf);
  }
  CACFString::~CACFString((CACFString *)&v41);
  return v21;
}

void sub_1BB4ACEF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
}

BOOL VoiceProcessorV2::portSubTypeCanOverrideHWEQ(VoiceProcessorV2 *this, int a2, int a3)
{
  BOOL v4 = a3 == 1214329654 || a3 == 1214394677;
  return a2 == 1885892727 && v4;
}

void EnvelopeDetector::SetAttackTime(EnvelopeDetector *this, float a2)
{
  *((float *)this + 3) = a2;
  if (*((_DWORD *)this + 5) == 3)
  {
    double v4 = 1.0 - exp(-1.0 / (a2 * 0.001 * *(float *)this));
  }
  else
  {
    if (*((unsigned char *)this + 24)) {
      double v5 = -0.435333936;
    }
    else {
      double v5 = -2.0;
    }
    double v4 = exp(v5 / ((float)(*(float *)this * a2) * 0.001));
  }
  float v6 = v4;
  *((float *)this + 1) = v6;
  if (*((unsigned char *)this + 32))
  {
    *((float *)this + 2) = v6;
    *((float *)this + 4) = a2;
  }
}

void EnvelopeDetector::SetReleaseTime(EnvelopeDetector *this, float a2)
{
  *((float *)this + 4) = a2;
  if (*((_DWORD *)this + 5) == 3)
  {
    double v4 = 1.0 - exp(-1.0 / (a2 * 0.001 * *(float *)this));
  }
  else
  {
    if (*((unsigned char *)this + 24)) {
      double v5 = -0.435333936;
    }
    else {
      double v5 = -2.0;
    }
    double v4 = exp(v5 / ((float)(*(float *)this * a2) * 0.001));
  }
  float v6 = v4;
  *((float *)this + 2) = v6;
  if (*((unsigned char *)this + 32))
  {
    *((float *)this + 1) = v6;
    *((float *)this + 3) = a2;
  }
}

void CADeprecated::CAAutoFree<float>::alloc(void **a1, uint64_t a2, int a3)
{
  float v6 = *a1;
  if (v6)
  {
    free(v6);
    *a1 = 0;
  }
  if (a3)
  {
    uint64_t v7 = malloc_type_malloc(4 * a2, 0x2C8E6D5CuLL);
    unsigned int v8 = v7;
    if (!a2 || v7)
    {
      bzero(v7, 4 * a2);
      goto LABEL_9;
    }
LABEL_10:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    unsigned int v11 = std::bad_alloc::bad_alloc(exception);
  }
  int v9 = malloc_type_malloc(4 * a2, 0x7C51E058uLL);
  unsigned int v8 = v9;
  if (a2 && !v9) {
    goto LABEL_10;
  }
LABEL_9:
  *a1 = v8;
}

void ecSUMO::fcn_set_gamma(ecSUMO *this, float a2, unsigned int a3)
{
  float v5 = 0.0;
  BOOL v6 = a2 > 0.0;
  float v7 = 0.0;
  float v8 = 0.0;
  float v9 = 0.0;
  if (v6)
  {
    double v11 = -(float)((float)*((unsigned int *)this + 18) / (float)*((unsigned int *)this + 19));
    float v12 = v11 / a2;
    float v5 = expf(v12);
    float v7 = sqrtf(v5);
    float v8 = 1.0 / v7;
    float v13 = v11 / (float)((float)a3 * a2);
    float v14 = expf(v13);
    *((float *)this + 2) = v14;
    float v9 = 1.0 / sqrtf(v14);
  }
  *((float *)this + 1) = v5;
  *((float *)this + 3) = v7;
  *((float *)this + 4) = v8;
  *((float *)this + 5) = v9;
}

uint64_t ecSUMO::ec_proc(ecSUMO *this, const AudioBufferList *a2, const AudioBufferList *a3, const AudioBufferList *a4, AudioBufferList *a5, AudioBufferList *a6, AudioBufferList *a7, AudioBufferList *a8)
{
  uint64_t v226 = 0;
  float v225 = 0.0;
  bzero(*((void **)this + 19), 4 * *((unsigned int *)this + 20));
  if (*((_DWORD *)this + 15))
  {
    uint64_t v12 = 0;
    unint64_t v13 = 0;
    p_mData = &a2->mBuffers[0].mData;
    do
    {
      BOOL v15 = *p_mData;
      p_mData += 2;
      memcpy(*(void **)(*(void *)(*((void *)this + 88) + v12) + 24 * *((unsigned int *)this + 29)), v15, 4 * *((unsigned int *)this + 18));
      memcpy(*(void **)(*((void *)this + 106) + v12), *(const void **)(*((void *)this + 103) + v12), 4 * *((unsigned int *)this + 18));
      memcpy((void *)(*(void *)(*((void *)this + 103) + v12) + 4 * *((unsigned int *)this + 36)), v15, 4 * *((unsigned int *)this + 18));
      memmove(*(void **)(*((void *)this + 103) + v12), (const void *)(*(void *)(*((void *)this + 103) + v12) + 4 * *((unsigned int *)this + 18)), 4 * *((unsigned int *)this + 36));
      ecSUMO::fcn_wola_analysis_fb((uint64_t)this, *((const vDSP_DFT_SetupStruct **)this + 169), (void *)(*((void *)this + 88) + v12), (void *)this + 34, (float **)this + 49, (float **)(*((void *)this + 109) + v12), *((unsigned int *)this + 22), *((_DWORD *)this + 23), *((_DWORD *)this + 14));
      memcpy(**(void ***)(*((void *)this + 115) + v12), *(const void **)(*((void *)this + 109) + v12), 8 * *((unsigned int *)this + 24));
      ++v13;
      v12 += 24;
    }
    while (v13 < *((unsigned int *)this + 15));
  }
  if (*((_DWORD *)this + 17))
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    unsigned int v18 = &a4->mBuffers[0].mData;
    do
    {
      int v19 = *v18;
      v18 += 2;
      memcpy(*(void **)(*(void *)(*((void *)this + 91) + v16) + 24 * *((unsigned int *)this + 29)), v19, 4 * *((unsigned int *)this + 18));
      ecSUMO::fcn_wola_analysis_fb((uint64_t)this, *((const vDSP_DFT_SetupStruct **)this + 169), (void *)(*((void *)this + 91) + v16), (void *)this + 34, (float **)this + 49, (float **)(*((void *)this + 112) + v16), *((unsigned int *)this + 22), *((_DWORD *)this + 23), *((_DWORD *)this + 14));
      ++v17;
      v16 += 24;
    }
    while (v17 < *((unsigned int *)this + 17));
  }
  if (*((_DWORD *)this + 16))
  {
    unint64_t v20 = 0;
    while (1)
    {
      memcpy(*(void **)(*(void *)(*((void *)this + 85) + 24 * v20) + 24 * *((unsigned int *)this + 29)), a3->mBuffers[v20].mData, 4 * *((unsigned int *)this + 18));
      if (!*((unsigned char *)this + 129)) {
        break;
      }
      if (*((_DWORD *)this + 34) != 1)
      {
        uint64_t v21 = (*((_DWORD *)this + 34) - 1) - 1;
        uint64_t v22 = 24 * (*((_DWORD *)this + 34) - 1);
        do
        {
          int v23 = v21;
          uint64_t v24 = *(void *)(*((void *)this + 160) + 24 * v20);
          memcpy(*(void **)(v24 + v22), *(const void **)(v24 + 24 * v21--), 8 * *((unsigned int *)this + 24));
          v22 -= 24;
        }
        while (v23);
      }
      ecSUMO::fcn_wola_analysis_fb((uint64_t)this, *((const vDSP_DFT_SetupStruct **)this + 169), (void *)(*((void *)this + 85) + 24 * v20), (void *)this + 34, (float **)this + 49, *(float ***)(*((void *)this + 160) + 24 * v20), *((unsigned int *)this + 22), *((_DWORD *)this + 23), *((_DWORD *)this + 14));
      if (v20 >= (unint64_t)*((unsigned int *)this + 17) >> 1)
      {
        memcpy(**(void ***)(*((void *)this + 121) + 24 * v20), **(const void ***)(*((void *)this + 160) + 24 * v20), 8 * *((unsigned int *)this + 24));
        LODWORD(__A.realp) = 1065353216;
        uint64_t v25 = *(float **)(*((void *)this + 130) + 24 * v20);
        vDSP_Length v26 = (2 * *((_DWORD *)this + 24));
        p_A = (const float *)&__A;
        goto LABEL_17;
      }
      memcpy(*(void **)(*((void *)this + 163) + 24 * v20), *(const void **)(*((void *)this + 109) + 24 * (*((_DWORD *)this + 15) + ~v20)), 8 * *((unsigned int *)this + 24));
      memcpy(**(void ***)(*((void *)this + 121) + 24 * v20), *(const void **)(*((void *)this + 112) + 24 * (*((_DWORD *)this + 17) + ~v20)), 8 * *((unsigned int *)this + 24));
      memcpy(*(void **)(*((void *)this + 130) + 24 * v20), *(const void **)(*((void *)this + 112) + 24 * v20), 8 * *((unsigned int *)this + 24));
LABEL_18:
      if (++v20 >= *((unsigned int *)this + 16)) {
        goto LABEL_19;
      }
    }
    memcpy(**(void ***)(*((void *)this + 121) + 24 * v20), *(const void **)(*((void *)this + 112) + 24 * v20), 8 * *((unsigned int *)this + 24));
    HIDWORD(v226) = 1065353216;
    uint64_t v25 = *(float **)(*((void *)this + 130) + 24 * v20);
    vDSP_Length v26 = (2 * *((_DWORD *)this + 24));
    p_A = (const float *)&v226 + 1;
LABEL_17:
    vDSP_vfill(p_A, v25, 1, v26);
    goto LABEL_18;
  }
LABEL_19:
  if (*((_DWORD *)this + 20))
  {
    unint64_t v28 = 0;
    unsigned int v207 = 0;
    do
    {
      if (*((unsigned char *)this + 129))
      {
        if (v28 < (unint64_t)*((unsigned int *)this + 17) >> 1)
        {
          uint64_t v29 = *((unsigned int *)this + 24);
          v214.realp = *(float **)(*((void *)this + 130) + 24 * v28);
          v214.imagp = &v214.realp[v29];
          uint64_t v30 = *((void *)this + 121);
          int v31 = (float *)(**(void **)(v30 + 24 * v28) + 4 * v29);
          v213.realp = **(float ***)(v30 + 24 * v28);
          v213.imagp = v31;
          vDSP_vsmul(**(const float ***)(v30 + 24 * v28), 1, (const float *)this + 30, **(float ***)(v30 + 24 * v28), 1, (2 * v29));
          vDSP_vsmul(*(const float **)(*((void *)this + 130) + 24 * v28), 1, (const float *)this + 30, *(float **)(*((void *)this + 130) + 24 * v28), 1, (2 * *((_DWORD *)this + 24)));
          vDSP_zvmags(&v214, 1, *((float **)this + 40), 1, *((unsigned int *)this + 24));
          vDSP_zvmags(&v213, 1, (float *)(*((void *)this + 40) + 4 * *((unsigned int *)this + 24)), 1, *((unsigned int *)this + 24));
          vDSP_vsub(*((const float **)this + 40), 1, (const float *)(*((void *)this + 40) + 4 * *((unsigned int *)this + 24)), 1, *((float **)this + 43), 1, *((unsigned int *)this + 24));
          vDSP_vabs(*((const float **)this + 43), 1, *((float **)this + 43), 1, *((unsigned int *)this + 24));
          vDSP_vadd(*((const float **)this + 40), 1, (const float *)(*((void *)this + 40) + 4 * *((unsigned int *)this + 24)), 1, (float *)(*((void *)this + 43) + 4 * *((unsigned int *)this + 24)), 1, *((unsigned int *)this + 24));
          vDSP_vsadd((const float *)(*((void *)this + 43) + 4 * *((unsigned int *)this + 24)), 1, (const float *)this + 27, (float *)(*((void *)this + 43) + 4 * *((unsigned int *)this + 24)), 1, *((unsigned int *)this + 24));
          vDSP_vdiv((const float *)(*((void *)this + 43) + 4 * *((unsigned int *)this + 24)), 1, *((const float **)this + 43), 1, *((float **)this + 43), 1, *((unsigned int *)this + 24));
          LODWORD(__A.realp) = *((_DWORD *)this + 24);
          vvsqrtf((float *)(*((void *)this + 43) + 4 * LODWORD(__A.realp)), *((const float **)this + 43), (const int *)&__A);
          LODWORD(__C.realp) = 1065353216;
          vDSP_vclip((const float *)(*((void *)this + 43) + 4 * *((unsigned int *)this + 24)), 1, (const float *)this + 27, (const float *)&__C, *((float **)this + 43), 1, *((unsigned int *)this + 24));
          memcpy(*(void **)(*((void *)this + 130) + 24 * v28), *((const void **)this + 43), 4 * *((unsigned int *)this + 24));
          memcpy((void *)(*(void *)(*((void *)this + 130) + 24 * v28) + 4 * *((unsigned int *)this + 24)), *((const void **)this + 43), 4 * *((unsigned int *)this + 24));
        }
        vDSP_vmul(**(const float ***)(*((void *)this + 121) + 24 * v28), 1, *(const float **)(*((void *)this + 130) + 24 * v28), 1, **(float ***)(*((void *)this + 121) + 24 * v28), 1, (2 * *((_DWORD *)this + 24)));
      }
      memcpy(**(void ***)(*((void *)this + 127) + 24 * v28), **(const void ***)(*((void *)this + 121) + 24 * v28), 4 * *((unsigned int *)this + 24));
      memcpy((void *)(**(void **)(*((void *)this + 127) + 24 * v28) + 4 * (2 * *((_DWORD *)this + 24))), (const void *)(**(void **)(*((void *)this + 121) + 24 * v28) + 4 * *((unsigned int *)this + 24)), 4 * *((unsigned int *)this + 24));
      memcpy((void *)(**(void **)(*((void *)this + 127) + 24 * v28) + 4 * *((unsigned int *)this + 24)), **(const void ***)(*((void *)this + 121) + 24 * v28), 4 * *((unsigned int *)this + 24));
      memcpy((void *)(**(void **)(*((void *)this + 127) + 24 * v28) + 4 * (3 * *((_DWORD *)this + 24))), (const void *)(**(void **)(*((void *)this + 121) + 24 * v28) + 4 * *((unsigned int *)this + 24)), 4 * *((unsigned int *)this + 24));
      uint64_t v32 = *((void *)this + 31);
      *(_DWORD *)(v32 + 4 * v28) = 0;
      if (*((_DWORD *)this + 14) == 1)
      {
        float v33 = 0.0;
      }
      else
      {
        uint64_t v34 = 0;
        unint64_t v35 = 0;
        unsigned int v36 = *((_DWORD *)this + 18);
        do
        {
          vDSP_svesq(*(const float **)(*(void *)(*((void *)this + 85) + 24 * v28) + v34), 1, (float *)&v226 + 1, v36);
          int v37 = *((_DWORD *)this + 14);
          unsigned int v36 = *((_DWORD *)this + 18);
          uint64_t v32 = *((void *)this + 31);
          float v33 = *(float *)(v32 + 4 * v28) + (float)(*((float *)&v226 + 1) / (float)(v36 * v37));
          *(float *)(v32 + 4 * v28) = v33;
          ++v35;
          v34 += 24;
        }
        while (v35 < (v37 - 1));
      }
      uint64_t v38 = *((void *)this + 22);
      uint64_t v39 = *(void *)(v38 + 8 * (v28 >> 6));
      *(void *)(v38 + 8 * (v28 >> 6)) = v39 | (1 << v28);
      float v40 = v33 + *((float *)this + 27);
      *(float *)(v32 + 4 * v28) = v40;
      if ((float)(log10f(v40) * 10.0) > *((float *)this + 10))
      {
        *(_DWORD *)(*((void *)this + 19) + 4 * v207++) = v28;
        *(void *)(v38 + 8 * (v28 >> 6)) = v39 & ~(1 << v28);
      }
      vDSP_vclr((float *)a7->mBuffers[v28++].mData, 1, *((unsigned int *)this + 18));
    }
    while (v28 < *((unsigned int *)this + 20));
    unsigned int v41 = *((_DWORD *)this + 15);
    unsigned int v42 = v207;
    if (v207)
    {
      *((unsigned char *)this + 128) = 1;
      if (!*((unsigned char *)this + 129))
      {
        unsigned int v74 = *((_DWORD *)this + 35);
        if (v41 < v74) {
          unsigned int v74 = v41;
        }
        unsigned int v202 = v74;
        goto LABEL_85;
      }
      LODWORD(v43) = *((_DWORD *)this + 17);
      unsigned int v44 = v41 - (v43 >> 1);
      if (v44 >= *((_DWORD *)this + 35)) {
        unsigned int v44 = *((_DWORD *)this + 35);
      }
      unsigned int v202 = v44;
      if (*((unsigned char *)this + 149))
      {
        LODWORD(v224.realp) = 0;
        LODWORD(v223.realp) = 0;
        LODWORD(v222.realp) = 0;
        if (v43 < 2) {
          goto LABEL_82;
        }
        unint64_t v45 = 0;
        do
        {
          vDSP_vclr(*((float **)this + 61), 1, (2 * *((_DWORD *)this + 24)));
          uint64_t v46 = *((unsigned int *)this + 24);
          __A.realp = (float *)*((void *)this + 61);
          __A.imagp = &__A.realp[v46];
          uint64_t v47 = *((void *)this + 163);
          __C.realp = *(float **)(v47 + 24 * v45);
          __C.imagp = &__C.realp[v46];
          if (*((_DWORD *)this + 34))
          {
            uint64_t v48 = 0;
            unint64_t v49 = 0;
            do
            {
              vDSP_Length __N = *((unsigned int *)this + 24);
              __D.realp = *(float **)(*(void *)(*((void *)this + 118) + 24 * v45) + v48);
              __D.imagp = &__D.realp[__N];
              v230.realp = *(float **)(*(void *)(*((void *)this + 160) + 24 * v45) + v48);
              v230.imagp = &v230.realp[__N];
              __B.realp = *(float **)(*(void *)(*((void *)this + 154) + 24 * v45) + v48);
              __B.imagp = &__B.realp[__N];
              vDSP_zvma(&v230, 1, &__B, 1, &__C, 1, &__D, 1, __N);
              vDSP_Length v51 = *((unsigned int *)this + 24);
              v229.realp = (float *)*((void *)this + 58);
              v229.imagp = &v229.realp[v51];
              v228.realp = (float *)*((void *)this + 79);
              v228.imagp = &v228.realp[v51];
              vDSP_zvmags(&__B, 1, *((float **)this + 55), 1, v51);
              *(float *)&v224.realp = 1.0 - *((float *)this + 2);
              uint64_t v52 = *(float **)(*(void *)(*((void *)this + 151) + 24 * v45) + v48);
              vDSP_vsma(*((const float **)this + 55), 1, (const float *)&v224, v52, 1, v52, 1, *((unsigned int *)this + 24));
              uint64_t v53 = *(float **)(*(void *)(*((void *)this + 151) + 24 * v45) + v48);
              vDSP_vsmul(v53, 1, (const float *)this + 5, v53, 1, *((unsigned int *)this + 24));
              vDSP_zrvmul(&v230, 1, *(const float **)(*(void *)(*((void *)this + 151) + 24 * v45) + v48), 1, &v229, 1, *((unsigned int *)this + 24));
              LODWORD(v224.realp) = 1120403456;
              vDSP_vsmul(v229.realp, 1, (const float *)&v224, v229.realp, 1, (2 * *((_DWORD *)this + 24)));
              vDSP_zvmags(&v229, 1, *((float **)this + 61), 1, *((unsigned int *)this + 24));
              LODWORD(v224.realp) = 1065353216;
              vDSP_vsadd(*((const float **)this + 61), 1, (const float *)&v224, *((float **)this + 73), 1, *((unsigned int *)this + 24));
              LODWORD(v221.realp) = *((_DWORD *)this + 24);
              vvsqrtf(*((float **)this + 73), *((const float **)this + 73), (const int *)&v221);
              vDSP_vthr(*((const float **)this + 73), 1, (const float *)this + 6, *((float **)this + 73), 1, *((unsigned int *)this + 24));
              LODWORD(v224.realp) = 1065353216;
              vDSP_svdiv((const float *)&v224, *((const float **)this + 73), 1, *((float **)this + 76), 1, *((unsigned int *)this + 24));
              vDSP_zrvmul(&v229, 1, *((const float **)this + 76), 1, &v228, 1, *((unsigned int *)this + 24));
              vDSP_Length v54 = *((unsigned int *)this + 24);
              v227.realp = *(float **)(*(void *)(*((void *)this + 157) + 24 * v45) + v48);
              v227.imagp = &v227.realp[v54];
              vDSP_zrvmul(&v228, 1, *(const float **)(*(void *)(*((void *)this + 151) + 24 * v45) + v48), 1, &v227, 1, v54);
              uint64_t v55 = *(float **)(*(void *)(*((void *)this + 151) + 24 * v45) + v48);
              vDSP_vmul(v55, 1, *((const float **)this + 76), 1, v55, 1, *((unsigned int *)this + 24));
              LODWORD(v224.realp) = -1027080192;
              vDSP_vsmul(*((const float **)this + 76), 1, (const float *)&v224, *((float **)this + 73), 1, *((unsigned int *)this + 24));
              vDSP_zrvmul(&v227, 1, *((const float **)this + 73), 1, &v227, 1, *((unsigned int *)this + 24));
              vDSP_zvconj(&v227, 1, &v227, 1, *((unsigned int *)this + 24));
              vDSP_zvma(&v227, 1, &__D, 1, &__B, 1, &__B, 1, *((unsigned int *)this + 24));
              vDSP_zvma(&v230, 1, &__B, 1, &__C, 1, &__D, 1, *((unsigned int *)this + 24));
              ++v49;
              v48 += 24;
            }
            while (v49 < *((unsigned int *)this + 34));
            uint64_t v47 = *((void *)this + 163);
            LODWORD(v46) = *((_DWORD *)this + 24);
          }
          vDSP_svesq(*(const float **)(v47 + 24 * v45), 1, (float *)&v223, (2 * v46));
          vDSP_svesq(**(const float ***)(*((void *)this + 118) + 24 * v45), 1, (float *)&v222, (2 * *((_DWORD *)this + 24)));
          if (*((_DWORD *)this + 34) < 2u)
          {
            uint64_t v56 = 0;
            float v59 = *(float *)&v222.realp;
          }
          else
          {
            uint64_t v56 = 0;
            uint64_t v57 = 24;
            unint64_t v58 = 1;
            do
            {
              vDSP_svesq(*(const float **)(*(void *)(*((void *)this + 118) + 24 * v45) + v57), 1, (float *)&v224, (2 * *((_DWORD *)this + 24)));
              float v59 = *(float *)&v222.realp;
              if (*(float *)&v224.realp < *(float *)&v222.realp)
              {
                LODWORD(v222.realp) = v224.realp;
                uint64_t v56 = v58;
                float v59 = *(float *)&v224.realp;
              }
              ++v58;
              v57 += 24;
            }
            while (v58 < *((unsigned int *)this + 34));
          }
          vDSP_Length v60 = *((unsigned int *)this + 24);
          __D.realp = *(float **)(*(void *)(*((void *)this + 118) + 24 * v45) + 24 * v56);
          __D.imagp = &__D.realp[v60];
          if ((float)(*((float *)this + 8) * v59) >= *(float *)&v223.realp)
          {
            LODWORD(v224.realp) = *((_DWORD *)this + 6);
            vDSP_zvsub(&__C, 1, &__D, 1, &__A, 1, v60);
            vDSP_zvmags(&__A, 1, *((float **)this + 58), 1, *((unsigned int *)this + 24));
            vDSP_zvmags(&__D, 1, (float *)(*((void *)this + 58) + 4 * *((unsigned int *)this + 24)), 1, *((unsigned int *)this + 24));
            vDSP_vthr((const float *)(*((void *)this + 58) + 4 * *((unsigned int *)this + 24)), 1, (const float *)this + 6, (float *)(*((void *)this + 58) + 4 * *((unsigned int *)this + 24)), 1, *((unsigned int *)this + 24));
            vDSP_vadd(*((const float **)this + 58), 1, (const float *)(*((void *)this + 58) + 4 * *((unsigned int *)this + 24)), 1, (float *)(*((void *)this + 58) + 4 * *((unsigned int *)this + 24)), 1, *((unsigned int *)this + 24));
            vDSP_vdiv((const float *)(*((void *)this + 58) + 4 * *((unsigned int *)this + 24)), 1, *((const float **)this + 58), 1, *((float **)this + 55), 1, *((unsigned int *)this + 24));
            for (int i = 0; i != 4; ++i)
            {
              vDSP_Length v62 = *((unsigned int *)this + 24);
              __int16 v63 = (float *)(**(void **)(*((void *)this + 127) + 24 * v45) + 4 * (v62 * i));
              vDSP_vmul(*((const float **)this + 55), 1, v63, 1, v63, 1, v62);
              vDSP_Length v64 = *((unsigned int *)this + 24);
              __int16 v65 = (float *)(**(void **)(*((void *)this + 127) + 24 * v45) + 4 * (v64 * i));
              vDSP_vsadd(v65, 1, (const float *)this + 6, v65, 1, v64);
            }
          }
          ++v45;
          unint64_t v43 = *((unsigned int *)this + 17);
        }
        while (v45 < v43 >> 1);
      }
      else
      {
        LODWORD(v224.realp) = 0;
        LODWORD(v223.realp) = 0;
        LODWORD(v222.realp) = 0;
        if (v43 < 2) {
          goto LABEL_82;
        }
        unint64_t v75 = 0;
        do
        {
          vDSP_vclr(*((float **)this + 61), 1, (2 * *((_DWORD *)this + 24)));
          vDSP_Length v76 = *((unsigned int *)this + 24);
          __A.realp = (float *)*((void *)this + 61);
          __A.imagp = &__A.realp[v76];
          __C.realp = *(float **)(*((void *)this + 163) + 24 * v75);
          __C.imagp = &__C.realp[v76];
          __D.realp = **(float ***)(*((void *)this + 118) + 24 * v75);
          __D.imagp = &__D.realp[v76];
          if (*((_DWORD *)this + 34))
          {
            uint64_t v77 = 0;
            unint64_t v78 = 0;
            do
            {
              vDSP_Length v79 = *((unsigned int *)this + 24);
              v230.realp = *(float **)(*(void *)(*((void *)this + 160) + 24 * v75) + v77);
              v230.imagp = &v230.realp[v79];
              __B.realp = *(float **)(*(void *)(*((void *)this + 154) + 24 * v75) + v77);
              __B.imagp = &__B.realp[v79];
              vDSP_zvma(&v230, 1, &__B, 1, &__A, 1, &__A, 1, v79);
              ++v78;
              v77 += 24;
            }
            while (v78 < *((unsigned int *)this + 34));
            vDSP_Length v76 = *((unsigned int *)this + 24);
          }
          vDSP_zvadd(&__C, 1, &__A, 1, &__D, 1, v76);
          if (*((_DWORD *)this + 34))
          {
            uint64_t v80 = 0;
            unint64_t v81 = 0;
            do
            {
              vDSP_Length v82 = *((unsigned int *)this + 24);
              v230.realp = *(float **)(*(void *)(*((void *)this + 160) + 24 * v75) + v80);
              v230.imagp = &v230.realp[v82];
              __B.realp = *(float **)(*(void *)(*((void *)this + 154) + 24 * v75) + v80);
              __B.imagp = &__B.realp[v82];
              v229.realp = (float *)*((void *)this + 58);
              v229.imagp = &v229.realp[v82];
              v228.realp = (float *)*((void *)this + 79);
              v228.imagp = &v228.realp[v82];
              vDSP_zvmags(&__B, 1, *((float **)this + 55), 1, v82);
              *(float *)&v224.realp = 1.0 - *((float *)this + 2);
              std::string v83 = *(float **)(*(void *)(*((void *)this + 151) + 24 * v75) + v80);
              vDSP_vsma(*((const float **)this + 55), 1, (const float *)&v224, v83, 1, v83, 1, *((unsigned int *)this + 24));
              float v84 = *(float **)(*(void *)(*((void *)this + 151) + 24 * v75) + v80);
              vDSP_vsmul(v84, 1, (const float *)this + 5, v84, 1, *((unsigned int *)this + 24));
              vDSP_zrvmul(&v230, 1, *(const float **)(*(void *)(*((void *)this + 151) + 24 * v75) + v80), 1, &v229, 1, *((unsigned int *)this + 24));
              LODWORD(v224.realp) = 1120403456;
              vDSP_vsmul(v229.realp, 1, (const float *)&v224, v229.realp, 1, (2 * *((_DWORD *)this + 24)));
              vDSP_zvmags(&v229, 1, *((float **)this + 61), 1, *((unsigned int *)this + 24));
              LODWORD(v224.realp) = 1065353216;
              vDSP_vsadd(*((const float **)this + 61), 1, (const float *)&v224, *((float **)this + 73), 1, *((unsigned int *)this + 24));
              LODWORD(v221.realp) = *((_DWORD *)this + 24);
              vvsqrtf(*((float **)this + 73), *((const float **)this + 73), (const int *)&v221);
              vDSP_vthr(*((const float **)this + 73), 1, (const float *)this + 6, *((float **)this + 73), 1, *((unsigned int *)this + 24));
              LODWORD(v224.realp) = 1065353216;
              vDSP_svdiv((const float *)&v224, *((const float **)this + 73), 1, *((float **)this + 76), 1, *((unsigned int *)this + 24));
              vDSP_zrvmul(&v229, 1, *((const float **)this + 76), 1, &v228, 1, *((unsigned int *)this + 24));
              vDSP_Length v85 = *((unsigned int *)this + 24);
              v227.realp = *(float **)(*(void *)(*((void *)this + 157) + 24 * v75) + v80);
              v227.imagp = &v227.realp[v85];
              vDSP_zrvmul(&v228, 1, *(const float **)(*(void *)(*((void *)this + 151) + 24 * v75) + v80), 1, &v227, 1, v85);
              std::string v86 = *(float **)(*(void *)(*((void *)this + 151) + 24 * v75) + v80);
              vDSP_vmul(v86, 1, *((const float **)this + 76), 1, v86, 1, *((unsigned int *)this + 24));
              LODWORD(v224.realp) = -1027080192;
              vDSP_vsmul(*((const float **)this + 76), 1, (const float *)&v224, *((float **)this + 73), 1, *((unsigned int *)this + 24));
              vDSP_zrvmul(&v227, 1, *((const float **)this + 73), 1, &v227, 1, *((unsigned int *)this + 24));
              vDSP_zvconj(&v227, 1, &v227, 1, *((unsigned int *)this + 24));
              vDSP_zvma(&v227, 1, &__D, 1, &__B, 1, &__B, 1, *((unsigned int *)this + 24));
              ++v81;
              v80 += 24;
            }
            while (v81 < *((unsigned int *)this + 34));
          }
          vDSP_vclr(*((float **)this + 61), 1, (2 * *((_DWORD *)this + 24)));
          if (*((_DWORD *)this + 34))
          {
            uint64_t v87 = 0;
            unint64_t v88 = 0;
            do
            {
              vDSP_Length v89 = *((unsigned int *)this + 24);
              v230.realp = *(float **)(*(void *)(*((void *)this + 160) + 24 * v75) + v87);
              v230.imagp = &v230.realp[v89];
              __B.realp = *(float **)(*(void *)(*((void *)this + 154) + 24 * v75) + v87);
              __B.imagp = &__B.realp[v89];
              vDSP_zvma(&v230, 1, &__B, 1, &__A, 1, &__A, 1, v89);
              ++v88;
              v87 += 24;
            }
            while (v88 < *((unsigned int *)this + 34));
          }
          vDSP_zvadd(&__C, 1, &__A, 1, &__D, 1, *((unsigned int *)this + 24));
          vDSP_svesq(*(const float **)(*((void *)this + 163) + 24 * v75), 1, (float *)&v223, (2 * *((_DWORD *)this + 24)));
          vDSP_svesq(**(const float ***)(*((void *)this + 118) + 24 * v75), 1, (float *)&v222, (2 * *((_DWORD *)this + 24)));
          if ((float)(*((float *)this + 8) * *(float *)&v222.realp) >= *(float *)&v223.realp)
          {
            LODWORD(v224.realp) = *((_DWORD *)this + 6);
            vDSP_zvmags(&__A, 1, *((float **)this + 58), 1, *((unsigned int *)this + 24));
            vDSP_zvmags(&__D, 1, (float *)(*((void *)this + 58) + 4 * *((unsigned int *)this + 24)), 1, *((unsigned int *)this + 24));
            vDSP_vthr((const float *)(*((void *)this + 58) + 4 * *((unsigned int *)this + 24)), 1, (const float *)this + 6, (float *)(*((void *)this + 58) + 4 * *((unsigned int *)this + 24)), 1, *((unsigned int *)this + 24));
            vDSP_vadd(*((const float **)this + 58), 1, (const float *)(*((void *)this + 58) + 4 * *((unsigned int *)this + 24)), 1, (float *)(*((void *)this + 58) + 4 * *((unsigned int *)this + 24)), 1, *((unsigned int *)this + 24));
            vDSP_vdiv((const float *)(*((void *)this + 58) + 4 * *((unsigned int *)this + 24)), 1, *((const float **)this + 58), 1, *((float **)this + 55), 1, *((unsigned int *)this + 24));
            for (int j = 0; j != 4; ++j)
            {
              vDSP_Length v91 = *((unsigned int *)this + 24);
              float v92 = (float *)(**(void **)(*((void *)this + 127) + 24 * v75) + 4 * (v91 * j));
              vDSP_vmul(*((const float **)this + 55), 1, v92, 1, v92, 1, v91);
              vDSP_Length v93 = *((unsigned int *)this + 24);
              float v94 = (float *)(**(void **)(*((void *)this + 127) + 24 * v75) + 4 * (v93 * j));
              vDSP_vsadd(v94, 1, (const float *)this + 6, v94, 1, v93);
            }
          }
          ++v75;
          unint64_t v43 = *((unsigned int *)this + 17);
        }
        while (v75 < v43 >> 1);
      }
      unsigned int v42 = v207;
LABEL_82:
      if (v43 >= 2)
      {
        unint64_t v95 = 0;
        float v96 = &a7->mBuffers[0].mData;
        do
        {
          float v97 = (float *)*v96;
          v96 += 2;
          vDSP_vclr(v97, 1, *((unsigned int *)this + 18));
          ++v95;
        }
        while (v95 < (unint64_t)*((unsigned int *)this + 17) >> 1);
      }
LABEL_85:
      vDSP_vclr(*((float **)this + 61), 1, (2 * *((_DWORD *)this + 24)));
      vDSP_vclr(*((float **)this + 58), 1, (4 * *((_DWORD *)this + 24)));
      vDSP_vclr(*((float **)this + 55), 1, *((unsigned int *)this + 24));
      HIDWORD(v226) = 1065353216;
      vDSP_vfill((const float *)&v226 + 1, *((float **)this + 70), 1, (2 * *((_DWORD *)this + 24)));
      vDSP_vfill((const float *)&v226 + 1, *((float **)this + 64), 1, (2 * *((_DWORD *)this + 24)));
      if (!*(_DWORD *)this) {
        goto LABEL_173;
      }
      uint64_t v98 = 0;
      if (v42 <= 1) {
        uint64_t v99 = 1;
      }
      else {
        uint64_t v99 = v42;
      }
      float v203 = (float *)((char *)this + 24);
      while (1)
      {
        vDSP_vclr(*((float **)this + 55), 1, *((unsigned int *)this + 24));
        if (v202)
        {
          for (uint64_t k = 0; k != v202; ++k)
          {
            vDSP_vclr(*((float **)this + 61), 1, (2 * *((_DWORD *)this + 24)));
            unint64_t v101 = 0;
            __float2 v102 = (float *)(*((void *)this + 61) + 4 * *((unsigned int *)this + 24));
            v218.realp = (float *)*((void *)this + 61);
            v218.imagp = v102;
            do
            {
              uint64_t v103 = *((void *)this + 19);
              if (v101 >= (*((void *)this + 20) - v103) >> 2) {
                goto LABEL_181;
              }
              uint64_t v104 = 3 * *(unsigned int *)(v103 + 4 * v101);
              uint64_t v105 = *(void *)(*(void *)(*((void *)this + 127) + 8 * v104) + 24 * v98);
              vDSP_Length v106 = *((unsigned int *)this + 24);
              v224.realp = (float *)(v105 + 4 * v106);
              v224.imagp = (float *)(v105 + 4 * (3 * v106));
              v219.realp = *(float **)(*(void *)(*(void *)(*((void *)this + 139) + 24 * k) + 8 * v104) + 24 * v98);
              v219.imagp = &v219.realp[v106];
              vDSP_zvma(&v224, 1, &v219, 1, &v218, 1, &v218, 1, v106);
              ++v101;
            }
            while (v99 != v101);
            vDSP_Length v107 = *((unsigned int *)this + 24);
            float v108 = (float *)(*(void *)(*(void *)(*((void *)this + 115) + 24 * k) + 24 * v98) + 4 * v107);
            v216.realp = *(float **)(*(void *)(*((void *)this + 115) + 24 * k) + 24 * v98);
            v216.imagp = v108;
            v217.realp = *(float **)(*(void *)(*((void *)this + 118) + 24 * k) + 24 * (v98 + 1));
            v217.imagp = &v217.realp[v107];
            vDSP_zvadd(&v216, 1, &v218, 1, &v217, 1, v107);
            vDSP_zvmgsa(&v217, 1, *((const float **)this + 55), 1, *((float **)this + 55), 1, *((unsigned int *)this + 24));
          }
        }
        *((float *)&v226 + 1) = *((float *)this + 7) * (float)((float)(1.0 / (float)v202) * *((float *)this + 7));
        vDSP_vsmul(*((const float **)this + 55), 1, (const float *)&v226 + 1, *((float **)this + 55), 1, *((unsigned int *)this + 24));
        int v109 = *((_DWORD *)this + 33);
        if (v109 != 1) {
          break;
        }
        int v212 = *((_DWORD *)this + 24);
        vvsqrtf(*((float **)this + 52), *((const float **)this + 55), &v212);
        vDSP_vthr(*((const float **)this + 52), 1, v203, *((float **)this + 52), 1, *((unsigned int *)this + 24));
        for (unint64_t m = 0; m != v99; ++m)
        {
          uint64_t v130 = *((void *)this + 19);
          if (m >= (*((void *)this + 20) - v130) >> 2) {
            goto LABEL_181;
          }
          vDSP_vclr(*(float **)(*(void *)(*((void *)this + 136) + 24 * *(unsigned int *)(v130 + 4 * m)) + 24 * v98), 1, (4 * *((_DWORD *)this + 24)));
        }
        HIDWORD(v226) = 1065353216;
        vDSP_svdiv((const float *)&v226 + 1, *((const float **)this + 52), 1, *((float **)this + 64), 1, *((unsigned int *)this + 24));
        vDSP_svdiv((const float *)&v226 + 1, *((const float **)this + 52), 1, (float *)(*((void *)this + 64) + 4 * *((unsigned int *)this + 24)), 1, *((unsigned int *)this + 24));
        unint64_t v131 = 0;
        uint64_t v209 = 1;
        unsigned int v132 = (const float *)((char *)this + 16);
        do
        {
          uint64_t v133 = *((void *)this + 19);
          if (v131 >= (*((void *)this + 20) - v133) >> 2) {
            goto LABEL_181;
          }
          unint64_t v134 = 0;
          int v135 = *(_DWORD *)(v133 + 4 * v131);
          LODWORD(v136) = v209;
          unsigned int v137 = 2 * *((_DWORD *)this + 24);
          __D.realp = (float *)*((void *)this + 58);
          __D.imagp = &__D.realp[v137];
          unsigned int v138 = (float *)(*((void *)this + 79) + 4 * v137);
          v215.realp = (float *)*((void *)this + 79);
          v215.imagp = v138;
          int v139 = ~v135;
          do
          {
            uint64_t v140 = *((void *)this + 19);
            if (v134 >= (*((void *)this + 20) - v140) >> 2) {
              goto LABEL_181;
            }
            uint64_t v141 = 3 * *(unsigned int *)(v140 + 4 * v134);
            int v142 = *((_DWORD *)this + 24);
            v230.realp = *(float **)(*(void *)(*((void *)this + 127) + 8 * v141) + 24 * v98);
            v230.imagp = &v230.realp[2 * v142];
            v228.realp = *(float **)(*(void *)(*(void *)(*((void *)this + 148)
                                                           + 24 * (*((_DWORD *)this + 20) + v139))
                                               + 8 * v141)
                                   + 24 * v98);
            v228.imagp = &v228.realp[2 * v142];
            vDSP_vsmul(v228.realp, 1, v132, v228.realp, 1, (4 * v142));
            int v143 = *((_DWORD *)this + 24);
            if (v134) {
              vDSP_zvcma(&v228, 1, &v230, 1, &__D, 1, &__D, 1, (2 * v143));
            }
            else {
              vDSP_zvmul(&v228, 1, &v230, 1, &__D, 1, (2 * v143), -1);
            }
            ++v134;
          }
          while (v209 != v134);
          HIDWORD(v226) = 1065353216;
          vDSP_zvmags(&__D, 1, *((float **)this + 61), 1, (2 * *((_DWORD *)this + 24)));
          vDSP_vmsa(*((const float **)this + 64), 1, *((const float **)this + 61), 1, (const float *)&v226 + 1, *((float **)this + 73), 1, (2 * *((_DWORD *)this + 24)));
          vDSP_vthr(*((const float **)this + 73), 1, v203, *((float **)this + 73), 1, (2 * *((_DWORD *)this + 24)));
          vDSP_vdiv(*((const float **)this + 73), 1, *((const float **)this + 64), 1, *((float **)this + 67), 1, (2 * *((_DWORD *)this + 24)));
          vDSP_zrvmul(&__D, 1, *((const float **)this + 67), 1, &v215, 1, (2 * *((_DWORD *)this + 24)));
          vDSP_zvconj(&v215, 1, &v215, 1, (2 * *((_DWORD *)this + 24)));
          int v211 = 2 * *((_DWORD *)this + 24);
          vvsqrtf(*((float **)this + 76), *((const float **)this + 73), &v211);
          vDSP_zvneg(&__D, 1, &__D, 1, (2 * *((_DWORD *)this + 24)));
          if ((v131 & 0x80000000) == 0)
          {
            do
            {
              unint64_t v136 = (v136 - 1);
              uint64_t v144 = *((void *)this + 19);
              if (v136 >= (*((void *)this + 20) - v144) >> 2) {
                goto LABEL_181;
              }
              unint64_t v145 = *(unsigned int *)(v144 + 4 * v136);
              int v146 = *((_DWORD *)this + 24);
              v229.realp = (float *)*((void *)this + 40);
              v229.imagp = &v229.realp[2 * v146];
              memcpy(v229.realp, *(const void **)(*(void *)(*((void *)this + 136) + 24 * v145) + 24 * v98), 4 * (4 * v146));
              uint64_t v147 = (2 * *((_DWORD *)this + 24));
              v228.realp = *(float **)(*(void *)(*(void *)(*((void *)this + 148)
                                                             + 24 * (*((_DWORD *)this + 20) + v139))
                                                 + 24 * v145)
                                     + 24 * v98);
              v228.imagp = &v228.realp[v147];
              aDSP_zvmama((float32x4_t *)&__D, 1, (float32x4_t **)&v228, 1, (float32x4_t **)&v229, 1, (float32x4_t **)&v215, 1, (float32x4_t **)&v228, 1, v147);
              vDSP_zrvmul(&v228, 1, *((const float **)this + 76), 1, &v228, 1, (2 * *((_DWORD *)this + 24)));
              if (v131 == v136)
              {
                vDSP_dotpr(*(const float **)(*(void *)(*(void *)(*((void *)this + 148)+ 24 * (*((_DWORD *)this + 20) + v139))+ 24 * v145)+ 24 * v98), 1, *(const float **)(*(void *)(*(void *)(*((void *)this + 148)+ 24 * (*((_DWORD *)this + 20) + v139))+ 24 * v145)+ 24 * v98), 1, (float *)&v226 + 1, (2 * *((_DWORD *)this + 24)));
                *((float *)&v226 + 1) = (float)(1.0 / *((float *)&v226 + 1))
                                      / (float)(2 * *((_DWORD *)this + 24));
                if (*((float *)&v226 + 1) < sqrtf(*((float *)this + 6))) {
                  *(void *)(*((void *)this + 22) + ((v145 >> 3) & 0x1FFFFFF8)) |= 1 << v145;
                }
              }
              uint64_t v148 = *((void *)this + 19);
              if (v131 >= (*((void *)this + 20) - v148) >> 2) {
                goto LABEL_181;
              }
              if (((*(void *)(*((void *)this + 22)
                               + (((unint64_t)*(unsigned int *)(v148 + 4 * v131) >> 3) & 0x1FFFFFF8)) >> *(_DWORD *)(v148 + 4 * v131)) & 1) == 0
                || !*((unsigned char *)this + 148))
              {
                memcpy(*(void **)(*(void *)(*((void *)this + 136) + 24 * v145) + 24 * v98), *((const void **)this + 40), 4 * (4 * *((_DWORD *)this + 24)));
              }
              unsigned int v132 = (const float *)((char *)this + 16);
            }
            while ((int)v136 > 0);
          }
          uint64_t v149 = *((void *)this + 19);
          if (v131 >= (*((void *)this + 20) - v149) >> 2) {
            goto LABEL_181;
          }
          if (((*(void *)(*((void *)this + 22)
                           + (((unint64_t)*(unsigned int *)(v149 + 4 * v131) >> 3) & 0x1FFFFFF8)) >> *(_DWORD *)(v149 + 4 * v131)) & 1) == 0
            || !*((unsigned char *)this + 148))
          {
            memcpy(*((void **)this + 64), *((const void **)this + 67), 8 * *((unsigned int *)this + 24));
          }
          ++v131;
          ++v209;
        }
        while (v131 != v99);
        for (unint64_t n = 0; n != v99; ++n)
        {
          uint64_t v151 = *((void *)this + 19);
          if (n >= (*((void *)this + 20) - v151) >> 2) {
            goto LABEL_181;
          }
          vDSP_Length v152 = (2 * *((_DWORD *)this + 24));
          v229.realp = *(float **)(*(void *)(*((void *)this + 136) + 24 * *(unsigned int *)(v151 + 4 * n))
                                 + 24 * v98);
          v229.imagp = &v229.realp[v152];
          vDSP_zrvmul(&v229, 1, *((const float **)this + 64), 1, &v229, 1, v152);
        }
        vDSP_vmul(*((const float **)this + 52), 1, *((const float **)this + 64), 1, *((float **)this + 64), 1, *((unsigned int *)this + 24));
        vDSP_vmul(*((const float **)this + 52), 1, (const float *)(*((void *)this + 64) + 4 * *((unsigned int *)this + 24)), 1, (float *)(*((void *)this + 64) + 4 * *((unsigned int *)this + 24)), 1, *((unsigned int *)this + 24));
        int v211 = 2 * *((_DWORD *)this + 24);
        vvsqrtf(*((float **)this + 64), *((const float **)this + 64), &v211);
        vDSP_vmul(*((const float **)this + 64), 1, *((const float **)this + 70), 1, *((float **)this + 70), 1, (2 * *((_DWORD *)this + 24)));
LABEL_141:
        if (*((unsigned char *)this + 130))
        {
          unint64_t v153 = 0;
          do
          {
            uint64_t v154 = *((void *)this + 19);
            if (v153 >= (*((void *)this + 20) - v154) >> 2) {
              goto LABEL_181;
            }
            vDSP_Length v155 = (2 * *((_DWORD *)this + 24));
            v229.realp = *(float **)(*(void *)(*((void *)this + 136) + 24 * *(unsigned int *)(v154 + 4 * v153))
                                   + 24 * v98);
            v229.imagp = &v229.realp[v155];
            vDSP_zvconj(&v229, 1, &v229, 1, v155);
          }
          while (v99 != ++v153);
        }
        unint64_t v156 = 0;
        uint64_t v210 = (float *)(v98 + 1);
        do
        {
          uint64_t v157 = *((void *)this + 19);
          if (v156 >= (*((void *)this + 20) - v157) >> 2) {
            goto LABEL_181;
          }
          uint64_t v158 = *(unsigned int *)(v157 + 4 * v156);
          vDSP_vclr(*((float **)this + 58), 1, (4 * *((_DWORD *)this + 24)));
          unint64_t v159 = 0;
          uint64_t v160 = *((unsigned int *)this + 24);
          __D.realp = (float *)*((void *)this + 58);
          __D.imagp = &__D.realp[(2 * v160)];
          v223.realp = &__D.realp[v160];
          v223.imagp = &__D.realp[(3 * v160)];
          do
          {
            uint64_t v161 = *((void *)this + 19);
            if (v159 >= (*((void *)this + 20) - v161) >> 2) {
              goto LABEL_181;
            }
            uint64_t v162 = 3 * *(unsigned int *)(v161 + 4 * v159);
            vDSP_Length v163 = *((unsigned int *)this + 24);
            v224.realp = *(float **)(*(void *)(*((void *)this + 124) + 24 * *(unsigned int *)(v161 + 4 * v159))
                                   + 24 * v98);
            v224.imagp = &v224.realp[v163];
            __A.realp = *(float **)(*(void *)(*(void *)(*((void *)this + 142) + 24 * v158) + 8 * v162) + 24 * v98);
            __A.imagp = &__A.realp[v163];
            vDSP_zvma(&v224, 1, &__A, 1, &__D, 1, &__D, 1, v163);
            vDSP_Length v164 = *((unsigned int *)this + 24);
            __C.realp = *(float **)(*(void *)(*((void *)this + 127) + 8 * v162) + 24 * v98);
            __C.imagp = &__C.realp[(2 * v164)];
            v227.realp = *(float **)(*(void *)(*(void *)(*((void *)this + 145) + 24 * v158) + 8 * v162) + 24 * v98);
            v227.imagp = &v227.realp[v164];
            vDSP_zvma(&__C, 1, &v227, 1, &v223, 1, &v223, 1, v164);
            ++v159;
          }
          while (v99 != v159);
          uint64_t v165 = *((void *)this + 127);
          vDSP_Length v166 = *((unsigned int *)this + 24);
          v230.realp = *(float **)(*(void *)(v165 + 24 * v158) + 24 * v98);
          v230.imagp = &v230.realp[(2 * v166)];
          __B.realp = *(float **)(*(void *)(v165 + 24 * v158) + 24 * (void)v210);
          __B.imagp = &__B.realp[(2 * v166)];
          vDSP_zvadd(&v230, 1, &__D, 1, &__B, 1, v166);
          vDSP_Length v167 = *((unsigned int *)this + 24);
          v221.realp = *(float **)(*(void *)(*((void *)this + 124) + 24 * v158) + 24 * v98);
          v221.imagp = &v221.realp[v167];
          uint64_t v168 = *(void *)(*(void *)(*((void *)this + 127) + 24 * v158) + 24 * (void)v210);
          v222.realp = (float *)(v168 + 4 * v167);
          v222.imagp = (float *)(v168 + 4 * (3 * v167));
          vDSP_zvadd(&v221, 1, &v223, 1, &v222, 1, v167);
          for (iint i = 0; ii != v99; ++ii)
          {
            uint64_t v170 = *((void *)this + 19);
            if (ii >= (*((void *)this + 20) - v170) >> 2) {
              goto LABEL_181;
            }
            uint64_t v171 = *(unsigned int *)(v170 + 4 * ii);
            vDSP_Length v172 = *((unsigned int *)this + 24);
            __A.realp = *(float **)(*(void *)(*(void *)(*((void *)this + 142) + 24 * v158)
                                              + 24 * v171)
                                  + 24 * v98);
            __A.imagp = &__A.realp[v172];
            uint64_t v173 = *((void *)this + 133);
            float v174 = (float *)(*(void *)(*(void *)(v173 + 24 * v171) + 24 * v98) + 4 * v172);
            v220.realp = *(float **)(*(void *)(v173 + 24 * v171) + 24 * v98);
            v220.imagp = v174;
            if (*((unsigned char *)this + 130)) {
              vDSP_zvma(&v220, 1, &__B, 1, &__A, 1, &__A, 1, v172);
            }
            else {
              vDSP_zvcma(&v220, 1, &__B, 1, &__A, 1, &__A, 1, v172);
            }
            vDSP_Length v175 = *((unsigned int *)this + 24);
            v227.realp = *(float **)(*(void *)(*(void *)(*((void *)this + 145) + 24 * v158)
                                               + 24 * v171)
                                   + 24 * v98);
            v227.imagp = &v227.realp[v175];
            v229.realp = *(float **)(*(void *)(*((void *)this + 136) + 24 * v171) + 24 * v98);
            v229.imagp = &v229.realp[(2 * v175)];
            if (*((unsigned char *)this + 130)) {
              vDSP_zvma(&v229, 1, &v222, 1, &v227, 1, &v227, 1, v175);
            }
            else {
              vDSP_zvcma(&v229, 1, &v222, 1, &v227, 1, &v227, 1, v175);
            }
          }
          vDSP_zrvmul(&__B, 1, *(const float **)(*((void *)this + 82) + 24 * v98), 1, &__B, 1, *((unsigned int *)this + 24));
          vDSP_zrvmul(&v222, 1, *((const float **)this + 64), 1, &v222, 1, *((unsigned int *)this + 24));
          vDSP_zrvmul(&__B, 1, *(const float **)(*((void *)this + 130) + 24 * v158), 1, &__B, 1, (2 * *((_DWORD *)this + 24)));
          ++v156;
        }
        while (v156 != v99);
        if (v202)
        {
          for (jint j = 0; jj != v202; ++jj)
          {
            unint64_t v177 = 0;
            uint64_t v178 = *((unsigned int *)this + 24);
            float v179 = (float *)(*(void *)(*(void *)(*((void *)this + 118) + 24 * jj) + 24 * (void)v210) + 4 * v178);
            v217.realp = *(float **)(*(void *)(*((void *)this + 118) + 24 * jj) + 24 * (void)v210);
            v217.imagp = v179;
            int v180 = (float *)(*(void *)(*(void *)(*((void *)this + 115) + 24 * jj) + 24 * (void)v210) + 4 * v178);
            v218.realp = *(float **)(*(void *)(*((void *)this + 115) + 24 * jj) + 24 * (void)v210);
            v218.imagp = v180;
            do
            {
              uint64_t v181 = *((void *)this + 19);
              if (v177 >= (*((void *)this + 20) - v181) >> 2) {
                goto LABEL_181;
              }
              uint64_t v182 = 3 * *(unsigned int *)(v181 + 4 * v177);
              uint64_t v183 = *(float **)(*(void *)(*(void *)(*((void *)this + 139) + 24 * jj)
                                           + 24 * *(unsigned int *)(v181 + 4 * v177))
                               + 24 * v98);
              vDSP_Length v184 = *((unsigned int *)this + 24);
              v219.realp = v183;
              v219.imagp = &v183[v184];
              uint64_t v185 = *(void *)(*(void *)(*((void *)this + 136) + 8 * v182) + 24 * v98);
              v220.realp = (float *)(v185 + 4 * v184);
              v220.imagp = (float *)(v185 + 4 * (3 * v184));
              if (*((unsigned char *)this + 130)) {
                vDSP_zvma(&v220, 1, &v217, 1, &v219, 1, &v219, 1, v184);
              }
              else {
                vDSP_zvcma(&v220, 1, &v217, 1, &v219, 1, &v219, 1, v184);
              }
              ++v177;
            }
            while (v99 != v177);
            vDSP_zrvmul(&v217, 1, (const float *)(*((void *)this + 64) + 4 * *((unsigned int *)this + 24)), 1, &v218, 1, *((unsigned int *)this + 24));
          }
        }
        memcpy(*(void **)(*((void *)this + 82) + 24 * v98), (const void *)(*((void *)this + 64) + 4 * *((unsigned int *)this + 24)), 4 * *((unsigned int *)this + 24));
        for (kuint64_t k = 0; kk != v99; ++kk)
        {
          uint64_t v187 = *((void *)this + 19);
          if (kk >= (*((void *)this + 20) - v187) >> 2) {
            goto LABEL_181;
          }
          uint64_t v188 = 3 * *(unsigned int *)(v187 + 4 * kk);
          memcpy(*(void **)(*(void *)(*((void *)this + 124) + 24 * *(unsigned int *)(v187 + 4 * kk)) + 24 * v98), (const void *)(*(void *)(*(void *)(*((void *)this + 127) + 24 * *(unsigned int *)(v187 + 4 * kk))+ 24 * v98)+ 4 * *((unsigned int *)this + 24)), 4 * *((unsigned int *)this + 24));
          memcpy((void *)(*(void *)(*(void *)(*((void *)this + 124) + 8 * v188) + 24 * v98)+ 4 * *((unsigned int *)this + 24)), (const void *)(*(void *)(*(void *)(*((void *)this + 127) + 8 * v188) + 24 * v98)+ 4 * (3 * *((_DWORD *)this + 24))), 4 * *((unsigned int *)this + 24));
          memcpy(*(void **)(*(void *)(*((void *)this + 133) + 8 * v188) + 24 * v98), (const void *)(*(void *)(*(void *)(*((void *)this + 136) + 8 * v188) + 24 * v98)+ 4 * *((unsigned int *)this + 24)), 4 * *((unsigned int *)this + 24));
          memcpy((void *)(*(void *)(*(void *)(*((void *)this + 133) + 8 * v188) + 24 * v98)+ 4 * *((unsigned int *)this + 24)), (const void *)(*(void *)(*(void *)(*((void *)this + 136) + 8 * v188) + 24 * v98)+ 4 * (3 * *((_DWORD *)this + 24))), 4 * *((unsigned int *)this + 24));
          vDSP_vclr(*(float **)(*(void *)(*((void *)this + 136) + 8 * v188) + 24 * v98), 1, (4 * *((_DWORD *)this + 24)));
        }
        ++v98;
        if ((unint64_t)v210 >= *(unsigned int *)this)
        {
LABEL_173:
          *((unsigned char *)this + 150) = 0;
          if (*((_DWORD *)this + 15))
          {
            uint64_t v189 = 0;
            unint64_t v190 = 0;
            int v204 = (float *)((char *)this + 392);
            uint64_t v205 = (void *)((char *)this + 296);
            uint64_t v191 = &a6->mBuffers[0].mData;
            float v192 = &a5->mBuffers[0].mData;
            int v193 = &a8->mBuffers[0].mData;
            do
            {
              unsigned int v194 = *v193;
              int v195 = (float *)*v192;
              int v196 = (float *)*v191;
              if (v190 >= v202)
              {
                memcpy(*v193, *(const void **)(*(void *)(*((void *)this + 88) + v189)+ 24 * *(int *)(*((void *)this + 28) + 4 * *((unsigned int *)this + 31))), 4 * *((unsigned int *)this + 18));
                vDSP_vclr(v195, 1, *((unsigned int *)this + 18));
                vDSP_vclr(v196, 1, *((unsigned int *)this + 18));
              }
              else
              {
                vDSP_Length v197 = *((unsigned int *)this + 24);
                int v198 = (float *)(*(void *)(*(void *)(*((void *)this + 115) + v189) + 24 * *(unsigned int *)this)
                               + 4 * v197);
                v218.realp = *(float **)(*(void *)(*((void *)this + 115) + v189) + 24 * *(unsigned int *)this);
                v218.imagp = v198;
                vDSP_zrvmul(&v218, 1, (const float *)(*((void *)this + 70) + 4 * v197), 1, &v218, 1, v197);
                vDSP_svesq(**(const float ***)(*((void *)this + 115) + v189), 1, (float *)&v226, (2 * *((_DWORD *)this + 24)));
                vDSP_svesq(*(const float **)(*(void *)(*((void *)this + 115) + v189) + 24 * *(unsigned int *)this), 1, &v225, (2 * *((_DWORD *)this + 24)));
                ecSUMO::fcn_wola_synthesis_fb((uint64_t)this, *((vDSP_DFT_SetupStruct **)this + 170), **(float ***)(*((void *)this + 115) + v189), v205, (void *)(*((void *)this + 97) + v189), (DSPComplex **)v204, v194, *((_DWORD *)this + 18), *((_DWORD *)this + 23), *((_DWORD *)this + 14));
                ecSUMO::fcn_wola_synthesis_fb((uint64_t)this, *((vDSP_DFT_SetupStruct **)this + 170), *(float **)(*(void *)(*((void *)this + 115) + v189) + 24 * *(unsigned int *)this), v205, (void *)(*((void *)this + 94) + v189), (DSPComplex **)v204, v195, *((_DWORD *)this + 18), *((_DWORD *)this + 23), *((_DWORD *)this + 14));
                vDSP_vsub(v195, 1, (const float *)v194, 1, v196, 1, *((unsigned int *)this + 18));
                if (v225 > (float)(*(float *)&v226 * 3.0))
                {
                  memcpy(v195, v194, 4 * *((unsigned int *)this + 18));
                  *((unsigned char *)this + 150) = 1;
                }
              }
              ++v190;
              v189 += 24;
              v191 += 2;
              v192 += 2;
              v193 += 2;
            }
            while (v190 < *((unsigned int *)this + 15));
          }
          return ecSUMO::fcn_ring_buffer_fwd((uint64_t)this, (uint64_t *)this + 28);
        }
      }
      if (v109) {
        goto LABEL_141;
      }
      int v212 = *((_DWORD *)this + 24);
      vvsqrtf(*((float **)this + 52), *((const float **)this + 55), &v212);
      vvsqrtf(*((float **)this + 55), *((const float **)this + 52), &v212);
      vDSP_vthr(*((const float **)this + 55), 1, v203, *((float **)this + 52), 1, *((unsigned int *)this + 24));
      memcpy((void *)(*((void *)this + 52) + 4 * *((unsigned int *)this + 24)), *((const void **)this + 52), 4 * *((unsigned int *)this + 24));
      HIDWORD(v226) = 1065353216;
      vDSP_vfill((const float *)&v226 + 1, *((float **)this + 64), 1, (2 * *((_DWORD *)this + 24)));
      unint64_t v110 = 0;
      uint64_t v111 = 1;
      do
      {
        uint64_t v112 = *((void *)this + 19);
        if (v110 >= (*((void *)this + 20) - v112) >> 2) {
          goto LABEL_181;
        }
        int v113 = *(_DWORD *)(v112 + 4 * v110);
        vDSP_vclr(*((float **)this + 58), 1, (4 * *((_DWORD *)this + 24)));
        unint64_t v114 = 0;
        unsigned int v115 = 2 * *((_DWORD *)this + 24);
        __D.realp = (float *)*((void *)this + 58);
        __D.imagp = &__D.realp[v115];
        int v116 = (float *)(*((void *)this + 79) + 4 * v115);
        v215.realp = (float *)*((void *)this + 79);
        v215.imagp = v116;
        int v117 = ~v113;
        do
        {
          uint64_t v118 = *((void *)this + 19);
          if (v114 >= (*((void *)this + 20) - v118) >> 2) {
            goto LABEL_181;
          }
          uint64_t v119 = 3 * *(unsigned int *)(v118 + 4 * v114);
          int v120 = *((_DWORD *)this + 24);
          v230.realp = *(float **)(*(void *)(*((void *)this + 127) + 8 * v119) + 24 * v98);
          v230.imagp = &v230.realp[2 * v120];
          v228.realp = *(float **)(*(void *)(*(void *)(*((void *)this + 148)
                                                         + 24 * (*((_DWORD *)this + 20) + v117))
                                             + 8 * v119)
                                 + 24 * v98);
          v228.imagp = &v228.realp[2 * v120];
          vDSP_vsmul(v228.realp, 1, (const float *)this + 4, v228.realp, 1, (4 * v120));
          vDSP_zvcma(&v230, 1, &v228, 1, &__D, 1, &__D, 1, (2 * *((_DWORD *)this + 24)));
          ++v114;
        }
        while (v111 != v114);
        vDSP_zrvdiv(&__D, 1, *((const float **)this + 52), 1, &__D, 1, (2 * *((_DWORD *)this + 24)));
        vDSP_zvabs(&__D, 1, *((float **)this + 61), 1, (2 * *((_DWORD *)this + 24)));
        vDSP_vdist(*((const float **)this + 61), 1, *((const float **)this + 64), 1, *((float **)this + 73), 1, (2 * *((_DWORD *)this + 24)));
        vDSP_vthr(*((const float **)this + 73), 1, v203, *((float **)this + 73), 1, (2 * *((_DWORD *)this + 24)));
        vDSP_vdiv(*((const float **)this + 73), 1, *((const float **)this + 64), 1, *((float **)this + 76), 1, (2 * *((_DWORD *)this + 24)));
        vDSP_zrvdiv(&__D, 1, *((const float **)this + 73), 1, &v215, 1, (2 * *((_DWORD *)this + 24)));
        memcpy(*((void **)this + 64), *((const void **)this + 73), 8 * *((unsigned int *)this + 24));
        unint64_t v121 = 0;
        do
        {
          uint64_t v122 = *((void *)this + 19);
          if (v121 >= (*((void *)this + 20) - v122) >> 2) {
            goto LABEL_181;
          }
          uint64_t v123 = 3 * *(unsigned int *)(v122 + 4 * v121);
          memcpy(*((void **)this + 61), *(const void **)(*(void *)(*((void *)this + 136) + 24 * *(unsigned int *)(v122 + 4 * v121)) + 24 * v98), 16 * *((unsigned int *)this + 24));
          vDSP_Length v124 = (2 * *((_DWORD *)this + 24));
          v229.realp = *(float **)(*(void *)(*((void *)this + 136) + 8 * v123) + 24 * v98);
          v229.imagp = &v229.realp[v124];
          v228.realp = *(float **)(*(void *)(*(void *)(*((void *)this + 148)
                                                         + 24 * (*((_DWORD *)this + 20) + v117))
                                             + 8 * v123)
                                 + 24 * v98);
          v228.imagp = &v228.realp[v124];
          vDSP_zrvmul(&v229, 1, *((const float **)this + 76), 1, &v229, 1, v124);
          vDSP_zvcmul(&v215, 1, &v228, 1, &__D, 1, (2 * *((_DWORD *)this + 24)));
          vDSP_zvsub(&v229, 1, &__D, 1, &v229, 1, (2 * *((_DWORD *)this + 24)));
          vDSP_Length v125 = (2 * *((_DWORD *)this + 24));
          v229.realp = (float *)*((void *)this + 61);
          v229.imagp = &v229.realp[v125];
          vDSP_zvmul(&v215, 1, &v229, 1, &__D, 1, v125, 1);
          vDSP_zrvmul(&v228, 1, *((const float **)this + 76), 1, &v228, 1, (2 * *((_DWORD *)this + 24)));
          vDSP_zvadd(&__D, 1, &v228, 1, &v228, 1, (2 * *((_DWORD *)this + 24)));
          ++v121;
        }
        while (v111 != v121);
        ++v110;
        ++v111;
      }
      while (v110 != v99);
      vDSP_vthr(*((const float **)this + 64), 1, v203, *((float **)this + 64), 1, (2 * *((_DWORD *)this + 24)));
      HIDWORD(v226) = 1065353216;
      vDSP_svdiv((const float *)&v226 + 1, *((const float **)this + 64), 1, *((float **)this + 64), 1, (2 * *((_DWORD *)this + 24)));
      vDSP_vmul(*((const float **)this + 64), 1, *((const float **)this + 70), 1, *((float **)this + 70), 1, (2 * *((_DWORD *)this + 24)));
      vDSP_vdiv(*((const float **)this + 52), 1, *((const float **)this + 64), 1, *((float **)this + 73), 1, (2 * *((_DWORD *)this + 24)));
      unint64_t v126 = 0;
      while (1)
      {
        uint64_t v127 = *((void *)this + 19);
        if (v126 >= (*((void *)this + 20) - v127) >> 2) {
          break;
        }
        vDSP_Length v128 = (2 * *((_DWORD *)this + 24));
        v229.realp = *(float **)(*(void *)(*((void *)this + 136) + 24 * *(unsigned int *)(v127 + 4 * v126))
                               + 24 * v98);
        v229.imagp = &v229.realp[v128];
        vDSP_zrvmul(&v229, 1, *((const float **)this + 73), 1, &v229, 1, v128);
        if (v99 == ++v126) {
          goto LABEL_141;
        }
      }
LABEL_181:
      std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
    }
  }
  else
  {
    unsigned int v41 = *((_DWORD *)this + 15);
  }
  if (v41)
  {
    uint64_t v66 = 0;
    unint64_t v67 = 0;
    float v68 = &a6->mBuffers[0].mData;
    char v69 = &a5->mBuffers[0].mData;
    float v70 = &a8->mBuffers[0].mData;
    do
    {
      unsigned __int8 v71 = *v70;
      char v72 = *v69;
      uint64_t v208 = (float *)*v68;
      memcpy(*(void **)(*(void *)(*((void *)this + 115) + v66) + 24 * *(unsigned int *)this), **(const void ***)(*((void *)this + 115) + v66), 8 * *((unsigned int *)this + 24));
      ecSUMO::fcn_wola_synthesis_fb((uint64_t)this, *((vDSP_DFT_SetupStruct **)this + 170), **(float ***)(*((void *)this + 115) + v66), (void *)this + 37, (void *)(*((void *)this + 97) + v66), (DSPComplex **)this + 49, v71, *((_DWORD *)this + 18), *((_DWORD *)this + 23), *((_DWORD *)this + 14));
      ecSUMO::fcn_wola_synthesis_fb((uint64_t)this, *((vDSP_DFT_SetupStruct **)this + 170), *(float **)(*(void *)(*((void *)this + 115) + v66) + 24 * *(unsigned int *)this), (void *)this + 37, (void *)(*((void *)this + 94) + v66), (DSPComplex **)this + 49, v72, *((_DWORD *)this + 18), *((_DWORD *)this + 23), *((_DWORD *)this + 14));
      vDSP_vclr(v208, 1, *((unsigned int *)this + 18));
      LODWORD(__A.realp) = 0;
      vDSP_svesq(*(const float **)(*((void *)this + 106) + v66), 1, (float *)&__A, *((unsigned int *)this + 18));
      if (*(float *)&__A.realp == 0.0)
      {
        vDSP_vclr((float *)v71, 1, *((unsigned int *)this + 18));
        vDSP_vclr((float *)v72, 1, *((unsigned int *)this + 18));
      }
      ++v67;
      v66 += 24;
      v68 += 2;
      v69 += 2;
      v70 += 2;
    }
    while (v67 < *((unsigned int *)this + 15));
  }
  uint64_t result = ecSUMO::fcn_ring_buffer_fwd((uint64_t)this, (uint64_t *)this + 28);
  *((unsigned char *)this + 128) = 0;
  return result;
}

float ecSUMO::fcn_wola_analysis_fb(uint64_t a1, const vDSP_DFT_SetupStruct *a2, void *a3, void *a4, float **a5, float **a6, vDSP_Length __N, int a8, int a9)
{
  LODWORD(v9) = a8;
  int v10 = __N;
  uint64_t v17 = (a8 + 1);
  unsigned int v18 = &(*a6)[v17];
  __Z.realp = *a6;
  __Z.imagp = v18;
  vDSP_vclr(*a5, 1, __N);
  vDSP_vclr(*a6, 1, (v10 + 2));
  if (a9)
  {
    uint64_t v23 = v17;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    vDSP_Length v9 = v9;
    do
    {
      uint64_t v21 = &(*a5)[(v20 << 63 >> 63) & v9];
      vDSP_vma(*(const float **)(*a3 + 24 * *(unsigned int *)(*(void *)(a1 + 224) + 4 * v20++)), 1, *(const float **)(*a4 + v19), 1, v21, 1, v21, 1, v9);
      v19 += 24;
    }
    while (a9 != v20);
    uint64_t v17 = v23;
  }
  else
  {
    vDSP_Length v9 = v9;
  }
  vDSP_ctoz((const DSPComplex *)*a5, 2, &__Z, 1, v9);
  vDSP_DFT_Execute(a2, __Z.realp, __Z.imagp, __Z.realp, __Z.imagp);
  float result = (*a6)[v17];
  (*a6)[v9] = result;
  return result;
}

uint64_t ecSUMO::fcn_ring_buffer_fwd(uint64_t result, uint64_t *a2)
{
  int v2 = *(_DWORD *)(result + 116);
  int v3 = *(_DWORD *)(result + 56);
  if (v2 + 1 == v3) {
    int v4 = 0;
  }
  else {
    int v4 = v2 + 1;
  }
  *(_DWORD *)(result + 116) = v4;
  if (v3)
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = *a2;
      int v7 = *(_DWORD *)(*a2 + 4 * v5);
      *(_DWORD *)(*a2 + 4 * v5) = v7 + 1;
      if (v7 + 1 == *(_DWORD *)(result + 56)) {
        int v8 = 0;
      }
      else {
        int v8 = v7 + 1;
      }
      *(_DWORD *)(v6 + 4 * v5++) = v8;
    }
    while (v5 < *(unsigned int *)(result + 56));
  }
  return result;
}

void ecSUMO::fcn_wola_synthesis_fb(uint64_t a1, vDSP_DFT_SetupStruct *__Setup, float *__Or, void *a4, void *a5, DSPComplex **a6, void *a7, unsigned int a8, unsigned int a9, int a10)
{
  float v15 = __Or[a9];
  uint64_t v16 = &__Or[a9 + 1];
  float *v16 = v15;
  __Z.realp = __Or;
  __Z.imagp = v16;
  vDSP_DFT_Execute(__Setup, __Or, v16, __Or, v16);
  vDSP_ztoc(&__Z, 1, *a6, 2, a9);
  if (a10)
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    do
    {
      uint64_t v19 = *(unsigned int *)(*(void *)(a1 + 224) + 4 * v18);
      uint64_t v20 = *(float **)(*a5 + 24 * v19);
      vDSP_vma((const float *)*a6 + ((v18++ << 63 >> 63) & a9), 1, *(const float **)(*a4 + v17), 1, v20, 1, v20, 1, a9);
      v17 += 24;
    }
    while (a10 != v18);
  }
  else
  {
    uint64_t v19 = 0;
  }
  memcpy(a7, *(const void **)(*a5 + 24 * v19), 4 * a8);
  vDSP_vclr(*(float **)(*a5 + 24 * v19), 1, a8);
}

uint64_t ecMIMO_iQRD::fcn_ecoutOverwritten(ecMIMO_iQRD *this)
{
  return *((unsigned __int8 *)this + 156);
}

uint64_t ecMIMO_iQRD::fcn_isAdapting(ecMIMO_iQRD *this)
{
  return *((unsigned __int8 *)this + 132);
}

float ecMIMO_iQRD::fcn_get_mic_eclee_xcorr(ecMIMO_iQRD *this)
{
  return *((float *)this + 38);
}

float ecMIMO_iQRD::fcn_get_sxx(ecMIMO_iQRD *this)
{
  unsigned int v1 = *((_DWORD *)this + 3);
  if (v1)
  {
    int v2 = (float *)*((void *)this + 41);
    float v3 = 0.0;
    uint64_t v4 = *((unsigned int *)this + 3);
    do
    {
      float v5 = *v2++;
      float v3 = v3 + v5;
      --v4;
    }
    while (v4);
  }
  else
  {
    float v3 = 0.0;
  }
  return v3 / (float)v1;
}

float ecMIMO_iQRD::fcn_get_ref_power_in_db(ecMIMO_iQRD *this, unsigned int a2)
{
  return log10f(*(float *)(*((void *)this + 41) + 4 * a2) + *((float *)this + 14)) * 10.0;
}

float ecMIMO_iQRD::fcn_get_erle_external_db(ecMIMO_iQRD *this, unsigned int a2)
{
  uint64_t __C = 0;
  uint64_t v3 = 24 * a2;
  vDSP_svesq((const float *)(*(void *)(*((void *)this + 77) + v3)+ 4 * (*((_DWORD *)this + 6) - *((_DWORD *)this + 9))), 1, (float *)&__C + 1, *((unsigned int *)this + 9));
  vDSP_svesq((const float *)(*(void *)(*((void *)this + 71) + v3)+ 4 * (*((_DWORD *)this + 6) - *((_DWORD *)this + 9))), 1, (float *)&__C, *((unsigned int *)this + 9));
  return log10f((float)(*((float *)&__C + 1) + *((float *)this + 14)) / (float)(*((float *)this + 14) + *(float *)&__C))
       * 10.0;
}

float ecMIMO_iQRD::fcn_get_erle_internal_db(ecMIMO_iQRD *this, unsigned int a2)
{
  uint64_t __C = 0;
  uint64_t v3 = 24 * a2;
  vDSP_svesq((const float *)(*(void *)(*((void *)this + 77) + v3)+ 4 * (*((_DWORD *)this + 6) - *((_DWORD *)this + 9))), 1, (float *)&__C + 1, *((unsigned int *)this + 9));
  vDSP_svesq((const float *)(*(void *)(*((void *)this + 74) + v3)+ 4 * (*((_DWORD *)this + 6) - *((_DWORD *)this + 9))), 1, (float *)&__C, *((unsigned int *)this + 9));
  return log10f((float)(*((float *)&__C + 1) + *((float *)this + 14)) / (float)(*((float *)this + 14) + *(float *)&__C))
       * 10.0;
}

BOOL ecMIMO_iQRD::fcn_isfinite_ref(ecMIMO_iQRD *this)
{
  unint64_t v1 = *((unsigned int *)this + 3);
  if (!v1) {
    return 1;
  }
  int v2 = (_DWORD *)*((void *)this + 41);
  if ((*v2 & 0x7FFFFFFFu) > 0x7F7FFFFF) {
    return 0;
  }
  unint64_t v3 = 0;
  uint64_t v4 = v2 + 1;
  while (v1 - 1 != v3)
  {
    int v5 = v4[v3++] & 0x7FFFFFFF;
    if (v5 >= 2139095040) {
      return v3 >= v1;
    }
  }
  unint64_t v3 = *((unsigned int *)this + 3);
  return v3 >= v1;
}

BOOL ecMIMO_iQRD::fcn_isfinite_output(ecMIMO_iQRD *this)
{
  float __C = 0.0;
  if (!*((_DWORD *)this + 2)) {
    return 1;
  }
  uint64_t v2 = 0;
  unint64_t v3 = 0;
  while (1)
  {
    vDSP_sve((const float *)(*(void *)(*((void *)this + 77) + v2)+ 4 * (*((_DWORD *)this + 6) - *((_DWORD *)this + 9))), 1, &__C, *((unsigned int *)this + 9));
    BOOL result = (LODWORD(__C) & 0x7FFFFFFFu) < 0x7F800000;
    if ((LODWORD(__C) & 0x7FFFFFFFu) >= 0x7F800000) {
      break;
    }
    ++v3;
    v2 += 24;
    if (v3 >= *((unsigned int *)this + 2)) {
      return 1;
    }
  }
  return result;
}

BOOL ecMIMO_iQRD::fcn_isfinite_state(ecMIMO_iQRD *this)
{
  float __C = 0.0;
  if (!*((_DWORD *)this + 2)) {
    return 1;
  }
  uint64_t v2 = 0;
  unint64_t v3 = 0;
  while (1)
  {
    vDSP_sve((const float *)(*(void *)(*((void *)this + 74) + v2)+ 4 * (*((_DWORD *)this + 6) - *((_DWORD *)this + 9))), 1, &__C, *((unsigned int *)this + 9));
    BOOL result = (LODWORD(__C) & 0x7FFFFFFFu) < 0x7F800000;
    if ((LODWORD(__C) & 0x7FFFFFFFu) >= 0x7F800000) {
      break;
    }
    ++v3;
    v2 += 24;
    if (v3 >= *((unsigned int *)this + 2)) {
      return 1;
    }
  }
  return result;
}

_DWORD *ecMIMO_iQRD::fcn_tf_output(_DWORD *result, uint64_t *a2)
{
  unint64_t v2 = result[2];
  if (v2)
  {
    uint64_t v4 = result;
    unint64_t v5 = 0;
    unsigned int v6 = result[3];
    unsigned int v7 = v6;
    do
    {
      if (v7)
      {
        uint64_t v8 = 0;
        unint64_t v9 = 0;
        int v10 = v7 * v5 * v4[16];
        uint64_t v11 = *a2;
        do
        {
          uint64_t v12 = v4[16];
          int v13 = v10 + v12 * v9;
          if ((2 * (v13 + v12)) <= (unint64_t)((a2[1] - v11) >> 2))
          {
            memcpy((void *)(v11 + 4 * (2 * v13)), *(const void **)(*(void *)(*((void *)v4 + 98) + 24 * v5) + v8), 4 * v12);
            BOOL result = memcpy((void *)(*a2 + 4 * (v4[16] + 2 * v13)), (const void *)(*(void *)(*(void *)(*((void *)v4 + 98) + 24 * v5) + v8)+ 4 * v4[8]), 4 * v4[16]);
            unsigned int v6 = v4[3];
            uint64_t v11 = *a2;
          }
          ++v9;
          v8 += 24;
        }
        while (v9 < v6);
        unint64_t v2 = v4[2];
        unsigned int v7 = v6;
      }
      ++v5;
    }
    while (v5 < v2);
  }
  return result;
}

void ecMIMO_iQRD::fcn_ir_input(uint64_t a1, uint64_t *a2)
{
  vDSP_vclr(*(float **)(a1 + 376), 1, *(unsigned int *)(a1 + 24));
  unint64_t v4 = *(unsigned int *)(a1 + 8);
  if (v4)
  {
    unint64_t v5 = 0;
    unsigned int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = v6;
    do
    {
      if (v7)
      {
        uint64_t v8 = 0;
        unint64_t v9 = 0;
        int v10 = v7 * v5 * *(_DWORD *)(a1 + 64);
        do
        {
          uint64_t v11 = *(unsigned int *)(a1 + 64);
          unsigned int v12 = v10 + v11 * v9;
          uint64_t v13 = *a2;
          if (v12 + v11 <= (unint64_t)((a2[1] - *a2) >> 2))
          {
            v16.realp = 0;
            v16.imagp = 0;
            float v14 = (float *)(*(void *)(*(void *)(*(void *)(a1 + 784) + 24 * v5) + v8)
                          + 4 * *(unsigned int *)(a1 + 32));
            v16.realp = *(float **)(*(void *)(*(void *)(a1 + 784) + 24 * v5) + v8);
            v16.imagp = v14;
            memcpy(*(void **)(a1 + 376), (const void *)(v13 + 4 * v12), 4 * v11);
            float v15 = *(MultiRadixRealFFT **)(a1 + 1000);
            if (v15) {
              MultiRadixRealFFT::RealOutOfPlaceForwardTransform(v15, *(DSPComplex **)(a1 + 376), &v16, 1.0);
            }
            unsigned int v6 = *(_DWORD *)(a1 + 12);
          }
          ++v9;
          v8 += 24;
        }
        while (v9 < v6);
        unint64_t v4 = *(unsigned int *)(a1 + 8);
        unsigned int v7 = v6;
      }
      ++v5;
    }
    while (v5 < v4);
  }
}

void ecMIMO_iQRD::fcn_ir_output(uint64_t a1, void *a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2)
  {
    unint64_t v5 = 0;
    unsigned int v6 = (const float *)(a1 + 44);
    LODWORD(v7) = *(_DWORD *)(a1 + 12);
    do
    {
      if (v7)
      {
        uint64_t v8 = 0;
        unint64_t v9 = 0;
        int v10 = v7 * v5 * *(_DWORD *)(a1 + 64);
        do
        {
          unsigned int v11 = *(_DWORD *)(a1 + 64);
          unsigned int v12 = (float *)(*(void *)(*(void *)(*(void *)(a1 + 784) + 24 * v5) + v8)
                        + 4 * *(unsigned int *)(a1 + 32));
          v15.realp = *(float **)(*(void *)(*(void *)(a1 + 784) + 24 * v5) + v8);
          v15.imagp = v12;
          uint64_t v13 = *(const vDSP_DFT_SetupStruct ****)(a1 + 1000);
          if (v13)
          {
            MultiRadixRealFFT::RealOutOfPlaceInverseTransform(v13, &v15, *(DSPComplex **)(a1 + 376));
            unsigned int v14 = *(_DWORD *)(a1 + 64);
          }
          else
          {
            unsigned int v14 = v11;
          }
          vDSP_vsmul(*(const float **)(a1 + 376), 1, v6, (float *)(*a2 + 4 * (v11 * v9++ + v10)), 1, v14);
          unint64_t v7 = *(unsigned int *)(a1 + 12);
          v8 += 24;
        }
        while (v9 < v7);
        unint64_t v2 = *(unsigned int *)(a1 + 8);
      }
      ++v5;
    }
    while (v5 < v2);
  }
}

uint64_t ecMIMO_iQRD::ec_proc(ecMIMO_iQRD *this, const AudioBufferList *a2, DSPSplitComplex *imagp, const AudioBufferList *a4, AudioBufferList *a5, AudioBufferList *a6, AudioBufferList *a7)
{
  *((unsigned char *)this + 133) = 0;
  int v217 = *((_DWORD *)this + 7);
  float v218 = 0.0;
  bzero(*((void **)this + 38), 4 * *((unsigned int *)this + 3));
  if (*((_DWORD *)this + 3))
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    unsigned int v13 = 0;
    p_mData = &a7->mBuffers[0].mData;
    ++imagp;
    do
    {
      realp = imagp->realp;
      memmove(*(void **)(*((void *)this + 68) + v11), (const void *)(*(void *)(*((void *)this + 68) + v11) + 4 * *((unsigned int *)this + 9)), 4 * (*((_DWORD *)this + 6) - *((_DWORD *)this + 9)));
      memcpy((void *)(*(void *)(*((void *)this + 68) + v11)+ 4 * (*((_DWORD *)this + 6) - *((_DWORD *)this + 9))), realp, 4 * *((unsigned int *)this + 9));
      memcpy(*p_mData, realp, 4 * *((unsigned int *)this + 9));
      vDSP_svesq(*(const float **)(*((void *)this + 68) + v11), 1, (float *)(*((void *)this + 41) + v10), *((unsigned int *)this + 6));
      uint64_t v16 = *((void *)this + 41);
      float v17 = *(float *)(v16 + 4 * v12) / (float)*((unsigned int *)this + 6);
      *(float *)(v16 + 4 * v12) = v17;
      if ((float)(v17 + *((float *)this + 14)) <= *((float *)this + 15))
      {
        uint64_t v20 = *((void *)this + 32);
        uint64_t v21 = (v12 >> 3) & 0x1FFFFFFFFFFFFFF8;
        uint64_t v22 = *(void *)(v20 + v21) | (1 << v12);
      }
      else
      {
        uint64_t v18 = (float *)(*(void *)(*((void *)this + 92) + v11) + 4 * *((unsigned int *)this + 8));
        v228.realp = *(float **)(*((void *)this + 92) + v11);
        v228.imagp = v18;
        uint64_t v19 = (MultiRadixRealFFT *)*((void *)this + 125);
        if (v19) {
          MultiRadixRealFFT::RealOutOfPlaceForwardTransform(v19, *(DSPComplex **)(*((void *)this + 68) + v11), &v228, 1.0);
        }
        *(_DWORD *)(*((void *)this + 38) + 4 * v13++) = v12;
        uint64_t v20 = *((void *)this + 32);
        uint64_t v21 = (v12 >> 3) & 0x1FFFFFFFFFFFFFF8;
        uint64_t v22 = *(void *)(v20 + v21) & ~(1 << v12);
      }
      *(void *)(v20 + v21) = v22;
      ++v12;
      v11 += 24;
      v10 += 4;
      p_mData += 2;
      ++imagp;
    }
    while (v12 < *((unsigned int *)this + 3));
  }
  else
  {
    unsigned int v13 = 0;
  }
  unsigned int v23 = *((_DWORD *)this + 2);
  if (!v23) {
    goto LABEL_57;
  }
  unsigned int v195 = v13;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  unint64_t v26 = 0;
  int v27 = &a2->mBuffers[0].mData;
  do
  {
    unint64_t v28 = *v27;
    uint64_t v29 = *((unsigned int *)this + 8);
    int v30 = *((_DWORD *)this + 9);
    if (v29 != v30)
    {
      memmove((void *)(*(void *)(*((void *)this + 71) + v24) + 4 * v29), (const void *)(*(void *)(*((void *)this + 71) + v24) + 4 * (v30 + v29)), 4 * (v29 - v30));
      LODWORD(v29) = *((_DWORD *)this + 9);
    }
    memcpy((void *)(*(void *)(*((void *)this + 71) + v24) + 4 * (*((_DWORD *)this + 6) - v29)), v28, 4 * v29);
    vDSP_svesq((const float *)v28, 1, (float *)(*((void *)this + 44) + v25), *((unsigned int *)this + 9));
    uint64_t v31 = *((void *)this + 29);
    uint64_t v32 = *(void *)(v31 + 8 * (v26 >> 6));
    *(void *)(v31 + 8 * (v26 >> 6)) = v32 & ~(1 << v26);
    if (*(float *)(*((void *)this + 44) + 4 * v26) == 0.0)
    {
      --v23;
      *(void *)(v31 + 8 * (v26 >> 6)) = v32 | (1 << v26);
    }
    ++v26;
    unint64_t v33 = *((unsigned int *)this + 2);
    v25 += 4;
    v24 += 24;
    v27 += 2;
  }
  while (v26 < v33);
  if (!v13 || !v23)
  {
    if (v33)
    {
      uint64_t v69 = 0;
      unint64_t v70 = 0;
      unsigned __int8 v71 = &a6->mBuffers[0].mData;
      char v72 = &a2->mBuffers[0].mData;
      unsigned __int8 v73 = &a5->mBuffers[0].mData;
      do
      {
        unsigned int v74 = (float *)*v71;
        memcpy(*v73, *v72, 4 * *((unsigned int *)this + 9));
        vDSP_vclr(v74, 1, *((unsigned int *)this + 9));
        vDSP_Length v75 = *((unsigned int *)this + 26);
        if (v75)
        {
          vDSP_vclr(*(float **)(*((void *)this + 86) + v69), 1, v75);
          vDSP_vclr(*(float **)(*((void *)this + 89) + v69), 1, *((unsigned int *)this + 26));
        }
        ++v70;
        v69 += 24;
        v71 += 2;
        v72 += 2;
        v73 += 2;
      }
      while (v70 < *((unsigned int *)this + 2));
    }
LABEL_57:
    *((unsigned char *)this + 132) = 0;
    return 0;
  }
  *((unsigned char *)this + 132) = 1;
  vDSP_vclr(*((float **)this + 56), 1, *((unsigned int *)this + 7));
  unint64_t v34 = *((unsigned int *)this + 2);
  if (v34)
  {
    unint64_t v35 = 0;
    int64x2_t v198 = vdupq_n_s64(4uLL);
    do
    {
      if (((*(void *)(*((void *)this + 29) + ((v35 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v35) & 1) == 0)
      {
        unint64_t v36 = 0;
        int v37 = (float *)(*((void *)this + 65) + 4 * *((unsigned int *)this + 8));
        v227.realp = (float *)*((void *)this + 65);
        v227.imagp = v37;
        imagp = &v227;
        DSPSplitComplex v202 = (DSPSplitComplex)vaddq_s64((int64x2_t)v227, v198);
        uint64_t v38 = v37;
        uint64_t v39 = v227.realp;
        do
        {
          uint64_t v40 = *((void *)this + 38);
          if (v36 >= (*((void *)this + 39) - v40) >> 2) {
LABEL_151:
          }
            std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
          uint64_t v41 = 3 * *(unsigned int *)(v40 + 4 * v36);
          unsigned int v42 = (DSPSplitComplex *)*((unsigned int *)this + 8);
          v228.realp = *(float **)(*((void *)this + 92) + 8 * v41);
          v228.imagp = &v228.realp[(void)v42];
          v226.realp = *(float **)(*(void *)(*((void *)this + 98) + 24 * v35) + 8 * v41);
          v226.imagp = &v226.realp[(void)v42];
          if (v36)
          {
            ecutils::fcn_complex_mult_add((int64x2_t *)&v228, (int64x2_t *)&v226, (int64x2_t *)&v227, (int64x2_t *)&v227, v42);
          }
          else
          {
            int64x2_t v43 = vdupq_n_s64(4uLL);
            DSPSplitComplex v208 = v226;
            DSPSplitComplex __B = (DSPSplitComplex)vaddq_s64((int64x2_t)v226, v43);
            DSPSplitComplex __A = (DSPSplitComplex)vaddq_s64((int64x2_t)v228, v43);
            imagp = &v227;
            DSPSplitComplex __C = v202;
            vDSP_zvmul(&__A, 1, &__B, 1, &__C, 1, (v42 - 1), 1);
            *uint64_t v39 = *v228.realp * *v208.realp;
            *uint64_t v38 = *v228.imagp * *v208.imagp;
          }
          ++v36;
        }
        while (v13 != v36);
        ecutils::fcn_otplace_fftReal_inverse(*((const vDSP_DFT_SetupStruct ****)this + 125), &v227, *(DSPComplex **)(*((void *)this + 74) + 24 * v35), *((unsigned int *)this + 8), *((float *)this + 11));
        vDSP_Length v44 = *((unsigned int *)this + 8);
        vDSP_vadd((const float *)(*(void *)(*((void *)this + 74) + 24 * v35) + 4 * v44), 1, (const float *)(*(void *)(*((void *)this + 71) + 24 * v35) + 4 * v44), 1, (float *)(*(void *)(*((void *)this + 77) + 24 * v35) + 4 * v44), 1, v44);
        uint64_t v45 = *((unsigned int *)this + 8);
        uint64_t v46 = (float *)(*(void *)(*((void *)this + 80) + 24 * v35) + 4 * v45);
        v225.realp = *(float **)(*((void *)this + 80) + 24 * v35);
        v225.imagp = v46;
        uint64_t v47 = (MultiRadixRealFFT *)*((void *)this + 125);
        if (v47)
        {
          MultiRadixRealFFT::RealOutOfPlaceForwardTransform(v47, *(DSPComplex **)(*((void *)this + 77) + 24 * v35), &v225, 1.0);
          uint64_t v45 = *((unsigned int *)this + 8);
        }
        uint64_t v48 = *((void *)this + 56);
        DSPSplitComplex __A = (DSPSplitComplex)vaddq_s64((int64x2_t)v225, vdupq_n_s64(4uLL));
        vDSP_zvmgsa(&__A, 1, (const float *)(v48 + 4), 1, (float *)(v48 + 4), 1, (v45 - 1));
        *(float *)uint64_t v48 = *(float *)v48 + (float)(*v225.realp * *v225.realp);
        *(float *)(v48 + 4 * v45) = *(float *)(v48 + 4 * v45) + (float)(*v225.imagp * *v225.imagp);
        LODWORD(__A.realp) = 0;
        vDSP_svesq((const float *)(*(void *)(*((void *)this + 77) + 24 * v35)+ 4 * (*((_DWORD *)this + 6) - *((_DWORD *)this + 9))), 1, (float *)&__A, *((unsigned int *)this + 9));
        if (*(float *)&__A.realp > *(float *)(*((void *)this + 44) + 4 * v35)) {
          *((unsigned char *)this + 133) = 1;
        }
        unint64_t v34 = *((unsigned int *)this + 2);
      }
      ++v35;
    }
    while (v35 < v34);
  }
  float v218 = 1.0 / (float)v23;
  vDSP_vsmsa(*((const float **)this + 56), 1, &v218, (const float *)this + 17, *((float **)this + 56), 1, *((unsigned int *)this + 7));
  if (!*((unsigned char *)this + 108))
  {
    int v193 = (float *)((char *)this + 68);
    unint64_t v49 = *((unsigned int *)this + 2);
    if (v49)
    {
      uint64_t v50 = 0;
      for (unint64_t i = 0; i < v49; ++i)
      {
        if (((*(void *)(*((void *)this + 29) + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i) & 1) == 0)
        {
          memcpy(*(void **)(*((void *)this + 101) + v50), *(const void **)(*((void *)this + 80) + v50), 4 * *((unsigned int *)this + 6));
          unint64_t v49 = *((unsigned int *)this + 2);
        }
        v50 += 24;
      }
    }
    float v218 = 1.0;
    vDSP_vfill(&v218, *((float **)this + 50), 1, *((unsigned int *)this + 7));
    vDSP_svdiv((const float *)this + 19, *((const float **)this + 56), 1, *((float **)this + 59), 1, *((unsigned int *)this + 7));
    unint64_t v52 = *((unsigned int *)this + 2);
    if (v52)
    {
      unint64_t v53 = 0;
      uint64_t v54 = 1;
      int64x2_t v209 = vdupq_n_s64(4uLL);
      uint64_t v55 = 24;
      do
      {
        if ((*(void *)(*((void *)this + 29) + ((v53 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v53))
        {
          unint64_t v56 = v53 + 1;
        }
        else
        {
          uint64_t v57 = *((unsigned int *)this + 8);
          v225.realp = *(float **)(*((void *)this + 101) + 24 * v53);
          v225.imagp = &v225.realp[v57];
          v220.realp = (float *)**((void **)this + 95);
          v220.imagp = &v220.realp[v57];
          unint64_t v58 = (float *)*((void *)this + 53);
          DSPSplitComplex __A = (DSPSplitComplex)vaddq_s64((int64x2_t)v225, v209);
          vDSP_zvmags(&__A, 1, v58 + 1, 1, (v57 - 1));
          float *v58 = *v225.realp * *v225.realp;
          v58[v57] = *v225.imagp * *v225.imagp;
          vDSP_vmul(*((const float **)this + 59), 1, *((const float **)this + 50), 1, *((float **)this + 62), 1, *((unsigned int *)this + 7));
          float v59 = *(float **)(*((void *)this + 104) + 24 * v53);
          vDSP_vsmul(v59, 1, (const float *)this + 18, v59, 1, *((unsigned int *)this + 7));
          vDSP_Length v60 = *(float **)(*((void *)this + 104) + 24 * v53);
          vDSP_vma(*((const float **)this + 62), 1, *((const float **)this + 53), 1, v60, 1, v60, 1, *((unsigned int *)this + 7));
          uint64_t v61 = *(float **)(*((void *)this + 104) + 24 * v53);
          vDSP_vthr(v61, 1, v193, v61, 1, *((unsigned int *)this + 7));
          vDSP_vneg(*((const float **)this + 62), 1, *((float **)this + 62), 1, *((unsigned int *)this + 7));
          vDSP_vdiv(*(const float **)(*((void *)this + 104) + 24 * v53), 1, *((const float **)this + 62), 1, *((float **)this + 62), 1, *((unsigned int *)this + 7));
          uint64_t v62 = *((void *)this + 62);
          uint64_t v63 = *((unsigned int *)this + 8);
          DSPSplitComplex v199 = v220;
          DSPSplitComplex v203 = (DSPSplitComplex)vaddq_s64((int64x2_t)v220, v209);
          DSPSplitComplex __B = v203;
          DSPSplitComplex __A = (DSPSplitComplex)vaddq_s64((int64x2_t)v225, v209);
          vDSP_zrvmul(&__A, 1, (const float *)(v62 + 4), 1, &__B, 1, (v63 - 1));
          *v199.realp = *v225.realp * *(float *)v62;
          imagp = (DSPSplitComplex *)v199.imagp;
          *v199.imagp = *v225.imagp * *(float *)(v62 + 4 * v63);
          int v64 = *((_DWORD *)this + 8);
          DSPSplitComplex __B = v203;
          DSPSplitComplex __A = v203;
          vDSP_zvconj(&__A, 1, &__B, 1, (v64 - 1));
          float v218 = 1.0;
          vDSP_vmsa(*((const float **)this + 62), 1, *((const float **)this + 53), 1, &v218, *((float **)this + 62), 1, *((unsigned int *)this + 7));
          vDSP_vmul(*((const float **)this + 50), 1, *((const float **)this + 62), 1, *((float **)this + 50), 1, *((unsigned int *)this + 7));
          unint64_t v56 = v53 + 1;
          unint64_t v52 = *((unsigned int *)this + 2);
          if (v53 + 1 < v52)
          {
            uint64_t v65 = v55;
            unint64_t v66 = v54;
            do
            {
              if (((*(void *)(*((void *)this + 29) + ((v66 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v66) & 1) == 0)
              {
                unint64_t v67 = (DSPSplitComplex *)*((unsigned int *)this + 8);
                uint64_t v68 = *(void *)(*((void *)this + 107) + 24 * v53);
                v224.realp = *(float **)(*((void *)this + 101) + v65);
                v224.imagp = &v224.realp[(void)v67];
                v219.realp = *(float **)(v68 + v65);
                v219.imagp = &v219.realp[(void)v67];
                ecutils::fcn_complex_mult_add_mult_add((int64x2_t *)&v225, (int64x2_t *)&v219, (int64x2_t *)&v224, (int64x2_t *)&v220, (int64x2_t *)&v219, v67);
                unint64_t v52 = *((unsigned int *)this + 2);
              }
              ++v66;
              v65 += 24;
            }
            while (v66 < v52);
          }
        }
        ++v54;
        v55 += 24;
        unint64_t v53 = v56;
      }
      while (v56 < v52);
    }
    vDSP_vneg(*((const float **)this + 50), 1, *((float **)this + 50), 1, *((unsigned int *)this + 7));
    float v218 = 1.0;
    vDSP_vsadd(*((const float **)this + 50), 1, &v218, *((float **)this + 50), 1, *((unsigned int *)this + 7));
    vDSP_vmul(*((const float **)this + 56), 1, *((const float **)this + 50), 1, *((float **)this + 56), 1, *((unsigned int *)this + 7));
    float v218 = *((float *)this + 20) / (float)v23;
    vDSP_vsmsa(*((const float **)this + 56), 1, &v218, v193, *((float **)this + 56), 1, *((unsigned int *)this + 7));
  }
  if (*((float *)this + 28) != 1.0) {
    vvpowsf(*((float **)this + 56), (const float *)this + 28, *((const float **)this + 56), &v217);
  }
  int v76 = *((_DWORD *)this + 29);
  if (v76 == 1)
  {
    unint64_t v108 = 0;
    int v109 = (float *)v195;
    do
    {
      uint64_t v110 = *((void *)this + 38);
      if (v108 >= (*((void *)this + 39) - v110) >> 2) {
        goto LABEL_151;
      }
      vDSP_vclr(*(float **)(*((void *)this + 95) + 24 * *(unsigned int *)(v110 + 4 * v108++)), 1, *((unsigned int *)this + 6));
    }
    while (v195 != v108);
    uint64_t v111 = 1;
    vDSP_svdiv((const float *)this + 22, *((const float **)this + 56), 1, *((float **)this + 50), 1, *((unsigned int *)this + 7));
    unint64_t v112 = 0;
    int64x2_t v197 = vdupq_n_s64(4uLL);
    unsigned int v194 = v109;
    do
    {
      uint64_t v113 = *((void *)this + 38);
      if (v112 >= (*((void *)this + 39) - v113) >> 2) {
        goto LABEL_151;
      }
      unint64_t v114 = 0;
      unint64_t v201 = v112;
      int v115 = *(_DWORD *)(v113 + 4 * v112);
      uint64_t v116 = *((unsigned int *)this + 8);
      v227.realp = (float *)*((void *)this + 65);
      v227.imagp = &v227.realp[v116];
      int v117 = (float *)(*((void *)this + 110) + 4 * v116);
      v223.realp = (float *)*((void *)this + 110);
      v223.imagp = v117;
      int v118 = ~v115;
      DSPSplitComplex v204 = (DSPSplitComplex)vaddq_s64((int64x2_t)v227, v197);
      uint64_t v119 = v227.imagp;
      int v120 = v227.realp;
      do
      {
        uint64_t v121 = *((void *)this + 38);
        if (v114 >= (*((void *)this + 39) - v121) >> 2) {
          goto LABEL_151;
        }
        uint64_t v122 = 3 * *(unsigned int *)(v121 + 4 * v114);
        uint64_t v123 = *((unsigned int *)this + 8);
        v228.realp = *(float **)(*((void *)this + 92) + 8 * v122);
        v228.imagp = &v228.realp[v123];
        v221.realp = *(float **)(*(void *)(*((void *)this + 113)
                                           + 24 * (*((_DWORD *)this + 3) + v118))
                               + 8 * v122);
        v221.imagp = &v221.realp[v123];
        vDSP_vsmul(v221.realp, 1, (const float *)this + 25, v221.realp, 1, *((unsigned int *)this + 6));
        vDSP_Length v124 = (DSPSplitComplex *)*((unsigned int *)this + 8);
        if (v114)
        {
          ecutils::fcn_complex_mult_add((int64x2_t *)&v221, (int64x2_t *)&v228, (int64x2_t *)&v227, (int64x2_t *)&v227, v124);
        }
        else
        {
          DSPSplitComplex v212 = v221;
          int64x2_t v125 = vdupq_n_s64(4uLL);
          DSPSplitComplex __B = (DSPSplitComplex)vaddq_s64((int64x2_t)v228, v125);
          DSPSplitComplex __A = (DSPSplitComplex)vaddq_s64((int64x2_t)v221, v125);
          DSPSplitComplex __C = v204;
          vDSP_zvmul(&__A, 1, &__B, 1, &__C, 1, (v124 - 1), 1);
          *int v120 = *v212.realp * *v228.realp;
          *uint64_t v119 = *v212.imagp * *v228.imagp;
        }
        ++v114;
      }
      while (v111 != v114);
      float v218 = 1.0;
      unint64_t v126 = (float *)*((void *)this + 62);
      uint64_t v127 = *((unsigned int *)this + 8);
      DSPSplitComplex __A = v204;
      vDSP_zvmags(&__A, 1, v126 + 1, 1, (v127 - 1));
      *unint64_t v126 = *v120 * *v120;
      v126[v127] = *v119 * *v119;
      vDSP_vmsa(*((const float **)this + 50), 1, *((const float **)this + 62), 1, &v218, *((float **)this + 62), 1, *((unsigned int *)this + 7));
      vDSP_vdiv(*((const float **)this + 62), 1, *((const float **)this + 50), 1, *((float **)this + 50), 1, *((unsigned int *)this + 7));
      uint64_t v128 = *((void *)this + 50);
      uint64_t v129 = *((unsigned int *)this + 8);
      DSPSplitComplex v213 = v223;
      DSPSplitComplex __B = (DSPSplitComplex)vaddq_s64((int64x2_t)v223, vdupq_n_s64(4uLL));
      DSPSplitComplex __A = v204;
      vDSP_zrvmul(&__A, 1, (const float *)(v128 + 4), 1, &__B, 1, (v129 - 1));
      *v213.realp = *v120 * *(float *)v128;
      *v213.imagp = *v119 * *(float *)(v128 + 4 * v129);
      vvsqrtf(*((float **)this + 62), *((const float **)this + 62), &v217);
      vDSP_vneg(v120, 1, v120, 1, (*((_DWORD *)this + 8) + 1));
      unint64_t v130 = 0;
      do
      {
        uint64_t v131 = *((void *)this + 38);
        if (v130 >= (*((void *)this + 39) - v131) >> 2) {
          goto LABEL_151;
        }
        uint64_t v132 = 3 * *(unsigned int *)(v131 + 4 * v130);
        uint64_t v133 = (DSPSplitComplex *)*((unsigned int *)this + 8);
        uint64_t v134 = *(void *)(*((void *)this + 113) + 24 * (*((_DWORD *)this + 3) + v118));
        int v135 = (float *)(*(void *)(*((void *)this + 95) + 8 * v132) + 4 * (void)v133);
        v220.realp = *(float **)(*((void *)this + 95) + 8 * v132);
        v220.imagp = v135;
        v221.realp = *(float **)(v134 + 8 * v132);
        v221.imagp = &v221.realp[(void)v133];
        ecutils::fcn_complex_mult_add_mult_add((int64x2_t *)&v227, (int64x2_t *)&v221, (int64x2_t *)&v220, (int64x2_t *)&v223, (int64x2_t *)&v221, v133);
        uint64_t v136 = *((void *)this + 62);
        uint64_t v137 = *((unsigned int *)this + 8);
        DSPSplitComplex v214 = v221;
        DSPSplitComplex __B = (DSPSplitComplex)vaddq_s64((int64x2_t)v221, vdupq_n_s64(4uLL));
        DSPSplitComplex __A = __B;
        vDSP_zrvmul(&__A, 1, (const float *)(v136 + 4), 1, &__B, 1, (v137 - 1));
        *v214.realp = *v214.realp * *(float *)v136;
        *v214.imagp = *v214.imagp * *(float *)(v136 + 4 * v137);
        ++v130;
      }
      while (v111 != v130);
      unint64_t v112 = v201 + 1;
      ++v111;
    }
    while ((float *)(v201 + 1) != v194);
    vDSP_vsmul(*((const float **)this + 50), 1, (const float *)this + 10, *((float **)this + 50), 1, *((unsigned int *)this + 7));
    unint64_t v138 = 0;
    int64x2_t v205 = vdupq_n_s64(4uLL);
    do
    {
      uint64_t v139 = *((void *)this + 38);
      if (v138 >= (*((void *)this + 39) - v139) >> 2) {
        goto LABEL_151;
      }
      uint64_t v140 = *((unsigned int *)this + 8);
      v220.realp = *(float **)(*((void *)this + 95) + 24 * *(unsigned int *)(v139 + 4 * v138));
      v220.imagp = &v220.realp[v140];
      uint64_t v141 = *((void *)this + 50);
      DSPSplitComplex v215 = v220;
      DSPSplitComplex __B = (DSPSplitComplex)vaddq_s64((int64x2_t)v220, v205);
      DSPSplitComplex __A = __B;
      vDSP_zrvmul(&__A, 1, (const float *)(v141 + 4), 1, &__B, 1, (v140 - 1));
      *v215.realp = *v215.realp * *(float *)v141;
      *v215.imagp = *v215.imagp * *(float *)(v141 + 4 * v140);
      ++v138;
    }
    while (v194 != (float *)v138);
    vDSP_vmul(*((const float **)this + 56), 1, *((const float **)this + 50), 1, *((float **)this + 50), 1, *((unsigned int *)this + 7));
    float v218 = 1.0 - *((float *)this + 10);
    vDSP_vsmsa(*((const float **)this + 50), 1, (const float *)this + 23, &v218, *((float **)this + 50), 1, *((unsigned int *)this + 7));
  }
  else if (v76 == 2)
  {
    unint64_t v77 = *((unsigned int *)this + 3);
    if (v77)
    {
      uint64_t v78 = 0;
      for (unint64_t j = 0; j < v77; ++j)
      {
        if (((*(void *)(*((void *)this + 32) + ((j >> 3) & 0x1FFFFFFFFFFFFFF8)) >> j) & 1) == 0)
        {
          vDSP_vclr(*(float **)(*((void *)this + 95) + v78), 1, *((unsigned int *)this + 6));
          memcpy(*(void **)(*((void *)this + 116) + v78), *(const void **)(*((void *)this + 92) + v78), 4 * *((unsigned int *)this + 6));
          unint64_t v77 = *((unsigned int *)this + 3);
        }
        v78 += 24;
      }
    }
    float v218 = 1.0;
    vDSP_vfill(&v218, *((float **)this + 50), 1, *((unsigned int *)this + 7));
    vDSP_svdiv((const float *)this + 22, *((const float **)this + 56), 1, *((float **)this + 59), 1, *((unsigned int *)this + 7));
    LODWORD(v80) = *((_DWORD *)this + 3);
    if (v80)
    {
      unint64_t v81 = 0;
      int64x2_t v200 = vdupq_n_s64(4uLL);
      uint64_t v82 = 24;
      uint64_t v83 = 1;
      do
      {
        if ((*(void *)(*((void *)this + 32) + 8 * (v81 >> 6)) & (1 << v81)) == 0)
        {
          uint64_t v84 = *((unsigned int *)this + 8);
          v228.realp = *(float **)(*((void *)this + 116) + 24 * v81);
          v228.imagp = &v228.realp[v84];
          v220.realp = *(float **)(*((void *)this + 95) + 24 * v81);
          v220.imagp = &v220.realp[v84];
          uint64_t v210 = v220.imagp;
          vDSP_Length v85 = (float *)*((void *)this + 53);
          DSPSplitComplex __A = (DSPSplitComplex)vaddq_s64((int64x2_t)v228, v200);
          vDSP_zvmags(&__A, 1, v85 + 1, 1, (v84 - 1));
          float *v85 = *v228.realp * *v228.realp;
          v85[v84] = *v228.imagp * *v228.imagp;
          vDSP_vmul(*((const float **)this + 59), 1, *((const float **)this + 50), 1, *((float **)this + 62), 1, *((unsigned int *)this + 7));
          std::string v86 = *(float **)(*((void *)this + 119) + 24 * v81);
          vDSP_vsmul(v86, 1, (const float *)this + 21, v86, 1, *((unsigned int *)this + 7));
          uint64_t v87 = *(float **)(*((void *)this + 119) + 24 * v81);
          vDSP_vma(*((const float **)this + 62), 1, *((const float **)this + 53), 1, v87, 1, v87, 1, *((unsigned int *)this + 7));
          vDSP_meanv(*(const float **)(*((void *)this + 119) + 24 * v81), 1, &v218, *((unsigned int *)this + 7));
          if (v218 >= 0.00000011921)
          {
            float v218 = 0.00000011921;
            vDSP_vthr(*(const float **)(*((void *)this + 119) + 24 * v81), 1, &v218, *((float **)this + 56), 1, *((unsigned int *)this + 7));
            vDSP_vneg(*((const float **)this + 62), 1, *((float **)this + 62), 1, *((unsigned int *)this + 7));
            vDSP_vdiv(*((const float **)this + 56), 1, *((const float **)this + 62), 1, *((float **)this + 62), 1, *((unsigned int *)this + 7));
            uint64_t v88 = *((void *)this + 62);
            uint64_t v89 = *((unsigned int *)this + 8);
            int64x2_t v90 = vdupq_n_s64(4uLL);
            DSPSplitComplex v196 = v220;
            DSPSplitComplex v211 = (DSPSplitComplex)vaddq_s64((int64x2_t)v220, v90);
            DSPSplitComplex __B = v211;
            DSPSplitComplex __A = (DSPSplitComplex)vaddq_s64((int64x2_t)v228, v90);
            vDSP_zrvmul(&__A, 1, (const float *)(v88 + 4), 1, &__B, 1, (v89 - 1));
            *v196.realp = *v228.realp * *(float *)v88;
            imagp = (DSPSplitComplex *)v196.imagp;
            *v196.imagp = *v228.imagp * *(float *)(v88 + 4 * v89);
            int v91 = *((_DWORD *)this + 8);
            DSPSplitComplex __B = v211;
            DSPSplitComplex __A = v211;
            vDSP_zvconj(&__A, 1, &__B, 1, (v91 - 1));
            float v218 = 1.0;
            vDSP_vmsa(*((const float **)this + 62), 1, *((const float **)this + 53), 1, &v218, *((float **)this + 62), 1, *((unsigned int *)this + 7));
            vDSP_vmul(*((const float **)this + 50), 1, *((const float **)this + 62), 1, *((float **)this + 50), 1, *((unsigned int *)this + 7));
            unint64_t v80 = *((unsigned int *)this + 3);
            if (v81 + 1 < v80)
            {
              uint64_t v92 = v82;
              unint64_t v93 = v83;
              do
              {
                if (((*(void *)(*((void *)this + 32) + ((v93 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v93) & 1) == 0)
                {
                  float v94 = (DSPSplitComplex *)*((unsigned int *)this + 8);
                  uint64_t v95 = *(void *)(*((void *)this + 122) + 24 * v81);
                  v223.realp = *(float **)(*((void *)this + 116) + v92);
                  v223.imagp = &v223.realp[(void)v94];
                  v221.realp = *(float **)(v95 + v92);
                  v221.imagp = &v221.realp[(void)v94];
                  ecutils::fcn_complex_mult_add_mult_add((int64x2_t *)&v228, (int64x2_t *)&v221, (int64x2_t *)&v223, (int64x2_t *)&v220, (int64x2_t *)&v221, v94);
                  LODWORD(v80) = *((_DWORD *)this + 3);
                }
                ++v93;
                v92 += 24;
              }
              while (v93 < v80);
            }
          }
          else
          {
            *(void *)(*((void *)this + 32) + 8 * (v81 >> 6)) |= 1 << v81;
            LODWORD(v80) = *((_DWORD *)this + 3);
            imagp = (DSPSplitComplex *)v210;
          }
        }
        ++v81;
        ++v83;
        v82 += 24;
      }
      while (v81 < v80);
      unint64_t v96 = (v80 - 1);
      if ((int)v80 - 1 >= 0)
      {
        unsigned int v97 = v80 - 2;
        do
        {
          if (((*(void *)(*((void *)this + 32) + ((v96 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v96) & 1) == 0)
          {
            uint64_t v98 = (float *)(*(void *)(*((void *)this + 95) + 24 * v96) + 4 * *((unsigned int *)this + 8));
            v228.realp = *(float **)(*((void *)this + 95) + 24 * v96);
            v228.imagp = v98;
            if ((int)v80 - 2 >= 0)
            {
              uint64_t v99 = 24 * v97;
              unint64_t v100 = v97;
              int v101 = v96;
              do
              {
                if (((*(void *)(*((void *)this + 32) + ((v100 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v100) & 1) == 0)
                {
                  __float2 v102 = (DSPSplitComplex *)*((unsigned int *)this + 8);
                  v223.realp = *(float **)(*((void *)this + 95) + v99);
                  v223.imagp = &v223.realp[(void)v102];
                  v221.realp = *(float **)(*(void *)(*((void *)this + 122) + v99) + 24 * v96);
                  v221.imagp = &v221.realp[(void)v102];
                  ecutils::fcn_complex_mult_add((int64x2_t *)&v228, (int64x2_t *)&v221, (int64x2_t *)&v223, (int64x2_t *)&v223, v102);
                }
                --v100;
                --v101;
                v99 -= 24;
              }
              while (v101 > 0);
            }
          }
          LODWORD(v80) = v96;
          --v97;
        }
        while ((uint64_t)v96-- > 0);
      }
    }
    float v218 = 1.0 - *((float *)this + 10);
    vDSP_vsmsa(*((const float **)this + 50), 1, (const float *)this + 10, &v218, *((float **)this + 50), 1, *((unsigned int *)this + 7));
    unint64_t v104 = *((unsigned int *)this + 3);
    if (v104)
    {
      uint64_t v105 = 0;
      unint64_t v106 = 0;
      vDSP_Length v107 = v220.realp;
      do
      {
        if (((*(void *)(*((void *)this + 32) + ((v106 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v106) & 1) == 0)
        {
          vDSP_Length v107 = *(float **)(*((void *)this + 95) + v105);
          imagp = (DSPSplitComplex *)&v107[*((unsigned int *)this + 8)];
          vDSP_vsmul(v107, 1, (const float *)this + 10, v107, 1, *((unsigned int *)this + 6));
          unint64_t v104 = *((unsigned int *)this + 3);
        }
        ++v106;
        v105 += 24;
      }
      while (v106 < v104);
      v220.realp = v107;
      v220.imagp = (float *)imagp;
    }
  }
  unint64_t v142 = *((unsigned int *)this + 2);
  if (v142)
  {
    unint64_t v143 = 0;
    int64x2_t v216 = vdupq_n_s64(4uLL);
    do
    {
      if (((*(void *)(*((void *)this + 29) + ((v143 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v143) & 1) == 0)
      {
        uint64_t v144 = *((unsigned int *)this + 8);
        unint64_t v145 = (float *)(*(void *)(*((void *)this + 80) + 24 * v143) + 4 * v144);
        v225.realp = *(float **)(*((void *)this + 80) + 24 * v143);
        v225.imagp = v145;
        unint64_t v146 = *((unsigned int *)this + 3);
        if (v146)
        {
          uint64_t v147 = 0;
          for (unint64_t k = 0; k < v146; ++k)
          {
            if (((*(void *)(*((void *)this + 32) + ((k >> 3) & 0x1FFFFFFFFFFFFFF8)) >> k) & 1) == 0)
            {
              uint64_t v149 = (DSPSplitComplex *)*((unsigned int *)this + 8);
              uint64_t v150 = *(void *)(*((void *)this + 98) + 24 * v143);
              v220.realp = *(float **)(*((void *)this + 95) + v147);
              v220.imagp = &v220.realp[(void)v149];
              v226.realp = *(float **)(v150 + v147);
              v226.imagp = &v226.realp[(void)v149];
              ecutils::fcn_complex_mult_add((int64x2_t *)&v220, (int64x2_t *)&v225, (int64x2_t *)&v226, (int64x2_t *)&v226, v149);
              unint64_t v146 = *((unsigned int *)this + 3);
            }
            v147 += 24;
          }
          uint64_t v144 = *((unsigned int *)this + 8);
        }
        uint64_t v151 = *((void *)this + 50);
        DSPSplitComplex __B = (DSPSplitComplex)vaddq_s64((int64x2_t)v225, v216);
        DSPSplitComplex __A = __B;
        vDSP_zrvmul(&__A, 1, (const float *)(v151 + 4), 1, &__B, 1, (v144 - 1));
        *v225.realp = *v225.realp * *(float *)v151;
        *v225.imagp = *v225.imagp * *(float *)(v151 + 4 * v144);
        if (*((unsigned char *)this + 133) && !*((_DWORD *)this + 30))
        {
          uint64_t v152 = *((unsigned int *)this + 8);
          unint64_t v153 = (float *)(*(void *)(*((void *)this + 83) + 24 * v143) + 4 * v152);
          v222.realp = *(float **)(*((void *)this + 83) + 24 * v143);
          v222.imagp = v153;
          uint64_t v154 = (MultiRadixRealFFT *)*((void *)this + 125);
          if (v154)
          {
            MultiRadixRealFFT::RealOutOfPlaceForwardTransform(v154, *(DSPComplex **)(*((void *)this + 71) + 24 * v143), &v222, 1.0);
            uint64_t v152 = *((unsigned int *)this + 8);
          }
          vDSP_Length v155 = (float *)*((void *)this + 53);
          int64x2_t v206 = vdupq_n_s64(4uLL);
          DSPSplitComplex __A = (DSPSplitComplex)vaddq_s64((int64x2_t)v225, v206);
          vDSP_zvabs(&__A, 1, v155 + 1, 1, (v152 - 1));
          float *v155 = fabsf(*v225.realp);
          v155[v152] = fabsf(*v225.imagp);
          unint64_t v156 = (float *)*((void *)this + 56);
          uint64_t v157 = *((unsigned int *)this + 8);
          DSPSplitComplex __A = (DSPSplitComplex)vaddq_s64((int64x2_t)v222, v206);
          vDSP_zvabs(&__A, 1, v156 + 1, 1, (v157 - 1));
          float *v156 = fabsf(*v222.realp);
          v156[v157] = fabsf(*v222.imagp);
          vDSP_vthr(*((const float **)this + 53), 1, (const float *)this + 14, *((float **)this + 53), 1, *((unsigned int *)this + 7));
          vDSP_vthr(*((const float **)this + 56), 1, (const float *)this + 14, *((float **)this + 56), 1, *((unsigned int *)this + 7));
          vDSP_vmin(*((const float **)this + 56), 1, *((const float **)this + 53), 1, *((float **)this + 56), 1, *((unsigned int *)this + 7));
          vDSP_vdiv(*((const float **)this + 53), 1, *((const float **)this + 56), 1, *((float **)this + 56), 1, *((unsigned int *)this + 7));
          uint64_t v158 = *((void *)this + 56);
          uint64_t v159 = *((unsigned int *)this + 8);
          DSPSplitComplex __B = (DSPSplitComplex)vaddq_s64((int64x2_t)v225, v206);
          DSPSplitComplex __A = __B;
          vDSP_zrvmul(&__A, 1, (const float *)(v158 + 4), 1, &__B, 1, (v159 - 1));
          *v225.realp = *v225.realp * *(float *)v158;
          *v225.imagp = *v225.imagp * *(float *)(v158 + 4 * v159);
        }
        ecutils::fcn_otplace_fftReal_inverse(*((const vDSP_DFT_SetupStruct ****)this + 125), &v225, *(DSPComplex **)(*((void *)this + 77) + 24 * v143), *((unsigned int *)this + 8), *((float *)this + 11));
        if (*((unsigned char *)this + 133))
        {
          if (*((_DWORD *)this + 30))
          {
            LODWORD(__A.realp) = 0;
            vDSP_svesq((const float *)(*(void *)(*((void *)this + 77) + 24 * v143)+ 4 * (*((_DWORD *)this + 6) - *((_DWORD *)this + 9))), 1, (float *)&__A, *((unsigned int *)this + 9));
            if (*(float *)&__A.realp > (float)(*(float *)(*((void *)this + 44) + 4 * v143)
                                              * (float)*((unsigned int *)this + 30)))
              memcpy((void *)(*(void *)(*((void *)this + 77) + 24 * v143) + 4 * *((unsigned int *)this + 8)), (const void *)(*(void *)(*((void *)this + 71) + 24 * v143) + 4 * *((unsigned int *)this + 8)), 4 * *((unsigned int *)this + 8));
          }
        }
        vDSP_Length v160 = *((unsigned int *)this + 8);
        vDSP_vsub((const float *)(*(void *)(*((void *)this + 77) + 24 * v143) + 4 * v160), 1, (const float *)(*(void *)(*((void *)this + 71) + 24 * v143) + 4 * v160), 1, (float *)(*(void *)(*((void *)this + 74) + 24 * v143) + 4 * v160), 1, v160);
        unint64_t v142 = *((unsigned int *)this + 2);
      }
      ++v143;
    }
    while (v143 < v142);
    if (v142)
    {
      uint64_t v161 = 0;
      unint64_t v162 = 0;
      vDSP_Length v163 = &a6->mBuffers[0].mData;
      vDSP_Length v164 = (float **)&a5->mBuffers[0].mData;
      do
      {
        uint64_t v165 = *v164;
        vDSP_Length v166 = (float *)*v163;
        if ((*(void *)(*((void *)this + 29) + ((v162 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v162))
        {
          vDSP_vclr(*v164, 1, *((unsigned int *)this + 9));
          vDSP_vclr(v166, 1, *((unsigned int *)this + 9));
          vDSP_Length v167 = *((unsigned int *)this + 26);
          if (v167)
          {
            vDSP_vclr(*(float **)(*((void *)this + 86) + v161), 1, v167);
            vDSP_vclr(*(float **)(*((void *)this + 89) + v161), 1, *((unsigned int *)this + 26));
          }
        }
        else
        {
          int v168 = *((_DWORD *)this + 26);
          uint64_t v169 = *((void *)this + 77);
          int v170 = *((_DWORD *)this + 6);
          uint64_t v171 = *((unsigned int *)this + 9);
          if (v168)
          {
            memcpy(*v164, (const void *)(*(void *)(v169 + v161) + 4 * (v170 - (v168 + v171))), 4 * v171);
            memcpy(v166, (const void *)(*(void *)(*((void *)this + 74) + v161)+ 4* (*((_DWORD *)this + 6) - (*((_DWORD *)this + 9) + *((_DWORD *)this + 26)))), 4 * *((unsigned int *)this + 9));
            vDSP_vmma(v165, 1, *((const float **)this + 35), 1, *(const float **)(*((void *)this + 86) + v161), 1, (const float *)(*((void *)this + 35) + 4 * *((unsigned int *)this + 26)), 1, v165, 1, *((unsigned int *)this + 26));
            vDSP_vmma(v166, 1, *((const float **)this + 35), 1, *(const float **)(*((void *)this + 89) + v161), 1, (const float *)(*((void *)this + 35) + 4 * *((unsigned int *)this + 26)), 1, v166, 1, *((unsigned int *)this + 26));
            memcpy(*(void **)(*((void *)this + 86) + v161), (const void *)(*(void *)(*((void *)this + 77) + v161)+ 4 * (*((_DWORD *)this + 6) - *((_DWORD *)this + 26))), 4 * *((unsigned int *)this + 26));
            vDSP_Length v172 = *(float **)(*((void *)this + 89) + v161);
            uint64_t v173 = *((unsigned int *)this + 26);
            float v174 = (const void *)(*(void *)(*((void *)this + 74) + v161)
                                + 4 * (*((_DWORD *)this + 6) - v173));
            size_t v175 = 4 * v173;
          }
          else
          {
            memcpy(*v164, (const void *)(*(void *)(v169 + v161) + 4 * (v170 - v171)), 4 * v171);
            uint64_t v176 = *((unsigned int *)this + 9);
            float v174 = (const void *)(*(void *)(*((void *)this + 74) + v161)
                                + 4 * (*((_DWORD *)this + 6) - v176));
            size_t v175 = 4 * v176;
            vDSP_Length v172 = v166;
          }
          memcpy(v172, v174, v175);
        }
        ++v162;
        v161 += 24;
        v163 += 2;
        v164 += 2;
      }
      while (v162 < *((unsigned int *)this + 2));
    }
  }
  int v177 = *((_DWORD *)this + 34);
  if (v177)
  {
    uint64_t v178 = (v177 - 1);
    int v179 = *((_DWORD *)this + 36);
    uint64_t v180 = *((int *)this + 35);
    if (!*((unsigned char *)this + 133) || *((_DWORD *)this + 30))
    {
      uint64_t v181 = (float *)(*(void *)(*((void *)this + 83) + 24 * v178)
                     + 4 * *((unsigned int *)this + 8));
      __A.realp = *(float **)(*((void *)this + 83) + 24 * v178);
      __A.imagp = v181;
      uint64_t v182 = (MultiRadixRealFFT *)*((void *)this + 125);
      if (v182) {
        MultiRadixRealFFT::RealOutOfPlaceForwardTransform(v182, *(DSPComplex **)(*((void *)this + 71) + 24 * v178), &__A, 1.0);
      }
    }
    uint64_t v183 = *(void *)(*((void *)this + 83) + 24 * v178);
    unsigned int v184 = *((_DWORD *)this + 8) + v180;
    __A.realp = (float *)(v183 + 4 * v180);
    __A.imagp = (float *)(v183 + 4 * v184);
    uint64_t v185 = *(void *)(*((void *)this + 80) + 24 * v178);
    __B.realp = (float *)(v185 + 4 * v180);
    __B.imagp = (float *)(v185 + 4 * v184);
    uint64_t v186 = *((void *)this + 65);
    __C.realp = (float *)(v186 + 4 * v180);
    __C.imagp = (float *)(v186 + 4 * v184);
    vDSP_Length __N = v179 - (int)v180 + 1;
    vDSP_zvsub(&__A, 1, &__B, 1, &__C, 1, __N);
    float v189 = *((float *)this + 37);
    uint64_t v188 = (char *)this + 148;
    float v230 = 1.0 - v189;
    vDSP_zvmags(&__A, 1, *(float **)(v188 + 60), 1, __N);
    vDSP_vsmsma(*(const float **)(v188 + 60), 1, &v230, (const float *)(*(void *)(v188 + 12) + 4 * v180), 1, (const float *)v188, (float *)(*(void *)(v188 + 12) + 4 * v180), 1, __N);
    vDSP_zvcmul(&__A, 1, &__C, 1, &__C, 1, __N);
    vDSP_zvabs(&__C, 1, *(float **)(v188 + 60), 1, __N);
    vDSP_vsmsma(*(const float **)(v188 + 60), 1, &v230, (const float *)(*(void *)(v188 + 36) + 4 * v180), 1, (const float *)v188, (float *)(*(void *)(v188 + 36) + 4 * v180), 1, __N);
    float v229 = 2.2204e-16;
    vDSP_vsadd((const float *)(*(void *)(v188 + 12) + 4 * v180), 1, &v229, *(float **)(v188 + 60), 1, __N);
    vDSP_vdiv(*(const float **)(v188 + 60), 1, (const float *)(*(void *)(v188 + 36) + 4 * v180), 1, *(float **)(v188 + 60), 1, __N);
    vDSP_meanv(*(const float **)(v188 + 60), 1, (float *)v188 + 1, __N);
    *((float *)v188 + 1) = fmaxf(fminf(*((float *)v188 + 1), 1.0), 0.0);
  }
  return 0;
}

void ecMIMO_iQRD::ec_init(ecMIMO_iQRD *this, int a2, int a3, int a4, int a5, int a6, float a7, float a8, float a9, float a10, float a11, unsigned int a12, unsigned int a13, float a14, float a15, float a16, BOOL a17, unsigned int a18, unsigned int a19, unsigned int a20,float a21,float a22,float a23)
{
  *((_DWORD *)this + 29) = a18;
  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_DWORD *)this + 4) = a4;
  *((_DWORD *)this + 5) = a5;
  *((_DWORD *)this + 9) = a6;
  *((float *)this + 15) = __exp10f(a11 / 10.0);
  *((float *)this + 31) = __exp10f(a22 / 10.0);
  *((float *)this + 32) = __exp10f(a23 / 10.0);
  float v30 = 0.0;
  float v31 = 0.0;
  float v32 = 0.0;
  float v33 = 0.0;
  if (a7 > 0.0)
  {
    float v34 = -(float)((float)*((unsigned int *)this + 9) / (float)*((unsigned int *)this + 4)) / a7;
    float v31 = expf(v34);
    float v32 = 1.0 - v31;
    float v33 = 1.0 / (float)(1.0 - v31);
  }
  *((float *)this + 18) = v31;
  *((float *)this + 19) = v32;
  float v35 = 0.0;
  float v36 = 0.0;
  float v37 = 0.0;
  *((float *)this + 20) = v33;
  float v38 = 0.0;
  if (a8 > 0.0)
  {
    float v39 = -(float)((float)*((unsigned int *)this + 9) / (float)*((unsigned int *)this + 4)) / a8;
    float v30 = expf(v39);
    float v35 = 1.0 - v30;
    float v36 = 1.0 / (float)(1.0 - v30);
    float v37 = sqrtf(v30);
    float v38 = 1.0 / v37;
  }
  *((float *)this + 21) = v30;
  *((float *)this + 22) = v35;
  *((float *)this + 23) = v36;
  *((float *)this + 24) = v37;
  *((float *)this + 25) = v38;
  *((_DWORD *)this + 14) = 507307272;
  *((float *)this + 17) = __exp10f(a9 / 10.0);
  *((float *)this + 10) = a10;
  *((_DWORD *)this + 16) = a12;
  unsigned int v40 = *((_DWORD *)this + 5);
  unsigned int v41 = *((_DWORD *)this + 9);
  if (v40 < v41)
  {
    *((_DWORD *)this + 5) = v41;
    unsigned int v40 = v41;
  }
  if (v41 > a12) {
    *((_DWORD *)this + 16) = v41;
  }
  if (-858993459 * v40 >= 0x33333334) {
    int v42 = 1;
  }
  else {
    int v42 = 5;
  }
  if (-1431655765 * v40 >= 0x55555556) {
    int v43 = 4;
  }
  else {
    int v43 = 12;
  }
  int v44 = v43 * v42;
  do
  {
    unsigned int v45 = v44;
    v44 *= 2;
  }
  while (v45 < v40);
  *((_DWORD *)this + 6) = v44;
  *((_DWORD *)this + 7) = v45 | 1;
  *((_DWORD *)this + 8) = v45;
  unsigned int v46 = v45 - v41;
  if (v46 >= a13) {
    unsigned int v46 = a13;
  }
  *((_DWORD *)this + 26) = v46;
  *((unsigned char *)this + 108) = a17;
  *((float *)this + 28) = 1.0 - (float)(a14 * 0.5);
  *((_DWORD *)this + 30) = a19;
  MultiRadixRealFFT_Create();
}

void ecMIMO_iQRD::ec_state_reset(ecMIMO_iQRD *this)
{
  if (*((_DWORD *)this + 34))
  {
    unint64_t v2 = *((unsigned int *)this + 7);
    std::vector<unsigned int>::value_type __u = 0;
    std::vector<float>::assign((char **)this + 20, v2, &__u);
    unint64_t v3 = *((unsigned int *)this + 7);
    std::vector<unsigned int>::value_type __u = 0;
    std::vector<float>::assign((char **)this + 23, v3, &__u);
    unint64_t v4 = *((unsigned int *)this + 6);
    std::vector<unsigned int>::value_type __u = 0;
    std::vector<float>::assign((char **)this + 26, v4, &__u);
  }
  unint64_t v5 = *((unsigned int *)this + 2);
  LOBYTE(__u) = 0;
  std::vector<BOOL>::assign((uint64_t)this + 232, v5, &__u);
  unint64_t v6 = *((unsigned int *)this + 3);
  LOBYTE(__u) = 0;
  std::vector<BOOL>::assign((uint64_t)this + 256, v6, &__u);
  std::vector<unsigned int>::size_type v7 = *((unsigned int *)this + 3);
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<unsigned int>::assign((std::vector<unsigned int> *)((char *)this + 304), v7, &__u);
  unint64_t v8 = *((unsigned int *)this + 3);
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<float>::assign((char **)this + 41, v8, &__u);
  unint64_t v9 = *((unsigned int *)this + 2);
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<float>::assign((char **)this + 44, v9, &__u);
  unint64_t v10 = *((unsigned int *)this + 6);
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<float>::assign((char **)this + 47, v10, &__u);
  unint64_t v11 = *((unsigned int *)this + 7);
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<float>::assign((char **)this + 50, v11, &__u);
  unint64_t v12 = *((unsigned int *)this + 7);
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<float>::assign((char **)this + 53, v12, &__u);
  unint64_t v13 = *((unsigned int *)this + 7);
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<float>::assign((char **)this + 56, v13, &__u);
  unint64_t v14 = *((unsigned int *)this + 7);
  std::vector<unsigned int>::value_type __u = 1065353216;
  std::vector<float>::assign((char **)this + 59, v14, &__u);
  unint64_t v15 = *((unsigned int *)this + 7);
  std::vector<unsigned int>::value_type __u = 1065353216;
  std::vector<float>::assign((char **)this + 62, v15, &__u);
  unint64_t v16 = *((unsigned int *)this + 6);
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<float>::assign((char **)this + 65, v16, &__u);
  ecutils::fcn_vector_init<float>((uint64_t *)this + 68, *((_DWORD *)this + 3), *((_DWORD *)this + 6), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t *)this + 71, *((_DWORD *)this + 2), *((_DWORD *)this + 6), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t *)this + 74, *((_DWORD *)this + 2), *((_DWORD *)this + 6), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t *)this + 77, *((_DWORD *)this + 2), *((_DWORD *)this + 6), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t *)this + 80, *((_DWORD *)this + 2), *((_DWORD *)this + 6), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t *)this + 83, *((_DWORD *)this + 2), *((_DWORD *)this + 6), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t *)this + 92, *((_DWORD *)this + 3), *((_DWORD *)this + 6), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t *)this + 95, *((_DWORD *)this + 3), *((_DWORD *)this + 6), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t)this + 784, *((_DWORD *)this + 2), *((_DWORD *)this + 3), *((_DWORD *)this + 6), 0.0);
  int v17 = *((_DWORD *)this + 26);
  if (v17)
  {
    std::vector<unsigned int>::value_type __u = 0;
    std::vector<float>::assign((char **)this + 35, (2 * v17), &__u);
    ecutils::fcn_vector_init<float>((uint64_t *)this + 86, *((_DWORD *)this + 2), *((_DWORD *)this + 26), 0.0);
    ecutils::fcn_vector_init<float>((uint64_t *)this + 89, *((_DWORD *)this + 2), *((_DWORD *)this + 26), 0.0);
    uint64_t v18 = (2 * *((_DWORD *)this + 26));
    if (v18)
    {
      uint64_t v19 = 0;
      uint64_t v20 = *((void *)this + 35);
      float64x2_t v33 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v18), 0);
      uint64x2_t v34 = (uint64x2_t)vdupq_n_s64(v18 - 1);
      float64x2_t v32 = (float64x2_t)vdupq_n_s64(0x401921FB54442D18uLL);
      uint64x2_t v21 = (uint64x2_t)xmmword_1BB872720;
      int64x2_t v31 = vdupq_n_s64(2uLL);
      do
      {
        int64x2_t v38 = (int64x2_t)v21;
        int32x2_t v37 = vmovn_s64((int64x2_t)vcgeq_u64(v34, v21));
        v22.i64[0] = v19;
        v22.i64[1] = (v19 + 1);
        float32x2_t v23 = vcvt_f32_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v22), v32), v33));
        float v35 = v23.f32[0];
        float v36 = cosf(v23.f32[1]);
        float v24 = cosf(v35);
        if (v37.i8[0]) {
          *(float *)(v20 + 4 * v19) = (float)(1.0 - v24) * 0.5;
        }
        if (v37.i8[4]) {
          *(float *)(v20 + 4 * v19 + 4) = (float)(1.0 - v36) * 0.5;
        }
        v19 += 2;
        uint64x2_t v21 = (uint64x2_t)vaddq_s64(v38, v31);
      }
      while (v18 != v19);
    }
  }
  if (!*((unsigned char *)this + 108))
  {
    ecutils::fcn_vector_init<float>((uint64_t *)this + 101, *((_DWORD *)this + 2), *((_DWORD *)this + 6), 0.0);
    ecutils::fcn_vector_init<float>((uint64_t *)this + 104, *((_DWORD *)this + 2), *((_DWORD *)this + 7), *((float *)this + 32));
    ecutils::fcn_vector_init<float>((uint64_t)this + 856, *((_DWORD *)this + 2), *((_DWORD *)this + 2), *((_DWORD *)this + 6), 0.0);
  }
  int v25 = *((_DWORD *)this + 29);
  if (v25 == 2)
  {
    ecutils::fcn_vector_init<float>((uint64_t *)this + 116, *((_DWORD *)this + 3), *((_DWORD *)this + 6), 0.0);
    ecutils::fcn_vector_init<float>((uint64_t *)this + 119, *((_DWORD *)this + 3), *((_DWORD *)this + 7), *((float *)this + 31));
    ecutils::fcn_vector_init<float>((uint64_t)this + 976, *((_DWORD *)this + 3), *((_DWORD *)this + 3), *((_DWORD *)this + 6), 0.0);
  }
  else if (v25 == 1)
  {
    unint64_t v26 = *((unsigned int *)this + 6);
    std::vector<unsigned int>::value_type __u = 1065353216;
    std::vector<float>::assign((char **)this + 110, v26, &__u);
    ecutils::fcn_vector_init<float>((uint64_t)this + 904, *((_DWORD *)this + 3), *((_DWORD *)this + 3), *((_DWORD *)this + 6), 0.0);
    LODWORD(v27) = *((_DWORD *)this + 3);
    if (v27)
    {
      uint64_t v28 = 0;
      unint64_t v29 = 0;
      int v30 = -1;
      do
      {
        std::vector<unsigned int>::value_type __u = 1065353216;
        vDSP_vfill((const float *)&__u, *(float **)(*(void *)(*((void *)this + 113) + v28) + 24 * (v27 + v30)), 1, *((unsigned int *)this + 7));
        ++v29;
        unint64_t v27 = *((unsigned int *)this + 3);
        v28 += 24;
        --v30;
      }
      while (v29 < v27);
    }
  }
}

void ecMIMO_iQRD::~ecMIMO_iQRD(ecMIMO_iQRD *this)
{
  ecMIMO_iQRD::~ecMIMO_iQRD(this);

  JUMPOUT(0x1C185D370);
}

{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void **v20;

  *(void *)this = &unk_1F14AFC20;
  unint64_t v2 = *((void *)this + 125);
  if (v2) {
    MultiRadixFFT_Dispose(v2);
  }
  uint64_t v20 = (void **)((char *)this + 976);
  std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v20);
  uint64_t v20 = (void **)((char *)this + 952);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v20);
  uint64_t v20 = (void **)((char *)this + 928);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v20);
  uint64_t v20 = (void **)((char *)this + 904);
  std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v20);
  unint64_t v3 = (void *)*((void *)this + 110);
  if (v3)
  {
    *((void *)this + 111) = v3;
    operator delete(v3);
  }
  uint64_t v20 = (void **)((char *)this + 856);
  std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v20);
  uint64_t v20 = (void **)((char *)this + 832);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v20);
  uint64_t v20 = (void **)((char *)this + 808);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v20);
  uint64_t v20 = (void **)((char *)this + 784);
  std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v20);
  uint64_t v20 = (void **)((char *)this + 760);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v20);
  uint64_t v20 = (void **)((char *)this + 736);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v20);
  uint64_t v20 = (void **)((char *)this + 712);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v20);
  uint64_t v20 = (void **)((char *)this + 688);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v20);
  uint64_t v20 = (void **)((char *)this + 664);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v20);
  uint64_t v20 = (void **)((char *)this + 640);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v20);
  uint64_t v20 = (void **)((char *)this + 616);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v20);
  uint64_t v20 = (void **)((char *)this + 592);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v20);
  uint64_t v20 = (void **)((char *)this + 568);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v20);
  uint64_t v20 = (void **)((char *)this + 544);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v20);
  unint64_t v4 = (void *)*((void *)this + 65);
  if (v4)
  {
    *((void *)this + 66) = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)*((void *)this + 62);
  if (v5)
  {
    *((void *)this + 63) = v5;
    operator delete(v5);
  }
  unint64_t v6 = (void *)*((void *)this + 59);
  if (v6)
  {
    *((void *)this + 60) = v6;
    operator delete(v6);
  }
  std::vector<unsigned int>::size_type v7 = (void *)*((void *)this + 56);
  if (v7)
  {
    *((void *)this + 57) = v7;
    operator delete(v7);
  }
  unint64_t v8 = (void *)*((void *)this + 53);
  if (v8)
  {
    *((void *)this + 54) = v8;
    operator delete(v8);
  }
  unint64_t v9 = (void *)*((void *)this + 50);
  if (v9)
  {
    *((void *)this + 51) = v9;
    operator delete(v9);
  }
  unint64_t v10 = (void *)*((void *)this + 47);
  if (v10)
  {
    *((void *)this + 48) = v10;
    operator delete(v10);
  }
  unint64_t v11 = (void *)*((void *)this + 44);
  if (v11)
  {
    *((void *)this + 45) = v11;
    operator delete(v11);
  }
  unint64_t v12 = (void *)*((void *)this + 41);
  if (v12)
  {
    *((void *)this + 42) = v12;
    operator delete(v12);
  }
  unint64_t v13 = (void *)*((void *)this + 38);
  if (v13)
  {
    *((void *)this + 39) = v13;
    operator delete(v13);
  }
  unint64_t v14 = (void *)*((void *)this + 35);
  if (v14)
  {
    *((void *)this + 36) = v14;
    operator delete(v14);
  }
  unint64_t v15 = (void *)*((void *)this + 32);
  if (v15) {
    operator delete(v15);
  }
  unint64_t v16 = (void *)*((void *)this + 29);
  if (v16) {
    operator delete(v16);
  }
  int v17 = (void *)*((void *)this + 26);
  if (v17)
  {
    *((void *)this + 27) = v17;
    operator delete(v17);
  }
  uint64_t v18 = (void *)*((void *)this + 23);
  if (v18)
  {
    *((void *)this + 24) = v18;
    operator delete(v18);
  }
  uint64_t v19 = (void *)*((void *)this + 20);
  if (v19)
  {
    *((void *)this + 21) = v19;
    operator delete(v19);
  }
}

void *std::vector<float *>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::tuple<unsigned int,float>>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v6 = (void *)a1[1];
    std::vector<unsigned int>::size_type v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1BB4B3000(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t LoudnessMeter::LoudnessMeter(uint64_t a1, int a2, unsigned int a3, int a4, unsigned int a5)
{
  *(unsigned char *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v21[0] = 0;
  std::vector<float>::vector(__p, a5, v21);
  std::vector<std::vector<float>>::vector((void *)(a1 + 72), a3, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  __p[0] = 0;
  std::vector<float *>::vector((void *)(a1 + 96), a3, __p);
  *(_DWORD *)(a1 + 124) = a4;
  *(_DWORD *)(a1 + 128) = a3;
  *(_DWORD *)(a1 + 132) = a5;
  DspLib::Biquad::Filter::initialize((DspLib::Biquad::Filter *)a1, a3, 3uLL);
  *(_DWORD *)(a1 + 120) = a2;
  switch(a2)
  {
    case 0:
      LODWORD(v11) = *(_DWORD *)(a1 + 124);
      DspLib::Biquad::Design::aWeighting((double)v11, __p);
      DspLib::Biquad::Filter::setCoefficients(a1, (uint64_t)__p, 3, 0, 0x41uLL);
      break;
    case 1:
      LODWORD(v11) = *(_DWORD *)(a1 + 124);
      DspLib::Biquad::Design::cWeighting((double)v11, (uint64_t)__p);
      DspLib::Biquad::Filter::setCoefficients(a1, (uint64_t)__p, 2, 0, 0x41uLL);
      int v20 = 0;
      *(_OWORD *)std::string __p = DspLib::Biquad::kBypassSection;
      DspLib::Biquad::Filter::setCoefficients(a1, (uint64_t)__p, 1, 2, 0x41uLL);
      break;
    case 2:
      int v12 = 3;
      do
      {
        int v20 = 0;
        *(_OWORD *)std::string __p = DspLib::Biquad::kBypassSection;
        DspLib::Biquad::Filter::setCoefficients(a1, (uint64_t)__p, 1, 0, 0x41uLL);
        --v12;
      }
      while (v12);
      break;
    case 3:
      int v25 = 15;
      uint64_t v26 = 1108869120;
      int v27 = 1056964608;
      DspLib::Biquad::Design::ParametricEQ::design((DspLib::Biquad::Design::ParametricEQ *)&v25, (float)*(unsigned int *)(a1 + 124), 0, v10, (uint64_t)__p);
      DspLib::Biquad::Filter::setCoefficients(a1, (uint64_t)__p, 1, 0, 0x41uLL);
      int v22 = 12;
      uint64_t v23 = 0x4080000044D20000;
      int v24 = 0;
      DspLib::Biquad::Design::ParametricEQ::design((DspLib::Biquad::Design::ParametricEQ *)&v22, (float)*(unsigned int *)(a1 + 124), 0, v13, (uint64_t)v21);
      DspLib::Biquad::Filter::setCoefficients(a1, (uint64_t)v21, 1, 1, 0x41uLL);
      break;
    default:
      break;
  }
  DspLib::Biquad::SetupWrapper::reset((DspLib::Biquad::SetupWrapper *)(a1 + 48));
  uint64_t v14 = *(unsigned int *)(a1 + 128);
  if (v14)
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 24 * v14;
    do
    {
      *(void *)(*(void *)(a1 + 96) + v15) = *(void *)(*(void *)(a1 + 72) + v16);
      v16 += 24;
      v15 += 8;
    }
    while (v17 != v16);
  }
  return a1;
}

void sub_1BB4B32C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Biquad::SetupWrapper *)(v14 + 6));
  uint64_t v16 = (void *)v14[3];
  if (v16)
  {
    v14[4] = v16;
    operator delete(v16);
  }
  _Unwind_Resume(a1);
}

float LoudnessMeter::Process(LoudnessMeter *this, float **a2, unsigned int a3)
{
  uint64_t v5 = *((unsigned int *)this + 32);
  vDSP_Length v6 = a3;
  *(void *)&long long v13 = a2;
  *((void *)&v13 + 1) = v5;
  uint64_t v14 = a3;
  *(void *)&long long v11 = *((void *)this + 12);
  *((void *)&v11 + 1) = v5;
  uint64_t v12 = a3;
  DspLib::Biquad::Filter::process(this, &v13, &v11);
  float __C = 0.0;
  if (*((_DWORD *)this + 32))
  {
    unint64_t v7 = 0;
    float v8 = 0.0;
    do
    {
      vDSP_svesq(*(const float **)(*((void *)this + 12) + 8 * v7), 1, &__C, v6);
      float v8 = v8 + __C;
      ++v7;
    }
    while (v7 < *((unsigned int *)this + 32));
  }
  else
  {
    float v8 = 0.0;
  }
  return v8 / (float)a3;
}

uint64_t AUDCBlocker::SupportedNumChannels(AUDCBlocker *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUDCBlocker::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 1;
}

BOOL AUDCBlocker::StreamFormatWritable(AUDCBlocker *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUDCBlocker::SupportsTail(AUDCBlocker *this)
{
  return 1;
}

double AUDCBlocker::GetTailTime(AUDCBlocker *this)
{
  return 0.05;
}

double AUDCBlocker::GetLatency(AUDCBlocker *this)
{
  return 0.0;
}

uint64_t AUDCBlocker::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result = ausdk::AUBase::RestoreState(this, a2);
  ++*((_DWORD *)this + 132);
  return result;
}

uint64_t AUDCBlocker::GetParameterInfo(AUDCBlocker *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  buffer->AudioUnitParameterOptions flags = 0;
  buffer->unitName = 0;
  uint64_t result = 4294956418;
  if (!a2 && a3 <= 2)
  {
    CFStringRef v6 = off_1E623DE38[a3];
    AudioUnitParameterUnit v7 = dword_1BB898448[a3];
    AudioUnitParameterValue v8 = flt_1BB898454[a3];
    AudioUnitParameterValue v9 = flt_1BB898460[a3];
    AudioUnitParameterValue v10 = flt_1BB89846C[a3];
    buffer->cfNameString = v6;
    buffer->AudioUnitParameterOptions flags = 0x8000000;
    CFStringGetCString(v6, buffer->name, 52, 0x8000100u);
    uint64_t result = 0;
    buffer->unit = v7;
    buffer->minCFNumberRef Value = v8;
    buffer->maxCFNumberRef Value = v9;
    buffer->defaultCFNumberRef Value = v10;
    buffer->flags |= 0xC0000000;
  }
  return result;
}

uint64_t AUDCBlocker::GetParameterList(AUDCBlocker *this, int a2, unsigned int *a3, unsigned int *a4)
{
  if (a2) {
    return 4294956430;
  }
  if (a3)
  {
    *(void *)a3 = 0x100000000;
    a3[2] = 2;
  }
  uint64_t result = 0;
  *a4 = 3;
  return result;
}

uint64_t AUDCBlocker::Render(AUDCBlocker *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  AudioUnitParameterValue v8 = (AUDCBlocker *)((char *)this + 80);
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUDCBlocker *)((char *)this + 80), 0);
  uint64_t v10 = ausdk::AUScope::SafeGetElement((AUDCBlocker *)((char *)this + 128), 0);
  unsigned int v15 = 0;
  long long v11 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 0);
  uint64_t result = ausdk::AUInputElement::PullInput(v11, &v15, a3, 0, a4);
  if (!result)
  {
    uint64_t BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 144));
    uint64_t v14 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144));
    return (*(uint64_t (**)(AUDCBlocker *, unsigned int *, uint64_t, uint64_t, uint64_t))(*(void *)this + 176))(this, a2, BufferList, v14, a4);
  }
  return result;
}

uint64_t AUDCBlocker::ProcessBufferLists(AUDCBlocker *this, unsigned int *a2, const AudioBufferList *a3, AudioBufferList *a4, vDSP_Length __N)
{
  int v9 = *((_DWORD *)this + 132);
  if (*((_DWORD *)this + 133) != v9)
  {
    float64_t v10 = AUDCBlocker::SetCoefficients((uint64_t)this, (float64x2_t **)this + 68);
    (*(void (**)(void, uint64_t, void, float64_t))(**((void **)this + 71) + 16))(*((void *)this + 71), 1, *((void *)this + 68), v10);
    *((_DWORD *)this + 133) = v9;
  }
  if (*((_DWORD *)this + 134)) {
    goto LABEL_4;
  }
  uint64_t v12 = (_DWORD *)*((void *)this + 71);
  if (!v12[4]) {
    goto LABEL_4;
  }
  if (*((_DWORD *)this + 135))
  {
    if (a3->mNumberBuffers)
    {
      unint64_t v13 = 0;
      uint64_t v14 = 16;
      while (1)
      {
        float __C = 0.0;
        vDSP_svemg(*(const float **)((char *)&a3->mNumberBuffers + v14), 1, &__C, __N);
        if (__C != 0.0) {
          break;
        }
        ++v13;
        v14 += 16;
        if (v13 >= a3->mNumberBuffers) {
          goto LABEL_4;
        }
      }
      *((_DWORD *)this + 135) = 0;
      uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDCBlocker *)((char *)this + 32), 0);
      float Parameter = ausdk::AUElement::GetParameter(Element, 1u);
      if (Parameter == 0.0)
      {
        *((_DWORD *)this + 146) = 1065353216;
        float v17 = 0.0;
      }
      else
      {
        *((_DWORD *)this + 146) = 0;
        float v17 = 1.0
            / (*(double *)(ausdk::AUScope::SafeGetElement((AUDCBlocker *)((char *)this + 80), 0) + 80)
             * Parameter
             * 0.001);
      }
      *((float *)this + 147) = v17;
      uint64_t v18 = (ausdk::AUBufferList *)*((void *)this + 72);
      uint64_t v19 = (const AudioStreamBasicDescription *)ausdk::AUScope::SafeGetElement((AUDCBlocker *)((char *)this + 80), 0);
      int v20 = (unsigned int *)ausdk::AUBufferList::PrepareBuffer(v18, v19 + 2, __N);
      uint64x2_t v21 = v20;
      if (a3->mNumberBuffers && *v20)
      {
        unint64_t v22 = 1;
        uint64_t v23 = 4;
        do
        {
          float __C = 0.0;
          vDSP_meanv(*(const float **)((char *)&a3->mNumberBuffers + v23 * 4), 1, &__C, __N);
          int v24 = *(float **)((char *)&a3->mNumberBuffers + v23 * 4);
          float __B = 0.0;
          float __B = (float)(__C - *v24) / (float)__N;
          vDSP_vramp(&__C, &__B, *(float **)&v21[v23], 1, __N);
          if (v22 >= a3->mNumberBuffers) {
            break;
          }
          v23 += 4;
        }
        while (v22++ < *v21);
      }
      (*(void (**)(void))(**((void **)this + 71) + 24))(*((void *)this + 71));
      (*(void (**)(void, vDSP_Length, unsigned int *, unsigned int *))(**((void **)this + 71) + 32))(*((void *)this + 71), __N, v21, v21);
      uint64_t v12 = (_DWORD *)*((void *)this + 71);
      goto LABEL_23;
    }
LABEL_4:
    CopyBufferList(&a3->mNumberBuffers, a4);
    return 0;
  }
LABEL_23:
  (*(void (**)(_DWORD *, vDSP_Length, const AudioBufferList *, AudioBufferList *))(*(void *)v12 + 32))(v12, __N, a3, a4);
  if (*((float *)this + 146) < 1.0)
  {
    float __B = 1.0;
    float __C = 0.0;
    vDSP_vramp((const float *)this + 146, (const float *)this + 147, *((float **)this + 74), 1, __N);
    vDSP_vclip(*((const float **)this + 74), 1, &__C, &__B, *((float **)this + 74), 1, __N);
    if (a3->mNumberBuffers)
    {
      unint64_t v26 = 0;
      p_mData = &a4->mBuffers[0].mData;
      do
      {
        uint64_t v28 = (float *)*p_mData;
        p_mData += 2;
        vDSP_vmul(v28, 1, *((const float **)this + 74), 1, v28, 1, __N);
        ++v26;
      }
      while (v26 < a3->mNumberBuffers);
    }
    *((_DWORD *)this + 146) = *(_DWORD *)(*((void *)this + 74) + 4 * (__N - 1));
  }
  return 0;
}

float64_t AUDCBlocker::SetCoefficients(uint64_t a1, float64x2_t **a2)
{
  unint64_t v4 = (ausdk::AUScope *)(a1 + 32);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  float Parameter = ausdk::AUElement::GetParameter(Element, 2u);
  double v7 = *(double *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0) + 80);
  AudioUnitParameterValue v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  float v9 = ausdk::AUElement::GetParameter(v8, 0) * 6.28318531 / v7;
  float64_t v10 = *a2;
  if (v9 <= 0.0)
  {
    v10->f64[0] = 0.0;
    v10->f64[1] = 0.0;
    v10[1].f64[1] = 0.0;
    v10[2].f64[0] = 0.0;
    v10[1].f64[0] = 1.0;
  }
  else
  {
    BiquadCoefficients::SetPriv((BiquadCoefficients *)v10, 2, fmin(v9, 3.11017673), 0.707106781, 0.0);
  }
  long long v11 = *a2;
  double v12 = __exp10(Parameter * 0.05);
  v11[1] = vmulq_n_f64(v11[1], v12);
  float64_t result = v11[2].f64[0] * v12;
  v11[2].f64[0] = result;
  return result;
}

unsigned int *CopyBufferList(unsigned int *result, _DWORD *a2)
{
  unint64_t v2 = *result;
  if (v2 == *a2 && v2 != 0)
  {
    uint64_t v5 = result;
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      size_t v8 = v5[v6 + 3];
      if (v8 == a2[v6 + 3])
      {
        float64_t result = (unsigned int *)memcpy(*(void **)&a2[v6 + 4], *(const void **)&v5[v6 + 4], v8);
        unint64_t v2 = *v5;
      }
      ++v7;
      v6 += 4;
    }
    while (v7 < v2);
  }
  return result;
}

{
  unint64_t v2;
  unsigned int *v5;
  uint64_t v6;
  unint64_t v7;
  size_t v8;
  unsigned int *v9;

  unint64_t v2 = *result;
  if (v2 == *a2 && v2 != 0)
  {
    uint64_t v5 = result;
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      size_t v8 = v5[v6 + 3];
      if (v8 == a2[v6 + 3])
      {
        float v9 = *(unsigned int **)&v5[v6 + 4];
        float64_t result = *(unsigned int **)&a2[v6 + 4];
        if (v9 != result)
        {
          float64_t result = (unsigned int *)memcpy(result, v9, v8);
          unint64_t v2 = *v5;
        }
      }
      ++v7;
      v6 += 4;
    }
    while (v7 < v2);
  }
  return result;
}

uint64_t AUDCBlocker::CanScheduleParameters(AUDCBlocker *this)
{
  return 0;
}

uint64_t AUDCBlocker::SetParameter(AUDCBlocker *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  ++*((_DWORD *)this + 132);
  return 0;
}

uint64_t AUDCBlocker::SetProperty(AUDCBlocker *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result = 4294956417;
  if (a2 == 21 && !a3)
  {
    uint64_t result = 0;
    *((_DWORD *)this + 134) = *a5;
    *((_DWORD *)this + 135) = 1;
  }
  return result;
}

uint64_t AUDCBlocker::GetProperty(AUDCBlocker *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result = 4294956417;
  if (a2 == 21 && !a3)
  {
    uint64_t result = 0;
    *a5 = *((_DWORD *)this + 134);
  }
  return result;
}

uint64_t AUDCBlocker::GetPropertyInfo(AUDCBlocker *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result = 4294956417;
  if (a2 == 21 && !a3)
  {
    uint64_t result = 0;
    *a6 = 1;
    *a5 = 4;
  }
  return result;
}

uint64_t AUDCBlocker::Reset(AUDCBlocker *this)
{
  uint64_t v2 = *((void *)this + 71);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
    *((_DWORD *)this + 135) = 1;
    float64_t v3 = AUDCBlocker::SetCoefficients((uint64_t)this, (float64x2_t **)this + 68);
    (*(void (**)(void, uint64_t, void, float64_t))(**((void **)this + 71) + 16))(*((void *)this + 71), 1, *((void *)this + 68), v3);
  }
  return 0;
}

void *AUDCBlocker::Cleanup(AUDCBlocker *this)
{
  uint64_t v2 = *((void *)this + 71);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *((void *)this + 71) = 0;
  }

  return CADeprecated::CAAutoDelete<ausdk::AUBufferList>::set((void *)this + 72, 0);
}

void *CADeprecated::CAAutoDelete<ausdk::AUBufferList>::set(void *result, uint64_t a2)
{
  uint64_t v2 = *result;
  if (*result != a2)
  {
    unint64_t v4 = result;
    if (v2)
    {
      if (*(void *)(v2 + 8))
      {
        (*((void (**)(void))ausdk::BufferAllocator::instance(void)::global + 3))();
        *(void *)(v2 + 8) = 0;
      }
      *(void *)(v2 + 16) = 0;
      *(_DWORD *)uint64_t v2 = 0;
      uint64_t result = (void *)MEMORY[0x1C185D370](v2, 0x1020C409F4E64B8);
    }
    *unint64_t v4 = a2;
  }
  return result;
}

uint64_t AUDCBlocker::Initialize(AUDCBlocker *this)
{
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUDCBlocker *)((char *)this + 80), 0);
  long long v3 = *(_OWORD *)(Element + 96);
  *(_OWORD *)&v10.mSampleRate = *(_OWORD *)(Element + 80);
  *(_OWORD *)&v10.UInt32 mBytesPerPacket = v3;
  *(void *)&v10.UInt32 mBitsPerChannel = *(void *)(Element + 112);
  uint64_t v4 = ausdk::AUScope::SafeGetElement((AUDCBlocker *)((char *)this + 128), 0);
  long long v5 = *(_OWORD *)(v4 + 96);
  *(_OWORD *)&v9.mSampleRate = *(_OWORD *)(v4 + 80);
  *(_OWORD *)&v9.UInt32 mBytesPerPacket = v5;
  *(void *)&v9.UInt32 mBitsPerChannel = *(void *)(v4 + 112);
  if (v10.mSampleRate == v9.mSampleRate
    && v10.mFormatID == v9.mFormatID
    && *(void *)&v10.mBytesPerPacket == *(void *)&v9.mBytesPerPacket
    && *(void *)&v10.mChannelsPerFrame == *(void *)&v9.mChannelsPerFrame
    && CA::Implementation::EquivalentFormatFlags((CA::Implementation *)&v10, &v9, 0, 0))
  {
    uint64_t v6 = NewIIRFilter(&v10, &v9, (const CAStreamBasicDescription *)1);
    uint64_t v7 = *((void *)this + 71);
    if (v7 != v6)
    {
      if (v7) {
        (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
      }
      *((void *)this + 71) = v6;
    }
    if (v6)
    {
      (*(void (**)(AUDCBlocker *, void, void))(*(void *)this + 72))(this, 0, 0);
      *((_DWORD *)this + 135) = 1;
      operator new();
    }
  }
  return 4294956428;
}

void AUDCBlocker::~AUDCBlocker(AUDCBlocker *this)
{
  AUDCBlocker::~AUDCBlocker(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_1F14AFCD0;
  uint64_t v2 = (void *)*((void *)this + 74);
  if (v2)
  {
    free(v2);
    *((void *)this + 74) = 0;
  }
  CADeprecated::CAAutoDelete<ausdk::AUBufferList>::set((void *)this + 72, 0);
  long long v3 = *((void *)this + 71);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    *((void *)this + 71) = 0;
  }
  uint64_t v4 = (void *)*((void *)this + 68);
  if (v4)
  {
    *((void *)this + 69) = v4;
    operator delete(v4);
  }

  ausdk::AUBase::~AUBase(this);
}

void std::vector<BiquadCoefficients>::resize(void **a1, unint64_t a2)
{
  long long v5 = (char *)*a1;
  uint64_t v4 = (char *)a1[1];
  unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - (unsigned char *)*a1) >> 3);
  unint64_t v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 < v6) {
      a1[1] = &v5[40 * a2];
    }
  }
  else
  {
    size_t v8 = a1[2];
    if (0xCCCCCCCCCCCCCCCDLL * ((v8 - v4) >> 3) >= v7)
    {
      unint64_t v22 = &v4[40 * v7];
      do
      {
        *(void *)uint64_t v4 = 0;
        *((void *)v4 + 1) = 0;
        *((void *)v4 + 3) = 0;
        *((void *)v4 + 4) = 0;
        *((void *)v4 + 2) = 0x3FF0000000000000;
        v4 += 40;
      }
      while (v4 != v22);
      a1[1] = v22;
    }
    else
    {
      if (a2 > 0x666666666666666) {
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - v5) >> 3);
      uint64_t v10 = 2 * v9;
      if (2 * v9 <= a2) {
        uint64_t v10 = a2;
      }
      if (v9 >= 0x333333333333333) {
        unint64_t v11 = 0x666666666666666;
      }
      else {
        unint64_t v11 = v10;
      }
      double v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<BiquadCoefficients>>(v11);
      uint64_t v14 = &v12[40 * v6];
      unsigned int v15 = &v12[40 * a2];
      uint64_t v16 = v14;
      do
      {
        *(void *)uint64_t v16 = 0;
        *((void *)v16 + 1) = 0;
        *((void *)v16 + 3) = 0;
        *((void *)v16 + 4) = 0;
        *((void *)v16 + 2) = 0x3FF0000000000000;
        v16 += 40;
      }
      while (v16 != v15);
      float v17 = &v12[40 * v13];
      uint64_t v19 = (char *)*a1;
      uint64_t v18 = (char *)a1[1];
      if (v18 != *a1)
      {
        do
        {
          long long v20 = *(_OWORD *)(v18 - 40);
          long long v21 = *(_OWORD *)(v18 - 24);
          *((void *)v14 - 1) = *((void *)v18 - 1);
          *(_OWORD *)(v14 - 24) = v21;
          *(_OWORD *)(v14 - 40) = v20;
          v14 -= 40;
          v18 -= 40;
        }
        while (v18 != v19);
        uint64_t v18 = (char *)*a1;
      }
      *a1 = v14;
      a1[1] = v15;
      a1[2] = v17;
      if (v18)
      {
        operator delete(v18);
      }
    }
  }
}

void ECApplicator::ECApplicator(ECApplicator *this, VoiceProcessorV4 *a2, int a3, int a4)
{
  *(void *)this = a2;
  *((_DWORD *)this + 2) = a3;
  *((unsigned char *)this + 12) = 1;
  *((_DWORD *)this + 16) = 2;
  *((_DWORD *)this + 17) = a4;
  if ((*(unsigned int (**)(VoiceProcessorV4 *))(*(void *)a2 + 112))(a2) == 6)
  {
    *((_OWORD *)this + 1) = xmmword_1BB87AA50;
    *((_OWORD *)this + 2) = xmmword_1BB87AA60;
  }
  (*(void (**)(VoiceProcessorV4 *))(*(void *)a2 + 112))(a2);
  *((_OWORD *)this + 1) = xmmword_1BB87AA50;
  *((_OWORD *)this + 2) = xmmword_1BB87AA60;
  operator new[]();
}

void ECApplicator::~ECApplicator(ECApplicator *this)
{
  uint64_t v2 = *((void *)this + 6);
  if (v2) {
    MEMORY[0x1C185D340](v2, 0x20C8093837F09);
  }
  uint64_t v3 = *((void *)this + 7);
  if (v3) {
    MEMORY[0x1C185D340](v3, 0x20C8093837F09);
  }
}

uint64_t ECApplicator::setInputOutputABLs(uint64_t this, AudioBufferList **a2, AudioBufferList ***a3)
{
  uint64_t v3 = *(unsigned int *)(this + 64);
  if (v3)
  {
    unint64_t v4 = 0;
    uint64_t v5 = 8 * v3;
    do
    {
      *(void *)(*(void *)(this + 48) + v4) = a2[v4 / 8];
      v4 += 8;
    }
    while (v5 != v4);
  }
  uint64_t v6 = *(unsigned int *)(this + 68);
  if (v6)
  {
    unint64_t v7 = 0;
    uint64_t v8 = 8 * v6;
    do
    {
      unint64_t v9 = a3[v7 / 8];
      if (v9) {
        unint64_t v9 = (AudioBufferList **)*v9;
      }
      *(void *)(*(void *)(this + 56) + v7) = v9;
      v7 += 8;
    }
    while (v8 != v7);
  }
  return this;
}

uint64_t ECApplicator::apply(AudioUnitParameterID *this, AudioTimeStamp *a2, unsigned int a3, BOOL *a4, float *a5, float *a6, float *a7, float *a8, float *a9, float *a10)
{
  *a4 = 1;
  AudioUnitRenderActionFlags ioActionFlags = 512;
  uint64_t v16 = *(void **)this;
  if (*(unsigned char *)(v16[176] + a3)) {
    float v17 = 1.0;
  }
  else {
    float v17 = 0.0;
  }
  unsigned int v18 = (*(uint64_t (**)(void *))(*v16 + 112))(v16);
  uint64_t v19 = *(void **)this;
  if (v18 >= 6 && !*((unsigned char *)v19 + 2244))
  {
    if (v19[1112] & 1) != 0 && (v19[1113])
    {
      long long v20 = (OpaqueAudioComponentInstance *)v19[438];
      if (v20)
      {
        AudioUnitParameterValue outValue = 0.0;
        if (!AudioUnitGetParameter(v20, 0x65637232u, 0, 0, &outValue)) {
          AudioUnitSetParameter(*(AudioUnit *)(*(void *)this + 8 * this[2] + 2776), 0x30u, 0, 0, outValue, 0);
        }
      }
    }
    uint64_t v19 = *(void **)this;
    if (*(unsigned char *)(*(void *)this + 8896) & 1) != 0 && (v19[1113])
    {
      long long v21 = (OpaqueAudioComponentInstance *)v19[438];
      if (v21)
      {
        inCFNumberRef Value = 0.0;
        if (!AudioUnitGetParameter(v21, 0x65637233u, 0, 0, &inValue)) {
          AudioUnitSetParameter(*(AudioUnit *)(*(void *)this + 8 * this[2] + 2776), 0x31u, 0, 0, inValue, 0);
        }
        uint64_t v19 = *(void **)this;
      }
    }
  }
  AudioUnitSetParameter((AudioUnit)v19[this[2] + 347], this[4], 0, 0, v17, 0);
  AudioUnitSetParameter(*(AudioUnit *)(*(void *)this + 8 * this[2] + 2776), this[5], 0, 0, *(AudioUnitParameterValue *)(*(void *)this + 4376), 0);
  AudioUnitProcessMultiple(*(AudioUnit *)(*(void *)this + 8 * this[2] + 2776), &ioActionFlags, a2, *(_DWORD *)(*(void *)this + 508), this[16], *((const AudioBufferList ***)this + 6), this[17], *((AudioBufferList ***)this + 7));
  if (*((unsigned char *)this + 12)) {
    memcpy(*(void **)(**((void **)this + 6) + 16), *(const void **)(**((void **)this + 7) + 16), 4 * *(unsigned int *)(*(void *)this + 508));
  }
  AudioUnitGetParameter(*(AudioUnit *)(*(void *)this + 8 * this[2] + 2776), this[6], 0, 0, a5);
  AudioUnitGetParameter(*(AudioUnit *)(*(void *)this + 8 * this[2] + 2776), this[7], 0, 0, a6);
  AudioUnitGetParameter(*(AudioUnit *)(*(void *)this + 8 * this[2] + 2776), this[8], 0, 0, a7);
  AudioUnitGetParameter(*(AudioUnit *)(*(void *)this + 8 * this[2] + 2776), this[9], 0, 0, a8);
  AudioUnitGetParameter(*(AudioUnit *)(*(void *)this + 8 * this[2] + 2776), this[10], 0, 0, a9);
  return AudioUnitGetParameter(*(AudioUnit *)(*(void *)this + 8 * this[2] + 2776), this[11], 0, 0, a10);
}

void StartVPWirelessChargingMatStateListener()
{
  if (!gNotifyDispatchQueue)
  {
    dispatch_queue_t v0 = dispatch_queue_create("vpWirelessChargingNotificationQueue", 0);
    uint64_t v1 = (void *)gNotifyDispatchQueue;
    gNotifyDispatchQueue = (uint64_t)v0;

    if (!gNotifyDispatchQueue) {
      __assert_rtn("StartVPWirelessChargingMatStateListener", "vpWirelessCharging.mm", 48, "gNotifyDispatchQueue != nil");
    }
    atomic_store(__StartVPWirelessChargingMatStateListener_block_invoke(), gWirelessChargingMatIsAttached);
    handler[0] = MEMORY[0x1E4F143A8];
    handler[1] = 3221225472;
    handler[2] = __StartVPWirelessChargingMatStateListener_block_invoke_6;
    handler[3] = &unk_1E623DE78;
    id v4 = &__block_literal_global_7676;
    if (notify_register_dispatch("com.apple.system.powersources.source", &gNotifyToken, (dispatch_queue_t)gNotifyDispatchQueue, handler))
    {
      uint64_t v2 = (void *)gNotifyDispatchQueue;
      gNotifyDispatchQueue = 0;

      gNotifyTokeunint64_t n = 0;
      atomic_store(0, gWirelessChargingMatIsAttached);
    }
  }
}

void sub_1BB4B47C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t __StartVPWirelessChargingMatStateListener_block_invoke()
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef v0 = IOPSCopyExternalPowerAdapterDetails();
  CFDictionaryRef v1 = v0;
  if (v0)
  {
    uint64_t v2 = [(__CFDictionary *)v0 objectForKey:@"IsWireless"];
    if ([v2 BOOLValue])
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      if (VPLogScope(void)::scope)
      {
        uint64_t v3 = *(id *)VPLogScope(void)::scope;
        if (!v3)
        {
LABEL_22:
          uint64_t v4 = 1;
LABEL_23:

          goto LABEL_24;
        }
      }
      else
      {
        uint64_t v3 = MEMORY[0x1E4F14500];
        id v6 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        int v8 = 136315394;
        unint64_t v9 = "vpWirelessCharging.mm";
        __int16 v10 = 1024;
        int v11 = 55;
        _os_log_impl(&dword_1BB0CE000, v3, OS_LOG_TYPE_INFO, "%25s:%-5d wireless charging mat is attached", (uint8_t *)&v8, 0x12u);
      }

      goto LABEL_22;
    }
  }
  if (VPLogScope(void)::once != -1) {
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
  }
  if (!VPLogScope(void)::scope)
  {
    uint64_t v2 = MEMORY[0x1E4F14500];
    id v5 = MEMORY[0x1E4F14500];
    goto LABEL_15;
  }
  uint64_t v2 = *(id *)VPLogScope(void)::scope;
  if (v2)
  {
LABEL_15:
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      int v8 = 136315394;
      unint64_t v9 = "vpWirelessCharging.mm";
      __int16 v10 = 1024;
      int v11 = 60;
      _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_INFO, "%25s:%-5d wireless charging mat is not attached", (uint8_t *)&v8, 0x12u);
    }
    uint64_t v4 = 0;
    goto LABEL_23;
  }
  uint64_t v4 = 0;
LABEL_24:

  return v4;
}

void sub_1BB4B49E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __StartVPWirelessChargingMatStateListener_block_invoke_6(uint64_t result, int a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (gNotifyToken == a2)
  {
    uint64_t v2 = result;
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    if (VPLogScope(void)::scope)
    {
      uint64_t v3 = *(id *)VPLogScope(void)::scope;
      if (!v3)
      {
LABEL_11:
        uint64_t result = (*(uint64_t (**)(void))(*(void *)(v2 + 32) + 16))();
        atomic_store(result, gWirelessChargingMatIsAttached);
        return result;
      }
    }
    else
    {
      uint64_t v3 = MEMORY[0x1E4F14500];
      id v4 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      int v5 = 136315394;
      id v6 = "vpWirelessCharging.mm";
      __int16 v7 = 1024;
      int v8 = 68;
      _os_log_impl(&dword_1BB0CE000, v3, OS_LOG_TYPE_INFO, "%25s:%-5d wireless charging mat state changed", (uint8_t *)&v5, 0x12u);
    }

    goto LABEL_11;
  }
  return result;
}

void StopVPWirelessChargingMatStateListener()
{
  if (!notify_cancel(gNotifyToken))
  {
    CFDictionaryRef v0 = (void *)gNotifyDispatchQueue;
    gNotifyDispatchQueue = 0;

    gNotifyTokeunint64_t n = 0;
  }
}

uint64_t AURotationShading::ChangeStreamFormat(AURotationShading *this, uint64_t a2, uint64_t a3, const AudioStreamBasicDescription *a4, const AudioStreamBasicDescription *a5)
{
  ausdk::AUBase::ChangeStreamFormat(this, a2, a3, a4, a5);
  double mSampleRate = a4->mSampleRate;
  if (a4->mSampleRate != a5->mSampleRate)
  {
    ++*((_DWORD *)this + 132);
    (*(void (**)(AURotationShading *, uint64_t, void, void, double))(*(void *)this + 432))(this, 3, 0, 0, mSampleRate);
  }
  return 0;
}

uint64_t AURotationShading::SupportedNumChannels(AURotationShading *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AURotationShading::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 6;
}

BOOL AURotationShading::StreamFormatWritable(AURotationShading *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AURotationShading::SupportsTail(AURotationShading *this)
{
  return 1;
}

double AURotationShading::GetTailTime(AURotationShading *this)
{
  return 0.05;
}

double AURotationShading::GetLatency(AURotationShading *this)
{
  return 0.0;
}

uint64_t AURotationShading::GetParameterValueStrings(AURotationShading *this, int a2, int a3, const __CFArray **a4)
{
  values[4] = *(void **)MEMORY[0x1E4F143B8];
  if (a3 | a2) {
    return 4294956418;
  }
  if (!a4) {
    return 0;
  }
  values[0] = @"Portrait";
  values[1] = @"Portrait Upside Down";
  values[2] = @"Landscape Left";
  values[3] = @"Landscape Right";
  CFArrayRef v6 = CFArrayCreate(0, (const void **)values, 4, 0);
  uint64_t result = 0;
  *a4 = v6;
  return result;
}

uint64_t AURotationShading::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t v3 = ausdk::AUBase::RestoreState(this, a2);
  if (!v3)
  {
    (*((void (**)(OpaqueAudioComponentInstance **, void, void, void, void, float))*this + 19))(this, 0, 0, 0, 0, (float)AURotationShading::mOrientationCachedPrevious);
    ++*((_DWORD *)this + 132);
  }
  return v3;
}

uint64_t AURotationShading::GetParameterInfo(AURotationShading *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  if (a2) {
    return 4294956418;
  }
  buffer->AudioUnitParameterOptions flags = 0;
  buffer->unitName = 0;
  if (a3 > 3) {
    return 4294956418;
  }
  CFStringRef v6 = off_1E623DE98[a3];
  AudioUnitParameterUnit v7 = dword_1BB87C190[a3];
  AudioUnitParameterValue v8 = flt_1BB87C1A0[a3];
  AudioUnitParameterValue v9 = flt_1BB87C1B0[a3];
  AudioUnitParameterValue v10 = flt_1BB87C1C0[a3];
  buffer->cfNameString = v6;
  buffer->AudioUnitParameterOptions flags = 0x8000000;
  CFStringGetCString(v6, buffer->name, 52, 0x8000100u);
  uint64_t result = 0;
  buffer->unit = v7;
  buffer->minCFNumberRef Value = v8;
  buffer->maxCFNumberRef Value = v9;
  buffer->defaultCFNumberRef Value = v10;
  buffer->flags |= 0xC0000000;
  return result;
}

uint64_t AURotationShading::GetParameterList(AURotationShading *this, int a2, unsigned int *a3, unsigned int *a4)
{
  if (a2)
  {
    unsigned int v4 = 0;
    uint64_t result = 4294956418;
  }
  else
  {
    uint64_t result = 0;
    if (a3) {
      *(_OWORD *)a3 = xmmword_1BB8727D0;
    }
    unsigned int v4 = 4;
  }
  *a4 = v4;
  return result;
}

uint64_t AURotationShading::Render(AURotationShading *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  v15[1] = *MEMORY[0x1E4F143B8];
  unsigned int v13 = 0;
  AudioUnitParameterValue v8 = (AURotationShading *)((char *)this + 80);
  uint64_t Element = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AURotationShading *)((char *)this + 80), 0);
  uint64_t result = ausdk::AUInputElement::PullInput(Element, &v13, a3, 0, a4);
  if (!result)
  {
    uint64_t v11 = ausdk::AUScope::SafeGetElement(v8, 0);
    v15[0] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v11 + 144));
    uint64_t v12 = ausdk::AUScope::SafeGetElement((AURotationShading *)((char *)this + 128), 0);
    uint64_t BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v12 + 144));
    return (*(uint64_t (**)(AURotationShading *, unsigned int *, uint64_t, uint64_t, void *, uint64_t, uint64_t *))(*(void *)this + 184))(this, a2, a4, 1, v15, 1, &BufferList);
  }
  return result;
}

uint64_t AURotationShading::ProcessMultipleBufferLists(AURotationShading *this, unsigned int *a2, uint64_t a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  int v10 = *((_DWORD *)this + 132);
  if (*((_DWORD *)this + 133) != v10)
  {
    AURotationShading::UpdateState(this);
    *((_DWORD *)this + 133) = v10;
  }
  if (!*((unsigned char *)this + 605))
  {
    int v11 = *((_DWORD *)this + 134);
    if (*((_DWORD *)this + 135) != v11)
    {
      uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AURotationShading *)((char *)this + 32), 0);
      *((_DWORD *)this + 149) = ausdk::AUElement::GetParameter(Element, 0);
      *((_DWORD *)this + 135) = v11;
    }
  }
  *((unsigned char *)this + 605) = 1;
  uint64_t v13 = (uint64_t)*a5;
  UInt32 mNumberBuffers = (*a5)->mNumberBuffers;
  UInt32 v47 = (*a7)->mNumberBuffers;
  if (mNumberBuffers)
  {
    unint64_t v15 = 0;
    uint64_t v16 = 16;
    do
    {
      memcpy(*((void **)this + v15++ + 76), *(const void **)(v13 + v16), 4 * a3);
      uint64_t v13 = (uint64_t)*a5;
      unint64_t v17 = (*a5)->mNumberBuffers;
      v16 += 16;
    }
    while (v15 < v17);
  }
  else
  {
    LODWORD(v17) = 0;
  }
  if (*((_DWORD *)this + 150) == 2)
  {
    uint64_t v18 = (uint64_t)*a7;
    LODWORD(v19) = (*a7)->mNumberBuffers;
    if (v19 >= 2)
    {
      unint64_t v20 = 0;
      uint64_t v23 = 16;
      do
      {
        v49.UInt32 mNumberBuffers = 1;
        v49.mBuffers[0].mNumberChannels = 1;
        v49.mBuffers[0].size_t mDataByteSize = 4 * a3;
        unsigned int __C = 1;
        int v51 = 1;
        int v52 = 4 * a3;
        uint64_t v53 = *((void *)this + 76);
        v49.mBuffers[0].mData = *(void **)(v18 + v23);
        CopyBufferList(&__C, &v49);
        ++v20;
        uint64_t v18 = (uint64_t)*a7;
        unint64_t v19 = (*a7)->mNumberBuffers;
        v23 += 16;
      }
      while (v20 < v19 >> 1);
    }
    else
    {
      LODWORD(v20) = 0;
    }
    if ((v19 & 1) != 0 && (*a5)->mNumberBuffers >= 2)
    {
      unsigned int __C = 1060439283;
      vDSP_vasm(*((const float **)this + 76), 1, *((const float **)this + 77), 1, (const float *)&__C, *(float **)(v18 + 16 * v20 + 16), 1, a3);
      uint64_t v18 = (uint64_t)*a7;
      LODWORD(v19) = (*a7)->mNumberBuffers;
      LODWORD(v20) = v20 + 1;
    }
    if (v20 < v19)
    {
      unint64_t v24 = v20;
      uint64_t v25 = 16 * v20 + 16;
      do
      {
        v49.UInt32 mNumberBuffers = 1;
        v49.mBuffers[0].mNumberChannels = 1;
        v49.mBuffers[0].size_t mDataByteSize = 4 * a3;
        unsigned int __C = 1;
        int v51 = 1;
        int v52 = 4 * a3;
        uint64_t v53 = *((void *)this + ((*a5)->mNumberBuffers > 1) + 76);
        v49.mBuffers[0].mData = *(void **)(v18 + v25);
        CopyBufferList(&__C, &v49);
        ++v24;
        uint64_t v18 = (uint64_t)*a7;
        v25 += 16;
      }
      while (v24 < (*a7)->mNumberBuffers);
    }
    return 0;
  }
  if (!*((unsigned char *)this + 606))
  {
    if (!v17) {
      goto LABEL_44;
    }
    uint64_t v26 = 0;
    UInt32 v27 = (*a7)->mNumberBuffers;
    while (!v27)
    {
LABEL_43:
      if (++v26 >= (unint64_t)v17) {
        goto LABEL_44;
      }
    }
    UInt32 v28 = 0;
    while (1)
    {
      v49.UInt32 mNumberBuffers = 1;
      v49.mBuffers[0].mNumberChannels = 1;
      v49.mBuffers[0].size_t mDataByteSize = 4 * a3;
      unsigned int __C = 1;
      int v51 = 1;
      int v52 = 4 * a3;
      uint64_t v53 = *((void *)this + v26 + 76);
      HardwareChannelFromOrientatiounint64_t n = AURotationShading::GetHardwareChannelFromOrientation(this, v28 + v26);
      mData = (*a7)->mBuffers[HardwareChannelFromOrientation].mData;
      v49.mBuffers[0].mData = mData;
      if (*((_DWORD *)this + 150))
      {
        if ((*((_DWORD *)this + 149) - 3) > 1)
        {
          if (HardwareChannelFromOrientation >= 2)
          {
LABEL_35:
            bzero(mData, v49.mBuffers[0].mDataByteSize);
            goto LABEL_38;
          }
        }
        else if ((HardwareChannelFromOrientation & 0xFFFFFFFD) != 0)
        {
          goto LABEL_35;
        }
      }
      CopyBufferList(&__C, &v49);
LABEL_38:
      BottomChannelFromOrientatiounint64_t n = AURotationShading::GetBottomChannelFromOrientation(this, HardwareChannelFromOrientation);
      if (BottomChannelFromOrientation && mNumberBuffers != v47 && !*((_DWORD *)this + 150))
      {
        uint64_t v32 = *(void *)(*((void *)this + 71) + 8 * (BottomChannelFromOrientation - 1));
        (*(void (**)(uint64_t, uint64_t, AudioBufferList *, AudioBufferList *))(*(void *)v32 + 32))(v32, a3, &v49, &v49);
      }
      LODWORD(v17) = (*a5)->mNumberBuffers;
      v28 += v17;
      UInt32 v27 = (*a7)->mNumberBuffers;
      if (v28 >= v27) {
        goto LABEL_43;
      }
    }
  }
  if ((*a7)->mNumberBuffers)
  {
    unint64_t v21 = 0;
    uint64_t v22 = 16;
    do
    {
      v49.UInt32 mNumberBuffers = 1;
      v49.mBuffers[0].mNumberChannels = 1;
      v49.mBuffers[0].size_t mDataByteSize = 4 * a3;
      unsigned int __C = 1;
      int v51 = 1;
      int v52 = 4 * a3;
      uint64_t v53 = *((void *)this + AURotationShading::GetHardwareChannelFromOrientation(this, v21) + 76);
      AURotationShading::GetHardwareChannelFromOrientation(this, v21);
      v49.mBuffers[0].mData = *(void **)((char *)&(*a7)->mNumberBuffers + v22);
      CopyBufferList(&__C, &v49);
      ++v21;
      v22 += 16;
    }
    while (v21 < (*a7)->mNumberBuffers);
  }
LABEL_44:
  int v33 = *((_DWORD *)this + 134);
  if (*((_DWORD *)this + 135) == v33) {
    return 0;
  }
  uint64x2_t v34 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AURotationShading *)((char *)this + 32), 0);
  *((_DWORD *)this + 149) = ausdk::AUElement::GetParameter(v34, 0);
  *((_DWORD *)this + 135) = v33;
  (*(void (**)(AURotationShading *, void, void))(*(void *)this + 72))(this, 0, 0);
  if (!*((unsigned char *)this + 606))
  {
    UInt32 v37 = (*a5)->mNumberBuffers;
    if (!v37) {
      return 0;
    }
    uint64_t v38 = 0;
    UInt32 v39 = (*a7)->mNumberBuffers;
    while (!v39)
    {
LABEL_65:
      if (++v38 >= (unint64_t)v37) {
        return 0;
      }
    }
    UInt32 v40 = 0;
    while (1)
    {
      v48.UInt32 mNumberBuffers = 1;
      v48.mBuffers[0].mNumberChannels = 1;
      v48.mBuffers[0].size_t mDataByteSize = 4 * a3;
      v49.UInt32 mNumberBuffers = 1;
      v49.mBuffers[0].mNumberChannels = 1;
      v49.mBuffers[0].size_t mDataByteSize = 4 * a3;
      unsigned int __C = 1;
      int v51 = 1;
      int v52 = 4 * a3;
      uint64_t v53 = *((void *)this + v38 + 76);
      v48.mBuffers[0].mData = (void *)*((void *)this + 80);
      unsigned int v41 = AURotationShading::GetHardwareChannelFromOrientation(this, v40 + v38);
      int v42 = v41;
      v49.mBuffers[0].mData = (*a7)->mBuffers[v41].mData;
      if (*((_DWORD *)this + 150))
      {
        if ((*((_DWORD *)this + 149) - 3) > 1)
        {
          if (v41 >= 2)
          {
LABEL_57:
            bzero(v48.mBuffers[0].mData, v48.mBuffers[0].mDataByteSize);
            goto LABEL_60;
          }
        }
        else if ((v41 & 0xFFFFFFFD) != 0)
        {
          goto LABEL_57;
        }
      }
      CopyBufferList(&__C, &v48);
LABEL_60:
      int v43 = AURotationShading::GetBottomChannelFromOrientation(this, v42);
      if (v43 && mNumberBuffers != v47 && !*((_DWORD *)this + 150))
      {
        uint64_t v44 = *(void *)(*((void *)this + 71) + 8 * (v43 - 1));
        (*(void (**)(uint64_t, uint64_t, AudioBufferList *, AudioBufferList *))(*(void *)v44 + 32))(v44, a3, &v48, &v48);
      }
      FadeBufferLists(&v48.mNumberBuffers, &v49, a3);
      UInt32 v37 = (*a5)->mNumberBuffers;
      v40 += v37;
      UInt32 v39 = (*a7)->mNumberBuffers;
      if (v40 >= v39) {
        goto LABEL_65;
      }
    }
  }
  if ((*a7)->mNumberBuffers)
  {
    unint64_t v35 = 0;
    uint64_t v36 = 16;
    do
    {
      v48.UInt32 mNumberBuffers = 1;
      v48.mBuffers[0].mNumberChannels = 1;
      v48.mBuffers[0].size_t mDataByteSize = 4 * a3;
      v49.UInt32 mNumberBuffers = 1;
      v49.mBuffers[0].mNumberChannels = 1;
      v49.mBuffers[0].size_t mDataByteSize = 4 * a3;
      unsigned int __C = 1;
      int v51 = 1;
      int v52 = 4 * a3;
      uint64_t v53 = *((void *)this + AURotationShading::GetHardwareChannelFromOrientation(this, v35) + 76);
      v48.mBuffers[0].mData = (void *)*((void *)this + 80);
      CopyBufferList(&__C, &v48);
      v49.mBuffers[0].mData = *(void **)((char *)&(*a7)->mNumberBuffers + v36);
      FadeBufferLists(&v48.mNumberBuffers, &v49, a3);
      ++v35;
      v36 += 16;
    }
    while (v35 < (*a7)->mNumberBuffers);
  }
  return 0;
}

void AURotationShading::UpdateState(AURotationShading *this)
{
  uint64_t v2 = (AURotationShading *)((char *)this + 32);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AURotationShading *)((char *)this + 32), 0);
  *((unsigned char *)this + 604) = ausdk::AUElement::GetParameter(Element, 1u) != 0.0;
  if (*((void *)this + 72) == *((void *)this + 71)) {
    return;
  }
  unint64_t v4 = 0;
  unsigned int v5 = 1;
  do
  {
    double v6 = *(double *)(ausdk::AUScope::SafeGetElement((AURotationShading *)((char *)this + 128), 0) + 80);
    AudioUnitParameterUnit v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
    double Parameter = ausdk::AUElement::GetParameter(v7, v5 + 1);
    if (v6 * 0.49 >= Parameter && *((unsigned char *)this + 604))
    {
      float v9 = Parameter * 6.28318531 / v6;
      uint64_t v10 = *((void *)this + 68);
      int v11 = (BiquadCoefficients *)(v10 + 40 * v4);
      if (v9 > 0.0)
      {
        BiquadCoefficients::SetPriv(v11, 1, fmin(v9, 3.11017673), 0.707106781, 0.0);
        goto LABEL_9;
      }
      *(void *)int v11 = 0;
      *((void *)v11 + 1) = 0;
      uint64_t v12 = (void *)(v10 + 40 * v4);
    }
    else
    {
      uint64_t v12 = (void *)(*((void *)this + 68) + 40 * v4);
      void *v12 = 0;
      v12[1] = 0;
    }
    v12[3] = 0;
    _DWORD v12[4] = 0;
    void v12[2] = 0x3FF0000000000000;
LABEL_9:
    uint64_t v13 = *((void *)this + 68);
    double v14 = __exp10(0.0);
    unint64_t v15 = (float64x2_t *)(v13 + 40 * v4);
    v15[1] = vmulq_n_f64(v15[1], v14);
    v15[2].f64[0] = v15[2].f64[0] * v14;
    unint64_t v4 = v5;
    uint64_t v16 = *((void *)this + 72);
    uint64_t v17 = *((void *)this + 71);
    ++v5;
  }
  while (v4 < (v16 - v17) >> 3);
  if (v16 != v17)
  {
    unint64_t v18 = 0;
    unsigned int v19 = 1;
    do
    {
      (*(void (**)(void, uint64_t, unint64_t))(**(void **)(v17 + 8 * v18) + 16))(*(void *)(v17 + 8 * v18), 1, *((void *)this + 68) + 40 * v18);
      unint64_t v18 = v19;
      uint64_t v17 = *((void *)this + 71);
      ++v19;
    }
    while (v18 < (*((void *)this + 72) - v17) >> 3);
  }
}

uint64_t AURotationShading::GetHardwareChannelFromOrientation(AURotationShading *this, uint64_t a2)
{
  unint64_t v4 = (AURotationShading *)((char *)this + 128);
  if (*(_DWORD *)(ausdk::AUScope::SafeGetElement((AURotationShading *)((char *)this + 128), 0) + 108) != 1
    && !*((_DWORD *)this + 148))
  {
    if (*(_DWORD *)(ausdk::AUScope::SafeGetElement(v4, 0) + 108) != 2)
    {
      int v9 = *((_DWORD *)this + 149);
      switch(v9)
      {
        case 2:
          uint64_t v10 = (unsigned int *)&unk_1BB8984D4;
          break;
        case 4:
          uint64_t v10 = (unsigned int *)&unk_1BB87C150;
          break;
        case 3:
          uint64_t v10 = (unsigned int *)&unk_1BB87C140;
          break;
        default:
          return a2;
      }
      return v10[a2];
    }
    int v6 = *((_DWORD *)this + 149);
    if (*((unsigned char *)this + 606))
    {
      unsigned int v7 = 2 * (a2 != 0);
      int v8 = 2 * (a2 == 0);
      if (v6 != 3) {
        int v8 = a2;
      }
      if (v6 != 4) {
        unsigned int v7 = v8;
      }
      if (v6 == 2) {
        return a2 == 0;
      }
      else {
        return v7;
      }
    }
    else if ((v6 & 0xFFFFFFFE) == 2)
    {
      return a2 == 0;
    }
    else
    {
      return a2;
    }
  }
  return a2;
}

uint64_t AURotationShading::GetBottomChannelFromOrientation(AURotationShading *this, int a2)
{
  unint64_t v4 = (AURotationShading *)((char *)this + 128);
  uint64_t Element = ausdk::AUScope::SafeGetElement((AURotationShading *)((char *)this + 128), 0);
  uint64_t result = 0;
  if (*(_DWORD *)(Element + 108) != 1)
  {
    if (*((_DWORD *)this + 148))
    {
      return 0;
    }
    else
    {
      uint64_t v7 = ausdk::AUScope::SafeGetElement(v4, 0);
      int v8 = *((_DWORD *)this + 149);
      if (*(_DWORD *)(v7 + 108) == 2)
      {
        if (v8 == 2) {
          return (a2 + 1);
        }
        else {
          return 0;
        }
      }
      else
      {
        unsigned int v9 = v8 - 2;
        if (v9 > 2) {
          uint64_t v10 = (unsigned int *)&unk_1BB87C180;
        }
        else {
          uint64_t v10 = (unsigned int *)*(&off_1E623DEB8 + v9);
        }
        return v10[a2];
      }
    }
  }
  return result;
}

uint64_t AURotationShading::CanScheduleParameters(AURotationShading *this)
{
  return 0;
}

uint64_t AURotationShading::SetParameter(AURotationShading *this, unsigned int a2, int a3, double a4)
{
  if (a3) {
    return 4294956418;
  }
  if (a2)
  {
    float v10 = *(float *)&a4;
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AURotationShading *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(Element, a2, v10, 0);
    int v8 = (char *)this + 528;
  }
  else
  {
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0), (float32x4_t)xmmword_1BB87AA70))) & 1) == 0)return 0; {
    AURotationShading::mOrientationCachedPrevious = *(float *)&a4;
    }
    float v11 = *(float *)&a4;
    unsigned int v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AURotationShading *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v9, 0, v11, 0);
    int v8 = (char *)this + 536;
  }
  uint64_t result = 0;
  ++*(_DWORD *)v8;
  return result;
}

uint64_t AURotationShading::SetProperty(AURotationShading *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  if (a3) {
    return 4294956417;
  }
  if (a2 == 64002)
  {
    uint64_t result = 0;
    *((_DWORD *)this + 150) = *a5;
  }
  else
  {
    if (a2 != 21) {
      return 4294956417;
    }
    uint64_t result = 0;
    *((_DWORD *)this + 148) = *a5;
  }
  return result;
}

uint64_t AURotationShading::GetProperty(AURotationShading *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  if (a3) {
    return 4294956417;
  }
  if (a2 == 64002)
  {
    int v6 = (char *)this + 600;
  }
  else
  {
    if (a2 != 21) {
      return 4294956417;
    }
    int v6 = (char *)this + 592;
  }
  uint64_t result = 0;
  *a5 = *(_DWORD *)v6;
  return result;
}

uint64_t AURotationShading::GetPropertyInfo(AURotationShading *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3 || a2 != 64002 && a2 != 21) {
    return 4294956417;
  }
  uint64_t result = 0;
  *a6 = 1;
  *a5 = 4;
  return result;
}

uint64_t AURotationShading::Reset(uint64_t **this)
{
  AURotationShading::UpdateState((AURotationShading *)this);
  uint64_t v2 = this[71];
  uint64_t v3 = this[72];
  while (v2 != v3)
  {
    uint64_t v4 = *v2++;
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  return 0;
}

uint64_t AURotationShading::Cleanup(AURotationShading *this)
{
  uint64_t v2 = (char *)*((void *)this + 72);
  for (unint64_t i = (char *)*((void *)this + 71); v2 != i; unint64_t i = (char *)*((void *)this + 71))
  {
    uint64_t v4 = *(void *)i;
    int64_t v5 = v2 - (i + 8);
    if (v2 != i + 8) {
      memmove(i, i + 8, v2 - (i + 8));
    }
    uint64_t v2 = &i[v5];
    *((void *)this + 72) = &i[v5];
    if (v4)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      uint64_t v2 = (char *)*((void *)this + 72);
    }
  }
  uint64_t v6 = 0;
  uint64_t v7 = (char *)this + 608;
  do
  {
    uint64_t v8 = *(void *)&v7[v6];
    if (v8)
    {
      MEMORY[0x1C185D340](v8, 0x1000C8052888210);
      *(void *)&v7[v6] = 0;
    }
    v6 += 8;
  }
  while (v6 != 32);
  uint64_t result = *((void *)this + 80);
  if (result)
  {
    uint64_t result = MEMORY[0x1C185D340](result, 0x1000C8052888210);
    *((void *)this + 80) = 0;
  }
  return result;
}

uint64_t AURotationShading::Initialize(AURotationShading *this)
{
  uint64_t Element = ausdk::AUScope::SafeGetElement((AURotationShading *)((char *)this + 80), 0);
  uint64_t v3 = ausdk::AUScope::SafeGetElement((AURotationShading *)((char *)this + 128), 0);
  int v4 = *(_DWORD *)(Element + 108);
  int v5 = *(_DWORD *)(v3 + 108);
  BOOL v6 = v4 == 1 && v5 == 1;
  if (v6
    || ((v4 - 1) <= 1 ? (BOOL v7 = v5 == 2) : (BOOL v7 = 0),
        v7
     || (v4 == 4 ? (BOOL v8 = v5 == 2) : (BOOL v8 = 0),
         !v8 ? (char v9 = 0) : (char v9 = 1),
         v5 == 4 ? (BOOL v10 = v4 == 1) : (BOOL v10 = 0),
         v5 == 4 ? (BOOL v11 = v4 == 2) : (BOOL v11 = 0),
         v10 || (v9 & 1) != 0 || v11)))
  {
    BOOL v14 = v4 == 4 && v5 == 2;
    *((unsigned char *)this + 606) = v14;
    for (char i = 1; ; char i = 0)
    {
      char v16 = i;
      v34.double mSampleRate = *(Float64 *)(Element + 80);
      *(_OWORD *)&v34.AudioFormatID mFormatID = xmmword_1BB8727B0;
      *(_OWORD *)&v34.UInt32 mBytesPerFrame = xmmword_1BB8727C0;
      uint64_t v17 = NewIIRFilter(&v34, &v34, (const CAStreamBasicDescription *)1);
      if (!v17) {
        break;
      }
      uint64_t v18 = v17;
      unsigned int v19 = (uint64_t *)*((void *)this + 72);
      unint64_t v20 = *((void *)this + 73);
      if ((unint64_t)v19 >= v20)
      {
        uint64_t v22 = *((void *)this + 71);
        uint64_t v23 = ((uint64_t)v19 - v22) >> 3;
        if ((unint64_t)(v23 + 1) >> 61) {
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v24 = v20 - v22;
        uint64_t v25 = v24 >> 2;
        if (v24 >> 2 <= (unint64_t)(v23 + 1)) {
          uint64_t v25 = v23 + 1;
        }
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v26 = v25;
        }
        if (v26) {
          unint64_t v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v26);
        }
        else {
          uint64_t v27 = 0;
        }
        UInt32 v28 = (uint64_t *)(v26 + 8 * v23);
        uint64_t *v28 = v18;
        unint64_t v21 = v28 + 1;
        unint64_t v29 = (char *)*((void *)this + 72);
        int v30 = (char *)*((void *)this + 71);
        if (v29 != v30)
        {
          do
          {
            uint64_t v31 = *((void *)v29 - 1);
            v29 -= 8;
            *--UInt32 v28 = v31;
          }
          while (v29 != v30);
          unint64_t v29 = (char *)*((void *)this + 71);
        }
        *((void *)this + 71) = v28;
        *((void *)this + 72) = v21;
        *((void *)this + 73) = v26 + 8 * v27;
        if (v29) {
          operator delete(v29);
        }
      }
      else
      {
        *unsigned int v19 = v17;
        unint64_t v21 = v19 + 1;
      }
      *((void *)this + 72) = v21;
      if ((v16 & 1) == 0)
      {
        if (*(_DWORD *)(Element + 108))
        {
          uint64_t v32 = *((void *)this + 76);
          if (v32) {
            MEMORY[0x1C185D340](v32, 0x1000C8052888210);
          }
          operator new[]();
        }
        uint64_t v33 = *((void *)this + 80);
        if (v33) {
          MEMORY[0x1C185D340](v33, 0x1000C8052888210);
        }
        operator new[]();
      }
    }
  }
  return 4294956428;
}

void AURotationShading::~AURotationShading(AURotationShading *this)
{
  AURotationShading::~AURotationShading(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F14AFF40;
  AURotationShading::Cleanup(this);
  uint64_t v2 = (void *)*((void *)this + 71);
  if (v2)
  {
    *((void *)this + 72) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 68);
  if (v3)
  {
    *((void *)this + 69) = v3;
    operator delete(v3);
  }

  ausdk::AUBase::~AUBase(this);
}

uint64_t AULinearEchoCancelerV3::SetBypassEffect(uint64_t this, char a2)
{
  *(unsigned char *)(this + 528) = a2;
  return this;
}

uint64_t AULinearEchoCancelerV3::ShouldBypassEffect(AULinearEchoCancelerV3 *this)
{
  return *((unsigned __int8 *)this + 528);
}

BOOL AULinearEchoCancelerV3::ValidFormat(AULinearEchoCancelerV3 *this, const AudioStreamBasicDescription *a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  if (ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2)) {
    BOOL v5 = (a4->mFormatFlags & 0x20) != 0 || a4->mChannelsPerFrame == 1;
  }
  else {
    BOOL v5 = 0;
  }
  return a4->mChannelsPerFrame == 1 && v5;
}

uint64_t AULinearEchoCancelerV3::SupportedNumChannels(AULinearEchoCancelerV3 *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AULinearEchoCancelerV3::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 1;
}

BOOL AULinearEchoCancelerV3::StreamFormatWritable(AULinearEchoCancelerV3 *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AULinearEchoCancelerV3::SupportsTail(AULinearEchoCancelerV3 *this)
{
  return 1;
}

double AULinearEchoCancelerV3::GetTailTime(AULinearEchoCancelerV3 *this)
{
  return 0.0;
}

double AULinearEchoCancelerV3::GetLatency(AULinearEchoCancelerV3 *this)
{
  return 0.0;
}

uint64_t AULinearEchoCancelerV3::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result = ausdk::AUBase::RestoreState(this, a2);
  if (!result) {
    ++*((_DWORD *)this + 133);
  }
  return result;
}

uint64_t AULinearEchoCancelerV3::GetParameterInfo(AULinearEchoCancelerV3 *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  buffer->AudioUnitParameterOptions flags = 0x40000000;
  buffer->unitName = 0;
  uint64_t result = 4294956418;
  if (!a2 && a3 <= 0x29)
  {
    CFStringRef v6 = off_1E623DED0[a3];
    AudioUnitParameterUnit v7 = dword_1BB8984E8[a3];
    AudioUnitParameterValue v8 = flt_1BB898590[a3];
    AudioUnitParameterValue v9 = flt_1BB898638[a3];
    AudioUnitParameterValue v10 = flt_1BB8986E0[a3];
    int v11 = dword_1BB898788[a3];
    buffer->cfNameString = v6;
    buffer->AudioUnitParameterOptions flags = 1207959552;
    CFStringGetCString(v6, buffer->name, 52, 0x8000100u);
    uint64_t result = 0;
    buffer->unit = v7;
    buffer->minCFNumberRef Value = v8;
    buffer->maxCFNumberRef Value = v9;
    buffer->defaultCFNumberRef Value = v10;
    buffer->flags |= v11;
  }
  return result;
}

BOOL AULinearEchoCancelerV3::BusCountWritable(AULinearEchoCancelerV3 *this, int a2)
{
  return (a2 - 1) < 2;
}

uint64_t AULinearEchoCancelerV3::Render(AULinearEchoCancelerV3 *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  if (*((_DWORD *)this + 84) != a4) {
    return 4294956422;
  }
  AudioUnitParameterValue v8 = (AULinearEchoCancelerV3 *)((char *)this + 80);
  uint64_t Element = ausdk::AUScope::SafeGetElement((AULinearEchoCancelerV3 *)((char *)this + 80), 0);
  uint64_t v10 = ausdk::AUScope::SafeGetElement((AULinearEchoCancelerV3 *)((char *)this + 128), 0);
  uint64_t v11 = ausdk::AUScope::GetElement(v8, 0);
  if (!v11 || !*(_DWORD *)(v11 + 172)) {
    return 4294956420;
  }
  uint64_t v12 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 0);
  uint64_t result = ausdk::AUInputElement::PullInput(v12, a2, a3, 0, a4);
  if (!result)
  {
    uint64_t BufferList = (AudioBufferList *)ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144));
    ausdk::AUBufferList::CopyBufferContentsTo((void *)(Element + 144), BufferList);
    return 0;
  }
  return result;
}

uint64_t AULinearEchoCancelerV3::ProcessMultipleBufferLists(AULinearEchoCancelerV3 *this, unsigned int *a2, int a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  uint64_t v540 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 84) != a3) {
    return 4294956422;
  }
  uint64_t v11 = this;
  int v12 = *((_DWORD *)this + 133);
  if (*((_DWORD *)this + 134) != v12)
  {
    AULinearEchoCancelerV3::InitializeEC(this);
    *((_DWORD *)v11 + 134) = v12;
  }
  uint64_t v13 = a5[1];
  mData = (float *)(*a5)->mBuffers[0].mData;
  unint64_t v15 = (lmsfilt_v3 *)v13->mBuffers[0].mData;
  char v16 = (float *)(*a7)->mBuffers[0].mData;
  if (a6 < 2)
  {
    uint64_t v17 = 0;
    goto LABEL_9;
  }
  uint64_t v17 = a7[1]->mBuffers[0].mData;
  if (a6 == 2)
  {
LABEL_9:
    uint64_t v18 = 0;
    goto LABEL_10;
  }
  uint64_t v18 = a7[2]->mBuffers[0].mData;
LABEL_10:
  unint64_t v20 = (AULinearEchoCancelerV3 *)((char *)v11 + 32);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AULinearEchoCancelerV3 *)((char *)v11 + 32), 0);
  float Parameter = ausdk::AUElement::GetParameter(Element, 2u);
  if (((*(uint64_t (**)(AULinearEchoCancelerV3 *))(*(void *)v11 + 576))(v11) & 1) == 0
    && *((void *)v11 + 86))
  {
    if (mData) {
      BOOL v23 = v15 == 0;
    }
    else {
      BOOL v23 = 1;
    }
    if (v23)
    {
      uint64_t v19 = 0xFFFFFFFFLL;
      float v24 = 0.0;
LABEL_372:
      uint64_t v427 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v20, 0);
      float v428 = ausdk::AUElement::GetParameter(v427, 0x23u);
      float v429 = *((float *)v11 + 170);
      if (v24 >= v429) {
        float v430 = v24;
      }
      else {
        float v430 = *((float *)v11 + 170);
      }
      if (v430 >= *((float *)v11 + 171)) {
        float v431 = v430;
      }
      else {
        float v431 = *((float *)v11 + 171);
      }
      *((float *)v11 + 171) = v429;
      *((float *)v11 + 170) = v24;
      int v432 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v20, 0);
      if (v431 <= v428) {
        float v433 = 0.0;
      }
      else {
        float v433 = 1.0;
      }
      ausdk::AUElement::SetParameter(v432, 0x24u, v433, 0);
      return v19;
    }
    float __src = v15;
    int v488 = v17;
    UInt32 v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AULinearEchoCancelerV3 *)((char *)v11 + 32), 0);
    int v29 = (int)ausdk::AUElement::GetParameter(v28, 4u);
    int v30 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AULinearEchoCancelerV3 *)((char *)v11 + 32), 0);
    *((float *)v11 + 140) = ausdk::AUElement::GetParameter(v30, 5u);
    uint64_t v31 = (void *)*((void *)v11 + 86);
    int v485 = v29;
    uint64_t v32 = v31[1];
    uint64_t v33 = v31[6];
    uint64_t v34 = v31[7];
    unint64_t v35 = (float *)v31[9];
    int v527 = (float *)v31[8];
    v509 = (void *)*((void *)v11 + 86);
    uint64_t v510 = v31[3];
    v525 = (const void **)v31[2];
    uint64_t v466 = (const void **)v31[4];
    v519 = *(float **)(v34 + 8);
    v520 = *(float **)v34;
    DSPSplitComplex v524 = *(DSPSplitComplex *)(v34 + 32);
    uint64_t v482 = *(DSPComplex **)(v34 + 48);
    float v498 = *(float **)(v34 + 56);
    v512 = *(DSPComplex **)(v34 + 64);
    vDSP_Length v36 = *(int *)(*v31 + 16);
    uint64_t v37 = *(unsigned int *)(*v31 + 28);
    signed int v530 = (int *)*v31;
    uint64_t v526 = *(int *)(*v31 + 36);
    *(_DWORD *)(v33 + 580) = 0;
    vDSP_Length __N = v36;
    float v38 = (float)(int)v36;
    float v39 = *(float *)(v33 + 544);
    if (v39 < 100.0 && (float)(*(float *)(v33 + 20) / v38) > 0.00000001)
    {
      float v39 = v39 + *((float *)v530 + 5);
      *(float *)(v33 + 544) = v39;
    }
    int v40 = v530[25];
    if (v40 >= 1)
    {
      if (v40 == 2)
      {
        BOOL v41 = 1;
        goto LABEL_30;
      }
      if (v40 == 1)
      {
        BOOL v41 = v39 < (float)(*(float *)(v33 + 528) + 2.0);
LABEL_30:
        BOOL v470 = v41;
        goto LABEL_31;
      }
    }
    BOOL v470 = 0;
LABEL_31:
    v518 = (float *)(v33 + 20);
    uint64_t v499 = v37;
    *(unsigned char *)uint64_t v33 = v29 == 0;
    *(_DWORD *)(v33 + 492) = *(_DWORD *)(v33 + 32);
    *(_DWORD *)(v33 + 532) = *(_DWORD *)(v33 + 384);
    float v469 = (void *)(v33 + 276);
    *(void *)(v33 + 508) = *(void *)(v33 + 500);
    *(_DWORD *)(v33 + 568) = 0;
    vDSP_Length v489 = (AULinearEchoCancelerV3 *)((char *)v11 + 32);
    float v490 = v11;
    v497 = v16;
    uint64_t v528 = v34;
    uint64_t v529 = v32;
    float v487 = v18;
    if (v530[24] || *(_DWORD *)(v33 + 140))
    {
      *(_DWORD *)(v33 + 348) = *(_DWORD *)(v33 + 4);
      vDSP_Length v42 = v36;
      int v43 = __src;
      memcpy(*(void **)(v34 + 96), __src, 4 * v36);
      unsigned int v45 = v530;
    }
    else
    {
      uint64_t v474 = v35;
      uint64_t v95 = *(void *)(v32 + 56);
      uint64_t v94 = *(void *)(v32 + 64);
      size_t v96 = (4 * v36);
      int v97 = v530[18];
      unsigned int v98 = v97 - v36;
      if (v97 != v36)
      {
        unsigned int v99 = 0;
        do
        {
          memcpy((void *)(v95 + 4 * v99), (const void *)(v95 + 4 * (__N + v99)), v96);
          memcpy((void *)(v94 + 4 * v99), (const void *)(v94 + 4 * (__N + v99)), v96);
          v99 += __N;
        }
        while (v99 < v98);
      }
      unint64_t v100 = (void *)(v95 + 4 * (int)v98);
      memcpy(v100, __src, v96);
      vDSP_vsq((const float *)v100, 1, (float *)(v94 + 4 * (int)v98), 1, __N);
      int v101 = *(float **)(v529 + 64);
      v522 = *(float **)(v529 + 56);
      uint64_t v102 = v530[4];
      LODWORD(v100) = v530[18];
      uint64_t v103 = *(char **)(v34 + 104);
      vDSP_Length v104 = *((int *)v474 + 4);
      int v467 = v530[4];
      uint64_t v105 = &v103[4 * v102];
      size_t v106 = 4 * (int)v102;
      memcpy(v103, v105, v106);
      size_t __n = v106;
      memcpy(v105, mData, v106);
      int v107 = v530[17];
      unint64_t v108 = *(const float **)(v34 + 104);
      __dst = *(void **)(v34 + 112);
      size_t v461 = *(void **)(v34 + 120);
      int v463 = (int)v100;
      int v109 = v100 - v104 - v107;
      LODWORD(__A.realp) = 0;
      LODWORD(__Z.realp) = 0;
      float v110 = (float)((float)((int)v100 - (int)v104) / 3.0) + (float)((float)((int)v100 - (int)v104) / 3.0);
      LODWORD(__C.realp) = 0;
      if (v109 >= (int)v110) {
        uint64_t v111 = (v109 - (int)v110 + 1) & ~((v109 - (int)v110 + 1) >> 31);
      }
      else {
        uint64_t v111 = 0;
      }
      uint64_t v478 = v101;
      vDSP_sve(&v101[v111], 1, (float *)&__Z, v104);
      float __B = (float *)v108;
      vDSP_dotpr(v108, 1, v108, 1, (float *)&__A, v104);
      float v112 = *(float *)&__Z.realp;
      uint64_t v501 = (v109 + 2);
      if ((int)v111 >= (int)v501)
      {
        int v118 = v111;
        vDSP_Length v116 = v104;
      }
      else
      {
        int v113 = v111 + v104 - v107;
        int v114 = v111 - v107;
        float v115 = 0.0;
        vDSP_Length v116 = v104;
        uint64_t v117 = v111;
        int v118 = v111;
        do
        {
          vDSP_Length v119 = v116;
          vDSP_dotpr(&v522[v117], 1, __B, 1, (float *)&__C, v116);
          if (v117 <= v111)
          {
            float v120 = *(float *)&__Z.realp;
            vDSP_Length v116 = v119;
          }
          else
          {
            float v120 = *(float *)&__Z.realp;
            vDSP_Length v116 = v119;
            if (v117 >= v107 && v107 >= 1)
            {
              uint64_t v121 = &v478[v114];
              int v122 = v107;
              uint64_t v123 = &v478[v113];
              do
              {
                float v124 = *v121++;
                float v125 = v120 - v124;
                float v126 = *v123++;
                float v120 = v125 + v126;
                --v122;
              }
              while (v122);
              *(float *)&__Z.realp = v120;
            }
          }
          float v127 = *(float *)&__C.realp / (sqrtf(v120 * *(float *)&__A.realp) + 2.2204e-16);
          float v128 = fabsf(v127);
          if (v128 > v115)
          {
            float v112 = v120;
            float v115 = v128;
            int v118 = v117;
          }
          v117 += v107;
          v113 += v107;
          v114 += v107;
        }
        while (v117 < v501);
      }
      int v502 = v463 - v467;
      size_t v129 = 4 * v116;
      memcpy(__dst, &v522[v118], 4 * v116);
      memcpy(v461, __B, v129);
      *(float *)(v33 + 348) = v112;
      *(_DWORD *)(v33 + 352) = v118;
      DSPSplitComplex v130 = *(DSPSplitComplex *)(v528 + 128);
      DSPSplitComplex __Z = *(DSPSplitComplex *)(v528 + 144);
      DSPSplitComplex __A = v130;
      uint64_t v131 = *(const float **)(v528 + 224);
      vDSP_Length v132 = *((int *)v474 + 4);
      uint64_t v133 = *(DSPComplex **)(v528 + 112);
      uint64_t v134 = *(DSPComplex **)(v528 + 120);
      int v135 = *(float **)(v528 + 160);
      uint64_t v479 = *(float **)(v528 + 168);
      DSPSplitComplex v136 = *(DSPSplitComplex *)(v528 + 176);
      uint64_t v137 = *(float **)(v528 + 200);
      float v468 = *(float **)(v528 + 192);
      DSPSplitComplex v536 = *(DSPSplitComplex *)(v528 + 208);
      DSPSplitComplex __C = v136;
      int __Ba = *(_DWORD *)(v33 + 324);
      int v138 = *(_DWORD *)(v33 + 328);
      vDSP_vmul((const float *)v133, 1, v131, 1, (float *)v133, 1, v132);
      dft_v3::dftGenericAnalysis2ndHalf(v133, __A.realp, __A.imagp, (uint64_t)v474, 0);
      vDSP_vmul((const float *)v134, 1, v131, 1, (float *)v134, 1, v132);
      dft_v3::dftGenericAnalysis2ndHalf(v134, __Z.realp, __Z.imagp, (uint64_t)v474, 0);
      vDSP_zvmags(&__A, 1, v135, 1, v138);
      vDSP_zvmags(&__Z, 1, v479, 1, v138);
      vDSP_zvcmul(&__Z, 1, &__A, 1, &__C, 1, v138);
      float v535 = *(float *)(v33 + 344);
      float v534 = 1.0 - v535;
      vDSP_vsmul(v135, 1, &v534, v135, 1, v138);
      vDSP_vsma(v468, 1, &v535, v135, 1, v468, 1, v138);
      vDSP_vsmul(v479, 1, &v534, v479, 1, v138);
      vDSP_vsma(v137, 1, &v535, v479, 1, v137, 1, v138);
      vDSP_vsmul(__C.realp, 1, &v534, __C.realp, 1, v138);
      vDSP_vsmul(__C.imagp, 1, &v534, __C.imagp, 1, v138);
      vDSP_vsmul(v536.realp, 1, &v535, v536.realp, 1, v138);
      vDSP_vsmul(v536.imagp, 1, &v535, v536.imagp, 1, v138);
      vDSP_zvadd(&v536, 1, &__C, 1, &v536, 1, v138);
      vDSP_zvabs(&v536, 1, v479, 1, v138);
      float v139 = 0.0;
      int v140 = v138 - __Ba;
      if (v138 >= __Ba)
      {
        int v141 = v140 + 1;
        unint64_t v142 = &v468[__Ba - 1];
        unint64_t v143 = &v137[__Ba - 1];
        uint64_t v144 = &v479[__Ba - 1];
        do
        {
          float v145 = *v144++;
          double v146 = v145;
          float v147 = *v143++;
          float v148 = v147;
          float v149 = *v142++;
          float v139 = v146 / (sqrtf(v148 * v149) + 1.0e-20) + v139;
          --v141;
        }
        while (v141);
      }
      *(float *)(v33 + 304) = v139 / (float)(v140 + 1);
      int v150 = *(_DWORD *)(v33 + 352);
      if (v150 >= v502) {
        int v150 = v502;
      }
      uint64_t v34 = v528;
      memcpy(*(void **)(v528 + 96), &v522[v150], __n);
      uint64_t v32 = v529;
      unsigned int v45 = v530;
      vDSP_Length v42 = __N;
      int v43 = __src;
    }
    int v46 = *(_DWORD *)(v32 + 80);
    uint64_t v47 = *(void *)(v32 + 32);
    uint64_t v48 = *(void *)(v34 + 72);
    BOOL v49 = v46 == 0;
    if (v46) {
      vDSP_Length v50 = v47 + 4 * v42;
    }
    else {
      vDSP_Length v50 = *(void *)(v32 + 32);
    }
    if (v49)
    {
      v47 += 4 * v42;
      vDSP_Length v51 = *(void *)(v34 + 72);
    }
    else
    {
      vDSP_Length v51 = v48 + 4 * v42;
    }
    if (v49) {
      v48 += 4 * v42;
    }
    *(void *)(v32 + 40) = v50;
    *(void *)(v32 + 48) = v47;
    *(void *)(v34 + 80) = v51;
    *(void *)(v34 + 88) = v48;
    lmsfilt_v3::preemphasisFilter(v43, (const float *)v45[4], v527, *(float **)(v32 + 40), v44);
    lmsfilt_v3::preemphasisFilter((lmsfilt_v3 *)mData, (const float *)v45[4], v527 + 1, *(float **)(v34 + 80), v52);
    uint64_t v53 = (int *)*(unsigned int *)(v32 + 72);
    *(_DWORD *)(v32 + 76) = v53;
    dft_v3::GetIndexSequence(*(signed int **)(v32 + 88), v53, v45[11], v45[12]);
    uint64_t v54 = *(const DSPComplex **)(v529 + 40);
    uint64_t v55 = *(float **)(v33 + 48);
    vDSP_Length v56 = v530[9];
    vDSP_Length v57 = v530[4];
    int v521 = *(_DWORD *)(v529 + 76);
    unint64_t v58 = (float *)(*(void *)(v529 + 16) + 4 * v521 * (int)v57);
    float v59 = (float *)(*(void *)(v529 + 24) + 4 * v521 * (int)v57);
    size_t v60 = 4 * v56;
    memcpy(v58, *(const void **)v529, 4 * (int)v56);
    memcpy(v59, *(const void **)(v529 + 8), 4 * (int)v56);
    uint64_t v61 = &v58[v56];
    uint64_t v62 = &v59[v56];
    __Z.realp = v61;
    __Z.imagp = v62;
    uint64_t v63 = v54;
    vDSP_Length v64 = v56;
    uint64_t v65 = v529;
    uint64_t v66 = (uint64_t)v530;
    vDSP_ctoz(v63, 2, &__Z, 1, v64);
    memcpy(*(void **)v529, v61, v60);
    memcpy(*(void **)(v529 + 8), v62, v60);
    __Z.realp = v58;
    __Z.imagp = v59;
    uint64_t v68 = (MultiRadixRealFFT *)*((void *)v530 + 1);
    if (v68) {
      MultiRadixRealFFT::RealInPlaceTransform(v68, &__Z, 1, v67);
    }
    vDSP_vsmul(v58, 1, (const float *)v530 + 21, v58, 1, (uint64_t)*v530 >> 1);
    vDSP_vsmul(v59, 1, (const float *)v530 + 21, v59, 1, (uint64_t)*v530 >> 1);
    __A.realp = v58;
    __A.imagp = v59;
    vDSP_zvmags(&__A, 1, v55, 1, v57);
    *uint64_t v55 = *v58 * *v58;
    v55[v57] = *v59 * *v59;
    int v69 = v530[11];
    vDSP_Length v70 = v530[10];
    uint64_t v71 = *(void *)(v529 + 96);
    char v72 = (float *)(v71 + 4 * (int)v70 * v521);
    *char v72 = *v55 + 0.000000009;
    v72[(int)v70 - 1] = v55[(int)v70 - 1] + 0.000000009;
    unsigned __int8 v73 = v525;
    if ((int)v70 >= 3)
    {
      unsigned int v74 = v55 + 2;
      vDSP_Length v75 = (float *)(v71 + 4 * (int)v70 * v521 + 4);
      int v76 = v70 - 2;
      do
      {
        float v77 = *(v74 - 1) + *(v74 - 2);
        float v78 = *v74++;
        *v75++ = (float)((float)(v77 + v78) * 0.33333) + 0.000000009;
        --v76;
      }
      while (v76);
    }
    uint64_t v79 = v528;
    if (v69 == 1)
    {
      **(_DWORD **)(v529 + 104) = 1065353216;
    }
    else
    {
      LODWORD(__A.realp) = 0;
      vDSP_sve(v72, 1, (float *)&__A, v70);
      float v80 = log10f(*(float *)&__A.realp) * 10.0;
      *(float *)&__A.realp = v80;
      uint64_t v81 = *(void *)(v529 + 104);
      if (v69 >= 2)
      {
        memmove(*(void **)(v529 + 104), (const void *)(v81 + 4), 4 * (v69 - 1));
        float v80 = *(float *)&__A.realp;
      }
      *(float *)(v81 + 4 * (v69 - 1)) = v80;
    }
    uint64_t v82 = v510;
    if (*((_DWORD *)v525 + 17) != 1)
    {
LABEL_124:
      LODWORD(v452) = *((_DWORD *)v73 + 19);
      lmsfilt_v3::runLmsFilter_v3((DSPSplitComplex *)(v528 + 16), (DSPSplitComplex *)*(unsigned int *)(v66 + 16), (uint64_t)v73[2], (uint64_t)v73[3], *(void *)(v65 + 16), *(float **)(v65 + 24), *(float **)(v65 + 88), (float *)*((unsigned int *)v73 + 18), v452, v455, (int)__dst, SHIDWORD(__dst));
      dft_v3::dftSynthesis(*(float **)(v79 + 16), *(float **)(v79 + 24), v66);
      aec_v5::get_EchoEst_Err(v482, (float *)v512, (float *)(*(void *)(v79 + 16) + 4 * v526), (float *)(*(void *)(v79 + 24) + 4 * v526), *(const float **)(v79 + 80), v66);
      uint64_t v159 = *(const float **)(v79 + 80);
      vDSP_Length v160 = *(int *)(v66 + 16);
      vDSP_svesq(*(const float **)(v65 + 40), 1, (float *)(v33 + 4), v160);
      vDSP_svesq(v159, 1, v518, v160);
      float v462 = *(float *)(v33 + 20);
      LODWORD(v159) = *(_DWORD *)(v66 + 16);
      float v161 = log10((float)(*(float *)(v33 + 4) / (float)(int)v159) + 1.0e-20) * 10.0;
      *(float *)(v33 + 8) = v161;
      learnrate_v3::updateStatistics_echo((int)v159, (const float *)v512, (const float *)v482, (float *)v33);
      float v162 = *(float *)(v33 + 16);
      float v163 = (v162 + 1.0e-13) / (*(float *)(v33 + 28) + 1.0e-13);
      float v164 = log10f(v163);
      int v165 = 0;
      *(float *)(v33 + 580) = v164 * 10.0;
      vDSP_Length v166 = *(float **)(v79 + 64);
      vDSP_Length v167 = *(DSPComplex **)(v79 + 232);
      int v168 = *(float **)(v79 + 240);
      float v503 = (DSPSplitComplex *)(v79 + 248);
      float __Bb = *(float **)(v79 + 48);
      float v170 = *(float *)(v33 + 252);
      float v169 = *(float *)(v33 + 256);
      int v171 = *(_DWORD *)(v33 + 260);
      int v172 = *(_DWORD *)(v33 + 264);
      float v173 = *(float *)(v33 + 268);
      uint64_t v174 = *(int *)(v66 + 36);
      float v175 = *(float *)(v66 + 32);
      *(_DWORD *)(v82 + 60) = 0;
      unsigned int v176 = *(_DWORD *)(v33 + 224);
      if (v176 <= 1)
      {
        if (v176 != 1) {
          goto LABEL_128;
        }
        int v165 = 2;
      }
      *(_DWORD *)(v33 + 224) = v165;
LABEL_128:
      float v177 = v175 * v162;
      if (*(_DWORD *)(v82 + 56) == 1)
      {
        *(void *)(v82 + 56) = 0x100000000;
        **(_DWORD **)(v33 + 184) = 1;
        float v178 = 0.0;
        goto LABEL_180;
      }
      HIDWORD(v456) = v171;
      uint64_t v475 = v166;
      float v480 = v177;
      float v483 = v173;
      float v464 = v38;
      LODWORD(v453) = *(_DWORD *)(v82 + 76);
      lmsfilt_v3::runLmsFilter_v3(v503, (DSPSplitComplex *)*(unsigned int *)(v66 + 16), *(void *)(v82 + 16), *(void *)(v82 + 24), *(void *)(v65 + 16), *(float **)(v65 + 24), *(float **)(v65 + 88), (float *)*(unsigned int *)(v82 + 72), v453, v456, v172, SHIDWORD(__dsta));
      dft_v3::dftSynthesis(*(float **)(v79 + 248), *(float **)(v79 + 256), v66);
      aec_v5::get_EchoEst_Err(v167, v168, (float *)(*(void *)(v79 + 248) + 4 * v174), (float *)(*(void *)(v79 + 256) + 4 * v174), *(const float **)(v79 + 80), v66);
      vDSP_svesq(v168, 1, (float *)(v33 + 208), *(int *)(v66 + 16));
      float v179 = *(float *)(v33 + 208);
      *(float *)(v33 + 212) = v179;
      float v180 = (float)((float)*(int *)v66 * 100.0) * 9.3132e-10;
      if (v179 < v180) {
        *(float *)(v33 + 208) = v179 + v180;
      }
      LODWORD(__A.realp) = 0;
      vDSP_svesq((const float *)v167, 1, (float *)&__A, *(int *)(v66 + 16));
      double v181 = *(float *)(v33 + 212) + 1.0e-13;
      float v182 = (*(float *)&__A.realp + 1.0e-13) / v181;
      float __na = log10f(v182);
      double v183 = *(float *)(v33 + 28) + 1.0e-13;
      double v184 = *(float *)(v33 + 20) + 0.000000001;
      double v185 = v170;
      float v186 = v183 / v184 + v170;
      float v187 = log10f(v186) * 10.0;
      float v188 = v181 / v184 + v185;
      float v189 = log10f(v188) * 10.0;
      float v190 = v183 / (*(float *)(v33 + 16) + 0.000000001) + v185;
      float v191 = log10f(v190) * 10.0;
      int v192 = *(_DWORD *)(v33 + 228);
      unsigned int v194 = *(float **)(v33 + 152);
      int v193 = *(float **)(v33 + 160);
      DSPSplitComplex v196 = *(float **)(v33 + 168);
      unsigned int v195 = *(BOOL **)(v33 + 176);
      int64x2_t v197 = *(int **)(v33 + 184);
      int64x2_t v198 = *(_DWORD **)(v33 + 192);
      unsigned int v199 = v192 - 1;
      if (v192 != 1)
      {
        uint64_t v200 = 0;
        uint64_t v201 = *(void *)(v33 + 200);
        uint64_t v202 = v201 + 4 * v199;
        int v203 = v192 - 2;
        unsigned int v204 = v199 - 1;
        int64x2_t v205 = &v198[v199];
        int64x2_t v206 = &v197[v199];
        unsigned int v207 = &v195[v199];
        DSPSplitComplex v208 = &v196[v199];
        int64x2_t v209 = &v193[v199];
        uint64_t v210 = &v194[v199];
        do
        {
          v210[v200] = v194[(v203 + v200)];
          v209[v200] = v193[(v203 + v200)];
          v208[v200] = v196[(v203 + v200)];
          v207[v200] = v195[(v203 + v200)];
          v206[v200] = v197[(v203 + v200)];
          v205[v200] = v198[(v203 + v200)];
          *(_DWORD *)(v202 + 4 * v200) = *(_DWORD *)(v201 + 4 * (v203 + v200));
        }
        while (v204 + v200--);
      }
      float *v194 = v187 - v189;
      *int v193 = v187;
      float *v196 = v191;
      float v212 = *v194;
      BOOL v213 = (float)(v169 + *v194) < 0.0;
      float v173 = v483;
      float v177 = v480;
      if (v480 < v483) {
        BOOL v213 = 1;
      }
      *unsigned int v195 = v213;
      int *v197 = v212 < *((float *)&v456 + 1);
      _DWORD *v198 = *(float *)(v33 + 28) > *(float *)(v33 + 212);
      if (v191 >= *(float *)&__dsta || *(float *)(v33 + 8) >= -9.0)
      {
        DSPSplitComplex v214 = *(int **)(v33 + 200);
        *DSPSplitComplex v214 = 0;
      }
      else
      {
        DSPSplitComplex v214 = *(int **)(v33 + 200);
        *DSPSplitComplex v214 = 1;
      }
      float v38 = v464;
      int v215 = *(_DWORD *)(v33 + 244);
      if (v215 > *(_DWORD *)(v33 + 228)) {
        goto LABEL_151;
      }
      if (v215 < 1) {
        goto LABEL_147;
      }
      int v216 = 0;
      uint64_t v217 = *(unsigned int *)(v33 + 244);
      do
      {
        int v218 = *v195++;
        v216 += v218;
        --v217;
      }
      while (v217);
      if (v216)
      {
        unsigned int v219 = *(_DWORD *)(v33 + 220);
      }
      else
      {
LABEL_147:
        unsigned int v219 = *(_DWORD *)(v33 + 220);
        if (v219 > 1)
        {
LABEL_149:
          if (*(unsigned char *)v33)
          {
            uint64_t v82 = v510;
            size_t v220 = 4 * *((_DWORD *)v73 + 9);
            memcpy((void *)*v73, *(const void **)v510, v220);
            memcpy((void *)v73[1], *(const void **)(v510 + 8), v220);
            memcpy((void *)v73[2], *(const void **)(v510 + 16), v220);
            memcpy((void *)v73[3], *(const void **)(v510 + 24), v220);
            memcpy((void *)v73[6], *(const void **)(v510 + 48), v220);
            v73[9] = *(const void **)(v510 + 72);
            *(_DWORD *)(v33 + 224) = 1;
            float __Bb = *(float **)(v79 + 232);
            DSPSplitComplex v221 = v168;
            DSPSplitComplex v222 = *(float **)(v79 + 240);
            size_t v223 = 4 * *(_DWORD *)(v66 + 16);
            memcpy(v475, v221, v223);
            memcpy(*(void **)(v79 + 16), *(const void **)(v79 + 248), v223);
            memcpy(*(void **)(v79 + 24), *(const void **)(v79 + 256), v223);
            *(void *)(v33 + 80) = *v469;
            size_t v224 = 4 * *(_DWORD *)(v66 + 40);
            memcpy(*(void **)(v33 + 64), *(const void **)(v33 + 288), v224);
            memcpy(*(void **)(v33 + 72), *(const void **)(v33 + 296), v224);
            **(_DWORD **)(v33 + 176) = 1;
            *(_DWORD *)(v33 + 220) = 0;
            vDSP_Length v166 = v222;
            int v168 = v221;
LABEL_179:
            float v178 = __na * 10.0;
LABEL_180:
            int v243 = *(_DWORD *)(v82 + 60);
            if (v243 == 1)
            {
              *(_DWORD *)(v33 + 216) = 0;
              uint64_t v244 = v166;
              size_t v245 = 4 * *(_DWORD *)(v82 + 36);
              memcpy(*(void **)v82, *v73, v245);
              memcpy(*(void **)(v82 + 8), v73[1], v245);
              memcpy(*(void **)(v82 + 16), v73[2], v245);
              memcpy(*(void **)(v82 + 24), v73[3], v245);
              memcpy(*(void **)(v82 + 48), v73[6], v245);
              *(void *)(v82 + 72) = v73[9];
              *float v469 = *(void *)(v33 + 80);
              size_t v246 = 4 * *(_DWORD *)(v66 + 40);
              memcpy(*(void **)(v33 + 288), *(const void **)(v33 + 64), v246);
              memcpy(*(void **)(v33 + 296), *(const void **)(v33 + 72), v246);
              vDSP_Length v166 = v244;
              **(_DWORD **)(v33 + 176) = 0;
              **(_DWORD **)(v33 + 184) = 0;
              **(_DWORD **)(v33 + 192) = 0;
              **(_DWORD **)(v33 + 200) = 0;
              int v247 = *(_DWORD *)(v33 + 600);
              if (v247 <= 3) {
                *(_DWORD *)(v33 + 600) = v247 + 1;
              }
            }
            else
            {
              if (!*(unsigned char *)v33) {
                goto LABEL_186;
              }
              *(float *)(v33 + 216) = *(float *)(v33 + 216) + 1.0;
            }
            int v243 = *(_DWORD *)(v82 + 60);
LABEL_186:
            if (!v243)
            {
              int v248 = *(_DWORD *)(v33 + 232);
              if (v248 < 1)
              {
                int v249 = 0;
              }
              else
              {
                int v249 = 0;
                uint64_t v250 = *(int **)(v33 + 192);
                uint64_t v251 = *(unsigned int *)(v33 + 232);
                do
                {
                  int v252 = *v250++;
                  v249 += v252;
                  --v251;
                }
                while (v251);
              }
              if (v249 == v248)
              {
                *(_DWORD *)(v33 + 28) = *(_DWORD *)(v33 + 212);
                if (v177 >= v173 && *(unsigned char *)v33) {
                  ++*(_DWORD *)(v33 + 220);
                }
                v523 = (float *)v167;
                *(_DWORD *)(v33 + 224) = 1;
                *(float *)(v33 + 580) = v178;
LABEL_199:
                v511 = v168;
                __Bc = (float *)(v33 + 384);
                dft_v3::dftGenericAnalysis2ndHalf(v512, v524.realp, v524.imagp, v66, 1);
                dft_v3::dftGenericAnalysis2ndHalf_dsc((const void *)(*(void *)(v79 + 16) + 4 * v526), (const void *)(*(void *)(v79 + 24) + 4 * v526), v520, v519, (int *)v66);
                v513 = (DSPComplex *)v509[10];
                float v254 = *(DSPComplex **)(v79 + 328);
                int v253 = *(DSPComplex **)(v79 + 336);
                uint64_t v255 = *(DSPComplex **)(v79 + 344);
                uint64_t v256 = *(int *)(v66 + 16);
                int v257 = *(_DWORD *)(v33 + 400) - v256;
                DSPSplitComplex v258 = *(DSPSplitComplex *)(v79 + 280);
                DSPSplitComplex __C = *(DSPSplitComplex *)(v79 + 296);
                DSPSplitComplex __Z = v258;
                DSPSplitComplex v536 = *(DSPSplitComplex *)(v79 + 312);
                __srca = (void *)*(int *)(v33 + 408);
                int v484 = *(_DWORD *)(v33 + 412);
                vDSP_Length v259 = *(int *)(v33 + 420);
                float v260 = *(float **)(v33 + 472);
                float __nb = *(float **)(v33 + 456);
                int v476 = *(float **)(v33 + 480);
                v481 = *(float **)(v33 + 464);
                float v535 = *(float *)(v33 + 392);
                float v534 = 1.0 - v535;
                if (v257 >= 1)
                {
                  memmove(v254, (char *)v254 + 4 * v256, 4 * v257);
                  memmove(v253, (char *)v253 + 4 * v256, 4 * v257);
                  memmove(v255, (char *)v255 + 4 * v256, 4 * v257);
                }
                memcpy((char *)v254 + 4 * v257, *(const void **)(v528 + 80), 4 * v256);
                memcpy((char *)v253 + 4 * v257, *(const void **)(v528 + 48), 4 * v256);
                memcpy((char *)v255 + 4 * v257, *(const void **)(v528 + 64), 4 * v256);
                dft_v3::dftGenericAnalysis2ndHalf(v254, __Z.realp, __Z.imagp, (uint64_t)v513, 0);
                dft_v3::dftGenericAnalysis2ndHalf(v253, __C.realp, __C.imagp, (uint64_t)v513, 0);
                realp = v536.realp;
                imagp = v536.imagp;
                vDSP_zvmags(&__Z, 1, v260, 1, v259);
                vDSP_vsmul(v260, 1, &v534, realp, 1, v259);
                vDSP_vsmul(v476, 1, &v535, imagp, 1, v259);
                vDSP_vadd(realp, 1, imagp, 1, v476, 1, v259);
                vDSP_zvcmul(&__Z, 1, &__C, 1, &v536, 1, v259);
                vDSP_zvabs(&v536, 1, __nb, 1, v259);
                vDSP_vsmul(__nb, 1, &v534, realp, 1, v259);
                vDSP_vsmul(v481, 1, &v535, imagp, 1, v259);
                vDSP_vadd(realp, 1, imagp, 1, v481, 1, v259);
                float v533 = 2.2204e-16;
                vDSP_vsadd(v476, 1, &v533, realp, 1, v259);
                vDSP_vdiv(realp, 1, v481, 1, imagp, 1, v259);
                vDSP_meanv(&imagp[(void)__srca], 1, __Bc, v484 - (int)__srca + 1);
                *(float *)(v33 + 384) = fmaxf(fminf(*(float *)(v33 + 384), 1.0), 0.0);
                dft_v3::dftGenericAnalysis2ndHalf(v255, v536.realp, v536.imagp, (uint64_t)v513, 0);
                long long v263 = v536.realp;
                float v264 = v536.imagp;
                int v266 = __C.realp;
                int v265 = __C.imagp;
                int v267 = *(float **)(v33 + 424);
                int v268 = *(float **)(v33 + 432);
                float v269 = *(float **)(v33 + 448);
                __srcb = *(float **)(v33 + 440);
                float v532 = 0.0;
                float v531 = 0.0;
                float v270 = *(float *)(v33 + 388);
                float v271 = *(float *)(v33 + 396);
                vDSP_Length v272 = *(int *)(v33 + 400);
                int v273 = *(_DWORD *)(v33 + 404);
                unsigned int v514 = *(_DWORD *)(v33 + 416);
                DSPSplitComplex __A = v536;
                vDSP_zvmags(&__A, 1, v268, 1, v272);
                *int v268 = *v263 * *v263;
                v268[v272] = *v264 * *v264;
                __A.realp = v266;
                __A.imagp = v265;
                vDSP_zvmags(&__A, 1, v267, 1, v272);
                *int v267 = *v266 * *v266;
                v267[v272] = *v265 * *v265;
                learnrate_v3::crossCorrSpec_raw((learnrate_v3 *)v268, v269, v267, __srcb, &v532, &v531, (float *)((v273 >> 1) + 1));
                float v274 = sqrtf(v531);
                float v275 = (float)(v532 / v274) / (float)(v274 + v533);
                if (v275 <= 0.001) {
                  float v275 = 0.001;
                }
                *(float *)(v33 + 376) = v275;
                *(float *)(v33 + 380) = (float)((float)(1.0 - v270) * v275) + (float)(v270 * *(float *)(v33 + 380));
                VPEchoGateV3::GatesmoothPowerSpectrum((VPEchoGateV3 *)v269, v268, (const float *)v514, v271);
                VPEchoGateV3::GatesmoothPowerSpectrum((VPEchoGateV3 *)__srcb, v267, (const float *)v514, v271);
                uint64_t v11 = v490;
                *((_DWORD *)v490 + 190) = *(_DWORD *)(v33 + 384);
                int v276 = *v530;
                float v278 = *(_DWORD **)(v529 + 88);
                uint64_t v277 = *(void *)(v529 + 96);
                LODWORD(__Z.realp) = 0;
                LODWORD(__C.realp) = 0;
                vDSP_Length v279 = v530[4];
                vDSP_Length v280 = (const float *)v530[10];
                uint64_t v281 = *(float **)(v33 + 40);
                DSPSplitComplex __A = v524;
                vDSP_zvmags(&__A, 1, v281, 1, v279);
                *uint64_t v281 = *v524.realp * *v524.realp;
                v281[v279] = *v524.imagp * *v524.imagp;
                uint64_t v282 = *(float **)(v33 + 56);
                __A.realp = v520;
                __A.imagp = v519;
                vDSP_zvmags(&__A, 1, v282, 1, v279);
                *uint64_t v282 = *v520 * *v520;
                v282[v279] = *v519 * *v519;
                learnrate_v3::crossCorrSpec_raw(*(learnrate_v3 **)(v33 + 40), *(const float **)(v33 + 64), *(const float **)(v33 + 56), *(const float **)(v33 + 72), (const float *)&__Z, (float *)&__C, (float *)((v276 >> 1) + 1));
                float v283 = sqrtf(*(float *)&__C.realp);
                float v284 = *(float *)(v33 + 16);
                float v285 = *(float *)(v33 + 128);
                float v286 = *(float *)(v33 + 124) * v284;
                float v287 = *(float *)(v33 + 24);
                if (v286 > (float)(v285 * v287)) {
                  float v286 = v285 * v287;
                }
                float v288 = v286 / v287;
                if (v287 >= 9.3132e-19) {
                  float v285 = v288;
                }
                float v289 = (float)((float)(*(float *)&__Z.realp / v283) * v285)
                     + (float)((float)(1.0 - v285) * *(float *)(v33 + 80));
                float v290 = (float)(v283 * v285) + (float)((float)(1.0 - v285) * *(float *)(v33 + 84));
                if (v290 < 9.3132e-10) {
                  float v290 = 9.3132e-10;
                }
                if (v289 >= (float)(v290 * 0.005)) {
                  float v291 = v289;
                }
                else {
                  float v291 = v290 * 0.005;
                }
                if (v291 <= v290) {
                  float v292 = v291;
                }
                else {
                  float v292 = v290;
                }
                *(float *)(v33 + 80) = v289;
                *(float *)(v33 + 84) = v290;
                if (v289 < (float)(v290 * 0.005) || v291 > v290) {
                  *(float *)(v33 + 80) = v292;
                }
                float v294 = v292 / v290;
                float v295 = (float)((float)(v284 * (float)(v294 * 3.0)) + (float)(*(float *)(v33 + 4) * 0.0001)) / v287;
                float v296 = (float)(*(float *)(v33 + 12) * *(float *)(v33 + 12)) / (float)((float)(v287 * v284) + 8.6736e-19);
                if (v295 >= v296) {
                  float v296 = v295;
                }
                if (v296 > 0.5) {
                  float v296 = 0.5;
                }
                *(float *)(v33 + 132) = v294;
                *(float *)(v33 + 136) = v296;
                int v297 = *(_DWORD *)(v33 + 140);
                float v298 = v497;
                if (v297)
                {
                  float v299 = (float *)v530;
                  if (v297 == 1
                    && *(float *)(v33 + 380) < *(float *)(v33 + 368)
                    && *(float *)(v33 + 384) < *(float *)(v33 + 372))
                  {
                    *(_DWORD *)(v33 + 136) = 0;
                  }
                  int v300 = v530[11];
                }
                else
                {
                  float v299 = (float *)v530;
                  int v300 = v530[11];
                  if (*(float *)(v33 + 144) > (float)v300 && v294 > *(float *)(v33 + 364)) {
                    *(_DWORD *)(v33 + 140) = 1;
                  }
                }
                learnrate_v3::getAdaptationRate3_v6(v33, (const float *)(v277 + 4 * *v278 * (int)v280), v300, (int)v280, 0, *((_DWORD *)v299 + 24));
                VPEchoGateV3::GatesmoothPowerSpectrum(*(VPEchoGateV3 **)(v33 + 64), *(const float **)(v33 + 40), v280, *(float *)(v33 + 120));
                VPEchoGateV3::GatesmoothPowerSpectrum(*(VPEchoGateV3 **)(v33 + 72), *(const float **)(v33 + 56), v280, *(float *)(v33 + 120));
                if (v485)
                {
                  float v301 = *(float *)(v33 + 28);
                  if (v470)
                  {
                    long long v302 = v497;
                    BOOL __Bd = 0;
                    BOOL v303 = 0;
                    __srcc = v466;
                    unint64_t v304 = v525;
                    uint64_t v305 = v529;
                    uint64_t v306 = (uint64_t)v530;
                    goto LABEL_314;
                  }
                  unint64_t v20 = v489;
                  uint64_t v310 = v487;
                  uint64_t v311 = v529;
                  goto LABEL_327;
                }
                unsigned int v307 = *(float **)(v33 + 96);
                uint64_t v308 = *((unsigned int *)v299 + 11);
                if (*((_DWORD *)v299 + 24))
                {
                  float v309 = -0.1;
                }
                else if (*(_DWORD *)(v33 + 140))
                {
                  float v309 = flt_1BB878F48[*(float *)(v33 + 380) > 2.6];
                }
                else
                {
                  float v309 = 0.65;
                }
                float v312 = v299[6];
                if (v308 == 1)
                {
                  *unsigned int v307 = 1.0;
                  *((float *)v490 + 167) = v312 * 0.5;
LABEL_294:
                  uint64_t v364 = *((unsigned int *)v299 + 11);
                  if (v364 != 1)
                  {
                    uint64_t v365 = *(float **)(v33 + 88);
                    int v366 = v299;
                    vDSP_Length v367 = *((int *)v299 + 10);
                    uint64_t v368 = *((unsigned int *)v299 + 10);
                    DSPSplitComplex v369 = (const float *)(*(void *)(v529 + 96) + 4 * **(_DWORD **)(v529 + 88) * (int)v368);
                    if ((int)v364 <= 1)
                    {
                      if ((int)v368 >= 1)
                      {
                        do
                        {
                          float v372 = *v369++;
                          *v365++ = 1.0 / v372;
                          --v368;
                        }
                        while (v368);
                      }
                    }
                    else
                    {
                      LODWORD(__A.realp) = **(_DWORD **)(v33 + 96);
                      vDSP_vsmul(v369, 1, (const float *)&__A, v365, 1, v367);
                      uint64_t v370 = 4 * v364;
                      uint64_t v371 = 4;
                      do
                      {
                        LODWORD(__A.realp) = *(_DWORD *)(*(void *)(v33 + 96) + v371);
                        if (*(float *)&__A.realp != 0.0) {
                          vDSP_vsma((const float *)(*(void *)(v529 + 96)+ 4 * *(_DWORD *)(*(void *)(v529 + 88) + v371) * (int)v367), 1, (const float *)&__A, v365, 1, v365, 1, v367);
                        }
                        v371 += 4;
                      }
                      while (v370 != v371);
                      if ((int)v368 >= 1)
                      {
                        do
                        {
                          *uint64_t v365 = 1.0 / *v365;
                          ++v365;
                          --v368;
                        }
                        while (v368);
                      }
                    }
                    float v299 = v366;
                  }
                  BOOL v303 = *(float *)(v33 + 544) < *(float *)(v33 + 528) || *(_DWORD *)(v33 + 140) == 0;
                  BOOL v373 = *(float *)(v33 + 380) > 0.15 && *__Bc > 0.65;
                  if (v470 && (v303 || v373))
                  {
                    BOOL __Bd = v373;
                    long long v302 = v298;
                    unint64_t v304 = v466;
                    v509[2] = v466;
                    v509[4] = v525;
                    uint64_t v306 = (uint64_t)v299;
                    uint64_t v305 = v529;
                    learnrate_v3::adaptLmsFilter_v3((uint64_t)v524.realp);
                    float v301 = *(float *)(v33 + 28);
                    __srcc = v525;
LABEL_314:
                    uint64_t v374 = v528;
                    uint64_t v376 = *(DSPComplex **)(v528 + 264);
                    v375 = *(DSPComplex **)(v528 + 272);
                    *(void *)(v33 + 552) = 0;
                    float v377 = *(float *)(v33 + 32) + 1.0e-20;
                    *(float *)(v33 + 516) = log10f(v377 / (float)(*(float *)(v33 + 20) + 1.0e-20)) * 10.0;
                    *(_DWORD *)(v33 + 524) = 0;
                    LODWORD(v453) = *((_DWORD *)v304 + 19);
                    lmsfilt_v3::runLmsFilter_v3(v503, (DSPSplitComplex *)*(unsigned int *)(v306 + 16), (uint64_t)v304[2], (uint64_t)v304[3], *(void *)(v305 + 16), *(float **)(v305 + 24), *(float **)(v305 + 88), (float *)*((unsigned int *)v304 + 18), v453, v456, (int)__dsta, SHIDWORD(__dsta));
                    dft_v3::dftSynthesis(*(float **)(v374 + 248), *(float **)(v374 + 256), v306);
                    aec_v5::get_EchoEst_Err(v376, (float *)v375, (float *)(*(void *)(v374 + 248) + 4 * v526), (float *)(*(void *)(v374 + 256) + 4 * v526), *(const float **)(v374 + 80), v306);
                    vDSP_Length v378 = *(int *)(v306 + 16);
                    vDSP_svesq((const float *)v375, 1, (float *)(v33 + 488), v378);
                    v517 = v376;
                    vDSP_svesq((const float *)v376, 1, (float *)(v33 + 540), v378);
                    float v379 = *(float *)(v33 + 488);
                    *(float *)(v33 + 520) = log10f((float)(v379 + 1.0e-20) / (float)(*(float *)(v33 + 20) + 1.0e-20))
                                          * 10.0;
                    float v380 = log10f((float)(v379 + 1.0e-20) / v377) * -10.0;
                    *(float *)(v33 + 572) = v380;
                    int v381 = *(_DWORD *)(v33 + 32);
                    *(float *)(v33 + 32) = v379;
                    if (*(_DWORD *)(v33 + 140) == 1)
                    {
                      v383 = v498;
                      uint64_t v382 = v499;
                      if (*(float *)(v33 + 544) <= *(float *)(v33 + 528))
                      {
                        v525 = v304;
                      }
                      else
                      {
                        float v384 = v304;
                        if (*(float *)(v33 + 516) < -20.0)
                        {
                          float v298 = v302;
                          if (v380 >= -2.0)
                          {
                            v525 = v384;
                          }
                          else
                          {
                            *(_DWORD *)(v33 + 556) = 1;
                            signed int v386 = v530[12];
                            if (v386 <= 1) {
                              unsigned int v387 = 1;
                            }
                            else {
                              unsigned int v387 = v530[12];
                            }
                            int v385 = *(_DWORD *)(v529 + 72) - 1;
                            LODWORD(v388) = v385
                                          + v386
                                          + v386
                                          * (((v385 & ~(v385 >> 31)) - (v385 + (v385 >> 31))) / v387
                                           + (v385 >> 31));
                            do
                              float v388 = (int *)(v388 - v386);
                            while ((int)v388 >= v386);
                            *(_DWORD *)(v529 + 76) = v388;
                            dft_v3::GetIndexSequence(*(signed int **)(v529 + 88), v388, v530[11], v386);
                            LODWORD(v454) = *((_DWORD *)v384 + 19);
                            lmsfilt_v3::runLmsFilter_v3(v503, (DSPSplitComplex *)v530[4], (uint64_t)v384[2], (uint64_t)v384[3], *(void *)(v529 + 16), *(float **)(v529 + 24), *(float **)(v529 + 88), (float *)*((unsigned int *)v384 + 18), v454, v457, (int)__dstb, SHIDWORD(__dstb));
                            dft_v3::dftSynthesis(*(float **)(v528 + 248), *(float **)(v528 + 256), (uint64_t)v530);
                            aec_v5::get_EchoEst_Err(v376, (float *)v375, (float *)(*(void *)(v528 + 248) + 4 * v526), (float *)(*(void *)(v528 + 256) + 4 * v526), *(const float **)(v528 + 88), (uint64_t)v530);
                            LODWORD(__A.realp) = 0;
                            vDSP_svesq((const float *)v375, 1, (float *)&__A, __N);
                            float v389 = log10f((float)(*(float *)&__A.realp + 1.0e-20) / (float)(*(float *)(v33 + 492)
                                                                                          + 1.0e-20))
                                 * -10.0;
                            *(float *)(v33 + 576) = v389;
                            if (v389 >= -0.5)
                            {
                              uint64_t v390 = v384;
                            }
                            else
                            {
                              *(_DWORD *)(v33 + 552) = 1;
                              uint64_t v390 = __srcc;
                              v509[2] = __srcc;
                              v509[4] = v384;
                              *(_DWORD *)(v33 + 32) = v381;
                              *(_DWORD *)(v33 + 488) = v381;
                            }
                            v383 = v498;
                            uint64_t v382 = v499;
                            v525 = v390;
                          }
                          goto LABEL_331;
                        }
                        v525 = v304;
                      }
                    }
                    else
                    {
                      v525 = v304;
                      v383 = v498;
                      uint64_t v382 = v499;
                    }
                    float v298 = v302;
LABEL_331:
                    *(_DWORD *)(v33 + 560) = 0;
                    uint64_t v310 = v487;
                    if (*(_DWORD *)(v33 + 556))
                    {
LABEL_332:
                      *(_DWORD *)(v33 + 564) = 1;
                      unint64_t v20 = v489;
                      uint64_t v311 = v529;
                      goto LABEL_333;
                    }
                    if (v303)
                    {
                      if (*(float *)(v33 + 380) <= 0.02) {
                        goto LABEL_332;
                      }
                    }
                    else if (!__Bd)
                    {
                      goto LABEL_332;
                    }
                    *(_DWORD *)(v33 + 560) = 1;
                    uint64_t v435 = v509[5];
                    if (*(_DWORD *)(v33 + 564) == 1)
                    {
                      *(_DWORD *)(v33 + 564) = 0;
                      size_t v436 = 4 * *(_DWORD *)(v435 + 36);
                      memcpy(*(void **)v435, *v525, v436);
                      memcpy(*(void **)(v435 + 8), v525[1], v436);
                      memcpy(*(void **)(v435 + 16), v525[2], v436);
                      memcpy(*(void **)(v435 + 24), v525[3], v436);
                      memcpy(*(void **)(v435 + 48), v525[6], v436);
                      float v437 = v525[9];
                      *(void *)(v435 + 72) = v437;
                    }
                    else
                    {
                      float v437 = *(const void **)(v435 + 72);
                    }
                    uint64_t v311 = v529;
                    LODWORD(v454) = HIDWORD(v437);
                    lmsfilt_v3::runLmsFilter_v3(v503, (DSPSplitComplex *)v530[4], *(void *)(v435 + 16), *(void *)(v435 + 24), *(void *)(v529 + 16), *(float **)(v529 + 24), *(float **)(v529 + 88), (float *)v437, v454, v457, (int)__dstb, SHIDWORD(__dstb));
                    dft_v3::dftSynthesis(*(float **)(v528 + 248), *(float **)(v528 + 256), (uint64_t)v530);
                    aec_v5::get_EchoEst_Err(v517, (float *)v375, (float *)(*(void *)(v528 + 248) + 4 * v526), (float *)(*(void *)(v528 + 256) + 4 * v526), *(const float **)(v528 + 80), (uint64_t)v530);
                    float v438 = (float *)(v33 + 536);
                    vDSP_Length v439 = v530[4];
                    vDSP_svesq((const float *)v375, 1, (float *)(v33 + 496), v439);
                    vDSP_svesq((const float *)v517, 1, (float *)(v33 + 536), v439);
                    float v440 = *(float *)(v33 + 496);
                    double v441 = v440 + 1.0e-20;
                    float v442 = log10(v441 / (*(float *)(v33 + 28) + 1.0e-20)) * 10.0;
                    *(float *)(v33 + 500) = v442;
                    float v443 = log10(v441 / (*(float *)(v33 + 212) + 1.0e-20)) * 10.0;
                    *(float *)(v33 + 504) = v443;
                    *(_DWORD *)(v33 + 524) = 0;
                    unint64_t v20 = v489;
                    if (v442 >= -1.0)
                    {
                      v383 = v498;
                    }
                    else if (v443 >= -1.0 {
                           || *(float *)(v33 + 508) >= 0.0
                    }
                           || *(float *)(v33 + 512) >= 0.0
                           || (float v444 = *v438, (float)(*v438 / v38) <= 0.0000001))
                    {
                      v383 = v498;
                    }
                    else
                    {
                      v383 = v498;
                      if (v444 < (float)(*(float *)(v33 + 16) * 10.0))
                      {
                        *(_DWORD *)(v33 + 524) = 1065353216;
                        float v445 = (v444 + 1.0e-13) / (v440 + 1.0e-13);
                        *(float *)(v33 + 580) = log10f(v445) * 10.0;
                        *(_DWORD *)(v33 + 568) = 1;
                        v511 = (float *)v375;
                        v523 = (float *)v517;
                        float v301 = v440;
                      }
                    }
                    if (v442 <= 4.0)
                    {
                      learnrate_v3::updateStatistics_echo(v530[4], (const float *)v375, (const float *)v517, (float *)v33);
                      dft_v3::dftGenericAnalysis2ndHalf(v375, v524.realp, v524.imagp, (uint64_t)v530, 1);
                      dft_v3::dftGenericAnalysis2ndHalf_dsc((const void *)(*(void *)(v528 + 248) + 4 * v526), (const void *)(*(void *)(v528 + 256) + 4 * v526), v520, v519, v530);
                      float v448 = *(float *)(v33 + 136) * 2.5;
                      float v449 = 0.5;
                      BOOL v450 = v448 <= 0.5;
                      BOOL v451 = v448 < 1.0 || v448 <= 0.5;
                      if (v448 >= 1.0) {
                        BOOL v450 = 1;
                      }
                      if (!v451) {
                        float v449 = 1.0;
                      }
                      if (v450) {
                        float v448 = v449;
                      }
                      *(float *)(v33 + 132) = fminf(*(float *)(v33 + 132) * 2.5, 1.0);
                      *(float *)(v33 + 136) = v448;
                      learnrate_v3::getAdaptationRate3_v6(v33, (const float *)(*(void *)(v529 + 96) + 4 * v530[10] * **(_DWORD **)(v529 + 88)), v530[11], v530[10], 2, v530[24]);
                      learnrate_v3::adaptLmsFilter_v3((uint64_t)v524.realp);
                    }
                    else
                    {
                      size_t v447 = 4 * *(_DWORD *)(v435 + 36);
                      memcpy(*(void **)v435, *v525, v447);
                      memcpy(*(void **)(v435 + 8), v525[1], v447);
                      memcpy(*(void **)(v435 + 16), v525[2], v447);
                      memcpy(*(void **)(v435 + 24), v525[3], v447);
                      memcpy(*(void **)(v435 + 48), v525[6], v447);
                      *(void *)(v435 + 72) = v525[9];
                    }
                    float v298 = v497;
LABEL_328:
                    uint64_t v382 = v499;
LABEL_333:
                    float v391 = *v518;
                    float v392 = *v518 * 3.0;
                    if (v301 > v392) {
                      v511 = *(float **)(v528 + 80);
                    }
                    if (v530[30] >= 1)
                    {
                      if (*(float *)(v33 + 32) <= v392
                        || *(float *)(v33 + 580) <= -3.0
                        || *(float *)(v33 + 8) <= -70.0
                        || (float v393 = *(float *)(v33 + 16), v393 <= (float)(v391 * 8.0))
                        || (float)(v462 / v38) <= 0.00000001
                        || *(int *)(v33 + 600) < 2)
                      {
                        *(void *)(v33 + 592) = 0;
                      }
                      else
                      {
                        float v394 = *((float *)v530 + 6);
                        float v395 = v394 + *(float *)(v33 + 592);
                        *(float *)(v33 + 592) = v395;
                        if (v393 > (float)(v391 * 32.0)) {
                          *(float *)(v33 + 596) = v394 + *(float *)(v33 + 596);
                        }
                        if (v395 > 100.0)
                        {
                          LODWORD(__A.realp) = 1056964608;
                          if (*(float *)(v33 + 596) > 100.0) {
                            LODWORD(__A.realp) = 1048576000;
                          }
                          float v396 = (const float **)v525;
                          vDSP_Length v397 = *((int *)v525 + 9);
                          vDSP_vsmul((const float *)*v525, 1, (const float *)&__A, (float *)*v525, 1, v397);
                          vDSP_vsmul(v396[1], 1, (const float *)&__A, (float *)v396[1], 1, v397);
                          vDSP_vsmul(v396[2], 1, (const float *)&__A, (float *)v396[2], 1, v397);
                          vDSP_vsmul(v396[3], 1, (const float *)&__A, (float *)v396[3], 1, v397);
                          vDSP_vsmul(v396[6], 1, (const float *)&__A, (float *)v396[6], 1, v397);
                          *(void *)(v33 + 592) = 0;
                          uint64_t v382 = v499;
                        }
                      }
                    }
                    float *v383 = *v523 + (float)(v527[3] * 0.9);
                    *float v298 = *v511 + (float)(v527[2] * 0.9);
                    if ((int)v382 > 1)
                    {
                      uint64_t v398 = v382 - 1;
                      float v399 = v523 + 1;
                      float v400 = v511 + 1;
                      float v401 = v383 + 1;
                      float v402 = v298 + 1;
                      do
                      {
                        float v403 = *v399++;
                        *float v401 = v403 + (float)(*(v401 - 1) * 0.9);
                        ++v401;
                        float v404 = *v400++;
                        *float v402 = v404 + (float)(*(v402 - 1) * 0.9);
                        ++v402;
                        --v398;
                      }
                      while (v398);
                    }
                    v527[3] = v383[(int)v382 - 1];
                    v527[2] = v298[(int)v382 - 1];
                    *((_DWORD *)v11 + 168) = *(_DWORD *)(v33 + 140);
                    *((_DWORD *)v11 + 169) = *(_DWORD *)(v33 + 348);
                    float v24 = *(float *)(v33 + 580);
                    unsigned int v406 = v530[12];
                    if (v406 <= 1) {
                      unsigned int v407 = 1;
                    }
                    else {
                      unsigned int v407 = v530[12];
                    }
                    int v405 = *(_DWORD *)(v311 + 72) + 1;
                    signed int v408 = v405
                         + v406
                         + v406
                         * (((v405 & ~(v405 >> 31)) - (v405 + (v405 >> 31))) / v407
                          + (v405 >> 31));
                    do
                      v408 -= v406;
                    while (v408 >= (int)v406);
                    *(_DWORD *)(v311 + 72) = v408;
                    int v409 = *(_DWORD *)(v311 + 80);
                    int v410 = v409 + 1;
                    unsigned int v411 = (((v409 + 1) & ~((v409 + 1) >> 31))
                          - (v409
                           + 1
                           + ((v409 + 1) >> 31))
                          + 2 * ((v409 + 1) >> 31)) & 0xFFFFFFFE;
                    int v412 = v409 + v411;
                    int v413 = v411 + v410;
                    if (v413 >= 1) {
                      int v413 = 1;
                    }
                    *(_DWORD *)(v311 + 80) = v412 - ((v412 - v413 + 2) & 0xFFFFFFFE) + 1;
                    AudioTimeStamp v414 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v20, 0);
                    ausdk::AUElement::SetParameter(v414, 8u, *((float *)v11 + 167), 0);
                    float v415 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v20, 0);
                    ausdk::AUElement::SetParameter(v415, 0x21u, (float)*((int *)v11 + 168), 0);
                    BOOL v416 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v20, 0);
                    ausdk::AUElement::SetParameter(v416, 0x22u, *((float *)v11 + 169), 0);
                    BOOL v417 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v20, 0);
                    ausdk::AUElement::SetParameter(v417, 0x25u, *((float *)v11 + 190), 0);
                    if (v310) {
                      memcpy(v310, *(const void **)(*(void *)(*((void *)v11 + 86) + 56) + 96), 4 * *((unsigned int *)v11 + 84));
                    }
                    if (v488) {
                      memcpy(v488, *(const void **)(*(void *)(*((void *)v11 + 86) + 56) + 56), 4 * *((unsigned int *)v11 + 84));
                    }
                    if (Parameter == 0.0)
                    {
                      LODWORD(__A.realp) = 0;
                      LODWORD(__Z.realp) = 0;
                      LODWORD(__C.realp) = 0;
                      uint64_t v418 = *((void *)v11 + 88);
                      uint64_t v419 = *((void *)v11 + 87);
                      uint64_t v420 = *((void *)v11 + 86);
                      uint64_t v421 = 16;
                      if (*(int *)(*(void *)(v420 + 48) + 568) > 0) {
                        uint64_t v421 = 40;
                      }
                      memcpy(*((void **)v11 + 87), *(const void **)(*(void *)(v420 + v421) + 48), 4 * *(int *)(*(void *)(v420 + v421) + 36));
                      *(float *)&int v422 = 0.0;
                      if (*(_DWORD *)(*(void *)(*((void *)v11 + 86) + 48) + 224)) {
                        goto LABEL_368;
                      }
                      vDSP_Length v423 = ((unint64_t)(v418 - v419) >> 2);
                      vDSP_vsub(*((const float **)v11 + 87), 1, *((const float **)v11 + 89), 1, *((float **)v11 + 91), 1, v423);
                      vDSP_vsq(*((const float **)v11 + 91), 1, *((float **)v11 + 91), 1, v423);
                      vDSP_sve(*((const float **)v11 + 91), 1, (float *)&__A, v423);
                      vDSP_vsq(*((const float **)v11 + 89), 1, *((float **)v11 + 93), 1, v423);
                      vDSP_sve(*((const float **)v11 + 93), 1, (float *)&__Z, v423);
                      vDSP_vsq(*((const float **)v11 + 87), 1, *((float **)v11 + 93), 1, v423);
                      vDSP_sve(*((const float **)v11 + 93), 1, (float *)&__C, v423);
                      float v424 = *(float *)&__Z.realp + 0.00000001;
                      *(float *)&__Z.realp = (float)(*(float *)&__C.realp * 0.2) + (float)(v424 * 0.8);
                      float v425 = *(float *)&__A.realp * 100.0 / *(float *)&__Z.realp;
                      *(float *)&int v422 = 800.0;
                      if (v425 > 800.0) {
LABEL_368:
                      }
                        float v425 = *(float *)&v422;
                      std::valarray<float>::__assign_range((uint64_t)v11 + 712, *((unsigned char **)v11 + 87), *((unsigned char **)v11 + 88));
                    }
                    else
                    {
                      float v425 = 0.0;
                    }
                    int v426 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v20, 0);
                    ausdk::AUElement::SetParameter(v426, 3u, v425, 0);
                    uint64_t v19 = 0;
                    goto LABEL_372;
                  }
                  uint64_t v311 = v529;
                  learnrate_v3::adaptLmsFilter_v3((uint64_t)v524.realp);
                  float v301 = *(float *)(v33 + 28);
                  unint64_t v20 = v489;
                  uint64_t v310 = v487;
LABEL_327:
                  v383 = v498;
                  goto LABEL_328;
                }
                v313 = *(float **)(v529 + 104);
                if ((int)v308 <= 1)
                {
                  int v314 = 0;
                  float v317 = *v313;
                }
                else
                {
                  int v314 = 0;
                  float v315 = *v307;
                  for (uint64_t i = 1; i != v308; ++i)
                  {
                    if (v307[i] >= v315)
                    {
                      int v314 = i;
                      float v315 = v307[i];
                    }
                  }
                  float v317 = v313[v314];
                  int v318 = v314 - 1;
                  if (v314 >= 1)
                  {
                    float v319 = v313[v318];
                    if (v314 == 1)
                    {
                      int v314 = 1;
                      float v446 = v313[v318];
                    }
                    else
                    {
                      float v446 = v313[v314 - 2];
                    }
                    goto LABEL_255;
                  }
                }
                float v319 = v317;
                float v446 = v317;
LABEL_255:
                float v320 = &v313[v314];
                float v321 = v317;
                if (v314 < (int)v308 - 1) {
                  float v321 = v320[1];
                }
                float v322 = v321;
                if (v314 < (int)v308 - 2) {
                  float v322 = v320[2];
                }
                float v323 = vabds_f32(v446, v319);
                float v324 = vabds_f32(v319, v317);
                float v325 = vabds_f32(v317, v321);
                float v326 = vabds_f32(v321, v322);
                float v327 = vabds_f32(v321, v319);
                float v328 = vabds_f32(v446, v317);
                if (vabds_f32(v317, v322) <= 10.0
                  && v328 <= 10.0
                  && v327 <= 10.0
                  && v326 <= 8.0
                  && v325 <= 8.0
                  && v324 <= 8.0
                  && v323 <= 8.0)
                {
                  vDSP_Length v335 = *((int *)v299 + 4);
                  size_t v336 = *(float **)(v33 + 112);
                  LODWORD(__Z.realp) = 0;
                  LODWORD(__C.realp) = 0;
                  LODWORD(v536.realp) = 0;
                  int v338 = *((_DWORD *)v525 + 18);
                  int v337 = *((_DWORD *)v525 + 19);
                  if (*((_DWORD *)v525 + 17) == 1)
                  {
                    if (v338 >= 1)
                    {
                      vDSP_Length v339 = *((unsigned int *)v525 + 18);
                      int v340 = *((_DWORD *)v525 + 19);
                      vDSP_vfill((const float *)&v536, v307, 1, v339);
                      vDSP_vfill((const float *)&v536, v336, 1, v339);
                      int v338 = v339;
                      int v337 = v340;
                    }
                    int v341 = v337 + 1;
                    if ((int)v308 - (v337 + 1) >= 1)
                    {
                      int __srce = v338;
                      int v515 = v337;
                      vDSP_vfill((const float *)&v536, &v307[v341], 1, (v308 - v341));
                      vDSP_vfill((const float *)&v536, &v336[v341], 1, (v308 - v341));
                      int v338 = __srce;
                      int v337 = v515;
                    }
                  }
                  int v342 = (float *)v338;
                  if (v338 <= v337)
                  {
                    int v486 = v307;
                    float v465 = v38;
                    int v516 = v337;
                    int v346 = v337 + 1;
                    int v347 = (float *)&__A + v338;
                    vDSP_Length v477 = (float *)v338;
                    int v348 = &v336[v338];
                    uint64_t v349 = 4 * v338 * (int)v335;
                    float v345 = 0.0;
                    int __srcd = v338;
                    int v350 = v338;
                    float v351 = 0.0;
                    do
                    {
                      BOOL v352 = (const float *)((char *)v525[1] + v349);
                      vDSP_svesq((const float *)((char *)*v525 + v349), 1, (float *)&__Z, v335);
                      vDSP_svesq(v352, 1, (float *)&__C, v335);
                      float v353 = *(float *)&__Z.realp + *(float *)&__C.realp;
                      float v354 = (float)(1.0 / (float)(int)v335) * (float)(*(float *)&__Z.realp + *(float *)&__C.realp);
                      *v348++ = (float)(*(float *)&__Z.realp + *(float *)&__C.realp) + 1.0e-20;
                      float v355 = sqrtf(v354) + 0.02;
                      *v347++ = v355;
                      float v345 = v345 + (float)((float)v350 * v353);
                      float v344 = v353 + *(float *)&v536.realp;
                      *(float *)&v536.realp = v344;
                      float v351 = v351 + v355;
                      ++v350;
                      v349 += 4 * v335;
                    }
                    while (v346 != v350);
                    float v343 = v351 + v351;
                    uint64_t v11 = v490;
                    int v338 = __srcd;
                    float v298 = v497;
                    float v299 = (float *)v530;
                    float v38 = v465;
                    unsigned int v307 = v486;
                    int v342 = v477;
                    int v337 = v516;
                  }
                  else
                  {
                    float v343 = 0.0;
                    float v344 = *(float *)&v536.realp;
                    float v345 = 0.0;
                    float v299 = (float *)v530;
                  }
                  *((float *)v11 + 166) = v344;
                  float v356 = 1.0 / (float)(v344 + 1.0e-20);
                  float v357 = (float)((float)((float)(int)v308 + -0.5) - (float)(v345 * v356)) * v312;
                  if (v357 < 0.0) {
                    float v357 = 0.0;
                  }
                  *((float *)v11 + 167) = v357;
                  if (v338 <= v337)
                  {
                    int v358 = v337 - v338 + 1;
                    int v359 = &v336[(void)v342];
                    int v360 = &v307[(void)v342];
                    v361 = (float *)&__A + (void)v342;
                    float v362 = (float)(v309 + 1.0) / v343;
                    do
                    {
                      float v363 = *v361++;
                      *v360++ = (float)((float)(1.0 - v309) / (float)((float)(int)v308 + (float)(int)v308))
                              + (float)(v362 * v363);
                      *int v359 = v356 * *v359;
                      ++v359;
                      --v358;
                    }
                    while (v358);
                  }
                }
                goto LABEL_294;
              }
              *(_DWORD *)(v33 + 220) = 0;
            }
            int v168 = v166;
            v523 = __Bb;
            goto LABEL_199;
          }
LABEL_151:
          int v225 = *(_DWORD *)(v33 + 236);
          if (v225 < 1)
          {
            int v226 = 0;
            uint64_t v82 = v510;
            vDSP_Length v166 = v475;
          }
          else
          {
            int v226 = 0;
            DSPSplitComplex v227 = v197;
            uint64_t v228 = *(unsigned int *)(v33 + 236);
            uint64_t v82 = v510;
            vDSP_Length v166 = v475;
            do
            {
              int v229 = *v227++;
              v226 += v229;
              --v228;
            }
            while (v228);
          }
          int v230 = *(_DWORD *)(v33 + 240);
          if (v230 < 1)
          {
            float v234 = 0.0;
          }
          else
          {
            int v231 = 0;
            uint64_t v232 = *(unsigned int *)(v33 + 240);
            do
            {
              int v233 = *v197++;
              v231 += v233;
              --v232;
            }
            while (v232);
            float v234 = (float)v231 * 1.5;
          }
          int v235 = *(_DWORD *)(v33 + 248);
          if (v235 < 1)
          {
            int v236 = 0;
          }
          else
          {
            int v236 = 0;
            uint64_t v237 = *(unsigned int *)(v33 + 248);
            do
            {
              int v238 = *v214++;
              v236 += v238;
              --v237;
            }
            while (v237);
          }
          float v239 = v193[1];
          if (*v193 < v239 || v239 < v193[2])
          {
            BOOL v240 = *(unsigned char *)v33 && v226 == v225;
            BOOL v241 = v240 && v236 == v235;
            if (v241 && v234 > (float)v230) {
              *(_DWORD *)(v82 + 60) = 1;
            }
          }
          goto LABEL_179;
        }
      }
      if (v219 < v215) {
        goto LABEL_151;
      }
      goto LABEL_149;
    }
    if (*(_DWORD *)(v33 + 140) != 1)
    {
LABEL_122:
      if (*(int *)(v66 + 100) >= 1) {
        *(void *)(v509[5] + 72) = v73[9];
      }
      goto LABEL_124;
    }
    LODWORD(__A.realp) = 0;
    int v84 = *((_DWORD *)v525 + 18);
    int v83 = *((_DWORD *)v525 + 19);
    uint64_t v85 = v530[11];
    float v86 = 1.0;
    if ((int)v85 < 1)
    {
      int v88 = 0;
      int v91 = 0;
      float v90 = 0.0;
      goto LABEL_95;
    }
    uint64_t v87 = 0;
    int v88 = 0;
    uint64_t v89 = *(void *)(v33 + 112);
    float v90 = 0.0;
    do
    {
      if (*(float *)(v89 + 4 * v87) > v90)
      {
        int v88 = v87;
        float v90 = *(float *)(v89 + 4 * v87);
      }
      ++v87;
    }
    while (v85 != v87);
    int v91 = 0;
    if ((int)v85 < 4 || *((float *)v530 + 6) >= 12.0)
    {
LABEL_95:
      float v151 = *(float *)(v33 + 584) * 0.95;
      *(float *)(v33 + 584) = v151;
      if ((float)(v90 * 0.9) <= v151)
      {
        int v88 = *(_DWORD *)(v33 + 588);
      }
      else
      {
        *(_DWORD *)(v33 + 588) = v88;
        *(float *)(v33 + 584) = v90;
      }
      int v152 = (v88 - *((_DWORD *)v525 + 20)) & ~((v88 - *((_DWORD *)v525 + 20)) >> 31);
      if (v152 + *((_DWORD *)v525 + 21) >= (int)v85) {
        int v153 = v85;
      }
      else {
        int v153 = v152 + *((_DWORD *)v525 + 21);
      }
      vDSP_sve((const float *)(*(void *)(v33 + 112) + 4 * v152), 1, (float *)&__A, v153 - v152);
      int v154 = v153 - 1 - v152 + v91;
      if (v154 <= 1) {
        int v154 = 1;
      }
      float v155 = v90 / (float)((float)(v86 * (float)(*(float *)&__A.realp - v90)) / (float)v154);
      float v156 = *(float *)(v33 + 544);
      if (v156 <= 2.0 || v155 <= 5.0)
      {
        uint64_t v66 = (uint64_t)v530;
        uint64_t v79 = v528;
        if (v156 > 2.0)
        {
          uint64_t v65 = v529;
          unsigned __int8 v73 = v525;
          if (v155 < 3.0)
          {
            ++v83;
            --v84;
          }
          goto LABEL_119;
        }
        uint64_t v65 = v529;
      }
      else
      {
        if (v84 <= v152) {
          int v157 = 0;
        }
        else {
          int v157 = -1;
        }
        if (v84 < v152) {
          int v157 = 1;
        }
        v84 += v157;
        if (v83 >= v153 - 1) {
          v83 -= v83 >= v153;
        }
        else {
          ++v83;
        }
        uint64_t v65 = v529;
        uint64_t v66 = (uint64_t)v530;
        uint64_t v79 = v528;
      }
      unsigned __int8 v73 = v525;
LABEL_119:
      int v158 = v85 - 1;
      if (v83 < (int)v85) {
        int v158 = v83;
      }
      *((_DWORD *)v73 + 18) = v84 & ~(v84 >> 31);
      *((_DWORD *)v73 + 19) = v158;
      uint64_t v82 = v510;
      goto LABEL_122;
    }
    uint64_t v92 = v88 + 1;
    if (v92 == v85)
    {
      float v93 = *(float *)(v89 + 4 * v88 - 4);
    }
    else
    {
      if (v88)
      {
        float v90 = v90 + (float)((float)(*(float *)(v89 + 4 * v88 - 4) + *(float *)(v89 + 4 * v92)) * 0.5);
LABEL_94:
        float v86 = 2.0;
        int v91 = -1;
        goto LABEL_95;
      }
      float v93 = *(float *)(v89 + 4);
    }
    float v90 = v90 + v93;
    goto LABEL_94;
  }
  if (mData != v16)
  {
    uint64_t v25 = ausdk::AUScope::SafeGetElement((AULinearEchoCancelerV3 *)((char *)v11 + 128), 0);
    memcpy(v16, mData, (*(_DWORD *)(v25 + 104) * a3));
    unint64_t v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AULinearEchoCancelerV3 *)((char *)v11 + 32), 0);
    ausdk::AUElement::SetParameter(v26, 3u, 0.0, 0);
    uint64_t v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AULinearEchoCancelerV3 *)((char *)v11 + 32), 0);
    ausdk::AUElement::SetParameter(v27, 0x24u, 0.0, 0);
  }
  return 0;
}

uint64_t AULinearEchoCancelerV3::InitializeEC(AULinearEchoCancelerV3 *this)
{
  uint64_t v2 = (AULinearEchoCancelerV3 *)((char *)this + 32);
  double v3 = *(double *)(ausdk::AUScope::SafeGetElement((AULinearEchoCancelerV3 *)((char *)this + 80), 0) + 80);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  unsigned int Parameter = ausdk::AUElement::GetParameter(Element, 0);
  CFStringRef v6 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v7 = ausdk::AUElement::GetParameter(v6, 0x28u);
  AudioUnitParameterValue v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v9 = ausdk::AUElement::GetParameter(v8, 0x29u);
  uint64_t v10 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((_DWORD *)this + 136) = ausdk::AUElement::GetParameter(v10, 0x27u);
  if (Parameter)
  {
    if (v7 <= 5) {
      unsigned int v11 = 5;
    }
    else {
      unsigned int v11 = v7;
    }
    (*(void (**)(AULinearEchoCancelerV3 *))(*(void *)this + 64))(this);
    *((_DWORD *)this + 139) = v3;
    unsigned int v12 = *((_DWORD *)this + 84);
    float v13 = (float)v3 / (float)((float)v12 * 1000.0);
    unsigned int v14 = (float)(ceilf(v13 * (float)Parameter) * (float)v12);
    *((_DWORD *)this + 135) = v14;
    unsigned int v15 = (float)(ceilf(v13 * (float)v11) * (float)v12);
    unsigned int v16 = (float)(ceilf(v13 * (float)v9) * (float)v12);
    *((_DWORD *)this + 137) = v15;
    unsigned int v17 = v12 + v15;
    if (v15 < v16) {
      unsigned int v17 = v16;
    }
    *((_DWORD *)this + 138) = v17;
    if (v17 >= v14)
    {
      *((_DWORD *)this + 138) = v14;
      *((void *)this + 68) = 0;
    }
    uint64_t v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
    *((float *)this + 140) = ausdk::AUElement::GetParameter(v18, 5u);
    uint64_t v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
    *((_DWORD *)this + 142) = ausdk::AUElement::GetParameter(v19, 9u);
    unint64_t v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
    *((_DWORD *)this + 143) = ausdk::AUElement::GetParameter(v20, 0xAu);
    unint64_t v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
    *((_DWORD *)this + 144) = ausdk::AUElement::GetParameter(v21, 0xBu);
    uint64_t v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
    *((float *)this + 145) = ausdk::AUElement::GetParameter(v22, 0xCu);
    BOOL v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
    *((float *)this + 146) = ausdk::AUElement::GetParameter(v23, 0xDu);
    float v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
    *((float *)this + 147) = ausdk::AUElement::GetParameter(v24, 0xEu);
    uint64_t v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
    *((float *)this + 148) = ausdk::AUElement::GetParameter(v25, 0xFu);
    unint64_t v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
    *((float *)this + 149) = ausdk::AUElement::GetParameter(v26, 0x10u);
    uint64_t v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
    *((float *)this + 150) = ausdk::AUElement::GetParameter(v27, 0x11u);
    UInt32 v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
    *((float *)this + 151) = ausdk::AUElement::GetParameter(v28, 0x12u);
    int v29 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
    *((float *)this + 152) = ausdk::AUElement::GetParameter(v29, 0x13u);
    int v30 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
    *((float *)this + 153) = ausdk::AUElement::GetParameter(v30, 0x14u);
    uint64_t v31 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
    *((float *)this + 154) = ausdk::AUElement::GetParameter(v31, 0x15u);
    uint64_t v32 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
    *((float *)this + 155) = ausdk::AUElement::GetParameter(v32, 0x16u);
    uint64_t v33 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
    *((float *)this + 158) = ausdk::AUElement::GetParameter(v33, 0x17u);
    uint64_t v34 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
    *((float *)this + 159) = ausdk::AUElement::GetParameter(v34, 0x18u);
    unint64_t v35 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
    *((float *)this + 156) = ausdk::AUElement::GetParameter(v35, 0x19u);
    vDSP_Length v36 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
    *((float *)this + 157) = ausdk::AUElement::GetParameter(v36, 0x1Au);
    uint64_t v37 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
    *((float *)this + 160) = ausdk::AUElement::GetParameter(v37, 0x1Bu);
    float v38 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
    *((unsigned char *)this + 644) = ausdk::AUElement::GetParameter(v38, 0x1Cu) != 0.0;
    float v39 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
    *((float *)this + 162) = ausdk::AUElement::GetParameter(v39, 0x1Du);
    int v40 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
    *((_DWORD *)this + 163) = (int)ausdk::AUElement::GetParameter(v40, 0x1Eu);
    BOOL v41 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
    *((float *)this + 164) = ausdk::AUElement::GetParameter(v41, 0x1Fu);
    vDSP_Length v42 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
    *((float *)this + 165) = ausdk::AUElement::GetParameter(v42, 0x20u);
    int v43 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
    float v44 = ausdk::AUElement::GetParameter(v43, 0x26u);
    *((_DWORD *)this + 141) = v44;
    aec_v3::aec_init((void **)this + 86, *((_DWORD *)this + 139), *((_DWORD *)this + 135), *((_DWORD *)this + 84), *((unsigned int *)this + 142), *((_DWORD *)this + 143), *((unsigned __int8 *)this + 644), v44);
  }
  return 4294956428;
}

uint64_t std::valarray<float>::__assign_range(uint64_t a1, unsigned char *__src, unsigned char *a3)
{
  size_t v6 = a3 - __src;
  uint64_t v7 = (a3 - __src) >> 2;
  AudioUnitParameterValue v8 = *(unsigned char **)a1;
  float v9 = *(unsigned char **)(a1 + 8);
  if (v7 == (v9 - v8) >> 2)
  {
    if (a3 != __src) {
      memmove(v8, __src, a3 - __src);
    }
  }
  else
  {
    if (v8)
    {
      if (v9 != v8) {
        *(void *)(a1 + 8) = &v9[(v8 - v9 + 3) & 0xFFFFFFFFFFFFFFFCLL];
      }
      operator delete(v8);
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
    }
    if ((v6 & 0x8000000000000000) != 0) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unsigned int v11 = (char *)operator new(v6);
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = &v11[4 * v7];
    if (__src != a3) {
      memcpy(v11, __src, ((v6 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
    }
  }
  return a1;
}

uint64_t AULinearEchoCancelerV3::CanScheduleParameters(AULinearEchoCancelerV3 *this)
{
  return 0;
}

uint64_t AULinearEchoCancelerV3::SetParameter(AULinearEchoCancelerV3 *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  if (a3)
  {
    Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
LABEL_3:
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
    goto LABEL_9;
  }
  if (a2 > 0x29 || ((1 << a2) & 0x30000000001) == 0)
  {
    Scope = (AULinearEchoCancelerV3 *)((char *)this + 32);
    goto LABEL_3;
  }
  if (*((unsigned char *)this + 17)) {
    ++*((_DWORD *)this + 133);
  }
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AULinearEchoCancelerV3 *)((char *)this + 32), 0);
LABEL_9:
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  return 0;
}

uint64_t AULinearEchoCancelerV3::SetProperty(AULinearEchoCancelerV3 *this, int a2, int a3, unsigned int a4, int *a5, unsigned int a6)
{
  uint64_t result = 4294956417;
  if (a2 == 21 && !a3)
  {
    if (a6 >= 4)
    {
      int v8 = *a5;
      int v9 = *a5 != 0;
      if (v9 != (*(unsigned int (**)(AULinearEchoCancelerV3 *))(*(void *)this + 576))(this)) {
        (*(void (**)(AULinearEchoCancelerV3 *, BOOL))(*(void *)this + 584))(this, v8 != 0);
      }
      return 0;
    }
    else
    {
      return 4294956445;
    }
  }
  return result;
}

uint64_t AULinearEchoCancelerV3::GetProperty(AULinearEchoCancelerV3 *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  if (a3) {
    return 4294956417;
  }
  if (a2 == 3700)
  {
    int v7 = *((unsigned __int8 *)this + 376);
    goto LABEL_7;
  }
  if (a2 == 21)
  {
    int v7 = (*(uint64_t (**)(AULinearEchoCancelerV3 *))(*(void *)this + 576))(this);
LABEL_7:
    uint64_t result = 0;
    *a5 = v7;
    return result;
  }
  return 4294956417;
}

uint64_t AULinearEchoCancelerV3::GetPropertyInfo(AULinearEchoCancelerV3 *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3) {
    return 4294956417;
  }
  if (a2 == 21)
  {
    BOOL v7 = 1;
  }
  else
  {
    if (a2 != 3700) {
      return 4294956417;
    }
    BOOL v7 = 0;
  }
  uint64_t result = 0;
  *a6 = v7;
  *a5 = 4;
  return result;
}

uint64_t AULinearEchoCancelerV3::Reset(AULinearEchoCancelerV3 *this)
{
  return 0;
}

void AULinearEchoCancelerV3::Cleanup(void ***this)
{
  if (this[86])
  {
    CFDictionaryRef v1 = this + 86;
    aec_v3::aec_remove(this + 86);
    *CFDictionaryRef v1 = 0;
  }
}

uint64_t AULinearEchoCancelerV3::Initialize(AULinearEchoCancelerV3 *this)
{
  uint64_t v2 = *((void *)this + 15);
  if (v2) {
    LODWORD(v3) = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  else {
    uint64_t v3 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
  }
  uint64_t v4 = *((void *)this + 21);
  if (v4) {
    LODWORD(v5) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  else {
    uint64_t v5 = (*((void *)this + 19) - *((void *)this + 18)) >> 3;
  }
  if (v3 >= 2)
  {
    unsigned int v6 = 1;
    do
    {
      uint64_t Element = ausdk::AUScope::SafeGetElement((AULinearEchoCancelerV3 *)((char *)this + 80), v6 - 1);
      if (*(double *)(Element + 80) != *(double *)(ausdk::AUScope::SafeGetElement((AULinearEchoCancelerV3 *)((char *)this + 80), v6)+ 80))return 4294956428; {
    }
      }
    while (v3 != ++v6);
  }
  if (v5 >= 2)
  {
    unsigned int v8 = 1;
    do
    {
      uint64_t v9 = ausdk::AUScope::SafeGetElement((AULinearEchoCancelerV3 *)((char *)this + 128), v8 - 1);
      if (*(double *)(v9 + 80) != *(double *)(ausdk::AUScope::SafeGetElement((AULinearEchoCancelerV3 *)((char *)this + 128), v8)+ 80))return 4294956428; {
    }
      }
    while (v5 != ++v8);
  }
  double v10 = *(double *)(ausdk::AUScope::SafeGetElement((AULinearEchoCancelerV3 *)((char *)this + 80), 0) + 80);
  if (v10 != *(double *)(ausdk::AUScope::SafeGetElement((AULinearEchoCancelerV3 *)((char *)this + 128), 0) + 80)) {
    return 4294956428;
  }
  *((_DWORD *)this + 134) = *((_DWORD *)this + 133);
  *(_OWORD *)((char *)this + 664) = 0u;
  *((int32x2_t *)this + 85) = vdup_n_s32(0xC2C80000);

  return AULinearEchoCancelerV3::InitializeEC(this);
}

void AULinearEchoCancelerV3::~AULinearEchoCancelerV3(void ***this)
{
  AULinearEchoCancelerV3::~AULinearEchoCancelerV3(this);

  JUMPOUT(0x1C185D370);
}

{
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  void **v7;
  void **v8;
  void **v9;
  uint64_t vars8;

  *this = (void **)&unk_1F14B0190;
  if (this[86])
  {
    aec_v3::aec_remove(this + 86);
    this[86] = 0;
  }
  uint64_t v2 = this[93];
  if (v2)
  {
    uint64_t v3 = this[94];
    if (v3 != v2) {
      this[94] = (void **)((char *)v3 + (((char *)v2 - (char *)v3 + 3) & 0xFFFFFFFFFFFFFFFCLL));
    }
    operator delete(v2);
    this[93] = 0;
    this[94] = 0;
  }
  uint64_t v4 = this[91];
  if (v4)
  {
    uint64_t v5 = this[92];
    if (v5 != v4) {
      this[92] = (void **)((char *)v5 + (((char *)v4 - (char *)v5 + 3) & 0xFFFFFFFFFFFFFFFCLL));
    }
    operator delete(v4);
    this[91] = 0;
    this[92] = 0;
  }
  unsigned int v6 = this[89];
  if (v6)
  {
    BOOL v7 = this[90];
    if (v7 != v6) {
      this[90] = (void **)((char *)v7 + (((char *)v6 - (char *)v7 + 3) & 0xFFFFFFFFFFFFFFFCLL));
    }
    operator delete(v6);
    this[89] = 0;
    this[90] = 0;
  }
  unsigned int v8 = this[87];
  if (v8)
  {
    uint64_t v9 = this[88];
    if (v9 != v8) {
      this[88] = (void **)((char *)v9 + (((char *)v8 - (char *)v9 + 3) & 0xFFFFFFFFFFFFFFFCLL));
    }
    operator delete(v8);
    this[87] = 0;
    this[88] = 0;
  }

  ausdk::AUBase::~AUBase((ausdk::AUBase *)this);
}

uint64_t IR::Source::initialize(IR::Source *this, float a2)
{
  *((float *)this + 4) = a2;
  *((unsigned char *)this + 176) = 1;
  return 0;
}

uint64_t IR::DataLoaderSource::getCoefficients(uint64_t a1)
{
  *(unsigned char *)(a1 + 221) = 0;
  return IR::IRData::getInterpolatedCoeffs();
}

uint64_t IR::DataLoaderSource::needToUpdateCoeffs(IR::DataLoaderSource *this)
{
  return *((unsigned __int8 *)this + 221);
}

uint64_t IR::DataLoaderSource::canInterpolateInDimension()
{
  return IR::IRData::canInterpolateInDimension();
}

uint64_t IR::DataLoaderSource::getModelingDelay(IR::DataLoaderSource *this)
{
  if (!*((unsigned char *)this + 176)) {
    JUMPOUT(0x1C185BFB0);
  }
  return *((unsigned int *)this + 43);
}

IR::IRData *IR::DataLoaderSource::getLatency(IR::DataLoaderSource *this)
{
  uint64_t result = (IR::IRData *)*((void *)this + 28);
  if (result) {
    uint64_t result = (IR::IRData *)IR::IRData::getProcessingDelay(result);
  }
  if (!*((unsigned char *)this + 24)) {
    return (IR::IRData *)(*((_DWORD *)this + 5) + result);
  }
  return result;
}

uint64_t *IR::DataLoaderSource::getUserData@<X0>(IR::DataLoaderSource *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = (IR::IRDataLoader *)IR::IRDataLoader::instance(this);

  return IR::IRDataLoader::getUserData(a2, v4, (IR::DataLoaderSource *)((char *)this + 8));
}

__n128 IR::DataLoaderSource::setCoordinates(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 184;
  if (IR::IRCoordinates::operator!=())
  {
    __n128 result = *(__n128 *)a2;
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_DWORD *)(v4 + 32) = *(_DWORD *)(a2 + 32);
    *(__n128 *)uint64_t v4 = result;
    *(_OWORD *)(v4 + 16) = v6;
    *(unsigned char *)(a1 + 221) = 1;
  }
  return result;
}

uint64_t IR::DataLoaderSource::setCoordinate(uint64_t a1, float a2)
{
  uint64_t result = IR::IRCoordinates::get();
  if (v5 != a2)
  {
    IR::IRCoordinates::set();
    uint64_t result = IR::IRData::canInterpolateInDimension();
    if (result) {
      *(unsigned char *)(a1 + 221) = 1;
    }
  }
  return result;
}

uint64_t IR::DataLoaderSource::initialize(IR::DataLoaderSource *this, float a2)
{
  uint64_t v3 = *((void *)this + 1);
  *((float *)this + 4) = a2;
  *((unsigned char *)this + 176) = 1;
  if (v3)
  {
    IR::IRDataLoader::instance(this);
    std::string::basic_string[abi:ne180100]<0>(v23, "IRDataInterpolator|");
    uint64_t v28 = 0;
    CFTypeRef cf = 0;
    std::string __p = 0;
    uint64_t v27 = 0;
    IR::IRDataLoader::load();
    long long v4 = v30;
    long long v30 = 0uLL;
    float v5 = (std::__shared_weak_count *)*((void *)this + 29);
    *((_OWORD *)this + 14) = v4;
    if (v5)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      if (*((void *)&v30 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v30 + 1));
      }
    }
    if (__p)
    {
      uint64_t v27 = __p;
      operator delete(__p);
    }
    if (cf) {
      CFRelease(cf);
    }
    if (SBYTE7(v24) < 0) {
      operator delete(v23[0]);
    }
  }
  else
  {
    long long v6 = (std::__shared_weak_count *)*((void *)this + 29);
    *((void *)this + 28) = 0;
    *((void *)this + 29) = 0;
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
  BOOL v7 = (IR::IRData *)*((void *)this + 28);
  if (v7)
  {
    *((_DWORD *)this + 42) = IR::IRData::getNumFiltersPerSpatialPoint(v7);
    *((_DWORD *)this + 40) = IR::IRData::getFilterLength(*((IR::IRData **)this + 28));
    IR::IRData::getMaxDelay(*((IR::IRData **)this + 28));
    *((_DWORD *)this + 41) = vcvtps_u32_f32(v8);
    *((_DWORD *)this + 45) = IR::IRData::getAudioChannelLayoutTag(*((IR::IRData **)this + 28));
    *((_DWORD *)this + 43) = IR::IRData::getModelingDelay(*((IR::IRData **)this + 28));
    IR::IRData::getDefaultCoordinates((uint64_t *)v23, *((IR::IRData **)this + 28));
    long long v9 = v24;
    *(_OWORD *)((char *)this + 184) = *(_OWORD *)v23;
    *(_OWORD *)((char *)this + 200) = v9;
    *((_DWORD *)this + 54) = v25;
    double v10 = (IR::IRData *)*((void *)this + 28);
    if (!v10
      || (DataLayout = (const void **)IR::IRData::getDataLayout(v10),
          float v13 = *DataLayout,
          unsigned int v12 = DataLayout[1],
          int64_t v14 = v12 - (unsigned char *)*DataLayout,
          v12 == *DataLayout))
    {
      char v20 = 0;
    }
    else
    {
      if (v14 < 0) {
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      }
      unsigned int v15 = operator new(v12 - (unsigned char *)*DataLayout);
      uint64_t v16 = 4 * (v14 >> 2);
      memmove(v15, v13, v14);
      if (v16)
      {
        uint64_t v17 = 0;
        uint64_t v18 = v16 - 4;
        do
        {
          canInterpolateInDimensiounint64_t n = IR::IRData::canInterpolateInDimension();
          char v20 = canInterpolateInDimension;
          if (v18 == v17) {
            char v21 = 1;
          }
          else {
            char v21 = canInterpolateInDimension;
          }
          v17 += 4;
        }
        while ((v21 & 1) == 0);
      }
      else
      {
        char v20 = 0;
      }
      operator delete(v15);
    }
    uint64_t result = 0;
    *((unsigned char *)this + 220) = v20;
  }
  else
  {
    *((void *)this + 20) = 0;
    *((void *)this + 21) = 0;
    uint64_t result = 4294956425;
    *((unsigned char *)this + 176) = 0;
  }
  return result;
}

void sub_1BB4BA284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,const void *a21)
{
  if (__p) {
    operator delete(__p);
  }
  applesauce::CF::DataRef::~DataRef(&a21);
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t IR::DataLoaderSource::coefficientsCanChange(IR::DataLoaderSource *this)
{
  return *((unsigned __int8 *)this + 220);
}

uint64_t IR::DataLoaderSource::providesCoefficients(IR::DataLoaderSource *this)
{
  return 1;
}

uint64_t IR::DataLoaderSource::type(IR::DataLoaderSource *this)
{
  return 2;
}

uint64_t IR::DataLoaderSourceWithSizeAverage::getCoefficients(uint64_t a1, void *a2, float32x2_t **a3)
{
  uint64_t Coefficients = IR::DataLoaderSource::getCoefficients(a1);
  if (!Coefficients)
  {
    IR::IRCoordinates::get();
    if (v7 > 0.0)
    {
      float v8 = v7;
      if (IR::IRData::isAverageIRComputed(*(IR::IRData **)(a1 + 224)))
      {
        AverageIR = (void *)IR::IRData::getAverageIR(*(IR::IRData **)(a1 + 224));
        if (-858993459 * ((a2[1] - *a2) >> 3) >= -858993459
                                                              * ((AverageIR[1] - *AverageIR) >> 3))
          unsigned int v10 = -858993459 * ((AverageIR[1] - *AverageIR) >> 3);
        else {
          unsigned int v10 = -858993459 * ((a2[1] - *a2) >> 3);
        }
        if (v10)
        {
          uint64_t v11 = 0;
          do
          {
            IR::FFTFilterKernel::scale((IR::FFTFilterKernel *)(*a2 + v11), 1.0 - v8);
            IR::FFTFilterKernel::accumulate();
            v11 += 40;
          }
          while (40 * v10 != v11);
          if (v10 == 2) {
            **a3 = vmul_f32(vmla_n_f32((float32x2_t)vrev64_s32((int32x2_t)vmul_n_f32(**a3, 1.0 - (float)(1.0 - v8))), **a3, (float)(1.0 - v8) + 1.0), (float32x2_t)0x3F0000003F000000);
          }
        }
      }
    }
  }
  return Coefficients;
}

uint64_t IR::DataLoaderSourceWithSizeAverage::type(IR::DataLoaderSourceWithSizeAverage *this)
{
  return 3;
}

uint64_t std::__split_buffer<IR::FFTFilterKernel>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 40;
    MEMORY[0x1C185BED0]();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<IR::FFTFilterKernel>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  CFDictionaryRef v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    float v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = MEMORY[0x1C185BED0](v4 - 40);
      while ((void *)v4 != v2);
      float v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t IR::WeightedSumOfCache::getCoefficients(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = 1852793972;
  *(unsigned char *)(a1 + 232) = 0;
  uint64_t v4 = *(void *)(a1 + 184);
  *(_DWORD *)(a1 + 236) = *(_DWORD *)(v4 + 256);
  if (!*(unsigned char *)(a1 + 176)
    || !*(void *)(v4 + 160)
    || (uint64_t v6 = v4 + 184,
        float v5 = *(uint64_t **)(v4 + 184),
        !(-1431655765 * ((*(void *)(v6 + 8) - (void)v5) >> 3)))
    || (uint64_t v8 = *v5, v7 = v5[1], v9 = v7 - v8, v7 == v8))
  {
LABEL_15:
    uint64_t v16 = *a2;
    if (-858993459 * ((unint64_t)(a2[1] - *a2) >> 3))
    {
      uint64_t v17 = 0;
      unint64_t v18 = 0;
      do
      {
        IR::FFTFilterKernel::reset((IR::FFTFilterKernel *)(v16 + v17));
        ++v18;
        uint64_t v16 = *a2;
        v17 += 40;
      }
      while (v18 < -858993459 * ((unint64_t)(a2[1] - *a2) >> 3));
    }
    return v3;
  }
  uint64_t v11 = *(float **)(a1 + 200);
  if (v11 == *(float **)(a1 + 208))
  {
    uint64_t v3 = 4294956429;
    goto LABEL_15;
  }
  unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * (v9 >> 3);
  unsigned int v13 = -858993459 * ((a2[1] - *a2) >> 3);
  if (v12 >= v13) {
    unsigned int v14 = -858993459 * ((a2[1] - *a2) >> 3);
  }
  else {
    unsigned int v14 = -858993459 * (v9 >> 3);
  }
  if (fabsf(*v11) <= 0.0001)
  {
    if (v14)
    {
      uint64_t v20 = 0;
      do
      {
        IR::FFTFilterKernel::reset((IR::FFTFilterKernel *)(*a2 + v20));
        v20 += 40;
      }
      while (40 * v14 != v20);
    }
  }
  else if (v14)
  {
    uint64_t v15 = 0;
    do
    {
      IR::FFTFilterKernel::overwrite((IR::FFTFilterKernel *)(*a2 + v15), (const IR::FFTFilterKernel *)(v8 + v15), **(float **)(a1 + 200));
      v15 += 40;
    }
    while (40 * v14 != v15);
  }
  uint64_t v21 = *a2;
  if (v14 < -858993459 * ((unint64_t)(a2[1] - *a2) >> 3))
  {
    if (v13 >= (unint64_t)v12) {
      unint64_t v12 = v12;
    }
    else {
      unint64_t v12 = v13;
    }
    uint64_t v22 = 40 * v12;
    do
    {
      IR::FFTFilterKernel::reset((IR::FFTFilterKernel *)(v21 + v22));
      ++v12;
      uint64_t v21 = *a2;
      v22 += 40;
    }
    while (v12 < -858993459 * ((unint64_t)(a2[1] - *a2) >> 3));
  }
  uint64_t v23 = *(void *)(a1 + 184);
  unsigned int v24 = *(_DWORD *)(v23 + 176);
  uint64_t v26 = *(void *)(a1 + 200);
  uint64_t v25 = *(void *)(a1 + 208);
  if (v24 >= ((unint64_t)(v25 - v26) >> 2)) {
    unsigned int v24 = (unint64_t)(v25 - v26) >> 2;
  }
  if (v24 >= 2)
  {
    unint64_t v27 = 1;
    do
    {
      if (*(void *)(v23 + 160)
        && v27 < -1431655765 * ((*(void *)(v23 + 192) - *(void *)(v23 + 184)) >> 3))
      {
        if (v14) {
          goto LABEL_37;
        }
      }
      else if (v14)
      {
LABEL_37:
        uint64_t v28 = 0;
        do
        {
          if (fabsf(*(float *)(*(void *)(a1 + 200) + 4 * v27)) > 0.0001) {
            IR::FFTFilterKernel::accumulate();
          }
          v28 += 40;
        }
        while (40 * v14 != v28);
        uint64_t v23 = *(void *)(a1 + 184);
        uint64_t v26 = *(void *)(a1 + 200);
        uint64_t v25 = *(void *)(a1 + 208);
      }
      ++v27;
      LODWORD(v29) = *(_DWORD *)(v23 + 176);
      unint64_t v30 = (unint64_t)(v25 - v26) >> 2;
      if (v29 >= v30) {
        unint64_t v29 = v30;
      }
      else {
        unint64_t v29 = v29;
      }
    }
    while (v27 < v29);
  }
  return 0;
}

BOOL IR::WeightedSumOfCache::needToUpdateCoeffs(IR::WeightedSumOfCache *this)
{
  unsigned int v1 = (*((_DWORD *)this + 60) + 1) % *((_DWORD *)this + 56);
  *((_DWORD *)this + 60) = v1;
  if (v1) {
    return 0;
  }
  if (*((_DWORD *)this + 59) == *(_DWORD *)(*((void *)this + 23) + 256)) {
    return *((unsigned char *)this + 232) != 0;
  }
  return 1;
}

uint64_t IR::WeightedSumOfCache::canInterpolateInDimension()
{
  return IR::IRData::canInterpolateInDimension();
}

IR::IRData *IR::WeightedSumOfCache::getLatency(IR::WeightedSumOfCache *this)
{
  uint64_t v1 = *((void *)this + 23);
  uint64_t result = *(IR::IRData **)(v1 + 160);
  if (result) {
    uint64_t result = (IR::IRData *)IR::IRData::getProcessingDelay(result);
  }
  if (!*(unsigned char *)(v1 + 24)) {
    return (IR::IRData *)(*(_DWORD *)(v1 + 20) + result);
  }
  return result;
}

uint64_t *IR::WeightedSumOfCache::getUserData@<X0>(IR::WeightedSumOfCache *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = (IR::IRDataLoader *)IR::IRDataLoader::instance(this);

  return IR::IRDataLoader::getUserData(a2, v4, (IR::WeightedSumOfCache *)((char *)this + 8));
}

uint64_t IR::WeightedSumOfCache::initialize(IR::WeightedSumOfCache *this, float a2)
{
  uint64_t v3 = *((void *)this + 23);
  if (v3 && *(void *)(v3 + 160))
  {
    IR::IRDataAttributes::operator=((uint64_t)this + 8, v3 + 8);
    *((_DWORD *)this + 42) = IR::IRData::getNumFiltersPerSpatialPoint(*(IR::IRData **)(*((void *)this + 23) + 160));
    *((_DWORD *)this + 40) = IR::IRData::getFilterLength(*(IR::IRData **)(*((void *)this + 23) + 160));
    IR::IRData::getMaxDelay(*(IR::IRData **)(*((void *)this + 23) + 160));
    *((_DWORD *)this + 41) = vcvtps_u32_f32(v4);
    *((_DWORD *)this + 45) = IR::IRData::getAudioChannelLayoutTag(*(IR::IRData **)(*((void *)this + 23) + 160));
    *((_DWORD *)this + 43) = IR::IRData::getModelingDelay(*(IR::IRData **)(*((void *)this + 23) + 160));
    unint64_t v5 = *(unsigned int *)(*((void *)this + 23) + 176);
    int v7 = 0;
    std::vector<float>::resize((uint64_t)this + 200, v5, &v7);
    uint64_t result = 0;
    *((_DWORD *)this + 60) = *((_DWORD *)this + 57) % *((_DWORD *)this + 56);
    *((unsigned char *)this + 176) = 1;
  }
  else
  {
    *((void *)this + 20) = 0;
    *((void *)this + 21) = 0;
    uint64_t result = 1852793972;
    *((unsigned char *)this + 176) = 0;
  }
  return result;
}

uint64_t IR::IRDataAttributes::operator=(uint64_t a1, uint64_t a2)
{
  float v4 = *(const void **)a1;
  unint64_t v5 = *(const void **)a2;
  *(void *)a1 = *(void *)a2;
  if (v5) {
    CFRetain(v5);
  }
  if (v4) {
    CFRelease(v4);
  }
  long long v6 = *(_OWORD *)(a2 + 8);
  long long v7 = *(_OWORD *)(a2 + 24);
  long long v8 = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v8;
  *(_OWORD *)(a1 + 24) = v7;
  *(_OWORD *)(a1 + 8) = v6;
  uint64_t v9 = *(const void **)(a1 + 64);
  unsigned int v10 = *(const void **)(a2 + 64);
  *(void *)(a1 + 64) = v10;
  if (v10) {
    CFRetain(v10);
  }
  if (v9) {
    CFRelease(v9);
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  uint64_t v11 = *(const void **)(a1 + 88);
  unint64_t v12 = *(const void **)(a2 + 88);
  *(void *)(a1 + 88) = v12;
  if (v12) {
    CFRetain(v12);
  }
  if (v11) {
    CFRelease(v11);
  }
  long long v13 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 105) = *(_OWORD *)(a2 + 105);
  *(_OWORD *)(a1 + 96) = v13;
  unsigned int v14 = *(const void **)(a1 + 128);
  uint64_t v15 = *(const void **)(a2 + 128);
  *(void *)(a1 + 128) = v15;
  if (v15) {
    CFRetain(v15);
  }
  if (v14) {
    CFRelease(v14);
  }
  uint64_t v16 = *(void *)(a2 + 136);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(void *)(a1 + 136) = v16;
  return a1;
}

uint64_t IR::WeightedSumOfCache::coefficientsCanChange(IR::WeightedSumOfCache *this)
{
  return 1;
}

uint64_t IR::WeightedSumOfCache::providesCoefficients(IR::WeightedSumOfCache *this)
{
  return 1;
}

uint64_t IR::WeightedSumOfCache::type(IR::WeightedSumOfCache *this)
{
  return 5;
}

void IR::WeightedSumOfCache::~WeightedSumOfCache(IR::WeightedSumOfCache *this)
{
  *(void *)this = &unk_1F14BA538;
  uint64_t v2 = (void *)*((void *)this + 25);
  if (v2)
  {
    *((void *)this + 26) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 24);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  *(void *)this = &unk_1F14BEDB0;
  IR::IRDataAttributes::~IRDataAttributes((IR::WeightedSumOfCache *)((char *)this + 8));

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  std::__shared_weak_count *v3;

  *(void *)this = &unk_1F14BA538;
  uint64_t v2 = (void *)*((void *)this + 25);
  if (v2)
  {
    *((void *)this + 26) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 24);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  *(void *)this = &unk_1F14BEDB0;
  IR::IRDataAttributes::~IRDataAttributes((IR::WeightedSumOfCache *)((char *)this + 8));
}

double IR::WeightedSumOfCache::calculateSumOfWeights(IR::WeightedSumOfCache *this)
{
  if (!*((unsigned char *)this + 176)) {
    return 0.0;
  }
  uint64_t v1 = (const float *)*((void *)this + 25);
  vDSP_Length v2 = (uint64_t)(*((void *)this + 26) - (void)v1) >> 2;
  float __C = 0.0;
  vDSP_sve(v1, 1, &__C, v2);
  *(float *)&double result = __C;
  return result;
}

uint64_t VoiceProcessorV4::RunUplinkHardwareDSP(VoiceProcessorV4 *this, AudioBufferList *a2, AudioTimeStamp *a3)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  atomic_fetch_add((atomic_uint *volatile)this + 621, 1u);
  if (*((_DWORD *)this + 620))
  {
    float v4 = flt_1BB878F50[*((unsigned char *)this + 476) == 0];
    if (*((unsigned char *)this + 476)) {
      VoiceProcessorV2::LogIOError((uint64_t)this, v4, (float)*((unsigned int *)this + 3128), (float)*((unsigned int *)this + 3129), 0.0, "process: tryer acquire failed", a3);
    }
    else {
      VoiceProcessorV2::LogIOError((uint64_t)this, v4, (float)*((unsigned int *)this + 3128), (float)*((unsigned int *)this + 3129), 0.0, "process: not ok to process?!", a3);
    }
LABEL_5:
    CADeprecated::CAMutex::Lock((VoiceProcessorV4 *)((char *)this + 2576));
    ++*((_DWORD *)this + 3128);
    CADeprecated::CAMutex::Unlock((VoiceProcessorV4 *)((char *)this + 2576));
    uint64_t v5 = 1937006964;
    if (*((_DWORD *)this + 3128) == 1) {
      VoiceProcessorV2::LogNonTransientErrors(this, 1);
    }
    goto LABEL_94;
  }
  if (!*((unsigned char *)this + 476))
  {
    VoiceProcessorV2::LogIOError((uint64_t)this, 21.005, (float)*((unsigned int *)this + 3128), (float)*((unsigned int *)this + 3129), 0.0, "process: not ok to process?!", a3);
    goto LABEL_5;
  }
  long long v8 = (char *)this + 12936;
  if (*((unsigned char *)this + 15961))
  {
    if (*((void *)this + 1579))
    {
      double v9 = (double)mach_absolute_time() * 0.0000000416666667;
      *((double *)this + 1992) = v9;
      if (*((double *)this + 1993) == 0.0) {
        *((double *)this + 1993) = v9;
      }
    }
  }
  *((_DWORD *)this + 578) = *((_DWORD *)this + 576);
  unsigned int v10 = atomic_load((unsigned int *)this + 577);
  *((_DWORD *)this + 576) = v10;
  *((_DWORD *)this + 581) = *((_DWORD *)this + 579);
  int v11 = atomic_load((unsigned int *)this + 580);
  *((_DWORD *)this + 579) = v11;
  if (*((unsigned char *)this + 15961))
  {
    if (v11 != *((_DWORD *)this + 581)) {
      VoiceProcessorV2::PListWriteSetDeviceOrientationParameters(this, v11);
    }
    int v12 = *((_DWORD *)this + 576);
    if (v12 != *((_DWORD *)this + 578) && *((unsigned char *)this + 15961)) {
      VoiceProcessorV2::PListWriteSetUIOrientationParameters(this, v12);
    }
  }
  CADeprecated::CAMutex::Lock((VoiceProcessorV4 *)((char *)this + 2576));
  ++*((_DWORD *)this + 3128);
  CADeprecated::CAMutex::Unlock((VoiceProcessorV4 *)((char *)this + 2576));
  if (*((_DWORD *)this + 3128) == 1) {
    VoiceProcessorV2::LogNonTransientErrors(this, 1);
  }
  if (!*((unsigned char *)this + 15961))
  {
    uint64_t v15 = (unsigned int *)((char *)this + 648);
    uint64_t v16 = a2;
    goto LABEL_25;
  }
  unsigned char *v8 = 1;
  unsigned int v14 = (VoiceProcessorV2 *)*((void *)this + 1901);
  if (v14)
  {
    uint64_t v15 = (unsigned int *)((char *)this + 648);
    VoiceProcessorV2::InjectionOrAdditionFilesCopyPreInjectionABL(v14, a2, v13);
    uint64_t v16 = (AudioBufferList *)*((void *)this + 1901);
LABEL_25:
    UInt32 mDataByteSize = v16->mBuffers[0].mDataByteSize;
    unsigned int v18 = *v15;
    goto LABEL_27;
  }
  UInt32 mDataByteSize = a2->mBuffers[0].mDataByteSize;
  unsigned int v18 = *((_DWORD *)this + 162);
LABEL_27:
  unsigned int v19 = mDataByteSize / v18;
  unsigned int v56 = 0;
  uint64_t v5 = VoiceProcessorV2::FrontEndBlockSizeCheck(this, 0, mDataByteSize / v18, *((_DWORD *)this + 124), a2, &v56);
  if (v5) {
    goto LABEL_94;
  }
  if (*((unsigned char *)this + 15961))
  {
    uint64_t v21 = (AudioBufferList *)*((void *)this + 1901);
    uint64_t v22 = v56;
    if (v21)
    {
      unsigned int v23 = v56;
      if (!v56) {
        unsigned int v23 = *((_DWORD *)this + 124);
      }
      VoiceProcessorV2::InjectionFilesReadSignal(this, 4, v23, v21);
      uint64_t v24 = v22;
      if (!v22) {
        uint64_t v24 = *((unsigned int *)this + 124);
      }
      uint64_t v25 = (const AudioBufferList *)*((void *)this + 1901);
      if (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962))
      {
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 1u, v24, v25, a3);
        uint64_t v25 = (const AudioBufferList *)*((void *)this + 1901);
      }
      uint64_t v26 = v22;
      if (!v22) {
        uint64_t v26 = *((unsigned int *)this + 124);
      }
      uint64_t v27 = *((void *)this + 2002);
      if (AudioIssueDetectorLibraryLoader(void)::once != -1)
      {
        uint64_t v54 = *((void *)this + 2002);
        unsigned int v52 = v26;
        vDSP_Length v51 = v25;
        dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_7979);
        uint64_t v27 = v54;
        uint64_t v25 = v51;
        uint64_t v26 = v52;
      }
      if (AudioIssueDetectorLibraryLoader(void)::libSym) {
        goto LABEL_53;
      }
    }
  }
  else
  {
    uint64_t v22 = v56;
    uint64_t v28 = v56;
    if (!v56) {
      uint64_t v28 = *((unsigned int *)this + 124);
    }
    if (*((unsigned char *)this + 15962)) {
      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 1u, v28, a2, a3);
    }
    uint64_t v26 = v22;
    if (!v22) {
      uint64_t v26 = *((unsigned int *)this + 124);
    }
    uint64_t v27 = *((void *)this + 2002);
    if (AudioIssueDetectorLibraryLoader(void)::once != -1)
    {
      uint64_t v55 = *((void *)this + 2002);
      unsigned int v53 = v26;
      dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_7979);
      uint64_t v27 = v55;
      uint64_t v26 = v53;
    }
    if (AudioIssueDetectorLibraryLoader(void)::libSym)
    {
      uint64_t v25 = a2;
LABEL_53:
      AudioIssueDetectorLibraryLoader(void)::libSym(v27, 1, 0, v25, v26, a3);
      LODWORD(v22) = v56;
    }
  }
  if (v22)
  {
    unint64_t v29 = (_DWORD *)*((void *)this + 129);
    if (*v29)
    {
      unint64_t v30 = 0;
      size_t v31 = 4 * v22;
      uint64_t v32 = 4;
      do
      {
        bzero(*(void **)&v29[v32], v31);
        ++v30;
        unint64_t v29 = (_DWORD *)*((void *)this + 129);
        v32 += 4;
      }
      while (v30 < *v29);
    }
    goto LABEL_64;
  }
  uint64_t v33 = (_OWORD *)((char *)this + 624);
  if (!*((unsigned char *)this + 15961))
  {
    long long v37 = *((_OWORD *)this + 40);
    *(_OWORD *)int buf = *v33;
    *(_OWORD *)&_OWORD buf[16] = v37;
    *(void *)&uint8_t buf[32] = *((void *)this + 82);
    uint64_t v36 = VoiceProcessorV2::FrontEndFormatConverter(this, (const CAStreamBasicDescription *)buf, *((_DWORD *)this + 105), a2, v19, *((AudioBufferList **)this + 129), 1);
LABEL_63:
    uint64_t v5 = v36;
    if (v36) {
      goto LABEL_94;
    }
    goto LABEL_64;
  }
  uint64_t v34 = (const AudioBufferList *)*((void *)this + 1901);
  if (v34)
  {
    long long v35 = *((_OWORD *)this + 40);
    *(_OWORD *)int buf = *v33;
    *(_OWORD *)&_OWORD buf[16] = v35;
    *(void *)&uint8_t buf[32] = *((void *)this + 82);
    uint64_t v36 = VoiceProcessorV2::FrontEndFormatConverter(this, (const CAStreamBasicDescription *)buf, *((_DWORD *)this + 105), v34, v19, *((AudioBufferList **)this + 129), 1);
    goto LABEL_63;
  }
LABEL_64:
  if (!*((unsigned char *)this + 1689))
  {
    *((unsigned char *)this + 1689) = 1;
    double mSampleTime = a3->mSampleTime;
    *((void *)this + 215) = *(void *)&a3->mSampleTime;
    *((double *)this + 213) = mSampleTime;
    if (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)) {
      VoiceProcessorV2::WriteTSOverload((std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)this, 0.0, mSampleTime, 1);
    }
    *((_OWORD *)this + 111) = 0u;
    *((_OWORD *)this + 110) = 0u;
    *((_OWORD *)this + 109) = 0u;
    *((_OWORD *)this + 108) = 0u;
    *((_DWORD *)this + 478) = 0;
  }
  double v39 = *((double *)this + 213);
  double v40 = a3->mSampleTime;
  if (v39 == a3->mSampleTime)
  {
    *((void *)this + 214) = 0;
  }
  else
  {
    if (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962))
    {
      VoiceProcessorV2::WriteTSOverload((std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)this, v39, v40, 1);
      double v40 = a3->mSampleTime;
      double v39 = *((double *)this + 213);
    }
    *((double *)this + 214) = v40 - v39;
    if (v40 < v39)
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      BOOL v41 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        vDSP_Length v42 = (*v41 ? *v41 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
        {
          uint64_t v43 = *((void *)this + 213);
          Float64 v44 = a3->mSampleTime;
          UInt64 mHostTime = a3->mHostTime;
          Float64 mRateScalar = a3->mRateScalar;
          AudioTimeStampFlags mFlags = a3->mFlags;
          *(_DWORD *)int buf = 136316674;
          *(void *)&uint8_t buf[4] = "vpProcessUplink_v4.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 159;
          *(_WORD *)&buf[18] = 2048;
          *(void *)&buf[20] = v43;
          *(_WORD *)&unsigned char buf[28] = 2048;
          *(Float64 *)&unsigned char buf[30] = v44;
          *(_WORD *)&buf[38] = 2048;
          UInt64 v58 = mHostTime;
          __int16 v59 = 2048;
          Float64 v60 = mRateScalar;
          __int16 v61 = 1024;
          AudioTimeStampFlags v62 = mFlags;
          _os_log_impl(&dword_1BB0CE000, v42, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> mic sample time jumped backwards, expected sample time: %.2lf, input sample time: %.2lf, input host time: %lld, input rate scalar: %.2lf, input flag: %d", buf, 0x40u);
        }
      }
      uint64_t v48 = (int *)*((void *)this + 1578);
      if (v48 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log(v48, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v4/vpProcessUplink_v4.cpp", 159, "RunUplinkHardwareDSP", "mic sample time jumped backwards, expected sample time: %.2lf, input sample time: %.2lf, input host time: %lld, input rate scalar: %.2lf, input flag: %d", *((double *)this + 213), a3->mSampleTime, a3->mHostTime, a3->mRateScalar, a3->mFlags);
      }
      VoiceProcessorV2::LogIOError((uint64_t)this, 21.008, (float)*((unsigned int *)this + 3128), 0.0, 0.0, "mic sample time jumped backwards");
      double v40 = a3->mSampleTime;
    }
  }
  LODWORD(v39) = *((_DWORD *)this + 124);
  *((double *)this + 213) = v40 + (double)*(unint64_t *)&v39;
  VoiceProcessorV2::LoadMatchingReferenceForMicSignalAndFillTsMic(this, v20, a3->mSampleTime);
  float v49 = *((float *)this + 350);
  *((unsigned char *)this + 1404) = v49 != 0.0;
  if (v49 != 0.0) {
    VoiceProcessorV2::PreSRCMicClipDetection(this);
  }
  uint64_t v5 = 0;
LABEL_94:
  atomic_fetch_add((atomic_uint *volatile)this + 621, 0xFFFFFFFF);
  return v5;
}

void sub_1BB4BB478(_Unwind_Exception *a1)
{
  atomic_fetch_add((atomic_uint *volatile)(v1 + 2484), 0xFFFFFFFF);
  _Unwind_Resume(a1);
}

void *___Z31AudioIssueDetectorLibraryLoaderv_block_invoke_7988()
{
  CFDictionaryRef v0 = dlopen("/usr/lib/libAudioIssueDetector.dylib", 1);
  if (v0 || (CFDictionaryRef v0 = dlopen("/usr/local/lib/libAudioIssueDetector.dylib", 1)) != 0)
  {
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = dlsym(v0, "AudioIssueDetectorCreate");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void))dlsym(v0, "AudioIssueDetectorInitialize");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void))dlsym(v0, "AudioIssueDetectorDispose");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void, void, void, void, void))dlsym(v0, "AudioIssueDetectorSetNodeFormat");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t)dlsym(v0, "AudioIssueDetectorSetNodeFormatWithDirection");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t)dlsym(v0, "AudioIssueDetectorReset");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void, void, void, void, void, void))dlsym(v0, "AudioIssueDetectorAnalyzeBuffer");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = dlsym(v0, "AudioIssueDetectorUpdateReportingSessions");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t)dlsym(v0, "AudioIssueDetectorRemoveNode");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = dlsym(v0, "AudioIssueDetectorSetUplinkMute");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = dlsym(v0, "AudioIssueDetectorSetDownlinkVolume");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = dlsym(v0, "AudioIssueDetectorSetRouteSpecificDownlinkGainAdjustment");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t)dlsym(v0, "AudioIssueDetectorSetSmartCaseMicMute");
  }
  double result = dlopen("/System/Library/Frameworks/AudioToolbox.framework/libAudioDSP.dylib", 1);
  if (result)
  {
    double result = dlsym(result, "RegisterAudioUnits_Analyzer");
    if (result)
    {
      return (void *)((uint64_t (*)(void))result)();
    }
  }
  return result;
}

uint64_t VoiceProcessorV4::RunUplinkEchoDSP(VoiceProcessorV4 *this, const AudioTimeStamp *a2)
{
  return (*(uint64_t (**)(VoiceProcessorV4 *, const AudioTimeStamp *))(*(void *)this + 696))(this, a2);
}

uint64_t VoiceProcessorV4::RunUplinkDynamicsDSP(VoiceProcessorV4 *this, AudioBufferList *ioData, AudioTimeStamp *a3, uint64_t a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  long long v6 = (char *)this + 15961;
  if ((*((unsigned char *)this + 4672) & 0x20) != 0 && (*((unsigned char *)this + 4688) & 0x20) != 0)
  {
    long long v7 = (OpaqueAudioComponentInstance *)*((void *)this + 416);
    if (v7)
    {
      ioActionFlags.UInt32 mNumberBuffers = 512;
      AudioUnitProcess(v7, &ioActionFlags.mNumberBuffers, a3, a4, ioData);
      if (*(_WORD *)v6) {
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x30u, a4, ioData, a3);
      }
    }
  }
  if (*v6)
  {
    *(void *)AudioUnitParameterValue outValue = 0;
    uint64_t v10 = *((void *)this + 583);
    if ((v10 & 0x2000000000000000) != 0 && (*((unsigned char *)this + 4687) & 0x20) != 0)
    {
      int v11 = (OpaqueAudioComponentInstance *)*((void *)this + 408);
      if (v11)
      {
        AudioUnitGetParameter(v11, 2u, 0, 0, outValue);
        uint64_t v10 = *((void *)this + 583);
      }
    }
    if ((v10 & 0x100000000000000) != 0
      && (*((unsigned char *)this + 4687) & 1) != 0
      && (int v12 = (OpaqueAudioComponentInstance *)*((void *)this + 403)) != 0)
    {
      AudioUnitParameterID v13 = 9;
    }
    else
    {
      if ((v10 & 0x40000000000000) == 0
        || (*((unsigned char *)this + 4686) & 0x40) == 0
        || (int v12 = (OpaqueAudioComponentInstance *)*((void *)this + 401)) == 0)
      {
LABEL_20:
        *(void *)&ioActionFlags.UInt32 mNumberBuffers = 1;
        *(void *)&ioActionFlags.mBuffers[0].mNumberChannels = 0x800000001;
        ioActionFlags.mBuffers[0].mData = outValue;
        if (*v6 || v6[1]) {
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x5Au, 2, &ioActionFlags, a3);
        }
        return 0;
      }
      AudioUnitParameterID v13 = 2;
    }
    AudioUnitGetParameter(v12, v13, 0, 0, &outValue[1]);
    goto LABEL_20;
  }
  return 0;
}

uint64_t VoiceProcessorV4::ProcessDSPChain_Uplink(uint64_t this, AudioTimeStamp *a2)
{
  uint64_t v3 = (VoiceProcessorV4 *)this;
  uint64_t v233 = *MEMORY[0x1E4F143B8];
  size_t v4 = **(unsigned int **)(this + 1080);
  if (v4) {
    bzero(*(void **)(this + 1408), v4);
  }
  if (*((unsigned char *)v3 + 1404)) {
    VoiceProcessorV2::PostSRCMicClipDetection(v3);
  }
  if (!*((unsigned char *)v3 + 2083)) {
    VoiceProcessorV2::GetAbsoluteChIndexForEpmicAndApplyPreDigitalGain(v3);
  }
  int v5 = *((unsigned __int8 *)v3 + 15961);
  if (*((unsigned char *)v3 + 15961)
    && (VoiceProcessorV2::InjectionFilesReadSignal(v3, 7, *((_DWORD *)v3 + 127), *((AudioBufferList **)v3 + 134)),
        int v5 = *((unsigned __int8 *)v3 + 15961),
        *((unsigned char *)v3 + 15961))
    && (VoiceProcessorV2::InjectionFilesReadSignal(v3, 8, *((_DWORD *)v3 + 127), *((AudioBufferList **)v3 + 135)),
        int v5 = *((unsigned __int8 *)v3 + 15961),
        *((unsigned char *)v3 + 15961))
    && *((unsigned char *)v3 + 15960)
    || *((unsigned char *)v3 + 15963))
  {
    bzero(*(void **)(*((void *)v3 + 134) + 16), *(unsigned int *)(*((void *)v3 + 134) + 12));
    int v5 = *((unsigned __int8 *)v3 + 15961);
  }
  uint64_t v6 = *((unsigned int *)v3 + 127);
  if (v5 || *((unsigned char *)v3 + 15962))
  {
    this = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 4u, v6, *((const AudioBufferList **)v3 + 134), a2);
    uint64_t v6 = *((unsigned int *)v3 + 127);
    long long v7 = (const AudioBufferList *)*((void *)v3 + 135);
    if (*((unsigned char *)v3 + 15961)) {
      goto LABEL_19;
    }
  }
  else
  {
    long long v7 = (const AudioBufferList *)*((void *)v3 + 135);
  }
  if (!*((unsigned char *)v3 + 15962))
  {
    long long v8 = (const AudioBufferList *)*((void *)v3 + 177);
    goto LABEL_22;
  }
LABEL_19:
  this = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 5u, v6, v7, a2);
  uint64_t v6 = *((unsigned int *)v3 + 127);
  long long v8 = (const AudioBufferList *)*((void *)v3 + 177);
  if (*((unsigned char *)v3 + 15961))
  {
LABEL_23:
    this = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x4Au, v6, v8, a2);
    goto LABEL_24;
  }
LABEL_22:
  if (*((unsigned char *)v3 + 15962)) {
    goto LABEL_23;
  }
LABEL_24:
  AudioUnitParameterValue v219 = 0.0;
  if (!*((unsigned char *)v3 + 2083) && !*((unsigned char *)v3 + 2085) && !*((unsigned char *)v3 + 472))
  {
    uint64_t v22 = *((void *)v3 + 583);
    if (v22 || *((unsigned char *)v3 + 4672))
    {
      AudioUnitRenderActionFlags v218 = 0;
      *((void *)v3 + 2143) = 0;
      *((void *)v3 + 2144) = 0;
      *((void *)v3 + 2142) = 0;
      *((_DWORD *)v3 + 4284) = 1;
      *(_OWORD *)((char *)v3 + 17144) = *(_OWORD *)(*((void *)v3 + 134) + 8);
      if (v22 & 1) != 0 && (*((unsigned char *)v3 + 4680))
      {
        this = *((void *)v3 + 347);
        if (this)
        {
          long long v23 = *(_OWORD *)&a2->mRateScalar;
          *(_OWORD *)&buf.double mSampleTime = *(_OWORD *)&a2->mSampleTime;
          *(_OWORD *)&buf.Float64 mRateScalar = v23;
          long long v24 = *(_OWORD *)&a2->mSMPTETime.mHours;
          *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
          *(_OWORD *)&buf.mSMPTETime.mHours = v24;
          AudioUnitRenderActionFlags v218 = 512;
          this = AudioUnitProcess((AudioUnit)this, &v218, &buf, *((_DWORD *)v3 + 127), *((AudioBufferList **)v3 + 135));
        }
      }
      MEMORY[0x1F4188790](this);
      uint64_t v26 = (AudioBufferList *)&v208[-((v25 + 15) & 0x3FFFFFFFF0)];
      uint64_t v27 = (_DWORD *)*((void *)v3 + 135);
      if (*v27)
      {
        unint64_t v28 = 0;
        uint64_t v29 = 2;
        unint64_t v30 = v26;
        do
        {
          *(void *)&v30->UInt32 mNumberBuffers = 0;
          *(void *)&v30->mBuffers[0].mNumberChannels = 0;
          v30->mBuffers[0].mData = 0;
          v30->UInt32 mNumberBuffers = 1;
          v30->mBuffers[0] = *(AudioBuffer *)&v27[v29];
          ++v28;
          v29 += 4;
          ++v30;
        }
        while (v28 < *v27);
      }
      uint64_t v31 = *((void *)v3 + 583);
      if ((v31 & 2) != 0 && (*((unsigned char *)v3 + 4680) & 2) != 0)
      {
        uint64_t v32 = (OpaqueAudioComponentInstance *)*((void *)v3 + 348);
        if (v32)
        {
          long long v33 = *(_OWORD *)&a2->mRateScalar;
          *(_OWORD *)&buf.double mSampleTime = *(_OWORD *)&a2->mSampleTime;
          *(_OWORD *)&buf.Float64 mRateScalar = v33;
          long long v34 = *(_OWORD *)&a2->mSMPTETime.mHours;
          *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
          *(_OWORD *)&buf.mSMPTETime.mHours = v34;
          AudioUnitRenderActionFlags v218 = 512;
          AudioUnitProcess(v32, &v218, &buf, *((_DWORD *)v3 + 127), v26);
          if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x4Bu, *((unsigned int *)v3 + 127), v26, &buf);
          }
          CADeprecated::CABufferList::CopyDataFrom(*((void **)v3 + 138), v26);
          uint64_t v31 = *((void *)v3 + 583);
        }
      }
      if ((v31 & 4) != 0 && (*((unsigned char *)v3 + 4680) & 4) != 0)
      {
        long long v35 = (OpaqueAudioComponentInstance *)*((void *)v3 + 349);
        if (v35)
        {
          long long v36 = *(_OWORD *)&a2->mRateScalar;
          *(_OWORD *)&buf.double mSampleTime = *(_OWORD *)&a2->mSampleTime;
          *(_OWORD *)&buf.Float64 mRateScalar = v36;
          long long v37 = *(_OWORD *)&a2->mSMPTETime.mHours;
          *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
          *(_OWORD *)&buf.mSMPTETime.mHours = v37;
          AudioUnitRenderActionFlags v218 = 512;
          AudioUnitProcess(v35, &v218, &buf, *((_DWORD *)v3 + 127), v26 + 1);
          if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x4Cu, *((unsigned int *)v3 + 127), v26 + 1, &buf);
          }
          CADeprecated::CABufferList::CopyDataFrom(*((void **)v3 + 139), v26 + 1);
          uint64_t v31 = *((void *)v3 + 583);
        }
      }
      if ((v31 & 8) != 0 && (*((unsigned char *)v3 + 4680) & 8) != 0)
      {
        float v38 = (OpaqueAudioComponentInstance *)*((void *)v3 + 350);
        if (v38)
        {
          long long v39 = *(_OWORD *)&a2->mRateScalar;
          *(_OWORD *)&buf.double mSampleTime = *(_OWORD *)&a2->mSampleTime;
          *(_OWORD *)&buf.Float64 mRateScalar = v39;
          long long v40 = *(_OWORD *)&a2->mSMPTETime.mHours;
          *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
          *(_OWORD *)&buf.mSMPTETime.mHours = v40;
          AudioUnitRenderActionFlags v218 = 512;
          AudioUnitProcess(v38, &v218, &buf, *((_DWORD *)v3 + 127), v26 + 2);
          if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x4Du, *((unsigned int *)v3 + 127), v26 + 2, &buf);
          }
          CADeprecated::CABufferList::CopyDataFrom(*((void **)v3 + 140), v26 + 2);
          uint64_t v31 = *((void *)v3 + 583);
        }
      }
      if ((v31 & 0x10) != 0 && (*((unsigned char *)v3 + 4680) & 0x10) != 0)
      {
        BOOL v41 = (OpaqueAudioComponentInstance *)*((void *)v3 + 351);
        if (v41)
        {
          long long v42 = *(_OWORD *)&a2->mRateScalar;
          *(_OWORD *)&buf.double mSampleTime = *(_OWORD *)&a2->mSampleTime;
          *(_OWORD *)&buf.Float64 mRateScalar = v42;
          long long v43 = *(_OWORD *)&a2->mSMPTETime.mHours;
          *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
          *(_OWORD *)&buf.mSMPTETime.mHours = v43;
          AudioUnitRenderActionFlags v218 = 512;
          Float64 v44 = v26 + 3;
          AudioUnitProcess(v41, &v218, &buf, *((_DWORD *)v3 + 127), v44);
          if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x4Eu, *((unsigned int *)v3 + 127), v44, &buf);
          }
          CADeprecated::CABufferList::CopyDataFrom(*((void **)v3 + 141), v44);
        }
      }
      uint64_t v45 = *((void *)v3 + 135);
      unsigned int v46 = *(_DWORD *)v45;
      uint64_t v210 = v208;
      if (v46 < 3)
      {
        *(_OWORD *)((char *)v3 + 16952) = *(_OWORD *)(v45 + 8);
        unsigned int v50 = 0;
        unsigned int v49 = 0;
        if (*(_DWORD *)v45 < 2u)
        {
          unsigned int v48 = 0;
          unsigned int v47 = 0;
        }
        else
        {
          unsigned int v47 = 0;
          *((_OWORD *)v3 + 1061) = *(_OWORD *)(v45 + 24);
          unsigned int v48 = 1;
        }
      }
      else
      {
        if (v46 == 3 || *((_DWORD *)v3 + 3114) != 2)
        {
          unsigned int v50 = 0;
          unsigned int v49 = 0;
          unsigned int v47 = 1;
          unsigned int v48 = 2;
        }
        else
        {
          unsigned int v47 = 0;
          *(_OWORD *)((char *)v3 + 17000) = *(_OWORD *)(v45 + 40);
          *((_OWORD *)v3 + 1064) = *(_OWORD *)(v45 + 56);
          unsigned int v48 = 1;
          unsigned int v49 = 2;
          unsigned int v50 = 3;
        }
        uint64_t v51 = v45 + 8;
        *(_OWORD *)((char *)v3 + 16952) = *(_OWORD *)(v51 + 16 * v47);
        *((_OWORD *)v3 + 1061) = *(_OWORD *)(v51 + 16 * v48);
      }
      uint64_t v52 = *((void *)v3 + 583);
      if ((v52 & 0x80) != 0 && (*((unsigned char *)v3 + 4680) & 0x80) != 0)
      {
        unsigned int v53 = (OpaqueAudioComponentInstance *)*((void *)v3 + 354);
        if (v53)
        {
          long long v54 = *(_OWORD *)&a2->mRateScalar;
          *(_OWORD *)&buf.double mSampleTime = *(_OWORD *)&a2->mSampleTime;
          *(_OWORD *)&buf.Float64 mRateScalar = v54;
          long long v55 = *(_OWORD *)&a2->mSMPTETime.mHours;
          *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
          *(_OWORD *)&buf.mSMPTETime.mHours = v55;
          AudioUnitRenderActionFlags v218 = 512;
          AudioUnitProcess(v53, &v218, &buf, *((_DWORD *)v3 + 127), (AudioBufferList *)v3 + 706);
          if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 6u, *((unsigned int *)v3 + 127), (const AudioBufferList *)v3 + 706, &buf);
          }
          uint64_t v52 = *((void *)v3 + 583);
        }
      }
      if (v52 & 0x100) != 0 && (*((unsigned char *)v3 + 4681))
      {
        unsigned int v56 = (OpaqueAudioComponentInstance *)*((void *)v3 + 355);
        if (v56)
        {
          long long v57 = *(_OWORD *)&a2->mRateScalar;
          *(_OWORD *)&buf.double mSampleTime = *(_OWORD *)&a2->mSampleTime;
          *(_OWORD *)&buf.Float64 mRateScalar = v57;
          long long v58 = *(_OWORD *)&a2->mSMPTETime.mHours;
          *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
          *(_OWORD *)&buf.mSMPTETime.mHours = v58;
          AudioUnitRenderActionFlags v218 = 512;
          AudioUnitProcess(v56, &v218, &buf, *((_DWORD *)v3 + 127), (AudioBufferList *)v3 + 707);
          if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 7u, *((unsigned int *)v3 + 127), (const AudioBufferList *)v3 + 707, &buf);
          }
          uint64_t v52 = *((void *)v3 + 583);
        }
      }
      if ((v52 & 0x400) != 0 && (*((unsigned char *)v3 + 4681) & 4) != 0)
      {
        __int16 v59 = (OpaqueAudioComponentInstance *)*((void *)v3 + 357);
        if (v59)
        {
          long long v60 = *(_OWORD *)&a2->mRateScalar;
          *(_OWORD *)&buf.double mSampleTime = *(_OWORD *)&a2->mSampleTime;
          *(_OWORD *)&buf.Float64 mRateScalar = v60;
          long long v61 = *(_OWORD *)&a2->mSMPTETime.mHours;
          *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
          *(_OWORD *)&buf.mSMPTETime.mHours = v61;
          AudioUnitRenderActionFlags v218 = 512;
          AudioUnitProcess(v59, &v218, &buf, *((_DWORD *)v3 + 127), (AudioBufferList *)v3 + 709);
          if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 9u, *((unsigned int *)v3 + 127), (const AudioBufferList *)v3 + 709, &buf);
          }
          uint64_t v52 = *((void *)v3 + 583);
        }
      }
      BOOL v217 = 0;
      long long v62 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&buf.double mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&buf.Float64 mRateScalar = v62;
      long long v63 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&buf.mSMPTETime.mHours = v63;
      if ((v52 & 0x2000) != 0 && (*((unsigned char *)v3 + 4681) & 0x20) != 0 && *((void *)v3 + 360))
      {
        vDSP_Length v64 = (AudioUnitParameterID **)*((void *)v3 + 2115);
        if (*((AudioUnitParameterID ***)v3 + 2116) == v64) {
          goto LABEL_477;
        }
        ECApplicator::apply(*v64, &buf, v47, &v217, (float *)v3 + 1048, (float *)v3 + 1052, (float *)v3 + 1056, (float *)v3 + 1060, (float *)v3 + 1064, (float *)v3 + 1068);
        uint64_t v67 = *((unsigned int *)v3 + 127);
        if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
        {
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x1Cu, v67, (const AudioBufferList *)v3 + 706, &buf);
          uint64_t v67 = *((unsigned int *)v3 + 127);
          uint64_t v68 = (const AudioBufferList *)*((void *)v3 + 419);
          if (*((unsigned char *)v3 + 15961))
          {
LABEL_163:
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0xCu, v67, v68, &buf);
            goto LABEL_153;
          }
        }
        else
        {
          uint64_t v68 = (const AudioBufferList *)*((void *)v3 + 419);
        }
        if (*((unsigned char *)v3 + 15962)) {
          goto LABEL_163;
        }
      }
      else
      {
        unsigned int v69 = 0;
        while (((*((_DWORD *)v3 + 116) >> v69) & 1) == 0)
        {
          if (++v69 == 32)
          {
            unsigned int v69 = 33;
            break;
          }
        }
        if (v69 >= **((_DWORD **)v3 + 135))
        {
          unsigned int v209 = v48;
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          vDSP_Length v70 = CALog::LogObjIfEnabled(1, VPLogScope(void)::scope);
          if (v70)
          {
            uint64_t v71 = v70;
            if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
            {
              int v72 = **((_DWORD **)v3 + 135);
              LODWORD(v231.mSampleTime) = 136315906;
              *(void *)((char *)&v231.mSampleTime + 4) = "vpProcessUplink_v4.cpp";
              WORD2(v231.mHostTime) = 1024;
              *(_DWORD *)((char *)&v231.mHostTime + 6) = 476;
              WORD1(v231.mRateScalar) = 1024;
              HIDWORD(v231.mRateScalar) = v69;
              LOWORD(v231.mWordClockTime) = 1024;
              *(_DWORD *)((char *)&v231.mWordClockTime + 2) = v72;
              _os_log_impl(&dword_1BB0CE000, v71, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> ERROR: mPrimaryEpMicIndex is %d, but epmic only has %d channels", (uint8_t *)&v231, 0x1Eu);
            }
          }
          unsigned __int8 v73 = (int *)*((void *)v3 + 1578);
          if (v73 && (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            CALegacyLog::log(v73, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v4/vpProcessUplink_v4.cpp", 476, "ProcessDSPChain_Uplink", "ERROR: mPrimaryEpMicIndex is %d, but epmic only has %d channels", v69, **((_DWORD **)v3 + 135));
          }
          unsigned int v69 = 0;
          unsigned int v48 = v209;
        }
        uint64_t v74 = *((void *)v3 + 135) + 16 * v69;
        memcpy(*(void **)(*((void *)v3 + 136) + 16), *(const void **)(v74 + 16), *(unsigned int *)(v74 + 12));
      }
LABEL_153:
      BOOL v216 = 0;
      if ((*((unsigned char *)v3 + 4665) & 0x40) != 0 && (*((unsigned char *)v3 + 4681) & 0x40) != 0 && *((void *)v3 + 361))
      {
        uint64_t v75 = *((void *)v3 + 2115);
        if ((unint64_t)(*((void *)v3 + 2116) - v75) <= 8) {
          goto LABEL_477;
        }
        ECApplicator::apply(*(AudioUnitParameterID **)(v75 + 8), &buf, v48, &v216, (float *)v3 + 1049, (float *)v3 + 1053, (float *)v3 + 1057, (float *)v3 + 1061, (float *)v3 + 1065, (float *)v3 + 1069);
        uint64_t v76 = *((unsigned int *)v3 + 127);
        if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
        {
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x1Du, v76, (const AudioBufferList *)v3 + 707, &buf);
          uint64_t v76 = *((unsigned int *)v3 + 127);
          float v77 = (const AudioBufferList *)*((void *)v3 + 420);
          if (*((unsigned char *)v3 + 15961))
          {
LABEL_166:
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0xDu, v76, v77, &buf);
            goto LABEL_167;
          }
        }
        else
        {
          float v77 = (const AudioBufferList *)*((void *)v3 + 420);
        }
        if (*((unsigned char *)v3 + 15962)) {
          goto LABEL_166;
        }
      }
LABEL_167:
      BOOL v215 = 0;
      if ((*((unsigned char *)v3 + 4665) & 0x80) != 0 && (*((unsigned char *)v3 + 4681) & 0x80) != 0 && *((void *)v3 + 362))
      {
        uint64_t v78 = *((void *)v3 + 2115);
        if ((unint64_t)(*((void *)v3 + 2116) - v78) <= 0x10) {
          goto LABEL_477;
        }
        ECApplicator::apply(*(AudioUnitParameterID **)(v78 + 16), &buf, v49, &v215, (float *)v3 + 1050, (float *)v3 + 1054, (float *)v3 + 1058, (float *)v3 + 1062, (float *)v3 + 1066, (float *)v3 + 1070);
        uint64_t v79 = *((unsigned int *)v3 + 127);
        if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
        {
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x1Eu, v79, (const AudioBufferList *)v3 + 708, &buf);
          uint64_t v79 = *((unsigned int *)v3 + 127);
          float v80 = (const AudioBufferList *)*((void *)v3 + 422);
          if (*((unsigned char *)v3 + 15961))
          {
LABEL_177:
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0xEu, v79, v80, &buf);
            goto LABEL_178;
          }
        }
        else
        {
          float v80 = (const AudioBufferList *)*((void *)v3 + 422);
        }
        if (*((unsigned char *)v3 + 15962)) {
          goto LABEL_177;
        }
      }
LABEL_178:
      BOOL v214 = 0;
      if ((*((unsigned char *)v3 + 4666) & 1) == 0 || (*((unsigned char *)v3 + 4682) & 1) == 0 || !*((void *)v3 + 363))
      {
LABEL_189:
        int v84 = (float *)(*(void *)(*((void *)v3 + 511) + 16) + 4 * *((unsigned int *)v3 + 127));
        v213.realp = *(float **)(*((void *)v3 + 511) + 16);
        v213.imagp = v84;
        uint64_t v85 = (VPTimeFreqConverter *)*((void *)v3 + 519);
        if (v85) {
          VPTimeFreqConverter::Analyze(v85, *((const float **)v3 + 2144), &v213);
        }
        if ((*((unsigned char *)v3 + 4665) & 0x20) != 0 && (*((unsigned char *)v3 + 4681) & 0x20) != 0 && *((void *)v3 + 360))
        {
          uint64_t v86 = *((unsigned int *)v3 + 127);
          v213.realp = *(float **)(*((void *)v3 + 429) + 16);
          v213.imagp = &v213.realp[v86];
          uint64_t v87 = (VPTimeFreqConverter *)*((void *)v3 + 513);
          if (v87)
          {
            VPTimeFreqConverter::Analyze(v87, *((const float **)v3 + 2120), &v213);
            uint64_t v86 = *((unsigned int *)v3 + 127);
          }
          v213.realp = *(float **)(*((void *)v3 + 505) + 16);
          v213.imagp = &v213.realp[v86];
          int v88 = (VPTimeFreqConverter *)*((void *)v3 + 517);
          if (v88)
          {
            VPTimeFreqConverter::Analyze(v88, *(const float **)(*((void *)v3 + 419) + 16), &v213);
            uint64_t v86 = *((unsigned int *)v3 + 127);
          }
          if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x12u, v86, *((const AudioBufferList **)v3 + 429), &buf);
          }
        }
        if ((*((unsigned char *)v3 + 4665) & 0x40) != 0 && (*((unsigned char *)v3 + 4681) & 0x40) != 0 && *((void *)v3 + 361))
        {
          uint64_t v89 = *((unsigned int *)v3 + 127);
          v213.realp = *(float **)(*((void *)v3 + 506) + 16);
          v213.imagp = &v213.realp[v89];
          float v90 = (VPTimeFreqConverter *)*((void *)v3 + 514);
          if (v90)
          {
            VPTimeFreqConverter::Analyze(v90, *((const float **)v3 + 2123), &v213);
            uint64_t v89 = *((unsigned int *)v3 + 127);
          }
          v213.realp = *(float **)(*((void *)v3 + 505) + 32);
          v213.imagp = &v213.realp[v89];
          int v91 = (VPTimeFreqConverter *)*((void *)v3 + 518);
          if (v91)
          {
            VPTimeFreqConverter::Analyze(v91, *(const float **)(*((void *)v3 + 420) + 16), &v213);
            uint64_t v89 = *((unsigned int *)v3 + 127);
          }
          if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x13u, v89, *((const AudioBufferList **)v3 + 506), &buf);
          }
        }
        if ((*((unsigned char *)v3 + 4666) & 1) != 0 && (*((unsigned char *)v3 + 4682) & 1) != 0 && *((void *)v3 + 363))
        {
          uint64_t v92 = *((unsigned int *)v3 + 127);
          v213.realp = *(float **)(*((void *)v3 + 507) + 16);
          v213.imagp = &v213.realp[v92];
          float v93 = (VPTimeFreqConverter *)*((void *)v3 + 516);
          if (v93)
          {
            VPTimeFreqConverter::Analyze(v93, *((const float **)v3 + 2129), &v213);
            uint64_t v92 = *((unsigned int *)v3 + 127);
          }
          v213.realp = *(float **)(*((void *)v3 + 505) + 64);
          v213.imagp = &v213.realp[v92];
          uint64_t v94 = (VPTimeFreqConverter *)*((void *)v3 + 2113);
          if (v94)
          {
            VPTimeFreqConverter::Analyze(v94, *(const float **)(*((void *)v3 + 421) + 16), &v213);
            uint64_t v92 = *((unsigned int *)v3 + 127);
          }
          if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x15u, v92, *((const AudioBufferList **)v3 + 507), &buf);
          }
        }
        uint64_t v95 = *((void *)v3 + 583);
        if ((v95 & 0x40000000000) == 0
          || (*((unsigned char *)v3 + 4685) & 4) == 0
          || (size_t v96 = (OpaqueAudioComponentInstance *)*((void *)v3 + 389)) == 0)
        {
LABEL_235:
          char v212 = 0;
          if ((v95 & 0x40000000) != 0 && (*((unsigned char *)v3 + 4683) & 0x40) != 0 && *((void *)v3 + 377))
          {
            BOOL v106 = 1;
            int v107 = 1;
          }
          else if ((v95 & 0x200000000) != 0 && (*((unsigned char *)v3 + 4684) & 2) != 0)
          {
            int v107 = 0;
            BOOL v106 = *((void *)v3 + 380) != 0;
          }
          else
          {
            BOOL v106 = 0;
            int v107 = 0;
          }
          uint64_t v108 = v95 & 0x80000000;
          if ((v95 & 0x80000000) != 0 && (*((unsigned char *)v3 + 4683) & 0x80) != 0 && *((void *)v3 + 378))
          {
            int v109 = 1;
            int v107 = 1;
            BOOL v110 = 1;
            if ((v95 & 0x100000000) == 0) {
              goto LABEL_260;
            }
          }
          else
          {
            if ((v95 & 0x100000000) == 0)
            {
              BOOL v110 = 0;
              int v109 = 1;
              goto LABEL_260;
            }
            int v109 = 1;
            if (*((unsigned char *)v3 + 4684))
            {
              uint64_t v111 = *((void *)v3 + 379);
              BOOL v110 = v111 != 0;
              if (v111) {
                int v109 = 2;
              }
              else {
                int v109 = 1;
              }
            }
            else
            {
              BOOL v110 = 0;
            }
          }
          uint64_t v112 = *((void *)v3 + 585);
          if ((v112 & 0x100000000) != 0
            && *((void *)v3 + 379)
            && (v95 & v112 & 0x200000000) != 0
            && *((void *)v3 + 380))
          {
            int v107 = 2;
            int v109 = 2;
          }
LABEL_260:
          if ((v95 & 0x40000000) == 0) {
            goto LABEL_279;
          }
          if ((*((unsigned char *)v3 + 4683) & 0x40) == 0) {
            goto LABEL_279;
          }
          int v113 = (OpaqueAudioComponentInstance *)*((void *)v3 + 377);
          if (!v113) {
            goto LABEL_279;
          }
          AudioUnitSetProperty(v113, 0x457u, 0, 0, (char *)v3 + 2316, 4u);
          if ((*((unsigned char *)v3 + 4667) & 0x80) != 0 && (*((unsigned char *)v3 + 4683) & 0x80) != 0)
          {
            int v114 = (OpaqueAudioComponentInstance *)*((void *)v3 + 377);
            if (*((void *)v3 + 378))
            {
              float v115 = (float)*((unsigned int *)v3 + 684);
LABEL_267:
              AudioUnitSetParameter(v114, 0x1Bu, 0, 0, v115, 0);
              uint64_t v116 = *((void *)v3 + 583);
              if ((v116 & 0x2000) != 0)
              {
                uint64_t v117 = *((void *)v3 + 585);
                if ((v117 & 0x2000) != 0
                  && *((void *)v3 + 360)
                  && (v116 & v117 & 0x4000) != 0
                  && *((void *)v3 + 361))
                {
                  AudioUnitSetParameter(*((AudioUnit *)v3 + 377), 0x3Fu, 0, 0, *((float *)v3 + 1056) * *((float *)v3 + 1057), 0);
                }
              }
              *(void *)&Float64 v118 = *((void *)v3 + 138) + 24;
              *(void *)&Float64 v119 = *((void *)v3 + 139) + 24;
              unsigned int v120 = **((_DWORD **)v3 + 135);
              if (v120 < 3) {
                Float64 v121 = 0.0;
              }
              else {
                *(void *)&Float64 v121 = *((void *)v3 + 140) + 24;
              }
              *(void *)&v220.double mSampleTime = *((void *)v3 + 138) + 24;
              *(Float64 *)&v220.UInt64 mHostTime = v119;
              UInt64 v122 = *((void *)v3 + 134);
              v220.Float64 mRateScalar = v121;
              v220.mWordClockTime = v122;
              *(_OWORD *)&v220.mSMPTETime.mSubframes = *(_OWORD *)((char *)v3 + 3352);
              if (v120 >= 3)
              {
                v220.double mSampleTime = v119;
                *(Float64 *)&v220.UInt64 mHostTime = v121;
                v220.Float64 mRateScalar = v118;
              }
              size_t v223 = 0;
              AudioUnitRenderActionFlags v218 = 512;
              AudioUnitSetParameter(*((AudioUnit *)v3 + 377), 0x2Cu, 0, 0, *((AudioUnitParameterValue *)v3 + 1092), 0);
              long long v123 = *(_OWORD *)&a2->mRateScalar;
              *(_OWORD *)&v231.double mSampleTime = *(_OWORD *)&a2->mSampleTime;
              *(_OWORD *)&v231.Float64 mRateScalar = v123;
              long long v124 = *(_OWORD *)&a2->mSMPTETime.mHours;
              *(_OWORD *)&v231.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
              *(_OWORD *)&v231.mSMPTETime.mHours = v124;
              AudioUnitProcessMultiple(*((AudioUnit *)v3 + 377), &v218, &v231, *((_DWORD *)v3 + 127), 6u, (const AudioBufferList **)&v220, 1u, &v223);
              uint64_t v95 = *((void *)v3 + 583);
              uint64_t v108 = v95 & 0x80000000;
LABEL_279:
              if (v108 && (*((unsigned char *)v3 + 4683) & 0x80) != 0 && *((void *)v3 + 378))
              {
                memcpy(*(void **)(*((void *)v3 + 435) + 16 * *((unsigned int *)v3 + 1042) + 16), *(const void **)(*((void *)v3 + 429) + 16), 4 * (2 * *((_DWORD *)v3 + 127)));
                memcpy(*(void **)(*((void *)v3 + 435) + 16 * *((unsigned int *)v3 + 1043) + 16), *(const void **)(*((void *)v3 + 506) + 16), 4 * (2 * *((_DWORD *)v3 + 127)));
                if (*((float *)v3 + 1068) == 0.0 && *((float *)v3 + 1069) == 0.0) {
                  AudioUnitParameterValue v125 = 0.0;
                }
                else {
                  AudioUnitParameterValue v125 = 1.0;
                }
                AudioUnitSetParameter(*((AudioUnit *)v3 + 378), 0x20u, 0, 0, v125, 0);
                v220.double mSampleTime = *((Float64 *)v3 + 435);
                size_t v223 = (AudioBufferList *)*((void *)v3 + 430);
                long long v126 = *(_OWORD *)&a2->mRateScalar;
                *(_OWORD *)&v231.double mSampleTime = *(_OWORD *)&a2->mSampleTime;
                *(_OWORD *)&v231.Float64 mRateScalar = v126;
                long long v127 = *(_OWORD *)&a2->mSMPTETime.mHours;
                *(_OWORD *)&v231.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                *(_OWORD *)&v231.mSMPTETime.mHours = v127;
                AudioUnitRenderActionFlags v218 = 512;
                AudioUnitProcessMultiple(*((AudioUnit *)v3 + 378), &v218, &v231, *((_DWORD *)v3 + 127), 1u, (const AudioBufferList **)&v220, 1u, &v223);
                LODWORD(v228) = 8 * *((_DWORD *)v3 + 127);
                AudioUnitGetProperty(*((AudioUnit *)v3 + 378), 0xE7Au, 0, 0, *(void **)(*((void *)v3 + 538) + 16), (UInt32 *)&v228);
                LODWORD(v228) = 8 * *((_DWORD *)v3 + 127);
                AudioUnitGetProperty(*((AudioUnit *)v3 + 378), 0xE79u, 0, 0, *(void **)(*((void *)v3 + 538) + 32), (UInt32 *)&v228);
                uint64_t v128 = *((unsigned int *)v3 + 127);
                size_t v129 = (const AudioBufferList *)*((void *)v3 + 430);
                if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
                {
                  DSPSplitComplex v130 = &v231;
                  uint64_t v131 = (uint64_t)v3;
                  unsigned int v132 = 10;
LABEL_288:
                  VoiceProcessorV2::SaveFilesWriteSignal(v131, v132, v128, v129, v130);
                }
LABEL_316:
                if (v107 == 2)
                {
                  VoiceProcessorV4::SignalParamSwitchMixNF((AudioUnit *)v3, v110, v106, (BOOL *)&v212, v66);
                }
                else if (v107 == 1)
                {
                  VoiceProcessorV2::SignalParamSwitchMix((AudioUnit *)v3, v110, v106, &v212, v65);
                }
                if (v109 == 1) {
                  VoiceProcessorV2::TimeAlignedReferenceAndOtherHandling(v3, v217, v216, v110, v212 != 0);
                }
                else {
                  VoiceProcessorV4::TimeAlignedReferenceAndOtherHandlingNF(v3, v217, v214, v110, v212 != 0);
                }
                memcpy(*(void **)(*((void *)v3 + 433) + 16), *(const void **)(*((void *)v3 + 505) + 16), *((unsigned int *)v3 + 1073));
                uint64_t v146 = *((void *)v3 + 583);
                if ((v146 & 0x40000000000000) != 0 && (*((unsigned char *)v3 + 4686) & 0x40) != 0 && *((void *)v3 + 401)) {
                  BOOL v147 = 1;
                }
                else {
                  BOOL v147 = (v146 & 0x100000000000000) != 0
                }
                      && (*((unsigned char *)v3 + 4687) & 1) != 0
                      && *((void *)v3 + 403) != 0;
                LODWORD(v228) = 0;
                LODWORD(v221) = 0;
                AudioUnitGetParameter(*((AudioUnit *)v3 + 388), 0x1Du, 0, 0, (AudioUnitParameterValue *)&v228);
                BOOL v148 = *(float *)&v228 < 1.0 && v147;
                if (v147)
                {
                  LODWORD(v231.mSampleTime) = 1065353216;
                  if (*(float *)&v228 < 1.0) {
                    vDSP_vfill((const float *)&v231, *(float **)(*((void *)v3 + 502) + 16), 1, *((unsigned int *)v3 + 127));
                  }
                  vDSP_vfill((const float *)&v231, *(float **)(*((void *)v3 + 500) + 16), 1, *((unsigned int *)v3 + 127));
                }
                else if ((*((unsigned char *)v3 + 4669) & 2) == 0 || (*((unsigned char *)v3 + 4685) & 2) == 0 || !*((void *)v3 + 388))
                {
                  char v149 = 0;
                  goto LABEL_346;
                }
                if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
                  VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x61u, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 429), &buf);
                }
                char v149 = 1;
LABEL_346:
                uint64_t v150 = *((void *)v3 + 501);
                uint64_t v151 = *((void *)v3 + 583);
                if ((v151 & 0x40000000000000) != 0
                  && (*((unsigned char *)v3 + 4686) & 0x40) != 0
                  && (int v152 = (OpaqueAudioComponentInstance *)*((void *)v3 + 401)) != 0)
                {
                  UInt64 v153 = *((void *)v3 + 500);
                  v220.double mSampleTime = *((Float64 *)v3 + 429);
                  v220.UInt64 mHostTime = v153;
                  *(void *)&v220.Float64 mRateScalar = (char *)v3 + 16944;
                  UInt64 v154 = *((void *)v3 + 502);
                  size_t v223 = (AudioBufferList *)*((void *)v3 + 430);
                  UInt64 v224 = v154;
                  uint64_t v225 = v150;
                  AudioUnitRenderActionFlags v218 = 512;
                  long long v155 = *(_OWORD *)&a2->mRateScalar;
                  *(_OWORD *)&v231.double mSampleTime = *(_OWORD *)&a2->mSampleTime;
                  *(_OWORD *)&v231.Float64 mRateScalar = v155;
                  long long v156 = *(_OWORD *)&a2->mSMPTETime.mHours;
                  *(_OWORD *)&v231.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                  *(_OWORD *)&v231.mSMPTETime.mHours = v156;
                  AudioUnitProcessMultiple(v152, &v218, &v231, *((_DWORD *)v3 + 127), 3u, (const AudioBufferList **)&v220, 3u, &v223);
                  AudioUnitGetParameter(*((AudioUnit *)v3 + 401), 1u, 0, 0, &v219);
                  if ((*((unsigned char *)v3 + 4672) & 4) == 0 || (*((unsigned char *)v3 + 4688) & 4) == 0 || !*((void *)v3 + 413)) {
                    goto LABEL_361;
                  }
                  int v157 = (OpaqueAudioComponentInstance *)*((void *)v3 + 401);
                  AudioUnitParameterID v158 = 2;
                }
                else
                {
                  if ((v151 & 0x100000000000000) == 0
                    || (*((unsigned char *)v3 + 4687) & 1) == 0
                    || (uint64_t v159 = (OpaqueAudioComponentInstance *)*((void *)v3 + 403)) == 0)
                  {
                    int v164 = 1;
                    goto LABEL_366;
                  }
                  AudioUnitSetParameter(v159, 0x14u, 0, 0, *((AudioUnitParameterValue *)v3 + 4206), 0);
                  UInt64 v160 = *((void *)v3 + 432);
                  v220.double mSampleTime = *((Float64 *)v3 + 429);
                  v220.UInt64 mHostTime = v160;
                  v220.Float64 mRateScalar = *((Float64 *)v3 + 500);
                  v220.mWordClockTime = (UInt64)v3 + 16944;
                  UInt64 v161 = *((void *)v3 + 437);
                  size_t v223 = (AudioBufferList *)*((void *)v3 + 430);
                  UInt64 v224 = v161;
                  uint64_t v225 = *((void *)v3 + 502);
                  uint64_t v226 = v150;
                  long long v162 = *(_OWORD *)&a2->mRateScalar;
                  *(_OWORD *)&v231.double mSampleTime = *(_OWORD *)&a2->mSampleTime;
                  *(_OWORD *)&v231.Float64 mRateScalar = v162;
                  long long v163 = *(_OWORD *)&a2->mSMPTETime.mHours;
                  *(_OWORD *)&v231.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                  *(_OWORD *)&v231.mSMPTETime.mHours = v163;
                  AudioUnitRenderActionFlags v218 = 512;
                  AudioUnitProcessMultiple(*((AudioUnit *)v3 + 403), &v218, &v231, *((_DWORD *)v3 + 127), 4u, (const AudioBufferList **)&v220, 4u, &v223);
                  AudioUnitGetParameter(*((AudioUnit *)v3 + 403), 2u, 0, 0, &v219);
                  if ((*((unsigned char *)v3 + 4672) & 4) == 0 || (*((unsigned char *)v3 + 4688) & 4) == 0 || !*((void *)v3 + 413))
                  {
LABEL_361:
                    if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
                      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x27u, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 430), &v231);
                    }
                    int v164 = 0;
LABEL_366:
                    if ((*((unsigned char *)v3 + 4669) & 2) == 0) {
                      goto LABEL_390;
                    }
                    if ((*((unsigned char *)v3 + 4685) & 2) == 0
                      || (int v165 = (OpaqueAudioComponentInstance *)*((void *)v3 + 388)) == 0)
                    {
LABEL_384:
                      if ((*((unsigned char *)v3 + 4685) & 2) != 0 && *((void *)v3 + 388) && v148)
                      {
                        float v175 = *(float **)(*((void *)v3 + 502) + 16);
                        vDSP_vmin(*(const float **)(*((void *)v3 + 500) + 16), 1, v175, 1, v175, 1, *((unsigned int *)v3 + 127));
                        unsigned int v176 = *(const float **)(*((void *)v3 + 429) + 16);
                        float v177 = *(float **)(*((void *)v3 + 430) + 16);
                        vDSP_vmul(v176, 1, v175, 1, v177, 1, *((unsigned int *)v3 + 127));
                        vDSP_vmul(&v176[*((unsigned int *)v3 + 127) + 1], 1, v175 + 1, 1, &v177[*((unsigned int *)v3 + 127) + 1], 1, (*((_DWORD *)v3 + 127) - 1));
                        v176[*((unsigned int *)v3 + 127)] = v176[*((unsigned int *)v3 + 127)]
                                                          * v175[*((_DWORD *)v3 + 127) - 1];
LABEL_397:
                        if (((v149 & 1) != 0
                           || (*((unsigned char *)v3 + 4669) & 2) != 0
                           && (*((unsigned char *)v3 + 4685) & 2) != 0
                           && *((void *)v3 + 388))
                          && (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)))
                        {
                          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x60u, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 430), &buf);
                        }
                        if ((*((unsigned char *)v3 + 4671) & 0x20) != 0 && (*((unsigned char *)v3 + 4687) & 0x20) != 0)
                        {
                          float v180 = (OpaqueAudioComponentInstance *)*((void *)v3 + 408);
                          if (v180)
                          {
                            AudioUnitSetParameter(v180, 0, 0, 0, *((AudioUnitParameterValue *)v3 + 3133), 0);
                            AudioUnitSetParameter(*((AudioUnit *)v3 + 408), 4u, 0, 0, *((AudioUnitParameterValue *)v3 + 1048), 0);
                            AudioUnitSetParameter(*((AudioUnit *)v3 + 408), 0x13u, 0, 0, *((AudioUnitParameterValue *)v3 + 1052), 0);
                            AudioUnitSetParameter(*((AudioUnit *)v3 + 408), 3u, 0, 0, v219, 0);
                            AudioUnitSetParameter(*((AudioUnit *)v3 + 408), 0xEu, 0, 0, (float)*((int *)v3 + 576), 0);
                            UInt64 v181 = *((void *)v3 + 511);
                            v220.double mSampleTime = *((Float64 *)v3 + 419);
                            v220.UInt64 mHostTime = v181;
                            UInt64 v182 = *((void *)v3 + 433);
                            v220.Float64 mRateScalar = *((Float64 *)v3 + 430);
                            v220.mWordClockTime = v182;
                            uint64_t v183 = *((void *)v3 + 502);
                            *(void *)&v220.mSMPTETime.mSubframes = *((void *)v3 + 500);
                            *(void *)&v220.mSMPTETime.mType = v183;
                            size_t v223 = (AudioBufferList *)*((void *)v3 + 136);
                            AudioUnitRenderActionFlags v218 = 512;
                            long long v184 = *(_OWORD *)&a2->mRateScalar;
                            *(_OWORD *)&v231.double mSampleTime = *(_OWORD *)&a2->mSampleTime;
                            *(_OWORD *)&v231.Float64 mRateScalar = v184;
                            long long v185 = *(_OWORD *)&a2->mSMPTETime.mHours;
                            *(_OWORD *)&v231.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                            *(_OWORD *)&v231.mSMPTETime.mHours = v185;
                            AudioUnitProcessMultiple(*((AudioUnit *)v3 + 408), &v218, &v231, *((_DWORD *)v3 + 127), 6u, (const AudioBufferList **)&v220, 1u, &v223);
                            LODWORD(v230) = 0;
                            AudioUnitGetParameter(*((AudioUnit *)v3 + 408), 1u, 0, 0, (AudioUnitParameterValue *)&v230);
                            *((_DWORD *)v3 + 3134) = v230;
                            if ((*((unsigned char *)v3 + 4672) & 4) != 0
                              && (*((unsigned char *)v3 + 4688) & 4) != 0
                              && *((void *)v3 + 413))
                            {
                              AudioUnitGetParameter(*((AudioUnit *)v3 + 408), 2u, 0, 0, &v219);
                              AudioUnitSetParameter(*((AudioUnit *)v3 + 413), 0x23u, 0, 0, v219, 0);
                            }
                          }
                        }
                        goto LABEL_411;
                      }
LABEL_390:
                      if ((*((unsigned char *)v3 + 8901) & 2) != 0
                        && (*((unsigned char *)v3 + 8909) & 2) != 0
                        && *((void *)v3 + 479)
                        && !v147)
                      {
                        LODWORD(v231.mSampleTime) = 1065353216;
                        unsigned int v179 = *((_DWORD *)v3 + 127);
                        vDSP_vfill((const float *)&v231, *(float **)(*((void *)v3 + 502) + 16), 1, v179);
                        memcpy(*(void **)(*((void *)v3 + 430) + 16), *(const void **)(*((void *)v3 + 429) + 16), 8 * v179);
                      }
                      goto LABEL_397;
                    }
                    AudioUnitSetParameter(v165, 6u, 0, 0, *((AudioUnitParameterValue *)v3 + 1056), 0);
                    AudioUnitSetParameter(*((AudioUnit *)v3 + 388), 7u, 0, 0, *((AudioUnitParameterValue *)v3 + 1060), 0);
                    AudioUnitSetParameter(*((AudioUnit *)v3 + 388), 0xDu, 0, 0, *((AudioUnitParameterValue *)v3 + 1064), 0);
                    UInt64 v166 = *((void *)v3 + 433);
                    v220.double mSampleTime = *((Float64 *)v3 + 429);
                    v220.UInt64 mHostTime = v166;
                    UInt64 v167 = *((void *)v3 + 502);
                    v220.Float64 mRateScalar = *((Float64 *)v3 + 512);
                    v220.mWordClockTime = v167;
                    *(void *)&v220.mSMPTETime.mSubframes = v150;
                    if (v148)
                    {
                      int v168 = (AudioBufferList **)((char *)v3 + 3456);
                      UInt64 v167 = *((void *)v3 + 500);
                    }
                    else
                    {
                      v220.mWordClockTime = 0;
                      int v168 = (AudioBufferList **)((char *)v3 + 3440);
                    }
                    size_t v223 = *v168;
                    UInt64 v224 = v167;
                    long long v169 = *(_OWORD *)&a2->mRateScalar;
                    *(_OWORD *)&v231.double mSampleTime = *(_OWORD *)&a2->mSampleTime;
                    *(_OWORD *)&v231.Float64 mRateScalar = v169;
                    long long v170 = *(_OWORD *)&a2->mSMPTETime.mHours;
                    *(_OWORD *)&v231.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                    *(_OWORD *)&v231.mSMPTETime.mHours = v170;
                    AudioUnitRenderActionFlags v218 = 512;
                    AudioUnitProcessMultiple(*((AudioUnit *)v3 + 388), &v218, &v231, *((_DWORD *)v3 + 127), 5u, (const AudioBufferList **)&v220, 2u, &v223);
                    if ((v164 | !v148) == 1) {
                      AudioUnitGetParameter(*((AudioUnit *)v3 + 388), 0x20u, 0, 0, &v219);
                    }
                    uint64_t v171 = *((unsigned int *)v3 + 127);
                    uint64_t v172 = 3440;
                    if (v148) {
                      uint64_t v172 = 3456;
                    }
                    if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
                    {
                      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x24u, v171, *(const AudioBufferList **)((char *)v3 + v172), &v231);
                      uint64_t v171 = *((unsigned int *)v3 + 127);
                      float v173 = (const AudioBufferList *)*((void *)v3 + 500);
                      if (*((unsigned char *)v3 + 15961))
                      {
LABEL_382:
                        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x4Fu, v171, v173, &v231);
LABEL_383:
                        if ((*((unsigned char *)v3 + 4669) & 2) == 0) {
                          goto LABEL_390;
                        }
                        goto LABEL_384;
                      }
                    }
                    else
                    {
                      float v173 = (const AudioBufferList *)*((void *)v3 + 500);
                    }
                    if (!*((unsigned char *)v3 + 15962)) {
                      goto LABEL_383;
                    }
                    goto LABEL_382;
                  }
                  int v157 = (OpaqueAudioComponentInstance *)*((void *)v3 + 403);
                  AudioUnitParameterID v158 = 9;
                }
                AudioUnitGetParameter(v157, v158, 0, 0, (AudioUnitParameterValue *)&v221);
                AudioUnitSetParameter(*((AudioUnit *)v3 + 413), 0x12u, 0, 0, *(AudioUnitParameterValue *)&v221, 0);
                goto LABEL_361;
              }
              if ((v95 & 0x100000000) == 0 || (*((unsigned char *)v3 + 4684) & 1) == 0 || !*((void *)v3 + 379)) {
                goto LABEL_316;
              }
              memcpy(*(void **)(*((void *)v3 + 435) + 16), *(const void **)(*((void *)v3 + 429) + 16), 8 * *((unsigned int *)v3 + 127));
              memcpy(*(void **)(*((void *)v3 + 435) + 32), *(const void **)(*((void *)v3 + 507) + 16), 8 * *((unsigned int *)v3 + 127));
              uint64_t v133 = (const AudioBufferList *)*((void *)v3 + 435);
              uint64_t v134 = (const AudioBufferList *)*((void *)v3 + 434);
              uint64_t v228 = (AudioBufferList *)*((void *)v3 + 430);
              int v229 = v134;
              int v230 = v133;
              long long v135 = *(_OWORD *)&a2->mRateScalar;
              *(_OWORD *)&v231.double mSampleTime = *(_OWORD *)&a2->mSampleTime;
              *(_OWORD *)&v231.Float64 mRateScalar = v135;
              long long v136 = *(_OWORD *)&a2->mSMPTETime.mHours;
              *(_OWORD *)&v231.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
              *(_OWORD *)&v231.mSMPTETime.mHours = v136;
              AudioUnitProcessMultiple(*((AudioUnit *)v3 + 379), &v218, &v231, *((_DWORD *)v3 + 127), 1u, &v230, 2u, &v228);
              uint64_t v137 = *((unsigned int *)v3 + 127);
              if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
              {
                VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x18u, v137, v228, &v231);
                uint64_t v137 = *((unsigned int *)v3 + 127);
                int v138 = v229;
                if (*((unsigned char *)v3 + 15961)) {
                  goto LABEL_301;
                }
              }
              else
              {
                int v138 = v229;
              }
              if (!*((unsigned char *)v3 + 15962))
              {
LABEL_302:
                if ((*((unsigned char *)v3 + 4668) & 2) == 0 || (*((unsigned char *)v3 + 4684) & 2) == 0 || !*((void *)v3 + 380)) {
                  goto LABEL_316;
                }
                memcpy(*(void **)(*((void *)v3 + 436) + 16), *(const void **)(*((void *)v3 + 429) + 16), 4 * (2 * *((_DWORD *)v3 + 127)));
                memcpy(*(void **)(*((void *)v3 + 431) + 16), *(const void **)(*((void *)v3 + 432) + 16), 4 * (2 * *((_DWORD *)v3 + 127)));
                AudioUnitParameterValue v211 = 10.0;
                UInt64 v139 = *((void *)v3 + 434);
                size_t v223 = (AudioBufferList *)*((void *)v3 + 430);
                UInt64 v224 = v139;
                uint64_t v140 = *((void *)v3 + 507);
                uint64_t v225 = *((void *)v3 + 436);
                uint64_t v226 = v140;
                uint64_t v227 = *((void *)v3 + 431);
                int v141 = (const AudioBufferList *)*((void *)v3 + 432);
                AudioUnitParameterValue v142 = 10.0;
                DSPSplitComplex v221 = (AudioBufferList *)*((void *)v3 + 429);
                DSPSplitComplex v222 = v141;
                if (*((unsigned char *)v3 + 4671) & 1) != 0 && (*((unsigned char *)v3 + 4687))
                {
                  unint64_t v143 = (OpaqueAudioComponentInstance *)*((void *)v3 + 403);
                  if (v143)
                  {
                    AudioUnitGetParameter(v143, 9u, 0, 0, &v211);
                    AudioUnitParameterValue v142 = v211;
                  }
                }
                AudioUnitSetParameter(*((AudioUnit *)v3 + 380), 0xAu, 0, 0, v142, 0);
                AudioUnitSetParameter(*((AudioUnit *)v3 + 380), 0x17u, 0, 0, *((AudioUnitParameterValue *)v3 + 4206), 0);
                long long v144 = *(_OWORD *)&a2->mRateScalar;
                *(_OWORD *)&v220.double mSampleTime = *(_OWORD *)&a2->mSampleTime;
                *(_OWORD *)&v220.Float64 mRateScalar = v144;
                long long v145 = *(_OWORD *)&a2->mSMPTETime.mHours;
                *(_OWORD *)&v220.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                *(_OWORD *)&v220.mSMPTETime.mHours = v145;
                AudioUnitProcessMultiple(*((AudioUnit *)v3 + 380), &v218, &v220, *((_DWORD *)v3 + 127), 5u, (const AudioBufferList **)&v223, 2u, &v221);
                uint64_t v128 = *((unsigned int *)v3 + 127);
                if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
                {
                  VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x1Au, v128, v221, &v220);
                  uint64_t v128 = *((unsigned int *)v3 + 127);
                  size_t v129 = v222;
                  if (*((unsigned char *)v3 + 15961)) {
                    goto LABEL_315;
                  }
                }
                else
                {
                  size_t v129 = v222;
                }
                if (!*((unsigned char *)v3 + 15962)) {
                  goto LABEL_316;
                }
LABEL_315:
                DSPSplitComplex v130 = &v220;
                uint64_t v131 = (uint64_t)v3;
                unsigned int v132 = 27;
                goto LABEL_288;
              }
LABEL_301:
              VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x19u, v137, v138, &v231);
              goto LABEL_302;
            }
          }
          else
          {
            int v114 = (OpaqueAudioComponentInstance *)*((void *)v3 + 377);
          }
          float v115 = 2.0;
          goto LABEL_267;
        }
        float v97 = *((float *)v3 + 1057);
        if (v97 == 0.0)
        {
          UInt64 v98 = *(void *)(*((void *)v3 + 436) + 16) + 4 * *((unsigned int *)v3 + 127);
          v231.double mSampleTime = *(Float64 *)(*((void *)v3 + 436) + 16);
          v231.UInt64 mHostTime = v98;
          if (*((void *)v3 + 2114))
          {
            VPTimeFreqConverter::Analyze(*((VPTimeFreqConverter **)v3 + 2114), *(const float **)(*((void *)v3 + 425) + 16), (DSPSplitComplex *)&v231);
            float v97 = *((float *)v3 + 1057);
            size_t v96 = (OpaqueAudioComponentInstance *)*((void *)v3 + 389);
          }
        }
        AudioUnitSetParameter(v96, 6u, 0, 0, v97, 0);
        AudioUnitSetParameter(*((AudioUnit *)v3 + 389), 7u, 0, 0, *((AudioUnitParameterValue *)v3 + 1061), 0);
        AudioUnitSetParameter(*((AudioUnit *)v3 + 389), 0xDu, 0, 0, *((AudioUnitParameterValue *)v3 + 1065), 0);
        memcpy(*(void **)(*((void *)v3 + 434) + 16), *(const void **)(*((void *)v3 + 505) + 32), *((unsigned int *)v3 + 1073));
        UInt64 v99 = *((void *)v3 + 434);
        v220.double mSampleTime = *((Float64 *)v3 + 506);
        v220.UInt64 mHostTime = v99;
        Float64 v100 = *((double *)v3 + 512);
        v220.mWordClockTime = 0;
        *(void *)&v220.mSMPTETime.mSubframes = 0;
        v220.Float64 mRateScalar = v100;
        UInt64 v101 = *((void *)v3 + 501);
        size_t v223 = (AudioBufferList *)*((void *)v3 + 432);
        UInt64 v224 = v101;
        long long v102 = *(_OWORD *)&a2->mRateScalar;
        *(_OWORD *)&v231.double mSampleTime = *(_OWORD *)&a2->mSampleTime;
        *(_OWORD *)&v231.Float64 mRateScalar = v102;
        long long v103 = *(_OWORD *)&a2->mSMPTETime.mHours;
        *(_OWORD *)&v231.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
        *(_OWORD *)&v231.mSMPTETime.mHours = v103;
        AudioUnitRenderActionFlags v218 = 512;
        AudioUnitProcessMultiple(*((AudioUnit *)v3 + 389), &v218, &v231, *((_DWORD *)v3 + 127), 5u, (const AudioBufferList **)&v220, 2u, &v223);
        uint64_t v104 = *((unsigned int *)v3 + 127);
        if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
        {
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x25u, v104, *((const AudioBufferList **)v3 + 432), &v231);
          uint64_t v104 = *((unsigned int *)v3 + 127);
          uint64_t v105 = (const AudioBufferList *)*((void *)v3 + 501);
          if (*((unsigned char *)v3 + 15961)) {
            goto LABEL_233;
          }
        }
        else
        {
          uint64_t v105 = (const AudioBufferList *)*((void *)v3 + 501);
        }
        if (!*((unsigned char *)v3 + 15962))
        {
LABEL_234:
          uint64_t v95 = *((void *)v3 + 583);
          goto LABEL_235;
        }
LABEL_233:
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x50u, v104, v105, &v231);
        goto LABEL_234;
      }
      uint64_t v81 = *((void *)v3 + 2115);
      if ((unint64_t)(*((void *)v3 + 2116) - v81) > 0x18)
      {
        ECApplicator::apply(*(AudioUnitParameterID **)(v81 + 24), &buf, v50, &v214, (float *)v3 + 1051, (float *)v3 + 1055, (float *)v3 + 1059, (float *)v3 + 1063, (float *)v3 + 1067, (float *)v3 + 1071);
        uint64_t v82 = *((unsigned int *)v3 + 127);
        if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
        {
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x1Fu, v82, (const AudioBufferList *)v3 + 709, &buf);
          uint64_t v82 = *((unsigned int *)v3 + 127);
          int v83 = (const AudioBufferList *)*((void *)v3 + 421);
          if (*((unsigned char *)v3 + 15961))
          {
LABEL_188:
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0xFu, v82, v83, &buf);
            goto LABEL_189;
          }
        }
        else
        {
          int v83 = (const AudioBufferList *)*((void *)v3 + 421);
        }
        if (!*((unsigned char *)v3 + 15962)) {
          goto LABEL_189;
        }
        goto LABEL_188;
      }
LABEL_477:
      std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
    }
  }
  unsigned int v9 = 0;
  while (((*((_DWORD *)v3 + 116) >> v9) & 1) == 0)
  {
    if (++v9 == 32)
    {
      unsigned int v9 = 33;
      break;
    }
  }
  uint64_t v10 = (unsigned int *)*((void *)v3 + 135);
  if (v9 >= *v10)
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    AudioUnitParameterID v13 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      unsigned int v14 = (*v13 ? *v13 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        int v15 = **((_DWORD **)v3 + 135);
        LODWORD(buf.mSampleTime) = 136315906;
        *(void *)((char *)&buf.mSampleTime + 4) = "vpProcessUplink_v4.cpp";
        WORD2(buf.mHostTime) = 1024;
        *(_DWORD *)((char *)&buf.mHostTime + 6) = 280;
        WORD1(buf.mRateScalar) = 1024;
        HIDWORD(buf.mRateScalar) = v9;
        LOWORD(buf.mWordClockTime) = 1024;
        *(_DWORD *)((char *)&buf.mWordClockTime + 2) = v15;
        _os_log_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> ERROR: mPrimaryEpMicIndex is %d, but epmic only has %d channels", (uint8_t *)&buf, 0x1Eu);
      }
    }
    uint64_t v16 = (int *)*((void *)v3 + 1578);
    if (v16 && (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      CALegacyLog::log(v16, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v4/vpProcessUplink_v4.cpp", 280, "ProcessDSPChain_Uplink", "ERROR: mPrimaryEpMicIndex is %d, but epmic only has %d channels", v9, **((_DWORD **)v3 + 135));
    }
    int v11 = *(void **)(*((void *)v3 + 136) + 16);
    int v12 = (const void **)*((void *)v3 + 135);
  }
  else
  {
    int v11 = *(void **)(*((void *)v3 + 136) + 16);
    int v12 = (const void **)&v10[4 * v9];
  }
  memcpy(v11, v12[2], *((unsigned int *)v12 + 3));
  if (*((unsigned char *)v3 + 2085))
  {
    if ((*((unsigned char *)v3 + 4670) & 0x40) != 0 && (*((unsigned char *)v3 + 4686) & 0x40) != 0)
    {
      uint64_t v17 = (OpaqueAudioComponentInstance *)*((void *)v3 + 401);
      if (v17)
      {
        UInt64 v18 = *((void *)v3 + 500);
        v231.double mSampleTime = *((Float64 *)v3 + 136);
        v231.UInt64 mHostTime = v18;
        UInt64 v19 = *((void *)v3 + 502);
        v220.double mSampleTime = v231.mSampleTime;
        v220.UInt64 mHostTime = v19;
        long long v20 = *(_OWORD *)&a2->mRateScalar;
        *(_OWORD *)&buf.double mSampleTime = *(_OWORD *)&a2->mSampleTime;
        *(_OWORD *)&buf.Float64 mRateScalar = v20;
        long long v21 = *(_OWORD *)&a2->mSMPTETime.mHours;
        *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
        *(_OWORD *)&buf.mSMPTETime.mHours = v21;
        LODWORD(v223) = 512;
        AudioUnitProcessMultiple(v17, (AudioUnitRenderActionFlags *)&v223, &buf, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&v231, 2u, (AudioBufferList **)&v220);
        if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x27u, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 136), a2);
        }
        if ((*((unsigned char *)v3 + 4672) & 4) != 0 && (*((unsigned char *)v3 + 4688) & 4) != 0 && *((void *)v3 + 413))
        {
          AudioUnitGetParameter(*((AudioUnit *)v3 + 401), 1u, 0, 0, &v219);
          AudioUnitSetParameter(*((AudioUnit *)v3 + 413), 0x23u, 0, 0, v219, 0);
        }
      }
    }
  }
LABEL_411:
  LODWORD(v231.mSampleTime) = 0;
  unsigned int v186 = VoiceProcessorV2::LocalVoiceDuckingForMediaChatEnabled(v3);
  unsigned int v188 = v186;
  if (!*((unsigned char *)v3 + 2080))
  {
    if ((v186 & 1) == 0) {
      goto LABEL_432;
    }
    VoiceProcessorV2::DetectVoiceActivity(v3, a2, v187);
LABEL_420:
    uint64_t v190 = *((void *)v3 + 583);
    if ((v190 & 0x4000000000000000) != 0
      && (*((unsigned char *)v3 + 4687) & 0x40) != 0
      && (float v191 = (OpaqueAudioComponentInstance *)*((void *)v3 + 409)) != 0)
    {
      AudioUnitParameterID v192 = 1936748646;
    }
    else
    {
      if ((v190 & 0x2000000000000000) == 0
        || (*((unsigned char *)v3 + 4687) & 0x20) == 0
        || (float v191 = (OpaqueAudioComponentInstance *)*((void *)v3 + 408)) == 0)
      {
        *(AudioUnitParameterValue *)&v231.double mSampleTime = v219;
        goto LABEL_430;
      }
      AudioUnitParameterID v192 = 2;
    }
    AudioUnitGetParameter(v191, v192, 0, 0, (AudioUnitParameterValue *)&v231);
    goto LABEL_430;
  }
  if (*((void *)v3 + 2062)) {
    char v189 = 1;
  }
  else {
    char v189 = v186;
  }
  if (v189)
  {
    VoiceProcessorV2::DetectVoiceActivity(v3, a2, v187);
    if (v188) {
      goto LABEL_420;
    }
  }
LABEL_430:
  if (*((unsigned char *)v3 + 2080))
  {
    bzero(*(void **)(*((void *)v3 + 136) + 16), 4 * *((unsigned int *)v3 + 127));
    LODWORD(v231.mSampleTime) = 0;
    goto LABEL_433;
  }
LABEL_432:
  *((_DWORD *)v3 + 4126) = 0;
LABEL_433:
  if ((*((unsigned char *)v3 + 8897) & 0x80) != 0 && (*((unsigned char *)v3 + 8905) & 0x80) != 0)
  {
    int v193 = (OpaqueAudioComponentInstance *)*((void *)v3 + 453);
    unsigned int v194 = v193 ? v188 : 0;
    if (v194 == 1) {
      AudioUnitSetParameter(v193, 0x12u, 0, 0, *(AudioUnitParameterValue *)&v231.mSampleTime, 0);
    }
  }
  if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x2Au, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 136), a2);
  }
  uint64_t v195 = *((void *)v3 + 584);
  if (v195 & 1) != 0 && (*((unsigned char *)v3 + 4688))
  {
    DSPSplitComplex v196 = (OpaqueAudioComponentInstance *)*((void *)v3 + 411);
    if (v196)
    {
      long long v197 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&buf.double mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&buf.Float64 mRateScalar = v197;
      long long v198 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&buf.mSMPTETime.mHours = v198;
      LODWORD(v220.mSampleTime) = 512;
      AudioUnitProcess(v196, (AudioUnitRenderActionFlags *)&v220, &buf, *((_DWORD *)v3 + 127), *((AudioBufferList **)v3 + 136));
      if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x2Cu, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 136), &buf);
      }
      uint64_t v195 = *((void *)v3 + 584);
    }
  }
  if ((v195 & 2) != 0 && (*((unsigned char *)v3 + 4688) & 2) != 0)
  {
    unsigned int v199 = (OpaqueAudioComponentInstance *)*((void *)v3 + 412);
    if (v199)
    {
      long long v200 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&buf.double mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&buf.Float64 mRateScalar = v200;
      long long v201 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&buf.mSMPTETime.mHours = v201;
      LODWORD(v220.mSampleTime) = 512;
      AudioUnitProcess(v199, (AudioUnitRenderActionFlags *)&v220, &buf, *((_DWORD *)v3 + 127), *((AudioBufferList **)v3 + 136));
      uint64_t v195 = *((void *)v3 + 584);
    }
  }
  if ((v195 & 4) != 0
    && (*((unsigned char *)v3 + 4688) & 4) != 0
    && (uint64_t v202 = (OpaqueAudioComponentInstance *)*((void *)v3 + 413)) != 0)
  {
    long long v203 = *(_OWORD *)&a2->mRateScalar;
    *(_OWORD *)&buf.double mSampleTime = *(_OWORD *)&a2->mSampleTime;
    *(_OWORD *)&buf.Float64 mRateScalar = v203;
    long long v204 = *(_OWORD *)&a2->mSMPTETime.mHours;
    *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
    *(_OWORD *)&buf.mSMPTETime.mHours = v204;
    LODWORD(v220.mSampleTime) = 512;
    AudioUnitProcess(v202, (AudioUnitRenderActionFlags *)&v220, &buf, *((_DWORD *)v3 + 127), *((AudioBufferList **)v3 + 136));
    if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x2Du, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 136), &buf);
    }
    if ((*((unsigned char *)v3 + 4671) & 0x20) != 0 && (*((unsigned char *)v3 + 4687) & 0x20) != 0 && *((void *)v3 + 408))
    {
      LODWORD(v223) = 0;
      AudioUnitGetParameter(*((AudioUnit *)v3 + 413), 1u, 0, 0, (AudioUnitParameterValue *)&v223);
      AudioUnitSetParameter(*((AudioUnit *)v3 + 408), 0x11u, 0, 0, *(AudioUnitParameterValue *)&v223, 0);
    }
    LODWORD(v223) = 0;
    AudioUnitGetParameter(*((AudioUnit *)v3 + 413), 0x1Bu, 0, 0, (AudioUnitParameterValue *)&v223);
    int v205 = (int)v223;
    if (*((float *)v3 + 572) != *(float *)&v223)
    {
      if ((*((unsigned char *)v3 + 4671) & 0x20) != 0 && (*((unsigned char *)v3 + 4687) & 0x20) != 0)
      {
        int64x2_t v206 = (OpaqueAudioComponentInstance *)*((void *)v3 + 408);
        if (v206)
        {
          AudioUnitSetParameter(v206, 0x12u, 0, 0, *(AudioUnitParameterValue *)&v223, 0);
          int v205 = (int)v223;
        }
      }
      *((_DWORD *)v3 + 572) = v205;
    }
  }
  else if ((*((void *)v3 + 583) & 0x8000000000000000) != 0 {
         && ((*((void *)v3 + 585) & 0x8000000000000000) != 0 || *((unsigned char *)v3 + 472)))
  }
  {
    LODWORD(buf.mSampleTime) = __exp10f(*((float *)v3 + 1093) / 20.0);
    vDSP_vsmul(*(const float **)(*((void *)v3 + 136) + 16), 1, (const float *)&buf, *(float **)(*((void *)v3 + 136) + 16), 1, *((unsigned int *)v3 + 127));
    if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x2Bu, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 136), a2);
    }
  }
  return 0;
}

AudioUnitParameterValue VoiceProcessorV4::SignalParamSwitchMixNF(AudioUnit *this, int a2, int a3, BOOL *a4, AudioUnitParameterValue result)
{
  if (a2 && a3)
  {
    AudioUnitParameterValue outValue = 0.0;
    AudioUnitGetParameter(this[380], 2u, 0, 0, &outValue);
    double result = outValue;
    uint64_t v7 = *((unsigned int *)this + 127);
    long long v8 = (float *)*((void *)this[436] + 2);
    float __B = 0.5;
    switch(outValue)
    {
      case 1u:
        memcpy(*((void **)this[505] + 2), *((const void **)this[505] + 8), *((unsigned int *)this + 1073));
        *((_DWORD *)this + 1048) = *((_DWORD *)this + 1051);
        *((_DWORD *)this + 1052) = *((_DWORD *)this + 1055);
        *((_DWORD *)this + 1056) = *((_DWORD *)this + 1059);
        *((_DWORD *)this + 1060) = *((_DWORD *)this + 1063);
        double result = *((float *)this + 1067);
        *((AudioUnitParameterValue *)this + 1064) = result;
        *a4 = 1;
        break;
      case 2u:
        unsigned int v30 = (*((uint64_t (**)(AudioUnit *))*this + 14))(this);
        AudioUnit v31 = this[505];
        if (v30 > 7) {
          uint64_t v32 = (const float *)*((void *)v31 + 8);
        }
        else {
          uint64_t v32 = (const float *)*((void *)v31 + 2);
        }
        vDSP_vadd(*((const float **)v31 + 2), 1, v32, 1, v8, 1, (2 * v7));
        vDSP_vsmul(v8, 1, &__B, *((float **)this[505] + 2), 1, (2 * v7));
        float v33 = __B;
        *((float *)this + 1048) = __B * (float)(*((float *)this + 1051) + *((float *)this + 1048));
        *((float *)this + 1052) = v33 * (float)(*((float *)this + 1055) + *((float *)this + 1052));
        float v34 = 0.0;
        if (*((float *)this + 1059) != 0.0) {
          float v34 = 1.0;
        }
        *((float *)this + 1056) = v34;
        *((float *)this + 1060) = v33 * (float)(*((float *)this + 1063) + *((float *)this + 1060));
        double result = v33 * (float)(*((float *)this + 1067) + *((float *)this + 1067));
        *((AudioUnitParameterValue *)this + 1064) = result;
        break;
      case 3u:
        UInt32 ioDataSize = 8 * v7;
        AudioUnitGetProperty(this[379], 0xE79u, 0, 0, *((void **)this[538] + 2), &ioDataSize);
        UInt32 ioDataSize = 8 * v7;
        unsigned int v9 = (void *)*((void *)this[538] + 4);
        uint64_t v10 = this[379];
        AudioUnitPropertyID v11 = 3706;
        goto LABEL_7;
      case 4u:
        UInt32 ioDataSize = 8 * v7;
        AudioUnitGetProperty(this[379], 0xE7Bu, 0, 0, *((void **)this[538] + 2), &ioDataSize);
        UInt32 ioDataSize = 8 * v7;
        unsigned int v9 = (void *)*((void *)this[538] + 4);
        uint64_t v10 = this[379];
        AudioUnitPropertyID v11 = 3708;
LABEL_7:
        AudioUnitGetProperty(v10, v11, 0, 0, v9, &ioDataSize);
        int v12 = &v8[v7];
        AudioUnit v13 = this[538];
        unsigned int v14 = (const float *)*((void *)v13 + 2);
        int v15 = (const float *)*((void *)v13 + 4);
        float v16 = *((float *)this + 1052);
        float v17 = *((float *)this + 1055);
        uint64_t v18 = *((unsigned int *)this + 1074);
        int v19 = v18 + v7;
        float v20 = (float)(v14[v18] * v14[v18]) + (float)(v14[v19] * v14[v19]);
        float v21 = (float)(v15[v18] * v15[v18]) + (float)(v15[v19] * v15[v19]);
        if ((float)(v20 + v21) <= 0.0)
        {
          float v23 = 0.0;
          float v24 = 1.0;
        }
        else
        {
          float v22 = 1.0 / (float)(v20 + v21);
          float v23 = v21 * v22;
          float v24 = v20 * v22;
        }
        *((float *)this + 1048) = (float)(*((float *)this + 1051) * v23) + (float)(v24 * *((float *)this + 1048));
        *((float *)this + 1052) = (float)(v17 * v23) + (float)(v24 * v16);
        *((float *)this + 1056) = *((float *)this + 1056) * *((float *)this + 1057);
        *((float *)this + 1060) = (float)(v23 * *((float *)this + 1061)) + (float)(v24 * *((float *)this + 1060));
        *((float *)this + 1064) = (float)(v23 * *((float *)this + 1065)) + (float)(v24 * *((float *)this + 1064));
        vDSP_Length v25 = *((unsigned int *)this + 127);
        memcpy(*((void **)this[435] + 2), *((const void **)this[505] + 2), 4 * (2 * v25));
        memcpy(*((void **)this[435] + 4), *((const void **)this[505] + 8), 4 * (2 * *((_DWORD *)this + 127)));
        AudioUnit v26 = this[435];
        uint64_t v27 = (const float *)*((void *)v26 + 2);
        unint64_t v28 = (const float *)*((void *)v26 + 4);
        uint64_t v29 = (float *)*((void *)this[505] + 2);
        vDSP_vmul(v27, 1, v14, 1, v29, 1, (2 * v25));
        vDSP_vmul(v28, 1, v15, 1, v8, 1, (2 * v25));
        vDSP_vadd(v8, 1, v29, 1, v29, 1, (2 * v25));
        vDSP_vsub(&v29[v25], 1, v29, 1, v29, 1, v25);
        vDSP_vmul(v27, 1, &v14[v25], 1, v8, 1, v25);
        vDSP_vmul(&v27[v25], 1, v14, 1, v12, 1, v25);
        vDSP_vadd(v8, 1, v12, 1, &v29[v25], 1, v25);
        vDSP_vmul(v28, 1, &v15[v25], 1, v8, 1, v25);
        vDSP_vmul(&v28[v25], 1, v15, 1, v12, 1, v25);
        vDSP_vadd(v8, 1, v12, 1, v8, 1, v25);
        vDSP_vadd(v8, 1, &v29[v25], 1, &v29[v25], 1, v25);
        break;
      default:
        return result;
    }
  }
  return result;
}

float VoiceProcessorV4::TimeAlignedReferenceAndOtherHandlingNF(VoiceProcessorV4 *this, int a2, int a3, int a4, char a5)
{
  char v6 = a2;
  float result = *((float *)this + 1056);
  if (result != 0.0) {
    goto LABEL_11;
  }
  if (!a3 || !a4 || !a2)
  {
    if (!a3) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if (a5) {
LABEL_8:
  }
    memcpy(*(void **)(*((void *)this + 424) + 16), *(const void **)(*((void *)this + 427) + 16), 4 * *((unsigned int *)this + 127));
LABEL_9:
  unsigned int v9 = (float *)(*(void *)(*((void *)this + 512) + 16) + 4 * *((unsigned int *)this + 127));
  v11.realp = *(float **)(*((void *)this + 512) + 16);
  v11.imagp = v9;
  uint64_t v10 = (VPTimeFreqConverter *)*((void *)this + 520);
  if (v10) {
    VPTimeFreqConverter::Analyze(v10, *(const float **)(*((void *)this + 424) + 16), &v11);
  }
LABEL_11:
  if (a3)
  {
    if ((v6 & 1) == 0)
    {
      float result = *((float *)this + 1059);
      *((float *)this + 1056) = result;
    }
  }
  return result;
}

void ___Z23SuppressorClassLogScopev_block_invoke()
{
}

uint64_t AUMidSide::ValidFormat(AUMidSide *this, const AudioStreamBasicDescription *a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  if (a4->mChannelsPerFrame == 2) {
    return ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2) & ((a4->mFormatFlags & 0x20) >> 5);
  }
  else {
    return 0;
  }
}

uint64_t AUMidSide::SupportedNumChannels(AUMidSide *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUMidSide::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 1;
}

uint64_t AUMidSide::StreamFormatWritable(AUMidSide *this)
{
  return 1;
}

uint64_t AUMidSide::SupportsTail(AUMidSide *this)
{
  return 1;
}

double AUMidSide::GetTailTime(AUMidSide *this)
{
  return 0.0;
}

double AUMidSide::GetLatency(AUMidSide *this)
{
  return 0.0;
}

double AUMidSide::GetParameterInfo(AUMidSide *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  buffer->AudioUnitParameterOptions flags = 0;
  buffer->unitName = 0;
  if (!a2)
  {
    if (a3)
    {
      if (a3 != 1) {
        return result;
      }
      CFStringRef v5 = @"Side gain";
    }
    else
    {
      CFStringRef v5 = @"Mid gain";
    }
    buffer->cfNameString = v5;
    buffer->AudioUnitParameterOptions flags = 0x8000000;
    CFStringGetCString(v5, buffer->name, 52, 0x8000100u);
    buffer->unit = kAudioUnitParameterUnit_Decibels;
    double result = 8192.00593;
    *(void *)&buffer->minCFNumberRef Value = 0x40C00000C2700000;
    AudioUnitParameterOptions v7 = buffer->flags | 0xC0000000;
    buffer->defaultCFNumberRef Value = 0.0;
    buffer->AudioUnitParameterOptions flags = v7;
  }
  return result;
}

uint64_t AUMidSide::Render(AUMidSide *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  long long v8 = (AUMidSide *)((char *)this + 80);
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUMidSide *)((char *)this + 80), 0);
  uint64_t v10 = ausdk::AUScope::SafeGetElement((AUMidSide *)((char *)this + 128), 0);
  unsigned int v15 = 0;
  DSPSplitComplex v11 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 0);
  uint64_t result = ausdk::AUInputElement::PullInput(v11, &v15, a3, 0, a4);
  if (!result)
  {
    uint64_t BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 144));
    uint64_t v14 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144));
    return (*(uint64_t (**)(AUMidSide *, unsigned int *, uint64_t, uint64_t, uint64_t))(*(void *)this + 176))(this, a2, BufferList, v14, a4);
  }
  return result;
}

uint64_t AUMidSide::ProcessBufferLists(AUMidSide *this, unsigned int *a2, const AudioBufferList *a3, AudioBufferList *a4, vDSP_Length __N)
{
  unint64_t mNumberBuffers = a3->mNumberBuffers;
  if (*((unsigned char *)this + 544))
  {
    if (mNumberBuffers == a4->mNumberBuffers && a3->mNumberBuffers)
    {
      uint64_t v8 = 0;
      unint64_t v9 = 0;
      do
      {
        size_t mDataByteSize = a3->mBuffers[v8].mDataByteSize;
        if (mDataByteSize == a4->mBuffers[v8].mDataByteSize)
        {
          mData = a3->mBuffers[v8].mData;
          int v12 = a4->mBuffers[v8].mData;
          if (mData != v12)
          {
            memcpy(v12, mData, mDataByteSize);
            unint64_t mNumberBuffers = a3->mNumberBuffers;
          }
        }
        ++v9;
        ++v8;
      }
      while (v9 < mNumberBuffers);
    }
  }
  else
  {
    if (mNumberBuffers != 2 || a4->mNumberBuffers != 2) {
      return 4294956428;
    }
    unsigned int v15 = __N;
    int v17 = *((_DWORD *)this + 134);
    if (v17 == *((_DWORD *)this + 135))
    {
      float v18 = *((float *)this + 133);
    }
    else
    {
      *((_DWORD *)this + 135) = v17;
      uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMidSide *)((char *)this + 32), 0);
      float Parameter = ausdk::AUElement::GetParameter(Element, 0);
      *((float *)this + 132) = __exp10f(Parameter * 0.05);
      float v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMidSide *)((char *)this + 32), 0);
      float v22 = ausdk::AUElement::GetParameter(v21, 1u);
      float v18 = __exp10f(v22 * 0.05);
      *((float *)this + 133) = v18;
    }
    float v23 = (const float *)a3->mBuffers[0].mData;
    float v24 = *(const float **)&a3[1].mBuffers[0].mNumberChannels;
    vDSP_Length v25 = (float *)a4->mBuffers[0].mData;
    AudioUnit v26 = *(float **)&a4[1].mBuffers[0].mNumberChannels;
    float v27 = *((float *)this + 132);
    float __D = v27 - v18;
    float __B = v27 + v18;
    vDSP_vsmsma(v23, 1, &__B, v24, 1, &__D, v25, 1, v15);
    vDSP_vsmsma(v24, 1, &__B, v23, 1, &__D, v26, 1, v15);
  }
  return 0;
}

uint64_t AUMidSide::CanScheduleParameters(AUMidSide *this)
{
  return 0;
}

uint64_t AUMidSide::SetParameter(AUMidSide *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  ++*((_DWORD *)this + 134);
  return 0;
}

uint64_t AUMidSide::SetProperty(AUMidSide *this, int a2, int a3, unsigned int a4, _DWORD *a5, unsigned int a6)
{
  uint64_t result = 4294956417;
  if (a2 == 21 && !a3)
  {
    if (a6 >= 4)
    {
      uint64_t result = 0;
      *((unsigned char *)this + 544) = *a5 != 0;
    }
    else
    {
      return 4294956445;
    }
  }
  return result;
}

uint64_t AUMidSide::GetProperty(AUMidSide *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result = 4294956417;
  if (a2 == 21 && !a3)
  {
    uint64_t result = 0;
    *a5 = *((unsigned __int8 *)this + 544);
  }
  return result;
}

uint64_t AUMidSide::GetPropertyInfo(AUMidSide *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result = 4294956417;
  if (a2 == 21 && !a3)
  {
    uint64_t result = 0;
    *a6 = 1;
    *a5 = 4;
  }
  return result;
}

uint64_t AUMidSide::Initialize(AUMidSide *this)
{
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUMidSide *)((char *)this + 80), 0);
  long long v3 = *(_OWORD *)(Element + 96);
  long long v10 = *(_OWORD *)(Element + 80);
  long long v11 = v3;
  uint64_t v12 = *(void *)(Element + 112);
  uint64_t v4 = ausdk::AUScope::SafeGetElement((AUMidSide *)((char *)this + 128), 0);
  long long v5 = *(_OWORD *)(v4 + 96);
  *(_OWORD *)&v9.double mSampleRate = *(_OWORD *)(v4 + 80);
  *(_OWORD *)&v9.UInt32 mBytesPerPacket = v5;
  *(void *)&v9.UInt32 mBitsPerChannel = *(void *)(v4 + 112);
  BOOL IsEquivalent = CAStreamBasicDescription::IsEquivalent((CAStreamBasicDescription *)&v10, &v9, v6);
  if (IsEquivalent && HIDWORD(v11) == 2) {
    return 0;
  }
  else {
    return 4294956428;
  }
}

BOOL CAStreamBasicDescription::IsEquivalent(CAStreamBasicDescription *this, const AudioStreamBasicDescription *a2, const AudioStreamBasicDescription *a3)
{
  return *(double *)this == a2->mSampleRate
      && *((_DWORD *)this + 2) == a2->mFormatID
      && *((_DWORD *)this + 4) == a2->mBytesPerPacket
      && *((_DWORD *)this + 5) == a2->mFramesPerPacket
      && *((_DWORD *)this + 7) == a2->mChannelsPerFrame
      && *((_DWORD *)this + 8) == a2->mBitsPerChannel
      && CA::Implementation::EquivalentFormatFlags(this, a2, 0, 0);
}

void AUMidSide::~AUMidSide(AUMidSide *this)
{
  ausdk::AUBase::~AUBase(this);

  JUMPOUT(0x1C185D370);
}

uint64_t AUVolumeCompressorV2::SetBypassEffect(uint64_t this, int a2)
{
  *(_DWORD *)(this + 528) = a2;
  return this;
}

BOOL AUVolumeCompressorV2::ShouldBypassEffect(AUVolumeCompressorV2 *this)
{
  return *((_DWORD *)this + 132) != 0;
}

BOOL AUVolumeCompressorV2::ValidFormat(AUVolumeCompressorV2 *this, const AudioStreamBasicDescription *a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  BOOL result = ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2);
  if (result)
  {
    UInt32 mChannelsPerFrame = a4->mChannelsPerFrame;
    if ((a4->mFormatFlags & 0x20) != 0)
    {
      if (mChannelsPerFrame <= 8) {
        return (0x176u >> mChannelsPerFrame) & 1;
      }
    }
    else if (mChannelsPerFrame == 1)
    {
      LOBYTE(mChannelsPerFrame) = 1;
      return (0x176u >> mChannelsPerFrame) & 1;
    }
    return 0;
  }
  return result;
}

uint64_t AUVolumeCompressorV2::SupportedNumChannels(AUVolumeCompressorV2 *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUVolumeCompressorV2::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 6;
}

BOOL AUVolumeCompressorV2::StreamFormatWritable(AUVolumeCompressorV2 *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUVolumeCompressorV2::SupportsTail(AUVolumeCompressorV2 *this)
{
  return 1;
}

double AUVolumeCompressorV2::GetTailTime(AUVolumeCompressorV2 *this)
{
  return 0.0;
}

double AUVolumeCompressorV2::GetLatency(AUVolumeCompressorV2 *this)
{
  return 0.0;
}

uint64_t AUVolumeCompressorV2::NewFactoryPresetSet(AUVolumeCompressorV2 *this, const AUPreset *a2)
{
  uint64_t presetNumber = a2->presetNumber;
  if (presetNumber > 3) {
    return 4294956445;
  }
  float v5 = flt_1BB87C1D0[presetNumber];
  float v6 = flt_1BB87C1E0[presetNumber];
  float v7 = flt_1BB87C1F0[presetNumber];
  float v8 = flt_1BB87C200[presetNumber];
  float v9 = flt_1BB87C210[presetNumber];
  long long v10 = (AUVolumeCompressorV2 *)((char *)this + 32);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUVolumeCompressorV2 *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(Element, 1u, v5, 0);
  uint64_t v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v10, 0);
  ausdk::AUElement::SetParameter(v12, 0xBu, v6, 0);
  AudioUnit v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v10, 0);
  ausdk::AUElement::SetParameter(v13, 0xAu, v7, 0);
  uint64_t v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v10, 0);
  ausdk::AUElement::SetParameter(v14, 0x14u, v8, 0);
  unsigned int v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v10, 0);
  ausdk::AUElement::SetParameter(v15, 0x1Eu, v9, 0);
  ++*((_DWORD *)this + 135);
  ausdk::AUBase::SetAFactoryPresetAsCurrent((char *)this, (const AUPreset *)&sAUVolumeCompressorV2Presets + presetNumber);
  return 0;
}

uint64_t AUVolumeCompressorV2::GetPresets(AUVolumeCompressorV2 *this, const __CFArray **a2)
{
  if (a2)
  {
    Mutable = CFArrayCreateMutable(0, 4, 0);
    for (uint64_t i = 0; i != 64; i += 16)
      CFArrayAppendValue(Mutable, (char *)&sAUVolumeCompressorV2Presets + i);
    *a2 = Mutable;
  }
  return 0;
}

uint64_t AUVolumeCompressorV2::GetParameterValueStrings(AUVolumeCompressorV2 *this, int a2, int a3, const __CFArray **a4)
{
  values[6] = *(void **)MEMORY[0x1E4F143B8];
  if (a2 || a3 != 14 && a3 != 13) {
    return 4294956417;
  }
  if (!a4) {
    return 0;
  }
  values[0] = @"0";
  values[1] = @"1";
  values[2] = @"2";
  values[3] = @"3";
  values[4] = @"4";
  values[5] = @"5";
  CFArrayRef v6 = CFArrayCreate(0, (const void **)values, 6, 0);
  uint64_t result = 0;
  *a4 = v6;
  return result;
}

uint64_t AUVolumeCompressorV2::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result = ausdk::AUBase::RestoreState(this, a2);
  if (!result) {
    ++*((_DWORD *)this + 135);
  }
  return result;
}

uint64_t AUVolumeCompressorV2::GetParameterInfo(AUVolumeCompressorV2 *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  buffer->AudioUnitParameterOptions flags = 0;
  buffer->unitName = 0;
  if (a2) {
    return 4294956418;
  }
  switch(a3)
  {
    case 0u:
      buffer->cfNameString = @"SoundGaindB";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"SoundGaindB", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFNumberRef Value = 0x42700000C3480000;
      uint64_t v7 = 3276210176;
      goto LABEL_35;
    case 1u:
      CFStringRef v8 = @"MaxOutputPower";
      goto LABEL_49;
    case 2u:
      CFStringRef v9 = @"MaxNoiseRelGain";
      goto LABEL_8;
    case 3u:
      CFStringRef v9 = @"MaxNoiseAbsGain";
LABEL_8:
      buffer->cfNameString = v9;
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(v9, buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      uint64_t v10 = 0x42700000C3480000;
      goto LABEL_52;
    case 4u:
      buffer->cfNameString = @"MinSoundThresh";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"MinSoundThresh", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFNumberRef Value = 3267362816;
      uint64_t v11 = 3263954944;
      goto LABEL_58;
    case 5u:
      buffer->cfNameString = @"MaxNoiseThresh";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"MaxNoiseThresh", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFNumberRef Value = 0xC2200000C3480000;
      uint64_t v11 = 3264741376;
      goto LABEL_58;
    case 6u:
      buffer->cfNameString = @"UpSlewRate";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"UpSlewRate", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      uint64_t v12 = 0x412000003C23D70ALL;
      goto LABEL_25;
    case 7u:
      buffer->cfNameString = @"DownSlewRate";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"DownSlewRate", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFNumberRef Value = 0xBC23D70AC1200000;
      uint64_t v11 = 3212836864;
      goto LABEL_58;
    case 8u:
      buffer->cfNameString = @"SmoothWinMs";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"SmoothWinMs", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFNumberRef Value = 0x43C8000040800000;
      uint64_t v11 = 1128792064;
      goto LABEL_58;
    case 9u:
      buffer->cfNameString = @"WinMs";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"WinMs", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFNumberRef Value = 0x42C8000040C00000;
      uint64_t v11 = 1094713344;
      goto LABEL_58;
    case 0xAu:
      buffer->cfNameString = @"MinVolume";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"MinVolume", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(void *)&buffer->minCFNumberRef Value = 0x41900000C3960000;
      uint64_t v11 = 3262119936;
      goto LABEL_58;
    case 0xBu:
      buffer->cfNameString = @"MaxVolume";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"MaxVolume", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      uint64_t v10 = 0x42B40000C1F00000;
      goto LABEL_52;
    case 0xCu:
      buffer->cfNameString = @"Volume";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Volume", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      uint64_t v12 = 0x3F80000000000000;
      goto LABEL_25;
    case 0xDu:
      CFStringRef v13 = @"Number of volume knees";
      goto LABEL_20;
    case 0xEu:
      CFStringRef v13 = @"Number of compression knees";
LABEL_20:
      buffer->cfNameString = v13;
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(v13, buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      *(void *)&buffer->minCFNumberRef Value = 0x40A0000000000000;
      uint64_t v14 = 1084227584;
      goto LABEL_21;
    case 0xFu:
      buffer->cfNameString = @"SoundGaindB Offset";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"SoundGaindB Offset", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      uint64_t v16 = 0x41400000C1400000;
      goto LABEL_40;
    case 0x10u:
      CFStringRef v17 = @"UpwardsCompRatio";
      buffer->cfNameString = @"UpwardsCompRatio";
      AudioUnitParameterOptions v18 = 0x8000000;
      goto LABEL_24;
    case 0x11u:
      CFStringRef v19 = @"A-Weighting Enabled";
      goto LABEL_51;
    case 0x12u:
      buffer->cfNameString = @"Lookahead (ms)";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Lookahead (ms)", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      uint64_t v10 = 0x4120000000000000;
      goto LABEL_52;
    case 0x3Cu:
      buffer->cfNameString = @"MinSoundThresh";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"MinSoundThresh", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFNumberRef Value = 3267362816;
      uint64_t v7 = 3263954944;
      goto LABEL_35;
    case 0x3Du:
      buffer->cfNameString = @"MaxNoiseThresh";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"MaxNoiseThresh", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFNumberRef Value = 3267362816;
      uint64_t v7 = 3264741376;
LABEL_35:
      unint64_t v24 = v7 & 0xFFFF0000FFFFFFFFLL | 0x800000000000;
      goto LABEL_41;
    case 0x3Eu:
      buffer->cfNameString = @"Compression Amount";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Compression Amount", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      uint64_t v16 = 0x4248000000000000;
      goto LABEL_40;
    case 0x3Fu:
      CFStringRef v25 = @"Input Amplitude";
      goto LABEL_39;
    case 0x40u:
      CFStringRef v25 = @"Output Amplitude";
LABEL_39:
      buffer->cfNameString = v25;
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(v25, buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      uint64_t v16 = 0x41400000C2B40000;
LABEL_40:
      *(void *)&buffer->minCFNumberRef Value = v16;
      unint64_t v24 = 0x800000000000;
LABEL_41:
      unint64_t v15 = v24 & 0xFFFFFFFFFFFFLL | 0x4800000000000000;
      goto LABEL_59;
    case 0x41u:
      CFStringRef v19 = @"ShortWin Enabled";
      goto LABEL_51;
    case 0x42u:
      CFStringRef v19 = @"ShortWin Peak";
      goto LABEL_51;
    case 0x43u:
      buffer->cfNameString = @"ShortWinMs";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"ShortWinMs", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFNumberRef Value = 0x4248000040400000;
      uint64_t v11 = 1082130432;
      goto LABEL_58;
    case 0x44u:
      buffer->cfNameString = @"ShortWin Attack";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"ShortWin Attack", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFNumberRef Value = 0x3D23D70A3A03126FLL;
      uint64_t v11 = 998445679;
      goto LABEL_58;
    case 0x45u:
      buffer->cfNameString = @"ShortWin Decay";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"ShortWin Decay", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFNumberRef Value = 0x400000003A83126FLL;
      uint64_t v11 = 1006834287;
      goto LABEL_58;
    case 0x46u:
      CFStringRef v26 = @"ShortWin Max dBRMS";
      goto LABEL_57;
    case 0x47u:
      CFStringRef v8 = @"ShortWin Max dBFS";
LABEL_49:
      buffer->cfNameString = v8;
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(v8, buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      uint64_t v10 = 3276275712;
      goto LABEL_52;
    case 0x48u:
      CFStringRef v19 = @"LongWin Enabled";
LABEL_51:
      buffer->cfNameString = v19;
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(v19, buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Boolean;
      uint64_t v10 = 0x3F80000000000000;
LABEL_52:
      *(void *)&buffer->minCFNumberRef Value = v10;
      unint64_t v15 = 0xC800000000000000;
      goto LABEL_59;
    case 0x49u:
      buffer->cfNameString = @"LongWinSec";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"LongWinSec", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFNumberRef Value = 0x43B400003F800000;
      uint64_t v11 = 1135869952;
      goto LABEL_58;
    case 0x4Au:
      buffer->cfNameString = @"LongWin Attack";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"LongWin Attack", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFNumberRef Value = 0x3D23D70A3A03126FLL;
      uint64_t v11 = 994352038;
      goto LABEL_58;
    case 0x4Bu:
      buffer->cfNameString = @"LongWin Decay";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"LongWin Decay", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFNumberRef Value = 0x412000003A83126FLL;
      uint64_t v11 = 1011129254;
      goto LABEL_58;
    case 0x4Cu:
      CFStringRef v26 = @"LongWin MaxOutputPower";
LABEL_57:
      buffer->cfNameString = v26;
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(v26, buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFNumberRef Value = 3276275712;
      uint64_t v11 = 3233808384;
      goto LABEL_58;
    default:
      unsigned int v20 = a3 % 0xA;
      signed int v21 = 10 * (a3 / 0xA);
      uint64_t result = 4294956418;
      if (v21 > 39)
      {
        if (v21 == 40)
        {
          uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUVolumeCompressorV2 *)((char *)this + 32), 0);
          if (ausdk::AUElement::GetParameter(Element, 0xEu) > (float)v20)
          {
            buffer->cfNameString = @"CompKneeX";
            buffer->flags |= 0x8000000u;
            CFStringGetCString(@"CompKneeX", buffer->name, 52, 0x8000100u);
            uint64_t result = 0;
            buffer->unit = kAudioUnitParameterUnit_Generic;
            uint64_t v23 = 3276275712;
LABEL_69:
            *(void *)&buffer->minCFNumberRef Value = v23;
            uint64_t v14 = 3253731328;
LABEL_21:
            unint64_t v15 = v14 & 0xFFFFFFFFFFFFLL | 0xD800000000000000;
LABEL_59:
            *(void *)&buffer->defaultCFNumberRef Value = v15;
            return result;
          }
        }
        else
        {
          if (v21 != 50) {
            return result;
          }
          float v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUVolumeCompressorV2 *)((char *)this + 32), 0);
          if (ausdk::AUElement::GetParameter(v27, 0xEu) > (float)v20)
          {
            CFStringRef v17 = @"CompKneeRatio";
            buffer->cfNameString = @"CompKneeRatio";
            AudioUnitParameterOptions v18 = buffer->flags | 0x8000000;
LABEL_24:
            buffer->AudioUnitParameterOptions flags = v18;
            CFStringGetCString(v17, buffer->name, 52, 0x8000100u);
            uint64_t result = 0;
            buffer->unit = kAudioUnitParameterUnit_Generic;
            uint64_t v12 = 0x412000003F800000;
LABEL_25:
            *(void *)&buffer->minCFNumberRef Value = v12;
            uint64_t v11 = 1065353216;
LABEL_58:
            unint64_t v15 = v11 & 0xFFFFFFFFFFFFLL | 0xC800000000000000;
            goto LABEL_59;
          }
        }
        return 4294956418;
      }
      if (v21 != 20)
      {
        if (v21 != 30) {
          return result;
        }
        float v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUVolumeCompressorV2 *)((char *)this + 32), 0);
        if (ausdk::AUElement::GetParameter(v22, 0xDu) <= (float)v20) {
          return 4294956418;
        }
        buffer->cfNameString = @"VolumeKneeY";
        buffer->flags |= 0x8000000u;
        CFStringGetCString(@"VolumeKneeY", buffer->name, 52, 0x8000100u);
        uint64_t result = 0;
        buffer->unit = kAudioUnitParameterUnit_Generic;
        uint64_t v23 = 0x42B40000C3960000;
        goto LABEL_69;
      }
      unint64_t v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUVolumeCompressorV2 *)((char *)this + 32), 0);
      float Parameter = ausdk::AUElement::GetParameter(v28, 0xDu);
      if (Parameter <= (float)v20)
      {
        uint64_t result = 4294956418;
      }
      else
      {
        CFStringRef v30 = kAUVolumeCompressorV2ParamName_VolumeKneeXstr[v20];
        buffer->cfNameString = v30;
        buffer->flags |= 0x8000000u;
        CFStringGetCString(v30, buffer->name, 52, 0x8000100u);
        uint64_t result = 0;
        buffer->unit = kAudioUnitParameterUnit_Generic;
        *(void *)&buffer->minCFNumberRef Value = 0x3F80000000000000;
        *(void *)&buffer->defaultCFNumberRef Value = 0xD80000003F000000;
      }
      if ((float)(Parameter + -1.0) == (float)v20) {
        buffer->maxCFNumberRef Value = 1.0;
      }
      return result;
  }
}

uint64_t AUVolumeCompressorV2::GetParameterList(AUVolumeCompressorV2 *this, int a2, unsigned int *a3, unsigned int *a4)
{
  if (a2) {
    return 4294956430;
  }
  for (uint64_t i = 0; i != 17; ++i)
  {
    if (a3) {
      a3[i] = i;
    }
  }
  for (uint64_t j = 0; j != 17; ++j)
  {
    if (a3) {
      a3[j + 17] = j + 60;
    }
  }
  unsigned int v7 = *((_DWORD *)this + 419);
  if (v7)
  {
    int v8 = 34;
    do
    {
      if (a3)
      {
        a3[v8] = v8 - 14;
        unsigned int v7 = *((_DWORD *)this + 419);
      }
      unsigned int v9 = v8 + 1;
      unsigned int v10 = v8 - 33;
      ++v8;
    }
    while (v10 < v7);
    if (v7)
    {
      for (unsigned int k = 0; k < v7; ++k)
      {
        if (a3)
        {
          a3[v9 + k] = k + 30;
          unsigned int v7 = *((_DWORD *)this + 419);
        }
      }
      v9 += k;
    }
  }
  else
  {
    unsigned int v9 = 34;
  }
  unsigned int v12 = *((_DWORD *)this + 428);
  if (v12)
  {
    for (unsigned int m = 0; m < v12; ++m)
    {
      if (a3)
      {
        a3[v9 + m] = m + 40;
        unsigned int v12 = *((_DWORD *)this + 428);
      }
    }
    if (v12)
    {
      for (unsigned int n = 0; n < v12; ++n)
      {
        if (a3)
        {
          a3[v9 + m + n] = n + 50;
          unsigned int v12 = *((_DWORD *)this + 428);
        }
      }
      v9 += m + n;
    }
    else
    {
      v9 += m;
    }
  }
  uint64_t result = 0;
  *a4 = v9;
  return result;
}

uint64_t AUVolumeCompressorV2::Render(AUVolumeCompressorV2 *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  int v8 = (AUVolumeCompressorV2 *)((char *)this + 80);
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUVolumeCompressorV2 *)((char *)this + 80), 0);
  uint64_t v10 = ausdk::AUScope::SafeGetElement((AUVolumeCompressorV2 *)((char *)this + 128), 0);
  uint64_t v11 = ausdk::AUScope::GetElement(v8, 0);
  if (!v11 || !*(_DWORD *)(v11 + 172)) {
    return 4294956420;
  }
  unsigned int v12 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 0);
  uint64_t result = ausdk::AUInputElement::PullInput(v12, a2, a3, 0, a4);
  if (!result)
  {
    uint64_t BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 144));
    uint64_t v15 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144));
    (*(void (**)(AUVolumeCompressorV2 *, unsigned int *, uint64_t, uint64_t, uint64_t))(*(void *)this + 176))(this, a2, BufferList, v15, a4);
    return 0;
  }
  return result;
}

uint64_t AUVolumeCompressorV2::ProcessBufferLists(float32x2_t *this, unsigned int *a2, const AudioBufferList *a3, AudioBufferList *a4, unsigned int a5)
{
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  __int32 v9 = this[67].i32[1];
  if (v9 != this[68].i32[0])
  {
    AUVolumeCompressorV2::ApplyParameters(this);
    AUVolumeCompressorV2::ComputeNumbers((AUVolumeCompressorV2 *)this);
    this[68].i32[0] = v9;
  }
  __int32 v10 = this[68].i32[1];
  if (v10 != this[69].i32[0])
  {
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&this[4], 0);
    this[78].f32[1] = ausdk::AUElement::GetParameter(Element, 0xCu);
    unsigned int v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&this[4], 0);
    this[74].f32[0] = ausdk::AUElement::GetParameter(v12, 4u);
    CFStringRef v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&this[4], 0);
    *(float *)&double v14 = ausdk::AUElement::GetParameter(v13, 5u);
    this[74].i32[1] = LODWORD(v14);
    AUVolumeCompressorV2::AdjustForVolume(this, v14, v15);
    uint64_t v16 = (float *)this[219];
    float v17 = *v16;
    AudioUnitParameterOptions v18 = (float *)this[215];
    float v19 = *v18;
    float v20 = this[74].f32[0] + (1.0 - *v16) * (float)(v18[1] - *v18);
    uint64_t v21 = this[214].u32[0];
    float32x2_t v22 = this[217];
    if (v21)
    {
      uint64_t v23 = v18 + 1;
      unint64_t v24 = (float *)this[219];
      CFStringRef v25 = (float *)this[217];
      uint64_t v26 = this[214].u32[0];
      do
      {
        float v27 = v20 - (float)(*v24 * v19);
        *v25++ = v27;
        float v28 = *v24++;
        float v29 = v28;
        float v30 = *v23++;
        float v19 = v30;
        float v20 = v27 + (float)(v29 * v30);
        --v26;
      }
      while (v26);
      float v17 = v16[v21];
      float v19 = v18[v21];
    }
    else
    {
      uint64_t v21 = 0;
    }
    *(float *)(*(void *)&v22 + 4 * v21) = v20 - (float)(v17 * v19);
    float v31 = this[73].f32[0];
    this[79].f32[1] = v31;
    float v32 = v31 + this[70].f32[0];
    float v33 = this[73].f32[1];
    if (v32 > v33)
    {
      float v31 = v31 + (float)(v33 - v32);
      this[79].f32[1] = v31;
    }
    this[89].i32[0] = 1065353216;
    this[90].i32[1] = 0;
    float v34 = this[74].f32[0];
    float v35 = this[74].f32[1];
    float32_t v36 = (float)((float)(v18[1] - (float)(*v16 * (float)(v18[1] - v34))) - (float)(v31 + v35)) / (float)(v34 - v35);
    this[89].f32[1] = v36;
    this[91].f32[0] = (float)(v31 + v35) - (float)(v36 * v35);
    this[90].i32[0] = 1065353216;
    this[91].f32[1] = v31;
    this[92].f32[0] = v34;
    this[92].f32[1] = v35;
    this[69].i32[0] = v10;
  }
  if (this[67].i8[1]) {
    this[67].i8[1] = 0;
  }
  unsigned __int32 v37 = a5;
  if ((*(unsigned int (**)(float32x2_t *))(*(void *)this + 576))(this))
  {
    if (a3->mNumberBuffers)
    {
      unint64_t v38 = 0;
      uint64_t v39 = 16;
      do
      {
        memcpy(*(void **)((char *)&a4->mNumberBuffers + v39), *(const void **)((char *)&a3->mNumberBuffers + v39), 4 * a5);
        ++v38;
        v39 += 16;
      }
      while (v38 < a3->mNumberBuffers);
    }
  }
  else if (this[82].i8[0])
  {
    if (a5)
    {
      unsigned int v40 = 0;
      p_mData = &a4->mBuffers[0].mData;
      long long v42 = &a3->mBuffers[0].mData;
      do
      {
        long long v88 = 0u;
        long long v89 = 0u;
        *(_OWORD *)uint64_t v86 = 0u;
        long long v87 = 0u;
        long long v84 = 0u;
        long long v85 = 0u;
        *(_OWORD *)uint64_t v82 = 0u;
        long long v83 = 0u;
        unsigned int v43 = this[221].u32[0];
        if (v43)
        {
          Float64 v44 = v82;
          uint64_t v45 = v86;
          unsigned int v46 = v42;
          unsigned int v47 = p_mData;
          uint64_t v48 = this[221].u32[0];
          do
          {
            unsigned int v49 = (char *)*v46;
            v46 += 2;
            *v45++ = (float *)&v49[4 * v40];
            unsigned int v50 = (char *)*v47;
            v47 += 2;
            *v44++ = (float *)&v50[4 * v40];
            --v48;
          }
          while (v48);
        }
        AUVolumeCompressorV2::ProcessAudioBlock((AUVolumeCompressorV2 *)this, (const float **)v86, v82, v43);
        if (this[82].i8[1] && this[82].i8[3]) {
          AUVolumeCompressorV2::ProcessShortAudioBlocks((AUVolumeCompressorV2 *)this, v82, this[221].u32[0]);
        }
        __int32 v51 = this[75].i32[0];
        v40 += v51;
        v37 -= v51;
      }
      while (v37);
    }
  }
  else
  {
    unsigned int v52 = 0;
    float v80 = &a3->mBuffers[0].mData;
    do
    {
      __int32 v53 = this[207].i32[0];
      for (__int32 i = this[75].i32[0]; ; this[207].i32[1] += i)
      {
        unsigned __int32 v55 = i - v53;
        if (i != v53) {
          break;
        }
        long long v88 = 0u;
        long long v89 = 0u;
        *(_OWORD *)uint64_t v86 = 0u;
        long long v87 = 0u;
        long long v84 = 0u;
        long long v85 = 0u;
        *(_OWORD *)uint64_t v82 = 0u;
        long long v83 = 0u;
        unsigned int v56 = this[221].u32[0];
        if (v56)
        {
          long long v57 = v82;
          long long v58 = v86;
          __int16 v59 = this + 183;
          uint64_t v60 = this[221].u32[0];
          do
          {
            *v58++ = (float *)v59[-16];
            long long v61 = (float *)*v59;
            v59 += 2;
            *v57++ = v61;
            --v60;
          }
          while (v60);
        }
        AUVolumeCompressorV2::ProcessAudioBlock((AUVolumeCompressorV2 *)this, (const float **)v86, v82, v56);
        if (this[82].i8[1] && this[82].i8[3]) {
          AUVolumeCompressorV2::ProcessShortAudioBlocks((AUVolumeCompressorV2 *)this, v82, this[221].u32[0]);
        }
        __int32 v53 = 0;
        this[207].i32[0] = 0;
        this[88].i32[1] = 0;
        __int32 i = this[75].i32[0];
      }
      if (v37 >= v55) {
        unsigned __int32 v62 = i - v53;
      }
      else {
        unsigned __int32 v62 = v37;
      }
      if (this[221].i32[0])
      {
        unint64_t v63 = 0;
        uint64_t v65 = v80;
        vDSP_Length v64 = this + 167;
        do
        {
          AudioUnitParameterValue v66 = (char *)*v65;
          v65 += 2;
          uint64_t v67 = &v66[4 * v52];
          float32x2_t v68 = *v64;
          v64 += 2;
          memcpy((void *)(*(void *)&v68 + 4 * this[207].u32[0]), v67, 4 * v62);
          ++v63;
          unint64_t v69 = this[221].u32[0];
        }
        while (v63 < v69);
        this[207].i32[0] += v62;
        unsigned __int32 v70 = this[207].u32[1];
        if (v70 >= v62) {
          unsigned __int32 v71 = v62;
        }
        else {
          unsigned __int32 v71 = this[207].u32[1];
        }
        if (v69)
        {
          unsigned __int32 v81 = v37;
          unint64_t v72 = 0;
          unsigned __int8 v73 = &a4->mBuffers[0].mData;
          uint64_t v74 = this + 183;
          do
          {
            uint64_t v75 = (char *)*v73;
            v73 += 2;
            uint64_t v76 = &v75[4 * v52];
            float32x2_t v77 = *v74;
            v74 += 2;
            memcpy(v76, (const void *)(*(void *)&v77 + 4 * this[88].u32[1]), 4 * v71);
            ++v72;
          }
          while (v72 < this[221].u32[0]);
          unsigned __int32 v70 = this[207].u32[1];
          unsigned __int32 v37 = v81;
        }
      }
      else
      {
        this[207].i32[0] = v53 + v62;
        unsigned __int32 v70 = this[207].u32[1];
        if (v70 >= v62) {
          unsigned __int32 v71 = v62;
        }
        else {
          unsigned __int32 v71 = this[207].u32[1];
        }
      }
      this[88].i32[1] += v71;
      this[207].i32[1] = v70 - v71;
      v52 += v62;
      BOOL v78 = v37 > v55;
      v37 -= v62;
    }
    while (v78);
  }
  return 0;
}

float AUVolumeCompressorV2::ApplyParameters(float32x2_t *this)
{
  vDSP_Length v2 = (ausdk::AUScope *)&this[4];
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&this[4], 0);
  this[72].f32[1] = ausdk::AUElement::GetParameter(Element, 1u);
  uint64_t v4 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[73].f32[0] = ausdk::AUElement::GetParameter(v4, 2u);
  float v5 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[73].f32[1] = ausdk::AUElement::GetParameter(v5, 3u);
  CFArrayRef v6 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[74].f32[0] = ausdk::AUElement::GetParameter(v6, 4u);
  unsigned int v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[74].f32[1] = ausdk::AUElement::GetParameter(v7, 5u);
  int v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[81].f32[0] = ausdk::AUElement::GetParameter(v8, 6u);
  __int32 v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[81].f32[1] = ausdk::AUElement::GetParameter(v9, 7u);
  __int32 v10 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[80].f32[0] = ausdk::AUElement::GetParameter(v10, 8u);
  uint64_t v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[76].f32[1] = ausdk::AUElement::GetParameter(v11, 0xBu);
  unsigned int v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[77].f32[0] = ausdk::AUElement::GetParameter(v12, 0xAu);
  CFStringRef v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[77].f32[1] = ausdk::AUElement::GetParameter(v13, 0x14u);
  double v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[78].f32[0] = ausdk::AUElement::GetParameter(v14, 0x1Eu);
  double v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[78].f32[1] = ausdk::AUElement::GetParameter(v15, 0xCu);
  uint64_t v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[209].i32[1] = ausdk::AUElement::GetParameter(v16, 0xDu);
  float v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[214].i32[0] = ausdk::AUElement::GetParameter(v17, 0xEu);
  AudioUnitParameterOptions v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[72].f32[0] = ausdk::AUElement::GetParameter(v18, 0xFu);
  float v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[79].f32[0] = ausdk::AUElement::GetParameter(v19, 0x10u);
  float v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  int v21 = ausdk::AUElement::GetParameter(v20, 0x11u) != 0.0;
  if (this[94].u8[0] != v21)
  {
    float32x2_t v22 = this[93];
    if (v22)
    {
      (*(void (**)(float32x2_t))(**(void **)&v22 + 24))(v22);
      this[94].i8[0] = v21;
    }
  }
  float v23 = this[76].f32[0];
  unint64_t v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  BOOL v25 = v23 != ausdk::AUElement::GetParameter(v24, 9u);
  uint64_t v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float Parameter = ausdk::AUElement::GetParameter(v26, 9u);
  this[76].f32[0] = Parameter;
  LOBYTE(Parameter) = this[82].i8[1];
  float v28 = (float)LODWORD(Parameter);
  float v29 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  if (ausdk::AUElement::GetParameter(v29, 0x41u) != v28) {
    BOOL v25 = 1;
  }
  float v30 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[82].i8[1] = ausdk::AUElement::GetParameter(v30, 0x41u) != 0.0;
  float v31 = this[82].f32[1];
  float v32 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  if (v31 != ausdk::AUElement::GetParameter(v32, 0x43u)) {
    BOOL v25 = 1;
  }
  float v33 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[82].f32[1] = ausdk::AUElement::GetParameter(v33, 0x43u);
  float v34 = this[97].f32[0];
  float v35 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  if (v34 != ausdk::AUElement::GetParameter(v35, 0x12u)) {
    BOOL v25 = 1;
  }
  float32_t v36 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v37 = ausdk::AUElement::GetParameter(v36, 0x12u);
  this[97].f32[0] = v37;
  unsigned int v38 = this[66].u32[1];
  if (v38) {
    unsigned int v38 = ((float)(v37 * this[69].f32[1]) / 1000.0);
  }
  this[97].i32[1] = v38;
  uint64_t v39 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[82].i8[3] = ausdk::AUElement::GetParameter(v39, 0x42u) != 0.0;
  unsigned int v40 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[86].f32[0] = ausdk::AUElement::GetParameter(v40, 0x46u);
  BOOL v41 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[87].f32[0] = ausdk::AUElement::GetParameter(v41, 0x47u);
  long long v42 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  double v43 = ausdk::AUElement::GetParameter(v42, 0x44u) * this[69].f32[1];
  if (v43 >= 2.22507386e-308) {
    double v44 = -6.90775528 / v43;
  }
  else {
    double v44 = -INFINITY;
  }
  double v45 = exp(v44);
  if (v44 < -708.4) {
    double v45 = 0.0;
  }
  float v46 = v45;
  this[83].f32[1] = 1.0 - v46;
  unsigned int v47 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  double v48 = ausdk::AUElement::GetParameter(v47, 0x45u) * this[69].f32[1];
  if (v48 >= 2.22507386e-308) {
    double v49 = -6.90775528 / v48;
  }
  else {
    double v49 = -INFINITY;
  }
  double v50 = exp(v49);
  if (v49 < -708.4) {
    double v50 = 0.0;
  }
  float v51 = v50;
  this[84].f32[0] = 1.0 - v51;
  unsigned int v52 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[82].i8[2] = ausdk::AUElement::GetParameter(v52, 0x48u) != 0.0;
  __int32 v53 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[86].f32[1] = ausdk::AUElement::GetParameter(v53, 0x4Cu);
  long long v54 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  double v55 = ausdk::AUElement::GetParameter(v54, 0x4Au) * this[69].f32[1];
  if (v55 >= 2.22507386e-308) {
    double v56 = -6.90775528 / v55;
  }
  else {
    double v56 = -INFINITY;
  }
  double v57 = exp(v56);
  if (v56 < -708.4) {
    double v57 = 0.0;
  }
  float v58 = v57;
  this[84].f32[1] = 1.0 - v58;
  __int16 v59 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  double v60 = ausdk::AUElement::GetParameter(v59, 0x4Bu) * this[69].f32[1];
  if (v60 >= 2.22507386e-308) {
    double v61 = -6.90775528 / v60;
  }
  else {
    double v61 = -INFINITY;
  }
  long double v62 = exp(v61);
  if (v61 < -708.4) {
    long double v62 = 0.0;
  }
  float v64 = v62;
  this[85].f32[0] = 1.0 - v64;
  if (v25)
  {
    uint64_t v65 = this[221].u32[0];
    if (v65)
    {
      int v66 = this[82].u8[0];
      __int32 v67 = this[66].i32[1];
      float32x2_t v68 = this + 135;
      do
      {
        uint64_t v69 = *(void *)&v68[1] - *(void *)v68;
        if (v69 >= 1) {
          bzero(*(void **)v68, 4 * (((unint64_t)v69 >> 2) - ((unint64_t)v69 > 3)) + 4);
        }
        if (!v66)
        {
          unsigned __int32 v70 = (void *)v68[32];
          uint64_t v71 = *(void *)&v68[33] - (void)v70;
          if (v71 >= 1) {
            bzero(v70, 4 * (((unint64_t)v71 >> 2) - ((unint64_t)v71 > 3)) + 4);
          }
          unint64_t v72 = (void *)v68[48];
          uint64_t v73 = *(void *)&v68[49] - (void)v72;
          if (v73 >= 1) {
            bzero(v72, 4 * (((unint64_t)v73 >> 2) - ((unint64_t)v73 > 3)) + 4);
          }
        }
        if (v67)
        {
          uint64_t v74 = (void *)v68[16];
          uint64_t v75 = *(void *)&v68[17] - (void)v74;
          if (v75 >= 1) {
            bzero(v74, 4 * (((unint64_t)v75 >> 2) - ((unint64_t)v75 > 3)) + 4);
          }
        }
        v68 += 2;
        --v65;
      }
      while (v65);
    }
    HIDWORD(v62) = 0;
    this[207] = 0;
    this[88].i32[1] = 0;
    this[67].i8[1] = 1;
  }
  if (this[209].i32[1])
  {
    unint64_t v76 = 1;
    do
    {
      float32x2_t v77 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
      *(float *)(*(void *)&this[210] + 4 * v76) = ausdk::AUElement::GetParameter(v77, v76 + 19);
      BOOL v78 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
      *(float *)&long double v62 = ausdk::AUElement::GetParameter(v78, v76 + 29);
      if (*(float *)&v62 < this[77].f32[0]) {
        LODWORD(v62) = this[77].i32[0];
      }
      LODWORD(v63) = this[76].i32[1];
      if (*(float *)&v62 > *(float *)&v63) {
        LODWORD(v62) = this[76].i32[1];
      }
      uint64_t v79 = (_DWORD *)this[212];
      v79[v76] = LODWORD(v62);
      unint64_t v80 = this[209].u32[1];
    }
    while (v76++ < v80);
    uint64_t v82 = (v80 + 1);
  }
  else
  {
    uint64_t v79 = (_DWORD *)this[212];
    uint64_t v82 = 1;
  }
  long long v83 = (_DWORD *)this[210];
  *long long v83 = 0;
  v83[v82] = 1065353216;
  *uint64_t v79 = this[77].i32[0];
  LODWORD(v62) = this[76].i32[1];
  v79[v82] = LODWORD(v62);

  return AUVolumeCompressorV2::AdjustForVolume(this, v62, v63);
}

void AUVolumeCompressorV2::ComputeNumbers(AUVolumeCompressorV2 *this)
{
  vDSP_Length v2 = (float *)*((void *)this + 219);
  float v3 = *v2;
  uint64_t v4 = (float *)*((void *)this + 215);
  float v5 = *v4;
  float v6 = *((float *)this + 148) + (1.0 - *v2) * (float)(v4[1] - *v4);
  uint64_t v7 = *((unsigned int *)this + 428);
  uint64_t v8 = *((void *)this + 217);
  if (v7)
  {
    __int32 v9 = v4 + 1;
    __int32 v10 = (float *)*((void *)this + 219);
    uint64_t v11 = (float *)*((void *)this + 217);
    uint64_t v12 = *((unsigned int *)this + 428);
    do
    {
      float v13 = v6 - (float)(*v10 * v5);
      *v11++ = v13;
      float v14 = *v10++;
      float v15 = v14;
      float v16 = *v9++;
      float v5 = v16;
      float v6 = v13 + (float)(v15 * v16);
      --v12;
    }
    while (v12);
    float v3 = v2[v7];
    float v5 = v4[v7];
  }
  else
  {
    uint64_t v7 = 0;
  }
  *(float *)(v8 + 4 * v7) = v6 - (float)(v3 * v5);
  float v17 = *((float *)this + 146);
  *((float *)this + 159) = v17;
  float v18 = v17 + *((float *)this + 140);
  float v19 = *((float *)this + 147);
  if (v18 > v19)
  {
    float v17 = v17 + (float)(v19 - v18);
    *((float *)this + 159) = v17;
  }
  *((_DWORD *)this + 178) = 1065353216;
  *((_DWORD *)this + 181) = 0;
  float v20 = *((float *)this + 148);
  float v21 = *((float *)this + 149);
  float v22 = (float)((float)(v4[1] - (float)(*v2 * (float)(v4[1] - v20))) - (float)(v17 + v21)) / (float)(v20 - v21);
  *((float *)this + 179) = v22;
  *((float *)this + 182) = (float)(v17 + v21) - (float)(v22 * v21);
  *((_DWORD *)this + 180) = 1065353216;
  *((float *)this + 183) = v17;
  *((float *)this + 184) = v20;
  *((float *)this + 185) = v21;
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUVolumeCompressorV2 *)((char *)this + 32), 0);
  float Parameter = ausdk::AUElement::GetParameter(Element, 9u);
  if (*((unsigned char *)this + 656))
  {
    unsigned int v25 = *((_DWORD *)this + 84);
    unsigned int v26 = 1;
    unsigned int v27 = v25;
    do
    {
      if (v25 / v26 < ((float)(Parameter * *((float *)this + 139)) / 1000.0)) {
        break;
      }
      if (v25 == v25 / v26 * v26) {
        unsigned int v27 = v25 / v26;
      }
      ++v26;
    }
    while (v26 != 33);
  }
  else
  {
    unsigned int v27 = ((float)(Parameter * *((float *)this + 139)) / 1000.0) & 0xFFFFFFFC;
  }
  *((_DWORD *)this + 150) = v27;
  unsigned int v28 = vcvtas_u32_f32((float)(*((float *)this + 160) / Parameter) + 0.25);
  if (v28 <= 1) {
    unsigned int v28 = 1;
  }
  *((_DWORD *)this + 161) = v28;
  float v29 = Parameter * (float)v28;
  if (v29 > 400.0) {
    float v29 = 399.0;
  }
  *((float *)this + 160) = v29;
  uint64_t v30 = *((unsigned int *)this + 442);
  if (v30)
  {
    float v31 = (unsigned int *)((char *)this + 792);
    do
    {
      *float v31 = v28;
      *((void *)v31 - 1) = 0;
      v31 += 8;
      --v30;
    }
    while (v30);
  }
  float v32 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUVolumeCompressorV2 *)((char *)this + 32), 0);
  float v33 = ausdk::AUElement::GetParameter(v32, 0x49u);
  vDSP_Length v34 = *((unsigned int *)this + 150);
  float v35 = v33 * (float)(*((float *)this + 139) / (float)v34);
  float v36 = 0.0;
  if (v35 >= 0.00001) {
    float v36 = expf(-4.6052 / v35);
  }
  *((float *)this + 176) = 1.0 - v36;
  if (v34)
  {
    uint64_t v37 = 0;
    unsigned int v38 = (float *)*((void *)this + 130);
    uint64_t v39 = *((void *)this + 131);
    if ((v34 + 1) > 2) {
      uint64_t v40 = (v34 + 1);
    }
    else {
      uint64_t v40 = 2;
    }
    uint64_t v41 = v40 - 1;
    do
    {
      float v42 = (float)(v37 + 1);
      v38[v37] = (float)((float)(*((float *)this + 162) * v42) * 1000.0) / *((float *)this + 139);
      *(float *)(v39 + 4 * v37++) = (float)((float)(*((float *)this + 163) * v42) * 1000.0) / *((float *)this + 139);
    }
    while (v41 != v37);
  }
  else
  {
    unsigned int v38 = (float *)*((void *)this + 130);
  }
  float __B = 20.0;
  vDSP_vsdiv(v38, 1, &__B, v38, 1, v34);
  vDSP_vsdiv(*((const float **)this + 131), 1, &__B, *((float **)this + 131), 1, *((unsigned int *)this + 150));
  if (*((_DWORD *)this + 150))
  {
    unint64_t v43 = 0;
    do
    {
      uint64_t v44 = *((void *)this + 130);
      *(float *)(v44 + 4 * v43) = __exp10f(*(float *)(v44 + 4 * v43));
      uint64_t v45 = *((void *)this + 131);
      *(float *)(v45 + 4 * v43) = __exp10f(*(float *)(v45 + 4 * v43));
      ++v43;
    }
    while (v43 < *((unsigned int *)this + 150));
  }
}

void AUVolumeCompressorV2::ProcessAudioBlock(AUVolumeCompressorV2 *this, const float **a2, float **a3, unsigned int a4)
{
  uint64_t v128 = *MEMORY[0x1E4F143B8];
  float v8 = *((float *)this + 143) + *((float *)this + 140);
  float v9 = *((float *)this + 145);
  float v10 = 1.0;
  if (v8 >= v9)
  {
    float v11 = v9 - v8;
    float v12 = v11 / 20.0;
    BOOL v13 = v11 < -4.0;
    float v14 = -0.2;
    if (!v13) {
      float v14 = v12;
    }
    float v10 = __exp10f(v14);
  }
  float v15 = *((float *)this + 141);
  if ((float)(v10 * v15) != 1.0)
  {
    float v16 = *((float *)this + 142);
    if ((float)(v10 * v15) == v16)
    {
      __B[0] = v10 * v15;
      if (a4)
      {
        uint64_t v21 = a4;
        float v22 = (float **)a2;
        do
        {
          float v23 = *v22++;
          vDSP_vsmul(v23, 1, __B, v23, 1, *((unsigned int *)this + 150));
          --v21;
        }
        while (v21);
      }
    }
    else
    {
      vDSP_Length v17 = *((unsigned int *)this + 150);
      __B[0] = (float)-(float)(v16 - (float)(v15 * v10)) / (float)v17;
      vDSP_vramp((const float *)this + 142, __B, *((float **)this + 132), 1, v17);
      if (a4)
      {
        uint64_t v18 = a4;
        float v19 = (float **)a2;
        do
        {
          float v20 = *v19++;
          vDSP_vmul(v20, 1, *((const float **)this + 132), 1, v20, 1, *((unsigned int *)this + 150));
          --v18;
        }
        while (v18);
      }
    }
  }
  *((float *)this + 142) = v10 * *((float *)this + 141);
  v126[0] = xmmword_1BB89884C;
  v126[1] = *(_OWORD *)"\bδ?";
  if (a4 <= 4) {
    HIDWORD(v126[0]) = 1065353216;
  }
  if (*((unsigned char *)this + 752))
  {
    if (a4)
    {
      uint64_t v24 = 0;
      int v25 = 4 * *((_DWORD *)this + 150);
      uint64_t v26 = *((void *)this + 96);
      uint64_t v27 = *((void *)this + 95);
      unsigned int v28 = (uint64_t *)((char *)this + 1592);
      float v29 = a2;
      do
      {
        uint64_t v30 = v26 + v24;
        *(_DWORD *)(v30 + 12) = v25;
        uint64_t v31 = v27 + v24;
        *(_DWORD *)(v31 + 12) = v25;
        uint64_t v32 = (uint64_t)*v29++;
        *(void *)(v31 + 16) = v32;
        uint64_t v33 = *v28++;
        *(void *)(v30 + 16) = v33;
        v24 += 16;
      }
      while (16 * a4 != v24);
    }
    (*(void (**)(void))(**((void **)this + 93) + 32))(*((void *)this + 93));
    if (a4)
    {
      unsigned int v43 = *((_DWORD *)this + 150);
      uint64_t v44 = (const float **)((char *)this + 1592);
      uint64_t v45 = (char *)this + 784;
      float v46 = __B;
      unsigned int v47 = (float *)v126;
      uint64_t v48 = a4;
      do
      {
        vDSP_svesq(*v44, 1, v46, v43);
        unsigned int v43 = *((_DWORD *)this + 150);
        float v49 = (float)(*v47 * *v46) / (float)v43;
        float *v46 = v49;
        uint64_t v50 = *((unsigned int *)v45 + 1);
        *(float *)(*((void *)v45 + 2) + 4 * v50) = v49;
        unsigned int v51 = *((_DWORD *)v45 + 2);
        *((_DWORD *)v45 + 1) = ((int)v50 + 1) % v51;
        if (*(_DWORD *)v45 < v51) {
          ++*(_DWORD *)v45;
        }
        ++v44;
        ++v46;
        v45 += 32;
        ++v47;
        --v48;
      }
      while (v48);
      goto LABEL_32;
    }
LABEL_38:
    double v58 = SlidingRMSWindow::ComputeRMS((const float **)this + 98);
    float v53 = *(float *)&v58;
    goto LABEL_39;
  }
  if (!a4) {
    goto LABEL_38;
  }
  unsigned int v34 = *((_DWORD *)this + 150);
  float v35 = (char *)this + 784;
  float v36 = __B;
  uint64_t v37 = (float *)v126;
  unsigned int v38 = a2;
  uint64_t v39 = a4;
  do
  {
    vDSP_svesq(*v38, 1, v36, v34);
    unsigned int v34 = *((_DWORD *)this + 150);
    float v40 = (float)(*v37 * *v36) / (float)v34;
    float *v36 = v40;
    uint64_t v41 = *((unsigned int *)v35 + 1);
    *(float *)(*((void *)v35 + 2) + 4 * v41) = v40;
    unsigned int v42 = *((_DWORD *)v35 + 2);
    *((_DWORD *)v35 + 1) = ((int)v41 + 1) % v42;
    if (*(_DWORD *)v35 < v42) {
      ++*(_DWORD *)v35;
    }
    ++v38;
    ++v36;
    v35 += 32;
    ++v37;
    --v39;
  }
  while (v39);
LABEL_32:
  double v52 = SlidingRMSWindow::ComputeRMS((const float **)this + 98);
  float v53 = *(float *)&v52;
  if (a4 < 2)
  {
LABEL_39:
    int v57 = 0;
    goto LABEL_40;
  }
  uint64_t v54 = a4 - 1;
  double v55 = (const float **)((char *)this + 816);
  do
  {
    double v56 = SlidingRMSWindow::ComputeRMS(v55);
    if (v53 < *(float *)&v56) {
      float v53 = *(float *)&v56;
    }
    v55 += 4;
    --v54;
  }
  while (v54);
  int v57 = 1;
LABEL_40:
  float v59 = v53 + 1.0e-20;
  float v60 = log10f(v59) * 10.0;
  if (v60 >= *((float *)this + 184))
  {
    unsigned int v63 = 0;
    do
    {
      if (v60 < *(float *)(*((void *)this + 215) + 4 * v63)) {
        break;
      }
      ++v63;
    }
    while (v63 <= *((_DWORD *)this + 428));
    unsigned int v64 = v63 - 1;
    float v61 = *(float *)(*((void *)this + 219) + 4 * v64);
    float v62 = *(float *)(*((void *)this + 217) + 4 * v64);
  }
  else if (v60 >= *((float *)this + 185))
  {
    float v61 = *((float *)this + 179);
    float v62 = *((float *)this + 182);
  }
  else
  {
    float v61 = *((float *)this + 180);
    float v62 = *((float *)this + 183);
  }
  float v65 = v62 + (float)(v61 * v60);
  *((float *)this + 143) = v65;
  if (v65 <= *((float *)this + 145)) {
    float v66 = v65;
  }
  else {
    float v66 = *((float *)this + 145);
  }
  float v67 = v66 - v60;
  if (*((unsigned char *)this + 658))
  {
    uint64_t v68 = *((unsigned int *)this + 442);
    float __C = 0.0;
    vDSP_svesq(*a2, 1, &__C, *((unsigned int *)this + 150));
    unsigned int v69 = *((_DWORD *)this + 150);
    float v70 = __C / (float)v69;
    float __C = v70;
    if (v68 >= 2)
    {
      uint64_t v71 = v68 - 1;
      unint64_t v72 = a2 + 1;
      do
      {
        float v124 = 0.0;
        uint64_t v73 = *v72++;
        vDSP_svesq(v73, 1, &v124, v69);
        unsigned int v69 = *((_DWORD *)this + 150);
        float v70 = v124 / (float)v69;
        if (__C >= v70) {
          float v70 = __C;
        }
        float __C = v70;
        --v71;
      }
      while (v71);
    }
    float v74 = *((float *)this + 175) + (float)(*((float *)this + 176) * (float)(v70 - *((float *)this + 175)));
    *((float *)this + 175) = v74;
    float v75 = v74 + 1.0e-20;
    float v76 = log10f(v75) * 10.0;
    float v77 = *((float *)this + 173);
    if (v76 <= v77) {
      float v77 = v76;
    }
    float v78 = v77 - v76;
    if (v78 != 0.0 && v78 < v67)
    {
      float v66 = v60 + v78;
      float v67 = v78;
    }
  }
  unsigned int v123 = a4;
  if (*((unsigned char *)this + 657))
  {
    unsigned int v79 = *((_DWORD *)this + 150);
    unsigned int v80 = 2;
    unsigned int v81 = v79;
    do
    {
      if (v79 / v80 < ((float)(*((float *)this + 165) * *((float *)this + 139)) / 1000.0)) {
        break;
      }
      if (v79 == v79 / v80 * v80) {
        unsigned int v81 = v79 / v80;
      }
      ++v80;
    }
    while (v80 != 33);
    *((_DWORD *)this + 151) = v81;
    if (v79)
    {
      unsigned int v82 = 0;
      uint64_t v83 = a4 - 1;
      do
      {
        float __C = 0.0;
        uint64_t v84 = v82;
        vDSP_svesq(&(*a2)[v82], 1, &__C, v81);
        unsigned int v81 = *((_DWORD *)this + 151);
        float v85 = __C / (float)v81;
        float __C = v85;
        uint64_t v86 = (float **)(a2 + 1);
        uint64_t v87 = v83;
        if (v57)
        {
          do
          {
            float v124 = 0.0;
            uint64_t v88 = (uint64_t)*v86++;
            vDSP_svesq((const float *)(v88 + 4 * v84), 1, &v124, v81);
            unsigned int v81 = *((_DWORD *)this + 151);
            float v85 = v124 / (float)v81;
            if (__C >= v85) {
              float v85 = __C;
            }
            float __C = v85;
            --v87;
          }
          while (v87);
        }
        float v89 = v85 + 1.0e-20;
        float v90 = log10f(v89) * 10.0;
        float v91 = *((float *)this + 172);
        if (v90 <= v91) {
          float v91 = v90;
        }
        float v92 = v91 - v90;
        if (v92 != 0.0 && v92 < v67)
        {
          float v66 = v60 + v92;
          float v67 = v92;
        }
        unsigned int v82 = v81 + v84;
      }
      while (v81 + v84 < *((_DWORD *)this + 150));
    }
  }
  float v93 = *((float *)this + 416) + 1.0e-20;
  float v94 = v67 + (float)(log10f(v93) * -20.0);
  unsigned int v95 = *((_DWORD *)this + 195);
  if (!v95 || v94 <= 0.0 || (int v96 = *((_DWORD *)this + 443), v97 = v96 - 1, v96 == 1))
  {
    *((_DWORD *)this + 443) = 0;
  }
  else
  {
    if (v96)
    {
LABEL_90:
      unsigned int v100 = v123;
      *((_DWORD *)this + 443) = v97;
      *((_DWORD *)this + 444) = 0;
      float v94 = 0.0;
      goto LABEL_91;
    }
    if (*((float *)this + 444) < 0.0)
    {
      unsigned int v98 = *((_DWORD *)this + 150);
      if (v98) {
        int v97 = v95 / v98 + 1;
      }
      else {
        int v97 = 1;
      }
      goto LABEL_90;
    }
  }
  *((float *)this + 444) = v94;
  if (v94 < 0.0)
  {
    float __C = __exp10f(v94 / 20.0);
    float v124 = 1.0;
    UInt64 v99 = (const float **)((char *)this + 1048);
    unsigned int v100 = v123;
    goto LABEL_92;
  }
  unsigned int v100 = v123;
LABEL_91:
  float __C = 1.0;
  float v124 = __exp10f(v94 / 20.0);
  UInt64 v99 = (const float **)((char *)this + 1040);
LABEL_92:
  vDSP_vclip(*v99, 1, &__C, &v124, *((float **)this + 132), 1, *((unsigned int *)this + 150));
  vDSP_vsmul(*((const float **)this + 132), 1, (const float *)this + 416, *((float **)this + 132), 1, *((unsigned int *)this + 150));
  *((_DWORD *)this + 416) = *(_DWORD *)(*((void *)this + 132) + 4 * (*((_DWORD *)this + 150) - 1));
  if (*((unsigned char *)this + 536))
  {
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUVolumeCompressorV2 *)((char *)this + 32), 0);
    float v102 = *((float *)this + 416) + 1.0e-20;
    float v103 = log10f(v102);
    ausdk::AUElement::SetParameter(Element, 0x3Eu, fabsf(v103 * 20.0), 0);
    uint64_t v104 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUVolumeCompressorV2 *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v104, 0x3Fu, v60, 0);
    uint64_t v105 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUVolumeCompressorV2 *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v105, 0x40u, v66, 0);
  }
  if (*((_DWORD *)this + 195) && *((_DWORD *)this + 133) && v100)
  {
    uint64_t v106 = v100;
    int v107 = (void **)((char *)this + 1208);
    uint64_t v108 = (const void **)a2;
    do
    {
      memcpy(*((void **)this + 134), *v108, 4 * *((unsigned int *)this + 150));
      uint64_t v109 = *((unsigned int *)this + 150);
      uint64_t v110 = *((unsigned int *)this + 195);
      uint64_t v111 = (void *)*v108;
      uint64_t v112 = *v107;
      if (v109 >= v110)
      {
        memcpy(v111, v112, 4 * v110);
        uint64_t v117 = *((unsigned int *)this + 195);
        unsigned int v118 = v109 - v117;
        memcpy((char *)*v108 + 4 * v117, *((const void **)this + 134), 4 * v118);
        int v114 = (char *)*v107;
        float v115 = (const void *)(*((void *)this + 134) + 4 * v118);
        size_t v116 = 4 * *((unsigned int *)this + 195);
      }
      else
      {
        memcpy(v111, v112, 4 * v109);
        memmove(*v107, (char *)*v107 + 4 * *((unsigned int *)this + 150), 4 * (*((_DWORD *)this + 195) - *((_DWORD *)this + 150)));
        uint64_t v113 = *((unsigned int *)this + 150);
        int v114 = (char *)*v107 + 4 * (*((_DWORD *)this + 195) - v113);
        float v115 = (const void *)*((void *)this + 134);
        size_t v116 = 4 * v113;
      }
      memcpy(v114, v115, v116);
      v107 += 2;
      ++v108;
      --v106;
    }
    while (v106);
  }
  if (v100)
  {
    uint64_t v119 = v100;
    do
    {
      Float64 v121 = *a2++;
      unsigned int v120 = v121;
      UInt64 v122 = *a3++;
      vDSP_vmul(v120, 1, *((const float **)this + 132), 1, v122, 1, *((unsigned int *)this + 150));
      --v119;
    }
    while (v119);
  }
}

void AUVolumeCompressorV2::ProcessShortAudioBlocks(AUVolumeCompressorV2 *this, float **a2, unsigned int a3)
{
  unsigned int v6 = *((_DWORD *)this + 150);
  unsigned int v7 = 2;
  LODWORD(v8) = v6;
  do
  {
    if (v6 / v7 < ((float)(*((float *)this + 165) * *((float *)this + 139)) / 1000.0)) {
      break;
    }
    if (v6 == v6 / v7 * v7) {
      LODWORD(v8) = v6 / v7;
    }
    ++v7;
  }
  while (v7 != 33);
  *((_DWORD *)this + 151) = v8;
  if (v6)
  {
    unsigned int v9 = 0;
    unsigned int v43 = a2 + 1;
    uint64_t v44 = a3 - 1;
    unsigned int v42 = (const float **)((char *)this + 1080);
    do
    {
      uint64_t __C = 0;
      float v10 = &(*a2)[v9];
      if (*((unsigned char *)this + 659))
      {
        vDSP_maxmgv(v10, 1, (float *)&__C + 1, v8);
      }
      else
      {
        vDSP_svesq(v10, 1, (float *)&__C, v8);
        *(float *)&uint64_t __C = *(float *)&__C / (float)*((unsigned int *)this + 151);
      }
      float v11 = v43;
      uint64_t v12 = v44;
      if (a3 >= 2)
      {
        do
        {
          uint64_t __B = 0;
          BOOL v13 = &(*v11)[v9];
          vDSP_Length v14 = *((unsigned int *)this + 151);
          if (*((unsigned char *)this + 659))
          {
            vDSP_maxmgv(v13, 1, (float *)&__B + 1, v14);
            float v15 = *((float *)&__C + 1);
            if (*((float *)&__C + 1) < *((float *)&__B + 1)) {
              float v15 = *((float *)&__B + 1);
            }
            *((float *)&__C + 1) = v15;
          }
          else
          {
            vDSP_svesq(v13, 1, (float *)&__B, v14);
            float v16 = *(float *)&__B / (float)*((unsigned int *)this + 151);
            if (*(float *)&__C >= v16) {
              float v16 = *(float *)&__C;
            }
            *(float *)&uint64_t __C = v16;
          }
          ++v11;
          --v12;
        }
        while (v12);
      }
      if (*((unsigned char *)this + 659))
      {
        float v17 = *((float *)&__C + 1) + 1.0e-20;
        float v18 = log10f(v17) * 20.0;
        float v19 = *((float *)this + 174);
        if (v18 <= v19) {
          float v19 = v18;
        }
        float v20 = v19 - v18;
        float v21 = *((float *)this + 417);
        if (*((unsigned char *)this + 684) != 0 && v20 > v21) {
          float v22 = *((float *)this + 417);
        }
        else {
          float v22 = v20;
        }
        if ((*((unsigned char *)this + 684) == 0 || v20 <= v21) && v20 > v21)
        {
          float v22 = *((float *)this + 166);
          if (v22 >= v20) {
            float v22 = v20;
          }
        }
        *((float *)this + 166) = v20;
        BOOL v23 = v22 < v21;
      }
      else
      {
        float v24 = *(float *)&__C + 1.0e-20;
        float v25 = log10f(v24);
        BOOL v23 = 0;
        float v26 = v25 * 10.0;
        float v27 = *((float *)this + 172);
        if (v26 <= v27) {
          float v27 = v26;
        }
        float v22 = v27 - v26;
        *((float *)this + 166) = v22;
      }
      *((unsigned char *)this + 684) = v23;
      vDSP_Length v28 = *((unsigned int *)this + 151);
      float v29 = (float *)*((void *)this + 132);
      uint64_t v30 = v29;
      vDSP_Length v31 = v28;
      if (v28)
      {
        do
        {
          float v32 = *((float *)this + 417);
          if (v22 >= v32) {
            uint64_t v33 = 672;
          }
          else {
            uint64_t v33 = 668;
          }
          float v34 = v32 + (float)(*(float *)((char *)this + v33) * (float)(v22 - v32));
          *((float *)this + 417) = v34;
          *v30++ = v34;
          --v31;
        }
        while (v31);
      }
      else
      {
        vDSP_Length v28 = 0;
      }
      HIDWORD(__B) = 1101004800;
      vDSP_vsdiv(v29, 1, (const float *)&__B + 1, v29, 1, v28);
      LODWORD(v8) = *((_DWORD *)this + 151);
      if (v8)
      {
        unint64_t v35 = 0;
        do
        {
          uint64_t v36 = *((void *)this + 132);
          *(float *)(v36 + 4 * v35) = __exp10f(*(float *)(v36 + 4 * v35));
          ++v35;
          unint64_t v8 = *((unsigned int *)this + 151);
        }
        while (v35 < v8);
      }
      uint64_t v37 = v42;
      unsigned int v38 = a2;
      uint64_t v39 = a3;
      if (a3)
      {
        do
        {
          vDSP_vmul(*v37, 1, *((const float **)this + 132), 1, (float *)*v37, 1, *((unsigned int *)this + 151));
          memcpy(*((void **)this + 133), &(*v38)[v9], 4 * *((unsigned int *)this + 151));
          uint64_t v40 = (uint64_t)*v38++;
          memcpy((void *)(v40 + 4 * v9), *v37, 4 * *((unsigned int *)this + 151));
          uint64_t v41 = (float *)*v37;
          v37 += 2;
          memcpy(v41, *((const void **)this + 133), 4 * *((unsigned int *)this + 151));
          --v39;
        }
        while (v39);
        LODWORD(v8) = *((_DWORD *)this + 151);
      }
      v9 += v8;
    }
    while (v9 < *((_DWORD *)this + 150));
  }
}

double SlidingRMSWindow::ComputeRMS(const float **this)
{
  float __C = 0.0;
  vDSP_Length v1 = *(unsigned int *)this;
  if (!v1) {
    return 0.0;
  }
  vDSP_sve(this[2], 1, &__C, v1);
  *(float *)&double result = __C / (float)*(unsigned int *)this;
  return result;
}

float AUVolumeCompressorV2::AdjustForVolume(float32x2_t *this, double a2, double a3)
{
  uint64_t v4 = (float *)this[210];
  float v5 = (float *)this[212];
  unsigned int v6 = this[209].u32[1];
  float v8 = *v4;
  float v7 = v4[1];
  float v10 = *v5;
  float v9 = v5[1];
  if (v6)
  {
    float v11 = this[78].f32[1];
    if (v11 > v7)
    {
      unsigned int v12 = 2;
      do
      {
        float v10 = v9;
        float v8 = v7;
        float v7 = v4[v12];
        float v9 = v5[v12];
        if (v12 > v6) {
          break;
        }
        ++v12;
      }
      while (v11 > v7);
    }
  }
  if (v7 != v8) {
    float v9 = (float)(v9 - (float)((float)((float)(v9 - v10) / (float)(v7 - v8)) * v7))
  }
       + (float)((float)((float)(v9 - v10) / (float)(v7 - v8)) * this[78].f32[1]);
  *(float *)&a3 = this[76].f32[1] - v9;
  this[74] = vsub_f32(this[74], (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a3, 0));
  float32_t v13 = v9 + this[72].f32[0];
  this[70].f32[0] = v13;
  float v14 = __exp10f(v13 / 20.0);
  this[70].f32[1] = v14;
  if (this[67].i8[1]) {
    this[71].f32[0] = v14;
  }
  if (this[67].i8[0])
  {
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&this[4], 0);
    ausdk::AUElement::SetParameter(Element, 0, this[70].f32[0], 0);
    float v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&this[4], 0);
    ausdk::AUElement::SetParameter(v16, 0x3Cu, this[74].f32[0], 0);
    float v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&this[4], 0);
    ausdk::AUElement::SetParameter(v17, 0x3Du, this[74].f32[1], 0);
  }
  if (this[214].i32[0])
  {
    unint64_t v18 = 1;
    do
    {
      float v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&this[4], 0);
      float Parameter = ausdk::AUElement::GetParameter(v19, v18 + 39);
      if (Parameter < this[74].f32[0]) {
        float Parameter = this[74].f32[0];
      }
      *(float *)(*(void *)&this[215] + 4 * v18) = Parameter;
      float v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&this[4], 0);
      float v22 = ausdk::AUElement::GetParameter(v21, v18 + 49);
      BOOL v23 = (float *)this[219];
      v23[v18] = 1.0 / v22;
      unint64_t v24 = this[214].u32[0];
    }
    while (v18++ < v24);
  }
  else
  {
    LODWORD(v24) = 0;
    BOOL v23 = (float *)this[219];
  }
  float v26 = (_DWORD *)this[215];
  _DWORD *v26 = this[74].i32[0];
  *(float *)&v26[(v24 + 1)] = *(float *)&v26[v24] + 100.0;
  float result = 1.0 / this[79].f32[0];
  float *v23 = result;
  return result;
}

uint64_t AUVolumeCompressorV2::CanScheduleParameters(AUVolumeCompressorV2 *this)
{
  return 0;
}

uint64_t AUVolumeCompressorV2::SetParameter(AUVolumeCompressorV2 *this, unsigned int a2, int a3, float a4)
{
  if (!a3)
  {
    switch(a2)
    {
      case 1u:
        uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUVolumeCompressorV2 *)((char *)this + 32), 0);
        ausdk::AUElement::SetParameter(Element, 1u, a4, 0);
        uint64_t result = 0;
        *((float *)this + 145) = a4;
        return result;
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 6u:
      case 7u:
      case 8u:
      case 0xAu:
      case 0xBu:
      case 0xFu:
      case 0x10u:
      case 0x12u:
LABEL_5:
        float v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUVolumeCompressorV2 *)((char *)this + 32), 0);
        unsigned int v10 = a2;
        goto LABEL_6;
      case 9u:
        if (a4 < 6.0 || a4 > 100.0) {
          return 0;
        }
        float v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUVolumeCompressorV2 *)((char *)this + 32), 0);
        unsigned int v10 = 9;
        goto LABEL_6;
      case 0xCu:
        float v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUVolumeCompressorV2 *)((char *)this + 32), 0);
        ausdk::AUElement::SetParameter(v19, 0xCu, a4, 0);
        uint64_t result = 0;
        ++*((_DWORD *)this + 137);
        return result;
      case 0xDu:
        if (a4 > 5.0) {
          break;
        }
        if (a4 < 0.0) {
          break;
        }
        float v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUVolumeCompressorV2 *)((char *)this + 32), 0);
        if (ausdk::AUElement::GetParameter(v20, 0xDu) == a4) {
          break;
        }
        float v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUVolumeCompressorV2 *)((char *)this + 32), 0);
        unsigned int v22 = 13;
        goto LABEL_42;
      case 0xEu:
        if (a4 > 5.0) {
          break;
        }
        if (a4 < 0.0) {
          break;
        }
        BOOL v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUVolumeCompressorV2 *)((char *)this + 32), 0);
        if (ausdk::AUElement::GetParameter(v23, 0xEu) == a4) {
          break;
        }
        float v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUVolumeCompressorV2 *)((char *)this + 32), 0);
        unsigned int v22 = 14;
LABEL_42:
        ausdk::AUElement::SetParameter(v21, v22, a4, 0);
        (*(void (**)(AUVolumeCompressorV2 *, uint64_t, void, void))(*(void *)this + 432))(this, 4, 0, 0);
        break;
      case 0x11u:
        if (a4 != 0.0 && a4 != 1.0) {
          return 0;
        }
        float v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUVolumeCompressorV2 *)((char *)this + 32), 0);
        unsigned int v10 = 17;
LABEL_6:
        ausdk::AUElement::SetParameter(v9, v10, a4, 0);
        break;
      default:
        switch(a2)
        {
          case 'A':
          case 'H':
            if (a4 == 0.0 || a4 == 1.0) {
              goto LABEL_5;
            }
            return 0;
          case 'B':
          case 'D':
          case 'E':
          case 'J':
          case 'K':
            goto LABEL_5;
          case 'C':
            if (a4 < 3.0 || a4 > 50.0) {
              return 0;
            }
            float v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUVolumeCompressorV2 *)((char *)this + 32), 0);
            unsigned int v10 = 67;
            goto LABEL_6;
          case 'F':
            float v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUVolumeCompressorV2 *)((char *)this + 32), 0);
            ausdk::AUElement::SetParameter(v15, 0x46u, a4, 0);
            uint64_t result = 0;
            *((float *)this + 172) = a4;
            return result;
          case 'G':
            float v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUVolumeCompressorV2 *)((char *)this + 32), 0);
            ausdk::AUElement::SetParameter(v16, 0x47u, a4, 0);
            uint64_t result = 0;
            *((float *)this + 174) = a4;
            return result;
          case 'I':
            if (a4 < 1.0 || a4 > 360.0) {
              return 0;
            }
            float v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUVolumeCompressorV2 *)((char *)this + 32), 0);
            unsigned int v10 = 73;
            goto LABEL_6;
          case 'L':
            float v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUVolumeCompressorV2 *)((char *)this + 32), 0);
            ausdk::AUElement::SetParameter(v17, 0x4Cu, a4, 0);
            uint64_t result = 0;
            *((float *)this + 173) = a4;
            return result;
          default:
            if (a2 - 20 > 0x27) {
              return 4294956418;
            }
            unsigned int v11 = a2 % 0xAu;
            unsigned int v12 = a2 - v11;
            uint64_t result = 4294956418;
            if ((int)(a2 - v11) > 39)
            {
              if (v12 != 40)
              {
                if (v12 != 50) {
                  return result;
                }
                float v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUVolumeCompressorV2 *)((char *)this + 32), 0);
                if (ausdk::AUElement::GetParameter(v26, 0xEu) > (float)v11)
                {
                  float v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUVolumeCompressorV2 *)((char *)this + 32), 0);
                  unsigned int v10 = v11 + 50;
                  goto LABEL_6;
                }
                goto LABEL_7;
              }
              vDSP_Length v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUVolumeCompressorV2 *)((char *)this + 32), 0);
              if (ausdk::AUElement::GetParameter(v28, 0xEu) <= (float)v11) {
                goto LABEL_7;
              }
              float v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUVolumeCompressorV2 *)((char *)this + 32), 0);
              unsigned int v10 = v11 + 40;
            }
            else
            {
              if (v12 != 20)
              {
                if (v12 != 30) {
                  return result;
                }
                float32_t v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUVolumeCompressorV2 *)((char *)this + 32), 0);
                if (ausdk::AUElement::GetParameter(v13, 0xDu) > (float)v11)
                {
                  float v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUVolumeCompressorV2 *)((char *)this + 32), 0);
                  unsigned int v10 = v11 + 30;
                  goto LABEL_6;
                }
                goto LABEL_7;
              }
              float v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUVolumeCompressorV2 *)((char *)this + 32), 0);
              if (ausdk::AUElement::GetParameter(v27, 0xDu) <= (float)v11) {
                goto LABEL_7;
              }
              float v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUVolumeCompressorV2 *)((char *)this + 32), 0);
              unsigned int v10 = v11 + 20;
            }
            break;
        }
        goto LABEL_6;
    }
  }
LABEL_7:
  uint64_t result = 0;
  ++*((_DWORD *)this + 135);
  return result;
}

uint64_t AUVolumeCompressorV2::GetParameter(AUVolumeCompressorV2 *this, unsigned int a2, unsigned int a3, unsigned int a4, float *a5)
{
  if (a2 - 62 <= 2) {
    *((unsigned char *)this + 536) = 1;
  }
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  *a5 = ausdk::AUElement::GetParameter(Element, a2);
  return 0;
}

uint64_t AUVolumeCompressorV2::SetProperty(AUVolumeCompressorV2 *this, int a2, int a3, unsigned int a4, _DWORD *a5, unsigned int a6)
{
  if (a3) {
    return 4294956417;
  }
  if (a2 == 64001)
  {
    if (a6 >= 4)
    {
      uint64_t result = 0;
      *((_DWORD *)this + 133) = *a5;
      return result;
    }
    return 4294956445;
  }
  if (a2 == 3700)
  {
    if (a6 >= 4)
    {
      uint64_t result = 0;
      *((unsigned char *)this + 376) = *(unsigned char *)a5;
      return result;
    }
    return 4294956445;
  }
  if (a2 != 21) {
    return 4294956417;
  }
  if (a6 < 4) {
    return 4294956445;
  }
  int v8 = *a5;
  int v9 = *a5 != 0;
  if (v9 != (*(unsigned int (**)(AUVolumeCompressorV2 *))(*(void *)this + 576))(this)) {
    (*(void (**)(AUVolumeCompressorV2 *, BOOL))(*(void *)this + 584))(this, v8 != 0);
  }
  return 0;
}

uint64_t AUVolumeCompressorV2::GetProperty(AUVolumeCompressorV2 *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  if (a3) {
    return 4294956417;
  }
  switch(a2)
  {
    case 64001:
      int v7 = *((_DWORD *)this + 133);
      goto LABEL_9;
    case 3700:
      int v7 = *((unsigned __int8 *)this + 376);
      goto LABEL_9;
    case 21:
      int v7 = (*(uint64_t (**)(AUVolumeCompressorV2 *))(*(void *)this + 576))(this);
LABEL_9:
      uint64_t result = 0;
      *a5 = v7;
      return result;
  }
  return 4294956417;
}

uint64_t AUVolumeCompressorV2::GetPropertyInfo(AUVolumeCompressorV2 *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3 || a2 != 21 && a2 != 64001 && a2 != 3700) {
    return 4294956417;
  }
  uint64_t result = 0;
  *a6 = 1;
  *a5 = 4;
  return result;
}

uint64_t AUVolumeCompressorV2::Reset(AUVolumeCompressorV2 *this)
{
  uint64_t v2 = *((unsigned int *)this + 442);
  if (v2)
  {
    int v3 = *((_DWORD *)this + 133);
    int v4 = *((unsigned __int8 *)this + 656);
    float v5 = (void *)((char *)this + 784);
    unsigned int v6 = (char *)this + 1080;
    do
    {
      *float v5 = 0;
      uint64_t v7 = *((void *)v6 + 1) - *(void *)v6;
      if (v7 >= 1) {
        bzero(*(void **)v6, 4 * (((unint64_t)v7 >> 2) - ((unint64_t)v7 > 3)) + 4);
      }
      if (v3)
      {
        int v8 = (void *)*((void *)v6 + 16);
        uint64_t v9 = *((void *)v6 + 17) - (void)v8;
        if (v9 >= 1) {
          bzero(v8, 4 * (((unint64_t)v9 >> 2) - ((unint64_t)v9 > 3)) + 4);
        }
      }
      if (!v4)
      {
        unsigned int v10 = (void *)*((void *)v6 + 32);
        uint64_t v11 = *((void *)v6 + 33) - (void)v10;
        if (v11 >= 1) {
          bzero(v10, 4 * (((unint64_t)v11 >> 2) - ((unint64_t)v11 > 3)) + 4);
        }
        unsigned int v12 = (void *)*((void *)v6 + 48);
        uint64_t v13 = *((void *)v6 + 49) - (void)v12;
        if (v13 >= 1) {
          bzero(v12, 4 * (((unint64_t)v13 >> 2) - ((unint64_t)v13 > 3)) + 4);
        }
      }
      v5 += 4;
      v6 += 16;
      --v2;
    }
    while (v2);
  }
  *((void *)this + 207) = 0;
  *((_DWORD *)this + 177) = 0;
  *((unsigned char *)this + 537) = 1;
  uint64_t v14 = *((void *)this + 93);
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 24))(v14);
  }
  *((_DWORD *)this + 175) = 0;
  *((_DWORD *)this + 143) = -1018691584;
  *(void *)((char *)this + 1772) = 0;
  if (fabsf(*((float *)this + 416)) == INFINITY) {
    *((_DWORD *)this + 416) = 1065353216;
  }
  return 0;
}

uint64_t AUVolumeCompressorV2::Cleanup(void **this)
{
  free(this[95]);
  this[95] = 0;
  free(this[96]);
  this[96] = 0;
  uint64_t v2 = this[130];
  if (v2)
  {
    MEMORY[0x1C185D340](v2, 0x1000C8052888210);
    this[130] = 0;
  }
  int v3 = this[131];
  if (v3)
  {
    MEMORY[0x1C185D340](v3, 0x1000C8052888210);
    this[131] = 0;
  }
  int v4 = this[132];
  if (v4)
  {
    MEMORY[0x1C185D340](v4, 0x1000C8052888210);
    this[132] = 0;
  }
  float v5 = this[133];
  if (v5)
  {
    MEMORY[0x1C185D340](v5, 0x1000C8052888210);
    this[133] = 0;
  }
  unsigned int v6 = this[134];
  if (v6)
  {
    MEMORY[0x1C185D340](v6, 0x1000C8052888210);
    this[134] = 0;
  }
  uint64_t v7 = 0;
  int v8 = (char *)(this + 199);
  do
  {
    uint64_t result = *(void *)&v8[v7];
    if (result)
    {
      uint64_t result = MEMORY[0x1C185D340](result, 0x1000C8052888210);
      *(void *)&v8[v7] = 0;
    }
    v7 += 8;
  }
  while (v7 != 64);
  return result;
}

uint64_t AUVolumeCompressorV2::Initialize(AUVolumeCompressorV2 *this)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUVolumeCompressorV2 *)((char *)this + 80), 0);
  long long v3 = *(_OWORD *)(Element + 96);
  long long v11 = *(_OWORD *)(Element + 80);
  long long v12 = v3;
  uint64_t v13 = *(void *)(Element + 112);
  uint64_t v4 = ausdk::AUScope::SafeGetElement((AUVolumeCompressorV2 *)((char *)this + 128), 0);
  long long v5 = *(_OWORD *)(v4 + 96);
  *(_OWORD *)&v10.double mSampleRate = *(_OWORD *)(v4 + 80);
  *(_OWORD *)&v10.UInt32 mBytesPerPacket = v5;
  *(void *)&v10.UInt32 mBitsPerChannel = *(void *)(v4 + 112);
  if (CAStreamBasicDescription::IsEquivalent((CAStreamBasicDescription *)&v11, &v10, v6))
  {
    int v7 = HIDWORD(v12);
    if (HIDWORD(v12) <= 8)
    {
      float v8 = *(double *)&v11;
      *((float *)this + 139) = v8;
      *((_DWORD *)this + 442) = v7;
      *((_DWORD *)this + 150) = *((_DWORD *)this + 84);
      *((unsigned char *)this + 656) = *((unsigned char *)this + 376);
      operator new[]();
    }
  }
  return 4294956428;
}

void AUVolumeCompressorV2::~AUVolumeCompressorV2(void **this)
{
  AUVolumeCompressorV2::~AUVolumeCompressorV2(this);

  JUMPOUT(0x1C185D370);
}

{
  unsigned char *v2;
  unsigned char *v3;
  unsigned char *v4;
  unsigned char *v5;
  unsigned char *v6;
  unsigned char *v7;
  unsigned char *v8;
  unsigned char *v9;
  unsigned char *v10;
  unsigned char *v11;
  uint64_t i;
  void **v13;
  unsigned char *v14;
  unsigned char *v15;
  void *v16;
  uint64_t j;
  void **v18;
  unsigned char *v19;
  unsigned char *v20;
  void *v21;
  uint64_t k;
  void **v23;
  unsigned char *v24;
  unsigned char *v25;
  void *v26;
  uint64_t m;
  void **v28;
  unsigned char *v29;
  unsigned char *v30;
  void *v31;
  uint64_t n;
  void *v33;
  uint64_t vars8;

  *this = &unk_1F14B0680;
  AUVolumeCompressorV2::Cleanup(this);
  uint64_t v2 = this[219];
  if (v2)
  {
    long long v3 = this[220];
    if (v3 != v2) {
      this[220] = &v3[(v2 - v3 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v2);
    this[219] = 0;
    this[220] = 0;
  }
  uint64_t v4 = this[217];
  if (v4)
  {
    long long v5 = this[218];
    if (v5 != v4) {
      this[218] = &v5[(v4 - v5 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v4);
    this[217] = 0;
    this[218] = 0;
  }
  unsigned int v6 = this[215];
  if (v6)
  {
    int v7 = this[216];
    if (v7 != v6) {
      this[216] = &v7[(v6 - v7 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v6);
    this[215] = 0;
    this[216] = 0;
  }
  float v8 = this[212];
  if (v8)
  {
    uint64_t v9 = this[213];
    if (v9 != v8) {
      this[213] = &v9[(v8 - v9 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v8);
    this[212] = 0;
    this[213] = 0;
  }
  AudioStreamBasicDescription v10 = this[210];
  if (v10)
  {
    long long v11 = this[211];
    if (v11 != v10) {
      this[211] = &v11[(v10 - v11 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v10);
    this[210] = 0;
    this[211] = 0;
  }
  for (__int32 i = 0; i != -16; i -= 2)
  {
    uint64_t v13 = &this[i];
    uint64_t v14 = this[i + 197];
    if (v14)
    {
      float v15 = v13[198];
      if (v15 != v14) {
        v13[198] = &v15[(v14 - v15 + 3) & 0xFFFFFFFFFFFFFFFCLL];
      }
      float v16 = v13 + 197;
      operator delete(v14);
      ausdk::AUElement *v16 = 0;
      v16[1] = 0;
    }
  }
  for (uint64_t j = 0; j != -16; j -= 2)
  {
    unint64_t v18 = &this[j];
    float v19 = this[j + 181];
    if (v19)
    {
      float v20 = v18[182];
      if (v20 != v19) {
        v18[182] = &v20[(v19 - v20 + 3) & 0xFFFFFFFFFFFFFFFCLL];
      }
      float v21 = v18 + 181;
      operator delete(v19);
      *float v21 = 0;
      v21[1] = 0;
    }
  }
  for (unsigned int k = 0; k != -16; k -= 2)
  {
    BOOL v23 = &this[k];
    unint64_t v24 = this[k + 165];
    if (v24)
    {
      float v25 = v23[166];
      if (v25 != v24) {
        v23[166] = &v25[(v24 - v25 + 3) & 0xFFFFFFFFFFFFFFFCLL];
      }
      float v26 = v23 + 165;
      operator delete(v24);
      ausdk::AUElement *v26 = 0;
      v26[1] = 0;
    }
  }
  for (unsigned int m = 0; m != -16; m -= 2)
  {
    vDSP_Length v28 = &this[m];
    float v29 = this[m + 149];
    if (v29)
    {
      uint64_t v30 = v28[150];
      if (v30 != v29) {
        v28[150] = &v30[(v29 - v30 + 3) & 0xFFFFFFFFFFFFFFFCLL];
      }
      vDSP_Length v31 = v28 + 149;
      operator delete(v29);
      *vDSP_Length v31 = 0;
      v31[1] = 0;
    }
  }
  for (unsigned int n = 126; n != 94; n -= 4)
    CDSPSplitComplex::~CDSPSplitComplex((CDSPSplitComplex *)&this[n]);
  uint64_t v33 = this[93];
  if (v33)
  {
    (*(void (**)(void *))(*(void *)v33 + 8))(v33);
    this[93] = 0;
  }

  ausdk::AUBase::~AUBase((ausdk::AUBase *)this);
}

uint64_t AUTweakaLeakIR::ValidFormat(AUTweakaLeakIR *this, const AudioStreamBasicDescription *a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  int v5 = (int)a2;
  uint64_t result = ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2);
  if (result) {
    uint64_t result = (a4->mFormatFlags & 0x20) != 0 || a4->mChannelsPerFrame == 1;
  }
  if (v5 == 1 || v5 == 2)
  {
    if (a4->mChannelsPerFrame == 1) {
      return result;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t AUTweakaLeakIR::SupportedNumChannels(AUTweakaLeakIR *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUTweakaLeakIR::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 1;
}

BOOL AUTweakaLeakIR::StreamFormatWritable(AUTweakaLeakIR *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUTweakaLeakIR::SupportsTail(AUTweakaLeakIR *this)
{
  return 1;
}

double AUTweakaLeakIR::GetTailTime(AUTweakaLeakIR *this)
{
  return 0.2;
}

double AUTweakaLeakIR::GetLatency(AUTweakaLeakIR *this)
{
  return 0.0;
}

uint64_t AUTweakaLeakIR::GetParameterInfo(AUTweakaLeakIR *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  buffer->AudioUnitParameterOptions flags = 0x40000000;
  buffer->unitName = 0;
  uint64_t result = 4294956418;
  if (!a2 && a3 <= 0x1D)
  {
    CFStringRef v6 = off_1E623E0C8[a3];
    AudioUnitParameterUnit v7 = dword_1BB898870[a3];
    AudioUnitParameterValue v8 = flt_1BB8988E8[a3];
    AudioUnitParameterValue v9 = flt_1BB898960[a3];
    AudioUnitParameterValue v10 = flt_1BB8989D8[a3];
    int v11 = dword_1BB898A50[a3];
    buffer->cfNameString = v6;
    buffer->AudioUnitParameterOptions flags = 1207959552;
    CFStringGetCString(v6, buffer->name, 52, 0x8000100u);
    uint64_t result = 0;
    buffer->unit = v7;
    buffer->minCFNumberRef Value = v8;
    buffer->maxCFNumberRef Value = v9;
    buffer->defaultCFNumberRef Value = v10;
    buffer->flags |= v11;
  }
  return result;
}

uint64_t AUTweakaLeakIR::GetParameterList(AUTweakaLeakIR *this, int a2, unsigned int *a3, unsigned int *a4)
{
  if (a2) {
    return 4294956430;
  }
  if (a3)
  {
    *(_OWORD *)a3 = xmmword_1BB8727D0;
    *((_OWORD *)a3 + 1) = xmmword_1BB879D60;
    *((_OWORD *)a3 + 2) = xmmword_1BB879E40;
    *((_OWORD *)a3 + 3) = xmmword_1BB879E50;
    *((_OWORD *)a3 + 4) = xmmword_1BB879E60;
    *((_OWORD *)a3 + 5) = xmmword_1BB879E70;
    *((_OWORD *)a3 + 6) = xmmword_1BB87A9C0;
    *((void *)a3 + 14) = 0x1D0000001CLL;
  }
  uint64_t result = 0;
  *a4 = 30;
  return result;
}

uint64_t AUTweakaLeakIR::Render(AUTweakaLeakIR *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  v19[2] = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 84) != a4) {
    return 4294956422;
  }
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUTweakaLeakIR *)((char *)this + 128), 0);
  uint64_t v9 = ausdk::AUScope::GetElement((AUTweakaLeakIR *)((char *)this + 80), 0);
  if (!v9 || !*(_DWORD *)(v9 + 172)) {
    return 4294956420;
  }
  AudioUnitParameterValue v10 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUTweakaLeakIR *)((char *)this + 80), 0);
  uint64_t result = ausdk::AUInputElement::PullInput(v10, a2, a3, 0, a4);
  if (!result)
  {
    uint64_t v12 = ausdk::AUScope::SafeGetElement((AUTweakaLeakIR *)((char *)this + 80), 0);
    uint64_t BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v12 + 144));
    uint64_t v14 = ausdk::AUScope::GetElement((AUTweakaLeakIR *)((char *)this + 80), 1u);
    if (!v14 || !*(_DWORD *)(v14 + 172))
    {
      unsigned int v15 = 0;
LABEL_13:
      uint64_t v17 = ausdk::AUScope::SafeGetElement((AUTweakaLeakIR *)((char *)this + 80), v15);
      v19[0] = BufferList;
      v19[1] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v17 + 144));
      uint64_t v18 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 144));
      return (*(uint64_t (**)(AUTweakaLeakIR *, unsigned int *, uint64_t, uint64_t, void *, uint64_t, uint64_t *))(*(void *)this + 184))(this, a2, a4, 2, v19, 1, &v18);
    }
    unsigned int v15 = 1;
    float v16 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUTweakaLeakIR *)((char *)this + 80), 1u);
    uint64_t result = ausdk::AUInputElement::PullInput(v16, a2, a3, 1, a4);
    if (!result) {
      goto LABEL_13;
    }
  }
  return result;
}

uint64_t AUTweakaLeakIR::ProcessMultipleBufferLists(AUTweakaLeakIR *this, unsigned int *a2, unsigned int a3, unsigned int a4, const AudioBufferList **a5, int a6, AudioBufferList **a7)
{
  v73[1] = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 856) || !*((unsigned char *)this + 676)) {
    memcpy((*a7)->mBuffers[0].mData, (*a5)->mBuffers[0].mData, 4 * *((unsigned int *)this + 135));
  }
  if (*((_DWORD *)this + 84) != a3) {
    return 4294956422;
  }
  if (!*((unsigned char *)this + 886) && !*((unsigned char *)this + 859) && !*((unsigned char *)this + 860)
    || (uint64_t result = AUTweakaLeakIR::InitializeFFTWindowInternals(this), !result))
  {
    AUTweakaLeakIR::ApplyDymamicTLIRParams(this);
    uint64_t result = 4294956428;
    if (a4)
    {
      if (a6 == 1)
      {
        if (a4 <= 1)
        {
          unint64_t v14 = 0;
          unsigned int v15 = (AUTweakaLeakIR *)((char *)this + 128);
          size_t v16 = 4 * a3;
          uint64_t v17 = 16;
          while (v14 < *(unsigned int *)(ausdk::AUScope::SafeGetElement(v15, 0) + 108))
          {
            memcpy(*(void **)((char *)&(*a7)->mNumberBuffers + v17), *(const void **)((char *)&(*a5)->mNumberBuffers + v17), v16);
            ++v14;
            v17 += 16;
          }
          return 0;
        }
        float __A = 0.0;
        if (!*((unsigned char *)this + 1128) || !*((unsigned char *)this + 1072))
        {
          mData = a5[1]->mBuffers[0].mData;
          goto LABEL_28;
        }
        v70[0] = *((float **)this + 138);
        unint64_t v18 = (*((void *)this + 139) - (unint64_t)v70[0]) >> 2;
        v73[0] = *((void *)this + 135);
        ExpectedNumberOfOutputFrames = (float *const *)CA::AudioSampleRateConverter::GetExpectedNumberOfOutputFrames(*((CA::AudioSampleRateConverter **)this + 133));
        uint64_t v20 = *((void *)this + 136) - *((void *)this + 135);
        if (ExpectedNumberOfOutputFrames > (unint64_t)(v20 >> 2))
        {
          ExpectedNumberOfOutputFrames = (float *const *)((unint64_t)v20 >> 2);
          LODWORD(v18) = CA::AudioSampleRateConverter::GetRequiredNumberOfInputFrames(*((CA::AudioSampleRateConverter **)this
                                                                                      + 133));
          if (v18 > (unint64_t)((uint64_t)(*((void *)this + 139) - *((void *)this + 138)) >> 2))
          {
            _os_assert_log();
            _os_crash();
            __break(1u);
          }
        }
        int v21 = CA::AudioSampleRateConverter::Process(*((CA::AudioSampleRateConverter **)this + 133), (const float *const *)v70, v18, v73, ExpectedNumberOfOutputFrames);
        uint64_t v22 = *((void *)this + 136);
        if (v21)
        {
          BOOL v23 = (float *)*((void *)this + 135);
          vDSP_Length v24 = (v22 - (uint64_t)v23) >> 2;
        }
        else
        {
          uint64_t v26 = *((void *)this + 135);
          unint64_t v27 = (v22 - v26) >> 2;
          if (v27 <= ExpectedNumberOfOutputFrames)
          {
LABEL_27:
            mData = (void *)*((void *)this + 135);
            *((unsigned char *)this + 1128) = 0;
LABEL_28:
            memcpy(*((void **)this + 101), mData, 4 * *((unsigned int *)this + 138));
            if (*((unsigned char *)this + 768)
              && (memcpy((void *)(*((void *)this + 101) + 4 * *((unsigned int *)this + 139)), mData, 4 * *((unsigned int *)this + 138)), *((unsigned char *)this + 768)))
            {
              vDSP_vmul(*((const float **)this + 101), 1, *((const float **)this + 102), 1, *((float **)this + 101), 1, *((unsigned int *)this + 137));
            }
            else
            {
              vDSP_vmul(*((const float **)this + 101), 1, *((const float **)this + 102), 1, *((float **)this + 101), 1, *((unsigned int *)this + 138));
              unsigned int v28 = *((_DWORD *)this + 137);
              uint64_t v29 = *((unsigned int *)this + 138);
              if (v28 > v29) {
                vDSP_vfill(&__A, (float *)(*((void *)this + 101) + 4 * v29), 1, v28 - v29);
              }
            }
            MultiRadixRealFFT::RealOutOfPlaceForwardTransform((AUTweakaLeakIR *)((char *)this + 840), *((DSPComplex **)this + 101), (DSPSplitComplex *)((char *)this + 824), 1.0);
            uint64_t v30 = *((unsigned int *)this + 174);
            vDSP_Length v31 = (float *)(*((void *)this + 103) + 4 * v30);
            float v32 = (float *)(*((void *)this + 104) + 4 * v30);
            vDSP_vsq(v31, 1, v31, 1, *((unsigned int *)this + 176));
            vDSP_vsq(v32, 1, v32, 1, *((unsigned int *)this + 176));
            vDSP_vadd(v31, 1, v32, 1, v31, 1, *((unsigned int *)this + 176));
            int v33 = *((_DWORD *)this + 176);
            if (v33)
            {
              float v34 = 0.0;
              do
              {
                float v35 = *v31++;
                float v34 = v34 + sqrtf(v35);
                --v33;
              }
              while (v33);
            }
            else
            {
              float v34 = 0.0;
            }
            float v36 = *((float *)this + 140);
            if (*((unsigned char *)this + 768)) {
              float v37 = (float)(v36 * v34) + 1.0e-15;
            }
            else {
              float v37 = (float)((float)(v34 * v36) * *((float *)this + 177)) + 1.0e-15;
            }
            float v38 = log10f(v37) * 20.0;
            float v39 = *((float *)this + 178);
            float v40 = v38 - v39;
            if ((float)(v38 - v39) >= *((float *)this + 182))
            {
              if (v40 >= *((float *)this + 183))
              {
                float v41 = v37;
                if (v40 > *((float *)this + 184)) {
                  float v41 = *((float *)this + 186);
                }
              }
              else
              {
                float v41 = *((float *)this + 187);
              }
            }
            else
            {
              float v41 = *((float *)this + 185);
            }
            int v42 = *((unsigned __int8 *)this + 537);
            if (*((unsigned char *)this + 537))
            {
              float v43 = *((float *)this + 195);
              float v44 = *((float *)this + 193);
            }
            else
            {
              float v44 = *((float *)this + 193);
              *((float *)this + 195) = v44;
              float v43 = v41;
            }
            uint64_t v45 = 724;
            if (v43 > v44) {
              uint64_t v45 = 720;
            }
            float v46 = *((float *)this + 222);
            float v47 = *((float *)this + 223);
            char v48 = *((unsigned char *)this + 904);
            if (v48) {
              char v48 = v46 > (float)(v47 - *((float *)this + 224));
            }
            float v49 = *(float *)((char *)this + v45);
            if (v46 > v47) {
              char v50 = 1;
            }
            else {
              char v50 = v48;
            }
            *((unsigned char *)this + 904) = v50;
            if ((v50 & 1) != 0 || !*((unsigned char *)this + 887))
            {
              float v49 = *((float *)this + 225);
              float v43 = *((float *)this + 185);
            }
            if (!v42)
            {
              float v44 = (float)(v43 * v49) + (1.0 - v49) * v44;
              *((float *)this + 193) = v44;
            }
            float v51 = log10f(v44 + 1.0e-10) * 20.0;
            float v52 = v39 - v51;
            if (*((unsigned char *)this + 536))
            {
              float v53 = *((float *)this + 179);
            }
            else
            {
              float v54 = *((float *)this + 171);
              if (v52 >= v54) {
                float v54 = v39 - v51;
              }
              if (*((float *)this + 170) >= v54) {
                float v53 = v54;
              }
              else {
                float v53 = *((float *)this + 170);
              }
            }
            uint64_t v55 = *((void *)this + 126);
            if (v55 && !*((unsigned char *)this + 538))
            {
              BiquadInterpolator::GetCoefficientsAtPosition(v55, *((float **)this + 127), *((void *)this + 128), v53);
              float v57 = 0.0;
              if (*((_DWORD *)this + 227))
              {
                uint64_t v61 = 0;
                unint64_t v62 = 0;
                do
                {
                  DspLib::Biquad::read(v61 + *((void *)this + 127), (uint64_t)v70);
                  uint64_t v63 = *((void *)this + 114);
                  long long v64 = *(_OWORD *)v70;
                  *(float *)(v63 + 16) = v71;
                  *(_OWORD *)uint64_t v63 = v64;
                  DspLib::Biquad::Filter::setCoefficients((uint64_t)this + 936, *((void *)this + 114), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)this + 115) - *((void *)this + 114)) >> 2), v62++, 0x41uLL);
                  v61 += 20;
                }
                while (v62 < *((unsigned int *)this + 227));
              }
            }
            else
            {
              float v56 = v53 * *((float *)this + 191);
              if (v56 < *((float *)this + 171)) {
                float v56 = *((float *)this + 171);
              }
              if (*((float *)this + 170) >= v56) {
                float v57 = v56;
              }
              else {
                float v57 = *((float *)this + 170);
              }
              float v58 = *((float *)this + 190);
              AUTweakaLeakIR::CalcPeakingShelfCoeffs((float *)this, v57, *((float *)this + 189), *((float *)this + 188));
              DspLib::Biquad::Filter::setCoefficients((uint64_t)this + 936, *((void *)this + 114), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)this + 115) - *((void *)this + 114)) >> 2), 0, 0x41uLL);
              if (*((_DWORD *)this + 227) >= 2u)
              {
                AUTweakaLeakIR::CalcPeakingShelfCoeffs((float *)this, -v57, v58, *((float *)this + 188));
                DspLib::Biquad::Filter::setCoefficients((uint64_t)this + 936, *((void *)this + 114), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)this + 115) - *((void *)this + 114)) >> 2), 1, 0x41uLL);
                if (*((_DWORD *)this + 227) >= 3u)
                {
                  uint64_t v59 = *((void *)this + 114);
                  *(_OWORD *)uint64_t v59 = DspLib::Biquad::kBypassSection;
                  *(_DWORD *)(v59 + 16) = 0;
                  if (*((_DWORD *)this + 227) >= 3u)
                  {
                    unint64_t v60 = 2;
                    do
                      DspLib::Biquad::Filter::setCoefficients((uint64_t)this + 936, *((void *)this + 114), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)this + 115) - *((void *)this + 114)) >> 2), v60++, 0x41uLL);
                    while (v60 < *((unsigned int *)this + 227));
                  }
                }
              }
            }
            DspLib::Biquad::Filter::process((void *)this + 117, (uint64_t)(*a5)->mBuffers[0].mData, a3, (uint64_t)(*a7)->mBuffers[0].mData, a3);
            *((float *)this + 194) = v53;
            uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUTweakaLeakIR *)((char *)this + 32), 0);
            ausdk::AUElement::SetParameter(Element, 0x18u, v37, 0);
            float v66 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUTweakaLeakIR *)((char *)this + 32), 0);
            ausdk::AUElement::SetParameter(v66, 0x19u, v51, 0);
            float v67 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUTweakaLeakIR *)((char *)this + 32), 0);
            ausdk::AUElement::SetParameter(v67, 0x1Au, v53, 0);
            uint64_t v68 = (uint64_t *)*((void *)this + 66);
            if (v68)
            {
              *(float *)float v70 = v38;
              *((float *)v70 + 1) = log10f(v41) * 20.0;
              v70[1] = (float *)__PAIR64__(LODWORD(v52), LODWORD(v51));
              float v71 = v53;
              float v72 = v57;
              AUTweakaLeakIR::AURealTimeDebugLog<AUTweakaLeakIR::TaLIRInternals,256ul>::Buffer::Write(*v68, (long long *)v70);
            }
            return 0;
          }
          BOOL v23 = (float *)(v26 + 4 * ExpectedNumberOfOutputFrames);
          vDSP_Length v24 = v27 - ExpectedNumberOfOutputFrames;
        }
        vDSP_vclr(v23, 1, v24);
        goto LABEL_27;
      }
    }
  }
  return result;
}

uint64_t AUTweakaLeakIR::InitializeFFTWindowInternals(AUTweakaLeakIR *this)
{
  *((void *)this + 99) = *((void *)this + 98);
  uint64_t v2 = (uint64_t *)*((void *)this + 66);
  *((void *)this + 66) = 0;
  if (v2) {
    std::default_delete<AUTweakaLeakIR::AURealTimeDebugLog<AUTweakaLeakIR::TaLIRInternals,256ul>>::operator()[abi:ne180100](v2);
  }
  uint64_t __A = 0;
  *(void *)((char *)this + 857) = 0x101010101010101;
  *(void *)((char *)this + 865) = 0x101010101010101;
  *(void *)((char *)this + 873) = 0x101010101010101;
  *(void *)((char *)this + 879) = 0x101010101010101;
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUTweakaLeakIR *)((char *)this + 32), 0);
  *((unsigned char *)this + 768) = ausdk::AUElement::GetParameter(Element, 0x1Du) != 0.0;
  *((unsigned char *)this + 886) = 0;
  uint64_t v4 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUTweakaLeakIR *)((char *)this + 32), 0);
  unsigned int Parameter = ausdk::AUElement::GetParameter(v4, 2u);
  *((_DWORD *)this + 137) = Parameter;
  *((unsigned char *)this + 859) = 0;
  if (*((unsigned char *)this + 768))
  {
    unsigned int v6 = *((_DWORD *)this + 135);
    if (v6 <= Parameter) {
      unsigned int v6 = Parameter;
    }
    unsigned int Parameter = 2 * v6;
    *((_DWORD *)this + 137) = 2 * v6;
  }
  *((_DWORD *)this + 139) = Parameter >> 1;
  if (MultiRadixRealFFT::Initialize((AUTweakaLeakIR *)((char *)this + 840), Parameter))
  {
    unsigned int v7 = 512;
    if (*((unsigned char *)this + 768))
    {
      unsigned int v8 = *((_DWORD *)this + 135);
      if (v8 >= 0x301) {
        unsigned int v9 = 2048;
      }
      else {
        unsigned int v9 = 1024;
      }
      if (v8 < 0x181) {
        unsigned int v9 = 512;
      }
      if (v9 > v8) {
        unsigned int v8 = v9;
      }
      unsigned int v7 = 2 * v8;
    }
    else
    {
      unsigned int v8 = 256;
    }
    *((_DWORD *)this + 137) = v7;
    *((_DWORD *)this + 139) = v8;
    uint64_t v10 = MultiRadixRealFFT::Initialize((AUTweakaLeakIR *)((char *)this + 840), v7);
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = 0;
      unsigned int v13 = 2 * *((_DWORD *)this + 135);
      while (1)
      {
        unsigned int v14 = *(_DWORD *)((char *)this + v12 + 564);
        if (v14 >= v13)
        {
          *((_DWORD *)this + 137) = v14;
          *((_DWORD *)this + 139) = v14 >> 1;
          uint64_t v11 = MultiRadixRealFFT::Initialize((AUTweakaLeakIR *)((char *)this + 840), v14);
          if (!v11) {
            break;
          }
        }
        v12 += 4;
        if (v12 == 112)
        {
          *((unsigned char *)this + 676) = 0;
          if (AUTweakaLeakIR::getAUSLog(void)::onceToken != -1) {
            dispatch_once(&AUTweakaLeakIR::getAUSLog(void)::onceToken, &__block_literal_global_8487);
          }
          unsigned int v15 = AUTweakaLeakIR::getAUSLog(void)::gLog;
          if (os_log_type_enabled((os_log_t)AUTweakaLeakIR::getAUSLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)AudioTimeStamp buf = 0;
            _os_log_impl(&dword_1BB0CE000, v15, OS_LOG_TYPE_DEFAULT, "AUTeakaLeakIR can not find an appropriate FFT Size, going into bypass", buf, 2u);
          }
          goto LABEL_28;
        }
      }
    }
  }
  uint64_t v11 = 0;
  *((unsigned char *)this + 676) = 1;
LABEL_28:
  size_t v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUTweakaLeakIR *)((char *)this + 32), 0);
  unsigned int v17 = ausdk::AUElement::GetParameter(v16, 3u);
  *((_DWORD *)this + 138) = v17;
  *((unsigned char *)this + 860) = 0;
  if (*((unsigned char *)this + 768))
  {
    unsigned int v18 = *((_DWORD *)this + 139);
    if (*((_DWORD *)this + 135) < v18) {
      unsigned int v18 = *((_DWORD *)this + 135);
    }
LABEL_35:
    *((_DWORD *)this + 138) = v18;
    goto LABEL_36;
  }
  unsigned int v19 = *((_DWORD *)this + 137);
  if (v19 < v17)
  {
    *((_DWORD *)this + 138) = v19;
    unsigned int v17 = v19;
  }
  unsigned int v18 = *((_DWORD *)this + 135);
  if (v17 > v18) {
    goto LABEL_35;
  }
LABEL_36:
  *(_WORD *)((char *)this + 861) = 257;
  AUTweakaLeakIR::ApplyDymamicTLIRParams(this);
  uint64_t v20 = *((unsigned int *)this + 137);
  int v39 = 0;
  std::vector<float>::assign((char **)this + 98, 3 * v20, &v39);
  int v21 = (float *)*((void *)this + 98);
  *((void *)this + 101) = v21;
  *((void *)this + 102) = &v21[v20];
  *((void *)this + 103) = &v21[2 * v20];
  vDSP_Length v22 = *((unsigned int *)this + 137);
  *((void *)this + 104) = &v21[2 * v20 + (v22 >> 1)];
  HIDWORD(__A) = 0;
  vDSP_vfill((const float *)&__A + 1, v21, 1, v22);
  vDSP_vfill((const float *)&__A + 1, *((float **)this + 102), 1, *((unsigned int *)this + 137));
  BOOL v23 = (DSPComplex *)*((void *)this + 101);
  v23->real = 1.0;
  if (*((unsigned char *)this + 676))
  {
    MultiRadixRealFFT::RealOutOfPlaceForwardTransform((AUTweakaLeakIR *)((char *)this + 840), v23, (DSPSplitComplex *)((char *)this + 824), 1.0);
    vDSP_Length v24 = (const float *)*((void *)this + 103);
    if (*((unsigned char *)this + 768))
    {
      uint64_t v25 = *((unsigned int *)this + 174);
      uint64_t v26 = (float *)&v24[v25];
      unint64_t v27 = (float *)(*((void *)this + 104) + 4 * v25);
      vDSP_vsq(v26, 1, v26, 1, *((unsigned int *)this + 176));
      vDSP_vsq(v27, 1, v27, 1, *((unsigned int *)this + 176));
      vDSP_vadd(v26, 1, v27, 1, v26, 1, *((unsigned int *)this + 176));
      int v28 = *((_DWORD *)this + 176);
      if (v28)
      {
        float v29 = 0.0;
        do
        {
          float v30 = *v26++;
          float v29 = v29 + sqrtf(v30);
          --v28;
        }
        while (v28);
        float v31 = v29 + 1.0e-30;
      }
      else
      {
        float v31 = 1.0e-30;
      }
      uint64_t v11 = 0;
      float v32 = 1.0 / v31;
    }
    else
    {
      vDSP_svesq(v24, 1, (float *)&__A + 1, *((unsigned int *)this + 139));
      vDSP_svesq(*((const float **)this + 104), 1, (float *)&__A, *((unsigned int *)this + 139));
      uint64_t v11 = 0;
      float v32 = sqrtf((float)*((unsigned int *)this + 139) / (float)(*((float *)&__A + 1) + *(float *)&__A));
    }
  }
  else
  {
    float v32 = 1.0;
  }
  *((float *)this + 140) = v32;
  **((_DWORD **)this + 101) = 0;
  uint64_t v33 = 548;
  if (!*((unsigned char *)this + 768)) {
    uint64_t v33 = 552;
  }
  uint64_t v34 = *(unsigned int *)((char *)this + v33);
  uint64_t __A = 0x3F0A3D713EEB851FLL;
  if (v34)
  {
    uint64_t v35 = 0;
    uint64_t v36 = *((void *)this + 102);
    do
    {
      uint64_t v37 = __A;
      *(float *)(v36 + 4 * v35) = *((float *)&v37 + 1)
                                - (float)(*(float *)&v37
                                        * cosf((float)(6.2832 / (float)(2 * v34 - 1)) * (float)(v34 + v35)));
      ++v35;
    }
    while (v34 != v35);
  }
  return v11;
}

void AUTweakaLeakIR::ApplyDymamicTLIRParams(AUTweakaLeakIR *this)
{
  unsigned int v2 = *((_DWORD *)this + 137);
  unsigned int v3 = *((_DWORD *)this + 136);
  if (*((unsigned char *)this + 857))
  {
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUTweakaLeakIR *)((char *)this + 32), 0);
    *((unsigned char *)this + 536) = ausdk::AUElement::GetParameter(Element, 0) != 0.0;
    *((unsigned char *)this + 857) = 0;
  }
  if (*((unsigned char *)this + 878))
  {
    int v5 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUTweakaLeakIR *)((char *)this + 32), 0);
    *((unsigned char *)this + 537) = ausdk::AUElement::GetParameter(v5, 0x15u) != 0.0;
    *((unsigned char *)this + 878) = 0;
  }
  float v6 = (float)v2;
  float v7 = (float)v3;
  if (*((unsigned char *)this + 858))
  {
    unsigned int v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUTweakaLeakIR *)((char *)this + 32), 0);
    *((unsigned char *)this + 538) = ausdk::AUElement::GetParameter(v8, 1u) != 0.0;
    *((unsigned char *)this + 858) = 0;
  }
  float v9 = v6 / v7;
  if (*((unsigned char *)this + 861))
  {
    uint64_t v10 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUTweakaLeakIR *)((char *)this + 32), 0);
    float Parameter = ausdk::AUElement::GetParameter(v10, 4u);
    *((float *)this + 172) = Parameter;
    *((unsigned char *)this + 861) = 0;
    *((_DWORD *)this + 174) = vcvtms_u32_f32(v9 * Parameter);
    if (!*((unsigned char *)this + 862))
    {
      unsigned int v12 = *((_DWORD *)this + 175);
      goto LABEL_12;
    }
  }
  else if (!*((unsigned char *)this + 862))
  {
    goto LABEL_19;
  }
  unsigned int v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUTweakaLeakIR *)((char *)this + 32), 0);
  float v14 = ausdk::AUElement::GetParameter(v13, 5u);
  *((float *)this + 173) = v14;
  *((unsigned char *)this + 862) = 0;
  unsigned int v12 = vcvtms_u32_f32(v9 * v14);
  *((_DWORD *)this + 175) = v12;
LABEL_12:
  unsigned int v15 = *((_DWORD *)this + 139);
  if (v12 > v15)
  {
LABEL_15:
    *((_DWORD *)this + 175) = v15;
    unsigned int v12 = v15;
    goto LABEL_16;
  }
  if (v12 <= 1)
  {
    unsigned int v15 = 2;
    goto LABEL_15;
  }
LABEL_16:
  unsigned int v16 = *((_DWORD *)this + 174);
  if (v16 > v12)
  {
    *((_DWORD *)this + 174) = v12;
    unsigned int v16 = v12;
  }
  unsigned int v17 = v12 - v16 + 1;
  *((_DWORD *)this + 176) = v17;
  *((float *)this + 177) = 1.0 / (float)v17;
LABEL_19:
  int v18 = *((unsigned __int8 *)this + 863);
  if (*((unsigned char *)this + 863))
  {
    unsigned int v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUTweakaLeakIR *)((char *)this + 32), 0);
    *((float *)this + 178) = ausdk::AUElement::GetParameter(v19, 6u);
    *((unsigned char *)this + 863) = 0;
  }
  if (*((unsigned char *)this + 864))
  {
    uint64_t v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUTweakaLeakIR *)((char *)this + 32), 0);
    *((float *)this + 179) = ausdk::AUElement::GetParameter(v20, 7u);
    *((unsigned char *)this + 864) = 0;
  }
  if (*((unsigned char *)this + 865))
  {
    int v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUTweakaLeakIR *)((char *)this + 32), 0);
    *((float *)this + 170) = ausdk::AUElement::GetParameter(v21, 8u);
    *((unsigned char *)this + 865) = 0;
  }
  if (*((unsigned char *)this + 866))
  {
    vDSP_Length v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUTweakaLeakIR *)((char *)this + 32), 0);
    *((float *)this + 171) = ausdk::AUElement::GetParameter(v22, 9u);
    *((unsigned char *)this + 866) = 0;
  }
  if (*((unsigned char *)this + 867))
  {
    BOOL v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUTweakaLeakIR *)((char *)this + 32), 0);
    *((float *)this + 184) = ausdk::AUElement::GetParameter(v23, 0xAu);
    *((unsigned char *)this + 867) = 0;
    if (!*((unsigned char *)this + 868)) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  if (*((unsigned char *)this + 868))
  {
LABEL_31:
    vDSP_Length v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUTweakaLeakIR *)((char *)this + 32), 0);
    *((float *)this + 183) = ausdk::AUElement::GetParameter(v24, 0xBu);
    *((unsigned char *)this + 868) = 0;
LABEL_32:
    *((float *)this + 185) = __exp10f(*((float *)this + 178) * 0.05);
    *((float *)this + 186) = __exp10f((float)(*((float *)this + 178) + *((float *)this + 184)) * 0.05);
    *((float *)this + 187) = __exp10f((float)(*((float *)this + 178) + *((float *)this + 183)) * 0.05);
    goto LABEL_33;
  }
  if (v18) {
    goto LABEL_32;
  }
LABEL_33:
  if (*((unsigned char *)this + 869))
  {
    uint64_t v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUTweakaLeakIR *)((char *)this + 32), 0);
    *((float *)this + 182) = ausdk::AUElement::GetParameter(v25, 0xCu);
    *((unsigned char *)this + 869) = 0;
  }
  if (*((unsigned char *)this + 870))
  {
    uint64_t v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUTweakaLeakIR *)((char *)this + 32), 0);
    float v27 = ausdk::AUElement::GetParameter(v26, 0xDu);
    *((float *)this + 180) = v27;
    float v28 = 1.0;
    if (v27 > 1.0 || (float v28 = 0.0, v27 < 0.0)) {
      *((float *)this + 180) = v28;
    }
    *((unsigned char *)this + 870) = 0;
  }
  if (*((unsigned char *)this + 871))
  {
    float v29 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUTweakaLeakIR *)((char *)this + 32), 0);
    float v30 = ausdk::AUElement::GetParameter(v29, 0xEu);
    *((float *)this + 181) = v30;
    float v31 = 1.0;
    if (v30 > 1.0 || (float v31 = 0.0, v30 < 0.0)) {
      *((float *)this + 181) = v31;
    }
    *((unsigned char *)this + 871) = 0;
  }
  if (*((unsigned char *)this + 872))
  {
    float v32 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUTweakaLeakIR *)((char *)this + 32), 0);
    *((float *)this + 188) = ausdk::AUElement::GetParameter(v32, 0xFu);
    *((unsigned char *)this + 872) = 0;
  }
  if (*((unsigned char *)this + 873))
  {
    uint64_t v33 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUTweakaLeakIR *)((char *)this + 32), 0);
    *((float *)this + 189) = ausdk::AUElement::GetParameter(v33, 0x10u);
    *((unsigned char *)this + 873) = 0;
  }
  if (*((unsigned char *)this + 874))
  {
    uint64_t v34 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUTweakaLeakIR *)((char *)this + 32), 0);
    *((float *)this + 190) = ausdk::AUElement::GetParameter(v34, 0x11u);
    *((unsigned char *)this + 874) = 0;
  }
  if (*((unsigned char *)this + 879))
  {
    uint64_t v35 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUTweakaLeakIR *)((char *)this + 32), 0);
    *((unsigned char *)this + 887) = ausdk::AUElement::GetParameter(v35, 0x16u) != 0.0;
    *((unsigned char *)this + 879) = 0;
  }
  if (*((unsigned char *)this + 880))
  {
    uint64_t v36 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUTweakaLeakIR *)((char *)this + 32), 0);
    *((float *)this + 222) = ausdk::AUElement::GetParameter(v36, 0x17u);
    *((unsigned char *)this + 880) = 0;
  }
  if (*((unsigned char *)this + 875))
  {
    uint64_t v37 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUTweakaLeakIR *)((char *)this + 32), 0);
    *((float *)this + 223) = ausdk::AUElement::GetParameter(v37, 0x12u);
    *((unsigned char *)this + 875) = 0;
  }
  if (*((unsigned char *)this + 876))
  {
    float v38 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUTweakaLeakIR *)((char *)this + 32), 0);
    *((float *)this + 224) = ausdk::AUElement::GetParameter(v38, 0x13u);
    *((unsigned char *)this + 876) = 0;
  }
  if (*((unsigned char *)this + 877))
  {
    int v39 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUTweakaLeakIR *)((char *)this + 32), 0);
    *((float *)this + 225) = ausdk::AUElement::GetParameter(v39, 0x14u);
    *((unsigned char *)this + 877) = 0;
  }
  if (*((unsigned char *)this + 885))
  {
    float v40 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUTweakaLeakIR *)((char *)this + 32), 0);
    *((float *)this + 191) = ausdk::AUElement::GetParameter(v40, 0x1Cu);
    *((unsigned char *)this + 885) = 0;
  }
  *(_DWORD *)((char *)this + 881) = 0;
}

uint64_t CA::AudioSampleRateConverter::GetExpectedNumberOfOutputFrames(CA::AudioSampleRateConverter *this)
{
  return AudioSampleRateConverterGetExpectedNumberOfOutputFrames();
}

uint64_t CA::AudioSampleRateConverter::GetRequiredNumberOfInputFrames(CA::AudioSampleRateConverter *this)
{
  return AudioSampleRateConverterGetRequiredNumberOfInputFrames();
}

uint64_t CA::AudioSampleRateConverter::Process(CA::AudioSampleRateConverter *this, const float *const *a2, int a3, unsigned int a4, float *const *a5)
{
  return AudioSampleRateConverterProcess();
}

float *AUTweakaLeakIR::CalcPeakingShelfCoeffs(float *this, float a2, float a3, float a4)
{
  uint64_t v4 = (uint64_t)this;
  if (a2 == 0.0)
  {
    uint64_t v5 = *((void *)this + 114);
    *(_OWORD *)uint64_t v5 = DspLib::Biquad::kBypassSection;
    *(_DWORD *)(v5 + 16) = 0;
  }
  else
  {
    float v9 = __exp10f(a2 / 20.0);
    float v10 = 1.0;
    float v11 = 1.0 / a4;
    float v12 = sqrtf(v9);
    if (a2 <= 0.0) {
      float v13 = v9;
    }
    else {
      float v13 = v12;
    }
    if (a2 <= 0.0) {
      float v14 = v9;
    }
    else {
      float v14 = 1.0;
    }
    if (a2 <= 0.0) {
      float v10 = v12;
    }
    unsigned int v15 = *(float **)(v4 + 912);
    float *v15 = v9;
    v15[1] = v11 * v13;
    void v15[2] = v14;
    v15[3] = v11 * v10;
    v15[4] = v14;
    HIDWORD(v16) = 1074340347;
    LODWORD(v16) = *(_DWORD *)(v4 + 544);
    float v17 = a3 * 3.14159265 / (double)v16;
    float v18 = tanf(v17);
    this = DspLib::Biquad::Design::bilinearTransformStoZUnwarped(v15, v18 * 0.5);
    uint64_t v19 = *(void *)(v4 + 912);
    *(float *)(v19 + 4) = -*(float *)(v19 + 4);
    *(float *)(v19 + 12) = -*(float *)(v19 + 12);
  }
  return this;
}

void AUTweakaLeakIR::AURealTimeDebugLog<AUTweakaLeakIR::TaLIRInternals,256ul>::Buffer::Write(uint64_t a1, long long *a2)
{
  unint64_t v4 = *(void *)(a1 + 664);
  uint64_t v5 = (atomic_ullong *)(a1 + 728);
  unint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)(a1 + 728), memory_order_acquire);
  unint64_t v7 = explicit + ~v4;
  BOOL v8 = v4 >= explicit;
  uint64_t v9 = -257;
  if (!v8) {
    uint64_t v9 = 0;
  }
  if (v7 == v9) {
    AUTweakaLeakIR::AURealTimeDebugLog<AUTweakaLeakIR::TaLIRInternals,256ul>::Buffer::Flush(a1);
  }
  uint64_t v10 = *(void *)(a1 + 664);
  uint64_t v11 = 256;
  if ((unint64_t)(v10 + 1) < 0x100) {
    uint64_t v11 = v10 + 1;
  }
  unint64_t v12 = (v10 - v11 + 257) % 0x101uLL - (257 - v11) + 1;
  if (v12 == atomic_load_explicit(v5, memory_order_acquire))
  {
    _os_assert_log();
    _os_crash();
    __break(1u);
  }
  else
  {
    uint64_t v13 = a1 + 664 + 24 * v10;
    long long v14 = *a2;
    *(void *)(v13 + 88) = *((void *)a2 + 2);
    *(_OWORD *)(v13 + 72) = v14;
    atomic_store(v12, (unint64_t *)(a1 + 664));
    unint64_t v15 = *(void *)(a1 + 664);
    unint64_t v16 = atomic_load_explicit((atomic_ullong *volatile)(a1 + 728), memory_order_acquire);
    unint64_t v17 = v16 + ~v15;
    BOOL v8 = v15 >= v16;
    uint64_t v18 = 257;
    if (!v8) {
      uint64_t v18 = 0;
    }
    if (v17 + v18 <= 0x7F)
    {
      uint64_t v19 = *(caulk::concurrent::messenger **)(a1 + 648);
      long long v21 = *(_OWORD *)a1;
      if (*(void *)(a1 + 8)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)(a1 + 8) + 16), 1uLL, memory_order_relaxed);
      }
      uint64_t v20 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 40, 8);
      *(_DWORD *)(v20 + 16) = 0;
      *(_OWORD *)(v20 + 24) = v21;
      *(void *)uint64_t v20 = &unk_1F14B0B70;
      *(void *)(v20 + 8) = 0;
      caulk::concurrent::messenger::enqueue(v19, (caulk::concurrent::message *)v20);
    }
  }
}

void AUTweakaLeakIR::AURealTimeDebugLog<AUTweakaLeakIR::TaLIRInternals,256ul>::Buffer::Flush(uint64_t a1)
{
  unsigned int v2 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  unint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)(a1 + 664), memory_order_acquire);
  unint64_t v4 = *(void *)(a1 + 728);
  if (explicit >= v4) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 257;
  }
  if (v5 + explicit - v4)
  {
    float v6 = (float *)(a1 + 736);
    unint64_t v7 = v5 + explicit;
    if (v5 + explicit < 0x102)
    {
      uint64_t v13 = 3 * v4;
      long long v14 = &v6[2 * v13];
      uint64_t v15 = 24 * v7 - 8 * v13;
      do
      {
        AUTweakaLeakIR::Log((void *)(a1 + 80), v14);
        v14 += 6;
        v15 -= 24;
      }
      while (v15);
      if (v7 == 257) {
        unint64_t v12 = 0;
      }
      else {
        unint64_t v12 = v5 + explicit;
      }
    }
    else
    {
      unint64_t v8 = v4 - 257;
      if (v4 != 257)
      {
        uint64_t v9 = (float *)(a1 + 24 * v4 + 736);
        do
        {
          AUTweakaLeakIR::Log((void *)(a1 + 80), v9);
          v9 += 6;
        }
        while (!__CFADD__(v8++, 1));
      }
      if (v5 + explicit != 257)
      {
        uint64_t v11 = 24 * (v5 + explicit) - 6168;
        do
        {
          AUTweakaLeakIR::Log((void *)(a1 + 80), v6);
          v6 += 6;
          v11 -= 24;
        }
        while (v11);
      }
      unint64_t v12 = v7 - 257;
    }
    atomic_store(v12, (unint64_t *)(a1 + 728));
  }
  std::ostream::flush();

  std::mutex::unlock(v2);
}

uint64_t _ZN5caulk10concurrent7details15rt_message_callIZN14AUTweakaLeakIR18AURealTimeDebugLogINS3_14TaLIRInternalsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEE7performEv(caulk::concurrent::message *a1)
{
  _ZN5caulk10concurrent7details12message_callIZN14AUTweakaLeakIR18AURealTimeDebugLogINS3_14TaLIRInternalsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEE7performEv((uint64_t)a1);
  *(void *)a1 = &unk_1F14B0B98;
  unsigned int v2 = (std::__shared_weak_count *)*((void *)a1 + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  caulk::concurrent::message::~message(a1);
  return (*(uint64_t (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90]
                                                                                           + 24))(*MEMORY[0x1E4FB7E90], a1, 40, 8);
}

void _ZN5caulk10concurrent7details12message_callIZN14AUTweakaLeakIR18AURealTimeDebugLogINS3_14TaLIRInternalsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEE7performEv(uint64_t a1)
{
  vDSP_Length v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = *(void *)(a1 + 24);
    atomic_fetch_add_explicit(&v1->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    unsigned int v3 = std::__shared_weak_count::lock(v1);
    if (v3)
    {
      unint64_t v4 = v3;
      if (v2) {
        AUTweakaLeakIR::AURealTimeDebugLog<AUTweakaLeakIR::TaLIRInternals,256ul>::Buffer::Flush(v2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    std::__shared_weak_count::__release_weak(v1);
  }
}

void _ZN5caulk10concurrent7details12message_callIZN14AUTweakaLeakIR18AURealTimeDebugLogINS3_14TaLIRInternalsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEED0Ev(caulk::concurrent::message *this)
{
  *(void *)this = &unk_1F14B0B98;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  caulk::concurrent::message::~message(this);

  JUMPOUT(0x1C185D370);
}

void _ZN5caulk10concurrent7details12message_callIZN14AUTweakaLeakIR18AURealTimeDebugLogINS3_14TaLIRInternalsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEED1Ev(caulk::concurrent::message *this)
{
  *(void *)this = &unk_1F14B0B98;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  caulk::concurrent::message::~message(this);
}

void _ZN5caulk10concurrent7details15rt_message_callIZN14AUTweakaLeakIR18AURealTimeDebugLogINS3_14TaLIRInternalsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEED0Ev(caulk::concurrent::message *this)
{
  *(void *)this = &unk_1F14B0B98;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  caulk::concurrent::message::~message(this);

  JUMPOUT(0x1C185D370);
}

void _ZN5caulk10concurrent7details15rt_message_callIZN14AUTweakaLeakIR18AURealTimeDebugLogINS3_14TaLIRInternalsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEED1Ev(caulk::concurrent::message *this)
{
  *(void *)this = &unk_1F14B0B98;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  caulk::concurrent::message::~message(this);
}

void AUTweakaLeakIR::Log(void *a1, float *a2)
{
}

void AUTweakaLeakIRLogCSV<float>(void *a1, float *a2, const char *a3)
{
  memset(&__p, 0, sizeof(__p));
  if (!boost::conversion::detail::try_lexical_convert<std::string,float>(a2, &__p))
  {
    std::bad_cast::bad_cast(&v10);
    v10.__vftable = (std::bad_cast_vtbl *)&unk_1F149D4E8;
    boost::throw_exception<boost::bad_lexical_cast>();
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  unint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)p_p, size);
  size_t v8 = strlen(a3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)a3, v8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1BB4C48EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::exception a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::default_delete<AUTweakaLeakIR::AURealTimeDebugLog<AUTweakaLeakIR::TaLIRInternals,256ul>>::operator()[abi:ne180100](uint64_t *a1)
{
  AUTweakaLeakIR::AURealTimeDebugLog<AUTweakaLeakIR::TaLIRInternals,256ul>::Buffer::Flush(*a1);
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    AUTweakaLeakIR::AURealTimeDebugLog<AUTweakaLeakIR::TaLIRInternals,256ul>::Buffer::Flush(v2);
    unint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)(v2 + 664), memory_order_acquire);
    unint64_t v4 = *(void *)(v2 + 728);
    uint64_t v5 = v4 - explicit;
    BOOL v8 = v4 > explicit;
    uint64_t v6 = 257;
    if (!v8) {
      uint64_t v6 = 0;
    }
    if (v6 != v5)
    {
      unint64_t v7 = v6 + explicit;
      unint64_t v9 = v7 - 257;
      BOOL v8 = v7 > 0x101;
      if (v7 == 257) {
        unint64_t v7 = 0;
      }
      if (v8) {
        unint64_t v7 = v9;
      }
      atomic_store(v7, (unint64_t *)(v2 + 728));
    }
    std::bad_cast v10 = *(std::__shared_weak_count **)(v2 + 656);
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    uint64_t v11 = MEMORY[0x1E4FBA400];
    uint64_t v12 = *MEMORY[0x1E4FBA400];
    *(void *)(v2 + 80) = *MEMORY[0x1E4FBA400];
    *(void *)(v2 + 80 + *(void *)(v12 - 24)) = *(void *)(v11 + 24);
    MEMORY[0x1C185CC40](v2 + 88);
    std::ostream::~ostream();
    MEMORY[0x1C185D210](v2 + 496);
    std::mutex::~mutex((std::mutex *)(v2 + 16));
    uint64_t v13 = *(std::__shared_weak_count **)(v2 + 8);
    if (v13) {
      std::__shared_weak_count::__release_weak(v13);
    }
    MEMORY[0x1C185D370](v2, 0x10F0C4077E18DA5);
  }

  JUMPOUT(0x1C185D370);
}

os_log_t ___ZN14AUTweakaLeakIR9getAUSLogEv_block_invoke()
{
  os_log_t result = os_log_create("com.apple.coreaudio", "AUTweakaLeakIR");
  AUTweakaLeakIR::getAUSLog(void)::gLog = (uint64_t)result;
  return result;
}

uint64_t AUTweakaLeakIR::CanScheduleParameters(AUTweakaLeakIR *this)
{
  return 0;
}

uint64_t AUTweakaLeakIR::SetParameter(AUTweakaLeakIR *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  if (a2 > 0x1D || a3)
  {
    Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  }
  else
  {
    if (a2 - 28 <= 0xFFFFFFFB) {
      *((unsigned char *)this + a2 + 857) = 1;
    }
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUTweakaLeakIR *)((char *)this + 32), 0);
  }
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  return 0;
}

uint64_t AUTweakaLeakIR::SetProperty(AUTweakaLeakIR *this, int a2, int a3, unsigned int a4, _DWORD *__src, size_t __n)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 <= 3900)
  {
    if (a2 == 21)
    {
      if (__n >= 4)
      {
        uint64_t result = 0;
        *((unsigned char *)this + 856) = *__src != 0;
        return result;
      }
    }
    else
    {
      if (a2 != 3900) {
        return result;
      }
      BOOL v8 = (void *)*((void *)this + 138);
      if (*((void *)this + 139) - (void)v8 >= (unint64_t)__n)
      {
        memcpy(v8, __src, __n);
        uint64_t result = 0;
        *((unsigned char *)this + 1128) = 1;
        return result;
      }
    }
  }
  else
  {
    switch(a2)
    {
      case 3901:
        if (__n == 8)
        {
          if (!*((unsigned char *)this + 17))
          {
            uint64_t result = 0;
            *((void *)this + 132) = *(void *)__src;
            return result;
          }
          return 4294956431;
        }
        break;
      case 3902:
        if (__n == 4)
        {
          if (!*((unsigned char *)this + 17))
          {
            uint64_t result = 0;
            *((_DWORD *)this + 283) = *__src;
            return result;
          }
          return 4294956431;
        }
        break;
      case 8900:
        if (__n == 8)
        {
          CACFDictionary::operator=((uint64_t)this + 1040, *(const void **)__src);
          return 0;
        }
        return 4294956445;
      default:
        return result;
    }
  }
  return 4294956445;
}

uint64_t CACFDictionary::operator=(uint64_t a1, const void *a2)
{
  if (!*(unsigned char *)(a1 + 8))
  {
    *(void *)a1 = a2;
    *(unsigned char *)(a1 + 9) = 0;
    return a1;
  }
  unint64_t v4 = *(const void **)a1;
  if (!*(void *)a1)
  {
    *(void *)a1 = a2;
    *(unsigned char *)(a1 + 9) = 0;
    if (!a2) {
      return a1;
    }
LABEL_8:
    CFRetain(a2);
    return a1;
  }
  CFRelease(v4);
  int v5 = *(unsigned __int8 *)(a1 + 8);
  *(void *)a1 = a2;
  *(unsigned char *)(a1 + 9) = 0;
  if (a2 && v5) {
    goto LABEL_8;
  }
  return a1;
}

uint64_t AUTweakaLeakIR::GetProperty(const void **this, int a2, int a3, unsigned int a4, void *__dst)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 <= 3899)
  {
    if (a2 == 21)
    {
      uint64_t result = 0;
      int v7 = *((unsigned __int8 *)this + 856);
    }
    else
    {
      if (a2 != 3700) {
        return result;
      }
      uint64_t result = 0;
      int v7 = *((unsigned __int8 *)this + 376);
    }
  }
  else
  {
    if (a2 == 3900)
    {
      memcpy(__dst, this[138], (unsigned char *)this[139] - (unsigned char *)this[138]);
      return 0;
    }
    if (a2 == 3901)
    {
      uint64_t result = 0;
      void *__dst = this[132];
      return result;
    }
    if (a2 != 3902) {
      return result;
    }
    uint64_t result = 0;
    int v7 = *((_DWORD *)this + 283);
  }
  *(_DWORD *)__dst = v7;
  return result;
}

uint64_t AUTweakaLeakIR::GetPropertyInfo(AUTweakaLeakIR *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 <= 3900)
  {
    if (a2 != 21)
    {
      if (a2 != 3700)
      {
        if (a2 != 3900) {
          return result;
        }
        *a6 = 1;
        unsigned int v8 = (*((_DWORD *)this + 278) - *((_DWORD *)this + 276)) & 0xFFFFFFFC;
        goto LABEL_19;
      }
      *a6 = 0;
      goto LABEL_18;
    }
    char v10 = 1;
LABEL_17:
    *a6 = v10;
LABEL_18:
    unsigned int v8 = 4;
    goto LABEL_19;
  }
  switch(a2)
  {
    case 3901:
      char v9 = *((unsigned char *)this + 17) ^ 1;
      break;
    case 3902:
      char v10 = *((unsigned char *)this + 17) ^ 1;
      goto LABEL_17;
    case 8900:
      char v9 = 1;
      break;
    default:
      return result;
  }
  *a6 = v9;
  unsigned int v8 = 8;
LABEL_19:
  uint64_t result = 0;
  *a5 = v8;
  return result;
}

uint64_t AUTweakaLeakIR::Reset(AUTweakaLeakIR *this)
{
  *((_DWORD *)this + 193) = *((_DWORD *)this + 185);
  *((_DWORD *)this + 194) = 0;
  *((_DWORD *)this + 195) = *((_DWORD *)this + 178);
  *((unsigned char *)this + 904) = 0;
  if (*((unsigned char *)this + 17)) {
    DspLib::Biquad::SetupWrapper::reset((AUTweakaLeakIR *)((char *)this + 984));
  }
  return 0;
}

uint64_t AUTweakaLeakIR::Initialize(AUTweakaLeakIR *this)
{
  v80[2] = *MEMORY[0x1E4F143B8];
  *((void *)this + 99) = *((void *)this + 98);
  uint64_t v2 = (uint64_t *)*((void *)this + 66);
  *((void *)this + 66) = 0;
  if (v2) {
    std::default_delete<AUTweakaLeakIR::AURealTimeDebugLog<AUTweakaLeakIR::TaLIRInternals,256ul>>::operator()[abi:ne180100](v2);
  }
  *((unsigned char *)this + 376) = 1;
  uint64_t v3 = *((void *)this + 15);
  if (v3) {
    LODWORD(v4) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  else {
    uint64_t v4 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
  }
  if (v4 != 2) {
    return 4294956428;
  }
  uint64_t v5 = *((void *)this + 21);
  if (v5) {
    LODWORD(v6) = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  else {
    uint64_t v6 = (*((void *)this + 19) - *((void *)this + 18)) >> 3;
  }
  if (v6 != 1) {
    return 4294956428;
  }
  double v7 = *(double *)(ausdk::AUScope::SafeGetElement((AUTweakaLeakIR *)((char *)this + 80), 0) + 80);
  if (v7 != *(double *)(ausdk::AUScope::SafeGetElement((AUTweakaLeakIR *)((char *)this + 128), 0) + 80)) {
    return 4294956428;
  }
  *((_DWORD *)this + 135) = *((_DWORD *)this + 84);
  *((_DWORD *)this + 136) = *(double *)(ausdk::AUScope::SafeGetElement((AUTweakaLeakIR *)((char *)this + 80), 0)+ 80);
  *((_WORD *)this + 268) = 0;
  *((unsigned char *)this + 538) = 0;
  *(void *)((char *)this + 548) = 0xC000000200;
  *(_OWORD *)((char *)this + 680) = xmmword_1BB87A3B0;
  *((void *)this + 87) = 0x800000004;
  *((_DWORD *)this + 176) = 5;
  *(_OWORD *)((char *)this + 708) = xmmword_1BB87A3C0;
  *(_OWORD *)((char *)this + 724) = xmmword_1BB87ACC0;
  *((_DWORD *)this + 193) = 0;
  *((void *)this + 97) = 0;
  *(_OWORD *)((char *)this + 740) = xmmword_1BB87A3E0;
  *((_DWORD *)this + 140) = 1065353216;
  *((unsigned char *)this + 887) = 0;
  *(_OWORD *)((char *)this + 888) = xmmword_1BB87A3F0;
  *((unsigned char *)this + 904) = 0;
  uint64_t v10 = AUTweakaLeakIR::InitializeFFTWindowInternals(this);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUTweakaLeakIR *)((char *)this + 32), 0);
  vDSP_Length Parameter = ausdk::AUElement::GetParameter(Element, 0x1Bu);
  *((_DWORD *)this + 227) = Parameter;
  *((unsigned char *)this + 884) = 0;
  DspLib::Biquad::Filter::initialize((AUTweakaLeakIR *)((char *)this + 936), 1uLL, Parameter);
  uint64_t v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUTweakaLeakIR *)((char *)this + 32), 0);
  *((float *)this + 191) = ausdk::AUElement::GetParameter(v13, 0x1Cu);
  *((unsigned char *)this + 885) = 0;
  AUTweakaLeakIR::ApplyDymamicTLIRParams(this);
  *((_DWORD *)this + 194) = 0;
  *((_DWORD *)this + 195) = *((_DWORD *)this + 178);
  *((_DWORD *)this + 193) = *((_DWORD *)this + 185);
  CFStringRef v14 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"Biquads_%u", *((unsigned int *)this + 136));
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&key, v14);
  CFArrayRef theArray = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  __int16 v63 = 257;
  CFArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  __int16 v61 = 257;
  unsigned int v8 = (CFDictionaryRef *)((char *)this + 1040);
  CACFDictionary::GetCACFArray((const __CFDictionary **)this + 130, @"Anchors", (CACFArray *)&Mutable);
  if (CFDictionaryContainsKey(*((CFDictionaryRef *)this + 130), key))
  {
    CACFDictionary::GetCACFArray((const __CFDictionary **)this + 130, (const __CFString *)key, (CACFArray *)&theArray);
  }
  else if (CFDictionaryContainsKey(*v8, @"Biquads"))
  {
    CACFDictionary::GetCACFArray((const __CFDictionary **)this + 130, @"Biquads", (CACFArray *)&theArray);
  }
  if (theArray && CFArrayGetCount(theArray) && Mutable && CFArrayGetCount(Mutable))
  {
    CFHelper::extractVector<float>((uint64_t)&v76, &Mutable);
    CFHelper::extractVectorOfVectors<float>((uint64_t *)v77, &theArray);
    unint64_t v15 = (uint64_t)(v76.__pn_.__r_.__value_.__l.__size_ - v76.__pn_.__r_.__value_.__r.__words[0]) >> 2;
    unint64_t v16 = (*(void *)&v77[8] - *(void *)v77) / 24;
    int v17 = v15 == v16;
    if (*(void *)&v77[8] != *(void *)v77)
    {
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      if (v16 <= 1) {
        unint64_t v16 = 1;
      }
      uint64_t v20 = (void *)(*(void *)v77 + 8);
      do
      {
        uint64_t v21 = *(v20 - 1);
        uint64_t v22 = (*v20 - v21) >> 2;
        BOOL v24 = *v20 != v21 && 0xCCCCCCCCCCCCCCCDLL * v22 < 0x3333333333333334;
        v17 &= v24;
        if (v22 == v19) {
          int v25 = v17;
        }
        else {
          int v25 = 0;
        }
        if (v18) {
          int v17 = v25;
        }
        else {
          uint64_t v19 = v22;
        }
        ++v18;
        v20 += 3;
      }
      while (v16 != v18);
    }
    if (v17)
    {
      std::string __p = 0;
      float v58 = 0;
      uint64_t v59 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, v76.__pn_.__r_.__value_.__l.__data_, v76.__pn_.__r_.__value_.__l.__size_, v15);
      memset(v56, 0, sizeof(v56));
      std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v56, *(uint64_t *)v77, *(uint64_t *)&v77[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v77[8] - *(void *)v77) >> 3));
      unsigned int v8 = (CFDictionaryRef *)v56;
      AUTweakaLeakIR::SetCorrectiveBQsAndAnchorGains((uint64_t)this, &__p, v56);
      v75.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
      if (__p)
      {
        float v58 = __p;
        operator delete(__p);
      }
    }
    v75.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v77;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
    if (v76.__pn_.__r_.__value_.__r.__words[0])
    {
      v76.__pn_.__r_.__value_.__l.__size_ = v76.__pn_.__r_.__value_.__r.__words[0];
      operator delete(v76.__pn_.__r_.__value_.__l.__data_);
    }
  }
  if (*((double *)this + 132) <= 0.0)
  {
    std::__optional_destruct_base<CA::AudioSampleRateConverter,false>::reset[abi:ne180100]((uint64_t)this + 1064);
  }
  else
  {
    CA::AudioSampleRateConverterBuilder::AudioSampleRateConverterBuilder((uint64_t)&v76, 0);
    CA::AudioSampleRateConverterBuilder::SetAttribute<double>((__CFDictionary *)v76.__pn_.__r_.__value_.__l.__size_, (const void *)*MEMORY[0x1E4F4EBD0], *((double *)this + 132));
    LODWORD(v26) = *((_DWORD *)this + 136);
    CA::AudioSampleRateConverterBuilder::SetAttribute<double>((__CFDictionary *)v76.__pn_.__r_.__value_.__l.__size_, (const void *)*MEMORY[0x1E4F4EBE0], (double)v26);
    CA::AudioSampleRateConverterBuilder::SetAttribute<unsigned int>((__CFDictionary *)v76.__pn_.__r_.__value_.__l.__size_, (const void *)*MEMORY[0x1E4F4EBE8], 2);
    CA::AudioSampleRateConverterBuilder::SetAttribute<unsigned int>((__CFDictionary *)v76.__pn_.__r_.__value_.__l.__size_, (const void *)*MEMORY[0x1E4F4EBF0], 32);
    CA::AudioSampleRateConverterBuilder::Build((CA::AudioSampleRateConverterBuilder *)v77);
    int v27 = v77[8];
    if (v77[8])
    {
      if (*((unsigned char *)this + 1072))
      {
        uint64_t v28 = *((void *)this + 133);
        *((void *)this + 133) = *(void *)v77;
        *(void *)float v77 = v28;
      }
      else
      {
        uint64_t v29 = *(void *)v77;
        *(void *)float v77 = 0;
        *((void *)this + 133) = v29;
        *((unsigned char *)this + 1072) = 1;
      }
    }
    else
    {
      unsigned int v8 = (CFDictionaryRef *)*(unsigned int *)v77;
    }
    caulk::__expected_detail::base<CA::AudioSampleRateConverter,int>::~base((uint64_t)v77);
    CA::AudioSampleRateConverterBuilder::~AudioSampleRateConverterBuilder((CA::AudioSampleRateConverterBuilder *)&v76);
    if (!v27) {
      goto LABEL_103;
    }
  }
  std::vector<float>::resize((uint64_t)this + 1104, *((unsigned int *)this + 283));
  std::vector<float>::resize((uint64_t)this + 1080, *((unsigned int *)this + 84));
  (*(void (**)(AUTweakaLeakIR *, void, void))(*(void *)this + 72))(this, 0, 0);
  unsigned int v8 = (CFDictionaryRef *)v10;
  CFBooleanRef v30 = (const __CFBoolean *)CFPreferencesCopyAppValue(@"AUTweakIRInternalLogs", @"com.apple.coreaudio");
  CFBooleanRef v31 = v30;
  if (v30)
  {
    CFTypeID v32 = CFGetTypeID(v30);
    if (v32 == CFBooleanGetTypeID())
    {
      CFTypeID TypeID = CFBooleanGetTypeID();
      if (TypeID == CFGetTypeID(v31))
      {
        if (!CFBooleanGetValue(v31)) {
          goto LABEL_62;
        }
      }
      else
      {
        CFTypeID v34 = CFNumberGetTypeID();
        if (v34 != CFGetTypeID(v31))
        {
LABEL_62:
          int v36 = 0;
          goto LABEL_63;
        }
        unsigned __int16 v35 = applesauce::CF::details::number_convert_as<BOOL>(v31);
        int v36 = 0;
        if (v35 < 0x100u || !(_BYTE)v35)
        {
LABEL_63:
          CFRelease(v31);
          if (v36)
          {
            if (!*((void *)this + 142))
            {
              uint64_t v38 = caulk::concurrent::messenger::shared_logging_priority(v37);
              std::allocate_shared[abi:ne180100]<caulk::concurrent::messenger,std::allocator<caulk::concurrent::messenger>,caulk::concurrent::messenger::thread_strategy,caulk::thread::attributes &,void>((uint64_t *)&v76, 0, v38);
              int v39 = (std::__shared_weak_count *)*((void *)this + 143);
              *((_OWORD *)this + 71) = *(_OWORD *)&v76.__pn_.__r_.__value_.__l.__data_;
              if (v39) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v39);
              }
            }
            std::__fs::filesystem::__temp_directory_path(&v76, 0);
            std::__fs::filesystem::path::path[abi:ne180100]<char [15],void>((std::string *)v77);
            std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)v77, (uint64_t)&v76, &v68);
            if ((v77[23] & 0x80000000) != 0) {
              operator delete(*(void **)v77);
            }
            if (SHIBYTE(v76.__pn_.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v76.__pn_.__r_.__value_.__l.__data_);
            }
            if (AUTweakaLeakIR::getAUSLog(void)::onceToken != -1) {
              dispatch_once(&AUTweakaLeakIR::getAUSLog(void)::onceToken, &__block_literal_global_8487);
            }
            float v40 = AUTweakaLeakIR::getAUSLog(void)::gLog;
            if (os_log_type_enabled((os_log_t)AUTweakaLeakIR::getAUSLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
            {
              float v41 = &v68;
              if ((v68.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                float v41 = (std::__fs::filesystem::path *)v68.__pn_.__r_.__value_.__r.__words[0];
              }
              LODWORD(v76.__pn_.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)v76.__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v41;
              _os_log_impl(&dword_1BB0CE000, v40, OS_LOG_TYPE_DEFAULT, "set up logs in \"%s\"", (uint8_t *)&v76, 0xCu);
            }
            std::__fs::filesystem::__status(&v68, 0);
            if (v76.__pn_.__r_.__value_.__s.__data_[0] == 255
              || !v76.__pn_.__r_.__value_.__s.__data_[0])
            {
              std::__fs::filesystem::__create_directory(&v68, 0);
            }
            long long v78 = 0u;
            long long v79 = 0u;
            memset(v77, 0, sizeof(v77));
            v42.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
            time_t v66 = 0;
            __t.__d_.__rep_ = v42.__d_.__rep_;
            time_t v66 = std::chrono::system_clock::to_time_t(&__t);
            std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = __t.__d_.__rep_;
            float v44 = localtime(&v66);
            size_t v45 = strftime(v77, 0x40uLL, "%T", v44);
            sprintf(&v77[v45], ":%03lld", rep / 1000 % 1000);
            std::string::basic_string[abi:ne180100]<0>(&v65, v77);
            if (AUTweakaLeakIR::getAUSLog(void)::onceToken != -1) {
              dispatch_once(&AUTweakaLeakIR::getAUSLog(void)::onceToken, &__block_literal_global_8487);
            }
            float v46 = AUTweakaLeakIR::getAUSLog(void)::gLog;
            if (os_log_type_enabled((os_log_t)AUTweakaLeakIR::getAUSLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(v76.__pn_.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)v76.__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v77;
              _os_log_impl(&dword_1BB0CE000, v46, OS_LOG_TYPE_DEFAULT, "set up logs with time stamp \"%s\"", (uint8_t *)&v76, 0xCu);
            }
            std::operator+<char>();
            float v47 = std::string::append(&v71, ".", 1uLL);
            long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
            v72.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v48;
            v47->__r_.__value_.__l.__size_ = 0;
            v47->__r_.__value_.__r.__words[2] = 0;
            v47->__r_.__value_.__r.__words[0] = 0;
            std::string::basic_string[abi:ne180100]<0>(v69, "TalIRInternals");
            if ((v70 & 0x80u) == 0) {
              float v49 = v69;
            }
            else {
              float v49 = (void **)v69[0];
            }
            if ((v70 & 0x80u) == 0) {
              std::string::size_type v50 = v70;
            }
            else {
              std::string::size_type v50 = (std::string::size_type)v69[1];
            }
            float v51 = std::string::append(&v72, (const std::string::value_type *)v49, v50);
            long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
            v73.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v52;
            v51->__r_.__value_.__l.__size_ = 0;
            v51->__r_.__value_.__r.__words[2] = 0;
            v51->__r_.__value_.__r.__words[0] = 0;
            float v53 = std::string::append(&v73, ".csv", 4uLL);
            std::string::size_type v54 = v53->__r_.__value_.__r.__words[0];
            v80[0] = v53->__r_.__value_.__l.__size_;
            *(void *)((char *)v80 + 7) = *(std::string::size_type *)((char *)&v53->__r_.__value_.__r.__words[1] + 7);
            char v55 = HIBYTE(v53->__r_.__value_.__r.__words[2]);
            v53->__r_.__value_.__l.__size_ = 0;
            v53->__r_.__value_.__r.__words[2] = 0;
            v53->__r_.__value_.__r.__words[0] = 0;
            *(std::string::size_type *)((char *)&v74.__pn_.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v80 + 7);
            v74.__pn_.__r_.__value_.__r.__words[0] = v54;
            v74.__pn_.__r_.__value_.__l.__size_ = v80[0];
            *((unsigned char *)&v74.__pn_.__r_.__value_.__s + 23) = v55;
            std::__fs::filesystem::operator/[abi:ne180100](&v74, (uint64_t)&v68, &v75);
            std::ofstream::basic_ofstream((uint64_t *)&v76);
            if (SHIBYTE(v75.__pn_.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v75.__pn_.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v74.__pn_.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v74.__pn_.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v73.__r_.__value_.__l.__data_);
            }
            if ((char)v70 < 0) {
              operator delete(v69[0]);
            }
            if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v72.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v71.__r_.__value_.__l.__data_);
            }
            operator new();
          }
          goto LABEL_103;
        }
      }
      int v36 = 1;
      goto LABEL_63;
    }
    CFRelease(v31);
  }
LABEL_103:
  CACFArray::~CACFArray((CACFArray *)&Mutable);
  CACFArray::~CACFArray((CACFArray *)&theArray);
  if (key) {
    CFRelease(key);
  }
  return (uint64_t)v8;
}

void sub_1BB4C5BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,const void *a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54)
{
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a50);
  if (__p) {
    operator delete(__p);
  }
  a50 = (void *)(v54 - 208);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a50);
  if (a53)
  {
    a54 = (uint64_t)a53;
    operator delete(a53);
  }
  CACFArray::~CACFArray((CACFArray *)&a20);
  CACFArray::~CACFArray((CACFArray *)&a22);
  applesauce::CF::StringRef::~StringRef(&a24);
  _Unwind_Resume(a1);
}

uint64_t AUTweakaLeakIR::SetCorrectiveBQsAndAnchorGains(uint64_t result, void *a2, void *a3)
{
  if (!*(void *)(result + 1008) && a2[1] != *a2 && a3[1] != *a3)
  {
    *(_DWORD *)(result + 908) = ((uint64_t)(*(void *)(*a3 + 8) - *(void *)*a3) >> 2) / 5uLL;
    operator new();
  }
  return result;
}

void sub_1BB4C5F58(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0xA0C40C7E57C1ALL);
  _Unwind_Resume(a1);
}

uint64_t CA::AudioSampleRateConverterBuilder::AudioSampleRateConverterBuilder(uint64_t a1, int a2)
{
  *(_DWORD *)a1 = a2;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    *(void *)(a1 + 8) = Mutable;
    return a1;
  }
  else
  {
    _os_assert_log();
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

void CA::AudioSampleRateConverterBuilder::SetAttribute<double>(__CFDictionary *a1, const void *a2, double a3)
{
  double valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  if (!v5)
  {
    exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFDictionarySetValue(a1, a2, v5);
  CFRelease(v5);
}

void sub_1BB4C6084(void *a1)
{
}

void CA::AudioSampleRateConverterBuilder::SetAttribute<unsigned int>(__CFDictionary *a1, const void *a2, int a3)
{
  int valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v5)
  {
    exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFDictionarySetValue(a1, a2, v5);
  CFRelease(v5);
}

void sub_1BB4C614C(void *a1)
{
}

uint64_t CA::AudioSampleRateConverterBuilder::Build(CA::AudioSampleRateConverterBuilder *this)
{
  uint64_t result = AudioSampleRateConverterCreate();
  if (result)
  {
    *(_DWORD *)this = result;
    *((unsigned char *)this + 8) = 0;
  }
  else
  {
    _os_assert_log();
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t caulk::__expected_detail::base<CA::AudioSampleRateConverter,int>::~base(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    AudioSampleRateConverterDispose();
  }
  return a1;
}

void CA::AudioSampleRateConverterBuilder::~AudioSampleRateConverterBuilder(CA::AudioSampleRateConverterBuilder *this)
{
  uint64_t v1 = (const void *)*((void *)this + 1);
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t std::__optional_destruct_base<CA::AudioSampleRateConverter,false>::reset[abi:ne180100](uint64_t result)
{
  if (*(unsigned char *)(result + 8))
  {
    uint64_t v1 = result;
    uint64_t result = AudioSampleRateConverterDispose();
    *(unsigned char *)(v1 + 8) = 0;
  }
  return result;
}

void CACFArray::~CACFArray(CACFArray *this)
{
  if (*((unsigned char *)this + 8))
  {
    uint64_t v2 = *(const void **)this;
    if (*(void *)this) {
      CFRelease(v2);
    }
  }
}

uint64_t std::allocate_shared[abi:ne180100]<caulk::concurrent::messenger,std::allocator<caulk::concurrent::messenger>,caulk::concurrent::messenger::thread_strategy,caulk::thread::attributes &,void>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = operator new(0x28uLL);
  v6[1] = 0;
  void v6[2] = 0;
  *uint64_t v6 = &unk_1F14BAA48;
  uint64_t result = MEMORY[0x1C185C230](v6 + 3, a2, a3);
  *a1 = result;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1BB4C6338(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [15],void>(std::string *a1)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append[abi:ne180100]<char const*,0>(a1, "AUTweakaLeakIR", "");
  return a1;
}

void sub_1BB4C638C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::default_delete<BiquadInterpolator>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v4 = (void **)(a1 + 24);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v2 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return MEMORY[0x1C185D370](a1, 0xA0C40C7E57C1ALL);
}

void AUTweakaLeakIR::~AUTweakaLeakIR(AUTweakaLeakIR *this)
{
  AUTweakaLeakIR::~AUTweakaLeakIR(this);

  JUMPOUT(0x1C185D370);
}

{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  void *v11;
  uint64_t *v12;
  uint64_t vars8;

  *(void *)this = &unk_1F14B0900;
  *((void *)this + 99) = *((void *)this + 98);
  uint64_t v2 = (uint64_t *)*((void *)this + 66);
  *((void *)this + 66) = 0;
  if (v2) {
    std::default_delete<AUTweakaLeakIR::AURealTimeDebugLog<AUTweakaLeakIR::TaLIRInternals,256ul>>::operator()[abi:ne180100](v2);
  }
  dispatch_async(MEMORY[0x1E4F14428], &__block_literal_global_21);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 143);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (void *)*((void *)this + 138);
  if (v4)
  {
    *((void *)this + 139) = v4;
    operator delete(v4);
  }
  CFNumberRef v5 = (void *)*((void *)this + 135);
  if (v5)
  {
    *((void *)this + 136) = v5;
    operator delete(v5);
  }
  std::__optional_destruct_base<CA::AudioSampleRateConverter,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 1064);
  CACFDictionary::~CACFDictionary((AUTweakaLeakIR *)((char *)this + 1040));
  uint64_t v6 = (void *)*((void *)this + 127);
  if (v6)
  {
    *((void *)this + 128) = v6;
    operator delete(v6);
  }
  double v7 = *((void *)this + 126);
  *((void *)this + 126) = 0;
  if (v7) {
    std::default_delete<BiquadInterpolator>::operator()[abi:ne180100](v7);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((AUTweakaLeakIR *)((char *)this + 984));
  unsigned int v8 = (void *)*((void *)this + 120);
  if (v8)
  {
    *((void *)this + 121) = v8;
    operator delete(v8);
  }
  char v9 = (void *)*((void *)this + 114);
  if (v9)
  {
    *((void *)this + 115) = v9;
    operator delete(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 106);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  uint64_t v11 = (void *)*((void *)this + 98);
  if (v11)
  {
    *((void *)this + 99) = v11;
    operator delete(v11);
  }
  uint64_t v12 = (uint64_t *)*((void *)this + 66);
  *((void *)this + 66) = 0;
  if (v12) {
    std::default_delete<AUTweakaLeakIR::AURealTimeDebugLog<AUTweakaLeakIR::TaLIRInternals,256ul>>::operator()[abi:ne180100](v12);
  }

  ausdk::AUBase::~AUBase(this);
}

uint64_t std::__optional_destruct_base<CA::AudioSampleRateConverter,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    AudioSampleRateConverterDispose();
  }
  return a1;
}

void CACFDictionary::~CACFDictionary(CACFDictionary *this)
{
  if (*((unsigned char *)this + 8))
  {
    uint64_t v2 = *(const void **)this;
    if (*(void *)this) {
      CFRelease(v2);
    }
  }
}

void ___ZN14AUTweakaLeakIR15DeleteEmptyLogsEv_block_invoke()
{
  std::__fs::filesystem::__temp_directory_path(&v4, 0);
  std::__fs::filesystem::path::path[abi:ne180100]<char [15],void>(&__p);
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__p, (uint64_t)&v4, &v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v4.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__pn_.__r_.__value_.__l.__data_);
  }
  std::__fs::filesystem::__status(&v5, 0);
  if (v4.__pn_.__r_.__value_.__s.__data_[0] && v4.__pn_.__r_.__value_.__s.__data_[0] != 255)
  {
    MEMORY[0x1C185CF90](&v4, &v5, 0, 0);
    long long v0 = *(_OWORD *)&v4.__pn_.__r_.__value_.__l.__data_;
    if (v4.__pn_.__r_.__value_.__l.__size_)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v4.__pn_.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
      std::string::size_type size = (std::__shared_weak_count *)v4.__pn_.__r_.__value_.__l.__size_;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v0;
      if (v4.__pn_.__r_.__value_.__l.__size_)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v4.__pn_.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](size);
      }
    }
    else
    {
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v4.__pn_.__r_.__value_.__r.__words[0];
    }
    while (__p.__r_.__value_.__r.__words[0])
    {
      uint64_t v2 = std::__fs::filesystem::directory_iterator::__dereference((const std::__fs::filesystem::directory_iterator *)&__p);
      if (!std::__fs::filesystem::__file_size(&v2->__p_, 0)) {
        std::__fs::filesystem::__remove(&v2->__p_, 0);
      }
      std::__fs::filesystem::directory_iterator::__increment((std::__fs::filesystem::directory_iterator *)&__p, 0);
    }
    if (__p.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
    }
    if (v4.__pn_.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v4.__pn_.__r_.__value_.__l.__size_);
    }
  }
  if (SHIBYTE(v5.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__pn_.__r_.__value_.__l.__data_);
  }
}

void sub_1BB4C671C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  if (AUTweakaLeakIR::getAUSLog(void)::onceToken != -1) {
    dispatch_once(&AUTweakaLeakIR::getAUSLog(void)::onceToken, &__block_literal_global_8487);
  }
  int v27 = AUTweakaLeakIR::getAUSLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)AUTweakaLeakIR::getAUSLog(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    LOWORD(__p) = 0;
    _os_log_error_impl(&dword_1BB0CE000, v27, OS_LOG_TYPE_ERROR, "failed to delete empty logs due to exception", (uint8_t *)&__p, 2u);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BB4C670CLL);
}

BOOL AUSM::InputGeometry::update(AUSM::InputGeometry *this, int a2)
{
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)this + 281);
  float Parameter = ausdk::AUElement::GetParameter(*(ausdk::AUElement **)this, 0x27u);
  if (!atomic_load((unsigned int *)(*((void *)this + 1) + 212))) {
    float Parameter = 1.0;
  }
  float v7 = *((float *)this + 20);
  BOOL v8 = Parameter != v7;
  if (Parameter == v7)
  {
    int v9 = v4 & 1;
  }
  else
  {
    *((float *)this + 20) = Parameter;
    ++*((_DWORD *)this + 71);
    int v9 = 1;
  }
  int v10 = atomic_load((unsigned __int8 *)this + 282);
  int v11 = v10 | a2;
  if ((v10 | a2))
  {
    _X24 = 0;
    _X25 = 0;
    atomic_store(0, (unsigned __int8 *)this + 282);
    __dmb(0xBu);
    __asm { CASPAL          X24, X25, X24, X25, [X8] }
    float v18 = *((float *)&_X24 + 1);
    float v19 = *((float *)this + 51);
    if (v19 != *(float *)&_X24)
    {
      float v20 = 0.0;
      if (*(float *)&_X24 >= 0.0) {
        float v19 = *(float *)&_X24;
      }
      else {
        float v19 = 0.0;
      }
      *((float *)this + 51) = v19;
      if (v19 >= 0.001)
      {
        float v21 = *((float *)this + 52);
        if ((float)(v21 - v19) >= 0.001)
        {
          float v22 = log10f(*((float *)this + 53));
          float v20 = v22 / log10f(v21 / v19);
        }
      }
      *((float *)this + 54) = v20;
    }
    if (*((float *)this + 52) != *((float *)&_X24 + 1))
    {
      float v23 = 0.0;
      if (*((float *)&_X24 + 1) < 0.0) {
        float v18 = 0.0;
      }
      *((float *)this + 52) = v18;
      if (v19 >= 0.001 && (float)(v18 - v19) >= 0.001)
      {
        float v24 = log10f(*((float *)this + 53));
        float v23 = v24 / log10f(v18 / v19);
      }
      *((float *)this + 54) = v23;
    }
    float v25 = __exp10f(0.0 * -0.05);
    if (*((float *)this + 53) != v25)
    {
      if (v25 < 0.000001) {
        float v25 = 0.000001;
      }
      *((float *)this + 53) = v25;
      float v26 = *((float *)this + 51);
      float v27 = 0.0;
      if (v26 >= 0.001)
      {
        float v28 = *((float *)this + 52);
        if ((float)(v28 - v26) >= 0.001)
        {
          float v29 = log10f(v25);
          float v27 = v29 / log10f(v28 / v26);
        }
      }
      *((float *)this + 54) = v27;
    }
    unsigned int v30 = atomic_load((unsigned int *)(*((void *)this + 1) + 112));
    *((_DWORD *)this + 50) = v30;
    unsigned int v31 = atomic_load((unsigned int *)(*((void *)this + 1) + 76));
    int v32 = (v31 >> 2) & 1;
    unsigned int v33 = atomic_load((unsigned int *)(*((void *)this + 1) + 72));
    unsigned int v34 = atomic_load((unsigned int *)(*(void *)(*((void *)this + 1) + 232) + 88));
    unsigned int v35 = atomic_load((unsigned int *)(*((void *)this + 1) + 212));
    uint64_t v36 = *(void *)(*((void *)this + 1) + 232);
    if (!*(unsigned char *)(v36 + 2548)) {
      atomic_load((unsigned __int8 *)(v36 + 2549));
    }
    if (v35 > 3) {
      char v37 = v32;
    }
    else {
      char v37 = 0;
    }
    if (v34 == 1) {
      char v38 = v37;
    }
    else {
      char v38 = v32;
    }
    if (v33 == 7) {
      LOBYTE(v32) = v38;
    }
    *((unsigned char *)this + 192) = v32;
  }
  int v39 = (float32x4_t *)*((void *)this + 2);
  __int32 v40 = v39[68].i32[3];
  if (v40 == *((_DWORD *)this + 72) && a2 == 0)
  {
    if (!v9)
    {
      if (!*((unsigned char *)this + 144)) {
        goto LABEL_119;
      }
      goto LABEL_106;
    }
    *((float *)this + 46) = ausdk::AUElement::GetParameter(*(ausdk::AUElement **)this, 0x23u) * 0.01;
    goto LABEL_58;
  }
  *((_DWORD *)this + 72) = v40;
  __dmb(0xBu);
  float v42 = ausdk::AUElement::GetParameter(*(ausdk::AUElement **)this, 0x23u) * 0.01;
  if (!*(unsigned char *)(*(void *)(*((void *)this + 1) + 232) + 2608))
  {
    uint64_t v43 = *((void *)this + 2);
    unsigned int v44 = atomic_load((unsigned int *)(v43 + 408));
    if (v44 || *(_DWORD *)(v43 + 412))
    {
      unsigned int v45 = atomic_load((unsigned int *)(*((void *)this + 2) + 408));
      uint64_t v46 = *((void *)this + 2);
      if (v45 == *(_DWORD *)(v46 + 412))
      {
        *((float *)this + 46) = v42;
        *((float *)this + 47) = v42;
        goto LABEL_57;
      }
      uint64_t v47 = 464;
      if (!*((unsigned char *)this + 144)) {
        uint64_t v47 = 456;
      }
      float v42 = *((float *)this + 47) + (float)(*(float *)(v46 + v47) * (float)(v42 - *((float *)this + 47)));
    }
  }
  *((float *)this + 46) = v42;
LABEL_57:
  ++*((_DWORD *)this + 71);
  if ((v9 | a2) != 1) {
    goto LABEL_103;
  }
LABEL_58:
  atomic_store(0, (unsigned __int8 *)this + 281);
  __dmb(0xBu);
  *((unsigned char *)this + 176) = ausdk::AUElement::GetParameter(*(ausdk::AUElement **)this, 0x20u) >= 0.5;
  unsigned int v48 = atomic_load((unsigned int *)(*((void *)this + 1) + 72));
  if (v48 == 6) {
    goto LABEL_60;
  }
  unsigned int v49 = atomic_load((unsigned int *)(*((void *)this + 1) + 72));
  if (v49 == 2) {
    goto LABEL_60;
  }
  unsigned int v76 = atomic_load((unsigned int *)(*((void *)this + 1) + 72));
  if (v76 == 7)
  {
    unsigned int v77 = atomic_load((unsigned int *)(*(void *)(*((void *)this + 1) + 232) + 88));
    if (v77 == 1)
    {
LABEL_60:
      BOOL v50 = 1;
      goto LABEL_61;
    }
    unsigned int v78 = atomic_load((unsigned int *)(*(void *)(*((void *)this + 1) + 232) + 88));
    BOOL v50 = v78 == 2;
  }
  else
  {
    BOOL v50 = 0;
  }
LABEL_61:
  if (*((unsigned char *)this + 176)) {
    BOOL v51 = v50;
  }
  else {
    BOOL v51 = 0;
  }
  *((unsigned char *)this + 177) = v51;
  AUSM::RealtimeSafePingPongContainer<std::vector<AUSM::ExclusionZone>>::update((int8x16_t *)((char *)this + 24));
  unsigned __int8 v52 = atomic_load((unsigned __int8 *)(*((void *)this + 1) + 201));
  if (v52)
  {
    AUSM::RealtimeSafePingPongContainer<std::vector<AUSM::ExclusionZone>>::update((int8x16_t *)((char *)this + 24));
    BOOL v53 = *(void *)(*((void *)this + 4) + 8) != **((void **)this + 4) && v50;
  }
  else
  {
    BOOL v53 = 0;
  }
  *((unsigned char *)this + 178) = v53;
  float SnappedCoordinates = ausdk::AUElement::GetParameter(*(ausdk::AUElement **)this, 0);
  float v55 = ausdk::AUElement::GetParameter(*(ausdk::AUElement **)this, 1u);
  *(float *)&uint64_t v56 = ausdk::AUElement::GetParameter(*(ausdk::AUElement **)this, 0x1Bu);
  *(void *)&long long v131 = v56;
  float v129 = ausdk::AUElement::GetParameter(*(ausdk::AUElement **)this, 0x19u);
  float v57 = ausdk::AUElement::GetParameter(*(ausdk::AUElement **)this, 0x1Au);
  long long v58 = v131;
  *((float *)&v58 + 1) = v129;
  *((float *)&v58 + 2) = v57;
  *((_OWORD *)this + 3) = v58;
  unsigned int v59 = atomic_load((unsigned int *)(*((void *)this + 1) + 80));
  if (v59 != 3)
  {
    if (*((unsigned char *)this + 177))
    {
      float SnappedCoordinates = AUSM::SnapCoordinates::getSnappedCoordinates((uint64_t)this + 224, 0, 0, SnappedCoordinates, v55);
      float v55 = v60;
    }
    if (*((unsigned char *)this + 178))
    {
      AUSM::RealtimeSafePingPongContainer<std::vector<AUSM::ExclusionZone>>::update((int8x16_t *)((char *)this + 24));
      float SnappedCoordinates = AUSM::SnapCoordinates::getExcludedCoordinates((uint64_t)this + 224, *((AUSM::ExclusionZone ***)this + 4), v61, SnappedCoordinates, v55);
      float v55 = v62;
    }
  }
  __float2 v63 = __sincosf_stret((float)(SnappedCoordinates * 0.017453) * 0.5);
  __float2 v64 = __sincosf_stret((float)(v55 * 0.017453) * 0.5);
  *(float *)&long long v65 = -(float)((float)(v63.__sinval * v64.__sinval) - (float)((float)(v63.__cosval * v64.__cosval) * 0.0));
  *((float *)&v65 + 1) = (float)(v63.__sinval * (float)(v64.__cosval * 0.0)) + (float)(v64.__sinval * v63.__cosval);
  *((float *)&v65 + 2) = (float)(v63.__cosval * (float)(v64.__sinval * -0.0)) + (float)(v64.__cosval * v63.__sinval);
  *((float *)&v65 + 3) = (float)(v63.__cosval * v64.__cosval) + (float)((float)(v63.__sinval * v64.__sinval) * 0.0);
  *((_OWORD *)this + 6) = v65;
  if (atomic_load((unsigned int *)(*((void *)this + 1) + 220)))
  {
    *((unsigned char *)this + 112) = 1;
  }
  else
  {
    AUSM::AppleSauceCFWithMutex<__CFURL const*>::load(&cf, *((void *)this + 1) + 128);
    CFTypeRef v67 = cf;
    *((unsigned char *)this + 112) = cf != 0;
    if (v67) {
      CFRelease(v67);
    }
  }
  float v68 = ausdk::AUElement::GetParameter(*(ausdk::AUElement **)this, 0x16u);
  float v69 = ausdk::AUElement::GetParameter(*(ausdk::AUElement **)this, 0x17u);
  float v70 = ausdk::AUElement::GetParameter(*(ausdk::AUElement **)this, 0x18u);
  __float2 v71 = __sincosf_stret((float)(v68 * 0.017453) * 0.5);
  __float2 v72 = __sincosf_stret((float)(v69 * 0.017453) * 0.5);
  __float2 v73 = __sincosf_stret((float)(v70 * 0.017453) * 0.5);
  *(float *)&long long v74 = (float)(v73.__sinval * (float)(v71.__cosval * v72.__cosval))
                 - (float)(v73.__cosval * (float)(v71.__sinval * v72.__sinval));
  *((float *)&v74 + 1) = (float)(v71.__sinval * (float)(v72.__cosval * v73.__sinval))
                       + (float)((float)(v72.__sinval * v73.__cosval) * v71.__cosval);
  *((float *)&v74 + 2) = (float)(v71.__cosval * (float)-(float)(v73.__sinval * v72.__sinval))
                       + (float)((float)(v72.__cosval * v73.__cosval) * v71.__sinval);
  *((float *)&v74 + 3) = (float)((float)(v71.__sinval * v72.__sinval) * v73.__sinval)
                       + (float)(v73.__cosval * (float)(v71.__cosval * v72.__cosval));
  *((_OWORD *)this + 8) = v74;
  if (ausdk::AUElement::GetParameter(*(ausdk::AUElement **)this, 0x1Fu) >= 0.5)
  {
LABEL_82:
    LOBYTE(v75) = 1;
    goto LABEL_87;
  }
  unsigned int v75 = atomic_load((unsigned int *)(*((void *)this + 1) + 80));
  if (v75 != 1)
  {
    if (v75 || *(_DWORD *)(*(void *)this + 108) <= 1u)
    {
      unsigned int v75 = atomic_load((unsigned int *)(*((void *)this + 1) + 72));
      LOBYTE(v75) = v75 == 5;
      goto LABEL_87;
    }
    goto LABEL_82;
  }
LABEL_87:
  unsigned int v79 = atomic_load((unsigned int *)(*((void *)this + 1) + 72));
  unsigned int v80 = atomic_load((unsigned int *)(*(void *)(*((void *)this + 1) + 232) + 88));
  unsigned int v81 = atomic_load((unsigned int *)(*((void *)this + 1) + 212));
  uint64_t v82 = *(void *)(*((void *)this + 1) + 232);
  if (!*(unsigned char *)(v82 + 2548)) {
    atomic_load((unsigned __int8 *)(v82 + 2549));
  }
  if (v79 == 7 && v80 == 1 && v81 - 1 >= 3 && (!v81 || *((float *)this + 20) >= 0.5))
  {
    char v83 = 1;
  }
  else
  {
    char v83 = v75;
    LOBYTE(v75) = 1;
  }
  *((unsigned char *)this + 76) = v83;
  *((unsigned char *)this + 77) = v75;
  unsigned int v84 = atomic_load((unsigned int *)(*((void *)this + 1) + 72));
  unsigned int v85 = atomic_load((unsigned int *)(*(void *)(*((void *)this + 1) + 232) + 88));
  uint64_t v86 = *(void *)(*((void *)this + 1) + 232);
  if (!*(unsigned char *)(v86 + 2548)) {
    atomic_load((unsigned __int8 *)(v86 + 2549));
  }
  unsigned int v87 = 4;
  if (v84 == 7 && v85 == 1) {
    unsigned int v87 = atomic_load((unsigned int *)(*((void *)this + 1) + 212));
  }
  *((_DWORD *)this + 16) = v87;
  unsigned int v88 = atomic_load((unsigned int *)(*((void *)this + 1) + 72));
  if (v88 == 7 && (unsigned int v89 = atomic_load((unsigned int *)(*(void *)(*((void *)this + 1) + 232) + 88)), v89 == 2))
  {
    uint64_t v90 = *((void *)this + 2);
    *((unsigned char *)this + 180) = *(unsigned char *)(v90 + 577);
    BOOL v91 = *(unsigned char *)(v90 + 576) != 0;
  }
  else
  {
    BOOL v91 = 0;
    *((unsigned char *)this + 180) = 0;
  }
  *((unsigned char *)this + 179) = v91;
LABEL_103:
  if (!*((unsigned char *)this + 144)) {
    goto LABEL_119;
  }
  int v39 = (float32x4_t *)*((void *)this + 2);
  if (!v9)
  {
LABEL_106:
    __int32 v92 = v39[68].i32[2];
    if (*((_DWORD *)this + 73) == v92)
    {
      __int32 v92 = *((_DWORD *)this + 73);
      if (*((_DWORD *)this + 74) == v39[68].i32[0]) {
        goto LABEL_119;
      }
    }
    goto LABEL_108;
  }
  __int32 v92 = v39[68].i32[2];
LABEL_108:
  float v93 = v39[27].f32[2];
  float v94 = v39[28].f32[1];
  *((_DWORD *)this + 73) = v92;
  *((_DWORD *)this + 74) = v39[68].i32[0];
  if (v94 <= 0.001)
  {
    float32x4_t v115 = (float32x4_t)xmmword_1BB875840;
  }
  else
  {
    float32x4_t v95 = *((float32x4_t *)this + 6);
    float32x4_t v96 = *((float32x4_t *)this + 8);
    int32x4_t v97 = (int32x4_t)vnegq_f32(v96);
    int8x16_t v98 = (int8x16_t)vtrn2q_s32((int32x4_t)v96, vtrn1q_s32((int32x4_t)v96, v97));
    float32x4_t v99 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v96, (int8x16_t)v97, 8uLL), *(float32x2_t *)v95.f32, 1), (float32x4_t)vextq_s8(v98, v98, 8uLL), v95.f32[0]);
    float32x4_t v100 = (float32x4_t)vrev64q_s32((int32x4_t)v96);
    v100.i32[0] = v97.i32[1];
    v100.i32[3] = v97.i32[2];
    float32x4_t v101 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v96, v95, 3), v100, v95, 2), v99);
    float32x4_t v102 = (float32x4_t)_PromotedConst_39679;
    if (!*((unsigned char *)this + 76) || v93 < 0.999)
    {
      float32x4_t v103 = v39[31];
      int32x4_t v104 = (int32x4_t)vnegq_f32(v103);
      int8x16_t v105 = (int8x16_t)vtrn2q_s32((int32x4_t)v103, vtrn1q_s32((int32x4_t)v103, v104));
      float32x4_t v106 = (float32x4_t)vrev64q_s32((int32x4_t)v103);
      v106.i32[0] = v104.i32[1];
      v106.i32[3] = v104.i32[2];
      float32x4_t v107 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v103, v39[34], 3), v106, v39[34], 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v103, (int8x16_t)v104, 8uLL), *(float32x2_t *)v39[34].f32, 1), (float32x4_t)vextq_s8(v105, v105, 8uLL), COERCE_FLOAT(*(_OWORD *)&v39[34])));
      if (*((unsigned char *)this + 76) && v93 > 0.001)
      {
        float32x4_t v108 = vmulq_f32(v107, (float32x4_t)xmmword_1BB875840);
        float32x4_t v109 = (float32x4_t)vextq_s8((int8x16_t)v108, (int8x16_t)v108, 8uLL);
        *(float32x2_t *)v108.f32 = vadd_f32(*(float32x2_t *)v108.f32, *(float32x2_t *)v109.f32);
        v108.f32[0] = vaddv_f32(*(float32x2_t *)v108.f32);
        v109.i64[0] = 0;
        float32x4_t v130 = v101;
        _simd_slerp_internal(v107, (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v108, v109)), 0), (int8x16_t)_PromotedConst, (int8x16_t)_PromotedConst_39679), v93);
        float32x4_t v101 = v130;
        float32x4_t v102 = (float32x4_t)_PromotedConst_39679;
      }
      int32x4_t v110 = (int32x4_t)vnegq_f32(v101);
      int8x16_t v111 = (int8x16_t)vtrn2q_s32((int32x4_t)v101, vtrn1q_s32((int32x4_t)v101, v110));
      float32x4_t v112 = (float32x4_t)vrev64q_s32((int32x4_t)v101);
      v112.i32[0] = v110.i32[1];
      v112.i32[3] = v110.i32[2];
      float32x4_t v101 = vaddq_f32(vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v101, (int8x16_t)v110, 8uLL), *(float32x2_t *)v107.f32, 1), (float32x4_t)vextq_s8(v111, v111, 8uLL), v107.f32[0]), vmlaq_laneq_f32(vmulq_laneq_f32(v101, v107, 3), v112, v107, 2));
    }
    float32x4_t v113 = vmulq_f32(v101, (float32x4_t)xmmword_1BB875840);
    float32x4_t v114 = (float32x4_t)vextq_s8((int8x16_t)v113, (int8x16_t)v113, 8uLL);
    *(float32x2_t *)v113.f32 = vadd_f32(*(float32x2_t *)v113.f32, *(float32x2_t *)v114.f32);
    v113.f32[0] = vaddv_f32(*(float32x2_t *)v113.f32);
    v114.i64[0] = 0;
    _simd_slerp_internal(v102, (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v113, v114)), 0), (int8x16_t)vnegq_f32(v101), (int8x16_t)v101), v94);
  }
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_f32(v115, *((float32x4_t *)this + 10))), 0xFuLL))) & 1) == 0)
  {
    *((float32x4_t *)this + 10) = v115;
    BOOL v8 = 1;
  }
LABEL_119:
  if ((v9 | v11) & 1) != 0 || (unsigned __int8 v116 = atomic_load((unsigned __int8 *)this + 283), (v116))
  {
    atomic_store(0, (unsigned __int8 *)this + 283);
    __dmb(0xBu);
    float v117 = ausdk::AUElement::GetParameter(*(ausdk::AUElement **)this, 6u);
    float v118 = ausdk::AUElement::GetParameter(*(ausdk::AUElement **)this, 7u);
    float v119 = ausdk::AUElement::GetParameter(*(ausdk::AUElement **)this, 3u);
    float v120 = __exp10f(v119 / 20.0);
    if (v120 < v117) {
      float v120 = v117;
    }
    if (v118 < v120) {
      float v120 = v118;
    }
    *((float *)this + 17) = v120;
    unsigned int v121 = atomic_load((unsigned int *)(*((void *)this + 1) + 80));
    float v122 = 1.0;
    if (v121 != 1 && (v121 || *(_DWORD *)(*(void *)this + 108) <= 1u))
    {
      unsigned int v123 = atomic_load((unsigned int *)(*((void *)this + 1) + 72));
      if (v123 != 5)
      {
        unsigned int v124 = atomic_load((unsigned int *)(*((void *)this + 1) + 80));
        if (v124 != 3)
        {
          float v125 = ausdk::AUElement::GetParameter(*(ausdk::AUElement **)this, 2u);
          float v126 = ausdk::AUElement::GetParameter(*(ausdk::AUElement **)this, 0x22u);
          float v127 = AUSM::DistanceGain::calculateDistanceGain((AUSM::InputGeometry *)((char *)this + 192), v125 * v126);
          AUSM::InputGeometry::clampDistanceGain((ausdk::AUElement **)this, v127, *((float *)this + 17));
        }
      }
    }
    *((float *)this + 18) = v122;
    ++*((_DWORD *)this + 71);
  }
  return v8;
}

void _simd_slerp_internal(float32x4_t a1, float32x4_t a2, float a3)
{
  float v5 = 1.0 - a3;
  float32x4_t v6 = vsubq_f32(a1, a2);
  int8x16_t v7 = (int8x16_t)vmulq_f32(v6, v6);
  float32x4_t v8 = vaddq_f32(a1, a2);
  int8x16_t v9 = (int8x16_t)vmulq_f32(v8, v8);
  float v10 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)))));
  float v11 = v10 + v10;
  if ((float)(v10 + v10) != 0.0) {
    sinf(v11);
  }
  if ((float)(v5 * v11) != 0.0) {
    sinf(v5 * v11);
  }
  float v12 = v11 * a3;
  if (v12 != 0.0) {
    sinf(v12);
  }
}

void AUSM::InputGeometry::clampDistanceGain(ausdk::AUElement **this, float a2, float a3)
{
}

float32x2_t BCMBypassedStereo::panWithSize(float *a1)
{
  {
    int v265 = a1;
    a1 = v265;
    if (v48)
    {
      BCMBypassedStereo::panWithSize(BCMBypassedStereo::PanningFunctionPoint::Coordinates const&)::kPFPs = xmmword_1BB87ACD0;
      *(_OWORD *)algn_1E9F7EBD0 = xmmword_1BB879DF0;
      xmmword_1E9F7EBE0 = xmmword_1BB87ACE0;
      unk_1E9F7EBF0 = xmmword_1BB87ACF0;
      xmmword_1E9F7EC00 = xmmword_1BB873F80;
      qword_1E9F7EC10 = 0xBF80000000000000;
      dword_1E9F7EC18 = 1065353216;
      unk_1E9F7EC24 = 0;
      unk_1E9F7EC1C = 0;
      dword_1E9F7EC2C = 0;
      xmmword_1E9F7EC30 = xmmword_1BB87AD00;
      unk_1E9F7EC40 = xmmword_1BB87AD10;
      xmmword_1E9F7EC50 = xmmword_1BB87AD20;
      unk_1E9F7EC60 = xmmword_1BB879DF0;
      xmmword_1E9F7EC70 = xmmword_1BB87AD30;
      unk_1E9F7EC80 = xmmword_1BB875830;
      xmmword_1E9F7EC90 = xmmword_1BB87AD40;
      unk_1E9F7ECA0 = xmmword_1BB87AD50;
      xmmword_1E9F7ECB0 = xmmword_1BB87AD60;
      unk_1E9F7ECC0 = xmmword_1BB87AD70;
      xmmword_1E9F7ECD0 = xmmword_1BB87AD80;
      unk_1E9F7ECE0 = xmmword_1BB87AD90;
      xmmword_1E9F7ECF0 = xmmword_1BB87ADA0;
      unk_1E9F7ED00 = xmmword_1BB87ADB0;
      xmmword_1E9F7ED10 = xmmword_1BB87ADC0;
      unk_1E9F7ED20 = xmmword_1BB87AD40;
      xmmword_1E9F7ED30 = xmmword_1BB87ADD0;
      unk_1E9F7ED40 = xmmword_1BB87ADE0;
      xmmword_1E9F7ED50 = xmmword_1BB87AD70;
      unk_1E9F7ED60 = xmmword_1BB873CC0;
      xmmword_1E9F7ED70 = xmmword_1BB87ADF0;
      unk_1E9F7ED80 = xmmword_1BB873C90;
      xmmword_1E9F7ED90 = xmmword_1BB87ACE0;
      unk_1E9F7EDA0 = xmmword_1BB87AE00;
      xmmword_1E9F7EDB0 = xmmword_1BB87AD10;
      unk_1E9F7EDC0 = xmmword_1BB87AE10;
      xmmword_1E9F7EDD0 = xmmword_1BB873F80;
      unk_1E9F7EDE0 = xmmword_1BB87AE20;
      xmmword_1E9F7EDF0 = xmmword_1BB87AD10;
      unk_1E9F7EE00 = xmmword_1BB87AE30;
      xmmword_1E9F7EE10 = xmmword_1BB873C90;
      unk_1E9F7EE20 = xmmword_1BB87AD30;
      xmmword_1E9F7EE30 = xmmword_1BB87A130;
      unk_1E9F7EE40 = xmmword_1BB87AE40;
      __asm { FMOV            V0.2S, #-1.0 }
      qword_1E9F7EE50 = _D0;
      float v54 = __exp10f(0.1);
      float v55 = __exp10f(-0.8);
      dword_1E9F7EE58 = LODWORD(v54);
      dword_1E9F7EE5C = LODWORD(v55);
      xmmword_1E9F7EE60 = xmmword_1BB87AE50;
      float v56 = __exp10f(-0.135);
      float v57 = __exp10f(-0.135);
      dword_1E9F7EE70 = LODWORD(v56);
      dword_1E9F7EE74 = LODWORD(v57);
      xmmword_1E9F7EE78 = xmmword_1BB87AE60;
      float v58 = __exp10f(-0.8);
      float v59 = __exp10f(0.1);
      dword_1E9F7EE88 = LODWORD(v58);
      dword_1E9F7EE8C = LODWORD(v59);
      xmmword_1E9F7EE90 = xmmword_1BB87AE70;
      dword_1E9F7EEA0 = __exp10f(0.185);
      unk_1E9F7EEA4 = xmmword_1BB87AE80;
      dword_1E9F7EEB4 = 0;
      float v60 = __exp10f(0.07);
      float v61 = __exp10f(0.07);
      dword_1E9F7EEB8 = LODWORD(v60);
      dword_1E9F7EEBC = LODWORD(v61);
      xmmword_1E9F7EEC0 = xmmword_1BB87AE90;
      float v62 = __exp10f(0.185);
      dword_1E9F7EED0 = 0;
      dword_1E9F7EED4 = LODWORD(v62);
      xmmword_1E9F7EED8 = xmmword_1BB87AEA0;
      float v63 = __exp10f(0.15);
      float v64 = __exp10f(-0.66);
      dword_1E9F7EEE8 = LODWORD(v63);
      dword_1E9F7EEEC = LODWORD(v64);
      xmmword_1E9F7EEF0 = xmmword_1BB87AEB0;
      float v65 = __exp10f(-0.01);
      float v66 = __exp10f(-0.01);
      dword_1E9F7EF00 = LODWORD(v65);
      dword_1E9F7EF04 = LODWORD(v66);
      xmmword_1E9F7EF08 = xmmword_1BB87AEC0;
      float v67 = __exp10f(-0.66);
      float v68 = __exp10f(0.15);
      dword_1E9F7EF18 = LODWORD(v67);
      dword_1E9F7EF1C = LODWORD(v68);
      xmmword_1E9F7EF20 = xmmword_1BB87AED0;
      float v69 = __exp10f(0.17);
      float v70 = __exp10f(-0.715);
      dword_1E9F7EF30 = LODWORD(v69);
      dword_1E9F7EF34 = LODWORD(v70);
      xmmword_1E9F7EF38 = xmmword_1BB87AEE0;
      float v71 = __exp10f(-0.055);
      float v72 = __exp10f(-0.055);
      dword_1E9F7EF48 = LODWORD(v71);
      dword_1E9F7EF4C = LODWORD(v72);
      xmmword_1E9F7EF50 = xmmword_1BB87AEF0;
      float v73 = __exp10f(-0.715);
      float v74 = __exp10f(0.17);
      dword_1E9F7EF60 = LODWORD(v73);
      dword_1E9F7EF64 = LODWORD(v74);
      xmmword_1E9F7EF68 = xmmword_1BB87AF00;
      dword_1E9F7EF78 = __exp10f(0.26);
      unk_1E9F7EF7C = xmmword_1BB87AF10;
      dword_1E9F7EF8C = 0;
      float v75 = __exp10f(0.13);
      float v76 = __exp10f(0.13);
      dword_1E9F7EF90 = LODWORD(v75);
      dword_1E9F7EF94 = LODWORD(v76);
      xmmword_1E9F7EF98 = xmmword_1BB87AF20;
      float v77 = __exp10f(0.26);
      dword_1E9F7EFA8 = 0;
      dword_1E9F7EFAC = LODWORD(v77);
      xmmword_1E9F7EFB0 = xmmword_1BB87AF30;
      float v78 = __exp10f(0.205);
      float v79 = __exp10f(-0.615);
      dword_1E9F7EFC0 = LODWORD(v78);
      dword_1E9F7EFC4 = LODWORD(v79);
      xmmword_1E9F7EFC8 = xmmword_1BB87AF40;
      float v80 = __exp10f(0.035);
      float v81 = __exp10f(0.035);
      dword_1E9F7EFD8 = LODWORD(v80);
      dword_1E9F7EFDC = LODWORD(v81);
      xmmword_1E9F7EFE0 = xmmword_1BB87AF50;
      float v82 = __exp10f(-0.615);
      float v83 = __exp10f(0.205);
      dword_1E9F7EFF0 = LODWORD(v82);
      dword_1E9F7EFF4 = LODWORD(v83);
      xmmword_1E9F7EFF8 = xmmword_1BB87AF60;
      float v84 = __exp10f(0.11);
      float v85 = __exp10f(-0.71);
      dword_1E9F7F008 = LODWORD(v84);
      dword_1E9F7F00C = LODWORD(v85);
      xmmword_1E9F7F010 = xmmword_1BB87AF70;
      float v86 = __exp10f(-0.065);
      float v87 = __exp10f(-0.065);
      dword_1E9F7F020 = LODWORD(v86);
      dword_1E9F7F024 = LODWORD(v87);
      xmmword_1E9F7F028 = xmmword_1BB87AF80;
      float v88 = __exp10f(-0.71);
      float v89 = __exp10f(0.11);
      dword_1E9F7F038 = LODWORD(v88);
      dword_1E9F7F03C = LODWORD(v89);
      xmmword_1E9F7F040 = xmmword_1BB87AF90;
      float v90 = __exp10f(0.205);
      float v91 = __exp10f(-0.805);
      dword_1E9F7F050 = LODWORD(v90);
      dword_1E9F7F054 = LODWORD(v91);
      xmmword_1E9F7F058 = xmmword_1BB87AFA0;
      float v92 = __exp10f(-0.05);
      float v93 = __exp10f(-0.05);
      dword_1E9F7F068 = LODWORD(v92);
      dword_1E9F7F06C = LODWORD(v93);
      xmmword_1E9F7F070 = xmmword_1BB87AFB0;
      float v94 = __exp10f(-0.805);
      float v95 = __exp10f(0.205);
      dword_1E9F7F080 = LODWORD(v94);
      dword_1E9F7F084 = LODWORD(v95);
      xmmword_1E9F7F088 = xmmword_1BB87AFC0;
      float v96 = __exp10f(0.135);
      float v97 = __exp10f(-0.67);
      dword_1E9F7F098 = LODWORD(v96);
      dword_1E9F7F09C = LODWORD(v97);
      xmmword_1E9F7F0A0 = xmmword_1BB87AFD0;
      float v98 = __exp10f(-0.025);
      float v99 = __exp10f(-0.025);
      dword_1E9F7F0B0 = LODWORD(v98);
      dword_1E9F7F0B4 = LODWORD(v99);
      xmmword_1E9F7F0B8 = xmmword_1BB87AFE0;
      float v100 = __exp10f(-0.67);
      float v101 = __exp10f(0.135);
      dword_1E9F7F0C8 = LODWORD(v100);
      dword_1E9F7F0CC = LODWORD(v101);
      xmmword_1E9F7F0D0 = xmmword_1BB87AFF0;
      float v102 = __exp10f(0.16);
      float v103 = __exp10f(-0.47);
      dword_1E9F7F0E0 = LODWORD(v102);
      dword_1E9F7F0E4 = LODWORD(v103);
      xmmword_1E9F7F0E8 = xmmword_1BB87B000;
      float v104 = __exp10f(0.0);
      float v105 = __exp10f(0.0);
      dword_1E9F7F0F8 = LODWORD(v104);
      dword_1E9F7F0FC = LODWORD(v105);
      xmmword_1E9F7F100 = xmmword_1BB87B010;
      float v106 = __exp10f(-0.47);
      float v107 = __exp10f(0.16);
      dword_1E9F7F110 = LODWORD(v106);
      dword_1E9F7F114 = LODWORD(v107);
      xmmword_1E9F7F118 = xmmword_1BB87B020;
      float v108 = __exp10f(0.27);
      float v109 = __exp10f(-0.445);
      dword_1E9F7F128 = LODWORD(v108);
      dword_1E9F7F12C = LODWORD(v109);
      xmmword_1E9F7F130 = xmmword_1BB87B030;
      float v110 = __exp10f(0.15);
      float v111 = __exp10f(0.15);
      dword_1E9F7F140 = LODWORD(v110);
      dword_1E9F7F144 = LODWORD(v111);
      xmmword_1E9F7F148 = xmmword_1BB87B040;
      float v112 = __exp10f(-0.445);
      float v113 = __exp10f(0.27);
      dword_1E9F7F158 = LODWORD(v112);
      dword_1E9F7F15C = LODWORD(v113);
      xmmword_1E9F7F160 = xmmword_1BB87B050;
      float v114 = __exp10f(0.215);
      float v115 = __exp10f(-0.365);
      dword_1E9F7F170 = LODWORD(v114);
      dword_1E9F7F174 = LODWORD(v115);
      xmmword_1E9F7F178 = xmmword_1BB87B060;
      float v116 = __exp10f(0.085);
      float v117 = __exp10f(0.085);
      dword_1E9F7F188 = LODWORD(v116);
      dword_1E9F7F18C = LODWORD(v117);
      xmmword_1E9F7F190 = xmmword_1BB87B070;
      float v118 = __exp10f(-0.365);
      float v119 = __exp10f(0.215);
      dword_1E9F7F1A0 = LODWORD(v118);
      dword_1E9F7F1A4 = LODWORD(v119);
      xmmword_1E9F7F1A8 = xmmword_1BB87B080;
      float v120 = __exp10f(0.19);
      float v121 = __exp10f(-0.415);
      dword_1E9F7F1B8 = LODWORD(v120);
      dword_1E9F7F1BC = LODWORD(v121);
      xmmword_1E9F7F1C0 = xmmword_1BB87B090;
      float v122 = __exp10f(0.025);
      float v123 = __exp10f(0.025);
      dword_1E9F7F1D0 = LODWORD(v122);
      dword_1E9F7F1D4 = LODWORD(v123);
      xmmword_1E9F7F1D8 = xmmword_1BB87B0A0;
      float v124 = __exp10f(-0.415);
      float v125 = __exp10f(0.19);
      dword_1E9F7F1E8 = LODWORD(v124);
      dword_1E9F7F1EC = LODWORD(v125);
      xmmword_1E9F7F1F0 = xmmword_1BB87B0B0;
      float v126 = __exp10f(0.29);
      float v127 = __exp10f(-0.415);
      dword_1E9F7F200 = LODWORD(v126);
      dword_1E9F7F204 = LODWORD(v127);
      xmmword_1E9F7F208 = xmmword_1BB87B0C0;
      float v128 = __exp10f(0.17);
      float v129 = __exp10f(0.17);
      dword_1E9F7F218 = LODWORD(v128);
      dword_1E9F7F21C = LODWORD(v129);
      xmmword_1E9F7F220 = xmmword_1BB87B0D0;
      float v130 = __exp10f(-0.415);
      float v131 = __exp10f(0.29);
      dword_1E9F7F230 = LODWORD(v130);
      dword_1E9F7F234 = LODWORD(v131);
      xmmword_1E9F7F238 = xmmword_1BB87B0E0;
      float v132 = __exp10f(0.235);
      float v133 = __exp10f(-0.335);
      dword_1E9F7F248 = LODWORD(v132);
      dword_1E9F7F24C = LODWORD(v133);
      xmmword_1E9F7F250 = xmmword_1BB87B0F0;
      float v134 = __exp10f(0.105);
      float v135 = __exp10f(0.105);
      dword_1E9F7F260 = LODWORD(v134);
      dword_1E9F7F264 = LODWORD(v135);
      xmmword_1E9F7F268 = xmmword_1BB87B100;
      float v136 = __exp10f(-0.335);
      float v137 = __exp10f(0.235);
      dword_1E9F7F278 = LODWORD(v136);
      dword_1E9F7F27C = LODWORD(v137);
      xmmword_1E9F7F280 = xmmword_1BB87B110;
      float v138 = __exp10f(0.18);
      float v139 = __exp10f(-0.365);
      dword_1E9F7F290 = LODWORD(v138);
      dword_1E9F7F294 = LODWORD(v139);
      xmmword_1E9F7F298 = xmmword_1BB87B120;
      float v140 = __exp10f(0.025);
      float v141 = __exp10f(0.025);
      dword_1E9F7F2A8 = LODWORD(v140);
      dword_1E9F7F2AC = LODWORD(v141);
      xmmword_1E9F7F2B0 = xmmword_1BB87B130;
      float v142 = __exp10f(-0.365);
      float v143 = __exp10f(0.18);
      dword_1E9F7F2C0 = LODWORD(v142);
      dword_1E9F7F2C4 = LODWORD(v143);
      xmmword_1E9F7F2C8 = xmmword_1BB87B140;
      float v144 = __exp10f(0.27);
      float v145 = __exp10f(-0.385);
      dword_1E9F7F2D8 = LODWORD(v144);
      dword_1E9F7F2DC = LODWORD(v145);
      xmmword_1E9F7F2E0 = xmmword_1BB87B150;
      float v146 = __exp10f(0.15);
      float v147 = __exp10f(0.15);
      dword_1E9F7F2F0 = LODWORD(v146);
      dword_1E9F7F2F4 = LODWORD(v147);
      xmmword_1E9F7F2F8 = xmmword_1BB87B160;
      float v148 = __exp10f(-0.385);
      float v149 = __exp10f(0.27);
      dword_1E9F7F308 = LODWORD(v148);
      dword_1E9F7F30C = LODWORD(v149);
      xmmword_1E9F7F310 = xmmword_1BB87B170;
      float v150 = __exp10f(0.22);
      float v151 = __exp10f(-0.305);
      dword_1E9F7F320 = LODWORD(v150);
      dword_1E9F7F324 = LODWORD(v151);
      xmmword_1E9F7F328 = xmmword_1BB87B180;
      float v152 = __exp10f(0.085);
      float v153 = __exp10f(0.085);
      dword_1E9F7F338 = LODWORD(v152);
      dword_1E9F7F33C = LODWORD(v153);
      xmmword_1E9F7F340 = xmmword_1BB87B190;
      float v154 = __exp10f(-0.305);
      float v155 = __exp10f(0.22);
      dword_1E9F7F350 = LODWORD(v154);
      dword_1E9F7F354 = LODWORD(v155);
      xmmword_1E9F7F358 = xmmword_1BB87B1A0;
      float v156 = __exp10f(0.21);
      float v157 = __exp10f(-0.07);
      dword_1E9F7F368 = LODWORD(v156);
      dword_1E9F7F36C = LODWORD(v157);
      xmmword_1E9F7F370 = xmmword_1BB87B1B0;
      float v158 = __exp10f(0.115);
      float v159 = __exp10f(0.115);
      dword_1E9F7F380 = LODWORD(v158);
      dword_1E9F7F384 = LODWORD(v159);
      xmmword_1E9F7F388 = xmmword_1BB87B1C0;
      float v160 = __exp10f(-0.07);
      float v161 = __exp10f(0.21);
      dword_1E9F7F398 = LODWORD(v160);
      dword_1E9F7F39C = LODWORD(v161);
      xmmword_1E9F7F3A0 = xmmword_1BB87B1D0;
      float v162 = __exp10f(0.235);
      float v163 = __exp10f(0.0);
      dword_1E9F7F3B0 = LODWORD(v162);
      dword_1E9F7F3B4 = LODWORD(v163);
      xmmword_1E9F7F3B8 = xmmword_1BB87B1E0;
      float v164 = __exp10f(0.15);
      float v165 = __exp10f(0.15);
      dword_1E9F7F3C8 = LODWORD(v164);
      dword_1E9F7F3CC = LODWORD(v165);
      xmmword_1E9F7F3D0 = xmmword_1BB87B1F0;
      float v166 = __exp10f(0.0);
      float v167 = __exp10f(0.235);
      dword_1E9F7F3E0 = LODWORD(v166);
      dword_1E9F7F3E4 = LODWORD(v167);
      xmmword_1E9F7F3E8 = xmmword_1BB87B200;
      float v168 = __exp10f(0.225);
      float v169 = __exp10f(-0.035);
      dword_1E9F7F3F8 = LODWORD(v168);
      dword_1E9F7F3FC = LODWORD(v169);
      xmmword_1E9F7F400 = xmmword_1BB87B210;
      float v170 = __exp10f(0.14);
      float v171 = __exp10f(0.14);
      dword_1E9F7F410 = LODWORD(v170);
      dword_1E9F7F414 = LODWORD(v171);
      xmmword_1E9F7F418 = xmmword_1BB87B220;
      float v172 = __exp10f(-0.035);
      float v173 = __exp10f(0.225);
      dword_1E9F7F428 = LODWORD(v172);
      dword_1E9F7F42C = LODWORD(v173);
      xmmword_1E9F7F430 = xmmword_1BB87B230;
      float v174 = __exp10f(0.215);
      float v175 = __exp10f(-0.065);
      dword_1E9F7F440 = LODWORD(v174);
      dword_1E9F7F444 = LODWORD(v175);
      xmmword_1E9F7F448 = xmmword_1BB87B240;
      float v176 = __exp10f(0.12);
      float v177 = __exp10f(0.12);
      dword_1E9F7F458 = LODWORD(v176);
      dword_1E9F7F45C = LODWORD(v177);
      xmmword_1E9F7F460 = xmmword_1BB87B250;
      float v178 = __exp10f(-0.065);
      float v179 = __exp10f(0.215);
      dword_1E9F7F470 = LODWORD(v178);
      dword_1E9F7F474 = LODWORD(v179);
      xmmword_1E9F7F478 = xmmword_1BB87B260;
      float v180 = __exp10f(0.24);
      float v181 = __exp10f(0.0050001);
      dword_1E9F7F488 = LODWORD(v180);
      dword_1E9F7F48C = LODWORD(v181);
      xmmword_1E9F7F490 = xmmword_1BB87B270;
      float v182 = __exp10f(0.155);
      float v183 = __exp10f(0.155);
      dword_1E9F7F4A0 = LODWORD(v182);
      dword_1E9F7F4A4 = LODWORD(v183);
      xmmword_1E9F7F4A8 = xmmword_1BB87B280;
      float v184 = __exp10f(0.0050001);
      float v185 = __exp10f(0.24);
      dword_1E9F7F4B8 = LODWORD(v184);
      dword_1E9F7F4BC = LODWORD(v185);
      xmmword_1E9F7F4C0 = xmmword_1BB87B290;
      float v186 = __exp10f(0.23);
      float v187 = __exp10f(-0.025);
      dword_1E9F7F4D0 = LODWORD(v186);
      dword_1E9F7F4D4 = LODWORD(v187);
      xmmword_1E9F7F4D8 = xmmword_1BB87B2A0;
      float v188 = __exp10f(0.145);
      float v189 = __exp10f(0.145);
      dword_1E9F7F4E8 = LODWORD(v188);
      dword_1E9F7F4EC = LODWORD(v189);
      xmmword_1E9F7F4F0 = xmmword_1BB87B2B0;
      float v190 = __exp10f(-0.025);
      float v191 = __exp10f(0.23);
      dword_1E9F7F500 = LODWORD(v190);
      dword_1E9F7F504 = LODWORD(v191);
      xmmword_1E9F7F508 = xmmword_1BB87B2C0;
      float v192 = __exp10f(0.22);
      float v193 = __exp10f(-0.055);
      dword_1E9F7F518 = LODWORD(v192);
      dword_1E9F7F51C = LODWORD(v193);
      xmmword_1E9F7F520 = xmmword_1BB87B2D0;
      float v194 = __exp10f(0.125);
      float v195 = __exp10f(0.125);
      dword_1E9F7F530 = LODWORD(v194);
      dword_1E9F7F534 = LODWORD(v195);
      xmmword_1E9F7F538 = xmmword_1BB87B2E0;
      float v196 = __exp10f(-0.055);
      float v197 = __exp10f(0.22);
      dword_1E9F7F548 = LODWORD(v196);
      dword_1E9F7F54C = LODWORD(v197);
      xmmword_1E9F7F550 = xmmword_1BB87B2F0;
      float v198 = __exp10f(0.245);
      float v199 = __exp10f(0.01);
      dword_1E9F7F560 = LODWORD(v198);
      dword_1E9F7F564 = LODWORD(v199);
      xmmword_1E9F7F568 = xmmword_1BB87B300;
      float v200 = __exp10f(0.16);
      float v201 = __exp10f(0.165);
      dword_1E9F7F578 = LODWORD(v200);
      dword_1E9F7F57C = LODWORD(v201);
      xmmword_1E9F7F580 = xmmword_1BB87B310;
      float v202 = __exp10f(0.01);
      float v203 = __exp10f(0.245);
      dword_1E9F7F590 = LODWORD(v202);
      dword_1E9F7F594 = LODWORD(v203);
      xmmword_1E9F7F598 = xmmword_1BB87B320;
      float v204 = __exp10f(0.235);
      float v205 = __exp10f(-0.02);
      dword_1E9F7F5A8 = LODWORD(v204);
      dword_1E9F7F5AC = LODWORD(v205);
      xmmword_1E9F7F5B0 = xmmword_1BB87B330;
      float v206 = __exp10f(0.15);
      float v207 = __exp10f(0.15);
      dword_1E9F7F5C0 = LODWORD(v206);
      dword_1E9F7F5C4 = LODWORD(v207);
      xmmword_1E9F7F5C8 = xmmword_1BB87B340;
      float v208 = __exp10f(-0.02);
      float v209 = __exp10f(0.235);
      dword_1E9F7F5D8 = LODWORD(v208);
      dword_1E9F7F5DC = LODWORD(v209);
      xmmword_1E9F7F5E0 = xmmword_1BB87B350;
      float v210 = __exp10f(0.165);
      float v211 = __exp10f(0.115);
      dword_1E9F7F5F0 = LODWORD(v210);
      dword_1E9F7F5F4 = LODWORD(v211);
      xmmword_1E9F7F5F8 = xmmword_1BB87B360;
      float v212 = __exp10f(0.14);
      float v213 = __exp10f(0.14);
      dword_1E9F7F608 = LODWORD(v212);
      dword_1E9F7F60C = LODWORD(v213);
      xmmword_1E9F7F610 = xmmword_1BB87B370;
      float v214 = __exp10f(0.115);
      float v215 = __exp10f(0.165);
      dword_1E9F7F620 = LODWORD(v214);
      dword_1E9F7F624 = LODWORD(v215);
      xmmword_1E9F7F628 = xmmword_1BB87B380;
      float v216 = __exp10f(0.16);
      float v217 = __exp10f(0.115);
      dword_1E9F7F638 = LODWORD(v216);
      dword_1E9F7F63C = LODWORD(v217);
      xmmword_1E9F7F640 = xmmword_1BB879DF0;
      float v218 = __exp10f(0.145);
      float v219 = __exp10f(0.145);
      dword_1E9F7F650 = LODWORD(v218);
      dword_1E9F7F654 = LODWORD(v219);
      xmmword_1E9F7F658 = xmmword_1BB873C90;
      float v220 = __exp10f(0.115);
      float v221 = __exp10f(0.165);
      dword_1E9F7F668 = LODWORD(v220);
      dword_1E9F7F66C = LODWORD(v221);
      xmmword_1E9F7F670 = xmmword_1BB87B390;
      float v222 = __exp10f(0.165);
      float v223 = __exp10f(0.12);
      dword_1E9F7F680 = LODWORD(v222);
      dword_1E9F7F684 = LODWORD(v223);
      xmmword_1E9F7F688 = xmmword_1BB87A9D0;
      float v224 = __exp10f(0.145);
      float v225 = __exp10f(0.145);
      dword_1E9F7F698 = LODWORD(v224);
      dword_1E9F7F69C = LODWORD(v225);
      xmmword_1E9F7F6A0 = xmmword_1BB876200;
      float v226 = __exp10f(0.12);
      float v227 = __exp10f(0.165);
      dword_1E9F7F6B0 = LODWORD(v226);
      dword_1E9F7F6B4 = LODWORD(v227);
      xmmword_1E9F7F6B8 = xmmword_1BB87B3A0;
      float v228 = __exp10f(0.165);
      float v229 = __exp10f(0.115);
      dword_1E9F7F6C8 = LODWORD(v228);
      dword_1E9F7F6CC = LODWORD(v229);
      xmmword_1E9F7F6D0 = xmmword_1BB87B3B0;
      float v230 = __exp10f(0.14);
      float v231 = __exp10f(0.14);
      dword_1E9F7F6E0 = LODWORD(v230);
      dword_1E9F7F6E4 = LODWORD(v231);
      xmmword_1E9F7F6E8 = xmmword_1BB87B3C0;
      float v232 = __exp10f(0.115);
      float v233 = __exp10f(0.165);
      dword_1E9F7F6F8 = LODWORD(v232);
      dword_1E9F7F6FC = LODWORD(v233);
      xmmword_1E9F7F700 = xmmword_1BB87B3D0;
      float v234 = __exp10f(0.165);
      float v235 = __exp10f(0.12);
      dword_1E9F7F710 = LODWORD(v234);
      dword_1E9F7F714 = LODWORD(v235);
      xmmword_1E9F7F718 = xmmword_1BB87B3E0;
      float v236 = __exp10f(0.145);
      float v237 = __exp10f(0.145);
      dword_1E9F7F728 = LODWORD(v236);
      dword_1E9F7F72C = LODWORD(v237);
      xmmword_1E9F7F730 = xmmword_1BB87B3F0;
      float v238 = __exp10f(0.12);
      float v239 = __exp10f(0.165);
      dword_1E9F7F740 = LODWORD(v238);
      dword_1E9F7F744 = LODWORD(v239);
      xmmword_1E9F7F748 = xmmword_1BB87B400;
      float v240 = __exp10f(0.17);
      float v241 = __exp10f(0.12);
      dword_1E9F7F758 = LODWORD(v240);
      dword_1E9F7F75C = LODWORD(v241);
      xmmword_1E9F7F760 = xmmword_1BB87B410;
      float v242 = __exp10f(0.145);
      float v243 = __exp10f(0.145);
      dword_1E9F7F770 = LODWORD(v242);
      dword_1E9F7F774 = LODWORD(v243);
      xmmword_1E9F7F778 = xmmword_1BB87B420;
      float v244 = __exp10f(0.12);
      float v245 = __exp10f(0.17);
      dword_1E9F7F788 = LODWORD(v244);
      dword_1E9F7F78C = LODWORD(v245);
      xmmword_1E9F7F790 = xmmword_1BB87B430;
      float v246 = __exp10f(0.165);
      float v247 = __exp10f(0.115);
      dword_1E9F7F7A0 = LODWORD(v246);
      dword_1E9F7F7A4 = LODWORD(v247);
      xmmword_1E9F7F7A8 = xmmword_1BB87B440;
      float v248 = __exp10f(0.14);
      float v249 = __exp10f(0.14);
      dword_1E9F7F7B8 = LODWORD(v248);
      dword_1E9F7F7BC = LODWORD(v249);
      xmmword_1E9F7F7C0 = xmmword_1BB87B450;
      float v250 = __exp10f(0.115);
      float v251 = __exp10f(0.165);
      dword_1E9F7F7D0 = LODWORD(v250);
      dword_1E9F7F7D4 = LODWORD(v251);
      xmmword_1E9F7F7D8 = xmmword_1BB87B460;
      float v252 = __exp10f(0.165);
      float v253 = __exp10f(0.12);
      dword_1E9F7F7E8 = LODWORD(v252);
      dword_1E9F7F7EC = LODWORD(v253);
      xmmword_1E9F7F7F0 = xmmword_1BB873AB0;
      float v254 = __exp10f(0.145);
      float v255 = __exp10f(0.145);
      dword_1E9F7F800 = LODWORD(v254);
      dword_1E9F7F804 = LODWORD(v255);
      xmmword_1E9F7F808 = xmmword_1BB873CC0;
      float v256 = __exp10f(0.12);
      float v257 = __exp10f(0.165);
      dword_1E9F7F818 = LODWORD(v256);
      dword_1E9F7F81C = LODWORD(v257);
      xmmword_1E9F7F820 = xmmword_1BB87B470;
      float v258 = __exp10f(0.17);
      float v259 = __exp10f(0.12);
      dword_1E9F7F830 = LODWORD(v258);
      dword_1E9F7F834 = LODWORD(v259);
      xmmword_1E9F7F838 = xmmword_1BB873CD0;
      float v260 = __exp10f(0.145);
      float v261 = __exp10f(0.145);
      dword_1E9F7F848 = LODWORD(v260);
      dword_1E9F7F84C = LODWORD(v261);
      __asm { FMOV            V0.4S, #1.0 }
      xmmword_1E9F7F850 = _Q0;
      float v263 = __exp10f(0.12);
      float v264 = __exp10f(0.17);
      dword_1E9F7F860 = LODWORD(v263);
      dword_1E9F7F864 = LODWORD(v264);
      a1 = v265;
    }
  }
  uint64_t v1 = 0;
  int v2 = 0;
  float v3 = *a1;
  float v4 = a1[1];
  BOOL v5 = *a1 > 0.25;
  BOOL v6 = *a1 <= 0.25;
  if (*a1 > 0.75) {
    BOOL v5 = 0;
  }
  float v8 = a1[2];
  float v7 = a1[3];
  float v9 = -3.4028e38;
  float v10 = 3.4028e38;
  float v11 = 3.4028e38;
  float v12 = -3.4028e38;
  float v13 = 3.4028e38;
  float v14 = -3.4028e38;
  float v15 = 3.4028e38;
  float v16 = -3.4028e38;
  do
  {
    int v17 = (float *)((char *)&BCMBypassedStereo::panWithSize(BCMBypassedStereo::PanningFunctionPoint::Coordinates const&)::kPFPs
                  + v1);
    float v18 = *(float *)((char *)&BCMBypassedStereo::panWithSize(BCMBypassedStereo::PanningFunctionPoint::Coordinates const&)::kPFPs
                   + v1);
    BOOL v19 = v6;
    if (v18 != 0.0)
    {
      BOOL v19 = v3 <= 0.5;
      if (v18 != 0.25)
      {
        BOOL v19 = v5;
        if (v18 != 0.5)
        {
          BOOL v19 = v3 > 0.5;
          if (v18 != 0.75)
          {
            BOOL v19 = v3 > 0.75;
            if (v18 != 1.0) {
              __assert_rtn("isCloseTo", "BCMBypassedStereoPanner.cpp", 35, "false");
            }
          }
        }
      }
    }
    float v20 = v17[1];
    BOOL v21 = v4 <= 0.5;
    if (v20 != 0.0)
    {
      if (v20 == 0.5)
      {
        BOOL v21 = 1;
      }
      else
      {
        BOOL v21 = v4 > 0.5;
        if (v20 != 1.0) {
          __assert_rtn("isCloseTo", "BCMBypassedStereoPanner.cpp", 40, "false");
        }
      }
    }
    float v22 = *(float *)((char *)&BCMBypassedStereo::panWithSize(BCMBypassedStereo::PanningFunctionPoint::Coordinates const&)::kPFPs
                   + v1
                   + 8);
    BOOL v23 = v8 <= 0.0;
    if (v22 != -1.0)
    {
      if (v22 == 0.0)
      {
        BOOL v23 = 1;
      }
      else
      {
        BOOL v23 = v8 > 0.0;
        if (v22 != 1.0) {
          __assert_rtn("isCloseTo", "BCMBypassedStereoPanner.cpp", 45, "false");
        }
      }
    }
    float v24 = *(float *)((char *)&BCMBypassedStereo::panWithSize(BCMBypassedStereo::PanningFunctionPoint::Coordinates const&)::kPFPs
                   + v1
                   + 12);
    BOOL v25 = v7 <= 0.0;
    if (v24 != -1.0)
    {
      if (v24 == 0.0)
      {
        BOOL v25 = 1;
      }
      else
      {
        BOOL v25 = v7 > 0.0;
        if (v24 != 1.0) {
          __assert_rtn("isCloseTo", "BCMBypassedStereoPanner.cpp", 50, "false");
        }
      }
    }
    if (v19 && v21 && v23 && v25)
    {
      v266[v2++] = v17;
      if (v18 < v10) {
        float v10 = v18;
      }
      if (v9 < v18) {
        float v9 = v18;
      }
      if (v20 < v11) {
        float v11 = v20;
      }
      if (v12 < v20) {
        float v12 = v20;
      }
      if (v22 < v13) {
        float v13 = v22;
      }
      if (v14 < v22) {
        float v14 = v22;
      }
      if (v24 < v15) {
        float v15 = v24;
      }
      if (v16 < v24) {
        float v16 = v24;
      }
    }
    v1 += 24;
  }
  while (v1 != 3240);
  if (v2 != 16) {
    __assert_rtn("panWithSize", "BCMBypassedStereoPanner.cpp", 368, "numSurroundingPoints == 16");
  }
  uint64_t v26 = 0;
  float v27 = (float)(v3 - v10) / (float)(v9 - v10);
  float v28 = (float)(v4 - v11) / (float)(v12 - v11);
  float v29 = v14 - v13;
  float v30 = (float)(v8 - v13) / v29;
  float v31 = v16 - v15;
  float v32 = (float)(v7 - v15) / v31;
  float32x2_t v33 = 0;
  do
  {
    unsigned int v34 = (float32x2_t *)v266[v26];
    float v35 = 0.5;
    float v36 = 0.5;
    if ((float)(v9 - v10) > 0.0)
    {
      if (v34->f32[0] == v10) {
        float v37 = 1.0 - v27;
      }
      else {
        float v37 = v27;
      }
      if (v37 <= 1.0) {
        float v38 = v37;
      }
      else {
        float v38 = 1.0;
      }
      if (v37 >= 0.0) {
        float v36 = v38;
      }
      else {
        float v36 = 0.0;
      }
    }
    if ((float)(v12 - v11) > 0.0)
    {
      if (v34->f32[1] == v11) {
        float v39 = 1.0 - v28;
      }
      else {
        float v39 = v28;
      }
      if (v39 <= 1.0) {
        float v40 = v39;
      }
      else {
        float v40 = 1.0;
      }
      if (v39 >= 0.0) {
        float v35 = v40;
      }
      else {
        float v35 = 0.0;
      }
    }
    float v41 = 0.5;
    float v42 = 0.5;
    if (v29 > 0.0)
    {
      if (v34[1].f32[0] == v13) {
        float v43 = 1.0 - v30;
      }
      else {
        float v43 = v30;
      }
      if (v43 <= 1.0) {
        float v44 = v43;
      }
      else {
        float v44 = 1.0;
      }
      if (v43 >= 0.0) {
        float v42 = v44;
      }
      else {
        float v42 = 0.0;
      }
    }
    if (v31 > 0.0)
    {
      if (v34[1].f32[1] == v15) {
        float v45 = 1.0 - v32;
      }
      else {
        float v45 = v32;
      }
      if (v45 <= 1.0) {
        float v46 = v45;
      }
      else {
        float v46 = 1.0;
      }
      if (v45 >= 0.0) {
        float v41 = v46;
      }
      else {
        float v41 = 0.0;
      }
    }
    float32x2_t v33 = vmla_n_f32(v33, vmul_f32(v34[2], v34[2]), (float)((float)(v36 * v35) * v42) * v41);
    ++v26;
  }
  while (v26 != 16);
  return vsqrt_f32(v33);
}

int *VADLCG::AddToBuffer(int *this, float *a2, unsigned int a3, float a4)
{
  unsigned int v4 = this[2];
  if (v4)
  {
    if (!a3) {
      return this;
    }
    int v5 = *this;
    int v6 = this[1];
    unsigned int v7 = this[3];
    uint64_t v8 = a3;
    do
    {
      unsigned int v7 = (v6 + v7 * v5) % v4;
      *a2 = (float)((float)((float)(2.0 / (float)v4) * (float)v7) + -1.0) + *a2;
      ++a2;
      --v8;
    }
    while (v8);
  }
  else
  {
    if (!a3) {
      return this;
    }
    int v9 = *this;
    int v10 = this[1];
    uint64_t v11 = a3;
    unsigned int v7 = this[3];
    do
    {
      unsigned int v7 = v10 + v7 * v9;
      *a2 = (float)((float)((float)v7 * 4.6566e-10) + -1.0) + *a2;
      ++a2;
      --v11;
    }
    while (v11);
  }
  this[3] = v7;
  return this;
}

os_log_t ___Z12getAUSMV2Logv_block_invoke()
{
  os_log_t result = os_log_create("com.apple.coreaudio", "AUSpatialMixerV2");
  getAUSMV2Log(void)::gLog = (uint64_t)result;
  return result;
}

void AmbisonicsStereo::Process(AmbisonicsStereo *this, float *a2, float **a3, int a4, int a5, float a6, float a7, float a8)
{
  uint64_t v13 = (uint64_t)*a3;
  if (a5 == 1) {
    float v14 = a3[1];
  }
  else {
    float v14 = (float *)(v13 + 4);
  }
  float v15 = a6 * 3.14159265 / 180.0;
  if (vabds_f32(*((float *)this + 4), v15) > 1.57079633) {
    *((float *)this + 4) = v15;
  }
  float v16 = sinf(v15);
  float v17 = *((float *)this + 5);
  float v18 = *((float *)this + 6);
  if (a4)
  {
    uint64_t v19 = 0;
    float v20 = v16 * 0.5;
    do
    {
      float v21 = *a2++;
      *(float *)(v13 + v19 * 4) = *(float *)(v13 + v19 * 4) + (float)((float)(0.70711 - v17) * (float)(v18 * v21));
      v14[v19] = (float)((float)(v17 + 0.70711) * (float)(v18 * v21)) + v14[v19];
      float v17 = v17 + (float)((float)(v20 - v17) * 0.002);
      float v18 = v18 + (float)((float)(a8 - v18) * 0.002);
      v19 += a5;
      --a4;
    }
    while (a4);
  }
  *((float *)this + 5) = v17;
  *((float *)this + 6) = v18;
}

void AmbisonicsStereo::~AmbisonicsStereo(AmbisonicsStereo *this)
{
}

void AmbisonicsQuad::Process(float32x2_t *this, float *a2, float **a3, int a4, int a5, float32x2_t a6, float32_t a7, float a8)
{
  uint64_t v13 = *a3;
  if (a5 == 1)
  {
    float v14 = a3[1];
    float v15 = a3[2];
    float v16 = a3[3];
  }
  else
  {
    float v14 = v13 + 1;
    float v15 = v13 + 2;
    float v16 = v13 + 3;
  }
  a6.f32[1] = a7;
  float32x2_t v17 = vcvt_f32_f64(vdivq_f64(vmulq_f64(vcvtq_f64_f32(a6), (float64x2_t)vdupq_n_s64(0x400921FB54442D18uLL)), (float64x2_t)vdupq_n_s64(0x4066800000000000uLL)));
  int v18 = this[5].u8[4];
  float32x2_t v19 = vabd_f32(this[2], v17);
  int32x2_t v20 = vcgt_f32((float32x2_t)vdup_n_s32(0x3C8EFA35u), v19);
  int v21 = (this[5].i8[4] == 0) & v20.i8[0] & v20.i8[4];
  if (v21 == 1) {
    this[2] = v17;
  }
  if (v19.f32[0] > 1.57079633) {
    this[2].i32[0] = v17.i32[0];
  }
  float32x2_t v63 = v17;
  this[5].i8[4] = 0;
  float v22 = this[3].f32[0];
  float v23 = this[3].f32[1];
  float v24 = this[4].f32[0];
  float v25 = this[4].f32[1];
  float v26 = this[5].f32[0];
  float32x2_t v27 = this[1];
  if (v27)
  {
    (*(void (**)(double *__return_ptr))(**(void **)&v27 + 392))(v65);
    float v28 = v65[0];
    double v29 = v28;
    if (v21) {
      goto LABEL_10;
    }
  }
  else
  {
    double v29 = 44100.0;
    if (v21)
    {
LABEL_10:
      if (a4)
      {
        uint64_t v30 = 0;
        do
        {
          float v31 = *a2++;
          float v32 = v22 * v31;
          v13[v30] = v13[v30] + (float)(v23 * (float)(v22 * v31));
          v14[v30] = v14[v30] + (float)(v24 * (float)(v22 * v31));
          v15[v30] = v15[v30] + (float)(v25 * (float)(v22 * v31));
          float v22 = v22 + (float)((float)(a8 - v22) * 0.002);
          v16[v30] = v16[v30] + (float)(v26 * v32);
          v30 += a5;
          --a4;
        }
        while (a4);
      }
      goto LABEL_30;
    }
  }
  if (v18)
  {
    if (a4)
    {
      uint64_t v33 = 0;
      uint64_t v34 = 4 * a5;
      float32x2_t v62 = (float32x2_t)vdup_n_s32(0x3B03126Fu);
      do
      {
        --a4;
        float v35 = *a2++;
        float v36 = v22 * v35;
        float v22 = v22 + (float)((float)(a8 - v22) * 0.002);
        float32x2_t v37 = vmla_f32(this[2], v62, vsub_f32(v63, this[2]));
        float v64 = v37.f32[1];
        this[2] = v37;
        __float2 v38 = __sincosf_stret(v37.f32[0]);
        float v39 = cosf(v64);
        float v40 = v38.__cosval * v39;
        float v41 = -(float)(v38.__sinval * v39);
        float v42 = (float)(v40 * 0.35355) + 0.5;
        float v23 = v42 + (float)(v41 * 0.35355);
        float v24 = v42 + (float)(v41 * -0.35355);
        float v43 = (float)(v40 * -0.35355) + 0.5;
        *(float *)((char *)v13 + v33) = *(float *)((char *)v13 + v33) + (float)(v23 * v36);
        *(float *)((char *)v14 + v33) = *(float *)((char *)v14 + v33) + (float)(v24 * v36);
        float v25 = v43 + (float)(v41 * 0.35355);
        float v26 = v43 + (float)(v41 * -0.35355);
        *(float *)((char *)v15 + v33) = *(float *)((char *)v15 + v33) + (float)(v25 * v36);
        *(float *)((char *)v16 + v33) = *(float *)((char *)v16 + v33) + (float)(v26 * v36);
        v33 += v34;
      }
      while (a4);
    }
  }
  else
  {
    double v44 = 1.0 / v29;
    __float2 v45 = __sincosf_stret(v63.f32[0]);
    float v46 = cosf(v63.f32[1]);
    double v47 = (double)a4 * 157.079633 * v44;
    float v48 = this[2].f32[0];
    double v49 = v48;
    double v50 = (float)(v48 - v63.f32[0]);
    if (v47 <= v50) {
      double v50 = (double)a4 * 157.079633 * v44;
    }
    double v51 = v49 - v50;
    if (v47 > (float)(v63.f32[0] - v48)) {
      double v47 = (float)(v63.f32[0] - v48);
    }
    double v52 = v47 + v49;
    if (v48 >= v63.f32[0]) {
      double v52 = v51;
    }
    float32_t v53 = v52;
    this[2].f32[0] = v53;
    if (a4)
    {
      uint64_t v54 = 0;
      float v55 = -(float)(v45.__sinval * v46);
      float v56 = (float)((float)(v45.__cosval * v46) * 0.35355) + 0.5;
      float v57 = (float)((float)(v45.__cosval * v46) * -0.35355) + 0.5;
      float v58 = v57 + (float)(v55 * 0.35355);
      float v59 = v57 + (float)(v55 * -0.35355);
      do
      {
        float v60 = *a2++;
        float v61 = v22 * v60;
        float v22 = v22 + (float)((float)(a8 - v22) * 0.002);
        float v23 = v23 + (float)((float)((float)(v56 + (float)(v55 * 0.35355)) - v23) * 0.002);
        float v24 = v24 + (float)((float)((float)(v56 + (float)(v55 * -0.35355)) - v24) * 0.002);
        v13[v54] = v13[v54] + (float)(v23 * v61);
        float v25 = v25 + (float)((float)(v58 - v25) * 0.002);
        v14[v54] = v14[v54] + (float)(v24 * v61);
        v15[v54] = v15[v54] + (float)(v25 * v61);
        float v26 = v26 + (float)((float)(v59 - v26) * 0.002);
        v16[v54] = v16[v54] + (float)(v26 * v61);
        v54 += a5;
        --a4;
      }
      while (a4);
    }
  }
  this[3].f32[1] = v23;
  this[4].f32[0] = v24;
  this[4].f32[1] = v25;
  this[5].f32[0] = v26;
LABEL_30:
  this[3].f32[0] = v22;
}

void AmbisonicsQuad::~AmbisonicsQuad(AmbisonicsQuad *this)
{
}

void Ambisonics5_1::Process(float32x2_t *this, float *a2, float **a3, int a4, int a5, float32x2_t a6, float32_t a7, float a8)
{
  float v12 = *a3;
  if (a5 == 1)
  {
    uint64_t v13 = a3[1];
    float v14 = a3[2];
    float v15 = a3[3];
    float v16 = a3[4];
  }
  else
  {
    uint64_t v13 = v12 + 1;
    float v14 = v12 + 2;
    float v15 = v12 + 3;
    float v16 = v12 + 4;
  }
  a6.f32[1] = a7;
  float32x2_t v17 = vcvt_f32_f64(vdivq_f64(vmulq_f64(vcvtq_f64_f32(a6), (float64x2_t)vdupq_n_s64(0x400921FB54442D18uLL)), (float64x2_t)vdupq_n_s64(0x4066800000000000uLL)));
  int v18 = this[6].u8[0];
  float32x2_t v19 = vabd_f32(this[2], v17);
  int32x2_t v20 = vcgt_f32((float32x2_t)vdup_n_s32(0x3C8EFA35u), v19);
  int v21 = (this[6].i8[0] == 0) & v20.i8[0] & v20.i8[4];
  if (v21 == 1) {
    this[2] = v17;
  }
  if (v19.f32[0] > 1.57079633) {
    this[2].i32[0] = v17.i32[0];
  }
  float32x2_t v70 = v17;
  this[6].i8[0] = 0;
  float v22 = this[3].f32[0];
  float v23 = this[3].f32[1];
  float v24 = this[4].f32[0];
  float v25 = this[4].f32[1];
  float v27 = this[5].f32[0];
  float v26 = this[5].f32[1];
  float32x2_t v28 = this[1];
  if (v28)
  {
    int v71 = v21;
    int v29 = a5;
    (*(void (**)(double *__return_ptr))(**(void **)&v28 + 392))(v73);
    a5 = v29;
    float v30 = v73[0];
    double v31 = v30;
    if (v71) {
      goto LABEL_10;
    }
  }
  else
  {
    double v31 = 44100.0;
    if (v21)
    {
LABEL_10:
      if (a4)
      {
        uint64_t v32 = 0;
        do
        {
          float v33 = *a2++;
          float v34 = v22 * v33;
          v12[v32] = v12[v32] + (float)(v23 * (float)(v22 * v33));
          v16[v32] = v16[v32] + (float)(v24 * (float)(v22 * v33));
          v13[v32] = v13[v32] + (float)(v25 * (float)(v22 * v33));
          v14[v32] = v14[v32] + (float)(v27 * (float)(v22 * v33));
          float v22 = v22 + (float)((float)(a8 - v22) * 0.002);
          v15[v32] = v15[v32] + (float)(v26 * v34);
          v32 += a5;
          --a4;
        }
        while (a4);
      }
      goto LABEL_30;
    }
  }
  if (v18)
  {
    if (a4)
    {
      uint64_t v35 = 0;
      uint64_t v36 = 4 * a5;
      float32x2_t v69 = (float32x2_t)vdup_n_s32(0x3C23D70Au);
      do
      {
        float v37 = *a2++;
        --a4;
        float32x2_t v38 = vmla_f32(this[2], v69, vsub_f32(v70, this[2]));
        float v72 = v38.f32[1];
        this[2] = v38;
        __float2 v39 = __sincosf_stret(v38.f32[0]);
        float v40 = cosf(v72);
        float v41 = v39.__cosval * v40;
        float v42 = -(float)(v39.__sinval * v40);
        float v43 = (float)(v41 * 0.35355) + 0.5;
        float v23 = v43 + (float)(v42 * 0.35355);
        float v24 = (float)((float)(v41 * 0.5) + 0.5) * 0.2;
        float v25 = v43 + (float)(v42 * -0.35355);
        *(float *)((char *)v12 + v35) = *(float *)((char *)v12 + v35) + (float)(v23 * (float)(v22 * v37));
        float v44 = (float)(v41 * -0.35355) + 0.5;
        *(float *)((char *)v16 + v35) = *(float *)((char *)v16 + v35) + (float)(v24 * (float)(v22 * v37));
        *(float *)((char *)v13 + v35) = *(float *)((char *)v13 + v35) + (float)(v25 * (float)(v22 * v37));
        float v27 = v44 + (float)(v42 * 0.35355);
        float v26 = v44 + (float)(v42 * -0.35355);
        *(float *)((char *)v14 + v35) = *(float *)((char *)v14 + v35) + (float)(v27 * (float)(v22 * v37));
        *(float *)((char *)v15 + v35) = *(float *)((char *)v15 + v35) + (float)(v26 * (float)(v22 * v37));
        v35 += v36;
      }
      while (a4);
    }
  }
  else
  {
    int v45 = a5;
    double v46 = 1.0 / v31;
    __float2 v47 = __sincosf_stret(v70.f32[0]);
    float v48 = cosf(v70.f32[1]);
    double v49 = (double)a4 * 157.079633 * v46;
    float v50 = this[2].f32[0];
    double v51 = v50;
    double v52 = (float)(v50 - v70.f32[0]);
    if (v49 <= v52) {
      double v52 = (double)a4 * 157.079633 * v46;
    }
    double v53 = v51 - v52;
    if (v49 > (float)(v70.f32[0] - v50)) {
      double v49 = (float)(v70.f32[0] - v50);
    }
    double v54 = v49 + v51;
    if (v50 >= v70.f32[0]) {
      double v54 = v53;
    }
    float32_t v55 = v54;
    this[2].f32[0] = v55;
    if (a4)
    {
      uint64_t v56 = 0;
      float v57 = v47.__cosval * v48;
      float v58 = -(float)(v47.__sinval * v48);
      float v59 = (float)((float)(v47.__cosval * v48) * 0.35355) + 0.5;
      float v60 = v59 + (float)(v58 * 0.35355);
      float v61 = (float)(v57 * 0.5) + 0.5;
      float v62 = (float)(v57 * -0.35355) + 0.5;
      float v63 = v59 + (float)(v58 * -0.35355);
      float v64 = v62 + (float)(v58 * 0.35355);
      float v65 = v62 + (float)(v58 * -0.35355);
      float v66 = v61 * 0.2;
      do
      {
        float v67 = *a2++;
        float v68 = v22 * v67;
        float v22 = v22 + (float)((float)(a8 - v22) * 0.002);
        float v23 = v23 + (float)((float)(v60 - v23) * 0.01);
        float v24 = v24 + (float)((float)(v66 - v24) * 0.01);
        float v25 = v25 + (float)((float)(v63 - v25) * 0.01);
        v12[v56] = v12[v56] + (float)(v23 * v68);
        v16[v56] = v16[v56] + (float)(v24 * v68);
        float v27 = v27 + (float)((float)(v64 - v27) * 0.01);
        v13[v56] = v13[v56] + (float)(v25 * v68);
        v14[v56] = v14[v56] + (float)(v27 * v68);
        float v26 = v26 + (float)((float)(v65 - v26) * 0.01);
        v15[v56] = v15[v56] + (float)(v26 * v68);
        v56 += v45;
        --a4;
      }
      while (a4);
    }
  }
  this[3].f32[1] = v23;
  this[4].f32[0] = v24;
  this[4].f32[1] = v25;
  this[5].f32[0] = v27;
  this[5].f32[1] = v26;
LABEL_30:
  this[3].f32[0] = v22;
}

void Ambisonics5_1::~Ambisonics5_1(Ambisonics5_1 *this)
{
}

uint64_t AmbisonicsGeneral::Reset(uint64_t this)
{
  *(unsigned char *)(this + 152) = 1;
  return this;
}

void AmbisonicsGeneral::Process(AmbisonicsGeneral *this, float *a2, float **a3, unsigned int a4, float a5, float a6, float a7)
{
  uint64_t v12 = *((void *)this + 20);
  uint64_t v13 = *(unsigned int *)(v12 + 8);
  float v14 = a5 * 3.14159265 / 180.0;
  if (*((unsigned char *)this + 152))
  {
    *((unsigned char *)this + 152) = 0;
LABEL_3:
    __float2 v15 = __sincosf_stret(v14);
    if ((int)v13 >= 1)
    {
      uint64_t v16 = 0;
      uint64_t v17 = v12 + 12;
      do
      {
        __double2 v18 = __sincos_stret(*(float *)(v17 + 20 * v16 + 8) * 0.0174532925);
        float32x2_t v19 = (float *)((char *)this + 4 * v16);
        float v21 = v19[5];
        int32x2_t v20 = v19 + 5;
        float v22 = v21;
        if (a4)
        {
          float v23 = v18.__cosval * 0.5;
          float v24 = v18.__sinval * 0.5;
          float v25 = (float)((float)((float)((float)((float)(v23 * v15.__cosval) + 0.5) + (float)(v24 * v15.__sinval)) * a7)
                      - v22)
              / (float)a4;
          float v26 = a3[v16];
          unsigned int v27 = a4;
          float32x2_t v28 = a2;
          do
          {
            float v29 = *v28++;
            float v22 = v25 + v22;
            float *v26 = *v26 + (float)(v22 * v29);
            ++v26;
            --v27;
          }
          while (v27);
        }
        float *v20 = v22;
        ++v16;
      }
      while (v16 != v13);
    }
    *((float *)this + 4) = v14;
    goto LABEL_10;
  }
  float v30 = *((float *)this + 4);
  float v31 = *((float *)this + 37);
  *((unsigned char *)this + 152) = 0;
  if (v31 != a7 || vabds_f32(v30, v14) >= 0.017453) {
    goto LABEL_3;
  }
  if ((int)v13 >= 1)
  {
    for (uint64_t i = 0; i != v13; ++i)
    {
      if (a4)
      {
        float v33 = *((float *)this + i + 5);
        float v34 = a3[i];
        uint64_t v35 = a2;
        unsigned int v36 = a4;
        do
        {
          float v37 = *v35++;
          *float v34 = *v34 + (float)(v33 * v37);
          ++v34;
          --v36;
        }
        while (v36);
      }
    }
  }
LABEL_10:
  *((float *)this + 37) = a7;
}

void AmbisonicsGeneral::~AmbisonicsGeneral(AmbisonicsGeneral *this)
{
}

uint64_t AmbisonicsGeneral3D::Reset(uint64_t this)
{
  *(unsigned char *)(this + 156) = 1;
  return this;
}

void AmbisonicsGeneral3D::Process(AmbisonicsGeneral3D *this, float *a2, float **a3, unsigned int a4, float a5, float a6, float a7)
{
  uint64_t v11 = *((void *)this + 20);
  uint64_t v12 = *(unsigned int *)(v11 + 8);
  float v13 = a5 * 3.14159265 / 180.0;
  float v14 = a6 * 3.14159265 / 180.0;
  if (*((unsigned char *)this + 156))
  {
    *((unsigned char *)this + 156) = 0;
LABEL_3:
    float v45 = a7;
    float v44 = v13;
    __float2 v15 = __sincosf_stret(v13);
    __float2 v16 = __sincosf_stret(v14);
    if ((int)v12 >= 1)
    {
      uint64_t v17 = 0;
      uint64_t v18 = v11 + 12;
      do
      {
        uint64_t v19 = v18 + 20 * v17;
        double v20 = *(float *)(v19 + 12) * 0.0174532925;
        __double2 v21 = __sincos_stret(*(float *)(v19 + 8) * 0.0174532925);
        __double2 v22 = __sincos_stret(v20);
        float v23 = (float *)((char *)this + 4 * v17);
        float v25 = v23[6];
        float v24 = v23 + 6;
        float v26 = v25;
        if (a4)
        {
          float v27 = v21.__cosval * 0.5 * v22.__cosval;
          float v28 = v21.__sinval * 0.5 * v22.__cosval;
          float v29 = v22.__sinval * 0.5;
          float v30 = (float)((float)((float)((float)((float)((float)(v27 * (float)(v15.__cosval * v16.__cosval)) + 0.5)
                                              + (float)(v28 * (float)(v15.__sinval * v16.__cosval)))
                                      + (float)(v29 * v16.__sinval))
                              * v45)
                      - v26)
              / (float)a4;
          float v31 = a3[v17];
          unsigned int v32 = a4;
          float v33 = a2;
          do
          {
            float v34 = *v33++;
            float v26 = v30 + v26;
            *float v31 = *v31 + (float)(v26 * v34);
            ++v31;
            --v32;
          }
          while (v32);
        }
        *float v24 = v26;
        ++v17;
      }
      while (v17 != v12);
    }
    *((float *)this + 4) = v44;
    a7 = v45;
    goto LABEL_10;
  }
  float v35 = *((float *)this + 4);
  float v36 = *((float *)this + 5);
  float v37 = *((float *)this + 38);
  *((unsigned char *)this + 156) = 0;
  if (v37 != a7 || vabds_f32(v35, v13) >= 0.017453 || vabds_f32(v36, v14) >= 0.017453) {
    goto LABEL_3;
  }
  if ((int)v12 >= 1)
  {
    for (uint64_t i = 0; i != v12; ++i)
    {
      if (a4)
      {
        float v39 = *((float *)this + i + 6);
        float v40 = a3[i];
        float v41 = a2;
        unsigned int v42 = a4;
        do
        {
          float v43 = *v41++;
          *float v40 = *v40 + (float)(v39 * v43);
          ++v40;
          --v42;
        }
        while (v42);
      }
    }
  }
LABEL_10:
  *((float *)this + 38) = a7;
}

void AmbisonicsGeneral3D::~AmbisonicsGeneral3D(AmbisonicsGeneral3D *this)
{
}

void ___Z28AUSpatialProbabilityLogScopev_block_invoke()
{
}

uint64_t SpatialProbabilityBase::SpatialProbabilityBase(uint64_t a1, unsigned int a2, int a3, int a4, int a5, float a6, float a7, float a8, float a9, float a10, float a11)
{
  *(void *)a1 = &unk_1F14C7860;
  *(_DWORD *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 16) = xmmword_1BB87A440;
  *(_OWORD *)(a1 + 32) = xmmword_1BB87A440;
  *(_DWORD *)(a1 + 48) = a3;
  *(float *)(a1 + 52) = a6;
  *(float *)(a1 + 56) = a7;
  int v31 = 0;
  std::vector<float>::vector((void *)(a1 + 64), a2, &v31);
  *(_DWORD *)(a1 + 88) = a5;
  unint64_t v18 = *(unsigned int *)(a1 + 8);
  int v31 = 1065353216;
  std::vector<float>::vector((void *)(a1 + 96), v18, &v31);
  unint64_t v19 = *(unsigned int *)(a1 + 8);
  int v31 = 0;
  std::vector<float>::vector((void *)(a1 + 120), v19, &v31);
  unint64_t v20 = *(unsigned int *)(a1 + 8);
  int v31 = 0;
  std::vector<float>::vector((void *)(a1 + 144), v20, &v31);
  unint64_t v21 = *(unsigned int *)(a1 + 8);
  int v31 = 1065353216;
  std::vector<float>::vector((void *)(a1 + 168), v21, &v31);
  unint64_t v22 = *(unsigned int *)(a1 + 8);
  int v31 = 0;
  std::vector<float>::vector((void *)(a1 + 192), v22, &v31);
  unint64_t v23 = *(unsigned int *)(a1 + 8);
  int v31 = 0;
  std::vector<float>::vector((void *)(a1 + 216), v23, &v31);
  unint64_t v24 = *(unsigned int *)(a1 + 8);
  int v31 = 0;
  std::vector<float>::vector((void *)(a1 + 240), v24, &v31);
  *(_DWORD *)(a1 + 264) = a4;
  *(_DWORD *)(a1 + 268) = 0;
  *(void *)(a1 + 272) = 0;
  unint64_t v25 = *(unsigned int *)(a1 + 8);
  int v31 = 0;
  std::vector<float>::vector((void *)(a1 + 280), v25, &v31);
  unint64_t v26 = *(unsigned int *)(a1 + 8);
  int v31 = 0;
  std::vector<float>::vector((void *)(a1 + 304), v26, &v31);
  unint64_t v27 = *(unsigned int *)(a1 + 8);
  int v31 = 0;
  std::vector<float>::vector((void *)(a1 + 328), v27, &v31);
  *(void *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 360) = 0;
  unint64_t v28 = *(unsigned int *)(a1 + 8);
  int v31 = 0;
  std::vector<float>::vector((void *)(a1 + 368), v28, &v31);
  *(_OWORD *)(a1 + 392) = xmmword_1BB873C90;
  *(_DWORD *)(a1 + 408) = 1092616192;
  unint64_t v29 = *(unsigned int *)(a1 + 8);
  int v31 = 0;
  std::vector<float>::vector((void *)(a1 + 416), v29, &v31);
  SpatialProbabilityBase::SetPriorProbabilities((SpatialProbabilityBase *)a1, a8, a9);
  *(float *)(a1 + 392) = a10;
  *(float *)(a1 + 396) = a11;
  return a1;
}

void sub_1BB4CA588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void **a10, void **a11, void **a12, void **a13)
{
  unint64_t v23 = *v17;
  if (*v17)
  {
    v13[53] = v23;
    operator delete(v23);
  }
  unint64_t v24 = *v16;
  if (*v16)
  {
    v13[47] = v24;
    operator delete(v24);
  }
  unint64_t v25 = *v15;
  if (*v15)
  {
    v13[42] = v25;
    operator delete(v25);
  }
  unint64_t v26 = *v14;
  if (*v14)
  {
    v13[39] = v26;
    operator delete(v26);
  }
  unint64_t v27 = *v21;
  if (*v21)
  {
    v13[36] = v27;
    operator delete(v27);
  }
  unint64_t v28 = *v22;
  if (*v22)
  {
    v13[31] = v28;
    operator delete(v28);
  }
  unint64_t v29 = *v20;
  if (*v20)
  {
    v13[28] = v29;
    operator delete(v29);
  }
  float v30 = *v19;
  if (*v19)
  {
    v13[25] = v30;
    operator delete(v30);
  }
  int v31 = *v18;
  if (*v18)
  {
    v13[22] = v31;
    operator delete(v31);
  }
  unsigned int v32 = *a10;
  if (*a10)
  {
    v13[19] = v32;
    operator delete(v32);
  }
  float v33 = *a11;
  if (*a11)
  {
    v13[16] = v33;
    operator delete(v33);
  }
  float v34 = *a12;
  if (*a12)
  {
    v13[13] = v34;
    operator delete(v34);
  }
  float v35 = *a13;
  if (*a13)
  {
    v13[9] = v35;
    operator delete(v35);
  }
  _Unwind_Resume(a1);
}

void sub_1BB4CA6B4()
{
}

void sub_1BB4CA6BC()
{
}

void sub_1BB4CA6C4()
{
}

void sub_1BB4CA6CC()
{
}

void SpatialProbabilityBase::SetPriorProbabilities(SpatialProbabilityBase *this, float a2, float a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2 < 0.0 || a2 > 1.0)
  {
    if (AUSpatialProbabilityLogScope(void)::once != -1) {
      dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
    }
    if (AUSpatialProbabilityLogScope(void)::scope)
    {
      int v5 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
      if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
        return;
      }
    }
    else
    {
      int v5 = MEMORY[0x1E4F14500];
    }
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    int v9 = 136315650;
    int v10 = "SpatialProbabilityBase.cpp";
    __int16 v11 = 1024;
    int v12 = 326;
    __int16 v13 = 2048;
    double v14 = a2;
    uint64_t v8 = "%25s:%-5d SpatialProbabilityBase: Prior probabilities not set. Source prior (%f) should be in range [0, 1].\n";
LABEL_26:
    _os_log_impl(&dword_1BB0CE000, v5, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&v9, 0x1Cu);
    return;
  }
  if (a3 >= 0.0 && a3 <= 1.0)
  {
    *((float *)this + 67) = a2 * a3;
    *((float *)this + 68) = (float)(1.0 - a3) * a2;
    *((float *)this + 69) = 1.0 - a2;
    return;
  }
  if (AUSpatialProbabilityLogScope(void)::once != -1) {
    dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
  }
  if (!AUSpatialProbabilityLogScope(void)::scope)
  {
    int v5 = MEMORY[0x1E4F14500];
    goto LABEL_24;
  }
  int v5 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
  if (*(void *)AUSpatialProbabilityLogScope(void)::scope)
  {
LABEL_24:
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    int v9 = 136315650;
    int v10 = "SpatialProbabilityBase.cpp";
    __int16 v11 = 1024;
    int v12 = 330;
    __int16 v13 = 2048;
    double v14 = a3;
    uint64_t v8 = "%25s:%-5d SpatialProbabilityBase: Prior probabilities not set. Conditional target prior (%f) should be in range [0, 1].\n";
    goto LABEL_26;
  }
}

void SpatialProbabilityBase::UpdateShapeParameter(SpatialProbabilityBase *this)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  switch(*((_DWORD *)this + 12))
  {
    case 0:
      if (*((void *)this + 2) != *((void *)this + 3))
      {
        (**(void (***)(SpatialProbabilityBase *, float))this)(this, *((float *)this + 13));
        goto LABEL_41;
      }
      break;
    case 1:
      if (*((void *)this + 2) != *((void *)this + 3) || *((void *)this + 4) != *((void *)this + 5))
      {
        int v2 = (const float *)((char *)this + 56);
        float __B = *((float *)this + 13) - *((float *)this + 14);
        if (__B >= 0.0)
        {
          uint64_t v8 = (const float *)*((void *)this + 35);
          unsigned int v7 = (float **)((char *)this + 64);
          __int16 v11 = (float *)*((void *)this + 8);
          vDSP_Length v9 = *((unsigned int *)this + 2);
          p_B = &__B;
          goto LABEL_31;
        }
        if (AUSpatialProbabilityLogScope(void)::once != -1) {
          dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
        }
        if (AUSpatialProbabilityLogScope(void)::scope)
        {
          float v3 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
          if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
            return;
          }
        }
        else
        {
          float v3 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315394;
          float v34 = "SpatialProbabilityBase.cpp";
          __int16 v35 = 1024;
          int v36 = 122;
          unint64_t v28 = "%25s:%-5d Input kappaMin must be lower than kappaMax. Skipping updating model with Prior weighted freque"
                "ncy dependent shape parameter.\n";
          goto LABEL_51;
        }
      }
      break;
    case 2:
      if (*((void *)this + 2) != *((void *)this + 3) || *((void *)this + 4) != *((void *)this + 5))
      {
        float __B = *((float *)this + 98) / 10.0;
        float __A = __exp10f(__B * *((float *)this + 99));
        vDSP_Length v4 = *((unsigned int *)this + 2);
        int v30 = *((_DWORD *)this + 2);
        int v2 = (const float *)((char *)this + 52);
        float v29 = *((float *)this + 14) - *((float *)this + 13);
        if (v29 <= 0.0)
        {
          vDSP_vsmul(*((const float **)this + 46), 1, &__B, *((float **)this + 52), 1, v4);
          unsigned int v7 = (float **)((char *)this + 64);
          vDSP_vfill((const float *)this + 102, *((float **)this + 8), 1, *((unsigned int *)this + 2));
          vvpowf(*v7, *((const float **)this + 52), *v7, &v30);
          vDSP_vsadd(*v7, 1, &__A, *v7, 1, *((unsigned int *)this + 2));
          vDSP_svdiv(&__A, *v7, 1, *v7, 1, *((unsigned int *)this + 2));
          uint64_t v8 = (const float *)*((void *)this + 8);
          vDSP_Length v9 = *((unsigned int *)this + 2);
          p_B = &v29;
          __int16 v11 = (float *)v8;
LABEL_31:
          vDSP_vsmul(v8, 1, p_B, v11, 1, v9);
          vDSP_vsadd(*v7, 1, v2, *v7, 1, *((unsigned int *)this + 2));
          (*(void (**)(SpatialProbabilityBase *, float **))(*(void *)this + 8))(this, v7);
          goto LABEL_32;
        }
        if (AUSpatialProbabilityLogScope(void)::once != -1) {
          dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
        }
        if (AUSpatialProbabilityLogScope(void)::scope)
        {
          float v3 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
          if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
            return;
          }
        }
        else
        {
          float v3 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315394;
          float v34 = "SpatialProbabilityBase.cpp";
          __int16 v35 = 1024;
          int v36 = 167;
          unint64_t v28 = "%25s:%-5d Input kappaMin must be lower than kappaMax. Skipping updating model with CDR-based frequency d"
                "ependent shape parameter.\n";
          goto LABEL_51;
        }
      }
      break;
    case 3:
      if (*((void *)this + 2) == *((void *)this + 3)) {
        return;
      }
      unsigned int v5 = *((_DWORD *)this + 2);
      unsigned int v6 = *((_DWORD *)this + 22);
      if (v5 >= v6)
      {
        float v12 = *((float *)this + 13);
        float v13 = *((float *)this + 14);
        vDSP_vfill((const float *)this + 13, *((float **)this + 8), 1, *((unsigned int *)this + 22));
        uint64_t v16 = *((unsigned int *)this + 22);
        uint64_t v17 = *((unsigned int *)this + 2);
        if (v16 < v17)
        {
          unint64_t v18 = 0;
          *(float *)v14.i32 = (float)-(float)(v12 - v13) / (float)(v5 - v6);
          uint64_t v19 = v17 - v16;
          uint64x2_t v20 = (uint64x2_t)vdupq_n_s64(v19 - 1);
          *(float *)v15.i32 = v12 - (float)((float)v6 * *(float *)v14.i32);
          unint64_t v21 = (v19 + 1) & 0xFFFFFFFFFFFFFFFELL;
          float32x2_t v22 = (float32x2_t)vdup_lane_s32(v14, 0);
          float32x2_t v23 = (float32x2_t)vdup_lane_s32(v15, 0);
          unint64_t v24 = (_DWORD *)(*((void *)this + 8) + 4 * v16 + 4);
          do
          {
            int32x2_t v25 = vmovn_s64((int64x2_t)vcgeq_u64(v20, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v18), (int8x16_t)xmmword_1BB872720)));
            v26.i32[0] = v16 + v18;
            v26.i32[1] = v16 + v18 + 1;
            float32x2_t v27 = vmla_f32(v23, v22, vcvt_f32_u32(v26));
            if (v25.i8[0]) {
              *(v24 - 1) = v27.i32[0];
            }
            if (v25.i8[4]) {
              *unint64_t v24 = v27.i32[1];
            }
            v18 += 2;
            v24 += 2;
          }
          while (v21 != v18);
        }
        (*(void (**)(SpatialProbabilityBase *, char *))(*(void *)this + 8))(this, (char *)this + 64);
LABEL_41:
        *((void *)this + 3) = *((void *)this + 2);
      }
      else
      {
        if (AUSpatialProbabilityLogScope(void)::once != -1) {
          dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
        }
        if (AUSpatialProbabilityLogScope(void)::scope)
        {
          float v3 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
          if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
            return;
          }
        }
        else
        {
          float v3 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315394;
          float v34 = "SpatialProbabilityBase.cpp";
          __int16 v35 = 1024;
          int v36 = 197;
          unint64_t v28 = "%25s:%-5d Maximum frequency for frequency dependent shape decay must be lower than maximumfrequency. Usi"
                "ng fixed shape parameter instead of frequency depedent one.\n";
LABEL_51:
          _os_log_impl(&dword_1BB0CE000, v3, OS_LOG_TYPE_ERROR, v28, buf, 0x12u);
        }
      }
      break;
    case 4:
      if (*((void *)this + 2) != *((void *)this + 3))
      {
        vDSP_vclip(*((const float **)this + 8), 1, (const float *)this + 14, (const float *)this + 13, *((float **)this + 8), 1, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 2);
        (*(void (**)(SpatialProbabilityBase *, char *))(*(void *)this + 8))(this, (char *)this + 64);
LABEL_32:
        *((void *)this + 3) = *((void *)this + 2);
        *((void *)this + 5) = *((void *)this + 4);
      }
      break;
    default:
      return;
  }
}

float SpatialProbabilityBase::UpdatePosteriorProbabilities(SpatialProbabilityBase *this)
{
  vDSP_vmul(*((const float **)this + 12), 1, *((const float **)this + 21), 1, *((float **)this + 21), 1, *((unsigned int *)this + 2));
  vDSP_vmul(*((const float **)this + 15), 1, *((const float **)this + 24), 1, *((float **)this + 24), 1, *((unsigned int *)this + 2));
  vDSP_vmul(*((const float **)this + 18), 1, *((const float **)this + 27), 1, *((float **)this + 27), 1, *((unsigned int *)this + 2));
  vDSP_vadd(*((const float **)this + 21), 1, *((const float **)this + 24), 1, *((float **)this + 30), 1, *((unsigned int *)this + 2));
  vDSP_vadd(*((const float **)this + 30), 1, *((const float **)this + 27), 1, *((float **)this + 30), 1, *((unsigned int *)this + 2));
  vDSP_vdiv(*((const float **)this + 30), 1, *((const float **)this + 21), 1, *((float **)this + 38), 1, *((unsigned int *)this + 2));
  vDSP_vdiv(*((const float **)this + 30), 1, *((const float **)this + 24), 1, *((float **)this + 41), 1, *((unsigned int *)this + 2));
  vDSP_meanv(*((const float **)this + 38), 1, (float *)this + 88, *((unsigned int *)this + 2));
  vDSP_meanv(*((const float **)this + 41), 1, (float *)this + 89, *((unsigned int *)this + 2));
  float result = 1.0 - (float)(*((float *)this + 88) + *((float *)this + 89));
  *((float *)this + 90) = result;
  return result;
}

void SpatialProbabilityBase::UpdatePriorProbabilities(SpatialProbabilityBase *this)
{
  int v2 = *((_DWORD *)this + 66);
  if (v2 == 1)
  {
    vDSP_vsmul(*((const float **)this + 35), 1, (const float *)this + 67, *((float **)this + 21), 1, *((unsigned int *)this + 2));
    vDSP_vsmul(*((const float **)this + 35), 1, (const float *)this + 68, *((float **)this + 24), 1, *((unsigned int *)this + 2));
    vDSP_vadd(*((const float **)this + 21), 1, *((const float **)this + 24), 1, *((float **)this + 27), 1, *((unsigned int *)this + 2));
    vDSP_vneg(*((const float **)this + 27), 1, *((float **)this + 27), 1, *((unsigned int *)this + 2));
    unsigned int v5 = (float *)*((void *)this + 27);
    vDSP_Length v6 = *((unsigned int *)this + 2);
    vDSP_vsadd(v5, 1, (const float *)this + 101, v5, 1, v6);
  }
  else if (!v2)
  {
    vDSP_vfill((const float *)this + 67, *((float **)this + 21), 1, *((unsigned int *)this + 2));
    vDSP_vfill((const float *)this + 68, *((float **)this + 24), 1, *((unsigned int *)this + 2));
    float v3 = (float *)*((void *)this + 27);
    vDSP_Length v4 = *((unsigned int *)this + 2);
    vDSP_vfill((const float *)this + 69, v3, 1, v4);
  }
}

void ChannelSelectorBox::initialize(ChannelSelectorBox *this)
{
  DSPGraph::Box::initialize(this);
  uint64_t v2 = *((void *)this + 11);
  if (*((void *)this + 12) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v7, "out");
    unsigned int v5 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      unsigned int v5 = (void *)*v5;
    }
    DSPGraph::strprintf(v6, (DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v4, v5, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
    DSPGraph::ThrowException();
    __break(1u);
  }
  else
  {
    std::vector<int>::size_type v3 = *(unsigned int *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2) + 120) + 28);
    std::vector<int>::resize((std::vector<int> *)((char *)this + 776), v3);
  }
}

void sub_1BB4CB1F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (*(char *)(v23 - 17) < 0) {
    operator delete(*(void **)(v23 - 40));
  }
  _Unwind_Resume(exception_object);
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz)
{
  std::vector<int>::size_type v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2) {
      this->__end_ = &this->__begin_[__sz];
    }
  }
  else
  {
    std::vector<int>::__append(this, __sz - v2);
  }
}

void std::vector<int>::__append(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::vector<unsigned int>::pointer end = this->__end_;
  value = this->__end_cap_.__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(this->__end_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    std::vector<int>::pointer begin = this->__begin_;
    uint64_t v7 = (char *)end - (char *)this->__begin_;
    unint64_t v8 = __n + (v7 >> 2);
    if (v8 >> 62) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v7 >> 2;
    uint64_t v10 = (char *)value - (char *)begin;
    if (v10 >> 1 > v8) {
      unint64_t v8 = v10 >> 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v8;
    }
    if (v11)
    {
      unint64_t v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v11);
      std::vector<int>::pointer begin = this->__begin_;
      std::vector<unsigned int>::pointer end = this->__end_;
    }
    else
    {
      uint64_t v12 = 0;
    }
    float v13 = (char *)(v11 + 4 * v9);
    int32x2_t v14 = (int *)(v11 + 4 * v12);
    bzero(v13, 4 * __n);
    int32x2_t v15 = (int *)&v13[4 * __n];
    while (end != begin)
    {
      int v16 = *--end;
      *((_DWORD *)v13 - 1) = v16;
      v13 -= 4;
    }
    this->__begin_ = (std::vector<int>::pointer)v13;
    this->__end_ = v15;
    this->__end_cap_.__value_ = v14;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

uint64_t ChannelSelectorBox::process(ChannelSelectorBox *this, int a2)
{
  vDSP_Length v4 = (char *)this + 64;
  uint64_t v3 = *((void *)this + 8);
  if (*((void *)v4 + 1) == v3)
  {
    std::string::basic_string[abi:ne180100]<0>(v36, "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v35, "in");
    int v30 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      int v30 = (void *)*v30;
    }
    goto LABEL_40;
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 40))(v3);
  uint64_t v7 = *((void *)this + 11);
  if (*((void *)this + 12) == v7)
  {
    std::string::basic_string[abi:ne180100]<0>(v36, "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v35, "out");
    unsigned int v32 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      unsigned int v32 = (void *)*v32;
    }
    goto LABEL_34;
  }
  unint64_t v8 = *(_DWORD **)(*(void *)(v6 + 56) + 80);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 40))(v7);
  uint64_t v10 = *((void *)this + 11);
  if (*((void *)this + 12) == v10)
  {
    std::string::basic_string[abi:ne180100]<0>(v36, "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v35, "out");
    unsigned int v32 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      unsigned int v32 = (void *)*v32;
    }
    goto LABEL_34;
  }
  unint64_t v11 = *(unsigned int **)(*(void *)(v9 + 56) + 80);
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10);
  uint64_t v13 = *((void *)this + 11);
  if (*((void *)this + 12) == v13)
  {
    std::string::basic_string[abi:ne180100]<0>(v36, "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v35, "out");
    unsigned int v32 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      unsigned int v32 = (void *)*v32;
    }
LABEL_34:
    DSPGraph::strprintf(v34, (DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v31, v32, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
    float32x2_t v27 = (ChannelSelectorBox *)DSPGraph::ThrowException();
LABEL_41:
    __break(1u);
    return MEMORY[0x1F410BA88](v27, v28, v26);
  }
  size_t v14 = (*(_DWORD *)(*(void *)(v12 + 120) + 24) * a2);
  if (*(_DWORD *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v13 + 40))(v13) + 56) + 100) < v14) {
    __assert_rtn("process", "ChannelSelectorBox.cpp", 19, "out(0).wire()->buffer()->byteCapacity() >= size");
  }
  unint64_t v15 = *v11;
  uint64_t v16 = *((void *)this + 97);
  if ((*((void *)this + 98) - v16) >> 2 < v15) {
    unint64_t v15 = (*((void *)this + 98) - v16) >> 2;
  }
  if (v15)
  {
    unint64_t v17 = 0;
    unint64_t v18 = (void **)(v11 + 4);
    do
    {
      uint64_t v19 = *(int *)(v16 + 4 * v17);
      if (*v8 <= (int)v19) {
        __assert_rtn("process", "ChannelSelectorBox.cpp", 23, "static_cast<int>(inABL->mNumberBuffers) > channelSelection");
      }
      uint64x2_t v20 = (const void **)&v8[4 * v19];
      if (*((_DWORD *)v20 + 3) < v14) {
        __assert_rtn("process", "ChannelSelectorBox.cpp", 24, "inABL->mBuffers[channelSelection].mDataByteSize >= size");
      }
      memcpy(*v18, v20[2], v14);
      *((_DWORD *)v18 - 1) = v14;
      ++v17;
      unint64_t v21 = *v11;
      uint64_t v16 = *((void *)this + 97);
      if ((*((void *)this + 98) - v16) >> 2 < v21) {
        unint64_t v21 = (*((void *)this + 98) - v16) >> 2;
      }
      v18 += 2;
    }
    while (v17 < v21);
  }
  uint64_t v22 = *((void *)this + 8);
  if (*((void *)this + 9) == v22)
  {
    std::string::basic_string[abi:ne180100]<0>(v36, "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v35, "in");
    int v30 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      int v30 = (void *)*v30;
    }
    goto LABEL_40;
  }
  uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 40))(v22);
  uint64_t v24 = *((void *)this + 8);
  if (*((void *)this + 9) == v24)
  {
    std::string::basic_string[abi:ne180100]<0>(v36, "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v35, "in");
    int v30 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      int v30 = (void *)*v30;
    }
LABEL_40:
    DSPGraph::strprintf(v34, (DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v29, v30, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
    float32x2_t v27 = (ChannelSelectorBox *)DSPGraph::ThrowException();
    goto LABEL_41;
  }
  uint64_t v25 = *(unsigned int *)(*(void *)(v23 + 56) + 72);
  uint64_t v26 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v24 + 40))(v24) + 56) + 8;
  float32x2_t v27 = this;
  uint64_t v28 = v25;

  return MEMORY[0x1F410BA88](v27, v28, v26);
}

void sub_1BB4CB8E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ChannelSelectorBox::setProperty(ChannelSelectorBox *this, unsigned int a2, unsigned int a3, unsigned int a4, int a5, _DWORD *a6)
{
  if (a5 != 4) {
    return 4294956445;
  }
  uint64_t v6 = *((void *)this + 97);
  if (a2 >= (unint64_t)((*((void *)this + 98) - v6) >> 2)) {
    return 4294956445;
  }
  uint64_t result = 0;
  *(_DWORD *)(v6 + 4 * a2) = *a6;
  return result;
}

uint64_t ChannelSelectorBox::getProperty(ChannelSelectorBox *this, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int *a5, _DWORD *a6)
{
  uint64_t v6 = *((void *)this + 97);
  if (a2 >= (unint64_t)((*((void *)this + 98) - v6) >> 2)) {
    return 4294956445;
  }
  uint64_t result = 0;
  *a6 = *(_DWORD *)(v6 + 4 * a2);
  *a5 = 4;
  return result;
}

uint64_t ChannelSelectorBox::getPropertyInfo(ChannelSelectorBox *this, unsigned int a2)
{
  if ((uint64_t)(*((void *)this + 98) - *((void *)this + 97)) >> 2 <= (unint64_t)a2) {
    return 0x1FFFFD59DLL;
  }
  else {
    return 0x100000004;
  }
}

double ChannelSelectorBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result = 1.17120757e171;
  *(_OWORD *)a1 = xmmword_1BB87A8C0;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

const char *ChannelSelectorBox::ClassName(ChannelSelectorBox *this)
{
  return "ChannelSelectorBox";
}

void ChannelSelectorBox::~ChannelSelectorBox(ChannelSelectorBox *this)
{
  *(void *)this = &unk_1F14B9D60;
  std::vector<int>::size_type v2 = (void *)*((void *)this + 97);
  if (v2)
  {
    *((void *)this + 98) = v2;
    operator delete(v2);
  }
  DSPGraph::Box::~Box(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F14B9D60;
  std::vector<int>::size_type v2 = (void *)*((void *)this + 97);
  if (v2)
  {
    *((void *)this + 98) = v2;
    operator delete(v2);
  }

  DSPGraph::Box::~Box(this);
}

BOOL AUDebugFeature::IsNonFiniteHandlingEnabled(AUDebugFeature *this)
{
  uint64_t v1 = (char *)&xmmword_1E9F7EFF8 + 8;
  {
    uint64_t v1 = (unsigned char *)(&xmmword_1E9F7EFF8 + 8);
    if (v3)
    {
      AUDebugFeature::IsNonFiniteHandlingEnabled(void)::envCFNumberRef Value = (uint64_t)getenv("AU_Disable_NonFinite_Handling");
      uint64_t v1 = (unsigned char *)(&xmmword_1E9F7EFF8 + 8);
    }
  }
  return *((void *)v1 + 274) == 0;
}

void FreqDomainConvolver::~FreqDomainConvolver(FreqDomainConvolver *this)
{
  std::vector<int>::size_type v2 = (void *)*((void *)this + 17);
  if (v2)
  {
    *((void *)this + 18) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 14);
  if (v3)
  {
    *((void *)this + 15) = v3;
    operator delete(v3);
  }
  CDSPSplitComplex::~CDSPSplitComplex((FreqDomainConvolver *)((char *)this + 80));
  CDSPSplitComplex::~CDSPSplitComplex((FreqDomainConvolver *)((char *)this + 48));
  CDSPSplitComplex::~CDSPSplitComplex((FreqDomainConvolver *)((char *)this + 16));
  vDSP_Length v4 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void std::vector<unsigned char>::__append(unint64_t *a1, size_t a2)
{
  unsigned int v5 = (char *)a1[1];
  vDSP_Length v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    unint64_t v6 = *a1;
    uint64_t v7 = &v5[-*a1];
    unint64_t v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      unint64_t v11 = (unint64_t)operator new(v10);
    }
    else {
      unint64_t v11 = 0;
    }
    uint64_t v12 = &v7[v11];
    uint64_t v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      unint64_t v11 = (unint64_t)v12;
    }
    else
    {
      size_t v14 = &v5[~v6];
      do
      {
        char v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      unsigned int v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void std::vector<std::vector<DSPSplitComplex>>::resize(uint64_t a1, unint64_t a2)
{
  int v3 = *(void **)a1;
  vDSP_Length v4 = *(void **)(a1 + 8);
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v4 - *(void *)a1) >> 3);
  unint64_t v6 = a2 - v5;
  if (a2 > v5)
  {
    uint64_t v7 = *(void *)(a1 + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v4) >> 3) >= v6)
    {
      size_t v28 = 24 * ((24 * v6 - 24) / 0x18) + 24;
      bzero(*(void **)(a1 + 8), v28);
      *(void *)(a1 + 8) = (char *)v4 + v28;
      return;
    }
    if (a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v3) >> 3);
    uint64_t v9 = 2 * v8;
    if (2 * v8 <= a2) {
      uint64_t v9 = a2;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v9;
    }
    unint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AUPropertyItem>>(v10);
    uint64_t v12 = &v11[24 * v5];
    size_t v14 = &v11[24 * v13];
    size_t v15 = 24 * ((24 * v6 - 24) / 0x18) + 24;
    bzero(v12, v15);
    uint64_t v16 = &v12[v15];
    unint64_t v18 = *(void **)a1;
    unint64_t v17 = *(void **)(a1 + 8);
    if (v17 == *(void **)a1)
    {
      *(void *)a1 = v12;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v14;
      if (!v17) {
        return;
      }
    }
    else
    {
      do
      {
        *((void *)v12 - 3) = 0;
        *((void *)v12 - 2) = 0;
        v12 -= 24;
        *((void *)v12 + 2) = 0;
        long long v19 = *(_OWORD *)(v17 - 3);
        v17 -= 3;
        *(_OWORD *)uint64_t v12 = v19;
        *((void *)v12 + 2) = v17[2];
        void *v17 = 0;
        v17[1] = 0;
        v17[2] = 0;
      }
      while (v17 != v18);
      uint64x2_t v20 = *(void **)a1;
      unint64_t v17 = *(void **)(a1 + 8);
      *(void *)a1 = v12;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v14;
      if (v17 != v20)
      {
        unint64_t v21 = v17;
        do
        {
          uint64_t v23 = (void *)*(v21 - 3);
          v21 -= 3;
          uint64_t v22 = v23;
          if (v23)
          {
            *(v17 - 2) = v22;
            operator delete(v22);
          }
          unint64_t v17 = v21;
        }
        while (v21 != v20);
        unint64_t v17 = v20;
      }
      if (!v17) {
        return;
      }
    }
    operator delete(v17);
    return;
  }
  if (a2 < v5)
  {
    uint64_t v24 = &v3[3 * a2];
    if (v4 != v24)
    {
      uint64_t v25 = *(void **)(a1 + 8);
      do
      {
        float32x2_t v27 = (void *)*(v25 - 3);
        v25 -= 3;
        uint64_t v26 = v27;
        if (v27)
        {
          *(v4 - 2) = v26;
          operator delete(v26);
        }
        vDSP_Length v4 = v25;
      }
      while (v25 != v24);
    }
    *(void *)(a1 + 8) = v24;
  }
}

void SmartFIR::Reset(void **this)
{
  bzero(this[36], (unsigned char *)this[37] - (unsigned char *)this[36]);
  bzero(this[39], (unsigned char *)this[40] - (unsigned char *)this[39]);
  bzero(this[42], (unsigned char *)this[43] - (unsigned char *)this[42]);
  bzero(this[45], (unsigned char *)this[46] - (unsigned char *)this[45]);
  if (this[2])
  {
    uint64_t v2 = 0;
    unsigned int v3 = 1;
    do
    {
      FreqDomainConvolver::Reset((FreqDomainConvolver *)((char *)this[4] + 168 * v2));
      uint64_t v4 = (uint64_t)this[19] + 24 * v2;
      unint64_t v5 = *(void **)v4;
      uint64_t v6 = *(void *)(v4 + 8) - *(void *)v4;
      if (v6 >= 1) {
        bzero(v5, 4 * (((unint64_t)v6 >> 2) - ((unint64_t)v6 > 3)) + 4);
      }
      uint64_t v7 = (uint64_t)this[22] + 24 * v2;
      unint64_t v8 = *(void **)v7;
      uint64_t v9 = *(void *)(v7 + 8) - *(void *)v7;
      if (v9 >= 1) {
        bzero(v8, 4 * (((unint64_t)v9 >> 2) - ((unint64_t)v9 > 3)) + 4);
      }
      uint64_t v2 = v3;
    }
    while ((unint64_t)this[2] > v3++);
  }
  *((_DWORD *)this + 15) = 0;
  this[3] = *this;
  *((_DWORD *)this + 58) = -1;
}

void SmartFIR::SmartFIR(SmartFIR *this, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v100 = *MEMORY[0x1E4F143B8];
  *(void *)this = a3;
  *((void *)this + 1) = a2;
  *((void *)this + 2) = a4;
  *((void *)this + 3) = 0;
  FreqDomainConvolver::FreqDomainConvolver((FreqDomainConvolver *)buf, a3);
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  float __B = (char *)this + 32;
  char v99 = 0;
  if (a4)
  {
    if (a4 >= 0x186186186186187) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (FreqDomainConvolver *)std::__allocate_at_least[abi:ne180100]<std::allocator<FreqDomainConvolver>>(a4);
    *((void *)this + 4) = v6;
    *((void *)this + 5) = v6;
    *((void *)this + 6) = (char *)v6 + 168 * v7;
    uint64_t v8 = 168 * a4;
    uint64_t v9 = (char *)v6 + 168 * a4;
    do
    {
      FreqDomainConvolver::FreqDomainConvolver(v6, (const FreqDomainConvolver *)buf);
      uint64_t v6 = (FreqDomainConvolver *)((char *)v6 + 168);
      v8 -= 168;
    }
    while (v8);
    *((void *)this + 5) = v9;
  }
  if (v96)
  {
    float v97 = v96;
    operator delete(v96);
  }
  if (__p)
  {
    float v95 = __p;
    operator delete(__p);
  }
  if (v92)
  {
    if (v93 != v92) {
      v93 += ((unsigned char *)v92 - v93 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    }
    operator delete(v92);
    float v92 = 0;
    float v93 = 0;
  }
  if (v90)
  {
    if (v91 != v90) {
      v91 += ((unsigned char *)v90 - v91 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    }
    operator delete(v90);
    float v90 = 0;
    float v91 = 0;
  }
  if (*(void *)&v88[2])
  {
    if (v89 != *(void *)&v88[2]) {
      v89 += (*(void *)&v88[2] - v89 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    }
    operator delete(*(void **)&v88[2]);
    *(void *)&v88[2] = 0;
    uint64_t v89 = 0;
  }
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  *((_OWORD *)this + 4) = 0u;
  unint64_t v10 = (_DWORD **)((char *)this + 64);
  *((_OWORD *)this + 5) = 0u;
  *((_DWORD *)this + 14) = 0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  unint64_t v11 = *(void *)this;
  LODWORD(__B) = 0;
  std::vector<float>::vector(buf, v11, &__B);
  std::vector<std::vector<float>>::vector((void *)this + 22, a4, (uint64_t)buf);
  if (*(void *)buf)
  {
    *(void *)&uint8_t buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *((_DWORD *)this + 58) = -1;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 18) = 0u;
  float v82 = (unint64_t *)((char *)this + 264);
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((void *)this + 50) = 0;
  uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)*((unsigned int *)this + 2));
  v12.i16[0] = vaddlv_u8(v12);
  BOOL v13 = v12.i32[0] > 1u;
  if (v12.i32[0] >= 2u)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)&__B, v13);
      *(_DWORD *)AudioTimeStamp buf = 136315906;
      *(void *)&uint8_t buf[4] = "SmartFIR.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 54;
      __int16 v85 = 2080;
      p_B = &__B;
      __int16 v87 = 2080;
      *(void *)float v88 = "Filter length must be power of 2";
      _os_log_impl(&dword_1BB0CE000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exceptiounsigned int n = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "Filter length must be power of 2", v13);
  }
  uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned int *)this);
  v14.i16[0] = vaddlv_u8(v14);
  BOOL v15 = v14.i32[0] > 1u;
  if (v14.i32[0] >= 2u)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)&__B, v15);
      *(_DWORD *)AudioTimeStamp buf = 136315906;
      *(void *)&uint8_t buf[4] = "SmartFIR.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 55;
      __int16 v85 = 2080;
      p_B = &__B;
      __int16 v87 = 2080;
      *(void *)float v88 = "Block size must be power of 2";
      _os_log_impl(&dword_1BB0CE000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    float v78 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v78, "Block size must be power of 2", v15);
  }
  unsigned int v16 = MultiRadixRealFFT::Initialize((SmartFIR *)((char *)this + 64), 2 * *(_DWORD *)this);
  if (v16)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)&__B, v16);
      *(_DWORD *)AudioTimeStamp buf = 136315906;
      *(void *)&uint8_t buf[4] = "SmartFIR.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 56;
      __int16 v85 = 2080;
      p_B = &__B;
      __int16 v87 = 2080;
      *(void *)float v88 = "FFT initialization failed";
      _os_log_impl(&dword_1BB0CE000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    float v79 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v79, "FFT initialization failed", v16);
  }
  unint64_t v17 = *(void *)this;
  unint64_t v18 = *((void *)this + 1);
  if (*(void *)this <= v18) {
    uint64_t v19 = v18 / v17;
  }
  else {
    uint64_t v19 = 1;
  }
  *((_DWORD *)this + 14) = v19;
  *((_DWORD *)this + 15) = 0;
  uint64x2_t v20 = (_WORD *)*((void *)this + 48);
  unint64_t v21 = *((void *)this + 49) - (void)v20;
  if (v21 > 9)
  {
    if (v21 != 10) {
      *((void *)this + 49) = v20 + 5;
    }
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this + 48, 10 - v21);
    uint64x2_t v20 = (_WORD *)*((void *)this + 48);
    unint64_t v17 = *(void *)this;
  }
  *((void *)this + 51) = v20;
  uint64_t v20[3] = v17;
  void v20[2] = v19;
  v20[4] = v17 >> 2;
  std::vector<std::vector<DSPSplitComplex>>::resize((uint64_t)this + 104, *((void *)this + 2));
  std::vector<std::vector<DSPSplitComplex>>::resize((uint64_t)this + 128, *((void *)this + 2));
  std::vector<std::vector<float>>::resize((uint64_t *)this + 19, *((void *)this + 2));
  std::vector<std::span<float,18446744073709551615ul>>::resize((char **)this + 10, *((void *)this + 2));
  uint64_t v22 = *(void *)this * *((void *)this + 2);
  unint64_t v23 = 4 * v19 * v22;
  uint64_t v24 = *((void *)this + 30);
  unint64_t v25 = *((void *)this + 31) - v24;
  if (v23 <= v25)
  {
    if (v23 < v25) {
      *((void *)this + 31) = v24 + v23;
    }
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this + 30, v23 - v25);
  }
  uint64_t v26 = *((void *)this + 33);
  unint64_t v27 = *((void *)this + 34) - v26;
  if (v23 <= v27)
  {
    if (v23 < v27) {
      *((void *)this + 34) = v26 + v23;
    }
  }
  else
  {
    std::vector<unsigned char>::__append(v82, v23 - v27);
  }
  uint64_t v28 = *((void *)this + 36);
  unint64_t v29 = *((void *)this + 37) - v28;
  if (v23 <= v29)
  {
    if (v23 < v29) {
      *((void *)this + 37) = v28 + v23;
    }
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this + 36, v23 - v29);
  }
  uint64_t v30 = *((void *)this + 39);
  unint64_t v31 = *((void *)this + 40) - v30;
  if (v23 <= v31)
  {
    if (v23 < v31) {
      *((void *)this + 40) = v30 + v23;
    }
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this + 39, v23 - v31);
  }
  unint64_t v32 = 4 * v22;
  uint64_t v33 = *((void *)this + 42);
  unint64_t v34 = *((void *)this + 43) - v33;
  if (4 * v22 <= v34)
  {
    if (4 * v22 < v34) {
      *((void *)this + 43) = v33 + v32;
    }
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this + 42, 4 * v22 - v34);
  }
  uint64_t v35 = *((void *)this + 45);
  unint64_t v36 = *((void *)this + 46) - v35;
  if (v32 <= v36)
  {
    if (v32 < v36) {
      *((void *)this + 46) = v35 + v32;
    }
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this + 45, v32 - v36);
  }
  unint64_t v38 = *(void *)this;
  unint64_t v37 = *((void *)this + 1);
  if (*(void *)this <= v37) {
    unint64_t v39 = v37 / v38;
  }
  else {
    unint64_t v39 = 1;
  }
  *((void *)this + 51) = *((void *)this + 48);
  if (v38 <= v37) {
    unint64_t v40 = v37;
  }
  else {
    unint64_t v40 = v38;
  }
  int v83 = 0;
  std::vector<float>::vector(buf, v40, &v83);
  float v41 = *(void **)buf;
  if (*(void *)&buf[8] == *(void *)buf) {
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  }
  **(_DWORD **)AudioTimeStamp buf = 1065353216;
  if (!*((void *)this + 2)) {
    goto LABEL_91;
  }
  unint64_t v42 = 0;
  unsigned int v43 = 0;
  int v44 = 0;
  do
  {
    uint64_t v45 = *((void *)this + 13);
    if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 14) - v45) >> 3) <= v42
      || (std::vector<std::span<float,18446744073709551615ul>>::resize((char **)(v45 + 24 * v42), v39),
          uint64_t v46 = *((void *)this + 16),
          0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 17) - v46) >> 3) <= v42))
    {
      std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
    }
    std::vector<std::span<float,18446744073709551615ul>>::resize((char **)(v46 + 24 * v42), v39);
    uint64_t v47 = *((void *)this + 19);
    if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 20) - v47) >> 3) <= v42) {
      std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
    }
    std::vector<float>::resize(v47 + 24 * v42, *(void *)this);
    uint64_t v48 = *((void *)this + 10);
    if (v42 >= (*((void *)this + 11) - v48) >> 4) {
      std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
    }
    int v80 = v44;
    unsigned int v81 = v43;
    unint64_t v49 = *(void *)this;
    float v50 = (void *)(v48 + 16 * v42);
    unint64_t v51 = *(void *)this * v42;
    void *v50 = *((void *)this + 42) + 4 * v51;
    v50[1] = *((void *)this + 45) + 4 * v51;
    if (v39)
    {
      unint64_t v52 = 0;
      LODWORD(v53) = 0;
      unsigned int v54 = 1;
      uint64_t v55 = v43;
      do
      {
        uint64_t v56 = *((void *)this + 16);
        if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 17) - v56) >> 3) <= v42) {
          goto LABEL_94;
        }
        float v58 = (uint64_t *)(v56 + 24 * v42);
        uint64_t v57 = *v58;
        if (v52 >= (v58[1] - *v58) >> 4) {
          goto LABEL_95;
        }
        unint64_t v59 = v53;
        float v60 = (void *)(v57 + 16 * v52);
        *float v60 = *((void *)this + 36) + 4 * v55 + 4 * v53;
        v60[1] = *((void *)this + 39) + 4 * v55 + 4 * v53;
        uint64_t v61 = *((void *)this + 13);
        if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 14) - v61) >> 3) <= v42) {
LABEL_94:
        }
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        float v63 = (uint64_t *)(v61 + 24 * v42);
        uint64_t v62 = *v63;
        if (v52 >= (v63[1] - *v63) >> 4) {
LABEL_95:
        }
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        float v64 = (DSPSplitComplex *)(v62 + 16 * v52);
        v64->realp = (float *)(*((void *)this + 30) + 4 * v55 + 4 * v59);
        v64->imagp = (float *)(*v82 + 4 * v55 + 4 * v59);
        if (v59 >= (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 2) {
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        }
        vDSP_ctoz((const DSPComplex *)(*(void *)buf + 4 * v59), 2, v64, 1, v49 >> 1);
        LODWORD(__B) = 0;
        float v65 = *v10;
        if (*v10) {
          LODWORD(v65) = *v65;
        }
        *(float *)&float __B = 1.0 / (float)v65;
        uint64_t v66 = *((void *)this + 13);
        if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 14) - v66) >> 3) <= v42) {
          goto LABEL_93;
        }
        float v68 = (uint64_t *)(v66 + 24 * v42);
        uint64_t v67 = *v68;
        if (v52 >= (v68[1] - *v68) >> 4) {
          goto LABEL_96;
        }
        vDSP_vsmul(*(const float **)(v67 + 16 * v52), 1, (const float *)&__B, *(float **)(v67 + 16 * v52), 1, *(void *)this);
        uint64_t v69 = *((void *)this + 13);
        if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 14) - v69) >> 3) <= v42) {
LABEL_93:
        }
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        int v71 = (uint64_t *)(v69 + 24 * v42);
        uint64_t v70 = *v71;
        if (v52 >= (v71[1] - *v71) >> 4) {
LABEL_96:
        }
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        vDSP_vsmul(*(const float **)(v70 + 16 * v52 + 8), 1, (const float *)&__B, *(float **)(v70 + 16 * v52 + 8), 1, *(void *)this);
        uint64_t v73 = *((void *)this + 13);
        if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 14) - v73) >> 3) <= v42) {
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        }
        float v75 = (uint64_t *)(v73 + 24 * v42);
        uint64_t v74 = *v75;
        if (v52 >= (v75[1] - *v75) >> 4) {
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        }
        MultiRadixRealFFT::RealInPlaceTransform((SmartFIR *)((char *)this + 64), (DSPSplitComplex *)(v74 + 16 * v52), 1, v72);
        unint64_t v49 = *(void *)this;
        unint64_t v53 = *(void *)this + v59;
        unint64_t v52 = v54;
      }
      while (v39 > v54++);
    }
    unsigned int v43 = v81 + v49 * v39;
    unint64_t v42 = (v80 + 1);
    int v44 = v80 + 1;
  }
  while (*((void *)this + 2) > v42);
  float v41 = *(void **)buf;
  if (*(void *)buf)
  {
LABEL_91:
    *(void *)&uint8_t buf[8] = v41;
    operator delete(v41);
    unint64_t v49 = *(void *)this;
  }
  CDSPSplitComplex::resize((SmartFIR *)((char *)this + 200), v49);
  SmartFIR::Reset((void **)this);
}

void sub_1BB4CCB4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, void **a16, void **a17, void **a18, void **a19, void **a20,CDSPSplitComplex *a21,uint64_t a22,void **a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,void *a39,uint64_t a40)
{
  int v44 = *a20;
  if (*a20)
  {
    v40[49] = v44;
    operator delete(v44);
  }
  uint64_t v45 = *a15;
  if (*a15)
  {
    v40[46] = v45;
    operator delete(v45);
  }
  uint64_t v46 = *a16;
  if (*a16)
  {
    v40[43] = v46;
    operator delete(v46);
  }
  uint64_t v47 = *a17;
  if (*a17)
  {
    v40[40] = v47;
    operator delete(v47);
  }
  uint64_t v48 = *a18;
  if (*a18)
  {
    v40[37] = v48;
    operator delete(v48);
  }
  unint64_t v49 = *a23;
  if (*a23)
  {
    v40[34] = v49;
    operator delete(v49);
  }
  float v50 = *a19;
  if (*a19)
  {
    v40[31] = v50;
    operator delete(v50);
  }
  CDSPSplitComplex::~CDSPSplitComplex(a21);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 136));
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 136));
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 136));
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 136));
  unint64_t v51 = *v41;
  if (*v41)
  {
    v40[11] = v51;
    operator delete(v51);
  }
  unint64_t v52 = (std::__shared_weak_count *)v40[9];
  if (v52) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v52);
  }
  std::vector<FreqDomainConvolver>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 136));
  _Unwind_Resume(a1);
}

void SmartFIR::Initialize(SmartFIR *this, const float *const *a2)
{
  unint64_t v4 = *((void *)this + 1);
  if (v4 >= *(void *)this) {
    unint64_t v4 = *(void *)this;
  }
  unint64_t v14 = v4;
  bzero(*((void **)this + 30), *((void *)this + 31) - *((void *)this + 30));
  bzero(*((void **)this + 33), *((void *)this + 34) - *((void *)this + 33));
  if (*((void *)this + 2))
  {
    unint64_t v5 = 0;
    int v6 = 0;
    do
    {
      int v15 = v6;
      FreqDomainConvolver::Initialize((DSPSplitComplex *)(*((void *)this + 4) + 168 * v5), (DSPComplex *)a2[v5], v14);
      if (*((_DWORD *)this + 14))
      {
        uint64_t v7 = 0;
        unint64_t v8 = 0;
        LODWORD(v9) = 0;
        do
        {
          vDSP_ctoz((const DSPComplex *)&a2[v5][v9], 2, (const DSPSplitComplex *)(*(void *)(*((void *)this + 13) + 24 * v5) + v7), 1, v14 >> 1);
          float __B = 0.0;
          unint64_t v10 = (_DWORD *)*((void *)this + 8);
          if (v10) {
            LODWORD(v10) = *v10;
          }
          float __B = 1.0 / (float)v10;
          unint64_t v11 = *(float **)(*(void *)(*((void *)this + 13) + 24 * v5) + v7);
          vDSP_vsmul(v11, 1, &__B, v11, 1, *(void *)this);
          uint8x8_t v12 = *(float **)(*(void *)(*((void *)this + 13) + 24 * v5) + v7 + 8);
          vDSP_vsmul(v12, 1, &__B, v12, 1, *(void *)this);
          MultiRadixRealFFT::RealInPlaceTransform((SmartFIR *)((char *)this + 64), (DSPSplitComplex *)(*(void *)(*((void *)this + 13) + 24 * v5) + v7), 1, v13);
          uint64_t v9 = *(void *)this + v9;
          ++v8;
          v7 += 16;
        }
        while (v8 < *((unsigned int *)this + 14));
      }
      unint64_t v5 = (v15 + 1);
      int v6 = v15 + 1;
    }
    while (*((void *)this + 2) > v5);
  }
}

void SmartFIR::ProcessFreq(SmartFIR *this, const DSPSplitComplex *const *a2, float *const *a3)
{
  if (*((void *)this + 3) == *(void *)this)
  {
    if (*((void *)this + 2))
    {
      uint64_t v6 = 0;
      unsigned int v7 = 1;
      do
      {
        memcpy(*(void **)(*(void *)(*((void *)this + 16) + 24 * v6) + 16 * *((unsigned int *)this + 15)), a2[v6]->realp, 4 * *(void *)this);
        memcpy(*(void **)(*(void *)(*((void *)this + 16) + 24 * v6) + 16 * *((unsigned int *)this + 15) + 8), a2[v6]->imagp, 4 * *(void *)this);
        uint64_t v6 = v7;
        unint64_t v8 = *((void *)this + 2);
        BOOL v9 = v8 > v7++;
      }
      while (v9);
      unint64_t v10 = (int *)((char *)this + 60);
      unint64_t v11 = (_DWORD *)((char *)this + 56);
      uint8x8_t v12 = (int *)((char *)this + 232);
      **((_DWORD **)this + 51) = (unsigned __int16)*((_DWORD *)this + 15);
      if (v8)
      {
        uint64_t v13 = 0;
        for (i = 0; i < v8; uint64_t v13 = ++i)
        {
          unint64_t v15 = *((void *)this + 7);
          unint64_t v16 = HIDWORD(v15);
          DSPSplitComplex v17 = *(DSPSplitComplex *)(*(void *)(*((void *)this + 16) + 24 * v13) + 16 * HIDWORD(v15));
          DSPSplitComplex __A = v17;
          unint64_t v18 = *(void *)this;
          if (*(void *)this)
          {
            uint64_t v19 = 0;
            uint64x2_t v20 = (uint64_t *)(*((void *)this + 10) + 16 * v13);
            uint64_t v21 = *v20;
            uint64_t v22 = v20[1];
            do
            {
              *(_DWORD *)(v21 + 4 * v19) = 0;
              *(_DWORD *)(v22 + 4 * v19++) = 0;
            }
            while (v18 > v19);
          }
          if (v15)
          {
            unint64_t v23 = 0;
            uint64_t v24 = *((void *)this + 10);
            uint64_t v25 = *((void *)this + 13);
            uint64_t v26 = 8;
            do
            {
              DSPSplitComplex __A = *(DSPSplitComplex *)(*(void *)(*((void *)this + 16) + 24 * v13) + 16 * v16);
              uint64_t v28 = (uint64_t *)(v25 + 24 * v13);
              uint64_t v27 = *v28;
              if (v23 >= (v28[1] - *v28) >> 4
                || (unint64_t v29 = (const DSPSplitComplex *)(v24 + 16 * v13),
                    float v30 = *v29->realp,
                    float v31 = *v29->imagp,
                    vDSP_zvma(&__A, 1, (const DSPSplitComplex *)(v27 + v26 - 8), 1, v29, 1, v29, 1, *(void *)this), v25 = *((void *)this + 13), uint64_t v32 = *(void *)(v25 + 24 * v13), v23 >= (*(void *)(v25 + 24 * v13 + 8) - v32) >> 4))
              {
                std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
              }
              uint64_t v33 = (float **)(v32 + v26);
              float v34 = v30 + (float)(*__A.realp * **(float **)(v32 + v26 - 8));
              uint64_t v24 = *((void *)this + 10);
              uint64_t v35 = v24 + 16 * v13;
              **(float **)uint64_t v35 = v34;
              *(float *)&v17.realp = v31 + (float)(*__A.imagp * **v33);
              **(_DWORD **)(v35 + 8) = v17.realp;
              if (v16) {
                int v36 = v16;
              }
              else {
                int v36 = v15;
              }
              LODWORD(v16) = v36 - 1;
              ++v23;
              v26 += 16;
            }
            while (v15 != v23);
            unint64_t v8 = *((void *)this + 2);
          }
        }
        if (v8)
        {
          uint64_t v37 = 0;
          unsigned int v38 = 1;
          do
          {
            MultiRadixRealFFT::RealInPlaceTransform((SmartFIR *)((char *)this + 64), (DSPSplitComplex *)(*((void *)this + 10) + 16 * v37), -1, *(float *)&v17.realp);
            __A.realp = 0;
            __A.imagp = 0;
            unint64_t v39 = (void *)(*((void *)this + 10) + 16 * v37);
            vDSP_Length v40 = *(void *)this >> 1;
            __A.realp = (float *)(*v39 + 4 * v40);
            __A.imagp = (float *)(v39[1] + 4 * v40);
            vDSP_ztoc(&__A, 1, (DSPComplex *)a3[v37], 2, v40);
            uint64_t v37 = v38;
            BOOL v9 = *((void *)this + 2) > (unint64_t)v38++;
          }
          while (v9);
        }
        unint64_t v11 = (_DWORD *)((char *)this + 56);
        unint64_t v10 = (int *)((char *)this + 60);
        uint8x8_t v12 = (int *)((char *)this + 232);
      }
    }
    else
    {
      unint64_t v11 = (_DWORD *)((char *)this + 56);
      uint8x8_t v12 = (int *)((char *)this + 232);
      **((_DWORD **)this + 51) = (unsigned __int16)*((_DWORD *)this + 15);
      unint64_t v10 = (int *)((char *)this + 60);
    }
    int v41 = *v10;
    int *v12 = *v10;
    if (v41 + 1 == *v11) {
      int v42 = 0;
    }
    else {
      int v42 = v41 + 1;
    }
    int *v10 = v42;
  }
}

uint64_t VoiceProcessorV2::SetupDownlinkBasicAUChainForHwHasVP(VoiceProcessorV2 *this)
{
  uint64_t v2 = (uint64_t *)((char *)this + 8896);
  uint64_t v6 = (uint64_t *)((char *)this + 8896);
  int v7 = 0;
  std::__fill_n[abi:ne180100]<false,std::__bitset<1ul,62ul>>((uint64_t)&v6);
  *((void *)this + 1112) |= 0x800000028000000uLL;
  uint64_t result = (*(uint64_t (**)(VoiceProcessorV2 *))(*(void *)this + 112))(this);
  uint64_t v4 = 0x1000000000000000;
  if (result > 4) {
    uint64_t v4 = 0x800000000000;
  }
  uint64_t v5 = *((void *)this + 1112) | v4;
  *((void *)this + 1112) = v5;
  if (*((unsigned char *)this + 2244))
  {
    uint64_t v6 = v2;
    int v7 = 0;
    uint64_t result = std::__fill_n[abi:ne180100]<false,std::__bitset<1ul,62ul>>((uint64_t)&v6);
    uint64_t v5 = *v2 | 0x3000C000;
    *uint64_t v2 = v5;
  }
  if (*((unsigned char *)this + 16624)) {
    *uint64_t v2 = v5 | 0x8000;
  }
  return result;
}

void VoiceProcessorV2::SetupDownlinkFarEndVoiceMixGraph(VoiceProcessorV2 *this)
{
  uint64_t v329 = *MEMORY[0x1E4F143B8];
  *((void *)this + 1112) &= ~1uLL;
  uint64_t v2 = (const void *)*((void *)this + 2037);
  *((void *)this + 2037) = 0;
  if (v2) {
    CFRelease(v2);
  }
  unsigned int v3 = (const void *)*((void *)this + 2038);
  *((void *)this + 2038) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)*((void *)this + 2039);
  *((void *)this + 2039) = 0;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void *)*((void *)this + 2040);
  *((void *)this + 2040) = 0;
  if (v5) {
    CFRelease(v5);
  }
  if (*((_DWORD *)this + 59) == 32)
  {
    int v314 = 0;
    float v315 = 0;
    unint64_t v316 = 0;
    memset(&v323, 0, sizeof(v323));
    VoiceProcessorV2::GetRouteSpecificGenericTuningSubDir(&v320, (uint64_t)this);
    if (v321)
    {
      uint64_t v6 = (std::string *)((char *)this + 8);
      if (*((char *)this + 31) < 0) {
        uint64_t v6 = (std::string *)v6->__r_.__value_.__r.__words[0];
      }
      __p[0].__first_ = v6;
      std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&v324, (char **)__p);
      std::string::basic_string[abi:ne180100]<0>(__p, "Generic");
      std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v324, (uint64_t)__p);
      if (SHIBYTE(__p[0].__end_) < 0) {
        operator delete(__p[0].__first_);
      }
      std::__fs::filesystem::path::operator/=[abi:ne180100]((std::__fs::filesystem::path *)&v324, (std::__fs::filesystem::path *)&v320);
      VoiceProcessorV2::GetVersionNameForTuning((std::string *)__p, (uint64_t)this);
      std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v324, (uint64_t)__p);
      if (SHIBYTE(__p[0].__end_) < 0) {
        operator delete(__p[0].__first_);
      }
      VoiceProcessorV2::GetFarEndVoiceMixGraphFileNamePrefix((VoiceProcessorV2 *)__p, (uint64_t)this, 1);
      std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v324, (uint64_t)__p);
      if (SHIBYTE(__p[0].__end_) < 0) {
        operator delete(__p[0].__first_);
      }
      VoiceProcessorV2::GetFarEndVoiceMixType((VoiceProcessorV2 *)__p, this);
      if (SHIBYTE(__p[0].__end_) >= 0) {
        std::__split_buffer<std::string>::pointer first = (std::__split_buffer<std::string>::pointer)__p;
      }
      else {
        std::__split_buffer<std::string>::pointer first = __p[0].__first_;
      }
      if (SHIBYTE(__p[0].__end_) >= 0) {
        std::string::size_type end_high = HIBYTE(__p[0].__end_);
      }
      else {
        std::string::size_type end_high = (std::string::size_type)__p[0].__begin_;
      }
      std::string::append(&v324, (const std::string::value_type *)first, end_high);
      if (SHIBYTE(__p[0].__end_) < 0) {
        operator delete(__p[0].__first_);
      }
      std::string::append(&v324, ".dspg", 5uLL);
      std::string::size_type size = (_OWORD *)v323.__pn_.__r_.__value_.__l.__size_;
      if (v323.__pn_.__r_.__value_.__l.__size_ >= v323.__pn_.__r_.__value_.__r.__words[2])
      {
        unint64_t v11 = 0xAAAAAAAAAAAAAAABLL
            * ((uint64_t)(v323.__pn_.__r_.__value_.__l.__size_ - v323.__pn_.__r_.__value_.__r.__words[0]) >> 3);
        unint64_t v12 = v11 + 1;
        if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
          goto LABEL_814;
        }
        if (0x5555555555555556
           * ((uint64_t)(v323.__pn_.__r_.__value_.__r.__words[2] - v323.__pn_.__r_.__value_.__r.__words[0]) >> 3) > v12)
          unint64_t v12 = 0x5555555555555556
              * ((uint64_t)(v323.__pn_.__r_.__value_.__r.__words[2] - v323.__pn_.__r_.__value_.__r.__words[0]) >> 3);
        if (0xAAAAAAAAAAAAAAABLL
           * ((uint64_t)(v323.__pn_.__r_.__value_.__r.__words[2] - v323.__pn_.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
          unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
        else {
          unint64_t v13 = v12;
        }
        __p[0].__end_cap_.__value_ = (std::allocator<std::string> *)&v323.__pn_.__r_.__value_.__r.__words[2];
        if (v13) {
          unint64_t v14 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>((uint64_t)&v323.__pn_.__r_.__value_.__r.__words[2], v13);
        }
        else {
          unint64_t v14 = 0;
        }
        unint64_t v15 = v14 + v11;
        __p[0].__first_ = v14;
        __p[0].__begin_ = v15;
        __p[0].__end_cap_.__value_ = &v14[v13];
        long long v16 = *(_OWORD *)&v324.__r_.__value_.__l.__data_;
        v15->__r_.__value_.__r.__words[2] = v324.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
        memset(&v324, 0, sizeof(v324));
        __p[0].__end_ = v15 + 1;
        std::vector<std::__fs::filesystem::path>::__swap_out_circular_buffer((uint64_t *)&v323, __p);
        std::string::size_type v17 = v323.__pn_.__r_.__value_.__l.__size_;
        std::__split_buffer<std::string>::~__split_buffer(__p);
        v323.__pn_.__r_.__value_.__l.__size_ = v17;
        if (SHIBYTE(v324.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v324.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v10 = *(_OWORD *)&v324.__r_.__value_.__l.__data_;
        *(void *)(v323.__pn_.__r_.__value_.__l.__size_ + 16) = *((void *)&v324.__r_.__value_.__l + 2);
        *std::string::size_type size = v10;
        v323.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)size + 24;
      }
      if (v321 && SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v320.__r_.__value_.__l.__data_);
      }
    }
    unint64_t v18 = (std::string **)((char *)this + 8);
    uint64_t v19 = (std::string *)((char *)this + 8);
    if (*((char *)this + 31) < 0) {
      uint64_t v19 = *v18;
    }
    __p[0].__first_ = v19;
    std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&v320, (char **)__p);
    VoiceProcessorV2::GetHardwareModelNameForTuning((std::string *)__p, (uint64_t)this, 0);
    std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v320, (uint64_t)__p);
    if (SHIBYTE(__p[0].__end_) < 0) {
      operator delete(__p[0].__first_);
    }
    VoiceProcessorV2::GetVersionNameForTuning((std::string *)__p, (uint64_t)this);
    std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v320, (uint64_t)__p);
    if (SHIBYTE(__p[0].__end_) < 0) {
      operator delete(__p[0].__first_);
    }
    VoiceProcessorV2::GetFarEndVoiceMixGraphFileNamePrefix((VoiceProcessorV2 *)__p, (uint64_t)this, 0);
    std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v320, (uint64_t)__p);
    if (SHIBYTE(__p[0].__end_) < 0) {
      operator delete(__p[0].__first_);
    }
    VoiceProcessorV2::GetFarEndVoiceMixType((VoiceProcessorV2 *)__p, this);
    if (SHIBYTE(__p[0].__end_) >= 0) {
      std::__split_buffer<std::string>::pointer v20 = (std::__split_buffer<std::string>::pointer)__p;
    }
    else {
      std::__split_buffer<std::string>::pointer v20 = __p[0].__first_;
    }
    if (SHIBYTE(__p[0].__end_) >= 0) {
      std::string::size_type begin = HIBYTE(__p[0].__end_);
    }
    else {
      std::string::size_type begin = (std::string::size_type)__p[0].__begin_;
    }
    std::string::append(&v320, (const std::string::value_type *)v20, begin);
    if (SHIBYTE(__p[0].__end_) < 0) {
      operator delete(__p[0].__first_);
    }
    std::string::append(&v320, ".dspg", 5uLL);
    uint64_t v22 = (_OWORD *)v323.__pn_.__r_.__value_.__l.__size_;
    if (v323.__pn_.__r_.__value_.__l.__size_ >= v323.__pn_.__r_.__value_.__r.__words[2])
    {
      unint64_t v24 = 0xAAAAAAAAAAAAAAABLL
          * ((uint64_t)(v323.__pn_.__r_.__value_.__l.__size_ - v323.__pn_.__r_.__value_.__r.__words[0]) >> 3);
      unint64_t v25 = v24 + 1;
      if (v24 + 1 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_814;
      }
      if (0x5555555555555556
         * ((uint64_t)(v323.__pn_.__r_.__value_.__r.__words[2] - v323.__pn_.__r_.__value_.__r.__words[0]) >> 3) > v25)
        unint64_t v25 = 0x5555555555555556
            * ((uint64_t)(v323.__pn_.__r_.__value_.__r.__words[2] - v323.__pn_.__r_.__value_.__r.__words[0]) >> 3);
      if (0xAAAAAAAAAAAAAAABLL
         * ((uint64_t)(v323.__pn_.__r_.__value_.__r.__words[2] - v323.__pn_.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
        unint64_t v26 = 0xAAAAAAAAAAAAAAALL;
      else {
        unint64_t v26 = v25;
      }
      __p[0].__end_cap_.__value_ = (std::allocator<std::string> *)&v323.__pn_.__r_.__value_.__r.__words[2];
      if (v26) {
        uint64_t v27 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>((uint64_t)&v323.__pn_.__r_.__value_.__r.__words[2], v26);
      }
      else {
        uint64_t v27 = 0;
      }
      uint64_t v28 = v27 + v24;
      __p[0].__first_ = v27;
      __p[0].__begin_ = v28;
      __p[0].__end_cap_.__value_ = &v27[v26];
      long long v29 = *(_OWORD *)&v320.__r_.__value_.__l.__data_;
      v28->__r_.__value_.__r.__words[2] = v320.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v29;
      memset(&v320, 0, sizeof(v320));
      __p[0].__end_ = v28 + 1;
      std::vector<std::__fs::filesystem::path>::__swap_out_circular_buffer((uint64_t *)&v323, __p);
      std::string::size_type v30 = v323.__pn_.__r_.__value_.__l.__size_;
      std::__split_buffer<std::string>::~__split_buffer(__p);
      v323.__pn_.__r_.__value_.__l.__size_ = v30;
      if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v320.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v23 = *(_OWORD *)&v320.__r_.__value_.__l.__data_;
      *(void *)(v323.__pn_.__r_.__value_.__l.__size_ + 16) = *((void *)&v320.__r_.__value_.__l + 2);
      _OWORD *v22 = v23;
      v323.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v22 + 24;
    }
    float v31 = (std::string *)((char *)this + 8);
    if (*((char *)this + 31) < 0) {
      float v31 = *v18;
    }
    __p[0].__first_ = v31;
    std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&v320, (char **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "Generic");
    std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v320, (uint64_t)__p);
    if (SHIBYTE(__p[0].__end_) < 0) {
      operator delete(__p[0].__first_);
    }
    VoiceProcessorV2::GetVersionNameForTuning((std::string *)__p, (uint64_t)this);
    std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v320, (uint64_t)__p);
    if (SHIBYTE(__p[0].__end_) < 0) {
      operator delete(__p[0].__first_);
    }
    VoiceProcessorV2::GetFarEndVoiceMixGraphFileNamePrefix((VoiceProcessorV2 *)__p, (uint64_t)this, 1);
    std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v320, (uint64_t)__p);
    if (SHIBYTE(__p[0].__end_) < 0) {
      operator delete(__p[0].__first_);
    }
    VoiceProcessorV2::GetFarEndVoiceMixType((VoiceProcessorV2 *)__p, this);
    if (SHIBYTE(__p[0].__end_) >= 0) {
      std::__split_buffer<std::string>::pointer v32 = (std::__split_buffer<std::string>::pointer)__p;
    }
    else {
      std::__split_buffer<std::string>::pointer v32 = __p[0].__first_;
    }
    if (SHIBYTE(__p[0].__end_) >= 0) {
      std::string::size_type v33 = HIBYTE(__p[0].__end_);
    }
    else {
      std::string::size_type v33 = (std::string::size_type)__p[0].__begin_;
    }
    std::string::append(&v320, (const std::string::value_type *)v32, v33);
    if (SHIBYTE(__p[0].__end_) < 0) {
      operator delete(__p[0].__first_);
    }
    std::string::append(&v320, ".dspg", 5uLL);
    float v34 = (_OWORD *)v323.__pn_.__r_.__value_.__l.__size_;
    if (v323.__pn_.__r_.__value_.__l.__size_ < v323.__pn_.__r_.__value_.__r.__words[2])
    {
      long long v35 = *(_OWORD *)&v320.__r_.__value_.__l.__data_;
      *(void *)(v323.__pn_.__r_.__value_.__l.__size_ + 16) = *((void *)&v320.__r_.__value_.__l + 2);
      *float v34 = v35;
      std::string::size_type v36 = (std::string::size_type)v34 + 24;
      v323.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v34 + 24;
      goto LABEL_101;
    }
    unint64_t v37 = 0xAAAAAAAAAAAAAAABLL
        * ((uint64_t)(v323.__pn_.__r_.__value_.__l.__size_ - v323.__pn_.__r_.__value_.__r.__words[0]) >> 3);
    unint64_t v38 = v37 + 1;
    if (v37 + 1 <= 0xAAAAAAAAAAAAAAALL)
    {
      if (0x5555555555555556
         * ((uint64_t)(v323.__pn_.__r_.__value_.__r.__words[2] - v323.__pn_.__r_.__value_.__r.__words[0]) >> 3) > v38)
        unint64_t v38 = 0x5555555555555556
            * ((uint64_t)(v323.__pn_.__r_.__value_.__r.__words[2] - v323.__pn_.__r_.__value_.__r.__words[0]) >> 3);
      if (0xAAAAAAAAAAAAAAABLL
         * ((uint64_t)(v323.__pn_.__r_.__value_.__r.__words[2] - v323.__pn_.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
        unint64_t v39 = 0xAAAAAAAAAAAAAAALL;
      else {
        unint64_t v39 = v38;
      }
      __p[0].__end_cap_.__value_ = (std::allocator<std::string> *)&v323.__pn_.__r_.__value_.__r.__words[2];
      if (v39) {
        vDSP_Length v40 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>((uint64_t)&v323.__pn_.__r_.__value_.__r.__words[2], v39);
      }
      else {
        vDSP_Length v40 = 0;
      }
      int v41 = v40 + v37;
      __p[0].__first_ = v40;
      __p[0].__begin_ = v41;
      __p[0].__end_cap_.__value_ = &v40[v39];
      long long v42 = *(_OWORD *)&v320.__r_.__value_.__l.__data_;
      v41->__r_.__value_.__r.__words[2] = v320.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v41->__r_.__value_.__l.__data_ = v42;
      memset(&v320, 0, sizeof(v320));
      __p[0].__end_ = v41 + 1;
      std::vector<std::__fs::filesystem::path>::__swap_out_circular_buffer((uint64_t *)&v323, __p);
      std::string::size_type v36 = v323.__pn_.__r_.__value_.__l.__size_;
      std::__split_buffer<std::string>::~__split_buffer(__p);
      v323.__pn_.__r_.__value_.__l.__size_ = v36;
      if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v320.__r_.__value_.__l.__data_);
        std::string::size_type v36 = v323.__pn_.__r_.__value_.__l.__size_;
      }
LABEL_101:
      int v300 = (std::string **)((char *)this + 8);
      float v301 = (char *)this + 15961;
      std::string::size_type v43 = v323.__pn_.__r_.__value_.__r.__words[0];
      if (v323.__pn_.__r_.__value_.__r.__words[0] != v36)
      {
        while (1)
        {
          std::__fs::filesystem::__status((const std::__fs::filesystem::path *)v43, 0);
          if (v317)
          {
            if (v317 != 255) {
              break;
            }
          }
          int v44 = v315;
          if ((unint64_t)v315 >= v316)
          {
            uint64_t v46 = (std::string *)std::vector<std::__fs::filesystem::path>::__push_back_slow_path<std::__fs::filesystem::path const&>((uint64_t)&v314, (long long *)v43);
          }
          else
          {
            if (*(char *)(v43 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v315, *(const std::string::value_type **)v43, *(void *)(v43 + 8));
            }
            else
            {
              long long v45 = *(_OWORD *)v43;
              v315->__r_.__value_.__r.__words[2] = *(void *)(v43 + 16);
              *(_OWORD *)&v44->__r_.__value_.__l.__data_ = v45;
            }
            uint64_t v46 = v44 + 1;
          }
          float v315 = v46;
          v43 += 24;
          if (v43 == v36) {
            goto LABEL_172;
          }
        }
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        uint64_t v47 = (void *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
        {
          uint64_t v48 = (*v47 ? *v47 : MEMORY[0x1E4F14500]);
          if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
          {
            unint64_t v49 = (std::string *)v43;
            if (*(char *)(v43 + 23) < 0) {
              unint64_t v49 = *(std::string **)v43;
            }
            LODWORD(__p[0].__first_) = 136315650;
            *(std::__split_buffer<std::string>::pointer *)((char *)&__p[0].__first_ + 4) = (std::__split_buffer<std::string>::pointer)"vpSetupDownlinkDSPChain.cpp";
            WORD2(__p[0].__begin_) = 1024;
            *(_DWORD *)((char *)&__p[0].__begin_ + 6) = 69;
            WORD1(__p[0].__end_) = 2080;
            *(std::__split_buffer<std::string>::pointer *)((char *)&__p[0].__end_ + 4) = v49;
            _os_log_impl(&dword_1BB0CE000, v48, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> loading far end voice mix graph \"%s\"", (uint8_t *)__p, 0x1Cu);
          }
        }
        float v50 = (int *)*((void *)this + 1578);
        if (v50 && (*v301 || *((unsigned char *)this + 15962)))
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          unint64_t v51 = (const char *)v43;
          if (*(char *)(v43 + 23) < 0) {
            unint64_t v51 = *(const char **)v43;
          }
          CALegacyLog::log(v50, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDSPChains/vpSetupDownlinkDSPChain.cpp", 69, "SetupDownlinkFarEndVoiceMixGraph", "loading far end voice mix graph \"%s\"", v51);
        }
        std::ifstream::basic_ifstream((uint64_t *)__p);
        std::string::__init_with_sentinel[abi:ne180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(&v320, *(void **)((char *)&__p[1].__first_ + __p[0].__first_[-1].__r_.__value_.__r.__words[0]));
        if ((v320.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v52 = &v320;
        }
        else {
          unint64_t v52 = (std::string *)v320.__r_.__value_.__r.__words[0];
        }
        if (v52)
        {
          if ((v320.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            CFIndex v53 = HIBYTE(v320.__r_.__value_.__r.__words[2]);
          }
          else {
            CFIndex v53 = v320.__r_.__value_.__l.__size_;
          }
          CFStringRef v54 = CFStringCreateWithBytes(0, (const UInt8 *)v52, v53, 0x8000100u, 0);
          if (!v54)
          {
            exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not construct");
          }
        }
        else
        {
          CFStringRef v54 = 0;
        }
        uint64_t v56 = (const void *)*((void *)this + 2037);
        *((void *)this + 2037) = v54;
        if (v56) {
          CFRelease(v56);
        }
        std::__fs::filesystem::path::filename[abi:ne180100]((const std::__fs::filesystem::path *)v43, (uint64_t)&valuePtr);
        memset(&__replacement, 0, sizeof(__replacement));
        uint64_t v57 = std::__fs::filesystem::path::replace_extension(&valuePtr, &__replacement);
        if (SHIBYTE(v57->__pn_.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&v324, v57->__pn_.__r_.__value_.__l.__data_, v57->__pn_.__r_.__value_.__l.__size_);
        }
        else
        {
          long long v58 = *(_OWORD *)&v57->__pn_.__r_.__value_.__l.__data_;
          v324.__r_.__value_.__r.__words[2] = v57->__pn_.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v324.__r_.__value_.__l.__data_ = v58;
        }
        if (SHIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__replacement.__pn_.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(valuePtr.__pn_.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(valuePtr.__pn_.__r_.__value_.__l.__data_);
        }
        if ((v324.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v59 = &v324;
        }
        else {
          unint64_t v59 = (std::string *)v324.__r_.__value_.__r.__words[0];
        }
        if (v59)
        {
          if ((v324.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            CFIndex v60 = HIBYTE(v324.__r_.__value_.__r.__words[2]);
          }
          else {
            CFIndex v60 = v324.__r_.__value_.__l.__size_;
          }
          CFStringRef v61 = CFStringCreateWithBytes(0, (const UInt8 *)v59, v60, 0x8000100u, 0);
          if (!v61)
          {
            uint64_t v62 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v62, "Could not construct");
          }
        }
        else
        {
          CFStringRef v61 = 0;
        }
        float v63 = (const void *)*((void *)this + 2038);
        *((void *)this + 2038) = v61;
        if (v63) {
          CFRelease(v63);
        }
        float v64 = v314;
        for (unsigned int i = v315; i != v64; --i)
        {
          if (SHIBYTE(i[-1].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(i[-1].__r_.__value_.__l.__data_);
          }
        }
        float v315 = v64;
        if (SHIBYTE(v324.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v324.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v320.__r_.__value_.__l.__data_);
        }
        __p[0].__first_ = (std::__split_buffer<std::string>::pointer)*MEMORY[0x1E4FBA3F8];
        *(std::__split_buffer<std::string>::pointer *)((char *)&__p[0].__first_
                                                     + __p[0].__first_[-1].__r_.__value_.__r.__words[0]) = *(std::__split_buffer<std::string>::pointer *)(MEMORY[0x1E4FBA3F8] + 24);
        MEMORY[0x1C185CC40](&__p[0].__end_);
        std::istream::~istream();
        MEMORY[0x1C185D210](&v326);
      }
LABEL_172:
      __p[0].__first_ = (std::__split_buffer<std::string>::pointer)&v323;
      std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      uint64_t v67 = v314;
      uint64_t v66 = v315;
      if (v314 != v315)
      {
        uint64_t v68 = MEMORY[0x1E4F14500];
        do
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          uint64_t v69 = (void *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
          {
            uint64_t v70 = (*v69 ? *v69 : v68);
            if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
            {
              int v71 = v67;
              if (SHIBYTE(v67->__r_.__value_.__r.__words[2]) < 0) {
                int v71 = (std::string *)v67->__r_.__value_.__r.__words[0];
              }
              LODWORD(__p[0].__first_) = 136315650;
              *(std::__split_buffer<std::string>::pointer *)((char *)&__p[0].__first_ + 4) = (std::__split_buffer<std::string>::pointer)"vpSetupDownlinkDSPChain.cpp";
              WORD2(__p[0].__begin_) = 1024;
              *(_DWORD *)((char *)&__p[0].__begin_ + 6) = 91;
              WORD1(__p[0].__end_) = 2080;
              *(std::__split_buffer<std::string>::pointer *)((char *)&__p[0].__end_ + 4) = v71;
              _os_log_impl(&dword_1BB0CE000, v70, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> file \"%s\" does not exist", (uint8_t *)__p, 0x1Cu);
            }
          }
          float v72 = (int *)*((void *)this + 1578);
          if (v72 && (*v301 || *((unsigned char *)this + 15962)))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            uint64_t v73 = (const char *)v67;
            if (SHIBYTE(v67->__r_.__value_.__r.__words[2]) < 0) {
              uint64_t v73 = (const char *)v67->__r_.__value_.__r.__words[0];
            }
            CALegacyLog::log(v72, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDSPChains/vpSetupDownlinkDSPChain.cpp", 91, "SetupDownlinkFarEndVoiceMixGraph", "file \"%s\" does not exist", v73);
          }
          ++v67;
        }
        while (v67 != v66);
      }
      uint64_t v311 = 0;
      float v312 = 0;
      unint64_t v313 = 0;
      memset(&v323, 0, sizeof(v323));
      VoiceProcessorV2::GetRouteSpecificGenericTuningSubDir(&v320, (uint64_t)this);
      if (v321)
      {
        uint64_t v74 = (std::string *)((char *)this + 8);
        if (*((char *)this + 31) < 0) {
          uint64_t v74 = *v300;
        }
        __p[0].__first_ = v74;
        std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&v324, (char **)__p);
        std::string::basic_string[abi:ne180100]<0>(__p, "Generic");
        std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v324, (uint64_t)__p);
        if (SHIBYTE(__p[0].__end_) < 0) {
          operator delete(__p[0].__first_);
        }
        std::__fs::filesystem::path::operator/=[abi:ne180100]((std::__fs::filesystem::path *)&v324, (std::__fs::filesystem::path *)&v320);
        VoiceProcessorV2::GetVersionNameForTuning((std::string *)__p, (uint64_t)this);
        std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v324, (uint64_t)__p);
        if (SHIBYTE(__p[0].__end_) < 0) {
          operator delete(__p[0].__first_);
        }
        VoiceProcessorV2::GetFarEndVoiceMixGraphFileNamePrefix((VoiceProcessorV2 *)__p, (uint64_t)this, 1);
        std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v324, (uint64_t)__p);
        if (SHIBYTE(__p[0].__end_) < 0) {
          operator delete(__p[0].__first_);
        }
        VoiceProcessorV2::GetFarEndVoiceMixType((VoiceProcessorV2 *)__p, this);
        if (SHIBYTE(__p[0].__end_) >= 0) {
          std::__split_buffer<std::string>::pointer v75 = (std::__split_buffer<std::string>::pointer)__p;
        }
        else {
          std::__split_buffer<std::string>::pointer v75 = __p[0].__first_;
        }
        if (SHIBYTE(__p[0].__end_) >= 0) {
          std::string::size_type v76 = HIBYTE(__p[0].__end_);
        }
        else {
          std::string::size_type v76 = (std::string::size_type)__p[0].__begin_;
        }
        std::string::append(&v324, (const std::string::value_type *)v75, v76);
        if (SHIBYTE(__p[0].__end_) < 0) {
          operator delete(__p[0].__first_);
        }
        std::string::append(&v324, ".austrip", 8uLL);
        float v77 = (_OWORD *)v323.__pn_.__r_.__value_.__l.__size_;
        if (v323.__pn_.__r_.__value_.__l.__size_ >= v323.__pn_.__r_.__value_.__r.__words[2])
        {
          unint64_t v79 = 0xAAAAAAAAAAAAAAABLL
              * ((uint64_t)(v323.__pn_.__r_.__value_.__l.__size_ - v323.__pn_.__r_.__value_.__r.__words[0]) >> 3);
          unint64_t v80 = v79 + 1;
          if (v79 + 1 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_815;
          }
          if (0x5555555555555556
             * ((uint64_t)(v323.__pn_.__r_.__value_.__r.__words[2] - v323.__pn_.__r_.__value_.__r.__words[0]) >> 3) > v80)
            unint64_t v80 = 0x5555555555555556
                * ((uint64_t)(v323.__pn_.__r_.__value_.__r.__words[2] - v323.__pn_.__r_.__value_.__r.__words[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL
             * ((uint64_t)(v323.__pn_.__r_.__value_.__r.__words[2] - v323.__pn_.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
            unint64_t v81 = 0xAAAAAAAAAAAAAAALL;
          else {
            unint64_t v81 = v80;
          }
          __p[0].__end_cap_.__value_ = (std::allocator<std::string> *)&v323.__pn_.__r_.__value_.__r.__words[2];
          if (v81) {
            float v82 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>((uint64_t)&v323.__pn_.__r_.__value_.__r.__words[2], v81);
          }
          else {
            float v82 = 0;
          }
          int v83 = v82 + v79;
          __p[0].__first_ = v82;
          __p[0].__begin_ = v83;
          __p[0].__end_cap_.__value_ = &v82[v81];
          long long v84 = *(_OWORD *)&v324.__r_.__value_.__l.__data_;
          v83->__r_.__value_.__r.__words[2] = v324.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v83->__r_.__value_.__l.__data_ = v84;
          memset(&v324, 0, sizeof(v324));
          __p[0].__end_ = v83 + 1;
          std::vector<std::__fs::filesystem::path>::__swap_out_circular_buffer((uint64_t *)&v323, __p);
          std::string::size_type v85 = v323.__pn_.__r_.__value_.__l.__size_;
          std::__split_buffer<std::string>::~__split_buffer(__p);
          v323.__pn_.__r_.__value_.__l.__size_ = v85;
          if (SHIBYTE(v324.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v324.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          long long v78 = *(_OWORD *)&v324.__r_.__value_.__l.__data_;
          *(void *)(v323.__pn_.__r_.__value_.__l.__size_ + 16) = *((void *)&v324.__r_.__value_.__l + 2);
          _OWORD *v77 = v78;
          v323.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v77 + 24;
        }
        if (v321 && SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v320.__r_.__value_.__l.__data_);
        }
      }
      float v86 = (std::string *)((char *)this + 8);
      if (*((char *)this + 31) < 0) {
        float v86 = *v300;
      }
      __p[0].__first_ = v86;
      std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&v320, (char **)__p);
      VoiceProcessorV2::GetHardwareModelNameForTuning((std::string *)__p, (uint64_t)this, 0);
      std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v320, (uint64_t)__p);
      if (SHIBYTE(__p[0].__end_) < 0) {
        operator delete(__p[0].__first_);
      }
      VoiceProcessorV2::GetVersionNameForTuning((std::string *)__p, (uint64_t)this);
      std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v320, (uint64_t)__p);
      if (SHIBYTE(__p[0].__end_) < 0) {
        operator delete(__p[0].__first_);
      }
      VoiceProcessorV2::GetFarEndVoiceMixGraphFileNamePrefix((VoiceProcessorV2 *)__p, (uint64_t)this, 0);
      std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v320, (uint64_t)__p);
      if (SHIBYTE(__p[0].__end_) < 0) {
        operator delete(__p[0].__first_);
      }
      VoiceProcessorV2::GetFarEndVoiceMixType((VoiceProcessorV2 *)__p, this);
      if (SHIBYTE(__p[0].__end_) >= 0) {
        std::__split_buffer<std::string>::pointer v87 = (std::__split_buffer<std::string>::pointer)__p;
      }
      else {
        std::__split_buffer<std::string>::pointer v87 = __p[0].__first_;
      }
      if (SHIBYTE(__p[0].__end_) >= 0) {
        std::string::size_type v88 = HIBYTE(__p[0].__end_);
      }
      else {
        std::string::size_type v88 = (std::string::size_type)__p[0].__begin_;
      }
      std::string::append(&v320, (const std::string::value_type *)v87, v88);
      if (SHIBYTE(__p[0].__end_) < 0) {
        operator delete(__p[0].__first_);
      }
      if (VoiceProcessorV2::GetFarEndVoiceMixChannelCount(this) != 1)
      {
        unsigned int v89 = 1885892727;
        if ((**((_DWORD **)this + 292) | 0x20) != 0x70687062) {
          unsigned int v89 = **((_DWORD **)this + 292);
        }
        CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)&valuePtr, v89);
        std::string::basic_string[abi:ne180100]<0>(&v324, (char *)&valuePtr);
        float v90 = std::string::insert(&v324, 0, "_", 1uLL);
        long long v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
        __p[0].__end_ = (std::__split_buffer<std::string>::pointer)v90->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p[0].__first_ = v91;
        v90->__r_.__value_.__l.__size_ = 0;
        v90->__r_.__value_.__r.__words[2] = 0;
        v90->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__p[0].__end_) >= 0) {
          std::__split_buffer<std::string>::pointer v92 = (std::__split_buffer<std::string>::pointer)__p;
        }
        else {
          std::__split_buffer<std::string>::pointer v92 = __p[0].__first_;
        }
        if (SHIBYTE(__p[0].__end_) >= 0) {
          std::string::size_type v93 = HIBYTE(__p[0].__end_);
        }
        else {
          std::string::size_type v93 = (std::string::size_type)__p[0].__begin_;
        }
        std::string::append(&v320, (const std::string::value_type *)v92, v93);
        if (SHIBYTE(__p[0].__end_) < 0) {
          operator delete(__p[0].__first_);
        }
        if (SHIBYTE(v324.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v324.__r_.__value_.__l.__data_);
        }
      }
      std::string::append(&v320, ".austrip", 8uLL);
      float v94 = (_OWORD *)v323.__pn_.__r_.__value_.__l.__size_;
      if (v323.__pn_.__r_.__value_.__l.__size_ >= v323.__pn_.__r_.__value_.__r.__words[2])
      {
        unint64_t v96 = 0xAAAAAAAAAAAAAAABLL
            * ((uint64_t)(v323.__pn_.__r_.__value_.__l.__size_ - v323.__pn_.__r_.__value_.__r.__words[0]) >> 3);
        unint64_t v97 = v96 + 1;
        if (v96 + 1 > 0xAAAAAAAAAAAAAAALL) {
          goto LABEL_815;
        }
        if (0x5555555555555556
           * ((uint64_t)(v323.__pn_.__r_.__value_.__r.__words[2] - v323.__pn_.__r_.__value_.__r.__words[0]) >> 3) > v97)
          unint64_t v97 = 0x5555555555555556
              * ((uint64_t)(v323.__pn_.__r_.__value_.__r.__words[2] - v323.__pn_.__r_.__value_.__r.__words[0]) >> 3);
        if (0xAAAAAAAAAAAAAAABLL
           * ((uint64_t)(v323.__pn_.__r_.__value_.__r.__words[2] - v323.__pn_.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
          unint64_t v98 = 0xAAAAAAAAAAAAAAALL;
        else {
          unint64_t v98 = v97;
        }
        __p[0].__end_cap_.__value_ = (std::allocator<std::string> *)&v323.__pn_.__r_.__value_.__r.__words[2];
        if (v98) {
          char v99 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>((uint64_t)&v323.__pn_.__r_.__value_.__r.__words[2], v98);
        }
        else {
          char v99 = 0;
        }
        uint64_t v100 = v99 + v96;
        __p[0].__first_ = v99;
        __p[0].__begin_ = v100;
        __p[0].__end_cap_.__value_ = &v99[v98];
        long long v101 = *(_OWORD *)&v320.__r_.__value_.__l.__data_;
        v100->__r_.__value_.__r.__words[2] = v320.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v100->__r_.__value_.__l.__data_ = v101;
        memset(&v320, 0, sizeof(v320));
        __p[0].__end_ = v100 + 1;
        std::vector<std::__fs::filesystem::path>::__swap_out_circular_buffer((uint64_t *)&v323, __p);
        std::string::size_type v102 = v323.__pn_.__r_.__value_.__l.__size_;
        std::__split_buffer<std::string>::~__split_buffer(__p);
        v323.__pn_.__r_.__value_.__l.__size_ = v102;
        if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v320.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v95 = *(_OWORD *)&v320.__r_.__value_.__l.__data_;
        *(void *)(v323.__pn_.__r_.__value_.__l.__size_ + 16) = *((void *)&v320.__r_.__value_.__l + 2);
        _OWORD *v94 = v95;
        v323.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v94 + 24;
      }
      float v103 = (std::string *)((char *)this + 8);
      if (*((char *)this + 31) < 0) {
        float v103 = *v300;
      }
      __p[0].__first_ = v103;
      std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&v320, (char **)__p);
      std::string::basic_string[abi:ne180100]<0>(__p, "Generic");
      std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v320, (uint64_t)__p);
      if (SHIBYTE(__p[0].__end_) < 0) {
        operator delete(__p[0].__first_);
      }
      VoiceProcessorV2::GetVersionNameForTuning((std::string *)__p, (uint64_t)this);
      std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v320, (uint64_t)__p);
      if (SHIBYTE(__p[0].__end_) < 0) {
        operator delete(__p[0].__first_);
      }
      VoiceProcessorV2::GetFarEndVoiceMixGraphFileNamePrefix((VoiceProcessorV2 *)__p, (uint64_t)this, 1);
      std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v320, (uint64_t)__p);
      if (SHIBYTE(__p[0].__end_) < 0) {
        operator delete(__p[0].__first_);
      }
      VoiceProcessorV2::GetFarEndVoiceMixType((VoiceProcessorV2 *)__p, this);
      if (SHIBYTE(__p[0].__end_) >= 0) {
        std::__split_buffer<std::string>::pointer v104 = (std::__split_buffer<std::string>::pointer)__p;
      }
      else {
        std::__split_buffer<std::string>::pointer v104 = __p[0].__first_;
      }
      if (SHIBYTE(__p[0].__end_) >= 0) {
        std::string::size_type v105 = HIBYTE(__p[0].__end_);
      }
      else {
        std::string::size_type v105 = (std::string::size_type)__p[0].__begin_;
      }
      std::string::append(&v320, (const std::string::value_type *)v104, v105);
      if (SHIBYTE(__p[0].__end_) < 0) {
        operator delete(__p[0].__first_);
      }
      if (VoiceProcessorV2::GetFarEndVoiceMixChannelCount(this) != 1)
      {
        unsigned int v106 = 1885892727;
        if ((**((_DWORD **)this + 292) | 0x20) != 0x70687062) {
          unsigned int v106 = **((_DWORD **)this + 292);
        }
        CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)&valuePtr, v106);
        std::string::basic_string[abi:ne180100]<0>(&v324, (char *)&valuePtr);
        float v107 = std::string::insert(&v324, 0, "_", 1uLL);
        long long v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
        __p[0].__end_ = (std::__split_buffer<std::string>::pointer)v107->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p[0].__first_ = v108;
        v107->__r_.__value_.__l.__size_ = 0;
        v107->__r_.__value_.__r.__words[2] = 0;
        v107->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__p[0].__end_) >= 0) {
          std::__split_buffer<std::string>::pointer v109 = (std::__split_buffer<std::string>::pointer)__p;
        }
        else {
          std::__split_buffer<std::string>::pointer v109 = __p[0].__first_;
        }
        if (SHIBYTE(__p[0].__end_) >= 0) {
          std::string::size_type v110 = HIBYTE(__p[0].__end_);
        }
        else {
          std::string::size_type v110 = (std::string::size_type)__p[0].__begin_;
        }
        std::string::append(&v320, (const std::string::value_type *)v109, v110);
        if (SHIBYTE(__p[0].__end_) < 0) {
          operator delete(__p[0].__first_);
        }
        if (SHIBYTE(v324.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v324.__r_.__value_.__l.__data_);
        }
      }
      std::string::append(&v320, ".austrip", 8uLL);
      float v111 = (_OWORD *)v323.__pn_.__r_.__value_.__l.__size_;
      if (v323.__pn_.__r_.__value_.__l.__size_ < v323.__pn_.__r_.__value_.__r.__words[2])
      {
        long long v112 = *(_OWORD *)&v320.__r_.__value_.__l.__data_;
        *(void *)(v323.__pn_.__r_.__value_.__l.__size_ + 16) = *((void *)&v320.__r_.__value_.__l + 2);
        _OWORD *v111 = v112;
        std::string::size_type v113 = (std::string::size_type)v111 + 24;
        v323.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v111 + 24;
        goto LABEL_311;
      }
      unint64_t v114 = 0xAAAAAAAAAAAAAAABLL
           * ((uint64_t)(v323.__pn_.__r_.__value_.__l.__size_ - v323.__pn_.__r_.__value_.__r.__words[0]) >> 3);
      unint64_t v115 = v114 + 1;
      if (v114 + 1 <= 0xAAAAAAAAAAAAAAALL)
      {
        if (0x5555555555555556
           * ((uint64_t)(v323.__pn_.__r_.__value_.__r.__words[2] - v323.__pn_.__r_.__value_.__r.__words[0]) >> 3) > v115)
          unint64_t v115 = 0x5555555555555556
               * ((uint64_t)(v323.__pn_.__r_.__value_.__r.__words[2] - v323.__pn_.__r_.__value_.__r.__words[0]) >> 3);
        if (0xAAAAAAAAAAAAAAABLL
           * ((uint64_t)(v323.__pn_.__r_.__value_.__r.__words[2] - v323.__pn_.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
          unint64_t v116 = 0xAAAAAAAAAAAAAAALL;
        else {
          unint64_t v116 = v115;
        }
        __p[0].__end_cap_.__value_ = (std::allocator<std::string> *)&v323.__pn_.__r_.__value_.__r.__words[2];
        if (v116) {
          float v117 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>((uint64_t)&v323.__pn_.__r_.__value_.__r.__words[2], v116);
        }
        else {
          float v117 = 0;
        }
        float v118 = v117 + v114;
        __p[0].__first_ = v117;
        __p[0].__begin_ = v118;
        __p[0].__end_cap_.__value_ = &v117[v116];
        long long v119 = *(_OWORD *)&v320.__r_.__value_.__l.__data_;
        v118->__r_.__value_.__r.__words[2] = v320.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v118->__r_.__value_.__l.__data_ = v119;
        memset(&v320, 0, sizeof(v320));
        __p[0].__end_ = v118 + 1;
        std::vector<std::__fs::filesystem::path>::__swap_out_circular_buffer((uint64_t *)&v323, __p);
        std::string::size_type v113 = v323.__pn_.__r_.__value_.__l.__size_;
        std::__split_buffer<std::string>::~__split_buffer(__p);
        v323.__pn_.__r_.__value_.__l.__size_ = v113;
        if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v320.__r_.__value_.__l.__data_);
          std::string::size_type v113 = v323.__pn_.__r_.__value_.__l.__size_;
        }
LABEL_311:
        std::string::size_type v120 = v323.__pn_.__r_.__value_.__r.__words[0];
        if (v323.__pn_.__r_.__value_.__r.__words[0] != v113)
        {
          while (1)
          {
            std::__fs::filesystem::__status((const std::__fs::filesystem::path *)v120, 0);
            if (v318)
            {
              if (v318 != 255) {
                break;
              }
            }
            float v121 = v312;
            if ((unint64_t)v312 >= v313)
            {
              float v123 = (std::string *)std::vector<std::__fs::filesystem::path>::__push_back_slow_path<std::__fs::filesystem::path const&>((uint64_t)&v311, (long long *)v120);
            }
            else
            {
              if (*(char *)(v120 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(v312, *(const std::string::value_type **)v120, *(void *)(v120 + 8));
              }
              else
              {
                long long v122 = *(_OWORD *)v120;
                v312->__r_.__value_.__r.__words[2] = *(void *)(v120 + 16);
                *(_OWORD *)&v121->__r_.__value_.__l.__data_ = v122;
              }
              float v123 = v121 + 1;
            }
            float v312 = v123;
            v120 += 24;
            if (v120 == v113) {
              goto LABEL_355;
            }
          }
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          float v124 = (void *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
          {
            float v125 = (*v124 ? *v124 : MEMORY[0x1E4F14500]);
            if (os_log_type_enabled(v125, OS_LOG_TYPE_DEFAULT))
            {
              float v126 = (std::string *)v120;
              if (*(char *)(v120 + 23) < 0) {
                float v126 = *(std::string **)v120;
              }
              LODWORD(__p[0].__first_) = 136315650;
              *(std::__split_buffer<std::string>::pointer *)((char *)&__p[0].__first_ + 4) = (std::__split_buffer<std::string>::pointer)"vpSetupDownlinkDSPChain.cpp";
              WORD2(__p[0].__begin_) = 1024;
              *(_DWORD *)((char *)&__p[0].__begin_ + 6) = 102;
              WORD1(__p[0].__end_) = 2080;
              *(std::__split_buffer<std::string>::pointer *)((char *)&__p[0].__end_ + 4) = v126;
              _os_log_impl(&dword_1BB0CE000, v125, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> loading far end voice mix AU strip \"%s\"", (uint8_t *)__p, 0x1Cu);
            }
          }
          float v127 = (int *)*((void *)this + 1578);
          if (v127 && (*v301 || *((unsigned char *)this + 15962)))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            float v128 = (const char *)v120;
            if (*(char *)(v120 + 23) < 0) {
              float v128 = *(const char **)v120;
            }
            CALegacyLog::log(v127, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDSPChains/vpSetupDownlinkDSPChain.cpp", 102, "SetupDownlinkFarEndVoiceMixGraph", "loading far end voice mix AU strip \"%s\"", v128);
          }
          if (*(char *)(v120 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)v120, *(void *)(v120 + 8));
          }
          else
          {
            long long v129 = *(_OWORD *)v120;
            __p[0].__end_ = *(std::__split_buffer<std::string>::pointer *)(v120 + 16);
            *(_OWORD *)&__p[0].__first_ = v129;
          }
          applesauce::CF::make_DataRef((const char *)__p, (CFDataRef *)&v320);
          if (SHIBYTE(__p[0].__end_) < 0) {
            operator delete(__p[0].__first_);
          }
          applesauce::CF::make_DictionaryRef((CFDataRef *)&v320, (applesauce::CF::DictionaryRef *)__p);
          float v130 = (std::string *)*((void *)this + 2039);
          *((void *)this + 2039) = __p[0].__first_;
          __p[0].__first_ = v130;
          if (v130) {
            CFRelease(v130);
          }
          float v131 = v311;
          for (uint64_t j = v312; j != v131; --j)
          {
            if (SHIBYTE(j[-1].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(j[-1].__r_.__value_.__l.__data_);
            }
          }
          float v312 = v131;
          if (v320.__r_.__value_.__r.__words[0]) {
            CFRelease(v320.__r_.__value_.__l.__data_);
          }
        }
LABEL_355:
        __p[0].__first_ = (std::__split_buffer<std::string>::pointer)&v323;
        std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        float v134 = v311;
        float v133 = v312;
        if (v311 != v312)
        {
          uint64_t v135 = MEMORY[0x1E4F14500];
          do
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            float v136 = (void *)VPLogScope(void)::scope;
            if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
            {
              float v137 = (*v136 ? *v136 : v135);
              if (os_log_type_enabled(v137, OS_LOG_TYPE_ERROR))
              {
                float v138 = v134;
                if (SHIBYTE(v134->__r_.__value_.__r.__words[2]) < 0) {
                  float v138 = (std::string *)v134->__r_.__value_.__r.__words[0];
                }
                LODWORD(__p[0].__first_) = 136315650;
                *(std::__split_buffer<std::string>::pointer *)((char *)&__p[0].__first_ + 4) = (std::__split_buffer<std::string>::pointer)"vpSetupDownlinkDSPChain.cpp";
                WORD2(__p[0].__begin_) = 1024;
                *(_DWORD *)((char *)&__p[0].__begin_ + 6) = 122;
                WORD1(__p[0].__end_) = 2080;
                *(std::__split_buffer<std::string>::pointer *)((char *)&__p[0].__end_ + 4) = v138;
                _os_log_impl(&dword_1BB0CE000, v137, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> file \"%s\" does not exist", (uint8_t *)__p, 0x1Cu);
              }
            }
            float v139 = (int *)*((void *)this + 1578);
            if (v139 && (*v301 || *((unsigned char *)this + 15962)))
            {
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              float v140 = (const char *)v134;
              if (SHIBYTE(v134->__r_.__value_.__r.__words[2]) < 0) {
                float v140 = (const char *)v134->__r_.__value_.__r.__words[0];
              }
              CALegacyLog::log(v139, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDSPChains/vpSetupDownlinkDSPChain.cpp", 122, "SetupDownlinkFarEndVoiceMixGraph", "file \"%s\" does not exist", v140);
            }
            ++v134;
          }
          while (v134 != v133);
        }
        uint64_t v308 = 0;
        float v309 = 0;
        unint64_t v310 = 0;
        memset(&v323, 0, sizeof(v323));
        VoiceProcessorV2::GetRouteSpecificGenericTuningSubDir(&v320, (uint64_t)this);
        if (v321)
        {
          float v141 = (std::string *)((char *)this + 8);
          if (*((char *)this + 31) < 0) {
            float v141 = *v300;
          }
          __p[0].__first_ = v141;
          std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&v324, (char **)__p);
          std::string::basic_string[abi:ne180100]<0>(__p, "Generic");
          std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v324, (uint64_t)__p);
          if (SHIBYTE(__p[0].__end_) < 0) {
            operator delete(__p[0].__first_);
          }
          std::__fs::filesystem::path::operator/=[abi:ne180100]((std::__fs::filesystem::path *)&v324, (std::__fs::filesystem::path *)&v320);
          VoiceProcessorV2::GetVersionNameForTuning((std::string *)__p, (uint64_t)this);
          std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v324, (uint64_t)__p);
          if (SHIBYTE(__p[0].__end_) < 0) {
            operator delete(__p[0].__first_);
          }
          VoiceProcessorV2::GetFarEndVoiceMixGraphFileNamePrefix((VoiceProcessorV2 *)__p, (uint64_t)this, 1);
          std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v324, (uint64_t)__p);
          if (SHIBYTE(__p[0].__end_) < 0) {
            operator delete(__p[0].__first_);
          }
          VoiceProcessorV2::GetFarEndVoiceMixType((VoiceProcessorV2 *)__p, this);
          if (SHIBYTE(__p[0].__end_) >= 0) {
            std::__split_buffer<std::string>::pointer v142 = (std::__split_buffer<std::string>::pointer)__p;
          }
          else {
            std::__split_buffer<std::string>::pointer v142 = __p[0].__first_;
          }
          if (SHIBYTE(__p[0].__end_) >= 0) {
            std::string::size_type v143 = HIBYTE(__p[0].__end_);
          }
          else {
            std::string::size_type v143 = (std::string::size_type)__p[0].__begin_;
          }
          std::string::append(&v324, (const std::string::value_type *)v142, v143);
          if (SHIBYTE(__p[0].__end_) < 0) {
            operator delete(__p[0].__first_);
          }
          std::string::append(&v324, ".propstrip", 0xAuLL);
          float v144 = (_OWORD *)v323.__pn_.__r_.__value_.__l.__size_;
          if (v323.__pn_.__r_.__value_.__l.__size_ >= v323.__pn_.__r_.__value_.__r.__words[2])
          {
            unint64_t v146 = 0xAAAAAAAAAAAAAAABLL
                 * ((uint64_t)(v323.__pn_.__r_.__value_.__l.__size_ - v323.__pn_.__r_.__value_.__r.__words[0]) >> 3);
            unint64_t v147 = v146 + 1;
            if (v146 + 1 > 0xAAAAAAAAAAAAAAALL) {
              goto LABEL_816;
            }
            if (0x5555555555555556
               * ((uint64_t)(v323.__pn_.__r_.__value_.__r.__words[2] - v323.__pn_.__r_.__value_.__r.__words[0]) >> 3) > v147)
              unint64_t v147 = 0x5555555555555556
                   * ((uint64_t)(v323.__pn_.__r_.__value_.__r.__words[2] - v323.__pn_.__r_.__value_.__r.__words[0]) >> 3);
            if (0xAAAAAAAAAAAAAAABLL
               * ((uint64_t)(v323.__pn_.__r_.__value_.__r.__words[2] - v323.__pn_.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
              unint64_t v148 = 0xAAAAAAAAAAAAAAALL;
            else {
              unint64_t v148 = v147;
            }
            __p[0].__end_cap_.__value_ = (std::allocator<std::string> *)&v323.__pn_.__r_.__value_.__r.__words[2];
            if (v148) {
              float v149 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>((uint64_t)&v323.__pn_.__r_.__value_.__r.__words[2], v148);
            }
            else {
              float v149 = 0;
            }
            float v150 = v149 + v146;
            __p[0].__first_ = v149;
            __p[0].__begin_ = v150;
            __p[0].__end_cap_.__value_ = &v149[v148];
            long long v151 = *(_OWORD *)&v324.__r_.__value_.__l.__data_;
            v150->__r_.__value_.__r.__words[2] = v324.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v150->__r_.__value_.__l.__data_ = v151;
            memset(&v324, 0, sizeof(v324));
            __p[0].__end_ = v150 + 1;
            std::vector<std::__fs::filesystem::path>::__swap_out_circular_buffer((uint64_t *)&v323, __p);
            std::string::size_type v152 = v323.__pn_.__r_.__value_.__l.__size_;
            std::__split_buffer<std::string>::~__split_buffer(__p);
            v323.__pn_.__r_.__value_.__l.__size_ = v152;
            if (SHIBYTE(v324.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v324.__r_.__value_.__l.__data_);
            }
          }
          else
          {
            long long v145 = *(_OWORD *)&v324.__r_.__value_.__l.__data_;
            *(void *)(v323.__pn_.__r_.__value_.__l.__size_ + 16) = *((void *)&v324.__r_.__value_.__l + 2);
            _OWORD *v144 = v145;
            v323.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v144 + 24;
          }
          if (v321 && SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v320.__r_.__value_.__l.__data_);
          }
        }
        float v153 = (std::string *)((char *)this + 8);
        if (*((char *)this + 31) < 0) {
          float v153 = *v300;
        }
        __p[0].__first_ = v153;
        std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&v320, (char **)__p);
        VoiceProcessorV2::GetHardwareModelNameForTuning((std::string *)__p, (uint64_t)this, 0);
        std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v320, (uint64_t)__p);
        if (SHIBYTE(__p[0].__end_) < 0) {
          operator delete(__p[0].__first_);
        }
        VoiceProcessorV2::GetVersionNameForTuning((std::string *)__p, (uint64_t)this);
        std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v320, (uint64_t)__p);
        if (SHIBYTE(__p[0].__end_) < 0) {
          operator delete(__p[0].__first_);
        }
        VoiceProcessorV2::GetFarEndVoiceMixGraphFileNamePrefix((VoiceProcessorV2 *)__p, (uint64_t)this, 0);
        std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v320, (uint64_t)__p);
        if (SHIBYTE(__p[0].__end_) < 0) {
          operator delete(__p[0].__first_);
        }
        VoiceProcessorV2::GetFarEndVoiceMixType((VoiceProcessorV2 *)__p, this);
        if (SHIBYTE(__p[0].__end_) >= 0) {
          std::__split_buffer<std::string>::pointer v154 = (std::__split_buffer<std::string>::pointer)__p;
        }
        else {
          std::__split_buffer<std::string>::pointer v154 = __p[0].__first_;
        }
        if (SHIBYTE(__p[0].__end_) >= 0) {
          std::string::size_type v155 = HIBYTE(__p[0].__end_);
        }
        else {
          std::string::size_type v155 = (std::string::size_type)__p[0].__begin_;
        }
        std::string::append(&v320, (const std::string::value_type *)v154, v155);
        if (SHIBYTE(__p[0].__end_) < 0) {
          operator delete(__p[0].__first_);
        }
        if (VoiceProcessorV2::GetFarEndVoiceMixChannelCount(this) != 1)
        {
          unsigned int v156 = 1885892727;
          if ((**((_DWORD **)this + 292) | 0x20) != 0x70687062) {
            unsigned int v156 = **((_DWORD **)this + 292);
          }
          CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)&valuePtr, v156);
          std::string::basic_string[abi:ne180100]<0>(&v324, (char *)&valuePtr);
          float v157 = std::string::insert(&v324, 0, "_", 1uLL);
          long long v158 = *(_OWORD *)&v157->__r_.__value_.__l.__data_;
          __p[0].__end_ = (std::__split_buffer<std::string>::pointer)v157->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p[0].__first_ = v158;
          v157->__r_.__value_.__l.__size_ = 0;
          v157->__r_.__value_.__r.__words[2] = 0;
          v157->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(__p[0].__end_) >= 0) {
            std::__split_buffer<std::string>::pointer v159 = (std::__split_buffer<std::string>::pointer)__p;
          }
          else {
            std::__split_buffer<std::string>::pointer v159 = __p[0].__first_;
          }
          if (SHIBYTE(__p[0].__end_) >= 0) {
            std::string::size_type v160 = HIBYTE(__p[0].__end_);
          }
          else {
            std::string::size_type v160 = (std::string::size_type)__p[0].__begin_;
          }
          std::string::append(&v320, (const std::string::value_type *)v159, v160);
          if (SHIBYTE(__p[0].__end_) < 0) {
            operator delete(__p[0].__first_);
          }
          if (SHIBYTE(v324.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v324.__r_.__value_.__l.__data_);
          }
        }
        std::string::append(&v320, ".propstrip", 0xAuLL);
        float v161 = (_OWORD *)v323.__pn_.__r_.__value_.__l.__size_;
        if (v323.__pn_.__r_.__value_.__l.__size_ >= v323.__pn_.__r_.__value_.__r.__words[2])
        {
          unint64_t v163 = 0xAAAAAAAAAAAAAAABLL
               * ((uint64_t)(v323.__pn_.__r_.__value_.__l.__size_ - v323.__pn_.__r_.__value_.__r.__words[0]) >> 3);
          unint64_t v164 = v163 + 1;
          if (v163 + 1 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_816;
          }
          if (0x5555555555555556
             * ((uint64_t)(v323.__pn_.__r_.__value_.__r.__words[2] - v323.__pn_.__r_.__value_.__r.__words[0]) >> 3) > v164)
            unint64_t v164 = 0x5555555555555556
                 * ((uint64_t)(v323.__pn_.__r_.__value_.__r.__words[2] - v323.__pn_.__r_.__value_.__r.__words[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL
             * ((uint64_t)(v323.__pn_.__r_.__value_.__r.__words[2] - v323.__pn_.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
            unint64_t v165 = 0xAAAAAAAAAAAAAAALL;
          else {
            unint64_t v165 = v164;
          }
          __p[0].__end_cap_.__value_ = (std::allocator<std::string> *)&v323.__pn_.__r_.__value_.__r.__words[2];
          if (v165) {
            float v166 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>((uint64_t)&v323.__pn_.__r_.__value_.__r.__words[2], v165);
          }
          else {
            float v166 = 0;
          }
          float v167 = v166 + v163;
          __p[0].__first_ = v166;
          __p[0].__begin_ = v167;
          __p[0].__end_cap_.__value_ = &v166[v165];
          long long v168 = *(_OWORD *)&v320.__r_.__value_.__l.__data_;
          v167->__r_.__value_.__r.__words[2] = v320.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v167->__r_.__value_.__l.__data_ = v168;
          memset(&v320, 0, sizeof(v320));
          __p[0].__end_ = v167 + 1;
          std::vector<std::__fs::filesystem::path>::__swap_out_circular_buffer((uint64_t *)&v323, __p);
          std::string::size_type v169 = v323.__pn_.__r_.__value_.__l.__size_;
          std::__split_buffer<std::string>::~__split_buffer(__p);
          v323.__pn_.__r_.__value_.__l.__size_ = v169;
          if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v320.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          long long v162 = *(_OWORD *)&v320.__r_.__value_.__l.__data_;
          *(void *)(v323.__pn_.__r_.__value_.__l.__size_ + 16) = *((void *)&v320.__r_.__value_.__l + 2);
          _OWORD *v161 = v162;
          v323.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v161 + 24;
        }
        float v170 = (std::string *)((char *)this + 8);
        if (*((char *)this + 31) < 0) {
          float v170 = *v300;
        }
        __p[0].__first_ = v170;
        std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&v320, (char **)__p);
        std::string::basic_string[abi:ne180100]<0>(__p, "Generic");
        std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v320, (uint64_t)__p);
        if (SHIBYTE(__p[0].__end_) < 0) {
          operator delete(__p[0].__first_);
        }
        VoiceProcessorV2::GetVersionNameForTuning((std::string *)__p, (uint64_t)this);
        std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v320, (uint64_t)__p);
        if (SHIBYTE(__p[0].__end_) < 0) {
          operator delete(__p[0].__first_);
        }
        VoiceProcessorV2::GetFarEndVoiceMixGraphFileNamePrefix((VoiceProcessorV2 *)__p, (uint64_t)this, 1);
        std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v320, (uint64_t)__p);
        if (SHIBYTE(__p[0].__end_) < 0) {
          operator delete(__p[0].__first_);
        }
        VoiceProcessorV2::GetFarEndVoiceMixType((VoiceProcessorV2 *)__p, this);
        if (SHIBYTE(__p[0].__end_) >= 0) {
          std::__split_buffer<std::string>::pointer v171 = (std::__split_buffer<std::string>::pointer)__p;
        }
        else {
          std::__split_buffer<std::string>::pointer v171 = __p[0].__first_;
        }
        if (SHIBYTE(__p[0].__end_) >= 0) {
          std::string::size_type v172 = HIBYTE(__p[0].__end_);
        }
        else {
          std::string::size_type v172 = (std::string::size_type)__p[0].__begin_;
        }
        std::string::append(&v320, (const std::string::value_type *)v171, v172);
        if (SHIBYTE(__p[0].__end_) < 0) {
          operator delete(__p[0].__first_);
        }
        if (VoiceProcessorV2::GetFarEndVoiceMixChannelCount(this) != 1)
        {
          unsigned int v173 = 1885892727;
          if ((**((_DWORD **)this + 292) | 0x20) != 0x70687062) {
            unsigned int v173 = **((_DWORD **)this + 292);
          }
          CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)&valuePtr, v173);
          std::string::basic_string[abi:ne180100]<0>(&v324, (char *)&valuePtr);
          float v174 = std::string::insert(&v324, 0, "_", 1uLL);
          long long v175 = *(_OWORD *)&v174->__r_.__value_.__l.__data_;
          __p[0].__end_ = (std::__split_buffer<std::string>::pointer)v174->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p[0].__first_ = v175;
          v174->__r_.__value_.__l.__size_ = 0;
          v174->__r_.__value_.__r.__words[2] = 0;
          v174->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(__p[0].__end_) >= 0) {
            std::__split_buffer<std::string>::pointer v176 = (std::__split_buffer<std::string>::pointer)__p;
          }
          else {
            std::__split_buffer<std::string>::pointer v176 = __p[0].__first_;
          }
          if (SHIBYTE(__p[0].__end_) >= 0) {
            std::string::size_type v177 = HIBYTE(__p[0].__end_);
          }
          else {
            std::string::size_type v177 = (std::string::size_type)__p[0].__begin_;
          }
          std::string::append(&v320, (const std::string::value_type *)v176, v177);
          if (SHIBYTE(__p[0].__end_) < 0) {
            operator delete(__p[0].__first_);
          }
          if (SHIBYTE(v324.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v324.__r_.__value_.__l.__data_);
          }
        }
        std::string::append(&v320, ".propstrip", 0xAuLL);
        float v178 = (_OWORD *)v323.__pn_.__r_.__value_.__l.__size_;
        if (v323.__pn_.__r_.__value_.__l.__size_ < v323.__pn_.__r_.__value_.__r.__words[2])
        {
          long long v179 = *(_OWORD *)&v320.__r_.__value_.__l.__data_;
          *(void *)(v323.__pn_.__r_.__value_.__l.__size_ + 16) = *((void *)&v320.__r_.__value_.__l + 2);
          *float v178 = v179;
          std::string::size_type v180 = (std::string::size_type)v178 + 24;
          v323.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v178 + 24;
          goto LABEL_494;
        }
        unint64_t v181 = 0xAAAAAAAAAAAAAAABLL
             * ((uint64_t)(v323.__pn_.__r_.__value_.__l.__size_ - v323.__pn_.__r_.__value_.__r.__words[0]) >> 3);
        unint64_t v182 = v181 + 1;
        if (v181 + 1 <= 0xAAAAAAAAAAAAAAALL)
        {
          if (0x5555555555555556
             * ((uint64_t)(v323.__pn_.__r_.__value_.__r.__words[2] - v323.__pn_.__r_.__value_.__r.__words[0]) >> 3) > v182)
            unint64_t v182 = 0x5555555555555556
                 * ((uint64_t)(v323.__pn_.__r_.__value_.__r.__words[2] - v323.__pn_.__r_.__value_.__r.__words[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL
             * ((uint64_t)(v323.__pn_.__r_.__value_.__r.__words[2] - v323.__pn_.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
            unint64_t v183 = 0xAAAAAAAAAAAAAAALL;
          else {
            unint64_t v183 = v182;
          }
          __p[0].__end_cap_.__value_ = (std::allocator<std::string> *)&v323.__pn_.__r_.__value_.__r.__words[2];
          if (v183) {
            float v184 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>((uint64_t)&v323.__pn_.__r_.__value_.__r.__words[2], v183);
          }
          else {
            float v184 = 0;
          }
          float v185 = v184 + v181;
          __p[0].__first_ = v184;
          __p[0].__begin_ = v185;
          __p[0].__end_cap_.__value_ = &v184[v183];
          long long v186 = *(_OWORD *)&v320.__r_.__value_.__l.__data_;
          v185->__r_.__value_.__r.__words[2] = v320.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v185->__r_.__value_.__l.__data_ = v186;
          memset(&v320, 0, sizeof(v320));
          __p[0].__end_ = v185 + 1;
          std::vector<std::__fs::filesystem::path>::__swap_out_circular_buffer((uint64_t *)&v323, __p);
          std::string::size_type v180 = v323.__pn_.__r_.__value_.__l.__size_;
          std::__split_buffer<std::string>::~__split_buffer(__p);
          v323.__pn_.__r_.__value_.__l.__size_ = v180;
          if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v320.__r_.__value_.__l.__data_);
            std::string::size_type v180 = v323.__pn_.__r_.__value_.__l.__size_;
          }
LABEL_494:
          std::string::size_type v187 = v323.__pn_.__r_.__value_.__r.__words[0];
          if (v323.__pn_.__r_.__value_.__r.__words[0] != v180)
          {
            while (1)
            {
              std::__fs::filesystem::__status((const std::__fs::filesystem::path *)v187, 0);
              if (v319)
              {
                if (v319 != 255) {
                  break;
                }
              }
              float v188 = v309;
              if ((unint64_t)v309 >= v310)
              {
                float v190 = (std::string *)std::vector<std::__fs::filesystem::path>::__push_back_slow_path<std::__fs::filesystem::path const&>((uint64_t)&v308, (long long *)v187);
              }
              else
              {
                if (*(char *)(v187 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(v309, *(const std::string::value_type **)v187, *(void *)(v187 + 8));
                }
                else
                {
                  long long v189 = *(_OWORD *)v187;
                  v309->__r_.__value_.__r.__words[2] = *(void *)(v187 + 16);
                  *(_OWORD *)&v188->__r_.__value_.__l.__data_ = v189;
                }
                float v190 = v188 + 1;
              }
              float v309 = v190;
              v187 += 24;
              if (v187 == v180) {
                goto LABEL_538;
              }
            }
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            float v191 = (void *)VPLogScope(void)::scope;
            if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
            {
              float v192 = (*v191 ? *v191 : MEMORY[0x1E4F14500]);
              if (os_log_type_enabled(v192, OS_LOG_TYPE_DEFAULT))
              {
                float v193 = (std::string *)v187;
                if (*(char *)(v187 + 23) < 0) {
                  float v193 = *(std::string **)v187;
                }
                LODWORD(__p[0].__first_) = 136315650;
                *(std::__split_buffer<std::string>::pointer *)((char *)&__p[0].__first_ + 4) = (std::__split_buffer<std::string>::pointer)"vpSetupDownlinkDSPChain.cpp";
                WORD2(__p[0].__begin_) = 1024;
                *(_DWORD *)((char *)&__p[0].__begin_ + 6) = 133;
                WORD1(__p[0].__end_) = 2080;
                *(std::__split_buffer<std::string>::pointer *)((char *)&__p[0].__end_ + 4) = v193;
                _os_log_impl(&dword_1BB0CE000, v192, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> loading far end voice mix property strip \"%s\"", (uint8_t *)__p, 0x1Cu);
              }
            }
            float v194 = (int *)*((void *)this + 1578);
            if (v194 && (*v301 || *((unsigned char *)this + 15962)))
            {
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              float v195 = (const char *)v187;
              if (*(char *)(v187 + 23) < 0) {
                float v195 = *(const char **)v187;
              }
              CALegacyLog::log(v194, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDSPChains/vpSetupDownlinkDSPChain.cpp", 133, "SetupDownlinkFarEndVoiceMixGraph", "loading far end voice mix property strip \"%s\"", v195);
            }
            if (*(char *)(v187 + 23) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)v187, *(void *)(v187 + 8));
            }
            else
            {
              long long v196 = *(_OWORD *)v187;
              __p[0].__end_ = *(std::__split_buffer<std::string>::pointer *)(v187 + 16);
              *(_OWORD *)&__p[0].__first_ = v196;
            }
            applesauce::CF::make_DataRef((const char *)__p, (CFDataRef *)&v320);
            if (SHIBYTE(__p[0].__end_) < 0) {
              operator delete(__p[0].__first_);
            }
            applesauce::CF::make_DictionaryRef((CFDataRef *)&v320, (applesauce::CF::DictionaryRef *)__p);
            float v197 = (std::string *)*((void *)this + 2040);
            *((void *)this + 2040) = __p[0].__first_;
            __p[0].__first_ = v197;
            if (v197) {
              CFRelease(v197);
            }
            float v198 = v308;
            for (unsigned int k = v309; k != v198; --k)
            {
              if (SHIBYTE(k[-1].__r_.__value_.__r.__words[2]) < 0) {
                operator delete(k[-1].__r_.__value_.__l.__data_);
              }
            }
            float v309 = v198;
            if (v320.__r_.__value_.__r.__words[0]) {
              CFRelease(v320.__r_.__value_.__l.__data_);
            }
          }
LABEL_538:
          __p[0].__first_ = (std::__split_buffer<std::string>::pointer)&v323;
          std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          float v201 = v308;
          float v200 = v309;
          if (v308 != v309)
          {
            uint64_t v202 = MEMORY[0x1E4F14500];
            do
            {
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              float v203 = (void *)VPLogScope(void)::scope;
              if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
              {
                float v204 = (*v203 ? *v203 : v202);
                if (os_log_type_enabled(v204, OS_LOG_TYPE_ERROR))
                {
                  float v205 = v201;
                  if (SHIBYTE(v201->__r_.__value_.__r.__words[2]) < 0) {
                    float v205 = (std::string *)v201->__r_.__value_.__r.__words[0];
                  }
                  LODWORD(__p[0].__first_) = 136315650;
                  *(std::__split_buffer<std::string>::pointer *)((char *)&__p[0].__first_ + 4) = (std::__split_buffer<std::string>::pointer)"vpSetupDownlinkDSPChain.cpp";
                  WORD2(__p[0].__begin_) = 1024;
                  *(_DWORD *)((char *)&__p[0].__begin_ + 6) = 153;
                  WORD1(__p[0].__end_) = 2080;
                  *(std::__split_buffer<std::string>::pointer *)((char *)&__p[0].__end_ + 4) = v205;
                  _os_log_impl(&dword_1BB0CE000, v204, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> file \"%s\" does not exist", (uint8_t *)__p, 0x1Cu);
                }
              }
              float v206 = (int *)*((void *)this + 1578);
              if (v206 && (*v301 || *((unsigned char *)this + 15962)))
              {
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                float v207 = (const char *)v201;
                if (SHIBYTE(v201->__r_.__value_.__r.__words[2]) < 0) {
                  float v207 = (const char *)v201->__r_.__value_.__r.__words[0];
                }
                CALegacyLog::log(v206, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDSPChains/vpSetupDownlinkDSPChain.cpp", 153, "SetupDownlinkFarEndVoiceMixGraph", "file \"%s\" does not exist", v207);
              }
              ++v201;
            }
            while (v201 != v200);
          }
          unsigned int v208 = **((_DWORD **)this + 292) - 1885892674;
          BOOL v209 = v208 > 0x35;
          uint64_t v210 = (1 << v208) & 0x20000100000001;
          BOOL v211 = v209 || v210 == 0;
          if (!v211
            && *((unsigned char *)this + 16460)
            && VoiceProcessorV2::GetFarEndVoiceMixChannelCount(this) == 2)
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            float v212 = (std::string *)((char *)this + 8);
            unsigned int v213 = 1885892727;
            float v214 = (void *)VPLogScope(void)::scope;
            if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
            {
              float v215 = (*v214 ? *v214 : MEMORY[0x1E4F14500]);
              if (os_log_type_enabled(v215, OS_LOG_TYPE_DEFAULT))
              {
                LODWORD(__p[0].__first_) = 136315394;
                *(std::__split_buffer<std::string>::pointer *)((char *)&__p[0].__first_ + 4) = (std::__split_buffer<std::string>::pointer)"vpSetupDownlinkDSPChain.cpp";
                WORD2(__p[0].__begin_) = 1024;
                *(_DWORD *)((char *)&__p[0].__begin_ + 6) = 158;
                _os_log_impl(&dword_1BB0CE000, v215, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> loading far end voice mix headtracking specific aupreset", (uint8_t *)__p, 0x12u);
              }
            }
            float v216 = (int *)*((void *)this + 1578);
            if (v216 && (*v301 || *((unsigned char *)this + 15962)))
            {
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              CALegacyLog::log(v216, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDSPChains/vpSetupDownlinkDSPChain.cpp", 158, "SetupDownlinkFarEndVoiceMixGraph", "loading far end voice mix headtracking specific aupreset");
            }
            *(void *)bytes = 0;
            uint64_t v306 = 0;
            unint64_t v307 = 0;
            BOOL v303 = 0;
            uint64_t v304 = 0;
            *(void *)long long v302 = 0;
            if (*((char *)this + 31) < 0) {
              float v212 = *v300;
            }
            __p[0].__first_ = v212;
            std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&v323.__pn_, (char **)__p);
            VoiceProcessorV2::GetHardwareModelNameForTuning((std::string *)__p, (uint64_t)this, 0);
            std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v323.__pn_, (uint64_t)__p);
            if (SHIBYTE(__p[0].__end_) < 0) {
              operator delete(__p[0].__first_);
            }
            if (std::__fs::filesystem::path::__filename(&v323).__size_) {
              std::string::push_back(&v323.__pn_, 47);
            }
            std::string::append[abi:ne180100]<char const*,0>(&v323.__pn_, "AU", "");
            VoiceProcessorV2::GetDeviceCodeNameForTuning((VoiceProcessorV2 *)&valuePtr, (uint64_t)this, 0);
            if (*((unsigned char *)this + 60))
            {
              if (SHIBYTE(valuePtr.__pn_.__r_.__value_.__r.__words[2]) < 0)
              {
                valuePtr.__pn_.__r_.__value_.__l.__size_ = 0;
                p_std::__fs::filesystem::path valuePtr = (std::__fs::filesystem::path *)valuePtr.__pn_.__r_.__value_.__r.__words[0];
              }
              else
              {
                *((unsigned char *)&valuePtr.__pn_.__r_.__value_.__s + 23) = 0;
                p_std::__fs::filesystem::path valuePtr = &valuePtr;
              }
              p_valuePtr->__pn_.__r_.__value_.__s.__data_[0] = 0;
            }
            if (SHIBYTE(valuePtr.__pn_.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&__replacement.__pn_, valuePtr.__pn_.__r_.__value_.__l.__data_, valuePtr.__pn_.__r_.__value_.__l.__size_);
            }
            else {
              std::__fs::filesystem::path __replacement = valuePtr;
            }
            if ((**((_DWORD **)this + 292) | 0x20) != 0x70687062) {
              unsigned int v213 = **((_DWORD **)this + 292);
            }
            memset(__p, 0, 24);
            if ((__replacement.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v219 = HIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v219 = __replacement.__pn_.__r_.__value_.__l.__size_;
            }
            if (v219)
            {
              if ((__replacement.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                p_replacement = &__replacement;
              }
              else {
                p_replacement = (std::__fs::filesystem::path *)__replacement.__pn_.__r_.__value_.__r.__words[0];
              }
              std::string::append((std::string *)__p, (const std::string::value_type *)p_replacement, v219);
              std::string::append((std::string *)__p, "-", 1uLL);
            }
            std::string::append((std::string *)__p, "vp", 2uLL);
            strcpy(__s, "aufx");
            std::string::basic_string[abi:ne180100]<0>(&v324, __s);
            float v221 = std::string::insert(&v324, 0, "-", 1uLL);
            long long v222 = *(_OWORD *)&v221->__r_.__value_.__l.__data_;
            v320.__r_.__value_.__r.__words[2] = v221->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v320.__r_.__value_.__l.__data_ = v222;
            v221->__r_.__value_.__l.__size_ = 0;
            v221->__r_.__value_.__r.__words[2] = 0;
            v221->__r_.__value_.__r.__words[0] = 0;
            if ((v320.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              float v223 = &v320;
            }
            else {
              float v223 = (std::string *)v320.__r_.__value_.__r.__words[0];
            }
            if ((v320.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v224 = HIBYTE(v320.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v224 = v320.__r_.__value_.__l.__size_;
            }
            std::string::append((std::string *)__p, (const std::string::value_type *)v223, v224);
            if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v320.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v324.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v324.__r_.__value_.__l.__data_);
            }
            strcpy(__s, "ftac");
            std::string::basic_string[abi:ne180100]<0>(&v324, __s);
            float v225 = std::string::insert(&v324, 0, "-", 1uLL);
            long long v226 = *(_OWORD *)&v225->__r_.__value_.__l.__data_;
            v320.__r_.__value_.__r.__words[2] = v225->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v320.__r_.__value_.__l.__data_ = v226;
            v225->__r_.__value_.__l.__size_ = 0;
            v225->__r_.__value_.__r.__words[2] = 0;
            v225->__r_.__value_.__r.__words[0] = 0;
            if ((v320.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              float v227 = &v320;
            }
            else {
              float v227 = (std::string *)v320.__r_.__value_.__r.__words[0];
            }
            if ((v320.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v228 = HIBYTE(v320.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v228 = v320.__r_.__value_.__l.__size_;
            }
            std::string::append((std::string *)__p, (const std::string::value_type *)v227, v228);
            if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v320.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v324.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v324.__r_.__value_.__l.__data_);
            }
            strcpy(__s, "appl");
            std::string::basic_string[abi:ne180100]<0>(&v324, __s);
            float v229 = std::string::insert(&v324, 0, "-", 1uLL);
            long long v230 = *(_OWORD *)&v229->__r_.__value_.__l.__data_;
            v320.__r_.__value_.__r.__words[2] = v229->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v320.__r_.__value_.__l.__data_ = v230;
            v229->__r_.__value_.__l.__size_ = 0;
            v229->__r_.__value_.__r.__words[2] = 0;
            v229->__r_.__value_.__r.__words[0] = 0;
            if ((v320.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              float v231 = &v320;
            }
            else {
              float v231 = (std::string *)v320.__r_.__value_.__r.__words[0];
            }
            if ((v320.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v232 = HIBYTE(v320.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v232 = v320.__r_.__value_.__l.__size_;
            }
            std::string::append((std::string *)__p, (const std::string::value_type *)v231, v232);
            if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v320.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v324.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v324.__r_.__value_.__l.__data_);
            }
            int v233 = bswap32(v213);
            *(_DWORD *)__s = v233;
            if (((char)v233 - 32) > 0x5E
              || (((__int16)v233 >> 8) - 32) > 0x5E
              || ((v233 << 8 >> 24) - 32) > 0x5E
              || ((v233 >> 24) - 32) > 0x5E)
            {
              std::to_string(&v324, v213);
            }
            else
            {
              __s[4] = 0;
              std::string::basic_string[abi:ne180100]<0>(&v324, __s);
            }
            float v234 = std::string::insert(&v324, 0, "-", 1uLL);
            long long v235 = *(_OWORD *)&v234->__r_.__value_.__l.__data_;
            v320.__r_.__value_.__r.__words[2] = v234->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v320.__r_.__value_.__l.__data_ = v235;
            v234->__r_.__value_.__l.__size_ = 0;
            v234->__r_.__value_.__r.__words[2] = 0;
            v234->__r_.__value_.__r.__words[0] = 0;
            if ((v320.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              float v236 = &v320;
            }
            else {
              float v236 = (std::string *)v320.__r_.__value_.__r.__words[0];
            }
            if ((v320.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v237 = HIBYTE(v320.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v237 = v320.__r_.__value_.__l.__size_;
            }
            std::string::append((std::string *)__p, (const std::string::value_type *)v236, v237);
            if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v320.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v324.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v324.__r_.__value_.__l.__data_);
            }
            std::string::append((std::string *)__p, "-dlnk", 5uLL);
            strcpy(__s, "shtp");
            std::string::basic_string[abi:ne180100]<0>(&v324, __s);
            float v238 = std::string::insert(&v324, 0, "-", 1uLL);
            long long v239 = *(_OWORD *)&v238->__r_.__value_.__l.__data_;
            v320.__r_.__value_.__r.__words[2] = v238->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v320.__r_.__value_.__l.__data_ = v239;
            v238->__r_.__value_.__l.__size_ = 0;
            v238->__r_.__value_.__r.__words[2] = 0;
            v238->__r_.__value_.__r.__words[0] = 0;
            if ((v320.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              float v240 = &v320;
            }
            else {
              float v240 = (std::string *)v320.__r_.__value_.__r.__words[0];
            }
            if ((v320.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v241 = HIBYTE(v320.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v241 = v320.__r_.__value_.__l.__size_;
            }
            std::string::append((std::string *)__p, (const std::string::value_type *)v240, v241);
            if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v320.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v324.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v324.__r_.__value_.__l.__data_);
            }
            *(_OWORD *)&v320.__r_.__value_.__l.__data_ = *(_OWORD *)&__p[0].__first_;
            v320.__r_.__value_.__r.__words[2] = (std::string::size_type)__p[0].__end_;
            std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v323.__pn_, (uint64_t)&v320);
            if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v320.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__replacement.__pn_.__r_.__value_.__l.__data_);
            }
            std::string::append(&v323.__pn_, ".aupreset", 9uLL);
            __p[0].__end_cap_.__value_ = (std::allocator<std::string> *)&v304;
            float v242 = (std::string *)operator new(0x18uLL);
            __p[0].__first_ = v242;
            __p[0].__begin_ = v242;
            *(std::__fs::filesystem::path *)float v242 = v323;
            memset(&v323, 0, sizeof(v323));
            __p[0].__end_ = v242 + 1;
            __p[0].__end_cap_.__value_ = v242 + 1;
            std::vector<std::__fs::filesystem::path>::__swap_out_circular_buffer((uint64_t *)v302, __p);
            float v243 = v303;
            std::__split_buffer<std::string>::~__split_buffer(__p);
            BOOL v303 = v243;
            if (SHIBYTE(valuePtr.__pn_.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(valuePtr.__pn_.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v323.__pn_.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v323.__pn_.__r_.__value_.__l.__data_);
            }
            float v244 = *(long long **)v302;
            float v245 = v303;
            if (*(long long **)v302 != v303)
            {
              while (1)
              {
                std::__fs::filesystem::__status((const std::__fs::filesystem::path *)v244, 0);
                if (v324.__r_.__value_.__s.__data_[0])
                {
                  if (v324.__r_.__value_.__s.__data_[0] != 255) {
                    break;
                  }
                }
                float v246 = v306;
                if ((unint64_t)v306 >= v307)
                {
                  float v248 = (std::string *)std::vector<std::__fs::filesystem::path>::__push_back_slow_path<std::__fs::filesystem::path const&>((uint64_t)bytes, v244);
                }
                else
                {
                  if (*((char *)v244 + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external(v306, *(const std::string::value_type **)v244, *((void *)v244 + 1));
                  }
                  else
                  {
                    long long v247 = *v244;
                    v306->__r_.__value_.__r.__words[2] = *((void *)v244 + 2);
                    *(_OWORD *)&v246->__r_.__value_.__l.__data_ = v247;
                  }
                  float v248 = v246 + 1;
                }
                uint64_t v306 = v248;
                float v244 = (long long *)((char *)v244 + 24);
                if (v244 == v245) {
                  goto LABEL_730;
                }
              }
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              float v249 = (void *)VPLogScope(void)::scope;
              if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
              {
                float v250 = (*v249 ? *v249 : MEMORY[0x1E4F14500]);
                if (os_log_type_enabled(v250, OS_LOG_TYPE_DEFAULT))
                {
                  float v251 = (std::string *)v244;
                  if (*((char *)v244 + 23) < 0) {
                    float v251 = *(std::string **)v244;
                  }
                  LODWORD(__p[0].__first_) = 136315650;
                  *(std::__split_buffer<std::string>::pointer *)((char *)&__p[0].__first_ + 4) = (std::__split_buffer<std::string>::pointer)"vpSetupDownlinkDSPChain.cpp";
                  WORD2(__p[0].__begin_) = 1024;
                  *(_DWORD *)((char *)&__p[0].__begin_ + 6) = 166;
                  WORD1(__p[0].__end_) = 2080;
                  *(std::__split_buffer<std::string>::pointer *)((char *)&__p[0].__end_ + 4) = v251;
                  _os_log_impl(&dword_1BB0CE000, v250, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> loading far end voice mix aupreset \"%s\"", (uint8_t *)__p, 0x1Cu);
                }
              }
              float v252 = (int *)*((void *)this + 1578);
              if (v252 && (*v301 || *((unsigned char *)this + 15962)))
              {
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                float v253 = (const char *)v244;
                if (*((char *)v244 + 23) < 0) {
                  float v253 = *(const char **)v244;
                }
                CALegacyLog::log(v252, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDSPChains/vpSetupDownlinkDSPChain.cpp", 166, "SetupDownlinkFarEndVoiceMixGraph", "loading far end voice mix aupreset \"%s\"", v253);
              }
              if (*((char *)v244 + 23) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)v244, *((void *)v244 + 1));
              }
              else
              {
                long long v254 = *v244;
                __p[0].__end_ = (std::__split_buffer<std::string>::pointer)*((void *)v244 + 2);
                *(_OWORD *)&__p[0].__first_ = v254;
              }
              applesauce::CF::make_DataRef((const char *)__p, (CFDataRef *)&v324);
              if (SHIBYTE(__p[0].__end_) < 0) {
                operator delete(__p[0].__first_);
              }
              applesauce::CF::make_DictionaryRef((CFDataRef *)&v324, (applesauce::CF::DictionaryRef *)&v323);
              LODWORD(__replacement.__pn_.__r_.__value_.__l.__data_) = 1936225392;
              valuePtr.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)CFNumberCreate(0, kCFNumberIntType, &__replacement);
              if (!valuePtr.__pn_.__r_.__value_.__r.__words[0])
              {
                float v256 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v256, "Could not construct");
              }
              applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[3],applesauce::CF::NumberRef>((applesauce::CF::TypeRef *)__p, (const void **)&valuePtr.__pn_.__r_.__value_.__l.__data_);
              applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&__p[0].__end_, "cfobject");
              float v255 = (std::string *)v323.__pn_.__r_.__value_.__r.__words[0];
              if (v323.__pn_.__r_.__value_.__r.__words[0]) {
                CFRetain(v323.__pn_.__r_.__value_.__l.__data_);
              }
              __p[0].__end_cap_.__value_ = v255;
              v320.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
              v320.__r_.__value_.__l.__size_ = 2;
              CFDictionaryRef CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)&v320);
              float v258 = (const void *)*((void *)this + 2044);
              *((void *)this + 2044) = CFDictionaryRef;
              if (v258) {
                CFRelease(v258);
              }
              for (uint64_t m = 0; m != -32; m -= 16)
              {
                float v260 = *(std::string **)((char *)&__p[0].__end_cap_.__value_ + m);
                if (v260) {
                  CFRelease(v260);
                }
                float v261 = *(std::__split_buffer<std::string>::pointer *)((char *)&__p[0].__end_ + m);
                if (v261) {
                  CFRelease(v261);
                }
              }
              if (valuePtr.__pn_.__r_.__value_.__r.__words[0]) {
                CFRelease(valuePtr.__pn_.__r_.__value_.__l.__data_);
              }
              long long v262 = *(std::string **)bytes;
              for (unsigned int n = v306; n != v262; --n)
              {
                if (SHIBYTE(n[-1].__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(n[-1].__r_.__value_.__l.__data_);
                }
              }
              uint64_t v306 = v262;
              if (v323.__pn_.__r_.__value_.__r.__words[0]) {
                CFRelease(v323.__pn_.__r_.__value_.__l.__data_);
              }
              if (v324.__r_.__value_.__r.__words[0]) {
                CFRelease(v324.__r_.__value_.__l.__data_);
              }
            }
LABEL_730:
            __p[0].__first_ = (std::__split_buffer<std::string>::pointer)v302;
            std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            float v264 = *(std::string **)bytes;
            int v265 = v306;
            if (*(std::string **)bytes != v306)
            {
              uint64_t v266 = MEMORY[0x1E4F14500];
              do
              {
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                int v267 = (void *)VPLogScope(void)::scope;
                if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
                {
                  int v268 = (*v267 ? *v267 : v266);
                  if (os_log_type_enabled(v268, OS_LOG_TYPE_ERROR))
                  {
                    float v269 = v264;
                    if (SHIBYTE(v264->__r_.__value_.__r.__words[2]) < 0) {
                      float v269 = (std::string *)v264->__r_.__value_.__r.__words[0];
                    }
                    LODWORD(__p[0].__first_) = 136315650;
                    *(std::__split_buffer<std::string>::pointer *)((char *)&__p[0].__first_ + 4) = (std::__split_buffer<std::string>::pointer)"vpSetupDownlinkDSPChain.cpp";
                    WORD2(__p[0].__begin_) = 1024;
                    *(_DWORD *)((char *)&__p[0].__begin_ + 6) = 190;
                    WORD1(__p[0].__end_) = 2080;
                    *(std::__split_buffer<std::string>::pointer *)((char *)&__p[0].__end_ + 4) = v269;
                    _os_log_impl(&dword_1BB0CE000, v268, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> file \"%s\" does not exist", (uint8_t *)__p, 0x1Cu);
                  }
                }
                float v270 = (int *)*((void *)this + 1578);
                if (v270 && (*v301 || *((unsigned char *)this + 15962)))
                {
                  if (VPLogScope(void)::once != -1) {
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                  }
                  float v271 = (const char *)v264;
                  if (SHIBYTE(v264->__r_.__value_.__r.__words[2]) < 0) {
                    float v271 = (const char *)v264->__r_.__value_.__r.__words[0];
                  }
                  CALegacyLog::log(v270, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDSPChains/vpSetupDownlinkDSPChain.cpp", 190, "SetupDownlinkFarEndVoiceMixGraph", "file \"%s\" does not exist", v271);
                }
                ++v264;
              }
              while (v264 != v265);
            }
            __p[0].__first_ = (std::__split_buffer<std::string>::pointer)bytes;
            std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          }
          else
          {
            float v218 = (const void *)*((void *)this + 2044);
            *((void *)this + 2044) = 0;
            if (v218) {
              CFRelease(v218);
            }
          }
          if (!*((void *)this + 2037)
            || !*((void *)this + 2038)
            || !*((void *)this + 2039)
            || !*((void *)this + 2040))
          {
            goto LABEL_812;
          }
          *((void *)this + 1112) |= 1uLL;
          if (*((_DWORD *)this + 542))
          {
            LODWORD(valuePtr.__pn_.__r_.__value_.__l.__data_) = 1919509619;
            v323.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)CFNumberCreate(0, kCFNumberIntType, &valuePtr);
            if (!v323.__pn_.__r_.__value_.__r.__words[0])
            {
              float v294 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v294, "Could not construct");
            }
            applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[3],applesauce::CF::NumberRef>((applesauce::CF::TypeRef *)__p, (const void **)&v323.__pn_.__r_.__value_.__l.__data_);
            CFDataRef v272 = CFDataCreate(0, *((const UInt8 **)this + 270), 8 * *((unsigned int *)this + 542));
            if (!v272)
            {
              float v295 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v295, "Could not construct");
            }
            applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&valuePtr, v272);
            applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[5],applesauce::CF::DataRef>((applesauce::CF::TypeRef *)&__p[0].__end_, "data", (const void **)&valuePtr.__pn_.__r_.__value_.__l.__data_);
            v320.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
            v320.__r_.__value_.__l.__size_ = 2;
            CFDictionaryRef v273 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)&v320);
            float v274 = (const void *)*((void *)this + 2041);
            *((void *)this + 2041) = v273;
            if (v274) {
              CFRelease(v274);
            }
            for (iunsigned int i = 0; ii != -32; ii -= 16)
            {
              int v276 = *(std::string **)((char *)&__p[0].__end_cap_.__value_ + ii);
              if (v276) {
                CFRelease(v276);
              }
              uint64_t v277 = *(std::__split_buffer<std::string>::pointer *)((char *)&__p[0].__end_ + ii);
              if (v277) {
                CFRelease(v277);
              }
            }
            if (valuePtr.__pn_.__r_.__value_.__r.__words[0]) {
              CFRelease(valuePtr.__pn_.__r_.__value_.__l.__data_);
            }
            float v278 = (const void *)v323.__pn_.__r_.__value_.__r.__words[0];
            if (!v323.__pn_.__r_.__value_.__r.__words[0])
            {
LABEL_774:
              if (VoiceProcessorV2::GetFarEndVoiceMixChannelCount(this) == 2)
              {
                int v279 = *((unsigned __int8 *)this + 16460);
                if (*((unsigned char *)this + 16460))
                {
                  if (*((_DWORD *)this + 19) == 2) {
                    int v279 = 4;
                  }
                  else {
                    int v279 = 5;
                  }
                }
                *(_DWORD *)bytes = v279;
                LODWORD(valuePtr.__pn_.__r_.__value_.__l.__data_) = 1936746612;
                v323.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                if (!v323.__pn_.__r_.__value_.__r.__words[0])
                {
                  float v296 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v296, "Could not construct");
                }
                applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[3],applesauce::CF::NumberRef>((applesauce::CF::TypeRef *)__p, (const void **)&v323.__pn_.__r_.__value_.__l.__data_);
                CFDataRef v280 = CFDataCreate(0, bytes, 4);
                if (!v280)
                {
                  int v297 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v297, "Could not construct");
                }
                applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&valuePtr, v280);
                applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[5],applesauce::CF::DataRef>((applesauce::CF::TypeRef *)&__p[0].__end_, "data", (const void **)&valuePtr.__pn_.__r_.__value_.__l.__data_);
                v320.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                v320.__r_.__value_.__l.__size_ = 2;
                CFDictionaryRef v281 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)&v320);
                uint64_t v282 = (const void *)*((void *)this + 2042);
                *((void *)this + 2042) = v281;
                if (v282) {
                  CFRelease(v282);
                }
                for (juint64_t j = 0; jj != -32; jj -= 16)
                {
                  float v284 = *(std::string **)((char *)&__p[0].__end_cap_.__value_ + jj);
                  if (v284) {
                    CFRelease(v284);
                  }
                  float v285 = *(std::__split_buffer<std::string>::pointer *)((char *)&__p[0].__end_ + jj);
                  if (v285) {
                    CFRelease(v285);
                  }
                }
                if (valuePtr.__pn_.__r_.__value_.__r.__words[0]) {
                  CFRelease(valuePtr.__pn_.__r_.__value_.__l.__data_);
                }
                if (v323.__pn_.__r_.__value_.__r.__words[0]) {
                  CFRelease(v323.__pn_.__r_.__value_.__l.__data_);
                }
                *(_DWORD *)long long v302 = *((unsigned __int8 *)this + 16460);
                LODWORD(valuePtr.__pn_.__r_.__value_.__l.__data_) = 1936225381;
                v323.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                if (!v323.__pn_.__r_.__value_.__r.__words[0])
                {
                  float v298 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v298, "Could not construct");
                }
                applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[3],applesauce::CF::NumberRef>((applesauce::CF::TypeRef *)__p, (const void **)&v323.__pn_.__r_.__value_.__l.__data_);
                CFDataRef v286 = CFDataCreate(0, v302, 4);
                if (!v286)
                {
                  float v299 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v299, "Could not construct");
                }
                applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&valuePtr, v286);
                applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[5],applesauce::CF::DataRef>((applesauce::CF::TypeRef *)&__p[0].__end_, "data", (const void **)&valuePtr.__pn_.__r_.__value_.__l.__data_);
                v320.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                v320.__r_.__value_.__l.__size_ = 2;
                CFDictionaryRef v287 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)&v320);
                float v288 = (const void *)*((void *)this + 2043);
                *((void *)this + 2043) = v287;
                if (v288) {
                  CFRelease(v288);
                }
                for (kunsigned int k = 0; kk != -32; kk -= 16)
                {
                  float v290 = *(std::string **)((char *)&__p[0].__end_cap_.__value_ + kk);
                  if (v290) {
                    CFRelease(v290);
                  }
                  float v291 = *(std::__split_buffer<std::string>::pointer *)((char *)&__p[0].__end_ + kk);
                  if (v291) {
                    CFRelease(v291);
                  }
                }
                if (valuePtr.__pn_.__r_.__value_.__r.__words[0]) {
                  CFRelease(valuePtr.__pn_.__r_.__value_.__l.__data_);
                }
                float v292 = (const void *)v323.__pn_.__r_.__value_.__r.__words[0];
                if (!v323.__pn_.__r_.__value_.__r.__words[0]) {
                  goto LABEL_811;
                }
              }
              else
              {
                double v293 = (const void *)*((void *)this + 2042);
                *((void *)this + 2042) = 0;
                if (v293) {
                  CFRelease(v293);
                }
                float v292 = (const void *)*((void *)this + 2043);
                *((void *)this + 2043) = 0;
                if (!v292) {
                  goto LABEL_811;
                }
              }
              CFRelease(v292);
LABEL_811:
              atomic_fetch_add((atomic_ullong *volatile)this + 2056, 1uLL);
LABEL_812:
              __p[0].__first_ = (std::__split_buffer<std::string>::pointer)&v308;
              std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              __p[0].__first_ = (std::__split_buffer<std::string>::pointer)&v311;
              std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              __p[0].__first_ = (std::__split_buffer<std::string>::pointer)&v314;
              std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              return;
            }
          }
          else
          {
            float v278 = (const void *)*((void *)this + 2041);
            *((void *)this + 2041) = 0;
            if (!v278) {
              goto LABEL_774;
            }
          }
          CFRelease(v278);
          goto LABEL_774;
        }
LABEL_816:
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      }
LABEL_815:
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
LABEL_814:
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  }
}

void sub_1BB4D104C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,CFTypeRef cf,void *__pa,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,std::__split_buffer<std::string> *a49,CFTypeRef cfa,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void **a57)
{
  a57 = (void **)&a19;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&a57);
  a57 = (void **)&a22;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&a57);
  a57 = (void **)&a25;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&a57);
  a57 = (void **)&a28;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&a57);
  a57 = (void **)&a31;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&a57);
  _Unwind_Resume(a1);
}

void sub_1BB4D13EC(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1BB4D13F4);
  }
  __clang_call_terminate(a1);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[3],applesauce::CF::NumberRef>(applesauce::CF::TypeRef *a1, const void **a2)
{
  applesauce::CF::TypeRef::TypeRef(a1, "ID");
  uint64_t v4 = *a2;
  if (v4) {
    CFRetain(v4);
  }
  *((void *)a1 + 1) = v4;
  return a1;
}

void VoiceProcessorV2::SetupDownlinkFarEndVoiceDNNVADGraph(VoiceProcessorV2 *this, BOOL a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5)
{
  v71[20] = *MEMORY[0x1E4F143B8];
  BOOL v61 = a2;
  *((void *)this + 1112) &= ~2uLL;
  VoiceProcessorV2::ReadDefaultsOverride(@"vp_enable_far_end_voice_dnn_vad", 0, &v61, 0, a5);
  if (v61)
  {
    uint64_t v6 = (char *)this + 8;
    int v7 = (char *)this + 8;
    if (*((char *)this + 31) < 0) {
      int v7 = *(char **)v6;
    }
    buf[0].__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
    std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&v68, &buf[0].__pn_.__r_.__value_.__l.__data_);
    std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>(&v67.__pn_, "Generic");
    std::__fs::filesystem::operator/[abi:ne180100](&v67, (uint64_t)&v68, (std::__fs::filesystem::path *)&cf);
    VoiceProcessorV2::GetVersionNameForTuning(&v65, (uint64_t)this);
    __replacement.__pn_ = v65;
    memset(&v65, 0, sizeof(v65));
    std::__fs::filesystem::operator/[abi:ne180100](&__replacement, (uint64_t)&cf, buf);
    std::__fs::filesystem::path::path[abi:ne180100]<char [29],void>(&__p, "gen_far_end_voice_nnvad.dspg");
    std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__p, (uint64_t)buf, &v60);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(buf[0].__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__pn_.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__replacement.__pn_.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(cf.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v67.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v67.__pn_.__r_.__value_.__l.__data_);
    }
    unint64_t v8 = (char *)this + 15961;
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v68.__r_.__value_.__l.__data_);
    }
    std::__fs::filesystem::__status(&v60, 0);
    if (v62 && v62 != 255)
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      unint64_t v18 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(4, VPLogScope(void)::scope, 0))
      {
        uint64_t v19 = (*v18 ? *v18 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
        {
          std::__split_buffer<std::string>::pointer v20 = &v60;
          if ((v60.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::__split_buffer<std::string>::pointer v20 = (std::__fs::filesystem::path *)v60.__pn_.__r_.__value_.__r.__words[0];
          }
          LODWORD(buf[0].__pn_.__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)buf[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpSetupDownlinkDSPChain.cpp";
          WORD2(buf[0].__pn_.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf[0].__pn_.__r_.__value_.__r.__words[1] + 6) = 270;
          WORD1(buf[0].__pn_.__r_.__value_.__r.__words[2]) = 2080;
          *(std::string::size_type *)((char *)&buf[0].__pn_.__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v20;
          _os_log_impl(&dword_1BB0CE000, v19, OS_LOG_TYPE_INFO, "%25s:%-5d  <vp> loading far end voice DNN VAD graph \"%s\"", (uint8_t *)buf, 0x1Cu);
        }
      }
      uint64_t v21 = (int *)*((void *)this + 1578);
      if (v21 && (*v8 || *((unsigned char *)this + 15962)))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        uint64_t v22 = &v60;
        if ((v60.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v22 = (std::__fs::filesystem::path *)v60.__pn_.__r_.__value_.__r.__words[0];
        }
        CALegacyLog::log(v21, 4, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDSPChains/vpSetupDownlinkDSPChain.cpp", 270, "SetupDownlinkFarEndVoiceDNNVADGraph", "loading far end voice DNN VAD graph \"%s\"", (const char *)v22);
      }
      std::ifstream::basic_ifstream((uint64_t *)buf);
      std::string::__init_with_sentinel[abi:ne180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(&cf, *(void **)((char *)&buf[1].__pn_.__r_.__value_.__r.__words[2]+ *(void *)(buf[0].__pn_.__r_.__value_.__r.__words[0] - 24)));
      if ((cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_std::string cf = &cf;
      }
      else {
        p_std::string cf = (std::string *)cf.__r_.__value_.__r.__words[0];
      }
      if (p_cf)
      {
        if ((cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          CFIndex size = HIBYTE(cf.__r_.__value_.__r.__words[2]);
        }
        else {
          CFIndex size = cf.__r_.__value_.__l.__size_;
        }
        CFStringRef v25 = CFStringCreateWithBytes(0, (const UInt8 *)p_cf, size, 0x8000100u, 0);
        if (!v25)
        {
          exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
        }
      }
      else
      {
        CFStringRef v25 = 0;
      }
      uint64_t v27 = (const void *)*((void *)this + 2058);
      *((void *)this + 2058) = v25;
      if (v27) {
        CFRelease(v27);
      }
      std::__fs::filesystem::path::filename[abi:ne180100](&v60, (uint64_t)&v67);
      memset(&__replacement, 0, sizeof(__replacement));
      uint64_t v28 = std::__fs::filesystem::path::replace_extension(&v67, &__replacement);
      if (SHIBYTE(v28->__pn_.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v68, v28->__pn_.__r_.__value_.__l.__data_, v28->__pn_.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v29 = *(_OWORD *)&v28->__pn_.__r_.__value_.__l.__data_;
        v68.__r_.__value_.__r.__words[2] = v28->__pn_.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v29;
      }
      if (SHIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__replacement.__pn_.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v67.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v67.__pn_.__r_.__value_.__l.__data_);
      }
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v30 = &v68;
      }
      else {
        std::string::size_type v30 = (std::string *)v68.__r_.__value_.__r.__words[0];
      }
      if (v30)
      {
        if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          CFIndex v31 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
        }
        else {
          CFIndex v31 = v68.__r_.__value_.__l.__size_;
        }
        CFStringRef v32 = CFStringCreateWithBytes(0, (const UInt8 *)v30, v31, 0x8000100u, 0);
        if (!v32)
        {
          std::string::size_type v33 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v33, "Could not construct");
        }
      }
      else
      {
        CFStringRef v32 = 0;
      }
      float v34 = (const void *)*((void *)this + 2059);
      *((void *)this + 2059) = v32;
      if (v34) {
        CFRelease(v34);
      }
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v68.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(cf.__r_.__value_.__l.__data_);
      }
      buf[0].__pn_.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA3F8];
      *(std::string::size_type *)((char *)buf[0].__pn_.__r_.__value_.__r.__words
                                + *(void *)(buf[0].__pn_.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
      MEMORY[0x1C185CC40](&buf[0].__pn_.__r_.__value_.__r.__words[2]);
      std::istream::~istream();
      MEMORY[0x1C185D210](v71);
    }
    else
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      BOOL v9 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        long long v10 = (*v9 ? *v9 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          unint64_t v11 = &v60;
          if ((v60.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            unint64_t v11 = (std::__fs::filesystem::path *)v60.__pn_.__r_.__value_.__r.__words[0];
          }
          LODWORD(buf[0].__pn_.__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)buf[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpSetupDownlinkDSPChain.cpp";
          WORD2(buf[0].__pn_.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf[0].__pn_.__r_.__value_.__r.__words[1] + 6) = 279;
          WORD1(buf[0].__pn_.__r_.__value_.__r.__words[2]) = 2080;
          *(std::string::size_type *)((char *)&buf[0].__pn_.__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v11;
          _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> file \"%s\" does not exist", (uint8_t *)buf, 0x1Cu);
        }
      }
      unint64_t v12 = (int *)*((void *)this + 1578);
      if (v12 && (*v8 || *((unsigned char *)this + 15962)))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        unint64_t v13 = &v60;
        if ((v60.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          unint64_t v13 = (std::__fs::filesystem::path *)v60.__pn_.__r_.__value_.__r.__words[0];
        }
        CALegacyLog::log(v12, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDSPChains/vpSetupDownlinkDSPChain.cpp", 279, "SetupDownlinkFarEndVoiceDNNVADGraph", "file \"%s\" does not exist", (const char *)v13);
      }
    }
    long long v35 = (char *)this + 8;
    if (*((char *)this + 31) < 0) {
      long long v35 = *(char **)v6;
    }
    buf[0].__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
    std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&v68, &buf[0].__pn_.__r_.__value_.__l.__data_);
    std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>(&v67.__pn_, "Generic");
    std::__fs::filesystem::operator/[abi:ne180100](&v67, (uint64_t)&v68, (std::__fs::filesystem::path *)&cf);
    VoiceProcessorV2::GetVersionNameForTuning(&v65, (uint64_t)this);
    __replacement.__pn_ = v65;
    memset(&v65, 0, sizeof(v65));
    std::__fs::filesystem::operator/[abi:ne180100](&__replacement, (uint64_t)&cf, buf);
    memset(&__p, 0, sizeof(__p));
    std::string::append[abi:ne180100]<char const*,0>(&__p, "gen_far_end_voice_nnvad.austrip", "");
    std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__p, (uint64_t)buf, &v59);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(buf[0].__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__pn_.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__replacement.__pn_.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(cf.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v67.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v67.__pn_.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v68.__r_.__value_.__l.__data_);
    }
    std::__fs::filesystem::__status(&v59, 0);
    if (v63 && v63 != 255)
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      int v41 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(4, VPLogScope(void)::scope, 0))
      {
        long long v42 = (*v41 ? *v41 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
        {
          std::string::size_type v43 = &v59;
          if ((v59.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v43 = (std::__fs::filesystem::path *)v59.__pn_.__r_.__value_.__r.__words[0];
          }
          LODWORD(buf[0].__pn_.__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)buf[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpSetupDownlinkDSPChain.cpp";
          WORD2(buf[0].__pn_.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf[0].__pn_.__r_.__value_.__r.__words[1] + 6) = 293;
          WORD1(buf[0].__pn_.__r_.__value_.__r.__words[2]) = 2080;
          *(std::string::size_type *)((char *)&buf[0].__pn_.__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v43;
          _os_log_impl(&dword_1BB0CE000, v42, OS_LOG_TYPE_INFO, "%25s:%-5d  <vp> loading far end voice DNN VAD AU strip \"%s\"", (uint8_t *)buf, 0x1Cu);
        }
      }
      int v44 = (int *)*((void *)this + 1578);
      if (v44 && (*v8 || *((unsigned char *)this + 15962)))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        long long v45 = &v59;
        if ((v59.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          long long v45 = (std::__fs::filesystem::path *)v59.__pn_.__r_.__value_.__r.__words[0];
        }
        CALegacyLog::log(v44, 4, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDSPChains/vpSetupDownlinkDSPChain.cpp", 293, "SetupDownlinkFarEndVoiceDNNVADGraph", "loading far end voice DNN VAD AU strip \"%s\"", (const char *)v45);
      }
      if (SHIBYTE(v59.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&buf[0].__pn_, v59.__pn_.__r_.__value_.__l.__data_, v59.__pn_.__r_.__value_.__l.__size_);
      }
      else {
        buf[0] = v59;
      }
      applesauce::CF::make_DataRef((const char *)buf, (CFDataRef *)&cf);
      if (SHIBYTE(buf[0].__pn_.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf[0].__pn_.__r_.__value_.__l.__data_);
      }
      applesauce::CF::make_DictionaryRef((CFDataRef *)&cf, (applesauce::CF::DictionaryRef *)buf);
      uint64_t v46 = (const void *)*((void *)this + 2060);
      *((void *)this + 2060) = buf[0].__pn_.__r_.__value_.__r.__words[0];
      buf[0].__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
      if (v46) {
        CFRelease(v46);
      }
      if (cf.__r_.__value_.__r.__words[0]) {
        CFRelease(cf.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      std::string::size_type v36 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        unint64_t v37 = (*v36 ? *v36 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
        {
          unint64_t v38 = &v59;
          if ((v59.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            unint64_t v38 = (std::__fs::filesystem::path *)v59.__pn_.__r_.__value_.__r.__words[0];
          }
          LODWORD(buf[0].__pn_.__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)buf[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpSetupDownlinkDSPChain.cpp";
          WORD2(buf[0].__pn_.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf[0].__pn_.__r_.__value_.__r.__words[1] + 6) = 300;
          WORD1(buf[0].__pn_.__r_.__value_.__r.__words[2]) = 2080;
          *(std::string::size_type *)((char *)&buf[0].__pn_.__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v38;
          _os_log_impl(&dword_1BB0CE000, v37, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> file \"%s\" does not exist", (uint8_t *)buf, 0x1Cu);
        }
      }
      unint64_t v39 = (int *)*((void *)this + 1578);
      if (v39 && (*v8 || *((unsigned char *)this + 15962)))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        vDSP_Length v40 = &v59;
        if ((v59.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          vDSP_Length v40 = (std::__fs::filesystem::path *)v59.__pn_.__r_.__value_.__r.__words[0];
        }
        CALegacyLog::log(v39, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDSPChains/vpSetupDownlinkDSPChain.cpp", 300, "SetupDownlinkFarEndVoiceDNNVADGraph", "file \"%s\" does not exist", (const char *)v40);
      }
    }
    if (*((char *)this + 31) < 0) {
      uint64_t v6 = *(char **)v6;
    }
    buf[0].__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
    std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&v68, &buf[0].__pn_.__r_.__value_.__l.__data_);
    std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>(&v67.__pn_, "Generic");
    std::__fs::filesystem::operator/[abi:ne180100](&v67, (uint64_t)&v68, (std::__fs::filesystem::path *)&cf);
    VoiceProcessorV2::GetVersionNameForTuning(&v65, (uint64_t)this);
    __replacement.__pn_ = v65;
    memset(&v65, 0, sizeof(v65));
    std::__fs::filesystem::operator/[abi:ne180100](&__replacement, (uint64_t)&cf, buf);
    memset(&__p, 0, sizeof(__p));
    std::string::append[abi:ne180100]<char const*,0>(&__p, "gen_far_end_voice_nnvad.propstrip", "");
    std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__p, (uint64_t)buf, &v58);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(buf[0].__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__pn_.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__replacement.__pn_.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(cf.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v67.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v67.__pn_.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v68.__r_.__value_.__l.__data_);
    }
    std::__fs::filesystem::__status(&v58, 0);
    if (cf.__r_.__value_.__s.__data_[0] && cf.__r_.__value_.__s.__data_[0] != 255)
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      unint64_t v52 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(4, VPLogScope(void)::scope, 0))
      {
        CFIndex v53 = (*v52 ? *v52 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
        {
          CFStringRef v54 = &v58;
          if ((v58.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            CFStringRef v54 = (std::__fs::filesystem::path *)v58.__pn_.__r_.__value_.__r.__words[0];
          }
          LODWORD(buf[0].__pn_.__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)buf[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpSetupDownlinkDSPChain.cpp";
          WORD2(buf[0].__pn_.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf[0].__pn_.__r_.__value_.__r.__words[1] + 6) = 314;
          WORD1(buf[0].__pn_.__r_.__value_.__r.__words[2]) = 2080;
          *(std::string::size_type *)((char *)&buf[0].__pn_.__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v54;
          _os_log_impl(&dword_1BB0CE000, v53, OS_LOG_TYPE_INFO, "%25s:%-5d  <vp> loading far end voice DNN VAD property strip \"%s\"", (uint8_t *)buf, 0x1Cu);
        }
      }
      uint64_t v55 = (int *)*((void *)this + 1578);
      if (v55 && (*v8 || *((unsigned char *)this + 15962)))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        uint64_t v56 = &v58;
        if ((v58.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v56 = (std::__fs::filesystem::path *)v58.__pn_.__r_.__value_.__r.__words[0];
        }
        CALegacyLog::log(v55, 4, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDSPChains/vpSetupDownlinkDSPChain.cpp", 314, "SetupDownlinkFarEndVoiceDNNVADGraph", "loading far end voice DNN VAD property strip \"%s\"", (const char *)v56);
      }
      if (SHIBYTE(v58.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&buf[0].__pn_, v58.__pn_.__r_.__value_.__l.__data_, v58.__pn_.__r_.__value_.__l.__size_);
      }
      else {
        buf[0] = v58;
      }
      applesauce::CF::make_DataRef((const char *)buf, (CFDataRef *)&cf);
      if (SHIBYTE(buf[0].__pn_.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf[0].__pn_.__r_.__value_.__l.__data_);
      }
      applesauce::CF::make_DictionaryRef((CFDataRef *)&cf, (applesauce::CF::DictionaryRef *)buf);
      uint64_t v57 = (const void *)*((void *)this + 2061);
      *((void *)this + 2061) = buf[0].__pn_.__r_.__value_.__r.__words[0];
      buf[0].__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v57;
      if (v57) {
        CFRelease(v57);
      }
      if (cf.__r_.__value_.__r.__words[0]) {
        CFRelease(cf.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      uint64_t v47 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        uint64_t v48 = (*v47 ? *v47 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
        {
          unint64_t v49 = &v58;
          if ((v58.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            unint64_t v49 = (std::__fs::filesystem::path *)v58.__pn_.__r_.__value_.__r.__words[0];
          }
          LODWORD(buf[0].__pn_.__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)buf[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpSetupDownlinkDSPChain.cpp";
          WORD2(buf[0].__pn_.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf[0].__pn_.__r_.__value_.__r.__words[1] + 6) = 321;
          WORD1(buf[0].__pn_.__r_.__value_.__r.__words[2]) = 2080;
          *(std::string::size_type *)((char *)&buf[0].__pn_.__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v49;
          _os_log_impl(&dword_1BB0CE000, v48, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> file \"%s\" does not exist", (uint8_t *)buf, 0x1Cu);
        }
      }
      float v50 = (int *)*((void *)this + 1578);
      if (v50 && (*v8 || *((unsigned char *)this + 15962)))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        unint64_t v51 = &v58;
        if ((v58.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          unint64_t v51 = (std::__fs::filesystem::path *)v58.__pn_.__r_.__value_.__r.__words[0];
        }
        CALegacyLog::log(v50, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDSPChains/vpSetupDownlinkDSPChain.cpp", 321, "SetupDownlinkFarEndVoiceDNNVADGraph", "file \"%s\" does not exist", (const char *)v51);
      }
    }
    if (*((void *)this + 2058) && *((void *)this + 2059) && *((void *)this + 2060) && *((void *)this + 2061)) {
      *((void *)this + 1112) |= 2uLL;
    }
    if (SHIBYTE(v58.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v58.__pn_.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v59.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v59.__pn_.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v60.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v60.__pn_.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    unint64_t v14 = (const void *)*((void *)this + 2058);
    *((void *)this + 2058) = 0;
    if (v14) {
      CFRelease(v14);
    }
    unint64_t v15 = (const void *)*((void *)this + 2059);
    *((void *)this + 2059) = 0;
    if (v15) {
      CFRelease(v15);
    }
    long long v16 = (const void *)*((void *)this + 2060);
    *((void *)this + 2060) = 0;
    if (v16) {
      CFRelease(v16);
    }
    std::string::size_type v17 = (const void *)*((void *)this + 2061);
    *((void *)this + 2061) = 0;
    if (v17) {
      CFRelease(v17);
    }
  }
}

void sub_1BB4D24BC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,long long buf)
{
  if (a2)
  {
    if (a40 < 0) {
      operator delete(__p);
    }
    if (a46 < 0) {
      operator delete(a41);
    }
    std::ifstream::~ifstream(&buf);
    __cxa_begin_catch(a1);
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    float v50 = CALog::LogObjIfEnabled(1, VPLogScope(void)::scope);
    if (v50)
    {
      unint64_t v51 = v50;
      if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315394;
        *(void *)((char *)&buf + 4) = "vpSetupDownlinkDSPChain.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 284;
        _os_log_impl(&dword_1BB0CE000, v51, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> failed to load far end voice DNN VAD graph text", (uint8_t *)&buf, 0x12u);
      }
    }
    unint64_t v52 = *(int **)(v47 + 12624);
    if (v52 && (*v48 || v48[1]))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      CALegacyLog::log(v52, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDSPChains/vpSetupDownlinkDSPChain.cpp", 284, "SetupDownlinkFarEndVoiceDNNVADGraph", "failed to load far end voice DNN VAD graph text");
    }
    __cxa_end_catch();
    JUMPOUT(0x1BB4D1B2CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t AUSpatialMixerV2ChannelProcessor::PropertyObserverIsInitialized(AUSpatialMixerV2ChannelProcessor *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)this + 536);
  return v1 & 1;
}

uint64_t AUSpatialMixerV2ChannelProcessor::PropertyChanged(AUSpatialMixerV2ChannelProcessor *this, int a2)
{
  uint64_t v109 = *MEMORY[0x1E4F143B8];
  if (a2 <= 3268)
  {
    if (a2 > 3201)
    {
      switch(a2)
      {
        case 3202:
        case 3203:
          if (!*((void *)this + 22) || *((_DWORD *)this + 42) != 7 || *((_DWORD *)this + 43) != 2) {
            return 0;
          }
          int v3 = 2;
          goto LABEL_42;
        case 3204:
        case 3205:
          goto LABEL_23;
        case 3210:
        case 3211:
          *(void *)&long long v103 = (char *)this + 468;
          BYTE8(v103) = 1;
          caulk::pooled_semaphore_mutex::_lock((AUSpatialMixerV2ChannelProcessor *)((char *)this + 468));
          AUSM::AppleSauceCFWithMutex<__CFURL const*>::load(&v100, *(void *)(*((void *)this + 71) + 232) + 824);
          uint64_t v9 = *((void *)this + 22);
          long long v10 = (const void *)v100;
          if ((void)v100) {
            CFRetain((CFTypeRef)v100);
          }
          v98[0] = v10;
          Spatializer::propertyDictionarySetValue(v9, @"HOASourceExtentIRCustomURL", v98);
          if (v10)
          {
            CFRelease(v10);
            uint64_t v11 = *((void *)this + 23);
            if (!v11) {
              goto LABEL_121;
            }
            CFRetain(v10);
          }
          else
          {
            uint64_t v11 = *((void *)this + 23);
            if (!v11) {
              goto LABEL_121;
            }
          }
          unint64_t v97 = v10;
          Spatializer::propertyDictionarySetValue(v11, @"HOASourceExtentIRCustomURL", &v97);
          if (!v10)
          {
            uint64_t v50 = *((void *)this + 24);
            if (!v50) {
              goto LABEL_176;
            }
            goto LABEL_161;
          }
          CFRelease(v10);
LABEL_121:
          uint64_t v50 = *((void *)this + 24);
          if (!v50)
          {
            if (!v10) {
              goto LABEL_176;
            }
            goto LABEL_163;
          }
          if (v10) {
            CFRetain(v10);
          }
LABEL_161:
          unint64_t v96 = v10;
          Spatializer::propertyDictionarySetValue(v50, @"HOASourceExtentIRCustomURL", &v96);
          if (!v10) {
            goto LABEL_176;
          }
          CFRelease(v10);
LABEL_163:
          CFRelease(v10);
          goto LABEL_176;
        case 3212:
        case 3213:
          if (!*((void *)this + 22) || *((_DWORD *)this + 42) != 7 || *((_DWORD *)this + 43) != 1) {
            return 0;
          }
          int v3 = 1;
LABEL_42:
          AUSpatialMixerV2ChannelProcessor::initializeSpatializer(this, 7, v3);
        case 3214:
          unsigned __int8 v30 = atomic_load((unsigned __int8 *)(*((void *)this + 71) + 200));
          int v31 = v30 & 1;
          *(void *)&long long v103 = (char *)this + 468;
          BYTE8(v103) = 1;
          caulk::pooled_semaphore_mutex::_lock((AUSpatialMixerV2ChannelProcessor *)((char *)this + 468));
          CFStringRef v32 = (unsigned __int8 *)this + 80;
          unsigned __int8 v33 = atomic_load((unsigned __int8 *)this + 80);
          if ((v33 & 1) == 0 && v31)
          {
            float v34 = (unsigned __int8 *)this + 8;
            do
            {
              long long v35 = *(uint64_t **)v34;
              std::string::size_type v36 = (uint64_t *)*((void *)v34 + 1);
              while (v35 != v36)
              {
                uint64_t v37 = *v35;
                unint64_t v38 = *(void **)(*v35 + 8);
                uint64_t v39 = *(void *)(*v35 + 16) - (void)v38;
                if (v39 >= 1) {
                  bzero(v38, 4 * (((unint64_t)v39 >> 2) - ((unint64_t)v39 > 3)) + 4);
                }
                *(_DWORD *)(v37 + 56) = 0;
                ++v35;
              }
              v34 += 24;
            }
            while (v34 != v32);
          }
          atomic_store(v31, v32);
          goto LABEL_176;
        case 3217:
        case 3218:
          *(void *)&long long v103 = (char *)this + 468;
          BYTE8(v103) = 1;
          caulk::pooled_semaphore_mutex::_lock((AUSpatialMixerV2ChannelProcessor *)((char *)this + 468));
          AUSM::AppleSauceCFWithMutex<__CFURL const*>::load(&v100, *(void *)(*((void *)this + 71) + 232) + 1040);
          uint64_t v12 = *((void *)this + 22);
          unint64_t v13 = (const void *)v100;
          if ((void)v100) {
            CFRetain((CFTypeRef)v100);
          }
          std::__split_buffer<std::string>::pointer v92 = v13;
          Spatializer::propertyDictionarySetValue(v12, @"BinauralSourceExtentIRCustomURL", &v92);
          if (v13)
          {
            CFRelease(v13);
            uint64_t v14 = *((void *)this + 23);
            if (!v14) {
              goto LABEL_127;
            }
            CFRetain(v13);
          }
          else
          {
            uint64_t v14 = *((void *)this + 23);
            if (!v14) {
              goto LABEL_127;
            }
          }
          long long v91 = v13;
          Spatializer::propertyDictionarySetValue(v14, @"BinauralSourceExtentIRCustomURL", &v91);
          if (!v13)
          {
            uint64_t v51 = *((void *)this + 24);
            if (!v51) {
              goto LABEL_176;
            }
            goto LABEL_165;
          }
          CFRelease(v13);
LABEL_127:
          uint64_t v51 = *((void *)this + 24);
          if (!v51)
          {
            if (!v13) {
              goto LABEL_176;
            }
            goto LABEL_167;
          }
          if (v13) {
            CFRetain(v13);
          }
LABEL_165:
          float v90 = v13;
          Spatializer::propertyDictionarySetValue(v51, @"BinauralSourceExtentIRCustomURL", &v90);
          if (!v13) {
            goto LABEL_176;
          }
          CFRelease(v13);
LABEL_167:
          CFRelease(v13);
          goto LABEL_176;
        case 3219:
          unsigned int v40 = atomic_load((unsigned int *)(*(void *)(*((void *)this + 71) + 232) + 1256));
          *((_DWORD *)this + 138) = v40;
          return 0;
        case 3224:
          *(void *)&long long v103 = (char *)this + 468;
          BYTE8(v103) = 1;
          caulk::pooled_semaphore_mutex::_lock((AUSpatialMixerV2ChannelProcessor *)((char *)this + 468));
          unsigned __int8 v41 = atomic_load((unsigned __int8 *)(*((void *)this + 71) + 201));
          (*(void (**)(void, void))(**((void **)this + 22) + 160))(*((void *)this + 22), v41 & 1);
          uint64_t v42 = *((void *)this + 23);
          if (v42) {
            (*(void (**)(uint64_t, void))(*(void *)v42 + 160))(v42, v41 & 1);
          }
          uint64_t v43 = *((void *)this + 24);
          if (v43) {
            (*(void (**)(uint64_t, void))(*(void *)v43 + 160))(v43, v41 & 1);
          }
          goto LABEL_176;
        case 3228:
        case 3229:
          *(void *)&long long v103 = (char *)this + 468;
          BYTE8(v103) = 1;
          caulk::pooled_semaphore_mutex::_lock((AUSpatialMixerV2ChannelProcessor *)((char *)this + 468));
          AUSM::AppleSauceCFWithMutex<__CFURL const*>::load(&v100, *(void *)(*((void *)this + 71) + 232) + 1264);
          uint64_t v15 = *((void *)this + 22);
          long long v16 = (const void *)v100;
          if ((void)v100) {
            CFRetain((CFTypeRef)v100);
          }
          unsigned int v89 = v16;
          Spatializer::propertyDictionarySetValue(v15, @"XTCSourceExtentIRCustomURL", &v89);
          if (v16)
          {
            CFRelease(v16);
            uint64_t v17 = *((void *)this + 23);
            if (!v17) {
              goto LABEL_133;
            }
            CFRetain(v16);
          }
          else
          {
            uint64_t v17 = *((void *)this + 23);
            if (!v17) {
              goto LABEL_133;
            }
          }
          std::string::size_type v88 = v16;
          Spatializer::propertyDictionarySetValue(v17, @"XTCSourceExtentIRCustomURL", &v88);
          if (!v16)
          {
            uint64_t v52 = *((void *)this + 24);
            if (!v52) {
              goto LABEL_176;
            }
            goto LABEL_169;
          }
          CFRelease(v16);
LABEL_133:
          uint64_t v52 = *((void *)this + 24);
          if (!v52)
          {
            if (!v16) {
              goto LABEL_176;
            }
            goto LABEL_171;
          }
          if (v16) {
            CFRetain(v16);
          }
LABEL_169:
          std::__split_buffer<std::string>::pointer v87 = v16;
          Spatializer::propertyDictionarySetValue(v52, @"XTCSourceExtentIRCustomURL", &v87);
          if (!v16) {
            goto LABEL_176;
          }
          CFRelease(v16);
LABEL_171:
          CFRelease(v16);
          break;
        default:
          return 0;
      }
      goto LABEL_176;
    }
    switch(a2)
    {
      case 3003:
        *(void *)&long long v103 = (char *)this + 468;
        BYTE8(v103) = 1;
        caulk::pooled_semaphore_mutex::_lock((AUSpatialMixerV2ChannelProcessor *)((char *)this + 468));
        unsigned int v44 = atomic_load((unsigned int *)(*((void *)this + 71) + 76));
        *(_DWORD *)(*((void *)this + 22) + 24) = v44;
        uint64_t v45 = *((void *)this + 23);
        if (v45) {
          *(_DWORD *)(v45 + 24) = v44;
        }
        uint64_t v46 = *((void *)this + 24);
        if (v46) {
          *(_DWORD *)(v46 + 24) = v44;
        }
        goto LABEL_176;
      case 3108:
        unsigned __int8 v47 = atomic_load((unsigned __int8 *)this + 488);
        if ((v47 & 1) != 0 && fabsf(*((float *)this + 59)) > 0.00000011921)
        {
          float v48 = COERCE_FLOAT(atomic_load((unsigned int *)(*(void *)(*((void *)this + 71) + 232) + 164)));
          float v49 = (float)((float)(v48 + v48) / *((float *)this + 59)) * 3.14159265;
          AUSpatialMixerV2ChannelProcessor::setLFERollOff(this, v49);
        }
        break;
      case 3109:
        *(void *)&long long v103 = (char *)this + 468;
        BYTE8(v103) = 1;
        caulk::pooled_semaphore_mutex::_lock((AUSpatialMixerV2ChannelProcessor *)((char *)this + 468));
        unsigned __int8 v6 = atomic_load((unsigned __int8 *)this + 536);
        if (v6)
        {
          unsigned __int8 v7 = atomic_load((unsigned __int8 *)(*((void *)this + 71) + 120));
          if (v7) {
            AUSpatialMixerV2ChannelProcessor::initializePropagationDelay(this);
          }
        }
        std::unique_ptr<IR::DelayLine>::reset[abi:ne180100]((IR::DelayLine **)this + 68, 0);
        goto LABEL_176;
    }
    return 0;
  }
  if (a2 > 5002)
  {
    switch(a2)
    {
      case 5684:
        atomic_store(1u, (unsigned __int8 *)this + 464);
        break;
      case 5685:
      case 5686:
        return 0;
      case 5687:
        if (*((void *)this + 22) && *((_DWORD *)this + 42) == 7 && *((_DWORD *)this + 43) == 1)
        {
          uint64_t v27 = *((void *)this + 77);
          if (v27)
          {
            AUSM::OBHDConfig::getDirectSoundSource(&v103, v27, *((_DWORD *)this + 147));
            long long v28 = v103;
          }
          else
          {
            AUSM::IRManager::getHRIRAttributes((AUSM::IRManager *)&v103, *((void *)this + 72));
            if (v107) {
              std::allocate_shared[abi:ne180100]<IR::DataLoaderSourceWithSizeAverage,std::allocator<IR::DataLoaderSourceWithSizeAverage>,IR::IRDataAttributes &,void>((IR::DataLoaderSource **)&v100, (const IR::IRDataAttributes *)&v103);
            }
            else {
              std::allocate_shared[abi:ne180100]<IR::DataLoaderSource,std::allocator<IR::DataLoaderSource>,IR::IRDataAttributes &,void>((IR::DataLoaderSource **)&v100, (const IR::IRDataAttributes *)&v103);
            }
            long long v72 = v100;
            IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)&v103);
            long long v28 = v72;
          }
          uint64_t v69 = *((void *)this + 22);
          long long v99 = v28;
          uint64_t v70 = (std::__shared_weak_count *)*((void *)&v28 + 1);
          if (*((void *)&v28 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v28 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          char v71 = (*(uint64_t (**)(uint64_t, long long *))(*(void *)v69 + 280))(v69, &v99);
          if (*((void *)&v99 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v99 + 1));
          }
          if ((v71 & 1) == 0) {
            AUSpatialMixerV2ChannelProcessor::initializeSpatializer(this, *((_DWORD *)this + 42), *((_DWORD *)this + 43));
          }
          if (v70) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v70);
          }
        }
        break;
      case 5688:
        uint64_t v25 = *((void *)this + 72);
        std::mutex::lock((std::mutex *)(v25 + 1560));
        IR::IRDataAttributes::IRDataAttributes((uint64_t)&v103, v25 + 528);
        std::mutex::unlock((std::mutex *)(v25 + 1560));
        atomic_load((unsigned __int8 *)(*(void *)(*((void *)this + 71) + 232) + 160));
        AUSpatialMixerV2ChannelProcessor::setEarlyReflectionsIRDataAttributes((uint64_t)this, 1);
        if (v108) {
          CFRelease(v108);
        }
        if (v106) {
          CFRelease(v106);
        }
        if (v105) {
          CFRelease(v105);
        }
        unint64_t v26 = (const void *)v103;
        if ((void)v103) {
          goto LABEL_82;
        }
        break;
      case 5689:
        uint64_t v29 = *((void *)this + 72);
        std::mutex::lock((std::mutex *)(v29 + 1560));
        IR::IRDataAttributes::IRDataAttributes((uint64_t)&v103, v29 + 864);
        std::mutex::unlock((std::mutex *)(v29 + 1560));
        atomic_load((unsigned __int8 *)(*(void *)(*((void *)this + 71) + 232) + 160));
        AUSpatialMixerV2ChannelProcessor::setEarlyReflectionsIRDataAttributes((uint64_t)this, 0);
        if (v108) {
          CFRelease(v108);
        }
        if (v106) {
          CFRelease(v106);
        }
        if (v105) {
          CFRelease(v105);
        }
        unint64_t v26 = (const void *)v103;
        if ((void)v103) {
LABEL_82:
        }
          CFRelease(v26);
        break;
      default:
        if (a2 == 5003)
        {
          *(void *)&long long v103 = (char *)this + 468;
          BYTE8(v103) = 1;
          caulk::pooled_semaphore_mutex::_lock((AUSpatialMixerV2ChannelProcessor *)((char *)this + 468));
          AUSM::AppleSauceCFWithMutex<__CFDictionary const*>::load(&v100, *(void *)(*((void *)this + 71) + 232) + 1344);
          uint64_t v21 = *((void *)this + 22);
          uint64_t v22 = (const void *)v100;
          if ((void)v100) {
            CFRetain((CFTypeRef)v100);
          }
          CFTypeRef cf = v22;
          (*(void (**)(uint64_t, CFTypeRef *))(*(void *)v21 + 216))(v21, &cf);
          if (cf) {
            CFRelease(cf);
          }
          uint64_t v23 = *((void *)this + 23);
          if (v23)
          {
            if (v22) {
              CFRetain(v22);
            }
            CFTypeRef v85 = v22;
            (*(void (**)(uint64_t, CFTypeRef *))(*(void *)v23 + 216))(v23, &v85);
            if (v85) {
              CFRelease(v85);
            }
          }
          uint64_t v24 = *((void *)this + 24);
          if (v24)
          {
            if (v22) {
              CFRetain(v22);
            }
            CFTypeRef v84 = v22;
            (*(void (**)(uint64_t, CFTypeRef *))(*(void *)v24 + 216))(v24, &v84);
            if (v84) {
              CFRelease(v84);
            }
          }
          if (v22) {
            CFRelease(v22);
          }
          goto LABEL_176;
        }
        break;
    }
    return 0;
  }
  if ((a2 - 3274) < 2)
  {
    *(void *)&long long v103 = (char *)this + 468;
    BYTE8(v103) = 1;
    caulk::pooled_semaphore_mutex::_lock((AUSpatialMixerV2ChannelProcessor *)((char *)this + 468));
    AUSM::AppleSauceCFWithMutex<__CFURL const*>::load(&v100, *(void *)(*((void *)this + 71) + 232) + 896);
    uint64_t v18 = *((void *)this + 22);
    uint64_t v19 = (const void *)v100;
    if ((void)v100) {
      CFRetain((CFTypeRef)v100);
    }
    long long v95 = v19;
    Spatializer::propertyDictionarySetValue(v18, @"HOANFCIRCustomURL", &v95);
    if (v19)
    {
      CFRelease(v19);
      uint64_t v20 = *((void *)this + 23);
      if (!v20) {
        goto LABEL_139;
      }
      CFRetain(v19);
    }
    else
    {
      uint64_t v20 = *((void *)this + 23);
      if (!v20) {
        goto LABEL_139;
      }
    }
    float v94 = v19;
    Spatializer::propertyDictionarySetValue(v20, @"HOANFCIRCustomURL", &v94);
    if (!v19)
    {
      uint64_t v53 = *((void *)this + 24);
      if (!v53) {
        goto LABEL_176;
      }
      goto LABEL_173;
    }
    CFRelease(v19);
LABEL_139:
    uint64_t v53 = *((void *)this + 24);
    if (!v53)
    {
      if (!v19) {
        goto LABEL_176;
      }
      goto LABEL_175;
    }
    if (v19) {
      CFRetain(v19);
    }
LABEL_173:
    std::string::size_type v93 = v19;
    Spatializer::propertyDictionarySetValue(v53, @"HOANFCIRCustomURL", &v93);
    if (v19)
    {
      CFRelease(v19);
LABEL_175:
      CFRelease(v19);
    }
LABEL_176:
    CFStringRef v54 = &v103;
LABEL_177:
    std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)v54);
    return 0;
  }
  if (a2 == 3269)
  {
LABEL_23:
    if (!*((void *)this + 17)) {
      return 0;
    }
    AUSM::AppleSauceCFWithMutex<__CFURL const*>::load(&v100, *((void *)this + 71) + 128);
    unint64_t v8 = (const void *)v100;
    if ((void)v100)
    {
      CFRetain((CFTypeRef)v100);
      v98[1] = v8;
      IR::IRDataAttributes::IRDataAttributes((uint64_t)&v103, v8, 128, 1, *((float *)this + 59));
      CFRelease(v8);
      IR::DynamicIRProcessor::setIRDataAttributes(*((IR::DynamicIRProcessor **)this + 17), (const IR::IRDataAttributes *)&v103);
      if (v108) {
        CFRelease(v108);
      }
      if (v106) {
        CFRelease(v106);
      }
      if (v105) {
        CFRelease(v105);
      }
      if ((void)v103) {
        CFRelease((CFTypeRef)v103);
      }
    }
    else
    {
      atomic_load((unsigned int *)(*((void *)this + 71) + 220));
      IR::getPresetDataAttributes();
      IR::DynamicIRProcessor::setIRDataAttributes(*((IR::DynamicIRProcessor **)this + 17), (const IR::IRDataAttributes *)&v103);
      if (v108) {
        CFRelease(v108);
      }
      if (v106) {
        CFRelease(v106);
      }
      if (v105) {
        CFRelease(v105);
      }
      if ((void)v103) {
        CFRelease((CFTypeRef)v103);
      }
      unint64_t v8 = (const void *)v100;
      if (!(void)v100) {
        return 0;
      }
    }
    CFRelease(v8);
    return 0;
  }
  if (a2 == 3279)
  {
    *(void *)&long long v100 = (char *)this + 468;
    BYTE8(v100) = 1;
    caulk::pooled_semaphore_mutex::_lock((AUSpatialMixerV2ChannelProcessor *)((char *)this + 468));
    AUSM::AppleSauceCFWithMutex<__CFDictionary const*>::load(&v83, *(void *)(*((void *)this + 71) + 232) + 2120);
    CFDictionaryRef v4 = v83;
    if (v83)
    {
      CFRetain(@"OptionalFeatureSupport");
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v81, @"OptionalFeatureSupport");
      uint64_t v5 = (const void *)kOptionalFeatureSourceExtent;
      if (kOptionalFeatureSourceExtent)
      {
        CFRetain((CFTypeRef)kOptionalFeatureSourceExtent);
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v79, v5);
      }
      else
      {
        CFTypeRef v79 = 0;
      }
      unsigned int v56 = (unsigned __int16)applesauce::CF::details::find_at_key_or_optional<BOOL,__CFString const*&>(v4, (const void *)kOptionalFeatureSourceExtent);
      if (v56 <= 0x100) {
        LOBYTE(v56) = 0;
      }
      BOOL v78 = v56 != 0;
      applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,BOOL>(&v103, v79, &v78);
      uint64_t v57 = (const void *)kOptionalFeatureNearFieldHOA;
      if (kOptionalFeatureNearFieldHOA)
      {
        CFRetain((CFTypeRef)kOptionalFeatureNearFieldHOA);
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v77, v57);
      }
      else
      {
        CFTypeRef v77 = 0;
      }
      unsigned int v58 = (unsigned __int16)applesauce::CF::details::find_at_key_or_optional<BOOL,__CFString const*&>(v4, (const void *)kOptionalFeatureNearFieldHOA);
      if (v58 <= 0x100) {
        LOBYTE(v58) = 0;
      }
      BOOL v76 = v58 != 0;
      applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,BOOL>(v104, v77, &v76);
      v80[0] = &v103;
      v80[1] = 2;
      CFDictionaryRef CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v80);
      v80[2] = CFDictionaryRef;
      CFTypeRef v60 = v81;
      if (v81) {
        CFRetain(v81);
      }
      CFTypeRef v101 = v60;
      if (CFDictionaryRef) {
        CFRetain(CFDictionaryRef);
      }
      CFDictionaryRef v102 = CFDictionaryRef;
      v82[0] = &v101;
      v82[1] = 1;
      CFDictionaryRef v61 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v82);
      v82[2] = v61;
      if (v102) {
        CFRelease(v102);
      }
      if (v101) {
        CFRelease(v101);
      }
      if (CFDictionaryRef) {
        CFRelease(CFDictionaryRef);
      }
      for (uint64_t i = 0; i != -4; i -= 2)
      {
        unsigned __int8 v63 = (const void *)v104[i + 1];
        if (v63) {
          CFRelease(v63);
        }
        float v64 = (const void *)v104[i];
        if (v64) {
          CFRelease(v64);
        }
      }
      if (v77) {
        CFRelease(v77);
      }
      if (v79) {
        CFRelease(v79);
      }
      if (v81) {
        CFRelease(v81);
      }
      if (v61)
      {
        CFRetain(v61);
        *(void *)&long long v103 = v61;
        uint64_t v65 = *((void *)this + 22);
        CFRetain(v61);
        CFDictionaryRef v66 = v61;
      }
      else
      {
        CFDictionaryRef v66 = 0;
        *(void *)&long long v103 = 0;
        uint64_t v65 = *((void *)this + 22);
      }
      CFTypeRef v75 = v61;
      (*(void (**)(uint64_t, CFTypeRef *))(*(void *)v65 + 232))(v65, &v75);
      if (v75) {
        CFRelease(v75);
      }
      uint64_t v67 = *((void *)this + 23);
      if (v67)
      {
        applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v74, v66);
        (*(void (**)(uint64_t, const void **))(*(void *)v67 + 232))(v67, &v74);
        applesauce::CF::DictionaryRef::~DictionaryRef(&v74);
      }
      uint64_t v68 = *((void *)this + 24);
      if (v68)
      {
        applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v73, v66);
        (*(void (**)(uint64_t, const void **))(*(void *)v68 + 232))(v68, &v73);
        applesauce::CF::DictionaryRef::~DictionaryRef(&v73);
      }
      if (v66) {
        CFRelease(v66);
      }
      if (v61) {
        CFRelease(v61);
      }
      CFRelease(v4);
    }
    CFStringRef v54 = &v100;
    goto LABEL_177;
  }
  return 0;
}

void sub_1BB4D392C(_Unwind_Exception *a1)
{
  IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)(v1 - 224));
  _Unwind_Resume(a1);
}

uint64_t AUSpatialMixerV2ChannelProcessor::setLFERollOff(AUSpatialMixerV2ChannelProcessor *this, float a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)this + 488);
  if (v3)
  {
    if (a2 <= 0.0)
    {
      long long v12 = xmmword_1BB872F30;
      long long v9 = 0uLL;
      v11.f64[0] = 0.0;
    }
    else
    {
      __double2 v5 = __sincos_stret(fmin(a2, 3.11017673));
      double v6 = __exp10(0.0);
      double v7 = 1.0 / (v5.__sinval * 0.707106781 + 1.0);
      double v8 = v7 * v6;
      *(double *)&long long v9 = v5.__cosval * -2.0 * v7;
      *((double *)&v9 + 1) = v7 - v5.__sinval * 0.707106781 * v7;
      v10.f64[0] = 0.5 - v5.__cosval * 0.5;
      v10.f64[1] = v10.f64[0] + v10.f64[0];
      float64x2_t v11 = vmulq_n_f64(v10, v8);
      long long v12 = (__int128)v11;
    }
    __uint64_t Coefficients = v12;
    float64_t v17 = v11.f64[0];
    long long v18 = v9;
    vDSP_biquad_Setup Setup = vDSP_biquad_CreateSetup((const double *)&__Coefficients, 1uLL);
  }
  else
  {
    vDSP_biquad_Setup Setup = 0;
  }
  *(void *)&__uint64_t Coefficients = (char *)this + 468;
  BYTE8(__Coefficients) = 1;
  caulk::pooled_semaphore_mutex::_lock((AUSpatialMixerV2ChannelProcessor *)((char *)this + 468));
  int v15 = 0;
  std::vector<float>::resize((uint64_t)this + 512, 4uLL, &v15);
  uint64_t v13 = *((void *)this + 62);
  *((void *)this + 62) = Setup;
  if (v13) {
    (*((void (**)(void))this + 63))();
  }
  *((void *)this + 63) = MEMORY[0x1E4F16850];
  return std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&__Coefficients);
}

void sub_1BB4D3E94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

IR::DataLoaderSource *std::allocate_shared[abi:ne180100]<IR::DataLoaderSourceWithSizeAverage,std::allocator<IR::DataLoaderSourceWithSizeAverage>,IR::IRDataAttributes &,void>(IR::DataLoaderSource **a1, const IR::IRDataAttributes *a2)
{
  CFDictionaryRef v4 = operator new(0x108uLL);
  v4[1] = 0;
  v4[2] = 0;
  *CFDictionaryRef v4 = &unk_1F14B0C00;
  uint64_t result = IR::DataLoaderSource::DataLoaderSource((IR::DataLoaderSource *)(v4 + 3), a2);
  v4[3] = &unk_1F14B0C38;
  *a1 = result;
  a1[1] = (IR::DataLoaderSource *)v4;
  return result;
}

void sub_1BB4D3F5C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

IR::DataLoaderSource *std::allocate_shared[abi:ne180100]<IR::DataLoaderSource,std::allocator<IR::DataLoaderSource>,IR::IRDataAttributes &,void>(IR::DataLoaderSource **a1, const IR::IRDataAttributes *a2)
{
  CFDictionaryRef v4 = operator new(0x108uLL);
  v4[1] = 0;
  v4[2] = 0;
  *CFDictionaryRef v4 = &unk_1F14BD908;
  uint64_t result = IR::DataLoaderSource::DataLoaderSource((IR::DataLoaderSource *)(v4 + 3), a2);
  *a1 = result;
  a1[1] = (IR::DataLoaderSource *)v4;
  return result;
}

void sub_1BB4D3FD8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void AUSpatialMixerV2ChannelProcessor::initializeSpatializer(AUSpatialMixerV2ChannelProcessor *this, int a2, int a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  double v6 = (char *)this + 176;
  (*(void (**)(CFTypeRef *__return_ptr))(**((void **)this + 22) + 208))(&cf);
  (*(void (**)(CFTypeRef *__return_ptr))(**(void **)v6 + 224))(&v34);
  char v30 = 1;
  int v31 = 0;
  unsigned __int8 v7 = atomic_load((unsigned __int8 *)(*(void *)(*((void *)this + 71) + 232) + 162));
  char v32 = v7 & 1;
  unsigned __int8 v8 = atomic_load((unsigned __int8 *)(*(void *)(*((void *)this + 71) + 232) + 161));
  char v33 = v8 & 1;
  switch(a2)
  {
    case 0:
      operator new();
    case 1:
      operator new();
    case 2:
      operator new();
    case 3:
      operator new();
    case 4:
      operator new();
    case 5:
      operator new();
    case 6:
      IR::getPresetDataAttributes();
      operator new();
    case 7:
      if (a3 != 3)
      {
        if (a3 == 2)
        {
          uint64_t v12 = *(void *)(*((void *)this + 71) + 232);
          if (!*(unsigned char *)(v12 + 2548))
          {
            unsigned __int8 v13 = atomic_load((unsigned __int8 *)(v12 + 2549));
            if ((v13 & 1) == 0)
            {
              if (getAUSMV2Log(void)::onceToken != -1) {
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
              }
              uint64_t v14 = getAUSMV2Log(void)::gLog;
              if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
              {
                int v15 = (char *)this + 592;
                if (*((char *)this + 615) < 0) {
                  int v15 = *(char **)v15;
                }
                LODWORD(v36.__begin_) = 136315394;
                *(std::vector<char>::pointer *)((char *)&v36.__begin_ + 4) = v15;
                WORD2(v36.__end_) = 2080;
                *(std::vector<char>::pointer *)((char *)&v36.__end_ + 6) = "initializeSpatializer";
                _os_log_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_DEFAULT, "[%s|%s] Spatial audio over built-in speakers not available on this hardware; reverting to stereo panning",
                  (uint8_t *)&v36,
                  0x16u);
              }
              __x[0] = 0;
              std::vector<char>::vector(&v36, 0x20uLL, __x);
              std::vector<char>::pointer begin = v36.__begin_;
              *(void *)v36.__begin_ = 6619138;
              *((_DWORD *)begin + 2) = 0;
              std::make_unique[abi:ne180100]<VBAPSpatializer,AudioChannelLayout &>();
            }
          }
          *(void *)std::vector<char> __x = (char *)this + 472;
          LOBYTE(v23) = 1;
          caulk::pooled_semaphore_mutex::_lock((AUSpatialMixerV2ChannelProcessor *)((char *)this + 472));
          AUSM::IRManager::getXTCIRAttributes((AUSM::IRManager *)&v36, *((void *)this + 72));
          uint64_t v18 = *((void *)this + 77);
          if (v18)
          {
            AUSM::OBHDConfig::getDirectSoundSource(&v26, v18, *((_DWORD *)this + 147));
            std::make_unique[abi:ne180100]<HRTFOBHDSpatializer,std::shared_ptr<IR::WeightedSumOfCache>,std::atomic<BOOL> const&,std::atomic<BOOL> const&>();
          }
          std::make_unique[abi:ne180100]<HRTFXTCSpatializer,IR::IRDataAttributes &,std::atomic<BOOL> const&>();
        }
        if (a3 == 1)
        {
          v28[7] = (char *)this + 472;
          LOBYTE(v29) = 1;
          caulk::pooled_semaphore_mutex::_lock((AUSpatialMixerV2ChannelProcessor *)((char *)this + 472));
          uint64_t v9 = *((void *)this + 72);
          std::mutex::lock((std::mutex *)(v9 + 1560));
          IR::IRDataAttributes::IRDataAttributes((uint64_t)&v36, v9 + 64);
          std::mutex::unlock((std::mutex *)(v9 + 1560));
          uint64_t v10 = *((void *)this + 77);
          if (v10)
          {
            AUSM::OBHDConfig::getDirectSoundSource(&v26, v10, *((_DWORD *)this + 147));
            std::make_unique[abi:ne180100]<HRTFOBHDSpatializer,std::shared_ptr<IR::WeightedSumOfCache>,std::atomic<BOOL> const&,std::atomic<BOOL> const&>();
          }
          AUSM::AppleSauceCFWithMutex<__CFURL const*>::load(v28, *(void *)(*((void *)this + 71) + 232) + 968);
          AUSM::AppleSauceCFWithMutex<__CFURL const*>::load(&v27, *(void *)(*((void *)this + 71) + 232) + 1040);
          if (v28[0])
          {
            applesauce::CF::URLRef::URLRef((applesauce::CF::URLRef *)&v25, v28[0]);
            IR::IRDataAttributes::IRDataAttributes((uint64_t)&v26, v25, 128, 1, 0.0);
            applesauce::CF::URLRef::~URLRef(&v25);
          }
          else
          {
            IR::getPresetDataAttributes();
          }
          AUSM::AppleSauceCFWithMutex<__CFDictionary const*>::load(&v21, *(void *)(*((void *)this + 71) + 232) + 2192);
          LOBYTE(v24) = AUSM::GlobalProperties::isEnabledFeature(*(AUSM::GlobalProperties **)(*((void *)this + 71) + 232), @"NearFieldHRTF");
          std::make_unique[abi:ne180100]<HRTFNFSpatializer,IR::IRDataAttributes &,IR::IRDataAttributes &,applesauce::CF::DictionaryRef,BOOL,std::atomic<BOOL> const&>();
        }
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        float64_t v17 = getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
        {
          uint64_t v20 = (char *)this + 592;
          if (*((char *)this + 615) < 0) {
            uint64_t v20 = *(char **)v20;
          }
          LODWORD(v36.__begin_) = 136315650;
          *(std::vector<char>::pointer *)((char *)&v36.__begin_ + 4) = v20;
          WORD2(v36.__end_) = 2080;
          *(std::vector<char>::pointer *)((char *)&v36.__end_ + 6) = "initializeSpatializer";
          HIWORD(v36.__end_cap_.__value_) = 1024;
          int v37 = a3;
          _os_log_error_impl(&dword_1BB0CE000, v17, OS_LOG_TYPE_ERROR, "[%s|%s] Invalid output type %u when trying to initialize with kSpatializationAlgorithm_UseOutputType; revert"
            "ing to external speakers",
            (uint8_t *)&v36,
            0x1Cu);
        }
      }
      operator new();
    case 8:
      operator new();
    case 9:
      operator new();
    default:
      if (getAUSMV2Log(void)::onceToken != -1) {
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
      }
      float64x2_t v11 = getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        uint64_t v19 = (char *)this + 592;
        if (*((char *)this + 615) < 0) {
          uint64_t v19 = *(char **)v19;
        }
        LODWORD(v36.__begin_) = 136315650;
        *(std::vector<char>::pointer *)((char *)&v36.__begin_ + 4) = v19;
        WORD2(v36.__end_) = 2080;
        *(std::vector<char>::pointer *)((char *)&v36.__end_ + 6) = "initializeSpatializer";
        HIWORD(v36.__end_cap_.__value_) = 1024;
        int v37 = a2;
        _os_log_error_impl(&dword_1BB0CE000, v11, OS_LOG_TYPE_ERROR, "[%s|%s] Invalid spatialization algorithm %u", (uint8_t *)&v36, 0x1Cu);
      }
      operator new();
  }
}

void sub_1BB4D7AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,const void *a52)
{
  applesauce::CF::DictionaryRef::~DictionaryRef(&a52);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&STACK[0x520]);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&STACK[0x528]);
  if (v54) {
    (*(void (**)(uint64_t))(*(void *)v54 + 8))(v54);
  }
  if (v53) {
    (*(void (**)(uint64_t))(*(void *)v53 + 8))(v53);
  }
  if (v52) {
    (*(void (**)(uint64_t))(*(void *)v52 + 8))(v52);
  }
  _Unwind_Resume(a1);
}

void Spatializer::propertyDictionarySetValue(uint64_t a1, const void *a2, const void **a3)
{
  if (*a3)
  {
    CFDictionaryRef v6 = *(const __CFDictionary **)(a1 + 32);
    if (v6) {
      MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(0, 0, v6);
    }
    else {
      MutableCFDictionaryRef Copy = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    }
    unsigned __int8 v8 = MutableCopy;
    CFDictionarySetValue(MutableCopy, a2, *a3);
    applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v10, v8);
    uint64_t v9 = *(const void **)(a1 + 32);
    *(void *)(a1 + 32) = v10;
    uint64_t v10 = v9;
    if (v9) {
      CFRelease(v9);
    }
    atomic_store(1u, (unsigned __int8 *)(a1 + 322));
  }
}

void *applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,BOOL>(void *a1, CFTypeRef cf, unsigned char *a3)
{
  if (cf) {
    CFRetain(cf);
  }
  if (*a3) {
    CFDictionaryRef v6 = (uint64_t *)MEMORY[0x1E4F1CFD0];
  }
  else {
    CFDictionaryRef v6 = (uint64_t *)MEMORY[0x1E4F1CFC8];
  }
  uint64_t v7 = *v6;
  *a1 = cf;
  a1[1] = v7;
  return a1;
}

void AUSpatialMixerV2ChannelProcessor::initializePropagationDelay(AUSpatialMixerV2ChannelProcessor *this)
{
}

void sub_1BB4D9044(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x10B0C4057A31370);
  _Unwind_Resume(a1);
}

uint64_t AUSpatialMixerV2ChannelProcessor::setEarlyReflectionsIRDataAttributes(uint64_t a1, int a2)
{
  uint64_t v44 = a1 + 472;
  char v45 = 1;
  caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)(a1 + 472));
  uint64_t v4 = *(void *)(a1 + 616);
  if (v4)
  {
    if (!*(void *)(a1 + 144)) {
      goto LABEL_26;
    }
    AUSM::OBHDConfig::getEarlyRoomSource(&v34, v4, 1, *(_DWORD *)(a1 + 588));
    uint64_t v5 = *(void *)(a1 + 144);
    CFTypeRef v7 = *(CFTypeRef *)(v5 + 16);
    CFDictionaryRef v6 = *(std::__shared_weak_count **)(v5 + 24);
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      CFTypeRef v8 = v34;
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      if (v8 != v7)
      {
        uint64_t v5 = *(void *)(a1 + 144);
LABEL_20:
        uint64_t v12 = v35;
        v43[0] = v8;
        v43[1] = v35;
        if (v35) {
          atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        IR::DynamicIRProcessor::setIRSource(v5, v43);
        if (v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
      }
    }
    else
    {
      CFTypeRef v8 = v34;
      if (v34 != v7) {
        goto LABEL_20;
      }
    }
    if (v35) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    }
LABEL_26:
    if (!*(void *)(a1 + 152)) {
      goto LABEL_37;
    }
    AUSM::OBHDConfig::getEarlyRoomSource(&v34, *(void *)(a1 + 616), 0, *(_DWORD *)(a1 + 588));
    uint64_t v13 = *(void *)(a1 + 152);
    CFTypeRef v15 = *(CFTypeRef *)(v13 + 16);
    uint64_t v14 = *(std::__shared_weak_count **)(v13 + 24);
    if (v14)
    {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      CFTypeRef v16 = v34;
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      if (v16 != v15)
      {
        uint64_t v13 = *(void *)(a1 + 152);
LABEL_31:
        float64_t v17 = v35;
        v42[0] = v16;
        v42[1] = v35;
        if (v35) {
          atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        IR::DynamicIRProcessor::setIRSource(v13, v42);
        if (v17) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v17);
        }
      }
    }
    else
    {
      CFTypeRef v16 = v34;
      if (v34 != v15) {
        goto LABEL_31;
      }
    }
    if (v35) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    }
LABEL_37:
    if (!*(void *)(a1 + 160)) {
      return std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v44);
    }
    AUSM::OBHDConfig::getEarlyRoomSource(&v34, *(void *)(a1 + 616), 2, *(_DWORD *)(a1 + 588));
    uint64_t v18 = *(void *)(a1 + 160);
    CFTypeRef v20 = *(CFTypeRef *)(v18 + 16);
    uint64_t v19 = *(std::__shared_weak_count **)(v18 + 24);
    if (v19)
    {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      CFTypeRef v21 = v34;
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      if (v21 != v20)
      {
        uint64_t v18 = *(void *)(a1 + 160);
LABEL_42:
        uint64_t v22 = v35;
        v41[0] = v21;
        v41[1] = v35;
        if (v35) {
          atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        IR::DynamicIRProcessor::setIRSource(v18, v41);
        if (v22) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v22);
        }
      }
    }
    else
    {
      CFTypeRef v21 = v34;
      if (v34 != v20) {
        goto LABEL_42;
      }
    }
    if (v35) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    }
    return std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v44);
  }
  if (a2)
  {
    if (a2 == 1)
    {
      uint64_t v9 = *(void *)(a1 + 144);
      if (v9)
      {
        uint64_t v10 = *(void *)(a1 + 576);
        std::mutex::lock((std::mutex *)(v10 + 1560));
        IR::IRDataAttributes::IRDataAttributes((uint64_t)&v34, v10 + 528);
        std::mutex::unlock((std::mutex *)(v10 + 1560));
        std::allocate_shared[abi:ne180100]<IR::DataLoaderSource,std::allocator<IR::DataLoaderSource>,IR::IRDataAttributes,void>((IR::DataLoaderSource **)&v39, (const IR::IRDataAttributes *)&v34);
        long long v40 = v39;
        long long v39 = 0uLL;
        float64x2_t v11 = (std::__shared_weak_count *)*((void *)&v40 + 1);
        IR::DynamicIRProcessor::setIRSource(v9, &v40);
        if (v11) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
        if (cf) {
          CFRelease(cf);
        }
        if (v37) {
          CFRelease(v37);
        }
        if (v36) {
          CFRelease(v36);
        }
        if (v34) {
          CFRelease(v34);
        }
      }
    }
  }
  else
  {
    uint64_t v23 = *(void *)(a1 + 152);
    if (v23)
    {
      uint64_t v24 = *(void *)(a1 + 576);
      std::mutex::lock((std::mutex *)(v24 + 1560));
      IR::IRDataAttributes::IRDataAttributes((uint64_t)&v34, v24 + 864);
      std::mutex::unlock((std::mutex *)(v24 + 1560));
      std::allocate_shared[abi:ne180100]<IR::DataLoaderSource,std::allocator<IR::DataLoaderSource>,IR::IRDataAttributes,void>((IR::DataLoaderSource **)&v39, (const IR::IRDataAttributes *)&v34);
      long long v33 = v39;
      CFTypeRef v25 = (std::__shared_weak_count *)*((void *)&v39 + 1);
      long long v39 = 0uLL;
      CFTypeRef v26 = v25;
      IR::DynamicIRProcessor::setIRSource(v23, &v33);
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
      if (cf) {
        CFRelease(cf);
      }
      if (v37) {
        CFRelease(v37);
      }
      if (v36) {
        CFRelease(v36);
      }
      if (v34) {
        CFRelease(v34);
      }
    }
  }
  if (*(void *)(a1 + 160))
  {
    uint64_t v27 = *(void *)(a1 + 576);
    std::mutex::lock((std::mutex *)(v27 + 1560));
    IR::IRDataAttributes::IRDataAttributes((uint64_t)&v34, v27 + 1200);
    std::mutex::unlock((std::mutex *)(v27 + 1560));
    uint64_t v28 = *(void *)(a1 + 160);
    if (v34)
    {
      std::allocate_shared[abi:ne180100]<IR::DataLoaderSource,std::allocator<IR::DataLoaderSource>,IR::IRDataAttributes &,void>((IR::DataLoaderSource **)&v39, (const IR::IRDataAttributes *)&v34);
      long long v32 = v39;
      uint64_t v29 = (std::__shared_weak_count *)*((void *)&v39 + 1);
      IR::DynamicIRProcessor::setIRSource(v28, &v32);
      if (v29) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v29);
      }
    }
    else
    {
      v31[0] = 0;
      v31[1] = 0;
      IR::DynamicIRProcessor::setIRSource(v28, v31);
    }
    if (cf) {
      CFRelease(cf);
    }
    if (v37) {
      CFRelease(v37);
    }
    if (v36) {
      CFRelease(v36);
    }
    if (v34) {
      CFRelease(v34);
    }
  }
  return std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v44);
}

void sub_1BB4D9480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)va);
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100](v9 - 64);
  _Unwind_Resume(a1);
}

IR::DataLoaderSource *std::allocate_shared[abi:ne180100]<IR::DataLoaderSource,std::allocator<IR::DataLoaderSource>,IR::IRDataAttributes,void>(IR::DataLoaderSource **a1, const IR::IRDataAttributes *a2)
{
  uint64_t v4 = operator new(0x108uLL);
  v4[1] = 0;
  v4[2] = 0;
  *uint64_t v4 = &unk_1F14BD908;
  uint64_t result = IR::DataLoaderSource::DataLoaderSource((IR::DataLoaderSource *)(v4 + 3), a2);
  *a1 = result;
  a1[1] = (IR::DataLoaderSource *)v4;
  return result;
}

void sub_1BB4D9584(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void AUSpatialMixerV2ChannelProcessor::updateSpatializationParameters(AUSpatialMixerV2ChannelProcessor *this)
{
  uint64_t v112 = *MEMORY[0x1E4F143B8];
  float v2 = *((float *)this + 305);
  float v3 = *((float *)this + 304);
  float v4 = atan2f(v2, v3) * 57.296;
  float v5 = *((float *)this + 306);
  float v6 = hypotf(v3, v2);
  float v7 = atan2f(-v5, v6) * 57.296;
  float v8 = sqrtf((float)((float)(v2 * v2) + (float)(v3 * v3)) + (float)(v5 * v5));
  if (*(unsigned char *)(*((void *)this + 80) + 179)) {
    float v9 = -1.0;
  }
  else {
    float v9 = 1.0;
  }
  (*(void (**)(void, float))(**((void **)this + 22) + 56))(*((void *)this + 22), v4 * v9);
  (*(void (**)(void, float))(**((void **)this + 22) + 64))(*((void *)this + 22), v7);
  (*(void (**)(void, float))(**((void **)this + 22) + 72))(*((void *)this + 22), v8);
  AUSpatialMixerV2ChannelProcessor::setERProcessorIRDataCoordinate((uint64_t **)this, 0, v4 * v9);
  AUSpatialMixerV2ChannelProcessor::setERProcessorIRDataCoordinate((uint64_t **)this, 1u, v7);
  AUSpatialMixerV2ChannelProcessor::setERProcessorIRDataCoordinate((uint64_t **)this, 2u, v8);
  if (*((unsigned char *)this + 1232))
  {
    uint64_t v10 = *((void *)this + 23);
    if (v10)
    {
      float v11 = *((float *)this + 313);
      float v12 = *((float *)this + 312);
      float v13 = atan2f(v11, v12) * 57.296;
      float v14 = *((float *)this + 314);
      float v15 = hypotf(v12, v11);
      float v16 = atan2f(-v14, v15) * 57.296;
      (*(void (**)(uint64_t, float))(*(void *)v10 + 56))(v10, v9 * v13);
      (*(void (**)(void, float))(**((void **)this + 23) + 64))(*((void *)this + 23), v16);
      (*(void (**)(void, float))(**((void **)this + 23) + 72))(*((void *)this + 23), sqrtf((float)((float)(v11 * v11) + (float)(v12 * v12)) + (float)(v14 * v14)));
    }
    uint64_t v17 = *((void *)this + 24);
    if (v17)
    {
      float v18 = *((float *)this + 317);
      float v19 = *((float *)this + 316);
      float v20 = atan2f(v18, v19) * 57.296;
      float v21 = *((float *)this + 318);
      float v22 = hypotf(v19, v18);
      float v23 = atan2f(-v21, v22) * 57.296;
      (*(void (**)(uint64_t, float))(*(void *)v17 + 56))(v17, v9 * v20);
      (*(void (**)(void, float))(**((void **)this + 24) + 64))(*((void *)this + 24), v23);
      (*(void (**)(void, float))(**((void **)this + 24) + 72))(*((void *)this + 24), sqrtf((float)((float)(v18 * v18) + (float)(v19 * v19)) + (float)(v21 * v21)));
    }
    int v24 = *((_DWORD *)this + 309);
  }
  else
  {
    int v24 = 0;
  }
  *((_DWORD *)this + 50) = v24;
  float v25 = *((float *)this + 321);
  (*(void (**)(void, float))(**((void **)this + 22) + 80))(*((void *)this + 22), v25);
  uint64_t v26 = *((void *)this + 23);
  if (v26) {
    (*(void (**)(uint64_t, float))(*(void *)v26 + 80))(v26, v25);
  }
  uint64_t v27 = *((void *)this + 24);
  if (v27) {
    (*(void (**)(uint64_t, float))(*(void *)v27 + 80))(v27, v25);
  }
  float v28 = *((float *)this + 322);
  (*(void (**)(void, float))(**((void **)this + 22) + 88))(*((void *)this + 22), v28);
  uint64_t v29 = *((void *)this + 23);
  if (v29) {
    (*(void (**)(uint64_t, float))(*(void *)v29 + 88))(v29, v28);
  }
  char v30 = (float *)((char *)this + 1280);
  uint64_t v31 = *((void *)this + 24);
  if (v31) {
    (*(void (**)(uint64_t, float))(*(void *)v31 + 88))(v31, v28);
  }
  float v32 = *v30;
  (*(void (**)(void, float))(**((void **)this + 22) + 96))(*((void *)this + 22), *v30);
  uint64_t v33 = *((void *)this + 23);
  if (v33) {
    (*(void (**)(uint64_t, float))(*(void *)v33 + 96))(v33, v32);
  }
  uint64_t v34 = *((void *)this + 24);
  if (v34) {
    (*(void (**)(uint64_t, float))(*(void *)v34 + 96))(v34, v32);
  }
  float Parameter = ausdk::AUElement::GetParameter(**((ausdk::AUElement ***)this + 80), 0x21u);
  (*(void (**)(void))(**((void **)this + 22) + 112))(*((void *)this + 22));
  uint64_t v36 = *((void *)this + 23);
  if (v36) {
    (*(void (**)(uint64_t, float))(*(void *)v36 + 112))(v36, Parameter);
  }
  uint64_t v37 = *((void *)this + 24);
  if (v37) {
    (*(void (**)(uint64_t, float))(*(void *)v37 + 112))(v37, Parameter);
  }
  uint64_t v38 = *((void *)this + 80);
  if (*(unsigned char *)(v38 + 176)) {
    BOOL v39 = *(unsigned __int8 *)(v38 + 177) == 0;
  }
  else {
    BOOL v39 = 0;
  }
  (*(void (**)(void, BOOL))(**((void **)this + 22) + 144))(*((void *)this + 22), v39);
  uint64_t v40 = *((void *)this + 23);
  if (v40) {
    (*(void (**)(uint64_t, BOOL))(*(void *)v40 + 144))(v40, v39);
  }
  uint64_t v41 = *((void *)this + 24);
  if (v41) {
    (*(void (**)(uint64_t, BOOL))(*(void *)v41 + 144))(v41, v39);
  }
  uint64_t v42 = *(unsigned int *)(*((void *)this + 80) + 64);
  (*(void (**)(void, uint64_t))(**((void **)this + 22) + 120))(*((void *)this + 22), v42);
  uint64_t v43 = *((void *)this + 23);
  if (v43) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v43 + 120))(v43, v42);
  }
  uint64_t v44 = *((void *)this + 24);
  if (v44) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v44 + 120))(v44, v42);
  }
  float v45 = *((float *)this + 335);
  (*(void (**)(void, float))(**((void **)this + 22) + 128))(*((void *)this + 22), v45);
  uint64_t v46 = *((void *)this + 23);
  if (v46) {
    (*(void (**)(uint64_t, float))(*(void *)v46 + 128))(v46, v45);
  }
  uint64_t v47 = *((void *)this + 24);
  if (v47) {
    (*(void (**)(uint64_t, float))(*(void *)v47 + 128))(v47, v45);
  }
  float v48 = ausdk::AUElement::GetParameter(**((ausdk::AUElement ***)this + 80), 0x28u);
  (*(void (**)(void))(**((void **)this + 22) + 136))(*((void *)this + 22));
  uint64_t v49 = *((void *)this + 23);
  if (v49) {
    (*(void (**)(uint64_t, float))(*(void *)v49 + 136))(v49, v48);
  }
  uint64_t v50 = *((void *)this + 24);
  if (v50) {
    (*(void (**)(uint64_t, float))(*(void *)v50 + 136))(v50, v48);
  }
  uint64_t v51 = *(unsigned int *)(*((void *)this + 81) + 572);
  (*(void (**)(void, uint64_t))(**((void **)this + 22) + 168))(*((void *)this + 22), v51);
  uint64_t v52 = *((void *)this + 23);
  if (v52) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v52 + 168))(v52, v51);
  }
  uint64_t v53 = *((void *)this + 24);
  if (v53) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v53 + 168))(v53, v51);
  }
  float v54 = *(float *)(*((void *)this + 80) + 204);
  (*(void (**)(void, float))(**((void **)this + 22) + 184))(*((void *)this + 22), v54);
  uint64_t v55 = *((void *)this + 23);
  if (v55) {
    (*(void (**)(uint64_t, float))(*(void *)v55 + 184))(v55, v54);
  }
  uint64_t v56 = *((void *)this + 24);
  if (v56) {
    (*(void (**)(uint64_t, float))(*(void *)v56 + 184))(v56, v54);
  }
  float v57 = *(float *)(*((void *)this + 80) + 208);
  (*(void (**)(void, float))(**((void **)this + 22) + 192))(*((void *)this + 22), v57);
  uint64_t v58 = *((void *)this + 23);
  if (v58) {
    (*(void (**)(uint64_t, float))(*(void *)v58 + 192))(v58, v57);
  }
  uint64_t v59 = *((void *)this + 24);
  if (v59) {
    (*(void (**)(uint64_t, float))(*(void *)v59 + 192))(v59, v57);
  }
  uint64_t v60 = *((void *)this + 68);
  if (v60)
  {
    float32x4_t v61 = vmulq_f32(*((float32x4_t *)this + 44), *((float32x4_t *)this + 44));
    float v62 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v61, 2), vaddq_f32(v61, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v61.f32, 1))).f32[0])* 2.907;
    if (*((float *)this + 75) < v62) {
      float v62 = *((float *)this + 75);
    }
    IR::DelayLine::setDelay(v60, roundf(*((float *)this + 59) * (float)(v62 / 1000.0)));
  }
  uint64_t v63 = *((void *)this + 17);
  if (v63 && *((unsigned char *)this + 1296))
  {
    float32x4_t v64 = *((float32x4_t *)this + 82);
    int8x16_t v65 = (int8x16_t)vmulq_f32(v64, v64);
    *(float32x2_t *)v65.i8 = vadd_f32(*(float32x2_t *)v65.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v65, v65, 8uLL));
    v65.i32[0] = vadd_f32(*(float32x2_t *)v65.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v65.i8, 1)).u32[0];
    float32x2_t v66 = vrecpe_f32((float32x2_t)v65.u32[0]);
    float32x2_t v67 = vmul_f32(v66, vrecps_f32((float32x2_t)v65.u32[0], v66));
    float32x4_t v68 = vmulq_n_f32(vmulq_f32(v64, (float32x4_t)xmmword_1BB879E20), vmul_f32(v67, vrecps_f32((float32x2_t)v65.u32[0], v67)).f32[0]);
    float32x4_t v69 = *((float32x4_t *)this + 76);
    float32x4_t v70 = vmulq_f32(v68, (float32x4_t)xmmword_1BB879E20);
    int32x4_t v71 = (int32x4_t)vnegq_f32(v70);
    int8x16_t v72 = (int8x16_t)vtrn2q_s32((int32x4_t)v70, vtrn1q_s32((int32x4_t)v70, v71));
    float32x4_t v73 = vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v70, (int8x16_t)v71, 8uLL), (float32x2_t)*(_OWORD *)&vnegq_f32(v69), 1);
    float32x4_t v74 = (float32x4_t)vrev64q_s32((int32x4_t)v70);
    v74.i32[0] = v71.i32[1];
    v74.i32[3] = v71.i32[2];
    float32x4_t v75 = vmlsq_laneq_f32(vmlsq_lane_f32(v73, (float32x4_t)vextq_s8(v72, v72, 8uLL), *(float32x2_t *)v69.f32, 0), v74, v69, 2);
    int32x4_t v76 = (int32x4_t)vnegq_f32(v75);
    int8x16_t v77 = (int8x16_t)vtrn2q_s32((int32x4_t)v75, vtrn1q_s32((int32x4_t)v75, v76));
    float32x4_t v78 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v75, (int8x16_t)v76, 8uLL), *(float32x2_t *)v68.f32, 1), (float32x4_t)vextq_s8(v77, v77, 8uLL), v68.f32[0]);
    float32x4_t v79 = (float32x4_t)vrev64q_s32((int32x4_t)v75);
    v79.i32[0] = v76.i32[1];
    v79.i32[3] = v76.i32[2];
    float32x4_t v100 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v75, v68, 3), v79, v68, 2), v78);
    float v80 = atan2f(v100.f32[1], v100.f32[0]);
    float v81 = hypotf(v100.f32[0], v100.f32[1]);
    float v82 = atan2f(-v100.f32[2], v81);
    *(_DWORD *)AudioTimeStamp buf = 0;
    atomic_store(COERCE_UNSIGNED_INT(v80 * 57.296), (unsigned int *)std::__tree<std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::__map_value_compare<IR::IRCoordinateType,std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::less<IR::IRCoordinateType>,true>,std::allocator<std::__value_type<IR::IRCoordinateType,std::atomic<float>>>>::__emplace_unique_key_args<IR::IRCoordinateType,std::piecewise_construct_t const&,std::tuple<IR::IRCoordinateType const&>,std::tuple<>>((uint64_t **)(v63 + 88), 0, buf)+ 8);
    __dmb(0xBu);
    atomic_store(1u, (unsigned __int8 *)(v63 + 112));
    uint64_t v83 = *((void *)this + 17);
    *(_DWORD *)AudioTimeStamp buf = 1;
    atomic_store(COERCE_UNSIGNED_INT(v82 * 57.296), (unsigned int *)std::__tree<std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::__map_value_compare<IR::IRCoordinateType,std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::less<IR::IRCoordinateType>,true>,std::allocator<std::__value_type<IR::IRCoordinateType,std::atomic<float>>>>::__emplace_unique_key_args<IR::IRCoordinateType,std::piecewise_construct_t const&,std::tuple<IR::IRCoordinateType const&>,std::tuple<>>((uint64_t **)(v83 + 88), 1u, buf)+ 8);
    __dmb(0xBu);
    atomic_store(1u, (unsigned __int8 *)(v83 + 112));
  }
  if ((*(unsigned char *)(*(void *)(*((void *)this + 71) + 232) + 2576) & 2) != 0)
  {
    if (*((void *)this + 17)) {
      BOOL v84 = *((unsigned char *)this + 1296) == 0;
    }
    else {
      BOOL v84 = 1;
    }
    char v85 = v84;
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    uint64_t v86 = getAUSMV2Log(void)::gLog;
    BOOL v87 = os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT);
    if (v85)
    {
      if (v87)
      {
        std::string::size_type v88 = (void *)((char *)this + 592);
        if (*((char *)this + 615) < 0) {
          std::string::size_type v88 = (void *)*v88;
        }
        AUSM::ObjectParameters::print(&__p, (float32x4_t *)this + 76);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        long long v103 = v88;
        __int16 v104 = 2080;
        CFTypeRef v105 = "updateSpatializationParameters";
        __int16 v106 = 2080;
        char v107 = p_p;
        float v90 = "[%s|%s] AUSM_VERBOSE: %s";
        long long v91 = v86;
        uint32_t v92 = 32;
LABEL_89:
        _os_log_impl(&dword_1BB0CE000, v91, OS_LOG_TYPE_DEFAULT, v90, buf, v92);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
    else if (v87)
    {
      std::string::size_type v93 = (void *)((char *)this + 592);
      if (*((char *)this + 615) < 0) {
        std::string::size_type v93 = (void *)*v93;
      }
      AUSM::ObjectParameters::print(&__p, (float32x4_t *)this + 76);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        float v94 = &__p;
      }
      else {
        float v94 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      float Coordinate = IR::DynamicIRProcessor::getCoordinate(*((void *)this + 17), 0);
      float v96 = IR::DynamicIRProcessor::getCoordinate(*((void *)this + 17), 1u);
      *(_DWORD *)AudioTimeStamp buf = 136316162;
      long long v103 = v93;
      __int16 v104 = 2080;
      CFTypeRef v105 = "updateSpatializationParameters";
      __int16 v106 = 2080;
      char v107 = v94;
      __int16 v108 = 2048;
      double v109 = Coordinate;
      __int16 v110 = 2048;
      double v111 = v96;
      float v90 = "[%s|%s] AUSM_VERBOSE: %s, dirAz=%.1f, dirEl=%.1f";
      long long v91 = v86;
      uint32_t v92 = 52;
      goto LABEL_89;
    }
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    unint64_t v97 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v98 = (void *)((char *)this + 592);
      if (*((char *)this + 615) < 0) {
        unint64_t v98 = (void *)*v98;
      }
      AUSM::GainParameters::print((AUSM::GainParameters *)&__p, (float *)this + 336);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v99 = &__p;
      }
      else {
        long long v99 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      long long v103 = v98;
      __int16 v104 = 2080;
      CFTypeRef v105 = "updateSpatializationParameters";
      __int16 v106 = 2080;
      char v107 = v99;
      _os_log_impl(&dword_1BB0CE000, v97, OS_LOG_TYPE_DEFAULT, "[%s|%s] AUSM_VERBOSE: %s", buf, 0x20u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_1BB4DA3C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **AUSpatialMixerV2ChannelProcessor::setERProcessorIRDataCoordinate(uint64_t **result, unsigned int a2, float a3)
{
  float v5 = result;
  float v6 = result[18];
  if (v6)
  {
    unsigned int v9 = a2;
    uint64_t result = std::__tree<std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::__map_value_compare<IR::IRCoordinateType,std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::less<IR::IRCoordinateType>,true>,std::allocator<std::__value_type<IR::IRCoordinateType,std::atomic<float>>>>::__emplace_unique_key_args<IR::IRCoordinateType,std::piecewise_construct_t const&,std::tuple<IR::IRCoordinateType const&>,std::tuple<>>((uint64_t **)v6 + 11, a2, &v9);
    atomic_store(LODWORD(a3), (unsigned int *)result + 8);
    __dmb(0xBu);
    atomic_store(1u, (unsigned __int8 *)v6 + 112);
  }
  float v7 = v5[19];
  if (v7)
  {
    unsigned int v10 = a2;
    uint64_t result = std::__tree<std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::__map_value_compare<IR::IRCoordinateType,std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::less<IR::IRCoordinateType>,true>,std::allocator<std::__value_type<IR::IRCoordinateType,std::atomic<float>>>>::__emplace_unique_key_args<IR::IRCoordinateType,std::piecewise_construct_t const&,std::tuple<IR::IRCoordinateType const&>,std::tuple<>>((uint64_t **)v7 + 11, a2, &v10);
    atomic_store(LODWORD(a3), (unsigned int *)result + 8);
    __dmb(0xBu);
    atomic_store(1u, (unsigned __int8 *)v7 + 112);
  }
  float v8 = v5[20];
  if (v8)
  {
    unsigned int v11 = a2;
    uint64_t result = std::__tree<std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::__map_value_compare<IR::IRCoordinateType,std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::less<IR::IRCoordinateType>,true>,std::allocator<std::__value_type<IR::IRCoordinateType,std::atomic<float>>>>::__emplace_unique_key_args<IR::IRCoordinateType,std::piecewise_construct_t const&,std::tuple<IR::IRCoordinateType const&>,std::tuple<>>((uint64_t **)v8 + 11, a2, &v11);
    atomic_store(LODWORD(a3), (unsigned int *)result + 8);
    __dmb(0xBu);
    atomic_store(1u, (unsigned __int8 *)v8 + 112);
  }
  return result;
}

void AUSM::ObjectParameters::print(std::string *this, float32x4_t *a2)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  float v5 = a2->f32[0];
  float v4 = a2->f32[1];
  float v6 = atan2f(v4, a2->f32[0]) * 57.296;
  float v7 = a2->f32[2];
  float v8 = hypotf(v5, v4);
  float v9 = atan2f(-v7, v8) * 57.296;
  float v10 = sqrtf((float)((float)(v4 * v4) + (float)(v5 * v5)) + (float)(v7 * v7));
  float v11 = log10f(a2[7].f32[1]) * 20.0;
  float v12 = log10f(a2[7].f32[0]) * 20.0;
  float v13 = log10f(a2[7].f32[2]);
  *(float *)float v45 = v6;
  float v46 = v9;
  float v47 = v10;
  *(float *)&uint64_t v48 = v11;
  float v49 = v12;
  float v50 = v13 * 20.0;
  float v14 = a2[7].f32[3];
  uint64_t v52 = 0x25294A529;
  float v51 = v14;
  this->__r_.__value_.__l.__size_ = 0;
  this->__r_.__value_.__r.__words[2] = 0;
  this->__r_.__value_.__r.__words[0] = 0;
  uint64_t v42 = 7;
  uint64_t v43 = v45;
  uint64_t v44 = 0x25294A529;
  float v15 = (AUSM *)std::__vformat_to[abi:ne180100]<std::back_insert_iterator<std::string>,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>((uint64_t)this, "az={:.1f}, el={:.1f}, r={:.2f}, tuningGaindB={:.1f}, rGaindB={:.1f}, ppDRRdB={:.1f}, internalized={:.1f}", 104, &v42);
  float32x4_t v16 = a2[4];
  float32x4_t v17 = vmulq_f32(v16, v16);
  if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 2), vaddq_f32(v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 1))).f32[0]) > 0.001)
  {
    v45[0] = HIDWORD(a2[4].i64[0]);
    float v46 = v16.f32[2];
    uint64_t v48 = 9513;
    float v47 = v16.f32[0];
    std::string::size_type v40 = 0;
    uint64_t v41 = 0;
    std::string __p = 0;
    uint64_t v42 = 3;
    uint64_t v43 = v45;
    uint64_t v44 = 9513;
    std::__vformat_to[abi:ne180100]<std::back_insert_iterator<std::string>,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>((uint64_t)&__p, " -- size: w={:.2f}, h={:.2f}, d={:.2f}", 38, &v42);
    float v18 = v41 >= 0 ? (const std::string::value_type *)&__p : (const std::string::value_type *)__p;
    std::string::size_type v19 = v41 >= 0 ? HIBYTE(v41) : v40;
    float v15 = (AUSM *)std::string::append(this, v18, v19);
    if (SHIBYTE(v41) < 0) {
      operator delete(__p);
    }
  }
  if (a2[1].i8[0])
  {
    float v21 = a2[2].f32[0];
    float v20 = a2[2].f32[1];
    float v38 = atan2f(v20, v21) * 57.296;
    float v22 = a2[2].f32[2];
    float v23 = hypotf(v21, v20);
    float v24 = atan2f(-v22, v23) * 57.296;
    float v25 = sqrtf((float)((float)(v20 * v20) + (float)(v21 * v21)) + (float)(v22 * v22));
    float v27 = a2[3].f32[0];
    float v26 = a2[3].f32[1];
    float v28 = atan2f(v26, v27) * 57.296;
    float v29 = a2[3].f32[2];
    float v30 = hypotf(v27, v26);
    float v31 = atan2f(-v29, v30);
    v45[0] = a2[1].i32[1];
    float v46 = v38;
    float v47 = v24;
    *(float *)&uint64_t v48 = v25;
    float v49 = v28;
    uint64_t v52 = 0x25294A529;
    float v50 = v31 * 57.296;
    float v51 = sqrtf((float)((float)(v26 * v26) + (float)(v27 * v27)) + (float)(v29 * v29));
    std::string::size_type v40 = 0;
    uint64_t v41 = 0;
    std::string __p = 0;
    uint64_t v42 = 7;
    uint64_t v43 = v45;
    uint64_t v44 = 0x25294A529;
    std::__vformat_to[abi:ne180100]<std::back_insert_iterator<std::string>,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>((uint64_t)&__p, " -- div={:.2f} left: az={:.1f}, el={:.1f}, r={:.1f}; right: az={:.1f}, el={:.1f}, r={:.1f}",
      90,
      &v42);
    float v32 = v41 >= 0 ? (const std::string::value_type *)&__p : (const std::string::value_type *)__p;
    std::string::size_type v33 = v41 >= 0 ? HIBYTE(v41) : v40;
    float v15 = (AUSM *)std::string::append(this, v32, v33);
    if (SHIBYTE(v41) < 0) {
      operator delete(__p);
    }
  }
  if (a2[5].i8[0])
  {
    v45[0] = AUSM::auCoordQuaternionToEuler(v15, a2[6]);
    float v46 = v34;
    uint64_t v48 = 9513;
    float v47 = v35;
    std::string::size_type v40 = 0;
    uint64_t v41 = 0;
    std::string __p = 0;
    uint64_t v42 = 3;
    uint64_t v43 = v45;
    uint64_t v44 = 9513;
    std::__vformat_to[abi:ne180100]<std::back_insert_iterator<std::string>,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>((uint64_t)&__p, " -- yaw={:.1f} pitch={:.1f} roll={:.1f}", 39, &v42);
    if (v41 >= 0) {
      p_p = (const std::string::value_type *)&__p;
    }
    else {
      p_p = (const std::string::value_type *)__p;
    }
    if (v41 >= 0) {
      std::string::size_type v37 = HIBYTE(v41);
    }
    else {
      std::string::size_type v37 = v40;
    }
    std::string::append(this, p_p, v37);
    if (SHIBYTE(v41) < 0) {
      operator delete(__p);
    }
  }
}

void sub_1BB4DA898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v16 + 23) < 0) {
    operator delete(*(void **)v16);
  }
  _Unwind_Resume(exception_object);
}

float IR::DynamicIRProcessor::getCoordinate(uint64_t a1, unsigned int a2)
{
  unsigned int v7 = a2;
  float v2 = *(uint64_t **)(a1 + 96);
  float result = 0.0;
  if (v2)
  {
    float v4 = (uint64_t **)(a1 + 88);
    do
    {
      unsigned int v5 = *((_DWORD *)v2 + 7);
      if (v5 <= a2)
      {
        if (v5 >= a2) {
          return COERCE_FLOAT(atomic_load((unsigned int *)std::__tree<std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::__map_value_compare<IR::IRCoordinateType,std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::less<IR::IRCoordinateType>,true>,std::allocator<std::__value_type<IR::IRCoordinateType,std::atomic<float>>>>::__emplace_unique_key_args<IR::IRCoordinateType,std::piecewise_construct_t const&,std::tuple<IR::IRCoordinateType const&>,std::tuple<>>(v4, a2, &v7)+ 8));
        }
        ++v2;
      }
      float v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  return result;
}

uint64_t **std::__tree<std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::__map_value_compare<IR::IRCoordinateType,std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::less<IR::IRCoordinateType>,true>,std::allocator<std::__value_type<IR::IRCoordinateType,std::atomic<float>>>>::__emplace_unique_key_args<IR::IRCoordinateType,std::piecewise_construct_t const&,std::tuple<IR::IRCoordinateType const&>,std::tuple<>>(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  float v6 = a1 + 1;
  unsigned int v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unsigned int v7 = (uint64_t **)v5;
        unsigned int v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2) {
          break;
        }
        unsigned int v5 = *v7;
        float v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      unsigned int v5 = v7[1];
      if (!v5)
      {
        float v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    unsigned int v7 = a1 + 1;
LABEL_9:
    float v9 = (uint64_t *)v7;
    unsigned int v7 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v7 + 7) = *a3;
    *((_DWORD *)v7 + 8) = 0;
    *unsigned int v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *float v6 = (uint64_t *)v7;
    float v10 = (uint64_t *)**a1;
    float v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      float v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void std::make_unique[abi:ne180100]<HRTFOBHDSpatializer,std::shared_ptr<IR::WeightedSumOfCache>,std::atomic<BOOL> const&,std::atomic<BOOL> const&>()
{
}

void sub_1BB4DAB4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, void **a12, std::__shared_weak_count *a13)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  a12 = v13 + 45;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a12);
  uint64_t v16 = *v14;
  uint64_t *v14 = 0;
  if (v16) {
    std::default_delete<IR::DynamicIRProcessor>::operator()[abi:ne180100](v16);
  }
  Spatializer::~Spatializer((Spatializer *)v13);
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MEMORY[0x1C185D370](v13, 0x10E1C4066301814);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<IR::DynamicIRProcessor,std::shared_ptr<IR::WeightedSumOfCache>,IR::DynamicIRProcessor::ConfigParams &,std::shared_ptr<caulk::concurrent::messenger>>()
{
}

void sub_1BB4DAC84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MEMORY[0x1C185D370](v10, 0x10A0C402959731ALL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<HRTFNFSpatializer,IR::IRDataAttributes &,IR::IRDataAttributes &,applesauce::CF::DictionaryRef,BOOL,std::atomic<BOOL> const&>()
{
}

void sub_1BB4DB02C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, const void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  float v21 = (uint64_t *)(v15 + 688);
  float v22 = *(void **)(v15 + 720);
  if (v22)
  {
    *(void *)(v15 + 728) = v22;
    operator delete(v22);
  }
  std::unique_ptr<IR::DelayLine>::reset[abi:ne180100]((IR::DelayLine **)(v15 + 712), 0);
  uint64_t v23 = *v21;
  *float v21 = 0;
  if (v23) {
    std::default_delete<SourceExtentProcessor>::operator()[abi:ne180100](v23);
  }
  IR::IRDataAttributes::~IRDataAttributes(v16);
  a15 = (void **)(v15 + 480);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a15);
  float v24 = *v19;
  if (*v19)
  {
    *(void *)(v15 + 464) = v24;
    operator delete(v24);
  }
  std::__optional_destruct_base<IR::FixedIntegerDelay,false>::~__optional_destruct_base[abi:ne180100](a10);
  a15 = (void **)(v15 + 368);
  std::vector<std::unique_ptr<IR::DelayLine>>::__destroy_vector::operator()[abi:ne180100](&a15);
  uint64_t v25 = *(void *)(v15 + 360);
  *(void *)(v15 + 360) = 0;
  if (v25) {
    std::default_delete<BypassableIRProcessor>::operator()[abi:ne180100](v25);
  }
  uint64_t v26 = *v18;
  uint64_t *v18 = 0;
  if (v26) {
    std::default_delete<IR::DynamicIRProcessor>::operator()[abi:ne180100](v26);
  }
  Spatializer::~Spatializer((Spatializer *)v15);
  applesauce::CF::DictionaryRef::~DictionaryRef(&a11);
  MEMORY[0x1C185D370](v15, 0x10E1C40942570A7);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<IR::DynamicIRProcessor,IR::IRDataAttributes,IR::DynamicIRProcessor::ConfigParams &,std::shared_ptr<caulk::concurrent::messenger>>()
{
}

void sub_1BB4DB20C(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  MEMORY[0x1C185D370](v1, 0x10A0C402959731ALL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<HRTFXTCSpatializer,IR::IRDataAttributes &,std::atomic<BOOL> const&>()
{
}

void sub_1BB4DB610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, CFTypeRef a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, CFTypeRef a18, uint64_t a19, uint64_t a20,CFTypeRef a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,CFTypeRef cf,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,std::__shared_weak_count *a38)
{
  MEMORY[0x1C185D370](v40, 0x10A1C40AF302FDBLL);
  a9 = &unk_1F14BD940;
  if (a38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a38);
  }
  a9 = &unk_1F14BEDB0;
  if (cf) {
    CFRelease(cf);
  }
  if (a21) {
    CFRelease(a21);
  }
  if (a18) {
    CFRelease(a18);
  }
  if (a10) {
    CFRelease(a10);
  }
  uint64_t v43 = v38[63];
  if (v43)
  {
    v38[64] = v43;
    operator delete(v43);
  }
  uint64_t v44 = (uint64_t)v38[62];
  v38[62] = 0;
  if (v44) {
    std::default_delete<SourceExtentProcessor>::operator()[abi:ne180100](v44);
  }
  float v45 = v38 + 54;
  float v46 = *v41;
  if (*v41)
  {
    v38[60] = v46;
    operator delete(v46);
  }
  float v47 = *v45;
  if (*v45)
  {
    v38[55] = v47;
    operator delete(v47);
  }
  uint64_t v48 = v38[49];
  if (v48)
  {
    v38[50] = v48;
    operator delete(v48);
  }
  float v49 = v38[48];
  v38[48] = 0;
  if (v49) {
    std::default_delete<IR::FixedIntegerDelay>::operator()[abi:ne180100](v49);
  }
  a9 = v38 + 45;
  std::vector<std::unique_ptr<IR::DelayLine>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  std::unique_ptr<IR::IRProcessor>::reset[abi:ne180100](v39, 0);
  Spatializer::~Spatializer((Spatializer *)v38);
  MEMORY[0x1C185D370]();
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<VBAPSpatializer,AudioChannelLayout &>()
{
}

void sub_1BB4DB880(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x10F1C4060D359F4);
  _Unwind_Resume(a1);
}

void *Spatializer::getParams(Spatializer *this, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)this = *(_OWORD *)(a2 + 48);
  *((_OWORD *)this + 1) = v4;
  uint64_t v6 = *(void *)(a2 + 80);
  unsigned int v5 = *(const void **)(a2 + 88);
  *((void *)this + 4) = v6;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  std::vector<AUSM::ExclusionZone>::__init_with_size[abi:ne180100]<AUSM::ExclusionZone*,AUSM::ExclusionZone*>((void *)this + 5, v5, *(void *)(a2 + 96), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 96) - (void)v5) >> 2));
  long long v7 = *(_OWORD *)(a2 + 112);
  *((void *)this + 11) = 0;
  *((_OWORD *)this + 4) = v7;
  *(void *)((char *)this + 77) = *(void *)(a2 + 125);
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)this + 11, *(const void **)(a2 + 136), *(void *)(a2 + 144), (uint64_t)(*(void *)(a2 + 144) - *(void *)(a2 + 136)) >> 2);
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  return std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)this + 14, *(const void **)(a2 + 160), *(void *)(a2 + 168), (uint64_t)(*(void *)(a2 + 168) - *(void *)(a2 + 160)) >> 2);
}

void sub_1BB4DB960(_Unwind_Exception *exception_object)
{
  unsigned int v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 96) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 48) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void SpatializerParams::~SpatializerParams(SpatializerParams *this)
{
  float v2 = (void *)*((void *)this + 14);
  if (v2)
  {
    *((void *)this + 15) = v2;
    operator delete(v2);
  }
  float v3 = (void *)*((void *)this + 11);
  if (v3)
  {
    *((void *)this + 12) = v3;
    operator delete(v3);
  }
  long long v4 = (void *)*((void *)this + 5);
  if (v4)
  {
    *((void *)this + 6) = v4;
    operator delete(v4);
  }
}

uint64_t std::lock[abi:ne180100]<caulk::pooled_semaphore_mutex,caulk::pooled_semaphore_mutex>(caulk::pooled_semaphore_mutex *this, caulk::pooled_semaphore_mutex *a2)
{
  while (1)
  {
    unsigned int v5 = this;
    char v6 = 1;
    caulk::pooled_semaphore_mutex::_lock(this);
    if (caulk::pooled_semaphore_mutex::try_lock(a2)) {
      break;
    }
    std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v5);
    sched_yield();
    unsigned int v5 = a2;
    char v6 = 1;
    caulk::pooled_semaphore_mutex::_lock(a2);
    if (caulk::pooled_semaphore_mutex::try_lock(this)) {
      break;
    }
    std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v5);
    sched_yield();
  }
  unsigned int v5 = 0;
  char v6 = 0;
  return std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v5);
}

void sub_1BB4DBA84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t AUSM::AsymmetricAccessContainer<AUSM::ObjectParameters>::setNonBlocking(_OWORD *a1, long long *a2)
{
  float v12 = a1 + 8;
  uint64_t v4 = caulk::pooled_semaphore_mutex::try_lock((caulk::pooled_semaphore_mutex *)(a1 + 8));
  char v13 = v4;
  if (v4)
  {
    long long v5 = *a2;
    long long v6 = a2[1];
    long long v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    *a1 = v5;
    a1[1] = v6;
    long long v8 = a2[4];
    long long v9 = a2[5];
    long long v10 = a2[7];
    a1[6] = a2[6];
    a1[7] = v10;
    a1[4] = v8;
    a1[5] = v9;
  }
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v12);
  return v4;
}

caulk::pooled_semaphore_mutex **std::scoped_lock<caulk::pooled_semaphore_mutex,caulk::pooled_semaphore_mutex>::~scoped_lock[abi:ne180100](caulk::pooled_semaphore_mutex **a1)
{
  float v2 = a1[1];
  caulk::pooled_semaphore_mutex::_unlock(*a1);
  caulk::pooled_semaphore_mutex::_unlock(v2);
  return a1;
}

double AUSM::ChannelGeometry::ChannelGeometry(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 16) = xmmword_1BB875830;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0xFFFFFFFF00000001;
  *(_WORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 64) = xmmword_1BB879DF0;
  *(unsigned char *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 84) = 0;
  *(_OWORD *)(a1 + 96) = xmmword_1BB879DF0;
  *(_OWORD *)(a1 + 112) = xmmword_1BB879DF0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 160) = xmmword_1BB873F80;
  *(_OWORD *)(a1 + 176) = xmmword_1BB873CD0;
  *(_OWORD *)(a1 + 192) = xmmword_1BB879DF0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 212) = 0;
  *(_OWORD *)(a1 + 224) = xmmword_1BB879DF0;
  *(_OWORD *)(a1 + 240) = xmmword_1BB879DF0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(unsigned char *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 288) = xmmword_1BB873F80;
  *(_OWORD *)(a1 + 304) = xmmword_1BB873CD0;
  *(_OWORD *)(a1 + 320) = xmmword_1BB879DF0;
  *(unsigned char *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 340) = 0;
  *(_OWORD *)(a1 + 352) = xmmword_1BB879DF0;
  *(_OWORD *)(a1 + 368) = xmmword_1BB879DF0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(unsigned char *)(a1 + 400) = 0;
  *(_OWORD *)(a1 + 416) = xmmword_1BB873F80;
  *(_OWORD *)(a1 + 432) = xmmword_1BB873CD0;
  *(_OWORD *)(a1 + 448) = xmmword_1BB879DF0;
  *(unsigned char *)(a1 + 464) = 0;
  *(_DWORD *)(a1 + 468) = 0;
  *(_OWORD *)(a1 + 480) = xmmword_1BB879DF0;
  *(_OWORD *)(a1 + 496) = xmmword_1BB879DF0;
  *(void *)(a1 + 520) = 0;
  *(void *)(a1 + 512) = 0;
  *(unsigned char *)(a1 + 528) = 0;
  *(_OWORD *)(a1 + 544) = xmmword_1BB873F80;
  *(_OWORD *)(a1 + 560) = xmmword_1BB873CD0;
  *(_OWORD *)(a1 + 576) = xmmword_1BB879DF0;
  *(unsigned char *)(a1 + 592) = 0;
  *(_DWORD *)(a1 + 596) = 0;
  *(_OWORD *)(a1 + 608) = xmmword_1BB879DF0;
  *(_OWORD *)(a1 + 624) = xmmword_1BB879DF0;
  *(unsigned char *)(a1 + 656) = 0;
  *(void *)(a1 + 640) = 0;
  *(void *)(a1 + 648) = 0;
  *(_OWORD *)(a1 + 672) = xmmword_1BB873F80;
  *(_OWORD *)(a1 + 688) = xmmword_1BB873CD0;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(a1 + 704) = _Q0;
  *(_OWORD *)(a1 + 720) = xmmword_1BB876200;
  *(_OWORD *)(a1 + 736) = xmmword_1BB876200;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(a1 + 752) = result;
  *(unsigned char *)(a1 + 760) = 0;
  *(_DWORD *)(a1 + 780) = -1;
  *(void *)(a1 + 764) = -1;
  *(void *)(a1 + 772) = -1;
  return result;
}

void std::vector<std::unique_ptr<AllPassComb>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  float v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        long long v7 = (void *)*--v4;
        long long v6 = v7;
        *uint64_t v4 = 0;
        if (v7) {
          std::default_delete<AllPassComb>::operator()[abi:ne180100](v6);
        }
      }
      while (v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::default_delete<AllPassComb>::operator()[abi:ne180100](void *a1)
{
  float v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  float v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }

  JUMPOUT(0x1C185D370);
}

void AUSpatialMixerV2OcclusionFilter::initialize(uint64_t *a1, const AudioStreamBasicDescription *a2)
{
  uint64_t v4 = NewIIRFilter(a2, a2, (const CAStreamBasicDescription *)1);
  uint64_t v5 = *a1;
  *a1 = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  float mSampleRate = a2->mSampleRate;
  *((float *)a1 + 2) = mSampleRate;
  unsigned int v7 = atomic_load((unsigned int *)a1 + 4);
  *((_DWORD *)a1 + 3) = v7;
  float v8 = COERCE_FLOAT(atomic_load((unsigned int *)a1 + 4));

  AUSpatialMixerV2OcclusionFilter::updateFilter((AUSpatialMixerV2OcclusionFilter *)a1, v8);
}

float *AUSpatialMixerV2ChannelProcessor::setDelay(float *this, float a2)
{
  if (this[76] != a2)
  {
    float v3 = this;
    float v4 = this[59];
    if (v4 <= 0.0) {
      unsigned int v5 = 0;
    }
    else {
      unsigned int v5 = fmaxf(roundf((float)(a2 / 1000.0) * v4), 0.0);
    }
    unsigned int v7 = this + 117;
    char v8 = 1;
    caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)(this + 117));
    long long v6 = (void *)*((void *)v3 + 39);
    if (v6)
    {
      if (*(_DWORD *)v6 == v5)
      {
LABEL_11:
        this = (float *)std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v7);
        v3[76] = a2;
        return this;
      }
      if (!v5)
      {
        *((void *)v3 + 39) = 0;
        std::default_delete<IR::FixedIntegerDelay>::operator()[abi:ne180100](v6);
        goto LABEL_11;
      }
    }
    else if (!v5)
    {
      goto LABEL_11;
    }
    operator new();
  }
  return this;
}

void sub_1BB4DBED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  MEMORY[0x1C185D370](v9, 0x1080C40C92309C1);
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t AUSpatialMixerV2ChannelProcessor::reset(AUSpatialMixerV2ChannelProcessor *this)
{
  float32x4_t v17 = (char *)this + 468;
  char v18 = 1;
  caulk::pooled_semaphore_mutex::_lock((AUSpatialMixerV2ChannelProcessor *)((char *)this + 468));
  (*(void (**)(void, uint64_t))(**((void **)this + 22) + 264))(*((void *)this + 22), v2);
  uint64_t v3 = *((void *)this + 23);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 264))(v3);
    (*(void (**)(void))(**((void **)this + 24) + 264))(*((void *)this + 24));
  }
  float v4 = (IR::DynamicIRProcessor *)*((void *)this + 17);
  if (v4) {
    IR::DynamicIRProcessor::reset(v4);
  }
  AUSpatialMixerV2ChannelProcessor::resetReverbPrivate(this, 1);
  AUSpatialMixerV2ChannelProcessor::resetReverbPrivate(this, 0);
  unsigned int v5 = (IR::DynamicIRProcessor *)*((void *)this + 19);
  if (v5) {
    IR::DynamicIRProcessor::reset(v5);
  }
  long long v6 = (IR::DynamicIRProcessor *)*((void *)this + 20);
  if (v6) {
    IR::DynamicIRProcessor::reset(v6);
  }
  unsigned int v7 = (IR::FixedIntegerDelay *)*((void *)this + 39);
  if (v7) {
    IR::FixedIntegerDelay::reset(v7);
  }
  char v8 = (IR::DelayLine *)*((void *)this + 68);
  if (v8) {
    IR::DelayLine::reset(v8);
  }
  unsigned int v9 = atomic_load((unsigned int *)this + 26);
  *((_DWORD *)this + 25) = v9;
  float v10 = COERCE_FLOAT(atomic_load((unsigned int *)this + 26));
  AUSpatialMixerV2OcclusionFilter::updateFilter((AUSpatialMixerV2ChannelProcessor *)((char *)this + 88), v10);
  unsigned int v11 = atomic_load((unsigned int *)this + 32);
  *((_DWORD *)this + 31) = v11;
  float v12 = COERCE_FLOAT(atomic_load((unsigned int *)this + 32));
  AUSpatialMixerV2OcclusionFilter::updateFilter((AUSpatialMixerV2ChannelProcessor *)((char *)this + 112), v12);
  *((_DWORD *)this + 65) = 0;
  *((unsigned char *)this + 264) = 0;
  *((_DWORD *)this + 69) = 0;
  *((unsigned char *)this + 280) = 0;
  *((_DWORD *)this + 73) = 0;
  *((unsigned char *)this + 296) = 0;
  *((unsigned char *)this + 232) = 1;
  *((_DWORD *)this + 119) = -1;
  unsigned __int8 v13 = atomic_load((unsigned __int8 *)this + 488);
  if (v13)
  {
    float v14 = (void *)*((void *)this + 64);
    uint64_t v15 = *((void *)this + 65) - (void)v14;
    if (v15 >= 1) {
      bzero(v14, 4 * (((unint64_t)v15 >> 2) - ((unint64_t)v15 > 3)) + 4);
    }
  }
  return std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v17);
}

void sub_1BB4DC0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t AUSpatialMixerV2ChannelProcessor::resetReverbPrivate(void *a1, int a2)
{
  float v4 = (caulk::pooled_semaphore_mutex *)(a1 + 59);
  caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)(a1 + 59));
  for (uint64_t i = 0; i != 3; ++i)
  {
    if (i == a2 || i == 2)
    {
      uint64_t v6 = (uint64_t)&a1[3 * i + 1];
      unsigned int v7 = *(uint64_t **)v6;
      char v8 = *(uint64_t **)(v6 + 8);
      while (v7 != v8)
      {
        uint64_t v9 = *v7;
        if (*v7)
        {
          float v10 = *(void **)(v9 + 8);
          uint64_t v11 = *(void *)(v9 + 16) - (void)v10;
          if (v11 >= 1) {
            bzero(v10, 4 * (((unint64_t)v11 >> 2) - ((unint64_t)v11 > 3)) + 4);
          }
          *(_DWORD *)(v9 + 56) = 0;
        }
        ++v7;
      }
    }
  }
  if (!a2)
  {
    float v12 = (IR::DynamicIRProcessor *)a1[19];
    if (!v12) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (a2 == 1)
  {
    float v12 = (IR::DynamicIRProcessor *)a1[18];
    if (v12) {
LABEL_18:
    }
      IR::DynamicIRProcessor::reset(v12);
  }
LABEL_19:
  unsigned __int8 v13 = (IR::DynamicIRProcessor *)a1[20];
  if (v13) {
    IR::DynamicIRProcessor::reset(v13);
  }
  return caulk::pooled_semaphore_mutex::_unlock(v4);
}

void sub_1BB4DC200(_Unwind_Exception *a1)
{
  caulk::pooled_semaphore_mutex::_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AUSpatialMixerV2ChannelProcessor::processAccumulating(AUSM::FloatVector const&,AUSM::SharedBuffers &,AUSM::ReverbSend *,AUSM::ReverbSend *,AUSM::ReverbSend *,AUSM::ReverbSend *,float,unsigned int,float *)::$_0::operator()(uint64_t a1, int a2, unsigned int a3, uint64_t *a4, uint64_t a5, IR::ComplexDataCircBuffer *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = 0;
  if (a2 && a7 && *a4)
  {
    uint64_t v14 = *(void *)a1;
    uint64_t v8 = atomic_load((unsigned int *)(*a4 + 156));
    uint64_t v15 = *a4;
    float v16 = 3000.0;
    if (*(_DWORD *)(v14 + 552)) {
      float v16 = -1.0;
    }
    *(float *)(v15 + 80) = v16;
    float32x4_t v17 = *(float ***)(a5 + 24);
    unsigned int v18 = *(_DWORD *)(a5 + 52);
    uint64_t v19 = *(void *)(a1 + 8);
    if (*(unsigned char *)(v19 + 24) && *(_DWORD *)(v14 + 476) >= (**(_DWORD **)(a1 + 16) + v8))
    {
      IR::DynamicIRProcessor::processInternal(v15, *(IR::IRProcessor **)v19, *(float ***)(a5 + 24), *(_DWORD *)(a5 + 52), **(unsigned int **)(a1 + 32), **(float **)(a1 + 56), **(float *const ***)(a1 + 40), 1, a6);
      *(unsigned char *)(a5 + 48) = 0;
    }
    else
    {
      AUSpatialMixerV2ChannelProcessor::processReverbSend(v14, **(const float ***)(a1 + 24), a7, **(unsigned int **)(a1 + 32), a3, ***(float ****)(a1 + 40), **(float ***)(a1 + 48));
      if (!*(unsigned char *)(a8 + 12)
        || (v20 = *(_DWORD *)(a8 + 8), unsigned int v21 = atomic_load((unsigned int *)(*a4 + 156)), v20 < v21))
      {
        IR::DynamicIRProcessor::processInternal(*a4, **(IR::IRProcessor ***)(a1 + 48), v17, v18, **(unsigned int **)(a1 + 32), **(float **)(a1 + 56), **(float *const ***)(a1 + 40), 1, a6);
        *(unsigned char *)(a5 + 48) = 0;
        if (*(unsigned char *)(a8 + 12)) {
          *(_DWORD *)(a8 + 8) += **(_DWORD **)(a1 + 32);
        }
      }
    }
  }
  return v8;
}

void AUSpatialMixerV2ChannelProcessor::processReverbSend(uint64_t a1, const float *__A, uint64_t a3, vDSP_Length __N, unsigned int a5, float *a6, float *__C)
{
  unsigned int v10 = __N;
  uint64_t v11 = __A;
  uint64_t v13 = a1 + 268;
  uint64_t v14 = 284;
  if (a5) {
    uint64_t v13 = a1 + 284;
  }
  else {
    uint64_t v14 = 268;
  }
  uint64_t v15 = 252;
  if (a5 == 1)
  {
    uint64_t v16 = a1 + 252;
  }
  else
  {
    uint64_t v15 = v14;
    uint64_t v16 = v13;
  }
  float v17 = *(float *)(a1 + v15);
  float __B = v17;
  if (*(unsigned char *)(a1 + 484)) {
    goto LABEL_16;
  }
  uint64_t v18 = 160;
  if (!a5) {
    uint64_t v18 = 152;
  }
  if (a5 == 1) {
    uint64_t v18 = 144;
  }
  if (*(void *)(a1 + v18))
  {
    float __B = 0.0;
LABEL_14:
    float v17 = 0.0;
    goto LABEL_16;
  }
  if (!*(unsigned char *)(a1 + 485))
  {
    float __B = 0.0;
    *(_DWORD *)(v16 + 4) = 0;
    goto LABEL_14;
  }
LABEL_16:
  if (__C) {
    uint64_t v19 = __C;
  }
  else {
    uint64_t v19 = a6;
  }
  unsigned int v20 = (float *)(v16 + 4);
  if (*(unsigned char *)(a1 + 232))
  {
    float *v20 = v17;
  }
  else if (*v20 != v17)
  {
    uint64_t v24 = v16;
    if (__N >= 0x100) {
      vDSP_Length v25 = 256;
    }
    else {
      vDSP_Length v25 = __N;
    }
    float __Step = (float)(v17 - *v20) / (float)v25;
    vDSP_vrampmul(__A, 1, v20, &__Step, v19, 1, v25);
    char v21 = 0;
    float v17 = __B;
    float *v20 = __B;
    unsigned int v22 = v10 - v25;
    v11 += v25;
    uint64_t v23 = &v19[v25];
    uint64_t v16 = v24;
    goto LABEL_27;
  }
  char v21 = 1;
  unsigned int v22 = __N;
  uint64_t v23 = v19;
LABEL_27:
  uint64_t v26 = "N8nlohmann6detail12out_of_rangeE";
  if (v22)
  {
    float v17 = fabsf(v17);
    if (v17 > 0.000001)
    {
      vDSP_vsmul(v11, 1, &__B, v23, 1, v22);
      goto LABEL_35;
    }
    if (v22 < v10)
    {
      vDSP_vclr(v23, 1, v22);
      goto LABEL_35;
    }
  }
  if ((v21 & 1) == 0)
  {
LABEL_35:
    unsigned __int8 v28 = atomic_load((unsigned __int8 *)(a1 + 80));
    if (v28)
    {
      uint64_t v45 = v16;
      uint64_t v29 = a1 + 24 * a5;
      uint64_t v32 = *(void *)(v29 + 8);
      float v31 = (uint64_t *)(v29 + 8);
      uint64_t v30 = v32;
      if (v32 == v31[1])
      {
        uint64_t v16 = v45;
      }
      else
      {
        unint64_t v33 = 0;
        unsigned int v34 = 1;
        do
        {
          float v35 = *(void **)(v30 + 8 * v33);
          if (v35)
          {
            AllPassComb::process(v35, v19, a6, v10);
          }
          else if (__C && v34 == 1)
          {
            memcpy(a6, __C, 4 * v10);
          }
          unint64_t v33 = v34;
          uint64_t v30 = *v31;
          ++v34;
          uint64_t v19 = a6;
        }
        while (v33 < (v31[1] - *v31) >> 3);
        uint64_t v19 = a6;
        uint64_t v16 = v45;
        uint64_t v26 = "N8nlohmann6detail12out_of_rangeE";
      }
    }
    uint64_t v36 = *(void **)(a1 + 616);
    if (!v36)
    {
      uint64_t v39 = a3;
      vDSP_vadd(v19, 1, *(const float **)(a3 + 32), 1, *(float **)(a3 + 32), 1, v10);
LABEL_60:
      char v27 = 0;
      *(unsigned char *)(v39 + 24) = 0;
      *(_DWORD *)(v16 + 8) = 0;
      goto LABEL_61;
    }
    uint64_t v37 = *(unsigned int *)(a1 + 588);
    if (a5)
    {
      if (a5 != 2)
      {
        BOOL v38 = a5 == 1;
        uint64_t v39 = a3;
        if (!v38
          || (uint64_t v41 = v36 + 38,
              uint64_t v40 = v36[38],
              float v17 = 0.0,
              v37 >= ((unint64_t)(v41[1] - v40) >> 2)))
        {
LABEL_58:
          float v47 = v17;
          if ((float)(v17 * v17) > *((float *)v26 + 668)) {
            vDSP_vsma(v19, 1, &v47, *(const float **)(v39 + 32), 1, *(float **)(v39 + 32), 1, v10);
          }
          goto LABEL_60;
        }
LABEL_57:
        float v17 = *(float *)(v40 + 4 * v37);
        goto LABEL_58;
      }
      uint64_t v44 = v36 + 44;
      uint64_t v40 = v36[44];
      uint64_t v42 = v44[1];
    }
    else
    {
      uint64_t v43 = v36 + 41;
      uint64_t v40 = v36[41];
      uint64_t v42 = v43[1];
    }
    float v17 = 0.0;
    uint64_t v39 = a3;
    if (v37 >= ((unint64_t)(v42 - v40) >> 2)) {
      goto LABEL_58;
    }
    goto LABEL_57;
  }
  char v27 = 1;
  if (__C) {
    vDSP_vclr(__C, 1, v10);
  }
LABEL_61:
  *(unsigned char *)(v16 + 12) = v27;
}

float *std::unique_lock<caulk::pooled_semaphore_mutex>::unlock(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    double result = (float *)caulk::pooled_semaphore_mutex::_unlock(*(caulk::pooled_semaphore_mutex **)a1);
    *(unsigned char *)(a1 + 8) = 0;
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::unlock: not locked");
    return AUSpatialMixerV2ChannelProcessor::setChannelParameters(v3, v4);
  }
  return result;
}

float *AUSpatialMixerV2ChannelProcessor::setChannelParameters(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 656) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 672) = v4;
  *(unsigned char *)(a1 + 1400) = 1;
  unint64_t v5 = *(unsigned int *)(a2 + 28);
  *(unsigned char *)(a1 + 689) = ((v5 - 5) < 0x3C) & (0xDFFD000F0003FF3uLL >> (v5 - 5));
  *(unsigned char *)(a1 + 688) = (v5 < 0x3F) & (0x4000002000000010uLL >> v5);
  (*(void (**)(void, unint64_t))(**(void **)(a1 + 176) + 176))(*(void *)(a1 + 176), v5);
  uint64_t v6 = *(void *)(a1 + 184);
  if (v6) {
    (*(void (**)(uint64_t, unint64_t))(*(void *)v6 + 176))(v6, v5);
  }
  uint64_t v7 = *(void *)(a1 + 192);
  if (v7) {
    (*(void (**)(uint64_t, unint64_t))(*(void *)v7 + 176))(v7, v5);
  }
  unsigned int v8 = (*(unsigned int *)(a2 + 28) < 0x3FuLL) & (0x4000002000000010uLL >> *(_DWORD *)(a2 + 28));
  unsigned __int8 v9 = atomic_load((unsigned __int8 *)(a1 + 488));
  if (v8 != (v9 & 1))
  {
    atomic_store(v8, (unsigned __int8 *)(a1 + 488));
    if (fabsf(*(float *)(a1 + 236)) > 0.00000011921)
    {
      float v10 = COERCE_FLOAT(atomic_load((unsigned int *)(*(void *)(*(void *)(a1 + 568) + 232) + 164)));
      float v11 = (float)((float)(v10 + v10) / *(float *)(a1 + 236)) * 3.14159265;
      AUSpatialMixerV2ChannelProcessor::setLFERollOff((AUSpatialMixerV2ChannelProcessor *)a1, v11);
    }
  }
  unsigned int v12 = atomic_load((unsigned int *)(*(void *)(*(void *)(a1 + 640) + 8) + 80));
  float v13 = *(float *)(a2 + 20);
  if (v12 != 3) {
    float v13 = 0.0;
  }

  return AUSpatialMixerV2ChannelProcessor::setDelay((float *)a1, v13);
}

uint64_t AUSpatialMixerV2ChannelProcessor::setDecorrFilterLengthsOnReverbSend(void *a1, uint64_t *a2)
{
  uint64_t v45 = (char *)a1 + 468;
  char v46 = 1;
  caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)((char *)a1 + 468));
  long long v4 = a1 + 1;
  do
  {
    std::string __p = 0;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    uint64_t v5 = a2[1] - *a2;
    if ((uint64_t)(v4[1] - *v4) >> 3 <= (unint64_t)(v5 >> 2)) {
      unint64_t v6 = v5 >> 2;
    }
    else {
      unint64_t v6 = (uint64_t)(v4[1] - *v4) >> 3;
    }
    std::vector<float>::reserve(&__p, v6);
    uint64_t v7 = (char *)v4[1];
    if (v7 == (char *)*v4)
    {
      unint64_t v22 = (uint64_t)&v7[-*v4] >> 3;
      unsigned int v20 = (char *)v4[1];
    }
    else
    {
      unint64_t v8 = 0;
      unsigned __int8 v9 = v43;
      uint64_t v7 = (char *)*v4;
      do
      {
        int v10 = **(_DWORD **)&v7[8 * v8];
        if (v9 >= v44)
        {
          unsigned int v12 = (char *)__p;
          uint64_t v13 = (v9 - (unsigned char *)__p) >> 2;
          unint64_t v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 62) {
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v15 = v44 - (unsigned char *)__p;
          if ((v44 - (unsigned char *)__p) >> 1 > v14) {
            unint64_t v14 = v15 >> 1;
          }
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v14;
          }
          if (v16)
          {
            float v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v44, v16);
            unsigned int v12 = (char *)__p;
            unsigned __int8 v9 = v43;
          }
          else
          {
            float v17 = 0;
          }
          uint64_t v18 = &v17[4 * v13];
          *(_DWORD *)uint64_t v18 = v10;
          float v11 = v18 + 4;
          while (v9 != v12)
          {
            int v19 = *((_DWORD *)v9 - 1);
            v9 -= 4;
            *((_DWORD *)v18 - 1) = v19;
            v18 -= 4;
          }
          std::string __p = v18;
          uint64_t v43 = v11;
          uint64_t v44 = &v17[4 * v16];
          if (v12) {
            operator delete(v12);
          }
        }
        else
        {
          *(_DWORD *)unsigned __int8 v9 = v10;
          float v11 = v9 + 4;
        }
        uint64_t v43 = v11;
        ++v8;
        uint64_t v7 = (char *)*v4;
        unsigned int v20 = (char *)v4[1];
        uint64_t v21 = (uint64_t)&v20[-*v4];
        unsigned __int8 v9 = v11;
      }
      while (v8 < v21 >> 3);
      unint64_t v22 = v21 >> 3;
    }
    uint64_t v24 = *a2;
    uint64_t v23 = a2[1];
    if (v22 < (v23 - *a2) >> 2)
    {
      vDSP_Length v25 = v43;
      do
      {
        if (v25 >= v44)
        {
          char v27 = (char *)__p;
          uint64_t v28 = (v25 - (unsigned char *)__p) >> 2;
          unint64_t v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 62) {
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v30 = v44 - (unsigned char *)__p;
          if ((v44 - (unsigned char *)__p) >> 1 > v29) {
            unint64_t v29 = v30 >> 1;
          }
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v31 = v29;
          }
          if (v31)
          {
            uint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v44, v31);
            char v27 = (char *)__p;
            vDSP_Length v25 = v43;
          }
          else
          {
            uint64_t v32 = 0;
          }
          unint64_t v33 = &v32[4 * v28];
          *(_DWORD *)unint64_t v33 = 1050253722;
          uint64_t v26 = v33 + 4;
          while (v25 != v27)
          {
            int v34 = *((_DWORD *)v25 - 1);
            v25 -= 4;
            *((_DWORD *)v33 - 1) = v34;
            v33 -= 4;
          }
          std::string __p = v33;
          uint64_t v43 = v26;
          uint64_t v44 = &v32[4 * v31];
          if (v27) {
            operator delete(v27);
          }
        }
        else
        {
          *(_DWORD *)vDSP_Length v25 = 1050253722;
          uint64_t v26 = v25 + 4;
        }
        uint64_t v43 = v26;
        ++v22;
        uint64_t v24 = *a2;
        uint64_t v23 = a2[1];
        vDSP_Length v25 = v26;
      }
      while (v22 < (v23 - *a2) >> 2);
      uint64_t v7 = (char *)*v4;
      unsigned int v20 = (char *)v4[1];
    }
    float v35 = v7;
    if (v20 != v7)
    {
      do
      {
        uint64_t v37 = (void *)*((void *)v20 - 1);
        v20 -= 8;
        uint64_t v36 = v37;
        *(void *)unsigned int v20 = 0;
        if (v37) {
          std::default_delete<AllPassComb>::operator()[abi:ne180100](v36);
        }
      }
      while (v20 != v7);
      uint64_t v24 = *a2;
      uint64_t v23 = a2[1];
      float v35 = (char *)*v4;
    }
    uint64_t v38 = v4[2];
    v4[1] = v7;
    unint64_t v39 = (v23 - v24) >> 2;
    if (v39 > (v38 - (uint64_t)v35) >> 3)
    {
      if ((unint64_t)(v23 - v24) >= 0x7FFFFFFFFFFFFFFDLL) {
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      }
      float v51 = v4 + 2;
      float v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v39);
      uint64_t v48 = &v47[v7 - v35];
      float v49 = v48;
      float v50 = &v47[8 * v40];
      std::vector<std::unique_ptr<AllPassComb>>::__swap_out_circular_buffer(v4, &v47);
      std::__split_buffer<std::unique_ptr<AllPassComb>>::~__split_buffer((uint64_t)&v47);
      uint64_t v24 = *a2;
      uint64_t v23 = a2[1];
    }
    if (v23 != v24) {
      operator new();
    }
    if (__p)
    {
      uint64_t v43 = (char *)__p;
      operator delete(__p);
    }
    v4 += 3;
  }
  while (v4 != a1 + 10);
  return std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v45);
}

void sub_1BB4DCD54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
  if (__p) {
    operator delete(__p);
  }
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void *std::vector<std::unique_ptr<AllPassComb>>::__swap_out_circular_buffer(void *result, void *a2)
{
  uint64_t v3 = (void *)*result;
  uint64_t v2 = (void *)result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    uint64_t v5 = *--v2;
    *uint64_t v2 = 0;
    *(void *)(v4 - 8) = v5;
    v4 -= 8;
  }
  a2[1] = v4;
  unint64_t v6 = (void *)*result;
  *double result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::unique_ptr<AllPassComb>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void **)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      std::default_delete<AllPassComb>::operator()[abi:ne180100](v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void AUSpatialMixerV2ChannelProcessor::getDecorrFilterLengthsOnReverbSend(std::vector<unsigned int> *this, uint64_t a2)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  std::vector<unsigned int>::reserve(this, (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  uint64_t v4 = *(void *)(a2 + 8);
  if (*(void *)(a2 + 16) != v4)
  {
    uint64_t v5 = 0;
    unsigned int v6 = 0;
    uint64_t p_end_cap = &this->__end_cap_;
    std::vector<unsigned int>::pointer end = this->__end_;
    do
    {
      uint64_t v9 = (*(void *)(*(void *)(v4 + 8 * v5) + 16) - *(void *)(*(void *)(v4 + 8 * v5) + 8)) >> 2;
      if (end >= p_end_cap->__value_)
      {
        std::vector<unsigned int>::pointer begin = this->__begin_;
        uint64_t v12 = end - this->__begin_;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 62) {
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v14 = (char *)p_end_cap->__value_ - (char *)begin;
        if (v14 >> 1 > v13) {
          unint64_t v13 = v14 >> 1;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v13;
        }
        if (v15)
        {
          unint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&this->__end_cap_, v15);
          std::vector<unsigned int>::pointer begin = this->__begin_;
          std::vector<unsigned int>::pointer end = this->__end_;
        }
        else
        {
          unint64_t v16 = 0;
        }
        float v17 = (unsigned int *)&v16[4 * v12];
        unsigned int *v17 = v9;
        int v10 = v17 + 1;
        while (end != begin)
        {
          unsigned int v18 = *--end;
          *--float v17 = v18;
        }
        this->__begin_ = v17;
        this->__end_ = v10;
        this->__end_cap_.__value_ = (unsigned int *)&v16[4 * v15];
        if (begin) {
          operator delete(begin);
        }
      }
      else
      {
        int *end = v9;
        int v10 = end + 1;
      }
      this->__end_ = v10;
      uint64_t v4 = *(void *)(a2 + 8);
      std::vector<unsigned int>::pointer end = v10;
      uint64_t v5 = ++v6;
    }
    while (v6 < (unint64_t)((*(void *)(a2 + 16) - v4) >> 3));
  }
}

void sub_1BB4DCFCC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUSpatialMixerV2ChannelProcessor::setDecorrFilterCoeffsOnReverbSend(void *a1, uint64_t *a2)
{
  float v11 = (char *)a1 + 468;
  char v12 = 1;
  caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)((char *)a1 + 468));
  uint64_t v4 = a1 + 1;
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  unint64_t v7 = (v5 - *a2) >> 2;
  do
  {
    uint64_t v8 = *v4;
    if (v7 != (v4[1] - *v4) >> 3) {
      break;
    }
    if (v5 != v6)
    {
      uint64_t v9 = 0;
      do
      {
        **(_DWORD **)(v8 + 8 * v9) = *(_DWORD *)(v6 + 4 * v9);
        ++v9;
      }
      while (v7 > v9);
    }
    v4 += 3;
  }
  while (v4 != a1 + 10);
  return std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v11);
}

void AUSpatialMixerV2ChannelProcessor::getDecorrFilterCoeffsOnReverbSend(AUSpatialMixerV2ChannelProcessor *this, uint64_t a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  std::vector<float>::reserve((void **)this, (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  uint64_t v4 = *(void *)(a2 + 8);
  if (*(void *)(a2 + 16) != v4)
  {
    uint64_t v5 = 0;
    unsigned int v6 = 0;
    unint64_t v7 = (void *)((char *)this + 16);
    uint64_t v8 = (_DWORD *)*((void *)this + 1);
    do
    {
      int v9 = **(_DWORD **)(v4 + 8 * v5);
      if ((unint64_t)v8 >= *v7)
      {
        float v11 = *(_DWORD **)this;
        uint64_t v12 = ((uint64_t)v8 - *(void *)this) >> 2;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 62) {
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v14 = *v7 - (void)v11;
        if (v14 >> 1 > v13) {
          unint64_t v13 = v14 >> 1;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v13;
        }
        if (v15)
        {
          unint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)this + 16, v15);
          float v11 = *(_DWORD **)this;
          uint64_t v8 = (_DWORD *)*((void *)this + 1);
        }
        else
        {
          unint64_t v16 = 0;
        }
        float v17 = &v16[4 * v12];
        *(_DWORD *)float v17 = v9;
        int v10 = v17 + 4;
        while (v8 != v11)
        {
          int v18 = *--v8;
          *((_DWORD *)v17 - 1) = v18;
          v17 -= 4;
        }
        *(void *)this = v17;
        *((void *)this + 1) = v10;
        *((void *)this + 2) = &v16[4 * v15];
        if (v11) {
          operator delete(v11);
        }
      }
      else
      {
        _DWORD *v8 = v9;
        int v10 = v8 + 1;
      }
      *((void *)this + 1) = v10;
      uint64_t v4 = *(void *)(a2 + 8);
      uint64_t v8 = v10;
      uint64_t v5 = ++v6;
    }
    while (v6 < (unint64_t)((*(void *)(a2 + 16) - v4) >> 3));
  }
}

void sub_1BB4DD1D8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUSpatialMixerV2ChannelProcessor::getHeadTrackedERFilterConfigParams(uint64_t a1, void *a2, int a3)
{
  uint64_t v8 = a2 + 59;
  char v9 = 1;
  caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)(a2 + 59));
  if (a3 == 2)
  {
    uint64_t v6 = a2[20];
    if (v6) {
      goto LABEL_9;
    }
  }
  else
  {
    if (a3 != 1)
    {
      if (a3) {
        goto LABEL_7;
      }
      uint64_t v6 = a2[19];
      if (!v6) {
        goto LABEL_7;
      }
LABEL_9:
      IR::DynamicIRProcessor::getFFTFilterConfigParams((IR::DynamicIRProcessor *)a1, v6);
      return std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v8);
    }
    uint64_t v6 = a2[18];
    if (v6) {
      goto LABEL_9;
    }
  }
LABEL_7:
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
  return std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v8);
}

void sub_1BB4DD298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void AUSpatialMixerV2ChannelProcessor::setParametricProcessingReverbDelay(AUSpatialMixerV2ChannelProcessor *this, int a2)
{
  if (a2) {
    operator new();
  }
  uint64_t v3 = (void *)*((void *)this + 70);
  *((void *)this + 70) = 0;
  if (v3)
  {
    std::default_delete<IR::FixedIntegerDelay>::operator()[abi:ne180100](v3);
  }
}

void sub_1BB4DD33C(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x1080C40C92309C1);
  _Unwind_Resume(a1);
}

uint64_t AUSpatialMixerV2ChannelProcessor::setExclusionZones(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a1 + 468;
  char v8 = 1;
  caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)(a1 + 468));
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 176) + 152))(*(void *)(a1 + 176), a2);
  if (!v4)
  {
    uint64_t v6 = *(void *)(a1 + 184);
    if (v6)
    {
      uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 152))(v6, a2);
      if (!v4) {
        uint64_t v4 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 192) + 152))(*(void *)(a1 + 192), a2);
      }
    }
    else
    {
      uint64_t v4 = 0;
    }
  }
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v7);
  return v4;
}

void sub_1BB4DD45C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t AUSpatialMixerV2ChannelProcessor::setEnable(AUSpatialMixerV2ChannelProcessor *this, uint64_t a2)
{
  *((unsigned char *)this + 484) = a2;
  unint64_t v4 = *((unsigned int *)this + 171);
  *((_DWORD *)this + 170) = a2;
  *((unsigned char *)this + 1400) = 1;
  *((unsigned char *)this + 689) = ((v4 - 5) < 0x3C) & (0xDFFD000F0003FF3uLL >> (v4 - 5));
  *((unsigned char *)this + 688) = (v4 < 0x3F) & (0x4000002000000010uLL >> v4);
  (*(void (**)(void))(**((void **)this + 22) + 16))(*((void *)this + 22));
  uint64_t v5 = *((void *)this + 23);
  if (v5) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, a2);
  }
  uint64_t result = *((void *)this + 24);
  if (result)
  {
    uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v7();
  }
  return result;
}

uint64_t AUSpatialMixerV2ChannelProcessor::setBypassCoeffs(AUSpatialMixerV2ChannelProcessor *this, float *a2, uint64_t a3)
{
  uint64_t v6 = *((void *)this + 23);
  if (v6)
  {
    (*(void (**)(uint64_t, float *, uint64_t))(*(void *)v6 + 48))(v6, a2, a3);
    (*(void (**)(void, float *, uint64_t))(**((void **)this + 24) + 48))(*((void *)this + 24), a2, a3);
  }
  uint64_t v7 = *(uint64_t (**)(void))(**((void **)this + 22) + 48);

  return v7();
}

uint64_t AUHandsetNoiseEQ::SetMaxFramesPerSlice(AUHandsetNoiseEQ *this, int a2)
{
  uint64_t result = ausdk::AUBase::SetMaxFramesPerSlice((uint64_t)this, a2);
  if (*((_DWORD *)this + 138) != a2) {
    *((_DWORD *)this + 138) = a2;
  }
  return result;
}

uint64_t AUHandsetNoiseEQ::ChangeStreamFormat(AUHandsetNoiseEQ *this, uint64_t a2, uint64_t a3, const AudioStreamBasicDescription *a4, const AudioStreamBasicDescription *a5)
{
  if (a4->mSampleRate != a5->mSampleRate) {
    *((_DWORD *)this + 137) = a5->mSampleRate;
  }
  return 0;
}

uint64_t AUHandsetNoiseEQ::ValidFormat(AUHandsetNoiseEQ *this, int a2, unsigned int a3, const AudioStreamBasicDescription *a4)
{
  if (a4->mBitsPerChannel == 64 && a4->mFormatID == 1718773105) {
    uint64_t result = (LOBYTE(a4->mFormatFlags) >> 5) & 1;
  }
  else {
    uint64_t result = 0;
  }
  if (a2 == 2)
  {
    BOOL v6 = a4->mChannelsPerFrame == 1;
  }
  else
  {
    if (a2 != 1) {
      return result;
    }
    BOOL v6 = a4->mChannelsPerFrame == 2;
  }
  if (v6) {
    return result;
  }
  else {
    return 0;
  }
}

uint64_t AUHandsetNoiseEQ::SupportedNumChannels(AUHandsetNoiseEQ *this, const AUChannelInfo **a2)
{
  AUHandsetNoiseEQ::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs = 65538;
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUHandsetNoiseEQ::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 1;
}

BOOL AUHandsetNoiseEQ::StreamFormatWritable(AUHandsetNoiseEQ *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUHandsetNoiseEQ::SupportsTail(AUHandsetNoiseEQ *this)
{
  return 1;
}

double AUHandsetNoiseEQ::GetTailTime(AUHandsetNoiseEQ *this)
{
  return 0.0;
}

double AUHandsetNoiseEQ::GetLatency(AUHandsetNoiseEQ *this)
{
  return 0.0;
}

uint64_t AUHandsetNoiseEQ::GetParameterValueStrings(AUHandsetNoiseEQ *this, int a2, int a3, const __CFArray **a4)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (!a4) {
    return 0;
  }
  if (a2) {
    return 4294956430;
  }
  if (a3 != 8) {
    return 0;
  }
  long long v7 = xmmword_1E623E1F8;
  CFArrayRef v6 = CFArrayCreate(0, (const void **)&v7, 2, 0);
  uint64_t result = 0;
  *a4 = v6;
  return result;
}

uint64_t AUHandsetNoiseEQ::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result = ausdk::AUBase::RestoreState(this, a2);
  if (!result) {
    ++*((_DWORD *)this + 132);
  }
  return result;
}

uint64_t AUHandsetNoiseEQ::GetParameterInfo(AUHandsetNoiseEQ *this, int a2, unsigned int a3, AudioUnitParameterInfo *a4)
{
  unsigned int v16 = a3;
  a4->AudioUnitParameterOptions flags = 0;
  a4->unitName = 0;
  uint64_t result = 4294956418;
  if (!a2 && a3 <= 8)
  {
    uint64_t v8 = (char *)this + 568;
    if (std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>>>::find<unsigned int>((void *)this + 71, a3))
    {
      char v9 = std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v8, a3, &v16);
      CFStringRef v10 = (const __CFString *)v9[3];
      AudioUnitParameterValue v11 = *((float *)v9 + 8);
      AudioUnitParameterUnit v12 = *((_DWORD *)v9 + 11);
      int v13 = *((_DWORD *)v9 + 12);
      AudioUnitParameterOptions v14 = a4->flags | 0x8000000;
      uint64_t v15 = *(void *)((char *)v9 + 36);
      a4->cfNameString = v10;
      a4->AudioUnitParameterOptions flags = v14;
      CFStringGetCString(v10, a4->name, 52, 0x8000100u);
      uint64_t result = 0;
      a4->defaultCFNumberRef Value = v11;
      *(void *)&a4->minCFNumberRef Value = v15;
      a4->unit = v12;
      a4->flags |= v13;
    }
    else
    {
      return 4294956418;
    }
  }
  return result;
}

uint64_t AUHandsetNoiseEQ::SetBusCount(AUHandsetNoiseEQ *this, int a2, unsigned int a3)
{
  unsigned int v3 = a3 - 1;
  if (a2 == 1 && v3 <= 1)
  {
    unint64_t v4 = (AUHandsetNoiseEQ *)((char *)this + 80);
LABEL_7:
    ausdk::AUScope::SetNumberOfElements(v4, a3);
    return 0;
  }
  uint64_t v5 = 4294956445;
  if (a2 == 2 && v3 <= 1)
  {
    unint64_t v4 = (AUHandsetNoiseEQ *)((char *)this + 128);
    goto LABEL_7;
  }
  return v5;
}

BOOL AUHandsetNoiseEQ::BusCountWritable(AUHandsetNoiseEQ *this, int a2)
{
  return (a2 - 1) < 2;
}

uint64_t AUHandsetNoiseEQ::Render(AUHandsetNoiseEQ *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  v32[3] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = (AUHandsetNoiseEQ *)((char *)this + 80);
  uint64_t v9 = *((void *)this + 15);
  if (v9) {
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 24))(v9);
  }
  else {
    uint64_t v10 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
  }
  char v11 = 0;
  if (v10)
  {
    uint64_t v12 = 0;
    do
    {
      uint64_t Element = ausdk::AUScope::GetElement(v8, v12);
      if (Element && *(_DWORD *)(Element + 172))
      {
        AudioUnitParameterOptions v14 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, v12);
        uint64_t result = ausdk::AUInputElement::PullInput(v14, a2, a3, v12, a4);
        if (result) {
          return result;
        }
      }
      else
      {
        char v11 = 1;
      }
      uint64_t v12 = (v12 + 1);
    }
    while (v10 != v12);
  }
  uint64_t v16 = *((void *)this + 21);
  if (v16)
  {
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 24))(v16);
    LODWORD(v17) = v16;
  }
  else
  {
    uint64_t v17 = (*((void *)this + 19) - *((void *)this + 18)) >> 3;
  }
  v32[2] = v32;
  uint64_t v18 = v17;
  MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)v32 - v20;
  if (v19 >= 0x200) {
    size_t v22 = 512;
  }
  else {
    size_t v22 = v19;
  }
  bzero((char *)v32 - v20, v22);
  if (v17)
  {
    uint64_t v24 = 0;
    do
    {
      vDSP_Length v25 = (ausdk::AUIOElement *)ausdk::AUScope::SafeGetElement((AUHandsetNoiseEQ *)((char *)this + 128), v24);
      uint64_t v23 = ausdk::AUIOElement::PrepareBuffer(v25, a4);
      *(void *)&v21[8 * v24++] = v23;
    }
    while (v18 != v24);
  }
  if (v11) {
    return 0;
  }
  v32[1] = v32;
  MEMORY[0x1F4188790](v23);
  uint64_t v28 = (char *)v32 - v27;
  if (v26 >= 0x200) {
    size_t v29 = 512;
  }
  else {
    size_t v29 = v26;
  }
  bzero((char *)v32 - v27, v29);
  if (v10)
  {
    uint64_t v30 = 0;
    do
    {
      uint64_t v31 = ausdk::AUScope::SafeGetElement(v8, v30);
      *(void *)&v28[8 * v30++] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v31 + 144));
    }
    while (v10 != v30);
  }
  return (*(uint64_t (**)(AUHandsetNoiseEQ *, unsigned int *, uint64_t, uint64_t, char *, uint64_t, char *))(*(void *)this + 184))(this, a2, a4, v10, v28, v18, v21);
}

uint64_t AUHandsetNoiseEQ::ProcessMultipleBufferLists(AUHandsetNoiseEQ *this, unsigned int *a2, int a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  if (*((unsigned char *)this + 376) && *((_DWORD *)this + 84) != a3) {
    return 4294956422;
  }
  LOBYTE(v73.mSampleRate) = 0;
  unint64_t v11 = a4;
  if (a4)
  {
    uint64_t v12 = (AudioDSP::Utility *)(2 * *((_DWORD *)this + 138));
    uint64_t v13 = a4 - 1;
    HIDWORD(v14) = 41;
    uint64_t v15 = a5;
    while (1)
    {
      uint64_t v16 = (AudioBufferList *)*v15;
      if (!*v15) {
        return 4294956420;
      }
      UInt32 mNumberBuffers = v16->mNumberBuffers;
      if (v16->mNumberBuffers != *((_DWORD *)this + 136)) {
        return 4294956428;
      }
      LODWORD(v14) = *((_DWORD *)this + 137);
      *(double *)&__A.UInt32 mNumberBuffers = (double)v14;
      __A.mBuffers[0] = (AudioBuffer)xmmword_1BB8727B0;
      int v70 = 4;
      UInt32 v71 = mNumberBuffers;
      uint64_t v72 = 32;
      AudioDSP::Utility::DetectNonFinites(v12, v16, &__A, &v73, (BOOL *)a5);
      BOOL v18 = LOBYTE(v73.mSampleRate) == 0;
      BOOL v20 = v13-- != 0;
      if (!LOBYTE(v73.mSampleRate))
      {
        ++v15;
        if (v20) {
          continue;
        }
      }
      goto LABEL_15;
    }
  }
  BOOL v18 = 1;
LABEL_15:
  uint64_t v22 = a6;
  if (a6)
  {
    uint64_t v23 = a6;
    uint64_t v24 = a7;
    while (*v24)
    {
      if ((*v24)->mNumberBuffers != 1) {
        return 4294956428;
      }
      ++v24;
      if (!--v23) {
        goto LABEL_20;
      }
    }
    return 4294956420;
  }
LABEL_20:
  if (v18 || !*((unsigned char *)this + 556))
  {
    uint64_t v25 = *((void *)this + 70);
    if (v25)
    {
      if (*((_DWORD *)this + 133) == *((_DWORD *)this + 132)
        || (AUHandsetNoiseEQ::UpdateState(this),
            *((_DWORD *)this + 133) = *((_DWORD *)this + 132),
            (uint64_t v25 = *((void *)this + 70)) != 0))
      {
        if (*(unsigned char *)v25)
        {
          mBuffers = (*a5)->mBuffers;
          uint64_t v27 = *(void *)(v25 + 56);
          vDSP_Length v28 = *(void *)(v25 + 16);
          uint64_t v29 = (uint64_t)mBuffers[*(void *)(v25 + 48)].mData + 4 * v28;
          *(void *)&__A.UInt32 mNumberBuffers = mBuffers[*(void *)(v25 + 48)].mData;
          *(void *)&__A.mBuffers[0].mNumberChannels = v29;
          uint64_t v30 = *a7;
          *(void *)((char *)&v73.mBytesPerPacket + 1) = mBuffers[v27].mData;
          *(void *)((char *)&v73.mBytesPerFrame + 1) = *(void *)((char *)&v73.mBytesPerPacket + 1) + 4 * v28;
          *(void *)((char *)&v73.mSampleRate + 1) = v30->mBuffers[0].mData;
          *(void *)((char *)&v73.mFormatID + 1) = *(void *)((char *)&v73.mSampleRate + 1) + 4 * v28;
          vDSP_zvabs((const DSPSplitComplex *)&__A, 1, *(float **)(v25 + 192), 1, v28);
          vDSP_zvabs((const DSPSplitComplex *)((char *)&v73.mBytesPerPacket + 1), 1, *(float **)(v25 + 216), 1, *(void *)(v25 + 16));
          uint64_t v31 = *(float **)(v25 + 192);
          *uint64_t v31 = fabsf(**(float **)&__A.mNumberBuffers);
          uint64_t v32 = *(void *)(v25 + 16);
          v31[v32] = fabsf(**(float **)&__A.mBuffers[0].mNumberChannels);
          unint64_t v33 = *(float **)(v25 + 216);
          *unint64_t v33 = fabsf(**(float **)((char *)&v73.mBytesPerPacket + 1));
          v33[v32] = fabsf(**(float **)((char *)&v73.mBytesPerFrame + 1));
          vDSP_vsadd(v33, 1, (const float *)(v25 + 64), v33, 1, *(void *)(v25 + 40));
          vDSP_vsadd(*(const float **)(v25 + 192), 1, (const float *)(v25 + 64), *(float **)(v25 + 192), 1, *(void *)(v25 + 40));
          int v34 = *(const float **)(v25 + 192);
          float v35 = *(const float **)(v25 + 216);
          if (*(unsigned char *)(v25 + 1))
          {
            *(unsigned char *)(v25 + 1) = 0;
            vDSP_vsadd(v34, 1, (const float *)(v25 + 64), *(float **)(v25 + 144), 1, *(void *)(v25 + 40));
            vDSP_vsadd(v35, 1, (const float *)(v25 + 64), *(float **)(v25 + 120), 1, *(void *)(v25 + 40));
          }
          else
          {
            vDSP_vavlin(*(const float **)(v25 + 216), 1, (const float *)(v25 + 108), *(float **)(v25 + 120), 1, *(void *)(v25 + 40));
            vDSP_vavlin(v34, 1, (const float *)(v25 + 108), *(float **)(v25 + 144), 1, *(void *)(v25 + 40));
          }
          uint64_t v43 = *(void *)(v25 + 40);
          if (v43)
          {
            uint64_t v44 = 0;
            while (*(float *)(v25 + 68) > *(float *)(v25 + 84))
            {
              float v45 = *(float *)(*(void *)(v25 + 144) + 4 * v44);
              float v46 = *(float *)(*(void *)(v25 + 120) + 4 * v44);
              uint64_t v47 = *(void *)(v25 + 240);
              if ((float)(v45 / v46) < *(float *)(v25 + 80)) {
                goto LABEL_50;
              }
              float v48 = (float)(1.0 - *(float *)(v25 + 100)) + (float)(*(float *)(v25 + 100) * *(float *)(v47 + 4 * v44));
LABEL_55:
              *(float *)(v47 + 4 * v44++) = v48;
              if (v43 == v44) {
                goto LABEL_56;
              }
            }
            uint64_t v47 = *(void *)(v25 + 240);
            float v45 = *(float *)(*(void *)(v25 + 144) + 4 * v44);
            float v46 = *(float *)(*(void *)(v25 + 120) + 4 * v44);
LABEL_50:
            float v49 = v45 / (float)(v46 + *(float *)(v25 + 64));
            if (v49 < *(float *)(v25 + 72)) {
              float v49 = *(float *)(v25 + 72);
            }
            if (*(float *)(v25 + 76) < v49) {
              float v49 = *(float *)(v25 + 76);
            }
            float v48 = (float)((float)(1.0 - *(float *)(v25 + 104)) * v49)
                + (float)(*(float *)(v25 + 104) * *(float *)(v47 + 4 * v44));
            goto LABEL_55;
          }
LABEL_56:
          if (*(unsigned char *)(v25 + 112))
          {
            float v50 = *(_DWORD **)(v25 + 168);
            _DWORD *v50 = 1065353216;
            v50[v43 - 1] = 1065353216;
            if ((unint64_t)(v43 - 1) >= 2)
            {
              float v51 = v50 + 1;
              uint64_t v52 = v43 - 2;
              uint64_t v53 = (float *)(*(void *)(v25 + 240) + 8);
              do
              {
                double v54 = *(v53 - 1) * 0.5 + *(v53 - 2) * 0.25;
                float v55 = *v53++;
                *(float *)&double v54 = v54 + v55 * 0.25;
                *v51++ = LODWORD(v54);
                --v52;
              }
              while (v52);
            }
          }
          else
          {
            uint64_t v56 = *(unsigned char **)(v25 + 240);
            float v57 = *(unsigned char **)(v25 + 248);
            if (v57 != v56) {
              memmove(*(void **)(v25 + 168), v56, v57 - v56);
            }
          }
          vDSP_zrvmul((const DSPSplitComplex *)((char *)&v73.mBytesPerPacket + 1), 1, *(const float **)(v25 + 168), 1, (const DSPSplitComplex *)((char *)&v73.mSampleRate + 1), 1, *(void *)(v25 + 16));
          uint64_t v21 = 0;
          **(float **)((char *)&v73.mFormatID + 1) = *(float *)(*(void *)(v25 + 168) + 4 * *(void *)(v25 + 40) - 4)
                                                   * **(float **)((char *)&v73.mBytesPerFrame + 1);
          if (!*((_DWORD *)this + 134)) {
            goto LABEL_67;
          }
        }
        else
        {
          uint64_t v21 = 4294956429;
        }
        uint64_t v58 = *a5;
        if ((*a5)->mBuffers[0].mDataByteSize <= (*a7)->mBuffers[0].mDataByteSize)
        {
          mData = (*a7)->mBuffers[0].mData;
          if (v58->mBuffers[0].mData != mData) {
            memcpy(mData, *(const void **)&v58[1].mBuffers[0].mNumberChannels, *(&v58[1].mNumberBuffers + 1));
          }
        }
      }
      else
      {
        uint64_t v21 = 0;
      }
LABEL_67:
      if (a6 >= 2)
      {
        unint64_t v60 = 1;
        do
        {
          if (v60 >= v11)
          {
            float v62 = a7[v60];
            if (v62->mNumberBuffers)
            {
              uint64_t v63 = 0;
              unint64_t v64 = 0;
              do
              {
                bzero(v62->mBuffers[v63].mData, v62->mBuffers[v63].mDataByteSize);
                ++v64;
                float v62 = a7[v60];
                ++v63;
              }
              while (v64 < v62->mNumberBuffers);
            }
          }
          else
          {
            uint64_t v61 = *((void *)this + 70);
            if (*(unsigned char *)v61)
            {
              memcpy(a7[v60]->mBuffers[0].mData, a5[v60]->mBuffers[*(void *)(v61 + 56)].mData, a7[v60]->mBuffers[0].mDataByteSize);
              uint64_t v21 = 0;
            }
            else
            {
              int8x16_t v65 = a5[v60];
              float32x2_t v66 = a7[v60];
              if (v65->mBuffers[0].mDataByteSize <= v66->mBuffers[0].mDataByteSize)
              {
                float32x2_t v67 = v66->mBuffers[0].mData;
                if (v65->mBuffers[0].mData != v67) {
                  memcpy(v67, *(const void **)&v65[1].mBuffers[0].mNumberChannels, *(&v65[1].mNumberBuffers + 1));
                }
              }
              uint64_t v21 = 4294956429;
            }
          }
          ++v60;
        }
        while (v60 != v22);
      }
      return v21;
    }
  }
  if (a6)
  {
    unint64_t v36 = 0;
    do
    {
      if (v36 >= v11)
      {
        uint64_t v40 = a7[v36];
        if (v40->mNumberBuffers)
        {
          uint64_t v41 = 0;
          unint64_t v42 = 0;
          do
          {
            bzero(v40->mBuffers[v41].mData, v40->mBuffers[v41].mDataByteSize);
            ++v42;
            uint64_t v40 = a7[v36];
            ++v41;
          }
          while (v42 < v40->mNumberBuffers);
        }
      }
      else
      {
        uint64_t v37 = a5[v36];
        uint64_t v38 = a7[v36];
        if (v37->mBuffers[0].mDataByteSize <= v38->mBuffers[0].mDataByteSize)
        {
          unint64_t v39 = v38->mBuffers[0].mData;
          if (v37->mBuffers[0].mData != v39) {
            memcpy(v39, *(const void **)&v37[1].mBuffers[0].mNumberChannels, *(&v37[1].mNumberBuffers + 1));
          }
        }
      }
      ++v36;
    }
    while (v36 != v22);
  }
  return 0;
}

void AUHandsetNoiseEQ::UpdateState(AUHandsetNoiseEQ *this)
{
  if (*((void *)this + 70))
  {
    unsigned int v2 = 0;
    unsigned int v3 = (AUHandsetNoiseEQ *)((char *)this + 32);
    do
    {
      uint64_t v4 = *((void *)this + 70);
      uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement(v3, 0);
      float Parameter = ausdk::AUElement::GetParameter(Element, v2);
      switch(v2)
      {
        case 0u:
          *(float *)(v4 + 68) = Parameter;
          break;
        case 1u:
          float v7 = __exp10(Parameter / 20.0);
          *(float *)(v4 + 72) = v7;
          break;
        case 2u:
          float v8 = __exp10(Parameter / 20.0);
          *(float *)(v4 + 76) = v8;
          break;
        case 3u:
          *(float *)(v4 + 80) = Parameter;
          break;
        case 4u:
          *(float *)(v4 + 84) = Parameter;
          break;
        case 5u:
          *(float *)(v4 + 88) = Parameter;
          float v9 = 0.0;
          if (Parameter != 0.0) {
            float v9 = expf((float)((float)-(float)*(unint64_t *)(v4 + 16) / *(float *)(v4 + 4)) / Parameter);
          }
          *(float *)(v4 + 104) = v9;
          break;
        case 6u:
          *(float *)(v4 + 92) = Parameter;
          float v10 = 0.0;
          if (Parameter != 0.0) {
            float v10 = expf((float)((float)-(float)*(unint64_t *)(v4 + 16) / *(float *)(v4 + 4)) / Parameter);
          }
          *(float *)(v4 + 100) = v10;
          break;
        case 7u:
          *(float *)(v4 + 96) = Parameter;
          float v11 = 0.0;
          if (Parameter != 0.0) {
            float v11 = expf((float)((float)-(float)*(unint64_t *)(v4 + 16) / *(float *)(v4 + 4)) / Parameter);
          }
          *(float *)(v4 + 108) = v11 / (float)(1.0 - v11);
          break;
        default:
          break;
      }
      ++v2;
    }
    while (v2 != 9);
  }
}

uint64_t AUHandsetNoiseEQ::CanScheduleParameters(AUHandsetNoiseEQ *this)
{
  return 0;
}

uint64_t AUHandsetNoiseEQ::SetParameter(AUHandsetNoiseEQ *this, unsigned int a2, int a3, float a4)
{
  if (a3) {
    return 4294956418;
  }
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUHandsetNoiseEQ *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(Element, a2, a4, 0);
  uint64_t result = 0;
  ++*((_DWORD *)this + 132);
  return result;
}

uint64_t AUHandsetNoiseEQ::SetProperty(AUHandsetNoiseEQ *this, int a2, int a3, unsigned int a4, unsigned char *a5, unsigned int a6)
{
  if (a3) {
    return 4294956417;
  }
  if (a2 == 3700)
  {
    uint64_t result = 4294956445;
    if (a6 >= 4)
    {
      if (*a5) {
        return 0;
      }
      else {
        return 4294956445;
      }
    }
  }
  else
  {
    if (a2 != 21) {
      return 4294956417;
    }
    uint64_t result = 0;
    *((_DWORD *)this + 134) = *(_DWORD *)a5;
  }
  return result;
}

uint64_t AUHandsetNoiseEQ::GetProperty(AUHandsetNoiseEQ *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  if (a3) {
    return 4294956417;
  }
  if (a2 == 3700)
  {
    int v6 = *((unsigned __int8 *)this + 376);
  }
  else
  {
    if (a2 != 21) {
      return 4294956417;
    }
    int v6 = *((_DWORD *)this + 134);
  }
  uint64_t result = 0;
  *a5 = v6;
  return result;
}

uint64_t AUHandsetNoiseEQ::GetPropertyInfo(AUHandsetNoiseEQ *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3 || a2 != 3700 && a2 != 21) {
    return 4294956417;
  }
  uint64_t result = 0;
  *a6 = 1;
  *a5 = 4;
  return result;
}

uint64_t AUHandsetNoiseEQ::Reset(AUHandsetNoiseEQ *this)
{
  if (*((void *)this + 70))
  {
    AUHandsetNoiseEQ::UpdateState(this);
    uint64_t v2 = *((void *)this + 70);
    *(unsigned char *)(v2 + 1) = 1;
    unsigned int v3 = *(void **)(v2 + 240);
    uint64_t v4 = *(void *)(v2 + 248) - (void)v3;
    if (v4 >= 1) {
      memset_pattern16(v3, &unk_1BB873A60, 4 * (((unint64_t)v4 >> 2) - ((unint64_t)v4 > 3)) + 4);
    }
  }
  return 0;
}

void *AUHandsetNoiseEQ::Cleanup(AUHandsetNoiseEQ *this)
{
  return std::unique_ptr<HandsetNoiseEQCore>::reset[abi:ne180100]((void *)this + 70, 0);
}

void *std::unique_ptr<HandsetNoiseEQCore>::reset[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t v2 = (void *)*result;
  *uint64_t result = a2;
  if (v2)
  {
    unsigned int v3 = (void *)v2[30];
    if (v3)
    {
      v2[31] = v3;
      operator delete(v3);
    }
    uint64_t v4 = (void *)v2[27];
    if (v4)
    {
      v2[28] = v4;
      operator delete(v4);
    }
    uint64_t v5 = (void *)v2[24];
    if (v5)
    {
      v2[25] = v5;
      operator delete(v5);
    }
    int v6 = (void *)v2[21];
    if (v6)
    {
      v2[22] = v6;
      operator delete(v6);
    }
    float v7 = (void *)v2[18];
    if (v7)
    {
      v2[19] = v7;
      operator delete(v7);
    }
    float v8 = (void *)v2[15];
    if (v8)
    {
      v2[16] = v8;
      operator delete(v8);
    }
    JUMPOUT(0x1C185D370);
  }
  return result;
}

uint64_t AUHandsetNoiseEQ::Initialize(AUHandsetNoiseEQ *this)
{
  uint64_t v2 = (AUHandsetNoiseEQ *)((char *)this + 80);
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUHandsetNoiseEQ *)((char *)this + 80), 0);
  uint64_t v4 = ausdk::AUScope::SafeGetElement((AUHandsetNoiseEQ *)((char *)this + 128), 0);
  *((_DWORD *)this + 136) = *(_DWORD *)(Element + 108);
  if (*(_DWORD *)(v4 + 108) == 1)
  {
    unsigned int v5 = 0;
    while (1)
    {
      uint64_t v6 = *((void *)this + 15);
      if (v6) {
        LODWORD(v7) = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6);
      }
      else {
        uint64_t v7 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
      }
      if (v5 >= v7) {
        break;
      }
      uint64_t v8 = ausdk::AUScope::SafeGetElement(v2, v5++);
      if (*(_DWORD *)(v8 + 108) != *((_DWORD *)this + 136)) {
        return 4294956421;
      }
    }
    unsigned int v9 = 0;
    do
    {
      uint64_t v10 = *((void *)this + 21);
      if (v10) {
        LODWORD(v11) = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 24))(v10);
      }
      else {
        uint64_t v11 = (*((void *)this + 19) - *((void *)this + 18)) >> 3;
      }
      if (v9 >= v11) {
        operator new();
      }
      uint64_t v12 = ausdk::AUScope::SafeGetElement((AUHandsetNoiseEQ *)((char *)this + 128), v9++);
    }
    while (*(_DWORD *)(v12 + 108) == 1);
  }
  return 4294956421;
}

void AUHandsetNoiseEQ::~AUHandsetNoiseEQ(AUHandsetNoiseEQ *this)
{
  AUHandsetNoiseEQ::~AUHandsetNoiseEQ(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F14B0CC0;
  uint64_t v2 = (void *)((char *)this + 560);
  std::unique_ptr<HandsetNoiseEQCore>::reset[abi:ne180100]((void *)this + 70, 0);
  std::__hash_table<vp::vx::io::Object_ID<vp::vx::io::Node>,std::hash<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::equal_to<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::allocator<vp::vx::io::Object_ID<vp::vx::io::Node>>>::~__hash_table((uint64_t)this + 568);
  std::unique_ptr<HandsetNoiseEQCore>::reset[abi:ne180100](v2, 0);

  ausdk::AUBase::~AUBase(this);
}

void ___ZL24AUHandsetNoiseEQLogScopev_block_invoke()
{
}

uint64_t *std::unique_ptr<NeuralRAD>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    unsigned int v9 = (void **)(v2 + 416);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
    unsigned int v9 = (void **)(v2 + 392);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
    unsigned int v3 = *(void **)(v2 + 368);
    if (v3)
    {
      *(void *)(v2 + 376) = v3;
      operator delete(v3);
    }
    std::unique_ptr<ParametricFilters>::reset[abi:ne180100]((void ***)(v2 + 352), 0);
    std::unique_ptr<ParametricFilters>::reset[abi:ne180100]((void ***)(v2 + 344), 0);
    unsigned int v9 = (void **)(v2 + 312);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
    unsigned int v9 = (void **)(v2 + 280);
    std::vector<std::unique_ptr<IR::FixedIntegerDelay>>::__destroy_vector::operator()[abi:ne180100](&v9);
    std::__optional_destruct_base<CA::AudioSampleRateConverter,false>::~__optional_destruct_base[abi:ne180100](v2 + 256);
    std::__optional_destruct_base<CA::AudioSampleRateConverter,false>::~__optional_destruct_base[abi:ne180100](v2 + 240);
    if (*(char *)(v2 + 239) < 0) {
      operator delete(*(void **)(v2 + 216));
    }
    uint64_t v4 = *(void **)(v2 + 192);
    if (v4)
    {
      *(void *)(v2 + 200) = v4;
      operator delete(v4);
    }
    unsigned int v5 = *(void **)(v2 + 152);
    if (v5)
    {
      *(void *)(v2 + 160) = v5;
      operator delete(v5);
    }
    uint64_t v6 = *(void **)(v2 + 128);
    if (v6)
    {
      *(void *)(v2 + 136) = v6;
      operator delete(v6);
    }
    unsigned int v9 = (void **)(v2 + 72);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
    uint64_t v7 = *(void **)(v2 + 32);
    if (v7)
    {
      *(void *)(v2 + 40) = v7;
      operator delete(v7);
    }
    uint64_t v8 = *(void **)(v2 + 8);
    if (v8)
    {
      *(void *)(v2 + 16) = v8;
      operator delete(v8);
    }
    std::unique_ptr<NeuralNet>::reset[abi:ne180100]((NeuralNet **)v2, 0);
    JUMPOUT(0x1C185D370);
  }
  return result;
}

uint64_t *std::unique_ptr<NeuralTranscoder>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    std::unique_ptr<ParametricFilters>::reset[abi:ne180100]((void ***)(v2 + 248), 0);
    std::__optional_destruct_base<CA::AudioSampleRateConverter,false>::~__optional_destruct_base[abi:ne180100](v2 + 224);
    std::__optional_destruct_base<CA::AudioSampleRateConverter,false>::~__optional_destruct_base[abi:ne180100](v2 + 208);
    uint64_t v6 = (void **)(v2 + 184);
    std::vector<std::unique_ptr<IR::FixedIntegerDelay>>::__destroy_vector::operator()[abi:ne180100](&v6);
    if (*(char *)(v2 + 183) < 0) {
      operator delete(*(void **)(v2 + 160));
    }
    unsigned int v3 = *(void **)(v2 + 136);
    if (v3)
    {
      *(void *)(v2 + 144) = v3;
      operator delete(v3);
    }
    uint64_t v6 = (void **)(v2 + 72);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
    uint64_t v4 = *(void **)(v2 + 32);
    if (v4)
    {
      *(void *)(v2 + 40) = v4;
      operator delete(v4);
    }
    unsigned int v5 = *(void **)(v2 + 8);
    if (v5)
    {
      *(void *)(v2 + 16) = v5;
      operator delete(v5);
    }
    std::unique_ptr<NeuralNet>::reset[abi:ne180100]((NeuralNet **)v2, 0);
    JUMPOUT(0x1C185D370);
  }
  return result;
}

uint64_t AUSM::MatrixMix::MatrixMix(uint64_t a1, const void **a2)
{
  *(_DWORD *)a1 = 0;
  std::vector<AudioChannelLayout>::vector((void *)(a1 + 8), 1uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)uint64_t v4 = 0;
  *(_DWORD *)(v4 + 8) = 0;
  std::vector<AudioChannelLayout>::vector((void *)(a1 + 32), 1uLL);
  uint64_t v5 = *(void *)(a1 + 32);
  *(void *)uint64_t v5 = 0;
  *(_DWORD *)(v5 + 8) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  uint64_t v6 = (void **)(a1 + 168);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_DWORD *)(a1 + 228) = 0;
  *(void *)(a1 + 56) = 0;
  *(_WORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(void *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 210) = 0u;
  if (*((char *)a2 + 23) >= 0) {
    size_t v7 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v7 = (size_t)a2[1];
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&v11, v7 + 10);
  if (v12 >= 0) {
    uint64_t v8 = &v11;
  }
  else {
    uint64_t v8 = (long long *)v11;
  }
  if (v7)
  {
    if (*((char *)a2 + 23) >= 0) {
      unsigned int v9 = a2;
    }
    else {
      unsigned int v9 = *a2;
    }
    memmove(v8, v9, v7);
  }
  strcpy((char *)v8 + v7, "|MatrixMix");
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)uint64_t v6 = v11;
  *(void *)(a1 + 184) = v12;
  return a1;
}

void sub_1BB4DEEA0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 191) < 0) {
    operator delete(*v6);
  }
  std::unique_ptr<NeuralRAD>::reset[abi:ne180100](v5, 0);
  std::unique_ptr<NeuralTranscoder>::reset[abi:ne180100](v4, 0);
  unsigned int v9 = *(void **)(v1 + 120);
  if (v9)
  {
    *(void *)(v1 + 128) = v9;
    operator delete(v9);
  }
  uint64_t v10 = *(void **)(v1 + 96);
  if (v10)
  {
    *(void *)(v1 + 104) = v10;
    operator delete(v10);
  }
  long long v11 = *v7;
  if (*v7)
  {
    *(void *)(v1 + 80) = v11;
    operator delete(v11);
  }
  uint64_t v12 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 40) = v12;
    operator delete(v12);
  }
  uint64_t v13 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

uint64_t AUSM::MatrixMix::createHOADecoders(AUSM::MatrixMix *this, int a2, unsigned int a3)
{
  uint64_t v249 = *MEMORY[0x1E4F143B8];
  if (getAUSMV2Log(void)::onceToken != -1) {
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
  }
  uint64_t v6 = getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    size_t v7 = (void *)((char *)this + 168);
    if (*((char *)this + 191) < 0) {
      size_t v7 = (void *)*v7;
    }
    *(_DWORD *)AudioTimeStamp buf = 136315394;
    std::string::size_type v241 = v7;
    *(_WORD *)float v242 = 2080;
    *(void *)&v242[2] = "createHOADecoders";
    _os_log_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_DEFAULT, "[%s|%s] Creating HOA decoders", buf, 0x16u);
  }
  uint64_t v8 = *((void *)this + 19);
  if (v8) {
    int v9 = *(_DWORD *)(v8 + 64) | 0xBE0000;
  }
  else {
    int v9 = **((_DWORD **)this + 1);
  }
  HOA::HOA((uint64_t)buf, v9, *((_DWORD *)this + 50));
  if (*((void *)this + 19) || *(_DWORD *)v242 == *((_DWORD *)this + 14))
  {
    __p[0] = 0;
    __p[1] = 0;
    v226[0] = 0;
    v223[0] = 0;
    v223[1] = 0;
    v224[0] = 0;
    *(void *)&v221.mChannelDescriptions[0].mCoordinates[1] = 0;
    long long v222 = 0uLL;
    *((_DWORD *)this + 15) = 0;
    *((_DWORD *)this + 49) = 0;
    *((_DWORD *)this + 51) = 0;
    *((_DWORD *)this + 52) = 0;
    if (!a2)
    {
      float v62 = (ausdk::AUChannelLayout *)*((void *)this + 4);
      int v63 = ausdk::AUChannelLayout::NumberChannels(v62, v10);
      GetChannelLayoutSphericalCoordinates((AudioChannelLayout *)v231, (float *)v62);
      GetChannelLayoutChannelLabels(&v221, *((int **)this + 4));
      uint64_t v64 = (uint64_t)(*((void *)&v232 + 1) - v232) >> 2;
      int8x16_t v65 = *(char **)v231;
      uint64_t v66 = *(void *)&v231[8];
      if (v64 != (uint64_t)(*(void *)&v231[8] - *(void *)v231) >> 2
        || v64 != (v234 - (unsigned char *)v233) >> 2
        || v64 != (uint64_t)(*(void *)&v221.mNumberChannelDescriptions - *(void *)&v221.mChannelLayoutTag) >> 2)
      {
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        float32x2_t v67 = getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
        {
          std::string::size_type v177 = (void *)((char *)this + 168);
          if (*((char *)this + 191) < 0) {
            std::string::size_type v177 = (void *)*v177;
          }
          *(_DWORD *)float v227 = 136315394;
          *(void *)&v227[4] = v177;
          *(_WORD *)&v227[12] = 2080;
          *(void *)&v227[14] = "createHOADecoders";
          _os_log_error_impl(&dword_1BB0CE000, v67, OS_LOG_TYPE_ERROR, "[%s|%s] Failed creating HOA decoders: arrays sizes don't match. Defaulting to stereo", v227, 0x16u);
        }
        GetChannelLayoutSphericalCoordinates((AudioChannelLayout *)v227);
        float v218 = v231;
        std::string::size_type v219 = (char *)&v232;
        float v220 = &v233;
        std::__memberwise_forward_assign[abi:ne180100]<std::tuple<std::vector<float> &,std::vector<float> &,std::vector<float> &>,std::tuple<std::vector<float>,std::vector<float>,std::vector<float>>,std::vector<float>,std::vector<float>,std::vector<float>,0ul,1ul,2ul>((void ***)&v218, (uint64_t)v227);
        if (v229)
        {
          long long v230 = v229;
          operator delete(v229);
        }
        if ((void)v228)
        {
          *((void *)&v228 + 1) = v228;
          operator delete((void *)v228);
        }
        if (*(void *)v227)
        {
          *(void *)&v227[8] = *(void *)v227;
          operator delete(*(void **)v227);
        }
        GetChannelLayoutChannelLabels((const AudioChannelLayout *)v227, 6619138);
        if (*(void *)&v221.mChannelDescriptions[0].mCoordinates[1])
        {
          *(void *)&long long v222 = *(void *)&v221.mChannelDescriptions[0].mCoordinates[1];
          operator delete(*(void **)&v221.mChannelDescriptions[0].mCoordinates[1]);
        }
        float32x4_t v68 = *(char **)v227;
        *(void *)&v221.mChannelDescriptions[0].mCoordinates[1] = *(void *)v227;
        long long v222 = *(_OWORD *)&v227[8];
        memset(v227, 0, sizeof(v227));
        std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)&v221, v68, v222, (uint64_t)(v222 - (void)v68) >> 2);
        if (*(void *)v227)
        {
          *(void *)&v227[8] = *(void *)v227;
          operator delete(*(void **)v227);
        }
        int v63 = 2;
        int8x16_t v65 = *(char **)v231;
        uint64_t v66 = *(void *)&v231[8];
      }
      unsigned int v209 = v63;
      if (*(_DWORD *)this == 3)
      {
        *((_DWORD *)this + 15) = v63;
        std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)__p, v65, v66, (v66 - (uint64_t)v65) >> 2);
        std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)v223, (char *)v232, *((uint64_t *)&v232 + 1), (uint64_t)(*((void *)&v232 + 1) - v232) >> 2);
        std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)&v221.mChannelDescriptions[0].mCoordinates[1], *(char **)&v221.mChannelLayoutTag, *(uint64_t *)&v221.mNumberChannelDescriptions, (uint64_t)(*(void *)&v221.mNumberChannelDescriptions - *(void *)&v221.mChannelLayoutTag) >> 2);
        int8x16_t v65 = *(char **)v231;
        uint64_t v66 = *(void *)&v231[8];
      }
      unsigned int v69 = a3;
      float v218 = 0;
      std::string::size_type v219 = 0;
      float v220 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v218, v65, v66, (v66 - (uint64_t)v65) >> 2);
      float v215 = 0;
      float v216 = 0;
      uint64_t v217 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v215, (const void *)v232, *((uint64_t *)&v232 + 1), (uint64_t)(*((void *)&v232 + 1) - v232) >> 2);
      float v212 = 0;
      unsigned int v213 = 0;
      float v214 = 0;
      if (((*(void *)&v221.mNumberChannelDescriptions - *(void *)&v221.mChannelLayoutTag) & 0x3FFFFFFFCLL) != 0)
      {
        unsigned int v70 = (*(void *)&v221.mNumberChannelDescriptions - *(void *)&v221.mChannelLayoutTag) >> 2;
        do
        {
          unsigned int v71 = *(_DWORD *)(*(void *)&v221.mChannelLayoutTag + 4 * --v70);
          BOOL v72 = v71 > 0x3E || ((0x4000002000000010uLL >> v71) & 1) == 0;
          if (!v72 || *((float *)v233 + v70) == 0.0)
          {
            AudioStreamBasicDescription v73 = v213;
            if (v213 >= v214)
            {
              float32x4_t v75 = (char *)v212;
              uint64_t v76 = (v213 - (unsigned char *)v212) >> 2;
              unint64_t v77 = v76 + 1;
              if ((unint64_t)(v76 + 1) >> 62) {
                std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v78 = v214 - (unsigned char *)v212;
              if ((v214 - (unsigned char *)v212) >> 1 > v77) {
                unint64_t v77 = v78 >> 1;
              }
              if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v79 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v79 = v77;
              }
              if (v79)
              {
                float v80 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v214, v79);
                float32x4_t v75 = (char *)v212;
                AudioStreamBasicDescription v73 = v213;
              }
              else
              {
                float v80 = 0;
              }
              float v81 = &v80[4 * v76];
              *(_DWORD *)float v81 = v70;
              float32x4_t v74 = v81 + 4;
              while (v73 != v75)
              {
                int v82 = *((_DWORD *)v73 - 1);
                v73 -= 4;
                *((_DWORD *)v81 - 1) = v82;
                v81 -= 4;
              }
              float v212 = v81;
              unsigned int v213 = v74;
              float v214 = &v80[4 * v79];
              if (v75) {
                operator delete(v75);
              }
            }
            else
            {
              *(_DWORD *)unsigned int v213 = v70;
              float32x4_t v74 = v73 + 4;
            }
            unsigned int v213 = v74;
            uint64_t v83 = (char *)v218 + 4 * v70;
            int64_t v84 = v219 - (v83 + 4);
            if (v219 != v83 + 4) {
              memmove((char *)v218 + 4 * v70, v83 + 4, v219 - (v83 + 4));
            }
            std::string::size_type v219 = &v83[v84];
            char v85 = (char *)v215 + 4 * v70;
            int64_t v86 = v216 - (v85 + 4);
            if (v216 != v85 + 4) {
              memmove((char *)v215 + 4 * v70, v85 + 4, v216 - (v85 + 4));
            }
            float v216 = &v85[v86];
          }
        }
        while (v70);
      }
      unsigned int v87 = v69;
      unsigned int v88 = v209;
      if (v219 == v218 || v216 == v215)
      {
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        unsigned int v89 = getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
        {
          float v205 = (void *)((char *)this + 168);
          if (*((char *)this + 191) < 0) {
            float v205 = (void *)*v205;
          }
          int v206 = **((_DWORD **)this + 4);
          GetStringFromAudioChannelLayoutTag(v210, v206);
          if (v211 >= 0) {
            float v207 = v210;
          }
          else {
            float v207 = (void **)v210[0];
          }
          *(_DWORD *)float v227 = 136315906;
          *(void *)&v227[4] = v205;
          *(_WORD *)&v227[12] = 2080;
          *(void *)&v227[14] = "createHOADecoders";
          *(_WORD *)&v227[22] = 1024;
          LODWORD(v228) = v206;
          WORD2(v228) = 2080;
          *(void *)((char *)&v228 + 6) = v207;
          _os_log_error_impl(&dword_1BB0CE000, v89, OS_LOG_TYPE_ERROR, "[%s|%s] Failed creating HOA decoders for output channel layout tag = %u (%s); azimuth and elevation array si"
            "zes are 0 after LFE removal. Defaulting to stereo",
            v227,
            0x26u);
          if (v211 < 0) {
            operator delete(v210[0]);
          }
        }
        unsigned int v213 = (char *)v212;
        unsigned int v88 = 2;
        if (*(_DWORD *)this == 3) {
          *((_DWORD *)this + 15) = 2;
        }
      }
      int Decoder = HOA::createDecoder((unsigned int *)buf, (uint64_t)&v218, (uint64_t)&v215, 1);
      if (Decoder)
      {
        *((void *)this + 13) = *((void *)this + 12);
        *((void *)this + 16) = *((void *)this + 15);
        *((void *)this + 10) = *((void *)this + 9);
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        long long v91 = getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
        {
          uint32_t v92 = (void *)((char *)this + 168);
          if (*((char *)this + 191) < 0) {
            uint32_t v92 = (void *)*v92;
          }
          *(_DWORD *)float v227 = 136315394;
          *(void *)&v227[4] = v92;
          *(_WORD *)&v227[12] = 2080;
          *(void *)&v227[14] = "createHOADecoders";
          _os_log_error_impl(&dword_1BB0CE000, v91, OS_LOG_TYPE_ERROR, "[%s|%s] Failed creating HOA decoders", v227, 0x16u);
        }
      }
      else
      {
        memset(v227, 0, sizeof(v227));
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v227, __src, v244, (v244 - (uint64_t)__src) >> 2);
        float v96 = (const float **)((char *)this + 96);
        long long v95 = (void *)*((void *)this + 12);
        if (v95)
        {
          *((void *)this + 13) = v95;
          operator delete(v95);
          *float v96 = 0;
          *((void *)this + 13) = 0;
          *((void *)this + 14) = 0;
        }
        uint64_t v97 = *(void *)v227;
        *((void *)this + 12) = *(void *)v227;
        uint64_t v98 = *(void *)&v227[8];
        *(_OWORD *)((char *)this + 104) = *(_OWORD *)&v227[8];
        if (v213 != v212)
        {
          float32x4_t v100 = v218;
          long long v99 = v219;
          uint64_t v101 = *((void *)this + 19);
          if (v101) {
            CFDictionaryRef v102 = (unsigned int *)(v101 + 64);
          }
          else {
            CFDictionaryRef v102 = (unsigned int *)((char *)this + 56);
          }
          vDSP_Length v103 = *v102;
          memset(v227, 0, sizeof(v227));
          std::vector<float>::reserve((void **)v227, ((v213 - (unsigned char *)v212) >> 2) * v103 + ((v98 - v97) >> 2));
          unint64_t v104 = (uint64_t)(*((void *)this + 13) - *((void *)this + 12)) >> 2;
          LODWORD(v210[0]) = 0;
          std::vector<float>::resize((uint64_t)v227, v104, v210);
          unint64_t v105 = v99 - v100;
          vDSP_Length v106 = (v105 >> 2);
          vDSP_mtrans(*v96, 1, *(float **)v227, 1, v106, v103);
          unint64_t v107 = (uint64_t)(*(void *)&v227[8] - *(void *)v227) >> 2;
          if (v107 != v103 * (v105 >> 2)) {
            __assert_rtn("createHOADecoders", "AUSMMatrixMix.cpp", 343, "scratchBuffer.size() == numNonLFEChannels * effectiveNumInputChannels");
          }
          __int16 v108 = v213;
          if (v213 != v212)
          {
            do
            {
              int v109 = *((_DWORD *)v108 - 1);
              v108 -= 4;
              LODWORD(v210[0]) = 0;
              std::vector<float>::insert(v227, (char *)(*(void *)v227 + 4 * (v109 * v103)), v103, (char *)v210);
            }
            while (v108 != v212);
            unint64_t v107 = (uint64_t)(*(void *)&v227[8] - *(void *)v227) >> 2;
          }
          std::vector<float>::resize((uint64_t)this + 96, v107);
          vDSP_mtrans(*(const float **)v227, 1, (float *)*v96, 1, v103, v106 + ((v213 - (unsigned char *)v212) >> 2));
          if (*(void *)v227)
          {
            *(void *)&v227[8] = *(void *)v227;
            operator delete(*(void **)v227);
          }
        }
        if (v87 >= 3 && v88 == 2)
        {
          unint64_t v110 = *((_DWORD *)this + 14) * v87;
          *(_DWORD *)float v227 = 0;
          std::vector<float>::assign((char **)this + 15, v110, v227);
          cblas_scopy(*((_DWORD *)this + 14), *((const float **)this + 12), 2, *((float **)this + 15), v87);
          cblas_scopy(*((_DWORD *)this + 14), (const float *)(*((void *)this + 12) + 4), 2, (float *)(*((void *)this + 15) + 4), v87);
        }
        else if (*((void *)this + 20))
        {
          *(_DWORD *)float v227 = 0;
          std::vector<float>::assign((char **)this + 15, v88 * v88, v227);
          if (v88)
          {
            unsigned int v160 = 0;
            uint64_t v161 = *((void *)this + 15);
            uint64_t v162 = v88;
            do
            {
              *(_DWORD *)(v161 + 4 * v160) = 1065353216;
              v160 += v88 + 1;
              --v162;
            }
            while (v162);
          }
        }
        else
        {
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)this + 120, *((char **)this + 12), *((void *)this + 13), (uint64_t)(*((void *)this + 13) - *((void *)this + 12)) >> 2);
        }
        if (!*((unsigned char *)this + 65)) {
          *((void *)this + 13) = *((void *)this + 12);
        }
      }
      if (v212)
      {
        unsigned int v213 = (char *)v212;
        operator delete(v212);
      }
      if (v215)
      {
        float v216 = (char *)v215;
        operator delete(v215);
      }
      if (v218)
      {
        std::string::size_type v219 = (char *)v218;
        operator delete(v218);
      }
      if (*(void *)&v221.mChannelLayoutTag)
      {
        *(void *)&v221.mNumberChannelDescriptions = *(void *)&v221.mChannelLayoutTag;
        operator delete(*(void **)&v221.mChannelLayoutTag);
      }
      if (v233)
      {
        float v234 = v233;
        operator delete(v233);
      }
      if ((void)v232)
      {
        *((void *)&v232 + 1) = v232;
        operator delete((void *)v232);
      }
      if (*(void *)v231)
      {
        *(void *)&v231[8] = *(void *)v231;
        operator delete(*(void **)v231);
      }
      if (Decoder)
      {
        uint64_t v94 = 4294956428;
LABEL_335:
        if (*(void *)&v221.mChannelDescriptions[0].mCoordinates[1])
        {
          *(void *)&long long v222 = *(void *)&v221.mChannelDescriptions[0].mCoordinates[1];
          operator delete(*(void **)&v221.mChannelDescriptions[0].mCoordinates[1]);
        }
        if (v223[0])
        {
          v223[1] = v223[0];
          operator delete(v223[0]);
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_341;
      }
LABEL_285:
      int v163 = *(_DWORD *)this;
      if (*(_DWORD *)this == 4)
      {
        unint64_t v171 = *((unsigned int *)this + 14);
        *((_DWORD *)this + 15) = v171;
        *(_DWORD *)float v231 = 0;
        std::vector<float>::assign((char **)__p, v171, v231);
        unint64_t v172 = *((unsigned int *)this + 15);
        *(_DWORD *)float v231 = 0;
        std::vector<float>::assign((char **)v223, v172, v231);
        std::vector<unsigned int>::resize((std::vector<unsigned int> *)&v221.mChannelDescriptions[0].mCoordinates[1], *((unsigned int *)this + 15));
        unsigned int v173 = *(_DWORD **)&v221.mChannelDescriptions[0].mCoordinates[1];
        float v174 = (_DWORD *)v222;
        if (*(void *)&v221.mChannelDescriptions[0].mCoordinates[1] != (void)v222)
        {
          int v175 = 0x10000;
          do
            *v173++ = v175++;
          while (v173 != v174);
        }
      }
      else if (v163 == 5)
      {
        uint64_t v168 = *((void *)this + 19);
        if (v168)
        {
          int v169 = *(_DWORD *)(v168 + 64) + 4;
          int v170 = 4;
        }
        else
        {
          uint64_t v176 = *((void *)this + 20);
          int v170 = 0;
          if (v176) {
            int v169 = *(_DWORD *)(v176 + 60);
          }
          else {
            int v169 = *((_DWORD *)this + 14);
          }
        }
        *((_DWORD *)this + 15) = v169;
        *((_DWORD *)this + 49) = v170;
      }
      else if (v163 == 6)
      {
        *((_DWORD *)this + 15) = 1;
        *(_DWORD *)float v231 = 0;
        std::vector<float>::assign((char **)__p, 1uLL, v231);
        unint64_t v164 = *((unsigned int *)this + 15);
        *(_DWORD *)float v231 = 0;
        std::vector<float>::assign((char **)v223, v164, v231);
        std::vector<unsigned int>::resize((std::vector<unsigned int> *)&v221.mChannelDescriptions[0].mCoordinates[1], *((unsigned int *)this + 15));
        unint64_t v165 = *(_DWORD **)&v221.mChannelDescriptions[0].mCoordinates[1];
        float v166 = (_DWORD *)v222;
        if (*(void *)&v221.mChannelDescriptions[0].mCoordinates[1] != (void)v222)
        {
          int v167 = 0x10000;
          do
            *v165++ = v167++;
          while (v165 != v166);
        }
      }
      if (((char *)v223[1] - (char *)v223[0]) >> 2 >= (unint64_t)(((char *)__p[1] - (char *)__p[0]) >> 2)) {
        unint64_t v178 = ((char *)__p[1] - (char *)__p[0]) >> 2;
      }
      else {
        unint64_t v178 = ((char *)v223[1] - (char *)v223[0]) >> 2;
      }
      if ((uint64_t)(v222 - *(void *)&v221.mChannelDescriptions[0].mCoordinates[1]) >> 2 < v178) {
        unint64_t v178 = (uint64_t)(v222 - *(void *)&v221.mChannelDescriptions[0].mCoordinates[1]) >> 2;
      }
      unint64_t v179 = v178;
      uint64_t v181 = *((void *)this + 9);
      uint64_t v180 = *((void *)this + 10);
      unint64_t v182 = (v180 - v181) >> 5;
      if (v179 <= v182)
      {
        if (v179 < v182) {
          *((void *)this + 10) = v181 + 32 * v179;
        }
      }
      else
      {
        uint64_t v183 = *((void *)this + 11);
        if (v179 - v182 <= (v183 - v180) >> 5)
        {
          uint64_t v196 = v180 + 32 * (v179 - v182);
          do
          {
            *(void *)uint64_t v180 = 0;
            *(_OWORD *)(v180 + 8) = xmmword_1BB873AB0;
            *(void *)(v180 + 24) = 0xFFFFFFFF00000001;
            v180 += 32;
          }
          while (v180 != v196);
          *((void *)this + 10) = v196;
          if (!v179) {
            goto LABEL_334;
          }
          goto LABEL_332;
        }
        unint64_t v184 = v183 - v181;
        unint64_t v185 = (v183 - v181) >> 4;
        if (v185 <= v179) {
          unint64_t v185 = v179;
        }
        if (v184 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v186 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v186 = v185;
        }
        std::string::size_type v187 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(v186);
        long long v189 = &v187[32 * v182];
        float v190 = &v187[32 * v179];
        float v191 = v189;
        do
        {
          *(void *)float v191 = 0;
          *(_OWORD *)(v191 + 8) = xmmword_1BB873AB0;
          *((void *)v191 + 3) = 0xFFFFFFFF00000001;
          v191 += 32;
        }
        while (v191 != v190);
        float v192 = &v187[32 * v188];
        float v194 = (char *)*((void *)this + 9);
        float v193 = (char *)*((void *)this + 10);
        if (v193 != v194)
        {
          do
          {
            long long v195 = *((_OWORD *)v193 - 1);
            *((_OWORD *)v189 - 2) = *((_OWORD *)v193 - 2);
            *((_OWORD *)v189 - 1) = v195;
            v189 -= 32;
            v193 -= 32;
          }
          while (v193 != v194);
          float v193 = (char *)*((void *)this + 9);
        }
        *((void *)this + 9) = v189;
        *((void *)this + 10) = v190;
        *((void *)this + 11) = v192;
        if (v193)
        {
          operator delete(v193);
          if (!v179)
          {
LABEL_334:
            uint64_t v94 = 0;
            goto LABEL_335;
          }
LABEL_332:
          float v197 = (int *)__p[0];
          uint64_t v198 = *((void *)this + 9);
          float v199 = (int *)v223[0];
          float v200 = *(int **)&v221.mChannelDescriptions[0].mCoordinates[1];
          do
          {
            int v201 = *v197++;
            *(_DWORD *)uint64_t v198 = v201;
            int v202 = *v199++;
            *(_DWORD *)(v198 + 4) = v202;
            *(_OWORD *)(v198 + 8) = xmmword_1BB873AB0;
            *(_DWORD *)(v198 + 24) = 1;
            int v203 = *v200++;
            *(_DWORD *)(v198 + 28) = v203;
            v198 += 32;
            --v179;
          }
          while (v179);
          goto LABEL_334;
        }
      }
      if (!v179) {
        goto LABEL_334;
      }
      goto LABEL_332;
    }
    if (*(_DWORD *)this != 5 && *(_DWORD *)this != 3)
    {
      int v111 = 0;
      int v112 = 0;
LABEL_260:
      *((_DWORD *)this + 51) = v112;
      *((_DWORD *)this + 52) = v111;
      goto LABEL_285;
    }
    HOA::createSphericalGridDecoder((unsigned int *)buf);
    *((_DWORD *)this + 15) = *(_DWORD *)&v242[8];
    memset(v231, 0, sizeof(v231));
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v231, v245, v246, (v246 - (uint64_t)v245) >> 2);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_OWORD *)std::string __p = *(_OWORD *)v231;
    v226[0] = *(void *)&v231[16];
    memset(v231, 0, sizeof(v231));
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v231, v247, v248, (v248 - (uint64_t)v247) >> 2);
    if (v223[0])
    {
      v223[1] = v223[0];
      operator delete(v223[0]);
    }
    *(_OWORD *)float v223 = *(_OWORD *)v231;
    v224[0] = *(void *)&v231[16];
    std::vector<unsigned int>::resize((std::vector<unsigned int> *)&v221.mChannelDescriptions[0].mCoordinates[1], *((unsigned int *)this + 15));
    long long v11 = *(_DWORD **)&v221.mChannelDescriptions[0].mCoordinates[1];
    uint64_t v12 = (_DWORD *)v222;
    if (*(void *)&v221.mChannelDescriptions[0].mCoordinates[1] != (void)v222)
    {
      int v13 = 0x10000;
      do
        *v11++ = v13++;
      while (v11 != v12);
    }
    unsigned int v14 = *((_DWORD *)this + 48);
    if (v241 <= v14)
    {
      if (getAUSMV2Log(void)::onceToken != -1) {
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
      }
      uint64_t v15 = getAUSMV2Log(void)::gLog;
      unsigned int v14 = 0;
      if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = (void *)((char *)this + 168);
        if (*((char *)this + 191) < 0) {
          uint64_t v16 = (void *)*v16;
        }
        int v17 = *((_DWORD *)this + 48);
        *(_DWORD *)float v231 = 136315906;
        *(void *)&v231[4] = v16;
        *(_WORD *)&v231[12] = 2080;
        *(void *)&v231[14] = "createHOADecoders";
        *(_WORD *)&v231[22] = 1024;
        LODWORD(v232) = v17;
        WORD2(v232) = 1024;
        *(_DWORD *)((char *)&v232 + 6) = v241;
        _os_log_impl(&dword_1BB0CE000, v15, OS_LOG_TYPE_DEFAULT, "[%s|%s] HOA reverb order (%u) can not be greater or equal to input HOA order (%u)", v231, 0x22u);
        unsigned int v14 = 0;
      }
    }
    unsigned int v18 = *((_DWORD *)this + 53);
    if (v241 <= v18)
    {
      if (getAUSMV2Log(void)::onceToken != -1) {
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
      }
      std::string::size_type v113 = getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v114 = (void *)((char *)this + 168);
        if (*((char *)this + 191) < 0) {
          unint64_t v114 = (void *)*v114;
        }
        int v115 = *((_DWORD *)this + 53);
        *(_DWORD *)float v231 = 136315906;
        *(void *)&v231[4] = v114;
        *(_WORD *)&v231[12] = 2080;
        *(void *)&v231[14] = "createHOADecoders";
        *(_WORD *)&v231[22] = 1024;
        LODWORD(v232) = v115;
        WORD2(v232) = 1024;
        *(_DWORD *)((char *)&v232 + 6) = v241;
        _os_log_impl(&dword_1BB0CE000, v113, OS_LOG_TYPE_DEFAULT, "[%s|%s] HOA power saving mode order (%u) can not be greater or equal to input HOA order (%u)", v231, 0x22u);
      }
      *((_DWORD *)this + 53) = 0;
      uint64_t v116 = *((void *)this + 19);
      BOOL v20 = v116 != 0;
      if (!v14 && !v116) {
        goto LABEL_181;
      }
    }
    else
    {
      uint64_t v19 = *((void *)this + 19);
      BOOL v20 = v19 != 0;
      if (!v14 && !v19)
      {
        if (v18)
        {
          unint64_t v21 = (v18 + 1) * (v18 + 1);
          HOA::HOA((uint64_t)v231, v21 | (*(unsigned __int16 *)(*((void *)this + 1) + 2) << 16), *((_DWORD *)this + 50));
          HOA::createSphericalGridDecoder((unsigned int *)v231);
          memset(v227, 0, sizeof(v227));
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v227, v236, v237, (v237 - (uint64_t)v236) >> 2);
          memset(&v221, 0, 24);
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v221, v238, v239, (v239 - (uint64_t)v238) >> 2);
          int v22 = *(_DWORD *)&v231[20];
          *((_DWORD *)this + 54) = *(_DWORD *)&v231[20];
          int v23 = *((_DWORD *)this + 15) + v22;
          unint64_t v24 = (v23 * *((_DWORD *)this + 14));
          LODWORD(v218) = 0;
          std::vector<float>::assign((char **)this + 12, v24, &v218);
          if (*((_DWORD *)this + 14))
          {
            unsigned int v25 = 0;
            unint64_t v26 = 0;
            do
            {
              memcpy((void *)(*((void *)this + 12) + 4 * v25), (char *)__src + 4 * (*((_DWORD *)this + 15) * v26), 4 * *((unsigned int *)this + 15));
              if (v26 < v21) {
                memcpy((void *)(*((void *)this + 12) + 4 * (v25 + *((_DWORD *)this + 15))), &v234[4 * (*((_DWORD *)this + 54) * v26)], 4 * *((unsigned int *)this + 54));
              }
              ++v26;
              v25 += v23;
            }
            while (v26 < *((unsigned int *)this + 14));
          }
          LODWORD(v27) = *((_DWORD *)this + 54);
          if (v27)
          {
            unint64_t v28 = 0;
            do
            {
              uint64_t v29 = *(void *)v227;
              uint64_t v30 = (char *)__p[1];
              if (__p[1] >= (void *)v226[0])
              {
                uint64_t v32 = (char *)__p[0];
                int64_t v33 = ((char *)__p[1] - (char *)__p[0]) >> 2;
                unint64_t v34 = v33 + 1;
                if ((unint64_t)(v33 + 1) >> 62) {
                  goto LABEL_357;
                }
                int64_t v35 = v226[0] - (unint64_t)__p[0];
                if ((uint64_t)(v226[0] - (unint64_t)__p[0]) >> 1 > v34) {
                  unint64_t v34 = v35 >> 1;
                }
                if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v36 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v36 = v34;
                }
                if (v36)
                {
                  uint64_t v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)v226, v36);
                  uint64_t v32 = (char *)__p[0];
                  uint64_t v30 = (char *)__p[1];
                }
                else
                {
                  uint64_t v37 = 0;
                }
                uint64_t v38 = &v37[4 * v33];
                *(_DWORD *)uint64_t v38 = *(_DWORD *)(v29 + 4 * v28);
                uint64_t v31 = v38 + 4;
                while (v30 != v32)
                {
                  int v39 = *((_DWORD *)v30 - 1);
                  v30 -= 4;
                  *((_DWORD *)v38 - 1) = v39;
                  v38 -= 4;
                }
                __p[0] = v38;
                __p[1] = v31;
                v226[0] = &v37[4 * v36];
                if (v32) {
                  operator delete(v32);
                }
              }
              else
              {
                *(_DWORD *)__p[1] = *(_DWORD *)(*(void *)v227 + 4 * v28);
                uint64_t v31 = v30 + 4;
              }
              __p[1] = v31;
              uint64_t v40 = *(void *)&v221.mChannelLayoutTag;
              uint64_t v41 = (char *)v223[1];
              if (v223[1] >= (void *)v224[0])
              {
                uint64_t v43 = (char *)v223[0];
                int64_t v44 = ((char *)v223[1] - (char *)v223[0]) >> 2;
                unint64_t v45 = v44 + 1;
                if ((unint64_t)(v44 + 1) >> 62) {
LABEL_357:
                }
                  std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                int64_t v46 = v224[0] - (unint64_t)v223[0];
                if ((uint64_t)(v224[0] - (unint64_t)v223[0]) >> 1 > v45) {
                  unint64_t v45 = v46 >> 1;
                }
                if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v47 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v47 = v45;
                }
                if (v47)
                {
                  float v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)v224, v47);
                  uint64_t v43 = (char *)v223[0];
                  uint64_t v41 = (char *)v223[1];
                }
                else
                {
                  float v48 = 0;
                }
                float v49 = &v48[4 * v44];
                *(_DWORD *)float v49 = *(_DWORD *)(v40 + 4 * v28);
                unint64_t v42 = v49 + 4;
                while (v41 != v43)
                {
                  int v50 = *((_DWORD *)v41 - 1);
                  v41 -= 4;
                  *((_DWORD *)v49 - 1) = v50;
                  v49 -= 4;
                }
                v223[0] = v49;
                v223[1] = v42;
                v224[0] = &v48[4 * v47];
                if (v43) {
                  operator delete(v43);
                }
              }
              else
              {
                *(_DWORD *)v223[1] = *(_DWORD *)(*(void *)&v221.mChannelLayoutTag + 4 * v28);
                unint64_t v42 = v41 + 4;
              }
              v223[1] = v42;
              int v51 = v28 + *((_DWORD *)this + 15) + 0x10000;
              uint64_t v52 = (char *)v222;
              if ((unint64_t)v222 >= *((void *)&v222 + 1))
              {
                double v54 = *(char **)&v221.mChannelDescriptions[0].mCoordinates[1];
                uint64_t v55 = (uint64_t)(v222 - *(void *)&v221.mChannelDescriptions[0].mCoordinates[1]) >> 2;
                unint64_t v56 = v55 + 1;
                if ((unint64_t)(v55 + 1) >> 62) {
                  std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v57 = *((void *)&v222 + 1) - *(void *)&v221.mChannelDescriptions[0].mCoordinates[1];
                if ((uint64_t)(*((void *)&v222 + 1) - *(void *)&v221.mChannelDescriptions[0].mCoordinates[1]) >> 1 > v56) {
                  unint64_t v56 = v57 >> 1;
                }
                if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v58 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v58 = v56;
                }
                if (v58)
                {
                  uint64_t v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v222 + 8, v58);
                  double v54 = *(char **)&v221.mChannelDescriptions[0].mCoordinates[1];
                  uint64_t v52 = (char *)v222;
                }
                else
                {
                  uint64_t v59 = 0;
                }
                unint64_t v60 = &v59[4 * v55];
                *(_DWORD *)unint64_t v60 = v51;
                uint64_t v53 = v60 + 4;
                while (v52 != v54)
                {
                  int v61 = *((_DWORD *)v52 - 1);
                  v52 -= 4;
                  *((_DWORD *)v60 - 1) = v61;
                  v60 -= 4;
                }
                *(void *)&v221.mChannelDescriptions[0].mCoordinates[1] = v60;
                *(void *)&long long v222 = v53;
                *((void *)&v222 + 1) = &v59[4 * v58];
                if (v54) {
                  operator delete(v54);
                }
              }
              else
              {
                *(_DWORD *)long long v222 = v51;
                uint64_t v53 = v52 + 4;
              }
              *(void *)&long long v222 = v53;
              ++v28;
              unint64_t v27 = *((unsigned int *)this + 54);
            }
            while (v28 < v27);
          }
LABEL_246:
          *((_DWORD *)this + 15) += v27;
          if (*(void *)&v221.mChannelLayoutTag)
          {
            *(void *)&v221.mNumberChannelDescriptions = *(void *)&v221.mChannelLayoutTag;
            operator delete(*(void **)&v221.mChannelLayoutTag);
          }
          if (*(void *)v227)
          {
            *(void *)&v227[8] = *(void *)v227;
            operator delete(*(void **)v227);
          }
          HOA::~HOA((HOA *)v231);
LABEL_251:
          *((_DWORD *)this + 57) = 0;
          vDSP_vsmul((const float *)__p[0], 1, &AUSM::kRad2Deg, (float *)__p[0], 1, ((char *)__p[1] - (char *)__p[0]) >> 2);
          vDSP_vsmul((const float *)v223[0], 1, &AUSM::kRad2Deg, (float *)v223[0], 1, ((char *)v223[1] - (char *)v223[0]) >> 2);
          GetChannelLayoutSphericalCoordinates((AudioChannelLayout *)v227, *((float **)this + 4));
          HOA::HOA((uint64_t)v231, v9, *((_DWORD *)this + 50));
          HOA::createDecoder((unsigned int *)v231, (uint64_t)v227, (uint64_t)&v228, 0);
          memset(&v221, 0, 24);
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v221, v234, v235, (v235 - (uint64_t)v234) >> 2);
          std::__split_buffer<std::string>::pointer v159 = (void *)*((void *)this + 15);
          if (v159)
          {
            *((void *)this + 16) = v159;
            operator delete(v159);
            *((void *)this + 15) = 0;
            *((void *)this + 16) = 0;
            *((void *)this + 17) = 0;
          }
          *(_OWORD *)((char *)this + 120) = *(_OWORD *)&v221.mChannelLayoutTag;
          *((void *)this + 17) = *(void *)&v221.mChannelDescriptions[0].mChannelFlags;
          HOA::~HOA((HOA *)v231);
          if (v229)
          {
            long long v230 = v229;
            operator delete(v229);
          }
          if ((void)v228)
          {
            *((void *)&v228 + 1) = v228;
            operator delete((void *)v228);
          }
          if (*(void *)v227)
          {
            *(void *)&v227[8] = *(void *)v227;
            operator delete(*(void **)v227);
          }
          int v112 = *((_DWORD *)this + 15);
          int v111 = *((_DWORD *)this + 49);
          goto LABEL_260;
        }
LABEL_181:
        if ((void **)((char *)this + 96) != &__src) {
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)this + 96, (char *)__src, v244, (v244 - (uint64_t)__src) >> 2);
        }
        *((_DWORD *)this + 49) = 0;
        goto LABEL_251;
      }
    }
    *((_DWORD *)this + 53) = 0;
    *((_DWORD *)this + 54) = 0;
    if (v20) {
      unint64_t v117 = 4;
    }
    else {
      unint64_t v117 = (v14 + 1) * (v14 + 1);
    }
    HOA::HOA((uint64_t)v231, v117 | (*(unsigned __int16 *)(*((void *)this + 1) + 2) << 16), *((_DWORD *)this + 50));
    HOA::createSphericalGridDecoder((unsigned int *)v231);
    memset(v227, 0, sizeof(v227));
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v227, v236, v237, (v237 - (uint64_t)v236) >> 2);
    memset(&v221, 0, 24);
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v221, v238, v239, (v239 - (uint64_t)v238) >> 2);
    int v118 = *(_DWORD *)&v231[20];
    *((_DWORD *)this + 49) = *(_DWORD *)&v231[20];
    int v119 = *((_DWORD *)this + 15) + v118;
    uint64_t v120 = *((void *)this + 19);
    if (v120) {
      float v121 = (unsigned int *)(v120 + 64);
    }
    else {
      float v121 = (unsigned int *)((char *)this + 56);
    }
    uint64_t v122 = *v121;
    LODWORD(v218) = 0;
    std::vector<float>::assign((char **)this + 12, (v122 * v119), &v218);
    if (v122)
    {
      unsigned int v123 = 0;
      for (unint64_t i = 0; i != v122; ++i)
      {
        memcpy((void *)(*((void *)this + 12) + 4 * v123), (char *)__src + 4 * (*((_DWORD *)this + 15) * i), 4 * *((unsigned int *)this + 15));
        if (i < v117) {
          memcpy((void *)(*((void *)this + 12) + 4 * (v123 + *((_DWORD *)this + 15))), &v234[4 * (*((_DWORD *)this + 49) * i)], 4 * *((unsigned int *)this + 49));
        }
        v123 += v119;
      }
    }
    LODWORD(v27) = *((_DWORD *)this + 49);
    if (v27)
    {
      unint64_t v125 = 0;
      do
      {
        uint64_t v126 = *(void *)v227;
        float v127 = (char *)__p[1];
        if (__p[1] >= (void *)v226[0])
        {
          long long v129 = (char *)__p[0];
          int64_t v130 = ((char *)__p[1] - (char *)__p[0]) >> 2;
          unint64_t v131 = v130 + 1;
          if ((unint64_t)(v130 + 1) >> 62) {
            goto LABEL_355;
          }
          int64_t v132 = v226[0] - (unint64_t)__p[0];
          if ((uint64_t)(v226[0] - (unint64_t)__p[0]) >> 1 > v131) {
            unint64_t v131 = v132 >> 1;
          }
          if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v133 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v133 = v131;
          }
          if (v133)
          {
            float v134 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)v226, v133);
            long long v129 = (char *)__p[0];
            float v127 = (char *)__p[1];
          }
          else
          {
            float v134 = 0;
          }
          uint64_t v135 = &v134[4 * v130];
          *(_DWORD *)uint64_t v135 = *(_DWORD *)(v126 + 4 * v125);
          float v128 = v135 + 4;
          while (v127 != v129)
          {
            int v136 = *((_DWORD *)v127 - 1);
            v127 -= 4;
            *((_DWORD *)v135 - 1) = v136;
            v135 -= 4;
          }
          __p[0] = v135;
          __p[1] = v128;
          v226[0] = &v134[4 * v133];
          if (v129) {
            operator delete(v129);
          }
        }
        else
        {
          *(_DWORD *)__p[1] = *(_DWORD *)(*(void *)v227 + 4 * v125);
          float v128 = v127 + 4;
        }
        __p[1] = v128;
        uint64_t v137 = *(void *)&v221.mChannelLayoutTag;
        float v138 = (char *)v223[1];
        if (v223[1] >= (void *)v224[0])
        {
          float v140 = (char *)v223[0];
          int64_t v141 = ((char *)v223[1] - (char *)v223[0]) >> 2;
          unint64_t v142 = v141 + 1;
          if ((unint64_t)(v141 + 1) >> 62) {
LABEL_355:
          }
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          int64_t v143 = v224[0] - (unint64_t)v223[0];
          if ((uint64_t)(v224[0] - (unint64_t)v223[0]) >> 1 > v142) {
            unint64_t v142 = v143 >> 1;
          }
          if ((unint64_t)v143 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v144 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v144 = v142;
          }
          if (v144)
          {
            long long v145 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)v224, v144);
            float v140 = (char *)v223[0];
            float v138 = (char *)v223[1];
          }
          else
          {
            long long v145 = 0;
          }
          unint64_t v146 = &v145[4 * v141];
          *(_DWORD *)unint64_t v146 = *(_DWORD *)(v137 + 4 * v125);
          float v139 = v146 + 4;
          while (v138 != v140)
          {
            int v147 = *((_DWORD *)v138 - 1);
            v138 -= 4;
            *((_DWORD *)v146 - 1) = v147;
            v146 -= 4;
          }
          v223[0] = v146;
          v223[1] = v139;
          v224[0] = &v145[4 * v144];
          if (v140) {
            operator delete(v140);
          }
        }
        else
        {
          *(_DWORD *)v223[1] = *(_DWORD *)(*(void *)&v221.mChannelLayoutTag + 4 * v125);
          float v139 = v138 + 4;
        }
        v223[1] = v139;
        int v148 = v125 + *((_DWORD *)this + 15) + 0x10000;
        float v149 = (char *)v222;
        if ((unint64_t)v222 >= *((void *)&v222 + 1))
        {
          long long v151 = *(char **)&v221.mChannelDescriptions[0].mCoordinates[1];
          uint64_t v152 = (uint64_t)(v222 - *(void *)&v221.mChannelDescriptions[0].mCoordinates[1]) >> 2;
          unint64_t v153 = v152 + 1;
          if ((unint64_t)(v152 + 1) >> 62) {
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v154 = *((void *)&v222 + 1) - *(void *)&v221.mChannelDescriptions[0].mCoordinates[1];
          if ((uint64_t)(*((void *)&v222 + 1) - *(void *)&v221.mChannelDescriptions[0].mCoordinates[1]) >> 1 > v153) {
            unint64_t v153 = v154 >> 1;
          }
          if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v155 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v155 = v153;
          }
          if (v155)
          {
            unsigned int v156 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v222 + 8, v155);
            long long v151 = *(char **)&v221.mChannelDescriptions[0].mCoordinates[1];
            float v149 = (char *)v222;
          }
          else
          {
            unsigned int v156 = 0;
          }
          float v157 = &v156[4 * v152];
          *(_DWORD *)float v157 = v148;
          float v150 = v157 + 4;
          while (v149 != v151)
          {
            int v158 = *((_DWORD *)v149 - 1);
            v149 -= 4;
            *((_DWORD *)v157 - 1) = v158;
            v157 -= 4;
          }
          *(void *)&v221.mChannelDescriptions[0].mCoordinates[1] = v157;
          *(void *)&long long v222 = v150;
          *((void *)&v222 + 1) = &v156[4 * v155];
          if (v151) {
            operator delete(v151);
          }
        }
        else
        {
          *(_DWORD *)long long v222 = v148;
          float v150 = v149 + 4;
        }
        *(void *)&long long v222 = v150;
        ++v125;
        unint64_t v27 = *((unsigned int *)this + 49);
      }
      while (v125 < v27);
    }
    goto LABEL_246;
  }
  *((void *)this + 13) = *((void *)this + 12);
  *((void *)this + 16) = *((void *)this + 15);
  *((void *)this + 10) = *((void *)this + 9);
  if (getAUSMV2Log(void)::onceToken != -1) {
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
  }
  std::string::size_type v93 = getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    unsigned int v208 = (void *)((char *)this + 168);
    if (*((char *)this + 191) < 0) {
      unsigned int v208 = (void *)*v208;
    }
    *(_DWORD *)float v231 = 136315394;
    *(void *)&v231[4] = v208;
    *(_WORD *)&v231[12] = 2080;
    *(void *)&v231[14] = "createHOADecoders";
    _os_log_error_impl(&dword_1BB0CE000, v93, OS_LOG_TYPE_ERROR, "[%s|%s] Failed creating HOA decoders: format and input number of channels differ", v231, 0x16u);
  }
  uint64_t v94 = 4294956428;
LABEL_341:
  HOA::~HOA((HOA *)buf);
  return v94;
}

void sub_1BB4E0780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  if (__p) {
    operator delete(__p);
  }
  if (a37) {
    operator delete(a37);
  }
  HOA::~HOA((HOA *)&a47);
  if (a26) {
    operator delete(a26);
  }
  if (a29) {
    operator delete(a29);
  }
  if (a33) {
    operator delete(a33);
  }
  HOA::~HOA((HOA *)&STACK[0x2C0]);
  _Unwind_Resume(a1);
}

BOOL ausdk::ACL::operator==(int *a1, _DWORD *a2)
{
  int v2 = *a1;
  if (*a1 != *a2) {
    return 0;
  }
  if (v2)
  {
    if (v2 == 0x10000) {
      return a1[1] == a2[1];
    }
    return 1;
  }
  uint64_t v4 = a1[2];
  if (v4 != a2[2]) {
    return 0;
  }
  if (v4)
  {
    uint64_t v5 = a2 + 3;
    uint64_t v6 = a1 + 3;
    BOOL result = 1;
    while (*v6 == *v5)
    {
      if (*v6 == 100)
      {
        BOOL v7 = *(void *)v6 == *(void *)v5 && *((void *)v6 + 1) == *((void *)v5 + 1);
        if (!v7 || v6[4] != (unint64_t)v5[4]) {
          break;
        }
      }
      v5 += 5;
      v6 += 5;
      if (!--v4) {
        return result;
      }
    }
    return 0;
  }
  return 1;
}

void std::vector<float>::insert(void *a1, char *__src, unint64_t a3, char *a4)
{
  if (a3)
  {
    uint64_t v4 = a4;
    uint64_t v6 = __src;
    uint64_t v10 = a1[2];
    uint64_t v8 = (uint64_t)(a1 + 2);
    uint64_t v9 = v10;
    long long v11 = *(char **)(v8 - 8);
    if (a3 <= (v10 - (uint64_t)v11) >> 2)
    {
      uint64_t v18 = v11 - __src;
      if (a3 <= (v11 - __src) >> 2)
      {
        unint64_t v21 = *(char **)(v8 - 8);
        uint64_t v20 = a3;
      }
      else
      {
        uint64_t v19 = 0;
        uint64_t v20 = v18 >> 2;
        unint64_t v21 = &v11[4 * (a3 - (v18 >> 2))];
        do
        {
          *(_DWORD *)&v11[v19] = *(_DWORD *)a4;
          v19 += 4;
        }
        while (4 * a3 - 4 * v20 != v19);
        a1[1] = v21;
        if (v11 == __src) {
          return;
        }
      }
      int v22 = &__src[4 * a3];
      int v23 = &v21[-4 * a3];
      unint64_t v24 = v21;
      if (v23 < v11)
      {
        unint64_t v24 = v21;
        do
        {
          int v25 = *(_DWORD *)v23;
          v23 += 4;
          *(_DWORD *)unint64_t v24 = v25;
          v24 += 4;
        }
        while (v23 < v11);
      }
      a1[1] = v24;
      if (v21 != v22) {
        memmove(&v21[-4 * ((v21 - v22) >> 2)], __src, v21 - v22);
      }
      if (v6 <= v4)
      {
        if (a1[1] <= (unint64_t)v4) {
          unint64_t v26 = 0;
        }
        else {
          unint64_t v26 = a3;
        }
        v4 += 4 * v26;
      }
      do
      {
        *(_DWORD *)uint64_t v6 = *(_DWORD *)v4;
        v6 += 4;
        --v20;
      }
      while (v20);
    }
    else
    {
      uint64_t v12 = (char *)*a1;
      unint64_t v13 = a3 + ((uint64_t)&v11[-*a1] >> 2);
      if (v13 >> 62) {
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v14 = (__src - v12) >> 2;
      uint64_t v15 = v9 - (void)v12;
      if (v15 >> 1 > v13) {
        unint64_t v13 = v15 >> 1;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v13;
      }
      if (v16) {
        int v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v8, v16);
      }
      else {
        int v17 = 0;
      }
      unint64_t v27 = &v17[4 * v14];
      unint64_t v28 = &v27[4 * a3];
      uint64_t v29 = 4 * a3;
      uint64_t v30 = v27;
      do
      {
        *(_DWORD *)uint64_t v30 = *(_DWORD *)v4;
        v30 += 4;
        v29 -= 4;
      }
      while (v29);
      uint64_t v31 = (char *)*a1;
      if ((char *)*a1 != v6)
      {
        uint64_t v32 = v6;
        do
        {
          int v33 = *((_DWORD *)v32 - 1);
          v32 -= 4;
          *((_DWORD *)v27 - 1) = v33;
          v27 -= 4;
        }
        while (v32 != v31);
      }
      unint64_t v34 = &v17[4 * v16];
      int64_t v35 = (char *)a1[1];
      int64_t v36 = v35 - v6;
      if (v35 != v6) {
        memmove(v28, v6, v35 - v6);
      }
      uint64_t v37 = (char *)*a1;
      *a1 = v27;
      a1[1] = &v28[v36];
      a1[2] = v34;
      if (v37)
      {
        operator delete(v37);
      }
    }
  }
}

uint64_t AUSM::MatrixMix::process(int *a1, const void ***a2, unsigned int a3, uint64_t a4, vDSP_Length __N, uint64_t a6, unsigned int a7)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  if (a1[15] <= a3) {
    return 4294956418;
  }
  if (!*((unsigned char *)a1 + 64)) {
    return 4294956429;
  }
  unsigned int v10 = __N;
  unsigned int v12 = a3;
  vDSP_Length v14 = __N;
  vDSP_vclr(*(float **)a4, 1, __N);
  *(unsigned char *)(a4 + 24) = 1;
  uint64_t v15 = *((void *)a1 + 19);
  if (!*((unsigned char *)a1 + 65))
  {
    if (!v15 && !*((void *)a1 + 20))
    {
      if (v12 >= (unint64_t)(((char *)a2[1] - (char *)*a2) >> 5)) {
        return 4294956418;
      }
      if (!a6 && LOBYTE((*a2)[4 * v12 + 3])) {
        return 0;
      }
    }
    switch(*a1)
    {
      case 0:
      case 4:
        int v23 = *(float **)a4;
        unint64_t v24 = (*a2)[4 * v12];
        goto LABEL_22;
      case 5:
        if (v15)
        {
          unsigned int v38 = *(_DWORD *)(v15 + 64);
          unsigned int v39 = v12 - v38;
          if (v12 >= v38)
          {
            if (v39 < 4)
            {
              if (!a6) {
                goto LABEL_92;
              }
              if (a7 >= 4)
              {
                unsigned int v38 = 4;
                unsigned int v12 = v39;
                goto LABEL_81;
              }
            }
            return 4294956418;
          }
          if (!a6)
          {
            unsigned int v39 = v12;
LABEL_92:
            unint64_t v47 = (const void **)(*(void *)(v15 + 72) + 24 * v39);
            goto LABEL_99;
          }
        }
        else
        {
          if (!a6)
          {
            uint64_t v48 = *((void *)a1 + 20);
            if (v48) {
              unint64_t v47 = (const void **)(*(void *)(v48 + 72) + 24 * v12);
            }
            else {
              unint64_t v47 = &(*a2)[4 * v12];
            }
LABEL_99:
            unint64_t v24 = *v47;
            int v23 = *(float **)a4;
LABEL_22:
            memcpy(v23, v24, 4 * v14);
            goto LABEL_23;
          }
          unsigned int v38 = a1[15];
        }
        if (v38 <= a7)
        {
          if (!v38)
          {
LABEL_23:
            uint64_t result = 0;
            *(unsigned char *)(a4 + 24) = 0;
            return result;
          }
LABEL_81:
          uint64_t v40 = 0;
          uint64_t v41 = 0;
          unsigned int v42 = v12 * a7;
          uint64_t v43 = v38;
          do
          {
            float v44 = *(float *)(a6 + 4 * v42);
            float __Step = v44;
            uint64_t v45 = *((void *)a1 + 19);
            if (v45 || (uint64_t v45 = *((void *)a1 + 20)) != 0) {
              int64_t v46 = (const void **)(*(void *)(v45 + 72) + 24 * v41);
            }
            else {
              int64_t v46 = &(*a2)[v40];
            }
            if (fabsf(v44 + -1.0) <= 0.00000011921)
            {
              memcpy(*(void **)a4, *v46, 4 * v14);
            }
            else if (fabsf(v44) > 0.00000011921)
            {
              vDSP_vsma((const float *)*v46, 1, &__Step, *(const float **)a4, 1, *(float **)a4, 1, v14);
            }
            ++v41;
            v40 += 4;
            ++v42;
            --v43;
          }
          while (v43);
          goto LABEL_23;
        }
        return 4294956418;
      case 6:
        if (v12) {
          return 0;
        }
        int v23 = *(float **)a4;
        unint64_t v24 = **a2;
        goto LABEL_22;
      default:
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        uint64_t v32 = getAUSMV2Log(void)::gLog;
        if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG)) {
          return 4294956421;
        }
        int v33 = a1 + 42;
        if (*((char *)a1 + 191) < 0) {
          int v33 = (void *)*v33;
        }
        goto LABEL_97;
    }
  }
  if (!v15 && a1[14] > (unint64_t)(((char *)a2[1] - (char *)*a2) >> 5)) {
    return 4294956418;
  }
  int v17 = *a1;
  if (*a1 == 1 || v17 == 3)
  {
    if (v15) {
      int v25 = (unsigned int *)(v15 + 64);
    }
    else {
      int v25 = (unsigned int *)(a1 + 14);
    }
    uint64_t v26 = *v25;
    unsigned int v49 = a1[15] - a1[54];
    if (a1[53] && !a1[57] && v49 > v12 == (*((unsigned char *)a1 + 224) != 0)) {
      goto LABEL_32;
    }
    uint64_t v27 = *((void *)a1 + 20);
    if (v27)
    {
      *(unsigned char *)(a4 + 24) = 0;
      memcpy(*(void **)a4, *(const void **)(*(void *)(v27 + 72) + 24 * v12), 4 * v14);
      goto LABEL_32;
    }
    if (!v26)
    {
LABEL_32:
      unsigned int v28 = a1[57];
      if (v28)
      {
        if (v28 >= v10) {
          vDSP_Length v29 = v10;
        }
        else {
          vDSP_Length v29 = v28;
        }
        unsigned int v30 = a1[55];
        float v31 = 1.0 / (float)v30;
        float __Start = v31 * (float)(v30 - v28);
        float __Step = v31;
        if (v49 > v12 == (*((unsigned char *)a1 + 224) != 0))
        {
          float __Start = 1.0 - (float)(v31 * (float)(v30 - v28));
          float __Step = -v31;
          if (v28 < v10) {
            vDSP_vclr((float *)(*(void *)a4 + 4 * v29), 1, v10 - v29);
          }
        }
        vDSP_vrampmul(*(const float **)a4, 1, &__Start, &__Step, *(float **)a4, 1, v29);
      }
      else if (v49 > v12 == (*((unsigned char *)a1 + 224) != 0))
      {
        vDSP_vclr(*(float **)a4, 1, v14);
        uint64_t result = 0;
        *(unsigned char *)(a4 + 24) = 1;
        return result;
      }
      return 0;
    }
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    while (1)
    {
      uint64_t v36 = *((void *)a1 + 19);
      if (v36)
      {
        *(unsigned char *)(a4 + 24) = 0;
        uint64_t v37 = *(void *)(v36 + 72) + 24 * v35;
      }
      else
      {
        uint64_t v37 = (uint64_t)&(*a2)[v34];
        if (*(unsigned char *)(v37 + 24)) {
          goto LABEL_54;
        }
        *(unsigned char *)(a4 + 24) = 0;
      }
      vDSP_vsma(*(const float **)v37, 1, (const float *)(*((void *)a1 + 12) + 4 * (v12 + a1[15] * v35)), *(const float **)a4, 1, *(float **)a4, 1, v14);
LABEL_54:
      ++v35;
      v34 += 4;
      if (v26 == v35) {
        goto LABEL_32;
      }
    }
  }
  if (v17 == 2)
  {
    unint64_t v18 = a1[14];
    if (v18)
    {
      uint64_t v19 = 0;
      for (unint64_t i = 0; i < v18; ++i)
      {
        unint64_t v21 = *a2;
        int v22 = &(*a2)[v19];
        if (!*((unsigned char *)v22 + 24))
        {
          *(unsigned char *)(a4 + 24) = 0;
          if (!*((unsigned char *)v22 + 24))
          {
            vDSP_vadd((const float *)v21[v19], 1, *(const float **)a4, 1, *(float **)a4, 1, v14);
            unint64_t v18 = a1[14];
          }
        }
        uint64_t result = 0;
        v19 += 4;
      }
      return result;
    }
    return 0;
  }
  if (getAUSMV2Log(void)::onceToken != -1) {
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
  }
  uint64_t v32 = getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    int v33 = a1 + 42;
    if (*((char *)a1 + 191) < 0) {
      int v33 = (void *)*v33;
    }
LABEL_97:
    float __Step = 4.8152e-34;
    uint64_t v52 = v33;
    __int16 v53 = 2080;
    double v54 = "process";
    __int16 v55 = 2080;
    unint64_t v56 = "process";
    _os_log_debug_impl(&dword_1BB0CE000, v32, OS_LOG_TYPE_DEBUG, "[%s|%s] %s: Invalid MatrixMix Output Type", (uint8_t *)&__Step, 0x20u);
  }
  return 4294956421;
}

void sub_1BB4E1278(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t AUSM::MatrixMix::setHOAPowerSavingMode(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 224) != a2)
  {
    if (*(_DWORD *)(this + 228))
    {
      if (a2) {
        BOOL v2 = *(_DWORD *)(this + 212) != 0;
      }
      else {
        BOOL v2 = 0;
      }
      *(unsigned char *)(this + 225) = v2;
    }
    else
    {
      if (a2) {
        BOOL v3 = *(_DWORD *)(this + 212) != 0;
      }
      else {
        BOOL v3 = 0;
      }
      *(unsigned char *)(this + 225) = v3;
      *(unsigned char *)(this + 224) = v3;
      *(_DWORD *)(this + 228) = *(_DWORD *)(this + 220);
    }
  }
  return this;
}

BOOL AUNeuralNetVAD::ValidDFTBlockSize(AUNeuralNetVAD *this, char a2)
{
  return (a2 & 0xF) == 0;
}

uint64_t AUNeuralNetVAD::GetScopeExtended(AUNeuralNetVAD *this, int a2)
{
  if (a2 == 4) {
    return (uint64_t)this + 552;
  }
  else {
    return 0;
  }
}

uint64_t AUNeuralNetVAD::ChangeStreamFormat(AUNeuralNetVAD *this, uint64_t a2, uint64_t a3, const AudioStreamBasicDescription *a4, const AudioStreamBasicDescription *a5)
{
  int v6 = a3;
  int v7 = a2;
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  ausdk::AUBase::ChangeStreamFormat(this, a2, a3, a4, a5);
  uint64_t v9 = 0;
  if (v7 == 1 && !v6)
  {
    if (ausdk::AUScope::GetElement((AUNeuralNetVAD *)((char *)this + 80), 1u))
    {
      uint64_t Element = ausdk::AUScope::SafeGetElement((AUNeuralNetVAD *)((char *)this + 80), 1u);
      uint64_t v9 = (*(uint64_t (**)(uint64_t, const AudioStreamBasicDescription *))(*(void *)Element + 56))(Element, a5);
      if (AUNeuralNetVADLogScope(void)::once != -1) {
        dispatch_once(&AUNeuralNetVADLogScope(void)::once, &__block_literal_global_8966);
      }
      if (AUNeuralNetVADLogScope(void)::scope)
      {
        long long v11 = *(NSObject **)AUNeuralNetVADLogScope(void)::scope;
        if (!*(void *)AUNeuralNetVADLogScope(void)::scope) {
          return v9;
        }
      }
      else
      {
        long long v11 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        int v13 = 136315394;
        vDSP_Length v14 = "AUNeuralNetVAD.cpp";
        __int16 v15 = 1024;
        int v16 = 1127;
        _os_log_impl(&dword_1BB0CE000, v11, OS_LOG_TYPE_INFO, "%25s:%-5d Setting the stream format for the second input bus to match the format of the first bus.\n", (uint8_t *)&v13, 0x12u);
      }
    }
    else
    {
      return 0;
    }
  }
  return v9;
}

void ___ZL22AUNeuralNetVADLogScopev_block_invoke()
{
}

uint64_t AUNeuralNetVAD::ValidFormat(AUNeuralNetVAD *this, int a2, unsigned int a3, const AudioStreamBasicDescription *a4)
{
  if (a4->mBitsPerChannel == 64 && a4->mFormatID == 1718773105) {
    uint64_t result = (LOBYTE(a4->mFormatFlags) >> 5) & 1;
  }
  else {
    uint64_t result = 0;
  }
  if (a2 == 2 || a2 == 1)
  {
    if (a4->mChannelsPerFrame < 2) {
      return result;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t AUNeuralNetVAD::SupportedNumChannels(AUNeuralNetVAD *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUNeuralNetVAD::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 1;
}

BOOL AUNeuralNetVAD::StreamFormatWritable(AUNeuralNetVAD *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUNeuralNetVAD::SupportsTail(AUNeuralNetVAD *this)
{
  return 1;
}

double AUNeuralNetVAD::GetTailTime(AUNeuralNetVAD *this)
{
  return 0.05;
}

double AUNeuralNetVAD::GetLatency(AUNeuralNetVAD *this)
{
  return 0.0;
}

uint64_t AUNeuralNetVAD::GetParameterValueStrings(AUNeuralNetVAD *this, int a2, int a3, const __CFArray **a4)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (!a4) {
    return 0;
  }
  if (a2) {
    return 4294956430;
  }
  if (a3 == 18)
  {
    int v6 = &xmmword_1E623E268;
    goto LABEL_10;
  }
  if (a3 == 15)
  {
    long long v9 = xmmword_1E623E240;
    long long v10 = *(_OWORD *)&off_1E623E250;
    long long v11 = @"Uniform";
    CFIndex v7 = 5;
    goto LABEL_12;
  }
  if (a3 != 11) {
    return 0;
  }
  int v6 = &xmmword_1E623E228;
LABEL_10:
  long long v9 = *v6;
  *(void *)&long long v10 = *((void *)v6 + 2);
  CFIndex v7 = 3;
LABEL_12:
  CFArrayRef v8 = CFArrayCreate(0, (const void **)&v9, v7, 0);
  uint64_t result = 0;
  *a4 = v8;
  return result;
}

uint64_t AUNeuralNetVAD::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t v4 = ausdk::AUBase::RestoreState(this, a2);
  if (!v4)
  {
    int valuePtr = 0;
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a2, @"auversion");
    if (Value && CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr) && valuePtr == 67073) {
      AUNeuralNetVAD::UpdateState((AUNeuralNetVAD *)this);
    }
    this[66] = (OpaqueAudioComponentInstance *)((char *)this[66] + 1);
  }
  return v4;
}

void AUNeuralNetVAD::UpdateState(AUNeuralNetVAD *this)
{
  BOOL v2 = (AUNeuralNetVAD *)((char *)this + 32);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNeuralNetVAD *)((char *)this + 32), 0);
  *((float *)this + 164) = ausdk::AUElement::GetParameter(Element, 3u);
  uint64_t v4 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 165) = ausdk::AUElement::GetParameter(v4, 4u);
  uint64_t v5 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 166) = ausdk::AUElement::GetParameter(v5, 5u);
  int v6 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 167) = ausdk::AUElement::GetParameter(v6, 6u);
  CFIndex v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float Parameter = ausdk::AUElement::GetParameter(v7, 7u);
  *((float *)this + 168) = Parameter;
  if (*((unsigned char *)this + 600))
  {
    uint64_t v9 = *((void *)this + 81);
    if (v9) {
      *(float *)(v9 + 8) = Parameter;
    }
  }
  long long v10 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  unsigned int v11 = ausdk::AUElement::GetParameter(v10, 8u);
  *((_DWORD *)this + 169) = v11;
  if (*((unsigned char *)this + 600))
  {
    uint64_t v12 = *((void *)this + 81);
    if (v12) {
      *(_DWORD *)(v12 + 20) = v11;
    }
  }
  int v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v14 = ausdk::AUElement::GetParameter(v13, 9u);
  *((float *)this + 170) = v14;
  if (*((unsigned char *)this + 600))
  {
    uint64_t v15 = *((void *)this + 81);
    if (v15) {
      *(float *)(v15 + 12) = v14;
    }
  }
  int v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v17 = ausdk::AUElement::GetParameter(v16, 0xAu);
  *((float *)this + 171) = v17;
  if (*((unsigned char *)this + 600))
  {
    uint64_t v18 = *((void *)this + 81);
    if (v18) {
      *(float *)(v18 + 16) = v17;
    }
  }
  uint64_t v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((_DWORD *)this + 172) = (int)ausdk::AUElement::GetParameter(v19, 0xBu);
  uint64_t v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((unsigned char *)this + 692) = ausdk::AUElement::GetParameter(v20, 0xCu) != 0.0;
  unint64_t v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((_DWORD *)this + 176) = (int)ausdk::AUElement::GetParameter(v21, 0xFu);
  int v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 174) = ausdk::AUElement::GetParameter(v22, 0xDu);
  int v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 175) = ausdk::AUElement::GetParameter(v23, 0xEu);
  unint64_t v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 177) = ausdk::AUElement::GetParameter(v24, 0x10u);
  int v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 178) = ausdk::AUElement::GetParameter(v25, 0x11u);
  uint64_t v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((_DWORD *)this + 179) = (int)ausdk::AUElement::GetParameter(v26, 0x12u);
  uint64_t v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 180) = ausdk::AUElement::GetParameter(v27, 0x13u);
  unsigned int v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 181) = ausdk::AUElement::GetParameter(v28, 0x14u);
  vDSP_Length v29 = (DirectionalVAD *)*((void *)this + 95);
  if (v29)
  {
    DirectionalVAD::setTargetDirection(v29, *((float *)this + 174), *((float *)this + 175));
    DirectionalVAD::setShapeParameter(*((DirectionalVAD **)this + 95), *((float *)this + 177));
    DirectionalVAD::setConditionalTargetPrior(*((DirectionalVAD **)this + 95), *((float *)this + 178));
    uint64_t v30 = *((void *)this + 95);
    *(_DWORD *)(v30 + 64) = *((_DWORD *)this + 179);
    DirectionalVAD::setCurrentDirection((float **)v30, *((float *)this + 180), *((float *)this + 181));
  }
  float v31 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((unsigned char *)this + 732) = ausdk::AUElement::GetParameter(v31, 0x16u) != 0.0;
}

UInt8 *AUNeuralNetVAD::SaveExtendedScopes(AUNeuralNetVAD *this, __CFData *a2)
{
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, 4u);

  return ausdk::AUScope::SaveState(Scope, a2);
}

uint64_t AUNeuralNetVAD::SaveState(AUNeuralNetVAD *this, ausdk **a2)
{
  ausdk::AUBase::SaveState(this, a2);
  if (a2)
  {
    BOOL v3 = *a2;
    if (v3)
    {
      int valuePtr = 67073;
      CFNumberRef v4 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      CFDictionarySetValue(v3, @"auversion", v4);
      CFRelease(v4);
    }
  }
  return 0;
}

uint64_t AUNeuralNetVAD::GetParameterInfo(AUNeuralNetVAD *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  buffer->AudioUnitParameterOptions flags = 0;
  buffer->unitName = 0;
  if (a2 == 4) {
    return 4294956418;
  }
  if (a2) {
    return 4294956430;
  }
  switch(a3)
  {
    case 0:
      buffer->cfNameString = @"NNVAD: Number of DNN layers";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"NNVAD: Number of DNN layers", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      uint64_t v6 = 0x4100000000000000;
      goto LABEL_15;
    case 1:
      buffer->cfNameString = @"NNVAD: Number of frames for context window";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"NNVAD: Number of frames for context window", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFNumberRef Value = 0x4100000000000000;
      AudioUnitParameterValue v7 = 1.0;
      goto LABEL_9;
    case 2:
      buffer->cfNameString = @"NNVAD: Forgetting factor (time constant)";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"NNVAD: Forgetting factor (time constant)", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      *(void *)&buffer->minCFNumberRef Value = 0x4040000000000000;
      AudioUnitParameterValue v7 = 0.3;
LABEL_9:
      AudioUnitParameterOptions v8 = buffer->flags | 0x40008000;
      goto LABEL_38;
    case 3:
      CFStringRef v9 = @"NNVAD: Binary VAD";
      goto LABEL_14;
    case 4:
      CFStringRef v9 = @"NNVAD: EndPoint VAD";
      goto LABEL_14;
    case 5:
      CFStringRef v9 = @"NNVAD: Utt VAD";
      goto LABEL_14;
    case 6:
      CFStringRef v9 = @"NNVAD: Soft VAD";
LABEL_14:
      buffer->cfNameString = v9;
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(v9, buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      uint64_t v6 = 0x3F80000000000000;
LABEL_15:
      *(void *)&buffer->minCFNumberRef Value = v6;
      AudioUnitParameterOptions flags = buffer->flags;
      int v11 = 1073774592;
      goto LABEL_40;
    case 7:
      buffer->cfNameString = @"NNVAD: threshold";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"NNVAD: threshold", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      goto LABEL_29;
    case 8:
      buffer->cfNameString = @"NNVAD: wait time";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"NNVAD: wait time", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFNumberRef Value = 0x42C8000000000000;
      AudioUnitParameterValue v7 = 10.0;
      goto LABEL_37;
    case 9:
      CFStringRef v12 = @"NNVAD: transition prob. a01";
      goto LABEL_20;
    case 10:
      CFStringRef v12 = @"NNVAD: transition prob. a10";
LABEL_20:
      buffer->cfNameString = v12;
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(v12, buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFNumberRef Value = 0x3F80000000000000;
      AudioUnitParameterValue v7 = 0.1;
      goto LABEL_37;
    case 11:
      buffer->cfNameString = @"NNVAD: Output mask mode";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"NNVAD: Output mask mode", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      uint64_t v13 = 0x4000000000000000;
      goto LABEL_35;
    case 12:
      buffer->cfNameString = @"NNVAD: Use directional mode";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"NNVAD: Use directional mode", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Boolean;
      uint64_t v14 = 0x3F80000000000000;
      goto LABEL_26;
    case 13:
      CFStringRef v15 = @"NNVAD: Target azimuth, when using the directional mode";
      goto LABEL_32;
    case 14:
      CFStringRef v16 = @"NNVAD: Target elevation, when using the directional mode";
      goto LABEL_34;
    case 15:
      buffer->cfNameString = @"NNVAD: Model type, when using the directional mode";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"NNVAD: Model type, when using the directional mode", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      uint64_t v14 = 0x4080000000000000;
LABEL_26:
      *(void *)&buffer->minCFNumberRef Value = v14;
      AudioUnitParameterOptions flags = buffer->flags;
      int v11 = -1056964608;
      goto LABEL_40;
    case 16:
      buffer->cfNameString = @"NNVAD: Model shape parameter, when using the directional mode";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"NNVAD: Model shape parameter, when using the directional mode", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Degrees;
      *(void *)&buffer->minCFNumberRef Value = 0x4120000000000000;
      AudioUnitParameterValue v7 = 1.0;
      goto LABEL_37;
    case 17:
      buffer->cfNameString = @"NNVAD: Conditional target prior, when using the directional mode";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"NNVAD: Conditional target prior, when using the directional mode", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Indexed;
LABEL_29:
      *(void *)&buffer->minCFNumberRef Value = 0x3F80000000000000;
      AudioUnitParameterValue v7 = 0.5;
      goto LABEL_37;
    case 18:
      buffer->cfNameString = @"NNVAD: Combined probability mode, when using the directional mode";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"NNVAD: Combined probability mode, when using the directional mode", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      *(void *)&buffer->minCFNumberRef Value = 0x4000000000000000;
      AudioUnitParameterValue v7 = 2.0;
      goto LABEL_37;
    case 19:
      CFStringRef v15 = @"NNVAD: Current azimuth (input), when using the directional mode";
LABEL_32:
      buffer->cfNameString = v15;
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(v15, buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Degrees;
      uint64_t v13 = 0x43340000C3340000;
      goto LABEL_35;
    case 20:
      CFStringRef v16 = @"NNVAD: Current elevation (input), when using the directional mode";
LABEL_34:
      buffer->cfNameString = v16;
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(v16, buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Degrees;
      uint64_t v13 = 0x42B40000C2B40000;
LABEL_35:
      *(void *)&buffer->minCFNumberRef Value = v13;
      AudioUnitParameterOptions v17 = buffer->flags | 0xC0000000;
      goto LABEL_41;
    case 21:
      buffer->cfNameString = @"NNVAD: Spatial SPP upper cutoff in Hz, when using the directional mode";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"NNVAD: Spatial SPP upper cutoff in Hz, when using the directional mode", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Hertz;
      *(void *)&buffer->minCFNumberRef Value = 0x467A000000000000;
      AudioUnitParameterValue v7 = 3125.0;
LABEL_37:
      AudioUnitParameterOptions v8 = buffer->flags | 0xC0000000;
LABEL_38:
      buffer->defaultCFNumberRef Value = v7;
      buffer->AudioUnitParameterOptions flags = v8;
      return result;
    case 22:
      buffer->cfNameString = @"NNVAD: Send VAD output mask, selected by output mask mode, through audio output.";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"NNVAD: Send VAD output mask, selected by output mask mode, through audio output.", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Boolean;
      *(void *)&buffer->minCFNumberRef Value = 0x3F80000000000000;
      AudioUnitParameterOptions flags = buffer->flags;
      int v11 = 1090519040;
LABEL_40:
      AudioUnitParameterOptions v17 = flags | v11;
LABEL_41:
      buffer->defaultCFNumberRef Value = 0.0;
      buffer->AudioUnitParameterOptions flags = v17;
      break;
    default:
      return 4294956418;
  }
  return result;
}

uint64_t AUNeuralNetVAD::GetParameterList(AUNeuralNetVAD *this, int a2, unsigned int *a3, unsigned int *a4)
{
  if (a2) {
    return 4294956430;
  }
  if (a3)
  {
    *(_OWORD *)a3 = xmmword_1BB8727D0;
    *((_OWORD *)a3 + 1) = xmmword_1BB879D60;
    *((_OWORD *)a3 + 2) = xmmword_1BB879E40;
    *((_OWORD *)a3 + 3) = xmmword_1BB879E50;
    *((_OWORD *)a3 + 4) = xmmword_1BB87B4C0;
    *((void *)a3 + 10) = 0x1600000015;
  }
  uint64_t result = 0;
  *a4 = 22;
  return result;
}

uint64_t AUNeuralNetVAD::Render(AUNeuralNetVAD *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  v16[1] = *MEMORY[0x1E4F143B8];
  AudioUnitParameterOptions v8 = (AUNeuralNetVAD *)((char *)this + 80);
  uint64_t Element = ausdk::AUScope::GetElement((AUNeuralNetVAD *)((char *)this + 80), 0);
  if (Element && *(_DWORD *)(Element + 172))
  {
    long long v10 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 0);
    uint64_t result = ausdk::AUInputElement::PullInput(v10, a2, a3, 0, a4);
    if (!result)
    {
      CFStringRef v12 = (ausdk::AUIOElement *)ausdk::AUScope::SafeGetElement((AUNeuralNetVAD *)((char *)this + 128), 0);
      v16[0] = ausdk::AUIOElement::PrepareBuffer(v12, a4);
      uint64_t v13 = ausdk::AUScope::SafeGetElement(v8, 0);
      uint64_t BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v13 + 144));
      return (*(uint64_t (**)(AUNeuralNetVAD *, unsigned int *, uint64_t, uint64_t, uint64_t *, uint64_t, void *))(*(void *)this + 184))(this, a2, a4, 1, &BufferList, 1, v16);
    }
  }
  else
  {
    uint64_t v14 = (ausdk::AUIOElement *)ausdk::AUScope::SafeGetElement((AUNeuralNetVAD *)((char *)this + 128), 0);
    ausdk::AUIOElement::PrepareBuffer(v14, a4);
    return 0;
  }
  return result;
}

uint64_t AUNeuralNetVAD::ProcessMultipleBufferLists(AUNeuralNetVAD *this, unsigned int *a2, AudioDSP::Utility *a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  int v9 = (int)a3;
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = *((void *)this + 66);
  if (*((void *)this + 67) != v11)
  {
    AUNeuralNetVAD::UpdateState(this);
    *((void *)this + 67) = v11;
  }
  if (*((_DWORD *)this + 84) != v9) {
    return 4294956422;
  }
  CFStringRef v12 = (int *)*a5;
  if (!*a5)
  {
    if (AUNeuralNetVADLogScope(void)::once != -1) {
      dispatch_once(&AUNeuralNetVADLogScope(void)::once, &__block_literal_global_8966);
    }
    if (AUNeuralNetVADLogScope(void)::scope)
    {
      AudioUnitParameterOptions v17 = *(NSObject **)AUNeuralNetVADLogScope(void)::scope;
      if (!*(void *)AUNeuralNetVADLogScope(void)::scope) {
        return 4294956420;
      }
    }
    else
    {
      AudioUnitParameterOptions v17 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)&v90[10] = 136315394;
      *(void *)&v90[14] = "AUNeuralNetVAD.cpp";
      *(_WORD *)&v90[22] = 1024;
      *(_DWORD *)&v90[24] = 1249;
      _os_log_impl(&dword_1BB0CE000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d InputSignal cannot be NULL. It is a required input\n", &v90[10], 0x12u);
    }
    return 4294956420;
  }
  int v13 = *v12;
  if (*v12 != *((_DWORD *)this + 156) || *a7 && (*a7)->mNumberBuffers != v13) {
    return 4294956428;
  }
  *(_WORD *)float v90 = 0;
  uint64_t v14 = (AudioDSP::Utility *)(2 * *((_DWORD *)this + 151));
  *(void *)&v90[10] = *((void *)this + 76);
  *(_OWORD *)&v90[18] = xmmword_1BB8727B0;
  *(_DWORD *)&v90[34] = 4;
  *(_DWORD *)&v90[38] = v13;
  uint64_t v91 = 32;
  AudioDSP::Utility::DetectNonFinites(v14, v12, (const AudioBufferList *)&v90[10], (const AudioStreamBasicDescription *)&v90[1], (BOOL *)a5);
  if (!*((unsigned char *)this + 544) && (!v90[1] || !*((unsigned char *)this + 601)))
  {
    uint64_t v18 = *((void *)this + 81);
    uint64_t v19 = (int *)*a5;
    float v20 = *((double *)this + 77);
    uint64_t mNumberBuffers = (*a5)->mNumberBuffers;
    *(float *)&v90[6] = (float)((float)(*(float *)(v18 + 60) * v20) * (float)(*(float *)(v18 + 60) * v20))
                      / (float)mNumberBuffers;
    vDSP_vclr(*(float **)(v18 + 80), 1, *(unsigned int *)(v18 + 64));
    if (mNumberBuffers)
    {
      int v22 = (float **)(v19 + 4);
      do
      {
        uint64_t v23 = *(unsigned int *)(v18 + 28);
        unint64_t v24 = &(*v22)[v23];
        float v25 = **v22;
        *(void *)AudioBufferList __A = *v22 + 1;
        uint64_t v26 = *(void *)(v18 + 80);
        *(float *)uint64_t v26 = *(float *)v26 + (float)(v25 * v25);
        float v27 = *v24;
        *(void *)&__A[8] = v24 + 1;
        *(float *)(v26 + 4 * v23) = *(float *)(v26 + 4 * v23) + (float)(v27 * v27);
        vDSP_zvmgsa((const DSPSplitComplex *)__A, 1, (const float *)(v26 + 4), 1, (float *)(v26 + 4), 1, (v23 - 1));
        v22 += 2;
        --mNumberBuffers;
      }
      while (mNumberBuffers);
    }
    vDSP_vsmul(*(const float **)(v18 + 80), 1, (const float *)&v90[6], *(float **)(v18 + 80), 1, *(unsigned int *)(v18 + 64));
    if (*(_DWORD *)(v18 + 40) == 1)
    {
      if (*(float *)(v18 + 48) > 0.0) {
        vDSP_vsmsma(*(const float **)(v18 + 104), 1, (const float *)(v18 + 48), *(const float **)(v18 + 80), 1, (const float *)(v18 + 52), *(float **)(v18 + 104), 1, *(unsigned int *)(v18 + 64));
      }
      vDSP_vclr(*(float **)(v18 + 192), 1, *(unsigned int *)(v18 + 184));
      sparse_matrix_vector_product_dense_float(CblasNoTrans, 1.0, *(sparse_matrix_float *)(v18 + 72), *(const float **)(v18 + 80), 1, *(float **)(v18 + 192), 1);
      if (*(float *)(v18 + 48) > 0.0) {
        sparse_matrix_vector_product_dense_float(CblasNoTrans, 1.0, *(sparse_matrix_float *)(v18 + 72), *(const float **)(v18 + 104), 1, (float *)(*(void *)(v18 + 192) + 4 * *(unsigned int *)(v18 + 68)), 1);
      }
      vDSP_vthr(*(const float **)(v18 + 192), 1, (const float *)(v18 + 56), *(float **)(v18 + 192), 1, *(unsigned int *)(v18 + 184));
      *(_DWORD *)AudioBufferList __A = *(_DWORD *)(v18 + 184);
      vvlogf(*(float **)(v18 + 192), *(const float **)(v18 + 192), (const int *)__A);
    }
    else
    {
      unsigned int v28 = (const float **)(v18 + 128);
      vDSP_vclr(*(float **)(v18 + 128), 1, *(unsigned int *)(v18 + 68));
      sparse_matrix_vector_product_dense_float(CblasNoTrans, 1.0, *(sparse_matrix_float *)(v18 + 72), *(const float **)(v18 + 80), 1, *(float **)(v18 + 128), 1);
      vDSP_vthr(*v28, 1, (const float *)(v18 + 56), (float *)*v28, 1, *(unsigned int *)(v18 + 68));
      *(_DWORD *)AudioBufferList __A = *(_DWORD *)(v18 + 68);
      vvlogf((float *)*v28, *v28, (const int *)__A);
      int v30 = *(_DWORD *)(v18 + 36);
      int v29 = *(_DWORD *)(v18 + 40);
      int v31 = v30 + 1;
      uint64_t v32 = *(unsigned int *)(v18 + 68);
      int v33 = (v30 + 1) * v32;
      int v34 = v29 - 1;
      unsigned int v35 = (v29 - 1) * v33;
      if (v35)
      {
        uint64_t v36 = *(_DWORD **)(v18 + 192);
        uint64_t v37 = v36;
        uint64_t v38 = (v34 * v33);
        do
        {
          *v37++ = v36[v33++];
          --v38;
        }
        while (v38);
      }
      if (v32)
      {
        unsigned int v39 = *(float **)(v18 + 128);
        uint64_t v40 = *(void *)(v18 + 192);
        uint64_t v41 = v39;
        uint64_t v42 = v32;
        do
        {
          int v43 = *(_DWORD *)v41++;
          *(_DWORD *)(v40 + 4 * v35++) = v43;
          --v42;
        }
        while (v42);
        if (v30 == 1)
        {
          unsigned int v44 = v32 + v32 * v34 * v31;
          unsigned int v45 = v32 * (v29 - 2) * v31;
          do
          {
            float v46 = *v39++;
            *(float *)(v40 + 4 * v44++) = v46 - *(float *)(v40 + 4 * v45++);
            --v32;
          }
          while (v32);
        }
      }
    }
    unint64_t v47 = (const float **)(*(uint64_t (**)(void, uint64_t))(***(void ***)(v18 + 176) + 72))(**(void **)(v18 + 176), v18 + 192);
    *(_DWORD *)AudioBufferList __A = 0;
    *(_DWORD *)&v90[2] = 1065353216;
    vDSP_vclip(*v47, 1, (const float *)__A, (const float *)&v90[2], (float *)*v47, 1, 1uLL);
    float v49 = 1.0;
    int v50 = (float *)*v47;
    float v51 = (float)((float)(*(float *)(v18 + 12) + (float)((float)(1.0 - *(float *)(v18 + 12)) * *(float *)(v18 + 156)))
                / (float)((float)(1.0 - *(float *)(v18 + 16)) + (float)(*(float *)(v18 + 16) * *(float *)(v18 + 156))))
        * **v47;
    *(float *)(v18 + 156) = v51;
    float *v50 = v51;
    *(_DWORD *)(v18 + 172) = *(_DWORD *)(v18 + 156);
    uint64_t v52 = (int *)*a5;
    __int16 v53 = (unsigned int *)*a7;
    uint64_t v54 = *((void *)this + 81);
    float v55 = *(float *)(v54 + 172);
    *((float *)this + 160) = v55;
    if (!*((unsigned char *)this + 692))
    {
LABEL_68:
      uint64_t v64 = 268;
      if (*(float *)(v54 + 8) > v55) {
        uint64_t v64 = 264;
      }
      float v65 = *(float *)(v54 + v64);
      *(float *)(v54 + 152) = v65;
      if (v65 <= 0.0)
      {
        float v68 = *(float *)(v54 + 160);
        if (*(unsigned char *)(v54 + 24))
        {
          float v68 = v68 + 1.0;
          *(float *)(v54 + 160) = v68;
        }
        float v49 = 0.0;
        if (v68 <= (float)*(unsigned int *)(v54 + 20))
        {
LABEL_77:
          *(float *)(v54 + 164) = v49;
          uint64_t v69 = *((void *)this + 81);
          int v70 = *(_DWORD *)(v69 + 152);
          *((_DWORD *)this + 157) = v70;
          *((void *)this + 79) = *(void *)(v69 + 164);
          *((_DWORD *)this + 164) = v70;
          uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNeuralNetVAD *)((char *)this + 32), 0);
          ausdk::AUElement::SetParameter(Element, 3u, *((float *)this + 164), 0);
          *((_DWORD *)this + 165) = *((_DWORD *)this + 158);
          BOOL v72 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNeuralNetVAD *)((char *)this + 32), 0);
          ausdk::AUElement::SetParameter(v72, 4u, *((float *)this + 165), 0);
          *((_DWORD *)this + 166) = *((_DWORD *)this + 159);
          AudioStreamBasicDescription v73 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNeuralNetVAD *)((char *)this + 32), 0);
          ausdk::AUElement::SetParameter(v73, 5u, *((float *)this + 166), 0);
          *((_DWORD *)this + 167) = *((_DWORD *)this + 160);
          float32x4_t v74 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNeuralNetVAD *)((char *)this + 32), 0);
          ausdk::AUElement::SetParameter(v74, 6u, *((float *)this + 167), 0);
          float32x4_t v75 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNeuralNetVAD *)((char *)this + 32), 0);
          ausdk::AUElement::SetParameter(v75, 7u, *((float *)this + 168), 0);
          uint64_t v76 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNeuralNetVAD *)((char *)this + 32), 0);
          ausdk::AUElement::SetParameter(v76, 8u, (float)*((unsigned int *)this + 169), 0);
          unint64_t v77 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNeuralNetVAD *)((char *)this + 32), 0);
          ausdk::AUElement::SetParameter(v77, 9u, *((float *)this + 170), 0);
          uint64_t v78 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNeuralNetVAD *)((char *)this + 32), 0);
          ausdk::AUElement::SetParameter(v78, 0xAu, *((float *)this + 171), 0);
          float v80 = (float *)((char *)this + 628);
          *(_DWORD *)AudioBufferList __A = 0;
          switch(*((_DWORD *)this + 172))
          {
            case 0:
              float v81 = *v80;
              goto LABEL_82;
            case 1:
              float v81 = *((float *)this + 159);
              goto LABEL_82;
            case 2:
              float v81 = *((float *)this + 160);
LABEL_82:
              *(float *)AudioBufferList __A = v81;
              break;
            case 3:
              *(_DWORD *)AudioBufferList __A = 1065353216;
              float v81 = 1.0;
              break;
            default:
              float v81 = 0.0;
              break;
          }
          int v82 = *v53;
          if (*((unsigned char *)this + 732))
          {
            if (v82)
            {
              unint64_t v83 = 0;
              uint64_t v84 = 4;
              do
              {
                *(_DWORD *)&v90[6] = 0;
                vDSP_vfill((const float *)&v90[6], *(float **)&v53[v84], 1, (2 * *((_DWORD *)this + 151)));
                **(float **)&v53[v84] = v81;
                ++v83;
                v84 += 4;
              }
              while (v83 < *v53);
            }
          }
          else if (v82)
          {
            unint64_t v85 = 0;
            uint64_t v86 = 4;
            do
            {
              vDSP_vsmul(*(const float **)&v52[v86], 1, (const float *)__A, *(float **)&v53[v86], 1, (2 * *((_DWORD *)this + 151)));
              ++v85;
              v86 += 4;
            }
            while (v85 < *v53);
          }
          AudioDSP::Utility::DetectNonFinites(v14, *a7, (const AudioBufferList *)&v90[10], (const AudioStreamBasicDescription *)v90, v79);
          if (!v90[0] || !*((unsigned char *)this + 601)) {
            return 0;
          }
          if (AUNeuralNetVADLogScope(void)::once != -1) {
            dispatch_once(&AUNeuralNetVADLogScope(void)::once, &__block_literal_global_8966);
          }
          if (AUNeuralNetVADLogScope(void)::scope)
          {
            unsigned int v87 = *(NSObject **)AUNeuralNetVADLogScope(void)::scope;
            if (!*(void *)AUNeuralNetVADLogScope(void)::scope)
            {
LABEL_102:
              (*(void (**)(AUNeuralNetVAD *))(*(void *)this + 64))(this);
              *(void *)float v80 = 0;
              *(void *)((char *)this + 636) = 0;
              CopyBufferList(&(*a5)->mNumberBuffers, *a7);
              return 0;
            }
          }
          else
          {
            unsigned int v87 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v87, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioBufferList __A = 136315650;
            *(void *)&float __A[4] = "AUNeuralNetVAD.cpp";
            *(_WORD *)&__A[12] = 1024;
            *(_DWORD *)&__A[14] = 1301;
            __int16 v93 = 1024;
            LODWORD(v94) = v90[0];
            _os_log_impl(&dword_1BB0CE000, v87, OS_LOG_TYPE_ERROR, "%25s:%-5d AUNeuralNetVAD: (OutputSignals) is NOT finite: (%u)\n", __A, 0x18u);
          }
          goto LABEL_102;
        }
        char v67 = 0;
        float v66 = 1.0;
      }
      else
      {
        float v66 = 0.0;
        char v67 = 1;
      }
      *(_DWORD *)(v54 + 160) = 0;
      *(float *)(v54 + 168) = v49;
      float v49 = v66;
      *(unsigned char *)(v54 + 24) = v67;
      goto LABEL_77;
    }
    if (v55 < 0.0 || v55 > 1.0)
    {
      if (AUNeuralNetVADLogScope(void)::once != -1) {
        dispatch_once(&AUNeuralNetVADLogScope(void)::once, &__block_literal_global_18203);
      }
      if (AUNeuralNetVADLogScope(void)::scope)
      {
        unint64_t v58 = *(NSObject **)AUNeuralNetVADLogScope(void)::scope;
        if (!*(void *)AUNeuralNetVADLogScope(void)::scope) {
          goto LABEL_67;
        }
      }
      else
      {
        unint64_t v58 = MEMORY[0x1E4F14500];
      }
      if (!os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
      {
LABEL_67:
        float v55 = *(float *)(*((void *)this + 95) + 132);
        *((float *)this + 160) = v55;
        uint64_t v54 = *((void *)this + 81);
        goto LABEL_68;
      }
      *(_DWORD *)AudioBufferList __A = 136315650;
      *(void *)&float __A[4] = "DirectionalVAD.cpp";
      *(_WORD *)&__A[12] = 1024;
      *(_DWORD *)&__A[14] = 148;
      __int16 v93 = 2048;
      double v94 = v55;
      uint64_t v59 = "%25s:%-5d nnSoftVAD has value (%f). Valid range is [0, 1]. Skipping update.\n";
      unint64_t v60 = v58;
      os_log_type_t v61 = OS_LOG_TYPE_DEFAULT;
      uint32_t v62 = 28;
    }
    else
    {
      uint64_t v56 = *((void *)this + 95);
      switch(*(_DWORD *)(v56 + 64))
      {
        case 0:
          (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v56 + 32) + 48))(*(void *)(v56 + 32), v56 + 72, v56 + 96);
          (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v56 + 40) + 48))(*(void *)(v56 + 40), v56 + 72, v56 + 96);
          (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v56 + 48) + 48))(*(void *)(v56 + 48), v56 + 72, v56 + 96, v56 + 184);
          float v57 = **(float **)(v56 + 136)
              / (float)((float)(**(float **)(v56 + 136) + **(float **)(v56 + 160)) + **(float **)(v56 + 184));
          goto LABEL_65;
        case 1:
          (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v56 + 32) + 48))(*(void *)(v56 + 32), v56 + 72, v56 + 96);
          (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v56 + 40) + 48))(*(void *)(v56 + 40), v56 + 72, v56 + 96);
          (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v56 + 48) + 48))(*(void *)(v56 + 48), v56 + 72, v56 + 96, v56 + 184);
          float v63 = (float)((float)(*(float *)(v56 + 60) * v55) * **(float **)(v56 + 136))
              / (float)((float)((float)((float)((float)(1.0 - *(float *)(v56 + 60)) * v55) * **(float **)(v56 + 160))
                              + (float)((float)(*(float *)(v56 + 60) * v55) * **(float **)(v56 + 136)))
                      + (float)((float)(1.0 - v55) * **(float **)(v56 + 184)));
          goto LABEL_66;
        case 2:
          *(_DWORD *)AudioBufferList __A = 0;
          LODWORD(v48) = vcvtas_u32_f32((float)((float)*(unsigned int *)(v56 + 120) / (float)*(unsigned int *)(v56 + 124))* (float)*(unsigned int *)(v56 + 128));
          vDSP_meanv(*(const float **)(v56 + 208), 1, (float *)__A, v48);
          float v57 = *(float *)__A;
LABEL_65:
          float v63 = v57 * v55;
LABEL_66:
          *(float *)(v56 + 132) = v63;
          goto LABEL_67;
        case 3:
          if (AUNeuralNetVADLogScope(void)::once != -1) {
            dispatch_once(&AUNeuralNetVADLogScope(void)::once, &__block_literal_global_18203);
          }
          if (AUNeuralNetVADLogScope(void)::scope)
          {
            unsigned int v88 = *(NSObject **)AUNeuralNetVADLogScope(void)::scope;
            if (!*(void *)AUNeuralNetVADLogScope(void)::scope) {
              goto LABEL_67;
            }
          }
          else
          {
            unsigned int v88 = MEMORY[0x1E4F14500];
          }
          if (!os_log_type_enabled(v88, OS_LOG_TYPE_ERROR)) {
            goto LABEL_67;
          }
          int v89 = *(_DWORD *)(v56 + 64);
          *(_DWORD *)AudioBufferList __A = 136315650;
          *(void *)&float __A[4] = "DirectionalVAD.cpp";
          *(_WORD *)&__A[12] = 1024;
          *(_DWORD *)&__A[14] = 186;
          __int16 v93 = 1024;
          LODWORD(v94) = v89;
          uint64_t v59 = "%25s:%-5d Invalid value for combined probability mode (%u).\n";
          unint64_t v60 = v88;
          os_log_type_t v61 = OS_LOG_TYPE_ERROR;
          uint32_t v62 = 24;
          break;
        default:
          goto LABEL_67;
      }
    }
    _os_log_impl(&dword_1BB0CE000, v60, v61, v59, __A, v62);
    goto LABEL_67;
  }
  *(_OWORD *)((char *)this + 628) = xmmword_1BB879DF0;
  CopyBufferList(&(*a5)->mNumberBuffers, *a7);
  if (v90[1])
  {
    if (AUNeuralNetVADLogScope(void)::once != -1) {
      dispatch_once(&AUNeuralNetVADLogScope(void)::once, &__block_literal_global_8966);
    }
    if (AUNeuralNetVADLogScope(void)::scope)
    {
      CFStringRef v15 = *(NSObject **)AUNeuralNetVADLogScope(void)::scope;
      if (!*(void *)AUNeuralNetVADLogScope(void)::scope) {
        return 0;
      }
    }
    else
    {
      CFStringRef v15 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList __A = 136315650;
      *(void *)&float __A[4] = "AUNeuralNetVAD.cpp";
      *(_WORD *)&__A[12] = 1024;
      *(_DWORD *)&__A[14] = 1286;
      __int16 v93 = 1024;
      LODWORD(v94) = v90[1];
      _os_log_impl(&dword_1BB0CE000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d AUNeuralNetVAD: (InputSignals) is NOT finite: (%u)\n", __A, 0x18u);
    }
  }
  return 0;
}

uint64_t AUNeuralNetVAD::CanScheduleParameters(AUNeuralNetVAD *this)
{
  return 0;
}

uint64_t AUNeuralNetVAD::SetParameter(AUNeuralNetVAD *this, unsigned int a2, int a3, unsigned int a4, float a5)
{
  if (a3 == 4)
  {
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNeuralNetVAD *)((char *)this + 552), a4);
    ausdk::AUElement::SetParameter(Element, a2, a5, 0);
    return 0;
  }
  else if (a3)
  {
    return 4294956418;
  }
  else
  {
    AudioUnitParameterOptions v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNeuralNetVAD *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v8, a2, a5, 0);
    uint64_t result = 0;
    ++*((void *)this + 66);
  }
  return result;
}

uint64_t AUNeuralNetVAD::SetProperty(AUNeuralNetVAD *this, int a2, int a3, unsigned int a4, CFArrayRef *a5, unsigned int a6)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 <= 3698)
  {
    if (a2 == 21)
    {
      uint64_t result = 0;
      *((unsigned char *)this + 544) = *(_DWORD *)a5 != 0;
      return result;
    }
    if (a2 == 3697)
    {
      if (a5)
      {
        if (*((void *)this + 81)) {
          std::unique_ptr<NeuralNetVAD>::reset[abi:ne180100]((uint64_t *)this + 81, 0);
        }
        if (AUNeuralNetVADLogScope(void)::once != -1) {
          dispatch_once(&AUNeuralNetVADLogScope(void)::once, &__block_literal_global_8966);
        }
        operator new();
      }
      if (AUNeuralNetVADLogScope(void)::once != -1) {
        dispatch_once(&AUNeuralNetVADLogScope(void)::once, &__block_literal_global_8966);
      }
      if (AUNeuralNetVADLogScope(void)::scope)
      {
        unint64_t v21 = *(NSObject **)AUNeuralNetVADLogScope(void)::scope;
        if (!*(void *)AUNeuralNetVADLogScope(void)::scope) {
          return 4294956445;
        }
      }
      else
      {
        unint64_t v21 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315394;
        int v29 = "AUNeuralNetVAD.cpp";
        __int16 v30 = 1024;
        int v31 = 552;
        unint64_t v24 = "%25s:%-5d The CFDictionaryRef passed to SetProperty is null.\n";
        float v25 = v21;
        uint32_t v26 = 18;
        goto LABEL_54;
      }
      return 4294956445;
    }
  }
  else
  {
    switch(a2)
    {
      case 3699:
        if (a6 == 4 * (*((_DWORD *)this + 151) + 1))
        {
          uint64_t v17 = *((void *)this + 95);
          if (!v17) {
            return 0;
          }
          uint64_t v18 = *(void **)(v17 + 208);
          uint64_t v11 = a5;
          size_t v15 = a6;
LABEL_58:
          memcpy(v18, v11, v15);
          return 0;
        }
        if (AUNeuralNetVADLogScope(void)::once != -1) {
          dispatch_once(&AUNeuralNetVADLogScope(void)::once, &__block_literal_global_8966);
        }
        if (AUNeuralNetVADLogScope(void)::scope)
        {
          float v20 = *(NSObject **)AUNeuralNetVADLogScope(void)::scope;
          if (!*(void *)AUNeuralNetVADLogScope(void)::scope) {
            return 4294956445;
          }
        }
        else
        {
          float v20 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          uint64_t v27 = 4 * (*((_DWORD *)this + 151) + 1);
          *(_DWORD *)AudioTimeStamp buf = 136316162;
          int v29 = "AUNeuralNetVAD.cpp";
          __int16 v30 = 1024;
          int v31 = 521;
          __int16 v32 = 2048;
          uint64_t v33 = a6;
          __int16 v34 = 2048;
          uint64_t v35 = v27;
          __int16 v36 = 1024;
          LODWORD(v37) = 3699;
          unint64_t v24 = "%25s:%-5d Input size of PriorSPP  (%lu) is not equal to the the expected size  (%lu) (prop id: %u).\n";
          float v25 = v20;
          uint32_t v26 = 44;
          goto LABEL_54;
        }
        return 4294956445;
      case 3700:
        uint64_t result = 4294956445;
        if (a6 >= 4)
        {
          if (*(unsigned char *)a5) {
            return 0;
          }
          else {
            return 4294956445;
          }
        }
        break;
      case 103699:
        if (a6 == 8)
        {
          uint64_t v10 = *((void *)this + 93) - *((void *)this + 92);
          if (CFArrayGetCount(*a5) == v10 >> 2)
          {
            uint64_t v11 = (CFArrayRef *)*((void *)this + 93);
            if (v11 == *((CFArrayRef **)this + 92))
            {
              size_t v15 = 0;
            }
            else
            {
              uint64_t v12 = 0;
              unint64_t v13 = 0;
              do
              {
                CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(*a5, v13);
                CFNumberGetValue(ValueAtIndex, kCFNumberFloat32Type, (void *)(*((void *)this + 92) + v12));
                ++v13;
                uint64_t v11 = (CFArrayRef *)*((void *)this + 92);
                v12 += 4;
              }
              while (v13 < (uint64_t)(*((void *)this + 93) - (void)v11) >> 2);
              size_t v15 = (*((_DWORD *)this + 186) - v11);
            }
            uint64_t v18 = *(void **)(*((void *)this + 95) + 208);
            goto LABEL_58;
          }
        }
        if (AUNeuralNetVADLogScope(void)::once != -1) {
          dispatch_once(&AUNeuralNetVADLogScope(void)::once, &__block_literal_global_8966);
        }
        if (AUNeuralNetVADLogScope(void)::scope)
        {
          uint64_t v19 = *(NSObject **)AUNeuralNetVADLogScope(void)::scope;
          if (!*(void *)AUNeuralNetVADLogScope(void)::scope) {
            return 4294956445;
          }
        }
        else
        {
          uint64_t v19 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          uint64_t v22 = (uint64_t)(*((void *)this + 93) - *((void *)this + 92)) >> 2;
          CFIndex Count = CFArrayGetCount(*a5);
          *(_DWORD *)AudioTimeStamp buf = 136316674;
          int v29 = "AUNeuralNetVAD.cpp";
          __int16 v30 = 1024;
          int v31 = 532;
          __int16 v32 = 2048;
          uint64_t v33 = a6;
          __int16 v34 = 2048;
          uint64_t v35 = 8;
          __int16 v36 = 2048;
          uint64_t v37 = v22;
          __int16 v38 = 2048;
          CFIndex v39 = Count;
          __int16 v40 = 1024;
          int v41 = 103699;
          unint64_t v24 = "%25s:%-5d Input size of Prior_SPP  (%lu) is not equal to the the expected size  (%lu) or (%lu) is not eq"
                "ual to (%lu) (prop id: %u).\n";
          float v25 = v19;
          uint32_t v26 = 64;
LABEL_54:
          _os_log_impl(&dword_1BB0CE000, v25, OS_LOG_TYPE_ERROR, v24, buf, v26);
          return 4294956445;
        }
        return 4294956445;
    }
  }
  return result;
}

void sub_1BB4E35AC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception a9, int a10, long long buf, __int16 a12, __int16 a13, int a14)
{
  MEMORY[0x1C185D370](v14, 0x10E0C40DF43E4E2);
  if (a2 != 1) {
    _Unwind_Resume(a1);
  }
  exception_ptr = __cxa_get_exception_ptr(a1);
  a9.__vftable = (std::exception_vtbl *)&unk_1F14C8B68;
  a10 = exception_ptr[2];
  __cxa_begin_catch(a1);
  if (*(void *)(v16 + 2240) != -1) {
    dispatch_once(&AUNeuralNetVADLogScope(void)::once, &__block_literal_global_8966);
  }
  float v20 = *(NSObject ***)(v15 + 2232);
  if (v20)
  {
    unint64_t v21 = *v20;
    if (!*v20) {
      goto LABEL_10;
    }
  }
  else
  {
    unint64_t v21 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf) = 136315650;
    *(void *)((char *)&buf + 4) = "AUNeuralNetVAD.cpp";
    WORD6(buf) = 1024;
    *(_DWORD *)((char *)&buf + 14) = 566;
    a13 = 1024;
    a14 = a10;
    _os_log_impl(&dword_1BB0CE000, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d Could not load NeuralNetVAD plist, exception (%d).\n", (uint8_t *)&buf, 0x18u);
  }
LABEL_10:
  std::exception::~exception(&a9);
  __cxa_end_catch();
  JUMPOUT(0x1BB4E3510);
}

uint64_t *std::unique_ptr<NeuralNetVAD>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    BOOL v3 = *(void **)(v2 + 72);
    if (v3)
    {
      sparse_matrix_destroy(v3);
      *(void *)(v2 + 72) = 0;
    }
    CFNumberRef v4 = *(void **)(v2 + 192);
    if (v4)
    {
      *(void *)(v2 + 200) = v4;
      operator delete(v4);
    }
    std::unique_ptr<NeuralNet>::reset[abi:ne180100]((NeuralNet **)(v2 + 176), 0);
    uint64_t v5 = *(void **)(v2 + 128);
    if (v5)
    {
      *(void *)(v2 + 136) = v5;
      operator delete(v5);
    }
    uint64_t v6 = *(void **)(v2 + 104);
    if (v6)
    {
      *(void *)(v2 + 112) = v6;
      operator delete(v6);
    }
    AudioUnitParameterValue v7 = *(void **)(v2 + 80);
    if (v7)
    {
      *(void *)(v2 + 88) = v7;
      operator delete(v7);
    }
    JUMPOUT(0x1C185D370);
  }
  return result;
}

uint64_t AUNeuralNetVAD::GetProperty(AUNeuralNetVAD *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  if (a3) {
    return 4294956417;
  }
  if (a2 == 3700)
  {
    uint64_t v6 = (unsigned __int8 *)this + 376;
  }
  else
  {
    if (a2 != 21) {
      return 4294956417;
    }
    uint64_t v6 = (unsigned __int8 *)this + 544;
  }
  uint64_t result = 0;
  *a5 = *v6;
  return result;
}

uint64_t AUNeuralNetVAD::GetPropertyInfo(AUNeuralNetVAD *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3 || a2 != 3700 && a2 != 21) {
    return 4294956417;
  }
  uint64_t result = 0;
  *a6 = 1;
  *a5 = 4;
  return result;
}

uint64_t AUNeuralNetVAD::Reset(AUNeuralNetVAD *this)
{
  if (*((unsigned char *)this + 600))
  {
    uint64_t v2 = *((void *)this + 81);
    *(unsigned char *)(v2 + 24) = 0;
    *(void *)(v2 + 164) = 0;
    *(void *)(v2 + 156) = 0;
    *(_DWORD *)(v2 + 172) = 0;
    BOOL v3 = *(void **)(v2 + 192);
    uint64_t v4 = *(void *)(v2 + 200) - (void)v3;
    if (v4 >= 1) {
      bzero(v3, 4 * (((unint64_t)v4 >> 2) - ((unint64_t)v4 > 3)) + 4);
    }
    if (*(_DWORD *)(v2 + 40) != 1)
    {
      AudioUnitParameterValue v7 = *(void **)(v2 + 128);
      uint64_t v8 = *(void *)(v2 + 136) - (void)v7;
      if (v8 < 1) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
    uint64_t v5 = *(void **)(v2 + 80);
    uint64_t v6 = *(void *)(v2 + 88) - (void)v5;
    if (v6 >= 1) {
      bzero(v5, 4 * (((unint64_t)v6 >> 2) - ((unint64_t)v6 > 3)) + 4);
    }
    AudioUnitParameterValue v7 = *(void **)(v2 + 104);
    uint64_t v8 = *(void *)(v2 + 112) - (void)v7;
    if (v8 > 0) {
LABEL_8:
    }
      bzero(v7, 4 * (((unint64_t)v8 >> 2) - ((unint64_t)v8 > 3)) + 4);
  }
LABEL_9:
  *(_OWORD *)((char *)this + 628) = 0u;
  return 0;
}

double AUNeuralNetVAD::Cleanup(AUNeuralNetVAD *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (AUNeuralNetVADLogScope(void)::once != -1) {
    dispatch_once(&AUNeuralNetVADLogScope(void)::once, &__block_literal_global_8966);
  }
  if (AUNeuralNetVADLogScope(void)::scope)
  {
    uint64_t v2 = *(NSObject **)AUNeuralNetVADLogScope(void)::scope;
    if (!*(void *)AUNeuralNetVADLogScope(void)::scope) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 136315394;
    uint64_t v8 = "AUNeuralNetVAD.cpp";
    __int16 v9 = 1024;
    int v10 = 300;
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUNeuralNetVAD: Resetting state variables. Cleanup() started.\n", (uint8_t *)&v7, 0x12u);
  }
LABEL_9:
  if (*((unsigned char *)this + 600))
  {
    uint64_t v3 = *((void *)this + 81);
    (*(void (**)(void))(***(void ***)(v3 + 176) + 48))(**(void **)(v3 + 176));
    *(unsigned char *)(v3 + 24) = 0;
    *(void *)(v3 + 164) = 0;
    *(void *)(v3 + 156) = 0;
    *(_DWORD *)(v3 + 172) = 0;
    bzero(*(void **)(v3 + 192), *(void *)(v3 + 200) - *(void *)(v3 + 192));
    if (*(_DWORD *)(v3 + 40) == 1)
    {
      bzero(*(void **)(v3 + 80), *(void *)(v3 + 88) - *(void *)(v3 + 80));
      uint64_t v4 = (void **)(v3 + 104);
      uint64_t v5 = (void *)(v3 + 112);
    }
    else
    {
      uint64_t v4 = (void **)(v3 + 128);
      uint64_t v5 = (void *)(v3 + 136);
    }
    bzero(*v4, *v5 - (void)*v4);
  }
  double result = 0.0;
  *(_OWORD *)((char *)this + 628) = 0u;
  return result;
}

uint64_t AUNeuralNetVAD::Initialize(AUNeuralNetVAD *this)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  if (AUNeuralNetVADLogScope(void)::once != -1) {
    dispatch_once(&AUNeuralNetVADLogScope(void)::once, &__block_literal_global_8966);
  }
  if (AUNeuralNetVADLogScope(void)::scope)
  {
    uint64_t v2 = *(NSObject **)AUNeuralNetVADLogScope(void)::scope;
    if (!*(void *)AUNeuralNetVADLogScope(void)::scope) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    buf[0] = 136315394;
    *(void *)&buf[1] = "AUNeuralNetVAD.cpp";
    __int16 v59 = 1024;
    int v60 = 123;
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUNeuralNetVAD: Start Initialization.\n", (uint8_t *)buf, 0x12u);
  }
LABEL_9:
  if (!*((unsigned char *)this + 600))
  {
    if (AUNeuralNetVADLogScope(void)::once != -1) {
      dispatch_once(&AUNeuralNetVADLogScope(void)::once, &__block_literal_global_8966);
    }
    if (AUNeuralNetVADLogScope(void)::scope)
    {
      uint64_t v8 = *(NSObject **)AUNeuralNetVADLogScope(void)::scope;
      if (!*(void *)AUNeuralNetVADLogScope(void)::scope) {
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v8 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "AUNeuralNetVAD.cpp";
      __int16 v59 = 1024;
      int v60 = 130;
      _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Initialize called without setting setting NeuralNetVADLayers plist! Setting AU in Bypass mode.\n", (uint8_t *)buf, 0x12u);
    }
LABEL_26:
    *((unsigned char *)this + 544) = 1;
    uint64_t Element = ausdk::AUScope::SafeGetElement((AUNeuralNetVAD *)((char *)this + 80), 0);
    uint64_t v10 = *(void *)(Element + 80);
    *((_DWORD *)this + 156) = *(_DWORD *)(Element + 108);
    *((void *)this + 76) = v10;
    if (*(_DWORD *)(ausdk::AUScope::SafeGetElement((AUNeuralNetVAD *)((char *)this + 80), 0) + 108) == *((_DWORD *)this + 156)
      && *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUNeuralNetVAD *)((char *)this + 128), 0) + 108) == *((_DWORD *)this + 156))
    {
      uint64_t result = 0;
      *((_DWORD *)this + 151) = *((_DWORD *)this + 84);
      *(_OWORD *)((char *)this + 628) = 0u;
      return result;
    }
    return 4294956421;
  }
  (*(void (**)(AUNeuralNetVAD *))(*(void *)this + 64))(this);
  uint64_t v3 = ausdk::AUScope::SafeGetElement((AUNeuralNetVAD *)((char *)this + 80), 0);
  uint64_t v4 = *(void *)(v3 + 80);
  *((_DWORD *)this + 156) = *(_DWORD *)(v3 + 108);
  *((void *)this + 76) = v4;
  if (*(_DWORD *)(ausdk::AUScope::SafeGetElement((AUNeuralNetVAD *)((char *)this + 80), 0) + 108) != *((_DWORD *)this + 156)
    || *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUNeuralNetVAD *)((char *)this + 128), 0) + 108) != *((_DWORD *)this + 156))
  {
    return 4294956421;
  }
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, 4u);
  ausdk::AUScope::SetNumberOfElements(Scope, 1u);
  *((_DWORD *)this + 151) = *((_DWORD *)this + 84);
  if ((*(uint64_t (**)(AUNeuralNetVAD *))(*(void *)this + 576))(this)) {
    goto LABEL_35;
  }
  if (AUNeuralNetVADLogScope(void)::once != -1) {
    dispatch_once(&AUNeuralNetVADLogScope(void)::once, &__block_literal_global_8966);
  }
  if (!AUNeuralNetVADLogScope(void)::scope)
  {
    int v7 = MEMORY[0x1E4F14500];
LABEL_32:
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "AUNeuralNetVAD.cpp";
      __int16 v59 = 1024;
      int v60 = 181;
      _os_log_impl(&dword_1BB0CE000, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Block Size for DFT must be divisable by 2**4! Setting AU in Bypass mode.\n", (uint8_t *)buf, 0x12u);
    }
    goto LABEL_34;
  }
  int v7 = *(NSObject **)AUNeuralNetVADLogScope(void)::scope;
  if (*(void *)AUNeuralNetVADLogScope(void)::scope) {
    goto LABEL_32;
  }
LABEL_34:
  *((unsigned char *)this + 544) = 1;
LABEL_35:
  double v12 = *((double *)this + 76);
  uint64_t v13 = *((void *)this + 81);
  double v14 = *(double *)v13;
  int v15 = (int)*(double *)v13;
  if ((int)(v12 + v12) % v15)
  {
    if (AUNeuralNetVADLogScope(void)::once != -1) {
      dispatch_once(&AUNeuralNetVADLogScope(void)::once, &__block_literal_global_8966);
    }
    if (AUNeuralNetVADLogScope(void)::scope)
    {
      uint64_t v16 = *(NSObject **)AUNeuralNetVADLogScope(void)::scope;
      if (!*(void *)AUNeuralNetVADLogScope(void)::scope)
      {
LABEL_46:
        *((unsigned char *)this + 544) = 1;
        double v12 = *((double *)this + 76);
        uint64_t v13 = *((void *)this + 81);
        double v14 = *(double *)v13;
        goto LABEL_47;
      }
    }
    else
    {
      uint64_t v16 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "AUNeuralNetVAD.cpp";
      __int16 v59 = 1024;
      int v60 = 189;
      _os_log_impl(&dword_1BB0CE000, v16, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Sample rate is not supported! Setting AU in Bypass mode.\n", (uint8_t *)buf, 0x12u);
    }
    goto LABEL_46;
  }
  if ((int)v12 != v15)
  {
    double v6 = v12 / v14;
    *((double *)this + 77) = v12 / v14;
  }
LABEL_47:
  LODWORD(v6) = *((_DWORD *)this + 151);
  *(double *)&unint64_t v17 = (double)*(unint64_t *)&v6;
  double v18 = *(double *)&v17 / v12;
  LODWORD(v17) = *(_DWORD *)(v13 + 28);
  if (v18 != (double)v17 / v14)
  {
    if (AUNeuralNetVADLogScope(void)::once != -1) {
      dispatch_once(&AUNeuralNetVADLogScope(void)::once, &__block_literal_global_8966);
    }
    if (AUNeuralNetVADLogScope(void)::scope)
    {
      uint64_t v19 = *(NSObject **)AUNeuralNetVADLogScope(void)::scope;
      if (!*(void *)AUNeuralNetVADLogScope(void)::scope)
      {
LABEL_56:
        *((unsigned char *)this + 544) = 1;
        goto LABEL_57;
      }
    }
    else
    {
      uint64_t v19 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "AUNeuralNetVAD.cpp";
      __int16 v59 = 1024;
      int v60 = 198;
      _os_log_impl(&dword_1BB0CE000, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Block size is not supported! Setting AU in Bypass mode.\n", (uint8_t *)buf, 0x12u);
    }
    goto LABEL_56;
  }
LABEL_57:
  (*(void (**)(AUNeuralNetVAD *, void, void))(*(void *)this + 72))(this, 0, 0);
  float v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNeuralNetVAD *)((char *)this + 32), 0);
  uint64_t v21 = **(void **)(*((void *)this + 81) + 176);
  unsigned int v22 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 16))(v21);
  ausdk::AUElement::SetParameter(v20, 0, (float)v22, 0);
  uint64_t v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNeuralNetVAD *)((char *)this + 32), 0);
  unint64_t v24 = (char *)this + 648;
  ausdk::AUElement::SetParameter(v23, 1u, (float)*(unsigned int *)(*((void *)this + 81) + 40), 0);
  float v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNeuralNetVAD *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v25, 2u, *(float *)(*((void *)this + 81) + 44), 0);
  uint32_t v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNeuralNetVAD *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v26, 3u, *((float *)this + 164), 0);
  uint64_t v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNeuralNetVAD *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v27, 4u, *((float *)this + 165), 0);
  unsigned int v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNeuralNetVAD *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v28, 5u, *((float *)this + 166), 0);
  int v29 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNeuralNetVAD *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v29, 6u, *((float *)this + 167), 0);
  *((_DWORD *)this + 168) = *(_DWORD *)(*((void *)this + 81) + 8);
  __int16 v30 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNeuralNetVAD *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v30, 7u, *((float *)this + 168), 0);
  *((_DWORD *)this + 169) = *(_DWORD *)(*((void *)this + 81) + 20);
  int v31 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNeuralNetVAD *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v31, 8u, (float)*((unsigned int *)this + 169), 0);
  *((_DWORD *)this + 170) = *(_DWORD *)(*((void *)this + 81) + 12);
  __int16 v32 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNeuralNetVAD *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v32, 9u, *((float *)this + 170), 0);
  *((_DWORD *)this + 171) = *(_DWORD *)(*((void *)this + 81) + 16);
  uint64_t v33 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNeuralNetVAD *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v33, 0xAu, *((float *)this + 171), 0);
  *((unsigned char *)this + 692) = *(_DWORD *)(*((void *)this + 81) + 216) != 0;
  __int16 v34 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNeuralNetVAD *)((char *)this + 32), 0);
  float v35 = 0.0;
  if (*((unsigned char *)this + 692)) {
    float v35 = 1.0;
  }
  ausdk::AUElement::SetParameter(v34, 0xCu, v35, 0);
  *((_DWORD *)this + 174) = *(_DWORD *)(*(void *)v24 + 220);
  __int16 v36 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNeuralNetVAD *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v36, 0xDu, *((float *)this + 174), 0);
  *((_DWORD *)this + 175) = *(_DWORD *)(*(void *)v24 + 224);
  uint64_t v37 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNeuralNetVAD *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v37, 0xEu, *((float *)this + 175), 0);
  *((_DWORD *)this + 177) = *(_DWORD *)(*(void *)v24 + 228);
  __int16 v38 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNeuralNetVAD *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v38, 0x10u, *((float *)this + 177), 0);
  *((_DWORD *)this + 178) = *(_DWORD *)(*(void *)v24 + 232);
  CFIndex v39 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNeuralNetVAD *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v39, 0x11u, *((float *)this + 178), 0);
  *((_DWORD *)this + 179) = *(_DWORD *)(*(void *)v24 + 236);
  __int16 v40 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNeuralNetVAD *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v40, 0x12u, (float)*((int *)this + 179), 0);
  *((_DWORD *)this + 176) = *(_DWORD *)(*(void *)v24 + 240);
  int v41 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNeuralNetVAD *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v41, 0xFu, (float)*((int *)this + 176), 0);
  *((_DWORD *)this + 182) = *(_DWORD *)(*(void *)v24 + 244);
  uint64_t v42 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNeuralNetVAD *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v42, 0x15u, *((float *)this + 182), 0);
  int v43 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNeuralNetVAD *)((char *)this + 32), 0);
  *((float *)this + 180) = ausdk::AUElement::GetParameter(v43, 0x13u);
  unsigned int v44 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNeuralNetVAD *)((char *)this + 32), 0);
  *((float *)this + 181) = ausdk::AUElement::GetParameter(v44, 0x14u);
  unsigned int v45 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNeuralNetVAD *)((char *)this + 32), 0);
  *((float *)this + 182) = ausdk::AUElement::GetParameter(v45, 0x15u);
  if (*((unsigned char *)this + 692))
  {
    if (AUNeuralNetVADLogScope(void)::once != -1) {
      dispatch_once(&AUNeuralNetVADLogScope(void)::once, &__block_literal_global_8966);
    }
    if (AUNeuralNetVADLogScope(void)::scope)
    {
      float v46 = *(NSObject **)AUNeuralNetVADLogScope(void)::scope;
      if (!*(void *)AUNeuralNetVADLogScope(void)::scope) {
        goto LABEL_68;
      }
    }
    else
    {
      float v46 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
    {
      double v47 = *((float *)this + 174);
      double v48 = *((float *)this + 175);
      int v49 = *((_DWORD *)this + 176);
      double v50 = *((float *)this + 177);
      buf[0] = 136316418;
      *(void *)&buf[1] = "AUNeuralNetVAD.cpp";
      __int16 v59 = 1024;
      int v60 = 263;
      __int16 v61 = 2048;
      double v62 = v47;
      __int16 v63 = 2048;
      double v64 = v48;
      __int16 v65 = 1024;
      int v66 = v49;
      __int16 v67 = 2048;
      double v68 = v50;
      _os_log_impl(&dword_1BB0CE000, v46, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Initializing the directional model: azimuth (%f), elev (%f), model type (%d), shape parameter (%f).\n", (uint8_t *)buf, 0x36u);
    }
LABEL_68:
    operator new();
  }
  float v51 = (DirectionalVAD *)*((void *)this + 95);
  if (v51)
  {
    DirectionalVAD::setTargetDirection(v51, *((float *)this + 174), *((float *)this + 175));
    DirectionalVAD::setShapeParameter(*((DirectionalVAD **)this + 95), *((float *)this + 177));
    DirectionalVAD::setConditionalTargetPrior(*((DirectionalVAD **)this + 95), *((float *)this + 178));
    uint64_t v52 = *((void *)this + 95);
    *(_DWORD *)(v52 + 64) = *((_DWORD *)this + 179);
    DirectionalVAD::setCurrentDirection((float **)v52, *((float *)this + 180), *((float *)this + 181));
    *(_DWORD *)(*((void *)this + 95) + 120) = *((float *)this + 182);
  }
  *((unsigned char *)this + 732) = *(_DWORD *)(*((void *)this + 81) + 248) != 0;
  __int16 v53 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNeuralNetVAD *)((char *)this + 32), 0);
  float v54 = 0.0;
  if (*((unsigned char *)this + 732)) {
    float v54 = 1.0;
  }
  ausdk::AUElement::SetParameter(v53, 0x16u, v54, 0);
  *((_DWORD *)this + 172) = *(_DWORD *)(*((void *)this + 81) + 252);
  float v55 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNeuralNetVAD *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v55, 0xBu, (float)*((int *)this + 172), 0);
  if (AUNeuralNetVADLogScope(void)::once != -1) {
    dispatch_once(&AUNeuralNetVADLogScope(void)::once, &__block_literal_global_8966);
  }
  if (AUNeuralNetVADLogScope(void)::scope)
  {
    uint64_t v56 = *(NSObject **)AUNeuralNetVADLogScope(void)::scope;
    if (!*(void *)AUNeuralNetVADLogScope(void)::scope) {
      return 0;
    }
  }
  else
  {
    uint64_t v56 = MEMORY[0x1E4F14500];
  }
  BOOL v57 = os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v57)
  {
    buf[0] = 136315394;
    *(void *)&buf[1] = "AUNeuralNetVAD.cpp";
    __int16 v59 = 1024;
    int v60 = 289;
    _os_log_impl(&dword_1BB0CE000, v56, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUNeuralNetVAD: Successfully Initialized.\n", (uint8_t *)buf, 0x12u);
    return 0;
  }
  return result;
}

void sub_1BB4E4860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  double v18 = *v12;
  if (*v12)
  {
    v10[30] = v18;
    operator delete(v18);
  }
  uint64_t v19 = *v11;
  if (*v11)
  {
    v10[27] = v19;
    operator delete(v19);
  }
  float v20 = *v13;
  if (*v13)
  {
    v10[24] = v20;
    operator delete(v20);
  }
  uint64_t v21 = *v15;
  if (*v15)
  {
    v10[21] = v21;
    operator delete(v21);
  }
  unsigned int v22 = (void *)v10[17];
  if (v22)
  {
    v10[18] = v22;
    operator delete(v22);
  }
  uint64_t v23 = *v16;
  if (*v16)
  {
    v10[13] = v23;
    operator delete(v23);
  }
  unint64_t v24 = *a10;
  if (*a10)
  {
    v10[10] = v24;
    operator delete(v24);
  }
  uint64_t v25 = v10[6];
  v10[6] = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 24))(v25);
  }
  uint64_t v26 = v10[5];
  _DWORD v10[5] = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 24))(v26);
  }
  uint64_t v27 = *v14;
  uint64_t *v14 = 0;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 24))(v27);
  }
  MEMORY[0x1C185D370](v10, 0x10A0C4063FAA373);
  _Unwind_Resume(a1);
}

void *std::unique_ptr<DirectionalVAD>::reset[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t v2 = (void *)*result;
  *uint64_t result = a2;
  if (v2)
  {
    uint64_t v3 = (void *)v2[29];
    if (v3)
    {
      v2[30] = v3;
      operator delete(v3);
    }
    uint64_t v4 = (void *)v2[26];
    if (v4)
    {
      v2[27] = v4;
      operator delete(v4);
    }
    uint64_t v5 = (void *)v2[23];
    if (v5)
    {
      v2[24] = v5;
      operator delete(v5);
    }
    double v6 = (void *)v2[20];
    if (v6)
    {
      v2[21] = v6;
      operator delete(v6);
    }
    int v7 = (void *)v2[17];
    if (v7)
    {
      v2[18] = v7;
      operator delete(v7);
    }
    uint64_t v8 = (void *)v2[12];
    if (v8)
    {
      v2[13] = v8;
      operator delete(v8);
    }
    __int16 v9 = (void *)v2[9];
    if (v9)
    {
      v2[10] = v9;
      operator delete(v9);
    }
    uint64_t v10 = v2[6];
    v2[6] = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
    }
    uint64_t v11 = v2[5];
    v2[5] = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
    }
    uint64_t v12 = v2[4];
    v2[4] = 0;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 24))(v12);
    }
    JUMPOUT(0x1C185D370);
  }
  return result;
}

void AUNeuralNetVAD::CreateExtendedElements(AUNeuralNetVAD *this)
{
  uint64_t v1 = (AUNeuralNetVAD *)((char *)this + 552);
  ausdk::AUScope::Initialize((AUNeuralNetVAD *)((char *)this + 552), this, 4, 1);
  std::to_string(&v9, 0);
  uint64_t v2 = std::string::insert(&v9, 0, "Mic", 3uLL);
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t v11 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  if (v11 >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if (v4)
  {
    if (v11 >= 0) {
      CFIndex v5 = HIBYTE(v11);
    }
    else {
      CFIndex v5 = (CFIndex)__p[1];
    }
    CFStringRef v6 = CFStringCreateWithBytes(0, (const UInt8 *)v4, v5, 0x8000100u, 0);
    v9.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
    if (!v6)
    {
      exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
  }
  else
  {
    CFStringRef v6 = 0;
    v9.__r_.__value_.__r.__words[0] = 0;
  }
  uint64_t Element = ausdk::AUScope::GetElement(v1, 0);
  ausdk::Owned<__CFString const*>::operator=((const void **)(Element + 72), v6);
  if (v6) {
    CFRelease(v6);
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1BB4E4C7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AUNeuralNetVAD::~AUNeuralNetVAD(AUNeuralNetVAD *this)
{
  AUNeuralNetVAD::~AUNeuralNetVAD(this);

  JUMPOUT(0x1C185D370);
}

{
  uint64_t *v2;
  void *v3;
  void **v4;
  uint64_t vars8;

  *(void *)this = &unk_1F14B0F30;
  uint64_t v2 = (uint64_t *)((char *)this + 648);
  std::unique_ptr<NeuralNetVAD>::reset[abi:ne180100]((uint64_t *)this + 81, 0);
  std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100]((uint64_t *)this + 96, 0);
  std::unique_ptr<DirectionalVAD>::reset[abi:ne180100]((void *)this + 95, 0);
  long long v3 = (void *)*((void *)this + 92);
  if (v3)
  {
    *((void *)this + 93) = v3;
    operator delete(v3);
  }
  std::unique_ptr<NeuralNetVAD>::reset[abi:ne180100](v2, 0);
  uint64_t v4 = (void **)((char *)this + 568);
  std::vector<std::unique_ptr<ausdk::AUElement>>::__destroy_vector::operator()[abi:ne180100](&v4);

  ausdk::AUBase::~AUBase(this);
}

uint64_t VoiceProcessorV2::ReadBuffer(uint64_t a1, int a2, _DWORD *a3)
{
  if (!*(unsigned char *)(a1 + 16241)) {
    return 1937006964;
  }
  uint64_t result = 1651532146;
  switch(a2)
  {
    case 0:
      CFStringRef v6 = *(_DWORD **)(a1 + 1048);
      if (!*v6 || !*a3)
      {
        _os_assert_log();
        _os_crash();
        __break(1u);
LABEL_37:
        _os_assert_log();
        _os_crash();
        __break(1u);
LABEL_38:
        _os_assert_log();
        _os_crash();
        __break(1u);
LABEL_39:
        _os_assert_log();
        _os_crash();
        __break(1u);
        JUMPOUT(0x1BB4E4FD4);
      }
      unint64_t v7 = 0;
      uint64_t v8 = (void **)(a3 + 4);
      do
      {
        unint64_t v9 = *v6;
        if (v7 >= v9) {
          int v10 = v9 - 1;
        }
        else {
          int v10 = v7;
        }
        memcpy(*v8, *(const void **)&v6[4 * v10 + 4], *((unsigned int *)v8 - 1));
        ++v7;
        v8 += 2;
      }
      while (v7 < *a3);
      break;
    case 1:
      int64_t v11 = *(_DWORD **)(a1 + 1040);
      if (!*v11 || !*a3) {
        goto LABEL_37;
      }
      unint64_t v12 = 0;
      uint64_t v13 = (void **)(a3 + 4);
      do
      {
        unint64_t v14 = *v11;
        if (v12 >= v14) {
          int v15 = v14 - 1;
        }
        else {
          int v15 = v12;
        }
        memcpy(*v13, *(const void **)&v11[4 * v15 + 4], *((unsigned int *)v13 - 1));
        ++v12;
        v13 += 2;
      }
      while (v12 < *a3);
      break;
    case 2:
      uint64_t v16 = *(_DWORD **)(a1 + 1424);
      if (!*v16 || !*a3) {
        goto LABEL_38;
      }
      unint64_t v17 = 0;
      double v18 = (void **)(a3 + 4);
      do
      {
        unint64_t v19 = *v16;
        if (v17 >= v19) {
          int v20 = v19 - 1;
        }
        else {
          int v20 = v17;
        }
        memcpy(*v18, *(const void **)&v16[4 * v20 + 4], *((unsigned int *)v18 - 1));
        ++v17;
        v18 += 2;
      }
      while (v17 < *a3);
      break;
    case 6:
      uint64_t v21 = *(_DWORD **)(a1 + 1088);
      if (!*v21 || !*a3) {
        goto LABEL_39;
      }
      unint64_t v22 = 0;
      uint64_t v23 = (void **)(a3 + 4);
      do
      {
        unint64_t v24 = *v21;
        if (v22 >= v24) {
          int v25 = v24 - 1;
        }
        else {
          int v25 = v22;
        }
        memcpy(*v23, *(const void **)&v21[4 * v25 + 4], *((unsigned int *)v23 - 1));
        ++v22;
        v23 += 2;
      }
      while (v22 < *a3);
      break;
    default:
      return result;
  }
  return 0;
}

uint64_t VoiceProcessorV2::WriteBuffer(uint64_t a1, int a2, _DWORD *a3)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 16241)) {
    return 1937006964;
  }
  switch(a2)
  {
    case 5:
      uint64_t v16 = *(unsigned int *)(a1 + 1444);
      if ((v16 - 65) <= 0xFFFFFFBF)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315394;
          unsigned int v45 = "vpProcessUplink_v2.cpp";
          __int16 v46 = 1024;
          int v47 = 90;
          _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", buf, 0x12u);
        }
        exceptiounsigned int n = __cxa_allocate_exception(0x10uLL);
        *(void *)exceptiounsigned int n = &unk_1F14C8B68;
        exception[2] = -50;
      }
      MEMORY[0x1F4188790](a1);
      double v18 = &buf[-v17];
      bzero(&buf[-v17], v19);
      unint64_t v20 = *a3;
      if (!v20)
      {
LABEL_52:
        _os_assert_log();
        _os_crash();
        __break(1u);
      }
      unint64_t v21 = 0;
      unint64_t v22 = v18 + 8;
      do
      {
        if (v21 >= v20) {
          int v23 = v20 - 1;
        }
        else {
          int v23 = v21;
        }
        *v22++ = *(_OWORD *)&a3[4 * v23 + 2];
        ++v21;
      }
      while (v16 != v21);
      unsigned int v24 = *(_DWORD *)(a1 + 508);
      int v25 = *(_DWORD *)(a1 + 1440);
      int v26 = *(_DWORD *)(a1 + 1448);
      if (v24) {
        BOOL v27 = v25 == v26;
      }
      else {
        BOOL v27 = 1;
      }
      if (v27) {
        return 0;
      }
      unint64_t v28 = 0;
      unsigned int v29 = v25 - v26;
      if (v29 >= v24) {
        unsigned int v30 = *(_DWORD *)(a1 + 508);
      }
      else {
        unsigned int v30 = v29;
      }
      unsigned int v31 = v25 - *(_DWORD *)(a1 + 1456);
      if (v31 >= v30) {
        uint64_t v32 = v30;
      }
      else {
        uint64_t v32 = v31;
      }
      uint64_t v33 = (const void **)(v18 + 16);
      do
      {
        __int16 v34 = *v33;
        v33 += 2;
        memcpy((void *)(*(void *)(a1 + 1464) + 4* (*(_DWORD *)(a1 + 1456) + *(_DWORD *)(a1 + 1440) * v28++)), v34, 4 * v32);
        unint64_t v35 = *(unsigned int *)(a1 + 1444);
      }
      while (v28 < v35);
      if (v30 > v31 && v35)
      {
        unint64_t v36 = 0;
        uint64_t v37 = (uint64_t *)(v18 + 16);
        do
        {
          uint64_t v38 = *v37;
          v37 += 2;
          memcpy((void *)(*(void *)(a1 + 1464) + 4 * (*(_DWORD *)(a1 + 1440) * v36++)), (const void *)(v38 + 4 * v32), 4 * (v30 - v32));
        }
        while (v36 < *(unsigned int *)(a1 + 1444));
      }
      *(_DWORD *)(a1 + 1448) += v30;
      unsigned int v39 = *(_DWORD *)(a1 + 1456) + v30;
      *(_DWORD *)(a1 + 1456) = v39;
      unsigned int v40 = *(_DWORD *)(a1 + 1440);
      BOOL v41 = v39 >= v40;
      unsigned int v42 = v39 - v40;
      if (!v41) {
        return 0;
      }
      uint64_t result = 0;
      *(_DWORD *)(a1 + 1456) = v42;
      break;
    case 4:
      if (*a3)
      {
        int64_t v11 = *(_DWORD **)(a1 + 1072);
        if (*v11)
        {
          unint64_t v12 = 0;
          uint64_t v13 = (void **)(v11 + 4);
          do
          {
            unint64_t v14 = *a3;
            if (v12 >= v14) {
              int v15 = v14 - 1;
            }
            else {
              int v15 = v12;
            }
            memcpy(*v13, *(const void **)&a3[4 * v15 + 4], *((unsigned int *)v13 - 1));
            ++v12;
            v13 += 2;
          }
          while (v12 < *v11);
          return 0;
        }
      }
      goto LABEL_51;
    case 3:
      if (*a3)
      {
        CFIndex v5 = *(_DWORD **)(a1 + 1080);
        if (*v5)
        {
          unint64_t v6 = 0;
          unint64_t v7 = (void **)(v5 + 4);
          do
          {
            unint64_t v8 = *a3;
            if (v6 >= v8) {
              int v9 = v8 - 1;
            }
            else {
              int v9 = v6;
            }
            memcpy(*v7, *(const void **)&a3[4 * v9 + 4], *((unsigned int *)v7 - 1));
            ++v6;
            v7 += 2;
          }
          while (v6 < *v5);
          return 0;
        }
      }
      _os_assert_log();
      _os_crash();
      __break(1u);
LABEL_51:
      _os_assert_log();
      _os_crash();
      __break(1u);
      goto LABEL_52;
    default:
      return 1651532146;
  }
  return result;
}

uint64_t VoiceProcessorV2::RunUplinkHardwareDSP(VoiceProcessorV2 *this, AudioBufferList *a2, AudioTimeStamp *a3)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  atomic_fetch_add((atomic_uint *volatile)this + 621, 1u);
  if (*((_DWORD *)this + 620))
  {
    float v4 = flt_1BB878F50[*((unsigned char *)this + 476) == 0];
    if (*((unsigned char *)this + 476)) {
      VoiceProcessorV2::LogIOError((uint64_t)this, v4, (float)*((unsigned int *)this + 3128), (float)*((unsigned int *)this + 3129), 0.0, "process: tryer acquire failed", a3);
    }
    else {
      VoiceProcessorV2::LogIOError((uint64_t)this, v4, (float)*((unsigned int *)this + 3128), (float)*((unsigned int *)this + 3129), 0.0, "process: not ok to process?!", a3);
    }
LABEL_5:
    CADeprecated::CAMutex::Lock((VoiceProcessorV2 *)((char *)this + 2576));
    ++*((_DWORD *)this + 3128);
    CADeprecated::CAMutex::Unlock((VoiceProcessorV2 *)((char *)this + 2576));
    uint64_t v5 = 1937006964;
    if (*((_DWORD *)this + 3128) == 1) {
      VoiceProcessorV2::LogNonTransientErrors(this, 1);
    }
    goto LABEL_94;
  }
  if (!*((unsigned char *)this + 476))
  {
    VoiceProcessorV2::LogIOError((uint64_t)this, 21.005, (float)*((unsigned int *)this + 3128), (float)*((unsigned int *)this + 3129), 0.0, "process: not ok to process?!", a3);
    goto LABEL_5;
  }
  unint64_t v8 = (char *)this + 12936;
  if (*((unsigned char *)this + 15961))
  {
    if (*((void *)this + 1579))
    {
      double v9 = (double)mach_absolute_time() * 0.0000000416666667;
      *((double *)this + 1992) = v9;
      if (*((double *)this + 1993) == 0.0) {
        *((double *)this + 1993) = v9;
      }
    }
  }
  *((_DWORD *)this + 578) = *((_DWORD *)this + 576);
  unsigned int v10 = atomic_load((unsigned int *)this + 577);
  *((_DWORD *)this + 576) = v10;
  *((_DWORD *)this + 581) = *((_DWORD *)this + 579);
  int v11 = atomic_load((unsigned int *)this + 580);
  *((_DWORD *)this + 579) = v11;
  if (*((unsigned char *)this + 15961))
  {
    if (v11 != *((_DWORD *)this + 581)) {
      VoiceProcessorV2::PListWriteSetDeviceOrientationParameters(this, v11);
    }
    int v12 = *((_DWORD *)this + 576);
    if (v12 != *((_DWORD *)this + 578) && *((unsigned char *)this + 15961)) {
      VoiceProcessorV2::PListWriteSetUIOrientationParameters(this, v12);
    }
  }
  CADeprecated::CAMutex::Lock((VoiceProcessorV2 *)((char *)this + 2576));
  ++*((_DWORD *)this + 3128);
  CADeprecated::CAMutex::Unlock((VoiceProcessorV2 *)((char *)this + 2576));
  if (*((_DWORD *)this + 3128) == 1) {
    VoiceProcessorV2::LogNonTransientErrors(this, 1);
  }
  if (!*((unsigned char *)this + 15961))
  {
    int v15 = (unsigned int *)((char *)this + 648);
    uint64_t v16 = a2;
    goto LABEL_25;
  }
  unsigned char *v8 = 1;
  unint64_t v14 = (VoiceProcessorV2 *)*((void *)this + 1901);
  if (v14)
  {
    int v15 = (unsigned int *)((char *)this + 648);
    VoiceProcessorV2::InjectionOrAdditionFilesCopyPreInjectionABL(v14, a2, v13);
    uint64_t v16 = (AudioBufferList *)*((void *)this + 1901);
LABEL_25:
    UInt32 mDataByteSize = v16->mBuffers[0].mDataByteSize;
    unsigned int v18 = *v15;
    goto LABEL_27;
  }
  UInt32 mDataByteSize = a2->mBuffers[0].mDataByteSize;
  unsigned int v18 = *((_DWORD *)this + 162);
LABEL_27:
  unsigned int v19 = mDataByteSize / v18;
  unsigned int v56 = 0;
  uint64_t v5 = VoiceProcessorV2::FrontEndBlockSizeCheck(this, 0, mDataByteSize / v18, *((_DWORD *)this + 124), a2, &v56);
  if (v5) {
    goto LABEL_94;
  }
  if (*((unsigned char *)this + 15961))
  {
    unint64_t v21 = (AudioBufferList *)*((void *)this + 1901);
    uint64_t v22 = v56;
    if (v21)
    {
      unsigned int v23 = v56;
      if (!v56) {
        unsigned int v23 = *((_DWORD *)this + 124);
      }
      VoiceProcessorV2::InjectionFilesReadSignal(this, 4, v23, v21);
      uint64_t v24 = v22;
      if (!v22) {
        uint64_t v24 = *((unsigned int *)this + 124);
      }
      int v25 = (const AudioBufferList *)*((void *)this + 1901);
      if (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962))
      {
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 1u, v24, v25, a3);
        int v25 = (const AudioBufferList *)*((void *)this + 1901);
      }
      uint64_t v26 = v22;
      if (!v22) {
        uint64_t v26 = *((unsigned int *)this + 124);
      }
      uint64_t v27 = *((void *)this + 2002);
      if (AudioIssueDetectorLibraryLoader(void)::once != -1)
      {
        uint64_t v54 = *((void *)this + 2002);
        unsigned int v52 = v26;
        float v51 = v25;
        dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_9116);
        uint64_t v27 = v54;
        int v25 = v51;
        uint64_t v26 = v52;
      }
      if (AudioIssueDetectorLibraryLoader(void)::libSym) {
        goto LABEL_53;
      }
    }
  }
  else
  {
    uint64_t v22 = v56;
    uint64_t v28 = v56;
    if (!v56) {
      uint64_t v28 = *((unsigned int *)this + 124);
    }
    if (*((unsigned char *)this + 15962)) {
      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 1u, v28, a2, a3);
    }
    uint64_t v26 = v22;
    if (!v22) {
      uint64_t v26 = *((unsigned int *)this + 124);
    }
    uint64_t v27 = *((void *)this + 2002);
    if (AudioIssueDetectorLibraryLoader(void)::once != -1)
    {
      uint64_t v55 = *((void *)this + 2002);
      unsigned int v53 = v26;
      dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_9116);
      uint64_t v27 = v55;
      uint64_t v26 = v53;
    }
    if (AudioIssueDetectorLibraryLoader(void)::libSym)
    {
      int v25 = a2;
LABEL_53:
      AudioIssueDetectorLibraryLoader(void)::libSym(v27, 1, 0, v25, v26, a3);
      LODWORD(v22) = v56;
    }
  }
  if (v22)
  {
    unsigned int v29 = (_DWORD *)*((void *)this + 129);
    if (*v29)
    {
      unint64_t v30 = 0;
      size_t v31 = 4 * v22;
      uint64_t v32 = 4;
      do
      {
        bzero(*(void **)&v29[v32], v31);
        ++v30;
        unsigned int v29 = (_DWORD *)*((void *)this + 129);
        v32 += 4;
      }
      while (v30 < *v29);
    }
    goto LABEL_64;
  }
  uint64_t v33 = (_OWORD *)((char *)this + 624);
  if (!*((unsigned char *)this + 15961))
  {
    long long v37 = *((_OWORD *)this + 40);
    *(_OWORD *)AudioTimeStamp buf = *v33;
    *(_OWORD *)&_OWORD buf[16] = v37;
    *(void *)&uint8_t buf[32] = *((void *)this + 82);
    uint64_t v36 = VoiceProcessorV2::FrontEndFormatConverter(this, (const CAStreamBasicDescription *)buf, *((_DWORD *)this + 105), a2, v19, *((AudioBufferList **)this + 129), 1);
LABEL_63:
    uint64_t v5 = v36;
    if (v36) {
      goto LABEL_94;
    }
    goto LABEL_64;
  }
  __int16 v34 = (const AudioBufferList *)*((void *)this + 1901);
  if (v34)
  {
    long long v35 = *((_OWORD *)this + 40);
    *(_OWORD *)AudioTimeStamp buf = *v33;
    *(_OWORD *)&_OWORD buf[16] = v35;
    *(void *)&uint8_t buf[32] = *((void *)this + 82);
    uint64_t v36 = VoiceProcessorV2::FrontEndFormatConverter(this, (const CAStreamBasicDescription *)buf, *((_DWORD *)this + 105), v34, v19, *((AudioBufferList **)this + 129), 1);
    goto LABEL_63;
  }
LABEL_64:
  if (!*((unsigned char *)this + 1689))
  {
    *((unsigned char *)this + 1689) = 1;
    double mSampleTime = a3->mSampleTime;
    *((void *)this + 215) = *(void *)&a3->mSampleTime;
    *((double *)this + 213) = mSampleTime;
    if (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)) {
      VoiceProcessorV2::WriteTSOverload((std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)this, 0.0, mSampleTime, 1);
    }
    *((_OWORD *)this + 111) = 0u;
    *((_OWORD *)this + 110) = 0u;
    *((_OWORD *)this + 109) = 0u;
    *((_OWORD *)this + 108) = 0u;
    *((_DWORD *)this + 478) = 0;
  }
  double v39 = *((double *)this + 213);
  double v40 = a3->mSampleTime;
  if (v39 == a3->mSampleTime)
  {
    *((void *)this + 214) = 0;
  }
  else
  {
    if (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962))
    {
      VoiceProcessorV2::WriteTSOverload((std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)this, v39, v40, 1);
      double v40 = a3->mSampleTime;
      double v39 = *((double *)this + 213);
    }
    *((double *)this + 214) = v40 - v39;
    if (v40 < v39)
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      BOOL v41 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        unsigned int v42 = (*v41 ? *v41 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
        {
          uint64_t v43 = *((void *)this + 213);
          Float64 v44 = a3->mSampleTime;
          UInt64 mHostTime = a3->mHostTime;
          Float64 mRateScalar = a3->mRateScalar;
          AudioTimeStampFlags mFlags = a3->mFlags;
          *(_DWORD *)AudioTimeStamp buf = 136316674;
          *(void *)&uint8_t buf[4] = "vpProcessUplink_v2.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 246;
          *(_WORD *)&unsigned char buf[18] = 2048;
          *(void *)&buf[20] = v43;
          *(_WORD *)&unsigned char buf[28] = 2048;
          *(Float64 *)&unsigned char buf[30] = v44;
          *(_WORD *)&buf[38] = 2048;
          UInt64 v58 = mHostTime;
          __int16 v59 = 2048;
          Float64 v60 = mRateScalar;
          __int16 v61 = 1024;
          AudioTimeStampFlags v62 = mFlags;
          _os_log_impl(&dword_1BB0CE000, v42, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> mic sample time jumped backwards, expected sample time: %.2lf, input sample time: %.2lf, input host time: %lld, input rate scalar: %.2lf, input flag: %d", buf, 0x40u);
        }
      }
      uint64_t v48 = (int *)*((void *)this + 1578);
      if (v48 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log(v48, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpProcessing/vpProcessUplink_v2.cpp", 246, "RunUplinkHardwareDSP", "mic sample time jumped backwards, expected sample time: %.2lf, input sample time: %.2lf, input host time: %lld, input rate scalar: %.2lf, input flag: %d", *((double *)this + 213), a3->mSampleTime, a3->mHostTime, a3->mRateScalar, a3->mFlags);
      }
      VoiceProcessorV2::LogIOError((uint64_t)this, 21.008, (float)*((unsigned int *)this + 3128), 0.0, 0.0, "mic sample time jumped backwards");
      double v40 = a3->mSampleTime;
    }
  }
  LODWORD(v39) = *((_DWORD *)this + 124);
  *((double *)this + 213) = v40 + (double)*(unint64_t *)&v39;
  VoiceProcessorV2::LoadMatchingReferenceForMicSignalAndFillTsMic(this, v20, a3->mSampleTime);
  float v49 = *((float *)this + 350);
  *((unsigned char *)this + 1404) = v49 != 0.0;
  if (v49 != 0.0) {
    VoiceProcessorV2::PreSRCMicClipDetection(this);
  }
  uint64_t v5 = 0;
LABEL_94:
  atomic_fetch_add((atomic_uint *volatile)this + 621, 0xFFFFFFFF);
  return v5;
}

void sub_1BB4E5ACC(_Unwind_Exception *a1)
{
  atomic_fetch_add((atomic_uint *volatile)(v1 + 2484), 0xFFFFFFFF);
  _Unwind_Resume(a1);
}

void VoiceProcessorV2::LoadMatchingReferenceForMicSignalAndFillTsMic(VoiceProcessorV2 *this, const AudioTimeStamp *a2, double a3)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  float v4 = (char *)this + 12524;
  if (!*((unsigned char *)this + 12524))
  {
    double v8 = a3 - (double)*((int *)this + 296);
    int v9 = CADeprecated::AudioRingBuffer::Fetch(*((const void ****)this + 150), *((AudioBufferList **)this + 130), *((_DWORD *)this + 123), (uint64_t)v8);
    if (!v9)
    {
      v4[2673] = 0;
      if (*v4) {
        goto LABEL_2;
      }
      goto LABEL_104;
    }
    int v10 = v9;
    int v11 = (_DWORD *)*((void *)this + 130);
    if (*v11)
    {
      unint64_t v12 = 0;
      uint64_t v13 = (void **)(v11 + 4);
      do
      {
        bzero(*v13, *((unsigned int *)v13 - 1));
        ++v12;
        v13 += 2;
      }
      while (v12 < *v11);
    }
    uint64_t v14 = *((void *)this + 150);
    int v15 = *(_DWORD *)(v14 + 904);
    uint64_t v16 = v14 + 24 * (v15 & 0x1F);
    uint64_t v17 = (uint64_t *)(v16 + 136);
    unsigned int v18 = (uint64_t *)(v16 + 144);
    unsigned int v19 = (_DWORD *)(v16 + 152);
    int v20 = 7;
    do
    {
      uint64_t v21 = *v17;
      uint64_t v22 = *v18;
    }
    while (*v19 != v15 && v20-- != 0);
    signed int v24 = *((_DWORD *)this + 123);
    double v25 = v8 + (double)v24 + -1.0;
    if (v10 == -1)
    {
      double v32 = v25 - (double)v21 + 1.0;
      int v33 = (int)v32;
      if ((int)v32 >= 1 && v24 > v33)
      {
        int v44 = CADeprecated::AudioRingBuffer::Fetch((const void ***)v14, *((AudioBufferList **)this + 151), (int)v32, *v17);
        if (v44)
        {
          int v45 = v44;
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          __int16 v46 = (void *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(2, VPLogScope(void)::scope, 0))
          {
            int v47 = (*v46 ? *v46 : MEMORY[0x1E4F14500]);
            if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)AudioTimeStamp buf = 136316930;
              unsigned int v53 = "vpProcessUplink_v2.cpp";
              __int16 v54 = 1024;
              int v55 = 579;
              __int16 v56 = 1024;
              int v57 = v33;
              __int16 v58 = 1024;
              *(_DWORD *)__int16 v59 = v45;
              *(_WORD *)&v59[4] = 2048;
              *(void *)&v59[6] = v21;
              *(_WORD *)&v59[14] = 2048;
              *(void *)&v59[16] = v22;
              *(_WORD *)&v59[24] = 2048;
              *(double *)&v59[26] = v8;
              *(_WORD *)&v59[34] = 2048;
              *(double *)&v59[36] = v25;
              _os_log_impl(&dword_1BB0CE000, v47, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> warning: tsref ring buffer: <slightly behind> couldn't read required %d samples, err %d, buf time bounds [%ld, %ld], required sample bounds [%.2lf, %.2lf]", buf, 0x46u);
            }
          }
          uint64_t v48 = (int *)*((void *)this + 1578);
          if (v48 && (v4[3437] || v4[3438]))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            CALegacyLog::log(v48, 2, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpProcessing/vpProcessUplink_v2.cpp", 579, "LoadMatchingReferenceForMicSignalAndFillTsMic", "warning: tsref ring buffer: <slightly behind> couldn't read required %d samples, err %d, buf time bounds [%ld, %ld], required sample bounds [%.2lf, %.2lf]", v33, v45, v21, v22, v8, v25);
          }
          VoiceProcessorV2::LogIOError((uint64_t)this, 21.01, (float)*((unsigned int *)this + 3128), (float)v45, (float)v33, "warning: tsref ring buffer: <slightly behind> couldn't read required");
        }
        float v49 = (_DWORD *)*((void *)this + 130);
        if (*v49)
        {
          unint64_t v50 = 0;
          uint64_t v51 = 4;
          do
          {
            memcpy((void *)(*(void *)&v49[v51] + 4 * (*((_DWORD *)this + 123) - v33)), *(const void **)(*((void *)this + 151) + v51 * 4), 4 * v33);
            ++v50;
            float v49 = (_DWORD *)*((void *)this + 130);
            v51 += 4;
          }
          while (v50 < *v49);
        }
        goto LABEL_100;
      }
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      long long v35 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(2, VPLogScope(void)::scope, 0))
      {
        uint64_t v36 = (*v35 ? *v35 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)AudioTimeStamp buf = 136316674;
          unsigned int v53 = "vpProcessUplink_v2.cpp";
          __int16 v54 = 1024;
          int v55 = 590;
          __int16 v56 = 1024;
          int v57 = v33;
          __int16 v58 = 2048;
          *(void *)__int16 v59 = v21;
          *(_WORD *)&v59[8] = 2048;
          *(void *)&v59[10] = v22;
          *(_WORD *)&v59[18] = 2048;
          *(double *)&v59[20] = v8;
          *(_WORD *)&v59[28] = 2048;
          *(double *)&v59[30] = v25;
          _os_log_impl(&dword_1BB0CE000, v36, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> tsref ring buffer: <slightly behind> the calculated samples in range is %d?!, buf time bounds [%ld, %ld], required sample bounds [%.2lf, %.2lf]", buf, 0x40u);
        }
      }
      long long v37 = (int *)*((void *)this + 1578);
      if (v37 && (v4[3437] || v4[3438]))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log(v37, 2, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpProcessing/vpProcessUplink_v2.cpp", 590, "LoadMatchingReferenceForMicSignalAndFillTsMic", "tsref ring buffer: <slightly behind> the calculated samples in range is %d?!, buf time bounds [%ld, %ld], required sample bounds [%.2lf, %.2lf]", v33, v21, v22, v8, v25);
      }
      VoiceProcessorV2::LogIOError((uint64_t)this, 21.01, (float)*((unsigned int *)this + 3128), (float)v33, (float)v21, "tsref ring buffer: <slightly behind> the calculated samples in range issue");
    }
    else if (v10 == 1)
    {
      double v26 = (double)(v22 - 1) - v8 + 1.0;
      int v27 = (int)v26;
      if ((int)v26 >= 1 && v24 > v27)
      {
        int v39 = CADeprecated::AudioRingBuffer::Fetch((const void ***)v14, *((AudioBufferList **)this + 130), (int)v26, (uint64_t)v8);
        if (v39)
        {
          int v40 = v39;
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          BOOL v41 = (void *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(2, VPLogScope(void)::scope, 0))
          {
            unsigned int v42 = (*v41 ? *v41 : MEMORY[0x1E4F14500]);
            if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)AudioTimeStamp buf = 136316930;
              unsigned int v53 = "vpProcessUplink_v2.cpp";
              __int16 v54 = 1024;
              int v55 = 558;
              __int16 v56 = 1024;
              int v57 = v27;
              __int16 v58 = 1024;
              *(_DWORD *)__int16 v59 = v40;
              *(_WORD *)&v59[4] = 2048;
              *(void *)&v59[6] = v21;
              *(_WORD *)&v59[14] = 2048;
              *(void *)&v59[16] = v22;
              *(_WORD *)&v59[24] = 2048;
              *(double *)&v59[26] = v8;
              *(_WORD *)&v59[34] = 2048;
              *(double *)&v59[36] = v25;
              _os_log_impl(&dword_1BB0CE000, v42, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> warning: tsref ring buffer: <slightly ahead> couldn't read required %d samples, err %d, buf time bounds [%ld, %ld], required sample bounds [%.2lf, %.2lf]", buf, 0x46u);
            }
          }
          uint64_t v43 = (int *)*((void *)this + 1578);
          if (v43 && (v4[3437] || v4[3438]))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            CALegacyLog::log(v43, 2, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpProcessing/vpProcessUplink_v2.cpp", 558, "LoadMatchingReferenceForMicSignalAndFillTsMic", "warning: tsref ring buffer: <slightly ahead> couldn't read required %d samples, err %d, buf time bounds [%ld, %ld], required sample bounds [%.2lf, %.2lf]", v27, v40, v21, v22, v8, v25);
          }
          VoiceProcessorV2::LogIOError((uint64_t)this, 21.01, (float)*((unsigned int *)this + 3128), (float)v40, (float)v27, "warning: tsref ring buffer: <slightly ahead> couldn't read required samples");
        }
LABEL_100:
        int v38 = 0;
        v4[2673] = 0;
        goto LABEL_101;
      }
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      unsigned int v29 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(2, VPLogScope(void)::scope, 0))
      {
        unint64_t v30 = (*v29 ? *v29 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)AudioTimeStamp buf = 136316674;
          unsigned int v53 = "vpProcessUplink_v2.cpp";
          __int16 v54 = 1024;
          int v55 = 566;
          __int16 v56 = 1024;
          int v57 = v27;
          __int16 v58 = 2048;
          *(void *)__int16 v59 = v21;
          *(_WORD *)&v59[8] = 2048;
          *(void *)&v59[10] = v22;
          *(_WORD *)&v59[18] = 2048;
          *(double *)&v59[20] = v8;
          *(_WORD *)&v59[28] = 2048;
          *(double *)&v59[30] = v25;
          _os_log_impl(&dword_1BB0CE000, v30, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> tsref ring buffer: <slightly ahead> the calculated samples in range is %d?!, buf time bounds [%ld, %ld], required sample bounds [%.2lf, %.2lf]", buf, 0x40u);
        }
      }
      size_t v31 = (int *)*((void *)this + 1578);
      if (v31 && (v4[3437] || v4[3438]))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log(v31, 2, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpProcessing/vpProcessUplink_v2.cpp", 566, "LoadMatchingReferenceForMicSignalAndFillTsMic", "tsref ring buffer: <slightly ahead> the calculated samples in range is %d?!, buf time bounds [%ld, %ld], required sample bounds [%.2lf, %.2lf]", v27, v21, v22, v8, v25);
      }
      VoiceProcessorV2::LogIOError((uint64_t)this, 21.01, (float)*((unsigned int *)this + 3128), (float)v27, (float)v21, "warning: tsref ring buffer: <slightly ahead> the calculated samples range issue");
    }
    int v38 = 1;
LABEL_101:
    if (*v4 || v38 && !v4[2673]) {
      goto LABEL_2;
    }
LABEL_104:
    CopyAllBuffersABL(*((UInt32 **)this + 131), *((const AudioBufferList **)this + 129));
    return;
  }
LABEL_2:
  uint64_t v5 = (_DWORD *)*((void *)this + 131);
  if (*v5)
  {
    unint64_t v6 = 0;
    unint64_t v7 = (void **)(v5 + 4);
    do
    {
      bzero(*v7, *((unsigned int *)v7 - 1));
      ++v6;
      v7 += 2;
    }
    while (v6 < *v5);
  }
}

void VoiceProcessorV2::PreSRCMicClipDetection(VoiceProcessorV2 *this)
{
  uint64_t v1 = (_DWORD *)*((void *)this + 131);
  if (*v1)
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    do
    {
      float __C = 0.0;
      vDSP_maxmgv(*(const float **)&v1[v3 + 4], 1, &__C, *((unsigned int *)this + 124));
      BOOL v5 = __C <= 0.999;
      *(unsigned char *)(*((void *)this + 176) + v4) = __C > 0.999;
      unint64_t v6 = *(void **)(*((void *)this + 178) + v3 * 4 + 16);
      uint64_t v7 = *((void *)this + 131) + v3 * 4;
      if (v5)
      {
        bzero(v6, *(unsigned int *)(v7 + 12));
      }
      else
      {
        memcpy(v6, *(const void **)(v7 + 16), *(unsigned int *)(v7 + 12));
        ++*((_DWORD *)this + 370);
      }
      ++v4;
      uint64_t v1 = (_DWORD *)*((void *)this + 131);
      v3 += 4;
    }
    while (v4 < *v1);
  }
}

void *___Z31AudioIssueDetectorLibraryLoaderv_block_invoke_9140()
{
  long long v0 = dlopen("/usr/lib/libAudioIssueDetector.dylib", 1);
  if (v0 || (long long v0 = dlopen("/usr/local/lib/libAudioIssueDetector.dylib", 1)) != 0)
  {
    AudioIssueDetectorLibraryLoader(void)::libSyuint64_t m = dlsym(v0, "AudioIssueDetectorCreate");
    AudioIssueDetectorLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void))dlsym(v0, "AudioIssueDetectorInitialize");
    AudioIssueDetectorLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void))dlsym(v0, "AudioIssueDetectorDispose");
    AudioIssueDetectorLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void, void, void, void, void))dlsym(v0, "AudioIssueDetectorSetNodeFormat");
    AudioIssueDetectorLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v0, "AudioIssueDetectorSetNodeFormatWithDirection");
    AudioIssueDetectorLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v0, "AudioIssueDetectorReset");
    AudioIssueDetectorLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void, void, void, void, void, void))dlsym(v0, "AudioIssueDetectorAnalyzeBuffer");
    AudioIssueDetectorLibraryLoader(void)::libSyuint64_t m = dlsym(v0, "AudioIssueDetectorUpdateReportingSessions");
    AudioIssueDetectorLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v0, "AudioIssueDetectorRemoveNode");
    AudioIssueDetectorLibraryLoader(void)::libSyuint64_t m = dlsym(v0, "AudioIssueDetectorSetUplinkMute");
    AudioIssueDetectorLibraryLoader(void)::libSyuint64_t m = dlsym(v0, "AudioIssueDetectorSetDownlinkVolume");
    AudioIssueDetectorLibraryLoader(void)::libSyuint64_t m = dlsym(v0, "AudioIssueDetectorSetRouteSpecificDownlinkGainAdjustment");
    AudioIssueDetectorLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v0, "AudioIssueDetectorSetSmartCaseMicMute");
  }
  uint64_t result = dlopen("/System/Library/Frameworks/AudioToolbox.framework/libAudioDSP.dylib", 1);
  if (result)
  {
    uint64_t result = dlsym(result, "RegisterAudioUnits_Analyzer");
    if (result)
    {
      return (void *)((uint64_t (*)(void))result)();
    }
  }
  return result;
}

uint64_t VoiceProcessorV2::RunUplinkDynamicsDSP(VoiceProcessorV2 *this, AudioBufferList *ioData, AudioTimeStamp *a3, uint64_t a4)
{
  v12[1] = *MEMORY[0x1E4F143B8];
  unint64_t v6 = (_WORD *)((char *)this + 15961);
  if ((*((unsigned char *)this + 4672) & 0x20) != 0 && (*((unsigned char *)this + 4688) & 0x20) != 0)
  {
    uint64_t v7 = (OpaqueAudioComponentInstance *)*((void *)this + 416);
    if (v7)
    {
      ioActionFlags.uint64_t mNumberBuffers = 512;
      AudioUnitProcess(v7, &ioActionFlags.mNumberBuffers, a3, a4, ioData);
      if (*v6) {
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x30u, a4, ioData, a3);
      }
    }
  }
  if (*(unsigned char *)v6)
  {
    *(void *)&ioActionFlags.uint64_t mNumberBuffers = 1;
    *(void *)&ioActionFlags.mBuffers[0].mNumberChannels = 0x800000001;
    ioActionFlags.mBuffers[0].mData = v12;
    v12[0] = 0;
    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x5Au, 2, &ioActionFlags, a3);
  }
  return 0;
}

uint64_t VoiceProcessorV2::Process(VoiceProcessorV2 *this, const AudioBufferList *a2, AudioTimeStamp *a3, AudioBufferList *a4, AudioTimeStamp *a5, unsigned int *a6, void *a7, unsigned int *a8, AudioStreamPacketDescription *a9)
{
  uint64_t v209 = *MEMORY[0x1E4F143B8];
  int v11 = (char *)this + 15808;
  atomic_fetch_add((atomic_uint *volatile)this + 621, 1u);
  if (*((_DWORD *)this + 620))
  {
    if (*((unsigned char *)this + 476))
    {
      unint64_t v12 = a5;
      VoiceProcessorV2::LogIOError((uint64_t)this, 21.006, (float)*((unsigned int *)this + 3128), (float)*((unsigned int *)this + 3129), 0.0, "process: tryer acquire failed", a3, a4, a5, a6, a7, a8);
LABEL_109:
      CADeprecated::CAMutex::Lock((VoiceProcessorV2 *)((char *)this + 2576));
      ++*((_DWORD *)this + 3128);
      CADeprecated::CAMutex::Unlock((VoiceProcessorV2 *)((char *)this + 2576));
      if (*((_DWORD *)this + 3128) == 1) {
        VoiceProcessorV2::LogNonTransientErrors(this, 1);
      }
      LODWORD(v9) = *((_DWORD *)this + 128);
      double v80 = *((double *)this + 83);
      if (*((double *)this + 108) <= 0.0) {
        double v81 = 24000.0;
      }
      else {
        double v81 = *((double *)this + 108);
      }
      *a6 = a4->mBuffers[0].mDataByteSize >> 2;
      if (*((_DWORD *)this + 20) == 1)
      {
        if (a4->mNumberBuffers)
        {
          unint64_t v82 = 0;
          p_mData = &a4->mBuffers[0].mData;
          do
          {
            bzero(*p_mData, *((unsigned int *)p_mData - 1));
            ++v82;
            p_mData += 2;
          }
          while (v82 < a4->mNumberBuffers);
        }
      }
      else
      {
        *((_DWORD *)this + 319) = 0;
        *((unsigned char *)this + 1272) = 0;
        FadeOutOverOneFrame(*((AudioBufferList **)this + 158), a4);
      }
      double v84 = v80 * (double)v9 / v81;
      if (*((unsigned char *)this + 1856)) {
        *((double *)this + 224) = v84 + *((double *)this + 224);
      }
      long long v85 = *(_OWORD *)&a3->mSampleTime;
      long long v86 = *(_OWORD *)&a3->mRateScalar;
      long long v87 = *(_OWORD *)&a3->mSMPTETime.mHours;
      *(_OWORD *)&v12->mSMPTETime.mSubframes = *(_OWORD *)&a3->mSMPTETime.mSubframes;
      *(_OWORD *)&v12->mSMPTETime.mHours = v87;
      *(_OWORD *)&v12->double mSampleTime = v85;
      *(_OWORD *)&v12->Float64 mRateScalar = v86;
      *(void *)&long long v85 = *((void *)this + 216);
      Float64 v88 = v84 + *(double *)&v85;
      *((Float64 *)this + 216) = v88;
      v12->double mSampleTime = v88;
      v12->mFlags |= 1u;
      LODWORD(v85) = *((_DWORD *)this + 124);
      *((double *)this + 213) = a3->mSampleTime + (double)(unint64_t)v85;
      if (v11[153] && *((void *)this + 1579))
      {
        uint64_t v89 = mach_absolute_time();
        float v90 = (int *)*((void *)this + 1579);
        if (VPTimestampLogScope(void)::once != -1) {
          dispatch_once(&VPTimestampLogScope(void)::once, &__block_literal_global_6_30742);
        }
        CALegacyLog::log(v90, 5, VPTimestampLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpProcessing/vpProcessUplink_v2.cpp", 483, "Process", "Bailed UL %f %f %f", a3->mSampleTime, *((double *)this + 1992), (double)v89 * 0.0000000416666667 - *((double *)this + 1992));
      }
      if (((*((_DWORD *)this + 20) - 2) & 0xFFFFFFFD) != 0) {
        uint64_t result = 1937006964;
      }
      else {
        uint64_t result = 0;
      }
      goto LABEL_130;
    }
LABEL_108:
    unint64_t v12 = a5;
    VoiceProcessorV2::LogIOError((uint64_t)this, 21.005, (float)*((unsigned int *)this + 3128), (float)*((unsigned int *)this + 3129), 0.0, "process: not ok to process?!", a3, a4, a5, a6, a7, a8);
    goto LABEL_109;
  }
  if (!*((unsigned char *)this + 476)) {
    goto LABEL_108;
  }
  uint64_t v13 = a3;
  (*(void (**)(VoiceProcessorV2 *, const AudioBufferList *))(*(void *)this + 192))(this, a2);
  VoiceProcessorV2::SrcAndAppendToRingBuffer(this, 1, *((unsigned int *)this + 123), *((AudioBufferList **)this + 130), *((_DWORD **)this + 130), 0, v13, v14);
  VoiceProcessorV2::SrcAndAppendToRingBuffer(this, 0, *((unsigned int *)this + 124), *((AudioBufferList **)this + 131), *((_DWORD **)this + 178), (AudioBufferList *)*((unsigned __int8 *)this + 1404), v13, v15);
  if (!*((unsigned char *)this + 1856))
  {
    *((_OWORD *)this + 114) = 0u;
    *((_OWORD *)this + 115) = 0u;
    *((_OWORD *)this + 112) = 0u;
    *((_OWORD *)this + 113) = 0u;
    *((unsigned char *)this + 1856) = 1;
    *((double *)this + 224) = v13->mSampleTime * *((double *)this + 103) / *((double *)this + 78);
    *((_DWORD *)this + 479) = 0;
  }
  *((void *)this + 225) = v13->mHostTime;
  double v16 = *((double *)this + 214);
  if (v16 > 0.0)
  {
    double v17 = v16 * *((double *)this + 103) / *((double *)this + 78);
    unsigned int v18 = vcvtmd_u64_f64(v17);
    float v19 = v17 - (double)v18 + *((float *)this + 479);
    if (v19 > 1.0)
    {
      float v19 = v19 + -1.0;
      ++v18;
    }
    *((float *)this + 479) = v19;
    *((double *)this + 224) = *((double *)this + 224) + (double)v18;
  }
  unsigned int v20 = *((_DWORD *)this + 127);
  int v201 = v11;
  if (*((_DWORD *)this + 334) >= v20)
  {
    uint64_t v21 = &VPStrategyManager::StateAsString(unsigned long long)::stateNames;
    do
    {
      if (!*((_DWORD *)this + 1129) && *((_DWORD *)this + 324) < v20) {
        break;
      }
      if (v20)
      {
        uint64_t v22 = (_DWORD *)*((void *)this + 134);
        if (*v22 == *((_DWORD *)this + 323))
        {
          unsigned int v23 = *((_DWORD *)this + 324);
          if (v23)
          {
            if (v23 >= v20) {
              unsigned int v24 = v20;
            }
            else {
              unsigned int v24 = *((_DWORD *)this + 324);
            }
            unsigned int v25 = *((_DWORD *)this + 322) - *((_DWORD *)this + 325);
            if (v25 >= v24) {
              uint64_t v26 = v24;
            }
            else {
              uint64_t v26 = v25;
            }
            if (*v22)
            {
              unint64_t v27 = 0;
              uint64_t v28 = (uint64_t *)(v22 + 4);
              unsigned int v29 = (void **)(v22 + 4);
              do
              {
                unint64_t v30 = *v29;
                v29 += 2;
                memcpy(v30, (const void *)(*((void *)this + 164)+ 4 * (*((_DWORD *)this + 325) + *((_DWORD *)this + 322) * v27++)), 4 * v26);
                unint64_t v31 = *((unsigned int *)this + 323);
              }
              while (v27 < v31);
              if (v24 > v25 && v31)
              {
                unint64_t v32 = 0;
                do
                {
                  uint64_t v33 = *v28;
                  v28 += 2;
                  memcpy((void *)(v33 + 4 * v26), (const void *)(*((void *)this + 164) + 4 * (*((_DWORD *)this + 322) * v32++)), 4 * (v24 - v26));
                }
                while (v32 < *((unsigned int *)this + 323));
              }
            }
            *((_DWORD *)this + 324) -= v24;
            unsigned int v34 = *((_DWORD *)this + 325) + v24;
            *((_DWORD *)this + 325) = v34;
            unsigned int v35 = *((_DWORD *)this + 322);
            BOOL v36 = v34 >= v35;
            unsigned int v37 = v34 - v35;
            int v11 = v201;
            uint64_t v21 = &VPStrategyManager::StateAsString(unsigned long long)::stateNames;
            if (v36) {
              *((_DWORD *)this + 325) = v37;
            }
          }
        }
      }
      unsigned int v38 = *((_DWORD *)this + 127);
      int v39 = (_DWORD *)*((void *)this + 135);
      int v40 = *v39;
      if (v38) {
        BOOL v41 = v40 == *((_DWORD *)this + 333);
      }
      else {
        BOOL v41 = 0;
      }
      if (v41)
      {
        unsigned int v42 = *((_DWORD *)this + 334);
        if (v42)
        {
          if (v42 >= v38) {
            unsigned int v43 = *((_DWORD *)this + 127);
          }
          else {
            unsigned int v43 = *((_DWORD *)this + 334);
          }
          unsigned int v44 = *((_DWORD *)this + 332) - *((_DWORD *)this + 335);
          if (v44 >= v43) {
            uint64_t v45 = v43;
          }
          else {
            uint64_t v45 = v44;
          }
          if (v40)
          {
            unint64_t v46 = 0;
            int v47 = (uint64_t *)(v39 + 4);
            uint64_t v48 = (void **)(v39 + 4);
            do
            {
              float v49 = *v48;
              v48 += 2;
              memcpy(v49, (const void *)(*((void *)this + 169)+ 4 * (*((_DWORD *)this + 335) + *((_DWORD *)this + 332) * v46++)), 4 * v45);
              unint64_t v50 = *((unsigned int *)this + 333);
            }
            while (v46 < v50);
            if (v43 > v44 && v50)
            {
              unint64_t v51 = 0;
              do
              {
                uint64_t v52 = *v47;
                v47 += 2;
                memcpy((void *)(v52 + 4 * v45), (const void *)(*((void *)this + 169) + 4 * (*((_DWORD *)this + 332) * v51++)), 4 * (v43 - v45));
              }
              while (v51 < *((unsigned int *)this + 333));
            }
          }
          *((_DWORD *)this + 334) -= v43;
          unsigned int v53 = *((_DWORD *)this + 335) + v43;
          *((_DWORD *)this + 335) = v53;
          unsigned int v54 = *((_DWORD *)this + 332);
          BOOL v36 = v53 >= v54;
          unsigned int v55 = v53 - v54;
          int v11 = v201;
          uint64_t v21 = &VPStrategyManager::StateAsString(unsigned long long)::stateNames;
          if (v36) {
            *((_DWORD *)this + 335) = v55;
          }
        }
      }
      if (!*((unsigned char *)this + 1856)) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      (*(void (**)(VoiceProcessorV2 *, char *))(*(void *)this + 200))(this, (char *)this + 1792);
      if (!*((unsigned char *)this + 1856)) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      uint64_t v56 = *((void *)this + 2004);
      uint64_t v57 = *((void *)this + 136);
      uint64_t v58 = *((unsigned int *)this + 127);
      if (AudioDataAnalysisManagerLibraryLoader(void)::once != -1) {
        dispatch_once(&AudioDataAnalysisManagerLibraryLoader(void)::once, &__block_literal_global_50);
      }
      if (v21[43]) {
        ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *))v21[43])(v56, 42, v57, v58, (char *)this + 1792);
      }
      if (!*((unsigned char *)this + 1856)) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      __int16 v59 = (CA::AudioSampleRateConverter **)*((void *)this + 249);
      uint64_t v60 = *((unsigned int *)this + 127);
      if (v59)
      {
        __int16 v61 = (const AudioBufferList *)*((void *)this + 137);
        unsigned int ExpectedNumberOfOutputFrames = CA::AudioSampleRateConverter::GetExpectedNumberOfOutputFrames(*v59);
        VoiceProcessor::SampleRateConverter::Convert(*((CA::AudioSampleRateConverter ***)this + 249), (unsigned int *)this + 127, &ExpectedNumberOfOutputFrames, *((const AudioBufferList **)this + 136), *((const AudioBufferList **)this + 137));
        uint64_t v60 = ExpectedNumberOfOutputFrames;
      }
      else
      {
        __int16 v61 = (const AudioBufferList *)*((void *)this + 136);
        unsigned int ExpectedNumberOfOutputFrames = *((_DWORD *)this + 127);
      }
      if (v11[153] || v11[154]) {
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x2Fu, v60, v61, v13);
      }
      (*(void (**)(VoiceProcessorV2 *, const AudioBufferList *, char *, uint64_t))(*(void *)this + 208))(this, v61, (char *)this + 1792, v60);
      if (v61->mNumberBuffers == *((_DWORD *)this + 305))
      {
        unsigned int v62 = 0;
        if (v60)
        {
          int v63 = *((_DWORD *)this + 304);
          unsigned int v64 = v63 - *((_DWORD *)this + 306);
          if (v64)
          {
            if (v64 >= v60) {
              unsigned int v62 = v60;
            }
            else {
              unsigned int v62 = v63 - *((_DWORD *)this + 306);
            }
            unsigned int v65 = v63 - *((_DWORD *)this + 308);
            if (v65 >= v62) {
              uint64_t v66 = v62;
            }
            else {
              uint64_t v66 = v65;
            }
            if (v61->mNumberBuffers)
            {
              unint64_t v67 = 0;
              double v68 = &v61->mBuffers[0].mData;
              uint64_t v69 = (const void **)&v61->mBuffers[0].mData;
              do
              {
                int v70 = *v69;
                v69 += 2;
                memcpy((void *)(*((void *)this + 155)+ 4 * (*((_DWORD *)this + 308) + *((_DWORD *)this + 304) * v67++)), v70, 4 * v66);
                unint64_t v71 = *((unsigned int *)this + 305);
              }
              while (v67 < v71);
              if (v62 > v65 && v71)
              {
                unint64_t v72 = 0;
                do
                {
                  AudioStreamBasicDescription v73 = (char *)*v68;
                  v68 += 2;
                  memcpy((void *)(*((void *)this + 155) + 4 * (*((_DWORD *)this + 304) * v72++)), &v73[4 * v66], 4 * (v62 - v66));
                }
                while (v72 < *((unsigned int *)this + 305));
              }
            }
            *((_DWORD *)this + 306) += v62;
            unsigned int v74 = *((_DWORD *)this + 308) + v62;
            *((_DWORD *)this + 308) = v74;
            unsigned int v75 = *((_DWORD *)this + 304);
            BOOL v36 = v74 >= v75;
            unsigned int v76 = v74 - v75;
            if (v36) {
              *((_DWORD *)this + 308) = v76;
            }
            uint64_t v13 = a3;
            int v11 = v201;
            uint64_t v21 = &VPStrategyManager::StateAsString(unsigned long long)::stateNames;
          }
        }
      }
      else
      {
        unsigned int v62 = 0;
      }
      if (v62 != v60)
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        unint64_t v77 = (void *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
        {
          uint64_t v78 = (*v77 ? *v77 : MEMORY[0x1E4F14500]);
          if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
          {
            buf.uint64_t mNumberBuffers = 136315906;
            *(void *)(&buf.mNumberBuffers + 1) = "vpProcessUplink_v2.cpp";
            LOWORD(buf.mBuffers[0].mDataByteSize) = 1024;
            *(UInt32 *)((char *)&buf.mBuffers[0].mDataByteSize + 2) = 395;
            WORD1(buf.mBuffers[0].mData) = 1024;
            HIDWORD(buf.mBuffers[0].mData) = v60;
            __int16 v205 = 1024;
            LODWORD(v206) = v62;
            _os_log_impl(&dword_1BB0CE000, v78, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> mNewOutRingBuff has encountered an overrun: tried to write %u but only had space for %u samples", (uint8_t *)&buf, 0x1Eu);
          }
        }
        unint64_t v79 = (int *)*((void *)this + 1578);
        if (v79 && (v11[153] || v11[154]))
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          CALegacyLog::log(v79, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpProcessing/vpProcessUplink_v2.cpp", 395, "Process", "mNewOutRingBuff has encountered an overrun: tried to write %u but only had space for %u samples", v60, v62);
        }
      }
      unsigned int v20 = *((_DWORD *)this + 127);
      *((double *)this + 224) = *((double *)this + 224) + (double)v20;
      *((unsigned char *)this + 2081) = *((unsigned char *)this + 2080);
    }
    while (*((_DWORD *)this + 334) >= v20);
    double v16 = *((double *)this + 214);
  }
  unint64_t v92 = *((void *)this + 235);
  unint64_t v93 = *((void *)this + 234);
  unint64_t v94 = *((void *)this + 233) * *((unsigned int *)this + 124) * v92 / v93;
  uint64_t v95 = *((void *)this + 236);
  *((void *)this + 236) = v94;
  *((void *)this + 235) = ++v92;
  BOOL v96 = v92 > v93;
  unint64_t v97 = v92 - v93;
  if (v96)
  {
    *((void *)this + 235) = v97;
    *((void *)this + 236) = 0;
  }
  UInt32 v98 = v94 - v95;
  *((_DWORD *)this + 474) = v94 - v95;
  long long v99 = (_DWORD *)*((void *)this + 157);
  int v100 = *v99;
  if (v98) {
    BOOL v101 = v100 == *((_DWORD *)this + 305);
  }
  else {
    BOOL v101 = 0;
  }
  if (v101 && (UInt32 v102 = *((_DWORD *)this + 306)) != 0)
  {
    if (v102 >= v98) {
      unsigned int v103 = v98;
    }
    else {
      unsigned int v103 = *((_DWORD *)this + 306);
    }
    unsigned int v104 = *((_DWORD *)this + 304) - *((_DWORD *)this + 307);
    if (v104 >= v103) {
      uint64_t v105 = v103;
    }
    else {
      uint64_t v105 = v104;
    }
    if (v100)
    {
      unint64_t v106 = 0;
      unint64_t v107 = (void **)(v99 + 4);
      do
      {
        __int16 v108 = *v107;
        v107 += 2;
        memcpy(v108, (const void *)(*((void *)this + 155)+ 4 * (*((_DWORD *)this + 307) + *((_DWORD *)this + 304) * v106++)), 4 * v105);
        unint64_t v109 = *((unsigned int *)this + 305);
      }
      while (v106 < v109);
      if (v103 > v104 && v109)
      {
        unint64_t v110 = 0;
        int v111 = (uint64_t *)(v99 + 4);
        do
        {
          uint64_t v112 = *v111;
          v111 += 2;
          memcpy((void *)(v112 + 4 * v105), (const void *)(*((void *)this + 155) + 4 * (*((_DWORD *)this + 304) * v110++)), 4 * (v103 - v105));
        }
        while (v110 < *((unsigned int *)this + 305));
      }
    }
    *((_DWORD *)this + 306) -= v103;
    unsigned int v113 = *((_DWORD *)this + 307) + v103;
    *((_DWORD *)this + 307) = v113;
    unsigned int v114 = *((_DWORD *)this + 304);
    BOOL v36 = v113 >= v114;
    unsigned int v115 = v113 - v114;
    uint64_t v116 = v201;
    if (v36) {
      *((_DWORD *)this + 307) = v115;
    }
  }
  else
  {
    unsigned int v103 = 0;
    uint64_t v116 = v201;
  }
  if (v103 != v98)
  {
    VoiceProcessorV2::LogIOError((uint64_t)this, 21.0, (float)*((unsigned int *)this + 3128), (float)v98, (float)v103, "process: ERROR output buffer has encountered an underrun");
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    unint64_t v117 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      int v118 = (*v117 ? *v117 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v118, OS_LOG_TYPE_ERROR))
      {
        buf.uint64_t mNumberBuffers = 136315906;
        *(void *)(&buf.mNumberBuffers + 1) = "vpProcessUplink_v2.cpp";
        LOWORD(buf.mBuffers[0].mDataByteSize) = 1024;
        *(UInt32 *)((char *)&buf.mBuffers[0].mDataByteSize + 2) = 618;
        WORD1(buf.mBuffers[0].mData) = 1024;
        HIDWORD(buf.mBuffers[0].mData) = v98;
        __int16 v205 = 1024;
        LODWORD(v206) = v103;
        _os_log_impl(&dword_1BB0CE000, v118, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> process: ERROR output buffer has encountered an underrun, need %d, have %d samples", (uint8_t *)&buf, 0x1Eu);
      }
    }
    int v119 = (int *)*((void *)this + 1578);
    if (v119 && (v116[153] || v116[154]))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      CALegacyLog::log(v119, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpProcessing/vpProcessUplink_v2.cpp", 618, "HandleUplinkOutputTimeStamps", "process: ERROR output buffer has encountered an underrun, need %d, have %d samples", v98, v103);
    }
  }
  if (v116[153])
  {
    uint64_t v120 = *((void *)this + 157);
    unsigned int ExpectedNumberOfOutputFrames = v98;
    if (*v116)
    {
      float v121 = (CA::AudioSampleRateConverter **)*((void *)this + 1977);
      if (v121)
      {
        unsigned int v122 = CA::AudioSampleRateConverter::GetExpectedNumberOfOutputFrames(*v121);
      }
      else
      {
        unsigned int v122 = v98;
        if (*((_DWORD *)this + 89) == *((_DWORD *)this + 243))
        {
          unsigned int v202 = v98;
          if (*(_DWORD *)v120 == *((_DWORD *)this + 3961))
          {
            UInt32 v123 = 0;
            if (v98)
            {
              int v124 = *((_DWORD *)this + 3960);
              unsigned int v122 = v98;
              UInt32 v125 = v124 - *((_DWORD *)this + 3962);
              if (!v125) {
                goto LABEL_241;
              }
              if (v125 >= v98) {
                UInt32 v123 = v98;
              }
              else {
                UInt32 v123 = v124 - *((_DWORD *)this + 3962);
              }
              UInt32 v126 = v124 - *((_DWORD *)this + 3964);
              if (v126 >= v123) {
                uint64_t v127 = v123;
              }
              else {
                uint64_t v127 = v126;
              }
              if (*(_DWORD *)v120)
              {
                unint64_t v128 = 0;
                long long v129 = (const void **)(v120 + 16);
                do
                {
                  int64_t v130 = *v129;
                  v129 += 2;
                  memcpy((void *)(*((void *)this + 1983)+ 4 * (*((_DWORD *)this + 3964) + *((_DWORD *)this + 3960) * v128++)), v130, 4 * v127);
                  unint64_t v131 = *((unsigned int *)this + 3961);
                }
                while (v128 < v131);
                uint64_t v116 = v201;
                if (v123 > v126)
                {
                  if (v131)
                  {
                    unint64_t v132 = 0;
                    unint64_t v133 = (uint64_t *)(v120 + 16);
                    do
                    {
                      uint64_t v134 = *v133;
                      v133 += 2;
                      memcpy((void *)(*((void *)this + 1983) + 4 * (*((_DWORD *)this + 3960) * v132++)), (const void *)(v134 + 4 * v127), 4 * (v123 - v127));
                    }
                    while (v132 < *((unsigned int *)this + 3961));
                  }
                }
              }
              *((_DWORD *)this + 3962) += v123;
              UInt32 v135 = *((_DWORD *)this + 3964) + v123;
              *((_DWORD *)this + 3964) = v135;
              UInt32 v136 = *((_DWORD *)this + 3960);
              BOOL v36 = v135 >= v136;
              UInt32 v137 = v135 - v136;
              if (v36) {
                *((_DWORD *)this + 3964) = v137;
              }
            }
          }
          else
          {
            UInt32 v123 = 0;
          }
          unsigned int v122 = v98;
LABEL_241:
          if (v123 != v122)
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            unint64_t v165 = (void *)VPLogScope(void)::scope;
            if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
            {
              float v166 = (*v165 ? *v165 : MEMORY[0x1E4F14500]);
              if (os_log_type_enabled(v166, OS_LOG_TYPE_ERROR))
              {
                buf.uint64_t mNumberBuffers = 136315906;
                *(void *)(&buf.mNumberBuffers + 1) = "vpDebug_Loopback.cpp";
                LOWORD(buf.mBuffers[0].mDataByteSize) = 1024;
                *(UInt32 *)((char *)&buf.mBuffers[0].mDataByteSize + 2) = 84;
                WORD1(buf.mBuffers[0].mData) = 1024;
                HIDWORD(buf.mBuffers[0].mData) = v123;
                __int16 v205 = 1024;
                LODWORD(v206) = v122;
                _os_log_impl(&dword_1BB0CE000, v166, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> loopbackwrite ERROR wrote %d (requested %d) frames", (uint8_t *)&buf, 0x1Eu);
              }
            }
            int v167 = (int *)*((void *)this + 1578);
            if (v167 && (v116[153] || v116[154]))
            {
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              CALegacyLog::log(v167, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_Loopback.cpp", 84, "LoopBackWrite", "loopbackwrite ERROR wrote %d (requested %d) frames", v123, v122);
            }
          }
          goto LABEL_257;
        }
      }
      unsigned int v202 = v122;
      if (v122 <= *((_DWORD *)this + 3956) && (uint64_t v138 = *((void *)this + 1979)) != 0)
      {
        float v139 = (CA::AudioSampleRateConverter **)*((void *)this + 1977);
        if (v139)
        {
          *(void *)&buf.uint64_t mNumberBuffers = 1;
          buf.mBuffers[0] = *(AudioBuffer *)(v120 + 8);
          VoiceProcessor::SampleRateConverter::Convert(v139, &ExpectedNumberOfOutputFrames, &v202, &buf, (const AudioBufferList *)v138);
          unsigned int v122 = v202;
        }
        else
        {
          memcpy(*(void **)(v138 + 16), *(const void **)(v120 + 16), 4 * v122);
        }
        long long v145 = (const void **)*((void *)this + 1979);
        LODWORD(v146) = *(_DWORD *)v145;
        if (*(_DWORD *)v145 >= 2u)
        {
          unint64_t v147 = 1;
          uint64_t v148 = 4;
          do
          {
            memcpy((void *)v145[v148], v145[2], 4 * v122);
            ++v147;
            long long v145 = (const void **)*((void *)this + 1979);
            unint64_t v146 = *(unsigned int *)v145;
            v148 += 2;
          }
          while (v147 < v146);
        }
        if (v146 == *((_DWORD *)this + 3961))
        {
          UInt32 v123 = 0;
          if (v122)
          {
            int v149 = *((_DWORD *)this + 3960);
            unsigned int v150 = v149 - *((_DWORD *)this + 3962);
            if (v150)
            {
              if (v150 >= v122) {
                UInt32 v123 = v122;
              }
              else {
                UInt32 v123 = v149 - *((_DWORD *)this + 3962);
              }
              UInt32 v151 = v149 - *((_DWORD *)this + 3964);
              if (v151 >= v123) {
                unint64_t v152 = v123;
              }
              else {
                unint64_t v152 = v151;
              }
              if (v146)
              {
                unint64_t v153 = 0;
                float v197 = (unsigned int *)v152;
                size_t v154 = 4 * v152;
                unint64_t v155 = v145 + 2;
                do
                {
                  unsigned int v156 = *v155;
                  v155 += 2;
                  memcpy((void *)(*((void *)this + 1983)+ 4 * (*((_DWORD *)this + 3964) + *((_DWORD *)this + 3960) * v153++)), v156, v154);
                  unint64_t v157 = *((unsigned int *)this + 3961);
                }
                while (v153 < v157);
                uint64_t v116 = v201;
                int v158 = v197;
                if (v123 > v151)
                {
                  if (v157)
                  {
                    unint64_t v159 = 0;
                    unsigned int v160 = (uint64_t *)(v145 + 2);
                    do
                    {
                      uint64_t v161 = *v160;
                      v160 += 2;
                      memcpy((void *)(*((void *)this + 1983) + 4 * (*((_DWORD *)this + 3960) * v159)), (const void *)(v161 + 4 * (void)v158), 4 * (v123 - v197));
                      int v158 = v197;
                      ++v159;
                    }
                    while (v159 < *((unsigned int *)this + 3961));
                  }
                }
              }
              *((_DWORD *)this + 3962) += v123;
              UInt32 v162 = *((_DWORD *)this + 3964) + v123;
              *((_DWORD *)this + 3964) = v162;
              UInt32 v163 = *((_DWORD *)this + 3960);
              BOOL v36 = v162 >= v163;
              UInt32 v164 = v162 - v163;
              if (v36) {
                *((_DWORD *)this + 3964) = v164;
              }
            }
          }
          goto LABEL_241;
        }
      }
      else
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        float v140 = (void *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
        {
          int64_t v141 = (*v140 ? *v140 : MEMORY[0x1E4F14500]);
          if (os_log_type_enabled(v141, OS_LOG_TYPE_ERROR))
          {
            uint64_t v142 = *((void *)this + 1979);
            int v143 = *((_DWORD *)this + 3956);
            buf.uint64_t mNumberBuffers = 136316162;
            *(void *)(&buf.mNumberBuffers + 1) = "vpDebug_Loopback.cpp";
            LOWORD(buf.mBuffers[0].mDataByteSize) = 1024;
            *(UInt32 *)((char *)&buf.mBuffers[0].mDataByteSize + 2) = 75;
            WORD1(buf.mBuffers[0].mData) = 1024;
            HIDWORD(buf.mBuffers[0].mData) = v122;
            __int16 v205 = 2048;
            uint64_t v206 = v142;
            __int16 v207 = 1024;
            int v208 = v143;
            _os_log_impl(&dword_1BB0CE000, v141, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> loopbackwrite: ERROR can't write %d frames to loopbackABL ABL=%p, capacity=%d", (uint8_t *)&buf, 0x28u);
          }
        }
        unint64_t v144 = (int *)*((void *)this + 1578);
        if (v144 && (v116[153] || v116[154]))
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          CALegacyLog::log(v144, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_Loopback.cpp", 75, "LoopBackWrite", "loopbackwrite: ERROR can't write %d frames to loopbackABL ABL=%p, capacity=%d", v122, *((const void **)this + 1979), *((_DWORD *)this + 3956));
        }
      }
      UInt32 v123 = 0;
      goto LABEL_241;
    }
  }
LABEL_257:
  uint64_t v168 = a4;
  if (*((_DWORD *)this + 252) * v98 > a4->mBuffers[0].mDataByteSize)
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    int v169 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      int v170 = (*v169 ? *v169 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v170, OS_LOG_TYPE_ERROR))
      {
        UInt32 mDataByteSize = a4->mBuffers[0].mDataByteSize;
        int v172 = *((_DWORD *)this + 252) * v98;
        buf.uint64_t mNumberBuffers = 136315906;
        *(void *)(&buf.mNumberBuffers + 1) = "vpProcessUplink_v2.cpp";
        LOWORD(buf.mBuffers[0].mDataByteSize) = 1024;
        *(UInt32 *)((char *)&buf.mBuffers[0].mDataByteSize + 2) = 625;
        WORD1(buf.mBuffers[0].mData) = 1024;
        HIDWORD(buf.mBuffers[0].mData) = mDataByteSize;
        __int16 v205 = 1024;
        LODWORD(v206) = v172;
        _os_log_impl(&dword_1BB0CE000, v170, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> CoreAudio: ***** VP BLOCK SERIOUS ERROR: PROCESS - ioOutData buffer (%d bytes) smaller than what VP is configured to output (%d bytes)!\n", (uint8_t *)&buf, 0x1Eu);
      }
    }
    unsigned int v173 = (int *)*((void *)this + 1578);
    if (v173 && (v116[153] || v116[154]))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      CALegacyLog::log(v173, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpProcessing/vpProcessUplink_v2.cpp", 625, "HandleUplinkOutputTimeStamps", "CoreAudio: ***** VP BLOCK SERIOUS ERROR: PROCESS - ioOutData buffer (%d bytes) smaller than what VP is configured to output (%d bytes)!\n", a4->mBuffers[0].mDataByteSize, *((_DWORD *)this + 252) * v98);
    }
    uint64_t v168 = a4;
    UInt32 v98 = a4->mBuffers[0].mDataByteSize / *((_DWORD *)this + 252);
  }
  memcpy(v168->mBuffers[0].mData, *(const void **)(*((void *)this + 157) + 16), 4 * v98);
  *a6 = v98;
  v168->mBuffers[0].UInt32 mDataByteSize = *((_DWORD *)this + 250) * v98;
  uint64_t v174 = *a6;
  if (v116[153] && (VoiceProcessorV2::InjectionFilesReadSignal(this, 9, v174, v168), uint64_t v174 = *a6, v116[153])
    || v116[154])
  {
    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x31u, v174, a4, v13);
  }
  if (a8) {
    *a8 = 0;
  }
  if (v16 > 0.0)
  {
    double v175 = *((double *)this + 123) * v16 / *((double *)this + 78);
    unsigned int v176 = vcvtmd_u64_f64(v175);
    float v177 = v175 - (double)v176 + *((float *)this + 478);
    if (v177 > 1.0)
    {
      float v177 = v177 + -1.0;
      ++v176;
    }
    *((float *)this + 478) = v177;
    *((double *)this + 216) = *((double *)this + 216) + (double)v176;
  }
  long long v178 = *(_OWORD *)&v13->mSampleTime;
  long long v179 = *(_OWORD *)&v13->mRateScalar;
  long long v180 = *(_OWORD *)&v13->mSMPTETime.mHours;
  *(_OWORD *)&a5->mSMPTETime.mSubframes = *(_OWORD *)&v13->mSMPTETime.mSubframes;
  *(_OWORD *)&a5->mSMPTETime.mHours = v180;
  *(_OWORD *)&a5->double mSampleTime = v178;
  *(_OWORD *)&a5->Float64 mRateScalar = v179;
  a5->double mSampleTime = *((Float64 *)this + 216);
  a5->mFlags |= 1u;
  *((double *)this + 216) = *((double *)this + 216) + (double)v98;
  uint64_t v181 = *((void *)this + 2002);
  int v182 = *((unsigned __int8 *)this + 2080);
  uint64_t v183 = *a6;
  if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_9116);
  }
  if (AudioIssueDetectorLibraryLoader(void)::libSym) {
    AudioIssueDetectorLibraryLoader(void)::libSym(v181, 49, v182 != 0, a4, v183, (char *)this + 1728);
  }
  *((_DWORD *)this + 128) = *((_DWORD *)this + 127);
  long long v184 = *((_OWORD *)this + 40);
  *(_OWORD *)((char *)this + 664) = *((_OWORD *)this + 39);
  *(_OWORD *)((char *)this + 680) = v184;
  *((void *)this + 87) = *((void *)this + 82);
  *((void *)this + 112) = *((void *)this + 107);
  long long v185 = *(_OWORD *)((char *)this + 840);
  *((_OWORD *)this + 54) = *(_OWORD *)((char *)this + 824);
  *((_OWORD *)this + 55) = v185;
  int v186 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 20) = v186;
  if (v186 != 1)
  {
    if (*((unsigned char *)this + 1272)
      || (uint64_t v187 = FadeInOverFewFrames(*((AudioBufferList **)this + 158), a4, *((unsigned int *)this + 319), *((_DWORD *)this + 320)), *((unsigned char *)this + 1272) = v187, *((_DWORD *)this + 319) = HIDWORD(v187), (_BYTE)v187))
    {
      CopyAllBuffersABL(*((UInt32 **)this + 158), a4);
    }
  }
  if (v116[153] && *((void *)this + 1579))
  {
    double v188 = (double)mach_absolute_time() * 0.0000000416666667;
    long long v189 = (int *)*((void *)this + 1579);
    if (VPTimestampLogScope(void)::once != -1) {
      dispatch_once(&VPTimestampLogScope(void)::once, &__block_literal_global_6_30742);
    }
    CALegacyLog::log(v189, 5, VPTimestampLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpProcessing/vpProcessUplink_v2.cpp", 437, "Process", "UL %f %f %f", a3->mSampleTime, *((double *)this + 1992), v188 - *((double *)this + 1992));
    double v190 = *((double *)this + 1992);
    unsigned int v191 = *((_DWORD *)this + 127);
    double v192 = *((double *)this + 103);
    if (v188 - v190 >= (double)v191 / v192)
    {
      float v193 = (int *)*((void *)this + 1579);
      if (VPTimestampLogScope(void)::once != -1) {
        dispatch_once(&VPTimestampLogScope(void)::once, &__block_literal_global_6_30742);
      }
      CALegacyLog::log(v193, 5, VPTimestampLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpProcessing/vpProcessUplink_v2.cpp", 439, "Process", "UL ERROR, processing slower than RT - %f", v188 - *((double *)this + 1992));
      double v190 = *((double *)this + 1992);
      unsigned int v191 = *((_DWORD *)this + 127);
      double v192 = *((double *)this + 103);
    }
    if (v190 - *((double *)this + 1993) > (double)(*((_DWORD *)this + 293) + v191) / v192)
    {
      float v194 = (int *)*((void *)this + 1579);
      if (VPTimestampLogScope(void)::once != -1) {
        dispatch_once(&VPTimestampLogScope(void)::once, &__block_literal_global_6_30742);
      }
      CALegacyLog::log(v194, 5, VPTimestampLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpProcessing/vpProcessUplink_v2.cpp", 441, "Process", "UL ERROR, not being called in a timely manner - %f", *((double *)this + 1992) - *((double *)this + 1993));
      double v190 = *((double *)this + 1992);
    }
    uint64_t result = 0;
    *((double *)this + 1993) = v190;
  }
  else
  {
    uint64_t result = 0;
  }
LABEL_130:
  atomic_fetch_add((atomic_uint *volatile)this + 621, 0xFFFFFFFF);
  return result;
}

void sub_1BB4E7EA0(_Unwind_Exception *a1)
{
  atomic_fetch_add((atomic_uint *volatile)(v1 + 2484), 0xFFFFFFFF);
  _Unwind_Resume(a1);
}

void ___Z37AudioDataAnalysisManagerLibraryLoaderv_block_invoke()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  long long v0 = dlopen("/usr/lib/libAudioIssueDetector.dylib", 1);
  if (v0) {
    goto LABEL_5;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v2 = 136315138;
    uint64_t v3 = dlerror();
    _os_log_error_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "dlerror : libAudioIssueDetector ADAM: %s", (uint8_t *)&v2, 0xCu);
  }
  long long v0 = dlopen("/usr/local/lib/libAudioIssueDetector.dylib", 1);
  if (v0)
  {
LABEL_5:
    AudioDataAnalysisManagerLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void, void))dlsym(v0, "AudioDataAnalysisManagerCreate");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void))dlsym(v0, "AudioDataAnalysisManagerDispose");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerReset");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyuint64_t m = dlsym(v0, "AudioDataAnalysisManagerUpdateReportingSessions");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void, void, void, void, void, void))dlsym(v0, "AudioDataAnalysisManagerCreateNodePCM");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerCreateNodeSPL");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerRemoveNode");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void))dlsym(v0, "AudioDataAnalysisManagerInitialize");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerIsSessionInitialized");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyuint64_t m = dlsym(v0, "AudioDataAnalysisManagerProcessAudio");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerProcessSPL");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerCreateNodeEnvSPL");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerCreateNodeEnvSoundClass");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerProcessEnvSPL");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerProcessEnvSoundClass");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerSetDeviceInfo");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerRegisterDeviceInfo");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerSetDeviceConnectionState");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerStartServices");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerConnectedWiredDeviceIsHeadphone");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void, void))dlsym(v0, "AudioDataAnalysisManagerSetApplicationBundleID");
  }
  else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    uint64_t v1 = dlerror();
    int v2 = 136315138;
    uint64_t v3 = v1;
    _os_log_error_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "dlerror : libAudioIssueDetector ADAM: %s", (uint8_t *)&v2, 0xCu);
  }
}

void VoiceProcessorV2::PostSRCMicClipDetection(VoiceProcessorV2 *this)
{
  unsigned int v2 = *((_DWORD *)this + 127);
  uint64_t v3 = (_DWORD *)*((void *)this + 177);
  int v4 = *v3;
  if (v2) {
    BOOL v5 = v4 == *((_DWORD *)this + 361);
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    unsigned int v6 = *((_DWORD *)this + 362);
    if (v6)
    {
      if (v6 >= v2) {
        unsigned int v7 = *((_DWORD *)this + 127);
      }
      else {
        unsigned int v7 = *((_DWORD *)this + 362);
      }
      unsigned int v8 = *((_DWORD *)this + 360) - *((_DWORD *)this + 363);
      if (v8 >= v7) {
        uint64_t v9 = v7;
      }
      else {
        uint64_t v9 = v8;
      }
      if (v4)
      {
        unint64_t v10 = 0;
        int v11 = (void **)(v3 + 4);
        do
        {
          unint64_t v12 = *v11;
          v11 += 2;
          memcpy(v12, (const void *)(*((void *)this + 183)+ 4 * (*((_DWORD *)this + 363) + *((_DWORD *)this + 360) * v10++)), 4 * v9);
          unint64_t v13 = *((unsigned int *)this + 361);
        }
        while (v10 < v13);
        if (v7 > v8 && v13)
        {
          unint64_t v14 = 0;
          int v15 = (uint64_t *)(v3 + 4);
          do
          {
            uint64_t v16 = *v15;
            v15 += 2;
            memcpy((void *)(v16 + 4 * v9), (const void *)(*((void *)this + 183) + 4 * (*((_DWORD *)this + 360) * v14++)), 4 * (v7 - v9));
          }
          while (v14 < *((unsigned int *)this + 361));
        }
      }
      *((_DWORD *)this + 362) -= v7;
      unsigned int v17 = *((_DWORD *)this + 363) + v7;
      *((_DWORD *)this + 363) = v17;
      unsigned int v18 = *((_DWORD *)this + 360);
      BOOL v19 = v17 >= v18;
      unsigned int v20 = v17 - v18;
      if (v19) {
        *((_DWORD *)this + 363) = v20;
      }
    }
  }
  if (**((_DWORD **)this + 135))
  {
    unint64_t v21 = 0;
    uint64_t v22 = 16;
    do
    {
      float __C = 0.0;
      vDSP_maxmgv(*(const float **)(*((void *)this + 177) + v22), 1, &__C, *((unsigned int *)this + 127));
      BOOL v23 = __C <= 0.00000001;
      *(unsigned char *)(*((void *)this + 176) + v21) = __C > 0.00000001;
      if (!v23) {
        ++*((_DWORD *)this + 371);
      }
      ++v21;
      v22 += 16;
    }
    while (v21 < **((unsigned int **)this + 135));
  }
}

void VoiceProcessorV2::GetAbsoluteChIndexForEpmicAndApplyPreDigitalGain(VoiceProcessorV2 *this)
{
  unint64_t v1 = **((unsigned int **)this + 135);
  if (v1)
  {
    unint64_t v3 = 0;
    do
    {
      unint64_t v4 = 0;
      uint64_t v5 = v3++;
      if (v3 <= 1) {
        int v6 = 1;
      }
      else {
        int v6 = v3;
      }
      int v7 = 1;
      do
      {
        if ((*((unsigned int *)this + 112) >> v4))
        {
          if (v7 == v6) {
            goto LABEL_12;
          }
          ++v7;
        }
        ++v4;
      }
      while (v4 != 32);
      unint64_t v4 = 33;
LABEL_12:
      float v8 = *((float *)this + 1092);
      uint64_t v9 = *((void *)this + 262);
      if (v4 < (*((void *)this + 263) - v9) >> 2) {
        float v8 = v8 + *(float *)(v9 + 4 * v4);
      }
      if (v8 != 0.0)
      {
        float __B = __exp10f(v8 / 20.0);
        unint64_t v10 = *(float **)(*((void *)this + 135) + 16 * v5 + 16);
        vDSP_vsmul(v10, 1, &__B, v10, 1, *((unsigned int *)this + 127));
        unint64_t v1 = **((unsigned int **)this + 135);
      }
    }
    while (v3 < v1);
  }
}

uint64_t VoiceProcessorV2::PreflightUplink(atomic_uint *this, unsigned int a2, unsigned int *a3)
{
  atomic_fetch_add(this + 621, 1u);
  if (this[620])
  {
    float v4 = flt_1BB879038[*((unsigned char *)this + 476) == 0];
    if (*((unsigned char *)this + 476)) {
      VoiceProcessorV2::LogIOError((uint64_t)this, v4, (float)this[3128], (float)this[3129], 0.0, "preflight uplink: tryer acquire failed", a3);
    }
    else {
      VoiceProcessorV2::LogIOError((uint64_t)this, v4, (float)this[3128], (float)this[3129], 0.0, "preflight uplink: not ok to process?!", a3);
    }
LABEL_5:
    CADeprecated::CAMutex::Lock((CADeprecated::CAMutex *)(this + 644));
    ++this[3128];
    CADeprecated::CAMutex::Unlock((CADeprecated::CAMutex *)(this + 644));
    uint64_t v5 = 1937006964;
    if (this[3128] == 1) {
      VoiceProcessorV2::LogNonTransientErrors((VoiceProcessorV2 *)this, 1);
    }
    goto LABEL_20;
  }
  if (!*((unsigned char *)this + 476))
  {
    VoiceProcessorV2::LogIOError((uint64_t)this, 31.005, (float)this[3128], (float)this[3129], 0.0, "preflight uplink: not ok to process?!", a3);
    goto LABEL_5;
  }
  if (a2)
  {
    unsigned int v6 = 0;
    int v7 = 0;
    unint64_t v8 = *((void *)this + 234);
    uint64_t v9 = *((void *)this + 236);
    uint64_t v10 = *((void *)this + 235);
    uint64_t v11 = this[124];
    do
    {
      unint64_t v12 = v10 * *((void *)this + 233) * v11 / v8;
      unint64_t v13 = v10 + 1;
      if (v13 <= v8) {
        uint64_t v14 = 0;
      }
      else {
        uint64_t v14 = *((void *)this + 234);
      }
      int v15 = v12 - v9;
      if (v13 > v8) {
        LODWORD(v12) = 0;
      }
      uint64_t v10 = v13 - v14;
      ++v7;
      v6 += v15;
      LODWORD(v9) = v12;
    }
    while (v6 < a2);
  }
  else
  {
    int v7 = 0;
    LODWORD(v11) = this[124];
  }
  uint64_t v5 = 0;
  *a3 = v11 * v7;
LABEL_20:
  atomic_fetch_add(this + 621, 0xFFFFFFFF);
  return v5;
}

void sub_1BB4E85F8(_Unwind_Exception *a1)
{
  atomic_fetch_add((atomic_uint *volatile)(v1 + 2484), 0xFFFFFFFF);
  _Unwind_Resume(a1);
}

AudioUnitParameterValue VoiceProcessorV2::DetectVoiceActivity(VoiceProcessorV2 *this, const AudioTimeStamp *a2, AudioUnitParameterValue result)
{
  inInputBufferLists[1] = *(AudioBufferList **)MEMORY[0x1E4F143B8];
  if ((*((unsigned char *)this + 4671) & 0x40) != 0 && (*((unsigned char *)this + 4687) & 0x40) != 0)
  {
    float v4 = (OpaqueAudioComponentInstance *)*((void *)this + 409);
    if (v4)
    {
      if (!*((unsigned char *)this + 2081) && *((unsigned char *)this + 2080))
      {
        AudioUnitReset(v4, 0, 0);
        float v4 = (OpaqueAudioComponentInstance *)*((void *)this + 409);
      }
      long long v6 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&inTimeStamp.double mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&inTimeStamp.Float64 mRateScalar = v6;
      long long v7 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&inTimeStamp.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&inTimeStamp.mSMPTETime.mHours = v7;
      AudioUnitRenderActionFlags ioActionFlags = 512;
      unint64_t v8 = (AudioBufferList *)*((void *)this + 136);
      ioOutputBufferLists = (AudioBufferList *)*((void *)this + 2064);
      inInputBufferLists[0] = v8;
      OSStatus v9 = AudioUnitProcessMultiple(v4, &ioActionFlags, &inTimeStamp, *((_DWORD *)this + 127), 1u, (const AudioBufferList **)inInputBufferLists, 1u, &ioOutputBufferLists);
      AudioUnitParameterValue outValue = 0.0;
      float v10 = 0.0;
      if (!v9)
      {
        AudioUnitGetParameter(*((AudioUnit *)this + 409), 0x73707062u, 0, 0, &outValue);
        float v10 = outValue;
      }
      if (v10 != *((float *)this + 4126) && *((unsigned char *)this + 2080) && *((void *)this + 2062))
      {
        BOOL v11 = v10 != 1.0;
        kdebug_trace();
        unint64_t v12 = (caulk::concurrent::messenger *)*((void *)this + 2035);
        if (v12)
        {
          uint64_t v13 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
          *(_DWORD *)(v13 + 16) = 0;
          *(void *)(v13 + 24) = this;
          *(void *)(v13 + 32) = v11;
          *(void *)uint64_t v13 = &unk_1F14B11E8;
          *(void *)(v13 + 8) = 0;
          caulk::concurrent::messenger::enqueue(v12, (caulk::concurrent::message *)v13);
        }
      }
      uint64_t result = outValue;
      *((AudioUnitParameterValue *)this + 4126) = outValue;
    }
  }
  return result;
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<VoiceProcessorV2::DetectVoiceActivity(AudioTimeStamp const&)::$_0>::perform(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (caulk::concurrent::message *)a1;
  uint64_t v2 = *(void *)(a1 + 24);
  (*(void (**)(void))(*(void *)(v2 + 16496) + 16))();
  kdebug_trace();
  if (VPLogScope(void)::once != -1) {
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
  }
  unint64_t v3 = (void *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
  {
    float v4 = (*v3 ? *v3 : MEMORY[0x1E4F14500]);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = *(_DWORD *)(a1 + 32);
      *(_DWORD *)AudioBufferList buf = 136315650;
      float v10 = "vpProcessUplink_v2.cpp";
      __int16 v11 = 1024;
      int v12 = 800;
      __int16 v13 = 1024;
      int v14 = v5;
      _os_log_impl(&dword_1BB0CE000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Invoked the muted talker detection callback, event = %u", buf, 0x18u);
    }
  }
  long long v6 = *(int **)(v2 + 12624);
  if (v6 && (*(unsigned char *)(v2 + 15961) || *(unsigned char *)(v2 + 15962)))
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    CALegacyLog::log(v6, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpProcessing/vpProcessUplink_v2.cpp", 800, "operator()", "Invoked the muted talker detection callback, event = %u", *(_DWORD *)(a1 + 32));
  }
  return caulk::concurrent::details::rt_message_call<VoiceProcessorV2::DetectVoiceActivity(AudioTimeStamp const&)::$_0>::rt_cleanup::~rt_cleanup(&v8);
}

void sub_1BB4E89C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  caulk::concurrent::details::rt_message_call<VoiceProcessorV2::DetectVoiceActivity(AudioTimeStamp const&)::$_0>::rt_cleanup::~rt_cleanup((caulk::concurrent::message **)va);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<VoiceProcessorV2::DetectVoiceActivity(AudioTimeStamp const&)::$_0>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  uint64_t v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], v2, 48, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<VoiceProcessorV2::DetectVoiceActivity(AudioTimeStamp const&)::$_0>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C185D370);
}

void VoiceProcessorV2::InitDLSRCs(VoiceProcessorV2 *this)
{
  uint64_t v2 = *((void *)this + 47);
  *((void *)this + 47) = 0;
  if (v2) {
    std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]();
  }
  uint64_t v3 = *((void *)this + 48);
  *((void *)this + 48) = 0;
  if (v3) {
    std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]();
  }
  uint64_t v4 = *((void *)this + 49);
  *((void *)this + 49) = 0;
  if (v4) {
    std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]();
  }
  long long v5 = *((_OWORD *)this + 14);
  *(_OWORD *)((char *)this + 248) = *((_OWORD *)this + 13);
  *(_OWORD *)((char *)this + 264) = v5;
  *((void *)this + 35) = *((void *)this + 30);
  FarEndVoiceMixChannelCFIndex Count = VoiceProcessorV2::GetFarEndVoiceMixChannelCount(this);
  int v7 = *((_DWORD *)this + 65);
  if ((v7 & 0x20) != 0)
  {
    unsigned int v8 = 1;
  }
  else
  {
    unsigned int v8 = *((_DWORD *)this + 69);
    if (!v8)
    {
      unsigned int v9 = (*((_DWORD *)this + 70) + 7) >> 3;
      goto LABEL_12;
    }
  }
  unsigned int v9 = *((_DWORD *)this + 68) / v8;
LABEL_12:
  float v10 = (double *)((char *)this + 208);
  *((_DWORD *)this + 69) = FarEndVoiceMixChannelCount;
  *((_DWORD *)this + 67) = 1;
  *((_DWORD *)this + 68) = v9;
  *((_DWORD *)this + 66) = v9;
  *((_DWORD *)this + 65) = v7 | 0x20;
  long long v11 = *(_OWORD *)((char *)this + 264);
  *((_OWORD *)this + 18) = *(_OWORD *)((char *)this + 248);
  *((_OWORD *)this + 19) = v11;
  *((void *)this + 40) = *((void *)this + 35);
  double v12 = COERCE_DOUBLE(GetVPPreferredClientSampleRate(*((_DWORD *)this + 17), *((_DWORD *)this + 19)));
  int v14 = *((_DWORD *)this + 19);
  if ((v14 - 5) >= 2)
  {
    if (v14 == 1 && *((double *)this + 41) == 48000.0 && *v10 == 48000.0)
    {
      float v16 = *((float *)this + 550);
      if (v16 > 0.0)
      {
        unsigned int v17 = (_DWORD *)*((void *)this + 292);
        if (v17 != *((_DWORD **)this + 293) && *v17 != 1886614639)
        {
          double v15 = fmaxf(v16, 16000.0);
          goto LABEL_26;
        }
      }
    }
  }
  else if (v13)
  {
    if (*((double *)this + 41) >= v12) {
      double v15 = v12;
    }
    else {
      double v15 = *((double *)this + 41);
    }
    goto LABEL_26;
  }
  if (*((double *)this + 26) >= *((double *)this + 41)) {
    double v15 = *((double *)this + 41);
  }
  else {
    double v15 = *((double *)this + 26);
  }
LABEL_26:
  unsigned int v18 = (double *)((char *)this + 288);
  *((double *)this + 36) = v15;
  float v19 = *((float *)this + 550);
  if (v19 > 0.0 && v19 <= 16000.0)
  {
    int v20 = (*(uint64_t (**)(VoiceProcessorV2 *))(*(void *)this + 232))(this);
    double v15 = *((double *)this + 36);
    if (v20)
    {
      float v21 = v15;
      if (v21 > 16000.0) {
        float v21 = 16000.0;
      }
      double v15 = v21;
      double *v18 = v21;
    }
  }
  double v22 = *v10;
  if (v15 != *v10)
  {
    int v23 = VoiceProcessorV2::GetFarEndVoiceMixChannelCount(this);
    VoiceProcessorV2::CreateSRC((VoiceProcessorV2 *)__p, v22, v15, this, v23, v24, v25);
    uint64_t v26 = *((void *)this + 47);
    *((void **)this + 47) = __p[0];
    if (v26) {
      std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]();
    }
    double v15 = *v18;
  }
  double v27 = *((double *)this + 41);
  if (v27 != v15)
  {
    int v28 = VoiceProcessorV2::GetFarEndVoiceMixChannelCount(this);
    VoiceProcessorV2::CreateSRC((VoiceProcessorV2 *)__p, v15, v27, this, v28, v29, v30);
    uint64_t v31 = *((void *)this + 48);
    *((void **)this + 48) = __p[0];
    if (v31) {
      std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]();
    }
    myAllocABLDynamic((const AudioStreamBasicDescription *)((char *)this + 288), *((_DWORD *)this + 121), (AudioBufferList **)this + 24);
  }
  int v32 = (*(uint64_t (**)(VoiceProcessorV2 *))(*(void *)this + 232))(this);
  double v36 = *((double *)this + 41);
  if (v32)
  {
    double v35 = *((double *)this + 103);
    if (v36 != v35)
    {
      VoiceProcessorV2::CreateSRC((VoiceProcessorV2 *)__p, v35, v36, this, 1, v33, v34);
      uint64_t v38 = *((void *)this + 49);
      *((void **)this + 49) = __p[0];
      if (v38) {
        std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]();
      }
      LODWORD(v37) = *((_DWORD *)this + 127);
      unsigned int v39 = vcvtpd_u64_f64(*((double *)this + 41) * (double)v37 / *((double *)this + 103));
      if (*((_DWORD *)this + 121) <= v39) {
        int v40 = v39;
      }
      else {
        int v40 = *((_DWORD *)this + 121);
      }
      myAllocABLDynamic((const AudioStreamBasicDescription *)((char *)this + 328), v40, (AudioBufferList **)this + 1996);
      double v36 = *((double *)this + 41);
    }
  }
  LODWORD(v35) = *((_DWORD *)this + 121);
  double v41 = *((double *)this + 36);
  unsigned int v42 = vcvtpd_u64_f64(v41 * (double)*(unint64_t *)&v35 / v36);
  int v43 = (ceil(*((double *)this + 26) * (double)v42 / v41) + 1000.0);
  *((_DWORD *)this + 92) = v43;
  int v44 = v42 + 1000;
  myAllocABLDynamic((const AudioStreamBasicDescription *)((char *)this + 208), v43, (AudioBufferList **)this + 13);
  myAllocABLDynamic((const AudioStreamBasicDescription *)((char *)this + 248), *((_DWORD *)this + 92), (AudioBufferList **)this + 22);
  myAllocABLDynamic((const AudioStreamBasicDescription *)((char *)this + 248), v44, (AudioBufferList **)this + 23);
  uint64_t v45 = *((void *)this + 2003);
  std::string::basic_string[abi:ne180100]<0>(__p, "dlfev");
  uint64_t v46 = *((unsigned int *)this + 92);
  if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_9211);
  }
  if (AudioIssueDetectorLibraryLoader(void)::libSym) {
    AudioIssueDetectorLibraryLoader(void)::libSym(v45, __p, 51, (char *)this + 208, v46);
  }
  if (v51 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v47 = *((void *)this + 2003);
  std::string::basic_string[abi:ne180100]<0>(__p, "dlout");
  uint64_t v48 = *((unsigned int *)this + 121);
  if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_9211);
  }
  if (AudioIssueDetectorLibraryLoader(void)::libSym) {
    AudioIssueDetectorLibraryLoader(void)::libSym(v47, __p, 68, (char *)this + 328, v48);
  }
  if (v51 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v49 = *((void *)this + 2003);
  if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_9211);
  }
  if (AudioIssueDetectorLibraryLoader(void)::libSym) {
    AudioIssueDetectorLibraryLoader(void)::libSym(v49);
  }
}

void sub_1BB4E8F64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]()
{
  AudioSampleRateConverterDispose();

  JUMPOUT(0x1C185D370);
}

void *___Z31AudioIssueDetectorLibraryLoaderv_block_invoke_9217()
{
  long long v0 = dlopen("/usr/lib/libAudioIssueDetector.dylib", 1);
  if (v0 || (long long v0 = dlopen("/usr/local/lib/libAudioIssueDetector.dylib", 1)) != 0)
  {
    AudioIssueDetectorLibraryLoader(void)::libSyuint64_t m = dlsym(v0, "AudioIssueDetectorCreate");
    AudioIssueDetectorLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void))dlsym(v0, "AudioIssueDetectorInitialize");
    AudioIssueDetectorLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void))dlsym(v0, "AudioIssueDetectorDispose");
    AudioIssueDetectorLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void, void, void, void, void))dlsym(v0, "AudioIssueDetectorSetNodeFormat");
    AudioIssueDetectorLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v0, "AudioIssueDetectorSetNodeFormatWithDirection");
    AudioIssueDetectorLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v0, "AudioIssueDetectorReset");
    AudioIssueDetectorLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void, void, void, void, void, void))dlsym(v0, "AudioIssueDetectorAnalyzeBuffer");
    AudioIssueDetectorLibraryLoader(void)::libSyuint64_t m = dlsym(v0, "AudioIssueDetectorUpdateReportingSessions");
    AudioIssueDetectorLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v0, "AudioIssueDetectorRemoveNode");
    AudioIssueDetectorLibraryLoader(void)::libSyuint64_t m = dlsym(v0, "AudioIssueDetectorSetUplinkMute");
    AudioIssueDetectorLibraryLoader(void)::libSyuint64_t m = dlsym(v0, "AudioIssueDetectorSetDownlinkVolume");
    AudioIssueDetectorLibraryLoader(void)::libSyuint64_t m = dlsym(v0, "AudioIssueDetectorSetRouteSpecificDownlinkGainAdjustment");
    AudioIssueDetectorLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v0, "AudioIssueDetectorSetSmartCaseMicMute");
  }
  uint64_t result = dlopen("/System/Library/Frameworks/AudioToolbox.framework/libAudioDSP.dylib", 1);
  if (result)
  {
    uint64_t result = dlsym(result, "RegisterAudioUnits_Analyzer");
    if (result)
    {
      return (void *)((uint64_t (*)(void))result)();
    }
  }
  return result;
}

uint64_t VoiceProcessorV2::InitializeDownlinkProcessing(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep a1, uint64_t a2, UInt32 a3, uint64_t a4, const void *a5)
{
  uint64_t v91 = *MEMORY[0x1E4F143B8];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v81 = a1 + 2392;
  char v82 = (*(uint64_t (**)(void))(*(void *)(a1 + 2392) + 16))();
  atomic_fetch_add((atomic_uint *volatile)(a1 + 2480), 1u);
  while (*(_DWORD *)(a1 + 2484))
    usleep(0x1F4u);
  ++VoiceProcessorV2::InitializeDownlinkProcessing(AudioStreamBasicDescription const&,unsigned int,AudioStreamBasicDescription const&,int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *))::initDownlinkProcessingCallCount;
  if (VPLogScope(void)::once != -1) {
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
  }
  long long v11 = (unsigned char *)(a1 + 12552);
  double v12 = (void *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
  {
    char v13 = (*v12 ? *v12 : MEMORY[0x1E4F14500]);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioBufferList buf = 136315650;
      *(void *)&uint8_t buf[4] = "vpInitializeDownlink.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 117;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = VoiceProcessorV2::InitializeDownlinkProcessing(AudioStreamBasicDescription const&,unsigned int,AudioStreamBasicDescription const&,int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *))::initDownlinkProcessingCallCount;
      _os_log_impl(&dword_1BB0CE000, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> initializedlp: call num %u", buf, 0x18u);
    }
  }
  int v14 = *(int **)(a1 + 12624);
  if (v14 && (*(unsigned char *)(a1 + 15961) || *(unsigned char *)(a1 + 15962)))
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    CALegacyLog::log(v14, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeDownlink.cpp", 117, "InitializeDownlinkProcessing", "initializedlp: call num %u", VoiceProcessorV2::InitializeDownlinkProcessing(AudioStreamBasicDescription const&,unsigned int,AudioStreamBasicDescription const&,int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *))::initDownlinkProcessingCallCount);
  }
  if (*(unsigned char *)(a1 + 15961))
  {
    if (*v11)
    {
      LODWORD(v10) = *(_DWORD *)(a1 + 484);
      VoiceProcessorV2::WriteTSOverload(a1, *(double *)(a1 + 12544) - (double)v10, *(double *)(a1 + 12544) - (double)v10, 2);
    }
    unsigned char *v11 = 0;
  }
  if (VPLogScope(void)::once != -1) {
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
  }
  double v15 = (void *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(4, VPLogScope(void)::scope, 0))
  {
    float v16 = (*v15 ? *v15 : MEMORY[0x1E4F14500]);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      CAFormatter::CAFormatter((CAFormatter *)v78, (const AudioStreamBasicDescription *)a2);
      unsigned int v17 = v78[0];
      CAFormatter::CAFormatter((CAFormatter *)&v89, (const AudioStreamBasicDescription *)a4);
      *(_DWORD *)AudioBufferList buf = 136316162;
      *(void *)&uint8_t buf[4] = "vpInitializeDownlink.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 128;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v17;
      *(_WORD *)&unsigned char buf[28] = 1024;
      *(_DWORD *)&unsigned char buf[30] = a3;
      *(_WORD *)&buf[34] = 2080;
      *(Float64 *)&buf[36] = v89.mSampleRate;
      _os_log_impl(&dword_1BB0CE000, v16, OS_LOG_TYPE_INFO, "%25s:%-5d  <vp> mix %s (blksz %u), voice %s", buf, 0x2Cu);
      if (*(void *)&v89.mSampleRate) {
        free(*(void **)&v89.mSampleRate);
      }
      if (v78[0]) {
        free(v78[0]);
      }
    }
  }
  unsigned int v18 = *(int **)(a1 + 12624);
  if (v18 && (*(unsigned char *)(a1 + 15961) || *(unsigned char *)(a1 + 15962)))
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    uint64_t v19 = VPLogScope(void)::scope;
    CAFormatter::CAFormatter((CAFormatter *)buf, (const AudioStreamBasicDescription *)a2);
    int v20 = *(const char **)buf;
    CAFormatter::CAFormatter((CAFormatter *)v78, (const AudioStreamBasicDescription *)a4);
    CALegacyLog::log(v18, 4, v19, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeDownlink.cpp", 128, "InitializeDownlinkProcessing", "mix %s (blksz %u), voice %s", v20, a3, (const char *)v78[0]);
    if (v78[0]) {
      free(v78[0]);
    }
    if (*(void *)buf) {
      free(*(void **)buf);
    }
  }
  long long v21 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)AudioBufferList buf = *(_OWORD *)a2;
  *(_OWORD *)&_OWORD buf[16] = v21;
  *(void *)&uint8_t buf[32] = *(void *)(a2 + 32);
  long long v22 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)uint64_t v78 = *(_OWORD *)a4;
  long long v79 = v22;
  uint64_t v80 = *(void *)(a4 + 32);
  if (VPLogScope(void)::once != -1) {
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
  }
  int v23 = (void *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
  {
    uint64_t v24 = (*v23 ? *v23 : MEMORY[0x1E4F14500]);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
      CAFormatter::CAFormatter((CAFormatter *)&v77, (const CAStreamBasicDescription *)buf);
      LODWORD(v89.mSampleRate) = 136315650;
      *(void *)((char *)&v89.mSampleRate + 4) = "vpInitializeDownlink.cpp";
      LOWORD(v89.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&v89.mFormatFlags + 2) = 133;
      HIWORD(v89.mBytesPerPacket) = 2080;
      *(Float64 *)&v89.mFramesPerPacket = v77.mSampleRate;
      _os_log_impl(&dword_1BB0CE000, v24, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> initializedlp:   mix asbd = %s", (uint8_t *)&v89, 0x1Cu);
      if (*(void *)&v77.mSampleRate) {
        free(*(void **)&v77.mSampleRate);
      }
    }
  }
  unsigned int v25 = *(int **)(a1 + 12624);
  if (v25 && (*(unsigned char *)(a1 + 15961) || *(unsigned char *)(a1 + 15962)))
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    uint64_t v26 = VPLogScope(void)::scope;
    CAFormatter::CAFormatter((CAFormatter *)&v89, (const CAStreamBasicDescription *)buf);
    CALegacyLog::log(v25, 5, v26, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeDownlink.cpp", 133, "InitializeDownlinkProcessing", "initializedlp:   mix asbd = %s", *(const char **)&v89.mSampleRate);
    if (*(void *)&v89.mSampleRate) {
      free(*(void **)&v89.mSampleRate);
    }
  }
  if (VPLogScope(void)::once != -1) {
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
  }
  double v27 = (void *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
  {
    int v28 = (*v27 ? *v27 : MEMORY[0x1E4F14500]);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
    {
      CAFormatter::CAFormatter((CAFormatter *)&v77, (const CAStreamBasicDescription *)v78);
      LODWORD(v89.mSampleRate) = 136315650;
      *(void *)((char *)&v89.mSampleRate + 4) = "vpInitializeDownlink.cpp";
      LOWORD(v89.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&v89.mFormatFlags + 2) = 134;
      HIWORD(v89.mBytesPerPacket) = 2080;
      *(Float64 *)&v89.mFramesPerPacket = v77.mSampleRate;
      _os_log_impl(&dword_1BB0CE000, v28, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> initializedlp: voice asbd = %s", (uint8_t *)&v89, 0x1Cu);
      if (*(void *)&v77.mSampleRate) {
        free(*(void **)&v77.mSampleRate);
      }
    }
  }
  uint64_t v29 = *(int **)(a1 + 12624);
  if (v29 && (*(unsigned char *)(a1 + 15961) || *(unsigned char *)(a1 + 15962)))
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    uint64_t v30 = VPLogScope(void)::scope;
    CAFormatter::CAFormatter((CAFormatter *)&v89, (const CAStreamBasicDescription *)v78);
    CALegacyLog::log(v29, 5, v30, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeDownlink.cpp", 134, "InitializeDownlinkProcessing", "initializedlp: voice asbd = %s", *(const char **)&v89.mSampleRate);
    if (*(void *)&v89.mSampleRate) {
      free(*(void **)&v89.mSampleRate);
    }
  }
  if (VPLogScope(void)::once != -1) {
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
  }
  uint64_t v31 = (void *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
  {
    int v32 = (*v31 ? *v31 : MEMORY[0x1E4F14500]);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(v89.mSampleRate) = 136315650;
      *(void *)((char *)&v89.mSampleRate + 4) = "vpInitializeDownlink.cpp";
      LOWORD(v89.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&v89.mFormatFlags + 2) = 135;
      HIWORD(v89.mBytesPerPacket) = 1024;
      v89.mFramesPerPacket = a3;
      _os_log_impl(&dword_1BB0CE000, v32, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> initializedlp: mix blk sz = %d", (uint8_t *)&v89, 0x18u);
    }
  }
  uint64_t v33 = *(int **)(a1 + 12624);
  if (v33 && (*(unsigned char *)(a1 + 15961) || *(unsigned char *)(a1 + 15962)))
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    CALegacyLog::log(v33, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeDownlink.cpp", 135, "InitializeDownlinkProcessing", "initializedlp: mix blk sz = %d", a3);
  }
  unsigned int v34 = (double *)(a1 + 328);
  *(void *)(a1 + 360) = *(void *)&buf[32];
  long long v35 = *(_OWORD *)&buf[16];
  *(_OWORD *)(a1 + 328) = *(_OWORD *)buf;
  *(_OWORD *)(a1 + 344) = v35;
  long long v36 = v79;
  *(_OWORD *)(a1 + 208) = *(_OWORD *)v78;
  *(_OWORD *)(a1 + 224) = v36;
  *(void *)(a1 + 240) = v80;
  *(_DWORD *)(a1 + 484) = a3;
  *(_DWORD *)(a1 + 516) = a3;
  *(_DWORD *)(a1 + 520) = 1;
  if ((a3 & 3) == 0)
  {
    unsigned int v39 = *(_DWORD *)(a1 + 72);
    if (v39 <= 0x2E && ((0x5100003FFFFEuLL >> v39) & 1) != 0)
    {
      int v40 = *(_DWORD **)(a1 + 2336);
      if (v40 == *(_DWORD **)(a1 + 2344) || *v40 != 1886614639)
      {
        int v41 = *(_DWORD *)(a1 + 76);
        if ((v41 - 5) >= 2)
        {
          if (v41 != 1)
          {
LABEL_177:
            *(_DWORD *)(a1 + 520) = *(_DWORD *)(a1 + 484) / a3;
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            unint64_t v72 = (void *)VPLogScope(void)::scope;
            if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
            {
              AudioStreamBasicDescription v73 = (*v72 ? *v72 : MEMORY[0x1E4F14500]);
              if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
              {
                UInt32 v74 = *(_DWORD *)(a1 + 516);
                UInt32 v75 = *(_DWORD *)(a1 + 520);
                LODWORD(v89.mSampleRate) = 136315906;
                *(void *)((char *)&v89.mSampleRate + 4) = "vpInitializeDownlink.cpp";
                LOWORD(v89.mFormatFlags) = 1024;
                *(AudioFormatFlags *)((char *)&v89.mFormatFlags + 2) = 581;
                HIWORD(v89.mBytesPerPacket) = 1024;
                v89.mFramesPerPacket = v74;
                LOWORD(v89.mBytesPerFrame) = 1024;
                *(UInt32 *)((char *)&v89.mBytesPerFrame + 2) = v75;
                _os_log_impl(&dword_1BB0CE000, v73, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> +++ dl io blk CFIndex size = %u, num dl io cycles = %u", (uint8_t *)&v89, 0x1Eu);
              }
            }
            unsigned int v76 = *(int **)(a1 + 12624);
            if (v76 && (*(unsigned char *)(a1 + 15961) || *(unsigned char *)(a1 + 15962)))
            {
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              CALegacyLog::log(v76, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeDownlink.cpp", 581, "CalcDLIoBlkSz", "+++ dl io blk CFIndex size = %u, num dl io cycles = %u", *(_DWORD *)(a1 + 516), *(_DWORD *)(a1 + 520));
            }
            goto LABEL_94;
          }
          int ShouldUseOptimizedBlockSizeForFacePlant = VoiceProcessorV2::ShouldUseOptimizedBlockSizeForFacePlant((VoiceProcessorV2 *)a1);
          unsigned int v43 = *(_DWORD *)(a1 + 516);
          if (ShouldUseOptimizedBlockSizeForFacePlant)
          {
            double v70 = *v34;
            while ((double)v43 / v70 > 0.01)
            {
              a3 = v43 >> 1;
              *(_DWORD *)(a1 + 516) = v43 >> 1;
              if (v43 >= 0x82)
              {
                int v71 = v43 & 6;
                v43 >>= 1;
                if (!v71) {
                  continue;
                }
              }
              goto LABEL_177;
            }
          }
        }
        else
        {
          double v42 = *v34;
          unsigned int v43 = a3;
          while ((double)v43 / v42 > 0.016)
          {
            a3 = v43 >> 1;
            *(_DWORD *)(a1 + 516) = v43 >> 1;
            if (v43 >= 0x82)
            {
              int v44 = v43 & 6;
              v43 >>= 1;
              if (!v44) {
                continue;
              }
            }
            goto LABEL_177;
          }
        }
        a3 = v43;
        goto LABEL_177;
      }
    }
  }
LABEL_94:
  if (*(_DWORD *)(a1 + 356) == 1) {
    *(_DWORD *)(a1 + 340) |= 0x20u;
  }
  if (*(_DWORD *)(a1 + 236) == 1) {
    *(_DWORD *)(a1 + 220) |= 0x20u;
  }
  *(void *)(a1 + 12532) = 0;
  VoiceProcessorV2::InitDLSRCs((VoiceProcessorV2 *)a1);
  long long v37 = *(_OWORD *)(a1 + 344);
  *(_OWORD *)&v89.float mSampleRate = *(_OWORD *)v34;
  *(_OWORD *)&v89.UInt32 mBytesPerPacket = v37;
  *(void *)&v89.UInt32 mBitsPerChannel = *(void *)(a1 + 360);
  v89.UInt32 mChannelsPerFrame = 4;
  myAllocABLDynamic(&v89, *(_DWORD *)(a1 + 484), (AudioBufferList **)(a1 + 200));
  if (a5) {
    uint64_t v38 = _Block_copy(a5);
  }
  else {
    uint64_t v38 = 0;
  }
  uint64_t v45 = *(const void **)(a1 + 96);
  if (v45) {
    _Block_release(v45);
  }
  *(void *)(a1 + 96) = v38;
  if (!*(void *)(a1 + 1632))
  {
    if (*(_DWORD *)(a1 + 484) <= 0x1000u) {
      int v46 = 4096;
    }
    else {
      int v46 = *(_DWORD *)(a1 + 484);
    }
    long long v47 = *(_OWORD *)(a1 + 344);
    *(_OWORD *)&v77.float mSampleRate = *(_OWORD *)v34;
    *(_OWORD *)&v77.UInt32 mBytesPerPacket = v47;
    *(void *)&v77.UInt32 mBitsPerChannel = *(void *)(a1 + 360);
    int v48 = *(_DWORD *)(a1 + 340) & 0x20;
    if ((v77.mFormatFlags & 0x20) != 0)
    {
      UInt32 mChannelsPerFrame = 1;
    }
    else
    {
      UInt32 mChannelsPerFrame = v77.mChannelsPerFrame;
      if (!v77.mChannelsPerFrame)
      {
        UInt32 v50 = (v77.mBitsPerChannel + 7) >> 3;
LABEL_122:
        v77.UInt32 mChannelsPerFrame = 8;
        if (v48) {
          char v51 = 0;
        }
        else {
          char v51 = 3;
        }
        v77.mFramesPerPacket = 1;
        v77.UInt32 mBytesPerFrame = v50 << v51;
        v77.AudioFormatFlags mFormatFlags = v77.mFormatFlags & 0xFFFFFFDF | v48;
        v77.UInt32 mBytesPerPacket = v50 << v51;
        myAllocABLDynamic(&v77, v46, (AudioBufferList **)(a1 + 1632));
        uint64_t v52 = *(_DWORD **)(a1 + 1632);
        if (*v52)
        {
          unint64_t v53 = 0;
          unsigned int v54 = (void **)(v52 + 4);
          do
          {
            bzero(*v54, *((unsigned int *)v54 - 1));
            ++v53;
            v54 += 2;
          }
          while (v53 < *v52);
        }
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        unsigned int v55 = (void *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(4, VPLogScope(void)::scope, 0))
        {
          uint64_t v56 = (*v55 ? *v55 : MEMORY[0x1E4F14500]);
          if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)unint64_t v83 = 136315650;
            double v84 = "vpInitializeDownlink.cpp";
            __int16 v85 = 1024;
            int v86 = 208;
            __int16 v87 = 1024;
            int v88 = v46;
            _os_log_impl(&dword_1BB0CE000, v56, OS_LOG_TYPE_INFO, "%25s:%-5d  <vp> DL Fade data CFIndex size = %u", v83, 0x18u);
          }
        }
        uint64_t v57 = *(int **)(a1 + 12624);
        if (v57 && (*(unsigned char *)(a1 + 15961) || *(unsigned char *)(a1 + 15962)))
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          CALegacyLog::log(v57, 4, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeDownlink.cpp", 208, "InitializeDownlinkProcessing", "DL Fade data CFIndex size = %u", v46);
        }
        goto LABEL_143;
      }
    }
    UInt32 v50 = v77.mBytesPerFrame / mChannelsPerFrame;
    goto LABEL_122;
  }
LABEL_143:
  VoiceProcessorV2::InitializeDLP((VoiceProcessorV2 *)a1);
  AUPropAndParamHelper::AddItemToAUParamList(a1 + 9008, 1937141612, *(float *)(a1 + 12528));
  if ((*(unsigned char *)(a1 + 8896) & 0x10) != 0 && (*(unsigned char *)(a1 + 8904) & 0x10) != 0)
  {
    uint64_t v58 = *(OpaqueAudioComponentInstance **)(a1 + 3536);
    if (v58) {
      AudioUnitSetParameter(v58, 0x73766F6Cu, 0, 0, *(AudioUnitParameterValue *)(a1 + 12528), 0);
    }
  }
  int v59 = atomic_load((unsigned int *)(a1 + 2308));
  *(_DWORD *)(a1 + 2304) = v59;
  AUPropAndParamHelper::AddItemToAUParamList(a1 + 9824, 0, (float)v59);
  if ((*(unsigned char *)(a1 + 8900) & 0x40) != 0 && (*(unsigned char *)(a1 + 8908) & 0x40) != 0)
  {
    uint64_t v60 = *(OpaqueAudioComponentInstance **)(a1 + 3808);
    if (v60) {
      AudioUnitSetParameter(v60, 0, 0, 0, (float)*(int *)(a1 + 2304), 0);
    }
  }
  AUPropAndParamHelper::AddItemToAUParamList(a1 + 9848, 0, (float)*(int *)(a1 + 2304));
  if ((*(unsigned char *)(a1 + 8900) & 0x80) != 0 && (*(unsigned char *)(a1 + 8908) & 0x80) != 0)
  {
    __int16 v61 = *(OpaqueAudioComponentInstance **)(a1 + 3816);
    if (v61) {
      AudioUnitSetParameter(v61, 0, 0, 0, (float)*(int *)(a1 + 2304), 0);
    }
  }
  AUPropAndParamHelper::AddItemToAUParamList(a1 + 9872, 0, (float)*(int *)(a1 + 2304));
  if (*(unsigned char *)(a1 + 8901) & 1) != 0 && (*(unsigned char *)(a1 + 8909))
  {
    unsigned int v62 = *(OpaqueAudioComponentInstance **)(a1 + 3824);
    if (v62) {
      AudioUnitSetParameter(v62, 0, 0, 0, (float)*(int *)(a1 + 2304), 0);
    }
  }
  if (*(unsigned char *)(a1 + 2245))
  {
    AUPropAndParamHelper::AddItemToAUParamList(a1 + 9920, 0, (float)*(int *)(a1 + 2304));
    if ((*(unsigned char *)(a1 + 8901) & 4) != 0 && (*(unsigned char *)(a1 + 8909) & 4) != 0)
    {
      int v63 = *(OpaqueAudioComponentInstance **)(a1 + 3840);
      if (v63) {
        AudioUnitSetParameter(v63, 0, 0, 0, (float)*(int *)(a1 + 2304), 0);
      }
    }
  }
  if (*(unsigned char *)(a1 + 15961) || *(unsigned char *)(a1 + 15962))
  {
    VoiceProcessorV2::PListWriteInitializeDLPParameters((VoiceProcessorV2 *)a1);
    if (*(unsigned char *)(a1 + 15961)) {
      VoiceProcessorV2::LoopBackInitialize((VoiceProcessorV2 *)a1, v64, v65, v66, v67);
    }
  }
  atomic_fetch_add((atomic_uint *volatile)(a1 + 2480), 0xFFFFFFFF);
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v81);
  return 0;
}

void sub_1BB4EA0EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  atomic_fetch_add((atomic_uint *volatile)(v31 + 2480), 0xFFFFFFFF);
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&a25);
  _Unwind_Resume(a1);
}

void VoiceProcessorV2::InitializeDLP(VoiceProcessorV2 *this)
{
  *(void *)&v243[4] = *MEMORY[0x1E4F143B8];
  long long v222 = (char *)this + 12524;
  std::string::size_type v219 = (AudioStreamBasicDescription *)((char *)this + 584);
  if (VoiceProcessorV2::ShouldGenerateReferenceSignalInternally(this))
  {
    uint64_t v2 = (int16x8_t *)((char *)this + 328);
    if (!CAStreamBasicDescription::IsEqual((VoiceProcessorV2 *)((char *)this + 328), (const AudioStreamBasicDescription *)((char *)this + 584)))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      uint64_t v3 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
      {
        uint64_t v4 = (*v3 ? *v3 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          int16x8_t v5 = *(int16x8_t *)((char *)this + 600);
          *(_OWORD *)blocunsigned int k = *(_OWORD *)&v219->mSampleRate;
          *(int16x8_t *)&block[16] = v5;
          *(void *)&block[32] = *((void *)this + 77);
          p_int outData = &outData;
          CA::StreamDescription::AsString((CA::StreamDescription *)block, (uint64_t)&outData, v5);
          if (v233 < 0) {
            p_int outData = outData;
          }
          int16x8_t v7 = v2[1];
          *(int16x8_t *)&v228.Float64 mSampleRate = *v2;
          *(int16x8_t *)&v228.UInt32 mBytesPerPacket = v7;
          *(void *)&v228.UInt32 mBitsPerChannel = v2[2].i64[0];
          CA::StreamDescription::AsString((CA::StreamDescription *)&v228, (uint64_t)&__p, v7);
          if (v236 >= 0) {
            p_p = &__p;
          }
          else {
            p_p = __p;
          }
          *(_DWORD *)AudioBufferList buf = 136315906;
          *(void *)&uint8_t buf[4] = "VoiceProcessor_v2.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3088;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = p_outData;
          __int16 v238 = 2080;
          uint64_t v239 = p_p;
          _os_log_impl(&dword_1BB0CE000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Updating hwRef to match dlMix format:\n was: %s\n now: %s", buf, 0x26u);
          if (v236 < 0) {
            operator delete(__p);
          }
          if (SHIBYTE(v233) < 0) {
            operator delete(outData);
          }
        }
      }
      unsigned int v9 = (int *)*((void *)this + 1578);
      if (v9 && (v222[3437] || v222[3438]))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        uint64_t v10 = VPLogScope(void)::scope;
        int16x8_t v11 = *(int16x8_t *)&v219->mBytesPerPacket;
        *(_OWORD *)blocunsigned int k = *(_OWORD *)&v219->mSampleRate;
        *(int16x8_t *)&block[16] = v11;
        *(void *)&block[32] = *(void *)&v219->mBitsPerChannel;
        double v12 = buf;
        CA::StreamDescription::AsString((CA::StreamDescription *)block, (uint64_t)buf, v11);
        if (buf[23] < 0) {
          double v12 = *(const char **)buf;
        }
        int16x8_t v13 = v2[1];
        *(int16x8_t *)&v228.Float64 mSampleRate = *v2;
        *(int16x8_t *)&v228.UInt32 mBytesPerPacket = v13;
        *(void *)&v228.UInt32 mBitsPerChannel = v2[2].i64[0];
        CA::StreamDescription::AsString((CA::StreamDescription *)&v228, (uint64_t)&outData, v13);
        if (v233 >= 0) {
          int v14 = (const char *)&outData;
        }
        else {
          int v14 = (const char *)outData;
        }
        CALegacyLog::log(v9, 3, v10, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 3088, "UpdateReferenceSignalFormat", "Updating hwRef to match dlMix format:\n was: %s\n now: %s", v12, v14);
LABEL_67:
        if (SHIBYTE(v233) < 0) {
          operator delete(outData);
        }
        double v27 = v219;
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        goto LABEL_72;
      }
      goto LABEL_71;
    }
  }
  else if (*((double *)this + 68) != *((double *)this + 73) {
         || *((_DWORD *)this + 138) != *((_DWORD *)this + 148)
  }
         || *((_DWORD *)this + 139) != *((_DWORD *)this + 149)
         || *((_DWORD *)this + 140) != *((_DWORD *)this + 150)
         || *((_DWORD *)this + 141) != *((_DWORD *)this + 151)
         || *((_DWORD *)this + 142) != *((_DWORD *)this + 152)
         || *((_DWORD *)this + 143) != *((_DWORD *)this + 153)
         || *((_DWORD *)this + 144) != *((_DWORD *)this + 154))
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    uint64_t v2 = (int16x8_t *)((char *)this + 544);
    double v15 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
    {
      float v16 = (*v15 ? *v15 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        int16x8_t v17 = *(int16x8_t *)&v219->mBytesPerPacket;
        *(_OWORD *)blocunsigned int k = *(_OWORD *)&v219->mSampleRate;
        *(int16x8_t *)&block[16] = v17;
        *(void *)&block[32] = *(void *)&v219->mBitsPerChannel;
        unsigned int v18 = &outData;
        CA::StreamDescription::AsString((CA::StreamDescription *)block, (uint64_t)&outData, v17);
        if (v233 < 0) {
          unsigned int v18 = outData;
        }
        int16x8_t v19 = v2[1];
        *(int16x8_t *)&v228.Float64 mSampleRate = *v2;
        *(int16x8_t *)&v228.UInt32 mBytesPerPacket = v19;
        *(void *)&v228.UInt32 mBitsPerChannel = v2[2].i64[0];
        CA::StreamDescription::AsString((CA::StreamDescription *)&v228, (uint64_t)&__p, v19);
        if (v236 >= 0) {
          int v20 = &__p;
        }
        else {
          int v20 = __p;
        }
        *(_DWORD *)AudioBufferList buf = 136315906;
        *(void *)&uint8_t buf[4] = "VoiceProcessor_v2.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3100;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = v18;
        __int16 v238 = 2080;
        uint64_t v239 = v20;
        _os_log_impl(&dword_1BB0CE000, v16, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Updating hwRef to match extHwRef format:\n was:%s\n now:%s", buf, 0x26u);
        if (v236 < 0) {
          operator delete(__p);
        }
        if (SHIBYTE(v233) < 0) {
          operator delete(outData);
        }
      }
    }
    long long v21 = (int *)*((void *)this + 1578);
    if (v21 && (v222[3437] || v222[3438]))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      uint64_t v22 = VPLogScope(void)::scope;
      int16x8_t v23 = *(int16x8_t *)&v219->mBytesPerPacket;
      *(_OWORD *)blocunsigned int k = *(_OWORD *)&v219->mSampleRate;
      *(int16x8_t *)&block[16] = v23;
      *(void *)&block[32] = *(void *)&v219->mBitsPerChannel;
      uint64_t v24 = buf;
      CA::StreamDescription::AsString((CA::StreamDescription *)block, (uint64_t)buf, v23);
      if (buf[23] < 0) {
        uint64_t v24 = *(const char **)buf;
      }
      int16x8_t v25 = v2[1];
      *(int16x8_t *)&v228.Float64 mSampleRate = *v2;
      *(int16x8_t *)&v228.UInt32 mBytesPerPacket = v25;
      *(void *)&v228.UInt32 mBitsPerChannel = v2[2].i64[0];
      CA::StreamDescription::AsString((CA::StreamDescription *)&v228, (uint64_t)&outData, v25);
      if (v233 >= 0) {
        uint64_t v26 = (const char *)&outData;
      }
      else {
        uint64_t v26 = (const char *)outData;
      }
      CALegacyLog::log(v21, 3, v22, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 3100, "UpdateReferenceSignalFormat", "Updating hwRef to match extHwRef format:\n was:%s\n now:%s", v24, v26);
      goto LABEL_67;
    }
LABEL_71:
    double v27 = v219;
LABEL_72:
    int16x8_t v28 = v2[1];
    *(int16x8_t *)&v27->Float64 mSampleRate = *v2;
    *(int16x8_t *)&v27->UInt32 mBytesPerPacket = v28;
    *(void *)&v27->UInt32 mBitsPerChannel = v2[2].i64[0];
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    uint64_t v29 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
    {
      uint64_t v30 = (*v29 ? *v29 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)blocunsigned int k = 136315394;
        *(void *)&block[4] = "vpInitializeDownlink.cpp";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 303;
        _os_log_impl(&dword_1BB0CE000, v30, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> InitializeDLP: hwref and dlmix formats were mismatched -- calling Initialize again", block, 0x12u);
      }
    }
    uint64_t v31 = (int *)*((void *)this + 1578);
    if (v31 && (v222[3437] || v222[3438]))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      CALegacyLog::log(v31, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeDownlink.cpp", 303, "InitializeDLP", "InitializeDLP: hwref and dlmix formats were mismatched -- calling Initialize again");
    }
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    int v32 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
    {
      uint64_t v33 = (*v32 ? *v32 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)blocunsigned int k = 136315394;
        *(void *)&block[4] = "vpInitializeDownlink.cpp";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 304;
        _os_log_impl(&dword_1BB0CE000, v33, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Begin self-reinit (UpdateReferenceSignalFormat)", block, 0x12u);
      }
    }
    unsigned int v34 = (int *)*((void *)this + 1578);
    if (v34 && (v222[3437] || v222[3438]))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      CALegacyLog::log(v34, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeDownlink.cpp", 304, "InitializeDLP", "Begin self-reinit (UpdateReferenceSignalFormat)");
    }
    (*(void (**)(VoiceProcessorV2 *))(*(void *)this + 240))(this);
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    long long v35 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
    {
      long long v36 = (*v35 ? *v35 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)blocunsigned int k = 136315394;
        *(void *)&block[4] = "vpInitializeDownlink.cpp";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 306;
        _os_log_impl(&dword_1BB0CE000, v36, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> End self-reinit (UpdateReferenceSignalFormat)", block, 0x12u);
      }
    }
    long long v37 = (int *)*((void *)this + 1578);
    if (v37 && (v222[3437] || v222[3438]))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      CALegacyLog::log(v37, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeDownlink.cpp", 306, "InitializeDLP", "End self-reinit (UpdateReferenceSignalFormat)");
    }
  }
  CADeprecated::CAMutex::Lock((VoiceProcessorV2 *)((char *)this + 2576));
  *((_DWORD *)this + 3130) = 0;
  CADeprecated::CAMutex::Unlock((VoiceProcessorV2 *)((char *)this + 2576));
  std::vector<std::__fs::filesystem::path>::__clear[abi:ne180100]((uint64_t *)this + 2008);
  uint64_t v38 = *((void *)this + 2015);
  uint64_t v39 = *((void *)this + 2014);
  while (v38 != v39)
  {
    v38 -= 48;
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v38);
  }
  *((void *)this + 2015) = v39;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::clear((uint64_t)this + 4584);
  int v40 = (PowerLogManager *)*((void *)this + 1997);
  if (v40) {
    PowerLogManager::EndPowerTracking(v40);
  }
  VoiceProcessorV2::InitDLSRCs(this);
  VoiceProcessorV2::InitializeVPParams(this);
  uint64_t v41 = 0;
  float v220 = (_OWORD *)((char *)this + 15976);
  do
  {
    if ((*((void *)this + 1112) >> v41) & 1) != 0 && ((0x17FFFFFFC7FFFFFFuLL >> v41))
    {
      VoiceProcessorV2::InstantiateAndConfigureEffectAU(this, v41, 0);
    }
    else
    {
      uint64_t v42 = 0;
      unsigned int v43 = VoiceProcessorV2::VPDownlinkIndexToSubTypeArray;
      while (1)
      {
        int v44 = *v43;
        v43 += 18;
        if (v44 == v41) {
          break;
        }
        if (++v42 == 62)
        {
          int v45 = 0;
          goto LABEL_130;
        }
      }
      int v45 = VoiceProcessorV2::VPDownlinkIndexToSubTypeArray[18 * v42 + 1];
LABEL_130:
      float Parameter = VoiceProcessorV2::DisposeAU(this, 1635083896, v45, (OpaqueAudioComponentInstance **)this + v41 + 438, 1);
    }
    ++v41;
  }
  while (v41 != 62);
  uint64_t v47 = *((void *)this + 1112);
  if ((~*((_DWORD *)this + 2224) & 0xC0000000) == 0)
  {
    *(void *)blocunsigned int k = *((void *)this + 41);
    *(_OWORD *)&block[8] = xmmword_1BB8727B0;
    *(_OWORD *)&block[24] = xmmword_1BB8727C0;
    int v48 = *((_DWORD *)this + 129);
    uint64_t default_resource = std::pmr::get_default_resource(Parameter);
    vp::Audio_Buffer::create((uint64_t)block, v48, default_resource, &v228);
    vp::Audio_Buffer::operator=((void **)this + 343, &v228);
    vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)&v228);
    uint64_t v47 = *((void *)this + 1112);
  }
  if ((v47 & 0x4000) != 0)
  {
    *(void *)blocunsigned int k = *((void *)this + 36);
    *(_OWORD *)&block[8] = xmmword_1BB8727B0;
    *(_OWORD *)&block[24] = xmmword_1BB8727C0;
    int v50 = *((_DWORD *)this + 134);
    uint64_t v51 = std::pmr::get_default_resource(Parameter);
    vp::Audio_Buffer::create((uint64_t)block, v50, v51, &v228);
    vp::Audio_Buffer::operator=((void **)this + 346, &v228);
    vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)&v228);
    AudioUnitGetParameter(*((AudioUnit *)this + 452), 8u, 0, 0, (AudioUnitParameterValue *)this + 569);
    float Parameter = (std::pmr *)AudioUnitGetParameter(*((AudioUnit *)this + 452), 0x2Bu, 0, 0, (AudioUnitParameterValue *)this + 570);
    uint64_t v47 = *((void *)this + 1112);
  }
  if ((~v47 & 0x60000) == 0)
  {
    *(void *)blocunsigned int k = *((void *)this + 41);
    *(_OWORD *)&block[8] = xmmword_1BB8727B0;
    *(_OWORD *)&block[24] = xmmword_1BB8727C0;
    int v52 = *((_DWORD *)this + 129);
    uint64_t v53 = std::pmr::get_default_resource(Parameter);
    vp::Audio_Buffer::create((uint64_t)block, v52, v53, &v228);
    vp::Audio_Buffer::operator=((void **)this + 344, &v228);
    vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)&v228);
    uint64_t v47 = *((void *)this + 1112);
  }
  if ((~v47 & 0x180000) == 0)
  {
    *(void *)blocunsigned int k = *((void *)this + 41);
    *(_OWORD *)&block[8] = xmmword_1BB8727B0;
    *(_OWORD *)&block[24] = xmmword_1BB8727C0;
    int v54 = *((_DWORD *)this + 129);
    uint64_t v55 = std::pmr::get_default_resource(Parameter);
    vp::Audio_Buffer::create((uint64_t)block, v54, v55, &v228);
    vp::Audio_Buffer::operator=((void **)this + 345, &v228);
    vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)&v228);
    uint64_t v47 = *((void *)this + 1112);
  }
  if ((v47 & 0x4400000) != 0) {
    myAllocABLDynamic((const AudioStreamBasicDescription *)((char *)this + 328), *((_DWORD *)this + 129), (AudioBufferList **)this + 198);
  }
  uint64_t v56 = this;
  if (*((_DWORD *)this + 1129) != 1) {
    goto LABEL_178;
  }
  if (*((_DWORD *)this + 123) == *((_DWORD *)this + 121)
    && CAStreamBasicDescription::IsEqual((VoiceProcessorV2 *)((char *)this + 328), v219))
  {
    uint64_t v56 = this;
    if (!*v222) {
      goto LABEL_178;
    }
    *long long v222 = 0;
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    uint64_t v57 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
    {
      uint64_t v58 = (*v57 ? *v57 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)blocunsigned int k = 136315394;
        *(void *)&block[4] = "vpInitializeDownlink.cpp";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 392;
        _os_log_impl(&dword_1BB0CE000, v58, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> initializedlp: ul-dl config no longer out of sync", block, 0x12u);
      }
    }
    uint64_t v56 = this;
    int v59 = (int *)*((void *)this + 1578);
    if (!v59 || !v222[3437] && !v222[3438]) {
      goto LABEL_178;
    }
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    CALegacyLog::log(v59, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeDownlink.cpp", 392, "InitializeDLP", "initializedlp: ul-dl config no longer out of sync");
  }
  else
  {
    *long long v222 = 1;
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    uint64_t v60 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
    {
      __int16 v61 = (*v60 ? *v60 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)blocunsigned int k = 136315394;
        *(void *)&block[4] = "vpInitializeDownlink.cpp";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 389;
        _os_log_impl(&dword_1BB0CE000, v61, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> initializedlp: ul-dl config out of sync", block, 0x12u);
      }
    }
    uint64_t v56 = this;
    unsigned int v62 = (int *)*((void *)this + 1578);
    if (!v62 || !v222[3437] && !v222[3438]) {
      goto LABEL_178;
    }
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    CALegacyLog::log(v62, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeDownlink.cpp", 389, "InitializeDLP", "initializedlp: ul-dl config out of sync");
  }
  uint64_t v56 = this;
LABEL_178:
  if (*((unsigned char *)v56 + 478))
  {
    myAllocABLDynamic((const AudioStreamBasicDescription *)((char *)v56 + 1488), *((_DWORD *)v56 + 382), (AudioBufferList **)v56 + 197);
    uint64_t v56 = this;
  }
  *((unsigned char *)v56 + 477) = 1;
  VoiceProcessorV2::InstantiateAndConfigureAuxAU(v56, 0);
  int v63 = this;
  if (*((unsigned char *)this + 2083) || *((unsigned char *)this + 472))
  {
    (*((void (**)(void, void, void, void, void, float))this + 1563))(*((void *)this + 1562), 0, 0, 0, 0, *((float *)this + 1133));
    (*((void (**)(void, uint64_t, void, void, void, float))this + 1563))(*((void *)this + 1562), 8, 0, 0, 0, *((float *)this + 1133));
    int v63 = this;
  }
  VoiceProcessorV2::LogVPParams(v63);
  if (VPLogScope(void)::once != -1) {
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
  }
  uint64_t v64 = (void *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
  {
    uint64_t v65 = (*v64 ? *v64 : MEMORY[0x1E4F14500]);
    if (os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)blocunsigned int k = 136315394;
      *(void *)&block[4] = "vpDebug_Logging.cpp";
      *(_WORD *)&block[12] = 1024;
      *(_DWORD *)&block[14] = 67;
      _os_log_impl(&dword_1BB0CE000, v65, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> ____________logdownlinkchain:begin___________", block, 0x12u);
    }
  }
  uint64_t v66 = (int *)*((void *)this + 1578);
  if (v66 && (v222[3437] || v222[3438]))
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    CALegacyLog::log(v66, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_Logging.cpp", 67, "LogVPDownlinkChain", "____________logdownlinkchain:begin___________");
  }
  for (uint64_t i = 0; i != 62; ++i)
  {
    uint64_t v68 = 0;
    uint64_t v69 = VoiceProcessorV2::VPDownlinkIndexToSubTypeArray;
    while (1)
    {
      int v70 = *v69;
      v69 += 18;
      if (v70 == i) {
        break;
      }
      if (++v68 == 62)
      {
        int v71 = 0;
        goto LABEL_204;
      }
    }
    int v71 = (const char *)&VoiceProcessorV2::VPDownlinkIndexToSubTypeArray[18 * v68 + 2];
LABEL_204:
    LODWORD(outData) = 0;
    LODWORD(__p) = 4;
    unint64_t v72 = (char *)this + 8 * i;
    AudioStreamBasicDescription v73 = (OpaqueAudioComponentInstance *)*((void *)v72 + 438);
    if (v73) {
      AudioUnitGetProperty(v73, 0x15u, 0, 0, &outData, (UInt32 *)&__p);
    }
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    UInt32 v74 = (const void **)(v72 + 3504);
    UInt32 v75 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
    {
      unsigned int v76 = (*v75 ? *v75 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG))
      {
        if (i >= 0x3E) {
          std::__throw_out_of_range[abi:ne180100]("bitset test argument out of range");
        }
        AudioStreamBasicDescription v77 = "ON";
        if (((*((void *)this + 1112) >> i) & 1) == 0) {
          AudioStreamBasicDescription v77 = "OFF";
        }
        uint64_t v78 = "(bypassed)";
        if (!outData) {
          uint64_t v78 = "";
        }
        long long v79 = *v74;
        *(_DWORD *)blocunsigned int k = 136316418;
        *(void *)&block[4] = "vpDebug_Logging.cpp";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 78;
        *(_WORD *)&block[18] = 2080;
        *(void *)&block[20] = v71;
        *(_WORD *)&block[28] = 2080;
        *(void *)&block[30] = v77;
        *(_WORD *)&block[38] = 2080;
        *(void *)&block[40] = v78;
        LOWORD(v241) = 2048;
        *(void *)((char *)&v241 + 2) = v79;
        _os_log_impl(&dword_1BB0CE000, v76, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp>     %s: %s %s (%p)", block, 0x3Au);
      }
    }
    uint64_t v80 = (int *)*((void *)this + 1578);
    if (v80 && (v222[3437] || v222[3438]))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      if (i >= 0x3E) {
        std::__throw_out_of_range[abi:ne180100]("bitset test argument out of range");
      }
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v81 = "ON";
      if (((*((void *)this + 1112) >> i) & 1) == 0) {
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v81 = "OFF";
      }
      char v82 = "(bypassed)";
      if (!outData) {
        char v82 = "";
      }
      CALegacyLog::log(v80, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_Logging.cpp", 78, "LogVPDownlinkChain", "    %s: %s %s (%p)", v71, v81, v82, *v74);
    }
    memset(&v228, 0, 24);
    std::vector<std::pair<unsigned int,float>>::__init_with_size[abi:ne180100]<std::pair<unsigned int,float>*,std::pair<unsigned int,float>*>((char *)&v228, *((uint64_t **)this + 3 * i + 1114), *((uint64_t **)this + 3 * i + 1115), (uint64_t)(*((void *)this + 3 * i + 1115) - *((void *)this + 3 * i + 1114)) >> 3);
    Float64 mSampleRate = v228.mSampleRate;
    if (*(void *)&v228.mFormatID == *(void *)&v228.mSampleRate)
    {
      Float64 mSampleRate = *(double *)&v228.mFormatID;
      if (*(void *)&v228.mFormatID) {
        goto LABEL_250;
      }
    }
    else
    {
      uint64_t v84 = 0;
      unint64_t v85 = (uint64_t)(*(void *)&v228.mFormatID - *(void *)&v228.mSampleRate) >> 3;
      unsigned int v86 = 1;
      do
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        __int16 v87 = (void *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
        {
          int v88 = (*v87 ? *v87 : MEMORY[0x1E4F14500]);
          if (os_log_type_enabled(v88, OS_LOG_TYPE_DEBUG))
          {
            CAX4CCString::CAX4CCString((CAX4CCString *)buf, *(_DWORD *)(*(void *)&mSampleRate + 8 * v84));
            float v89 = *(float *)(*(void *)&mSampleRate + 8 * v84 + 4);
            *(_DWORD *)blocunsigned int k = 136315906;
            *(void *)&block[4] = "vpDebug_Logging.cpp";
            *(_WORD *)&block[12] = 1024;
            *(_DWORD *)&block[14] = 82;
            *(_WORD *)&block[18] = 2080;
            *(void *)&block[20] = buf;
            *(_WORD *)&block[28] = 2048;
            *(double *)&block[30] = v89;
            _os_log_impl(&dword_1BB0CE000, v88, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp>          param %s: %f", block, 0x26u);
          }
        }
        float v90 = (int *)*((void *)this + 1578);
        if (v90 && (v222[3437] || v222[3438]))
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          uint64_t v91 = VPLogScope(void)::scope;
          CAX4CCString::CAX4CCString((CAX4CCString *)block, *(_DWORD *)(*(void *)&mSampleRate + 8 * v84));
          CALegacyLog::log(v90, 5, v91, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_Logging.cpp", 82, "LogVPDownlinkChain", "         param %s: %f", block, *(float *)(*(void *)&mSampleRate + 8 * v84 + 4));
        }
        uint64_t v84 = v86;
      }
      while (v85 > v86++);
      if (mSampleRate != 0.0)
      {
LABEL_250:
        operator delete(*(void **)&mSampleRate);
        continue;
      }
    }
  }
  if (VPLogScope(void)::once != -1) {
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
  }
  unint64_t v93 = (void *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
  {
    unint64_t v94 = (*v93 ? *v93 : MEMORY[0x1E4F14500]);
    if (os_log_type_enabled(v94, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v95 = *((void *)this + 1559);
      *(_DWORD *)blocunsigned int k = 136315906;
      *(void *)&block[4] = "vpDebug_Logging.cpp";
      *(_WORD *)&block[12] = 1024;
      *(_DWORD *)&block[14] = 87;
      *(_WORD *)&block[18] = 2080;
      *(void *)&block[20] = "(DL)-AUXVP";
      *(_WORD *)&block[28] = 2048;
      *(void *)&block[30] = v95;
      _os_log_impl(&dword_1BB0CE000, v94, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp>     %s: ON (%p)", block, 0x26u);
    }
  }
  BOOL v96 = (int *)*((void *)this + 1578);
  if (v96 && (v222[3437] || v222[3438]))
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    CALegacyLog::log(v96, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_Logging.cpp", 87, "LogVPDownlinkChain", "    %s: ON (%p)", "(DL)-AUXVP", *((const void **)this + 1559));
  }
  if (VPLogScope(void)::once != -1) {
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
  }
  unint64_t v97 = (void *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
  {
    UInt32 v98 = (*v97 ? *v97 : MEMORY[0x1E4F14500]);
    if (os_log_type_enabled(v98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)blocunsigned int k = 136315394;
      *(void *)&block[4] = "vpDebug_Logging.cpp";
      *(_WORD *)&block[12] = 1024;
      *(_DWORD *)&block[14] = 88;
      _os_log_impl(&dword_1BB0CE000, v98, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> ____________logdownlinkchain:end___________", block, 0x12u);
    }
  }
  long long v99 = (int *)*((void *)this + 1578);
  if (v99 && (v222[3437] || v222[3438]))
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    CALegacyLog::log(v99, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_Logging.cpp", 88, "LogVPDownlinkChain", "____________logdownlinkchain:end___________");
  }
  int v100 = (const AudioStreamBasicDescription *)((char *)this + 328);
  myAllocABLDynamic((const AudioStreamBasicDescription *)((char *)this + 328), *((_DWORD *)this + 121), (AudioBufferList **)this + 199);
  BOOL v101 = (_DWORD *)*((void *)this + 199);
  if (*v101)
  {
    unint64_t v102 = 0;
    unsigned int v103 = (void **)(v101 + 4);
    do
    {
      bzero(*v103, *((unsigned int *)v103 - 1));
      ++v102;
      v103 += 2;
    }
    while (v102 < *v101);
  }
  myAllocABLDynamic(v100, *((_DWORD *)this + 121), (AudioBufferList **)this + 200);
  unsigned int v104 = (_DWORD *)*((void *)this + 200);
  if (*v104)
  {
    unint64_t v105 = 0;
    unint64_t v106 = (void **)(v104 + 4);
    do
    {
      bzero(*v106, *((unsigned int *)v106 - 1));
      ++v105;
      v106 += 2;
    }
    while (v105 < *v104);
  }
  myAllocABLDynamic(v100, *((_DWORD *)this + 121), (AudioBufferList **)this + 201);
  unint64_t v107 = (_DWORD *)*((void *)this + 201);
  if (*v107)
  {
    unint64_t v108 = 0;
    unint64_t v109 = (void **)(v107 + 4);
    do
    {
      bzero(*v109, *((unsigned int *)v109 - 1));
      ++v108;
      v109 += 2;
    }
    while (v108 < *v107);
  }
  long long v110 = *(_OWORD *)((char *)this + 344);
  *(_OWORD *)&v228.Float64 mSampleRate = *(_OWORD *)&v100->mSampleRate;
  *(_OWORD *)&v228.UInt32 mBytesPerPacket = v110;
  *(void *)&v228.UInt32 mBitsPerChannel = *((void *)this + 45);
  if ((v228.mFormatFlags & 0x20) != 0)
  {
    UInt32 mChannelsPerFrame = 1;
  }
  else
  {
    UInt32 mChannelsPerFrame = v228.mChannelsPerFrame;
    if (!v228.mChannelsPerFrame)
    {
      UInt32 v112 = (v228.mBitsPerChannel + 7) >> 3;
      goto LABEL_299;
    }
  }
  UInt32 v112 = v228.mBytesPerFrame / mChannelsPerFrame;
LABEL_299:
  v228.UInt32 mBytesPerFrame = v112;
  v228.UInt32 mChannelsPerFrame = 1;
  v228.UInt32 mBytesPerPacket = v112;
  v228.mFramesPerPacket = 1;
  v228.mFormatFlags |= 0x20u;
  myAllocABLDynamic(&v228, *((_DWORD *)this + 129), (AudioBufferList **)this + 202);
  unsigned int v113 = (_DWORD *)*((void *)this + 202);
  if (*v113)
  {
    unint64_t v114 = 0;
    unsigned int v115 = (void **)(v113 + 4);
    do
    {
      bzero(*v115, *((unsigned int *)v115 - 1));
      ++v114;
      v115 += 2;
    }
    while (v114 < *v113);
  }
  myAllocABLDynamic(v100, *((_DWORD *)this + 129), (AudioBufferList **)this + 203);
  uint64_t v116 = (_DWORD *)*((void *)this + 203);
  if (*v116)
  {
    unint64_t v117 = 0;
    int v118 = (void **)(v116 + 4);
    do
    {
      bzero(*v118, *((unsigned int *)v118 - 1));
      ++v117;
      v118 += 2;
    }
    while (v117 < *v116);
  }
  VoiceProcessorV2::SaveFilesInitializeDLP(this);
  if (v222[3437])
  {
    int v119 = this;
    if (*((_DWORD *)this + 153))
    {
      if (*((_DWORD *)this + 1129) == 1)
      {
        myAllocABLDynamic(v219, *((_DWORD *)this + 123), (AudioBufferList **)this + 1900);
        int v119 = this;
      }
      if (*((unsigned char *)v119 + 477)) {
        VoiceProcessorV2::OpenSignalInjectionFiles(this, 0);
      }
    }
    else
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      uint64_t v120 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        float v121 = (*v120 ? *v120 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v121, OS_LOG_TYPE_ERROR))
        {
          int v122 = *((_DWORD *)this + 153);
          *(_DWORD *)blocunsigned int k = 136315650;
          *(void *)&block[4] = "vpDebug_FileInjection.cpp";
          *(_WORD *)&block[12] = 1024;
          *(_DWORD *)&block[14] = 111;
          *(_WORD *)&block[18] = 1024;
          *(_DWORD *)&block[20] = v122;
          _os_log_impl(&dword_1BB0CE000, v121, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> Failed to initialize downlink injection files due to unsupported format, mHwRefASBD.mChannelsPerFrame=%u", block, 0x18u);
        }
      }
      UInt32 v123 = (int *)*((void *)this + 1578);
      if (v123 && (v222[3437] || v222[3438]))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log(v123, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_FileInjection.cpp", 111, "InjectionFilesInitializeDLP", "Failed to initialize downlink injection files due to unsupported format, mHwRefASBD.mChannelsPerFrame=%u", *((_DWORD *)this + 153));
      }
    }
  }
  if (!*(void *)v220)
  {
    int v124 = (char *)operator new(0x68uLL);
    *(_OWORD *)(v124 + 8) = 0u;
    *(void *)int v124 = &unk_1F14B1230;
    *(_OWORD *)(v124 + 24) = 0u;
    *((void *)v124 + 5) = dispatch_queue_create("com.apple.SpeakerPowerQueueVP", 0);
    *((_OWORD *)v124 + 3) = 0u;
    *((_OWORD *)v124 + 4) = 0u;
    *((_OWORD *)v124 + 5) = 0u;
    v124[96] = 1;
    *(void *)&long long v125 = v124 + 24;
    *((void *)&v125 + 1) = v124;
    UInt32 v126 = (std::__shared_weak_count *)*((void *)v124 + 4);
    if (v126)
    {
      if (v126->__shared_owners_ == -1)
      {
        long long v221 = v125;
        atomic_fetch_add_explicit((atomic_ullong *volatile)v124 + 1, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit((atomic_ullong *volatile)v124 + 2, 1uLL, memory_order_relaxed);
        *((void *)v124 + 3) = v124 + 24;
        *((void *)v124 + 4) = v124;
        std::__shared_weak_count::__release_weak(v126);
        goto LABEL_331;
      }
    }
    else
    {
      long long v221 = v125;
      atomic_fetch_add_explicit((atomic_ullong *volatile)v124 + 1, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit((atomic_ullong *volatile)v124 + 2, 1uLL, memory_order_relaxed);
      *((void *)v124 + 3) = v124 + 24;
      *((void *)v124 + 4) = v124;
LABEL_331:
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v124);
      long long v125 = v221;
    }
    uint64_t v127 = (std::__shared_weak_count *)*((void *)this + 1998);
    *float v220 = v125;
    if (v127) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v127);
    }
  }
  if ((*((unsigned char *)this + 8903) & 1) == 0 || (*((unsigned char *)this + 8911) & 1) == 0)
  {
    unint64_t v128 = *(PowerLogManager **)v220;
    goto LABEL_337;
  }
  unint64_t v128 = (PowerLogManager *)*((void *)this + 1997);
  if (*((void *)this + 494)) {
    PowerLogManager::SetPowerVendor(v128, (OpaqueAudioComponentInstance **)this + 494, 1936748595);
  }
  else {
LABEL_337:
  }
    PowerLogManager::SetPowerVendor(v128, 0, 0);
  uint64_t v129 = *(void *)v220;
  if (PowerLogManagerLogScope(void)::once != -1) {
    dispatch_once(&PowerLogManagerLogScope(void)::once, &__block_literal_global_26216);
  }
  uint64_t v130 = MEMORY[0x1E4F14500];
  if (PowerLogManagerLogScope(void)::scope)
  {
    unint64_t v131 = *(NSObject **)PowerLogManagerLogScope(void)::scope;
    if (!*(void *)PowerLogManagerLogScope(void)::scope) {
      goto LABEL_346;
    }
  }
  else
  {
    unint64_t v131 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v131, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)blocunsigned int k = 136315394;
    *(void *)&block[4] = "PowerLogManager.cpp";
    *(_WORD *)&block[12] = 1024;
    *(_DWORD *)&block[14] = 285;
    _os_log_impl(&dword_1BB0CE000, v131, OS_LOG_TYPE_DEBUG, "%25s:%-5d will begin speaker power tracking...", block, 0x12u);
  }
LABEL_346:
  unint64_t v132 = *(NSObject **)(v129 + 16);
  *(void *)blocunsigned int k = MEMORY[0x1E4F143A8];
  *(void *)&block[8] = 0x40000000;
  *(void *)&block[16] = ___ZN15PowerLogManager18BeginPowerTrackingEv_block_invoke;
  *(void *)&block[24] = &__block_descriptor_tmp_9_26233;
  *(void *)&block[32] = v129;
  dispatch_sync(v132, block);
  (*(void (**)(VoiceProcessorV2 *))(*(void *)this + 248))(this);
  uint64_t v134 = this;
  if ((*((unsigned char *)this + 8902) & 4) == 0) {
    goto LABEL_480;
  }
  if (!*((void *)this + 488)) {
    goto LABEL_480;
  }
  float HeadsetSensitivity = VoiceProcessorV2::GetHeadsetSensitivity((int **)this);
  AudioUnitSetParameter(*((AudioUnit *)this + 488), 1u, 0, 0, HeadsetSensitivity, 0);
  unint64_t RefPortOwningDeviceID = VoiceProcessorV2::GetRefPortOwningDeviceID((int **)this);
  uint64_t v134 = this;
  if (!HIDWORD(RefPortOwningDeviceID)) {
    goto LABEL_480;
  }
  memset(buf, 0, 24);
  int outData = 0;
  long long v233 = 0uLL;
  int v137 = **((_DWORD **)this + 292);
  if (v137 == 1885892674 || v137 == 1885892706)
  {
    CFTypeRef cf = 0;
    ioDataSize[0] = 8;
    std::string __p = (void *)0x676C6F62646F7663;
    LODWORD(v235) = 0;
    if (AudioObjectGetPropertyData(RefPortOwningDeviceID, (const AudioObjectPropertyAddress *)&__p, 0, 0, ioDataSize, &cf))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      uint64_t v138 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        float v139 = (*v138 ? *v138 : v130);
        if (os_log_type_enabled(v139, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)blocunsigned int k = 136315394;
          *(void *)&block[4] = "vpInitializeDownlink.cpp";
          *(_WORD *)&block[12] = 1024;
          *(_DWORD *)&block[14] = 879;
          _os_log_impl(&dword_1BB0CE000, v139, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> [VolumeLimit] failed to get volume curve", block, 0x12u);
        }
      }
      float v140 = (int *)*((void *)this + 1578);
      if (v140 && (v222[3437] || v222[3438]))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log(v140, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeDownlink.cpp", 879, "SetVolumeCurveForVolumeLimit", "[VolumeLimit] failed to get volume curve");
      }
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      int64_t v141 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        uint64_t v142 = (*v141 ? *v141 : v130);
        if (os_log_type_enabled(v142, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)blocunsigned int k = 136315394;
          *(void *)&block[4] = "vpInitializeDownlink.cpp";
          *(_WORD *)&block[12] = 1024;
          *(_DWORD *)&block[14] = 901;
          _os_log_impl(&dword_1BB0CE000, v142, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> [VolumeLimit] Creating volume curves", block, 0x12u);
        }
      }
      int v143 = (int *)*((void *)this + 1578);
      if (v143 && (v222[3437] || v222[3438]))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log(v143, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeDownlink.cpp", 901, "SetVolumeCurveForVolumeLimit", "[VolumeLimit] Creating volume curves");
      }
      int v144 = *((_DWORD *)this + 596);
      if (v144 != 1634231920 && v144 != 1633759844)
      {
        std::vector<float>::vector(block, 2uLL);
        **(void **)blocunsigned int k = 0x40000000C2980000;
        if (*(void *)buf)
        {
          *(void *)&uint8_t buf[8] = *(void *)buf;
          operator delete(*(void **)buf);
        }
        *(void *)AudioBufferList buf = *(void *)block;
        *(_OWORD *)&uint8_t buf[8] = *(_OWORD *)&block[8];
        std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)&outData, *(char **)block, *(uint64_t *)&block[8], (uint64_t)(*(void *)&block[8] - *(void *)block) >> 2);
        goto LABEL_446;
      }
      int v242 = 0;
      *(_OWORD *)blocunsigned int k = xmmword_1BB898AF8;
      *(_OWORD *)&block[16] = unk_1BB898B08;
      *(_OWORD *)&block[32] = xmmword_1BB898B18;
      long long v241 = unk_1BB898B28;
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)&outData, block, (uint64_t)v243, 0x11uLL);
      unint64_t v145 = v233 - (void)outData;
      unint64_t v146 = (((void)v233 - (void)outData) >> 2);
      std::vector<float>::vector(block, v146);
      if ((v145 >> 2))
      {
        uint64_t v148 = 0;
        *(float *)v147.i32 = 78.0 / (float)((v145 >> 2) - 1);
        uint64x2_t v149 = (uint64x2_t)vdupq_n_s64(v146 - 1);
        float32x2_t v150 = (float32x2_t)vdup_n_s32(0xC2980000);
        int64x2_t v151 = vdupq_n_s64(2uLL);
        int64x2_t v152 = (int64x2_t)xmmword_1BB872720;
        uint64_t v153 = *(void *)block;
        float32x2_t v154 = (float32x2_t)vdup_lane_s32(v147, 0);
        do
        {
          int32x2_t v155 = vmovn_s64((int64x2_t)vcgeq_u64(v149, (uint64x2_t)v152));
          v156.i32[0] = v148;
          v156.i32[1] = v148 + 1;
          float32x2_t v157 = vmla_f32(v150, v154, vcvt_f32_u32(v156));
          if (v155.i8[0]) {
            *(_DWORD *)(v153 + 4 * v148) = v157.i32[0];
          }
          if (v155.i8[4]) {
            *(_DWORD *)(v153 + 4 * v148 + 4) = v157.i32[1];
          }
          v148 += 2;
          int64x2_t v152 = vaddq_s64(v152, v151);
        }
        while (((v146 + 1) & 0x1FFFFFFFELL) != v148);
      }
    }
    else
    {
      CFTypeRef v162 = cf;
      if (cf) {
        CFRetain(cf);
      }
      applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&CFArray, v162);
      if (!CFArray)
      {
        exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      applesauce::CF::convert_to<std::vector<float>,0>((uint64_t)block, CFArray);
      if (outData)
      {
        *(void *)&long long v233 = outData;
        operator delete(outData);
      }
      int outData = *(void **)block;
      long long v233 = *(_OWORD *)&block[8];
      uint64_t v163 = (*(void *)&block[8] - *(void *)block) >> 2;
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      UInt32 v164 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        unint64_t v165 = (*v164 ? *v164 : v130);
        if (os_log_type_enabled(v165, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)blocunsigned int k = 136315650;
          *(void *)&block[4] = "vpInitializeDownlink.cpp";
          *(_WORD *)&block[12] = 1024;
          *(_DWORD *)&block[14] = 877;
          *(_WORD *)&block[18] = 1024;
          *(_DWORD *)&block[20] = v163;
          _os_log_impl(&dword_1BB0CE000, v165, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> [VolumeLimit] number of volume map steps: %u", block, 0x18u);
        }
      }
      float v166 = (int *)*((void *)this + 1578);
      if (v166 && (v222[3437] || v222[3438]))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log(v166, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeDownlink.cpp", 877, "SetVolumeCurveForVolumeLimit", "[VolumeLimit] number of volume map steps: %u", v163);
      }
      if (CFArray) {
        CFRelease(CFArray);
      }
      std::vector<float>::vector(block, v163);
      if (v163)
      {
        uint64_t v168 = 0;
        *(float *)v167.i32 = 78.0 / (float)(v163 - 1);
        uint64x2_t v169 = (uint64x2_t)vdupq_n_s64((unint64_t)v163 - 1);
        float32x2_t v170 = (float32x2_t)vdup_n_s32(0xC2980000);
        int64x2_t v171 = vdupq_n_s64(2uLL);
        int64x2_t v172 = (int64x2_t)xmmword_1BB872720;
        uint64_t v173 = *(void *)block;
        float32x2_t v174 = (float32x2_t)vdup_lane_s32(v167, 0);
        do
        {
          int32x2_t v175 = vmovn_s64((int64x2_t)vcgeq_u64(v169, (uint64x2_t)v172));
          v176.i32[0] = v168;
          v176.i32[1] = v168 + 1;
          float32x2_t v177 = vmla_f32(v170, v174, vcvt_f32_u32(v176));
          if (v175.i8[0]) {
            *(_DWORD *)(v173 + 4 * v168) = v177.i32[0];
          }
          if (v175.i8[4]) {
            *(_DWORD *)(v173 + 4 * v168 + 4) = v177.i32[1];
          }
          v168 += 2;
          int64x2_t v172 = vaddq_s64(v172, v171);
        }
        while (((v163 + 1) & 0x1FFFFFFFELL) != v168);
      }
    }
    if (*(void *)buf)
    {
      *(void *)&uint8_t buf[8] = *(void *)buf;
      operator delete(*(void **)buf);
    }
    *(_OWORD *)AudioBufferList buf = *(_OWORD *)block;
    *(void *)&_OWORD buf[16] = *(void *)&block[16];
LABEL_446:
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    long long v178 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
    {
      long long v179 = (*v178 ? *v178 : v130);
      if (os_log_type_enabled(v179, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)blocunsigned int k = 136315394;
        *(void *)&block[4] = "vpInitializeDownlink.cpp";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 929;
        _os_log_impl(&dword_1BB0CE000, v179, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> [VolumeLimit] Setting volume curves", block, 0x12u);
      }
    }
    long long v180 = (int *)*((void *)this + 1578);
    if (v180 && (v222[3437] || v222[3438]))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      CALegacyLog::log(v180, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeDownlink.cpp", 929, "SetVolumeCurveForVolumeLimit", "[VolumeLimit] Setting volume curves");
    }
    CFTypeRef CFArray = applesauce::CF::details::make_CFArrayRef<float>(buf);
    applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[9],applesauce::CF::ArrayRef>((applesauce::CF::TypeRef *)block, "InputMap", &CFArray);
    CFArrayRef v181 = applesauce::CF::details::make_CFArrayRef<float>(&outData);
    *(void *)UInt32 ioDataSize = v181;
    applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&block[16], "OutputMap");
    if (v181) {
      CFRetain(v181);
    }
    *(void *)&block[24] = v181;
    std::string __p = block;
    uint64_t v235 = 2;
    CFDictionaryRef CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)&__p);
    uint64_t v183 = 0;
    CFTypeRef cf = CFDictionaryRef;
    do
    {
      long long v184 = *(const void **)&block[v183 + 24];
      if (v184) {
        CFRelease(v184);
      }
      long long v185 = *(const void **)&block[v183 + 16];
      if (v185) {
        CFRelease(v185);
      }
      v183 -= 16;
    }
    while (v183 != -32);
    if (v181) {
      CFRelease(v181);
    }
    if (CFArray) {
      CFRelease(CFArray);
    }
    *(void *)blocunsigned int k = CFDictionaryRef;
    AudioUnitSetProperty(*((AudioUnit *)this + 488), 0xFA01u, 0, 0, block, 8u);
    if (CFDictionaryRef) {
      CFRelease(CFDictionaryRef);
    }
    goto LABEL_475;
  }
  if (v137 == 1885892727)
  {
    *(void *)blocunsigned int k = 0x40000000C2980000;
    std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(buf, block, (uint64_t)&block[8], 2uLL);
    std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)&outData, *(char **)buf, *(uint64_t *)&buf[8], (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 2);
    goto LABEL_446;
  }
  if (VPLogScope(void)::once != -1) {
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
  }
  int v158 = (void *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
  {
    unint64_t v159 = (*v158 ? *v158 : v130);
    if (os_log_type_enabled(v159, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)&__p, **((_DWORD **)this + 292));
      *(_DWORD *)blocunsigned int k = 136315650;
      *(void *)&block[4] = "vpInitializeDownlink.cpp";
      *(_WORD *)&block[12] = 1024;
      *(_DWORD *)&block[14] = 923;
      *(_WORD *)&block[18] = 2080;
      *(void *)&block[20] = &__p;
      _os_log_impl(&dword_1BB0CE000, v159, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> Unsupported port type: %s", block, 0x1Cu);
    }
  }
  unsigned int v160 = (int *)*((void *)this + 1578);
  if (v160 && (v222[3437] || v222[3438]))
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    uint64_t v161 = VPLogScope(void)::scope;
    CAX4CCString::CAX4CCString((CAX4CCString *)block, **((_DWORD **)this + 292));
    CALegacyLog::log(v160, 1, v161, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeDownlink.cpp", 923, "SetVolumeCurveForVolumeLimit", "Unsupported port type: %s", block);
  }
LABEL_475:
  if (outData)
  {
    *(void *)&long long v233 = outData;
    operator delete(outData);
  }
  if (*(void *)buf)
  {
    *(void *)&uint8_t buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }
  uint64_t v134 = this;
LABEL_480:
  if ((*((unsigned char *)v134 + 8901) & 0x20) != 0 && *((void *)v134 + 483))
  {
    float v186 = VoiceProcessorV2::GetHeadsetSensitivity((int **)v134);
    AudioUnitSetParameter(*((AudioUnit *)this + 483), 0x18u, 0, 0, v186, 0);
    AudioUnitSetParameter(*((AudioUnit *)this + 483), 0x1Au, 0, 0, 2.0, 0);
    unsigned int OutputPortProductIDForPME = VoiceProcessorV2::GetOutputPortProductIDForPME(this);
    if (OutputPortProductIDForPME) {
      AudioUnitSetParameter(*((AudioUnit *)this + 483), 0x1Bu, 0, 0, (float)OutputPortProductIDForPME, 0);
    }
    uint64_t v134 = this;
    if (v222[3437])
    {
      VoiceProcessorV2::GetRefPortUIDForPME((VoiceProcessorV2 *)&outData, this);
      double v188 = (NSString *)outData;
      if (outData) {
        CFRetain(outData);
      }
      long long v226 = v188;
      if (va::PersonalAudioInterface::isPersonalMediaEnabled(&v226))
      {
        long long v189 = (NSString *)outData;
        if (outData) {
          CFRetain(outData);
        }
        float v225 = v189;
        va::PersonalAudioInterface::getPreset((applesauce::CF::DictionaryRef *)&__p, &v225);
        if (v189) {
          CFRelease(v189);
        }
      }
      else
      {
        va::PersonalAudioInterface::getPreset((va::PersonalAudioInterface *)&__p);
      }
      if (v188) {
        CFRelease(v188);
      }
      double v190 = __p;
      if (__p)
      {
        CFRetain(__p);
        CFTypeRef cf = v190;
        applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,applesauce::CF::DictionaryRef>((applesauce::CF::TypeRef *)block, "hlc_paconfig", &cf);
        ioDataSize[0] = OutputPortProductIDForPME;
        CFNumberRef v191 = CFNumberCreate(0, kCFNumberIntType, ioDataSize);
        CFTypeRef CFArray = v191;
        if (!v191)
        {
          float v215 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v215, "Could not construct");
        }
        double v192 = applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,applesauce::CF::NumberRef>((applesauce::CF::TypeRef *)&block[16], "hlc_headset", &CFArray);
        LODWORD(valuePtr) = va::PersonalAudioInterface::isPersonalMediaEnabled(v192);
        CFNumberRef v193 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
        *(void *)UInt32 ioDataSize = v193;
        if (!v193)
        {
          float v216 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v216, "Could not construct");
        }
        applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,applesauce::CF::NumberRef>((applesauce::CF::TypeRef *)&block[32], "hlc_enable", (const void **)ioDataSize);
        float v227 = v186;
        CFNumberRef v194 = CFNumberCreate(0, kCFNumberFloatType, &v227);
        CFNumberRef valuePtr = v194;
        if (!v194)
        {
          uint64_t v217 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v217, "Could not construct");
        }
        applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,applesauce::CF::NumberRef>((applesauce::CF::TypeRef *)&v241, "hlc_sensitivity", (const void **)&valuePtr);
        *(void *)AudioBufferList buf = block;
        *(void *)&uint8_t buf[8] = 4;
        CFDictionaryRef v195 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)buf);
        uint64_t v196 = (const void *)*((void *)this + 279);
        *((void *)this + 279) = v195;
        if (v196) {
          CFRelease(v196);
        }
        for (uint64_t j = 0; j != -64; j -= 16)
        {
          uint64_t v198 = *(const void **)((char *)&v241 + j + 8);
          if (v198) {
            CFRelease(v198);
          }
          float v199 = *(const void **)&block[j + 48];
          if (v199) {
            CFRelease(v199);
          }
        }
        CFRelease(v194);
        CFRelease(v193);
        CFRelease(v191);
        if (cf) {
          CFRelease(cf);
        }
        if (v222[3437]) {
          VoiceProcessorV2::PListWriteSetPropertyParameters(this, 1751933808);
        }
        float v200 = (const void *)*((void *)this + 279);
        *((void *)this + 279) = 0;
        if (v200) {
          CFRelease(v200);
        }
        if (__p) {
          CFRelease(__p);
        }
      }
      if (outData) {
        CFRelease(outData);
      }
      uint64_t v134 = this;
    }
  }
  uint64_t v201 = *((void *)v134 + 1112);
  if ((v201 & 0x200000000000) != 0 && *((void *)this + 483)
    || (v201 & 0x4000000000000) != 0 && *((void *)this + 488))
  {
    unint64_t v202 = VoiceProcessorV2::GetRefPortOwningDeviceID((int **)this);
    if (HIDWORD(v202))
    {
      AudioObjectID v203 = v202;
      strcpy(buf, "dlovptuo");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      LODWORD(outData) = 4;
      LODWORD(__p) = 0;
      if (AudioObjectGetPropertyData(v202, (const AudioObjectPropertyAddress *)buf, 0, 0, (UInt32 *)&outData, &__p)
        && (**((_DWORD **)this + 292) != 1885892727
         || (*(void *)blocunsigned int k = 0x6F757470766F6C64,
             *(_DWORD *)&block[8] = 1,
             LODWORD(cf) = 4,
             LODWORD(CFArray) = 0,
             AudioObjectGetPropertyData(v203, (const AudioObjectPropertyAddress *)block, 0, 0, (UInt32 *)&cf, &CFArray))))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        float v204 = (void *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
        {
          __int16 v205 = (*v204 ? *v204 : v130);
          if (os_log_type_enabled(v205, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)blocunsigned int k = 136315394;
            *(void *)&block[4] = "vpInitializeDownlink.cpp";
            *(_WORD *)&block[12] = 1024;
            *(_DWORD *)&block[14] = 705;
            _os_log_impl(&dword_1BB0CE000, v205, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> Error reading Hardware Volume!", block, 0x12u);
          }
        }
        uint64_t v206 = (int *)*((void *)this + 1578);
        if (v206 && (v222[3437] || v222[3438]))
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          CALegacyLog::log(v206, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeDownlink.cpp", 705, "GetHardwareVolume", "Error reading Hardware Volume!");
        }
      }
      else
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        __int16 v207 = (void *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
        {
          int v208 = (*v207 ? *v207 : v130);
          if (os_log_type_enabled(v208, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)blocunsigned int k = 136315906;
            *(void *)&block[4] = "vpInitializeDownlink.cpp";
            *(_WORD *)&block[12] = 1024;
            *(_DWORD *)&block[14] = 702;
            *(_WORD *)&block[18] = 2048;
            *(double *)&block[20] = *(float *)&__p;
            *(_WORD *)&block[28] = 1024;
            *(_DWORD *)&block[30] = v203;
            _os_log_impl(&dword_1BB0CE000, v208, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> HW Volume in %f dB from DeviceID %u !", block, 0x22u);
          }
        }
        uint64_t v209 = (int *)*((void *)this + 1578);
        if (v209 && (v222[3437] || v222[3438]))
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          CALegacyLog::log(v209, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeDownlink.cpp", 702, "GetHardwareVolume", "HW Volume in %f dB from DeviceID %u !", *(float *)&__p, v203);
        }
        (*(void (**)(VoiceProcessorV2 *, uint64_t, void **, uint64_t))(*(void *)this + 56))(this, 32797, &__p, 4);
      }
    }
  }
  buf[0] = 0;
  VoiceProcessorV2::ReadDefaultsOverride(@"vp_disable_oaugain", 0, buf, 0, v133);
  if (buf[0])
  {
    *((void *)this + 558) = 3259498496;
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    uint64_t v210 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
    {
      char v211 = (*v210 ? *v210 : v130);
      if (os_log_type_enabled(v211, OS_LOG_TYPE_DEFAULT))
      {
        double v212 = *((float *)this + 1116);
        double v213 = *((float *)this + 1117);
        *(_DWORD *)blocunsigned int k = 136315906;
        *(void *)&block[4] = "vpInitializeDownlink.cpp";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 518;
        *(_WORD *)&block[18] = 2048;
        *(double *)&block[20] = v212;
        *(_WORD *)&block[28] = 2048;
        *(double *)&block[30] = v213;
        _os_log_impl(&dword_1BB0CE000, v211, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Re-set mix gain range to [%f, %f]dB", block, 0x26u);
      }
    }
    float v214 = (int *)*((void *)this + 1578);
    if (v214 && (v222[3437] || v222[3438]))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      CALegacyLog::log(v214, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeDownlink.cpp", 518, "InitializeDLP", "Re-set mix gain range to [%f, %f]dB", *((float *)this + 1116), *((float *)this + 1117));
    }
  }
}

void sub_1BB4ED464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,int a22,__int16 a23,char a24,char a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,int a37,__int16 a38,char a39,char a40,int a41,__int16 a42,char a43,char a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,char a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (__p) {
    operator delete(__p);
  }
  if (a54) {
    operator delete(a54);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

float VoiceProcessorV2::GetHeadsetSensitivity(int **this)
{
  *(void *)&v24[5] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (char *)this + 15961;
  float outData = 105.0;
  unint64_t RefPortOwningDeviceID = VoiceProcessorV2::GetRefPortOwningDeviceID(this);
  if (!HIDWORD(RefPortOwningDeviceID)
    || (int v4 = RefPortOwningDeviceID,
        *(void *)&inAddress.mSelector = 0x676C6F62646F7365,
        inAddress.muint64_t Element = 0,
        UInt32 ioDataSize = 4,
        AudioObjectGetPropertyData(RefPortOwningDeviceID, &inAddress, 0, 0, &ioDataSize, &outData))
    || (outData > 50.0 ? (BOOL v5 = outData < 150.0) : (BOOL v5 = 0), !v5))
  {
    int v6 = *((_DWORD *)this + 596);
    if (v6 <= 1647521841)
    {
      if (v6 <= 1633759843)
      {
        if (v6 == 1214329654) {
          goto LABEL_23;
        }
        int v8 = 1214394677;
      }
      else
      {
        if (v6 == 1633759844 || v6 == 1634231920) {
          goto LABEL_23;
        }
        int v8 = 1647393080;
      }
    }
    else
    {
      if (v6 <= 1647718502)
      {
        if (v6 == 1647521842) {
          goto LABEL_40;
        }
        if (v6 != 1647522096)
        {
          if (v6 == 1647718502)
          {
            int v7 = 1120980173;
LABEL_24:
            float outData = *(float *)&v7;
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            unsigned int v9 = (void *)VPLogScope(void)::scope;
            if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
            {
              uint64_t v10 = (*v9 ? *v9 : MEMORY[0x1E4F14500]);
              if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)AudioBufferList buf = 136315650;
                int v20 = "vpInitializeDownlink.cpp";
                __int16 v21 = 1024;
                int v22 = 839;
                __int16 v23 = 2048;
                *(double *)uint64_t v24 = outData;
                _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Unable to read sensitivity from device setting default (%f)", buf, 0x1Cu);
              }
            }
            int16x8_t v11 = this[1578];
            if (v11 && (*v2 || v2[1]))
            {
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              CALegacyLog::log(v11, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeDownlink.cpp", 839, "GetHeadsetSensitivity", "Unable to read sensitivity from device setting default (%f)");
            }
            return outData;
          }
LABEL_40:
          int v7 = 1121058816;
          goto LABEL_24;
        }
LABEL_23:
        int v7 = 1120403456;
        goto LABEL_24;
      }
      if (v6 == 1647718503)
      {
        int v7 = 1121045709;
        goto LABEL_24;
      }
      if (v6 == 1752709424) {
        goto LABEL_23;
      }
      int v8 = 2003068262;
    }
    if (v6 != v8) {
      goto LABEL_40;
    }
    goto LABEL_23;
  }
  if (VPLogScope(void)::once != -1) {
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
  }
  int16x8_t v13 = (void *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
  {
    int v14 = (*v13 ? *v13 : MEMORY[0x1E4F14500]);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioBufferList buf = 136315906;
      int v20 = "vpInitializeDownlink.cpp";
      __int16 v21 = 1024;
      int v22 = 789;
      __int16 v23 = 1024;
      v24[0] = v4;
      LOWORD(v24[1]) = 2048;
      *(double *)((char *)&v24[1] + 2) = outData;
      _os_log_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Sensitivity from device(%u) = %f", buf, 0x22u);
    }
  }
  double v15 = this[1578];
  if (v15 && (*v2 || v2[1]))
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    CALegacyLog::log(v15, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeDownlink.cpp", 789, "GetHeadsetSensitivity", "Sensitivity from device(%u) = %f");
  }
  return outData;
}

unint64_t VoiceProcessorV2::GetOutputPortProductIDForPME(VoiceProcessorV2 *this)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 596) >> 1 == 823859251) {
    return 8210;
  }
  if ((**((_DWORD **)this + 292) | 0x20) != 0x70687062) {
    return 0;
  }
  unint64_t result = VoiceProcessorV2::IsRefPortOwningDeviceBluetoothAppleProduct((int **)this);
  if (result)
  {
    OSStatus outData = 0;
    unint64_t RefPortOwningDeviceID = VoiceProcessorV2::GetRefPortOwningDeviceID((int **)this);
    unsigned int v4 = RefPortOwningDeviceID;
    if (HIDWORD(RefPortOwningDeviceID))
    {
      *(void *)&inAddress.mSelector = 0x676C6F6262616964;
      inAddress.muint64_t Element = 0;
      UInt32 ioDataSize = 4;
      OSStatus PropertyData = AudioObjectGetPropertyData(RefPortOwningDeviceID, &inAddress, 0, 0, &ioDataSize, &outData);
      if (PropertyData)
      {
        OSStatus v7 = PropertyData;
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        int v8 = (void *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
        {
          unsigned int v9 = (*v8 ? *v8 : MEMORY[0x1E4F14500]);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          {
            UInt32 ioDataSize = 136315906;
            float v16 = "vpInitializeDownlink.cpp";
            __int16 v17 = 1024;
            int v18 = 679;
            __int16 v19 = 1024;
            OSStatus v20 = v7;
            __int16 v21 = 1024;
            unsigned int v22 = v4;
            _os_log_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> error %d getting Bluetooth product ID for reference device %u", (uint8_t *)&ioDataSize, 0x1Eu);
          }
        }
        uint64_t v10 = (int *)*((void *)this + 1578);
        if (v10 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
        {
          if (VPLogScope(void)::once != -1)
          {
            double v12 = (int *)*((void *)this + 1578);
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            uint64_t v10 = v12;
          }
          CALegacyLog::log(v10, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeDownlink.cpp", 679, "GetRefPortOwningDeviceBluetoothProductID", "error %d getting Bluetooth product ID for reference device %u", v7, v4);
        }
        uint64_t v5 = 0;
      }
      else
      {
        uint64_t v5 = 0x100000000;
        OSStatus v7 = outData;
      }
      unsigned int v4 = v7;
    }
    else
    {
      uint64_t v5 = 0x100000000;
    }
    unint64_t v11 = v5 & 0x100000000 | v4;
    if (v11 <= 0x100000000) {
      return 0x100000000;
    }
    else {
      return v11;
    }
  }
  return result;
}

unint64_t VoiceProcessorV2::GetRefPortUIDForPME(VoiceProcessorV2 *this, VoiceProcessorV2 *a2)
{
  unint64_t result = VoiceProcessorV2::GetRefPortID(a2);
  if (HIDWORD(result))
  {
    CFTypeRef outData = 0;
    *(void *)&v4.mSelector = 0x6F75747070756964;
    v4.muint64_t Element = 0;
    UInt32 ioDataSize = 8;
    unint64_t result = AudioObjectGetPropertyData(result, &v4, 0, 0, &ioDataSize, &outData);
    if (!result) {
      return (unint64_t)applesauce::CF::StringRef::StringRef(this, outData);
    }
  }
  *(void *)this = 0;
  return result;
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,applesauce::CF::DictionaryRef>(applesauce::CF::TypeRef *a1, char *a2, const void **a3)
{
  applesauce::CF::TypeRef::TypeRef(a1, a2);
  uint64_t v5 = *a3;
  if (v5) {
    CFRetain(v5);
  }
  *((void *)a1 + 1) = v5;
  return a1;
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,applesauce::CF::NumberRef>(applesauce::CF::TypeRef *a1, char *a2, const void **a3)
{
  applesauce::CF::TypeRef::TypeRef(a1, a2);
  uint64_t v5 = *a3;
  if (v5) {
    CFRetain(v5);
  }
  *((void *)a1 + 1) = v5;
  return a1;
}

uint64_t VoiceProcessorV2::GetRefPortOwningDeviceID(int **this)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  OSStatus outData = 0;
  unint64_t RefPortID = VoiceProcessorV2::GetRefPortID((VoiceProcessorV2 *)this);
  unsigned int v3 = RefPortID;
  if (HIDWORD(RefPortID))
  {
    *(void *)&inAddress.mSelector = 0x676C6F62706F776ELL;
    inAddress.muint64_t Element = 0;
    UInt32 ioDataSize = 4;
    OSStatus PropertyData = AudioObjectGetPropertyData(RefPortID, &inAddress, 0, 0, &ioDataSize, &outData);
    if (PropertyData)
    {
      OSStatus v6 = PropertyData;
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      OSStatus v7 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        int v8 = (*v7 ? *v7 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          UInt32 ioDataSize = 136315906;
          double v15 = "vpInitializeDownlink.cpp";
          __int16 v16 = 1024;
          int v17 = 649;
          __int16 v18 = 1024;
          OSStatus v19 = v6;
          __int16 v20 = 1024;
          unsigned int v21 = v3;
          _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> error %d getting owning device ID for reference port %u", (uint8_t *)&ioDataSize, 0x1Eu);
        }
      }
      unsigned int v9 = this[1578];
      if (v9 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
      {
        if (VPLogScope(void)::once != -1)
        {
          unint64_t v11 = this[1578];
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          unsigned int v9 = v11;
        }
        CALegacyLog::log(v9, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeDownlink.cpp", 649, "GetRefPortOwningDeviceID", "error %d getting owning device ID for reference port %u", v6, v3);
      }
      uint64_t v4 = 0;
    }
    else
    {
      uint64_t v4 = 0x100000000;
      OSStatus v6 = outData;
    }
    unsigned int v3 = v6;
  }
  else
  {
    uint64_t v4 = 0x100000000;
  }
  return v4 & 0x100000000 | v3;
}

uint64_t VoiceProcessorV2::GetRefPortID(VoiceProcessorV2 *this)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  CFArrayRef outData = 0;
  *(void *)&inAddress.mSelector = 0x6F75747064637073;
  inAddress.muint64_t Element = 0;
  AudioObjectID v2 = *((_DWORD *)this + 284);
  unsigned int v3 = (const void *)*((void *)this + 292);
  UInt32 ioDataSize = 8;
  unsigned int PropertyData = AudioObjectGetPropertyData(v2, &inAddress, 4u, v3, &ioDataSize, &outData);
  if (!PropertyData)
  {
    CFArrayRef v10 = outData;
    if (outData)
    {
      CFTypeID v11 = CFGetTypeID(outData);
      if (v11 == CFArrayGetTypeID())
      {
        if (CFArrayGetCount(v10))
        {
          unint64_t v12 = applesauce::CF::details::at_as<unsigned int>(v10, 0);
          if ((v12 & 0xFF00000000) != 0) {
            unsigned int PropertyData = v12;
          }
          else {
            unsigned int PropertyData = 0;
          }
        }
        else
        {
          unsigned int PropertyData = 0;
        }
        CFRelease(v10);
        goto LABEL_28;
      }
      CFRelease(v10);
    }
    unsigned int PropertyData = 0;
LABEL_28:
    uint64_t v9 = 0x100000000;
    return v9 | PropertyData;
  }
  if (VPLogScope(void)::once != -1) {
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
  }
  uint64_t v5 = (void *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
  {
    OSStatus v6 = (*v5 ? *v5 : MEMORY[0x1E4F14500]);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v7 = *((_DWORD *)this + 284);
      UInt32 ioDataSize = 136315906;
      int v17 = "vpInitializeDownlink.cpp";
      __int16 v18 = 1024;
      int v19 = 621;
      __int16 v20 = 1024;
      unsigned int v21 = PropertyData;
      __int16 v22 = 1024;
      int v23 = v7;
      _os_log_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> error %d getting port ID for reference device %u", (uint8_t *)&ioDataSize, 0x1Eu);
    }
  }
  int v8 = (int *)*((void *)this + 1578);
  if (v8 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    CALegacyLog::log(v8, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeDownlink.cpp", 621, "GetRefPortID", "error %d getting port ID for reference device %u", PropertyData, *((_DWORD *)this + 284));
  }
  uint64_t v9 = 0;
  return v9 | PropertyData;
}

void sub_1BB4EE87C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

BOOL VoiceProcessorV2::IsRefPortOwningDeviceBluetoothAppleProduct(int **this)
{
  int outData = 0;
  unint64_t RefPortOwningDeviceID = VoiceProcessorV2::GetRefPortOwningDeviceID(this);
  uint64_t v2 = 0;
  if (HIDWORD(RefPortOwningDeviceID))
  {
    *(void *)&inAddress.mSelector = 0x676C6F6269616170;
    inAddress.muint64_t Element = 0;
    UInt32 ioDataSize = 4;
    if (AudioObjectGetPropertyData(RefPortOwningDeviceID, &inAddress, 0, 0, &ioDataSize, &outData)) {
      BOOL v3 = 1;
    }
    else {
      BOOL v3 = outData == 0;
    }
    return !v3;
  }
  return v2;
}

void std::__shared_ptr_emplace<PowerLogManager>::__on_zero_shared(uint64_t a1)
{
  dispatch_release(*(dispatch_object_t *)(a1 + 40));
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 56);
    uint64_t v4 = *(void **)(a1 + 48);
    if (v3 != v2)
    {
      do
        CACFDictionary::~CACFDictionary((CACFDictionary *)(v3 - 16));
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 48);
    }
    *(void *)(a1 + 56) = v2;
    operator delete(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 32);
  if (v5)
  {
    std::__shared_weak_count::__release_weak(v5);
  }
}

void std::__shared_ptr_emplace<PowerLogManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14B1230;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

void std::__shared_ptr_emplace<PowerLogManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14B1230;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t VoiceProcessorV2::InitializeSpeakerTelemetryInput(VoiceProcessorV2 *this, const AudioStreamBasicDescription *a2, int a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  __int16 v20 = (char *)this + 2392;
  char v21 = (*(uint64_t (**)(void))(*((void *)this + 299) + 16))();
  atomic_fetch_add((atomic_uint *volatile)this + 620, 1u);
  while (*((_DWORD *)this + 621))
    usleep(0x1F4u);
  if (VPLogScope(void)::once != -1) {
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
  }
  int v7 = (void *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
  {
    int v8 = (*v7 ? *v7 : MEMORY[0x1E4F14500]);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      CAFormatter::CAFormatter((CAFormatter *)&v19, a2);
      *(_DWORD *)AudioBufferList buf = 136315906;
      *(void *)&uint8_t buf[4] = "vpInitializeDownlink.cpp";
      __int16 v23 = 1024;
      int v24 = 272;
      __int16 v25 = 2080;
      uint64_t v26 = v19;
      __int16 v27 = 1024;
      int v28 = a3;
      _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> initspkrtel: asbd = %s, blksz = %d", buf, 0x22u);
      if (v19) {
        free(v19);
      }
    }
  }
  uint64_t v9 = (char *)this + 12568;
  CFArrayRef v10 = (int *)*((void *)this + 1578);
  if (v10 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    uint64_t v11 = VPLogScope(void)::scope;
    CAFormatter::CAFormatter((CAFormatter *)buf, a2);
    CALegacyLog::log(v10, 5, v11, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeDownlink.cpp", 272, "InitializeSpeakerTelemetryInput", "initspkrtel: asbd = %s, blksz = %d", *(const char **)buf, a3);
    if (*(void *)buf) {
      free(*(void **)buf);
    }
  }
  if (*((unsigned char *)this + 15961))
  {
    if (*v9)
    {
      LODWORD(v6) = *((_DWORD *)this + 382);
      VoiceProcessorV2::WriteTSOverload((std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)this, *((double *)this + 1570) - (double)v6, *((double *)this + 1570) - (double)v6, 3);
    }
    unsigned char *v9 = 0;
  }
  uint64_t v12 = *(void *)&a2->mBitsPerChannel;
  long long v13 = *(_OWORD *)&a2->mSampleRate;
  *((_OWORD *)this + 94) = *(_OWORD *)&a2->mBytesPerPacket;
  *((void *)this + 190) = v12;
  *((_OWORD *)this + 93) = v13;
  *((_DWORD *)this + 382) = a3;
  int v14 = *((_DWORD *)this + 379);
  *((_DWORD *)this + 384) = 5 * a3;
  *((_DWORD *)this + 385) = v14;
  *((_DWORD *)this + 388) = 0;
  *((void *)this + 193) = 0;
  double v15 = (void *)*((void *)this + 195);
  uint64_t v16 = *((void *)this + 196) - (void)v15;
  unint64_t v17 = (v14 * 5 * a3);
  if (v17 == v16 >> 2)
  {
    if (v16 >= 1) {
      bzero(v15, 4 * (((unint64_t)v16 >> 2) - ((unint64_t)v16 > 3)) + 4);
    }
  }
  else
  {
    std::valarray<float>::resize((uint64_t)this + 1560, v17, 0.0);
    a3 = *((_DWORD *)this + 382);
  }
  myAllocABLDynamic((const AudioStreamBasicDescription *)((char *)this + 1488), a3, (AudioBufferList **)this + 197);
  *((unsigned char *)this + 478) = 1;
  if (*((_DWORD *)this + 3160)) {
    VoiceProcessorV2::CreateSignalSaveFiles(this, 3);
  }
  if (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)) {
    VoiceProcessorV2::PListWriteInitializeSpkrTelParameters(this);
  }
  atomic_fetch_add((atomic_uint *volatile)this + 620, 0xFFFFFFFF);
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v20);
  return 0;
}

void sub_1BB4EED70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *a15)
{
  atomic_fetch_add((atomic_uint *volatile)(v15 + 2480), 0xFFFFFFFF);
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&a13);
  _Unwind_Resume(a1);
}

uint64_t VoiceProcessorV2::GetRefPortHLC2chStateForPME(VoiceProcessorV2 *this)
{
  unint64_t RefPortID = VoiceProcessorV2::GetRefPortID(this);
  if (!HIDWORD(RefPortID)) {
    return 0;
  }
  *(void *)&inAddress.mSelector = 0x6F75747073706D65;
  inAddress.muint64_t Element = 0;
  unsigned int outData = 0;
  UInt32 ioDataSize = 4;
  if (AudioObjectGetPropertyData(RefPortID, &inAddress, 0, 0, &ioDataSize, &outData)) {
    return 0;
  }
  else {
    return outData;
  }
}

uint64_t AUMultiChanEchoCanceler::SetBypassEffect(uint64_t this, char a2)
{
  *(unsigned char *)(this + 528) = a2;
  return this;
}

uint64_t AUMultiChanEchoCanceler::ShouldBypassEffect(AUMultiChanEchoCanceler *this)
{
  return *((unsigned __int8 *)this + 528);
}

uint64_t AUMultiChanEchoCanceler::ValidFormat(AUMultiChanEchoCanceler *this, const AudioStreamBasicDescription *a2, int a3, AudioStreamBasicDescription *a4)
{
  uint64_t result = ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2);
  if (result)
  {
    if ((a4->mFormatFlags & 0x20) != 0)
    {
      uint64_t result = 1;
      if (a3) {
        return result;
      }
      goto LABEL_5;
    }
    uint64_t result = a4->mChannelsPerFrame == 1;
  }
  if (a3) {
    return result;
  }
LABEL_5:
  if (a4->mChannelsPerFrame == 1) {
    return result;
  }
  else {
    return 0;
  }
}

uint64_t AUMultiChanEchoCanceler::SupportedNumChannels(AUMultiChanEchoCanceler *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUMultiChanEchoCanceler::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 1;
}

BOOL AUMultiChanEchoCanceler::StreamFormatWritable(AUMultiChanEchoCanceler *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUMultiChanEchoCanceler::SupportsTail(AUMultiChanEchoCanceler *this)
{
  return 1;
}

double AUMultiChanEchoCanceler::GetTailTime(AUMultiChanEchoCanceler *this)
{
  return 0.0;
}

double AUMultiChanEchoCanceler::GetLatency(AUMultiChanEchoCanceler *this)
{
  return 0.0;
}

uint64_t AUMultiChanEchoCanceler::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result = ausdk::AUBase::RestoreState(this, a2);
  if (!result) {
    ++*((_DWORD *)this + 133);
  }
  return result;
}

uint64_t AUMultiChanEchoCanceler::GetParameterInfo(AUMultiChanEchoCanceler *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  buffer->AudioUnitParameterOptions flags = 0x40000000;
  buffer->unitName = 0;
  uint64_t result = 4294956418;
  if (!a2 && a3 <= 0x38)
  {
    CFStringRef v6 = *(&off_1E623E300 + a3);
    AudioUnitParameterUnit v7 = dword_1BB898B40[a3];
    AudioUnitParameterValue v8 = flt_1BB898C24[a3];
    AudioUnitParameterValue v9 = flt_1BB898D08[a3];
    AudioUnitParameterValue v10 = flt_1BB898DEC[a3];
    int v11 = dword_1BB898ED0[a3];
    buffer->cfNameString = v6;
    buffer->AudioUnitParameterOptions flags = 1207959552;
    CFStringGetCString(v6, buffer->name, 52, 0x8000100u);
    uint64_t result = 0;
    buffer->unit = v7;
    buffer->minCFNumberRef Value = v8;
    buffer->maxCFNumberRef Value = v9;
    buffer->defaultCFNumberRef Value = v10;
    buffer->flags |= v11;
  }
  return result;
}

BOOL AUMultiChanEchoCanceler::BusCountWritable(AUMultiChanEchoCanceler *this, int a2)
{
  return (a2 - 1) < 2;
}

uint64_t AUMultiChanEchoCanceler::Render(AUMultiChanEchoCanceler *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  if (*((_DWORD *)this + 84) != a4) {
    return 4294956422;
  }
  AudioUnitParameterValue v8 = (AUMultiChanEchoCanceler *)((char *)this + 80);
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUMultiChanEchoCanceler *)((char *)this + 80), 0);
  uint64_t v10 = ausdk::AUScope::SafeGetElement((AUMultiChanEchoCanceler *)((char *)this + 128), 0);
  uint64_t v11 = ausdk::AUScope::GetElement(v8, 0);
  if (!v11 || !*(_DWORD *)(v11 + 172)) {
    return 4294956420;
  }
  uint64_t v12 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 0);
  uint64_t result = ausdk::AUInputElement::PullInput(v12, a2, a3, 0, a4);
  if (!result)
  {
    uint64_t BufferList = (AudioBufferList *)ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144));
    ausdk::AUBufferList::CopyBufferContentsTo((void *)(Element + 144), BufferList);
    return 0;
  }
  return result;
}

uint64_t AUMultiChanEchoCanceler::ProcessMultipleBufferLists(AUMultiChanEchoCanceler *this, unsigned int *a2, int a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  int v8 = *((_DWORD *)this + 84);
  if (v8 != a3)
  {
    printf("AUMultiChanEchoCanceler::ProcessMultipleBufferLists error - wrong (%d) block size expected (%d)", a3, v8);
    return 4294956422;
  }
  float v75 = 0.0;
  mData = (*a5)->mBuffers[0].mData;
  uint64_t v12 = (*a7)->mBuffers[0].mData;
  if (a6 < 2)
  {
    long long v13 = 0;
    goto LABEL_7;
  }
  long long v13 = a7[1]->mBuffers[0].mData;
  if (a6 == 2)
  {
LABEL_7:
    int v14 = 0;
    goto LABEL_8;
  }
  int v14 = a7[2]->mBuffers[0].mData;
LABEL_8:
  uint64_t v16 = a5[1]->mBuffers[0].mData;
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChanEchoCanceler *)((char *)this + 32), 0);
  float Parameter = ausdk::AUElement::GetParameter(Element, 2u);
  if (((*(uint64_t (**)(AUMultiChanEchoCanceler *))(*(void *)this + 576))(this) & 1) != 0
    || !*((void *)this + 86))
  {
    if (mData != v12)
    {
      uint64_t v21 = ausdk::AUScope::SafeGetElement((AUMultiChanEchoCanceler *)((char *)this + 128), 0);
      memcpy(v12, mData, (*(_DWORD *)(v21 + 104) * a3));
      __int16 v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChanEchoCanceler *)((char *)this + 32), 0);
      ausdk::AUElement::SetParameter(v22, 3u, 0.0, 0);
      __int16 v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChanEchoCanceler *)((char *)this + 32), 0);
      ausdk::AUElement::SetParameter(v23, 0x24u, 0.0, 0);
    }
    return 0;
  }
  else
  {
    if (mData) {
      BOOL v19 = v16 == 0;
    }
    else {
      BOOL v19 = 1;
    }
    if (v19)
    {
      uint64_t v15 = 0xFFFFFFFFLL;
      float v20 = 0.0;
    }
    else
    {
      AudioStreamBasicDescription v73 = v14;
      vDSP_Length v24 = *((int *)this + 84);
      size_t v25 = 4 * (int)v24;
      memcpy(*((void **)this + 97), v16, v25);
      int v26 = *((_DWORD *)this + 191);
      UInt32 v74 = v13;
      if ((v26 | 2) == 3)
      {
        if (*((int *)this + 192) >= 2)
        {
          vDSP_vsq((const float *)v16, 1, (float *)(*((void *)this + 97) + 4 * v24), 1, v24);
          if (*((int *)this + 192) >= 3) {
            vDSP_vmul((const float *)v16, 1, (const float *)(*((void *)this + 97) + 4 * v24), 1, (float *)(*((void *)this + 97) + 8 * v24), 1, v24);
          }
        }
        if (*((_DWORD *)this + 191) == 3 && *((int *)this + 193) >= 2)
        {
          uint64_t v27 = 1;
          uint64_t v28 = 32;
          do
          {
            memcpy((void *)(*((void *)this + 97) + 4 * ((int)v27++ + *((_DWORD *)this + 192) - 1) * (int)v24), *(const void **)((char *)&a5[1]->mNumberBuffers + v28), v25);
            v28 += 16;
          }
          while (v27 < *((int *)this + 193));
        }
      }
      else if (v26 == 2 && *((int *)this + 193) >= 2)
      {
        uint64_t v29 = 4 * v24;
        uint64_t v30 = 1;
        uint64_t v31 = 32;
        uint64_t v32 = 4 * v24;
        do
        {
          memcpy((void *)(*((void *)this + 97) + v32), *(const void **)((char *)&a5[1]->mNumberBuffers + v31), v25);
          ++v30;
          v32 += v29;
          v31 += 16;
        }
        while (v30 < *((int *)this + 193));
      }
      if (*((_DWORD *)this + 191) == 2)
      {
        uint64_t v33 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChanEchoCanceler *)((char *)this + 32), 0);
        **(unsigned char **)(*(void *)(*((void *)this + 86) + 8) + 120) = ausdk::AUElement::GetParameter(v33, 0x2Fu) != 0.0;
        if (*((int *)this + 197) >= 2)
        {
          unsigned int v34 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChanEchoCanceler *)((char *)this + 32), 0);
          *(unsigned char *)(*(void *)(*(void *)(*((void *)this + 86) + 8) + 120) + 1) = ausdk::AUElement::GetParameter(v34, 0x30u) != 0.0;
          if (*((int *)this + 197) >= 3)
          {
            long long v35 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChanEchoCanceler *)((char *)this + 32), 0);
            *(unsigned char *)(*(void *)(*(void *)(*((void *)this + 86) + 8) + 120) + 2) = ausdk::AUElement::GetParameter(v35, 0x31u) != 0.0;
            if (*((int *)this + 197) >= 4)
            {
              long long v36 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChanEchoCanceler *)((char *)this + 32), 0);
              *(unsigned char *)(*(void *)(*(void *)(*((void *)this + 86) + 8) + 120) + 3) = ausdk::AUElement::GetParameter(v36, 0x32u) != 0.0;
              if (*((int *)this + 197) >= 5)
              {
                long long v37 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChanEchoCanceler *)((char *)this + 32), 0);
                *(unsigned char *)(*(void *)(*(void *)(*((void *)this + 86) + 8) + 120) + 4) = ausdk::AUElement::GetParameter(v37, 0x33u) != 0.0;
                if (*((int *)this + 197) >= 6)
                {
                  uint64_t v38 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChanEchoCanceler *)((char *)this + 32), 0);
                  *(unsigned char *)(*(void *)(*(void *)(*((void *)this + 86) + 8) + 120) + 5) = ausdk::AUElement::GetParameter(v38, 0x34u) != 0.0;
                  if (*((int *)this + 197) >= 7)
                  {
                    uint64_t v39 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChanEchoCanceler *)((char *)this + 32), 0);
                    *(unsigned char *)(*(void *)(*(void *)(*((void *)this + 86) + 8) + 120) + 6) = ausdk::AUElement::GetParameter(v39, 0x35u) != 0.0;
                    if (*((int *)this + 197) >= 8)
                    {
                      int v40 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChanEchoCanceler *)((char *)this + 32), 0);
                      *(unsigned char *)(*(void *)(*(void *)(*((void *)this + 86) + 8) + 120) + 7) = ausdk::AUElement::GetParameter(v40, 0x36u) != 0.0;
                      if (*((int *)this + 197) >= 9)
                      {
                        uint64_t v41 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChanEchoCanceler *)((char *)this + 32), 0);
                        BOOL v42 = ausdk::AUElement::GetParameter(v41, 0x37u) != 0.0;
                        uint64_t v43 = *(void *)(*(void *)(*((void *)this + 86) + 8) + 120);
                        *(unsigned char *)(v43 + 8) = v42;
                        uint64_t v44 = *((unsigned int *)this + 197);
                        if ((int)v44 >= 10)
                        {
                          uint64_t v45 = v44 - 9;
                          int v46 = (unsigned char *)(v43 + 9);
                          do
                          {
                            *v46++ = *(unsigned char *)(v43 + 8);
                            --v45;
                          }
                          while (v45);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      uint64_t v47 = (lmsfilt_v5 *)*((void *)this + 97);
      int v48 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChanEchoCanceler *)((char *)this + 32), 0);
      float v49 = ausdk::AUElement::GetParameter(v48, 4u);
      aec_v4::run_aec(*((uint64_t **)this + 86), (_DWORD *)this + 166, (float *)this + 167, (_DWORD *)this + 168, (_DWORD *)this + 169, v47, mData, (float *)v12, &v75, (int)v49, (_DWORD *)this + 190, (_DWORD *)this + 198);
      int v50 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChanEchoCanceler *)((char *)this + 32), 0);
      ausdk::AUElement::SetParameter(v50, 8u, *((float *)this + 167), 0);
      uint64_t v51 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChanEchoCanceler *)((char *)this + 32), 0);
      ausdk::AUElement::SetParameter(v51, 0x21u, (float)*((int *)this + 168), 0);
      int v52 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChanEchoCanceler *)((char *)this + 32), 0);
      ausdk::AUElement::SetParameter(v52, 0x22u, *((float *)this + 169), 0);
      uint64_t v53 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChanEchoCanceler *)((char *)this + 32), 0);
      ausdk::AUElement::SetParameter(v53, 0x25u, *((float *)this + 190), 0);
      int v54 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChanEchoCanceler *)((char *)this + 32), 0);
      float v20 = v75;
      ausdk::AUElement::SetParameter(v54, 0x2Du, v75, 0);
      uint64_t v55 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChanEchoCanceler *)((char *)this + 32), 0);
      ausdk::AUElement::SetParameter(v55, 0x2Eu, *((float *)this + 198), 0);
      if (v73) {
        memcpy(v73, *(const void **)(*(void *)(*((void *)this + 86) + 56) + 112), 4 * *((unsigned int *)this + 84));
      }
      if (v74) {
        memcpy(v74, *(const void **)(*(void *)(*((void *)this + 86) + 56) + 72), 4 * *((unsigned int *)this + 84));
      }
      if (Parameter == 0.0)
      {
        uint64_t __C = 0;
        float v76 = 0.0;
        uint64_t v56 = *((void *)this + 88);
        uint64_t v57 = *((void *)this + 87);
        uint64_t v58 = *((void *)this + 86);
        uint64_t v59 = 16;
        if (*(int *)(*(void *)(v58 + 48) + 592) > 0) {
          uint64_t v59 = 40;
        }
        memcpy(*((void **)this + 87), *(const void **)(*(void *)(v58 + v59) + 48), 4 * *(int *)(*(void *)(v58 + v59) + 88));
        *(float *)&int v60 = 0.0;
        if (*(_DWORD *)(*(void *)(*((void *)this + 86) + 48) + 232)) {
          goto LABEL_53;
        }
        vDSP_Length v61 = ((unint64_t)(v56 - v57) >> 2);
        vDSP_vsub(*((const float **)this + 87), 1, *((const float **)this + 89), 1, *((float **)this + 91), 1, v61);
        vDSP_vsq(*((const float **)this + 91), 1, *((float **)this + 91), 1, v61);
        vDSP_sve(*((const float **)this + 91), 1, (float *)&__C + 1, v61);
        vDSP_vsq(*((const float **)this + 89), 1, *((float **)this + 93), 1, v61);
        vDSP_sve(*((const float **)this + 93), 1, (float *)&__C, v61);
        vDSP_vsq(*((const float **)this + 87), 1, *((float **)this + 93), 1, v61);
        vDSP_sve(*((const float **)this + 93), 1, &v76, v61);
        float v62 = *(float *)&__C + 0.00000001;
        *(float *)&uint64_t __C = (float)(v76 * 0.2) + (float)(v62 * 0.8);
        float v63 = *((float *)&__C + 1) * 100.0 / *(float *)&__C;
        *(float *)&int v60 = 800.0;
        if (v63 > 800.0) {
LABEL_53:
        }
          float v63 = *(float *)&v60;
        std::valarray<float>::__assign_range((uint64_t)this + 712, *((unsigned char **)this + 87), *((unsigned char **)this + 88));
      }
      else
      {
        float v63 = 0.0;
      }
      uint64_t v64 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChanEchoCanceler *)((char *)this + 32), 0);
      ausdk::AUElement::SetParameter(v64, 3u, v63, 0);
      uint64_t v15 = 0;
    }
    uint64_t v65 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChanEchoCanceler *)((char *)this + 32), 0);
    float v66 = ausdk::AUElement::GetParameter(v65, 0x23u);
    float v67 = *((float *)this + 170);
    if (v20 >= v67) {
      float v68 = v20;
    }
    else {
      float v68 = *((float *)this + 170);
    }
    if (v68 >= *((float *)this + 171)) {
      float v69 = v68;
    }
    else {
      float v69 = *((float *)this + 171);
    }
    *((float *)this + 171) = v67;
    *((float *)this + 170) = v20;
    int v70 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChanEchoCanceler *)((char *)this + 32), 0);
    if (v69 <= v66) {
      float v71 = 0.0;
    }
    else {
      float v71 = 1.0;
    }
    ausdk::AUElement::SetParameter(v70, 0x24u, v71, 0);
  }
  return v15;
}

uint64_t AUMultiChanEchoCanceler::CanScheduleParameters(AUMultiChanEchoCanceler *this)
{
  return 0;
}

uint64_t AUMultiChanEchoCanceler::SetParameter(AUMultiChanEchoCanceler *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  if (a3)
  {
    Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
LABEL_3:
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
    goto LABEL_9;
  }
  if (a2 > 0x29 || ((1 << a2) & 0x30000000001) == 0)
  {
    Scope = (AUMultiChanEchoCanceler *)((char *)this + 32);
    goto LABEL_3;
  }
  if (*((unsigned char *)this + 17)) {
    ++*((_DWORD *)this + 133);
  }
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChanEchoCanceler *)((char *)this + 32), 0);
LABEL_9:
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  return 0;
}

uint64_t AUMultiChanEchoCanceler::SetProperty(AUMultiChanEchoCanceler *this, int a2, int a3, unsigned int a4, int *a5, unsigned int a6)
{
  uint64_t result = 4294956417;
  if (a2 == 21 && !a3)
  {
    if (a6 >= 4)
    {
      int v8 = *a5;
      int v9 = *a5 != 0;
      if (v9 != (*(unsigned int (**)(AUMultiChanEchoCanceler *))(*(void *)this + 576))(this)) {
        (*(void (**)(AUMultiChanEchoCanceler *, BOOL))(*(void *)this + 584))(this, v8 != 0);
      }
      return 0;
    }
    else
    {
      return 4294956445;
    }
  }
  return result;
}

uint64_t AUMultiChanEchoCanceler::GetProperty(AUMultiChanEchoCanceler *this, int a2, int a3, unsigned int a4, CFArrayRef *a5)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 > 3799)
  {
    if (a2 == 3800 || a2 == 103800)
    {
      uint64_t v10 = *((void *)this + 86);
      uint64_t v11 = 16;
      if (*(int *)(*(void *)(v10 + 48) + 592) > 0) {
        uint64_t v11 = 40;
      }
      memcpy(*((void **)this + 87), *(const void **)(*(void *)(v10 + v11) + 48), 4 * *(int *)(*(void *)(v10 + v11) + 88));
      if (a2 == 103800)
      {
        std::string __p = 0;
        uint64_t v16 = 0;
        uint64_t v12 = (_DWORD *)*((void *)this + 87);
        uint64_t v13 = (*((_DWORD *)this + 197) * *((_DWORD *)this + 135));
        uint64_t v17 = 0;
        p_p = &__p;
        if (v13)
        {
          uint64_t v14 = 4 * v13;
          do
          {
            std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100]((uint64_t *)&p_p, v12++);
            v14 -= 4;
          }
          while (v14);
        }
        *a5 = applesauce::CF::details::make_CFArrayRef<float>(&__p);
        if (__p)
        {
          uint64_t v16 = __p;
          operator delete(__p);
        }
      }
      else
      {
        memcpy(a5, *((const void **)this + 87), 4 * *((unsigned int *)this + 135) * (uint64_t)*((int *)this + 197));
      }
      return 0;
    }
  }
  else
  {
    if (a2 == 21)
    {
      int v9 = (*(uint64_t (**)(AUMultiChanEchoCanceler *))(*(void *)this + 576))(this);
      uint64_t result = 0;
      goto LABEL_19;
    }
    if (a2 == 3700)
    {
      uint64_t result = 0;
      int v9 = *((unsigned __int8 *)this + 376);
LABEL_19:
      *(_DWORD *)a5 = v9;
    }
  }
  return result;
}

void sub_1BB4EFC20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100](uint64_t *a1, _DWORD *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(_DWORD **)(*a1 + 8);
  CFStringRef v6 = (void *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    int v8 = *(_DWORD **)v4;
    uint64_t v9 = ((uint64_t)v5 - *(void *)v4) >> 2;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = *v6 - (void)v8;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)v6, v12);
      int v8 = *(_DWORD **)v4;
      uint64_t v5 = *(_DWORD **)(v4 + 8);
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[4 * v9];
    uint64_t v15 = &v13[4 * v12];
    *(_DWORD *)uint64_t v14 = *a2;
    AudioUnitParameterUnit v7 = v14 + 4;
    while (v5 != v8)
    {
      int v16 = *--v5;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(void *)uint64_t v4 = v14;
    *(void *)(v4 + 8) = v7;
    *(void *)(v4 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *uint64_t v5 = *a2;
    AudioUnitParameterUnit v7 = v5 + 1;
  }
  *(void *)(v4 + 8) = v7;
  return a1;
}

uint64_t AUMultiChanEchoCanceler::GetPropertyInfo(AUMultiChanEchoCanceler *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 > 3799)
  {
    if (a2 == 3800)
    {
      *a6 = 0;
      int v8 = 4 * *((_DWORD *)this + 135) * *((_DWORD *)this + 197);
    }
    else
    {
      if (a2 != 103800) {
        return result;
      }
      *a6 = 0;
      int v8 = 8;
    }
  }
  else
  {
    if (a2 == 21)
    {
      *a6 = 1;
    }
    else
    {
      if (a2 != 3700) {
        return result;
      }
      *a6 = 0;
    }
    int v8 = 4;
  }
  uint64_t result = 0;
  *a5 = v8;
  return result;
}

uint64_t AUMultiChanEchoCanceler::Reset(AUMultiChanEchoCanceler *this)
{
  return 0;
}

void AUMultiChanEchoCanceler::Cleanup(AUMultiChanEchoCanceler *this)
{
  uint64_t v2 = *((void *)this + 86);
  if (v2)
  {
    uint64_t v3 = *(void ***)(v2 + 64);
    if (v3)
    {
      if (!*v3 || (free(*v3), *v3 = 0, uint64_t v2 = *((void *)this + 86), (v3 = *(void ***)(v2 + 64)) != 0))
      {
        free(v3);
        *(void *)(v2 + 64) = 0;
        uint64_t v2 = *((void *)this + 86);
      }
    }
    uint64_t v4 = *(void *)(v2 + 56);
    if (v4 && *(void *)v4)
    {
      free(*(void **)v4);
      *(void *)uint64_t v4 = 0;
      uint64_t v2 = *((void *)this + 86);
      uint64_t v4 = *(void *)(v2 + 56);
    }
    uint64_t v5 = *(void **)(v4 + 8);
    if (v5)
    {
      free(v5);
      *(void *)(v4 + 8) = 0;
      uint64_t v2 = *((void *)this + 86);
      uint64_t v4 = *(void *)(v2 + 56);
    }
    CFStringRef v6 = *(void **)(v4 + 16);
    if (v6)
    {
      free(v6);
      *(void *)(v4 + 16) = 0;
      uint64_t v2 = *((void *)this + 86);
      uint64_t v4 = *(void *)(v2 + 56);
    }
    AudioUnitParameterUnit v7 = *(void **)(v4 + 32);
    if (v7)
    {
      free(v7);
      *(void *)(v4 + 32) = 0;
      uint64_t v2 = *((void *)this + 86);
      uint64_t v4 = *(void *)(v2 + 56);
    }
    int v8 = *(void **)(v4 + 48);
    if (v8)
    {
      free(v8);
      *(void *)(v4 + 48) = 0;
      uint64_t v2 = *((void *)this + 86);
      uint64_t v4 = *(void *)(v2 + 56);
    }
    uint64_t v9 = *(void **)(v4 + 56);
    if (v9)
    {
      free(v9);
      *(void *)(v4 + 56) = 0;
      uint64_t v2 = *((void *)this + 86);
      uint64_t v4 = *(void *)(v2 + 56);
    }
    unint64_t v10 = *(void **)(v4 + 64);
    if (v10)
    {
      free(v10);
      *(void *)(v4 + 64) = 0;
      uint64_t v2 = *((void *)this + 86);
      uint64_t v4 = *(void *)(v2 + 56);
    }
    uint64_t v11 = *(void **)(v4 + 72);
    if (v11)
    {
      free(v11);
      *(void *)(v4 + 72) = 0;
      uint64_t v2 = *((void *)this + 86);
      uint64_t v4 = *(void *)(v2 + 56);
    }
    unint64_t v12 = *(void **)(v4 + 80);
    if (v12)
    {
      free(v12);
      *(void *)(v4 + 80) = 0;
      uint64_t v2 = *((void *)this + 86);
      uint64_t v4 = *(void *)(v2 + 56);
    }
    uint64_t v13 = *(void **)(v4 + 112);
    if (v13)
    {
      free(v13);
      *(void *)(v4 + 112) = 0;
      uint64_t v2 = *((void *)this + 86);
      uint64_t v4 = *(void *)(v2 + 56);
    }
    uint64_t v14 = *(void **)(v4 + 88);
    if (v14)
    {
      free(v14);
      *(void *)(v4 + 88) = 0;
      uint64_t v2 = *((void *)this + 86);
      uint64_t v4 = *(void *)(v2 + 56);
    }
    uint64_t v15 = *(void **)(v4 + 240);
    if (v15)
    {
      free(v15);
      *(void *)(v4 + 240) = 0;
      uint64_t v2 = *((void *)this + 86);
      uint64_t v4 = *(void *)(v2 + 56);
    }
    int v16 = *(void **)(v4 + 248);
    if (v16)
    {
      free(v16);
      *(void *)(v4 + 248) = 0;
      uint64_t v2 = *((void *)this + 86);
      uint64_t v4 = *(void *)(v2 + 56);
    }
    uint64_t v17 = *(void **)(v4 + 256);
    if (v17)
    {
      free(v17);
      *(void *)(v4 + 256) = 0;
      uint64_t v2 = *((void *)this + 86);
      uint64_t v4 = *(void *)(v2 + 56);
    }
    __int16 v18 = *(void **)(v4 + 272);
    if (v18)
    {
      free(v18);
      *(void *)(v4 + 272) = 0;
      uint64_t v2 = *((void *)this + 86);
    }
    if (!*(_DWORD *)(*(void *)v2 + 100))
    {
      BOOL v19 = *(void **)(v2 + 56);
      float v20 = (void *)v19[15];
      if (v20)
      {
        free(v20);
        float v19[15] = 0;
        uint64_t v2 = *((void *)this + 86);
        BOOL v19 = *(void **)(v2 + 56);
      }
      uint64_t v21 = (void *)v19[16];
      if (v21)
      {
        free(v21);
        v19[16] = 0;
        uint64_t v2 = *((void *)this + 86);
        BOOL v19 = *(void **)(v2 + 56);
      }
      __int16 v22 = (void *)v19[17];
      if (v22)
      {
        free(v22);
        v19[17] = 0;
        uint64_t v2 = *((void *)this + 86);
        BOOL v19 = *(void **)(v2 + 56);
      }
      __int16 v23 = (void *)v19[18];
      if (v23)
      {
        free(v23);
        v19[18] = 0;
        uint64_t v2 = *((void *)this + 86);
        BOOL v19 = *(void **)(v2 + 56);
      }
      vDSP_Length v24 = (void *)v19[20];
      if (v24)
      {
        free(v24);
        v19[20] = 0;
        uint64_t v2 = *((void *)this + 86);
        BOOL v19 = *(void **)(v2 + 56);
      }
      size_t v25 = (void *)v19[22];
      if (v25)
      {
        free(v25);
        v19[22] = 0;
        uint64_t v2 = *((void *)this + 86);
        BOOL v19 = *(void **)(v2 + 56);
      }
      int v26 = (void *)v19[23];
      if (v26)
      {
        free(v26);
        v19[23] = 0;
        uint64_t v2 = *((void *)this + 86);
        BOOL v19 = *(void **)(v2 + 56);
      }
      uint64_t v27 = (void *)v19[24];
      if (v27)
      {
        free(v27);
        unsigned char v19[24] = 0;
        uint64_t v2 = *((void *)this + 86);
        BOOL v19 = *(void **)(v2 + 56);
      }
      uint64_t v28 = (void **)v19[26];
      if (v28)
      {
        if (!*v28
          || (free(*v28),
              NSObject *v28 = 0,
              uint64_t v2 = *((void *)this + 86),
              BOOL v19 = *(void **)(v2 + 56),
              (uint64_t v28 = (void **)v19[26]) != 0))
        {
          free(v28);
          v19[26] = 0;
          uint64_t v2 = *((void *)this + 86);
          BOOL v19 = *(void **)(v2 + 56);
        }
      }
      uint64_t v29 = (void *)v19[27];
      if (v29)
      {
        free(v29);
        v19[27] = 0;
        uint64_t v2 = *((void *)this + 86);
        BOOL v19 = *(void **)(v2 + 56);
      }
      uint64_t v30 = (void **)v19[28];
      if (v30)
      {
        if (!*v30
          || (free(*v30),
              *uint64_t v30 = 0,
              uint64_t v2 = *((void *)this + 86),
              BOOL v19 = *(void **)(v2 + 56),
              (uint64_t v30 = (void **)v19[28]) != 0))
        {
          free(v30);
          v19[28] = 0;
          uint64_t v2 = *((void *)this + 86);
          BOOL v19 = *(void **)(v2 + 56);
        }
      }
      uint64_t v31 = (void *)v19[29];
      if (v31)
      {
        free(v31);
        v19[29] = 0;
        uint64_t v2 = *((void *)this + 86);
      }
      dft_v3::dftRemove((void **)(v2 + 72));
      uint64_t v2 = *((void *)this + 86);
    }
    uint64_t v32 = *(void **)(v2 + 56);
    uint64_t v33 = (void *)v32[38];
    if (v33)
    {
      free(v33);
      v32[38] = 0;
      uint64_t v2 = *((void *)this + 86);
      uint64_t v32 = *(void **)(v2 + 56);
    }
    unsigned int v34 = (void *)v32[40];
    if (v34)
    {
      free(v34);
      v32[40] = 0;
      uint64_t v2 = *((void *)this + 86);
      uint64_t v32 = *(void **)(v2 + 56);
    }
    long long v35 = (void *)v32[42];
    if (v35)
    {
      free(v35);
      v32[42] = 0;
      uint64_t v2 = *((void *)this + 86);
      uint64_t v32 = *(void **)(v2 + 56);
    }
    long long v36 = (void *)v32[44];
    if (v36)
    {
      free(v36);
      v32[44] = 0;
      uint64_t v2 = *((void *)this + 86);
      uint64_t v32 = *(void **)(v2 + 56);
    }
    long long v37 = (void *)v32[45];
    if (v37)
    {
      free(v37);
      v32[45] = 0;
      uint64_t v2 = *((void *)this + 86);
      uint64_t v32 = *(void **)(v2 + 56);
    }
    uint64_t v38 = (void *)v32[46];
    if (v38)
    {
      free(v38);
      v32[46] = 0;
      uint64_t v2 = *((void *)this + 86);
    }
    dft_v3::dftRemove((void **)(v2 + 80));
    lmsfilt_v3::removeLmsFilter((uint64_t *)(*((void *)this + 86) + 88));
    lmsfilt_v3::removeLmsFilter((uint64_t *)(*((void *)this + 86) + 96));
    uint64_t v39 = (uint64_t *)*((void *)this + 86);
    if (*(int *)(*v39 + 104) >= 1)
    {
      lmsfilt_v3::removeLmsFilter(v39 + 13);
      lmsfilt_v3::removeLmsFilter((uint64_t *)(*((void *)this + 86) + 112));
      uint64_t v39 = (uint64_t *)*((void *)this + 86);
      uint64_t v40 = v39[7];
      uint64_t v41 = *(void **)(v40 + 288);
      if (v41)
      {
        free(v41);
        *(void *)(v40 + 288) = 0;
        uint64_t v39 = (uint64_t *)*((void *)this + 86);
        uint64_t v40 = v39[7];
      }
      BOOL v42 = *(void **)(v40 + 296);
      if (v42)
      {
        free(v42);
        *(void *)(v40 + 296) = 0;
        uint64_t v39 = (uint64_t *)*((void *)this + 86);
      }
    }
    uint64_t v43 = (void *)v39[6];
    if (v43)
    {
      uint64_t v44 = (void *)v43[39];
      if (v44)
      {
        free(v44);
        v43[39] = 0;
        uint64_t v43 = (void *)v39[6];
      }
      uint64_t v45 = (void *)v43[41];
      if (v45)
      {
        free(v45);
        v43[41] = 0;
        uint64_t v43 = (void *)v39[6];
      }
      int v46 = (void *)v43[1];
      if (v46)
      {
        free(v46);
        v43[1] = 0;
        uint64_t v43 = (void *)v39[6];
      }
      uint64_t v47 = (void *)v43[6];
      if (v47)
      {
        free(v47);
        v43[6] = 0;
        uint64_t v43 = (void *)v39[6];
      }
      int v48 = (void *)v43[7];
      if (v48)
      {
        free(v48);
        v43[7] = 0;
        uint64_t v43 = (void *)v39[6];
      }
      float v49 = (void *)v43[8];
      if (v49)
      {
        free(v49);
        v43[8] = 0;
        uint64_t v43 = (void *)v39[6];
      }
      int v50 = (void *)v43[9];
      if (v50)
      {
        free(v50);
        v43[9] = 0;
        uint64_t v43 = (void *)v39[6];
      }
      uint64_t v51 = (void *)v43[10];
      if (v51)
      {
        free(v51);
        v43[10] = 0;
        uint64_t v43 = (void *)v39[6];
      }
      int v52 = (void *)v43[15];
      if (v52)
      {
        free(v52);
        v43[15] = 0;
        uint64_t v43 = (void *)v39[6];
      }
      uint64_t v53 = (void *)v43[13];
      if (v53)
      {
        free(v53);
        v43[13] = 0;
        uint64_t v43 = (void *)v39[6];
      }
      int v54 = (void *)v43[79];
      if (v54)
      {
        free(v54);
        v43[79] = 0;
        uint64_t v43 = (void *)v39[6];
      }
      uint64_t v55 = (void *)v43[14];
      if (v55)
      {
        free(v55);
        v43[14] = 0;
        uint64_t v43 = (void *)v39[6];
      }
      uint64_t v56 = (void *)v43[12];
      if (v56)
      {
        free(v56);
        v43[12] = 0;
        uint64_t v43 = (void *)v39[6];
      }
      uint64_t v57 = (void *)v43[20];
      if (v57)
      {
        free(v57);
        v43[20] = 0;
        uint64_t v43 = (void *)v39[6];
      }
      uint64_t v58 = (void *)v43[21];
      if (v58)
      {
        free(v58);
        v43[21] = 0;
        uint64_t v43 = (void *)v39[6];
      }
      uint64_t v59 = (void *)v43[22];
      if (v59)
      {
        free(v59);
        v43[22] = 0;
        uint64_t v43 = (void *)v39[6];
      }
      int v60 = (void *)v43[23];
      if (v60)
      {
        free(v60);
        v43[23] = 0;
        uint64_t v43 = (void *)v39[6];
      }
      vDSP_Length v61 = (void *)v43[24];
      if (v61)
      {
        free(v61);
        v43[24] = 0;
        uint64_t v43 = (void *)v39[6];
      }
      float v62 = (void *)v43[25];
      if (v62)
      {
        free(v62);
        v43[25] = 0;
        uint64_t v43 = (void *)v39[6];
      }
      float v63 = (void *)v43[26];
      if (v63)
      {
        free(v63);
        v43[26] = 0;
        uint64_t v43 = (void *)v39[6];
      }
      uint64_t v64 = (void *)v43[37];
      if (v64)
      {
        free(v64);
        v43[37] = 0;
        uint64_t v43 = (void *)v39[6];
      }
      uint64_t v65 = (void *)v43[38];
      if (v65)
      {
        free(v65);
        v43[38] = 0;
        uint64_t v43 = (void *)v39[6];
      }
      float v66 = (void *)v43[56];
      if (v66)
      {
        free(v66);
        v43[56] = 0;
        uint64_t v43 = (void *)v39[6];
      }
      float v67 = (void *)v43[57];
      if (v67)
      {
        free(v67);
        v43[57] = 0;
        uint64_t v43 = (void *)v39[6];
      }
      float v68 = (void *)v43[58];
      if (v68)
      {
        free(v68);
        v43[58] = 0;
        uint64_t v43 = (void *)v39[6];
      }
      float v69 = (void *)v43[59];
      if (v69)
      {
        free(v69);
        v43[59] = 0;
        uint64_t v43 = (void *)v39[6];
      }
      int v70 = (void *)v43[62];
      if (v70)
      {
        free(v70);
        v43[62] = 0;
        uint64_t v43 = (void *)v39[6];
      }
      float v71 = (void *)v43[63];
      if (v71)
      {
        free(v71);
        v43[63] = 0;
        uint64_t v43 = (void *)v39[6];
      }
      unint64_t v72 = (void *)v43[60];
      if (v72)
      {
        free(v72);
        v43[60] = 0;
        uint64_t v43 = (void *)v39[6];
      }
      AudioStreamBasicDescription v73 = (void *)v43[61];
      if (!v73 || (free(v73), v43[61] = 0, (uint64_t v43 = (void *)v39[6]) != 0))
      {
        free(v43);
        v39[6] = 0;
      }
    }
    UInt32 v74 = (uint64_t *)*((void *)this + 86);
    uint64_t v75 = v74[1];
    if (v75)
    {
      uint64_t v76 = *v74;
      if (*(void *)v75)
      {
        free(*(void **)v75);
        *(void *)uint64_t v75 = 0;
        uint64_t v75 = v74[1];
      }
      AudioStreamBasicDescription v77 = *(void **)(v75 + 8);
      if (v77)
      {
        free(v77);
        *(void *)(v75 + 8) = 0;
        uint64_t v75 = v74[1];
      }
      uint64_t v78 = *(void **)(v75 + 32);
      if (v78)
      {
        free(v78);
        *(void *)(v75 + 32) = 0;
        uint64_t v75 = v74[1];
      }
      if (!*(_DWORD *)(v76 + 100))
      {
        long long v79 = *(void ***)(v75 + 56);
        if (v79 && *v79)
        {
          free(*v79);
          *long long v79 = 0;
          uint64_t v75 = v74[1];
        }
        uint64_t v80 = *(void ***)(v75 + 64);
        if (v80 && *v80)
        {
          free(*v80);
          *uint64_t v80 = 0;
          uint64_t v75 = v74[1];
        }
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v81 = *(void **)(v75 + 56);
        if (v81)
        {
          free(v81);
          *(void *)(v75 + 56) = 0;
          uint64_t v75 = v74[1];
        }
        char v82 = *(void **)(v75 + 64);
        if (v82)
        {
          free(v82);
          *(void *)(v75 + 64) = 0;
          uint64_t v75 = v74[1];
        }
      }
      unint64_t v83 = *(void **)(v75 + 88);
      if (v83)
      {
        free(v83);
        *(void *)(v75 + 88) = 0;
        uint64_t v75 = v74[1];
      }
      uint64_t v84 = *(void **)(v75 + 16);
      if (v84)
      {
        free(v84);
        *(void *)(v75 + 16) = 0;
        uint64_t v75 = v74[1];
      }
      unint64_t v85 = *(void **)(v75 + 24);
      if (v85)
      {
        free(v85);
        *(void *)(v75 + 24) = 0;
        uint64_t v75 = v74[1];
      }
      unsigned int v86 = *(void **)(v75 + 96);
      if (v86)
      {
        free(v86);
        *(void *)(v75 + 96) = 0;
        uint64_t v75 = v74[1];
      }
      __int16 v87 = *(void **)(v75 + 104);
      if (v87)
      {
        free(v87);
        *(void *)(v75 + 104) = 0;
        uint64_t v75 = v74[1];
      }
      int v88 = *(void **)(v75 + 120);
      if (v88)
      {
        free(v88);
        *(void *)(v75 + 120) = 0;
        uint64_t v75 = v74[1];
      }
      float v89 = *(void **)(v75 + 128);
      if (v89)
      {
        free(v89);
        *(void *)(v75 + 128) = 0;
        uint64_t v75 = v74[1];
      }
      float v90 = *(void **)(v75 + 136);
      if (v90)
      {
        free(v90);
        *(void *)(v75 + 136) = 0;
        uint64_t v75 = v74[1];
      }
      uint64_t v91 = *(void **)(v75 + 144);
      if (!v91 || (free(v91), *(void *)(v75 + 144) = 0, (uint64_t v75 = v74[1]) != 0))
      {
        free((void *)v75);
        v74[1] = 0;
      }
    }
    dft_v3::dftRemove(*((void ***)this + 86));
    unint64_t v92 = (void *)*((void *)this + 86);
    unint64_t v93 = (void *)v92[7];
    if (!v93 || (free(v93), v92[7] = 0, (unint64_t v92 = (void *)*((void *)this + 86)) != 0)) {
      free(v92);
    }
    *((void *)this + 86) = 0;
  }
  unint64_t v94 = (void *)*((void *)this + 97);
  if (v94)
  {
    free(v94);
    *((void *)this + 97) = 0;
  }
}

uint64_t AUMultiChanEchoCanceler::Initialize(AUMultiChanEchoCanceler *this)
{
  uint64_t v2 = *((void *)this + 15);
  if (v2) {
    LODWORD(v3) = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  else {
    uint64_t v3 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
  }
  uint64_t v4 = *((void *)this + 21);
  if (v4) {
    LODWORD(v5) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  else {
    uint64_t v5 = (*((void *)this + 19) - *((void *)this + 18)) >> 3;
  }
  if (v3 < 2)
  {
LABEL_11:
    if (v5 < 2)
    {
LABEL_15:
      double v10 = *(double *)(ausdk::AUScope::SafeGetElement((AUMultiChanEchoCanceler *)((char *)this + 80), 0) + 80);
      if (v10 == *(double *)(ausdk::AUScope::SafeGetElement((AUMultiChanEchoCanceler *)((char *)this + 128), 0) + 80))
      {
        *((_DWORD *)this + 134) = *((_DWORD *)this + 133);
        *(_OWORD *)((char *)this + 664) = 0u;
        *((int32x2_t *)this + 85) = vdup_n_s32(0xC2C80000);
        *((_DWORD *)this + 196) = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUMultiChanEchoCanceler *)((char *)this + 80), 1u)+ 108);
        uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChanEchoCanceler *)((char *)this + 32), 0);
        *((float *)this + 198) = ausdk::AUElement::GetParameter(Element, 0x2Eu);
        uint64_t v13 = ausdk::AUScope::SafeGetElement((AUMultiChanEchoCanceler *)((char *)this + 80), 0);
        uint64_t v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChanEchoCanceler *)((char *)this + 32), 0);
        unsigned int Parameter = ausdk::AUElement::GetParameter(v14, 0);
        int v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChanEchoCanceler *)((char *)this + 32), 0);
        float v17 = ausdk::AUElement::GetParameter(v16, 0x28u);
        __int16 v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChanEchoCanceler *)((char *)this + 32), 0);
        float v19 = ausdk::AUElement::GetParameter(v18, 0x29u);
        float v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChanEchoCanceler *)((char *)this + 32), 0);
        *((_DWORD *)this + 136) = ausdk::AUElement::GetParameter(v20, 0x27u);
        if (Parameter)
        {
          if (v17 <= 5) {
            unsigned int v21 = 5;
          }
          else {
            unsigned int v21 = v17;
          }
          (*(void (**)(AUMultiChanEchoCanceler *))(*(void *)this + 64))(this);
          *((_DWORD *)this + 139) = *(double *)(v13 + 80);
          uint64_t v22 = *((unsigned int *)this + 84);
          __int16 v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChanEchoCanceler *)((char *)this + 32), 0);
          *((_DWORD *)this + 191) = (int)ausdk::AUElement::GetParameter(v23, 0x2Au);
          vDSP_Length v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChanEchoCanceler *)((char *)this + 32), 0);
          *((_DWORD *)this + 192) = (int)ausdk::AUElement::GetParameter(v24, 0x2Bu);
          size_t v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChanEchoCanceler *)((char *)this + 32), 0);
          int v26 = (int)ausdk::AUElement::GetParameter(v25, 0x2Cu);
          if (*((_DWORD *)this + 196) < v26) {
            int v26 = *((_DWORD *)this + 196);
          }
          *((_DWORD *)this + 193) = v26;
          int v27 = *((_DWORD *)this + 191);
          if (v27 == 3)
          {
            int v26 = v26 + *((_DWORD *)this + 192) - 1;
          }
          else if (v27 != 2)
          {
            if (v27 == 1) {
              int v26 = *((_DWORD *)this + 192);
            }
            else {
              int v26 = 1;
            }
          }
          *((_DWORD *)this + 197) = v26;
          size_t v28 = 4 * v22 * v26;
          uint64_t v29 = malloc_type_malloc(v28, 0x2C8E6D5CuLL);
          uint64_t v30 = v29;
          if (v29 || !v28)
          {
            bzero(v29, v28);
            *((void *)this + 97) = v30;
            float v31 = (float)*((unsigned int *)this + 139) / (float)((float)v22 * 1000.0);
            unsigned int v32 = (float)(ceilf(v31 * (float)Parameter) * (float)v22);
            unsigned int v33 = (float)(ceilf(v31 * (float)v21) * (float)v22);
            *((_DWORD *)this + 135) = v32;
            unsigned int v34 = (float)(ceilf(v31 * (float)v19) * (float)v22);
            *((_DWORD *)this + 137) = v33;
            if (v33 >= v34) {
              unsigned int v35 = v22 + v33;
            }
            else {
              unsigned int v35 = v34;
            }
            *((_DWORD *)this + 138) = v35;
            if (v35 >= v32)
            {
              *((_DWORD *)this + 138) = v32;
              *((void *)this + 68) = 0;
            }
            long long v36 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChanEchoCanceler *)((char *)this + 32), 0);
            *((_DWORD *)this + 141) = ausdk::AUElement::GetParameter(v36, 9u);
            long long v37 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChanEchoCanceler *)((char *)this + 32), 0);
            *((_DWORD *)this + 142) = ausdk::AUElement::GetParameter(v37, 0xAu);
            uint64_t v38 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChanEchoCanceler *)((char *)this + 32), 0);
            *((_DWORD *)this + 144) = ausdk::AUElement::GetParameter(v38, 0xBu);
            uint64_t v39 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChanEchoCanceler *)((char *)this + 32), 0);
            *((float *)this + 145) = ausdk::AUElement::GetParameter(v39, 0xCu);
            uint64_t v40 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChanEchoCanceler *)((char *)this + 32), 0);
            *((float *)this + 146) = ausdk::AUElement::GetParameter(v40, 0xDu);
            uint64_t v41 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChanEchoCanceler *)((char *)this + 32), 0);
            *((float *)this + 147) = ausdk::AUElement::GetParameter(v41, 0xEu);
            BOOL v42 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChanEchoCanceler *)((char *)this + 32), 0);
            *((float *)this + 148) = ausdk::AUElement::GetParameter(v42, 0xFu);
            uint64_t v43 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChanEchoCanceler *)((char *)this + 32), 0);
            *((float *)this + 149) = ausdk::AUElement::GetParameter(v43, 0x10u);
            uint64_t v44 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChanEchoCanceler *)((char *)this + 32), 0);
            *((float *)this + 150) = ausdk::AUElement::GetParameter(v44, 0x11u);
            uint64_t v45 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChanEchoCanceler *)((char *)this + 32), 0);
            *((float *)this + 151) = ausdk::AUElement::GetParameter(v45, 0x12u);
            int v46 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChanEchoCanceler *)((char *)this + 32), 0);
            *((float *)this + 152) = ausdk::AUElement::GetParameter(v46, 0x13u);
            uint64_t v47 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChanEchoCanceler *)((char *)this + 32), 0);
            *((float *)this + 153) = ausdk::AUElement::GetParameter(v47, 0x14u);
            int v48 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChanEchoCanceler *)((char *)this + 32), 0);
            *((float *)this + 154) = ausdk::AUElement::GetParameter(v48, 0x15u);
            float v49 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChanEchoCanceler *)((char *)this + 32), 0);
            *((float *)this + 155) = ausdk::AUElement::GetParameter(v49, 0x16u);
            int v50 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChanEchoCanceler *)((char *)this + 32), 0);
            *((float *)this + 158) = ausdk::AUElement::GetParameter(v50, 0x17u);
            uint64_t v51 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChanEchoCanceler *)((char *)this + 32), 0);
            *((float *)this + 159) = ausdk::AUElement::GetParameter(v51, 0x18u);
            int v52 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChanEchoCanceler *)((char *)this + 32), 0);
            *((float *)this + 156) = ausdk::AUElement::GetParameter(v52, 0x19u);
            uint64_t v53 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChanEchoCanceler *)((char *)this + 32), 0);
            *((float *)this + 157) = ausdk::AUElement::GetParameter(v53, 0x1Au);
            int v54 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChanEchoCanceler *)((char *)this + 32), 0);
            *((float *)this + 160) = ausdk::AUElement::GetParameter(v54, 0x1Bu);
            uint64_t v55 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChanEchoCanceler *)((char *)this + 32), 0);
            *((unsigned char *)this + 644) = ausdk::AUElement::GetParameter(v55, 0x1Cu) != 0.0;
            uint64_t v56 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChanEchoCanceler *)((char *)this + 32), 0);
            *((float *)this + 162) = ausdk::AUElement::GetParameter(v56, 0x1Du);
            uint64_t v57 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChanEchoCanceler *)((char *)this + 32), 0);
            *((_DWORD *)this + 163) = (int)ausdk::AUElement::GetParameter(v57, 0x1Eu);
            uint64_t v58 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChanEchoCanceler *)((char *)this + 32), 0);
            *((float *)this + 164) = ausdk::AUElement::GetParameter(v58, 0x1Fu);
            uint64_t v59 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChanEchoCanceler *)((char *)this + 32), 0);
            *((float *)this + 165) = ausdk::AUElement::GetParameter(v59, 0x20u);
            int v60 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChanEchoCanceler *)((char *)this + 32), 0);
            *((_DWORD *)this + 140) = ausdk::AUElement::GetParameter(v60, 0x26u);
            vDSP_Length v61 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChanEchoCanceler *)((char *)this + 32), 0);
            *((float *)this + 143) = ausdk::AUElement::GetParameter(v61, 0x38u);
            aec_v4::aec_init((void **)this + 86, *((_DWORD *)this + 139), *((_DWORD *)this + 135), *((_DWORD *)this + 84), *((unsigned int *)this + 141), *((_DWORD *)this + 142), *((unsigned __int8 *)this + 644), *((_DWORD *)this + 140));
          }
          exceptiounsigned int n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          float v63 = std::bad_alloc::bad_alloc(exception);
        }
      }
    }
    else
    {
      unsigned int v8 = 1;
      while (1)
      {
        uint64_t v9 = ausdk::AUScope::SafeGetElement((AUMultiChanEchoCanceler *)((char *)this + 128), v8 - 1);
        if (*(double *)(v9 + 80) != *(double *)(ausdk::AUScope::SafeGetElement((AUMultiChanEchoCanceler *)((char *)this + 128), v8)+ 80))break; {
        if (v5 == ++v8)
        }
          goto LABEL_15;
      }
    }
  }
  else
  {
    unsigned int v6 = 1;
    while (1)
    {
      uint64_t v7 = ausdk::AUScope::SafeGetElement((AUMultiChanEchoCanceler *)((char *)this + 80), v6 - 1);
      if (*(double *)(v7 + 80) != *(double *)(ausdk::AUScope::SafeGetElement((AUMultiChanEchoCanceler *)((char *)this + 80), v6)+ 80))break; {
      if (v3 == ++v6)
      }
        goto LABEL_11;
    }
  }
  return 4294956428;
}

void AUMultiChanEchoCanceler::~AUMultiChanEchoCanceler(AUMultiChanEchoCanceler *this)
{
  AUMultiChanEchoCanceler::~AUMultiChanEchoCanceler(this);

  JUMPOUT(0x1C185D370);
}

{
  unsigned char *v2;
  unsigned char *v3;
  unsigned char *v4;
  unsigned char *v5;
  unsigned char *v6;
  unsigned char *v7;
  unsigned char *v8;
  unsigned char *v9;
  uint64_t vars8;

  *(void *)this = &unk_1F14B1268;
  AUMultiChanEchoCanceler::Cleanup(this);
  uint64_t v2 = (unsigned char *)*((void *)this + 93);
  if (v2)
  {
    uint64_t v3 = (unsigned char *)*((void *)this + 94);
    if (v3 != v2) {
      *((void *)this + 94) = &v3[(v2 - v3 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v2);
    *((void *)this + 93) = 0;
    *((void *)this + 94) = 0;
  }
  uint64_t v4 = (unsigned char *)*((void *)this + 91);
  if (v4)
  {
    uint64_t v5 = (unsigned char *)*((void *)this + 92);
    if (v5 != v4) {
      *((void *)this + 92) = &v5[(v4 - v5 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v4);
    *((void *)this + 91) = 0;
    *((void *)this + 92) = 0;
  }
  unsigned int v6 = (unsigned char *)*((void *)this + 89);
  if (v6)
  {
    uint64_t v7 = (unsigned char *)*((void *)this + 90);
    if (v7 != v6) {
      *((void *)this + 90) = &v7[(v6 - v7 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v6);
    *((void *)this + 89) = 0;
    *((void *)this + 90) = 0;
  }
  unsigned int v8 = (unsigned char *)*((void *)this + 87);
  if (v8)
  {
    uint64_t v9 = (unsigned char *)*((void *)this + 88);
    if (v9 != v8) {
      *((void *)this + 88) = &v9[(v8 - v9 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v8);
    *((void *)this + 87) = 0;
    *((void *)this + 88) = 0;
  }

  ausdk::AUBase::~AUBase(this);
}

void *LiteMatrixBase<float>::AssertSameDimensions(void *result, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (*a2 != *result)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_12;
    }
    int v4 = 136315394;
    uint64_t v5 = "LiteMatrix.h";
    __int16 v6 = 1024;
    int v7 = 54;
    uint64_t v2 = MEMORY[0x1E4F14500];
    uint64_t v3 = "%25s:%-5d  matrix size mismatch";
    goto LABEL_11;
  }
  if (a2[1] != result[1])
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_12;
    }
    int v4 = 136315394;
    uint64_t v5 = "LiteMatrix.h";
    __int16 v6 = 1024;
    int v7 = 55;
    uint64_t v2 = MEMORY[0x1E4F14500];
    uint64_t v3 = "%25s:%-5d  matrix size mismatch";
    goto LABEL_11;
  }
  if (a2[3] - a2[2] != result[3] - result[2])
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_12;
    }
    int v4 = 136315394;
    uint64_t v5 = "LiteMatrix.h";
    __int16 v6 = 1024;
    int v7 = 56;
    uint64_t v2 = MEMORY[0x1E4F14500];
    uint64_t v3 = "%25s:%-5d  matrix size inconsistency";
LABEL_11:
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_ERROR, v3, (uint8_t *)&v4, 0x12u);
LABEL_12:
    __break(1u);
  }
  return result;
}

void LiteMatrixBase<float>::operator-=(void *a1, void *a2)
{
  LiteMatrixBase<float>::AssertSameDimensions(a1, a2);
  int v4 = (const float *)a2[2];
  uint64_t v5 = (float *)a1[2];
  vDSP_Length v6 = (uint64_t)(a1[3] - (void)v5) >> 2;

  vDSP_vsub(v5, 1, v4, 1, v5, 1, v6);
}

void CLiteMatrix::operator+=(void *a1, void *a2)
{
  LiteMatrixBase<float>::AssertSameDimensions(a1, a2);
  int v4 = (const float *)a2[2];
  uint64_t v5 = (float *)a1[2];
  vDSP_Length v6 = (uint64_t)(a1[3] - (void)v5) >> 2;

  vDSP_vadd(v5, 1, v4, 1, v5, 1, v6);
}

void CLiteMatrix::SetWithTranposeOfOther(CLiteMatrix *this, const CLiteMatrix *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (*(void *)a2 != *((void *)this + 1))
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_11;
    }
    int v11 = 136315394;
    unint64_t v12 = "LiteMatrix.cpp";
    __int16 v13 = 1024;
    int v14 = 290;
    double v10 = MEMORY[0x1E4F14500];
    goto LABEL_10;
  }
  vDSP_Length v4 = *((void *)a2 + 1);
  if (v4 != *(void *)this)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_11;
    }
    int v11 = 136315394;
    unint64_t v12 = "LiteMatrix.cpp";
    __int16 v13 = 1024;
    int v14 = 291;
    double v10 = MEMORY[0x1E4F14500];
LABEL_10:
    _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d  matrix dim mismatch", (uint8_t *)&v11, 0x12u);
LABEL_11:
    __break(1u);
  }
  vDSP_mtrans(*((const float **)a2 + 2), 1, *((float **)this + 2), 1, v4, *(void *)a2);
  uint64_t v5 = *((void *)this + 2);
  vDSP_Length v6 = *((void *)a2 + 1);
  vDSP_Length v7 = *(void *)a2;
  unint64_t v8 = ((*((void *)this + 3) - v5) >> 1) & 0xFFFFFFFFFFFFFFFCLL;
  uint64_t v9 = (const float *)(*((void *)a2 + 2) + v8);

  vDSP_mtrans(v9, 1, (float *)(v5 + v8), 1, v6, v7);
}

void CLiteMatrix::SetWithConjugateTranposeOfOther(CLiteMatrix *this, const CLiteMatrix *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (*(void *)a2 != *((void *)this + 1))
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_9;
    }
    *(_DWORD *)vDSP_Length v6 = 136315394;
    *(void *)&v6[4] = "LiteMatrix.cpp";
    *(_WORD *)&v6[12] = 1024;
    *(_DWORD *)&v6[14] = 297;
    uint64_t v5 = MEMORY[0x1E4F14500];
    goto LABEL_8;
  }
  if (*((void *)a2 + 1) != *(void *)this)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_9;
    }
    *(_DWORD *)vDSP_Length v6 = 136315394;
    *(void *)&v6[4] = "LiteMatrix.cpp";
    *(_WORD *)&v6[12] = 1024;
    *(_DWORD *)&v6[14] = 298;
    uint64_t v5 = MEMORY[0x1E4F14500];
LABEL_8:
    _os_log_impl(&dword_1BB0CE000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d  matrix dim mismatch", v6, 0x12u);
LABEL_9:
    __break(1u);
  }
  CLiteMatrix::SetWithTranposeOfOther(this, a2);
  uint64_t v4 = *((void *)this + 2) + 4 * ((uint64_t)(*((void *)this + 3) - *((void *)this + 2)) >> 3);
  *(void *)vDSP_Length v6 = *((void *)this + 2);
  *(void *)&v6[8] = v4;
  vDSP_zvconj((const DSPSplitComplex *)v6, 1, (const DSPSplitComplex *)v6, 1, *((void *)a2 + 1) * *(void *)a2);
}

void CLiteMatrix::ScaleCols(CLiteMatrix *this, const float **a2)
{
  if (*((void *)this + 1) != a2[1] - *a2) {
    __assert_rtn("ScaleCols", "LiteMatrix.cpp", 366, "inputVector.size()==NumCols()");
  }
  if (*(void *)this)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = (const float *)CLiteMatrix::Get(this, v4, 0);
      vDSP_Length v6 = *a2;
      uint64_t v7 = (float *)CLiteMatrix::Get(this, v4, 0);
      vDSP_vmul(v5, 1, v6, 1, v7, 1, *((void *)this + 1));
      CLiteMatrix::Get(this, v4, 0);
      uint64_t v9 = v8;
      double v10 = *a2;
      CLiteMatrix::Get(this, v4, 0);
      vDSP_vmul(v9, 1, v10, 1, v11, 1, *((void *)this + 1));
      ++v4;
    }
    while (v4 < *(void *)this);
  }
}

void *CLiteMatrix::SumRows(void *this, const CLiteMatrix *a2, CLiteMatrix *a3)
{
  if (*(void *)a2 != 1) {
    __assert_rtn("SumRows", "LiteMatrix.cpp", 376, "outputMatrix.NumRows()==1");
  }
  uint64_t v4 = (uint64_t)this;
  unint64_t v5 = *((void *)a2 + 1);
  if (v5 != this[1]) {
    __assert_rtn("SumRows", "LiteMatrix.cpp", 377, "outputMatrix.NumCols()==inputMatrix.NumCols()");
  }
  if (v5)
  {
    unint64_t v6 = 0;
    uint64_t v7 = (const float *)this[2];
    unint64_t v8 = (unint64_t)((uint64_t)(this[3] - (void)v7) >> 2) >> 1;
    do
    {
      float __C = 0.0;
      vDSP_sve(v7, v5, &__C, *(void *)v4);
      float v12 = 0.0;
      vDSP_sve(&v7[v8], *(void *)(v4 + 8), &v12, *(void *)v4);
      float v9 = __C;
      *(float *)CLiteMatrix::Get(a2, 0, v6) = v9;
      float v10 = v12;
      this = (void *)CLiteMatrix::Get(a2, 0, v6);
      float *v11 = v10;
      ++v6;
      unint64_t v5 = *(void *)(v4 + 8);
      ++v7;
    }
    while (v6 < v5);
  }
  return this;
}

void CLiteMatrix::SetWithOther(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a2[1];
  if (v2 != *(void *)(a1 + 8)) {
    __assert_rtn("SetWithOther", "LiteMatrix.cpp", 408, "inputMatrix.NumCols()==NumCols()");
  }
  uint64_t v3 = *a2;
  if (*a2 != *(void *)a1) {
    __assert_rtn("SetWithOther", "LiteMatrix.cpp", 409, "inputMatrix.NumRows()==NumRows()");
  }
  uint64_t v4 = (float *)(*(void *)(a1 + 16) + 4 * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3));
  __C.realp = *(float **)(a1 + 16);
  __C.imagp = v4;
  unint64_t v5 = (float *)(a2[2] + 4 * ((a2[3] - a2[2]) >> 3));
  v6.realp = (float *)a2[2];
  v6.imagp = v5;
  vDSP_zvmov(&v6, 1, &__C, 1, v3 * v2);
}

void CLiteMatrix::ElementwiseMultiply(CLiteMatrix *this, const CLiteMatrix *a2, const CLiteMatrix *a3, CLiteMatrix *__Conjugate)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)this;
  if (*(void *)this != *(void *)a3)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
    *(_DWORD *)AudioBufferList __A = 136315394;
    *(void *)&float __A[4] = "LiteMatrix.cpp";
    *(_WORD *)&__A[12] = 1024;
    *(_DWORD *)&__A[14] = 442;
    float v9 = MEMORY[0x1E4F14500];
    goto LABEL_14;
  }
  if (v4 != *(void *)a2)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
    *(_DWORD *)AudioBufferList __A = 136315394;
    *(void *)&float __A[4] = "LiteMatrix.cpp";
    *(_WORD *)&__A[12] = 1024;
    *(_DWORD *)&__A[14] = 443;
    float v9 = MEMORY[0x1E4F14500];
    goto LABEL_14;
  }
  uint64_t v5 = *((void *)this + 1);
  if (v5 != *((void *)a3 + 1))
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
    *(_DWORD *)AudioBufferList __A = 136315394;
    *(void *)&float __A[4] = "LiteMatrix.cpp";
    *(_WORD *)&__A[12] = 1024;
    *(_DWORD *)&__A[14] = 444;
    float v9 = MEMORY[0x1E4F14500];
    goto LABEL_14;
  }
  if (v5 != *((void *)a2 + 1))
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
    *(_DWORD *)AudioBufferList __A = 136315394;
    *(void *)&float __A[4] = "LiteMatrix.cpp";
    *(_WORD *)&__A[12] = 1024;
    *(_DWORD *)&__A[14] = 445;
    float v9 = MEMORY[0x1E4F14500];
LABEL_14:
    _os_log_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d  vector size mismatch", __A, 0x12u);
LABEL_15:
    __break(1u);
  }
  uint64_t v6 = *((void *)this + 2) + 4 * ((uint64_t)(*((void *)this + 3) - *((void *)this + 2)) >> 3);
  *(void *)AudioBufferList __A = *((void *)this + 2);
  *(void *)&__A[8] = v6;
  uint64_t v7 = (float *)(*((void *)a2 + 2) + 4 * ((uint64_t)(*((void *)a2 + 3) - *((void *)a2 + 2)) >> 3));
  __B.realp = (float *)*((void *)a2 + 2);
  __B.imagp = v7;
  unint64_t v8 = (float *)(*((void *)a3 + 2) + 4 * ((uint64_t)(*((void *)a3 + 3) - *((void *)a3 + 2)) >> 3));
  v10.realp = (float *)*((void *)a3 + 2);
  v10.imagp = v8;
  vDSP_zvmul((const DSPSplitComplex *)__A, 1, &__B, 1, &v10, 1, v5 * v4, (int)__Conjugate);
}

void CLiteMatrix::MatrixMultiply(vDSP_Length *this, const CLiteMatrix *a2, const CLiteMatrix *a3, CLiteMatrix *a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  vDSP_Length v4 = *this;
  if (*this != *(void *)a3)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_12;
    }
    *(_DWORD *)AudioBufferList __A = 136315394;
    *(void *)&float __A[4] = "LiteMatrix.cpp";
    *(_WORD *)&__A[12] = 1024;
    *(_DWORD *)&__A[14] = 455;
    DSPSplitComplex v10 = MEMORY[0x1E4F14500];
    goto LABEL_11;
  }
  vDSP_Length v5 = *((void *)a2 + 1);
  if (v5 != *((void *)a3 + 1))
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_12;
    }
    *(_DWORD *)AudioBufferList __A = 136315394;
    *(void *)&float __A[4] = "LiteMatrix.cpp";
    *(_WORD *)&__A[12] = 1024;
    *(_DWORD *)&__A[14] = 456;
    DSPSplitComplex v10 = MEMORY[0x1E4F14500];
    goto LABEL_11;
  }
  vDSP_Length __P = this[1];
  if (__P != *(void *)a2)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_12;
    }
    *(_DWORD *)AudioBufferList __A = 136315394;
    *(void *)&float __A[4] = "LiteMatrix.cpp";
    *(_WORD *)&__A[12] = 1024;
    *(_DWORD *)&__A[14] = 457;
    DSPSplitComplex v10 = MEMORY[0x1E4F14500];
LABEL_11:
    _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d  matrix size mismatch", __A, 0x12u);
LABEL_12:
    __break(1u);
  }
  uint64_t v7 = this[2] + 4 * ((uint64_t)(this[3] - this[2]) >> 3);
  *(void *)AudioBufferList __A = this[2];
  *(void *)&__A[8] = v7;
  unint64_t v8 = (float *)(*((void *)a2 + 2) + 4 * ((uint64_t)(*((void *)a2 + 3) - *((void *)a2 + 2)) >> 3));
  __B.realp = (float *)*((void *)a2 + 2);
  __B.imagp = v8;
  float v9 = (float *)(*((void *)a3 + 2) + 4 * ((uint64_t)(*((void *)a3 + 3) - *((void *)a3 + 2)) >> 3));
  __C.realp = (float *)*((void *)a3 + 2);
  __C.imagp = v9;
  vDSP_zmmul((const DSPSplitComplex *)__A, 1, &__B, 1, &__C, 1, v4, v5, __P);
}

void CLiteMatrix::MatrixMultiplyViaDotProducts(CLiteMatrix *this, CLiteMatrix *a2, CLiteMatrix *a3, CLiteMatrix *a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *(void *)this;
  if (*(void *)this != *(void *)a3)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_19;
    }
    *(_DWORD *)AudioBufferList __A = 136315394;
    *(void *)&float __A[4] = "LiteMatrix.cpp";
    *(_WORD *)&__A[12] = 1024;
    *(_DWORD *)&__A[14] = 469;
    int v16 = MEMORY[0x1E4F14500];
    goto LABEL_18;
  }
  unint64_t v7 = *((void *)a2 + 1);
  if (v7 != *((void *)a3 + 1))
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_19;
    }
    *(_DWORD *)AudioBufferList __A = 136315394;
    *(void *)&float __A[4] = "LiteMatrix.cpp";
    *(_WORD *)&__A[12] = 1024;
    *(_DWORD *)&__A[14] = 470;
    int v16 = MEMORY[0x1E4F14500];
    goto LABEL_18;
  }
  uint64_t v9 = *((void *)this + 1);
  if (v9 != *(void *)a2)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_19;
    }
    *(_DWORD *)AudioBufferList __A = 136315394;
    *(void *)&float __A[4] = "LiteMatrix.cpp";
    *(_WORD *)&__A[12] = 1024;
    *(_DWORD *)&__A[14] = 471;
    int v16 = MEMORY[0x1E4F14500];
LABEL_18:
    _os_log_impl(&dword_1BB0CE000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d  matrix size mismatch", __A, 0x12u);
LABEL_19:
    __break(1u);
  }
  uint64_t v10 = *((void *)this + 2);
  uint64_t v11 = v10 + 4 * ((*((void *)this + 3) - v10) >> 3);
  *(void *)AudioBufferList __A = v10;
  *(void *)&__A[8] = v11;
  float v12 = (float *)(*((void *)a3 + 2) + 4 * ((uint64_t)(*((void *)a3 + 3) - *((void *)a3 + 2)) >> 3));
  __C.realp = (float *)*((void *)a3 + 2);
  __C.imagp = v12;
  if (v4)
  {
    unint64_t v13 = 0;
    int64x2_t v17 = vdupq_n_s64(4uLL);
    do
    {
      uint64_t v14 = (float *)(*((void *)a2 + 2) + 4 * ((uint64_t)(*((void *)a2 + 3) - *((void *)a2 + 2)) >> 3));
      __B.realp = (float *)*((void *)a2 + 2);
      __B.imagp = v14;
      if (v7)
      {
        for (unint64_t i = 0; i < v7; ++i)
        {
          vDSP_zdotpr((const DSPSplitComplex *)__A, 1, &__B, *((void *)a2 + 1), &__C, *((void *)this + 1));
          DSPSplitComplex __B = (DSPSplitComplex)vaddq_s64((int64x2_t)__B, v17);
          DSPSplitComplex __C = (DSPSplitComplex)vaddq_s64((int64x2_t)__C, v17);
          unint64_t v7 = *((void *)a3 + 1);
        }
        uint64_t v9 = *((void *)this + 1);
        uint64_t v10 = *(void *)__A;
        uint64_t v11 = *(void *)&__A[8];
        unint64_t v4 = *(void *)a3;
      }
      v10 += 4 * v9;
      v11 += 4 * v9;
      *(void *)AudioBufferList __A = v10;
      *(void *)&__A[8] = v11;
      ++v13;
    }
    while (v13 < v4);
  }
}

double std::sqrt[abi:ne180100]<double>(double result, long double a2)
{
  double v2 = INFINITY;
  if (fabs(a2) == INFINITY) {
    return v2;
  }
  if (fabs(result) != INFINITY)
  {
    long double v6 = result;
    double v3 = sqrt(hypot(result, a2));
    long double v4 = atan2(a2, v6);
    std::polar[abi:ne180100]<double>(v3, v4 * 0.5);
    return result;
  }
  if (result <= 0.0) {
    return 0.0;
  }
  return result;
}

void std::polar[abi:ne180100]<double>(double a1, double a2)
{
  if ((*(void *)&a1 & 0x8000000000000000) == 0 && fabs(a2) != INFINITY) {
    __sincos_stret(a2);
  }
}

void std::vector<EndpointDecisionLayerVAD2::Decision>::reserve(uint64_t a1)
{
  uint64_t v1 = *(unsigned char **)a1;
  if (*(void *)(a1 + 16) - *(void *)a1 <= 0x1FuLL)
  {
    double v3 = *(unsigned char **)(a1 + 8);
    long double v4 = (char *)operator new(0x20uLL);
    vDSP_Length v5 = &v4[(v3 - v1) & 0xFFFFFFFFFFFFFFFCLL];
    long double v6 = v5;
    if (v3 != v1)
    {
      long double v6 = &v4[(v3 - v1) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
        int v7 = *((_DWORD *)v3 - 1);
        v3 -= 4;
        *((_DWORD *)v6 - 1) = v7;
        v6 -= 4;
      }
      while (v3 != v1);
    }
    *(void *)a1 = v6;
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 16) = v4 + 32;
    if (v1)
    {
      operator delete(v1);
    }
  }
}

void std::vector<double>::reserve(void **a1, unint64_t a2)
{
  long double v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    long double v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>(v3, a2);
    int v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    uint64_t v9 = &v6[8 * v8];
    uint64_t v10 = (char *)*a1;
    uint64_t v11 = (char *)a1[1];
    float v12 = v7;
    if (v11 != *a1)
    {
      float v12 = v7;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t std::default_delete<AU::SoundIsolation::MetricsReporter>::operator()[abi:ne180100](uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    double v2 = *(void **)(result + 176);
    if (v2)
    {
      do
      {
        uint64_t v3 = (void *)*v2;
        operator delete(v2);
        double v2 = v3;
      }
      while (v3);
    }
    long double v4 = *(void **)(v1 + 160);
    *(void *)(v1 + 160) = 0;
    if (v4) {
      operator delete(v4);
    }
    int64_t v5 = *(void **)(v1 + 128);
    if (v5)
    {
      *(void *)(v1 + 136) = v5;
      operator delete(v5);
    }
    std::mutex::~mutex((std::mutex *)(v1 + 64));
    std::__function::__value_func<void ()(long long,applesauce::CF::DictionaryRef)>::~__value_func[abi:ne180100]((void *)(v1 + 32));
    long double v6 = *(std::__shared_weak_count **)(v1 + 24);
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    int v7 = *(std::__shared_weak_count **)(v1 + 8);
    if (v7) {
      std::__shared_weak_count::__release_weak(v7);
    }
    JUMPOUT(0x1C185D370);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<AU::SoundIsolation::MetricsReporter *,std::shared_ptr<AU::SoundIsolation::MetricsReporter>::__shared_ptr_default_delete<AU::SoundIsolation::MetricsReporter,AU::SoundIsolation::MetricsReporter>,std::allocator<AU::SoundIsolation::MetricsReporter>>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<AU::SoundIsolation::MetricsReporter>::operator()[abi:ne180100](*(void *)(a1 + 24));
}

void std::__shared_ptr_pointer<AU::SoundIsolation::MetricsReporter *,std::shared_ptr<AU::SoundIsolation::MetricsReporter>::__shared_ptr_default_delete<AU::SoundIsolation::MetricsReporter,AU::SoundIsolation::MetricsReporter>,std::allocator<AU::SoundIsolation::MetricsReporter>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

void AU::SoundIsolation::MetricsReporter::getCAReporterIDs(AU::SoundIsolation::MetricsReporter *this, uint64_t a2)
{
  long double v4 = (std::mutex *)(a2 + 64);
  std::mutex::lock((std::mutex *)(a2 + 64));
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(this, *(const void **)(a2 + 128), *(void *)(a2 + 136), (uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 3);

  std::mutex::unlock(v4);
}

void sub_1BB4F2368(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void AU::SoundIsolation::MetricsReporter::setCAReporterIDs(uint64_t a1, uint64_t a2)
{
  long double v4 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  int64_t v5 = *(void **)(a1 + 128);
  if (v5)
  {
    *(void *)(a1 + 136) = v5;
    operator delete(v5);
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 136) = 0;
    *(void *)(a1 + 144) = 0;
  }
  *(_OWORD *)(a1 + 128) = *(_OWORD *)a2;
  *(void *)(a1 + 144) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;

  std::mutex::unlock(v4);
}

void AU::SoundIsolation::MetricsReporter::reportAsync(uint64_t *a1, const void *a2, int *a3)
{
  v6.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if (a1[2])
  {
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = v6.__d_.__rep_;
    uint64_t v8 = (std::__shared_weak_count *)a1[1];
    if (!v8 || (uint64_t v9 = *a1, (v10 = std::__shared_weak_count::lock(v8)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v11 = v10;
    float v12 = (caulk::concurrent::messenger *)a1[2];
    uint64_t v13 = (void *)MEMORY[0x1E4FB7E90];
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v14 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v13 + 16))(*v13, 216, 8);
    *(_DWORD *)(v14 + 16) = 0;
    *(void *)uint64_t v14 = &unk_1F14B1528;
    *(void *)(v14 + 8) = 0;
    *(void *)(v14 + 24) = v9;
    *(void *)(v14 + 32) = v11;
    int v15 = *a3;
    memmove((void *)(v14 + 40), a2, 0xA0uLL);
    *(_DWORD *)(v14 + 200) = v15;
    *(void *)(v14 + 208) = rep;
    *(void *)uint64_t v14 = &unk_1F14B1500;
    caulk::concurrent::messenger::enqueue(v12, (caulk::concurrent::message *)v14);
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

void sub_1BB4F2548(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AU::SoundIsolation::MetricsReporter::reportAsync(AU::SoundIsolation::MetricsReporter::Report const&,AU::SoundIsolation::MetricsReporter::ReportType const&,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>> const&)::$_0,AU::SoundIsolation::MetricsReporter::Report const&,AU::SoundIsolation::MetricsReporter::ReportType const&,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>> const&>::perform(uint64_t a1)
{
  double v2 = (caulk::concurrent::message *)a1;
  AU::SoundIsolation::MetricsReporter::report(*(void *)(a1 + 24), a1 + 40, (_DWORD *)(a1 + 200), (void *)(a1 + 208));
  return caulk::concurrent::details::rt_message_call<AU::SoundIsolation::MetricsReporter::reportAsync(AU::SoundIsolation::MetricsReporter::Report const&,AU::SoundIsolation::MetricsReporter::ReportType const&,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>> const&)::$_0,AU::SoundIsolation::MetricsReporter::Report const&,AU::SoundIsolation::MetricsReporter::ReportType const&,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>> const&>::rt_cleanup::~rt_cleanup(&v2);
}

void sub_1BB4F25B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  caulk::concurrent::details::rt_message_call<AU::SoundIsolation::MetricsReporter::reportAsync(AU::SoundIsolation::MetricsReporter::Report const&,AU::SoundIsolation::MetricsReporter::ReportType const&,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>> const&)::$_0,AU::SoundIsolation::MetricsReporter::Report const&,AU::SoundIsolation::MetricsReporter::ReportType const&,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>> const&>::rt_cleanup::~rt_cleanup((caulk::concurrent::message **)va);
  _Unwind_Resume(a1);
}

void AU::SoundIsolation::MetricsReporter::report(uint64_t a1, uint64_t a2, _DWORD *a3, void *a4)
{
  uint64_t v9 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  unint64_t v11 = *a3;
  unint64_t v12 = *(void *)(a1 + 168);
  if (!v12) {
    goto LABEL_33;
  }
  uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.u32[0] > 1uLL)
  {
    unint64_t v14 = *a3;
    if (v12 <= v11) {
      unint64_t v14 = v11 % v12;
    }
  }
  else
  {
    unint64_t v14 = (v12 - 1) & v11;
  }
  int v15 = *(uint64_t ***)(*(void *)(a1 + 160) + 8 * v14);
  if (!v15 || (int v16 = *v15) == 0)
  {
LABEL_18:
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = *a3;
      if (v12 <= v11) {
        unint64_t v4 = v11 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v11;
    }
    __int16 v18 = *(uint64_t ***)(*(void *)(a1 + 160) + 8 * v4);
    if (v18)
    {
      for (unint64_t i = *v18; i; unint64_t i = (uint64_t *)*i)
      {
        unint64_t v20 = i[1];
        if (v20 == v11)
        {
          if (*((_DWORD *)i + 4) == v11) {
            goto LABEL_89;
          }
        }
        else
        {
          if (v13.u32[0] > 1uLL)
          {
            if (v20 >= v12) {
              v20 %= v12;
            }
          }
          else
          {
            v20 &= v12 - 1;
          }
          if (v20 != v4) {
            break;
          }
        }
      }
    }
LABEL_33:
    uint64_t v21 = operator new(0x20uLL);
    *uint64_t v21 = 0;
    v21[1] = v11;
    *((_DWORD *)v21 + 4) = v11;
    uint64_t v21[3] = *a4;
    float v22 = (float)(unint64_t)(*(void *)(a1 + 184) + 1);
    v10.i32[0] = *(_DWORD *)(a1 + 192);
    if (v12 && (float)(*(float *)v10.i32 * (float)v12) >= v22)
    {
      unint64_t v11 = v4;
      goto LABEL_79;
    }
    BOOL v23 = 1;
    if (v12 >= 3) {
      BOOL v23 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v24 = v23 | (2 * v12);
    unint64_t v25 = vcvtps_u32_f32(v22 / *(float *)v10.i32);
    if (v24 <= v25) {
      int8x8_t prime = (int8x8_t)v25;
    }
    else {
      int8x8_t prime = (int8x8_t)v24;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v12 = *(void *)(a1 + 168);
    }
    if (*(void *)&prime <= v12)
    {
      if (*(void *)&prime >= v12) {
        goto LABEL_75;
      }
      v10.i32[0] = *(_DWORD *)(a1 + 192);
      unint64_t v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 184) / *(float *)v10.i32);
      if (v12 < 3 || (uint8x8_t v34 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        unint64_t v33 = std::__next_prime(v33);
      }
      else
      {
        uint64_t v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2) {
          unint64_t v33 = v35;
        }
      }
      if (*(void *)&prime <= v33) {
        int8x8_t prime = (int8x8_t)v33;
      }
      if (*(void *)&prime >= v12)
      {
        unint64_t v12 = *(void *)(a1 + 168);
        goto LABEL_75;
      }
      if (!*(void *)&prime)
      {
        float v71 = *(void **)(a1 + 160);
        *(void *)(a1 + 160) = 0;
        if (v71) {
          operator delete(v71);
        }
        unint64_t v12 = 0;
        *(void *)(a1 + 168) = 0;
        goto LABEL_75;
      }
    }
    if (*(void *)&prime >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int v27 = operator new(8 * *(void *)&prime);
    size_t v28 = *(void **)(a1 + 160);
    *(void *)(a1 + 160) = v27;
    if (v28) {
      operator delete(v28);
    }
    uint64_t v29 = 0;
    *(int8x8_t *)(a1 + 168) = prime;
    do
      *(void *)(*(void *)(a1 + 160) + 8 * v29++) = 0;
    while (*(void *)&prime != v29);
    uint64_t v30 = *(void **)(a1 + 176);
    if (v30)
    {
      unint64_t v31 = v30[1];
      uint8x8_t v32 = (uint8x8_t)vcnt_s8(prime);
      v32.i16[0] = vaddlv_u8(v32);
      if (v32.u32[0] > 1uLL)
      {
        if (v31 >= *(void *)&prime) {
          v31 %= *(void *)&prime;
        }
      }
      else
      {
        v31 &= *(void *)&prime - 1;
      }
      *(void *)(*(void *)(a1 + 160) + 8 * v31) = a1 + 176;
      long long v36 = (void *)*v30;
      if (*v30)
      {
        do
        {
          unint64_t v37 = v36[1];
          if (v32.u32[0] > 1uLL)
          {
            if (v37 >= *(void *)&prime) {
              v37 %= *(void *)&prime;
            }
          }
          else
          {
            v37 &= *(void *)&prime - 1;
          }
          if (v37 != v31)
          {
            uint64_t v38 = *(void *)(a1 + 160);
            if (!*(void *)(v38 + 8 * v37))
            {
              *(void *)(v38 + 8 * v37) = v30;
              goto LABEL_71;
            }
            *uint64_t v30 = *v36;
            void *v36 = **(void **)(*(void *)(a1 + 160) + 8 * v37);
            **(void **)(*(void *)(a1 + 160) + 8 * v37) = v36;
            long long v36 = v30;
          }
          unint64_t v37 = v31;
LABEL_71:
          uint64_t v30 = v36;
          long long v36 = (void *)*v36;
          unint64_t v31 = v37;
        }
        while (v36);
      }
    }
    unint64_t v12 = (unint64_t)prime;
LABEL_75:
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v12 <= v11) {
        v11 %= v12;
      }
    }
    else
    {
      unint64_t v11 = (v12 - 1) & v11;
    }
LABEL_79:
    uint64_t v39 = *(void *)(a1 + 160);
    uint64_t v40 = *(void **)(v39 + 8 * v11);
    if (v40)
    {
      *uint64_t v21 = *v40;
    }
    else
    {
      *uint64_t v21 = *(void *)(a1 + 176);
      *(void *)(a1 + 176) = v21;
      *(void *)(v39 + 8 * v11) = a1 + 176;
      if (!*v21)
      {
LABEL_88:
        ++*(void *)(a1 + 184);
        goto LABEL_89;
      }
      unint64_t v41 = *(void *)(*v21 + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v41 >= v12) {
          v41 %= v12;
        }
      }
      else
      {
        v41 &= v12 - 1;
      }
      uint64_t v40 = (void *)(*(void *)(a1 + 160) + 8 * v41);
    }
    *uint64_t v40 = v21;
    goto LABEL_88;
  }
  while (1)
  {
    unint64_t v17 = v16[1];
    if (v17 == v11) {
      break;
    }
    if (v13.u32[0] > 1uLL)
    {
      if (v17 >= v12) {
        v17 %= v12;
      }
    }
    else
    {
      v17 &= v12 - 1;
    }
    if (v17 != v14) {
      goto LABEL_18;
    }
LABEL_17:
    int v16 = (uint64_t *)*v16;
    if (!v16) {
      goto LABEL_18;
    }
  }
  if (*((_DWORD *)v16 + 4) != v11) {
    goto LABEL_17;
  }
  if ((*a4 - v16[3]) / 1000000 >= *(void *)(a1 + 152))
  {
    v16[3] = *a4;
LABEL_89:
    memset(v76, 0, sizeof(v76));
    int v77 = 1065353216;
    switch(*a3)
    {
      case 0:
        std::string::basic_string[abi:ne180100]<0>(&__p, "vois_report_type");
        v73[0] = &__p;
        BOOL v42 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v76, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)v73);
        std::string::__assign_external((std::string *)(v42 + 40), "InputAndOutputFormatMismatch", 0x1CuLL);
        goto LABEL_103;
      case 1:
        std::string::basic_string[abi:ne180100]<0>(&__p, "vois_report_type");
        v73[0] = &__p;
        uint64_t v47 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v76, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)v73);
        if ((char)v47[63] < 0)
        {
          *((void *)v47 + 6) = 20;
          int v48 = (char *)*((void *)v47 + 5);
        }
        else
        {
          int v48 = (char *)(v47 + 40);
          v47[63] = 20;
        }
        strcpy(v48, "InitializeBaseFailed");
        goto LABEL_103;
      case 2:
        std::string::basic_string[abi:ne180100]<0>(&__p, "vois_report_type");
        v73[0] = &__p;
        uint64_t v45 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v76, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)v73);
        std::string::__assign_external((std::string *)(v45 + 40), "CreateProcessingGraphsFailed", 0x1CuLL);
        goto LABEL_103;
      case 3:
        std::string::basic_string[abi:ne180100]<0>(&__p, "vois_report_type");
        v73[0] = &__p;
        int v46 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v76, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)v73);
        std::string::__assign_external((std::string *)(v46 + 40), "InitializationSuccessful", 0x18uLL);
        goto LABEL_103;
      case 4:
        std::string::basic_string[abi:ne180100]<0>(&__p, "vois_report_type");
        v73[0] = &__p;
        uint64_t v43 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v76, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)v73);
        if ((char)v43[63] < 0)
        {
          *((void *)v43 + 6) = 17;
          uint64_t v44 = (char *)*((void *)v43 + 5);
        }
        else
        {
          uint64_t v44 = (char *)(v43 + 40);
          v43[63] = 17;
        }
        strcpy(v44, "ParametersUpdated");
LABEL_103:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        break;
      default:
        break;
    }
    if (*(unsigned char *)(a2 + 4))
    {
      std::to_string(&__p, *(_DWORD *)a2);
      std::string::basic_string[abi:ne180100]<0>(v73, "vois_error_code");
      uint64_t v78 = v73;
      float v49 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v76, (unsigned __int8 *)v73, (uint64_t)&std::piecewise_construct, (long long **)&v78);
      int v50 = (void **)(v49 + 40);
      if ((char)v49[63] < 0) {
        operator delete(*v50);
      }
      *(std::string *)int v50 = __p;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
      __p.__r_.__value_.__s.__data_[0] = 0;
      if (v74 < 0)
      {
        operator delete(v73[0]);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
    if (*(unsigned char *)(a2 + 48))
    {
      CA::StreamDescription::AsString((CA::StreamDescription *)(a2 + 8), (uint64_t)&__p, v10);
      std::string::basic_string[abi:ne180100]<0>(v73, "vois_input_format");
      uint64_t v78 = v73;
      uint64_t v51 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v76, (unsigned __int8 *)v73, (uint64_t)&std::piecewise_construct, (long long **)&v78);
      int v52 = (void **)(v51 + 40);
      if ((char)v51[63] < 0) {
        operator delete(*v52);
      }
      *(std::string *)int v52 = __p;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
      __p.__r_.__value_.__s.__data_[0] = 0;
      if (v74 < 0)
      {
        operator delete(v73[0]);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
    if (*(unsigned char *)(a2 + 96))
    {
      CA::StreamDescription::AsString((CA::StreamDescription *)(a2 + 56), (uint64_t)&__p, v10);
      std::string::basic_string[abi:ne180100]<0>(v73, "vois_output_format");
      uint64_t v78 = v73;
      uint64_t v53 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v76, (unsigned __int8 *)v73, (uint64_t)&std::piecewise_construct, (long long **)&v78);
      int v54 = (void **)(v53 + 40);
      if ((char)v53[63] < 0) {
        operator delete(*v54);
      }
      *(std::string *)int v54 = __p;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
      __p.__r_.__value_.__s.__data_[0] = 0;
      if (v74 < 0)
      {
        operator delete(v73[0]);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
    if (*(unsigned char *)(a2 + 112))
    {
      std::to_string(&__p, *(void *)(a2 + 104));
      std::string::basic_string[abi:ne180100]<0>(v73, "vois_initialization_duration_miliseconds");
      uint64_t v78 = v73;
      uint64_t v55 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v76, (unsigned __int8 *)v73, (uint64_t)&std::piecewise_construct, (long long **)&v78);
      uint64_t v56 = (void **)(v55 + 40);
      if ((char)v55[63] < 0) {
        operator delete(*v56);
      }
      *(std::string *)uint64_t v56 = __p;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
      __p.__r_.__value_.__s.__data_[0] = 0;
      if (v74 < 0)
      {
        operator delete(v73[0]);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
    if (*(unsigned char *)(a2 + 124))
    {
      std::to_string(&__p, *(float *)(a2 + 120));
      std::string::basic_string[abi:ne180100]<0>(v73, "vois_parameter_wetdrymixpercent");
      uint64_t v78 = v73;
      uint64_t v57 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v76, (unsigned __int8 *)v73, (uint64_t)&std::piecewise_construct, (long long **)&v78);
      uint64_t v58 = (void **)(v57 + 40);
      if ((char)v57[63] < 0) {
        operator delete(*v58);
      }
      *(std::string *)uint64_t v58 = __p;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
      __p.__r_.__value_.__s.__data_[0] = 0;
      if (v74 < 0)
      {
        operator delete(v73[0]);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
    if (*(unsigned char *)(a2 + 132))
    {
      std::to_string(&__p, *(_DWORD *)(a2 + 128));
      std::string::basic_string[abi:ne180100]<0>(v73, "vois_parameter_soundtoisolate");
      uint64_t v78 = v73;
      uint64_t v59 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v76, (unsigned __int8 *)v73, (uint64_t)&std::piecewise_construct, (long long **)&v78);
      int v60 = (void **)(v59 + 40);
      if ((char)v59[63] < 0) {
        operator delete(*v60);
      }
      *(std::string *)int v60 = __p;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
      __p.__r_.__value_.__s.__data_[0] = 0;
      if (v74 < 0)
      {
        operator delete(v73[0]);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
    if (*(unsigned char *)(a2 + 137))
    {
      std::to_string(&__p, *(unsigned __int8 *)(a2 + 136));
      std::string::basic_string[abi:ne180100]<0>(v73, "vois_parameter_usetuningmode");
      uint64_t v78 = v73;
      vDSP_Length v61 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v76, (unsigned __int8 *)v73, (uint64_t)&std::piecewise_construct, (long long **)&v78);
      float v62 = (void **)(v61 + 40);
      if ((char)v61[63] < 0) {
        operator delete(*v62);
      }
      *(std::string *)float v62 = __p;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
      __p.__r_.__value_.__s.__data_[0] = 0;
      if (v74 < 0)
      {
        operator delete(v73[0]);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
    if (*(unsigned char *)(a2 + 144))
    {
      std::to_string(&__p, *(_DWORD *)(a2 + 140));
      std::string::basic_string[abi:ne180100]<0>(v73, "vois_parameter_selectedtuningmode");
      uint64_t v78 = v73;
      float v63 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v76, (unsigned __int8 *)v73, (uint64_t)&std::piecewise_construct, (long long **)&v78);
      uint64_t v64 = (void **)(v63 + 40);
      if ((char)v63[63] < 0) {
        operator delete(*v64);
      }
      *(std::string *)uint64_t v64 = __p;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
      __p.__r_.__value_.__s.__data_[0] = 0;
      if (v74 < 0)
      {
        operator delete(v73[0]);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
    if (*(unsigned char *)(a2 + 152))
    {
      std::to_string(&__p, *(_DWORD *)(a2 + 148));
      std::string::basic_string[abi:ne180100]<0>(v73, "vois_parameter_updatedtuningmode");
      uint64_t v78 = v73;
      uint64_t v65 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v76, (unsigned __int8 *)v73, (uint64_t)&std::piecewise_construct, (long long **)&v78);
      float v66 = (void **)(v65 + 40);
      if ((char)v65[63] < 0) {
        operator delete(*v66);
      }
      *(std::string *)float v66 = __p;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
      __p.__r_.__value_.__s.__data_[0] = 0;
      if (v74 < 0)
      {
        operator delete(v73[0]);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
    applesauce::CF::make_DictionaryRef<std::string,std::string>((CFDictionaryRef *)&cf, (uint64_t)v76);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v76);
    float v67 = *(uint64_t **)(a1 + 128);
    float v68 = *(uint64_t **)(a1 + 136);
    CFTypeRef v69 = cf;
    while (v67 != v68)
    {
      uint64_t v70 = *v67;
      if (v69) {
        CFRetain(v69);
      }
      std::function<void ()(long long,applesauce::CF::DictionaryRef)>::operator()(*(void *)(a1 + 56), v70);
      if (v69) {
        CFRelease(v69);
      }
      ++v67;
    }
    if (v69) {
      CFRelease(v69);
    }
  }
  std::mutex::unlock(v9);
}

void sub_1BB4F3254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a23);
  std::mutex::unlock(v23);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AU::SoundIsolation::MetricsReporter::reportAsync(AU::SoundIsolation::MetricsReporter::Report const&,AU::SoundIsolation::MetricsReporter::ReportType const&,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>> const&)::$_0,AU::SoundIsolation::MetricsReporter::Report const&,AU::SoundIsolation::MetricsReporter::ReportType const&,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>> const&>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  double v2 = *a1;
  *(void *)double v2 = &unk_1F14B1528;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v2 + 4);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  caulk::concurrent::message::~message(v2);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], v2, 216, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AU::SoundIsolation::MetricsReporter::reportAsync(AU::SoundIsolation::MetricsReporter::Report const&,AU::SoundIsolation::MetricsReporter::ReportType const&,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>> const&)::$_0,AU::SoundIsolation::MetricsReporter::Report const&,AU::SoundIsolation::MetricsReporter::ReportType const&,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>> const&>::~rt_message_call(caulk::concurrent::message *this)
{
  *(void *)this = &unk_1F14B1528;
  double v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  caulk::concurrent::message::~message(this);

  JUMPOUT(0x1C185D370);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F14B1528;
  double v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  caulk::concurrent::message::~message(this);
}

void caulk::concurrent::details::message_call<AU::SoundIsolation::MetricsReporter::reportAsync(AU::SoundIsolation::MetricsReporter::Report const&,AU::SoundIsolation::MetricsReporter::ReportType const&,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>> const&)::$_0,AU::SoundIsolation::MetricsReporter::Report const&,AU::SoundIsolation::MetricsReporter::ReportType const&,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>> const&>::perform(uint64_t a1)
{
}

void caulk::concurrent::details::message_call<AU::SoundIsolation::MetricsReporter::reportAsync(AU::SoundIsolation::MetricsReporter::Report const&,AU::SoundIsolation::MetricsReporter::ReportType const&,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>> const&)::$_0,AU::SoundIsolation::MetricsReporter::Report const&,AU::SoundIsolation::MetricsReporter::ReportType const&,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>> const&>::~message_call(caulk::concurrent::message *this)
{
  *(void *)this = &unk_1F14B1528;
  double v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  caulk::concurrent::message::~message(this);

  JUMPOUT(0x1C185D370);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F14B1528;
  double v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  caulk::concurrent::message::~message(this);
}

uint64_t AUNoiseSelector::SetMaxFramesPerSlice(AUNoiseSelector *this, int a2)
{
  uint64_t result = ausdk::AUBase::SetMaxFramesPerSlice((uint64_t)this, a2);
  if (*((_DWORD *)this + 137) != a2) {
    *((_DWORD *)this + 137) = a2;
  }
  return result;
}

uint64_t AUNoiseSelector::ChangeStreamFormat(AUNoiseSelector *this, uint64_t a2, uint64_t a3, const AudioStreamBasicDescription *a4, const AudioStreamBasicDescription *a5)
{
  if (a4->mSampleRate != a5->mSampleRate) {
    *((_DWORD *)this + 136) = a5->mSampleRate;
  }
  return 0;
}

uint64_t AUNoiseSelector::ValidFormat(AUNoiseSelector *this, int a2, unsigned int a3, const AudioStreamBasicDescription *a4)
{
  if (a4->mBitsPerChannel == 64 && a4->mFormatID == 1718773105) {
    uint64_t result = (LOBYTE(a4->mFormatFlags) >> 5) & 1;
  }
  else {
    uint64_t result = 0;
  }
  if (a2 == 2)
  {
    BOOL v6 = a4->mChannelsPerFrame == 1;
  }
  else
  {
    if (a2 != 1) {
      return result;
    }
    BOOL v6 = a4->mChannelsPerFrame == 3;
  }
  if (v6) {
    return result;
  }
  else {
    return 0;
  }
}

uint64_t AUNoiseSelector::SupportedNumChannels(AUNoiseSelector *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUNoiseSelector::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 1;
}

BOOL AUNoiseSelector::StreamFormatWritable(AUNoiseSelector *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUNoiseSelector::SupportsTail(AUNoiseSelector *this)
{
  return 1;
}

double AUNoiseSelector::GetTailTime(AUNoiseSelector *this)
{
  return 0.0;
}

double AUNoiseSelector::GetLatency(AUNoiseSelector *this)
{
  return 0.0;
}

uint64_t AUNoiseSelector::GetParameterValueStrings(AUNoiseSelector *this, int a2, int a3, const __CFArray **a4)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (!a4) {
    return 0;
  }
  if (a2) {
    return 4294956430;
  }
  if (a3 != 12) {
    return 0;
  }
  long long v7 = xmmword_1E623E4C8;
  CFArrayRef v6 = CFArrayCreate(0, (const void **)&v7, 2, 0);
  uint64_t result = 0;
  *a4 = v6;
  return result;
}

uint64_t AUNoiseSelector::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result = ausdk::AUBase::RestoreState(this, a2);
  if (!result) {
    ++*((_DWORD *)this + 132);
  }
  return result;
}

uint64_t AUNoiseSelector::GetParameterInfo(AUNoiseSelector *this, int a2, unsigned int a3, AudioUnitParameterInfo *a4)
{
  unsigned int v16 = a3;
  a4->AudioUnitParameterOptions flags = 0;
  a4->unitName = 0;
  uint64_t result = 4294956418;
  if (!a2 && a3 <= 0xE)
  {
    uint64_t v8 = (char *)this + 568;
    if (std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>>>::find<unsigned int>((void *)this + 71, a3))
    {
      uint64_t v9 = std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v8, a3, &v16);
      CFStringRef v10 = (const __CFString *)v9[3];
      AudioUnitParameterValue v11 = *((float *)v9 + 8);
      AudioUnitParameterUnit v12 = *((_DWORD *)v9 + 11);
      int v13 = *((_DWORD *)v9 + 12);
      AudioUnitParameterOptions v14 = a4->flags | 0x8000000;
      uint64_t v15 = *(void *)((char *)v9 + 36);
      a4->cfNameString = v10;
      a4->AudioUnitParameterOptions flags = v14;
      CFStringGetCString(v10, a4->name, 52, 0x8000100u);
      uint64_t result = 0;
      a4->defaultCFNumberRef Value = v11;
      *(void *)&a4->minCFNumberRef Value = v15;
      a4->unit = v12;
      a4->flags |= v13;
    }
    else
    {
      return 4294956418;
    }
  }
  return result;
}

uint64_t AUNoiseSelector::SetBusCount(AUNoiseSelector *this, int a2, unsigned int a3)
{
  unsigned int v3 = a3 - 1;
  if (a2 == 1 && v3 <= 1)
  {
    unint64_t v4 = (AUNoiseSelector *)((char *)this + 80);
LABEL_7:
    ausdk::AUScope::SetNumberOfElements(v4, a3);
    return 0;
  }
  uint64_t v5 = 4294956445;
  if (a2 == 2 && v3 <= 1)
  {
    unint64_t v4 = (AUNoiseSelector *)((char *)this + 128);
    goto LABEL_7;
  }
  return v5;
}

BOOL AUNoiseSelector::BusCountWritable(AUNoiseSelector *this, int a2)
{
  return (a2 - 1) < 2;
}

uint64_t AUNoiseSelector::Render(AUNoiseSelector *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  v32[3] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = (AUNoiseSelector *)((char *)this + 80);
  uint64_t v9 = *((void *)this + 15);
  if (v9) {
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 24))(v9);
  }
  else {
    uint64_t v10 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
  }
  char v11 = 0;
  if (v10)
  {
    uint64_t v12 = 0;
    do
    {
      uint64_t Element = ausdk::AUScope::GetElement(v8, v12);
      if (Element && *(_DWORD *)(Element + 172))
      {
        AudioUnitParameterOptions v14 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, v12);
        uint64_t result = ausdk::AUInputElement::PullInput(v14, a2, a3, v12, a4);
        if (result) {
          return result;
        }
      }
      else
      {
        char v11 = 1;
      }
      uint64_t v12 = (v12 + 1);
    }
    while (v10 != v12);
  }
  uint64_t v16 = *((void *)this + 21);
  if (v16)
  {
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 24))(v16);
    LODWORD(v17) = v16;
  }
  else
  {
    uint64_t v17 = (*((void *)this + 19) - *((void *)this + 18)) >> 3;
  }
  v32[2] = v32;
  uint64_t v18 = v17;
  MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)v32 - v20;
  if (v19 >= 0x200) {
    size_t v22 = 512;
  }
  else {
    size_t v22 = v19;
  }
  bzero((char *)v32 - v20, v22);
  if (v17)
  {
    uint64_t v24 = 0;
    do
    {
      unint64_t v25 = (ausdk::AUIOElement *)ausdk::AUScope::SafeGetElement((AUNoiseSelector *)((char *)this + 128), v24);
      uint64_t v23 = ausdk::AUIOElement::PrepareBuffer(v25, a4);
      *(void *)&v21[8 * v24++] = v23;
    }
    while (v18 != v24);
  }
  if (v11) {
    return 0;
  }
  v32[1] = v32;
  MEMORY[0x1F4188790](v23);
  size_t v28 = (char *)v32 - v27;
  if (v26 >= 0x200) {
    size_t v29 = 512;
  }
  else {
    size_t v29 = v26;
  }
  bzero((char *)v32 - v27, v29);
  if (v10)
  {
    uint64_t v30 = 0;
    do
    {
      uint64_t v31 = ausdk::AUScope::SafeGetElement(v8, v30);
      *(void *)&v28[8 * v30++] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v31 + 144));
    }
    while (v10 != v30);
  }
  return (*(uint64_t (**)(AUNoiseSelector *, unsigned int *, uint64_t, uint64_t, char *, uint64_t, char *))(*(void *)this + 184))(this, a2, a4, v10, v28, v18, v21);
}

uint64_t AUNoiseSelector::ProcessMultipleBufferLists(AUNoiseSelector *this, unsigned int *a2, int a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  if (*((unsigned char *)this + 376) && *((_DWORD *)this + 84) != a3) {
    return 4294956422;
  }
  v87[0] = 0;
  unint64_t v11 = a4;
  if (a4)
  {
    uint64_t v12 = (AudioDSP::Utility *)(2 * *((_DWORD *)this + 137));
    uint64_t v13 = a4 - 1;
    HIDWORD(v14) = 3;
    uint64_t v15 = a5;
    while (1)
    {
      uint64_t v16 = (AudioBufferList *)*v15;
      if (!*v15) {
        return 4294956420;
      }
      if (v16->mNumberBuffers != 3) {
        return 4294956428;
      }
      LODWORD(v14) = *((_DWORD *)this + 136);
      *(double *)&__A.uint64_t mNumberBuffers = (double)v14;
      __A.mBuffers[0] = (AudioBuffer)xmmword_1BB8727B0;
      long long v86 = xmmword_1BB879E80;
      AudioDSP::Utility::DetectNonFinites(v12, v16, &__A, (const AudioStreamBasicDescription *)v87, (BOOL *)a5);
      BOOL v17 = v87[0] == 0;
      BOOL v19 = v13-- != 0;
      if (!v87[0])
      {
        ++v15;
        if (v19) {
          continue;
        }
      }
      goto LABEL_15;
    }
  }
  BOOL v17 = 1;
LABEL_15:
  uint64_t v21 = a6;
  if (a6)
  {
    uint64_t v22 = a6;
    uint64_t v23 = a7;
    while (*v23)
    {
      if ((*v23)->mNumberBuffers != 1) {
        return 4294956428;
      }
      ++v23;
      if (!--v22) {
        goto LABEL_20;
      }
    }
    return 4294956420;
  }
LABEL_20:
  if (v17 || !*((unsigned char *)this + 552))
  {
    uint64_t v24 = *((void *)this + 70);
    if (v24)
    {
      if (*((_DWORD *)this + 133) != *((_DWORD *)this + 132))
      {
        AUNoiseSelector::UpdateState(this);
        *((_DWORD *)this + 133) = *((_DWORD *)this + 132);
        uint64_t v24 = *((void *)this + 70);
        if (!v24)
        {
          uint64_t v20 = 0;
          goto LABEL_75;
        }
      }
      unint64_t v25 = *a5;
      unint64_t v26 = *a7;
      if (*(unsigned char *)(v24 + 40))
      {
        uint64_t v84 = *a5;
        mBuffers = v25->mBuffers;
        uint64_t v28 = *(void *)(v24 + 104);
        vDSP_Length v29 = *(void *)(v24 + 16);
        uint64_t v30 = (uint64_t)mBuffers[*(void *)(v24 + 96)].mData + 4 * v29;
        *(void *)&__A.uint64_t mNumberBuffers = mBuffers[*(void *)(v24 + 96)].mData;
        *(void *)&__A.mBuffers[0].mNumberChannels = v30;
        v89.realp = (float *)mBuffers[v28].mData;
        v89.imagp = &v89.realp[v29];
        v88.realp = (float *)mBuffers[*(void *)(v24 + 112)].mData;
        v88.imagp = &v88.realp[v29];
        mData = (float *)v26->mBuffers[0].mData;
        *(void *)&v87[29] = mData;
        *(void *)&v87[37] = &mData[v29];
        char v82 = *(float **)&v87[37];
        unint64_t v83 = v26;
        vDSP_zvabs((const DSPSplitComplex *)&__A, 1, *(float **)(v24 + 224), 1, v29);
        vDSP_zvabs(&v89, 1, *(float **)(v24 + 248), 1, *(void *)(v24 + 16));
        vDSP_zvabs(&v88, 1, *(float **)(v24 + 272), 1, *(void *)(v24 + 16));
        vDSP_vmin(*(const float **)(v24 + 224), 1, *(const float **)(v24 + 272), 1, *(float **)(v24 + 176), 1, *(void *)(v24 + 16));
        uint64_t v31 = *(float **)(v24 + 320);
        uint8x8_t v32 = &v31[*(void *)(v24 + 16)];
        *(void *)&v87[5] = v31;
        *(_OWORD *)&v87[13] = (unint64_t)v32;
        *(_DWORD *)&v87[1] = 0;
        vDSP_vfill((const float *)&v87[1], v31, 1, *(void *)(v24 + 56));
        vDSP_vfill((const float *)&v87[1], v32, 1, *(void *)(v24 + 56));
        unint64_t v33 = *(void *)(v24 + 48);
        double v34 = (double)*(unint64_t *)(v24 + 16) - (double)v33;
        if (v34 < 0.0) {
          double v34 = 0.0;
        }
        vDSP_Length v35 = (unint64_t)v34;
        vDSP_vfill((const float *)&v87[1], &v31[v33], 1, (unint64_t)v34);
        vDSP_vfill((const float *)&v87[1], &v32[*(void *)(v24 + 48)], 1, v35);
        CNoiseSuppressorV4::speex_preprocess_run_freq(*(void *)(v24 + 312), (const float **)&v87[5], 0, 0);
        uint64_t v36 = *(void *)(v24 + 312);
        if (v36) {
          int v37 = *(_DWORD *)(v36 + 332);
        }
        else {
          int v37 = 0;
        }
        unint64_t v45 = *(void *)(v24 + 80);
        vDSP_Length v46 = (unint64_t)((double)*(unint64_t *)(v24 + 72) - (double)v45);
        vDSP_svesq((const float *)(*(void *)(v24 + 224) + 4 * v45), 1, (float *)&v87[25], v46);
        vDSP_svesq((const float *)(*(void *)(v24 + 248) + 4 * *(void *)(v24 + 80)), 1, (float *)&v87[21], v46);
        uint64_t v47 = *(float **)(v24 + 304);
        float v48 = *(float *)&v87[25];
        float v49 = *(float *)(v24 + 88);
        if (*(float *)&v87[25] < v49) {
          float v48 = *(float *)(v24 + 88);
        }
        if (*(float *)&v87[21] >= v49) {
          float v50 = *(float *)&v87[21];
        }
        else {
          float v50 = *(float *)(v24 + 88);
        }
        float v51 = log10f(v48 + 2.2204e-16);
        float v52 = (float)(v51 - log10f(v50 + 2.2204e-16)) * 10.0;
        float v53 = v47[2];
        float v54 = v47[3];
        uint64_t v55 = 5;
        if (v52 > v54) {
          uint64_t v55 = 4;
        }
        float v56 = (float)(v52 * (float)(1.0 - v47[v55])) + (float)(v47[v55] * v54);
        v47[3] = v56;
        if (v56 <= v47[6]) {
          float v57 = v47[8] * v53;
        }
        else {
          float v57 = (float)(v56 * (float)(1.0 - v47[7])) + (float)(v47[7] * v53);
        }
        v47[2] = v57;
        float v58 = expf(v57 - *(float *)(v24 + 64));
        if (*(float *)(v24 + 124) <= *(float *)(v24 + 120) || *(unsigned char *)(v24 + 169))
        {
          float v59 = v58 / (float)(v58 + 1.0);
          memcpy(v83->mBuffers[0].mData, v84->mBuffers[*(void *)(v24 + 104)].mData, v83->mBuffers[0].mDataByteSize);
          *(float *)(v24 + 128) = v59;
          *(unsigned char *)(v24 + 170) = 0;
        }
        else
        {
          if (*(unsigned char *)(v24 + 168)) {
            vDSP_vmin(*(const float **)(v24 + 224), 1, *(const float **)(v24 + 272), 1, *(float **)(v24 + 176), 1, *(void *)(v24 + 16));
          }
          *(_DWORD *)&v87[1] = 507307272;
          vDSP_vsadd(*(const float **)(v24 + 272), 1, (const float *)&v87[1], *(float **)(v24 + 200), 1, *(void *)(v24 + 16));
          vDSP_vdiv(*(const float **)(v24 + 200), 1, *(const float **)(v24 + 176), 1, *(float **)(v24 + 200), 1, *(void *)(v24 + 16));
          vDSP_vmul(v88.realp, 1, *(const float **)(v24 + 200), 1, mData, 1, *(void *)(v24 + 16));
          vDSP_vmul(v88.imagp, 1, *(const float **)(v24 + 200), 1, v82, 1, *(void *)(v24 + 16));
          *(_DWORD *)(v24 + 128) = v37;
          *(unsigned char *)(v24 + 170) = 1;
        }
        vDSP_zvmov((const DSPSplitComplex *)&v87[29], 1, (const DSPSplitComplex *)&v87[5], 1, *(void *)(v24 + 16));
        if (*(float *)(v24 + 128) <= *(float *)(v24 + 144))
        {
          unint64_t v60 = *(void *)(v24 + 136) + 1;
          *(void *)(v24 + 136) = v60;
          if (v60 <= *(void *)(v24 + 160)) {
            int v61 = *(_DWORD *)(v24 + 152);
          }
          else {
            int v61 = *(_DWORD *)(v24 + 148);
          }
          *(_DWORD *)(v24 + 128) = v61;
        }
        else
        {
          *(void *)(v24 + 136) = 0;
        }
        if (!*((_DWORD *)this + 134))
        {
          uint64_t v20 = 0;
LABEL_71:
          float v63 = *(float *)(*((void *)this + 70) + 128);
          uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNoiseSelector *)((char *)this + 32), 0);
          ausdk::AUElement::SetParameter(Element, 1u, v63, 0);
          if (*(unsigned char *)(*((void *)this + 70) + 170)) {
            float v65 = 1.0;
          }
          else {
            float v65 = 0.0;
          }
          float v66 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNoiseSelector *)((char *)this + 32), 0);
          ausdk::AUElement::SetParameter(v66, 0xDu, v65, 0);
LABEL_75:
          if (a6 >= 2)
          {
            unint64_t v67 = 1;
            do
            {
              if (v67 >= v11)
              {
                uint64_t v76 = a7[v67];
                if (v76->mNumberBuffers)
                {
                  uint64_t v77 = 0;
                  unint64_t v78 = 0;
                  do
                  {
                    bzero(v76->mBuffers[v77].mData, v76->mBuffers[v77].mDataByteSize);
                    ++v78;
                    uint64_t v76 = a7[v67];
                    ++v77;
                  }
                  while (v78 < v76->mNumberBuffers);
                }
              }
              else
              {
                uint64_t v68 = *((void *)this + 70);
                CFTypeRef v69 = a5[v67];
                uint64_t v70 = a7[v67];
                if (*(unsigned char *)(v68 + 40))
                {
                  float v71 = (float *)v70->mBuffers[0].mData;
                  if (*(float *)(v68 + 124) <= *(float *)(v68 + 120))
                  {
                    memcpy(v70->mBuffers[0].mData, v69->mBuffers[*(void *)(v68 + 104)].mData, v70->mBuffers[0].mDataByteSize);
                  }
                  else
                  {
                    vDSP_Length v72 = *(void *)(v68 + 16);
                    AudioStreamBasicDescription v73 = &v71[v72];
                    char v74 = (const float *)v69->mBuffers[*(void *)(v68 + 112)].mData;
                    uint64_t v75 = &v74[v72];
                    vDSP_vmul(v74, 1, *(const float **)(v68 + 200), 1, v71, 1, v72);
                    vDSP_vmul(v75, 1, *(const float **)(v68 + 200), 1, v73, 1, *(void *)(v68 + 16));
                  }
                  uint64_t v20 = 0;
                }
                else
                {
                  if (v69->mBuffers[0].mDataByteSize <= v70->mBuffers[0].mDataByteSize)
                  {
                    long long v79 = v70->mBuffers[0].mData;
                    if (v69->mBuffers[0].mData != v79) {
                      memcpy(v79, *(const void **)&v69[1].mBuffers[0].mNumberChannels, *(&v69[1].mNumberBuffers + 1));
                    }
                  }
                  uint64_t v20 = 4294956429;
                }
              }
              ++v67;
            }
            while (v67 != v21);
          }
          return v20;
        }
        uint64_t v20 = 0;
        unint64_t v25 = *a5;
        unint64_t v26 = *a7;
      }
      else
      {
        uint64_t v20 = 4294956429;
      }
      if (v25->mBuffers[0].mDataByteSize <= v26->mBuffers[0].mDataByteSize)
      {
        float v62 = v26->mBuffers[0].mData;
        if (v25->mBuffers[0].mData != v62) {
          memcpy(v62, *(const void **)&v25[1].mBuffers[0].mNumberChannels, *(&v25[1].mNumberBuffers + 1));
        }
      }
      goto LABEL_71;
    }
  }
  if (a6)
  {
    unint64_t v38 = 0;
    do
    {
      if (v38 >= v11)
      {
        BOOL v42 = a7[v38];
        if (v42->mNumberBuffers)
        {
          uint64_t v43 = 0;
          unint64_t v44 = 0;
          do
          {
            bzero(v42->mBuffers[v43].mData, v42->mBuffers[v43].mDataByteSize);
            ++v44;
            BOOL v42 = a7[v38];
            ++v43;
          }
          while (v44 < v42->mNumberBuffers);
        }
      }
      else
      {
        uint64_t v39 = a5[v38];
        uint64_t v40 = a7[v38];
        if (v39->mBuffers[0].mDataByteSize <= v40->mBuffers[0].mDataByteSize)
        {
          unint64_t v41 = v40->mBuffers[0].mData;
          if (v39->mBuffers[0].mData != v41) {
            memcpy(v41, *(const void **)&v39[1].mBuffers[0].mNumberChannels, *(&v39[1].mNumberBuffers + 1));
          }
        }
      }
      ++v38;
    }
    while (v38 != v21);
  }
  return 0;
}

void AUNoiseSelector::UpdateState(AUNoiseSelector *this)
{
  if (*((void *)this + 70))
  {
    unsigned int v2 = 0;
    unsigned int v3 = (AUNoiseSelector *)((char *)this + 32);
    while (2)
    {
      uint64_t v4 = *((void *)this + 70);
      uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement(v3, 0);
      float Parameter = ausdk::AUElement::GetParameter(Element, v2);
      switch(v2)
      {
        case 0u:
          *(float *)(v4 + 124) = Parameter;
          goto LABEL_24;
        case 2u:
          *(float *)(v4 + 64) = Parameter;
          goto LABEL_24;
        case 3u:
          unint64_t v7 = *(void *)(v4 + 8);
          float v8 = *(float *)v4 / ((double)v7 + (double)v7);
          unint64_t v9 = vcvtas_u32_f32(fabsf(Parameter / v8));
          if (v7 >= v9) {
            unint64_t v7 = v9;
          }
          *(void *)(v4 + 80) = v7;
          goto LABEL_24;
        case 4u:
          unint64_t v10 = *(void *)(v4 + 8);
          float v11 = *(float *)v4 / ((double)v10 + (double)v10);
          unint64_t v12 = vcvtas_u32_f32(fabsf(Parameter / v11));
          if (v10 >= v12) {
            unint64_t v10 = v12;
          }
          *(void *)(v4 + 72) = v10;
          goto LABEL_24;
        case 5u:
          *(float *)(v4 + 44) = Parameter;
          goto LABEL_24;
        case 6u:
          unint64_t v13 = *(void *)(v4 + 8);
          float v14 = *(float *)v4 / ((double)v13 + (double)v13);
          unint64_t v15 = vcvtas_u32_f32(fabsf(Parameter / v14));
          if (v13 >= v15) {
            unint64_t v13 = v15;
          }
          *(void *)(v4 + 56) = v13;
          goto LABEL_24;
        case 7u:
          unint64_t v16 = *(void *)(v4 + 8);
          float v17 = *(float *)v4 / ((double)v16 + (double)v16);
          unint64_t v18 = vcvtas_u32_f32(fabsf(Parameter / v17));
          if (v16 >= v18) {
            unint64_t v16 = v18;
          }
          *(void *)(v4 + 48) = v16;
          goto LABEL_24;
        case 8u:
          *(float *)(v4 + 144) = Parameter;
          goto LABEL_24;
        case 9u:
          *(float *)(v4 + 148) = Parameter;
          goto LABEL_24;
        case 0xAu:
          *(float *)(v4 + 152) = Parameter;
          goto LABEL_24;
        case 0xBu:
          *(void *)(v4 + 160) = vcvtad_u64_f64((float)(*(float *)v4 * Parameter) / (double)*(unint64_t *)(v4 + 8));
          goto LABEL_24;
        case 0xCu:
          *(unsigned char *)(v4 + 168) = Parameter != 0.0;
          goto LABEL_24;
        case 0xEu:
          uint64_t v19 = *(void *)(v4 + 304);
          if (v19) {
            *(float *)(v19 + 24) = Parameter;
          }
          goto LABEL_25;
        default:
LABEL_24:
          if (++v2 != 15) {
            continue;
          }
LABEL_25:
          *(unsigned char *)(*((void *)this + 70) + 169) = *((_DWORD *)this + 134) != 0;
          break;
      }
      break;
    }
  }
}

uint64_t AUNoiseSelector::CanScheduleParameters(AUNoiseSelector *this)
{
  return 0;
}

uint64_t AUNoiseSelector::SetParameter(AUNoiseSelector *this, unsigned int a2, int a3, float a4)
{
  if (a3) {
    return 4294956418;
  }
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNoiseSelector *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(Element, a2, a4, 0);
  uint64_t result = 0;
  ++*((_DWORD *)this + 132);
  return result;
}

uint64_t AUNoiseSelector::SetProperty(AUNoiseSelector *this, int a2, int a3, unsigned int a4, unsigned char *a5, unsigned int a6)
{
  if (a3) {
    return 4294956417;
  }
  if (a2 == 3700)
  {
    uint64_t result = 4294956445;
    if (a6 >= 4)
    {
      if (*a5) {
        return 0;
      }
      else {
        return 4294956445;
      }
    }
  }
  else
  {
    if (a2 != 21) {
      return 4294956417;
    }
    uint64_t result = 0;
    *((_DWORD *)this + 134) = *(_DWORD *)a5;
  }
  return result;
}

uint64_t AUNoiseSelector::GetProperty(AUNoiseSelector *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  if (a3) {
    return 4294956417;
  }
  if (a2 == 3700)
  {
    int v6 = *((unsigned __int8 *)this + 376);
  }
  else
  {
    if (a2 != 21) {
      return 4294956417;
    }
    int v6 = *((_DWORD *)this + 134);
  }
  uint64_t result = 0;
  *a5 = v6;
  return result;
}

uint64_t AUNoiseSelector::GetPropertyInfo(AUNoiseSelector *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3 || a2 != 3700 && a2 != 21) {
    return 4294956417;
  }
  uint64_t result = 0;
  *a6 = 1;
  *a5 = 4;
  return result;
}

uint64_t AUNoiseSelector::Reset(AUNoiseSelector *this)
{
  if (*((void *)this + 70))
  {
    AUNoiseSelector::UpdateState(this);
    uint64_t v2 = *((void *)this + 70);
    uint64_t v3 = *(void *)(v2 + 296);
    if (v3) {
      *(void *)(v3 + 8) = 0;
    }
    uint64_t v4 = *(void *)(v2 + 304);
    if (v4) {
      *(void *)(v4 + 8) = 0;
    }
  }
  return 0;
}

void *AUNoiseSelector::Cleanup(AUNoiseSelector *this)
{
  return std::unique_ptr<NoiseSelectorCore>::reset[abi:ne180100]((void *)this + 70, 0);
}

void *std::unique_ptr<NoiseSelectorCore>::reset[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t v2 = (void *)*result;
  *uint64_t result = a2;
  if (v2)
  {
    uint64_t v3 = v2[39];
    if (v3)
    {
      CNoiseSuppressorV4::speex_preprocess_state_destroy(v3);
      v2[39] = 0;
    }
    uint64_t v4 = (void *)v2[40];
    if (v4)
    {
      v2[41] = v4;
      operator delete(v4);
    }
    uint64_t v5 = v2[38];
    v2[38] = 0;
    if (v5) {
      MEMORY[0x1C185D370](v5, 0x1000C408AA14F5FLL);
    }
    uint64_t v6 = v2[37];
    v2[37] = 0;
    if (v6) {
      MEMORY[0x1C185D370](v6, 0x1000C408AA14F5FLL);
    }
    unint64_t v7 = (void *)v2[34];
    if (v7)
    {
      v2[35] = v7;
      operator delete(v7);
    }
    float v8 = (void *)v2[31];
    if (v8)
    {
      v2[32] = v8;
      operator delete(v8);
    }
    unint64_t v9 = (void *)v2[28];
    if (v9)
    {
      v2[29] = v9;
      operator delete(v9);
    }
    unint64_t v10 = (void *)v2[25];
    if (v10)
    {
      v2[26] = v10;
      operator delete(v10);
    }
    float v11 = (void *)v2[22];
    if (v11)
    {
      v2[23] = v11;
      operator delete(v11);
    }
    JUMPOUT(0x1C185D370);
  }
  return result;
}

uint64_t AUNoiseSelector::Initialize(AUNoiseSelector *this)
{
  unsigned int v2 = 0;
  uint64_t v3 = (AUNoiseSelector *)((char *)this + 80);
  while (1)
  {
    uint64_t v4 = *((void *)this + 15);
    if (v4) {
      LODWORD(v5) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
    }
    else {
      uint64_t v5 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
    }
    if (v2 >= v5) {
      break;
    }
    uint64_t Element = ausdk::AUScope::SafeGetElement(v3, v2++);
    if (*(_DWORD *)(Element + 108) != 3) {
      return 4294956421;
    }
  }
  unsigned int v7 = 0;
  do
  {
    uint64_t v8 = *((void *)this + 21);
    if (v8) {
      LODWORD(v9) = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 24))(v8);
    }
    else {
      uint64_t v9 = (*((void *)this + 19) - *((void *)this + 18)) >> 3;
    }
    if (v7 >= v9) {
      operator new();
    }
    uint64_t v10 = ausdk::AUScope::SafeGetElement((AUNoiseSelector *)((char *)this + 128), v7++);
  }
  while (*(_DWORD *)(v10 + 108) == 1);
  return 4294956421;
}

void AUNoiseSelector::~AUNoiseSelector(AUNoiseSelector *this)
{
  AUNoiseSelector::~AUNoiseSelector(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F14B1550;
  unsigned int v2 = (void *)((char *)this + 560);
  std::unique_ptr<NoiseSelectorCore>::reset[abi:ne180100]((void *)this + 70, 0);
  std::__hash_table<vp::vx::io::Object_ID<vp::vx::io::Node>,std::hash<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::equal_to<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::allocator<vp::vx::io::Object_ID<vp::vx::io::Node>>>::~__hash_table((uint64_t)this + 568);
  std::unique_ptr<NoiseSelectorCore>::reset[abi:ne180100](v2, 0);

  ausdk::AUBase::~AUBase(this);
}

void ___ZL23AUNoiseSelectorLogScopev_block_invoke()
{
}

uint64_t PrescriptiveAmplification::SetAudiogram(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (a3 - a2) >> 2;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v3 != v4) {
    __assert_rtn("SetAudiogram", "PrescriptiveAmplification.cpp", 90, "loss_dBHL.size()==mNumSubbands");
  }
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)(result + 48);
    do
    {
      float v7 = *(float *)(a2 + 4 * v5);
      float v8 = 0.0;
      if (v7 > 0.0)
      {
        float v8 = 3.999;
        if (v7 < 80.0)
        {
          uint64_t v9 = 1;
          do
          {
            int v10 = v9;
            float v11 = kEqualLoudnessModel_Loss_dBHL[v9++];
          }
          while (v7 > v11);
          float v8 = (float)((float)(v7 - kEqualLoudnessModel_Loss_dBHL[v10 - 1])
                     / (float)(v11 - kEqualLoudnessModel_Loss_dBHL[v10 - 1]))
             + (float)(v10 - 1);
        }
      }
      if (v8 <= 3.95) {
        float v12 = v8;
      }
      else {
        float v12 = 3.95;
      }
      *(float *)(v6 + 4 * v5++) = v12;
    }
    while (v5 != v3);
  }
  return result;
}

uint64_t PrescriptiveAmplification::ComputeFdVectors(uint64_t this)
{
  uint64_t v1 = *(unsigned int *)(this + 16);
  if (v1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = *(void *)(this + 24);
    uint64_t v4 = *(void *)(this + 72);
    if (*(_DWORD *)(this + 20) == 1) {
      uint64_t v5 = (float *)&kPrescriptiveAmplification_SpeechBias;
    }
    else {
      uint64_t v5 = (float *)&kPrescriptiveAmplification_DefaultBias;
    }
    uint64_t v6 = *(void *)(this + 96);
    do
    {
      float v7 = *(float *)(v3 + 4 * v2);
      if (v7 <= 250.0)
      {
        uint64_t v12 = 0;
        float v13 = 0.0;
      }
      else if (v7 >= 30000.0)
      {
        float v13 = 1.0;
        uint64_t v12 = 7;
      }
      else
      {
        uint64_t v8 = 1;
        do
        {
          int v9 = v8;
          float v10 = kEqualLoudnessModel_Freq_Hz[v8++];
        }
        while (v7 > v10);
        int v11 = v9 - 1;
        uint64_t v12 = (v9 - 1);
        float v13 = (float)(v7 - kEqualLoudnessModel_Freq_Hz[v11]) / (float)(v10 - kEqualLoudnessModel_Freq_Hz[v11]);
      }
      this = 4 * v12 + 4;
      *(float *)(v4 + 4 * v2) = kPrescriptiveAmplification_ExpanderThresholdOffset_dB[v12]
                              + (float)(v13
                                      * (float)(*(float *)((char *)kPrescriptiveAmplification_ExpanderThresholdOffset_dB
                                                         + this)
                                              - kPrescriptiveAmplification_ExpanderThresholdOffset_dB[v12]));
      *(float *)(v6 + 4 * v2++) = v5[v12] + (float)(v13 * (float)(*(float *)((char *)v5 + this) - v5[v12]));
    }
    while (v2 != v1);
  }
  return this;
}

uint64_t PrescriptiveAmplification::PrescriptiveAmplification(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(_OWORD *)a1 = xmmword_1BB87B4F0;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v6 = (unsigned int *)(a1 + 16);
  float v7 = (void **)(a1 + 24);
  *(_OWORD *)(a1 + 48) = 0u;
  uint64_t v8 = (char **)(a1 + 48);
  int v9 = (char **)(a1 + 72);
  *(_OWORD *)(a1 + 96) = 0u;
  float v10 = (char **)(a1 + 96);
  int v11 = (char **)(a1 + 120);
  *(_OWORD *)(a1 + 144) = 0u;
  uint64_t v12 = (char **)(a1 + 144);
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  uint64_t v13 = (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2;
  *(_DWORD *)(a1 + 16) = v13;
  int v21 = 0;
  std::vector<float>::assign((char **)(a1 + 24), v13, &v21);
  uint64_t v14 = *(void *)(a2 + 8);
  if (v14 != *(void *)a2) {
    memmove(*v7, *(const void **)a2, v14 - *(void *)a2);
  }
  unint64_t v15 = *v6;
  int v21 = 0;
  std::vector<float>::assign(v11, v15, &v21);
  unint64_t v16 = *v6;
  int v21 = 0;
  std::vector<float>::assign(v12, v16, &v21);
  unint64_t v17 = *v6;
  int v21 = 0;
  std::vector<float>::assign(v8, v17, &v21);
  unint64_t v18 = *v6;
  int v21 = 0;
  std::vector<float>::assign(v9, v18, &v21);
  unint64_t v19 = *v6;
  int v21 = 0;
  std::vector<float>::assign(v10, v19, &v21);
  PrescriptiveAmplification::ComputeFdVectors(a1);
  PrescriptiveAmplification::SetAudiogram(a1, *a3, a3[1]);
  return a1;
}

void sub_1BB4F513C(_Unwind_Exception *exception_object)
{
  int v9 = (void *)v1[21];
  if (v9)
  {
    v1[22] = v9;
    operator delete(v9);
  }
  float v10 = *v7;
  if (*v7)
  {
    v1[19] = v10;
    operator delete(v10);
  }
  int v11 = *v6;
  if (*v6)
  {
    v1[16] = v11;
    operator delete(v11);
  }
  uint64_t v12 = *v5;
  if (*v5)
  {
    v1[13] = v12;
    operator delete(v12);
  }
  uint64_t v13 = *v4;
  if (*v4)
  {
    v1[10] = v13;
    operator delete(v13);
  }
  uint64_t v14 = *v3;
  if (*v3)
  {
    v1[7] = v14;
    operator delete(v14);
  }
  unint64_t v15 = *v2;
  if (*v2)
  {
    v1[4] = v15;
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

void PrescriptiveAmplification::SetFineTuningSimple(PrescriptiveAmplification *this, float a2, float a3)
{
  uint64_t v3 = *((unsigned int *)this + 4);
  if (v3)
  {
    float v5 = -a2;
    uint64_t v6 = (float *)*((void *)this + 3);
    float v7 = (float *)*((void *)this + 18);
    uint64_t v8 = (float *)*((void *)this + 15);
    do
    {
      float v9 = *v6;
      float v10 = a2;
      if (*v6 <= 3000.0)
      {
        float v10 = v5;
        if (v9 >= 750.0)
        {
          float v11 = powf((float)(v9 + -750.0) * 0.00044444, 0.65);
          float v10 = (float)((float)(1.0 - v11) * v5) + (float)(v11 * a2);
        }
      }
      *v8++ = v10;
      *v7++ = v10;
      ++v6;
      --v3;
    }
    while (v3);
  }
}

uint64_t PrescriptiveAmplification::GetGainTargets(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = (a3 - a2) / 24;
  if (v3 > *(unsigned int *)(result + 16)) {
    __assert_rtn("GetGainTargets", "PrescriptiveAmplification.cpp", 181, "numActiveSubbands <= mNumSubbands");
  }
  if (a3 != a2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(result + 48);
    uint64_t v6 = *(void *)(result + 96);
    if (v3 <= 1) {
      unint64_t v3 = 1;
    }
    do
    {
      uint64_t v7 = 0;
      float v8 = *(float *)(v5 + 4 * v4);
      int v9 = (int)v8;
      float v10 = v8 - (float)(int)v8;
      float v11 = *(float *)(v6 + 4 * v4);
      int v12 = 7 * v9;
      uint64_t v13 = *(void *)(a2 + 24 * v4);
      uint64_t v14 = (char *)&kEqualLoudnessModel_GainTable + 4 * v12 + 28;
      unint64_t v15 = (char *)&kEqualLoudnessModel_GainTable + 4 * v12;
      do
      {
        *(float *)(v13 + v7) = v11
                             * (float)(*(float *)&v15[v7]
                                     + (float)(v10 * (float)(*(float *)&v14[v7] - *(float *)&v15[v7])));
        v7 += 4;
      }
      while (v7 != 28);
      ++v4;
    }
    while (v4 != v3);
    uint64_t v16 = 0;
    uint64_t v17 = *(void *)(result + 120);
    uint64_t v18 = *(void *)(result + 144);
    uint64_t v19 = *(void *)(result + 72);
    do
    {
      uint64_t v20 = 0;
      uint64_t v21 = *(void *)(a2 + 24 * v16);
      do
      {
        float v22 = (float)((float)((float)(1.0 - *(float *)&kEqualLoudnessModel_FtWeight[v20]) * *(float *)(v18 + 4 * v16))
                    + (float)(*(float *)&kEqualLoudnessModel_FtWeight[v20] * *(float *)(v17 + 4 * v16)))
            + *(float *)(v21 + v20 * 4);
        *(float *)(v21 + v20 * 4) = v22;
        float v23 = v22
            + (float)(*(float *)(result + 8)
                    * fmaxf((float)(*(float *)(result + 12) + *(float *)(v19 + 4 * v16))- *(float *)&kEqualLoudnessModel_Spl_dB[v20], 0.0));
        *(float *)(v21 + v20 * 4) = v23;
        float v24 = *(float *)result * fmaxf(v23, 0.0);
        *(float *)(v21 + v20 * 4) = v24;
        *(float *)(v21 + v20 * 4) = *(float *)(result + 4) + v24;
        ++v20;
      }
      while (v20 != 7);
      ++v16;
    }
    while (v16 != v3);
  }
  return result;
}

float FrequencyDomainCompressor::SetParameter(float **this, uint64_t a2, float result)
{
  if (FrequencyDomainCompressor::kMaxValue[a2] < result) {
    uint64_t result = FrequencyDomainCompressor::kMaxValue[a2];
  }
  if (result < FrequencyDomainCompressor::kMinValue[a2]) {
    uint64_t result = FrequencyDomainCompressor::kMinValue[a2];
  }
  unint64_t v3 = *this;
  (*this)[a2] = result;
  switch(a2)
  {
    case 0:
      uint64_t result = *v3;
      uint64_t v5 = *((unsigned int *)this + 13);
      if (v5)
      {
        float v6 = result - *((float *)this + 19);
        uint64_t v7 = this[14];
        do
        {
          *uint64_t v7 = v6 + *v7;
          ++v7;
          --v5;
        }
        while (v5);
        uint64_t result = *v3;
      }
      *((float *)this + 19) = result;
      break;
    case 1:
      uint64_t result = expf(-1.0 / (float)((float)(v3[1] * 0.001) * *((float *)this + 12)));
      *((float *)this + 15) = 1.0 - result;
      *((float *)this + 16) = result;
      break;
    case 2:
      uint64_t result = expf(-1.0 / (float)((float)(v3[2] * 0.001) * *((float *)this + 12)));
      *((float *)this + 17) = 1.0 - result;
      *((float *)this + 18) = result;
      break;
    case 5:
      uint64_t result = v3[5];
      float v8 = this[11];
      uint64_t v9 = (char *)this[12] - (char *)v8;
      if (v9)
      {
        float v10 = result - *((float *)this + 20);
        unint64_t v11 = v9 >> 2;
        if (v11 <= 1) {
          unint64_t v11 = 1;
        }
        do
        {
          float *v8 = v10 + *v8;
          ++v8;
          --v11;
        }
        while (v11);
        uint64_t result = v3[5];
      }
      *((float *)this + 20) = result;
      break;
    case 6:
      uint64_t result = v3[6];
      *((float *)this + 21) = result;
      break;
    default:
      return result;
  }
  return result;
}

void *FrequencyDomainCompressor::GetGainTargets(FrequencyDomainCompressor *this, void *a2)
{
  v14[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((unsigned int *)this + 13);
  uint64_t v4 = *((unsigned int *)this + 14);
  MEMORY[0x1F4188790](this);
  uint64_t v7 = (char *)v14 - v6;
  if (v3)
  {
    int v8 = 0;
    uint64_t v9 = *(const void ***)(v5 + 24);
    uint64_t v10 = 4 * v4;
    uint64_t v11 = v3;
    do
    {
      int v12 = *v9;
      v9 += 3;
      memcpy(&v7[4 * v8], v12, 4 * v4);
      v8 += v4;
      --v11;
    }
    while (v11);
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v10 = 4 * v4;
  }
  return memcpy(a2, v7, v10 * v3);
}

uint64_t AUChannelSelector::ValidFormat(AUChannelSelector *this, int a2, int a3, const AudioStreamBasicDescription *a4)
{
  if ((a2 - 1) > 1 || a3 != 0) {
    return 0;
  }
  AudioFormatID mFormatID = a4->mFormatID;
  if (mFormatID == 1718773105 && a4->mBitsPerChannel == 64) {
    return 1;
  }
  else {
    return (mFormatID == 1819304813) & a4->mFormatFlags;
  }
}

uint64_t AUChannelSelector::SupportedNumChannels(AUChannelSelector *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUChannelSelector::SupportedNumChannels(AUChannelInfo const**)::sChannels;
  }
  return 1;
}

BOOL AUChannelSelector::StreamFormatWritable(AUChannelSelector *this, int a2, int a3)
{
  return (a2 - 1) <= 1 && a3 == 0 && *((unsigned char *)this + 17) == 0;
}

uint64_t AUChannelSelector::SupportsTail(AUChannelSelector *this)
{
  return 1;
}

double AUChannelSelector::GetTailTime(AUChannelSelector *this)
{
  return 0.0;
}

double AUChannelSelector::GetLatency(AUChannelSelector *this)
{
  return 0.0;
}

uint64_t AUChannelSelector::ProcessMultipleBufferLists(AUChannelSelector *this, unsigned int *a2, int a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  uint64_t v11 = (AUChannelSelector *)((char *)this + 80);
  int v12 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUChannelSelector *)((char *)this + 80), 0) + 92);
  int v13 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUChannelSelector *)((char *)this + 128), 0) + 92);
  if ((v12 & 0x20) != 0) {
    uint64_t v14 = 1;
  }
  else {
    uint64_t v14 = *(unsigned int *)(ausdk::AUScope::SafeGetElement(v11, 0) + 108);
  }
  uint64_t v29 = v14;
  if ((v13 & 0x20) != 0) {
    uint64_t v15 = 1;
  }
  else {
    uint64_t v15 = *(unsigned int *)(ausdk::AUScope::SafeGetElement((AUChannelSelector *)((char *)this + 128), 0) + 108);
  }
  uint64_t v16 = (uint64_t)*a5;
  uint64_t v17 = (uint64_t)*a7;
  int v18 = *(_DWORD *)(ausdk::AUScope::SafeGetElement(v11, 0) + 88);
  BOOL v19 = (v13 & 0x20) == 0 || v18 == 1718773105;
  BOOL v30 = v19;
  int v20 = a3 << (v18 == 1718773105);
  if (v18 != 1718773105 && (v12 & 0x20) != 0) {
    SimpleMeters::ProcessInputBufferList((AUChannelSelector *)((char *)this + 568), v20, (const AudioBufferList *)v16);
  }
  unint64_t v22 = 0;
  uint64_t v23 = 4 * v15;
  while (v22 < *(unsigned int *)(ausdk::AUScope::SafeGetElement((AUChannelSelector *)((char *)this + 128), 0) + 108))
  {
    uint64_t v24 = *(unsigned int *)(*((void *)this + 66) + 4 * v22);
    if ((v12 & 0x20) != 0)
    {
      unint64_t v25 = *(_DWORD **)(v16 + 16 * v24 + 16);
      if ((v13 & 0x20) != 0)
      {
LABEL_19:
        unint64_t v26 = *(_DWORD **)(v17 + 16 * v22 + 16);
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v25 = (_DWORD *)(*(void *)(v16 + 16) + 4 * v24);
      if ((v13 & 0x20) != 0) {
        goto LABEL_19;
      }
    }
    unint64_t v26 = (_DWORD *)(*(void *)(v17 + 16) + 4 * v22);
LABEL_22:
    for (int i = v20; i; --i)
    {
      _DWORD *v26 = *v25;
      unint64_t v26 = (_DWORD *)((char *)v26 + v23);
      v25 += v29;
    }
    ++v22;
  }
  if (!v30) {
    SimpleMeters::ProcessOutputBufferList((AUChannelSelector *)((char *)this + 568), v20, (const AudioBufferList *)v17);
  }
  return 0;
}

uint64_t AUChannelSelector::CanScheduleParameters(AUChannelSelector *this)
{
  return 0;
}

uint64_t AUChannelSelector::SetProperty(AUChannelSelector *this, int a2, int a3, int a4, int *a5, void *a6, int *a7)
{
  unsigned int v7 = a6;
  LODWORD(__p[0]) = 0;
  if (SimpleMeters::HandleSetProperty((AUChannelSelector *)((char *)this + 568), a2, a3, a5, a6, (int *)__p, a7)) {
    return LODWORD(__p[0]);
  }
  if (a3) {
    return 4294956417;
  }
  if (a2 == 21)
  {
    uint64_t result = 0;
    *((_DWORD *)this + 141) = *a5;
    return result;
  }
  if (a2 == 1667654509)
  {
    if (!a4)
    {
      std::optional<std::vector<float>>::operator=[abi:ne180100]<std::vector<float>,void>((uint64_t)this + 528, (uint64_t)__p);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_23;
    }
  }
  else if (a2 == 1936483181 && !a4)
  {
    __p[0] = a5;
    unint64_t v14 = v7 >> 2;
    uint64_t v15 = (void **)((char *)this + 528);
    if (*((unsigned char *)this + 17))
    {
      if (!*((unsigned char *)this + 552))
      {
        _os_assert_log();
        uint64_t result = _os_crash();
        __break(1u);
        return result;
      }
      if (v14 != (uint64_t)(*((void *)this + 67) - *((void *)this + 66)) >> 2) {
        return 4294956445;
      }
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>((char *)this + 528, (char *)a5, (uint64_t)&a5[v14], v14);
    }
    else
    {
      if (*((unsigned char *)this + 552))
      {
        uint64_t v16 = *v15;
        if (*v15)
        {
          *((void *)this + 67) = v16;
          operator delete(v16);
        }
        *((unsigned char *)this + 552) = 0;
      }
      int v18 = &a5[v14];
      std::optional<std::vector<unsigned int>>::emplace[abi:ne180100]<unsigned int const* const&,unsigned int const*,void>((uint64_t)this + 528, (const void **)__p, (uint64_t *)&v18);
    }
LABEL_23:
    uint64_t result = 0;
    *((unsigned char *)this + 560) = 1;
    return result;
  }
  return 4294956417;
}

char *std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  unsigned int v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *unsigned int v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<unsigned int>::__vallocate[abi:ne180100](v7, v11);
    int v13 = (char *)v7[1];
    int v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_15:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      int v18 = v9;
      BOOL v19 = __src;
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  int v12 = (void **)(result + 8);
  unint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_15;
  }
  uint64_t v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    int v18 = v9;
    BOOL v19 = v16;
LABEL_17:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_18:
  const void *v12 = &v9[v17];
  return result;
}

uint64_t std::optional<std::vector<unsigned int>>::emplace[abi:ne180100]<unsigned int const* const&,unsigned int const*,void>(uint64_t a1, const void **a2, uint64_t *a3)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v6 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v6;
      operator delete(v6);
    }
    *(unsigned char *)(a1 + 24) = 0;
  }
  unsigned int v7 = *a2;
  uint64_t v8 = *a3;
  unint64_t v9 = (*a3 - (uint64_t)*a2) >> 2;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>((void *)a1, v7, v8, v9);
  *(unsigned char *)(a1 + 24) = 1;
  return a1;
}

void anonymous namespace'::convertChannelMapFromCF(_anonymous_namespace_ *this, CFTypeRef cf)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  if (cf) {
    CFRetain(cf);
  }
  applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&theArray, cf);
  CFArrayRef v4 = theArray;
  if (theArray)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    CFIndex v6 = Count;
    CFArrayRef v7 = theArray;
    if (theArray)
    {
      CFIndex v8 = CFArrayGetCount(theArray);
      if (!v6)
      {
LABEL_33:
        if (theArray) {
          CFRelease(theArray);
        }
        return;
      }
    }
    else
    {
      CFIndex v8 = 0;
      if (!Count) {
        goto LABEL_33;
      }
    }
    unint64_t v9 = 0;
    do
    {
      if (v4 == v7 && v9 == v8) {
        break;
      }
      if (CFArrayGetCount(v4) > v9)
      {
        CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v4, v9);
        unint64_t v11 = ValueAtIndex;
        if (ValueAtIndex) {
          continue;
        }
      }
      exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not find item");
      CFRetain(ValueAtIndex);
      applesauce::CF::NumberRef::NumberRef((applesauce::CF::NumberRef *)&cfa, v11);
      if (!cfa)
      {
        unint64_t v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v26, "Could not construct");
      }
      int v12 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)cfa);
      int v13 = v12;
      unint64_t v15 = (_DWORD *)*((void *)this + 1);
      unint64_t v14 = *((void *)this + 2);
      if ((unint64_t)v15 >= v14)
      {
        size_t v17 = *(_DWORD **)this;
        uint64_t v18 = ((uint64_t)v15 - *(void *)this) >> 2;
        unint64_t v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 62) {
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v14 - (void)v17;
        if (v20 >> 1 > v19) {
          unint64_t v19 = v20 >> 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v19;
        }
        if (v21)
        {
          unint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)this + 16, v21);
          size_t v17 = *(_DWORD **)this;
          unint64_t v15 = (_DWORD *)*((void *)this + 1);
        }
        else
        {
          unint64_t v22 = 0;
        }
        uint64_t v23 = &v22[4 * v18];
        *(_DWORD *)uint64_t v23 = v13;
        uint64_t v16 = v23 + 4;
        while (v15 != v17)
        {
          int v24 = *--v15;
          *((_DWORD *)v23 - 1) = v24;
          v23 -= 4;
        }
        *(void *)this = v23;
        *((void *)this + 1) = v16;
        *((void *)this + 2) = &v22[4 * v21];
        if (v17) {
          operator delete(v17);
        }
      }
      else
      {
        _DWORD *v15 = v12;
        uint64_t v16 = v15 + 1;
      }
      *((void *)this + 1) = v16;
      if (cfa) {
        CFRelease(cfa);
      }
      ++v9;
    }
    while (v9 != v6);
    goto LABEL_33;
  }
}

void sub_1BB4F5E60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  int v12 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    CFIndex v6 = result;
    uint64_t result = std::vector<unsigned int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BB4F5F34(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUChannelSelector::GetProperty(int **this, int a2, unsigned int a3, int a4, _DWORD *a5, int *a6)
{
  unsigned int v19 = 0;
  if (SimpleMeters::HandleGetProperty((SimpleMeters *)(this + 71), a2, a3, a5, &v19, a6)) {
    return v19;
  }
  if (a3) {
    return 4294956417;
  }
  if (a2 == 21) {
    goto LABEL_15;
  }
  if (a2 == 1667654509)
  {
    if (!a4)
    {
      if (*((unsigned char *)this + 552))
      {
        size_t v17 = v18;
        uint64_t v18 = 0;
        *(void *)a5 = v17;
        applesauce::CF::ArrayRef::~ArrayRef(&v18);
        return 0;
      }
      return 4294956446;
    }
LABEL_15:
    uint64_t result = 0;
    *a5 = *((_DWORD *)this + 141);
    return result;
  }
  if (a2 != 1936483181) {
    return 4294956417;
  }
  if (a4) {
    goto LABEL_15;
  }
  if (!*((unsigned char *)this + 552)) {
    return 4294956446;
  }
  int v12 = this[67];
  int v13 = this[66];
  uint64_t v14 = (char *)v12 - (char *)v13;
  if (v12 == v13) {
    return 0;
  }
  uint64_t v15 = 0;
  unint64_t v16 = v14 >> 2;
  do
  {
    uint64_t result = 0;
    a5[v15] = v13[v15];
    ++v15;
  }
  while (v16 > v15);
  return result;
}

applesauce::CF::ArrayRef *anonymous namespace'::convertChannelMapToCF(applesauce::CF::ArrayRef *a1, int **a2)
{
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2[1] - *a2, 0);
  CFIndex v6 = *a2;
  uint64_t v5 = a2[1];
  while (v6 != v5)
  {
    int valuePtr = *v6;
    CFNumberRef v7 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (!v7)
    {
      exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    CFArrayAppendValue(Mutable, v7);
    ++v6;
  }
  return applesauce::CF::ArrayRef::ArrayRef(a1, Mutable);
}

void sub_1BB4F6150(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AUChannelSelector::GetPropertyInfo(AUChannelSelector *this, int a2, unsigned int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a2 == 3007)
  {
    BOOL v8 = 1;
    unsigned int v9 = 4;
LABEL_12:
    uint64_t v10 = 0;
    *a5 = v9;
    *a6 = v8;
    return v10;
  }
  if (a2 == 3099)
  {
    if (a3 > 1) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = (uint64_t)(*((void *)this + 72) - *((void *)this + 71)) >> 7;
    }
    if ((a3 & 0xFFFFFFFD) == 0) {
      v7 += (uint64_t)(*((void *)this + 75) - *((void *)this + 74)) >> 7;
    }
    BOOL v8 = 0;
    unsigned int v9 = 16 * v7;
    goto LABEL_12;
  }
  if (!a3)
  {
    switch(a2)
    {
      case 21:
        uint64_t v10 = 0;
        *a6 = 1;
        int v13 = 4;
        break;
      case 1667654509:
        uint64_t v10 = 0;
        *a6 = *((unsigned char *)this + 17) ^ 1;
        int v13 = 8;
        break;
      case 1936483181:
        *a6 = *((unsigned char *)this + 17) ^ 1;
        uint64_t Element = ausdk::AUScope::SafeGetElement((AUChannelSelector *)((char *)this + 128), 0);
        uint64_t v10 = 0;
        int v13 = 4 * *(_DWORD *)(Element + 108);
        break;
      default:
        return 4294956417;
    }
    *a5 = v13;
    return v10;
  }
  return 4294956417;
}