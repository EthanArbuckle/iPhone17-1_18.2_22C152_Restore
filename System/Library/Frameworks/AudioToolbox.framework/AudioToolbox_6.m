uint64_t AUSpatialMixerV2::GetRequiredSharedInputBufferSize(AUSpatialMixerV2 *this)
{
  unsigned int v2;
  ausdk::AUScope *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;

  v2 = 0;
  v3 = (AUSpatialMixerV2 *)((char *)this + 80);
  v4 = 2;
  while (1)
  {
    v5 = *((void *)this + 15);
    if (v5) {
      LODWORD(v6) = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
    }
    else {
      v6 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
    }
    if (v2 >= v6) {
      break;
    }
    v7 = *(_DWORD *)(ausdk::AUScope::SafeGetElement(v3, v2) + 108);
    if (v4 <= v7) {
      v4 = v7;
    }
    else {
      v4 = v4;
    }
    ++v2;
  }
  return v4;
}

uint64_t std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(*(void *)a1);
  }
  return a1;
}

void AUSM::OutputBuffers::~OutputBuffers(AUSM::OutputBuffers *this)
{
  v2 = (void *)*((void *)this + 8);
  if (v2)
  {
    *((void *)this + 9) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
  v4 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v4;
    operator delete(v4);
  }
}

void AUSM::ABLBuffer::~ABLBuffer(AUSM::ABLBuffer *this)
{
  v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
  v4 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v4;
    operator delete(v4);
  }
}

void std::__shared_ptr_emplace<IR::IRDataAttributes>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<IR::IRDataAttributes>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14AD2A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

void std::__shared_ptr_emplace<IR::IRDataAttributes>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14AD2A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

IR::FixedIntegerDelay *IR::FixedIntegerDelay::FixedIntegerDelay(IR::FixedIntegerDelay *this, const IR::FixedIntegerDelay *a2)
{
  *(_DWORD *)this = *(_DWORD *)a2;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)this + 1, *((const void **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)this + 4, *((const void **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
  return this;
}

void sub_1BB3C67F0(_Unwind_Exception *exception_object)
{
  v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<IR::FixedIntegerDelay>>(unint64_t a1)
{
  if (a1 >= 0x492492492492493) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(56 * a1);
}

uint64_t *std::vector<IR::FixedIntegerDelay>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      *(_DWORD *)(v6 - 56) = *(_DWORD *)(v2 + v5 - 56);
      *(void *)(v6 - 40) = 0;
      *(void *)(v6 - 32) = 0;
      *(void *)(v6 - 48) = 0;
      *(_OWORD *)(v6 - 48) = *(_OWORD *)(v2 + v5 - 48);
      *(void *)(v6 - 32) = *(void *)(v2 + v5 - 32);
      *(void *)(v7 - 48) = 0;
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 32) = 0;
      *(void *)(v6 - 24) = 0;
      *(void *)(v6 - 16) = 0;
      *(void *)(v6 - 8) = 0;
      *(_OWORD *)(v6 - 24) = *(_OWORD *)(v2 + v5 - 24);
      *(void *)(v6 - 8) = *(void *)(v2 + v5 - 8);
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      v5 -= 56;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v8 = *result;
  *result = v4;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<IR::FixedIntegerDelay>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 56;
    std::__destroy_at[abi:ne180100]<IR::FixedIntegerDelay,0>((void *)(i - 56));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::lock[abi:ne180100]<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>(uint64_t a1, uint64_t a2)
{
  while (1)
  {
    uint64_t v5 = a1;
    char v6 = 1;
    caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock(a1);
    if (caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::try_lock(a2)) {
      break;
    }
    std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v5);
    sched_yield();
    uint64_t v5 = a2;
    char v6 = 1;
    caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock(a2);
    if (caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::try_lock(a1)) {
      break;
    }
    std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v5);
    sched_yield();
  }
  uint64_t v5 = 0;
  char v6 = 0;
  return std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v5);
}

void sub_1BB3C69F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t IR::IRProcessor::IRProcessor(uint64_t a1)
{
  IR::getPresetDataAttributes();
  IR::DataLoaderSource::DataLoaderSource((IR::DataLoaderSource *)&v7, (const IR::IRDataAttributes *)v3);
  IR::IRProcessor::IRProcessor(a1, (uint64_t)&v7, 1);
  uint64_t v7 = &unk_1F14BD940;
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  uint64_t v7 = &unk_1F14BEDB0;
  if (cf) {
    CFRelease(cf);
  }
  if (v10) {
    CFRelease(v10);
  }
  if (v9) {
    CFRelease(v9);
  }
  if (v8) {
    CFRelease(v8);
  }
  if (v6) {
    CFRelease(v6);
  }
  if (v5) {
    CFRelease(v5);
  }
  if (v4) {
    CFRelease(v4);
  }
  if (v3[0]) {
    CFRelease(v3[0]);
  }
  return a1;
}

void sub_1BB3C6B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

uint64_t *std::scoped_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~scoped_lock[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = a1[1];
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(*a1);
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(v2);
  return a1;
}

void FeedbackDelayNetwork<float>::SetDelayTime(uint64_t a1, unsigned int a2, float a3, float a4, double a5)
{
  long double v10 = pow((float)(a4 / a3), 0.0666666667);
  double v11 = a3;
  LODWORD(v12) = vcvtmd_u64_f64(a5 * v11 + 0.5);
  FeedbackDelayNetwork<float>::DelayLine::SetDelaySamples(a1 + 112, v12, a5);
  LODWORD(v13) = vcvtmd_u64_f64(a5 * a4 + 0.5);
  FeedbackDelayNetwork<float>::DelayLine::SetDelaySamples(a1 + 1192, v13, a5);
  srandom(a2);
  for (uint64_t i = 0; i != 1008; i += 72)
  {
    double v11 = v10 * v11;
    uint64_t v15 = random();
    float v16 = v11 * pow(v10, ((double)v15 / 2147483650.0 + -0.5) * 0.8);
    LODWORD(v17) = vcvtmd_u64_f64(a5 * v16 + 0.5);
    FeedbackDelayNetwork<float>::DelayLine::SetDelaySamples(a1 + 184 + i, v17, a5);
  }
  for (uint64_t j = 0; j != 1080; j += 72)
  {
    int v19 = *(_DWORD *)(a1 + j + 236);
    if (v19 == *(_DWORD *)(a1 + j + 164))
    {
      uint64_t Prime = NextPrime((v19 + 1));
      FeedbackDelayNetwork<float>::DelayLine::SetDelaySamples(a1 + j + 184, Prime, a5);
    }
  }
}

float FeedbackDelayNetwork<float>::SetDecayTime(uint64_t a1, float a2, float a3)
{
  uint64_t v4 = 0;
  if (a3 > a2) {
    a3 = a2;
  }
  double v5 = a2;
  *(double *)(a1 + 8) = a2;
  *(double *)(a1 + 16) = a3;
  double v6 = 1.0 - (float)(a2 / a3) * (float)(a2 / a3);
  float v7 = 0.0;
  do
  {
    uint64_t v8 = a1 + v4;
    double v9 = *(double *)(a1 + v4 + 168) * -3.0 / v5;
    double v10 = fmax(__exp10(v9), 0.0001);
    double v11 = v6 * (v9 * 0.575646273);
    if (v11 > 0.99) {
      double v11 = 0.99;
    }
    double v12 = v10 * (1.0 - v11);
    double v13 = v12 * 0.25;
    *(float *)&double v12 = v12;
    *(_DWORD *)(v8 + 176) = LODWORD(v12);
    *(float *)&double v12 = v11;
    float v14 = v13;
    *(_DWORD *)(v8 + 136) = LODWORD(v12);
    *(float *)(v8 + 140) = v14;
    float v7 = v7 + v14;
    v4 += 72;
  }
  while (v4 != 1152);
  *(float *)(a1 + 28) = 1.0 / v7;
  float v15 = *(double *)(a1 + 16) / *(double *)(a1 + 8);
  float v16 = (1.0 - v15) / (v15 + 1.0);
  float v17 = 1.0 / (1.0 - v16);
  *(float *)(a1 + 36) = (float)(1.0 / v7) * *(float *)(a1 + 24);
  *(float *)(a1 + 40) = v17;
  float result = -(float)(v16 * v17);
  *(float *)(a1 + 44) = result;
  return result;
}

double FeedbackDelayNetwork<float>::Reset(_OWORD *a1)
{
  for (uint64_t i = 0; i != 1152; i += 72)
  {
    uint64_t v3 = (char *)a1 + i;
    uint64_t v4 = *(unsigned int *)((char *)a1 + i + 148);
    if (v4) {
      bzero(*((void **)v3 + 14), 4 * v4);
    }
    *(void *)(v3 + 156) = *((_DWORD *)v3 + 38) & -*((_DWORD *)v3 + 41);
    *((_DWORD *)v3 + 36) = 0;
  }
  double result = 0.0;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  return result;
}

uint64_t std::scoped_lock<caulk::pooled_semaphore_mutex,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~scoped_lock[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  caulk::pooled_semaphore_mutex::_unlock(*(caulk::pooled_semaphore_mutex **)a1);
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(v2);
  return a1;
}

double FeedbackDelayNetwork<float>::DelayLine::SetDelaySamples(uint64_t a1, uint64_t a2, double a3)
{
  int Prime = NextPrime(a2);
  *(_DWORD *)(a1 + 52) = Prime;
  unint64_t v6 = (1 << -(char)__clz(Prime - 1));
  *(_DWORD *)(a1 + 36) = v6;
  *(_DWORD *)(a1 + 40) = v6 - 1;
  std::vector<float>::resize(a1, v6);
  uint64_t v8 = *(char **)a1;
  double v9 = *(char **)(a1 + 8);
  unint64_t v10 = (uint64_t)&v9[-*(void *)a1] >> 2;
  if (v10 >= (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 2) {
    goto LABEL_11;
  }
  if (v9 == v8)
  {
    float v15 = 0;
    uint64_t v13 = 4 * v10;
    goto LABEL_8;
  }
  double v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(a1 + 16, (uint64_t)&v9[-*(void *)a1] >> 2);
  double v12 = *(char **)a1;
  uint64_t v8 = *(char **)(a1 + 8);
  uint64_t v13 = (uint64_t)&v11[4 * v10];
  float v15 = &v11[4 * v14];
  if (v8 == *(char **)a1)
  {
LABEL_8:
    uint64_t v16 = v13;
    goto LABEL_9;
  }
  uint64_t v16 = v13;
  do
  {
    int v17 = *((_DWORD *)v8 - 1);
    v8 -= 4;
    *(_DWORD *)(v16 - 4) = v17;
    v16 -= 4;
  }
  while (v8 != v12);
  uint64_t v8 = v12;
LABEL_9:
  *(void *)a1 = v16;
  *(void *)(a1 + 8) = v13;
  *(void *)(a1 + 16) = v15;
  if (v8) {
    operator delete(v8);
  }
LABEL_11:
  uint64_t v18 = *(unsigned int *)(a1 + 36);
  if (v18) {
    bzero(*(void **)a1, 4 * v18);
  }
  LODWORD(v7) = *(_DWORD *)(a1 + 52);
  double result = (double)v7 / a3;
  *(double *)(a1 + 56) = result;
  return result;
}

void sub_1BB3C6FEC(void *a1)
{
}

uint64_t caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::try_lock(uint64_t a1)
{
  pthread_t v2 = pthread_self();
  unint64_t v3 = (unint64_t)v2;
  unint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)a1, memory_order_acquire);
  if (v2)
  {
    if (explicit) {
      BOOL v5 = v2 == (pthread_t)explicit;
    }
    else {
      BOOL v5 = 0;
    }
    if (!v5) {
      goto LABEL_9;
    }
LABEL_7:
    ++*(_DWORD *)(a1 + 8);
    return 1;
  }
  if (!explicit) {
    goto LABEL_7;
  }
LABEL_9:
  uint64_t result = caulk::pooled_semaphore_mutex::try_lock((caulk::pooled_semaphore_mutex *)(a1 + 12));
  if (result)
  {
    atomic_store(v3, (unint64_t *)a1);
    uint64_t result = 1;
    *(_DWORD *)(a1 + 8) = 1;
  }
  return result;
}

uint64_t std::__function::__func<AUSpatialMixerV2::PropertyChanged(unsigned int)::$_0,std::allocator<AUSpatialMixerV2::PropertyChanged(unsigned int)::$_0>,void ()(IR::PersonalizedIRData::DataStatus,IR::PersonalizedIRData::DataValidity)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  AUSM::IRManager::updateHRIRAttributes((AUSM::IRManager *)(v1 + 6176));
  pthread_t v2 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v1 + 592);

  return v2(v1, 5687);
}

uint64_t std::__function::__func<AUSpatialMixerV2::PropertyChanged(unsigned int)::$_0,std::allocator<AUSpatialMixerV2::PropertyChanged(unsigned int)::$_0>,void ()(IR::PersonalizedIRData::DataStatus,IR::PersonalizedIRData::DataValidity)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14AD380;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AUSpatialMixerV2::PropertyChanged(unsigned int)::$_0,std::allocator<AUSpatialMixerV2::PropertyChanged(unsigned int)::$_0>,void ()(IR::PersonalizedIRData::DataStatus,IR::PersonalizedIRData::DataValidity)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F14AD380;
  result[1] = v3;
  return result;
}

void std::__function::__func<AUSpatialMixerV2::PropertyChanged(unsigned int)::$_0,std::allocator<AUSpatialMixerV2::PropertyChanged(unsigned int)::$_0>,void ()(IR::PersonalizedIRData::DataStatus,IR::PersonalizedIRData::DataValidity)>::~__func()
{
}

ParametricFilters *AUSpatialMixerV2::ResetReverbFilters(uint64_t a1)
{
  uint64_t v2 = *(ParametricFilters **)(a1 + 8984);
  if (v2) {
    ParametricFilters::reset(v2);
  }
  uint64_t result = *(ParametricFilters **)(a1 + 8992);
  if (result)
  {
    return (ParametricFilters *)ParametricFilters::reset(result);
  }
  return result;
}

uint64_t AUSpatialMixerV2::AlignmentDelay::reset(AUSpatialMixerV2::AlignmentDelay *this)
{
  unint64_t v7 = (char *)this + 60;
  char v8 = 1;
  caulk::pooled_semaphore_mutex::_lock((AUSpatialMixerV2::AlignmentDelay *)((char *)this + 60));
  *((void *)this + 6) = 0;
  atomic_store(0, (unsigned __int8 *)this + 56);
  atomic_store(0, (unsigned __int8 *)this + 57);
  uint64_t v3 = *(void **)this;
  for (uint64_t i = (void *)*((void *)this + 1); i != v3; std::__destroy_at[abi:ne180100]<IR::FixedIntegerDelay,0>(i))
    i -= 7;
  *((void *)this + 1) = v3;
  BOOL v5 = (void *)*((void *)this + 3);
  for (uint64_t j = (void *)*((void *)this + 4); j != v5; std::__destroy_at[abi:ne180100]<IR::FixedIntegerDelay,0>(j))
    j -= 7;
  *((void *)this + 4) = v5;
  return std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v7);
}

uint64_t AUSpatialMixerV2::AcceptAnyChannelLayoutBeforeInitialization(AUSpatialMixerV2 *this)
{
  return 0;
}

uint64_t AUSpatialMixerV2::PropertyObserverIsInitialized(AUSpatialMixerV2 *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)this + 8977);
  return v1 & 1;
}

BOOL AUSpatialMixerV2::ValidOutputFormat(uint64_t a1, _DWORD *a2)
{
  if (a2[2] != 1819304813 || a2[5] != 1) {
    return 0;
  }
  int v3 = a2[4];
  if (v3 != a2[6]) {
    return 0;
  }
  BOOL result = 0;
  unsigned int v5 = a2[3];
  int v6 = (v5 >> 5) & 1;
  unsigned int v7 = a2[8];
  if (v7 == 16) {
    int v6 = 1;
  }
  if ((v5 & 2) == 0 && v6)
  {
    BOOL v8 = v7 == 32;
    if ((v5 & 1) == 0)
    {
      if (v7 == 32)
      {
LABEL_16:
        if ((v5 & 0x20) != 0) {
          int v9 = 1;
        }
        else {
          int v9 = a2[7];
        }
        return v3 == v9 * (v7 >> 3);
      }
      BOOL v8 = v7 == 16;
    }
    if (!v8) {
      return 0;
    }
    goto LABEL_16;
  }
  return result;
}

BOOL AUSpatialMixerV2::ValidInputFormat(uint64_t a1, _DWORD *a2)
{
  int v2 = a2[2];
  if (v2 != 1885564203 && v2 != 1819304813) {
    return 0;
  }
  if (a2[5] != 1) {
    return 0;
  }
  int v4 = a2[4];
  if (v4 != a2[6]) {
    return 0;
  }
  int v5 = a2[3];
  if ((v5 & 2) != 0) {
    return 0;
  }
  unsigned int v6 = a2[8];
  if (v5)
  {
    if (v6 == 32) {
      goto LABEL_12;
    }
    return 0;
  }
  if (v6 != 16 && v6 != 8) {
    return 0;
  }
LABEL_12:
  if ((v5 & 0x20) != 0) {
    int v7 = 1;
  }
  else {
    int v7 = a2[7];
  }
  return v4 == (v6 >> 3) * v7;
}

uint64_t AUSpatialMixerV2::SetAudioChannelLayout(AUSpatialMixerV2 *this, int a2, unsigned int a3, AudioChannelLayout *a4)
{
  v41[2] = *MEMORY[0x1E4F143B8];
  if (a2 != 1)
  {
    if (a2 != 2)
    {
      if (getAUSMV2Log(void)::onceToken != -1) {
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
      }
      v27 = (id)getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        v28 = (void *)((char *)this + 3368);
        if (*((char *)this + 3391) < 0) {
          v28 = (void *)*v28;
        }
        *(_DWORD *)buf = 136315650;
        v37 = v28;
        __int16 v38 = 2080;
        v39 = "SetAudioChannelLayout";
        __int16 v40 = 1024;
        LODWORD(v41[0]) = a2;
        _os_log_error_impl(&dword_1BB0CE000, v27, OS_LOG_TYPE_ERROR, "[%s|%s] invalid scope %u", buf, 0x1Cu);
      }

      ausdk::Throw((ausdk *)0xFFFFD58ELL);
    }
    if (a3)
    {
      if (getAUSMV2Log(void)::onceToken != -1) {
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
      }
      v29 = (id)getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        v30 = (void *)((char *)this + 3368);
        if (*((char *)this + 3391) < 0) {
          v30 = (void *)*v30;
        }
        *(_DWORD *)buf = 136315650;
        v37 = v30;
        __int16 v38 = 2080;
        v39 = "SetAudioChannelLayout";
        __int16 v40 = 1024;
        LODWORD(v41[0]) = a3;
        _os_log_error_impl(&dword_1BB0CE000, v29, OS_LOG_TYPE_ERROR, "[%s|%s] [OutputElement] Invalid element %u", buf, 0x1Cu);
      }

      ausdk::Throw((ausdk *)0xFFFFD583);
    }
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    BOOL v8 = (id)getAUSMV2Log(void)::gLog;
    int v9 = v8;
    if (a4)
    {
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v10 = (void *)((char *)this + 3368);
        if (*((char *)this + 3391) < 0) {
          unint64_t v10 = (void *)*v10;
        }
        PrintAudioChannelLayout(&__p, (int *)a4);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)buf = 136315650;
        v37 = v10;
        __int16 v38 = 2080;
        v39 = "SetAudioChannelLayout";
        __int16 v40 = 2080;
        v41[0] = p_p;
        _os_log_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_DEFAULT, "[%s|%s] [OutputElement] Setting audio channel layout %s", buf, 0x20u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }

      AudioChannelLayoutTag mChannelLayoutTag = a4->mChannelLayoutTag;
      BOOL v13 = (a4->mChannelLayoutTag & 0xFFFEFFFF) == 0;
      Element = (AUSpatialMixerV2OutputElement *)ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 128), 0);
      if (v13) {
        uint64_t v15 = AUSpatialMixerV2OutputElement::SetFullLayout(Element, a4, 0);
      }
      else {
        uint64_t v15 = AUSpatialMixerV2OutputElement::SetFullLayoutFromTag(Element, mChannelLayoutTag, 0);
      }
      uint64_t v22 = v15;
      if (!v15) {
        atomic_store(1u, (unsigned __int8 *)this + 3010);
      }
      return v22;
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v25 = (void *)((char *)this + 3368);
      if (*((char *)this + 3391) < 0) {
        v25 = (void *)*v25;
      }
      *(_DWORD *)buf = 136315394;
      v37 = v25;
      __int16 v38 = 2080;
      v39 = "SetAudioChannelLayout";
      _os_log_error_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_ERROR, "[%s|%s] [OutputElement] Error setting audio channel layout: null layout pointer", buf, 0x16u);
    }

    return 4294956445;
  }
  v33 = (char *)this + 3120;
  char v34 = 1;
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)((char *)this + 3120));
  uint64_t v16 = *((void *)this + 15);
  if (v16) {
    LODWORD(v17) = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 24))(v16);
  }
  else {
    uint64_t v17 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
  }
  if (v17 <= a3)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    v31 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      v32 = (void *)((char *)this + 3368);
      if (*((char *)this + 3391) < 0) {
        v32 = (void *)*v32;
      }
      *(_DWORD *)buf = 136315650;
      v37 = v32;
      __int16 v38 = 2080;
      v39 = "SetAudioChannelLayout";
      __int16 v40 = 1024;
      LODWORD(v41[0]) = a3;
      _os_log_error_impl(&dword_1BB0CE000, v31, OS_LOG_TYPE_ERROR, "[%s|%s] [InputElement #%u] Invalid element", buf, 0x1Cu);
    }

    ausdk::Throw((ausdk *)0xFFFFD583);
  }
  if (!a4)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    v23 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      v26 = (void *)((char *)this + 3368);
      if (*((char *)this + 3391) < 0) {
        v26 = (void *)*v26;
      }
      *(_DWORD *)buf = 136315650;
      v37 = v26;
      __int16 v38 = 2080;
      v39 = "SetAudioChannelLayout";
      __int16 v40 = 1024;
      LODWORD(v41[0]) = a3;
      _os_log_error_impl(&dword_1BB0CE000, v23, OS_LOG_TYPE_ERROR, "[%s|%s] [InputElement #%u] Error setting audio channel layout: null layout pointer", buf, 0x1Cu);
    }

    std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v33);
    return 4294956445;
  }
  if (getAUSMV2Log(void)::onceToken != -1) {
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
  }
  uint64_t v18 = (id)getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    int v19 = (void *)((char *)this + 3368);
    if (*((char *)this + 3391) < 0) {
      int v19 = (void *)*v19;
    }
    PrintAudioChannelLayout(&__p, (int *)a4);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v20 = &__p;
    }
    else {
      v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 136315906;
    v37 = v19;
    __int16 v38 = 2080;
    v39 = "SetAudioChannelLayout";
    __int16 v40 = 1024;
    LODWORD(v41[0]) = a3;
    WORD2(v41[0]) = 2080;
    *(void *)((char *)v41 + 6) = v20;
    _os_log_impl(&dword_1BB0CE000, v18, OS_LOG_TYPE_DEFAULT, "[%s|%s] [InputElement #%u] Setting audio channel layout %s", buf, 0x26u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }

  uint64_t v21 = ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 80), a3);
  uint64_t v22 = (*(uint64_t (**)(uint64_t, AudioChannelLayout *))(*(void *)v21 + 88))(v21, a4);
  if (!v22) {
    atomic_store(1u, (unsigned __int8 *)this + 3010);
  }
  std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v33);
  return v22;
}

void sub_1BB3C7A08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t AUSpatialMixerV2::GetAudioChannelLayout(AUSpatialMixerV2 *this, unsigned int a2, unsigned int a3, AudioChannelLayout *a4, BOOL *a5)
{
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a2);
  int v7 = *(uint64_t (**)(void))(*(void *)ausdk::AUScope::GetIOElement(Scope, a3) + 96);

  return v7();
}

void AUSpatialMixerV2::CreateElement(AUSpatialMixerV2 *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  if (a2 != 2)
  {
    if (a2 == 1) {
      operator new();
    }
    ausdk::AUBase::CreateElement(this, a2);
  }
  operator new();
}

void sub_1BB3C90B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, CFTypeRef *a12, void *a13, void **a14, void **a15, uint64_t a16, std::mutex *a17, uint64_t *a18, void *a19, CFTypeRef *a20,uint64_t a21,uint64_t a22,void *a23,AUSM::MatrixMix **a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  MEMORY[0x1C185D370](v46, 0x10B2C408A0CD324);
  if (*(char *)(v43 + 1631) < 0) {
    operator delete(*v42);
  }
  v48 = *v45;
  if (*v45)
  {
    *(void *)(v43 + 1560) = v48;
    operator delete(v48);
  }
  v49 = *v44;
  if (*v44)
  {
    *(void *)(v43 + 1536) = v49;
    operator delete(v49);
  }
  uint64_t v50 = *(void *)(v43 + 1328);
  *(void *)(v43 + 1328) = 0;
  if (v50) {
    std::default_delete<std::vector<AUSM::ExclusionZone>>::operator()[abi:ne180100](v50);
  }
  uint64_t v51 = *(void *)(v43 + 1320);
  *(void *)(v43 + 1320) = 0;
  if (v51) {
    std::default_delete<std::vector<AUSM::ExclusionZone>>::operator()[abi:ne180100](v51);
  }
  std::string __p = (void *)(v43 + 1264);
  std::vector<std::unique_ptr<IR::FixedIntegerDelay>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string __p = a19;
  std::vector<std::unique_ptr<IR::FixedIntegerDelay>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v52 = *(void **)(v43 + 1184);
  if (v52)
  {
    *(void *)(v43 + 1192) = v52;
    operator delete(v52);
  }
  std::unique_ptr<ScottyLite>::reset[abi:ne180100](a18, 0);
  v53 = *a11;
  if (*a11)
  {
    *(void *)(v43 + 1160) = v53;
    operator delete(v53);
  }
  v54 = *(const void **)(v43 + 1080);
  if (v54) {
    CFRelease(v54);
  }
  if (*a12) {
    CFRelease(*a12);
  }
  std::unique_ptr<ParametricProcessor>::reset[abi:ne180100]((ParametricProcessor **)(v43 + 920), 0);
  std::unique_ptr<AUSM::MatrixMix>::reset[abi:ne180100](a24, 0);
  *a13 = a16;
  std::mutex::~mutex(a17);
  if (*a20) {
    CFRelease(*a20);
  }
  *(void *)(v43 + 672) = &unk_1F14BE008;
  std::__tree<std::__value_type<unsigned int,std::unique_ptr<AUSM::PropertyDescriptor>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::unique_ptr<AUSM::PropertyDescriptor>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::unique_ptr<AUSM::PropertyDescriptor>>>>::destroy(*(void **)(v43 + 720));
  if (*(char *)(v43 + 703) < 0) {
    operator delete(*(void **)(v43 + 680));
  }
  v55 = *a14;
  if (*a14)
  {
    *(void *)(v43 + 328) = v55;
    operator delete(v55);
  }
  uint64_t v56 = *(void *)(v43 + 304);
  *(void *)(v43 + 304) = 0;
  if (v56) {
    std::default_delete<std::vector<float>>::operator()[abi:ne180100](v56);
  }
  uint64_t v57 = *(void *)(v43 + 296);
  *(void *)(v43 + 296) = 0;
  if (v57) {
    std::default_delete<std::vector<float>>::operator()[abi:ne180100](v57);
  }
  uint64_t v58 = *(void *)(v43 + 288);
  *(void *)(v43 + 288) = 0;
  if (v58) {
    std::default_delete<HOA::RotationMatrix>::operator()[abi:ne180100](v58);
  }
  v59 = *(std::__shared_weak_count **)(v43 + 280);
  if (v59) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v59);
  }
  std::string __p = (void *)(v43 + 248);
  std::vector<std::unique_ptr<AUSpatialMixerV2ChannelProcessor>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v60 = *a15;
  if (*a15)
  {
    *(void *)(v43 + 232) = v60;
    operator delete(v60);
  }
  *(void *)uint64_t v43 = &unk_1F14C81D8;
  if (*(void *)(v43 + 152))
  {
    (*((void (**)(void))ausdk::BufferAllocator::instance(void)::global + 3))();
    *(void *)(v43 + 152) = 0;
  }
  *(void *)(v43 + 160) = 0;
  *(_DWORD *)(v43 + 144) = 0;
  v61 = *(void **)(v43 + 120);
  if (v61)
  {
    *(void *)(v43 + 128) = v61;
    operator delete(v61);
  }
  ausdk::AUElement::~AUElement((const void **)v43);
  MEMORY[0x1C185D370](v43, 0x10F3C406249A4F8);
  *a23 = 0;
  _Unwind_Resume(a1);
}

uint64_t AUSpatialMixerV2::ChangeStreamFormat(AUSpatialMixerV2 *this, int a2, uint64_t a3, const AudioStreamBasicDescription *a4, const AudioStreamBasicDescription *a5)
{
  if (a2 == 2)
  {
    BOOL v13 = (char *)this + 3088;
    caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 3088);
    unsigned __int8 v14 = atomic_load((unsigned __int8 *)this + 8977);
    if (v14)
    {
      (*(void (**)(AUSpatialMixerV2 *))(*(void *)this + 64))(this);
      ausdk::AUBase::ChangeStreamFormat(this, 2, a3, a4, a5);
      uint64_t v12 = (*(uint64_t (**)(AUSpatialMixerV2 *))(*(void *)this + 56))(this);
    }
    else
    {
      ausdk::AUBase::ChangeStreamFormat(this, 2, a3, a4, a5);
      uint64_t v12 = 0;
    }
    caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock((uint64_t)v13);
  }
  else
  {
    if (a2 == 1)
    {
      uint64_t v18 = (char *)this + 3120;
      char v19 = 1;
      std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)((char *)this + 3120));
      BOOL CanUsePersonalizedHRTF = AUSpatialMixerV2::CanUsePersonalizedHRTF(this);
      ausdk::AUBase::ChangeStreamFormat(this, 1, a3, a4, a5);
      if (a5->mChannelsPerFrame != a4->mChannelsPerFrame)
      {
        unsigned __int8 v10 = atomic_load((unsigned __int8 *)this + 8977);
        if (v10)
        {
          int RequiredSharedInputBufferSize = AUSpatialMixerV2::GetRequiredSharedInputBufferSize(this);
          uint64_t v16 = (char *)this + 3104;
          char v17 = 1;
          caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 3104);
          if (RequiredSharedInputBufferSize != (uint64_t)(*(void *)(*((void *)this + 341) + 232)
                                                        - *(void *)(*((void *)this + 341) + 224)) >> 5)
          {
            std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::unlock((uint64_t)&v16);
            AUSpatialMixerV2::ReconfigureSharedBuffers(this, 0, 1);
          }
          std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v16);
        }
      }
      if (CanUsePersonalizedHRTF != AUSpatialMixerV2::CanUsePersonalizedHRTF(this)) {
        (*(void (**)(AUSpatialMixerV2 *, uint64_t))(*(void *)this + 592))(this, 3113);
      }
      std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v18);
    }
    return 0;
  }
  return v12;
}

void sub_1BB3C991C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::unlock(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t result = caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(*(void *)a1);
    *(unsigned char *)(a1 + 8) = 0;
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::unlock: not locked");
    return AUSpatialMixerV2::ValidFormat(v3, v4, v5, v6);
  }
  return result;
}

uint64_t AUSpatialMixerV2::ValidFormat(AUSpatialMixerV2 *this, int a2, unsigned int a3, const AudioStreamBasicDescription *a4)
{
  UInt32 mChannelsPerFrame = a4->mChannelsPerFrame;
  if (a2 == 1)
  {
    if (mChannelsPerFrame && mChannelsPerFrame <= *((_DWORD *)this + 659))
    {
      long long v5 = *(_OWORD *)&a4->mBytesPerPacket;
      long long v10 = *(_OWORD *)&a4->mSampleRate;
      long long v11 = v5;
      uint64_t v12 = *(void *)&a4->mBitsPerChannel;
      return (*(uint64_t (**)(AUSpatialMixerV2 *, long long *))(*(void *)this + 576))(this, &v10);
    }
    return 0;
  }
  uint64_t v7 = 0;
  if ((a2 & 0xFFFFFFFD) == 0 && mChannelsPerFrame >= 2)
  {
    if (mChannelsPerFrame <= *((_DWORD *)this + 660))
    {
      long long v8 = *(_OWORD *)&a4->mBytesPerPacket;
      long long v10 = *(_OWORD *)&a4->mSampleRate;
      long long v11 = v8;
      uint64_t v12 = *(void *)&a4->mBitsPerChannel;
      return (*(uint64_t (**)(AUSpatialMixerV2 *, long long *, void))(*(void *)this + 584))(this, &v10, 0);
    }
    return 0;
  }
  return v7;
}

uint64_t AUSpatialMixerV2::SupportedNumChannels(AUSpatialMixerV2 *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)*((void *)this + 331);
  }
  return (*((void *)this + 332) - *((void *)this + 331)) >> 2;
}

uint64_t AUSpatialMixerV2::StreamFormatWritable(AUSpatialMixerV2 *this)
{
  return 1;
}

uint64_t AUSpatialMixerV2::SupportsTail(AUSpatialMixerV2 *this)
{
  return 0;
}

double AUSpatialMixerV2::GetLatency(AUSpatialMixerV2 *this)
{
  double v2 = *(double *)(ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 128), 0) + 80);
  double result = 0.0;
  if (v2 > 0.0)
  {
    unsigned int v4 = atomic_load((unsigned int *)this + 3024);
    int v5 = *((_DWORD *)this + 3038);
    if (v5 < 0) {
      int v5 = -v5;
    }
    return (double)(v5 + v4) / v2;
  }
  return result;
}

uint64_t AUSpatialMixerV2::NewFactoryPresetSet(AUSpatialMixerV2 *this, const AUPreset *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (getAUSMV2Log(void)::onceToken != -1) {
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
  }
  unsigned int v4 = (id)getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = (void *)((char *)this + 3368);
    if (*((char *)this + 3391) < 0) {
      int v5 = (void *)*v5;
    }
    SInt32 presetNumber = a2->presetNumber;
    *(_DWORD *)buf = 136315650;
    unsigned __int8 v14 = v5;
    __int16 v15 = 2080;
    *(void *)uint64_t v16 = "NewFactoryPresetSet";
    *(_WORD *)&v16[8] = 1024;
    int v17 = presetNumber;
    _os_log_impl(&dword_1BB0CE000, v4, OS_LOG_TYPE_DEFAULT, "[%s|%s] setting factory preset #%u", buf, 0x1Cu);
  }

  int v12 = 0;
  uint64_t v7 = (*(uint64_t (**)(AUSpatialMixerV2 *, uint64_t, void, void, int *))(*(void *)this + 88))(this, 3116, 0, 0, &v12);
  if (v7)
  {
    int v12 = 0;
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    long long v8 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      long long v11 = (void *)((char *)this + 3368);
      if (*((char *)this + 3391) < 0) {
        long long v11 = (void *)*v11;
      }
      *(_DWORD *)buf = 136315650;
      unsigned __int8 v14 = v11;
      __int16 v15 = 2080;
      *(void *)uint64_t v16 = "NewFactoryPresetSet";
      *(_WORD *)&v16[8] = 1024;
      int v17 = v7;
      _os_log_error_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_ERROR, "[%s|%s] Could not get personalized HRTF status. Error: %u. Assuming generic HRTF is being used.", buf, 0x1Cu);
    }
  }
  AUSM::FactoryPreset::load((AUSM::FactoryPreset *)buf, (int *)this + 2232, a2->presetNumber, v12 != 0);
  int v9 = *(const void **)&v16[2];
  if (*(void *)&v16[2])
  {
    uint64_t v7 = (*(uint64_t (**)(AUSpatialMixerV2 *, void))(*(void *)this + 288))(this, *(void *)&v16[2]);
    ausdk::AUBase::SetAFactoryPresetAsCurrent((char *)this, (const AUPreset *)buf);
    CFRelease(v9);
  }
  return v7;
}

void sub_1BB3C9DA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUSpatialMixerV2::GetPresets(AUSpatialMixerV2 *this, const __CFArray **a2)
{
  if (a2)
  {
    IR::IRDataLoader::instance(this);
    int v3 = IR::IRDataLoader::fileExists();
    if (v3) {
      CFIndex v4 = 3;
    }
    else {
      CFIndex v4 = 2;
    }
    Mutable = CFArrayCreateMutable(0, v4, 0);
    unsigned int v6 = Mutable;
    if (v3) {
      CFArrayAppendValue(Mutable, AUSM::kFactoryPresets);
    }
    for (uint64_t i = 0; i != 2; CFArrayAppendValue(v6, &AUSM::kFactoryPresets[i]))
      ++i;
    *a2 = v6;
  }
  return 0;
}

uint64_t AUSpatialMixerV2::RestoreState(AUSpatialMixerV2 *this, const void *a2)
{
  v153[3] = *MEMORY[0x1E4F143B8];
  v135 = (unsigned __int8 *)this + 5968;
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)this + 8979);
  if (getAUSMV2Log(void)::onceToken != -1) {
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
  }
  int v5 = (id)getAUSMV2Log(void)::gLog;
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (!v6) {
      goto LABEL_13;
    }
    int v9 = (void *)((char *)this + 3368);
    if (*((char *)this + 3391) < 0) {
      int v9 = (void *)*v9;
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v9;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"RestoreState";
    long long v8 = "[%s|%s] repeated call, suppressing logs for properties that do not change";
  }
  else
  {
    if (!v6) {
      goto LABEL_13;
    }
    uint64_t v7 = (void *)((char *)this + 3368);
    if (*((char *)this + 3391) < 0) {
      uint64_t v7 = (void *)*v7;
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v7;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"RestoreState";
    long long v8 = "[%s|%s] started";
  }
  _os_log_impl(&dword_1BB0CE000, v5, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&buf, 0x16u);
LABEL_13:

  uint64_t v10 = *(void *)(*((void *)this + 750) + 544);
  if (v10
    && ((unsigned __int8 v11 = atomic_load((unsigned __int8 *)(v10 + 97)), (v11 & 1) != 0)
     || (unsigned __int8 v12 = atomic_load((unsigned __int8 *)(*(void *)(*((void *)this + 750) + 544) + 96)), (v12 & 1) != 0))
    || (unsigned int v137 = ausdk::AUBase::RestoreState((OpaqueAudioComponentInstance **)this, a2)) == 0)
  {
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)this + 3120;
    buf.__r_.__value_.__s.__data_[8] = 1;
    std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)((char *)this + 3120));
    for (unsigned int i = 0; ; ++i)
    {
      uint64_t v14 = *((void *)this + 15);
      if (v14) {
        LODWORD(v15) = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 24))(v14);
      }
      else {
        uint64_t v15 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
      }
      if (i >= v15) {
        break;
      }
      uint64_t Element = ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 80), i);
      atomic_store(1u, (unsigned __int8 *)(Element + 1577));
      atomic_store(1u, (unsigned __int8 *)(Element + 624));
    }
    int v17 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 128), 0);
    float Parameter = ausdk::AUElement::GetParameter(v17, 3u);
    atomic_store(COERCE_UNSIGNED_INT(__exp10f(Parameter * 0.05)), (unsigned int *)this + 2092);
    atomic_store(1u, v135 + 2924);
    std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&buf);
    unsigned int v137 = 0;
  }
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)a2, (const void *)AUSM::kFactoryPresetGlobalPropertiesKey);
  ValueAtIndex = CFArrayGetValueAtIndex(Value, 0);
  if (ValueAtIndex)
  {
    int v20 = (*(uint64_t (**)(AUSpatialMixerV2 *, uint64_t, void, void, const void **, uint64_t))(*(void *)this + 96))(this, 5000, 0, 0, &ValueAtIndex, 8);
    int v21 = v137;
    if (v20) {
      int v21 = v20;
    }
    unsigned int v137 = v21;
  }
  CFArrayRef v22 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)a2, @"OutputProperties");
  v145 = CFArrayGetValueAtIndex(v22, 0);
  if (v145)
  {
    int v23 = (*(uint64_t (**)(AUSpatialMixerV2 *, uint64_t, uint64_t, void, const void **, uint64_t))(*(void *)this + 96))(this, 5000, 2, 0, &v145, 8);
    int v24 = v137;
    if (v23) {
      int v24 = v23;
    }
    unsigned int v137 = v24;
  }
  v25 = CFDictionaryGetValue((CFDictionaryRef)a2, @"InputProperties");
  CFTypeRef cf = v25;
  v26 = v25;
  if (!v25) {
    goto LABEL_41;
  }
  CFRetain(v25);
  CFTypeID v27 = CFGetTypeID(v26);
  if (v27 != CFArrayGetTypeID())
  {
    CFRelease(cf);
LABEL_41:
    CFTypeRef cf = 0;
    goto LABEL_42;
  }
  if (CFArrayGetCount((CFArrayRef)cf))
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    v28 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
    {
      v118 = (void *)((char *)this + 3368);
      if (*((char *)this + 3391) < 0) {
        v118 = (void *)*v118;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v118;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"RestoreState";
      _os_log_debug_impl(&dword_1BB0CE000, v28, OS_LOG_TYPE_DEBUG, "[%s|%s] Setting input properties", (uint8_t *)&buf, 0x16u);
    }

    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)this + 3120;
    buf.__r_.__value_.__s.__data_[8] = 1;
    std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)((char *)this + 3120));
    uint64_t v29 = *((void *)this + 15);
    if (v29) {
      LODWORD(v30) = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 24))(v29);
    }
    else {
      uint64_t v30 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
    }
    std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&buf);
    CFIndex Count = CFArrayGetCount((CFArrayRef)cf);
    CFIndex v108 = CFArrayGetCount((CFArrayRef)cf);
    if (Count)
    {
      CFIndex v109 = v108;
      for (unint64_t j = 0; j != Count; ++j)
      {
        if (v109 == j) {
          break;
        }
        applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((const __CFArray *)cf, j, (applesauce::CF::DictionaryRef *)&__p);
        if (!__p)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
        }
        CFNumberRef v111 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[14]>((const __CFDictionary *)__p, "ElementNumber");
        if (v111)
        {
          uint64_t v112 = applesauce::CF::convert_as<unsigned int,0>(v111);
          if ((v112 & 0xFF00000000) != 0)
          {
            int v113 = v112;
            if (v30 <= v112)
            {
              if (getAUSMV2Log(void)::onceToken != -1) {
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
              }
              v116 = (id)getAUSMV2Log(void)::gLog;
              if (os_log_type_enabled(v116, OS_LOG_TYPE_DEFAULT))
              {
                v117 = (char *)this + 3368;
                if (*((char *)this + 3391) < 0) {
                  v117 = (char *)*((void *)this + 421);
                }
                LODWORD(buf.__r_.__value_.__l.__data_) = 136315906;
                *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v117;
                WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
                *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"RestoreState";
                HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
                LODWORD(v153[0]) = v30;
                WORD2(v153[0]) = 1024;
                *(_DWORD *)((char *)v153 + 6) = v113;
                _os_log_impl(&dword_1BB0CE000, v116, OS_LOG_TYPE_DEFAULT, "[%s|%s] bus count == %d, dropping properties for InputElement %d", (uint8_t *)&buf, 0x22u);
              }
            }
            else
            {
              int v114 = (*(uint64_t (**)(AUSpatialMixerV2 *, uint64_t, uint64_t, uint64_t, void **, uint64_t))(*(void *)this + 96))(this, 5000, 1, v112, &__p, 8);
              int v115 = v137;
              if (v114) {
                int v115 = v114;
              }
              unsigned int v137 = v115;
            }
          }
        }
        if (__p) {
          CFRelease(__p);
        }
      }
    }
  }
LABEL_42:
  CFArrayRef v31 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)a2, (const void *)AUSM::kFactoryPresetChannelOverridesKey);
  CFArrayRef v144 = v31;
  if (v31 && CFArrayGetCount(v31) >= 1) {
    (*(void (**)(AUSpatialMixerV2 *, uint64_t, void, void, const __CFArray **, uint64_t))(*(void *)this + 96))(this, 3268, 0, 0, &v144, 8);
  }
  if (!*v135)
  {
    v32 = CFDictionaryGetValue((CFDictionaryRef)a2, @"SoundStages");
    v33 = v32;
    if (v32)
    {
      CFRetain(v32);
      CFTypeID v34 = CFGetTypeID(v33);
      if (v34 != CFDictionaryGetTypeID())
      {
        CFRelease(v33);
        v33 = 0;
      }
      v35 = operator new(0xCuLL);
      *(void *)v35 = 0x200000003;
      v35[2] = 1;
      v36 = (const void **)operator new(0x18uLL);
      *(_OWORD *)v36 = xmmword_1E623D288;
      v36[2] = @"AUSMSoundStageSmallParameters";
      LOWORD(buf.__r_.__value_.__l.__data_) = 256;
      buf.__r_.__value_.__s.__data_[2] = 1;
      v37 = (char *)operator new(8uLL);
      __int16 v38 = v37;
      int v39 = 0;
      uint64_t v40 = 0;
      *(void *)v37 = 0;
      v41 = (uint64_t *)v37;
      do
      {
        uint64_t v42 = 1 << v39;
        if (buf.__r_.__value_.__s.__data_[v40]) {
          uint64_t v43 = *v41 | v42;
        }
        else {
          uint64_t v43 = *v41 & ~v42;
        }
        uint64_t *v41 = v43;
        ++v40;
        v41 += v39 == 63;
        if (v39 == 63) {
          int v39 = 0;
        }
        else {
          ++v39;
        }
      }
      while (v40 != 3);
      v142 = v36;
      v139 = v35;
      CFDictionaryRef theDict = (const __CFDictionary *)v33;
      unint64_t v44 = 0;
      char v134 = 0;
      v133 = (char **)((char *)this + 8008);
      v143 = v37;
      while (1)
      {
        if (!theDict)
        {
          v129 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v129, "Could not construct");
        }
        v45 = applesauce::CF::details::at_key<__CFString const* const&>(theDict, v142[v44]);
        if (!v45) {
          goto LABEL_141;
        }
        uint64_t v46 = v45;
        int v47 = v139[v44];
        if ((*(void *)&v38[(v44 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v44)) {
          float v48 = 1.0;
        }
        else {
          float v48 = 0.0;
        }
        if (v47 == 1) {
          float v49 = 0.0;
        }
        else {
          float v49 = 1.0;
        }
        *(float *)v151 = v48;
        *(float *)&v151[1] = v49;
        *(float *)&v151[2] = v49;
        if (v47 == 1) {
          float v50 = 1.0;
        }
        else {
          float v50 = 0.0;
        }
        v151[3] = 1065353216;
        *(float *)&v151[4] = v49;
        CFTypeID v51 = CFGetTypeID(v45);
        if (v51 == CFDictionaryGetTypeID())
        {
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          v52 = getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
          {
            v95 = (char *)this + 8008;
            if ((char)v135[2063] < 0) {
              v95 = *v133;
            }
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v95;
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"setSoundStageDictionary";
            HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
            LODWORD(v153[0]) = v44;
            _os_log_debug_impl(&dword_1BB0CE000, v52, OS_LOG_TYPE_DEBUG, "[%s|%s] Parsing SoundStage preset #%d dictionary", (uint8_t *)&buf, 0x1Cu);
          }
          CFRetain(v46);
          CFTypeID v53 = CFGetTypeID(v46);
          if (v53 != CFDictionaryGetTypeID())
          {
            CFRelease(v46);
            v130 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v130, "Could not construct");
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 1065353216;
          float v136 = applesauce::CF::at_or<float,char const(&)[5]>((const __CFDictionary *)v46, "Gain", (uint64_t)&buf);
          if (applesauce::CF::details::has_key<char const(&)[20]>((const __CFDictionary *)v46, "DistanceCompression")) {
            float v50 = applesauce::CF::details::find_at_key<float,char const(&)[20]>((const __CFDictionary *)v46, "DistanceCompression");
          }
          v54 = CFDictionaryGetValue((CFDictionaryRef)v46, @"WarpingParameters");
          v55 = v54;
          if (v54)
          {
            CFRetain(v54);
            CFTypeID v56 = CFGetTypeID(v55);
            if (v56 != CFArrayGetTypeID())
            {
              CFRelease(v55);
              v55 = 0;
            }
          }
          CFRelease(v46);
          std::string __p = 0;
          v149 = 0;
          unint64_t v150 = 0;
          BOOL v141 = v55 == 0;
          if (!v55) {
            goto LABEL_134;
          }
        }
        else
        {
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          uint64_t v57 = getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
          {
            v96 = (char *)this + 8008;
            if ((char)v135[2063] < 0) {
              v96 = *v133;
            }
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v96;
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"setSoundStageDictionary";
            HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
            LODWORD(v153[0]) = v44;
            _os_log_debug_impl(&dword_1BB0CE000, v57, OS_LOG_TYPE_DEBUG, "[%s|%s] SoundStage preset #%d is not dictionary; treating as array",
              (uint8_t *)&buf,
              0x1Cu);
          }
          CFRetain(v46);
          CFTypeID v58 = CFGetTypeID(v46);
          if (v58 != CFArrayGetTypeID())
          {
            CFRelease(v46);
            v55 = 0;
            std::string __p = 0;
            v149 = 0;
            BOOL v141 = 1;
            unint64_t v150 = 0;
            goto LABEL_134;
          }
          std::string __p = 0;
          v149 = 0;
          unint64_t v150 = 0;
          BOOL v141 = v46 == 0;
          float v136 = 1.0;
          v55 = v46;
        }
        if (CFArrayGetCount((CFArrayRef)v55))
        {
          CFIndex v59 = CFArrayGetCount((CFArrayRef)v55);
          CFIndex v60 = CFArrayGetCount((CFArrayRef)v55);
          if (v59)
          {
            CFIndex v61 = v60;
            for (unint64_t k = 0; k != v59; ++k)
            {
              if (k == v61) {
                break;
              }
              applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((const __CFArray *)v55, k, (applesauce::CF::DictionaryRef *)&buf);
              if (!buf.__r_.__value_.__r.__words[0])
              {
                v122 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v122, "Could not construct");
              }
              CFNumberRef v63 = (const __CFNumber *)applesauce::CF::details::at_key<__CFString const*&>((CFDictionaryRef)buf.__r_.__value_.__l.__data_, (const void *)kPresetKeyChannelLabel);
              if (!v63)
              {
                v128 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v128, "Could not find item");
              }
              int v64 = applesauce::CF::convert_to<unsigned int,0>(v63);
              if (!buf.__r_.__value_.__r.__words[0])
              {
                v123 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v123, "Could not construct");
              }
              float v65 = applesauce::CF::details::find_at_key<float,__CFString const*&>((const __CFDictionary *)buf.__r_.__value_.__l.__data_, (const void *)kPresetKeyAzimuth);
              if (!buf.__r_.__value_.__r.__words[0])
              {
                v125 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v125, "Could not construct");
              }
              float v66 = v65;
              float v67 = applesauce::CF::details::find_at_key<float,__CFString const*&>((const __CFDictionary *)buf.__r_.__value_.__l.__data_, (const void *)kPresetKeyElevation);
              if (!buf.__r_.__value_.__r.__words[0])
              {
                v124 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v124, "Could not construct");
              }
              float v68 = v67;
              float v69 = applesauce::CF::details::find_at_key<float,__CFString const*&>((const __CFDictionary *)buf.__r_.__value_.__l.__data_, (const void *)kPresetKeyDistance);
              if (!buf.__r_.__value_.__r.__words[0])
              {
                v126 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v126, "Could not construct");
              }
              float v70 = v69;
              float v71 = applesauce::CF::details::find_at_key<float,__CFString const*&>((const __CFDictionary *)buf.__r_.__value_.__l.__data_, (const void *)kPresetKeyGain);
              if (!buf.__r_.__value_.__r.__words[0])
              {
                v121 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v121, "Could not construct");
              }
              float v72 = v71;
              CFNumberRef v73 = applesauce::CF::DictionaryRef_proxy::at_as<float,__CFString const*&>((const __CFDictionary *)buf.__r_.__value_.__l.__data_, (const void *)kPresetKeyDRRAdjustment);
              if (((unint64_t)v73 & 0xFF00000000) != 0) {
                float v74 = *(float *)&v73;
              }
              else {
                float v74 = 0.0;
              }
              if (!buf.__r_.__value_.__r.__words[0])
              {
                v127 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v127, "Could not construct");
              }
              CFNumberRef v75 = applesauce::CF::DictionaryRef_proxy::at_as<float,__CFString const*&>((const __CFDictionary *)buf.__r_.__value_.__l.__data_, (const void *)kPresetKeyDelay);
              float v76 = ((unint64_t)v75 & 0xFF00000000) != 0 ? *(float *)&v75 : 0.0;
              v77 = v149;
              if ((unint64_t)v149 >= v150)
              {
                v79 = (char *)__p;
                uint64_t v80 = (v149 - (unsigned char *)__p) >> 5;
                unint64_t v81 = v80 + 1;
                if ((unint64_t)(v80 + 1) >> 59) {
                  std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v82 = v150 - (void)__p;
                if ((uint64_t)(v150 - (void)__p) >> 4 > v81) {
                  unint64_t v81 = v82 >> 4;
                }
                if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFE0) {
                  unint64_t v83 = 0x7FFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v83 = v81;
                }
                if (v83) {
                  unint64_t v83 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(v83);
                }
                else {
                  uint64_t v84 = 0;
                }
                unint64_t v85 = v83 + 32 * v80;
                *(float *)unint64_t v85 = v66;
                *(float *)(v85 + 4) = v68;
                *(float *)(v85 + 8) = v70;
                *(float *)(v85 + 12) = v72;
                *(float *)(v85 + 16) = v74;
                *(float *)(v85 + 20) = v76;
                *(_DWORD *)(v85 + 24) = 1;
                *(_DWORD *)(v85 + 28) = v64;
                if (v77 == v79)
                {
                  v88 = (void *)(v83 + 32 * v80);
                }
                else
                {
                  unint64_t v86 = v83 + 32 * v80;
                  do
                  {
                    long long v87 = *((_OWORD *)v77 - 1);
                    v88 = (void *)(v86 - 32);
                    *(_OWORD *)(v86 - 32) = *((_OWORD *)v77 - 2);
                    *(_OWORD *)(v86 - 16) = v87;
                    v77 -= 32;
                    v86 -= 32;
                  }
                  while (v77 != v79);
                }
                v78 = (char *)(v85 + 32);
                std::string __p = v88;
                v149 = (char *)(v85 + 32);
                unint64_t v150 = v83 + 32 * v84;
                if (v79) {
                  operator delete(v79);
                }
              }
              else
              {
                *(float *)v149 = v66;
                *((float *)v77 + 1) = v68;
                *((float *)v77 + 2) = v70;
                *((float *)v77 + 3) = v72;
                *((float *)v77 + 4) = v74;
                *((float *)v77 + 5) = v76;
                v78 = v77 + 32;
                *((_DWORD *)v77 + 6) = 1;
                *((_DWORD *)v77 + 7) = v64;
              }
              v149 = v78;
              if (buf.__r_.__value_.__r.__words[0]) {
                CFRelease(buf.__r_.__value_.__l.__data_);
              }
              __int16 v38 = v143;
            }
          }
          int v89 = v139[v44];
          v90 = v142[v44];
          if (v90) {
            CFRetain(v142[v44]);
          }
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v147, v90);
          if (!v147)
          {
            v132 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v132, "Could not construct");
          }
          applesauce::CF::convert_to<std::string,0>((const __CFString *)v147, (uint64_t)&buf);
          char v91 = AUSM::SoundStage::setSoundStageParameters((uint64_t)this + 7808, v89, &__p, &buf, (uint64_t)v151, v136, v50);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
          if (v147) {
            CFRelease(v147);
          }
          v134 |= v91;
          goto LABEL_137;
        }
LABEL_134:
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        v92 = getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
        {
          v93 = (char *)this + 8008;
          if ((char)v135[2063] < 0) {
            v93 = *v133;
          }
          v94 = v142[v44];
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v93;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"setSoundStageDictionary";
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 2112;
          v153[0] = v94;
          _os_log_error_impl(&dword_1BB0CE000, v92, OS_LOG_TYPE_ERROR, "[%s|%s] Failed to extract SoundStage preset: %@", (uint8_t *)&buf, 0x20u);
        }
LABEL_137:
        if (__p) {
          operator delete(__p);
        }
        if (!v141) {
          CFRelease(v55);
        }
LABEL_141:
        if (++v44 == 3)
        {
          uint64_t v97 = getAUSMV2Log(void)::onceToken;
          if (v134)
          {
            v99 = v139;
            CFDictionaryRef v98 = theDict;
            v100 = v142;
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            v101 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v101, OS_LOG_TYPE_DEBUG))
            {
              v119 = (void *)((char *)this + 3368);
              if (*((char *)this + 3391) < 0) {
                v119 = (void *)*v119;
              }
              LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v119;
              WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
              *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"RestoreState";
              _os_log_debug_impl(&dword_1BB0CE000, v101, OS_LOG_TYPE_DEBUG, "[%s|%s] Set SoundStage Parameters", (uint8_t *)&buf, 0x16u);
            }

            v135[2032] = 1;
          }
          else
          {
            v135[2032] = 0;
            v99 = v139;
            CFDictionaryRef v98 = theDict;
            v100 = v142;
            if (v97 != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            v102 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v102, OS_LOG_TYPE_DEBUG))
            {
              v120 = (void *)((char *)this + 3368);
              if (*((char *)this + 3391) < 0) {
                v120 = (void *)*v120;
              }
              LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v120;
              WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
              *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"RestoreState";
              _os_log_debug_impl(&dword_1BB0CE000, v102, OS_LOG_TYPE_DEBUG, "[%s|%s] Found SoundStages in Dictionary, but failed to set parameters on SoundStageManager", (uint8_t *)&buf, 0x16u);
            }
          }
          operator delete(v38);
          operator delete(v100);
          operator delete(v99);
          CFRelease(v98);
          break;
        }
      }
    }
  }
  unsigned __int8 v103 = atomic_load(v135 + 3011);
  if ((v103 & 1) == 0) {
    atomic_store(1u, v135 + 3011);
  }
  atomic_store(1u, (unsigned __int8 *)this + 3008);
  if (getAUSMV2Log(void)::onceToken != -1) {
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
  }
  v104 = (id)getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled(v104, OS_LOG_TYPE_DEFAULT))
  {
    v105 = (void *)((char *)this + 3368);
    if (*((char *)this + 3391) < 0) {
      v105 = (void *)*v105;
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v105;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"RestoreState";
    _os_log_impl(&dword_1BB0CE000, v104, OS_LOG_TYPE_DEFAULT, "[%s|%s] finished", (uint8_t *)&buf, 0x16u);
  }

  if (cf) {
    CFRelease(cf);
  }
  return v137;
}

void sub_1BB3CB22C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, CFTypeRef cf, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,CFTypeRef a26,CFTypeRef a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t AUSpatialMixerV2::SaveState(AUSpatialMixerV2 *this, ausdk **a2)
{
  uint64_t v137 = *MEMORY[0x1E4F143B8];
  int v3 = (char *)&xmmword_1E9F7EFF8 + 8;
  if (getAUSMV2Log(void)::onceToken != -1) {
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
  }
  unsigned __int8 v4 = (id)getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = (void *)((char *)this + 3368);
    if (*((char *)this + 3391) < 0) {
      int v5 = (void *)*v5;
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v5;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"SaveState";
    _os_log_impl(&dword_1BB0CE000, v4, OS_LOG_TYPE_DEFAULT, "[%s|%s] ", (uint8_t *)&buf, 0x16u);
  }

  int v114 = (char *)this + 3120;
  char v115 = 1;
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)((char *)this + 3120));
  ausdk::AUBase::SaveState(this, a2);
  AUSM::GlobalGeometry::getTuningParameters((AUSM::GlobalGeometry *)&value, (uint64_t)this + 7808);
  CFMutableDictionaryRef v111 = 0;
  if (!*((unsigned char *)this + 5968) && *((unsigned char *)this + 8000))
  {
    caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 7808);
    CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v6 = *((void *)this + 998);
    uint64_t v7 = *((void *)this + 997);
    if (v6 != v7)
    {
      unint64_t v8 = 0;
      int v9 = 0;
      while (1)
      {
        int v110 = v9;
        anURL[0] = 0;
        anURL[1] = 0;
        CFURLRef v117 = 0;
        if (v6 == v7)
        {
LABEL_15:
          int v12 = *(_DWORD *)(v7 + 192 * v8 + 24);
        }
        else
        {
          uint64_t v10 = 0;
          unsigned int v11 = 0;
          while (*(_DWORD *)(v7 + 192 * v10 + 24) != 4)
          {
            uint64_t v10 = ++v11;
            if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 6) <= v11) {
              goto LABEL_15;
            }
          }
          int v12 = *(_DWORD *)(v7 + 192 * v8 + 24);
          if (v12 == v11) {
            goto LABEL_94;
          }
        }
        uint64_t v13 = v6 - v7;
        if (v6 != v7) {
          break;
        }
LABEL_20:
        if (*((void *)v3 + 271) != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        int v17 = getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
        {
          uint64_t v18 = (char *)this + 8008;
          if (*((char *)this + 8031) < 0) {
            uint64_t v18 = (char *)*((void *)this + 1001);
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v18;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"getSoundStageDictionaryVec";
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
          LODWORD(v128) = v12;
          _os_log_error_impl(&dword_1BB0CE000, v17, OS_LOG_TYPE_ERROR, "[%s|%s] Failed to find valid index for SoundStage with enum = %d", (uint8_t *)&buf, 0x1Cu);
        }
LABEL_94:
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)anURL;
        std::vector<applesauce::CF::DictionaryRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
        unint64_t v8 = (v110 + 1);
        uint64_t v6 = *((void *)this + 998);
        uint64_t v7 = *((void *)this + 997);
        int v9 = v110 + 1;
        if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 6) <= v8) {
          goto LABEL_97;
        }
      }
      uint64_t v14 = 0;
      unsigned int v15 = 0;
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (v13 >> 6);
      while (*(_DWORD *)(v7 + 192 * v14 + 24) != v12)
      {
        uint64_t v14 = ++v15;
        if (v16 <= v15) {
          goto LABEL_20;
        }
      }
      if (*(void *)(v7 + 192 * v15 + 40) != *(void *)(v7 + 192 * v15 + 32))
      {
        uint64_t v19 = 0;
        unsigned int v20 = 0;
        unsigned int v21 = v15;
        do
        {
          CFArrayRef v22 = (const void *)kPresetKeyChannelLabel;
          if (kPresetKeyChannelLabel)
          {
            CFRetain((CFTypeRef)kPresetKeyChannelLabel);
            applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v123, v22);
            uint64_t v7 = *((void *)this + 997);
            CFTypeRef v23 = v123;
          }
          else
          {
            CFTypeRef v23 = 0;
            CFTypeRef v123 = 0;
          }
          applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,unsigned int const&>(&buf, v23, (int *)(*(void *)(v7 + 192 * v21 + 32) + 32 * v19 + 28));
          int v24 = (const void *)kPresetKeyAzimuth;
          if (kPresetKeyAzimuth) {
            CFRetain((CFTypeRef)kPresetKeyAzimuth);
          }
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v126, v24);
          applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,float const&>(&buf.__r_.__value_.__r.__words[2], v126, (int *)(*(void *)(*((void *)this + 997) + 192 * v21 + 32) + 32 * v19));
          v25 = (const void *)kPresetKeyElevation;
          if (kPresetKeyElevation) {
            CFRetain((CFTypeRef)kPresetKeyElevation);
          }
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v122, v25);
          applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,float const&>(&v129, v122, (int *)(*(void *)(*((void *)this + 997) + 192 * v21 + 32) + 32 * v19 + 4));
          v26 = (const void *)kPresetKeyDistance;
          if (kPresetKeyDistance) {
            CFRetain((CFTypeRef)kPresetKeyDistance);
          }
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v121, v26);
          applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,float const&>(&v130, v121, (int *)(*(void *)(*((void *)this + 997) + 192 * v21 + 32) + 32 * v19 + 8));
          CFTypeID v27 = (const void *)kPresetKeyGain;
          if (kPresetKeyGain) {
            CFRetain((CFTypeRef)kPresetKeyGain);
          }
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v120, v27);
          applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,float const&>(&v131, v120, (int *)(*(void *)(*((void *)this + 997) + 192 * v21 + 32) + 32 * v19 + 12));
          v28 = (const void *)kPresetKeyDRRAdjustment;
          if (kPresetKeyDRRAdjustment) {
            CFRetain((CFTypeRef)kPresetKeyDRRAdjustment);
          }
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v119, v28);
          applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,float const&>(&v132, v119, (int *)(*(void *)(*((void *)this + 997) + 192 * v21 + 32) + 32 * v19 + 16));
          uint64_t v29 = (const void *)kPresetKeyDelay;
          if (kPresetKeyDelay) {
            CFRetain((CFTypeRef)kPresetKeyDelay);
          }
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v29);
          applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,float const&>(v133, cf, (int *)(*(void *)(*((void *)this + 997) + 192 * v21 + 32) + 32 * v19 + 20));
          valuePtr[0] = &buf;
          valuePtr[1] = 7;
          CFDictionaryRef CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)valuePtr);
          CFDictionaryRef v31 = CFDictionaryRef;
          CFDictionaryRef v125 = CFDictionaryRef;
          CFURLRef v32 = anURL[1];
          if (anURL[1] >= v117)
          {
            CFURLRef v33 = anURL[0];
            int64_t v34 = (anURL[1] - anURL[0]) >> 3;
            unint64_t v35 = v34 + 1;
            if ((unint64_t)(v34 + 1) >> 61) {
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v36 = v117 - anURL[0];
            if ((v117 - anURL[0]) >> 2 > v35) {
              unint64_t v35 = v36 >> 2;
            }
            if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v37 = v35;
            }
            float v136 = &v117;
            if (v37)
            {
              unint64_t v37 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v37);
              CFURLRef v33 = anURL[0];
              CFURLRef v32 = anURL[1];
            }
            else
            {
              uint64_t v38 = 0;
            }
            CFURLRef v39 = (const __CFURL *)(v37 + 8 * v34);
            CFURLRef v40 = (const __CFURL *)(v37 + 8 * v38);
            CFURLRef v135 = v40;
            *(void *)CFURLRef v39 = v31;
            CFURLRef v41 = (const __CFURL *)((char *)v39 + 8);
            CFDictionaryRef v125 = 0;
            *(void *)&v134[16] = (char *)v39 + 8;
            if (v32 == v33)
            {
              CFDictionaryRef v43 = 0;
            }
            else
            {
              do
              {
                uint64_t v42 = *((void *)v32 - 1);
                CFURLRef v32 = (CFURLRef)((char *)v32 - 8);
                *((void *)v39 - 1) = v42;
                CFURLRef v39 = (const __CFURL *)((char *)v39 - 8);
                *(void *)CFURLRef v32 = 0;
              }
              while (v32 != v33);
              CFURLRef v41 = *(const __CFURL **)&v134[16];
              CFURLRef v40 = v135;
              CFDictionaryRef v43 = v125;
            }
            long long v44 = *(_OWORD *)anURL;
            anURL[0] = v39;
            anURL[1] = v41;
            *(_OWORD *)&v134[8] = v44;
            CFURLRef v45 = v117;
            CFURLRef v117 = v40;
            CFURLRef v135 = v45;
            *(void *)char v134 = v44;
            std::__split_buffer<applesauce::CF::DictionaryRef>::~__split_buffer((uint64_t)v134);
            anURL[1] = v41;
            if (v43) {
              CFRelease(v43);
            }
          }
          else
          {
            *(void *)anURL[1] = CFDictionaryRef;
            CFDictionaryRef v125 = 0;
            anURL[1] = (CFURLRef)((char *)v32 + 8);
          }
          for (uint64_t i = 0; i != -14; i -= 2)
          {
            int v47 = (const void *)v133[i + 1];
            if (v47) {
              CFRelease(v47);
            }
            float v48 = (const void *)v133[i];
            if (v48) {
              CFRelease(v48);
            }
          }
          if (cf) {
            CFRelease(cf);
          }
          if (v119) {
            CFRelease(v119);
          }
          if (v120) {
            CFRelease(v120);
          }
          if (v121) {
            CFRelease(v121);
          }
          if (v122) {
            CFRelease(v122);
          }
          if (v126) {
            CFRelease(v126);
          }
          if (v123) {
            CFRelease(v123);
          }
          uint64_t v7 = *((void *)this + 997);
          uint64_t v19 = ++v20;
        }
        while (v20 < (unint64_t)((uint64_t)(*(void *)(v7 + 192 * v21 + 40)
                                                 - *(void *)(v7 + 192 * v21 + 32)) >> 5));
      }
      CFArrayRef v49 = applesauce::CF::details::make_CFArrayRef<applesauce::CF::DictionaryRef>((uint64_t **)anURL);
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
      float v50 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      LODWORD(valuePtr[0]) = *(_DWORD *)(*((void *)this + 997) + 192 * v8 + 136);
      CFNumberRef v51 = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
      *(void *)char v134 = v51;
      if (!v51)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      CFDictionaryAddValue(v50, @"Gain", v51);
      CFRelease(v51);
      LODWORD(valuePtr[0]) = *(_DWORD *)(*((void *)this + 997) + 192 * v8 + 140);
      CFNumberRef v52 = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
      *(void *)char v134 = v52;
      if (!v52)
      {
        unsigned __int8 v103 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v103, "Could not construct");
      }
      CFDictionaryAddValue(v50, @"DistanceCompression", v52);
      CFRelease(v52);
      CFDictionaryAddValue(v50, @"WarpingParameters", v49);
      CFStringRef v53 = (CFStringRef)(*((void *)this + 997) + 192 * v8);
      if (SHIBYTE(v53->data) < 0)
      {
        CFStringRef v53 = (CFStringRef)v53->isa;
        size_t v56 = strlen((const char *)v53);
        int v3 = (unsigned char *)(&xmmword_1E9F7EFF8 + 8);
        v55 = Mutable;
        if (!v53)
        {
          *(void *)char v134 = 0;
LABEL_90:
          CFDictionaryAddValue(v55, v53, v50);
          CFRelease(v50);
          if (v53) {
            CFRelease(v53);
          }
          if (v49) {
            CFRelease(v49);
          }
          goto LABEL_94;
        }
        CFIndex v54 = v56;
      }
      else
      {
        CFIndex v54 = strlen((const char *)(*((void *)this + 997) + 192 * v8));
        int v3 = (unsigned char *)(&xmmword_1E9F7EFF8 + 8);
        v55 = Mutable;
      }
      CFStringRef v53 = CFStringCreateWithBytes(0, (const UInt8 *)v53, v54, 0x8000100u, 0);
      *(void *)char v134 = v53;
      if (!v53)
      {
        v105 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v105, "Could not construct");
      }
      goto LABEL_90;
    }
LABEL_97:
    CFMutableDictionaryRef v57 = Mutable;
    if (Mutable)
    {
      CFTypeID v58 = (char *)this + 7808;
      CFTypeID v59 = CFGetTypeID(Mutable);
      if (v59 != CFDictionaryGetTypeID())
      {
        CFRelease(Mutable);
        CFMutableDictionaryRef v57 = 0;
      }
    }
    else
    {
      CFTypeID v58 = (char *)this + 7808;
    }
    caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock((uint64_t)v58);
    CFMutableDictionaryRef v111 = v57;
  }
  AUSM::Properties::createPropertyDictionaryForSaveState((AUSpatialMixerV2 *)((char *)this + 3360), (__CFDictionary **)v134);
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v134;
  buf.__r_.__value_.__l.__size_ = 1;
  CFArrayRef v60 = applesauce::CF::details::make_CFArrayRef<applesauce::CF::DictionaryRef>((uint64_t)&buf);
  valuePtr[0] = v60;
  if (*(void *)v134) {
    CFRelease(*(CFTypeRef *)v134);
  }
  unsigned int v61 = 0;
  memset(v134, 0, sizeof(v134));
  while (1)
  {
    uint64_t v62 = *((void *)this + 15);
    if (v62) {
      LODWORD(v63) = (*(uint64_t (**)(uint64_t))(*(void *)v62 + 24))(v62);
    }
    else {
      uint64_t v63 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
    }
    if (v61 >= v63) {
      break;
    }
    uint64_t Element = (unsigned int *)ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 80), v61);
    caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)(Element + 162));
    ausdk::AUChannelLayout::AUChannelLayout((ausdk::AUChannelLayout *)&buf, (const ausdk::AUChannelLayout *)(Element + 30));
    float v65 = (unsigned int *)buf.__r_.__value_.__r.__words[0];
    if (!ausdk::AUChannelLayout::NumberChannels((ausdk::AUChannelLayout *)buf.__r_.__value_.__l.__data_, v66)|| (unsigned int v67 = *v65, (*v65 | 0x10000) == 0x10000))
    {
      unsigned int v67 = -65536;
    }
    atomic_store(v67, Element + 222);
    AUSM::Properties::createPropertyDictionaryForSaveState((AUSM::Properties *)(Element + 168), anURL);
    if (buf.__r_.__value_.__r.__words[0])
    {
      buf.__r_.__value_.__l.__size_ = buf.__r_.__value_.__r.__words[0];
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock((uint64_t)(Element + 162));
    float v68 = *(void **)&v134[8];
    if (*(void *)&v134[8] >= *(void *)&v134[16])
    {
      float v69 = *(void **)v134;
      uint64_t v70 = (uint64_t)(*(void *)&v134[8] - *(void *)v134) >> 3;
      unint64_t v71 = v70 + 1;
      if ((unint64_t)(v70 + 1) >> 61) {
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v72 = *(void *)&v134[16] - *(void *)v134;
      if ((uint64_t)(*(void *)&v134[16] - *(void *)v134) >> 2 > v71) {
        unint64_t v71 = v72 >> 2;
      }
      if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v73 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v73 = v71;
      }
      v129 = &v134[16];
      if (v73)
      {
        unint64_t v73 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v73);
        float v69 = *(void **)v134;
        float v68 = *(void **)&v134[8];
      }
      else
      {
        uint64_t v74 = 0;
      }
      CFNumberRef v75 = (CFURLRef *)(v73 + 8 * v70);
      unint64_t v76 = v73 + 8 * v74;
      unint64_t v128 = v76;
      *CFNumberRef v75 = anURL[0];
      v77 = v75 + 1;
      anURL[0] = 0;
      buf.__r_.__value_.__r.__words[2] = (std::string::size_type)(v75 + 1);
      if (v68 == v69)
      {
        CFURLRef v79 = 0;
      }
      else
      {
        do
        {
          CFURLRef v78 = (const __CFURL *)*--v68;
          *--CFNumberRef v75 = v78;
          *float v68 = 0;
        }
        while (v68 != v69);
        v77 = (CFURLRef *)buf.__r_.__value_.__r.__words[2];
        unint64_t v76 = v128;
        CFURLRef v79 = anURL[0];
      }
      long long v80 = *(_OWORD *)v134;
      *(void *)char v134 = v75;
      *(void *)&v134[8] = v77;
      *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = v80;
      unint64_t v81 = *(void *)&v134[16];
      *(void *)&v134[16] = v76;
      unint64_t v128 = v81;
      buf.__r_.__value_.__r.__words[0] = v80;
      std::__split_buffer<applesauce::CF::DictionaryRef>::~__split_buffer((uint64_t)&buf);
      *(void *)&v134[8] = v77;
      if (v79) {
        CFRelease(v79);
      }
    }
    else
    {
      **(void **)&v134[8] = anURL[0];
      *(void *)&v134[8] = v68 + 1;
    }
    ++v61;
  }
  CFArrayRef v82 = applesauce::CF::details::make_CFArrayRef<applesauce::CF::DictionaryRef>((uint64_t **)v134);
  CFDictionaryRef v125 = v82;
  unint64_t v83 = (unsigned int *)ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 128), 0);
  ausdk::AUChannelLayout::AUChannelLayout((ausdk::AUChannelLayout *)&buf, (const ausdk::AUChannelLayout *)(v83 + 30));
  uint64_t v84 = (unsigned int *)buf.__r_.__value_.__r.__words[0];
  if (!ausdk::AUChannelLayout::NumberChannels((ausdk::AUChannelLayout *)buf.__r_.__value_.__l.__data_, v85)|| (unsigned int v86 = *v84, (*v84 | 0x10000) == 0x10000))
  {
    unsigned int v86 = -65536;
  }
  atomic_store(v86, v83 + 74);
  AUSM::Properties::createPropertyDictionaryForSaveState((AUSM::Properties *)(v83 + 56), (__CFDictionary **)&v126);
  if (buf.__r_.__value_.__r.__words[0])
  {
    buf.__r_.__value_.__l.__size_ = buf.__r_.__value_.__r.__words[0];
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  anURL[0] = (CFURLRef)&v126;
  anURL[1] = (CFURLRef)1;
  CFArrayRef v87 = applesauce::CF::details::make_CFArrayRef<applesauce::CF::DictionaryRef>((uint64_t)anURL);
  CFTypeRef v123 = v87;
  if (v126) {
    CFRelease(v126);
  }
  if (v113 == 1) {
    CFDictionaryAddValue(*a2, (const void *)AUSM::kFactoryPresetChannelOverridesKey, value);
  }
  CFDictionaryAddValue(*a2, @"InputProperties", v82);
  CFDictionaryAddValue(*a2, @"OutputProperties", v87);
  CFDictionaryAddValue(*a2, (const void *)AUSM::kFactoryPresetGlobalPropertiesKey, v60);
  if (!*((unsigned char *)this + 5968) && v111 && *((unsigned char *)this + 8000)) {
    CFDictionaryAddValue(*a2, @"SoundStages", v111);
  }
  AUSM::AppleSauceCFWithMutex<__CFURL const*>::load(&buf, (uint64_t)this + 3680);
  v88 = (const void *)buf.__r_.__value_.__r.__words[0];
  if (!buf.__r_.__value_.__r.__words[0])
  {
LABEL_171:
    if (!v87) {
      goto LABEL_173;
    }
    goto LABEL_172;
  }
  if (!*((void *)this + 1117))
  {
    BOOL v94 = 0;
    goto LABEL_157;
  }
  AUSM::AppleSauceCFWithMutex<__CFURL const*>::load(anURL, (uint64_t)this + 3680);
  CFURLRef v89 = anURL[0];
  CFStringRef v90 = CFURLGetString(anURL[0]);
  uint64_t v91 = *((void *)this + 1117);
  if ((*(char *)(v91 + 1031) & 0x80000000) == 0)
  {
    v92 = (const UInt8 *)(v91 + 1008);
    CFIndex v93 = *(unsigned __int8 *)(v91 + 1031);
    goto LABEL_152;
  }
  v92 = *(const UInt8 **)(v91 + 1008);
  if (v92)
  {
    CFIndex v93 = *(void *)(v91 + 1016);
LABEL_152:
    CFStringRef v95 = CFStringCreateWithBytes(0, v92, v93, 0x8000100u, 0);
    CFTypeRef v126 = v95;
    if (!v95)
    {
      v106 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v106, "Could not construct");
    }
    goto LABEL_153;
  }
  CFStringRef v95 = 0;
  CFTypeRef v126 = 0;
LABEL_153:
  BOOL v94 = CFEqual(v90, v95);
  if (v95) {
    CFRelease(v95);
  }
  if (v89) {
    CFRelease(v89);
  }
LABEL_157:
  CFRelease(v88);
  if (!v94) {
    goto LABEL_171;
  }
  CFArrayRef v96 = (const __CFArray *)CFDictionaryGetValue(*a2, (const void *)AUSM::kFactoryPresetGlobalPropertiesKey);
  ValueAtIndex = (__CFDictionary *)CFArrayGetValueAtIndex(v96, 0);
  std::to_string(&buf, 3203);
  CFDictionaryRef v98 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? &buf
      : (std::string *)buf.__r_.__value_.__r.__words[0];
  if (v98)
  {
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex size = buf.__r_.__value_.__l.__size_;
    }
    CFURLRef v100 = (const __CFURL *)CFStringCreateWithBytes(0, (const UInt8 *)v98, size, 0x8000100u, 0);
    anURL[0] = v100;
    if (!v100)
    {
      v101 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v101, "Could not construct");
    }
  }
  else
  {
    CFURLRef v100 = 0;
    anURL[0] = 0;
  }
  CFDictionaryRemoveValue(ValueAtIndex, v100);
  if (v100) {
    CFRelease(v100);
  }
  if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_171;
  }
  operator delete(buf.__r_.__value_.__l.__data_);
  if (v87) {
LABEL_172:
  }
    CFRelease(v87);
LABEL_173:
  if (v82) {
    CFRelease(v82);
  }
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v134;
  std::vector<applesauce::CF::DictionaryRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  if (v60) {
    CFRelease(v60);
  }
  if (v111) {
    CFRelease(v111);
  }
  if (value) {
    CFRelease(value);
  }
  std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v114);
  return 0;
}

void sub_1BB3CC438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,int a37,__int16 a38,char a39,char a40,int a41,__int16 a42,char a43,char a44,int a45,__int16 a46,char a47,char a48,int a49,__int16 a50,char a51,char a52,int a53,__int16 a54,char a55,char a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,char a62,uint64_t a63)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

CFArrayRef applesauce::CF::details::make_CFArrayRef<applesauce::CF::DictionaryRef>(uint64_t a1)
{
  std::vector<void const*>::vector(__p, *(void *)(a1 + 8));
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    int v3 = *(uint64_t **)a1;
    unsigned __int8 v4 = __p[0];
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v3++;
      *v4++ = v6;
      v5 -= 8;
    }
    while (v5);
  }
  CFArrayRef CFArray = applesauce::CF::details::make_CFArrayRef<void const*>((uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return CFArray;
}

void sub_1BB3CC8FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

CFArrayRef applesauce::CF::details::make_CFArrayRef<applesauce::CF::DictionaryRef>(uint64_t **a1)
{
  std::vector<void const*>::vector(__p, a1[1] - *a1);
  uint64_t v2 = *a1;
  int v3 = a1[1];
  if (*a1 != v3)
  {
    unsigned __int8 v4 = __p[0];
    do
    {
      uint64_t v5 = *v2++;
      *v4++ = v5;
    }
    while (v2 != v3);
  }
  CFArrayRef CFArray = applesauce::CF::details::make_CFArrayRef<void const*>((uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return CFArray;
}

void sub_1BB3CC994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<applesauce::CF::DictionaryRef>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    std::__destroy_at[abi:ne180100]<applesauce::CF::DictionaryRef,0>((const void **)(i - 8));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<applesauce::CF::DictionaryRef>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unsigned __int8 v1 = *a1;
  uint64_t v2 = (const void **)**a1;
  if (v2)
  {
    unsigned __int8 v4 = (const void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
        std::__destroy_at[abi:ne180100]<applesauce::CF::DictionaryRef,0>(--v4);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

const void **std::pair<applesauce::CF::ArrayRef,AUSM::GlobalGeometry::DataType>::~pair(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t AUSpatialMixerV2::GetParameterInfo(AUSpatialMixerV2 *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  buffer->flags = -1073741824;
  switch(a2)
  {
    case 2:
      if (a3 == 3)
      {
LABEL_7:
        CFStringRef v9 = (const __CFString *)kGainParameterName;
        buffer->cfNameString = (CFStringRef)kGainParameterName;
        buffer->flags = -939524096;
        CFStringGetCString(v9, buffer->name, 52, 0x8000100u);
        uint64_t result = 0;
        buffer->unit = kAudioUnitParameterUnit_Decibels;
        uint64_t v8 = 0x41A00000C2F00000;
LABEL_58:
        *(void *)&buffer->minCFArrayRef Value = v8;
        AudioUnitParameterOptions v26 = buffer->flags | 0x2000000;
LABEL_59:
        buffer->defaultCFArrayRef Value = 0.0;
        buffer->flags = v26;
      }
      else
      {
        return 4294956418;
      }
      break;
    case 1:
      uint64_t result = 4294956418;
      switch(a3)
      {
        case 0:
          CFStringRef v23 = (const __CFString *)kAzimuthParameterName;
          goto LABEL_47;
        case 1:
          CFStringRef v24 = (const __CFString *)kElevationParameterName;
          goto LABEL_45;
        case 2:
          CFStringRef v27 = (const __CFString *)kDistanceParameterName;
          buffer->cfNameString = (CFStringRef)kDistanceParameterName;
          buffer->flags = -939524096;
          CFStringGetCString(v27, buffer->name, 52, 0x8000100u);
          uint64_t result = 0;
          buffer->unit = kAudioUnitParameterUnit_Meters;
          uint64_t v8 = 0x461C400000000000;
          goto LABEL_58;
        case 3:
          goto LABEL_7;
        case 4:
          CFStringRef v28 = (const __CFString *)kPlaybackRateParameterName;
          buffer->cfNameString = (CFStringRef)kPlaybackRateParameterName;
          buffer->flags = -939524096;
          CFStringGetCString(v28, buffer->name, 52, 0x8000100u);
          uint64_t result = 0;
          buffer->unit = kAudioUnitParameterUnit_Generic;
          *(void *)&buffer->minCFArrayRef Value = 0x412000003DCCCCCDLL;
          AudioUnitParameterValue v20 = 1.0;
          goto LABEL_39;
        case 5:
          CFStringRef v22 = (const __CFString *)kEnableParameterName;
LABEL_36:
          buffer->cfNameString = v22;
          buffer->flags = -939524096;
          CFStringGetCString(v22, buffer->name, 52, 0x8000100u);
          uint64_t result = 0;
          buffer->unit = kAudioUnitParameterUnit_Boolean;
          *(void *)&buffer->minCFArrayRef Value = 0x3F80000000000000;
          AudioUnitParameterValue v29 = 1.0;
          goto LABEL_66;
        case 6:
          CFStringRef v30 = (const __CFString *)kMinGainParameterName;
          buffer->cfNameString = (CFStringRef)kMinGainParameterName;
          buffer->flags = -939524096;
          CFStringGetCString(v30, buffer->name, 52, 0x8000100u);
          uint64_t result = 0;
          buffer->unit = kAudioUnitParameterUnit_LinearGain;
          uint64_t v8 = 0x4120000000000000;
          goto LABEL_58;
        case 7:
          CFStringRef v31 = (const __CFString *)kMaxGainParameterName;
          buffer->cfNameString = (CFStringRef)kMaxGainParameterName;
          buffer->flags = -939524096;
          CFStringGetCString(v31, buffer->name, 52, 0x8000100u);
          uint64_t result = 0;
          buffer->unit = kAudioUnitParameterUnit_LinearGain;
          *(void *)&buffer->minCFArrayRef Value = 0x4120000000000000;
          AudioUnitParameterValue v20 = 10.0;
LABEL_39:
          AudioUnitParameterOptions v32 = buffer->flags | 0x2000000;
          goto LABEL_61;
        case 8:
        case 35:
          uint64_t v10 = &kReverbBlendParameterName;
          if (a3 != 8) {
            uint64_t v10 = &kPostProcReverbBlendParameterName;
          }
          CFStringRef v11 = (const __CFString *)*v10;
          buffer->cfNameString = (CFStringRef)*v10;
          buffer->flags = -939524096;
          if (a3 == 8) {
            float v12 = 30.0;
          }
          else {
            float v12 = 50.0;
          }
          CFStringGetCString(v11, buffer->name, 52, 0x8000100u);
          uint64_t result = 0;
          buffer->unit = kAudioUnitParameterUnit_Percent;
          *(void *)&buffer->minCFArrayRef Value = 0x42C8000000000000;
          buffer->defaultCFArrayRef Value = v12;
          buffer->flags |= 0x2000000u;
          return result;
        case 10:
          CFStringRef v33 = (const __CFString *)kOcclusionAttenuationParameterName;
          goto LABEL_42;
        case 11:
          CFStringRef v33 = (const __CFString *)kObstructionAttenuationParameterName;
LABEL_42:
          buffer->cfNameString = v33;
          buffer->flags = -939524096;
          CFStringGetCString(v33, buffer->name, 52, 0x8000100u);
          uint64_t result = 0;
          buffer->unit = kAudioUnitParameterUnit_Decibels;
          uint64_t v8 = 3267887104;
          goto LABEL_58;
        case 22:
          CFStringRef v23 = (const __CFString *)kSourceYawName;
          goto LABEL_47;
        case 23:
          CFStringRef v24 = (const __CFString *)kSourcePitchName;
LABEL_45:
          buffer->cfNameString = v24;
          buffer->flags = -939524096;
          CFStringGetCString(v24, buffer->name, 52, 0x8000100u);
          uint64_t result = 0;
          buffer->unit = kAudioUnitParameterUnit_Degrees;
          uint64_t v8 = 0x42B40000C2B40000;
          goto LABEL_58;
        case 24:
          CFStringRef v23 = (const __CFString *)kSourceRollName;
LABEL_47:
          buffer->cfNameString = v23;
          buffer->flags = -939524096;
          CFStringGetCString(v23, buffer->name, 52, 0x8000100u);
          uint64_t result = 0;
          buffer->unit = kAudioUnitParameterUnit_Degrees;
          uint64_t v8 = 0x43340000C3340000;
          goto LABEL_58;
        case 25:
          CFStringRef v34 = (const __CFString *)kSourceWidthParamName;
          goto LABEL_57;
        case 26:
          CFStringRef v34 = (const __CFString *)kSourceHeightParamName;
          goto LABEL_57;
        case 27:
          CFStringRef v34 = (const __CFString *)kSourceDepthParamName;
          goto LABEL_57;
        case 28:
          CFStringRef v34 = (const __CFString *)kSourceDivergenceParamName;
          goto LABEL_57;
        case 29:
          CFStringRef v35 = (const __CFString *)kSourceDivergenceAzimuthRangeParamName;
          buffer->cfNameString = (CFStringRef)kSourceDivergenceAzimuthRangeParamName;
          buffer->flags = -939524096;
          CFStringGetCString(v35, buffer->name, 52, 0x8000100u);
          uint64_t result = 0;
          buffer->unit = kAudioUnitParameterUnit_Ratio;
          uint64_t v8 = 0x4334000000000000;
          goto LABEL_58;
        case 30:
          CFStringRef v34 = (const __CFString *)kSourceDivergencePositionRangeParamName;
          goto LABEL_57;
        case 31:
          CFStringRef v36 = (const __CFString *)kHeadLockedParamName;
          goto LABEL_63;
        case 32:
          CFStringRef v36 = (const __CFString *)kSpeakerSnapParamName;
          goto LABEL_63;
        case 33:
          CFStringRef v34 = (const __CFString *)kDiffuseParamName;
LABEL_57:
          buffer->cfNameString = v34;
          buffer->flags = -939524096;
          CFStringGetCString(v34, buffer->name, 52, 0x8000100u);
          uint64_t result = 0;
          buffer->unit = kAudioUnitParameterUnit_Ratio;
          uint64_t v8 = 0x3F80000000000000;
          goto LABEL_58;
        case 34:
          CFStringRef v37 = (const __CFString *)kSceneScaleParamName;
          buffer->cfNameString = (CFStringRef)kSceneScaleParamName;
          buffer->flags = -939524096;
          CFStringGetCString(v37, buffer->name, 52, 0x8000100u);
          uint64_t result = 0;
          buffer->unit = kAudioUnitParameterUnit_Meters;
          *(void *)&buffer->minCFArrayRef Value = 0x461C400000000000;
          AudioUnitParameterValue v20 = 1.0;
          AudioUnitParameterOptions v32 = buffer->flags | 0x800000;
LABEL_61:
          buffer->defaultCFArrayRef Value = v20;
          buffer->flags = v32;
          return result;
        case 39:
          CFStringRef v36 = (const __CFString *)kInternalizedParamName;
LABEL_63:
          buffer->cfNameString = v36;
          buffer->flags = -939524096;
          CFStringGetCString(v36, buffer->name, 52, 0x8000100u);
          uint64_t result = 0;
          buffer->unit = kAudioUnitParameterUnit_Boolean;
          uint64_t v21 = 0x3F80000000000000;
LABEL_64:
          *(void *)&buffer->minCFArrayRef Value = v21;
          buffer->defaultCFArrayRef Value = 0.0;
          return result;
        case 40:
          CFStringRef v38 = (const __CFString *)kStereoPanningRefAngleParamName;
          buffer->cfNameString = (CFStringRef)kStereoPanningRefAngleParamName;
          buffer->flags = -939524096;
          CFStringGetCString(v38, buffer->name, 52, 0x8000100u);
          uint64_t result = 0;
          buffer->unit = kAudioUnitParameterUnit_Degrees;
          *(void *)&buffer->minCFArrayRef Value = 0x42B4000000000000;
          AudioUnitParameterValue v29 = 45.0;
LABEL_66:
          buffer->defaultCFArrayRef Value = v29;
          return result;
        default:
          return result;
      }
    case 0:
      uint64_t result = 4294956418;
      switch(a3)
      {
        case 9:
          CFStringRef v7 = (const __CFString *)kReverbGainParameterName;
          buffer->cfNameString = (CFStringRef)kReverbGainParameterName;
          buffer->flags = -939524096;
          CFStringGetCString(v7, buffer->name, 52, 0x8000100u);
          uint64_t result = 0;
          buffer->unit = kAudioUnitParameterUnit_Decibels;
          uint64_t v8 = 0x42200000C2200000;
          goto LABEL_58;
        case 14:
          buffer->cfNameString = @"filter frequency";
          buffer->flags = -939524096;
          CFStringGetCString(@"filter frequency", buffer->name, 52, 0x8000100u);
          *(void *)&buffer->unit = 0x4120000000000008;
          uint64_t Element = ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 128), 0);
          uint64_t result = 0;
          double v14 = *(double *)(Element + 80);
          double v15 = v14 * 0.5;
          BOOL v16 = v14 < 20000.0;
          double v17 = 10000.0;
          if (v16) {
            double v17 = v15;
          }
          AudioUnitParameterValue v18 = v17;
          buffer->maxCFArrayRef Value = v18;
          AudioUnitParameterOptions v19 = buffer->flags | 0x2400000;
          buffer->defaultCFArrayRef Value = 800.0;
          buffer->flags = v19;
          return result;
        case 15:
          buffer->cfNameString = @"filter bandwidth";
          buffer->flags = -939524096;
          CFStringGetCString(@"filter bandwidth", buffer->name, 52, 0x8000100u);
          uint64_t result = 0;
          buffer->unit = kAudioUnitParameterUnit_Octaves;
          *(void *)&buffer->minCFArrayRef Value = 0x408000003D4CCCCDLL;
          AudioUnitParameterValue v20 = 3.0;
          goto LABEL_39;
        case 16:
          buffer->cfNameString = @"filter gain";
          buffer->flags = -939524096;
          CFStringGetCString(@"filter gain", buffer->name, 52, 0x8000100u);
          uint64_t result = 0;
          buffer->unit = kAudioUnitParameterUnit_Decibels;
          uint64_t v8 = 0x41900000C1900000;
          goto LABEL_58;
        case 17:
          buffer->cfNameString = @"filter type";
          buffer->flags = -939524096;
          CFStringGetCString(@"filter type", buffer->name, 52, 0x8000100u);
          uint64_t result = 0;
          buffer->unit = kAudioUnitParameterUnit_Indexed;
          uint64_t v21 = 0x4120000000000000;
          goto LABEL_64;
        case 18:
          CFStringRef v22 = @"filter enable";
          goto LABEL_36;
        case 19:
          CFStringRef v23 = (const __CFString *)kHeadOrientationYawName;
          goto LABEL_47;
        case 20:
          CFStringRef v24 = (const __CFString *)kHeadOrientationPitchName;
          goto LABEL_45;
        case 21:
          CFStringRef v23 = (const __CFString *)kHeadOrientationRollName;
          goto LABEL_47;
        case 36:
          CFStringRef v25 = (const __CFString *)kListenerPositionXName;
          goto LABEL_30;
        case 37:
          CFStringRef v25 = (const __CFString *)kListenerPositionYName;
          goto LABEL_30;
        case 38:
          CFStringRef v25 = (const __CFString *)kListenerPositionZName;
LABEL_30:
          buffer->cfNameString = v25;
          buffer->flags = -939524096;
          CFStringGetCString(v25, buffer->name, 52, 0x8000100u);
          uint64_t result = 0;
          buffer->unit = kAudioUnitParameterUnit_Meters;
          *(void *)&buffer->minCFArrayRef Value = 0x461C4000C61C4000;
          AudioUnitParameterOptions v26 = buffer->flags | 0x2800000;
          goto LABEL_59;
        default:
          return result;
      }
    default:
      return 0;
  }
  return result;
}

uint64_t AUSpatialMixerV2::SetInputCallback(AUSpatialMixerV2 *this, uint64_t a2, uint64_t a3, int (*a4)(void *, unsigned int *, const AudioTimeStamp *, unsigned int, unsigned int, AudioBufferList *), void *a5)
{
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 80), a3);
  (*(void (**)(uint64_t))(*(void *)Element + 120))(Element);
  ausdk::AUBase::SetInputCallback(this, a2, a3, a4, a5);
  return 0;
}

uint64_t AUSpatialMixerV2::SetConnection(const void **this, const AudioUnitConnection *a2)
{
  uint64_t Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(this + 10), a2->destInputNumber);
  (*(void (**)(uint64_t))(*(void *)Element + 120))(Element);

  return ausdk::AUBase::SetConnection(this, a2);
}

uint64_t AUSpatialMixerV2::SetBusCount(AUSpatialMixerV2 *this, unsigned int a2, unsigned int a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (a2 == 1)
  {
    uint64_t v5 = *((void *)this + 15);
    if (v5) {
      LODWORD(v6) = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
    }
    else {
      uint64_t v6 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
    }
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    uint64_t v10 = (id)getAUSMV2Log(void)::gLog;
    BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    if (v6 == a3)
    {
      if (v11)
      {
        float v12 = (void *)((char *)this + 3368);
        if (*((char *)this + 3391) < 0) {
          float v12 = (void *)*v12;
        }
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = v12;
        __int16 v26 = 2080;
        CFStringRef v27 = "SetBusCount";
        __int16 v28 = 1024;
        unsigned int v29 = a3;
        _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_DEFAULT, "[%s|%s] Setting input bus count = %u (not changed)", buf, 0x1Cu);
      }
    }
    else
    {
      if (v11)
      {
        uint64_t v13 = (void *)((char *)this + 3368);
        if (*((char *)this + 3391) < 0) {
          uint64_t v13 = (void *)*v13;
        }
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = v13;
        __int16 v26 = 2080;
        CFStringRef v27 = "SetBusCount";
        __int16 v28 = 1024;
        unsigned int v29 = a3;
        _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_DEFAULT, "[%s|%s] Setting input bus count = %u", buf, 0x1Cu);
      }

      unsigned __int8 v14 = atomic_load((unsigned __int8 *)this + 8977);
      if ((v14 & 1) == 0 && v6 > a3)
      {
        unsigned int v15 = a3;
        do
        {
          uint64_t Element = ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 80), v15);
          *(_DWORD *)(Element + 172) = 0;
          if (*(void *)(Element + 152))
          {
            (*((void (**)(_UNKNOWN **))ausdk::BufferAllocator::instance(void)::global + 3))(&ausdk::BufferAllocator::instance(void)::global);
            *(void *)(Element + 152) = 0;
          }
          *(void *)(Element + 160) = 0;
          *(_DWORD *)(Element + 144) = 0;
          ++v15;
        }
        while (v6 != v15);
      }
      v24[0] = (char *)this + 3120;
      v24[1] = (char *)this + 3072;
      while (1)
      {
        *(void *)std::string buf = (char *)this + 3120;
        buf[8] = 1;
        std::__shared_mutex_base::lock((std::__shared_mutex_base *)((char *)this + 3120));
        if (caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::try_lock((uint64_t)this + 3072))
        {
          *(void *)std::string buf = 0;
          buf[8] = 0;
          std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)buf);
          goto LABEL_33;
        }
        std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)buf);
        sched_yield();
        *(void *)std::string buf = (char *)this + 3072;
        buf[8] = 1;
        caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 3072);
        if (std::__shared_mutex_base::try_lock((std::__shared_mutex_base *)((char *)this + 3120))) {
          break;
        }
        std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)buf);
        sched_yield();
      }
      *(void *)std::string buf = 0;
      buf[8] = 0;
      std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)buf);
LABEL_33:
      ausdk::AUScope::SetNumberOfElements((AUSpatialMixerV2 *)((char *)this + 80), a3);
      uint64_t v17 = *((void *)this + 15);
      if (v17) {
        LODWORD(v18) = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 24))(v17);
      }
      else {
        uint64_t v18 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
      }
      if (v18 != *((_DWORD *)this + 586))
      {
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        AudioUnitParameterOptions v19 = (id)getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
        {
          CFStringRef v23 = (void *)((char *)this + 3368);
          if (*((char *)this + 3391) < 0) {
            CFStringRef v23 = (void *)*v23;
          }
          *(_DWORD *)std::string buf = 136315650;
          *(void *)&uint8_t buf[4] = v23;
          __int16 v26 = 2080;
          CFStringRef v27 = "SetBusCount";
          __int16 v28 = 1024;
          unsigned int v29 = v18;
          _os_log_debug_impl(&dword_1BB0CE000, v19, OS_LOG_TYPE_DEBUG, "[%s|%s] Setting late reverb bus count = %u", buf, 0x1Cu);
        }

        IR::SharedIRBuses::setNumInputChannels((uint64_t)this + 2104, 3 * v18);
      }
      if (v18 > v6)
      {
        unsigned __int8 v20 = atomic_load((unsigned __int8 *)this + 8977);
        if (v20)
        {
          do
          {
            uint64_t v21 = (void *)ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 80), v6);
            (*(void (**)(void *))(*v21 + 112))(v21);
            AUSpatialMixerV2InputElement::UpdateAlignmentDelayLines(v21);
            LODWORD(v6) = v6 + 1;
          }
          while (v18 != v6);
        }
      }
      AUSM::TuningManager::ResizeBuffers((AUSpatialMixerV2 *)((char *)this + 6000), v18);
      std::scoped_lock<std::shared_mutex,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~scoped_lock[abi:ne180100]((uint64_t)v24);
      AUSpatialMixerV2::UpdateReverbIfNecessary((uint64_t)this, -1, 0, 0);
    }
    return 0;
  }
  else
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    uint64_t v8 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v22 = (void *)((char *)this + 3368);
      if (*((char *)this + 3391) < 0) {
        CFStringRef v22 = (void *)*v22;
      }
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = v22;
      __int16 v26 = 2080;
      CFStringRef v27 = "SetBusCount";
      __int16 v28 = 1024;
      unsigned int v29 = a2;
      _os_log_error_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_ERROR, "[%s|%s] cannot change bus count for scope = %u", buf, 0x1Cu);
    }

    return 4294956430;
  }
}

void sub_1BB3CD9C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::scoped_lock<std::shared_mutex,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~scoped_lock[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  std::__shared_mutex_base::unlock(*(std::__shared_mutex_base **)a1);
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(v2);
  return a1;
}

BOOL AUSpatialMixerV2::BusCountWritable(AUSpatialMixerV2 *this, int a2)
{
  return a2 == 1;
}

uint64_t AUSpatialMixerV2::Render(AUSpatialMixerV2 *this, unsigned int *a2, const AudioBufferList **a3, uint64_t a4)
{
  v40[1] = *(AudioBufferList **)MEMORY[0x1E4F143B8];
  AudioUnitParameterOptions v32 = (char *)this + 3072;
  char v33 = caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::try_lock((uint64_t)this + 3072);
  if ((v33 & 1) == 0)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    CFStringRef v9 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      __int16 v28 = (void *)((char *)this + 3368);
      if (*((char *)this + 3391) < 0) {
        __int16 v28 = (void *)*v28;
      }
      *(_DWORD *)std::string buf = 136315394;
      CFStringRef v35 = v28;
      __int16 v36 = 2080;
      CFStringRef v37 = "Render";
      _os_log_error_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_ERROR, "[%s|%s] Trying to render while initialization or clean-up is in process", buf, 0x16u);
    }
    goto LABEL_11;
  }
  if (!*((unsigned char *)this + 17) || (unsigned __int8 v8 = atomic_load((unsigned __int8 *)this + 8977), (v8 & 1) == 0))
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    CFStringRef v9 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      unsigned int v29 = (void *)((char *)this + 3368);
      if (*((char *)this + 3391) < 0) {
        unsigned int v29 = (void *)*v29;
      }
      *(_DWORD *)std::string buf = 136315394;
      CFStringRef v35 = v29;
      __int16 v36 = 2080;
      CFStringRef v37 = "Render";
      _os_log_error_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_ERROR, "[%s|%s] Trying to render while uninitialized", buf, 0x16u);
    }
LABEL_11:

    uint64_t v10 = 4294956429;
    goto LABEL_12;
  }
  if (*((unsigned char *)this + 540) && *((_DWORD *)this + 134) == 1)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    float v12 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = (void *)((char *)this + 3368);
      if (*((char *)this + 3391) < 0) {
        uint64_t v13 = (void *)*v13;
      }
      *(_DWORD *)std::string buf = 136315394;
      CFStringRef v35 = v13;
      __int16 v36 = 2080;
      CFStringRef v37 = "Render";
      _os_log_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_DEFAULT, "[%s|%s] Switching from ProcessMultiple to Render without reinitializing", buf, 0x16u);
    }
  }
  *((_DWORD *)this + 134) = 0;
  *((unsigned char *)this + 540) = 1;
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 128), 0);
  BufferList = (AudioBufferList *)ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 144));
  BOOL v16 = (const AudioBufferList *)AUSM::ABLBuffer::setupBufferList((AUSpatialMixerV2 *)((char *)this + 2736), *(_DWORD *)(Element + 108), 0, a4, 4);
  v40[0] = (AudioBufferList *)v16;
  uint64_t v17 = *((void *)this + 15);
  if (v17) {
    uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 24))(v17);
  }
  else {
    uint64_t v18 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
  }
  int v19 = AUSpatialMixerV2::ProcessMultipleBufferListsSlicingPrivate(this, a2, a4, v18, 0, 1, v40, a3);
  if (v19)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    unsigned __int8 v20 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      uint64_t v30 = (void *)((char *)this + 3368);
      if (*((char *)this + 3391) < 0) {
        uint64_t v30 = (void *)*v30;
      }
      *(_DWORD *)std::string buf = 136315650;
      CFStringRef v35 = v30;
      __int16 v36 = 2080;
      CFStringRef v37 = "Render";
      __int16 v38 = 1024;
      int v39 = v19;
      _os_log_error_impl(&dword_1BB0CE000, v20, OS_LOG_TYPE_ERROR, "[%s|%s] PMBLSP return an error %d", buf, 0x1Cu);
    }
  }
  uint64_t v10 = AudioConverterConvertComplexBuffer(*((AudioConverterRef *)this + 364), a4, v16, BufferList);
  if (v10)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    uint64_t v21 = (id)getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_34;
    }
    CFStringRef v31 = (void *)((char *)this + 3368);
    if (*((char *)this + 3391) < 0) {
      CFStringRef v31 = (void *)*v31;
    }
    *(_DWORD *)std::string buf = 136315650;
    CFStringRef v35 = v31;
    __int16 v36 = 2080;
    CFStringRef v37 = "Render";
    __int16 v38 = 1024;
    int v39 = v10;
    v27 = "[%s|%s] ConvertOutputData ERROR: uint64_t result = %d";
LABEL_57:
    _os_log_debug_impl(&dword_1BB0CE000, v21, OS_LOG_TYPE_DEBUG, v27, buf, 0x1Cu);
LABEL_34:

    goto LABEL_12;
  }
  if (*((void *)this + 382))
  {
    unsigned __int8 v22 = atomic_load((unsigned __int8 *)this + 3444);
    BOOL v23 = (v22 & 1) == 0;
    CFStringRef v24 = (uint64_t (*)(void, uint64_t, AudioBufferList *))MEMORY[0x1E4F4EA80];
    if (v23) {
      CFStringRef v24 = (uint64_t (*)(void, uint64_t, AudioBufferList *))MEMORY[0x1E4F4EA88];
    }
    int v25 = v24(*((void *)this + 382), a4, BufferList);
    if (v25)
    {
      if (getAUSMV2Log(void)::onceToken != -1) {
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
      }
      uint64_t v21 = (id)getAUSMV2Log(void)::gLog;
      if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_34;
      }
      __int16 v26 = (void *)((char *)this + 3368);
      if (*((char *)this + 3391) < 0) {
        __int16 v26 = (void *)*v26;
      }
      *(_DWORD *)std::string buf = 136315650;
      CFStringRef v35 = v26;
      __int16 v36 = 2080;
      CFStringRef v37 = "Render";
      __int16 v38 = 1024;
      int v39 = v25;
      CFStringRef v27 = "[%s|%s] ERROR: writing data to output file, %d";
      goto LABEL_57;
    }
  }
LABEL_12:
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v32);
  return v10;
}

void sub_1BB3CE00C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t AUSpatialMixerV2::ProcessMultipleBufferListsSlicingPrivate(AUSpatialMixerV2 *this, unsigned int *a2, signed int a3, uint64_t a4, AudioBufferList **a5, uint64_t a6, AudioBufferList **a7, const AudioBufferList **a8)
{
  v398 = a8;
  v390 = a7;
  uint64_t v392 = a6;
  uint64_t v393 = a4;
  signed int v391 = a3;
  v395 = a2;
  v417[20] = *MEMORY[0x1E4F143B8];
  uint64_t v388 = *((void *)this + 67);
  v389 = (_DWORD *)((char *)this + 536);
  v399 = (AudioBufferList **)*((void *)this + 68);
  int v10 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(*v399)[3].mBuffers, 0) + 88);
  if (v10 != 1885564203)
  {
    unsigned __int8 v11 = atomic_load((unsigned __int8 *)v399 + 96);
    if ((v11 & 1) == 0)
    {
      float v12 = (const AudioBufferList **)a5;
      goto LABEL_4;
    }
  }
  if (AUSM::Metadata::mTraceLevel >= 1)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    CFURLRef v89 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v89, OS_LOG_TYPE_INFO))
    {
      CFStringRef v90 = v399 + 13;
      if (*((char *)v399 + 127) < 0) {
        CFStringRef v90 = (AudioBufferList **)*v90;
      }
      uint64_t v91 = (uint64_t)*v398;
      *(_DWORD *)v409 = 136315906;
      *(void *)&v409[4] = v90;
      *(_WORD *)&v409[12] = 2080;
      *(void *)&v409[14] = "ingestEABL";
      *(_WORD *)&v409[22] = 1024;
      *(_DWORD *)&v409[24] = v391;
      *(_WORD *)&v409[28] = 2048;
      *(void *)&v409[30] = v91;
      _os_log_impl(&dword_1BB0CE000, v89, OS_LOG_TYPE_INFO, "[%s|%s] EABL ingestion: inPullSizeThisTime = %u, timestamp = %f", v409, 0x26u);
    }
  }
  unsigned __int8 v92 = atomic_load((unsigned __int8 *)v399 + 96);
  if (v92)
  {
    v400 = 0;
    if (*((unsigned char *)this + 540) && *((_DWORD *)this + 134))
    {
      if (!a5)
      {
LABEL_143:
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        uint64_t v94 = 4294900553;
        uint64_t v97 = (id)getAUSMV2Log(void)::gLog;
        if (!os_log_type_enabled(v97, OS_LOG_TYPE_ERROR)) {
          goto LABEL_494;
        }
        CFDictionaryRef v98 = v399 + 13;
        if (*((char *)v399 + 127) < 0) {
          CFDictionaryRef v98 = (AudioBufferList **)*v98;
        }
        *(_DWORD *)v409 = 136315394;
        *(void *)&v409[4] = v98;
        *(_WORD *)&v409[12] = 2080;
        *(void *)&v409[14] = "ingestEABL";
        v99 = "[%s|%s] EABL ingestion: Invalid buffer list or invalid number of buffers lists";
        CFURLRef v100 = v97;
        uint32_t v101 = 22;
        goto LABEL_149;
      }
    }
    else if (!a5)
    {
      *((_DWORD *)this + 134) = 1;
      *((unsigned char *)this + 540) = 1;
      uint64_t Element = (AUSpatialMixerV2InputElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(*v399)[3].mBuffers, 0);
      v104 = v399[11];
      LODWORD(v104[3].mBuffers[0].mData) = *(_DWORD *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(*v399)[3].mBuffers, 0)+ 104);
      if (!*(void *)&v104[1].mBuffers[0].mNumberChannels) {
        __assert_rtn("setupBufferList", "AUSpatialMixerV2Buffers.h", 376, "mEABL.get()");
      }
      ExtendedAudioBufferList_PrepareWithNumberOfBuffers();
      v105 = *(void **)&v104->mBuffers[0].mNumberChannels;
      int64_t v106 = (char *)v104->mBuffers[0].mData - (char *)v105;
      if (v106 >= 1) {
        bzero(v105, v106);
      }
      v107 = *(AudioBufferList **)&v104[1].mBuffers[0].mNumberChannels;
      if (v107 && v107[2].mBuffers[0].mNumberChannels == 1 && LODWORD(v104[3].mBuffers[0].mData) == 4)
      {
        unsigned int mNumberBuffers = v107[2].mNumberBuffers;
        uint64_t v109 = *(void *)&v104->mBuffers[0].mNumberChannels;
        unint64_t v110 = ((unint64_t)v104->mBuffers[0].mData - v109) >> 3;
        if (mNumberBuffers < v110) {
          LODWORD(v110) = v107[2].mNumberBuffers;
        }
        if (v110)
        {
          unint64_t v111 = 0;
          p_int mData = &v107[2].mBuffers[0].mData;
          do
          {
            int v113 = *p_mData;
            p_mData += 2;
            *(void *)(v109 + 8 * v111++) = v113;
            uint64_t v109 = *(void *)&v104->mBuffers[0].mNumberChannels;
            unint64_t v114 = ((unint64_t)v104->mBuffers[0].mData - v109) >> 3;
            if (mNumberBuffers >= v114) {
              unint64_t v114 = v114;
            }
            else {
              unint64_t v114 = mNumberBuffers;
            }
          }
          while (v111 < v114);
          v107 = *(AudioBufferList **)&v104[1].mBuffers[0].mNumberChannels;
        }
      }
      char v115 = v107 + 2;
      uint64_t v94 = AUSpatialMixerV2InputElement::PullSharedInput(Element, v107 + 2, v395, (const AudioTimeStamp *)v398, 0, v391);
      if (v94)
      {
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        uint64_t v97 = (id)getAUSMV2Log(void)::gLog;
        if (!os_log_type_enabled(v97, OS_LOG_TYPE_ERROR)) {
          goto LABEL_494;
        }
        v116 = v399 + 13;
        if (*((char *)v399 + 127) < 0) {
          v116 = (AudioBufferList **)*v116;
        }
        *(_DWORD *)v409 = 136315650;
        *(void *)&v409[4] = v116;
        *(_WORD *)&v409[12] = 2080;
        *(void *)&v409[14] = "ingestEABL";
        *(_WORD *)&v409[22] = 1024;
        *(_DWORD *)&v409[24] = v94;
        v99 = "[%s|%s] EABL ingestion: err #%d while pulling the input";
        CFURLRef v100 = v97;
        uint32_t v101 = 28;
LABEL_149:
        _os_log_error_impl(&dword_1BB0CE000, v100, OS_LOG_TYPE_ERROR, v99, v409, v101);
LABEL_494:

        goto LABEL_608;
      }
      v400 = v115;
      uint64_t v393 = 1;
      a5 = &v400;
    }
    if (!*a5 || v393 != 1) {
      goto LABEL_143;
    }
    if (v10 == 1885564203) {
      uint64_t MetadataFrame = AudioBufferList_GetMetadataFrame(*a5);
    }
    else {
      uint64_t MetadataFrame = 0;
    }
    if (AUSM::Metadata::mTraceLevel >= 1)
    {
      if (getAUSMV2Log(void)::onceToken != -1) {
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
      }
      CFURLRef v117 = (id)getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled(v117, OS_LOG_TYPE_INFO))
      {
        v118 = v399 + 13;
        if (*((char *)v399 + 127) < 0) {
          v118 = (AudioBufferList **)*v118;
        }
        CFTypeRef v119 = "present";
        *(_DWORD *)v409 = 136315650;
        *(void *)&v409[4] = v118;
        *(_WORD *)&v409[12] = 2080;
        *(void *)&v409[14] = "ingestEABL";
        if (!MetadataFrame) {
          CFTypeRef v119 = "nullptr";
        }
        *(_WORD *)&v409[22] = 2080;
        *(void *)&v409[24] = v119;
        _os_log_impl(&dword_1BB0CE000, v117, OS_LOG_TYPE_INFO, "[%s|%s] EABL ingestion: mdFrame: %s", v409, 0x20u);
      }
    }
    float v12 = (const AudioBufferList **)v399[7];
    CFTypeRef v120 = *v12;
    UInt32 v121 = (*v12)->mNumberBuffers;
    if (v121 == (*a5)->mNumberBuffers)
    {
      CFTypeRef v122 = v399[7];
      if (v121)
      {
        unint64_t v123 = 0;
        uint64_t v124 = 8;
        do
        {
          *(_OWORD *)((char *)&v120->mNumberBuffers + v124) = *(_OWORD *)((char *)&(*a5)->mNumberBuffers + v124);
          ++v123;
          CFTypeRef v120 = *v12;
          v124 += 16;
        }
        while (v123 < (*v12)->mNumberBuffers);
        CFTypeRef v122 = v399[7];
      }
      unint64_t v125 = (char *)v399[8] - (char *)v122;
      uint64_t v393 = v125 >> 3;
      if ((v125 >> 3) < 2) {
        goto LABEL_198;
      }
      unint64_t v126 = 0;
      unint64_t v127 = (v125 >> 3);
      uint64_t v128 = 1;
      while (1)
      {
        v129 = v12[v128];
        uint64_t v130 = v129->mNumberBuffers;
        if (!v130) {
          goto LABEL_197;
        }
        uint64_t v131 = (16 * v126) | 8;
        mBuffers = v129->mBuffers;
        do
        {
          if (v126 >= (*a5)->mNumberBuffers)
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            uint64_t v97 = (id)getAUSMV2Log(void)::gLog;
            if (!os_log_type_enabled(v97, OS_LOG_TYPE_ERROR)) {
              goto LABEL_493;
            }
            v371 = v399 + 13;
            if (*((char *)v399 + 127) < 0) {
              v371 = (AudioBufferList **)*v371;
            }
            *(_DWORD *)v409 = 136315394;
            *(void *)&v409[4] = v371;
            *(_WORD *)&v409[12] = 2080;
            *(void *)&v409[14] = "ingestEABL";
            v256 = "[%s|%s] EABL ingestion: Mismatch between the configured number of channels and the actual number of c"
                   "hannels given on the call";
LABEL_618:
            _os_log_error_impl(&dword_1BB0CE000, v97, OS_LOG_TYPE_ERROR, v256, v409, 0x16u);
LABEL_493:
            uint64_t v94 = 4294956428;
            goto LABEL_494;
          }
          *mBuffers++ = *(AudioBuffer *)((char *)&(*a5)->mNumberBuffers + v131);
          ++v126;
          v131 += 16;
          --v130;
        }
        while (v130);
        unint64_t v126 = v126;
LABEL_197:
        if (++v128 >= v127)
        {
LABEL_198:
          if (!MetadataFrame) {
            goto LABEL_4;
          }
          *(void *)&long long v384 = AudioMetadataFrame_GetHeader();
          if (!(void)v384) {
            goto LABEL_4;
          }
          LODWORD(v396) = *(_DWORD *)(v384 + 40);
          int v134 = AUSM::Metadata::mTraceLevel;
          if (AUSM::Metadata::mTraceLevel >= 1)
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            CFURLRef v135 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v135, OS_LOG_TYPE_INFO))
            {
              float v136 = v399 + 13;
              if (*((char *)v399 + 127) < 0) {
                float v136 = (AudioBufferList **)*v136;
              }
              uint64_t v137 = *(void *)v384;
              uint64_t v138 = *(void *)(v384 + 8);
              int v139 = *(_DWORD *)(v384 + 16);
              int v140 = *(_DWORD *)(v384 + 20);
              int v141 = *(unsigned __int8 *)(v384 + 24);
              int v142 = *(unsigned __int8 *)(v384 + 25);
              int v143 = *(_DWORD *)(v384 + 28);
              int v144 = *(_DWORD *)(v384 + 32);
              int v145 = *(_DWORD *)(v384 + 40);
              *(_DWORD *)v409 = 136317698;
              *(void *)&v409[4] = v136;
              *(_WORD *)&v409[12] = 2080;
              *(void *)&v409[14] = "ingestEABL";
              *(_WORD *)&v409[22] = 2048;
              *(void *)&v409[24] = v137;
              *(_WORD *)&v409[32] = 2048;
              *(void *)&v409[34] = v138;
              *(_WORD *)&v409[42] = 1024;
              *(_DWORD *)&v409[44] = v139;
              *(_WORD *)&v409[48] = 1024;
              *(_DWORD *)&v409[50] = v140;
              *(_WORD *)&v409[54] = 1024;
              *(_DWORD *)&v409[56] = v141;
              *(_WORD *)&v409[60] = 1024;
              *(_DWORD *)&v409[62] = v142;
              __int16 v410 = 1024;
              int v411 = v143;
              __int16 v412 = 1024;
              int v413 = v144;
              __int16 v414 = 1024;
              LODWORD(v415) = v145;
              _os_log_impl(&dword_1BB0CE000, v135, OS_LOG_TYPE_INFO, "[%s|%s] EABL ingestion: mdFrameHeader: frameStartTime = %f, frameDuration = %f, trimmedSamplesFromBeginning = %u, trimmedSamplesFromEnd = %u, type = %u, reserved1 = %u, intermediateCountToFull = %u, headerSize = %u, eventCFIndex Count = %u", v409, 0x54u);
            }

            int v134 = AUSM::Metadata::mTraceLevel;
          }
          v146 = (double *)v384;
          UInt32 v147 = *(_DWORD *)(v384 + 16);
          v148 = v399[2];
          if (*(&v148[1].mNumberBuffers + 1) > v147) {
            UInt32 v147 = *(&v148[1].mNumberBuffers + 1);
          }
          *(&v148[1].mNumberBuffers + 1) = v147;
          v148[1].unsigned int mNumberBuffers = v147 + llround(*v146) + llround(v146[7]);
          if (v134 >= 1)
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            v149 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v149, OS_LOG_TYPE_INFO))
            {
              unint64_t v150 = v399 + 13;
              if (*((char *)v399 + 127) < 0) {
                unint64_t v150 = (AudioBufferList **)*v150;
              }
              int v151 = llround(*(double *)v384);
              v152 = v399[2];
              UInt32 v153 = v152[1].mNumberBuffers;
              LODWORD(v152) = *(&v152[1].mNumberBuffers + 1);
              int v154 = llround(*(double *)(v384 + 56));
              *(_DWORD *)v409 = 136316418;
              *(void *)&v409[4] = v150;
              *(_WORD *)&v409[12] = 2080;
              *(void *)&v409[14] = "ingestEABL";
              *(_WORD *)&v409[22] = 1024;
              *(_DWORD *)&v409[24] = v153;
              *(_WORD *)&v409[28] = 1024;
              *(_DWORD *)&v409[30] = v151;
              *(_WORD *)&v409[34] = 1024;
              *(_DWORD *)&v409[36] = v152;
              *(_WORD *)&v409[40] = 1024;
              *(_DWORD *)&v409[42] = v154;
              _os_log_impl(&dword_1BB0CE000, v149, OS_LOG_TYPE_INFO, "[%s|%s] EABL ingestion: mFirstAudioBufferSampleTime (%d) = mdFrameHeader->frameStartTime (%d) + mPImpl->mSaveTrimmedSamplesFromBeginning (%d) + mdEvent->eventStartTime (%d)", v409, 0x2Eu);
            }
          }
          if (!v396) {
            goto LABEL_4;
          }
          v397 = (unsigned __int8 *)(v384 + 44);
          *(void *)&long long v387 = v399 + 13;
          v380 = (APAC **)(v399 + 3);
          *(void *)&long long v394 = &v409[32];
          v372 = &v409[36];
          uint64_t v155 = *MEMORY[0x1E4FBA410];
          uint64_t v376 = *(void *)(MEMORY[0x1E4FBA410] + 24);
          uint64_t v377 = v155;
          v374 = v417;
          v375 = &v409[16];
          *(void *)&long long v133 = 136316930;
          long long v381 = v133;
          *(void *)&long long v133 = 136315650;
          long long v385 = v133;
          *(void *)&long long v133 = 136315394;
          long long v379 = v133;
          *(void *)&long long v133 = 136315906;
          long long v378 = v133;
          while (2)
          {
            if (AUSM::Metadata::mTraceLevel >= 1)
            {
              if (getAUSMV2Log(void)::onceToken != -1) {
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
              }
              v156 = (id)getAUSMV2Log(void)::gLog;
              if (os_log_type_enabled(v156, OS_LOG_TYPE_INFO))
              {
                uint64_t v157 = v387;
                if (*((char *)v399 + 127) < 0) {
                  uint64_t v157 = *(void *)v387;
                }
                int v158 = *v397;
                int v159 = *((_DWORD *)v397 + 1);
                int v160 = *((_DWORD *)v397 + 2);
                uint64_t v161 = *(void *)(v397 + 12);
                int v162 = *((_DWORD *)v397 + 5);
                int v163 = *((_DWORD *)v397 + 6);
                *(_DWORD *)v409 = v381;
                *(void *)&v409[4] = v157;
                *(_WORD *)&v409[12] = 2080;
                *(void *)&v409[14] = "ingestEABL";
                *(_WORD *)&v409[22] = 1024;
                *(_DWORD *)&v409[24] = v158;
                *(_WORD *)&v409[28] = 1024;
                *(_DWORD *)&v409[30] = v159;
                *(_WORD *)&v409[34] = 1024;
                *(_DWORD *)&v409[36] = v160;
                *(_WORD *)&v409[40] = 2048;
                *(void *)&v409[42] = v161;
                *(_WORD *)&v409[50] = 1024;
                *(_DWORD *)&v409[52] = v162;
                *(_WORD *)&v409[56] = 1024;
                *(_DWORD *)&v409[58] = v163;
                _os_log_impl(&dword_1BB0CE000, v156, OS_LOG_TYPE_INFO, "[%s|%s] EABL ingestion: mdEvent: eventType = %u, channelIndex = %u, eventSize = %u, eventStartTime = %f, audioFrameCFIndex Count = %u, version = %u", v409, 0x3Eu);
              }
            }
            if (*v397 != 1)
            {
              if (*v397) {
                goto LABEL_246;
              }
              if (getAUSMV2Log(void)::onceToken != -1) {
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
              }
              v164 = (id)getAUSMV2Log(void)::gLog;
              if (!os_log_type_enabled(v164, OS_LOG_TYPE_ERROR)) {
                goto LABEL_245;
              }
              uint64_t v165 = v387;
              if (*((char *)v399 + 127) < 0) {
                uint64_t v165 = *(void *)v387;
              }
              *(_DWORD *)v409 = v379;
              *(void *)&v409[4] = v165;
              *(_WORD *)&v409[12] = 2080;
              *(void *)&v409[14] = "processAudioFormatExtendedEvent";
              v166 = v164;
              v167 = "[%s|%s] AudioFormatExtended metadata ingestion is not functional";
              uint32_t v168 = 22;
LABEL_401:
              _os_log_error_impl(&dword_1BB0CE000, v166, OS_LOG_TYPE_ERROR, v167, v409, v168);
              goto LABEL_245;
            }
            v169 = v397;
            uint64_t v170 = *((unsigned int *)v397 + 7);
            v171 = (void *)*((void *)v397 + 4);
            v172 = v399;
            v173 = v399[2];
            *(void *)&v173[3].unsigned int mNumberBuffers = v384;
            *(void *)&v173[3].mBuffers[0].unsigned int mNumberChannels = v169;
            v174 = (APAC::Metadata *)v172[3];
            if (!v174)
            {
              if (getAUSMV2Log(void)::onceToken != -1) {
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
              }
              v175 = (id)getAUSMV2Log(void)::gLog;
              if (os_log_type_enabled(v175, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v248 = v387;
                if (*((char *)v399 + 127) < 0) {
                  uint64_t v248 = *(void *)v387;
                }
                unsigned __int8 v249 = atomic_load((unsigned __int8 *)v399 + 96);
                _ZF = (v249 & 1) == 0;
                v250 = "configured";
                if (_ZF) {
                  v250 = "not configured";
                }
                *(_DWORD *)v409 = v385;
                *(void *)&v409[4] = v248;
                *(_WORD *)&v409[12] = 2080;
                *(void *)&v409[14] = "processAppleProprietaryEvent";
                *(_WORD *)&v409[22] = 2080;
                *(void *)&v409[24] = v250;
                _os_log_debug_impl(&dword_1BB0CE000, v175, OS_LOG_TYPE_DEBUG, "[%s|%s] APAC flat metadata structure was not ready, late memory allocation in a RT context, to be fixed. ImmersiveRendererData: %s", v409, 0x20u);
              }

              operator new();
            }
            uint64_t v176 = APAC::MetadataBitStreamParser::parse((APAC::MetadataBitStreamParser *)v172[1], v171, v170, v174);
            if (v176)
            {
              uint64_t v178 = v176;
              if (getAUSMV2Log(void)::onceToken != -1) {
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
              }
              v164 = (id)getAUSMV2Log(void)::gLog;
              if (!os_log_type_enabled(v164, OS_LOG_TYPE_ERROR)) {
                goto LABEL_245;
              }
              uint64_t v247 = v387;
              if (*((char *)v399 + 127) < 0) {
                uint64_t v247 = *(void *)v387;
              }
              *(_DWORD *)v409 = v385;
              *(void *)&v409[4] = v247;
              *(_WORD *)&v409[12] = 2080;
              *(void *)&v409[14] = "processAppleProprietaryEvent";
              *(_WORD *)&v409[22] = 2080;
              *(void *)&v409[24] = v178;
              v166 = v164;
              v167 = "[%s|%s] Metadata parsing error: %s";
              uint32_t v168 = 32;
              goto LABEL_401;
            }
            int v179 = AUSM::Metadata::mTraceLevel;
            if (AUSM::Metadata::mTraceLevel <= 1) {
              goto LABEL_290;
            }
            v180 = *v380;
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            v181 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v181, OS_LOG_TYPE_INFO))
            {
              uint64_t v182 = v387;
              if (*((char *)v399 + 127) < 0) {
                uint64_t v182 = *(void *)v387;
              }
              *(_DWORD *)v409 = v379;
              *(void *)&v409[4] = v182;
              *(_WORD *)&v409[12] = 2080;
              *(void *)&v409[14] = "dumpAPE";
              _os_log_impl(&dword_1BB0CE000, v181, OS_LOG_TYPE_INFO, "[%s|%s] APAC Metadata JSON:", v409, 0x16u);
            }

            APAC::MetadataJSON(v180, (const APAC::Metadata *)4);
            std::istringstream::basic_istringstream[abi:ne180100]((uint64_t)v409, &v402);
            memset(&v401, 0, sizeof(v401));
            while (2)
            {
              std::ios_base::getloc((const std::ios_base *)&v409[*(void *)(*(void *)v409 - 24)]);
              v183 = std::locale::use_facet((const std::locale *)&v403, MEMORY[0x1E4FBA258]);
              unsigned __int8 v184 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v183->__vftable[2].~facet_0)(v183, 10);
              std::locale::~locale((std::locale *)&v403);
              MEMORY[0x1C185CC50](&v403, v409, 1);
              if (!(_BYTE)v403) {
                goto LABEL_273;
              }
              if (SHIBYTE(v401.__r_.__value_.__r.__words[2]) < 0)
              {
                *v401.__r_.__value_.__l.__data_ = 0;
                v401.__r_.__value_.__l.__size_ = 0;
              }
              else
              {
                v401.__r_.__value_.__s.__data_[0] = 0;
                *((unsigned char *)&v401.__r_.__value_.__s + 23) = 0;
              }
              uint64_t v185 = 0;
              while (2)
              {
                v186 = *(void **)&v409[*(void *)(*(void *)v409 - 24) + 40];
                v187 = (unsigned char *)v186[3];
                if (v187 != (unsigned char *)v186[4])
                {
                  v186[3] = v187 + 1;
                  LOBYTE(v186) = *v187;
LABEL_264:
                  if (v184 == v186)
                  {
                    int v188 = 0;
                    goto LABEL_272;
                  }
                  std::string::push_back(&v401, (std::string::value_type)v186);
                  ++v185;
                  if (SHIBYTE(v401.__r_.__value_.__r.__words[2]) < 0
                    && v401.__r_.__value_.__l.__size_ == 0x7FFFFFFFFFFFFFF7)
                  {
                    int v188 = 4;
                    goto LABEL_272;
                  }
                  continue;
                }
                break;
              }
              LODWORD(v186) = (*(uint64_t (**)(void *))(*v186 + 80))(v186);
              if (v186 != -1) {
                goto LABEL_264;
              }
              if (v185) {
                int v188 = 2;
              }
              else {
                int v188 = 6;
              }
LABEL_272:
              std::ios_base::clear((std::ios_base *)&v409[*(void *)(*(void *)v409 - 24)], *(_DWORD *)&v409[*(void *)(*(void *)v409 - 24) + 32] | v188);
LABEL_273:
              if ((*(unsigned char *)(v394 + *(void *)(*(void *)v409 - 24)) & 5) == 0)
              {
                if (getAUSMV2Log(void)::onceToken != -1) {
                  dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                }
                v189 = (id)getAUSMV2Log(void)::gLog;
                if (os_log_type_enabled(v189, OS_LOG_TYPE_INFO))
                {
                  v190 = (void *)v387;
                  if (*((char *)v399 + 127) < 0) {
                    v190 = *(void **)v387;
                  }
                  v191 = &v401;
                  if ((v401.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    v191 = (std::string *)v401.__r_.__value_.__r.__words[0];
                  }
                  int v403 = v385;
                  p_unsigned int mNumberBuffers = v190;
                  __int16 v405 = 2080;
                  v406 = "dumpAPE";
                  __int16 v407 = 2080;
                  v408 = v191;
                  _os_log_impl(&dword_1BB0CE000, v189, OS_LOG_TYPE_INFO, "[%s|%s] %s", (uint8_t *)&v403, 0x20u);
                }

                continue;
              }
              break;
            }
            if (SHIBYTE(v401.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v401.__r_.__value_.__l.__data_);
            }
            *(void *)v409 = v377;
            *(void *)&v409[*(void *)(v377 - 24)] = v376;
            *(void *)&v409[16] = MEMORY[0x1E4FBA470] + 16;
            if (v416 < 0) {
              operator delete(v415);
            }
            std::streambuf::~streambuf();
            std::istream::~istream();
            MEMORY[0x1C185D210](v374);
            if (SHIBYTE(v402.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v402.__r_.__value_.__l.__data_);
            }
            int v179 = AUSM::Metadata::mTraceLevel;
LABEL_290:
            v192 = v399[2];
            v193 = v399[3];
            if (v179 >= 1)
            {
              if (getAUSMV2Log(void)::onceToken != -1) {
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
              }
              v194 = (id)getAUSMV2Log(void)::gLog;
              if (os_log_type_enabled(v194, OS_LOG_TYPE_INFO))
              {
                v195 = v192 + 2;
                if (SHIBYTE(v192[2].mBuffers[0].mData) < 0) {
                  v195 = *(AudioBufferList **)&v195->mNumberBuffers;
                }
                *(_DWORD *)v409 = v379;
                *(void *)&v409[4] = v195;
                *(_WORD *)&v409[12] = 2080;
                *(void *)&v409[14] = "onAPACMetadataAvailable";
                _os_log_impl(&dword_1BB0CE000, v194, OS_LOG_TYPE_INFO, "[%s|%s] Applying", v409, 0x16u);
              }
            }
            int v196 = *((unsigned __int8 *)&v193->mNumberBuffers + 4);
            BYTE4(v192[3].mBuffers[0].mData) = v196;
            int v197 = *((unsigned __int8 *)&v193->mNumberBuffers + 5);
            BYTE5(v192[3].mBuffers[0].mData) = v197;
            if (v196 == 1 && v197 == 2)
            {
              if (*((unsigned char *)&v193->mNumberBuffers + 6)) {
                AUSM::Metadata::PImpl::ParseSceneComponentStaticData((uint64_t)v192, v193[1161].mBuffers, v177);
              }
              *(void *)&long long v386 = BYTE4(v193[8612].mBuffers[0].mData);
              if ((void)v386)
              {
                uint64_t v229 = 0;
                v383 = v192 + 2;
                _X28 = v193 + 8613;
                do
                {
                  LODWORD(v192[3].mBuffers[0].mData) = v229;
                  __asm { PRFM            #0, [X28,#0x4C30] }
                  if (LOBYTE(_X28->mNumberBuffers) == 1)
                  {
                    AUSM::Metadata::PImpl::ParseDynamicObjectMetadata((uint64_t)v192, (unsigned __int8 *)&_X28[2].mBuffers[0].mData + 4, v177);
                    int mData = (int)v192[3].mBuffers[0].mData;
                  }
                  else
                  {
                    int mData = v229;
                  }
                  _X9 = _X28[1128].mBuffers;
                  unsigned int v236 = mData + 1;
                  unsigned int v237 = llround(**(double **)&v192[3].mNumberBuffers)
                       - v192[1].mNumberBuffers
                       + llround(*(double *)(*(void *)&v192[3].mBuffers[0].mNumberChannels + 12));
                  __asm { PRFM            #0, [X9] }
                  if (AUSM::Metadata::PImpl::setParameter((AUSM::Metadata::PImpl *)v192, 0x16u, mData + 1, v237, -*(float *)&_X28[315].mBuffers[0].mData, 0))
                  {
                    if (getAUSMV2Log(void)::onceToken != -1) {
                      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                    }
                    v239 = (id)getAUSMV2Log(void)::gLog;
                    if (os_log_type_enabled(v239, OS_LOG_TYPE_DEBUG))
                    {
                      v241 = v383;
                      if (SHIBYTE(v192[2].mBuffers[0].mData) < 0) {
                        v241 = *(AudioBufferList **)&v383->mNumberBuffers;
                      }
                      int v242 = (int)v192[3].mBuffers[0].mData;
                      *(_DWORD *)v409 = v378;
                      *(void *)&v409[4] = v241;
                      *(_WORD *)&v409[12] = 2080;
                      *(void *)&v409[14] = "ParseProprietaryDynamicMetadata";
                      *(_WORD *)&v409[22] = 1024;
                      *(_DWORD *)&v409[24] = v242;
                      *(_WORD *)&v409[28] = 1024;
                      *(_DWORD *)&v409[30] = v236;
                      _os_log_debug_impl(&dword_1BB0CE000, v239, OS_LOG_TYPE_DEBUG, "[%s|%s] Could not set source yaw on sc #%u, input element #%u", v409, 0x22u);
                    }
                  }
                  if (AUSM::Metadata::PImpl::setParameter((AUSM::Metadata::PImpl *)v192, 0x17u, v236, v237, *((float *)&_X28[315].mBuffers[0].mData + 1), 0))
                  {
                    if (getAUSMV2Log(void)::onceToken != -1) {
                      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                    }
                    v240 = (id)getAUSMV2Log(void)::gLog;
                    if (os_log_type_enabled(v240, OS_LOG_TYPE_DEBUG))
                    {
                      v243 = v383;
                      if (SHIBYTE(v192[2].mBuffers[0].mData) < 0) {
                        v243 = *(AudioBufferList **)&v383->mNumberBuffers;
                      }
                      int v244 = (int)v192[3].mBuffers[0].mData;
                      *(_DWORD *)v409 = v378;
                      *(void *)&v409[4] = v243;
                      *(_WORD *)&v409[12] = 2080;
                      *(void *)&v409[14] = "ParseProprietaryDynamicMetadata";
                      *(_WORD *)&v409[22] = 1024;
                      *(_DWORD *)&v409[24] = v244;
                      *(_WORD *)&v409[28] = 1024;
                      *(_DWORD *)&v409[30] = v236;
                      _os_log_debug_impl(&dword_1BB0CE000, v240, OS_LOG_TYPE_DEBUG, "[%s|%s] Could not set source pitch on sc #%u, input element #%u", v409, 0x22u);
                    }
                  }
                  ++v229;
                  _X28 = (AudioBufferList *)((char *)_X28 + 9752);
                }
                while ((void)v386 != v229);
              }
            }
            else if (v196 == 1 && v197 == 3)
            {
              v199 = (char *)&v193[60461].mBuffers[0].mData + 1;
              if (BYTE1(v193[60461].mBuffers[0].mData))
              {
                v200 = v193 + 60661;
                int v201 = *((unsigned __int8 *)&v193->mNumberBuffers + 6);
                v383 = v193 + 60661;
                if (v201)
                {
                  if (LOBYTE(v193[60462].mBuffers[0].mNumberChannels)) {
                    AUSM::Metadata::PImpl::ParseGlobalConfig((uint64_t)v192, (uint64_t)v193[60462].mBuffers);
                  }
                  unsigned int mNumberBuffers_low = LOWORD(v193[60462].mNumberBuffers);
                  v200 = v383;
                  if (-1431655765
                     * ((*(void *)&v200->mBuffers[0].mNumberChannels - *(void *)&v200->mNumberBuffers) >> 4) < mNumberBuffers_low)
                    unsigned int mNumberBuffers_low = -1431655765
                                       * ((*(void *)&v383->mBuffers[0].mNumberChannels
                                         - *(void *)&v383->mNumberBuffers) >> 4);
                  if (mNumberBuffers_low)
                  {
                    uint64_t v203 = 0;
                    uint64_t v204 = 48 * mNumberBuffers_low;
                    do
                    {
                      AUSM::Metadata::PImpl::ParseGroupConfig((uint64_t)v192, (unsigned __int16 *)(*(void *)&v383->mNumberBuffers + v203));
                      v203 += 48;
                    }
                    while (v204 != v203);
                  }
                }
                uint64_t v205 = *(unsigned __int16 *)(v199 + 7);
                LODWORD(v206) = *(unsigned __int16 *)(v199 + 7);
                if (0xB81DC085AE2E9061
                   * ((uint64_t)(*(void *)&v200[1].mBuffers[0].mNumberChannels - *(void *)&v200[1].mNumberBuffers) >> 3) != v205)
                {
                  if (getAUSMV2Log(void)::onceToken != -1) {
                    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                  }
                  v207 = (id)getAUSMV2Log(void)::gLog;
                  if (os_log_type_enabled(v207, OS_LOG_TYPE_ERROR))
                  {
                    v254 = v192 + 2;
                    if (SHIBYTE(v192[2].mBuffers[0].mData) < 0) {
                      v254 = *(AudioBufferList **)&v254->mNumberBuffers;
                    }
                    *(_DWORD *)v409 = v379;
                    *(void *)&v409[4] = v254;
                    *(_WORD *)&v409[12] = 2080;
                    *(void *)&v409[14] = "ParseRendererMetadata";
                    _os_log_error_impl(&dword_1BB0CE000, v207, OS_LOG_TYPE_ERROR, "[%s|%s] Inconsistent sizes in RendererMetadata", v409, 0x16u);
                  }

                  unint64_t v206 = 0xB81DC085AE2E9061
                       * ((uint64_t)(*(void *)&v383[1].mBuffers[0].mNumberChannels - *(void *)&v383[1].mNumberBuffers) >> 3);
                }
                if (v206 >= v205) {
                  unint64_t v206 = v205;
                }
                else {
                  unint64_t v206 = v206;
                }
                unint64_t v382 = v206;
                if (v206)
                {
                  uint64_t v208 = 0;
                  *(void *)&long long v386 = (char *)v192 + 104;
                  v373 = v192 + 2;
                  uint64_t v209 = 16;
                  do
                  {
                    uint64_t v210 = *(void *)&v383[1].mNumberBuffers;
                    if (*(unsigned char *)(v210 + 40200 * v208))
                    {
                      uint64_t v211 = v210 + 40200 * v208;
                      unsigned int v214 = *(unsigned __int16 *)(v211 + 2);
                      v213 = (unsigned __int16 *)(v211 + 2);
                      unsigned int v212 = v214;
                      uint64_t v215 = *(void *)v386;
                      if (!*(void *)v386) {
                        goto LABEL_335;
                      }
                      uint64_t v216 = v386;
                      do
                      {
                        unsigned int v217 = *(_DWORD *)(v215 + 32);
                        BOOL v218 = v217 >= v212;
                        if (v217 >= v212) {
                          v219 = (uint64_t *)v215;
                        }
                        else {
                          v219 = (uint64_t *)(v215 + 8);
                        }
                        if (v218) {
                          uint64_t v216 = v215;
                        }
                        uint64_t v215 = *v219;
                      }
                      while (*v219);
                      if (v216 != (void)v386 && *(_DWORD *)(v216 + 32) <= v212)
                      {
                        *(_DWORD *)v409 = v212;
                        *(void *)&v409[8] = v216 + 40;
                        LODWORD(v221) = *(unsigned __int8 *)(v210 + 40200 * v208 + 4);
                        if (v221 >= 0x21)
                        {
                          if (getAUSMV2Log(void)::onceToken != -1) {
                            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                          }
                          v222 = (id)getAUSMV2Log(void)::gLog;
                          if (os_log_type_enabled(v222, OS_LOG_TYPE_ERROR))
                          {
                            v228 = v373;
                            if (SHIBYTE(v192[2].mBuffers[0].mData) < 0) {
                              v228 = *(AudioBufferList **)&v373->mNumberBuffers;
                            }
                            int v403 = v379;
                            p_unsigned int mNumberBuffers = &v228->mNumberBuffers;
                            __int16 v405 = 2080;
                            v406 = "ParseGroupData";
                            _os_log_error_impl(&dword_1BB0CE000, v222, OS_LOG_TYPE_ERROR, "[%s|%s] Too many blocks", (uint8_t *)&v403, 0x16u);
                          }
                        }
                        if (v221 >= 0x20) {
                          uint64_t v221 = 32;
                        }
                        else {
                          uint64_t v221 = v221;
                        }
                        if (v221)
                        {
                          uint64_t v223 = v210 + v209;
                          do
                          {
                            int v224 = *(unsigned __int16 *)(v223 - 8);
                            *(_DWORD *)&v409[16] = v224;
                            if (*(unsigned char *)(v223 - 6)) {
                              int v225 = *(unsigned __int16 *)(v223 - 4);
                            }
                            else {
                              int v225 = *(_DWORD *)(*(void *)&v192[3].mBuffers[0].mNumberChannels + 20) - v224;
                            }
                            *(_DWORD *)&v409[20] = v225;
                            AUSM::Metadata::PImpl::ParseRendererData((AUSM::Metadata::PImpl *)v192, v223, (uint64_t)v409, v177);
                            v223 += 1256;
                            --v221;
                          }
                          while (v221);
                        }
                      }
                      else
                      {
LABEL_335:
                        if (getAUSMV2Log(void)::onceToken != -1) {
                          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                        }
                        v220 = (id)getAUSMV2Log(void)::gLog;
                        if (os_log_type_enabled(v220, OS_LOG_TYPE_ERROR))
                        {
                          v226 = v373;
                          if (SHIBYTE(v192[2].mBuffers[0].mData) < 0) {
                            v226 = *(AudioBufferList **)&v373->mNumberBuffers;
                          }
                          int v227 = *v213;
                          *(_DWORD *)v409 = v385;
                          *(void *)&v409[4] = v226;
                          *(_WORD *)&v409[12] = 2080;
                          *(void *)&v409[14] = "ParseGroupData";
                          *(_WORD *)&v409[22] = 1024;
                          *(_DWORD *)&v409[24] = v227;
                          _os_log_error_impl(&dword_1BB0CE000, v220, OS_LOG_TYPE_ERROR, "[%s|%s] GD: Group %u not found", v409, 0x1Cu);
                        }
                      }
                    }
                    ++v208;
                    v209 += 40200;
                  }
                  while (v208 != v382);
                }
              }
            }
            else
            {
              if (getAUSMV2Log(void)::onceToken != -1) {
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
              }
              v245 = (id)getAUSMV2Log(void)::gLog;
              if (os_log_type_enabled(v245, OS_LOG_TYPE_ERROR))
              {
                v251 = v192 + 2;
                if (SHIBYTE(v192[2].mBuffers[0].mData) < 0) {
                  v251 = *(AudioBufferList **)&v251->mNumberBuffers;
                }
                int v252 = BYTE4(v192[3].mBuffers[0].mData);
                int v253 = BYTE5(v192[3].mBuffers[0].mData);
                *(_DWORD *)v409 = v378;
                *(void *)&v409[4] = v251;
                *(_WORD *)&v409[12] = 2080;
                *(void *)&v409[14] = "onAPACMetadataAvailable";
                *(_WORD *)&v409[22] = 1024;
                *(_DWORD *)&v409[24] = v252;
                *(_WORD *)&v409[28] = 1024;
                *(_DWORD *)&v409[30] = v253;
                _os_log_error_impl(&dword_1BB0CE000, v245, OS_LOG_TYPE_ERROR, "[%s|%s] Unknown metadata version %u.%u", v409, 0x22u);
              }
            }
            if (AUSM::Metadata::mTraceLevel >= 1)
            {
              if (getAUSMV2Log(void)::onceToken != -1) {
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
              }
              v164 = (id)getAUSMV2Log(void)::gLog;
              if (os_log_type_enabled(v164, OS_LOG_TYPE_INFO))
              {
                v246 = v192 + 2;
                if (SHIBYTE(v192[2].mBuffers[0].mData) < 0) {
                  v246 = *(AudioBufferList **)&v246->mNumberBuffers;
                }
                *(_DWORD *)v409 = v379;
                *(void *)&v409[4] = v246;
                *(_WORD *)&v409[12] = 2080;
                *(void *)&v409[14] = "onAPACMetadataAvailable";
                _os_log_impl(&dword_1BB0CE000, v164, OS_LOG_TYPE_INFO, "[%s|%s] Applied", v409, 0x16u);
              }
LABEL_245:
            }
LABEL_246:
            v397 += *((unsigned int *)v397 + 2);
            LODWORD(v396) = v396 - 1;
            if (v396) {
              continue;
            }
            break;
          }
LABEL_4:
          v402.__r_.__value_.__r.__words[0] = (std::string::size_type)this + 3312;
          uint64_t v13 = caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::try_lock((uint64_t)this + 3312);
          *(void *)&long long v385 = (char *)this + 4776;
          v402.__r_.__value_.__s.__data_[8] = v13;
          unsigned int v14 = atomic_load((unsigned int *)this + 1154);
          _ZF = v14 != 2 || v13 == 0;
          if (!_ZF)
          {
            BOOL v16 = (char *)*((void *)this + 48);
            uint64_t v17 = (char *)*((void *)this + 49);
            if (v16 != v17)
            {
              long long v18 = *((_OWORD *)v398 + 1);
              *(_OWORD *)v409 = *(_OWORD *)v398;
              *(_OWORD *)&v409[16] = v18;
              long long v19 = *((_OWORD *)v398 + 3);
              *(_OWORD *)&v409[32] = *((_OWORD *)v398 + 2);
              *(_OWORD *)&v409[48] = v19;
              if (v390 && v12)
              {
                int v20 = v393;
                v397 = (unsigned __int8 *)v393;
                MEMORY[0x1F4188790](v13);
                v398 = (const AudioBufferList **)((char *)&v372 - v21);
                bzero((char *)&v372 - v21, v22);
                if (v20)
                {
                  CFStringRef v24 = 0;
                  do
                  {
                    if (v12[(void)v24])
                    {
                      MEMORY[0x1F4188790](v23);
                      __int16 v26 = (AudioBufferList *)((char *)&v372 - ((v25 + 23) & 0x1FFFFFFFF0));
                      bzero(v26, v27);
                      uint64_t v28 = v12[(void)v24]->mNumberBuffers;
                      v26->unsigned int mNumberBuffers = v28;
                      if (v28)
                      {
                        unint64_t v29 = 0;
                        uint64_t v30 = 16 * v28;
                        do
                        {
                          v26->mBuffers[v29 / 0x10] = v12[(void)v24]->mBuffers[v29 / 0x10];
                          v29 += 16;
                        }
                        while (v30 != v29);
                      }
                    }
                    else
                    {
                      __int16 v26 = 0;
                    }
                    v398[(void)v24++] = v26;
                  }
                  while (v24 != v397);
                }
                int v31 = v392;
                uint64_t v396 = v392;
                MEMORY[0x1F4188790](v23);
                v399 = (AudioBufferList **)((char *)&v372 - v32);
                bzero((char *)&v372 - v32, v33);
                if (v31)
                {
                  uint64_t v35 = 0;
                  do
                  {
                    __int16 v36 = v390[v35];
                    if (v36)
                    {
                      MEMORY[0x1F4188790](v34);
                      __int16 v38 = (AudioBufferList *)((char *)&v372 - ((v37 + 23) & 0x1FFFFFFFF0));
                      bzero(v38, v39);
                      uint64_t v40 = v36->mNumberBuffers;
                      v38->unsigned int mNumberBuffers = v40;
                      if (v40)
                      {
                        unint64_t v41 = 0;
                        uint64_t v42 = 16 * v40;
                        do
                        {
                          v38->mBuffers[v41 / 0x10] = v36->mBuffers[v41 / 0x10];
                          v41 += 16;
                        }
                        while (v42 != v41);
                      }
                    }
                    else
                    {
                      __int16 v38 = 0;
                    }
                    v399[v35++] = v38;
                  }
                  while (v35 != v396);
                }
                unint64_t v43 = 0;
                long long v44 = v16;
                do
                {
                  switch(*((_DWORD *)v44 + 3))
                  {
                    case 1:
                      v43 += 3;
                      break;
                    case 2:
                      v43 += 4;
                      break;
                    case 3:
                      v43 += 2;
                      break;
                    case 4:
                      uint64_t v45 = v43 + 2;
                      if (*((_DWORD *)v44 + 2) <= 2u)
                      {
                        unsigned int v46 = *((_DWORD *)v44 + 5);
                        if (v46 >= 0x81) {
                          uint64_t v45 = v43 + ((v46 - 1) >> 7) - 1 + 3;
                        }
                      }
                      unint64_t v43 = v45 + 1;
                      break;
                    default:
                      ++v43;
                      break;
                  }
                  v44 += 32;
                }
                while (v44 != v17);
                uint64_t v47 = AUSM::Metadata::prepareParameterTracks(*((AUSM::Metadata **)this + 68), (v17 - v16) >> 5, v43);
                uint64_t v50 = v49;
                CFNumberRef v52 = (float *)*((void *)this + 48);
                CFNumberRef v51 = (unsigned int *)*((void *)this + 49);
                if (v52 != (float *)v51)
                {
                  *(void *)&long long v386 = (char *)this + 3368;
                  *((void *)&v48 + 1) = 0;
                  long long v394 = xmmword_1BB879F70;
                  long long v384 = 0x8200302uLL;
                  long long v387 = 0x8200202uLL;
                  while (1)
                  {
                    unint64_t v53 = *(void *)(v47 + 32);
                    if (v53 >= *(void *)(v47 + 40)) {
                      break;
                    }
                    uint64_t v54 = *(void *)v52;
                    unsigned int v55 = *((_DWORD *)v52 + 2);
                    uint64_t v56 = *(void *)(v47 + 24);
                    uint64_t v57 = v56 + 32 * v53;
                    uint64_t v58 = v56;
                    if (v53)
                    {
                      uint64_t v59 = 32 * v53;
                      uint64_t v58 = *(void *)(v47 + 24);
                      do
                      {
                        if (*(_DWORD *)v58 == v54 && *(void *)(v58 + 4) == __PAIR64__(v55, HIDWORD(v54))) {
                          goto LABEL_49;
                        }
                        v58 += 32;
                        v59 -= 32;
                      }
                      while (v59);
                      uint64_t v58 = v56 + 32 * v53;
                    }
LABEL_49:
                    if (v53 == (v58 - v56) >> 5)
                    {
                      *(void *)uint64_t v57 = v54;
                      *(_DWORD *)(v57 + 8) = v55;
                      *(_OWORD *)(v57 + 16) = v394;
                      ++*(void *)(v47 + 32);
                      LODWORD(v401.__r_.__value_.__l.__data_) = 0;
                      if (!(*(unsigned int (**)(AUSpatialMixerV2 *, void, void, void, std::string *))(*(void *)this + 144))(this, *((unsigned int *)v52 + 2), *(unsigned int *)v52, *((unsigned int *)v52 + 1), &v401))
                      {
                        switch(*((_DWORD *)v52 + 3))
                        {
                          case 1:
                          case 2:
                          case 4:
                            if ((v52[4] & 0x80000000) != 0) {
                              goto LABEL_62;
                            }
                            goto LABEL_93;
                          case 3:
                            if (*((_DWORD *)v52 + 5) + *((_DWORD *)v52 + 4) < 0) {
                              goto LABEL_62;
                            }
                            goto LABEL_93;
                          default:
                            if (getAUSMV2Log(void)::onceToken != -1) {
                              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                            }
                            CFURLRef v78 = (id)getAUSMV2Log(void)::gLog;
                            if (os_log_type_enabled(v78, OS_LOG_TYPE_DEBUG))
                            {
                              CFArrayRef v87 = (void *)v386;
                              if (*((char *)this + 3391) < 0) {
                                CFArrayRef v87 = *(void **)v386;
                              }
                              unsigned int v88 = *((_DWORD *)v52 + 3);
                              int v403 = v384;
                              p_unsigned int mNumberBuffers = v87;
                              __int16 v405 = 2080;
                              v406 = "ProcessMultipleBufferListsSlicingPrivate";
                              __int16 v407 = 1024;
                              LODWORD(v408) = v88;
                              _os_log_debug_impl(&dword_1BB0CE000, v78, OS_LOG_TYPE_DEBUG, "[%s|%s] Parameter event type unknown (%u)", (uint8_t *)&v403, 0x1Cu);
                            }

LABEL_93:
                            if (AUSM::ParameterControlPointContainer::insertUnique((void *)v50, v58, (unint64_t)LODWORD(v401.__r_.__value_.__l.__data_) << 32))
                            {
                              goto LABEL_62;
                            }
                            goto LABEL_59;
                        }
                      }
                      if (getAUSMV2Log(void)::onceToken != -1) {
                        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                      }
                      CFArrayRef v60 = (id)getAUSMV2Log(void)::gLog;
                      if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
                      {
                        CFURLRef v79 = (void *)v386;
                        if (*((char *)this + 3391) < 0) {
                          CFURLRef v79 = *(void **)v386;
                        }
                        int v403 = v387;
                        p_unsigned int mNumberBuffers = v79;
                        __int16 v405 = 2080;
                        v406 = "ProcessMultipleBufferListsSlicingPrivate";
                        _os_log_debug_impl(&dword_1BB0CE000, v60, OS_LOG_TYPE_DEBUG, "[%s|%s] Can't fetch the current parameter value", (uint8_t *)&v403, 0x16u);
                      }
LABEL_58:

                      goto LABEL_59;
                    }
                    if (v56)
                    {
LABEL_62:
                      switch(*((_DWORD *)v52 + 3))
                      {
                        case 1:
                          uint64_t v61 = *((unsigned int *)v52 + 4);
                          KnownValueForfloat Parameter = AUSM::ParameterControlPointContainer::lastKnownValueForParameter((uint64_t *)v50, v58);
                          uint64_t v63 = *((unsigned int *)v52 + 5);
                          if (!AUSM::ParameterControlPointContainer::insertUnique((void *)v50, v58, v61 | ((unint64_t)LODWORD(KnownValueForParameter) << 32)))break; {
                          unint64_t v64 = v61 | (v63 << 32);
                          }
                          goto LABEL_109;
                        case 2:
                          double v73 = AUSM::ParameterControlPointContainer::lastKnownValueForParameter((uint64_t *)v50, v58);
                          uint64_t v74 = *((unsigned int *)v52 + 4);
                          if (!AUSM::ParameterControlPointContainer::insertUnique((void *)v50, v58, v74 | ((unint64_t)LODWORD(v73) << 32)))break; {
                          uint64_t v75 = *((unsigned int *)v52 + 7);
                          }
                          unsigned int v76 = *((_DWORD *)v52 + 5);
                          if (!AUSM::ParameterControlPointContainer::insertUnique((void *)v50, v58, v74 | ((unint64_t)*((unsigned int *)v52 + 6) << 32)))break; {
                          unint64_t v64 = (v76 + v74) | (unint64_t)(v75 << 32);
                          }
                          goto LABEL_109;
                        case 3:
                          unint64_t v64 = (*((_DWORD *)v52 + 5) + *((_DWORD *)v52 + 4)) | ((unint64_t)*((unsigned int *)v52 + 7) << 32);
                          goto LABEL_109;
                        case 4:
                          double v65 = AUSM::ParameterControlPointContainer::lastKnownValueForParameter((uint64_t *)v50, v58);
                          float v66 = *(float *)&v65;
                          unint64_t v67 = *((unsigned int *)v52 + 4);
                          if (!AUSM::ParameterControlPointContainer::insertUnique((void *)v50, v58, v67 | ((unint64_t)LODWORD(v65) << 32)))break; {
                          float v68 = v52[7];
                          }
                          unsigned int v69 = *((_DWORD *)v52 + 5);
                          uint64_t v70 = LODWORD(v68);
                          if (v69 < 0x81) {
                            goto LABEL_108;
                          }
                          unsigned int v71 = *((_DWORD *)v52 + 2);
                          if (v71 >= 2)
                          {
                            if (v71 != 2 || vabds_f32(v68, v66) < 0.1) {
                              goto LABEL_108;
                            }
                            float v72 = v68 - v66;
LABEL_101:
                            float v80 = (float)(v72 * 128.0) / (float)v69;
                            unint64_t v81 = (v69 - 1) >> 7;
                            v383 = (AudioBufferList *)v67;
                            unsigned int v82 = v67 + 128;
                            unint64_t v83 = 1;
                            do
                            {
                              _CF = !AUSM::ParameterControlPointContainer::insertUnique((void *)v50, v58, v82 | ((unint64_t)COERCE_UNSIGNED_INT(v66 + (float)((float)v83* v80)) << 32))|| v83 >= v81;
                              ++v83;
                              v82 += 128;
                            }
                            while (!_CF);
                            unsigned int v69 = *((_DWORD *)v52 + 5);
                            uint64_t v70 = *((unsigned int *)v52 + 7);
                            LODWORD(v67) = v383;
                            goto LABEL_108;
                          }
                          float v72 = v68 - v66;
                          if (!v71)
                          {
                            float v72 = remainderf(v72, 360.0);
                            if (v72 == -180.0) {
                              float v72 = 180.0;
                            }
                          }
                          if (fabsf(v72) >= 3.0) {
                            goto LABEL_101;
                          }
LABEL_108:
                          unint64_t v64 = (v69 + v67) | (unint64_t)(v70 << 32);
LABEL_109:
                          AUSM::ParameterControlPointContainer::insertUnique((void *)v50, v58, v64);
                          break;
                        default:
                          if (getAUSMV2Log(void)::onceToken != -1) {
                            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                          }
                          CFArrayRef v60 = (id)getAUSMV2Log(void)::gLog;
                          if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
                          {
                            unint64_t v85 = (void *)v386;
                            if (*((char *)this + 3391) < 0) {
                              unint64_t v85 = *(void **)v386;
                            }
                            unsigned int v86 = *((_DWORD *)v52 + 3);
                            int v403 = v384;
                            p_unsigned int mNumberBuffers = v85;
                            __int16 v405 = 2080;
                            v406 = "ProcessMultipleBufferListsSlicingPrivate";
                            __int16 v407 = 1024;
                            LODWORD(v408) = v86;
                            _os_log_debug_impl(&dword_1BB0CE000, v60, OS_LOG_TYPE_DEBUG, "[%s|%s] Parameter event type unknown (%u)", (uint8_t *)&v403, 0x1Cu);
                          }
                          goto LABEL_58;
                      }
                    }
LABEL_59:
                    v52 += 8;
                    if (v52 == (float *)v51) {
                      goto LABEL_423;
                    }
                  }
                  if (getAUSMV2Log(void)::onceToken != -1) {
                    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                  }
                  CFArrayRef v60 = (id)getAUSMV2Log(void)::gLog;
                  if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
                  {
                    uint64_t v77 = v47;
                    if (*(char *)(v47 + 23) < 0) {
                      uint64_t v77 = *(void *)v47;
                    }
                    int v403 = v387;
                    p_unsigned int mNumberBuffers = (void *)v77;
                    __int16 v405 = 2080;
                    v406 = "insertUnique";
                    _os_log_debug_impl(&dword_1BB0CE000, v60, OS_LOG_TYPE_DEBUG, "[%s|%s] Can't insert a new track: not enough capacity", (uint8_t *)&v403, 0x16u);
                  }
                  goto LABEL_58;
                }
LABEL_423:
                unint64_t v258 = *(void *)(v50 + 32);
                if (v258)
                {
                  uint64_t v259 = 0;
                  unint64_t v260 = 0;
                  *(void *)&long long v48 = 136315394;
                  long long v394 = v48;
                  do
                  {
                    uint64_t v261 = *(void *)(*(void *)(v50 + 24) + v259);
                    if (v261)
                    {
                      if (*(void *)(v261 + 16) > v260) {
                        *(void *)(v261 + 16) = v260;
                      }
                      *(void *)(v261 + 24) = v260;
                    }
                    else
                    {
                      if (getAUSMV2Log(void)::onceToken != -1) {
                        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                      }
                      v262 = (id)getAUSMV2Log(void)::gLog;
                      if (os_log_type_enabled(v262, OS_LOG_TYPE_DEBUG))
                      {
                        v263 = (void *)v50;
                        if (*(char *)(v50 + 23) < 0) {
                          v263 = *(void **)v50;
                        }
                        int v403 = v394;
                        p_unsigned int mNumberBuffers = v263;
                        __int16 v405 = 2080;
                        v406 = "compileTrackInfo";
                        _os_log_debug_impl(&dword_1BB0CE000, v262, OS_LOG_TYPE_DEBUG, "[%s|%s] Unexpected nullptr track", (uint8_t *)&v403, 0x16u);
                      }

                      unint64_t v258 = *(void *)(v50 + 32);
                    }
                    ++v260;
                    v259 += 16;
                  }
                  while (v260 < v258);
                }
                uint64_t v264 = *(void *)(v47 + 32);
                if (v264)
                {
                  uint64_t v265 = 0;
                  uint64_t v266 = *(void *)(v47 + 24);
                  uint64_t v267 = *(void *)(v50 + 24) + 24;
                  while (2)
                  {
                    uint64_t v268 = v266 + 32 * v265;
                    uint64_t v269 = *(void *)(v268 + 16);
                    unint64_t v270 = *(void *)(v268 + 24);
                    unint64_t v271 = v269 + 1;
                    if (v269 + 1 > v270) {
                      goto LABEL_447;
                    }
                    unint64_t v272 = 0;
                    v273 = (signed int *)(v267 + 16 * v269);
                    signed int v274 = 0x80000000;
                    while (2)
                    {
                      if (*((void *)v273 - 1) != v268)
                      {
                        unint64_t v275 = v272;
                        goto LABEL_446;
                      }
                      unint64_t v275 = v271;
                      BOOL v276 = v274 <= *v273;
                      signed int v274 = *v273;
                      if (v276)
                      {
LABEL_446:
                        ++v271;
                        v273 += 4;
                        unint64_t v272 = v275;
                        if (v271 > v270) {
                          goto LABEL_447;
                        }
                        continue;
                      }
                      break;
                    }
                    *(void *)(v268 + 24) = v272;
LABEL_447:
                    if (++v265 != v264) {
                      continue;
                    }
                    break;
                  }
                  uint64_t v277 = 0;
                  uint64_t v278 = *(void *)(v47 + 24);
                  uint64_t v279 = *(void *)(v50 + 24) + 24;
                  do
                  {
                    uint64_t v280 = v278 + 32 * v277;
                    uint64_t v281 = *(void *)(v280 + 16);
                    unint64_t v282 = *(void *)(v280 + 24);
                    unint64_t v283 = v281 + 1;
                    if (v281 + 1 <= v282)
                    {
                      v284 = (int *)(v279 + 16 * v281);
                      do
                      {
                        if (*((void *)v284 - 1) == v280)
                        {
                          if (*v284 > 0) {
                            break;
                          }
                          *(void *)(v280 + 16) = v283;
                        }
                        ++v283;
                        v284 += 4;
                      }
                      while (v283 <= v282);
                    }
                    ++v277;
                  }
                  while (v277 != v264);
                  v285 = (unint64_t *)(*(void *)(v47 + 24) + 16);
                  int v286 = 0x7FFFFFFF;
                  do
                  {
                    unint64_t v288 = *v285;
                    v285 += 4;
                    unint64_t v287 = v288;
                    if (v288 < v258)
                    {
                      int v289 = *(_DWORD *)(*(void *)(v50 + 24) + 16 * v287 + 8);
                      if (v286 >= v289) {
                        int v286 = v289;
                      }
                    }
                    --v264;
                  }
                  while (v264);
                  if (v286 <= 0)
                  {
                    uint64_t v290 = 0;
                    unint64_t v291 = 0;
                    LODWORD(v394) = 0;
                    *(void *)&long long v387 = (char *)this + 3368;
                    *(void *)&long long v48 = 136315650;
                    long long v386 = v48;
                    while (1)
                    {
                      uint64_t v292 = *(void *)(v47 + 24);
                      v293 = (unsigned int *)(v292 + v290);
                      unint64_t v294 = *(void *)(v292 + v290 + 16);
                      if (v294 >= *(void *)(v50 + 32)) {
                        goto LABEL_471;
                      }
                      if (*(int *)(*(void *)(v50 + 24) + 16 * v294 + 8) > 0) {
                        goto LABEL_471;
                      }
                      uint64_t v295 = AUSM::ParameterControlPointContainer::computeIntermediateParameterValueAndAdvance((uint64_t *)v50, 0, v292 + v290);
                      if ((v295 & 0xFF00000000) == 0) {
                        goto LABEL_471;
                      }
                      float v296 = *(float *)&v295;
                      LODWORD(v401.__r_.__value_.__l.__data_) = 0;
                      v297 = (unsigned int *)(v292 + v290);
                      int v298 = (*(uint64_t (**)(AUSpatialMixerV2 *, void, void, void, std::string *))(*(void *)this + 144))(this, v297[2], *v297, v297[1], &v401);
                      if (v298) {
                        break;
                      }
                      if (*(float *)&v401.__r_.__value_.__l.__data_ == v296) {
                        goto LABEL_471;
                      }
                      int v300 = (*(uint64_t (**)(AUSpatialMixerV2 *, void, void, void, void, float, float))(*(void *)this + 152))(this, v297[2], *v293, v297[1], 0, v296, *(float *)&v401.__r_.__value_.__l.__data_);
                      if (!v300)
                      {
                        LODWORD(v394) = 1;
                        goto LABEL_471;
                      }
                      if (getAUSMV2Log(void)::onceToken != -1) {
                        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                      }
                      v299 = (id)getAUSMV2Log(void)::gLog;
                      if (os_log_type_enabled(v299, OS_LOG_TYPE_DEBUG))
                      {
                        v301 = (void *)v387;
                        if (*((char *)this + 3391) < 0) {
                          v301 = *(void **)v387;
                        }
                        int v403 = v386;
                        p_unsigned int mNumberBuffers = v301;
                        __int16 v405 = 2080;
                        v406 = "ProcessMultipleBufferListsSlicingPrivate";
                        __int16 v407 = 1024;
                        LODWORD(v408) = v300;
                        v302 = v299;
                        v303 = "[%s|%s] SetParameter failed, err = %d";
LABEL_485:
                        _os_log_debug_impl(&dword_1BB0CE000, v302, OS_LOG_TYPE_DEBUG, v303, (uint8_t *)&v403, 0x1Cu);
                      }
LABEL_470:

LABEL_471:
                      ++v291;
                      v290 += 32;
                      if (v291 >= *(void *)(v47 + 32))
                      {
                        if (v394)
                        {
                          int v309 = AUSpatialMixerV2::ProcessMultipleBufferListsPrivate(this, v395, 0, v393, v398, v392, v399, (AudioTimeStamp *)v409);
                          if (v309)
                          {
                            if (getAUSMV2Log(void)::onceToken != -1) {
                              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                            }
                            v310 = (id)getAUSMV2Log(void)::gLog;
                            if (os_log_type_enabled(v310, OS_LOG_TYPE_DEBUG))
                            {
                              if (*((char *)this + 3391) < 0) {
                                *(void *)&long long v387 = *(void *)v387;
                              }
                              int v403 = v386;
                              p_unsigned int mNumberBuffers = (void *)v387;
                              __int16 v405 = 2080;
                              v406 = "ProcessMultipleBufferListsSlicingPrivate";
                              __int16 v407 = 1024;
                              LODWORD(v408) = v309;
                              _os_log_debug_impl(&dword_1BB0CE000, v310, OS_LOG_TYPE_DEBUG, "[%s|%s] Error %d while processing a 0-length time slice", (uint8_t *)&v403, 0x1Cu);
                            }
                          }
                        }
                        goto LABEL_505;
                      }
                    }
                    if (getAUSMV2Log(void)::onceToken != -1) {
                      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                    }
                    v299 = (id)getAUSMV2Log(void)::gLog;
                    if (!os_log_type_enabled(v299, OS_LOG_TYPE_DEBUG)) {
                      goto LABEL_470;
                    }
                    v304 = (void *)v387;
                    if (*((char *)this + 3391) < 0) {
                      v304 = *(void **)v387;
                    }
                    int v403 = v386;
                    p_unsigned int mNumberBuffers = v304;
                    __int16 v405 = 2080;
                    v406 = "ProcessMultipleBufferListsSlicingPrivate";
                    __int16 v407 = 1024;
                    LODWORD(v408) = v298;
                    v302 = v299;
                    v303 = "[%s|%s] GetParameter failed, err = %d";
                    goto LABEL_485;
                  }
                }
LABEL_505:
                signed int TargetTimeCue = AUSM::ParameterTrackContainer::findTargetTimeCue(v47, *(void *)(v50 + 24));
                LODWORD(v394) = 0;
                if (TargetTimeCue >= v391) {
                  int v313 = v391;
                }
                else {
                  int v313 = TargetTimeCue;
                }
                *(void *)&long long v387 = (char *)this + 3368;
                *(void *)&long long v312 = 136315650;
                long long v386 = v312;
                while (2)
                {
                  if (*(void *)(v47 + 32))
                  {
                    uint64_t v314 = 0;
                    unint64_t v315 = 0;
                    while (1)
                    {
                      v316 = (unsigned int *)(*(void *)(v47 + 24) + v314);
                      uint64_t v317 = AUSM::ParameterControlPointContainer::computeIntermediateParameterValueAndAdvance((uint64_t *)v50, v313, (uint64_t)v316);
                      if ((v317 & 0xFF00000000) != 0) {
                        break;
                      }
LABEL_517:
                      ++v315;
                      v314 += 32;
                      if (v315 >= *(void *)(v47 + 32)) {
                        goto LABEL_531;
                      }
                    }
                    float v318 = *(float *)&v317;
                    LODWORD(v401.__r_.__value_.__l.__data_) = 0;
                    int v319 = (*(uint64_t (**)(AUSpatialMixerV2 *, void, void, void, std::string *))(*(void *)this + 144))(this, v316[2], *v316, v316[1], &v401);
                    if (v319)
                    {
                      if (getAUSMV2Log(void)::onceToken != -1) {
                        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                      }
                      v320 = (id)getAUSMV2Log(void)::gLog;
                      if (!os_log_type_enabled(v320, OS_LOG_TYPE_DEBUG)) {
                        goto LABEL_516;
                      }
                      v325 = (void *)v387;
                      if (*((char *)this + 3391) < 0) {
                        v325 = *(void **)v387;
                      }
                      int v403 = v386;
                      p_unsigned int mNumberBuffers = v325;
                      __int16 v405 = 2080;
                      v406 = "ProcessMultipleBufferListsSlicingPrivate";
                      __int16 v407 = 1024;
                      LODWORD(v408) = v319;
                      v323 = v320;
                      v324 = "[%s|%s] GetParameter failed, err = %d";
                    }
                    else
                    {
                      if (*(float *)&v401.__r_.__value_.__l.__data_ == v318) {
                        goto LABEL_517;
                      }
                      int v321 = (*(uint64_t (**)(AUSpatialMixerV2 *, void, void, void, void, float, float))(*(void *)this + 152))(this, v316[2], *v316, v316[1], 0, v318, *(float *)&v401.__r_.__value_.__l.__data_);
                      if (!v321) {
                        goto LABEL_517;
                      }
                      if (getAUSMV2Log(void)::onceToken != -1) {
                        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                      }
                      v320 = (id)getAUSMV2Log(void)::gLog;
                      if (!os_log_type_enabled(v320, OS_LOG_TYPE_DEBUG)) {
                        goto LABEL_516;
                      }
                      v322 = (void *)v387;
                      if (*((char *)this + 3391) < 0) {
                        v322 = *(void **)v387;
                      }
                      int v403 = v386;
                      p_unsigned int mNumberBuffers = v322;
                      __int16 v405 = 2080;
                      v406 = "ProcessMultipleBufferListsSlicingPrivate";
                      __int16 v407 = 1024;
                      LODWORD(v408) = v321;
                      v323 = v320;
                      v324 = "[%s|%s] SetParameter failed, err = %d";
                    }
                    _os_log_debug_impl(&dword_1BB0CE000, v323, OS_LOG_TYPE_DEBUG, v324, (uint8_t *)&v403, 0x1Cu);
LABEL_516:

                    goto LABEL_517;
                  }
LABEL_531:
                  int v326 = v313 - v394;
                  UInt32 v327 = v326 & ~(v326 >> 31);
                  uint64_t v94 = AUSpatialMixerV2::ProcessMultipleBufferListsPrivate(this, v395, v327, v393, v398, v392, v399, (AudioTimeStamp *)v409);
                  if (v94)
                  {
                    if (getAUSMV2Log(void)::onceToken != -1) {
                      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                    }
                    v328 = (id)getAUSMV2Log(void)::gLog;
                    if (os_log_type_enabled(v328, OS_LOG_TYPE_DEBUG))
                    {
                      v349 = (void *)v387;
                      if (*((char *)this + 3391) < 0) {
                        v349 = *(void **)v387;
                      }
                      int v403 = v386;
                      p_unsigned int mNumberBuffers = v349;
                      __int16 v405 = 2080;
                      v406 = "ProcessMultipleBufferListsSlicingPrivate";
                      __int16 v407 = 1024;
                      LODWORD(v408) = v94;
                      _os_log_debug_impl(&dword_1BB0CE000, v328, OS_LOG_TYPE_DEBUG, "[%s|%s] Error %d while processing a time slice", (uint8_t *)&v403, 0x1Cu);
                    }

                    int v329 = v394;
                    if (v326 < 1) {
                      goto LABEL_566;
                    }
LABEL_547:
                    *(double *)v409 = *(double *)v409 + (double)v327;
                    if (v393)
                    {
                      v338 = 0;
                      do
                      {
                        v339 = v398[(void)v338];
                        if (v339)
                        {
                          (*(void (**)(int *__return_ptr, AUSpatialMixerV2 *, uint64_t, unsigned __int8 *))(*(void *)this + 392))(&v403, this, 1, v338);
                          uint64_t v340 = v339->mNumberBuffers;
                          if (v340)
                          {
                            uint64_t v341 = v408 * v327;
                            v342 = &v339->mBuffers[0].mData;
                            do
                            {
                              if (*((_DWORD *)v342 - 2))
                              {
                                *v342 = (char *)*v342 + v341;
                                *((_DWORD *)v342 - 1) -= v341;
                              }
                              v342 += 2;
                              --v340;
                            }
                            while (v340);
                          }
                        }
                        ++v338;
                      }
                      while (v338 != v397);
                    }
                    if (v392)
                    {
                      uint64_t v343 = 0;
                      do
                      {
                        v344 = v399[v343];
                        if (v344)
                        {
                          (*(void (**)(int *__return_ptr, AUSpatialMixerV2 *, uint64_t, uint64_t))(*(void *)this + 392))(&v403, this, 2, v343);
                          uint64_t v345 = v344->mNumberBuffers;
                          if (v345)
                          {
                            uint64_t v346 = v408 * v327;
                            v347 = &v344->mBuffers[0].mData;
                            do
                            {
                              if (*((_DWORD *)v347 - 2))
                              {
                                *v347 = (char *)*v347 + v346;
                                *((_DWORD *)v347 - 1) -= v346;
                              }
                              v347 += 2;
                              --v345;
                            }
                            while (v345);
                          }
                        }
                        ++v343;
                      }
                      while (v343 != v396);
                    }
                    int v329 = v313;
                  }
                  else
                  {
                    if (v326 >= 1)
                    {
                      unsigned __int8 v330 = atomic_load((unsigned __int8 *)v385);
                      if ((v330 & 1) == 0
                        || (v331 = (AUSM::AUFXWrapper **)*((void *)this + 416),
                            v332 = (AUSM::AUFXWrapper **)*((void *)this + 417),
                            v331 == v332))
                      {
LABEL_546:
                        uint64_t v94 = 0;
                      }
                      else
                      {
                        uint64_t v333 = (uint64_t)*v399;
                        while (1)
                        {
                          int v334 = *(_DWORD *)(v333 + 12);
                          AUSM::AUFXWrapper::processInPlace(*v331, v395, v327, (AudioBufferList *)v333);
                          uint64_t v94 = v335;
                          uint64_t v333 = (uint64_t)*v399;
                          uint64_t v336 = (*v399)->mNumberBuffers;
                          if (v336)
                          {
                            v337 = (_DWORD *)(v333 + 12);
                            do
                            {
                              _DWORD *v337 = v334;
                              v337 += 4;
                              --v336;
                            }
                            while (v336);
                          }
                          if (v335) {
                            break;
                          }
                          if (++v331 == v332) {
                            goto LABEL_546;
                          }
                        }
                      }
                      goto LABEL_547;
                    }
                    uint64_t v94 = 0;
                    int v329 = v394;
                  }
LABEL_566:
                  signed int v348 = AUSM::ParameterTrackContainer::findTargetTimeCue(v47, *(void *)(v50 + 24));
                  if (v329 == v391 && v348 > v391)
                  {
                    *((void *)this + 49) = *((void *)this + 48);
                    goto LABEL_576;
                  }
                  LODWORD(v394) = v329;
                  if (v348 >= v391) {
                    int v313 = v391;
                  }
                  else {
                    int v313 = v348;
                  }
                  continue;
                }
              }
              if (getAUSMV2Log(void)::onceToken != -1) {
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
              }
              v257 = (id)getAUSMV2Log(void)::gLog;
              if (os_log_type_enabled(v257, OS_LOG_TYPE_ERROR))
              {
                v370 = (void *)((char *)this + 3368);
                if (*((char *)this + 3391) < 0) {
                  v370 = (void *)*v370;
                }
                int v403 = 136315394;
                p_unsigned int mNumberBuffers = v370;
                __int16 v405 = 2080;
                v406 = "ProcessMultipleBufferListsSlicingPrivate";
                _os_log_error_impl(&dword_1BB0CE000, v257, OS_LOG_TYPE_ERROR, "[%s|%s] Error: null input or output buffer lists", (uint8_t *)&v403, 0x16u);
              }

              uint64_t v94 = 4294956428;
LABEL_607:
              std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v402);
              goto LABEL_608;
            }
          }
          uint64_t v94 = AUSpatialMixerV2::ProcessMultipleBufferListsPrivate(this, v395, v391, v393, v12, v392, v390, (AudioTimeStamp *)v398);
          if (v94)
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            CFStringRef v95 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v95, OS_LOG_TYPE_DEBUG))
            {
              v369 = (void *)((char *)this + 3368);
              if (*((char *)this + 3391) < 0) {
                v369 = (void *)*v369;
              }
              *(_DWORD *)v409 = 136315650;
              *(void *)&v409[4] = v369;
              *(_WORD *)&v409[12] = 2080;
              *(void *)&v409[14] = "ProcessMultipleBufferListsSlicingPrivate";
              *(_WORD *)&v409[22] = 1024;
              *(_DWORD *)&v409[24] = v94;
              _os_log_debug_impl(&dword_1BB0CE000, v95, OS_LOG_TYPE_DEBUG, "[%s|%s] Error %d while processing multiple buffer lists", v409, 0x1Cu);
            }
          }
          else
          {
            unsigned __int8 v102 = atomic_load((unsigned __int8 *)v385);
            if (v102)
            {
              v305 = (AUSM::AUFXWrapper **)*((void *)this + 416);
              v306 = (AUSM::AUFXWrapper **)*((void *)this + 417);
              while (v305 != v306)
              {
                AUSM::AUFXWrapper::processInPlace(*v305, v395, v391, *v390);
                uint64_t v94 = v307;
                if (v307) {
                  goto LABEL_576;
                }
                ++v305;
              }
            }
            uint64_t v94 = 0;
          }
LABEL_576:
          if (!v392) {
            goto LABEL_607;
          }
          if (!*((unsigned char *)this + 8976)) {
            goto LABEL_607;
          }
          v350 = *v390;
          if (!(*v390)->mNumberBuffers) {
            goto LABEL_607;
          }
          uint64_t v351 = ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 128), 0);
          float v352 = -1.0;
          float v353 = -1.0;
          if (!v391)
          {
LABEL_606:
            *(float *)v409 = v353;
            int v403 = LODWORD(v352);
            kdebug_trace();
            goto LABEL_607;
          }
          uint64_t v354 = 0;
          uint64_t v355 = 0;
          double v356 = *(double *)(v351 + 80);
          v357 = (float *)v350->mBuffers[0].mData;
          unsigned int mNumberChannels = v350->mBuffers[0].mNumberChannels;
          unsigned int v359 = 1;
          while (2)
          {
            if (fabsf(v357[v359 - 1]) > 0.01 && v353 == -1.0) {
              float v353 = (double)(int)v355 / v356;
            }
            if (mNumberChannels >= 2)
            {
              v361 = &v357[v359];
              goto LABEL_591;
            }
            float v362 = 0.0;
            if (v350->mNumberBuffers >= 2)
            {
              v361 = (float *)(*(void *)&v350[1].mBuffers[0].mNumberChannels + v354);
LABEL_591:
              float v362 = *v361;
            }
            if (fabsf(v362) > 0.01 && v352 == -1.0) {
              float v352 = (double)(int)v355 / v356;
            }
            BOOL v365 = v352 != -1.0 && v353 != -1.0 || v391 - 1 == v355++;
            v354 += 4;
            v359 += mNumberChannels;
            if (v365) {
              goto LABEL_606;
            }
            continue;
          }
        }
      }
    }
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    uint64_t v97 = (id)getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled(v97, OS_LOG_TYPE_ERROR)) {
      goto LABEL_493;
    }
    v255 = v399 + 13;
    if (*((char *)v399 + 127) < 0) {
      v255 = (AudioBufferList **)*v255;
    }
    *(_DWORD *)v409 = 136315394;
    *(void *)&v409[4] = v255;
    *(_WORD *)&v409[12] = 2080;
    *(void *)&v409[14] = "ingestEABL";
    v256 = "[%s|%s] EABL ingestion: Mismatch between the configured number of channels and the actual number of channels "
           "of the first input";
    goto LABEL_618;
  }
  if (getAUSMV2Log(void)::onceToken != -1) {
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
  }
  CFIndex v93 = (id)getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR))
  {
    v308 = v399 + 13;
    if (*((char *)v399 + 127) < 0) {
      v308 = (AudioBufferList **)*v308;
    }
    *(_DWORD *)v409 = 136315394;
    *(void *)&v409[4] = v308;
    *(_WORD *)&v409[12] = 2080;
    *(void *)&v409[14] = "ingestEABL";
    _os_log_error_impl(&dword_1BB0CE000, v93, OS_LOG_TYPE_ERROR, "[%s|%s] EABL ingestion: can't process since the ImmersiveRendererData configuration has not been set", v409, 0x16u);
  }

  uint64_t v94 = 4294900553;
LABEL_608:
  char v366 = BYTE4(v388);
  v367 = v389;
  _DWORD *v389 = v388;
  *((unsigned char *)v367 + 4) = v366;
  return v94;
}

void sub_1BB3D1560(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  if (*(char *)(v1 + 327) < 0) {
    operator delete(*(void **)(v1 + 304));
  }
  std::istringstream::~istringstream(v1 + 400);
  if (*(char *)(v1 + 351) < 0) {
    operator delete(*(void **)(v1 + 328));
  }
  uint64_t v3 = *(void *)(v1 + 192);
  uint64_t v4 = *(void *)(v1 + 200);
  *(_DWORD *)uint64_t v4 = v3;
  *(unsigned char *)(v4 + 4) = BYTE4(v3);
  _Unwind_Resume(a1);
}

uint64_t AUSpatialMixerV2::ProcessMultipleBufferListsPrivate(AUSpatialMixerV2 *this, unsigned int *a2, vDSP_Length a3, unsigned int a4, const AudioBufferList **a5, int a6, AudioBufferList **a7, AudioTimeStamp *a8)
{
  uint64_t v413 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v12 = atomic_load((unsigned __int8 *)this + 3444);
  if (v12)
  {
    uint64_t v13 = (void *)*((void *)this + 327);
    unsigned int v14 = applesauce::dispatch::v1::queue::get(v13);
    dispatch_sync(v14, &__block_literal_global_201);
  }
  if (a6 != 1)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    long long v19 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      uint64_t v21 = (void *)((char *)this + 3368);
      if (*((char *)this + 3391) < 0) {
        uint64_t v21 = (void *)*v21;
      }
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = v21;
      *(_WORD *)std::string v401 = 2080;
      *(void *)&v401[2] = "ProcessMultipleBufferListsPrivate";
      *(_WORD *)&v401[10] = 1024;
      LODWORD(v402) = a6;
      _os_log_error_impl(&dword_1BB0CE000, v19, OS_LOG_TYPE_ERROR, "[%s|%s] The number of output buffer lists is not 1 (%u)", buf, 0x1Cu);
    }

    return 4294900553;
  }
  unsigned __int8 v15 = atomic_load((unsigned __int8 *)this + 2633);
  long long v387 = a7;
  if ((v15 & 1) != 0 && *((_DWORD *)this + 3025) == -1)
  {
    *(void *)std::string buf = (char *)this + 3104;
    int v16 = caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::try_lock((uint64_t)this + 3104);
    buf[8] = v16;
    if (v16 && *((void *)this + 340))
    {
      unsigned __int8 v17 = atomic_load((unsigned __int8 *)this + 3522);
      if (v17)
      {
        uint64_t v18 = *((void *)this + 339);
        *((void *)this + 339) = *((void *)this + 341);
        *((void *)this + 341) = v18;
        *((_DWORD *)this + 3025) = 0;
      }
      else
      {
        uint64_t v18 = *((void *)this + 341);
      }
      *((void *)this + 341) = *((void *)this + 340);
      *((void *)this + 340) = v18;
      atomic_store(0, (unsigned __int8 *)this + 2633);
      size_t v22 = (caulk::concurrent::messenger *)*((void *)this + 411);
      if (!v22) {
        __assert_rtn("ProcessMultipleBufferListsPrivate", "AUSpatialMixerV2.mm", 2652, "mMessenger.get() != nullptr");
      }
      *((void *)this + 340) = 0;
      __Step.i64[0] = v18;
      uint64_t v23 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 40, 8);
      *(_DWORD *)(v23 + 16) = 0;
      __Step.i64[0] = 0;
      *(void *)(v23 + 24) = v18;
      *(void *)uint64_t v23 = &unk_1F14AD2E0;
      *(void *)(v23 + 8) = 0;
      caulk::concurrent::messenger::enqueue(v22, (caulk::concurrent::message *)v23);
      a7 = v387;
    }
    std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)buf);
  }
  long long v386 = (long long *)((char *)this + 2152);
  unsigned __int8 v24 = atomic_load((unsigned __int8 *)this + 4928);
  if (v24)
  {
    if (atomic_load((unsigned int *)this + 1233))
    {
      a7 = v387;
      if (AudioDSP::Core::HeadTracker::HasActiveRMConnection((AUSpatialMixerV2 *)((char *)this + 8944)))
      {
        int v26 = *((_DWORD *)this + 1484);
        int CurrentHeadPose = AudioDSP::Core::HeadTracker::GetCurrentHeadPose((AUSpatialMixerV2 *)((char *)this + 8944), (simd_quatf *)&__Step);
        if (CurrentHeadPose == 102)
        {
          if ((v26 & 1) == 0)
          {
LABEL_52:
            a7 = v387;
            goto LABEL_53;
          }
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          uint64_t v28 = (id)getAUSMV2Log(void)::gLog;
          if (!os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
          {
LABEL_51:

            goto LABEL_52;
          }
          unint64_t v29 = (void *)((char *)this + 3368);
          if (*((char *)this + 3391) < 0) {
            unint64_t v29 = (void *)*v29;
          }
          *(_DWORD *)std::string buf = 136315650;
          *(void *)&uint8_t buf[4] = v29;
          *(_WORD *)std::string v401 = 2080;
          *(void *)&v401[2] = "ProcessMultipleBufferListsPrivate";
          *(_WORD *)&v401[10] = 1024;
          LODWORD(v402) = 102;
          uint64_t v30 = "[%s|%s] AUSMTrackedHeadPose: Error %d in getting head-pose.";
          int v31 = v28;
          uint32_t v32 = 28;
        }
        else
        {
          unsigned __int8 v33 = atomic_load((unsigned __int8 *)this + 8979);
          if (v33)
          {
            AudioDSP::Core::HeadTracker::GetAppliedFaceToDevicePitchAngleOffset((AUSpatialMixerV2 *)((char *)this + 8944));
            if (fabsf(v34) > 0.00000011921)
            {
              __float2 v35 = __sincosf_stret((float)(v34 * 0.017453) * 0.5);
              v36.i32[0] = 0;
              v36.i32[2] = 0;
              v36.i32[1] = LODWORD(v35.__sinval);
              v36.i32[3] = LODWORD(v35.__cosval);
              int32x4_t v37 = (int32x4_t)vnegq_f32(v36);
              int8x16_t v38 = (int8x16_t)vtrn2q_s32((int32x4_t)v36, vtrn1q_s32((int32x4_t)v36, v37));
              float32x4_t v39 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v36, (int8x16_t)v37, 8uLL), *(float32x2_t *)__Step.f32, 1), (float32x4_t)vextq_s8(v38, v38, 8uLL), __Step.f32[0]);
              float32x4_t v40 = (float32x4_t)vrev64q_s32((int32x4_t)v36);
              v40.i32[0] = v37.i32[1];
              v40.i32[3] = v37.i32[2];
              float32x4_t v41 = vaddq_f32(v39, vmlaq_laneq_f32(vmulq_laneq_f32(v36, __Step, 3), v40, __Step, 2));
              int8x16_t v42 = (int8x16_t)vmulq_f32(v41, v41);
              float32x2_t v43 = vadd_f32(*(float32x2_t *)v42.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL));
              if (vaddv_f32(v43) == 0.0)
              {
                float32x4_t v44 = (float32x4_t)xmmword_1BB875840;
              }
              else
              {
                unsigned __int32 v45 = vadd_f32(v43, (float32x2_t)vdup_lane_s32((int32x2_t)v43, 1)).u32[0];
                float32x2_t v46 = vrsqrte_f32((float32x2_t)v45);
                float32x2_t v47 = vmul_f32(v46, vrsqrts_f32((float32x2_t)v45, vmul_f32(v46, v46)));
                float32x4_t v44 = vmulq_n_f32(v41, vmul_f32(v47, vrsqrts_f32((float32x2_t)v45, vmul_f32(v47, v47))).f32[0]);
              }
              float32x4_t __Step = v44;
            }
          }
          _X0 = 0;
          _X1 = 0;
          __asm { CASPAL          X0, X1, X0, X1, [X8] }
          if (vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(__Step, (float32x4_t)(unint64_t)_X0))), 0xFuLL))))
          {
            _X0 = __Step.i64[0];
            uint64_t v55 = *((void *)this + 436);
            do
            {
              _X5 = *((void *)this + 437);
              __asm { CASPAL          X4, X5, X0, X1, [X8] }
              _ZF = _X4 == v55;
              uint64_t v55 = _X4;
            }
            while (!_ZF);
            atomic_store(1u, (unsigned __int8 *)this + 8889);
            AUSpatialMixerV2::UpdateStereoBusRotationParameters(this);
          }
          if ((v26 & 1) == 0) {
            goto LABEL_52;
          }
          float v58 = AUSM::auCoordQuaternionToEuler(_X0, __Step);
          float v60 = v59;
          float v62 = v61;
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          uint64_t v28 = (id)getAUSMV2Log(void)::gLog;
          if (!os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_51;
          }
          uint64_t v63 = (void *)((char *)this + 3368);
          if (*((char *)this + 3391) < 0) {
            uint64_t v63 = (void *)*v63;
          }
          *(_DWORD *)std::string buf = 136317442;
          *(void *)&uint8_t buf[4] = v63;
          *(_WORD *)std::string v401 = 2080;
          *(void *)&v401[2] = "ProcessMultipleBufferListsPrivate";
          *(_WORD *)&v401[10] = 2048;
          double v402 = v58;
          *(_WORD *)int v403 = 2048;
          *(double *)&v403[2] = v60;
          *(_WORD *)&v403[10] = 2048;
          double v404 = v62;
          *(_WORD *)__int16 v405 = 2048;
          *(double *)&v405[2] = __Step.f32[0];
          *(_WORD *)&v405[10] = 2048;
          double v406 = __Step.f32[1];
          __int16 v407 = 2048;
          double v408 = __Step.f32[2];
          __int16 v409 = 2048;
          double v410 = __Step.f32[3];
          __int16 v411 = 1024;
          int v412 = CurrentHeadPose;
          uint64_t v30 = "[%s|%s] AUSMTrackedHeadPose: Y: %.2f, P: %.2f, R: %.2f, Quat: (%.4f, %.4f, %.4f, %.4f. Error = %d)";
          int v31 = v28;
          uint32_t v32 = 98;
        }
        _os_log_impl(&dword_1BB0CE000, v31, OS_LOG_TYPE_DEFAULT, v30, buf, v32);
        goto LABEL_51;
      }
    }
  }
LABEL_53:
  AUSM::GlobalGeometry::update((float32x4_t *)this + 488, a3, 0);
  if (!a7) {
    __assert_rtn("ProcessMultipleBufferListsPrivate", "AUSpatialMixerV2.mm", 2702, "ioOutputBufferLists");
  }
  unint64_t v64 = *a7;
  if (!*a7) {
    __assert_rtn("ProcessMultipleBufferListsPrivate", "AUSpatialMixerV2.mm", 2703, "ioOutputBufferLists[0]");
  }
  unint64_t mNumberBuffers = v64->mNumberBuffers;
  uint64_t v66 = *((void *)this + 341);
  if (mNumberBuffers != *(_DWORD *)(v66 + 380)) {
    __assert_rtn("ProcessMultipleBufferListsPrivate", "AUSpatialMixerV2.mm", 2706, "numMixBuffers == mSharedBuffers->mixBufferPtrs.numChannels()");
  }
  uint64_t v67 = *(void *)(v66 + 328);
  uint64_t v68 = *(void *)(v66 + 336) - v67;
  unint64_t v69 = (unint64_t)v68 >> 3;
  if (mNumberBuffers >= ((unint64_t)v68 >> 3)) {
    unint64_t v69 = v69;
  }
  else {
    unint64_t v69 = mNumberBuffers;
  }
  if (v69)
  {
    uint64_t v70 = 0;
    p_int mData = &v64->mBuffers[0].mData;
    do
    {
      float v72 = *p_mData;
      p_mData += 2;
      *(void *)(*(void *)(v66 + 328) + v70) = v72;
      v70 += 8;
    }
    while (8 * v69 != v70);
    uint64_t v67 = *(void *)(v66 + 328);
    uint64_t v68 = *(void *)(v66 + 336) - v67;
    unint64_t v73 = v69;
  }
  else
  {
    unint64_t v73 = 0;
  }
  unint64_t v395 = mNumberBuffers;
  if (v73 < v68 >> 3)
  {
    unsigned int v74 = v69 + 1;
    do
    {
      *(void *)(v67 + 8 * v73) = 0;
      unint64_t v73 = v74;
      uint64_t v67 = *(void *)(v66 + 328);
      ++v74;
    }
    while (v73 < (*(void *)(v66 + 336) - v67) >> 3);
  }
  *(_DWORD *)(v66 + 380) = v69;
  uint64_t v75 = *((void *)this + 341);
  unsigned int v76 = *(void ***)(v75 + 328);
  uint64_t v77 = *(void ***)(v75 + 336);
  uint64_t v78 = v75;
  if (v76 != v77)
  {
    do
    {
      if (*v76) {
        bzero(*v76, 4 * a3);
      }
      ++v76;
    }
    while (v76 != v77);
    uint64_t v78 = *((void *)this + 341);
  }
  *(unsigned char *)(v75 + 376) = 1;
  CFURLRef v79 = *(void ***)(v78 + 392);
  for (uint64_t i = *(void ***)(v78 + 400); v79 != i; ++v79)
  {
    if (*v79) {
      bzero(*v79, 4 * a3);
    }
  }
  *(unsigned char *)(v78 + 440) = 1;
  unsigned __int8 v81 = atomic_load((unsigned __int8 *)this + 2249);
  if (v81)
  {
    unsigned __int8 v82 = atomic_load((unsigned __int8 *)this + 2250);
    if ((v82 & 1) == 0)
    {
      *(void *)std::string buf = (char *)this + 2252;
      int v83 = caulk::pooled_semaphore_mutex::try_lock((AUSpatialMixerV2 *)((char *)this + 2252));
      buf[8] = v83;
      if (v83)
      {
        long long v84 = *(_OWORD *)((char *)this + 2184);
        long long v85 = *(_OWORD *)((char *)this + 2200);
        long long v86 = *(_OWORD *)((char *)this + 2216);
        long long v87 = *v386;
        long long v88 = *(_OWORD *)((char *)this + 2168);
        *(_OWORD *)((char *)this + 2184) = *(_OWORD *)((char *)this + 2232);
        *(_OWORD *)((char *)this + 2200) = v87;
        *(_OWORD *)((char *)this + 2216) = v88;
        *(_OWORD *)((char *)this + 2232) = v84;
        *long long v386 = v85;
        *(_OWORD *)((char *)this + 2168) = v86;
        atomic_store(0, (unsigned __int8 *)this + 2249);
        atomic_store(1u, (unsigned __int8 *)this + 2248);
        atomic_store(1u, (unsigned __int8 *)this + 2250);
      }
      std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)buf);
    }
  }
  uint64_t v89 = *((void *)this + 15);
  if (v89) {
    LODWORD(v90) = (*(uint64_t (**)(uint64_t))(*(void *)v89 + 24))(v89);
  }
  else {
    uint64_t v90 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
  }
  uint64_t v91 = (AUSpatialMixerV2 *)((char *)this + 2104);
  if (v90)
  {
    unint64_t v92 = 0;
    uint64_t v396 = 0;
    int v388 = 1;
    int v389 = 1;
    int v390 = 1;
    unint64_t v392 = a4;
    uint64_t v93 = v90;
    while (1)
    {
      uint64_t Element = ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 80), v92);
      CFStringRef v95 = (unsigned int *)Element;
      if (*((unsigned char *)this + 540) && *((_DWORD *)this + 134) == 1)
      {
        if (v92 < v392)
        {
          CFArrayRef v96 = a5[v92];
          if (v96)
          {
            ausdk::AUBufferList::SetBufferList((ausdk::AUBufferList *)(Element + 144), v96);
LABEL_93:
            unsigned __int8 v98 = atomic_load((unsigned __int8 *)this + 2608);
            if (v98)
            {
              v99 = (char *)this + 2560;
              vDSP_vclr(*((float **)this + 320), 1, a3);
              *((unsigned char *)this + 2584) = 1;
            }
            else
            {
              v99 = 0;
            }
            BOOL MustProcessPostProcReverb = AUSpatialMixerV2InputElement::MustProcessPostProcReverb((AUSpatialMixerV2InputElement *)v95);
            if (MustProcessPostProcReverb) {
              uint32_t v101 = (char *)this + 2456;
            }
            else {
              uint32_t v101 = 0;
            }
            BOOL MustProcessInternalReverb = AUSpatialMixerV2InputElement::MustProcessInternalReverb((AUSpatialMixerV2InputElement *)v95);
            unsigned __int8 v103 = 0;
            if (MustProcessInternalReverb)
            {
              unsigned int v104 = atomic_load(v95 + 186);
              if (v104 - 7 <= 2
                && AUSpatialMixerV2InputElement::MustProcessInternalReverb((AUSpatialMixerV2InputElement *)v95))
              {
                LODWORD(v396) = 1;
                unsigned __int8 v103 = (char *)this + 2408;
              }
              else
              {
                unsigned int v105 = atomic_load(v95 + 186);
                if (v105 == 6
                  && AUSpatialMixerV2InputElement::MustProcessInternalReverb((AUSpatialMixerV2InputElement *)v95))
                {
                  LODWORD(v396) = 1;
                  unsigned __int8 v103 = (char *)this + 2048;
                }
                else
                {
                  unsigned __int8 v106 = atomic_load((unsigned __int8 *)this + 1952);
                  LODWORD(v396) = v106 & 1;
                  if (v106) {
                    unsigned __int8 v103 = (char *)this + 1976;
                  }
                  else {
                    unsigned __int8 v103 = 0;
                  }
                }
              }
            }
            if (v103 != 0 && MustProcessPostProcReverb) {
              v107 = (char *)this + 2504;
            }
            else {
              v107 = 0;
            }
            AUSpatialMixerV2InputElement::Process((uint64_t)v95, a2, (long long *)a8, *((void *)this + 341), (uint64_t)v103, (uint64_t)v101, (uint64_t)v107, (uint64_t)v99, a3);
            if (!*((unsigned char *)this + 2432))
            {
              uint64_t v109 = (const float *)*((void *)this + 301);
              unsigned int v110 = atomic_load((unsigned int *)this + 2251);
              IR::SharedIRBuses::sumToBus(v91, v109, v92 + v110, a3, v108);
              vDSP_vclr(*((float **)this + 301), 1, a3);
              int v390 = 0;
              *((unsigned char *)this + 2432) = 1;
            }
            if (!*((unsigned char *)this + 2480))
            {
              unint64_t v111 = (const float *)*((void *)this + 307);
              unsigned int v112 = atomic_load((unsigned int *)this + 2252);
              IR::SharedIRBuses::sumToBus(v91, v111, v92 + v112, a3, v108);
              vDSP_vclr(*((float **)this + 307), 1, a3);
              int v389 = 0;
              *((unsigned char *)this + 2480) = 1;
            }
            HIDWORD(v396) |= MustProcessPostProcReverb;
            if (!*((unsigned char *)this + 2528))
            {
              int v113 = (const float *)*((void *)this + 313);
              unsigned int v114 = atomic_load((unsigned int *)this + 2253);
              IR::SharedIRBuses::sumToBus(v91, v113, v92 + v114, a3, v108);
              vDSP_vclr(*((float **)this + 313), 1, a3);
              int v388 = 0;
              *((unsigned char *)this + 2528) = 1;
            }
          }
        }
      }
      else
      {
        uint64_t v97 = ausdk::AUScope::GetElement((AUSpatialMixerV2 *)((char *)this + 80), v92);
        if (v97 && *(_DWORD *)(v97 + 172)) {
          goto LABEL_93;
        }
      }
      if (v93 == ++v92) {
        goto LABEL_121;
      }
    }
  }
  uint64_t v396 = 0;
  int v389 = 1;
  int v390 = 1;
  int v388 = 1;
LABEL_121:
  char v115 = (TorqueEngine *)*((void *)this + 372);
  uint64_t v116 = *((void *)this + 341);
  int v117 = *(unsigned __int8 *)(v116 + 440);
  if (v115)
  {
    if (!*(unsigned char *)(v116 + 440) || (unsigned int v118 = *((_DWORD *)this + 746), v118 <= 0xFF))
    {
      uint64_t v119 = *(void *)(v116 + 392);
      if (*(void *)(v116 + 400) != v119)
      {
        unint64_t v120 = 0;
        unsigned int v121 = 1;
        do
        {
          *(void *)(*(void *)(v116 + 416) + 8 * v120) = *(void *)(v119 + 8 * v120);
          unint64_t v120 = v121;
          uint64_t v119 = *(void *)(v116 + 392);
          ++v121;
        }
        while (v120 < (*(void *)(v116 + 400) - v119) >> 3);
        uint64_t v116 = *((void *)this + 341);
        char v115 = (TorqueEngine *)*((void *)this + 372);
      }
      CFTypeRef v122 = *(float ***)(v116 + 416);
      TorqueEngine::processInplace(v115, *v122, v122[1], a3);
      uint64_t v123 = 0;
      uint64_t v124 = *((void *)this + 341);
      do
      {
        vDSP_vadd(*(const float **)(*(void *)(v124 + 328) + v123 * 8), 1, v122[v123], 1, *(float **)(*(void *)(v124 + 328) + v123 * 8), 1, a3);
        ++v123;
      }
      while (v123 != 2);
      *(unsigned char *)(v124 + 376) = 0;
      if (!v117)
      {
        *((_DWORD *)this + 746) = 0;
        goto LABEL_149;
      }
      unsigned int v118 = *((_DWORD *)this + 746);
    }
    int v125 = v118 + a3;
    if (__CFADD__(v118, a3)) {
      int v125 = -1;
    }
    *((_DWORD *)this + 746) = v125;
  }
  else if (!*(unsigned char *)(v116 + 440))
  {
    unint64_t v126 = *(float **)(v116 + 128);
    unint64_t v127 = *(float **)(v116 + 152);
    uint64_t v128 = *(void *)(v116 + 392);
    if (*(void *)(v116 + 400) != v128)
    {
      unint64_t v129 = 0;
      unsigned int v130 = 1;
      do
      {
        *(void *)(*(void *)(v116 + 416) + 8 * v129) = *(void *)(v128 + 8 * v129);
        unint64_t v129 = v130;
        uint64_t v128 = *(void *)(v116 + 392);
        ++v130;
      }
      while (v129 < (*(void *)(v116 + 400) - v128) >> 3);
      uint64_t v116 = *((void *)this + 341);
    }
    uint64_t v131 = *(const float ***)(v116 + 416);
    vDSP_vadd(*v131, 1, v131[1], 1, v126, 1, a3);
    *(_DWORD *)std::string buf = 1060439283;
    vDSP_vsbsm(*v131, 1, v131[1], 1, (const float *)buf, v127, 1, a3);
    uint64_t v132 = (float *)((char *)this + 2948);
    float v133 = *((float *)this + 739);
    float v134 = *((float *)this + 737);
    if (vabds_f32(v133, v134) >= 0.00001 || vabds_f32(*((float *)this + 740), *((float *)this + 738)) >= 0.00001)
    {
      float v135 = 1.0 / (float)a3;
      __Step.f32[0] = v135 * (float)(v133 - v134);
      vDSP_vrampmul(v126, 1, v132, __Step.f32, (float *)*v131, 1, a3);
      __Step.f32[0] = v135 * (float)(*((float *)this + 740) - *((float *)this + 738));
      vDSP_vrampmul(v126, 1, (float *)this + 738, __Step.f32, (float *)v131[1], 1, a3);
    }
    else
    {
      vDSP_vsmul(v126, 1, v132, (float *)*v131, 1, a3);
      vDSP_vsmul(v126, 1, (const float *)this + 738, (float *)v131[1], 1, a3);
    }
    vDSP_vasm(v127, 1, *v131, 1, (const float *)buf, (float *)*v131, 1, a3);
    vDSP_vsbsm(v131[1], 1, v127, 1, (const float *)buf, (float *)v131[1], 1, a3);
    uint64_t v136 = 0;
    uint64_t v137 = *((void *)this + 341);
    do
    {
      vDSP_vadd(*(const float **)(*(void *)(v137 + 328) + v136 * 8), 1, v131[v136], 1, *(float **)(*(void *)(v137 + 328) + v136 * 8), 1, a3);
      ++v136;
    }
    while (v136 != 2);
    *(unsigned char *)(v137 + 376) = 0;
  }
LABEL_149:
  unsigned __int8 v138 = atomic_load((unsigned __int8 *)this + 12160);
  if (v138)
  {
    int v139 = *(float ***)(*((void *)this + 341) + 328);
    *(void *)std::string buf = (char *)this + 12164;
    int v140 = caulk::pooled_semaphore_mutex::try_lock((AUSpatialMixerV2 *)((char *)this + 12164));
    buf[8] = v140;
    if (v140)
    {
      _ZF = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)this + 1514) - *((void *)this + 1513)) >> 3) < v395
         || v395 == 0;
      if (!_ZF)
      {
        uint64_t v142 = 0;
        do
        {
          IR::FixedIntegerDelay::process((IR::FixedIntegerDelay *)(*((void *)this + 1513) + v142), *v139, *v139, a3);
          v142 += 56;
          ++v139;
        }
        while (56 * v395 != v142);
      }
    }
    std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)buf);
  }
  uint64_t v143 = ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 128), 0);
  if (((v396 | HIDWORD(v396)) & 1) == 0)
  {
    int v147 = 0;
    goto LABEL_381;
  }
  double v144 = *(double *)(v143 + 80);
  int v145 = *(const float ***)(*((void *)this + 341) + 328);
  if (*((float *)this + 732) == 0.0 || !*((unsigned char *)this + 2936))
  {
    unsigned __int8 v148 = atomic_load((unsigned __int8 *)this + 12161);
    if ((v148 & 1) == 0) {
      goto LABEL_170;
    }
    int v146 = 0;
  }
  else
  {
    int v146 = 1;
  }
  v149 = AUSM::ABLBuffer::setupBufferList((AUSpatialMixerV2 *)((char *)this + 2816), v395, 0, a3, 4);
  if (*v149)
  {
    unint64_t v150 = v149;
    unsigned int v151 = 0;
    v152 = (void **)(v149 + 4);
    do
    {
      bzero(*v152, *((unsigned int *)v152 - 1));
      ++v151;
      v152 += 2;
    }
    while (v151 < *v150);
  }
  int v145 = (const float **)*((void *)this + 358);
  if (v146)
  {
    int v153 = *((_DWORD *)this + 677);
    int v154 = 1;
    goto LABEL_171;
  }
LABEL_170:
  int v154 = 0;
  int v153 = 0;
LABEL_171:
  unsigned __int8 v155 = atomic_load((unsigned __int8 *)this + 12161);
  if (v155)
  {
    *(void *)std::string buf = (char *)this + 12164;
    int v156 = caulk::pooled_semaphore_mutex::try_lock((AUSpatialMixerV2 *)((char *)this + 12164));
    buf[8] = v156;
    if (v156)
    {
      uint64_t v157 = (_DWORD *)*((void *)this + 1516);
      if (v157 != *((_DWORD **)this + 1517)) {
        v153 += *v157;
      }
    }
    std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)buf);
  }
  float v398 = 0.0;
  int v158 = (*(uint64_t (**)(AUSpatialMixerV2 *, uint64_t, void, void, float *))(*(void *)this + 144))(this, 9, 0, 0, &v398);
  v160.n128_u32[0] = 1.0;
  if (!v158) {
    v160.n128_f32[0] = __exp10f(v398 * 0.05);
  }
  float v398 = v160.n128_f32[0];
  if (*((unsigned char *)this + 2000)
    && (unsigned int v161 = *((_DWORD *)this + 504), v162 = atomic_load((unsigned int *)this + 505), v161 >= v162 + v153))
  {
    int v147 = 0;
  }
  else
  {
    __Step.i64[0] = (uint64_t)this + 1968;
    int v163 = caulk::pooled_semaphore_mutex::try_lock((AUSpatialMixerV2 *)((char *)this + 1968));
    __Step.i8[8] = v163;
    if (v163)
    {
      float v164 = v398;
      *((float *)this + 178) = v398;
      *((float *)this + 181) = v164 * *((float *)this + 179);
      uint64_t v165 = *((void *)this + 247);
      if (v395 == 2)
      {
        if (a3)
        {
          uint64_t v166 = 0;
          v167 = *v145;
          uint32_t v168 = v145[1];
          do
          {
            uint64_t v169 = 0;
            uint64_t v170 = -1152;
            do
            {
              v171 = (float *)((char *)this + v170);
              unsigned int v172 = *(_DWORD *)((char *)this + v170 + 1996);
              float v173 = (float)(*(float *)(*(void *)((char *)this + v170 + 1952)
                                      + 4 * (*(_DWORD *)((unsigned char *)this + v170 + 1992) & v172))
                           * *(float *)((char *)this + v170 + 1980))
                   + (float)(*(float *)((char *)this + v170 + 1976) * *(float *)((char *)this + v170 + 1984));
              *(float *)&buf[v169] = v173;
              v171[496] = v173;
              *((_DWORD *)v171 + 499) = v172 + 1;
              v169 += 4;
              v170 += 72;
            }
            while (v170);
            uint64_t v174 = 0;
            float v175 = (float)(*(float *)buf + *(float *)&buf[4]) + (float)(*(float *)&buf[8] + *(float *)v401);
            float v176 = (float)(*(float *)buf - *(float *)&buf[4]) + (float)(*(float *)&buf[8] - *(float *)v401);
            float v177 = (float)(*(float *)buf + *(float *)&buf[4]) - (float)(*(float *)&buf[8] + *(float *)v401);
            float v178 = (float)(*(float *)buf - *(float *)&buf[4]) - (float)(*(float *)&buf[8] - *(float *)v401);
            float v179 = (float)(*(float *)&v401[4] + *(float *)&v401[8]) + (float)(*(float *)&v402 + *((float *)&v402 + 1));
            float v180 = (float)(*(float *)&v401[4] - *(float *)&v401[8]) + (float)(*(float *)&v402 - *((float *)&v402 + 1));
            float v181 = (float)(*(float *)&v401[4] + *(float *)&v401[8]) - (float)(*(float *)&v402 + *((float *)&v402 + 1));
            float v182 = (float)(*(float *)&v401[4] - *(float *)&v401[8]) - (float)(*(float *)&v402 - *((float *)&v402 + 1));
            float v183 = (float)(*(float *)v403 + *(float *)&v403[4]) + (float)(*(float *)&v403[8] + *(float *)&v404);
            float v184 = (float)(*(float *)v403 - *(float *)&v403[4]) + (float)(*(float *)&v403[8] - *(float *)&v404);
            float v185 = (float)(*(float *)v403 + *(float *)&v403[4]) - (float)(*(float *)&v403[8] + *(float *)&v404);
            float v186 = (float)(*(float *)v403 - *(float *)&v403[4]) - (float)(*(float *)&v403[8] - *(float *)&v404);
            float v187 = (float)(*((float *)&v404 + 1) + *(float *)v405) + (float)(*(float *)&v405[4] + *(float *)&v405[8]);
            float v188 = (float)(*((float *)&v404 + 1) - *(float *)v405) + (float)(*(float *)&v405[4] - *(float *)&v405[8]);
            float v189 = (float)(*((float *)&v404 + 1) + *(float *)v405) - (float)(*(float *)&v405[4] + *(float *)&v405[8]);
            float v190 = (float)(*((float *)&v404 + 1) - *(float *)v405) - (float)(*(float *)&v405[4] - *(float *)&v405[8]);
            float v191 = v175 + v179;
            float v192 = v176 + v180;
            float v193 = v177 + v181;
            float v194 = v178 + v182;
            float v195 = v175 - v179;
            float v196 = v176 - v180;
            float v197 = v177 - v181;
            float v198 = v178 - v182;
            float v199 = v183 + v187;
            float v200 = v184 + v188;
            float v201 = v185 + v189;
            float v202 = v186 + v190;
            float v203 = v183 - v187;
            float v204 = v184 - v188;
            float v205 = v185 - v189;
            float v206 = v186 - v190;
            *(float *)std::string buf = v191 + v199;
            *(float *)&uint8_t buf[4] = v192 + v200;
            *(float *)&buf[8] = v193 + v201;
            *(float *)std::string v401 = v194 + v202;
            *(float *)&v401[4] = v195 + v203;
            *(float *)&v401[8] = v196 + v204;
            *(float *)&double v402 = v197 + v205;
            *((float *)&v402 + 1) = v198 + v206;
            *(float *)int v403 = v191 - v199;
            *(float *)&v403[4] = v192 - v200;
            *(float *)&v403[8] = v193 - v201;
            *(float *)&double v404 = v194 - v202;
            *((float *)&v404 + 1) = v195 - v203;
            *(float *)__int16 v405 = v196 - v204;
            *(float *)&v405[4] = v197 - v205;
            *(float *)&v405[8] = v198 - v206;
            float v207 = *((float *)this + 182);
            float v208 = *((float *)this + 183);
            float v209 = (float)((float)(v192 + v200) * v207) + (float)(v208 * *((float *)this + 184));
            *((float *)this + 184) = v192 + v200;
            float v210 = (float)(v207 * (float)(v193 + v201)) + (float)(v208 * *((float *)this + 185));
            *((float *)this + 185) = v193 + v201;
            v167[v166] = v167[v166] + (float)(v209 * *((float *)this + 181));
            v168[v166] = v168[v166] + (float)(v210 * *((float *)this + 181));
            float v211 = *(float *)(v165 + 4 * v166);
            unsigned int v212 = (_DWORD *)((char *)this + 848);
            do
            {
              int v213 = *v212;
              *(float *)(*((void *)v212 - 6) + 4 * (*(v212 - 2) & *v212)) = v211
                                                                                            + *(float *)&buf[v174];
              *unsigned int v212 = v213 + 1;
              v212 += 18;
              v174 += 4;
            }
            while (v174 != 64);
            ++v166;
          }
          while (v166 != a3);
        }
      }
      else if (a3)
      {
        uint64_t v214 = 0;
        do
        {
          uint64_t v215 = 0;
          uint64_t v216 = -1152;
          do
          {
            unsigned int v217 = (float *)((char *)this + v216);
            unsigned int v218 = *(_DWORD *)((char *)this + v216 + 1996);
            float v219 = (float)(*(float *)(*(void *)((char *)this + v216 + 1952)
                                    + 4 * (*(_DWORD *)((unsigned char *)this + v216 + 1992) & v218))
                         * *(float *)((char *)this + v216 + 1980))
                 + (float)(*(float *)((char *)this + v216 + 1976) * *(float *)((char *)this + v216 + 1984));
            *(float *)&buf[v215] = v219;
            v217[496] = v219;
            *((_DWORD *)v217 + 499) = v218 + 1;
            v215 += 4;
            v216 += 72;
          }
          while (v216);
          float v220 = (float)(*(float *)buf + *(float *)&buf[4]) + (float)(*(float *)&buf[8] + *(float *)v401);
          float v221 = (float)(*(float *)buf - *(float *)&buf[4]) + (float)(*(float *)&buf[8] - *(float *)v401);
          float v222 = (float)(*(float *)buf + *(float *)&buf[4]) - (float)(*(float *)&buf[8] + *(float *)v401);
          float v223 = (float)(*(float *)buf - *(float *)&buf[4]) - (float)(*(float *)&buf[8] - *(float *)v401);
          float v224 = (float)(*(float *)&v401[4] + *(float *)&v401[8]) + (float)(*(float *)&v402 + *((float *)&v402 + 1));
          float v225 = (float)(*(float *)&v401[4] - *(float *)&v401[8]) + (float)(*(float *)&v402 - *((float *)&v402 + 1));
          float v226 = (float)(*(float *)&v401[4] + *(float *)&v401[8]) - (float)(*(float *)&v402 + *((float *)&v402 + 1));
          float v227 = (float)(*(float *)&v401[4] - *(float *)&v401[8]) - (float)(*(float *)&v402 - *((float *)&v402 + 1));
          float v228 = (float)(*(float *)v403 + *(float *)&v403[4]) + (float)(*(float *)&v403[8] + *(float *)&v404);
          float v229 = (float)(*(float *)v403 - *(float *)&v403[4]) + (float)(*(float *)&v403[8] - *(float *)&v404);
          float v230 = (float)(*(float *)v403 + *(float *)&v403[4]) - (float)(*(float *)&v403[8] + *(float *)&v404);
          float v231 = (float)(*(float *)v403 - *(float *)&v403[4]) - (float)(*(float *)&v403[8] - *(float *)&v404);
          float v232 = (float)(*((float *)&v404 + 1) + *(float *)v405) + (float)(*(float *)&v405[4] + *(float *)&v405[8]);
          float v233 = (float)(*((float *)&v404 + 1) - *(float *)v405) + (float)(*(float *)&v405[4] - *(float *)&v405[8]);
          float v234 = (float)(*((float *)&v404 + 1) + *(float *)v405) - (float)(*(float *)&v405[4] + *(float *)&v405[8]);
          float v235 = (float)(*((float *)&v404 + 1) - *(float *)v405) - (float)(*(float *)&v405[4] - *(float *)&v405[8]);
          float v236 = v220 + v224;
          float v237 = v221 + v225;
          float v238 = v222 + v226;
          float v239 = v223 + v227;
          float v240 = v220 - v224;
          float v241 = v221 - v225;
          float v242 = v222 - v226;
          float v243 = v223 - v227;
          float v244 = v228 + v232;
          float v245 = v229 + v233;
          float v246 = v230 + v234;
          float v247 = v231 + v235;
          float v248 = v228 - v232;
          float v249 = v229 - v233;
          float v250 = v230 - v234;
          *(float *)std::string buf = v236 + v244;
          *(float *)&uint8_t buf[4] = v237 + v245;
          *(float *)&buf[8] = v238 + v246;
          *(float *)std::string v401 = v239 + (float)(v231 + v235);
          *(float *)&v401[4] = v240 + v248;
          *(float *)&v401[8] = v241 + v249;
          float v251 = v231 - v235;
          *(float *)&double v402 = v242 + v250;
          *((float *)&v402 + 1) = v243 + v251;
          *(float *)int v403 = v236 - v244;
          *(float *)&v403[4] = v237 - v245;
          *(float *)&v403[8] = v238 - v246;
          *(float *)&double v404 = v239 - v247;
          *((float *)&v404 + 1) = v240 - v248;
          *(float *)__int16 v405 = v241 - v249;
          *(float *)&v405[4] = v242 - v250;
          *(float *)&v405[8] = v243 - v251;
          int v252 = (float *)&buf[4];
          unint64_t v253 = v395;
          v254 = v145;
          if (v395)
          {
            do
            {
              float v255 = *v252++;
              float v256 = v255 * *((float *)this + 181);
              uint64_t v257 = (uint64_t)*v254++;
              *(float *)(v257 + 4 * v214) = v256 + *(float *)(v257 + 4 * v214);
              --v253;
            }
            while (v253);
          }
          uint64_t v258 = 0;
          float v259 = *(float *)(v165 + 4 * v214);
          unint64_t v260 = (_DWORD *)((char *)this + 848);
          do
          {
            int v261 = *v260;
            *(float *)(*((void *)v260 - 6) + 4 * (*(v260 - 2) & *v260)) = v259 + *(float *)&buf[v258];
            *unint64_t v260 = v261 + 1;
            v260 += 18;
            v258 += 4;
          }
          while (v258 != 64);
          ++v214;
        }
        while (v214 != a3);
      }
    }
    std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&__Step);
    if (*((unsigned char *)this + 2000))
    {
      int v262 = *((_DWORD *)this + 504);
      _CF = __CFADD__(v262, a3);
      int v263 = v262 + a3;
      if (_CF) {
        int v263 = -1;
      }
      *((_DWORD *)this + 504) = v263;
    }
    else
    {
      *((_DWORD *)this + 504) = 0;
      vDSP_vclr(*((float **)this + 247), 1, a3);
      *((unsigned char *)this + 2000) = 1;
    }
    *((void *)this + 251) = *((void *)this + 247);
    int v147 = 1;
  }
  uint64_t v264 = *(void *)(*((void *)this + 341) + 200);
  if (!*((unsigned char *)this + 2072)
    || (unsigned int v265 = *((_DWORD *)this + 522), v266 = atomic_load((unsigned int *)this + 523), v265 < v266 + v153))
  {
    *(void *)std::string buf = (char *)this + 2032;
    int v267 = caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::try_lock((uint64_t)this + 2032);
    buf[8] = v267;
    if (v267)
    {
      uint64_t v268 = (IR::IRProcessor *)*((void *)this + 253);
      __Step.i64[0] = *((void *)this + 256);
      IR::IRProcessor::processMultipleInputs(v268, (const float **)&__Step, (float *const *)v264, 1u, 2u, a3, v398, 0);
      vDSP_vadd(*(const float **)v264, 1, *v145, 1, (float *)*v145, 1, a3);
      vDSP_vadd(*(const float **)(v264 + 8), 1, v145[1], 1, (float *)v145[1], 1, a3);
    }
    std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)buf);
    if (*((unsigned char *)this + 2072))
    {
      int v269 = *((_DWORD *)this + 522);
      _CF = __CFADD__(v269, a3);
      int v270 = v269 + a3;
      if (_CF) {
        int v270 = -1;
      }
      *((_DWORD *)this + 522) = v270;
    }
    else
    {
      *((_DWORD *)this + 522) = 0;
      vDSP_vclr(*((float **)this + 256), 1, a3);
      *((unsigned char *)this + 2072) = 1;
    }
    *((void *)this + 260) = *((void *)this + 256);
    int v147 = 1;
  }
  if ((v390 & v389 & v388 & 1) == 0
    || (unsigned int v271 = *((_DWORD *)this + 612), v272 = atomic_load((unsigned int *)this + 613), v271 < v272 + v153)
    || (v273 = *((_DWORD *)this + 624), unsigned int v274 = atomic_load((unsigned int *)this + 625), v273 < v274 + v153)
    || (unsigned int v275 = *((_DWORD *)this + 636), v276 = atomic_load((unsigned int *)this + 637), v275 < v276 + v153))
  {
    __Step.i32[0] = 0;
    IR::SharedIRBuses::process(v91, (float **)v264, v395, a3, v398, (unsigned int *)&__Step);
    *(void *)std::string buf = (char *)this + 2400;
    int v277 = caulk::pooled_semaphore_mutex::try_lock((AUSpatialMixerV2 *)((char *)this + 2400));
    buf[8] = v277;
    if (v277)
    {
      uint64_t v278 = (_DWORD *)*((void *)this + 297);
      if (v278 != *((_DWORD **)this + 298))
      {
        if (v395)
        {
          uint64_t v279 = 0;
          unint64_t v280 = 0;
          uint64_t v281 = (float **)v264;
          while (1)
          {
            uint64_t v278 = (_DWORD *)*((void *)this + 297);
            if (v280 >= -1227133513 * ((*((void *)this + 298) - (void)v278) >> 3)) {
              break;
            }
            IR::FixedIntegerDelay::process((IR::FixedIntegerDelay *)&v278[v279], *v281, *v281, a3);
            ++v280;
            v279 += 14;
            ++v281;
            if (14 * v395 == v279)
            {
              uint64_t v278 = (_DWORD *)*((void *)this + 297);
              break;
            }
          }
        }
        __Step.i32[0] += *v278;
      }
    }
    unsigned int v282 = __Step.i32[0];
    atomic_store(__Step.u32[0], (unsigned int *)this + 613);
    atomic_store(v282, (unsigned int *)this + 625);
    atomic_store(v282, (unsigned int *)this + 637);
    if (v395)
    {
      unint64_t v283 = (const float **)v264;
      v284 = v145;
      unint64_t v285 = v395;
      do
      {
        vDSP_vadd(*v283, 1, *v284, 1, (float *)*v284, 1, a3);
        ++v284;
        ++v283;
        --v285;
      }
      while (v285);
    }
    if (v390) {
      int v286 = *((_DWORD *)this + 612) + a3;
    }
    else {
      int v286 = 0;
    }
    *((_DWORD *)this + 612) = v286;
    if (v389) {
      int v287 = *((_DWORD *)this + 624) + a3;
    }
    else {
      int v287 = 0;
    }
    *((_DWORD *)this + 624) = v287;
    if (v388) {
      int v288 = *((_DWORD *)this + 636) + a3;
    }
    else {
      int v288 = 0;
    }
    *((_DWORD *)this + 636) = v288;
    std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)buf);
    int v147 = 1;
  }
  int v289 = (unsigned char *)*((void *)this + 341);
  BOOL v290 = v289[536] && v289[632] && v289[728] != 0;
  unint64_t v291 = (ParametricFilters *)*((void *)this + 1123);
  if (v291) {
    LODWORD(v291) = ParametricFilters::getTailLength(v291);
  }
  if (v290)
  {
    v160.n128_f32[0] = (float)v291;
    unsigned int v292 = *((_DWORD *)this + 2245);
    v159.n128_f32[0] = (float)v292;
    if ((float)v292 > (float)v291) {
      goto LABEL_335;
    }
  }
  unsigned __int8 v293 = atomic_load((unsigned __int8 *)this + 3522);
  if (v293)
  {
    if (v396)
    {
      uint64_t v294 = *((void *)this + 341);
      if (IR::ComplexDataCircBuffer::isInitialized((IR::ComplexDataCircBuffer *)(v294 + 784)))
      {
        SampleDataPtrs = (void *)IR::ComplexDataCircBuffer::getSampleDataPtrs((IR::ComplexDataCircBuffer *)(v294 + 784));
        if (*(unsigned int *)(v294 + 540) < (unint64_t)((uint64_t)(SampleDataPtrs[1] - *SampleDataPtrs) >> 3)) {
          __assert_rtn("operator()", "AUSpatialMixerV2.mm", 2937, "fftBuffer.getSampleDataPtrs().size() <= erBuffer.numChannels()");
        }
        for (unsigned int j = 0; ; ++j)
        {
          v297 = (void *)IR::ComplexDataCircBuffer::getSampleDataPtrs((IR::ComplexDataCircBuffer *)(v294 + 784));
          if (j >= (unint64_t)((uint64_t)(v297[1] - *v297) >> 3)) {
            break;
          }
          uint64_t v298 = *(void *)(*(void *)(v294 + 488) + 8 * j);
          *(void *)(*(void *)IR::ComplexDataCircBuffer::getSampleDataPtrs((IR::ComplexDataCircBuffer *)(v294 + 784))
                    + 8 * j) = v298;
        }
        IR::ComplexDataCircBuffer::inverseFFTOverlapAdd((IR::ComplexDataCircBuffer *)(v294 + 784));
      }
    }
    if ((v396 & 0x100000000) == 0) {
      goto LABEL_272;
    }
    uint64_t v299 = *((void *)this + 341);
    if (IR::ComplexDataCircBuffer::isInitialized((IR::ComplexDataCircBuffer *)(v299 + 792)))
    {
      int v300 = (void *)IR::ComplexDataCircBuffer::getSampleDataPtrs((IR::ComplexDataCircBuffer *)(v299 + 792));
      if (*(unsigned int *)(v299 + 636) < (unint64_t)((uint64_t)(v300[1] - *v300) >> 3)) {
        __assert_rtn("operator()", "AUSpatialMixerV2.mm", 2937, "fftBuffer.getSampleDataPtrs().size() <= erBuffer.numChannels()");
      }
      for (unsigned int k = 0; ; ++k)
      {
        v302 = (void *)IR::ComplexDataCircBuffer::getSampleDataPtrs((IR::ComplexDataCircBuffer *)(v299 + 792));
        if (k >= (unint64_t)((uint64_t)(v302[1] - *v302) >> 3)) {
          break;
        }
        uint64_t v303 = *(void *)(*(void *)(v299 + 584) + 8 * k);
        *(void *)(*(void *)IR::ComplexDataCircBuffer::getSampleDataPtrs((IR::ComplexDataCircBuffer *)(v299 + 792))
                  + 8 * k) = v303;
      }
      IR::ComplexDataCircBuffer::inverseFFTOverlapAdd((IR::ComplexDataCircBuffer *)(v299 + 792));
    }
    if (v396)
    {
      uint64_t v304 = *((void *)this + 341);
      if (IR::ComplexDataCircBuffer::isInitialized((IR::ComplexDataCircBuffer *)(v304 + 800)))
      {
        v305 = (void *)IR::ComplexDataCircBuffer::getSampleDataPtrs((IR::ComplexDataCircBuffer *)(v304 + 800));
        if (*(unsigned int *)(v304 + 732) < (unint64_t)((uint64_t)(v305[1] - *v305) >> 3)) {
          __assert_rtn("operator()", "AUSpatialMixerV2.mm", 2937, "fftBuffer.getSampleDataPtrs().size() <= erBuffer.numChannels()");
        }
        for (unsigned int m = 0; ; ++m)
        {
          uint64_t v307 = (void *)IR::ComplexDataCircBuffer::getSampleDataPtrs((IR::ComplexDataCircBuffer *)(v304 + 800));
          if (m >= (unint64_t)((uint64_t)(v307[1] - *v307) >> 3)) {
            break;
          }
          uint64_t v308 = *(void *)(*(void *)(v304 + 680) + 8 * m);
          *(void *)(*(void *)IR::ComplexDataCircBuffer::getSampleDataPtrs((IR::ComplexDataCircBuffer *)(v304 + 800))
                    + 8 * m) = v308;
        }
        IR::ComplexDataCircBuffer::inverseFFTOverlapAdd((IR::ComplexDataCircBuffer *)(v304 + 800));
      }
      int v309 = 1;
    }
    else
    {
LABEL_272:
      int v309 = 0;
    }
    if ((*((_DWORD *)this + 3025) & 0x80000000) == 0)
    {
      uint64_t v310 = *((void *)this + 339);
      if (v310)
      {
        if ((v396 & 1) != 0
          && IR::ComplexDataCircBuffer::isInitialized((IR::ComplexDataCircBuffer *)(v310 + 784)))
        {
          v311 = (void *)IR::ComplexDataCircBuffer::getSampleDataPtrs((IR::ComplexDataCircBuffer *)(v310 + 784));
          if (*(unsigned int *)(v310 + 540) < (unint64_t)((uint64_t)(v311[1] - *v311) >> 3)) {
            __assert_rtn("operator()", "AUSpatialMixerV2.mm", 2937, "fftBuffer.getSampleDataPtrs().size() <= erBuffer.numChannels()");
          }
          for (unsigned int n = 0; ; ++n)
          {
            int v313 = (void *)IR::ComplexDataCircBuffer::getSampleDataPtrs((IR::ComplexDataCircBuffer *)(v310 + 784));
            if (n >= (unint64_t)((uint64_t)(v313[1] - *v313) >> 3)) {
              break;
            }
            uint64_t v314 = *(void *)(*(void *)(v310 + 488) + 8 * n);
            *(void *)(*(void *)IR::ComplexDataCircBuffer::getSampleDataPtrs((IR::ComplexDataCircBuffer *)(v310 + 784))
                      + 8 * n) = v314;
          }
          IR::ComplexDataCircBuffer::inverseFFTOverlapAdd((IR::ComplexDataCircBuffer *)(v310 + 784));
        }
        if ((v396 & 0x100000000) != 0)
        {
          uint64_t v315 = *((void *)this + 339);
          if (IR::ComplexDataCircBuffer::isInitialized((IR::ComplexDataCircBuffer *)(v315 + 792)))
          {
            v316 = (void *)IR::ComplexDataCircBuffer::getSampleDataPtrs((IR::ComplexDataCircBuffer *)(v315 + 792));
            if (*(unsigned int *)(v315 + 636) < (unint64_t)((uint64_t)(v316[1] - *v316) >> 3)) {
              __assert_rtn("operator()", "AUSpatialMixerV2.mm", 2937, "fftBuffer.getSampleDataPtrs().size() <= erBuffer.numChannels()");
            }
            for (iuint64_t i = 0; ; ++ii)
            {
              float v318 = (void *)IR::ComplexDataCircBuffer::getSampleDataPtrs((IR::ComplexDataCircBuffer *)(v315 + 792));
              if (ii >= (unint64_t)((uint64_t)(v318[1] - *v318) >> 3)) {
                break;
              }
              uint64_t v319 = *(void *)(*(void *)(v315 + 584) + 8 * ii);
              *(void *)(*(void *)IR::ComplexDataCircBuffer::getSampleDataPtrs((IR::ComplexDataCircBuffer *)(v315 + 792))
                        + 8 * ii) = v319;
            }
            IR::ComplexDataCircBuffer::inverseFFTOverlapAdd((IR::ComplexDataCircBuffer *)(v315 + 792));
          }
        }
        if (v309)
        {
          uint64_t v320 = *((void *)this + 339);
          if (IR::ComplexDataCircBuffer::isInitialized((IR::ComplexDataCircBuffer *)(v320 + 800)))
          {
            int v321 = (void *)IR::ComplexDataCircBuffer::getSampleDataPtrs((IR::ComplexDataCircBuffer *)(v320 + 800));
            if (*(unsigned int *)(v320 + 732) < (unint64_t)((uint64_t)(v321[1] - *v321) >> 3)) {
              __assert_rtn("operator()", "AUSpatialMixerV2.mm", 2937, "fftBuffer.getSampleDataPtrs().size() <= erBuffer.numChannels()");
            }
            for (junsigned int j = 0; ; ++jj)
            {
              v323 = (void *)IR::ComplexDataCircBuffer::getSampleDataPtrs((IR::ComplexDataCircBuffer *)(v320 + 800));
              if (jj >= (unint64_t)((uint64_t)(v323[1] - *v323) >> 3)) {
                break;
              }
              uint64_t v324 = *(void *)(*(void *)(v320 + 680) + 8 * jj);
              *(void *)(*(void *)IR::ComplexDataCircBuffer::getSampleDataPtrs((IR::ComplexDataCircBuffer *)(v320 + 800))
                        + 8 * jj) = v324;
            }
            IR::ComplexDataCircBuffer::inverseFFTOverlapAdd((IR::ComplexDataCircBuffer *)(v320 + 800));
          }
        }
        int v325 = *((_DWORD *)this + 3025);
        _CF = __CFADD__(v325, a3);
        unsigned int v326 = v325 + a3;
        if (_CF) {
          unsigned int v327 = -1;
        }
        else {
          unsigned int v327 = v326;
        }
        *((_DWORD *)this + 3025) = v327;
        if (v327 >= IR::ComplexDataCircBuffer::getFFTPartitionLength((IR::ComplexDataCircBuffer *)(*((void *)this + 339) + 784)))
        {
          unsigned int v328 = *((_DWORD *)this + 3025);
          if (v328 >= IR::ComplexDataCircBuffer::getFFTPartitionLength((IR::ComplexDataCircBuffer *)(*((void *)this + 339) + 792)))
          {
            unsigned int v329 = *((_DWORD *)this + 3025);
            if (v329 >= IR::ComplexDataCircBuffer::getFFTPartitionLength((IR::ComplexDataCircBuffer *)(*((void *)this + 339) + 800)))
            {
              *((_DWORD *)this + 3025) = -1;
              unsigned __int8 v330 = (caulk::concurrent::messenger *)*((void *)this + 411);
              if (!v330) {
                __assert_rtn("ProcessMultipleBufferListsPrivate", "AUSpatialMixerV2.mm", 2961, "mMessenger.get() != nullptr");
              }
              uint64_t v331 = *((void *)this + 339);
              *((void *)this + 339) = 0;
              *(void *)std::string buf = v331;
              caulk::concurrent::messenger::enqueue_call<AUSpatialMixerV2::ProcessMultipleBufferListsPrivate(unsigned int &,unsigned int,unsigned int,AudioBufferList const**,unsigned int,AudioBufferList**,AudioTimeStamp const&)::$_3>(v330, (uint64_t *)buf);
              std::unique_ptr<AUSM::SharedBuffers>::reset[abi:ne180100]((uint64_t *)buf, 0);
            }
          }
        }
      }
    }
  }
  if ((v396 & 0x100000000) == 0) {
    goto LABEL_313;
  }
  uint64_t v332 = *((void *)this + 1123);
  if (v332) {
    ParametricFilters::process(v332, *(float *const **)(*((void *)this + 341) + 584), 0, a3, (float **)v264);
  }
  if (v396)
  {
    uint64_t v333 = *((void *)this + 1124);
    if (v333) {
      ParametricFilters::process(v333, *(float *const **)(*((void *)this + 341) + 680), 0, a3, (float **)v264);
    }
    char v334 = 0;
  }
  else
  {
LABEL_313:
    char v334 = 1;
  }
  if (v395)
  {
    for (kunsigned int k = 0; kk != v395; ++kk)
    {
      if (v396) {
        vDSP_vadd(*(const float **)(*(void *)(*((void *)this + 341) + 488) + 8 * kk), 1, v145[kk], 1, (float *)v145[kk], 1, a3);
      }
      if ((v396 & 0x100000000) != 0)
      {
        uint64_t v336 = *((void *)this + 341);
        if (kk < *(unsigned int *)(v336 + 636)) {
          vDSP_vadd(*(const float **)(*(void *)(v336 + 584) + 8 * kk), 1, v145[kk], 1, (float *)v145[kk], 1, a3);
        }
      }
      if ((v334 & 1) == 0)
      {
        uint64_t v337 = *((void *)this + 341);
        if (kk < *(unsigned int *)(v337 + 732)) {
          vDSP_vadd(*(const float **)(*(void *)(v337 + 680) + 8 * kk), 1, v145[kk], 1, (float *)v145[kk], 1, a3);
        }
      }
    }
  }
  if (v396)
  {
    uint64_t v338 = *((void *)this + 341);
    v339 = *(void ***)(v338 + 488);
    for (munsigned int m = *(void ***)(v338 + 496); v339 != mm; ++v339)
    {
      if (*v339) {
        bzero(*v339, 4 * a3);
      }
    }
    *(unsigned char *)(v338 + 536) = 1;
  }
  if ((v396 & 0x100000000) == 0)
  {
    if (v334) {
      goto LABEL_333;
    }
LABEL_344:
    uint64_t v345 = *((void *)this + 341);
    uint64_t v346 = *(void ***)(v345 + 680);
    for (nunsigned int n = *(void ***)(v345 + 688); v346 != nn; ++v346)
    {
      if (*v346) {
        bzero(*v346, 4 * a3);
      }
    }
    *(unsigned char *)(v345 + 728) = 1;
    if (v290) {
      goto LABEL_334;
    }
    goto LABEL_349;
  }
  uint64_t v342 = *((void *)this + 341);
  uint64_t v343 = *(void ***)(v342 + 584);
  for (i1 = *(void ***)(v342 + 592); v343 != i1; ++v343)
  {
    if (*v343) {
      bzero(*v343, 4 * a3);
    }
  }
  *(unsigned char *)(v342 + 632) = 1;
  if ((v334 & 1) == 0) {
    goto LABEL_344;
  }
LABEL_333:
  if (v290)
  {
LABEL_334:
    unsigned int v292 = *((_DWORD *)this + 2245);
    int v147 = 1;
LABEL_335:
    _CF = __CFADD__(v292, a3);
    int v341 = v292 + a3;
    if (_CF) {
      int v341 = -1;
    }
    *((_DWORD *)this + 2245) = v341;
    goto LABEL_350;
  }
LABEL_349:
  *((_DWORD *)this + 2245) = 0;
  int v147 = 1;
LABEL_350:
  unsigned __int8 v348 = atomic_load((unsigned __int8 *)this + 12161);
  if (v348)
  {
    *(void *)std::string buf = (char *)this + 12164;
    int v349 = caulk::pooled_semaphore_mutex::try_lock((AUSpatialMixerV2 *)((char *)this + 12164));
    buf[8] = v349;
    if (v349)
    {
      if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)this + 1517) - *((void *)this + 1516)) >> 3) >= v395
        && v395 != 0)
      {
        uint64_t v351 = 0;
        float v352 = (float **)v145;
        do
        {
          IR::FixedIntegerDelay::process((IR::FixedIntegerDelay *)(*((void *)this + 1516) + v351), *v352, *v352, a3);
          v351 += 56;
          ++v352;
        }
        while (56 * v395 != v351);
      }
    }
    std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)buf);
  }
  unint64_t v353 = v395;
  if (v154)
  {
    uint64_t v354 = *((void *)this + 355);
    int v355 = *((_DWORD *)this + 735);
    int v356 = *((unsigned __int8 *)this + 2936);
    int v357 = *((_DWORD *)this + 733);
    if (*((_DWORD *)this + 736) == v355)
    {
      v358 = (void *)((char *)this + 2672);
      if (*((unsigned char *)this + 2704)) {
        goto LABEL_373;
      }
      float v359 = *((float *)this + 670);
      float v360 = *((float *)this + 671);
      float v361 = *((float *)this + 672);
LABEL_367:
      float v364 = *((float *)this + 673);
      float v365 = *((float *)this + 674);
      float v366 = *((float *)this + 675);
      if (vabds_f32(v359, v364) >= 0.5 || vabds_f32(v360, v365) >= 0.1 || vabds_f32(v361, v366) >= 0.1)
      {
        float v359 = v364 + (float)((float)(v359 - v364) * 0.1);
        float v360 = v365 + (float)((float)(v360 - v365) * 0.1);
        float v361 = v366 + (float)((float)(v361 - v366) * 0.1);
      }
      else
      {
        *((unsigned char *)this + 2704) = 1;
      }
      *((float *)this + 673) = v359;
      *((float *)this + 674) = v360;
      *((float *)this + 675) = v361;
      float v363 = v144;
      AUSpatialMixerV2::SetReverbFilter(this, v359, v360, v361, v357, v363);
LABEL_373:
      unint64_t v353 = v395;
      if (*v358 && v356)
      {
        (*(void (**)(void, vDSP_Length, uint64_t, uint64_t, __n128, __n128))(*(void *)*v358 + 32))(*v358, a3, v354, v354, v160, v159);
        unint64_t v353 = v395;
      }
      goto LABEL_377;
    }
    float v359 = *((float *)this + 730);
    float v360 = *((float *)this + 731);
    float v361 = *((float *)this + 732);
    *((_DWORD *)this + 736) = v355;
    if (v356)
    {
      v358 = (void *)((char *)this + 2672);
      *((float *)this + 670) = v359;
      *((float *)this + 671) = v360;
      *((float *)this + 672) = v361;
      *((unsigned char *)this + 2704) = 0;
      goto LABEL_367;
    }
    *((unsigned char *)this + 2704) = 1;
    *(void *)((char *)this + 2692) = *((void *)this + 335);
    *((_DWORD *)this + 675) = *((_DWORD *)this + 672);
LABEL_377:
    uint64_t v367 = *((void *)this + 341);
    if (v353)
    {
      unint64_t v368 = 0;
      uint64_t v369 = 8 * v353;
      do
      {
        vDSP_vadd(*(const float **)(*(void *)(v367 + 328) + v368), 1, v145[v368 / 8], 1, *(float **)(*(void *)(v367 + 328) + v368), 1, a3);
        v368 += 8;
      }
      while (v369 != v368);
    }
    *(unsigned char *)(v367 + 376) = 0;
    goto LABEL_381;
  }
  unsigned __int8 v362 = atomic_load((unsigned __int8 *)this + 12161);
  if (v362) {
    goto LABEL_377;
  }
LABEL_381:
  unsigned __int8 v370 = atomic_load((unsigned __int8 *)this + 2608);
  if (v370)
  {
    v371 = *v387;
    if (!*((unsigned char *)this + 2584)
      || (unsigned int v372 = *((_DWORD *)this + 650), v373 = atomic_load((unsigned int *)this + 651), v372 < v373 + 512))
    {
      if (v371->mNumberBuffers >= 0x10) {
        uint64_t v374 = 16;
      }
      else {
        uint64_t v374 = v371->mNumberBuffers;
      }
      int v375 = *((_DWORD *)this + 3023);
      float v376 = 0.0;
      if ((v375 - 17) >= 0xFFFFFFF0) {
        float v376 = AUSM::kDiffuseIRCompensationGains[v375 - 1];
      }
      if (v374)
      {
        uint64_t v377 = *((void *)this + 320);
        long long v378 = (const float **)&v371->mBuffers[0].mData;
        long long v379 = (AUSpatialMixerV2 *)((char *)this + 9016);
        while (*((_DWORD *)v378 - 2) == 1)
        {
          if (*((unsigned char *)v379 + 184))
          {
            __Step.i64[0] = *(void *)(*((void *)this + 341) + 128);
            *(void *)std::string buf = v377;
            IR::IRProcessor::processMultipleInputs(v379, (const float **)buf, (float *const *)&__Step, 1u, 1u, a3, v376, 0);
            vDSP_vadd((const float *)__Step.i64[0], 1, *v378, 1, (float *)*v378, 1, a3);
          }
          v378 += 2;
          long long v379 = (IR::IRProcessor *)((char *)v379 + 192);
          if (!--v374) {
            goto LABEL_395;
          }
        }
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        unint64_t v382 = (id)getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled(v382, OS_LOG_TYPE_DEBUG))
        {
          long long v385 = (void *)((char *)this + 3368);
          if (*((char *)this + 3391) < 0) {
            long long v385 = (void *)*v385;
          }
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = v385;
          *(_WORD *)std::string v401 = 2080;
          *(void *)&v401[2] = "ProcessDiffuse";
          _os_log_debug_impl(&dword_1BB0CE000, v382, OS_LOG_TYPE_DEBUG, "[%s|%s] ERROR: diffuse does not support interleaved output formats", buf, 0x16u);
        }
      }
      else
      {
LABEL_395:
        if (*((unsigned char *)this + 2584))
        {
          int v380 = *((_DWORD *)this + 650);
          _CF = __CFADD__(v380, a3);
          int v381 = v380 + a3;
          if (_CF) {
            int v381 = -1;
          }
          *((_DWORD *)this + 650) = v381;
        }
        else
        {
          *((_DWORD *)this + 650) = 0;
          vDSP_vclr(*((float **)this + 320), 1, a3);
          *((unsigned char *)this + 2584) = 1;
        }
        *((void *)this + 324) = *((void *)this + 320);
      }
    }
  }
  uint64_t result = 0;
  if (*(unsigned char *)(*((void *)this + 341) + 376)) {
    int v383 = v147;
  }
  else {
    int v383 = 1;
  }
  if (v383) {
    int v384 = 0;
  }
  else {
    int v384 = 16;
  }
  *a2 = v384 | *a2 & 0xFFFFFFEF;
  return result;
}

void sub_1BB3D3AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
}

double AUSM::AUFXWrapper::processInPlace(AUSM::AUFXWrapper *this, AudioUnitRenderActionFlags *ioActionFlags, UInt32 inNumberFrames, AudioBufferList *ioData)
{
  inInputBufferLists[1] = *(AudioBufferList **)MEMORY[0x1E4F143B8];
  uint64_t v5 = *(OpaqueAudioComponentInstance **)this;
  if (v5 && *((unsigned char *)this + 124))
  {
    int v9 = *((_DWORD *)this + 32);
    if (v9 == 2)
    {
      UInt32 v10 = *((_DWORD *)this + 53);
      if (v10 >= ioData->mNumberBuffers) {
        unint64_t mNumberBuffers = ioData->mNumberBuffers;
      }
      else {
        unint64_t mNumberBuffers = v10;
      }
      **((_DWORD **)this + 20) = mNumberBuffers;
      unsigned int v12 = (*((_DWORD *)this + 36) - *((_DWORD *)this + 34)) & 0xFFFFFFFC;
      if (mNumberBuffers) {
        BOOL v13 = v12 == 0;
      }
      else {
        BOOL v13 = 1;
      }
      if (v13)
      {
        LODWORD(v15) = 0;
      }
      else
      {
        uint64_t v14 = 0;
        uint64_t v15 = 0;
        unsigned int v16 = 0;
        do
        {
          UInt32 mDataByteSize = ioData->mBuffers[v14].mDataByteSize;
          if (mDataByteSize >= v12 - v16) {
            size_t v18 = v12 - v16;
          }
          else {
            size_t v18 = mDataByteSize;
          }
          uint64_t v19 = *((void *)this + 20) + v14 * 16;
          *(_DWORD *)(v19 + 8) = ioData->mBuffers[v14].mNumberChannels;
          *(_DWORD *)(v19 + 12) = v18;
          int v20 = (void *)(*((void *)this + 17) + v16);
          *(void *)(v19 + 16) = v20;
          memcpy(v20, ioData->mBuffers[v14].mData, v18);
          if (++v15 >= mNumberBuffers) {
            break;
          }
          v16 += v18;
          ++v14;
        }
        while (v16 < v12);
      }
      if (v15 < ioData->mNumberBuffers && v15 < mNumberBuffers) {
        bzero((void *)(*((void *)this + 20) + 16 * v15 + 8), 16 * (mNumberBuffers + ~v15) + 16);
      }
      uint64_t v21 = (void *)*((void *)this + 23);
      int64_t v22 = *((void *)this + 24) - (void)v21;
      if (v22 >= 1) {
        bzero(v21, v22);
      }
      uint64_t v23 = (AudioBufferList *)*((void *)this + 20);
      if (v23->mBuffers[0].mNumberChannels == 1 && *((_DWORD *)this + 52) == 4)
      {
        UInt32 v24 = v23->mNumberBuffers;
        uint64_t v25 = *((void *)this + 23);
        if (v23->mNumberBuffers >= ((unint64_t)(*((void *)this + 24) - v25) >> 3)) {
          UInt32 v24 = (unint64_t)(*((void *)this + 24) - v25) >> 3;
        }
        if (v24)
        {
          unint64_t v26 = 0;
          uint64_t v27 = 16;
          do
          {
            *(void *)(v25 + 8 * v26++) = *(void *)((char *)&v23->mNumberBuffers + v27);
            uint64_t v23 = (AudioBufferList *)*((void *)this + 20);
            LODWORD(v28) = v23->mNumberBuffers;
            uint64_t v25 = *((void *)this + 23);
            unint64_t v29 = (unint64_t)(*((void *)this + 24) - v25) >> 3;
            if (v23->mNumberBuffers >= v29) {
              unint64_t v28 = v29;
            }
            else {
              unint64_t v28 = v28;
            }
            v27 += 16;
          }
          while (v26 < v28);
        }
      }
      ioOutputBufferLists = ioData;
      inInputBufferLists[0] = v23;
      AudioUnitProcessMultiple(*(AudioUnit *)this, ioActionFlags, (const AudioTimeStamp *)((char *)this + 8), inNumberFrames, 1u, (const AudioBufferList **)inInputBufferLists, 1u, &ioOutputBufferLists);
    }
    else
    {
      if (v9 != 1) {
        return result;
      }
      AudioUnitProcess(v5, ioActionFlags, (const AudioTimeStamp *)((char *)this + 8), inNumberFrames, ioData);
    }
    double result = *((double *)this + 1) + (double)inNumberFrames;
    *((double *)this + 1) = result;
  }
  return result;
}

uint64_t AUSM::Metadata::prepareParameterTracks(AUSM::Metadata *this, unint64_t a2, unint64_t a3)
{
  uint64_t v6 = (std::string *)((char *)this + 200);
  CFStringRef v7 = (const std::string *)((char *)this + 104);
  uint64_t v8 = *((unsigned __int8 *)this + 223);
  if ((v8 & 0x80u) == 0) {
    uint64_t v9 = *((unsigned __int8 *)this + 223);
  }
  else {
    uint64_t v9 = *((void *)this + 26);
  }
  uint64_t v10 = *((unsigned __int8 *)this + 127);
  char v11 = v10;
  uint64_t v12 = *((void *)this + 14);
  if ((v10 & 0x80u) == 0) {
    uint64_t v13 = *((unsigned __int8 *)this + 127);
  }
  else {
    uint64_t v13 = *((void *)this + 14);
  }
  if (v9 == v13)
  {
    if ((v10 & 0x80u) == 0) {
      uint64_t v14 = (unsigned __int8 *)this + 104;
    }
    else {
      uint64_t v14 = (unsigned __int8 *)v7->__r_.__value_.__r.__words[0];
    }
    if ((v8 & 0x80) != 0)
    {
      if (!memcmp(v6->__r_.__value_.__l.__data_, v14, *((void *)this + 26))) {
        goto LABEL_19;
      }
    }
    else
    {
      if (!*((unsigned char *)this + 223)) {
        goto LABEL_19;
      }
      uint64_t v15 = (unsigned __int8 *)this + 200;
      while (*v15 == *v14)
      {
        ++v15;
        ++v14;
        if (!--v8) {
          goto LABEL_19;
        }
      }
    }
  }
  std::string::operator=(v6, v7);
  uint64_t v10 = *((unsigned __int8 *)this + 127);
  uint64_t v12 = *((void *)this + 14);
  char v11 = *((unsigned char *)this + 127);
LABEL_19:
  uint64_t v16 = *((unsigned __int8 *)this + 151);
  if ((v16 & 0x80u) == 0) {
    uint64_t v17 = *((unsigned __int8 *)this + 151);
  }
  else {
    uint64_t v17 = *((void *)this + 17);
  }
  if (v11 >= 0) {
    uint64_t v18 = v10;
  }
  else {
    uint64_t v18 = v12;
  }
  if (v17 == v18)
  {
    if (v11 >= 0) {
      uint64_t v19 = v7;
    }
    else {
      uint64_t v19 = (const std::string *)v7->__r_.__value_.__r.__words[0];
    }
    if ((v16 & 0x80) != 0)
    {
      if (!memcmp(*((const void **)this + 16), v19, *((void *)this + 17))) {
        goto LABEL_37;
      }
    }
    else
    {
      if (!*((unsigned char *)this + 151)) {
        goto LABEL_37;
      }
      int v20 = (unsigned __int8 *)this + 128;
      while (*v20 == v19->__r_.__value_.__s.__data_[0])
      {
        ++v20;
        uint64_t v19 = (const std::string *)((char *)v19 + 1);
        if (!--v16) {
          goto LABEL_37;
        }
      }
    }
  }
  std::string::operator=((std::string *)((char *)this + 128), v7);
LABEL_37:
  *((void *)this + 20) = 0;
  *((void *)this + 21) = a2;
  uint64_t v21 = *((void *)this + 22);
  int64_t v22 = (char *)*((void *)this + 23);
  unint64_t v23 = (uint64_t)&v22[-v21] >> 5;
  if (a2 <= v23)
  {
    if (a2 >= v23) {
      goto LABEL_58;
    }
    float v34 = (char *)(v21 + 32 * a2);
    goto LABEL_57;
  }
  uint64_t v24 = *((void *)this + 24);
  if (a2 - v23 <= (v24 - (uint64_t)v22) >> 5)
  {
    float v34 = &v22[32 * (a2 - v23)];
    do
    {
      *(void *)int64_t v22 = 0;
      *((void *)v22 + 1) = 0;
      *((_OWORD *)v22 + 1) = xmmword_1BB879F70;
      v22 += 32;
    }
    while (v22 != v34);
LABEL_57:
    *((void *)this + 23) = v34;
    goto LABEL_58;
  }
  if (a2 >> 59) {
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v25 = v24 - v21;
  uint64_t v26 = v25 >> 4;
  if (v25 >> 4 <= a2) {
    uint64_t v26 = a2;
  }
  if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v27 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v27 = v26;
  }
  if (v27 >> 59) {
LABEL_77:
  }
    std::__throw_bad_array_new_length[abi:ne180100]();
  unint64_t v28 = (char *)operator new(32 * v27);
  unint64_t v29 = &v28[32 * v23];
  uint64_t v30 = &v28[32 * a2];
  int v31 = v29;
  do
  {
    *(void *)int v31 = 0;
    *((void *)v31 + 1) = 0;
    *((_OWORD *)v31 + 1) = xmmword_1BB879F70;
    v31 += 32;
  }
  while (v31 != v30);
  uint32_t v32 = (char *)*((void *)this + 22);
  if (v22 != v32)
  {
    do
    {
      long long v33 = *((_OWORD *)v22 - 1);
      *((_OWORD *)v29 - 2) = *((_OWORD *)v22 - 2);
      *((_OWORD *)v29 - 1) = v33;
      v29 -= 32;
      v22 -= 32;
    }
    while (v22 != v32);
    int64_t v22 = (char *)*((void *)this + 22);
  }
  *((void *)this + 22) = v29;
  *((void *)this + 23) = v30;
  *((void *)this + 24) = &v28[32 * v27];
  if (v22) {
    operator delete(v22);
  }
LABEL_58:
  *((void *)this + 19) = *((void *)this + 22);
  *((void *)this + 29) = 0;
  *((void *)this + 30) = a3;
  float32x4_t v36 = (unsigned char *)*((void *)this + 31);
  __float2 v35 = (char *)*((void *)this + 32);
  unint64_t v37 = (v35 - v36) >> 4;
  if (a3 <= v37)
  {
    if (a3 >= v37) {
      goto LABEL_76;
    }
    float32x2_t v47 = &v36[16 * a3];
LABEL_75:
    *((void *)this + 32) = v47;
    goto LABEL_76;
  }
  unint64_t v38 = a3 - v37;
  uint64_t v39 = *((void *)this + 33);
  if (a3 - v37 <= (v39 - (uint64_t)v35) >> 4)
  {
    bzero(*((void **)this + 32), 16 * v38);
    float32x2_t v47 = &v35[16 * v38];
    goto LABEL_75;
  }
  if (a3 >> 60) {
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v40 = v39 - (void)v36;
  uint64_t v41 = v40 >> 3;
  if (v40 >> 3 <= a3) {
    uint64_t v41 = a3;
  }
  if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v42 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v42 = v41;
  }
  if (v42 >> 60) {
    goto LABEL_77;
  }
  float32x2_t v43 = (char *)operator new(16 * v42);
  float32x4_t v44 = &v43[16 * v37];
  unsigned __int32 v45 = &v43[16 * v42];
  bzero(v44, 16 * v38);
  float32x2_t v46 = &v44[16 * v38];
  if (v35 != v36)
  {
    do
    {
      *((_OWORD *)v44 - 1) = *((_OWORD *)v35 - 1);
      v44 -= 16;
      v35 -= 16;
    }
    while (v35 != v36);
    __float2 v35 = (char *)*((void *)this + 31);
  }
  *((void *)this + 31) = v44;
  *((void *)this + 32) = v46;
  *((void *)this + 33) = v45;
  if (v35) {
    operator delete(v35);
  }
LABEL_76:
  *((void *)this + 28) = *((void *)this + 31);
  return (uint64_t)this + 128;
}

BOOL AUSM::ParameterControlPointContainer::insertUnique(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = a1[4];
  unint64_t v5 = a1[5];
  if (v4 >= v5)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    uint64_t v10 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)v3 + 23) < 0) {
        uint64_t v3 = (void *)*v3;
      }
      int v12 = 136315394;
      uint64_t v13 = v3;
      __int16 v14 = 2080;
      uint64_t v15 = "insertUnique";
      _os_log_debug_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_DEBUG, "[%s|%s] Can't insert a new control point: not enough capacity", (uint8_t *)&v12, 0x16u);
    }
  }
  else
  {
    uint64_t v6 = a1[3];
    CFStringRef v7 = (void *)(v6 + 16 * v4);
    if (v4)
    {
      uint64_t v8 = 16 * v4;
      uint64_t v9 = a1[3];
      while (*(void *)v9 != a2 || *(_DWORD *)(v9 + 8) != a3 || *(float *)(v9 + 12) != *((float *)&a3 + 1))
      {
        v9 += 16;
        v8 -= 16;
        if (!v8)
        {
          uint64_t v9 = v6 + 16 * v4;
          break;
        }
      }
    }
    else
    {
      uint64_t v9 = a1[3];
    }
    if (v4 == (v9 - v6) >> 4)
    {
      *CFStringRef v7 = a2;
      v7[1] = a3;
      a1[4] = v4 + 1;
    }
  }
  return v4 < v5;
}

double AUSM::ParameterControlPointContainer::lastKnownValueForParameter(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1[4];
  uint64_t v5 = 16 * v4 - 16;
  while (v4)
  {
    --v4;
    uint64_t v6 = a1[3];
    uint64_t v7 = *(void *)(v6 + v5);
    v5 -= 16;
    if (v7 == a2)
    {
      LODWORD(result) = *(_DWORD *)(v6 + 16 * v4 + 12);
      return result;
    }
  }
  if (getAUSMV2Log(void)::onceToken != -1) {
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
  }
  uint64_t v9 = (id)getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)v3 + 23) < 0) {
      uint64_t v3 = (uint64_t *)*v3;
    }
    if (a2)
    {
      int v11 = *(_DWORD *)(a2 + 4);
      int v10 = *(_DWORD *)(a2 + 8);
    }
    else
    {
      int v10 = -1;
      int v11 = -1;
    }
    int v12 = 136315906;
    uint64_t v13 = v3;
    __int16 v14 = 2080;
    uint64_t v15 = "lastKnownValueForParameter";
    __int16 v16 = 1024;
    int v17 = v10;
    __int16 v18 = 1024;
    int v19 = v11;
    _os_log_debug_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_DEBUG, "[%s|%s] Can't find a parameter value for parameter = %u, element = %u", (uint8_t *)&v12, 0x22u);
  }

  return 0.0;
}

uint64_t AUSM::ParameterControlPointContainer::computeIntermediateParameterValueAndAdvance(uint64_t *a1, int a2, uint64_t a3)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = *(void *)(a3 + 16);
  float v4 = 0.0;
  if (v3 >= a1[4]) {
    goto LABEL_26;
  }
  uint64_t v6 = a1;
  uint64_t v7 = a1[3];
  unint64_t v8 = *(void *)(a3 + 24);
  if (v3 != v8)
  {
    if (v3 > v8)
    {
      if (getAUSMV2Log(void)::onceToken != -1) {
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
      }
      uint64_t v21 = (id)getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
      {
        if (*((char *)v6 + 23) < 0) {
          uint64_t v6 = (uint64_t *)*v6;
        }
        int v30 = *(_DWORD *)(a3 + 4);
        int v29 = *(_DWORD *)(a3 + 8);
        int v31 = 136315906;
        uint32_t v32 = v6;
        __int16 v33 = 2080;
        float v34 = "computeIntermediateParameterValueAndAdvance";
        __int16 v35 = 1024;
        int v36 = v29;
        __int16 v37 = 1024;
        int v38 = v30;
        uint64_t v26 = "[%s|%s] Inconsistent indexes for parameter = %u, element = %u";
LABEL_35:
        _os_log_debug_impl(&dword_1BB0CE000, v21, OS_LOG_TYPE_DEBUG, v26, (uint8_t *)&v31, 0x22u);
      }
    }
    else
    {
      int v11 = *(_DWORD *)(v7 + 16 * v3 + 8);
      if (a2 < v11) {
        goto LABEL_26;
      }
      if (a2 == v11)
      {
        uint64_t v12 = v7 + 16 * v3;
        float v4 = *(float *)(v12 + 12);
        uint64_t v13 = (uint64_t *)(v12 + 16);
        while (++v3 <= v8)
        {
          uint64_t v14 = *v13;
          v13 += 2;
          if (v14 == a3)
          {
            uint64_t v15 = v7 + 16 * v3;
            if (*(_DWORD *)(v15 + 8) == a2)
            {
              *(void *)(a3 + 16) = v3;
              float v4 = *(float *)(v15 + 12);
            }
            goto LABEL_5;
          }
        }
        goto LABEL_5;
      }
      __int16 v16 = (uint64_t *)(v7 + 16 * v3 + 16);
      uint64_t v17 = *(void *)(a3 + 16);
      while (++v17 <= v8)
      {
        uint64_t v18 = *v16;
        v16 += 2;
        if (v18 == a3)
        {
          int v19 = *(_DWORD *)(v7 + 16 * v17 + 8);
          if (v19 < a2)
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            uint64_t v20 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
            {
              if (*((char *)v6 + 23) < 0) {
                uint64_t v6 = (uint64_t *)*v6;
              }
              int v28 = *(_DWORD *)(a3 + 4);
              int v27 = *(_DWORD *)(a3 + 8);
              int v31 = 136315906;
              uint32_t v32 = v6;
              __int16 v33 = 2080;
              float v34 = "computeIntermediateParameterValueAndAdvance";
              __int16 v35 = 1024;
              int v36 = v27;
              __int16 v37 = 1024;
              int v38 = v28;
              _os_log_debug_impl(&dword_1BB0CE000, v20, OS_LOG_TYPE_DEBUG, "[%s|%s] Can't compute the intermediate parameter value for parameter = %u, element = %u", (uint8_t *)&v31, 0x22u);
            }

            uint64_t v10 = 0;
            *(void *)(a3 + 16) = v17;
            return v10 | LODWORD(v4);
          }
          if (v19 == a2)
          {
            *(void *)(a3 + 16) = v17;
            uint64_t v9 = v7 + 16 * v17;
            goto LABEL_4;
          }
          float v4 = *(float *)(v7 + 16 * v17 + 12);
          int v23 = v19 - v11;
          if (v23) {
            float v4 = *(float *)(v7 + 16 * v3 + 12)
          }
               + (float)((float)((float)(a2 - v11) / (float)v23) * (float)(v4 - *(float *)(v7 + 16 * v3 + 12)));
          goto LABEL_5;
        }
      }
      if (getAUSMV2Log(void)::onceToken != -1) {
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
      }
      uint64_t v21 = (id)getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
      {
        if (*((char *)v6 + 23) < 0) {
          uint64_t v6 = (uint64_t *)*v6;
        }
        int v25 = *(_DWORD *)(a3 + 4);
        int v24 = *(_DWORD *)(a3 + 8);
        int v31 = 136315906;
        uint32_t v32 = v6;
        __int16 v33 = 2080;
        float v34 = "computeIntermediateParameterValueAndAdvance";
        __int16 v35 = 1024;
        int v36 = v24;
        __int16 v37 = 1024;
        int v38 = v25;
        uint64_t v26 = "[%s|%s] Inconsistent data for parameter = %u, element = %u";
        goto LABEL_35;
      }
    }

    goto LABEL_26;
  }
  uint64_t v9 = v7 + 16 * v3;
  if (*(_DWORD *)(v9 + 8) > a2)
  {
LABEL_26:
    uint64_t v10 = 0;
    return v10 | LODWORD(v4);
  }
LABEL_4:
  float v4 = *(float *)(v9 + 12);
LABEL_5:
  uint64_t v10 = 0x100000000;
  return v10 | LODWORD(v4);
}

uint64_t AUSM::ParameterTrackContainer::findTargetTimeCue(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2) {
    return 0x7FFFFFFFLL;
  }
  uint64_t v3 = 0;
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t result = 0x7FFFFFFFLL;
  do
  {
    uint64_t v6 = v4 + 32 * v3;
    uint64_t v7 = *(void *)(v6 + 16);
    unint64_t v8 = (uint64_t *)(a2 + 16 + 16 * v7);
    while ((unint64_t)++v7 <= *(void *)(v6 + 24))
    {
      uint64_t v9 = *v8;
      v8 += 2;
      if (v9 == v6)
      {
        int v10 = *(_DWORD *)(a2 + 16 * v7 + 8);
        if (v10 >= (int)result) {
          uint64_t result = result;
        }
        else {
          uint64_t result = v10;
        }
        break;
      }
    }
    ++v3;
  }
  while (v3 != v2);
  return result;
}

void *ausdk::AUBufferList::SetBufferList(ausdk::AUBufferList *this, const AudioBufferList *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t mNumberBuffers = a2->mNumberBuffers;
  if (*((_DWORD *)this + 4) < mNumberBuffers)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      v6[0] = 67109120;
      v6[1] = -1;
      _os_log_error_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "throwing %d", (uint8_t *)v6, 8u);
    }
    exceptiounsigned int n = (ausdk::AUException *)__cxa_allocate_exception(0x18uLL);
    ausdk::AUException::AUException(exception, -1);
  }
  *(_DWORD *)this = 2;
  uint64_t v3 = (void *)(*((void *)this + 1) + 48);

  return memcpy(v3, a2, (16 * mNumberBuffers) | 8);
}

void sub_1BB3D490C(_Unwind_Exception *exception_object)
{
}

uint64_t caulk::concurrent::messenger::enqueue_call<AUSpatialMixerV2::ProcessMultipleBufferListsPrivate(unsigned int &,unsigned int,unsigned int,AudioBufferList const**,unsigned int,AudioBufferList**,AudioTimeStamp const&)::$_3>(caulk::concurrent::messenger *a1, uint64_t *a2)
{
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 40, 8);
  *(void *)(v4 + 8) = 0;
  *(_DWORD *)(v4 + 16) = 0;
  uint64_t v5 = *a2;
  *a2 = 0;
  *(void *)(v4 + 24) = v5;
  *(void *)uint64_t v4 = &unk_1F14AD330;

  return caulk::concurrent::messenger::enqueue(a1, (caulk::concurrent::message *)v4);
}

void AUSpatialMixerV2::SetReverbFilter(AUSpatialMixerV2 *this, float a2, float a3, float a4, int a5, float a6)
{
  double v7 = a2 / (a6 * 0.5);
  BOOL v8 = v7 <= 0.99;
  double v9 = v7 * 3.14159265;
  if (!v8) {
    double v9 = 3.11017673;
  }
  double v35 = 0.0;
  double v36 = 0.0;
  double v38 = 0.0;
  double v39 = 0.0;
  uint64_t v37 = 0x3FF0000000000000;
  switch(a5)
  {
    case 1:
      if (v9 <= 0.0) {
        goto LABEL_20;
      }
      __double2 v10 = __sincos_stret(fmin(v9, 3.11017673));
      double v11 = __exp10(0.0);
      double v12 = 0.5 - v10.__cosval * 0.5;
      double v13 = 1.0 / (v10.__sinval * 0.707106781 + 1.0);
      double v14 = v13 * v11;
      double v35 = v10.__cosval * -2.0 * v13;
      double v36 = v13 - v10.__sinval * 0.707106781 * v13;
      double v15 = v12 * v14;
      double v16 = v12 * (v14 + v14);
      goto LABEL_8;
    case 2:
      if (v9 <= 0.0) {
        goto LABEL_20;
      }
      __double2 v17 = __sincos_stret(fmin(v9, 3.11017673));
      double v18 = __exp10(0.0);
      double v19 = v17.__cosval * 0.5 + 0.5;
      double v20 = 1.0 / (v17.__sinval * 0.707106781 + 1.0);
      double v21 = v20 * v18;
      double v35 = v17.__cosval * -2.0 * v20;
      double v36 = v20 - v17.__sinval * 0.707106781 * v20;
      double v15 = v19 * v21;
      double v16 = v19 * -2.0 * v21;
LABEL_8:
      uint64_t v37 = *(void *)&v15;
      double v38 = v16;
      double v39 = v15;
      break;
    case 3:
      double v22 = a3;
      double v23 = 0.0;
      int v24 = 1;
      goto LABEL_22;
    case 4:
      double v22 = a3;
      double v23 = 0.0;
      int v24 = 2;
      goto LABEL_22;
    case 5:
      double v22 = a3;
      double v23 = 0.0;
      int v24 = 3;
      goto LABEL_22;
    case 6:
      double v22 = a3;
      double v23 = 0.0;
      int v24 = 4;
      goto LABEL_22;
    case 7:
      if (v9 <= 0.0) {
        goto LABEL_20;
      }
      double v25 = a4;
      double v26 = fmin(v9, 3.11017673);
      int v27 = 7;
      goto LABEL_19;
    case 8:
      if (v9 <= 0.0)
      {
LABEL_20:
        uint64_t v37 = 0x3FF0000000000000;
      }
      else
      {
        double v25 = a4;
        double v26 = fmin(v9, 3.11017673);
        int v27 = 8;
LABEL_19:
        BiquadCoefficients::SetPriv((BiquadCoefficients *)&v35, v27, v26, 0.707106781, v25);
      }
      break;
    case 9:
      double v22 = a3;
      double v23 = a4;
      int v24 = 7;
      goto LABEL_22;
    case 10:
      double v22 = a3;
      double v23 = a4;
      int v24 = 8;
      goto LABEL_22;
    default:
      double v22 = a3;
      double v23 = a4;
      int v24 = 11;
LABEL_22:
      BiquadCoefficients::SetBW((BiquadCoefficients *)&v35, v24, v9, v22, v23);
      break;
  }
  uint64_t v28 = *((void *)this + 334);
  if (v28)
  {
    double v29 = (*(double (**)(uint64_t, uint64_t, double *))(*(void *)v28 + 16))(v28, 1, &v35);
    BiquadCoefficients::GetT((BiquadCoefficients *)&v35, v29);
    float v31 = v30;
    unsigned int v32 = v31;
    if ((SLODWORD(v31) <= -1 || ((LODWORD(v31) & 0x7FFFFFFFu) - 0x800000) >> 24 >= 0x7F)
      && (LODWORD(v31) - 1) >= 0x7FFFFF)
    {
      unsigned int v32 = 0;
    }
    *((_DWORD *)this + 677) = v32;
  }
}

uint64_t caulk::concurrent::details::rt_message_call<AUSpatialMixerV2::ProcessMultipleBufferListsPrivate(unsigned int &,unsigned int,unsigned int,AudioBufferList const**,unsigned int,AudioBufferList**,AudioTimeStamp const&)::$_3>::perform(uint64_t *a1)
{
  uint64_t v2 = a1 + 3;
  std::unique_ptr<AUSM::SharedBuffers>::reset[abi:ne180100](a1 + 3, 0);
  *a1 = (uint64_t)&unk_1F14AD358;
  std::unique_ptr<AUSM::SharedBuffers>::reset[abi:ne180100](v2, 0);
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 40, 8);
}

uint64_t *caulk::concurrent::details::message_call<AUSpatialMixerV2::ProcessMultipleBufferListsPrivate(unsigned int &,unsigned int,unsigned int,AudioBufferList const**,unsigned int,AudioBufferList**,AudioTimeStamp const&)::$_3>::perform(uint64_t a1)
{
  return std::unique_ptr<AUSM::SharedBuffers>::reset[abi:ne180100]((uint64_t *)(a1 + 24), 0);
}

void caulk::concurrent::details::message_call<AUSpatialMixerV2::ProcessMultipleBufferListsPrivate(unsigned int &,unsigned int,unsigned int,AudioBufferList const**,unsigned int,AudioBufferList**,AudioTimeStamp const&)::$_3>::~message_call(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1F14AD358;
  std::unique_ptr<AUSM::SharedBuffers>::reset[abi:ne180100](a1 + 3, 0);
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);

  JUMPOUT(0x1C185D370);
}

{
  uint64_t vars8;

  *a1 = (uint64_t)&unk_1F14AD358;
  std::unique_ptr<AUSM::SharedBuffers>::reset[abi:ne180100](a1 + 3, 0);

  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
}

void caulk::concurrent::details::rt_message_call<AUSpatialMixerV2::ProcessMultipleBufferListsPrivate(unsigned int &,unsigned int,unsigned int,AudioBufferList const**,unsigned int,AudioBufferList**,AudioTimeStamp const&)::$_3>::~rt_message_call(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1F14AD358;
  std::unique_ptr<AUSM::SharedBuffers>::reset[abi:ne180100](a1 + 3, 0);
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);

  JUMPOUT(0x1C185D370);
}

{
  uint64_t vars8;

  *a1 = (uint64_t)&unk_1F14AD358;
  std::unique_ptr<AUSM::SharedBuffers>::reset[abi:ne180100](a1 + 3, 0);

  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
}

uint64_t caulk::concurrent::details::rt_message_call<AUSpatialMixerV2::ProcessMultipleBufferListsPrivate(unsigned int &,unsigned int,unsigned int,AudioBufferList const**,unsigned int,AudioBufferList**,AudioTimeStamp const&)::$_0>::perform(uint64_t *a1)
{
  uint64_t v2 = a1 + 3;
  std::unique_ptr<AUSM::SharedBuffers>::reset[abi:ne180100](a1 + 3, 0);
  *a1 = (uint64_t)&unk_1F14AD308;
  std::unique_ptr<AUSM::SharedBuffers>::reset[abi:ne180100](v2, 0);
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 40, 8);
}

uint64_t *caulk::concurrent::details::message_call<AUSpatialMixerV2::ProcessMultipleBufferListsPrivate(unsigned int &,unsigned int,unsigned int,AudioBufferList const**,unsigned int,AudioBufferList**,AudioTimeStamp const&)::$_0>::perform(uint64_t a1)
{
  return std::unique_ptr<AUSM::SharedBuffers>::reset[abi:ne180100]((uint64_t *)(a1 + 24), 0);
}

void caulk::concurrent::details::message_call<AUSpatialMixerV2::ProcessMultipleBufferListsPrivate(unsigned int &,unsigned int,unsigned int,AudioBufferList const**,unsigned int,AudioBufferList**,AudioTimeStamp const&)::$_0>::~message_call(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1F14AD308;
  std::unique_ptr<AUSM::SharedBuffers>::reset[abi:ne180100](a1 + 3, 0);
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);

  JUMPOUT(0x1C185D370);
}

{
  uint64_t vars8;

  *a1 = (uint64_t)&unk_1F14AD308;
  std::unique_ptr<AUSM::SharedBuffers>::reset[abi:ne180100](a1 + 3, 0);

  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
}

void caulk::concurrent::details::rt_message_call<AUSpatialMixerV2::ProcessMultipleBufferListsPrivate(unsigned int &,unsigned int,unsigned int,AudioBufferList const**,unsigned int,AudioBufferList**,AudioTimeStamp const&)::$_0>::~rt_message_call(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1F14AD308;
  std::unique_ptr<AUSM::SharedBuffers>::reset[abi:ne180100](a1 + 3, 0);
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);

  JUMPOUT(0x1C185D370);
}

{
  uint64_t vars8;

  *a1 = (uint64_t)&unk_1F14AD308;
  std::unique_ptr<AUSM::SharedBuffers>::reset[abi:ne180100](a1 + 3, 0);

  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
}

uint64_t AUSpatialMixerV2::ProcessMultipleBufferLists(AUSpatialMixerV2 *this, unsigned int *a2, uint64_t a3, uint64_t a4, AudioBufferList **a5, uint64_t a6, AudioBufferList **a7)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  float32x2_t v43 = (char *)this + 3072;
  char v44 = caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::try_lock((uint64_t)this + 3072);
  if ((v44 & 1) == 0)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    double v15 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      double v38 = (void *)((char *)this + 3368);
      if (*((char *)this + 3391) < 0) {
        double v38 = (void *)*v38;
      }
      *(_DWORD *)std::string buf = 136315394;
      float32x2_t v47 = v38;
      __int16 v48 = 2080;
      uint64_t v49 = "ProcessMultipleBufferLists";
      _os_log_error_impl(&dword_1BB0CE000, v15, OS_LOG_TYPE_ERROR, "[%s|%s] Trying to render while initialization or clean-up is in process", buf, 0x16u);
    }
    goto LABEL_11;
  }
  if (!*((unsigned char *)this + 17) || (unsigned __int8 v14 = atomic_load((unsigned __int8 *)this + 8977), (v14 & 1) == 0))
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    double v15 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      double v39 = (void *)((char *)this + 3368);
      if (*((char *)this + 3391) < 0) {
        double v39 = (void *)*v39;
      }
      *(_DWORD *)std::string buf = 136315394;
      float32x2_t v47 = v39;
      __int16 v48 = 2080;
      uint64_t v49 = "ProcessMultipleBufferLists";
      _os_log_error_impl(&dword_1BB0CE000, v15, OS_LOG_TYPE_ERROR, "[%s|%s] Trying to render while uninitialized", buf, 0x16u);
    }
LABEL_11:

    uint64_t v16 = 4294956429;
    goto LABEL_12;
  }
  if (*((unsigned char *)this + 540) && !*((_DWORD *)this + 134))
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    double v18 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      double v19 = (void *)((char *)this + 3368);
      if (*((char *)this + 3391) < 0) {
        double v19 = (void *)*v19;
      }
      *(_DWORD *)std::string buf = 136315394;
      float32x2_t v47 = v19;
      __int16 v48 = 2080;
      uint64_t v49 = "ProcessMultipleBufferLists";
      _os_log_impl(&dword_1BB0CE000, v18, OS_LOG_TYPE_DEFAULT, "[%s|%s] Switching from Render to ProcessMultiple without reinitializing", buf, 0x16u);
    }
  }
  *((_DWORD *)this + 134) = 1;
  *((unsigned char *)this + 540) = 1;
  unsigned int v20 = 0;
  double v21 = *(double *)(ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 128), 0) + 80);
  while (1)
  {
    uint64_t v22 = *((void *)this + 15);
    if (v22) {
      LODWORD(v23) = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 24))(v22);
    }
    else {
      uint64_t v23 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
    }
    unsigned int v24 = v23 >= a4 ? a4 : v23;
    if (v20 >= v24) {
      break;
    }
    double v25 = *(double *)(ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 80), v20) + 80);
    if (vabdd_f64(v21, v25) > 0.01)
    {
      std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::unlock((uint64_t)&v43);
      if (getAUSMV2Log(void)::onceToken != -1) {
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
      }
      float v31 = (id)getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        uint64_t v40 = (void *)((char *)this + 3368);
        if (*((char *)this + 3391) < 0) {
          uint64_t v40 = (void *)*v40;
        }
        *(_DWORD *)std::string buf = 136316162;
        float32x2_t v47 = v40;
        __int16 v48 = 2080;
        uint64_t v49 = "ProcessMultipleBufferLists";
        __int16 v50 = 1024;
        int v51 = v20;
        __int16 v52 = 2048;
        double v53 = v25;
        __int16 v54 = 2048;
        double v55 = v21;
        _os_log_error_impl(&dword_1BB0CE000, v31, OS_LOG_TYPE_ERROR, "[%s|%s] Cannot render with ProcessMultiple since the samplerate of the input element %u is %f whereas the output samplerate is %f", buf, 0x30u);
      }

      uint64_t v16 = 4294967246;
      goto LABEL_12;
    }
    ++v20;
  }
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 128), 0);
  int v27 = (AudioBufferList *)AUSM::ABLBuffer::setupBufferList((AUSpatialMixerV2 *)((char *)this + 2736), *(_DWORD *)(Element + 108), 0, a3, 4);
  unsigned __int32 v45 = v27;
  int v28 = AUSpatialMixerV2::ProcessMultipleBufferListsSlicingPrivate(this, a2, a3, a4, a5, a6, &v45, (const AudioBufferList **)this + 34);
  if (v28)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    double v29 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v41 = (void *)((char *)this + 3368);
      if (*((char *)this + 3391) < 0) {
        uint64_t v41 = (void *)*v41;
      }
      *(_DWORD *)std::string buf = 136315650;
      float32x2_t v47 = v41;
      __int16 v48 = 2080;
      uint64_t v49 = "ProcessMultipleBufferLists";
      __int16 v50 = 1024;
      int v51 = v28;
      _os_log_debug_impl(&dword_1BB0CE000, v29, OS_LOG_TYPE_DEBUG, "[%s|%s] ProcessMultipleBufferListsSlicingPrivate ERROR: uint64_t result = %d", buf, 0x1Cu);
    }
  }
  ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 128), 0);
  uint64_t v16 = AudioConverterConvertComplexBuffer(*((AudioConverterRef *)this + 364), a3, v27, *a7);
  if (v16)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    double v30 = (id)getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_41;
    }
    unint64_t v42 = (void *)((char *)this + 3368);
    if (*((char *)this + 3391) < 0) {
      unint64_t v42 = (void *)*v42;
    }
    *(_DWORD *)std::string buf = 136315650;
    float32x2_t v47 = v42;
    __int16 v48 = 2080;
    uint64_t v49 = "ProcessMultipleBufferLists";
    __int16 v50 = 1024;
    int v51 = v16;
    v37 = "[%s|%s] ConvertOutputData ERROR: uint64_t result = %d";
LABEL_71:
    _os_log_debug_impl(&dword_1BB0CE000, v30, OS_LOG_TYPE_DEBUG, v37, buf, 0x1Cu);
LABEL_41:

    goto LABEL_12;
  }
  if (*((void *)this + 382))
  {
    unsigned __int8 v32 = atomic_load((unsigned __int8 *)this + 3444);
    BOOL v33 = (v32 & 1) == 0;
    float v34 = (uint64_t (*)(void, uint64_t, void))MEMORY[0x1E4F4EA80];
    if (v33) {
      float v34 = (uint64_t (*)(void, uint64_t, void))MEMORY[0x1E4F4EA88];
    }
    int v35 = v34(*((void *)this + 382), a3, *a7);
    if (v35)
    {
      if (getAUSMV2Log(void)::onceToken != -1) {
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
      }
      double v30 = (id)getAUSMV2Log(void)::gLog;
      if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_41;
      }
      double v36 = (void *)((char *)this + 3368);
      if (*((char *)this + 3391) < 0) {
        double v36 = (void *)*v36;
      }
      *(_DWORD *)std::string buf = 136315650;
      float32x2_t v47 = v36;
      __int16 v48 = 2080;
      uint64_t v49 = "ProcessMultipleBufferLists";
      __int16 v50 = 1024;
      int v51 = v35;
      uint64_t v37 = "[%s|%s] ERROR: writing data to output file, %d";
      goto LABEL_71;
    }
  }
LABEL_12:
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v43);
  return v16;
}

void sub_1BB3D5840(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t AUSpatialMixerV2::ScheduleParameter(AUSpatialMixerV2 *this, const AudioUnitParameterEvent *a2, unsigned int a3)
{
  uint64_t v103 = *MEMORY[0x1E4F143B8];
  unsigned int v6 = atomic_load((unsigned int *)this + 1154);
  if (v6 != 2)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    double v7 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      BOOL v8 = (char *)this + 3368;
      if (*((char *)this + 3391) < 0) {
        BOOL v8 = *(char **)v8;
      }
      *(_DWORD *)std::string buf = 136315394;
      uint64_t v91 = v8;
      __int16 v92 = 2080;
      uint64_t v93 = "ScheduleParameter";
      _os_log_impl(&dword_1BB0CE000, v7, OS_LOG_TYPE_INFO, "[%s|%s] Warning: scheduling parameters while the parameter smoothing is not set to scheduled parameters.", buf, 0x16u);
    }
  }
  unsigned int v76 = (char *)this + 3312;
  char v77 = 1;
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 3312);
  if (a3)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    unsigned int v74 = (char **)((char *)this + 3368);
    uint64_t v75 = a3;
    while (1)
    {
      double v11 = &a2[v9];
      double v12 = v11;
      unsigned int v13 = atomic_load((unsigned int *)this + 1154);
      if (v13 != 2)
      {
LABEL_25:
        AUParameterEventType eventType = v11->eventType;
        p_AUParameterEventType eventType = &v11->eventType;
        switch(eventType)
        {
          case 1u:
            unsigned int v24 = &a2[v9];
            AudioUnitParameterID parameter = v24->parameter;
            p_AudioUnitParameterID parameter = &v24->parameter;
            uint64_t v27 = (*(uint64_t (**)(AUSpatialMixerV2 *, void, void, void, void, float))(*(void *)this + 152))(this, parameter, v12->scope, *(p_parameter - 1), p_parameter[2], *((float *)p_parameter + 3));
            if (v27)
            {
              if (getAUSMV2Log(void)::onceToken != -1) {
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
              }
              int v28 = (id)getAUSMV2Log(void)::gLog;
              if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
              {
                double v65 = (char *)this + 3368;
                if (*((char *)this + 3391) < 0) {
                  double v65 = *v74;
                }
                AudioUnitParameterID v66 = *p_parameter;
                AudioUnitScope scope = v12->scope;
                int v68 = *(p_parameter - 1);
                *(_DWORD *)std::string buf = 136316418;
                uint64_t v91 = v65;
                __int16 v92 = 2080;
                uint64_t v93 = "ScheduleParameter";
                __int16 v94 = 1024;
                AUParameterEventType v95 = v9;
                __int16 v96 = 1024;
                AudioUnitParameterID v97 = v66;
                __int16 v98 = 1024;
                AudioUnitScope v99 = scope;
                __int16 v100 = 1024;
                int v101 = v68;
                _os_log_debug_impl(&dword_1BB0CE000, v28, OS_LOG_TYPE_DEBUG, "[%s|%s] Error scheduling unsupported parameter (immediate) #%u: paraunsigned int m = %u, scope = %u, element = %u", buf, 0x2Eu);
              }
              goto LABEL_45;
            }
            break;
          case 2u:
            int v35 = &a2[v9];
            AudioUnitParameterID v37 = v35->parameter;
            double v36 = &v35->parameter;
            uint64_t v27 = (*(uint64_t (**)(AUSpatialMixerV2 *, void, void, void, void, float))(*(void *)this + 152))(this, v37, v12->scope, *(v36 - 1), v36[3] + v36[2], *((float *)v36 + 5));
            if (v27)
            {
              if (getAUSMV2Log(void)::onceToken != -1) {
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
              }
              int v28 = (id)getAUSMV2Log(void)::gLog;
              if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
              {
                unint64_t v69 = (char *)this + 3368;
                if (*((char *)this + 3391) < 0) {
                  unint64_t v69 = *v74;
                }
                AudioUnitParameterID v70 = *v36;
                AudioUnitScope v71 = v12->scope;
                int v72 = *(v36 - 1);
                *(_DWORD *)std::string buf = 136316418;
                uint64_t v91 = v69;
                __int16 v92 = 2080;
                uint64_t v93 = "ScheduleParameter";
                __int16 v94 = 1024;
                AUParameterEventType v95 = v9;
                __int16 v96 = 1024;
                AudioUnitParameterID v97 = v70;
                __int16 v98 = 1024;
                AudioUnitScope v99 = v71;
                __int16 v100 = 1024;
                int v101 = v72;
                _os_log_debug_impl(&dword_1BB0CE000, v28, OS_LOG_TYPE_DEBUG, "[%s|%s] Error scheduling unsupported parameter (ramped) #%u: paraunsigned int m = %u, scope = %u, element = %u", buf, 0x2Eu);
              }
              goto LABEL_45;
            }
            break;
          case 3u:
            double v29 = &a2[v9];
            AudioUnitParameterID v31 = v29->parameter;
            double v30 = &v29->parameter;
            uint64_t v27 = (*(uint64_t (**)(AUSpatialMixerV2 *, void, void, void, void, float))(*(void *)this + 152))(this, v31, v12->scope, *(v30 - 1), v30[3] + v30[2], *((float *)v30 + 5));
            if (v27)
            {
              if (getAUSMV2Log(void)::onceToken != -1) {
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
              }
              int v28 = (id)getAUSMV2Log(void)::gLog;
              if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v57 = (char *)this + 3368;
                if (*((char *)this + 3391) < 0) {
                  uint64_t v57 = *v74;
                }
                AudioUnitParameterID v58 = *v30;
                AudioUnitScope v59 = v12->scope;
                int v60 = *(v30 - 1);
                *(_DWORD *)std::string buf = 136316418;
                uint64_t v91 = v57;
                __int16 v92 = 2080;
                uint64_t v93 = "ScheduleParameter";
                __int16 v94 = 1024;
                AUParameterEventType v95 = v9;
                __int16 v96 = 1024;
                AudioUnitParameterID v97 = v58;
                __int16 v98 = 1024;
                AudioUnitScope v99 = v59;
                __int16 v100 = 1024;
                int v101 = v60;
                _os_log_debug_impl(&dword_1BB0CE000, v28, OS_LOG_TYPE_DEBUG, "[%s|%s] Error scheduling unsupported parameter (control value) #%u: paraunsigned int m = %u, scope = %u, element = %u", buf, 0x2Eu);
              }
              goto LABEL_45;
            }
            break;
          case 4u:
            unsigned __int8 v32 = &a2[v9];
            AudioUnitParameterID v34 = v32->parameter;
            BOOL v33 = &v32->parameter;
            uint64_t v27 = (*(uint64_t (**)(AUSpatialMixerV2 *, void, void, void, void, float))(*(void *)this + 152))(this, v34, v12->scope, *(v33 - 1), v33[3] + v33[2], *((float *)v33 + 5));
            if (v27)
            {
              if (getAUSMV2Log(void)::onceToken != -1) {
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
              }
              int v28 = (id)getAUSMV2Log(void)::gLog;
              if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
              {
                float v61 = (char *)this + 3368;
                if (*((char *)this + 3391) < 0) {
                  float v61 = *v74;
                }
                AudioUnitParameterID v62 = *v33;
                AudioUnitScope v63 = v12->scope;
                int v64 = *(v33 - 1);
                *(_DWORD *)std::string buf = 136316418;
                uint64_t v91 = v61;
                __int16 v92 = 2080;
                uint64_t v93 = "ScheduleParameter";
                __int16 v94 = 1024;
                AUParameterEventType v95 = v9;
                __int16 v96 = 1024;
                AudioUnitParameterID v97 = v62;
                __int16 v98 = 1024;
                AudioUnitScope v99 = v63;
                __int16 v100 = 1024;
                int v101 = v64;
                _os_log_debug_impl(&dword_1BB0CE000, v28, OS_LOG_TYPE_DEBUG, "[%s|%s] Error scheduling unsupported parameter (ramped with start value unknown) #%u: paraunsigned int m = %u, scope = %u, element = %u", buf, 0x2Eu);
              }
LABEL_45:

              uint64_t v10 = v27;
            }
            break;
          default:
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            double v38 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
            {
              double v55 = (char *)this + 3368;
              if (*((char *)this + 3391) < 0) {
                double v55 = *v74;
              }
              AUParameterEventType v56 = *p_eventType;
              *(_DWORD *)std::string buf = 136315650;
              uint64_t v91 = v55;
              __int16 v92 = 2080;
              uint64_t v93 = "ScheduleParameter";
              __int16 v94 = 1024;
              AUParameterEventType v95 = v56;
              _os_log_error_impl(&dword_1BB0CE000, v38, OS_LOG_TYPE_ERROR, "[%s|%s] Unknown event type: %u", buf, 0x1Cu);
            }

            uint64_t v10 = 4294900553;
            break;
        }
        goto LABEL_65;
      }
      unsigned __int8 v14 = &v11->parameter;
      int v15 = (*(uint64_t (**)(AUSpatialMixerV2 *, void, void, uint8_t *))(*(void *)this + 256))(this, v11->scope, v11->parameter, buf);
      if (v15)
      {
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        uint64_t v16 = (id)getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          int v51 = (char *)this + 3368;
          if (*((char *)this + 3391) < 0) {
            int v51 = *v74;
          }
          AudioUnitParameterID v52 = *v14;
          AudioUnitScope v53 = v11->scope;
          AudioUnitElement element = a2[v9].element;
          *(_DWORD *)uint64_t v78 = 136316418;
          CFURLRef v79 = v51;
          __int16 v80 = 2080;
          unsigned __int8 v81 = "ParameterCanRamp";
          __int16 v82 = 1024;
          int v83 = v15;
          __int16 v84 = 1024;
          AudioUnitParameterID v85 = v52;
          __int16 v86 = 1024;
          AudioUnitScope v87 = v53;
          __int16 v88 = 1024;
          AudioUnitElement v89 = element;
          _os_log_error_impl(&dword_1BB0CE000, v16, OS_LOG_TYPE_ERROR, "[%s|%s] Error %d while fetching the parameter info canRamp: paraunsigned int m = %u, scope = %u, element = %u", v78, 0x2Eu);
        }
      }
      else if ((v102 & 0x2000000) != 0)
      {
        goto LABEL_23;
      }
      if (v11->scope != 1) {
        goto LABEL_25;
      }
      if (*v14 > 0x22 || ((1 << *v14) & 0x67E00000FLL) == 0) {
        goto LABEL_25;
      }
LABEL_23:
      double v18 = (_OWORD *)*((void *)this + 49);
      unint64_t v19 = *((void *)this + 50);
      if ((unint64_t)v18 >= v19)
      {
        uint64_t v39 = *((void *)this + 48);
        uint64_t v40 = ((uint64_t)v18 - v39) >> 5;
        unint64_t v41 = v40 + 1;
        if ((unint64_t)(v40 + 1) >> 59) {
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v42 = v19 - v39;
        if (v42 >> 4 > v41) {
          unint64_t v41 = v42 >> 4;
        }
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v43 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v43 = v41;
        }
        if (v43) {
          unint64_t v43 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(v43);
        }
        else {
          uint64_t v44 = 0;
        }
        unsigned __int32 v45 = (_OWORD *)(v43 + 32 * v40);
        AudioUnitParameterEvent::$30DB46DA13B14C3192C3DF0E34A08043 eventValues = v12->eventValues;
        _OWORD *v45 = *(_OWORD *)&v12->scope;
        v45[1] = eventValues;
        __int16 v48 = (char *)*((void *)this + 48);
        float32x2_t v47 = (char *)*((void *)this + 49);
        uint64_t v49 = v45;
        if (v47 != v48)
        {
          do
          {
            long long v50 = *((_OWORD *)v47 - 1);
            *(v49 - 2) = *((_OWORD *)v47 - 2);
            *(v49 - 1) = v50;
            v49 -= 2;
            v47 -= 32;
          }
          while (v47 != v48);
          float32x2_t v47 = (char *)*((void *)this + 48);
        }
        double v21 = v45 + 2;
        *((void *)this + 48) = v49;
        *((void *)this + 49) = v45 + 2;
        *((void *)this + 50) = v43 + 32 * v44;
        if (v47) {
          operator delete(v47);
        }
      }
      else
      {
        AudioUnitParameterEvent::$30DB46DA13B14C3192C3DF0E34A08043 v20 = v11->eventValues;
        *double v18 = *(_OWORD *)&v11->scope;
        v18[1] = v20;
        double v21 = v18 + 2;
      }
      *((void *)this + 49) = v21;
LABEL_65:
      if (++v9 == v75) {
        goto LABEL_86;
      }
    }
  }
  uint64_t v10 = 0;
LABEL_86:
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v76);
  return v10;
}

void sub_1BB3D61E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t AUSpatialMixerV2::CanScheduleParameters(AUSpatialMixerV2 *this)
{
  return 1;
}

uint64_t AUSpatialMixerV2::SetParameter(AUSpatialMixerV2 *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  float v5 = a5;
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = (unsigned __int8 *)this + 6031;
  unsigned int v10 = a3 - 2000;
  if (a3 - 2000 >= 3)
  {
    if (a3 <= 1)
    {
      unsigned int v69 = a4;
      if (*((unsigned char *)this + 6032))
      {
        if (a2 == 35 && a3 == 1)
        {
          unint64_t v12 = *((void *)this + 768);
          if (v12 <= a4)
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            double v18 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
            {
              AudioUnitParameterID v62 = (void *)((char *)this + 6008);
              if ((char)*v9 < 0) {
                AudioUnitParameterID v62 = (void *)*v62;
              }
              *(_DWORD *)std::string buf = 136315906;
              AudioUnitScope v71 = v62;
              __int16 v72 = 2080;
              unint64_t v73 = "ValidateParameter";
              __int16 v74 = 1024;
              int v75 = v12;
              __int16 v76 = 1024;
              unsigned int v77 = a4;
              _os_log_error_impl(&dword_1BB0CE000, v18, OS_LOG_TYPE_ERROR, "[%s|%s] Buffer CFIndex size = %u is not large enough to store parameter values for input = %u", buf, 0x22u);
            }

            return 4294956419;
          }
          if (*((float *)std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)this + 6120, a4, &v69)+ 5) != a5)*((float *)std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)this + 6120, a4, &v69)+ 5) = v5; {
          unsigned int v13 = atomic_load((unsigned int *)(*((void *)this + 750) + 5844));
          }
          if (v13 == 1) {
            return 0;
          }
        }
      }
    }
    unsigned int v10 = a3;
  }
  switch(a2)
  {
    case 2u:
    case 0x22u:
      float v14 = 10000.0;
      goto LABEL_54;
    case 3u:
      float v14 = 20.0;
      if (v5 <= 20.0) {
        float v14 = v5;
      }
      *(float *)&int v17 = -120.0;
      goto LABEL_38;
    case 4u:
      float v14 = 10.0;
      if (v5 <= 10.0) {
        float v14 = v5;
      }
      float v15 = 0.1;
      goto LABEL_50;
    case 6u:
    case 7u:
    case 0x11u:
      float v14 = 10.0;
      goto LABEL_54;
    case 8u:
    case 0x23u:
      *(float *)&int v16 = 100.0;
      goto LABEL_53;
    case 9u:
      float v14 = 40.0;
      if (v5 <= 40.0) {
        float v14 = v5;
      }
      *(float *)&int v17 = -40.0;
      goto LABEL_38;
    case 0xAu:
    case 0xBu:
      float v14 = 0.0;
      if (v5 <= 0.0) {
        float v14 = v5;
      }
      *(float *)&int v17 = -100.0;
LABEL_38:
      float v15 = *(float *)&v17;
      goto LABEL_50;
    case 0xEu:
      float v19 = *(double *)(ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 128), 0) + 80);
      float v20 = v19 * 0.5;
      _NF = v19 < 20000.0;
      float v14 = 10000.0;
      if (_NF) {
        float v14 = v20;
      }
      if (v14 >= v5) {
        float v14 = v5;
      }
      float v15 = 10.0;
      goto LABEL_50;
    case 0xFu:
      float v14 = 4.0;
      if (v5 <= 4.0) {
        float v14 = v5;
      }
      float v15 = 0.05;
      goto LABEL_50;
    case 0x10u:
      float v14 = 18.0;
      if (v5 <= 18.0) {
        float v14 = v5;
      }
      float v15 = -18.0;
      goto LABEL_50;
    case 0x19u:
    case 0x1Au:
    case 0x1Bu:
    case 0x1Cu:
    case 0x1Eu:
    case 0x21u:
      float v14 = 1.0;
      goto LABEL_54;
    case 0x1Du:
      *(float *)&int v16 = 180.0;
      goto LABEL_53;
    case 0x1Fu:
    case 0x20u:
    case 0x27u:
      if (v5 < 0.5) {
        float v5 = 0.0;
      }
      else {
        float v5 = 1.0;
      }
      break;
    case 0x24u:
    case 0x25u:
    case 0x26u:
      float v14 = 10000.0;
      if (v5 <= 10000.0) {
        float v14 = v5;
      }
      float v15 = -10000.0;
LABEL_50:
      _NF = v5 < v15;
      goto LABEL_57;
    case 0x28u:
      *(float *)&int v16 = 90.0;
LABEL_53:
      float v14 = *(float *)&v16;
LABEL_54:
      if (v5 <= v14) {
        float v14 = v5;
      }
      _NF = v5 < 0.0;
      float v15 = 0.0;
LABEL_57:
      if (_NF) {
        float v5 = v15;
      }
      else {
        float v5 = v14;
      }
      break;
    default:
      break;
  }
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, v10);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  if (ausdk::AUElement::GetParameter(Element, a2) == v5) {
    return 0;
  }
  double v25 = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, v10);
  double v26 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v25, a4);
  ausdk::AUElement::SetParameter(v26, a2, v5, 0);
  if (!v10)
  {
    if (!a4)
    {
      uint64_t result = 0;
      switch(a2)
      {
        case 9u:
          return result;
        case 0xEu:
          uint64_t result = 0;
          *((float *)this + 730) = v5;
          goto LABEL_103;
        case 0xFu:
          uint64_t result = 0;
          *((float *)this + 731) = v5;
          goto LABEL_103;
        case 0x10u:
          uint64_t result = 0;
          *((float *)this + 732) = v5;
          goto LABEL_103;
        case 0x11u:
          uint64_t result = 0;
          *((_DWORD *)this + 733) = v5;
          goto LABEL_103;
        case 0x12u:
          uint64_t result = 0;
          *((unsigned char *)this + 2936) = v5 != 0.0;
LABEL_103:
          ++*((_DWORD *)this + 735);
          break;
        case 0x13u:
        case 0x14u:
        case 0x15u:
          unsigned __int8 v32 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpatialMixerV2 *)((char *)this + 32), 0);
          float Parameter = ausdk::AUElement::GetParameter(v32, 0x13u);
          AudioUnitParameterID v34 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpatialMixerV2 *)((char *)this + 32), 0);
          float v35 = ausdk::AUElement::GetParameter(v34, 0x14u);
          double v36 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpatialMixerV2 *)((char *)this + 32), 0);
          float v37 = ausdk::AUElement::GetParameter(v36, 0x15u);
          _X0 = AUSM::eulerToAUCoordQuaternion(v38, Parameter, v35, v37);
          uint64_t v40 = *((void *)this + 434);
          do
          {
            _X5 = *((void *)this + 435);
            __asm { CASPAL          X4, X5, X0, X1, [X8] }
            _ZF = _X4 == v40;
            uint64_t v40 = _X4;
          }
          while (!_ZF);
          atomic_store(1u, v9 + 2858);
          AUSpatialMixerV2::UpdateStereoBusRotationParameters(this);
          return 0;
        case 0x24u:
        case 0x25u:
        case 0x26u:
          AudioUnitParameterID v52 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpatialMixerV2 *)((char *)this + 32), 0);
          float v68 = ausdk::AUElement::GetParameter(v52, 0x24u);
          AudioUnitScope v53 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpatialMixerV2 *)((char *)this + 32), 0);
          float v67 = ausdk::AUElement::GetParameter(v53, 0x25u);
          __int16 v54 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpatialMixerV2 *)((char *)this + 32), 0);
          ausdk::AUElement::GetParameter(v54, 0x26u);
          _X0 = __PAIR64__(LODWORD(v67), LODWORD(v68));
          uint64_t v56 = *((void *)this + 438);
          do
          {
            _X5 = *((void *)this + 439);
            __asm { CASPAL          X4, X5, X0, X1, [X8] }
            _ZF = _X4 == v56;
            uint64_t v56 = _X4;
          }
          while (!_ZF);
          uint64_t result = 0;
          AudioUnitParameterID v31 = v9 + 2859;
          goto LABEL_74;
        default:
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          AudioUnitScope v59 = (id)getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
          {
            int v64 = (void *)((char *)this + 3368);
            if (*((char *)this + 3391) < 0) {
              int v64 = (void *)*v64;
            }
            *(_DWORD *)std::string buf = 136315650;
            AudioUnitScope v71 = v64;
            __int16 v72 = 2080;
            unint64_t v73 = "SetParameter";
            __int16 v74 = 1024;
            int v75 = a2;
            _os_log_debug_impl(&dword_1BB0CE000, v59, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid parameter id %d (global scope)", buf, 0x1Cu);
          }
LABEL_122:

          uint64_t result = 4294956418;
          break;
      }
      return result;
    }
    return 4294956419;
  }
  if (v10 != 2)
  {
    if (v10 != 1) {
      return 0;
    }
    if (a2 == 29)
    {
      unsigned int v27 = 30;
    }
    else
    {
      if (a2 != 30)
      {
LABEL_82:
        unsigned __int8 v47 = atomic_load(v9 + 2946);
        if (v47)
        {
          uint64_t v48 = *((void *)this + 15);
          if (v48) {
            LODWORD(v49) = (*(uint64_t (**)(uint64_t))(*(void *)v48 + 24))(v48);
          }
          else {
            uint64_t v49 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
          }
          if (v49 > a4)
          {
            uint64_t v50 = ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 80), a4);
            switch(a2)
            {
              case 0u:
              case 1u:
              case 2u:
                atomic_store(1u, (unsigned __int8 *)this + 3011);
                goto LABEL_88;
              case 3u:
              case 6u:
              case 7u:
                unsigned __int8 v60 = atomic_load(v9 + 2946);
                if ((v60 & 1) == 0) {
                  return 0;
                }
                uint64_t result = 0;
                AudioUnitParameterID v31 = (unsigned __int8 *)(v50 + 1579);
                goto LABEL_74;
              case 4u:
                uint64_t result = 0;
                if (*((unsigned char *)this + 540) && *((_DWORD *)this + 134) == 1 && v5 != 1.0)
                {
                  if (getAUSMV2Log(void)::onceToken != -1) {
                    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                  }
                  AudioUnitScope v63 = (id)getAUSMV2Log(void)::gLog;
                  if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
                  {
                    AudioUnitParameterID v66 = (void *)((char *)this + 3368);
                    if (*((char *)this + 3391) < 0) {
                      AudioUnitParameterID v66 = (void *)*v66;
                    }
                    *(_DWORD *)std::string buf = 136315394;
                    AudioUnitScope v71 = v66;
                    __int16 v72 = 2080;
                    unint64_t v73 = "SetParameter";
                    _os_log_error_impl(&dword_1BB0CE000, v63, OS_LOG_TYPE_ERROR, "[%s|%s] the PlaybackRate parameter value can only be 1.0 with ProcessMultiple as the render method", buf, 0x16u);
                  }

                  return 4294900553;
                }
                return result;
              case 5u:
              case 0xAu:
              case 0xBu:
                unsigned __int8 v61 = atomic_load(v9 + 2946);
                if ((v61 & 1) == 0) {
                  return 0;
                }
                uint64_t result = 0;
                AudioUnitParameterID v31 = (unsigned __int8 *)(v50 + 624);
                goto LABEL_74;
              case 8u:
              case 0x16u:
              case 0x17u:
              case 0x18u:
              case 0x19u:
              case 0x1Au:
              case 0x1Bu:
              case 0x1Cu:
              case 0x1Du:
              case 0x1Eu:
              case 0x1Fu:
              case 0x20u:
              case 0x21u:
              case 0x22u:
              case 0x23u:
              case 0x27u:
              case 0x28u:
LABEL_88:
                unsigned __int8 v51 = atomic_load(v9 + 2946);
                if ((v51 & 1) == 0) {
                  return 0;
                }
                uint64_t result = 0;
                AudioUnitParameterID v31 = (unsigned __int8 *)(v50 + 1577);
                break;
              default:
                if (getAUSMV2Log(void)::onceToken != -1) {
                  dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                }
                AudioUnitScope v59 = (id)getAUSMV2Log(void)::gLog;
                if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
                {
                  double v65 = (void *)((char *)this + 3368);
                  if (*((char *)this + 3391) < 0) {
                    double v65 = (void *)*v65;
                  }
                  *(_DWORD *)std::string buf = 136315650;
                  AudioUnitScope v71 = v65;
                  __int16 v72 = 2080;
                  unint64_t v73 = "SetParameter";
                  __int16 v74 = 1024;
                  int v75 = a2;
                  _os_log_debug_impl(&dword_1BB0CE000, v59, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid parameter id %d (input scope)", buf, 0x1Cu);
                }
                goto LABEL_122;
            }
            goto LABEL_74;
          }
        }
        return 0;
      }
      unsigned int v27 = 29;
    }
    float32x2_t v46 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 80), a4);
    ausdk::AUElement::SetParameter(v46, v27, -1.0, 0);
    goto LABEL_82;
  }
  uint64_t result = 0;
  if (a2 == 3 && !a4)
  {
    int v28 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 128), 0);
    float v29 = ausdk::AUElement::GetParameter(v28, 3u);
    float v30 = __exp10f(v29 * 0.05);
    uint64_t result = 0;
    atomic_store(LODWORD(v30), (unsigned int *)this + 2092);
    AudioUnitParameterID v31 = v9 + 2861;
LABEL_74:
    atomic_store(1u, v31);
  }
  return result;
}

double AUSM::eulerToAUCoordQuaternion(AUSM *this, float a2, float a3, float a4)
{
  __float2 v6 = __sincosf_stret((float)(a2 * 0.017453) * 0.5);
  __float2 v7 = __sincosf_stret((float)(a3 * 0.017453) * 0.5);
  __float2 v8 = __sincosf_stret((float)(a4 * 0.017453) * 0.5);
  *(float *)&double v9 = (float)(v8.__sinval * (float)(v6.__cosval * v7.__cosval))
                - (float)(v8.__cosval * (float)(v6.__sinval * v7.__sinval));
  *((float *)&v9 + 1) = (float)(v6.__sinval * (float)(v7.__cosval * v8.__sinval))
                      + (float)((float)(v7.__sinval * v8.__cosval) * v6.__cosval);
  return v9;
}

uint64_t AUSpatialMixerV2::RemovePropertyValue(AUSpatialMixerV2 *this, uint64_t a2, int a3, unsigned int a4)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (a3 == 2)
  {
    if (!a4)
    {
      unsigned int v13 = (AUSM::Properties *)(ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 128), 0) + 224);
      return AUSM::Properties::setProperty(v13, a2, 0, 0, 0);
    }
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    __float2 v8 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int v16 = (void *)((char *)this + 3368);
      if (*((char *)this + 3391) < 0) {
        int v16 = (void *)*v16;
      }
      *(_DWORD *)std::string buf = 136316162;
      double v21 = v16;
      __int16 v22 = 2080;
      uint64_t v23 = "RemovePropertyValue";
      __int16 v24 = 1024;
      int v25 = 2;
      __int16 v26 = 1024;
      unsigned int v27 = a4;
      __int16 v28 = 1024;
      int v29 = a2;
      _os_log_error_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_ERROR, "[%s|%s] (scope=%u, element=%u): invalid element (property = %u)", buf, 0x28u);
    }

    return 4294956419;
  }
  if (a3 == 1)
  {
    double v18 = (char *)this + 3120;
    char v19 = 1;
    std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)((char *)this + 3120));
    uint64_t v9 = *((void *)this + 15);
    if (v9) {
      LODWORD(v10) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 24))(v9);
    }
    else {
      uint64_t v10 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
    }
    if (v10 > a4)
    {
      uint64_t Element = ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 80), a4);
      uint64_t v7 = AUSM::Properties::setProperty((AUSM::Properties *)(Element + 672), a2, 0, 0, 0);
      std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v18);
      return v7;
    }
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    float v15 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      int v17 = (void *)((char *)this + 3368);
      if (*((char *)this + 3391) < 0) {
        int v17 = (void *)*v17;
      }
      *(_DWORD *)std::string buf = 136316162;
      double v21 = v17;
      __int16 v22 = 2080;
      uint64_t v23 = "RemovePropertyValue";
      __int16 v24 = 1024;
      int v25 = 1;
      __int16 v26 = 1024;
      unsigned int v27 = a4;
      __int16 v28 = 1024;
      int v29 = a2;
      _os_log_error_impl(&dword_1BB0CE000, v15, OS_LOG_TYPE_ERROR, "[%s|%s] (scope=%u, element=%u): invalid element (property = %u)", buf, 0x28u);
    }

    std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v18);
    return 4294956419;
  }
  if (a3) {
    return 4294956445;
  }
  if (a2 == 3231) {
    return 4294956433;
  }
  double v11 = (AUSpatialMixerV2 *)((char *)this + 3360);

  return AUSM::GlobalProperties::setProperty(v11, a2, 0, 0, 0);
}

void sub_1BB3D7140(_Unwind_Exception *exception_object)
{
}

uint64_t AUSpatialMixerV2::SetProperty(AUSpatialMixerV2 *this, unsigned int a2, unsigned int a3, uint64_t a4, int *a5, uint64_t a6)
{
  uint64_t v355 = *MEMORY[0x1E4F143B8];
  if (!a5)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    int v16 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      unsigned __int8 v47 = (void *)((char *)this + 3368);
      if (*((char *)this + 3391) < 0) {
        unsigned __int8 v47 = (void *)*v47;
      }
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v47;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "SetProperty";
      _os_log_debug_impl(&dword_1BB0CE000, v16, OS_LOG_TYPE_DEBUG, "[%s|%s] inData == nullptr", buf, 0x16u);
    }

    return 4294967246;
  }
  unint64_t v12 = (unsigned __int8 *)this + 5968;
  AudioUnitScope v13 = a3 - 2000;
  if (a3 - 2000 < 3)
  {
LABEL_15:
    uint64_t v17 = 0;
    if (a2 == 5679) {
      uint64_t v18 = 3112;
    }
    else {
      uint64_t v18 = a2;
    }
    BOOL v19 = v13 == 1;
    BOOL v20 = v18 == 3241;
    if (v20 && v19) {
      unsigned int v21 = 0;
    }
    else {
      unsigned int v21 = a4;
    }
    if (v20 && v19) {
      AudioUnitScope v22 = 0;
    }
    else {
      AudioUnitScope v22 = v13;
    }
    if (v18 == 5000)
    {
      unsigned __int8 v23 = atomic_load(v12 + 3011);
      uint64_t v17 = v23 & 1;
    }
    inuint64_t Element = v21;
    if (v22 == 2)
    {
      if (v21)
      {
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        __int16 v28 = (id)getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        {
          __int16 v80 = (void *)((char *)this + 3368);
          if (*((char *)this + 3391) < 0) {
            __int16 v80 = (void *)*v80;
          }
          *(_DWORD *)std::string buf = 136316162;
          *(void *)&uint8_t buf[4] = v80;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "SetProperty";
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)&buf[24] = 2;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = v21;
          *(_WORD *)&buf[34] = 1024;
          *(_DWORD *)&buf[36] = v18;
          _os_log_error_impl(&dword_1BB0CE000, v28, OS_LOG_TYPE_ERROR, "[%s|%s] (scope=%u, element=%u): invalid element (property = %u)", buf, 0x28u);
        }
LABEL_643:

        return 4294956419;
      }
      uint64_t Element = ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 128), 0);
      uint64_t v24 = AUSM::Properties::setProperty((AUSM::Properties *)(Element + 224), v18, (CFTypeRef *)a5, a6, v17);
      goto LABEL_44;
    }
    if (v22 != 1)
    {
      if (v22) {
        return 4294956417;
      }
      uint64_t v24 = AUSM::GlobalProperties::setProperty((AUSpatialMixerV2 *)((char *)this + 3360), v18, (CFTypeRef *)a5, a6, v17);
LABEL_44:
      uint64_t v15 = v24;
      unsigned int v35 = v21;
LABEL_45:
      if (v15 != -10879) {
        return v15;
      }
      uint64_t v36 = *((void *)this + 15);
      if (v36)
      {
        LODWORD(v37) = (*(uint64_t (**)(uint64_t))(*(void *)v36 + 24))(v36);
        unsigned int v35 = inElement;
      }
      else
      {
        uint64_t v37 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
      }
      uint64_t v38 = 4294956417;
      if ((int)v18 <= 3269)
      {
        if ((int)v18 > 3115)
        {
          switch((int)v18)
          {
            case 3215:
              if (v22 >= 2)
              {
                if (getAUSMV2Log(void)::onceToken != -1) {
                  dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                }
                float v14 = (id)getAUSMV2Log(void)::gLog;
                if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v299 = (void *)((char *)this + 3368);
                  if (*((char *)this + 3391) < 0) {
                    uint64_t v299 = (void *)*v299;
                  }
                  *(_DWORD *)std::string buf = 136315906;
                  *(void *)&uint8_t buf[4] = v299;
                  *(_WORD *)&unsigned char buf[12] = 2080;
                  *(void *)&buf[14] = "SetProperty";
                  *(_WORD *)&buf[22] = 1024;
                  *(_DWORD *)&buf[24] = v22;
                  *(_WORD *)&buf[28] = 1024;
                  *(_DWORD *)&buf[30] = 3215;
                  _os_log_debug_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitScope scope = %u for property = %u", buf, 0x22u);
                }
                goto LABEL_9;
              }
              unsigned int v118 = this;
              if (v22 != 1
                || ((uint64_t v119 = *((void *)this + 15)) == 0
                  ? (AUSpatialMixerV2 *)(uint64_t v120 = (*((void *)this + 13) - *((void *)this + 12)) >> 3)
                  : (LODWORD(v120) = (*(uint64_t (**)(uint64_t))(*(void *)v119 + 24))(v119),
                     unsigned int v35 = inElement,
                     unsigned int v118 = this),
                    v35 < v120))
              {
                memset(&v354, 0, sizeof(v354));
                std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v354, a5, (uint64_t)&a5[a6 >> 2], a6 >> 2);
                caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 3088);
                if (v22 == 1)
                {
                  if (getAUSMV2Log(void)::onceToken != -1) {
                    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                  }
                  int v252 = (id)getAUSMV2Log(void)::gLog;
                  if (os_log_type_enabled(v252, OS_LOG_TYPE_DEFAULT))
                  {
                    unint64_t v253 = (void *)((char *)this + 3368);
                    if (*((char *)this + 3391) < 0) {
                      unint64_t v253 = (void *)*v253;
                    }
                    *(_DWORD *)std::string buf = 136315906;
                    *(void *)&uint8_t buf[4] = v253;
                    *(_WORD *)&unsigned char buf[12] = 2080;
                    *(void *)&buf[14] = "SetProperty";
                    *(_WORD *)&buf[22] = 1024;
                    *(_DWORD *)&buf[24] = inElement;
                    *(_WORD *)&buf[28] = 1024;
                    *(_DWORD *)&buf[30] = (v354.__r_.__value_.__l.__size_ - v354.__r_.__value_.__r.__words[0]) >> 2;
                    _os_log_impl(&dword_1BB0CE000, v252, OS_LOG_TYPE_DEFAULT, "[%s|%s] Setting reverb send decorr filter lengths on Input Element %u to %u:", buf, 0x22u);
                  }

                  uint64_t v254 = ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 80), inElement);
                  AUSpatialMixerV2InputElement::SetDecorrFilterLengthsOnReverbSend(v254, (uint64_t *)&v354, 0xFFFFFFFF);
                }
                else
                {
                  if (getAUSMV2Log(void)::onceToken != -1) {
                    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                  }
                  float v255 = (id)getAUSMV2Log(void)::gLog;
                  if (os_log_type_enabled(v255, OS_LOG_TYPE_DEFAULT))
                  {
                    float v256 = (void *)((char *)this + 3368);
                    if (*((char *)this + 3391) < 0) {
                      float v256 = (void *)*v256;
                    }
                    *(_DWORD *)std::string buf = 136315906;
                    *(void *)&uint8_t buf[4] = v256;
                    *(_WORD *)&unsigned char buf[12] = 2080;
                    *(void *)&buf[14] = "SetProperty";
                    *(_WORD *)&buf[22] = 1024;
                    *(_DWORD *)&buf[24] = inElement;
                    *(_WORD *)&buf[28] = 1024;
                    *(_DWORD *)&buf[30] = (v354.__r_.__value_.__l.__size_ - v354.__r_.__value_.__r.__words[0]) >> 2;
                    _os_log_impl(&dword_1BB0CE000, v255, OS_LOG_TYPE_DEFAULT, "[%s|%s] Setting reverb send decorr filter lengths on Channel %u to %u:", buf, 0x22u);
                  }

                  if (v37)
                  {
                    unsigned int v257 = 0;
                    do
                    {
                      uint64_t v258 = ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 80), v257);
                      AUSpatialMixerV2InputElement::SetDecorrFilterLengthsOnReverbSend(v258, (uint64_t *)&v354, inElement);
                      ++v257;
                    }
                    while (v37 != v257);
                  }
                }
                caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock((uint64_t)this + 3088);
                goto LABEL_638;
              }
              if (getAUSMV2Log(void)::onceToken != -1) {
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
              }
              __int16 v28 = (id)getAUSMV2Log(void)::gLog;
              if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
              {
                unsigned int v326 = (void *)((char *)v118 + 3368);
                if (*((char *)v118 + 3391) < 0) {
                  unsigned int v326 = (void *)*v326;
                }
                *(_DWORD *)std::string buf = 136315906;
                *(void *)&uint8_t buf[4] = v326;
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = "SetProperty";
                *(_WORD *)&buf[22] = 1024;
                *(_DWORD *)&buf[24] = inElement;
                *(_WORD *)&buf[28] = 1024;
                *(_DWORD *)&buf[30] = 3215;
                _os_log_debug_impl(&dword_1BB0CE000, v28, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitElement element = %u for input scope property = %u", buf, 0x22u);
              }
              goto LABEL_643;
            case 3216:
              if (v22 >= 2)
              {
                if (getAUSMV2Log(void)::onceToken != -1) {
                  dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                }
                float v14 = (id)getAUSMV2Log(void)::gLog;
                if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
                {
                  int v300 = (void *)((char *)this + 3368);
                  if (*((char *)this + 3391) < 0) {
                    int v300 = (void *)*v300;
                  }
                  *(_DWORD *)std::string buf = 136315906;
                  *(void *)&uint8_t buf[4] = v300;
                  *(_WORD *)&unsigned char buf[12] = 2080;
                  *(void *)&buf[14] = "SetProperty";
                  *(_WORD *)&buf[22] = 1024;
                  *(_DWORD *)&buf[24] = v22;
                  *(_WORD *)&buf[28] = 1024;
                  *(_DWORD *)&buf[30] = 3216;
                  _os_log_debug_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitScope scope = %u for property = %u", buf, 0x22u);
                }
                goto LABEL_9;
              }
              unsigned int v121 = this;
              if (v22 == 1)
              {
                uint64_t v122 = *((void *)this + 15);
                if (v122)
                {
                  LODWORD(v123) = (*(uint64_t (**)(uint64_t))(*(void *)v122 + 24))(v122);
                  unsigned int v35 = inElement;
                  unsigned int v121 = this;
                }
                else
                {
                  uint64_t v123 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
                }
                if (v35 >= v123)
                {
                  if (getAUSMV2Log(void)::onceToken != -1) {
                    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                  }
                  __int16 v28 = (id)getAUSMV2Log(void)::gLog;
                  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
                  {
                    unsigned int v327 = (void *)((char *)v121 + 3368);
                    if (*((char *)v121 + 3391) < 0) {
                      unsigned int v327 = (void *)*v327;
                    }
                    *(_DWORD *)std::string buf = 136315906;
                    *(void *)&uint8_t buf[4] = v327;
                    *(_WORD *)&unsigned char buf[12] = 2080;
                    *(void *)&buf[14] = "SetProperty";
                    *(_WORD *)&buf[22] = 1024;
                    *(_DWORD *)&buf[24] = inElement;
                    *(_WORD *)&buf[28] = 1024;
                    *(_DWORD *)&buf[30] = 3216;
                    _os_log_debug_impl(&dword_1BB0CE000, v28, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitElement element = %u for input scope property = %u", buf, 0x22u);
                  }
                  goto LABEL_643;
                }
              }
              memset(&v354, 0, sizeof(v354));
              std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v354, a5, (uint64_t)&a5[a6 >> 2], a6 >> 2);
              caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 3088);
              if (v22 == 1)
              {
                if (getAUSMV2Log(void)::onceToken != -1) {
                  dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                }
                float v259 = (id)getAUSMV2Log(void)::gLog;
                if (os_log_type_enabled(v259, OS_LOG_TYPE_DEFAULT))
                {
                  unint64_t v260 = (void *)((char *)this + 3368);
                  if (*((char *)this + 3391) < 0) {
                    unint64_t v260 = (void *)*v260;
                  }
                  *(_DWORD *)std::string buf = 136315906;
                  *(void *)&uint8_t buf[4] = v260;
                  *(_WORD *)&unsigned char buf[12] = 2080;
                  *(void *)&buf[14] = "SetProperty";
                  *(_WORD *)&buf[22] = 1024;
                  *(_DWORD *)&buf[24] = inElement;
                  *(_WORD *)&buf[28] = 1024;
                  *(_DWORD *)&buf[30] = (v354.__r_.__value_.__l.__size_ - v354.__r_.__value_.__r.__words[0]) >> 2;
                  _os_log_impl(&dword_1BB0CE000, v259, OS_LOG_TYPE_DEFAULT, "[%s|%s] Setting reverb send decorr filter coeffs on Input Element %u to %u:", buf, 0x22u);
                }

                uint64_t v261 = ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 80), inElement);
                std::string __p = 0;
                uint64_t v346 = 0;
                uint64_t v347 = 0;
                std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, v354.__r_.__value_.__l.__data_, v354.__r_.__value_.__l.__size_, (uint64_t)(v354.__r_.__value_.__l.__size_ - v354.__r_.__value_.__r.__words[0]) >> 2);
                AUSpatialMixerV2InputElement::SetDecorrFilterCoeffsOnReverbSend(v261, (uint64_t *)&__p, 0xFFFFFFFF);
                if (__p)
                {
                  uint64_t v346 = __p;
                  operator delete(__p);
                }
              }
              else
              {
                if (getAUSMV2Log(void)::onceToken != -1) {
                  dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                }
                int v262 = (id)getAUSMV2Log(void)::gLog;
                if (os_log_type_enabled(v262, OS_LOG_TYPE_DEFAULT))
                {
                  int v263 = (void *)((char *)this + 3368);
                  if (*((char *)this + 3391) < 0) {
                    int v263 = (void *)*v263;
                  }
                  *(_DWORD *)std::string buf = 136315906;
                  *(void *)&uint8_t buf[4] = v263;
                  *(_WORD *)&unsigned char buf[12] = 2080;
                  *(void *)&buf[14] = "SetProperty";
                  *(_WORD *)&buf[22] = 1024;
                  *(_DWORD *)&buf[24] = inElement;
                  *(_WORD *)&buf[28] = 1024;
                  *(_DWORD *)&buf[30] = (v354.__r_.__value_.__l.__size_ - v354.__r_.__value_.__r.__words[0]) >> 2;
                  _os_log_impl(&dword_1BB0CE000, v262, OS_LOG_TYPE_DEFAULT, "[%s|%s] Setting reverb send decorr filter coeffs on Channel %u to %u:", buf, 0x22u);
                }

                if (v37)
                {
                  unsigned int v264 = 0;
                  do
                  {
                    uint64_t v265 = ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 80), v264);
                    uint64_t v342 = 0;
                    uint64_t v343 = 0;
                    uint64_t v344 = 0;
                    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v342, v354.__r_.__value_.__l.__data_, v354.__r_.__value_.__l.__size_, (uint64_t)(v354.__r_.__value_.__l.__size_ - v354.__r_.__value_.__r.__words[0]) >> 2);
                    AUSpatialMixerV2InputElement::SetDecorrFilterCoeffsOnReverbSend(v265, (uint64_t *)&v342, inElement);
                    if (v342)
                    {
                      uint64_t v343 = v342;
                      operator delete(v342);
                    }
                    ++v264;
                  }
                  while (v37 != v264);
                }
              }
              caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock((uint64_t)this + 3088);
LABEL_638:
              if (v354.__r_.__value_.__r.__words[0])
              {
                v354.__r_.__value_.__l.__size_ = v354.__r_.__value_.__r.__words[0];
                operator delete(v354.__r_.__value_.__l.__data_);
              }
              return 0;
            case 3217:
            case 3218:
            case 3219:
            case 3220:
            case 3221:
            case 3223:
            case 3224:
              goto LABEL_305;
            case 3222:
              if (v22)
              {
                if (getAUSMV2Log(void)::onceToken != -1) {
                  dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                }
                float v14 = (id)getAUSMV2Log(void)::gLog;
                if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
                {
                  BOOL v290 = (void *)((char *)this + 3368);
                  if (*((char *)this + 3391) < 0) {
                    BOOL v290 = (void *)*v290;
                  }
                  *(_DWORD *)std::string buf = 136315906;
                  *(void *)&uint8_t buf[4] = v290;
                  *(_WORD *)&unsigned char buf[12] = 2080;
                  *(void *)&buf[14] = "SetProperty";
                  *(_WORD *)&buf[22] = 1024;
                  *(_DWORD *)&buf[24] = v22;
                  *(_WORD *)&buf[28] = 1024;
                  *(_DWORD *)&buf[30] = 3222;
                  _os_log_debug_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitScope scope = %u for global scope property = %u", buf, 0x22u);
                }
                goto LABEL_9;
              }
              if (a6 != 24) {
                return 4294956445;
              }
              caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 3088);
              applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[5],float const&>((applesauce::CF::TypeRef *)buf, a5);
              applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[16],float const&>((applesauce::CF::TypeRef *)&buf[16], a5 + 1);
              applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[19],float const&>((applesauce::CF::TypeRef *)&buf[32], "DecorrelationLimit", a5 + 2);
              applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[13],float const&>((applesauce::CF::TypeRef *)&v350, a5 + 3);
              LODWORD(v353.__r_.__value_.__l.__data_) = *((float *)a5 + 4);
              applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[10],unsigned int>((applesauce::CF::TypeRef *)&v351, (int *)&v353);
              LODWORD(theArray) = *((float *)a5 + 5);
              applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[8],unsigned int>((applesauce::CF::TypeRef *)v352, (int *)&theArray);
              v354.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
              v354.__r_.__value_.__l.__size_ = 6;
              CFDictionaryRef CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)&v354);
              AUSM::AppleSauceCFWithMutex<__CFDictionary const*>::store((uint64_t)this + 4952, (const void **)&CFDictionaryRef);
              applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&CFDictionaryRef);
              for (uint64_t i = 0; i != -96; i -= 16)
              {
                float v133 = *(const void **)&v352[i + 8];
                if (v133) {
                  CFRelease(v133);
                }
                float v134 = *(const void **)&v352[i];
                if (v134) {
                  CFRelease(v134);
                }
              }
              (*(void (**)(AUSpatialMixerV2 *, uint64_t))(*(void *)this + 592))(this, 3222);
              caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock((uint64_t)this + 3088);
              return 0;
            case 3225:
              if (v22 != 1)
              {
                if (getAUSMV2Log(void)::onceToken != -1) {
                  dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                }
                float v14 = (id)getAUSMV2Log(void)::gLog;
                if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
                {
                  v301 = (void *)((char *)this + 3368);
                  if (*((char *)this + 3391) < 0) {
                    v301 = (void *)*v301;
                  }
                  *(_DWORD *)std::string buf = 136315906;
                  *(void *)&uint8_t buf[4] = v301;
                  *(_WORD *)&unsigned char buf[12] = 2080;
                  *(void *)&buf[14] = "SetProperty";
                  *(_WORD *)&buf[22] = 1024;
                  *(_DWORD *)&buf[24] = v22;
                  *(_WORD *)&buf[28] = 1024;
                  *(_DWORD *)&buf[30] = 3225;
                  _os_log_debug_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitScope scope = %u for input scope property = %u", buf, 0x22u);
                }
                goto LABEL_9;
              }
              int v83 = this;
              uint64_t v84 = *((void *)this + 15);
              if (v84)
              {
                LODWORD(v85) = (*(uint64_t (**)(uint64_t))(*(void *)v84 + 24))(v84);
                unsigned int v35 = inElement;
                int v83 = this;
              }
              else
              {
                uint64_t v85 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
              }
              if (v35 >= v85)
              {
                if (getAUSMV2Log(void)::onceToken != -1) {
                  dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                }
                __int16 v28 = (id)getAUSMV2Log(void)::gLog;
                if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
                {
                  float v318 = (void *)((char *)v83 + 3368);
                  if (*((char *)v83 + 3391) < 0) {
                    float v318 = (void *)*v318;
                  }
                  *(_DWORD *)std::string buf = 136315906;
                  *(void *)&uint8_t buf[4] = v318;
                  *(_WORD *)&unsigned char buf[12] = 2080;
                  *(void *)&buf[14] = "SetProperty";
                  *(_WORD *)&buf[22] = 1024;
                  *(_DWORD *)&buf[24] = inElement;
                  *(_WORD *)&buf[28] = 1024;
                  *(_DWORD *)&buf[30] = 3225;
                  _os_log_debug_impl(&dword_1BB0CE000, v28, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitElement element = %u for input scope property = %u", buf, 0x22u);
                }
                goto LABEL_643;
              }
              if (a6 != 8) {
                return 4294956445;
              }
              applesauce::CF::DictionaryRef::from_get_noexcept((applesauce::CF::DictionaryRef *)buf, *(CFTypeRef *)a5);
              AUSM::ExclusionZone::exclusionZonesFromDictionary((AUSM::ExclusionZone *)&v354, (const __CFDictionary **)buf);
              applesauce::CF::DictionaryRef::~DictionaryRef((const void **)buf);
              caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)v83 + 3088);
              if (getAUSMV2Log(void)::onceToken != -1) {
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
              }
              float v237 = (id)getAUSMV2Log(void)::gLog;
              if (os_log_type_enabled(v237, OS_LOG_TYPE_DEFAULT))
              {
                float v238 = (void *)((char *)v83 + 3368);
                if (*((char *)v83 + 3391) < 0) {
                  float v238 = (void *)*v238;
                }
                *(_DWORD *)std::string buf = 136315906;
                *(void *)&uint8_t buf[4] = v238;
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = "SetProperty";
                *(_WORD *)&buf[22] = 1024;
                *(_DWORD *)&buf[24] = -1227133513
                                    * ((v354.__r_.__value_.__l.__size_ - v354.__r_.__value_.__r.__words[0]) >> 2);
                *(_WORD *)&buf[28] = 1024;
                *(_DWORD *)&buf[30] = v35;
                _os_log_impl(&dword_1BB0CE000, v237, OS_LOG_TYPE_DEFAULT, "[%s|%s] Setting %u exclusion zones on Input Element %u", buf, 0x22u);
              }

              unsigned int v35 = inElement;
              float v239 = (void *)ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 80), inElement);
              uint64_t v38 = AUSpatialMixerV2InputElement::SetExclusionZones(v239, (uint64_t)&v354);
              if (v38)
              {
                if (getAUSMV2Log(void)::onceToken != -1) {
                  dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                }
                float v240 = (id)getAUSMV2Log(void)::gLog;
                if (os_log_type_enabled(v240, OS_LOG_TYPE_ERROR))
                {
                  unsigned int v329 = (void *)((char *)this + 3368);
                  if (*((char *)this + 3391) < 0) {
                    unsigned int v329 = (void *)*v329;
                  }
                  *(_DWORD *)std::string buf = 136315650;
                  *(void *)&uint8_t buf[4] = v329;
                  *(_WORD *)&unsigned char buf[12] = 2080;
                  *(void *)&buf[14] = "SetProperty";
                  *(_WORD *)&buf[22] = 1024;
                  *(_DWORD *)&buf[24] = v38;
                  _os_log_error_impl(&dword_1BB0CE000, v240, OS_LOG_TYPE_ERROR, "[%s|%s] SetExclusionZones from dictionary failed with error %d", buf, 0x1Cu);
                }

                unsigned int v35 = inElement;
              }
              caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock((uint64_t)v83 + 3088);
              goto LABEL_726;
            case 3226:
              if (v22 != 1)
              {
                if (getAUSMV2Log(void)::onceToken != -1) {
                  dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                }
                float v14 = (id)getAUSMV2Log(void)::gLog;
                if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
                {
                  v302 = (void *)((char *)this + 3368);
                  if (*((char *)this + 3391) < 0) {
                    v302 = (void *)*v302;
                  }
                  *(_DWORD *)std::string buf = 136315906;
                  *(void *)&uint8_t buf[4] = v302;
                  *(_WORD *)&unsigned char buf[12] = 2080;
                  *(void *)&buf[14] = "SetProperty";
                  *(_WORD *)&buf[22] = 1024;
                  *(_DWORD *)&buf[24] = v22;
                  *(_WORD *)&buf[28] = 1024;
                  *(_DWORD *)&buf[30] = 3226;
                  _os_log_debug_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitScope scope = %u for input scope property = %u", buf, 0x22u);
                }
                goto LABEL_9;
              }
              __int16 v86 = this;
              uint64_t v87 = *((void *)this + 15);
              if (v87)
              {
                LODWORD(v88) = (*(uint64_t (**)(uint64_t))(*(void *)v87 + 24))(v87);
                unsigned int v35 = inElement;
                __int16 v86 = this;
              }
              else
              {
                uint64_t v88 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
              }
              if (v35 >= v88)
              {
                if (getAUSMV2Log(void)::onceToken != -1) {
                  dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                }
                __int16 v28 = (id)getAUSMV2Log(void)::gLog;
                if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v319 = (void *)((char *)v86 + 3368);
                  if (*((char *)v86 + 3391) < 0) {
                    uint64_t v319 = (void *)*v319;
                  }
                  *(_DWORD *)std::string buf = 136315906;
                  *(void *)&uint8_t buf[4] = v319;
                  *(_WORD *)&unsigned char buf[12] = 2080;
                  *(void *)&buf[14] = "SetProperty";
                  *(_WORD *)&buf[22] = 1024;
                  *(_DWORD *)&buf[24] = inElement;
                  *(_WORD *)&buf[28] = 1024;
                  *(_DWORD *)&buf[30] = 3226;
                  _os_log_debug_impl(&dword_1BB0CE000, v28, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitElement element = %u for input scope property = %u", buf, 0x22u);
                }
                goto LABEL_643;
              }
              if ((a6 & 3) != 0)
              {
                if (getAUSMV2Log(void)::onceToken != -1) {
                  dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                }
                float v235 = (id)getAUSMV2Log(void)::gLog;
                if (os_log_type_enabled(v235, OS_LOG_TYPE_ERROR))
                {
                  v323 = (void *)((char *)v86 + 3368);
                  if (*((char *)v86 + 3391) < 0) {
                    v323 = (void *)*v323;
                  }
                  *(_DWORD *)std::string buf = 136315394;
                  *(void *)&uint8_t buf[4] = v323;
                  *(_WORD *)&unsigned char buf[12] = 2080;
                  *(void *)&buf[14] = "SetProperty";
                  _os_log_error_impl(&dword_1BB0CE000, v235, OS_LOG_TYPE_ERROR, "[%s|%s] probably corrupted binary blob for exclusion zones", buf, 0x16u);
                }
                goto LABEL_585;
              }
              AUSM::ExclusionZone::exclusionZonesFromArray((AUSM::ExclusionZone *)&v354, (const float *)a5, a6 >> 2);
              long long v266 = *(_OWORD *)&v354.__r_.__value_.__l.__data_;
              if (v354.__r_.__value_.__r.__words[0] == v354.__r_.__value_.__l.__size_)
              {
                int v267 = 0;
              }
              else
              {
                int v267 = 0;
                uint64_t v268 = (int *)v354.__r_.__value_.__r.__words[0];
                do
                {
                  int v270 = *v268;
                  v268 += 7;
                  int v269 = v270;
                  int v271 = v267 + 7;
                  if (!v270) {
                    v267 += 5;
                  }
                  if (v269 == 1) {
                    int v267 = v271;
                  }
                }
                while (v268 != (int *)v354.__r_.__value_.__l.__size_);
              }
              if (a6 >> 2 == v267)
              {
                if (getAUSMV2Log(void)::onceToken != -1) {
                  dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                }
                unint64_t v291 = (id)getAUSMV2Log(void)::gLog;
                if (os_log_type_enabled(v291, OS_LOG_TYPE_DEFAULT))
                {
                  unsigned int v292 = (void *)((char *)this + 3368);
                  if (*((char *)this + 3391) < 0) {
                    unsigned int v292 = (void *)*v292;
                  }
                  *(_DWORD *)std::string buf = 136315906;
                  *(void *)&uint8_t buf[4] = v292;
                  *(_WORD *)&unsigned char buf[12] = 2080;
                  *(void *)&buf[14] = "SetProperty";
                  *(_WORD *)&buf[22] = 1024;
                  *(_DWORD *)&buf[24] = -1227133513 * ((*((void *)&v266 + 1) - (void)v266) >> 2);
                  *(_WORD *)&buf[28] = 1024;
                  *(_DWORD *)&buf[30] = inElement;
                  _os_log_impl(&dword_1BB0CE000, v291, OS_LOG_TYPE_DEFAULT, "[%s|%s] Setting %u exclusion zones on Input Element %u", buf, 0x22u);
                }

                caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 3088);
                unsigned int v35 = inElement;
                unsigned __int8 v293 = (void *)ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 80), inElement);
                uint64_t v38 = AUSpatialMixerV2InputElement::SetExclusionZones(v293, (uint64_t)&v354);
                if (v38)
                {
                  if (getAUSMV2Log(void)::onceToken != -1) {
                    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                  }
                  uint64_t v294 = (id)getAUSMV2Log(void)::gLog;
                  if (os_log_type_enabled(v294, OS_LOG_TYPE_ERROR))
                  {
                    uint64_t v332 = (void *)((char *)this + 3368);
                    if (*((char *)this + 3391) < 0) {
                      uint64_t v332 = (void *)*v332;
                    }
                    *(_DWORD *)std::string buf = 136315650;
                    *(void *)&uint8_t buf[4] = v332;
                    *(_WORD *)&unsigned char buf[12] = 2080;
                    *(void *)&buf[14] = "SetProperty";
                    *(_WORD *)&buf[22] = 1024;
                    *(_DWORD *)&buf[24] = v38;
                    _os_log_error_impl(&dword_1BB0CE000, v294, OS_LOG_TYPE_ERROR, "[%s|%s] SetExclusionZones from array failed with error %d", buf, 0x1Cu);
                  }

                  unsigned int v35 = inElement;
                }
                caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock((uint64_t)this + 3088);
              }
              else
              {
                if (getAUSMV2Log(void)::onceToken != -1) {
                  dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                }
                uint64_t v295 = (id)getAUSMV2Log(void)::gLog;
                if (os_log_type_enabled(v295, OS_LOG_TYPE_ERROR))
                {
                  uint64_t v331 = (void *)((char *)this + 3368);
                  if (*((char *)this + 3391) < 0) {
                    uint64_t v331 = (void *)*v331;
                  }
                  *(_DWORD *)std::string buf = 136315394;
                  *(void *)&uint8_t buf[4] = v331;
                  *(_WORD *)&unsigned char buf[12] = 2080;
                  *(void *)&buf[14] = "SetProperty";
                  _os_log_error_impl(&dword_1BB0CE000, v295, OS_LOG_TYPE_ERROR, "[%s|%s] failed to fully parse zone data", buf, 0x16u);
                }

                uint64_t v38 = 4294956445;
                unsigned int v35 = inElement;
              }
LABEL_726:
              if (v354.__r_.__value_.__r.__words[0])
              {
                v354.__r_.__value_.__l.__size_ = v354.__r_.__value_.__r.__words[0];
                operator delete(v354.__r_.__value_.__l.__data_);
              }
              goto LABEL_305;
            default:
              if (v18 == 3116)
              {
                if (!v22) {
                  return 4294956431;
                }
                if (getAUSMV2Log(void)::onceToken != -1) {
                  dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                }
                float v14 = (id)getAUSMV2Log(void)::gLog;
                if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
                {
                  v297 = (void *)((char *)this + 3368);
                  if (*((char *)this + 3391) < 0) {
                    v297 = (void *)*v297;
                  }
                  *(_DWORD *)std::string buf = 136315906;
                  *(void *)&uint8_t buf[4] = v297;
                  *(_WORD *)&unsigned char buf[12] = 2080;
                  *(void *)&buf[14] = "SetProperty";
                  *(_WORD *)&buf[22] = 1024;
                  *(_DWORD *)&buf[24] = v22;
                  *(_WORD *)&buf[28] = 1024;
                  *(_DWORD *)&buf[30] = 3116;
                  _os_log_debug_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitScope scope = %u for global scope property = %u", buf, 0x22u);
                }
                goto LABEL_9;
              }
              if (v18 != 3268) {
                goto LABEL_305;
              }
              if (v22)
              {
                if (getAUSMV2Log(void)::onceToken != -1) {
                  dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                }
                float v14 = (id)getAUSMV2Log(void)::gLog;
                if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
                {
                  float v296 = (void *)((char *)this + 3368);
                  if (*((char *)this + 3391) < 0) {
                    float v296 = (void *)*v296;
                  }
                  *(_DWORD *)std::string buf = 136315906;
                  *(void *)&uint8_t buf[4] = v296;
                  *(_WORD *)&unsigned char buf[12] = 2080;
                  *(void *)&buf[14] = "SetProperty";
                  *(_WORD *)&buf[22] = 1024;
                  *(_DWORD *)&buf[24] = v22;
                  *(_WORD *)&buf[28] = 1024;
                  *(_DWORD *)&buf[30] = 3268;
                  _os_log_debug_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitScope scope = %u for global scope property = %u", buf, 0x22u);
                }
                goto LABEL_9;
              }
              if (a6 != 8) {
                return 4294956445;
              }
              applesauce::CF::ArrayRef::from_get_noexcept((applesauce::CF::ArrayRef *)&theArray, *(CFTypeRef *)a5);
              if (getAUSMV2Log(void)::onceToken != -1) {
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
              }
              double v144 = (id)getAUSMV2Log(void)::gLog;
              if (os_log_type_enabled(v144, OS_LOG_TYPE_DEFAULT))
              {
                int v145 = (void *)((char *)this + 3368);
                if (*((char *)this + 3391) < 0) {
                  int v145 = (void *)*v145;
                }
                int v146 = (const void **)applesauce::CF::ArrayRef::operator->(&theArray);
                applesauce::CF::ArrayRef_proxy::pretty_print((applesauce::CF::ArrayRef_proxy *)&v354, *v146);
                if ((v354.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  int v147 = &v354;
                }
                else {
                  int v147 = (std::string *)v354.__r_.__value_.__r.__words[0];
                }
                *(_DWORD *)std::string buf = 136315650;
                *(void *)&uint8_t buf[4] = v145;
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = "SetProperty";
                *(_WORD *)&buf[22] = 2080;
                *(void *)&buf[24] = v147;
                _os_log_impl(&dword_1BB0CE000, v144, OS_LOG_TYPE_DEFAULT, "[%s|%s] TuningWarperParameters = %s", buf, 0x20u);
                if (SHIBYTE(v354.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v354.__r_.__value_.__l.__data_);
                }
              }

              if (theArray)
              {
                unsigned __int8 v148 = (const __CFArray **)applesauce::CF::ArrayRef::operator->(&theArray);
                if (applesauce::CF::ArrayRef_proxy::get_size(*v148))
                {
                  if (getAUSMV2Log(void)::onceToken != -1) {
                    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                  }
                  v149 = (id)getAUSMV2Log(void)::gLog;
                  if (os_log_type_enabled(v149, OS_LOG_TYPE_DEFAULT))
                  {
                    unint64_t v150 = (void *)((char *)this + 3368);
                    if (*((char *)this + 3391) < 0) {
                      unint64_t v150 = (void *)*v150;
                    }
                    *(_DWORD *)std::string buf = 136315394;
                    *(void *)&uint8_t buf[4] = v150;
                    *(_WORD *)&unsigned char buf[12] = 2080;
                    *(void *)&buf[14] = "SetProperty";
                    _os_log_impl(&dword_1BB0CE000, v149, OS_LOG_TYPE_DEFAULT, "[%s|%s] Setting tuning warping parameters", buf, 0x16u);
                  }

                  applesauce::CF::ArrayRef_iterator<applesauce::CF::DictionaryRef>::ArrayRef_iterator(buf, theArray);
                  applesauce::CF::ArrayRef_iterator<applesauce::CF::DictionaryRef>::ArrayRef_iterator(&v354, theArray);
                  unsigned int v151 = (char *)this;
                  std::string::size_type size = v354.__r_.__value_.__r.__words[2];
                  int v153 = (char **)((char *)this + 3040);
                  v354.__r_.__value_.__l.__size_ = v354.__r_.__value_.__r.__words[2];
                  unint64_t v154 = *(void *)&buf[8];
                  while (*(void *)buf && v154 != *(void *)&buf[16]
                       || v354.__r_.__value_.__r.__words[0] && size != v354.__r_.__value_.__r.__words[2])
                  {
                    if (*(void *)buf == v354.__r_.__value_.__r.__words[0] && v154 == size) {
                      break;
                    }
                    applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>(*(const __CFArray **)buf, v154, (applesauce::CF::DictionaryRef *)&v340);
                    int v158 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(&v340);
                    CFNumberRef v159 = applesauce::CF::DictionaryRef_proxy::at_as<unsigned int,__CFString const*&>(*v158);
                    if (((unint64_t)v159 & 0xFF00000000) != 0)
                    {
                      unsigned int v160 = v159;
                      int v348 = (int)v159;
                      unsigned int v161 = *v153;
                      float v162 = 1.0;
                      float v163 = 0.0;
                      if (!*v153) {
                        goto LABEL_411;
                      }
                      float v164 = (char **)((char *)this + 3040);
                      do
                      {
                        unsigned int v165 = *((_DWORD *)v161 + 7);
                        BOOL v166 = v165 >= v159;
                        if (v165 >= v159) {
                          v167 = (char **)v161;
                        }
                        else {
                          v167 = (char **)(v161 + 8);
                        }
                        if (v166) {
                          float v164 = (char **)v161;
                        }
                        unsigned int v161 = *v167;
                      }
                      while (*v167);
                      if (v164 != v153 && *((_DWORD *)v164 + 7) <= v159)
                      {
                        float v163 = *((float *)v164 + 8);
                        float v170 = *((float *)v164 + 9);
                        float v162 = *((float *)v164 + 10);
                        float v171 = *((float *)v164 + 11);
                        float v172 = *((float *)v164 + 12);
                        float v173 = *((float *)v164 + 13);
                        int v168 = *((_DWORD *)v164 + 14);
                        int v169 = *((_DWORD *)v164 + 15);
                      }
                      else
                      {
LABEL_411:
                        int v168 = 1;
                        int v169 = (int)v159;
                        float v170 = 0.0;
                        float v171 = 1.0;
                        float v172 = 0.0;
                        float v173 = 0.0;
                      }
                      uint64_t v174 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(&v340);
                      CFNumberRef v175 = applesauce::CF::DictionaryRef_proxy::at_as<float,__CFString const*&>(*v174, (const void *)kPresetKeyAzimuth);
                      if (((unint64_t)v175 & 0xFF00000000) != 0) {
                        float v163 = *(float *)&v175;
                      }
                      float v176 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(&v340);
                      CFNumberRef v177 = applesauce::CF::DictionaryRef_proxy::at_as<float,__CFString const*&>(*v176, (const void *)kPresetKeyElevation);
                      if (((unint64_t)v177 & 0xFF00000000) != 0) {
                        float v170 = *(float *)&v177;
                      }
                      float v178 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(&v340);
                      CFNumberRef v179 = applesauce::CF::DictionaryRef_proxy::at_as<float,__CFString const*&>(*v178, (const void *)kPresetKeyDistance);
                      if (((unint64_t)v179 & 0xFF00000000) != 0) {
                        float v162 = *(float *)&v179;
                      }
                      float v180 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(&v340);
                      CFNumberRef v181 = applesauce::CF::DictionaryRef_proxy::at_as<float,__CFString const*&>(*v180, (const void *)kPresetKeyGain);
                      if (((unint64_t)v181 & 0xFF00000000) != 0) {
                        float v171 = *(float *)&v181;
                      }
                      float v182 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(&v340);
                      CFNumberRef v183 = applesauce::CF::DictionaryRef_proxy::at_as<float,__CFString const*&>(*v182, (const void *)kPresetKeyDRRAdjustment);
                      if (((unint64_t)v183 & 0xFF00000000) != 0) {
                        float v172 = *(float *)&v183;
                      }
                      float v184 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(&v340);
                      CFNumberRef v185 = applesauce::CF::DictionaryRef_proxy::at_as<float,__CFString const*&>(*v184, (const void *)kPresetKeyDelay);
                      float v186 = std::__tree<std::__value_type<unsigned int,AUSMChannelParameters>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,AUSMChannelParameters>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,AUSMChannelParameters>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)this + 379, v160, &v348);
                      float v187 = *(float *)&v185;
                      if (((unint64_t)v185 & 0xFF00000000) == 0) {
                        float v187 = v173;
                      }
                      *((float *)v186 + 8) = v163;
                      *((float *)v186 + 9) = v170;
                      *((float *)v186 + 10) = v162;
                      *((float *)v186 + 11) = v171;
                      *((float *)v186 + 12) = v172;
                      *((float *)v186 + 13) = v187;
                      *((_DWORD *)v186 + 14) = v168;
                      *((_DWORD *)v186 + 15) = v169;
                    }
                    else
                    {
                      if (getAUSMV2Log(void)::onceToken != -1) {
                        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                      }
                      float v188 = (id)getAUSMV2Log(void)::gLog;
                      if (os_log_type_enabled(v188, OS_LOG_TYPE_DEFAULT))
                      {
                        float v189 = (char *)this + 3368;
                        if (v151[3391] < 0) {
                          float v189 = (char *)*((void *)this + 421);
                        }
                        LODWORD(v353.__r_.__value_.__l.__data_) = 136315394;
                        *(std::string::size_type *)((char *)v353.__r_.__value_.__r.__words + 4) = (std::string::size_type)v189;
                        WORD2(v353.__r_.__value_.__r.__words[1]) = 2080;
                        *(std::string::size_type *)((char *)&v353.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"SetProperty";
                        _os_log_impl(&dword_1BB0CE000, v188, OS_LOG_TYPE_DEFAULT, "[%s|%s] Invalid channel label in the preset, some channel parameters are probably ignored.", (uint8_t *)&v353, 0x16u);
                      }

                      unsigned int v151 = (char *)this;
                    }
                    applesauce::CF::DictionaryRef::~DictionaryRef(&v340);
                    unint64_t v154 = ++*(void *)&buf[8];
                    std::string::size_type size = v354.__r_.__value_.__l.__size_;
                  }
                  AUSpatialMixerV2::UpdateTuningWarper((AUSpatialMixerV2 *)v151);
                }
              }
              applesauce::CF::ArrayRef::~ArrayRef((const void **)&theArray);
              break;
          }
          return 0;
        }
        if ((int)v18 > 13)
        {
          if (v18 == 14)
          {
            unint64_t v73 = (OpaqueAudioComponentInstance ***)*((void *)this + 416);
            __int16 v74 = (OpaqueAudioComponentInstance ***)*((void *)this + 417);
            if (v73 != v74)
            {
              do
              {
                int v75 = **v73;
                OSStatus v76 = -66744;
                if (!v75 || (OSStatus v76 = AudioUnitSetProperty(v75, 0xEu, v22, v35, a5, a6), v35 = inElement, v76))
                {
                  if (getAUSMV2Log(void)::onceToken != -1) {
                    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                  }
                  unsigned int v77 = (id)getAUSMV2Log(void)::gLog;
                  if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
                  {
                    uint64_t v78 = (char *)this + 3368;
                    if (*((char *)this + 3391) < 0) {
                      uint64_t v78 = (char *)*((void *)this + 421);
                    }
                    CFURLRef v79 = *v73 + 9;
                    if (*((char *)*v73 + 95) < 0) {
                      CFURLRef v79 = (void *)*v79;
                    }
                    *(_DWORD *)std::string buf = 136315906;
                    *(void *)&uint8_t buf[4] = v78;
                    *(_WORD *)&unsigned char buf[12] = 2080;
                    *(void *)&buf[14] = "SetProperty";
                    *(_WORD *)&buf[22] = 1024;
                    *(_DWORD *)&buf[24] = v76;
                    *(_WORD *)&buf[28] = 2080;
                    *(void *)&buf[30] = v79;
                    _os_log_error_impl(&dword_1BB0CE000, v77, OS_LOG_TYPE_ERROR, "[%s|%s] error %d setting kAudioUnitProperty_MaximumFramesPerSlice on %s", buf, 0x26u);
                  }

                  unsigned int v35 = inElement;
                }
                ++v73;
              }
              while (v73 != v74);
              uint64_t v38 = 4294956417;
            }
            goto LABEL_305;
          }
          if (v18 != 19)
          {
            if (v18 == 3107)
            {
              if (v22 >= 2)
              {
                if (getAUSMV2Log(void)::onceToken != -1) {
                  dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                }
                float v14 = (id)getAUSMV2Log(void)::gLog;
                if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
                {
                  int v286 = (void *)((char *)this + 3368);
                  if (*((char *)this + 3391) < 0) {
                    int v286 = (void *)*v286;
                  }
                  *(_DWORD *)std::string buf = 136315906;
                  *(void *)&uint8_t buf[4] = v286;
                  *(_WORD *)&unsigned char buf[12] = 2080;
                  *(void *)&buf[14] = "SetProperty";
                  *(_WORD *)&buf[22] = 1024;
                  *(_DWORD *)&buf[24] = v22;
                  *(_WORD *)&buf[28] = 1024;
                  *(_DWORD *)&buf[30] = 3107;
                  _os_log_debug_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitScope scope = %u for property = %u", buf, 0x22u);
                }
                goto LABEL_9;
              }
              unsigned int v112 = this;
              if (v22 != 1
                || ((uint64_t v113 = *((void *)this + 15)) == 0
                  ? (AUSpatialMixerV2 *)(uint64_t v114 = (*((void *)this + 13) - *((void *)this + 12)) >> 3)
                  : (LODWORD(v114) = (*(uint64_t (**)(uint64_t))(*(void *)v113 + 24))(v113),
                     unsigned int v35 = inElement,
                     unsigned int v112 = this),
                    v35 < v114))
              {
                if (a6 == 8)
                {
                  applesauce::CF::DictionaryRef::from_get_noexcept((applesauce::CF::DictionaryRef *)buf, *(CFTypeRef *)a5);
                  uint64_t v247 = *((void *)v112 + 377);
                  *((void *)v112 + 377) = *(void *)buf;
                  *(void *)std::string buf = v247;
                  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)buf);
                  (*(void (**)(AUSpatialMixerV2 *, uint64_t))(*(void *)v112 + 592))(v112, 3107);
                  return 0;
                }
                return 4294956445;
              }
              if (getAUSMV2Log(void)::onceToken != -1) {
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
              }
              __int16 v28 = (id)getAUSMV2Log(void)::gLog;
              if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
              {
                v322 = (void *)((char *)v112 + 3368);
                if (*((char *)v112 + 3391) < 0) {
                  v322 = (void *)*v322;
                }
                *(_DWORD *)std::string buf = 136315906;
                *(void *)&uint8_t buf[4] = v322;
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = "SetProperty";
                *(_WORD *)&buf[22] = 1024;
                *(_DWORD *)&buf[24] = inElement;
                *(_WORD *)&buf[28] = 1024;
                *(_DWORD *)&buf[30] = 3107;
                _os_log_debug_impl(&dword_1BB0CE000, v28, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitElement element = %u for input scope property = %u", buf, 0x22u);
              }
              goto LABEL_643;
            }
            goto LABEL_305;
          }
          goto LABEL_155;
        }
        if (v18 == 2 || v18 == 8)
        {
LABEL_155:
          if (v22 == 2)
          {
            unsigned __int8 v61 = (OpaqueAudioComponentInstance ***)*((void *)this + 416);
            AudioUnitParameterID v62 = (OpaqueAudioComponentInstance ***)*((void *)this + 417);
            if (v61 != v62)
            {
              char v334 = (char **)((char *)this + 3368);
              do
              {
                AudioUnitScope v63 = **v61;
                OSStatus v64 = -66744;
                if (!v63 || (OSStatus v64 = AudioUnitSetProperty(v63, v18, 1u, inElement, a5, a6)) != 0)
                {
                  if (getAUSMV2Log(void)::onceToken != -1) {
                    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                  }
                  double v65 = (id)getAUSMV2Log(void)::gLog;
                  if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
                  {
                    unsigned int v69 = (char *)this + 3368;
                    if (*((char *)this + 3391) < 0) {
                      unsigned int v69 = *v334;
                    }
                    AudioUnitParameterID v70 = *v61 + 9;
                    if (*((char *)*v61 + 95) < 0) {
                      AudioUnitParameterID v70 = (void *)*v70;
                    }
                    *(_DWORD *)std::string buf = 136316162;
                    *(void *)&uint8_t buf[4] = v69;
                    *(_WORD *)&unsigned char buf[12] = 2080;
                    *(void *)&buf[14] = "SetProperty";
                    *(_WORD *)&buf[22] = 1024;
                    *(_DWORD *)&buf[24] = v64;
                    *(_WORD *)&buf[28] = 1024;
                    *(_DWORD *)&buf[30] = v18;
                    *(_WORD *)&buf[34] = 2080;
                    *(void *)&buf[36] = v70;
                    _os_log_error_impl(&dword_1BB0CE000, v65, OS_LOG_TYPE_ERROR, "[%s|%s] error %d setting input scope property %u on %s", buf, 0x2Cu);
                  }
                }
                AudioUnitParameterID v66 = **v61;
                OSStatus v67 = -66744;
                if (!v66 || (OSStatus v67 = AudioUnitSetProperty(v66, v18, 2u, inElement, a5, a6)) != 0)
                {
                  if (getAUSMV2Log(void)::onceToken != -1) {
                    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                  }
                  float v68 = (id)getAUSMV2Log(void)::gLog;
                  if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
                  {
                    AudioUnitScope v71 = (char *)this + 3368;
                    if (*((char *)this + 3391) < 0) {
                      AudioUnitScope v71 = *v334;
                    }
                    __int16 v72 = *v61 + 9;
                    if (*((char *)*v61 + 95) < 0) {
                      __int16 v72 = (void *)*v72;
                    }
                    *(_DWORD *)std::string buf = 136316162;
                    *(void *)&uint8_t buf[4] = v71;
                    *(_WORD *)&unsigned char buf[12] = 2080;
                    *(void *)&buf[14] = "SetProperty";
                    *(_WORD *)&buf[22] = 1024;
                    *(_DWORD *)&buf[24] = v67;
                    *(_WORD *)&buf[28] = 1024;
                    *(_DWORD *)&buf[30] = v18;
                    *(_WORD *)&buf[34] = 2080;
                    *(void *)&buf[36] = v72;
                    _os_log_error_impl(&dword_1BB0CE000, v68, OS_LOG_TYPE_ERROR, "[%s|%s] error %d setting output scope property %u on %s", buf, 0x2Cu);
                  }
                }
                ++v61;
              }
              while (v61 != v62);
              uint64_t v38 = 4294956417;
              unsigned int v35 = inElement;
            }
          }
        }
LABEL_305:
        if (v18 == 5000) {
          return v38;
        }
        uint64_t v15 = v38;
        if (v38 != -10879) {
          return v15;
        }
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        unint64_t v111 = (id)getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled(v111, OS_LOG_TYPE_ERROR))
        {
          float v236 = (void *)((char *)this + 3368);
          if (*((char *)this + 3391) < 0) {
            float v236 = (void *)*v236;
          }
          *(_DWORD *)std::string buf = 136316162;
          *(void *)&uint8_t buf[4] = v236;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "SetProperty";
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)&buf[24] = v22;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = v35;
          *(_WORD *)&buf[34] = 1024;
          *(_DWORD *)&buf[36] = v18;
          _os_log_error_impl(&dword_1BB0CE000, v111, OS_LOG_TYPE_ERROR, "[%s|%s] (scope=%u, element=%u): invalid property ID %u", buf, 0x28u);
        }

        return 4294956417;
      }
      if ((int)v18 <= 5000)
      {
        if ((int)v18 > 3293)
        {
          if (v18 == 3294)
          {
            if (v22)
            {
              if (getAUSMV2Log(void)::onceToken != -1) {
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
              }
              float v14 = (id)getAUSMV2Log(void)::gLog;
              if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
              {
                unint64_t v285 = (void *)((char *)this + 3368);
                if (*((char *)this + 3391) < 0) {
                  unint64_t v285 = (void *)*v285;
                }
                *(_DWORD *)std::string buf = 136315906;
                *(void *)&uint8_t buf[4] = v285;
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = "SetProperty";
                *(_WORD *)&buf[22] = 1024;
                *(_DWORD *)&buf[24] = v22;
                *(_WORD *)&buf[28] = 1024;
                *(_DWORD *)&buf[30] = 3294;
                _os_log_debug_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitScope scope = %u for global scope property = %u", buf, 0x22u);
              }
              goto LABEL_9;
            }
            if (a6 == 16)
            {
              caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 3088);
              *(_OWORD *)&v354.__r_.__value_.__l.__data_ = *(_OWORD *)a5;
              *(void *)std::string buf = &v354;
              *(void *)&buf[8] = 4;
              v353.__r_.__value_.__r.__words[0] = (std::string::size_type)applesauce::CF::details::make_CFArrayRef<unsigned int>((uint64_t)buf);
              *(void *)std::string buf = v353.__r_.__value_.__r.__words[0];
              (*(void (**)(AUSpatialMixerV2 *, uint64_t, void, void, unsigned char *, uint64_t))(*(void *)this + 96))(this, 3291, 0, inElement, buf, 8);
              applesauce::CF::ArrayRef::~ArrayRef((const void **)&v353.__r_.__value_.__l.__data_);
              caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock((uint64_t)this + 3088);
              return 0;
            }
          }
          else
          {
            if (v18 != 3295) {
              goto LABEL_305;
            }
            if (v22)
            {
              if (getAUSMV2Log(void)::onceToken != -1) {
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
              }
              float v14 = (id)getAUSMV2Log(void)::gLog;
              if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
              {
                unint64_t v283 = (void *)((char *)this + 3368);
                if (*((char *)this + 3391) < 0) {
                  unint64_t v283 = (void *)*v283;
                }
                *(_DWORD *)std::string buf = 136315906;
                *(void *)&uint8_t buf[4] = v283;
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = "SetProperty";
                *(_WORD *)&buf[22] = 1024;
                *(_DWORD *)&buf[24] = v22;
                *(_WORD *)&buf[28] = 1024;
                *(_DWORD *)&buf[30] = 3295;
                _os_log_debug_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitScope scope = %u for global scope property = %u", buf, 0x22u);
              }
              goto LABEL_9;
            }
            if (a6 == 16)
            {
              caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 3088);
              *(_OWORD *)&v354.__r_.__value_.__l.__data_ = *(_OWORD *)a5;
              *(void *)std::string buf = &v354;
              *(void *)&buf[8] = 4;
              v353.__r_.__value_.__r.__words[0] = (std::string::size_type)applesauce::CF::details::make_CFArrayRef<float>((uint64_t)buf);
              *(void *)std::string buf = v353.__r_.__value_.__r.__words[0];
              (*(void (**)(AUSpatialMixerV2 *, uint64_t, void, void, unsigned char *, uint64_t))(*(void *)this + 96))(this, 3292, 0, inElement, buf, 8);
              applesauce::CF::ArrayRef::~ArrayRef((const void **)&v353.__r_.__value_.__l.__data_);
              caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock((uint64_t)this + 3088);
              return 0;
            }
          }
        }
        else
        {
          if (v18 == 3270)
          {
            if (!v22) {
              return 4294956431;
            }
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            float v14 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
            {
              v284 = (void *)((char *)this + 3368);
              if (*((char *)this + 3391) < 0) {
                v284 = (void *)*v284;
              }
              *(_DWORD *)std::string buf = 136315906;
              *(void *)&uint8_t buf[4] = v284;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = "SetProperty";
              *(_WORD *)&buf[22] = 1024;
              *(_DWORD *)&buf[24] = v22;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = 3270;
              _os_log_debug_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitScope scope = %u for global scope property = %u", buf, 0x22u);
            }
            goto LABEL_9;
          }
          if (v18 != 3293) {
            goto LABEL_305;
          }
          if (v22)
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            float v14 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
            {
              unsigned int v282 = (void *)((char *)this + 3368);
              if (*((char *)this + 3391) < 0) {
                unsigned int v282 = (void *)*v282;
              }
              *(_DWORD *)std::string buf = 136315906;
              *(void *)&uint8_t buf[4] = v282;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = "SetProperty";
              *(_WORD *)&buf[22] = 1024;
              *(_DWORD *)&buf[24] = v22;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = 3293;
              _os_log_debug_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitScope scope = %u for global scope property = %u", buf, 0x22u);
            }
            goto LABEL_9;
          }
          if (a6 == 16)
          {
            caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 3088);
            *(_OWORD *)&v354.__r_.__value_.__l.__data_ = *(_OWORD *)a5;
            *(void *)std::string buf = &v354;
            *(void *)&buf[8] = 4;
            v353.__r_.__value_.__r.__words[0] = (std::string::size_type)applesauce::CF::details::make_CFArrayRef<float>((uint64_t)buf);
            *(void *)std::string buf = v353.__r_.__value_.__r.__words[0];
            (*(void (**)(AUSpatialMixerV2 *, uint64_t, void, void, unsigned char *, uint64_t))(*(void *)this
                                                                                                  + 96))(this, 3290, 0, inElement, buf, 8);
            applesauce::CF::ArrayRef::~ArrayRef((const void **)&v353.__r_.__value_.__l.__data_);
            caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock((uint64_t)this + 3088);
            return 0;
          }
        }
        return 4294956445;
      }
      uint64_t v15 = 4294956431;
      switch((int)v18)
      {
        case 5001:
        case 5011:
          return v15;
        case 5002:
          if (v22 >= 2)
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            float v14 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v298 = (void *)((char *)this + 3368);
              if (*((char *)this + 3391) < 0) {
                uint64_t v298 = (void *)*v298;
              }
              *(_DWORD *)std::string buf = 136315906;
              *(void *)&uint8_t buf[4] = v298;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = "SetProperty";
              *(_WORD *)&buf[22] = 1024;
              *(_DWORD *)&buf[24] = v22;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = 5002;
              _os_log_debug_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitScope scope = %u for property = %u", buf, 0x22u);
            }
            goto LABEL_9;
          }
          char v115 = (char *)this;
          if (v22 != 1)
          {
            if (a6 == 8)
            {
              id v228 = *(id *)a5;
              for (unsigned int j = 0; [v228 count] > (unint64_t)j; ++j)
              {
                *(_OWORD *)std::string buf = xmmword_1BB875830;
                *(void *)&buf[16] = 0;
                *(void *)&buf[24] = 0xFFFFFFFF00000001;
                float v230 = [v228 objectAtIndexedSubscript:j];
                [v230 getBytes:buf length:32];

                float v231 = std::__tree<std::__value_type<unsigned int,AUSMChannelParameters>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,AUSMChannelParameters>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,AUSMChannelParameters>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)this + 379, *(unsigned int *)&buf[28], &buf[28]);
                char v115 = (char *)this;
                long long v232 = *(_OWORD *)&buf[16];
                *((_OWORD *)v231 + 2) = *(_OWORD *)buf;
                *((_OWORD *)v231 + 3) = v232;
              }
              AUSpatialMixerV2::UpdateTuningWarper((AUSpatialMixerV2 *)v115);

              return 0;
            }
            goto LABEL_582;
          }
          uint64_t v116 = *((void *)this + 15);
          if (v116)
          {
            LODWORD(v117) = (*(uint64_t (**)(uint64_t))(*(void *)v116 + 24))(v116);
            unsigned int v35 = inElement;
            char v115 = (char *)this;
          }
          else
          {
            uint64_t v117 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
          }
          if (v35 < v117)
          {
            if (a6 == 8)
            {
              uint64_t v249 = (uint64_t)(v115 + 3088);
              caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)(v115 + 3088));
              uint64_t v250 = *((void *)this + 15);
              if (v250) {
                LODWORD(v251) = (*(uint64_t (**)(uint64_t))(*(void *)v250 + 24))(v250);
              }
              else {
                uint64_t v251 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
              }
              if (inElement >= v251)
              {
                uint64_t v15 = 4294956419;
                int v314 = 1;
              }
              else
              {
                id v303 = *(id *)a5;
                int v304 = [v303 count];
                v305 = (AUSpatialMixerV2InputElement *)ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 80), inElement);
                if (*((_DWORD *)v305 + 27) == v304)
                {
                  unsigned __int8 v306 = atomic_load((unsigned __int8 *)this + 3523);
                  if (v306)
                  {
                    AUSpatialMixerV2InputElement::GetChannelParameters((AUSpatialMixerV2InputElement *)&v354, (uint64_t)v305);
                    unsigned int v307 = 0;
                    long long v308 = *(_OWORD *)&v354.__r_.__value_.__l.__data_;
                    unint64_t v309 = (uint64_t)(v354.__r_.__value_.__l.__size_ - v354.__r_.__value_.__r.__words[0]) >> 5;
                    while ([v303 count] > (unint64_t)v307)
                    {
                      *(_OWORD *)std::string buf = xmmword_1BB875830;
                      *(void *)&buf[16] = 0;
                      *(void *)&buf[24] = 0xFFFFFFFF00000001;
                      uint64_t v310 = [v303 objectAtIndexedSubscript:v307];
                      [v310 getBytes:buf length:32];

                      if (*((void *)&v308 + 1) != (void)v308)
                      {
                        uint64_t v311 = 0;
                        unsigned int v312 = 1;
                        while (*(_DWORD *)(v308 + 32 * v311 + 28) != *(_DWORD *)&buf[28])
                        {
                          uint64_t v311 = v312;
                          if (v309 <= v312++) {
                            goto LABEL_761;
                          }
                        }
                        AUSpatialMixerV2InputElement::SetEnableForChannel(v305, *(_DWORD *)&buf[24] != 0, v307);
                      }
LABEL_761:
                      ++v307;
                    }
                    if ((void)v308) {
                      operator delete((void *)v308);
                    }
                  }
                  int v314 = 0;
                }
                else
                {
                  int v314 = 1;
                }

                uint64_t v15 = 4294956445;
              }
              caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(v249);
              if (v314) {
                return v15;
              }
              return 0;
            }
LABEL_582:
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            float v235 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v235, OS_LOG_TYPE_ERROR))
            {
              int v321 = v115 + 3368;
              if (v115[3391] < 0) {
                int v321 = (void *)*v321;
              }
              *(_DWORD *)std::string buf = 136316162;
              *(void *)&uint8_t buf[4] = v321;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = "SetProperty";
              *(_WORD *)&buf[22] = 1024;
              *(_DWORD *)&buf[24] = a6;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = 5002;
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = 8;
              _os_log_error_impl(&dword_1BB0CE000, v235, OS_LOG_TYPE_ERROR, "[%s|%s] invalid data std::string::size_type size = %u for property = %u, expected %u", buf, 0x28u);
            }
            goto LABEL_585;
          }
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          __int16 v28 = (id)getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
          {
            int v325 = v115 + 3368;
            if (v115[3391] < 0) {
              int v325 = (void *)*v325;
            }
            *(_DWORD *)std::string buf = 136315906;
            *(void *)&uint8_t buf[4] = v325;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "SetProperty";
            *(_WORD *)&buf[22] = 1024;
            *(_DWORD *)&buf[24] = inElement;
            *(_WORD *)&buf[28] = 1024;
            *(_DWORD *)&buf[30] = 5002;
            _os_log_debug_impl(&dword_1BB0CE000, v28, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitElement element = %u for input scope property = %u", buf, 0x22u);
          }
          goto LABEL_643;
        case 5003:
        case 5007:
        case 5008:
        case 5009:
        case 5010:
          goto LABEL_305;
        case 5004:
        case 5005:
        case 5006:
          if (*v12) {
            return 0;
          }
          if (v22)
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            float v14 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v281 = (void *)((char *)this + 3368);
              if (*((char *)this + 3391) < 0) {
                uint64_t v281 = (void *)*v281;
              }
              *(_DWORD *)std::string buf = 136315906;
              *(void *)&uint8_t buf[4] = v281;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = "SetProperty";
              *(_WORD *)&buf[22] = 1024;
              *(_DWORD *)&buf[24] = v22;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = v18;
              _os_log_debug_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitScope scope = %u for global scope property = %u", buf, 0x22u);
            }
            goto LABEL_9;
          }
          if (a6 != 8)
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            float v235 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v235, OS_LOG_TYPE_ERROR))
            {
              uint64_t v320 = (void *)((char *)this + 3368);
              if (*((char *)this + 3391) < 0) {
                uint64_t v320 = (void *)*v320;
              }
              *(_DWORD *)std::string buf = 136316162;
              *(void *)&uint8_t buf[4] = v320;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = "SetProperty";
              *(_WORD *)&buf[22] = 1024;
              *(_DWORD *)&buf[24] = a6;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = v18;
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = 8;
              _os_log_error_impl(&dword_1BB0CE000, v235, OS_LOG_TYPE_ERROR, "[%s|%s] invalid data std::string::size_type size = %u for property = %u, expected %u", buf, 0x28u);
            }
LABEL_585:

            return 4294956445;
          }
          caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 3088);
          id v124 = *(id *)a5;
          unint64_t v125 = [v124 count];
          if (!v125) {
            goto LABEL_704;
          }
          std::vector<AUSMChannelParameters>::vector(buf, v125);
          uint64_t v126 = 0;
          for (uint64_t k = 0; k != v125; ++k)
          {
            uint64_t v128 = [v124 objectAtIndexedSubscript:k];
            [v128 getBytes:*(void *)buf + v126 length:32];

            v126 += 32;
          }
          memset(&v354, 0, sizeof(v354));
          float v129 = 0.0;
          switch(v18)
          {
            case 0x138C:
              applesauce::CF::StringRef::from_get((applesauce::CF::StringRef *)&theArray, @"AUSMSoundStageLargeParameters");
              int v288 = (const __CFString **)applesauce::CF::StringRef::operator->(&theArray);
              applesauce::CF::convert_to<std::string,0>(*v288, (uint64_t)&v353);
              std::string v354 = v353;
              *((unsigned char *)&v353.__r_.__value_.__s + 23) = 0;
              v353.__r_.__value_.__s.__data_[0] = 0;
              applesauce::CF::StringRef::~StringRef((const void **)&theArray);
              break;
            case 0x138D:
              applesauce::CF::StringRef::from_get((applesauce::CF::StringRef *)&theArray, @"AUSMSoundStageMediumParameters");
              int v289 = (const __CFString **)applesauce::CF::StringRef::operator->(&theArray);
              applesauce::CF::convert_to<std::string,0>(*v289, (uint64_t)&v353);
              std::string v354 = v353;
              *((unsigned char *)&v353.__r_.__value_.__s + 23) = 0;
              v353.__r_.__value_.__s.__data_[0] = 0;
              applesauce::CF::StringRef::~StringRef((const void **)&theArray);
              int v131 = 2;
              goto LABEL_698;
            case 0x138E:
              applesauce::CF::StringRef::from_get((applesauce::CF::StringRef *)&theArray, @"AUSMSoundStageSmallParameters");
              unsigned int v130 = (const __CFString **)applesauce::CF::StringRef::operator->(&theArray);
              applesauce::CF::convert_to<std::string,0>(*v130, (uint64_t)&v353);
              std::string v354 = v353;
              *((unsigned char *)&v353.__r_.__value_.__s + 23) = 0;
              v353.__r_.__value_.__s.__data_[0] = 0;
              applesauce::CF::StringRef::~StringRef((const void **)&theArray);
              int v131 = 1;
              float v129 = 1.0;
LABEL_698:
              *(_OWORD *)&v353.__r_.__value_.__l.__data_ = xmmword_1BB873CD0;
              LODWORD(v353.__r_.__value_.__r.__words[2]) = 1065353216;
              if (AUSM::SoundStage::setSoundStageParameters((uint64_t)this + 7808, v131, buf, &v354, (uint64_t)&v353, 1.0, v129))
              {
                v12[2032] = 1;
                atomic_store(1u, v12 + 2925);
              }
              if (SHIBYTE(v354.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v354.__r_.__value_.__l.__data_);
              }
              if (*(void *)buf)
              {
                *(void *)&buf[8] = *(void *)buf;
                operator delete(*(void **)buf);
              }
LABEL_704:

              caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock((uint64_t)this + 3088);
              return 0;
          }
          int v131 = 3;
          goto LABEL_698;
        default:
          if (v18 == 5677) {
            return v15;
          }
          if (v18 != 5683) {
            goto LABEL_305;
          }
          if (!v22) {
            return v15;
          }
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          float v14 = (id)getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
          {
            int v287 = (void *)((char *)this + 3368);
            if (*((char *)this + 3391) < 0) {
              int v287 = (void *)*v287;
            }
            *(_DWORD *)std::string buf = 136315906;
            *(void *)&uint8_t buf[4] = v287;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "SetProperty";
            *(_WORD *)&buf[22] = 1024;
            *(_DWORD *)&buf[24] = v22;
            *(_WORD *)&buf[28] = 1024;
            *(_DWORD *)&buf[30] = 5683;
            _os_log_debug_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitScope scope = %u for global scope property = %u", buf, 0x22u);
          }
          goto LABEL_9;
      }
    }
    BOOL v25 = 1;
    if (v18 != 3000)
    {
      if (v18 == 3242)
      {
        LODWORD(v354.__r_.__value_.__l.__data_) = 0;
        *(void *)std::string buf = (char *)this + 3120;
        buf[8] = 1;
        std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)((char *)this + 3120));
        __int16 v26 = (AUSM::Properties *)(ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 80), inElement)
                                 + 672);
        unsigned int v27 = 3242;
        goto LABEL_69;
      }
      if (v18 != 3005)
      {
LABEL_72:
        v354.__r_.__value_.__r.__words[0] = (std::string::size_type)this + 3120;
        v354.__r_.__value_.__s.__data_[8] = 1;
        std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)((char *)this + 3120));
        unsigned int v35 = inElement;
        int CanUsePersonalizedHRTF = AUSpatialMixerV2::CanUsePersonalizedHRTF(this);
        uint64_t v40 = *((void *)this + 15);
        if (v40) {
          LODWORD(v41) = (*(uint64_t (**)(uint64_t))(*(void *)v40 + 24))(v40);
        }
        else {
          uint64_t v41 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
        }
        if (inElement >= v41)
        {
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          float32x2_t v46 = (id)getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
          {
            __int16 v82 = (void *)((char *)this + 3368);
            if (*((char *)this + 3391) < 0) {
              __int16 v82 = (void *)*v82;
            }
            *(_DWORD *)std::string buf = 136316162;
            *(void *)&uint8_t buf[4] = v82;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "SetProperty";
            *(_WORD *)&buf[22] = 1024;
            *(_DWORD *)&buf[24] = 1;
            *(_WORD *)&buf[28] = 1024;
            *(_DWORD *)&buf[30] = inElement;
            *(_WORD *)&buf[34] = 1024;
            *(_DWORD *)&buf[36] = v18;
            _os_log_error_impl(&dword_1BB0CE000, v46, OS_LOG_TYPE_ERROR, "[%s|%s] (scope=%u, element=%u): invalid element (property = %u)", buf, 0x28u);
          }

          std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v354);
          return 4294956419;
        }
        uint64_t v42 = ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 80), inElement);
        uint64_t v15 = AUSM::Properties::setProperty((AUSM::Properties *)(v42 + 672), v18, (CFTypeRef *)a5, a6, v17);
        int v43 = AUSpatialMixerV2::CanUsePersonalizedHRTF(this);
        std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v354);
        if (v15) {
          BOOL v44 = 0;
        }
        else {
          BOOL v44 = v25;
        }
        if (v44)
        {
          if (v18 == 3000 || v18 == 3005)
          {
            unsigned __int32 v45 = this;
            if (CanUsePersonalizedHRTF != v43)
            {
              (*(void (**)(AUSpatialMixerV2 *, uint64_t))(*(void *)this + 592))(this, 3113);
              unsigned int v35 = inElement;
              unsigned __int32 v45 = this;
            }
          }
          else
          {
            unsigned __int32 v45 = this;
            if (v18 != 3242) {
              return 0;
            }
          }
          AUSpatialMixerV2::UpdateReverbIfNecessary((uint64_t)v45, v35, 0, 0);
          return 0;
        }
        goto LABEL_45;
      }
    }
    LODWORD(v354.__r_.__value_.__l.__data_) = 0;
    *(void *)std::string buf = (char *)this + 3120;
    buf[8] = 1;
    std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)((char *)this + 3120));
    __int16 v26 = (AUSM::Properties *)(ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 80), inElement) + 672);
    unsigned int v27 = v18;
LABEL_69:
    if (!AUSM::Properties::getProperty(v26, v27, &v354)) {
      BOOL v25 = *a5 != LODWORD(v354.__r_.__value_.__l.__data_);
    }
    std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)buf);
    goto LABEL_72;
  }
  if (a3 > 1)
  {
    AudioUnitScope v13 = a3;
    goto LABEL_15;
  }
  if (a2 == 3231 && a3)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    float v14 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      unsigned __int8 v81 = (void *)((char *)this + 3368);
      if (*((char *)this + 3391) < 0) {
        unsigned __int8 v81 = (void *)*v81;
      }
      *(_DWORD *)std::string buf = 136315906;
      *(void *)&uint8_t buf[4] = v81;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "SetProperty";
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&buf[24] = 1;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = 3231;
      _os_log_debug_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitScope scope = %u for global scope property = %u", buf, 0x22u);
    }
LABEL_9:

    return 4294956430;
  }
  LODWORD(theArray) = a2;
  inElementa = (char *)this + 5968;
  if (!*((unsigned char *)this + 6032))
  {
LABEL_296:
    AudioUnitScope v13 = a3;
    goto LABEL_15;
  }
  int v29 = (AUSpatialMixerV2 *)((char *)this + 6000);
  uint64_t v30 = *(void *)(*((void *)this + 750) + 544);
  if (v30)
  {
    unsigned __int8 v31 = atomic_load((unsigned __int8 *)(v30 + 97));
    if (v31)
    {
      int v33 = 1;
    }
    else
    {
      unsigned __int8 v32 = atomic_load((unsigned __int8 *)(*(void *)(*(void *)v29 + 544) + 96));
      int v33 = v32 & 1;
    }
  }
  else
  {
    int v33 = 0;
  }
  if (!a4 && a3 == 1 && v33 && theArray != 5000)
  {
    if (std::__hash_table<vp::vx::io::Object_ID<vp::vx::io::Node>,std::hash<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::equal_to<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::allocator<vp::vx::io::Object_ID<vp::vx::io::Node>>>::find<vp::vx::io::Object_ID<vp::vx::io::Node>>((void *)this + 760, (unsigned int *)&theArray))
    {
      uint64_t v15 = 0;
      for (uint64_t m = 1; ; uint64_t m = (m + 1))
      {
        uint64_t v49 = *(void *)(*(void *)v29 + 120);
        if (v49) {
          LODWORD(v50) = (*(uint64_t (**)(uint64_t))(*(void *)v49 + 24))(v49);
        }
        else {
          uint64_t v50 = (*(void *)(*(void *)v29 + 104) - *(void *)(*(void *)v29 + 96)) >> 3;
        }
        if (m >= v50) {
          break;
        }
        uint64_t v51 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, int *, uint64_t))(**(void **)v29 + 96))(*(void *)v29, theArray, 1, m, a5, a6);
        if (v51)
        {
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          AudioUnitParameterID v52 = (id)getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
          {
            AudioUnitScope v53 = (char *)this + 6008;
            if (inElementa[63] < 0) {
              AudioUnitScope v53 = (char *)*((void *)this + 751);
            }
            *(_DWORD *)std::string buf = 136316162;
            *(void *)&uint8_t buf[4] = v53;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "ValidateProperty";
            *(_WORD *)&buf[22] = 1024;
            *(_DWORD *)&buf[24] = v51;
            *(_WORD *)&buf[28] = 1024;
            *(_DWORD *)&buf[30] = theArray;
            *(_WORD *)&buf[34] = 1024;
            *(_DWORD *)&buf[36] = m;
            _os_log_error_impl(&dword_1BB0CE000, v52, OS_LOG_TYPE_ERROR, "[%s|%s] Error %d setting property %u to element %u", buf, 0x28u);
          }

          uint64_t v15 = v51;
        }
      }
      return v15;
    }
    return 0;
  }
  if (a3) {
    uint64_t v54 = 2001;
  }
  else {
    uint64_t v54 = 2000;
  }
  if ((int)theArray > 3266)
  {
    if (theArray == 3267)
    {
      if (!a3)
      {
        int v98 = *a5;
        unsigned __int8 v99 = atomic_load((unsigned __int8 *)(*(void *)v29 + 3446));
        if (v98 != (v99 & 1))
        {
          if (*((_DWORD *)this + 1540) != v98)
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            __int16 v100 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT))
            {
              int v101 = (void *)((char *)this + 6008);
              if ((char)v12[63] < 0) {
                int v101 = (void *)*v101;
              }
              *(_DWORD *)std::string buf = 136315650;
              *(void *)&uint8_t buf[4] = v101;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = "ValidateProperty";
              *(_WORD *)&buf[22] = 1024;
              *(_DWORD *)&buf[24] = v98;
              _os_log_impl(&dword_1BB0CE000, v100, OS_LOG_TYPE_DEFAULT, "[%s|%s] Storing post-processing reverb = %u", buf, 0x1Cu);
            }

            *((_DWORD *)this + 1540) = v98;
          }
          int v102 = atomic_load((unsigned int *)(*(void *)v29 + 5844));
          if (v102 != 1)
          {
            uint64_t v15 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, int *, uint64_t))(**(void **)v29 + 96))(*(void *)v29, theArray, v54, a4, a5, a6);
            AUSM::TuningManager::SetPostProceReverbBlend(v29, v102, 0xFFFFFFFFLL);
            return v15;
          }
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          uint64_t v103 = (id)getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
          {
            unsigned int v104 = (void *)((char *)this + 6008);
            if ((char)v12[63] < 0) {
              unsigned int v104 = (void *)*v104;
            }
            int v105 = (int)theArray;
            unsigned __int8 v106 = atomic_load((unsigned __int8 *)(*(void *)v29 + 3446));
            *(_DWORD *)std::string buf = 136316162;
            *(void *)&uint8_t buf[4] = v104;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "ValidateProperty";
            *(_WORD *)&buf[22] = 1024;
            *(_DWORD *)&buf[24] = v105;
            *(_WORD *)&buf[28] = 1024;
            *(_DWORD *)&buf[30] = 1;
            *(_WORD *)&buf[34] = 1024;
            *(_DWORD *)&buf[36] = v106 & 1;
            _os_log_impl(&dword_1BB0CE000, v103, OS_LOG_TYPE_DEFAULT, "[%s|%s] Property %u ignored with global sound stage = %u. Post-processing reverb = %u (not changed).", buf, 0x28u);
          }

          return 0;
        }
      }
      goto LABEL_296;
    }
    if (theArray != 3279)
    {
      if (theArray == 5000)
      {
        uint64_t v57 = *(void *)(*(void *)v29 + 544);
        if (v57)
        {
          unsigned __int8 v58 = atomic_load((unsigned __int8 *)(v57 + 97));
          if (v58)
          {
            int v60 = 1;
          }
          else
          {
            unsigned __int8 v59 = atomic_load((unsigned __int8 *)(*(void *)(*(void *)v29 + 544) + 96));
            int v60 = v59 & 1;
          }
          if (a3 && v60)
          {
            BOOL v190 = a4 == 0;
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            float v191 = (id)getAUSMV2Log(void)::gLog;
            BOOL v192 = os_log_type_enabled(v191, OS_LOG_TYPE_DEFAULT);
            if (v190)
            {
              if (v192)
              {
                float v193 = (void *)((char *)this + 6008);
                if ((char)v12[63] < 0) {
                  float v193 = (void *)*v193;
                }
                *(_DWORD *)std::string buf = 136315394;
                *(void *)&uint8_t buf[4] = v193;
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = "ValidateProperty";
                _os_log_impl(&dword_1BB0CE000, v191, OS_LOG_TYPE_DEFAULT, "[%s|%s] InputProperties for Element#0 in the property dictionary are being selectively applied to all APAC buses.", buf, 0x16u);
              }

              *(void *)std::string buf = [&unk_1F14EBBC8 stringValue];
              *(void *)&buf[8] = [&unk_1F14EBBE0 stringValue];
              id v194 = *(id *)a5;
              uint64_t v195 = *(void *)(*(void *)v29 + 120);
              if (v195) {
                LODWORD(v196) = (*(uint64_t (**)(uint64_t))(*(void *)v195 + 24))(v195);
              }
              else {
                uint64_t v196 = (*(void *)(*(void *)v29 + 104) - *(void *)(*(void *)v29 + 96)) >> 3;
              }
              char v273 = 0;
              uint64_t v274 = 1;
              unsigned int v275 = (id *)buf;
              do
              {
                char v276 = v273;
                int v277 = [v194 objectForKey:*v275];
                if (v277) {
                  BOOL v278 = v196 >= 2;
                }
                else {
                  BOOL v278 = 0;
                }
                if (v278)
                {
                  uint64_t v279 = 1;
                  do
                  {
                    AUSM::TuningManager::SetPropertyFromNSObject(v29, 1, v279, [*v275 intValue], v277);
                    uint64_t v279 = (v279 + 1);
                  }
                  while (v196 != v279);
                }

                unsigned int v275 = (id *)&buf[8 * v274];
                char v273 = 1;
                uint64_t v274 = 2;
              }
              while ((v276 & 1) == 0);

              for (uint64_t n = 8; n != -8; n -= 8)
            }
            else
            {
              if (v192)
              {
                float v241 = (void *)((char *)this + 6008);
                if ((char)v12[63] < 0) {
                  float v241 = (void *)*v241;
                }
                *(_DWORD *)std::string buf = 136315906;
                *(void *)&uint8_t buf[4] = v241;
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = "ValidateProperty";
                *(_WORD *)&buf[22] = 1024;
                *(_DWORD *)&buf[24] = 1;
                *(_WORD *)&buf[28] = 1024;
                *(_DWORD *)&buf[30] = a4;
                _os_log_impl(&dword_1BB0CE000, v191, OS_LOG_TYPE_DEFAULT, "[%s|%s] Properties with scope = %u and AudioUnitElement element = %u in the property dictionary are ignored with APAC.", buf, 0x22u);
              }
            }
            return 0;
          }
        }
        v353.__r_.__value_.__r.__words[0] = [*(id *)a5 mutableCopy];
        uint64_t v197 = *(void *)(*(void *)v29 + 544);
        float v198 = this;
        if (v197)
        {
          unsigned __int8 v199 = atomic_load((unsigned __int8 *)(v197 + 97));
          if ((v199 & 1) != 0
            || (unsigned __int8 v200 = atomic_load((unsigned __int8 *)(*(void *)(*(void *)v29 + 544) + 96)), (v200 & 1) != 0))
          {
            for (iuint64_t i = (uint64_t *)*((void *)this + 757); ii; iuint64_t i = (uint64_t *)*ii)
            {
              if (*((unsigned char *)ii + 20))
              {
                float v202 = [NSNumber numberWithUnsignedInt:*((unsigned int *)ii + 4)];
                float v203 = [v202 stringValue];

                float v204 = (void *)v353.__r_.__value_.__r.__words[0];
                float v205 = [v353.__r_.__value_.__l.__data_ objectForKey:v203];
                BOOL v206 = v205 == 0;

                if (!v206)
                {
                  [v204 removeObjectForKey:v203];
                  if (getAUSMV2Log(void)::onceToken != -1) {
                    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                  }
                  float v207 = (id)getAUSMV2Log(void)::gLog;
                  if (os_log_type_enabled(v207, OS_LOG_TYPE_DEFAULT))
                  {
                    float v208 = (char *)this + 6008;
                    if (inElementa[63] < 0) {
                      float v208 = (char *)*((void *)this + 751);
                    }
                    *(_DWORD *)std::string buf = 136315650;
                    *(void *)&uint8_t buf[4] = v208;
                    *(_WORD *)&unsigned char buf[12] = 2080;
                    *(void *)&buf[14] = "ValidateProperty";
                    *(_WORD *)&buf[22] = 2112;
                    *(void *)&buf[24] = v203;
                    _os_log_impl(&dword_1BB0CE000, v207, OS_LOG_TYPE_DEFAULT, "[%s|%s] Global property %@ in the property dictionary is a reserved APAC property, hence ignored.", buf, 0x20u);
                  }
                }
                float v198 = this;
              }
            }
          }
        }
        if (!a3)
        {
          v354.__r_.__value_.__r.__words[0] = [&unk_1F14EBBF8 stringValue];
          v354.__r_.__value_.__l.__size_ = [&unk_1F14EBC10 stringValue];
          [&unk_1F14EBC28 stringValue];
          v354.__r_.__value_.__r.__words[2] = uint64_t v209 = 0;
          uint64_t v338 = (char **)((char *)v198 + 6008);
          float v210 = (void *)v353.__r_.__value_.__r.__words[0];
          *(void *)&long long v211 = 136315650;
          long long v333 = v211;
          do
          {
            objc_msgSend(v210, "objectForKey:", v354.__r_.__value_.__r.__words[v209], v333);
            unsigned int v212 = (objc_object *)objc_claimAutoreleasedReturnValue();
            if (v212)
            {
              int v213 = AUSM::TuningManager::SetPropertyFromNSObject(v29, 0, 0, [*(id *)((char *)&v354.__r_.__value_.__l.__data_ + v209 * 8) intValue], v212);
              if (v213)
              {
                if (getAUSMV2Log(void)::onceToken != -1) {
                  dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                }
                uint64_t v214 = (id)getAUSMV2Log(void)::gLog;
                if (os_log_type_enabled(v214, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v215 = (char *)v198 + 6008;
                  if (inElementa[63] < 0) {
                    uint64_t v215 = *v338;
                  }
                  uint64_t v216 = *(uint64_t *)((char *)&v354.__r_.__value_.__l.__data_ + v209 * 8);
                  *(_DWORD *)std::string buf = 136315906;
                  *(void *)&uint8_t buf[4] = v215;
                  *(_WORD *)&unsigned char buf[12] = 2080;
                  *(void *)&buf[14] = "ValidateProperty";
                  *(_WORD *)&buf[22] = 2112;
                  *(void *)&buf[24] = v216;
                  *(_WORD *)&buf[32] = 1024;
                  *(_DWORD *)&buf[34] = v213;
                  _os_log_impl(&dword_1BB0CE000, v214, OS_LOG_TYPE_DEFAULT, "[%s|%s] Could not set global property %@ from the property dictionary. Error %u", buf, 0x26u);
                }
              }
              else
              {
                if (getAUSMV2Log(void)::onceToken != -1) {
                  dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                }
                uint64_t v214 = (id)getAUSMV2Log(void)::gLog;
                if (os_log_type_enabled(v214, OS_LOG_TYPE_DEBUG))
                {
                  unsigned int v217 = (char *)v198 + 6008;
                  if (inElementa[63] < 0) {
                    unsigned int v217 = *v338;
                  }
                  uint64_t v218 = *(uint64_t *)((char *)&v354.__r_.__value_.__l.__data_ + v209 * 8);
                  *(_DWORD *)std::string buf = v333;
                  *(void *)&uint8_t buf[4] = v217;
                  *(_WORD *)&unsigned char buf[12] = 2080;
                  *(void *)&buf[14] = "ValidateProperty";
                  *(_WORD *)&buf[22] = 2112;
                  *(void *)&buf[24] = v218;
                  _os_log_debug_impl(&dword_1BB0CE000, v214, OS_LOG_TYPE_DEBUG, "[%s|%s] Global property %@ in the property dictionary is applied separately.", buf, 0x20u);
                }
              }

              float v210 = (void *)v353.__r_.__value_.__r.__words[0];
              [v353.__r_.__value_.__l.__data_ removeObjectForKey:v354.__r_.__value_.__r.__words[v209]];
            }

            ++v209;
          }
          while (v209 != 3);
          for (junsigned int j = 16; jj != -8; jj -= 8)
        }
        uint64_t v15 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, std::string *, uint64_t))(**(void **)v29
                                                                                                  + 96))(*(void *)v29, theArray, v54, a4, &v353, a6);

        return v15;
      }
      goto LABEL_296;
    }
    uint64_t v107 = *(void *)(*(void *)v29 + 544);
    if (v107)
    {
      unsigned __int8 v108 = atomic_load((unsigned __int8 *)(v107 + 97));
      if (v108)
      {
        int v110 = 1;
      }
      else
      {
        unsigned __int8 v109 = atomic_load((unsigned __int8 *)(*(void *)(*(void *)v29 + 544) + 96));
        int v110 = v109 & 1;
      }
      if (!a3 && v110)
      {
        AUSM::AppleSauceCFWithMutex<__CFDictionary const*>::load(&v354, *(void *)v29 + 5480);
        if (!v354.__r_.__value_.__r.__words[0])
        {
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          float v248 = (id)getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled(v248, OS_LOG_TYPE_ERROR))
          {
            unsigned int v328 = (void *)((char *)this + 6008);
            if ((char)v12[63] < 0) {
              unsigned int v328 = (void *)*v328;
            }
            *(_DWORD *)std::string buf = 136315394;
            *(void *)&uint8_t buf[4] = v328;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "ValidateProperty";
            _os_log_error_impl(&dword_1BB0CE000, v248, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData did not set optional feature dictionary.", buf, 0x16u);
          }

          applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&v354.__r_.__value_.__l.__data_);
          goto LABEL_296;
        }
        applesauce::CF::DictionaryRef::from_get((applesauce::CF::DictionaryRef *)&v353, *(CFTypeRef *)a5);
        if (v353.__r_.__value_.__r.__words[0])
        {
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          float v219 = (id)getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled(v219, OS_LOG_TYPE_DEFAULT))
          {
            float v220 = (void *)((char *)this + 6008);
            if ((char)v12[63] < 0) {
              float v220 = (void *)*v220;
            }
            *(_DWORD *)std::string buf = 136315394;
            *(void *)&uint8_t buf[4] = v220;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "ValidateProperty";
            _os_log_impl(&dword_1BB0CE000, v219, OS_LOG_TYPE_DEFAULT, "[%s|%s] optional feature dictionary is being modified to ensure APAC features remain enabled.", buf, 0x16u);
          }

          MutableCopy = CFDictionaryCreateMutableCopy(0, 0, (CFDictionaryRef)v353.__r_.__value_.__l.__data_);
          *(void *)std::string buf = MutableCopy;
          float v222 = (const void *)*MEMORY[0x1E4F1CFD0];
          CFDictionarySetValue(MutableCopy, @"SourceExtent", (const void *)*MEMORY[0x1E4F1CFD0]);
          CFDictionarySetValue(MutableCopy, @"SourceDiffuse", v222);
          CFDictionarySetValue(MutableCopy, @"SourceDivergence", v222);
          CFDictionarySetValue(MutableCopy, @"SourceDirectivity", v222);
          CFDictionarySetValue(MutableCopy, @"NearFieldHOA", v222);
          CFDictionarySetValue(MutableCopy, @"NearFieldHRTF", v222);
          CFDictionarySetValue(MutableCopy, (const void *)kOptionalFeatureEnableAPACRoomPresets, v222);
          (*(void (**)(void, uint64_t, uint64_t, void, unsigned char *, uint64_t))(**(void **)v29 + 96))(*(void *)v29, 3279, 2000, 0, buf, 8);
          CFRelease(*(CFTypeRef *)buf);
        }
        else
        {
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          unsigned int v272 = (id)getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled(v272, OS_LOG_TYPE_ERROR))
          {
            unsigned __int8 v330 = (void *)((char *)this + 6008);
            if ((char)v12[63] < 0) {
              unsigned __int8 v330 = (void *)*v330;
            }
            *(_DWORD *)std::string buf = 136315394;
            *(void *)&uint8_t buf[4] = v330;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "ValidateProperty";
            _os_log_error_impl(&dword_1BB0CE000, v272, OS_LOG_TYPE_ERROR, "[%s|%s] invalid optional feature dictionary.", buf, 0x16u);
          }
        }
        applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&v353.__r_.__value_.__l.__data_);
        float v246 = &v354;
LABEL_658:
        applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&v246->__r_.__value_.__l.__data_);
        return 0;
      }
    }
    CFTypeRef v223 = *(CFTypeRef *)a5;
    if (*(void *)a5)
    {
      CFRetain(*(CFTypeRef *)a5);
      applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v354, v223);
      if (v354.__r_.__value_.__r.__words[0])
      {
        *(void *)std::string buf = v354.__r_.__value_.__r.__words[0];
        if (!(*(unsigned int (**)(void, uint64_t, uint64_t, void, unsigned char *, uint64_t))(**(void **)v29
                                                                                                 + 96))(*(void *)v29, 3279, 2000, 0, buf, 8))
        {
          float v224 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(&v354);
          unsigned int v226 = (unsigned __int16)applesauce::CF::details::find_at_key_or_optional<BOOL,__CFString const*&>(*v224, (const void *)kOptionalFeatureEnableAPACRoomPresets);
          if (v226 <= 0x100) {
            LOBYTE(v226) = 0;
          }
          if ((_BYTE)v226) {
            int v227 = 23;
          }
          else {
            int v227 = 12;
          }
          LODWORD(v353.__r_.__value_.__l.__data_) = v227;
          AUSM::Properties::setMaxValue((AUSM::Properties *)(*(void *)v29 + 3360), (uint64_t)&v353, v225);
        }
LABEL_510:
        if (v354.__r_.__value_.__r.__words[0]) {
          CFRelease(v354.__r_.__value_.__l.__data_);
        }
        return 0;
      }
    }
    else
    {
      v354.__r_.__value_.__r.__words[0] = 0;
    }
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    float v233 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v233, OS_LOG_TYPE_ERROR))
    {
      uint64_t v317 = (void *)((char *)this + 6008);
      if ((char)v12[63] < 0) {
        uint64_t v317 = (void *)*v317;
      }
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v317;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "ValidateProperty";
      _os_log_error_impl(&dword_1BB0CE000, v233, OS_LOG_TYPE_ERROR, "[%s|%s] invalid optional feature dictionary.", buf, 0x16u);
    }

    goto LABEL_510;
  }
  if (theArray == 3231)
  {
    uint64_t v15 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, int *, uint64_t))(**(void **)v29 + 96))(*(void *)v29, 3231, v54, a4, a5, a6);
    if (v15) {
      return v15;
    }
    LODWORD(v353.__r_.__value_.__l.__data_) = 1;
    (*(void (**)(void, uint64_t, uint64_t, void, std::string *, uint64_t))(**((void **)this + 750) + 96))(*((void *)this + 750), 3251, 2000, 0, &v353, 4);
    for (kuint64_t k = (uint64_t *)*((void *)this + 762); kk; kuint64_t k = (uint64_t *)*kk)
    {
      LODWORD(v354.__r_.__value_.__l.__data_) = 0;
      if (!(*(unsigned int (**)(void, void, uint64_t, void, std::string *))(**(void **)v29 + 88))(*(void *)v29, *((unsigned int *)kk + 4), 1, 0, &v354))
      {
        uint64_t v90 = *(void *)(*(void *)v29 + 120);
        if (v90) {
          LODWORD(v91) = (*(uint64_t (**)(uint64_t))(*(void *)v90 + 24))(v90);
        }
        else {
          uint64_t v91 = (*(void *)(*(void *)v29 + 104) - *(void *)(*(void *)v29 + 96)) >> 3;
        }
        if (v91 >= 2)
        {
          uint64_t v92 = 1;
          do
          {
            int v93 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, std::string *, uint64_t))(**(void **)v29 + 96))(*(void *)v29, *((unsigned int *)kk + 4), 1, v92, &v354, 4);
            if (v93)
            {
              if (getAUSMV2Log(void)::onceToken != -1) {
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
              }
              __int16 v94 = (id)getAUSMV2Log(void)::gLog;
              if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
              {
                AUParameterEventType v95 = (char *)this + 6008;
                if ((char)v12[63] < 0) {
                  AUParameterEventType v95 = (char *)*((void *)this + 751);
                }
                int v96 = *((_DWORD *)kk + 4);
                *(_DWORD *)std::string buf = 136316418;
                *(void *)&uint8_t buf[4] = v95;
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = "ValidateProperty";
                *(_WORD *)&buf[22] = 1024;
                *(_DWORD *)&buf[24] = v93;
                *(_WORD *)&buf[28] = 1024;
                *(_DWORD *)&buf[30] = v96;
                *(_WORD *)&buf[34] = 1024;
                *(_DWORD *)&buf[36] = v354.__r_.__value_.__l.__data_;
                *(_WORD *)&buf[40] = 1024;
                *(_DWORD *)&buf[42] = v92;
                _os_log_impl(&dword_1BB0CE000, v94, OS_LOG_TYPE_DEFAULT, "[%s|%s] Error %u in setting property %u = %u for element %u", buf, 0x2Eu);
              }
            }
            uint64_t v92 = (v92 + 1);
          }
          while (v91 != v92);
        }
      }
    }
    AUSM::AppleSauceCFWithMutex<__CFDictionary const*>::load(buf, *(void *)v29 + 5480);
    if (*(void *)buf) {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutableCopy(0, 0, *(CFDictionaryRef *)buf);
    }
    else {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    }
    float v242 = Mutable;
    v354.__r_.__value_.__r.__words[0] = (std::string::size_type)Mutable;
    float v243 = (const void *)*MEMORY[0x1E4F1CFD0];
    CFDictionarySetValue(Mutable, @"SourceExtent", (const void *)*MEMORY[0x1E4F1CFD0]);
    CFDictionarySetValue(v242, @"SourceDiffuse", v243);
    CFDictionarySetValue(v242, @"SourceDivergence", v243);
    CFDictionarySetValue(v242, @"SourceDirectivity", v243);
    CFDictionarySetValue(v242, @"NearFieldHOA", v243);
    CFDictionarySetValue(v242, @"NearFieldHRTF", v243);
    CFDictionarySetValue(v242, (const void *)kOptionalFeatureEnableAPACRoomPresets, v243);
    if (!(*(unsigned int (**)(void, uint64_t, uint64_t, void, std::string *, uint64_t))(**(void **)v29 + 96))(*(void *)v29, 3279, 2000, 0, &v354, 8))
    {
      LODWORD(v340) = 23;
      AUSM::Properties::setMaxValue((AUSM::Properties *)(*(void *)v29 + 3360), (uint64_t)&v340, v244);
    }
    CFRelease(v354.__r_.__value_.__l.__data_);
    if (_os_feature_enabled_impl())
    {
      LODWORD(v340) = 1;
      (*(void (**)(void, uint64_t, uint64_t, void, const void **, uint64_t))(**(void **)v29 + 96))(*(void *)v29, 3289, 2000, 0, &v340, 4);
      int v348 = 0;
      if ((*(unsigned int (**)(void, uint64_t, void, void, int *))(**(void **)v29 + 88))(*(void *)v29, 3281, 0, 0, &v348)|| !v348)
      {
        int v348 = 3;
        (*(void (**)(void, uint64_t, uint64_t, void, int *, uint64_t))(**(void **)v29 + 96))(*(void *)v29, 3281, 2000, 0, &v348, 4);
      }
    }
    int v245 = atomic_load((unsigned int *)(*(void *)v29 + 5844));
    AUSM::TuningManager::SetPostProceReverbBlend(v29, v245, 0xFFFFFFFFLL);
    float v246 = (std::string *)buf;
    goto LABEL_658;
  }
  if (theArray == 3240)
  {
    if (a3) {
      goto LABEL_296;
    }
    uint64_t v15 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, int *, uint64_t))(**(void **)v29 + 96))(*(void *)v29, 3240, v54, a4, a5, a6);
    if (v15) {
      return v15;
    }
    unsigned __int8 v135 = atomic_load((unsigned __int8 *)(*(void *)v29 + 3446));
    int v136 = atomic_load((unsigned int *)(*(void *)v29 + 5844));
    if (v136 != 1 || (v135 & 1) != 0)
    {
LABEL_769:
      AUSM::TuningManager::SetPostProceReverbBlend(v29, v136, 0xFFFFFFFFLL);
      return 0;
    }
    LODWORD(v354.__r_.__value_.__l.__data_) = 1;
    int v137 = (*(uint64_t (**)(void, uint64_t, uint64_t, void, std::string *, uint64_t))(**(void **)v29 + 96))(*(void *)v29, 3267, 2000, 0, &v354, 4);
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    unsigned __int8 v138 = (id)getAUSMV2Log(void)::gLog;
    BOOL v139 = os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT);
    if (v137)
    {
      if (v139)
      {
        int v140 = (void *)((char *)this + 6008);
        if ((char)v12[63] < 0) {
          int v140 = (void *)*v140;
        }
        *(_DWORD *)std::string buf = 136315906;
        *(void *)&uint8_t buf[4] = v140;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "ValidateProperty";
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&buf[24] = v137;
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = 1;
        int v141 = "[%s|%s] Error %u while trying to enable post-processing reverb for global sound stage = %u";
        uint64_t v142 = v138;
        uint32_t v143 = 34;
LABEL_767:
        _os_log_impl(&dword_1BB0CE000, v142, OS_LOG_TYPE_DEFAULT, v141, buf, v143);
      }
    }
    else if (v139)
    {
      uint64_t v315 = (void *)((char *)this + 6008);
      if ((char)v12[63] < 0) {
        uint64_t v315 = (void *)*v315;
      }
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = v315;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "ValidateProperty";
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&buf[24] = 1;
      int v141 = "[%s|%s] Post-processing reverb is enabled for global sound stage = %u";
      uint64_t v142 = v138;
      uint32_t v143 = 28;
      goto LABEL_767;
    }

    goto LABEL_769;
  }
  if (theArray != 3242) {
    goto LABEL_296;
  }
  if (a6 == 4 && !*((unsigned char *)this + 6033) && *a5 != 4)
  {
    *((unsigned char *)this + 6033) = 1;
    LODWORD(v354.__r_.__value_.__l.__data_) = 1125515264;
    if ((*(unsigned int (**)(void, uint64_t, uint64_t, void, std::string *, uint64_t))(**(void **)v29
                                                                                                  + 96))(*(void *)v29, 3108, 2000, 0, &v354, 4))
    {
      if (getAUSMV2Log(void)::onceToken != -1) {
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
      }
      double v55 = (id)getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v324 = (void *)((char *)this + 6008);
        if ((char)v12[63] < 0) {
          uint64_t v324 = (void *)*v324;
        }
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = v324;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "ValidateProperty";
        _os_log_debug_impl(&dword_1BB0CE000, v55, OS_LOG_TYPE_DEBUG, "[%s|%s] Could not set BCM LFE low pass frequency", buf, 0x16u);
      }
    }
  }
  uint64_t v15 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, int *, uint64_t))(**(void **)v29 + 96))(*(void *)v29, 3242, v54, a4, a5, a6);
  if (!v15)
  {
    int v56 = atomic_load((unsigned int *)(*(void *)v29 + 5844));
    AUSM::TuningManager::SetPostProceReverbBlend(v29, v56, a4);
    return 0;
  }
  return v15;
}

void sub_1BB3DC0FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34)
{
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(v34);
  _Unwind_Resume(a1);
}

uint64_t AUSpatialMixerV2InputElement::SetDecorrFilterLengthsOnReverbSend(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v6 = a1 + 648;
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock(a1 + 648);
  uint64_t v7 = *(void ***)(a1 + 256);
  if ((a3 & 0x80000000) != 0)
  {
    for (uint64_t i = *(void ***)(a1 + 248); i != v7; ++i)
      AUSpatialMixerV2ChannelProcessor::setDecorrFilterLengthsOnReverbSend(*i, a2);
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 248);
    if (a3 < (unint64_t)(((uint64_t)v7 - v8) >> 3)) {
      AUSpatialMixerV2ChannelProcessor::setDecorrFilterLengthsOnReverbSend(*(void **)(v8 + 8 * a3), a2);
    }
  }
  return caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(v6);
}

void sub_1BB3DC650(_Unwind_Exception *a1)
{
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AUSpatialMixerV2InputElement::SetDecorrFilterCoeffsOnReverbSend(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v6 = a1 + 648;
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock(a1 + 648);
  uint64_t v7 = *(void ***)(a1 + 256);
  if ((a3 & 0x80000000) != 0)
  {
    for (uint64_t i = *(void ***)(a1 + 248); i != v7; ++i)
      AUSpatialMixerV2ChannelProcessor::setDecorrFilterCoeffsOnReverbSend(*i, a2);
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 248);
    if (a3 < (unint64_t)(((uint64_t)v7 - v8) >> 3)) {
      AUSpatialMixerV2ChannelProcessor::setDecorrFilterCoeffsOnReverbSend(*(void **)(v8 + 8 * a3), a2);
    }
  }
  return caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(v6);
}

void sub_1BB3DC704(_Unwind_Exception *a1)
{
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(v1);
  _Unwind_Resume(a1);
}

void applesauce::CF::DictionaryRef::from_get_noexcept(applesauce::CF::DictionaryRef *this, CFTypeRef cf)
{
  if (cf && (CFRetain(cf), CFTypeID v4 = CFGetTypeID(cf), v4 != CFDictionaryGetTypeID()))
  {
    *(void *)this = 0;
    CFRelease(cf);
  }
  else
  {
    *(void *)this = cf;
  }
}

uint64_t AUSM::ExclusionZone::exclusionZonesFromDictionary(AUSM::ExclusionZone *this, const __CFDictionary **a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  if (!*a2) {
    goto LABEL_56;
  }
  uint64_t result = applesauce::CF::details::has_key<char const(&)[15]>(*a2, "ExclusionZones");
  if (!result) {
    return result;
  }
  if (!*a2)
  {
LABEL_56:
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
LABEL_57:
  }
  float v5 = applesauce::CF::details::at_key<char const(&)[15]>(*a2, "ExclusionZones");
  if (v5)
  {
    uint64_t v6 = v5;
    CFRetain(v5);
    CFTypeID v7 = CFGetTypeID(v6);
    if (v7 == CFArrayGetTypeID())
    {
      unsigned __int8 v47 = v6;
      char v48 = 1;
      CFRetain(v6);
      uint64_t Count = CFArrayGetCount((CFArrayRef)v6);
      if (Count)
      {
        uint64_t v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          CFTypeRef cf = 0;
          applesauce::CF::at_or<applesauce::CF::DictionaryRef>(v46, (CFArrayRef)v6, v10, &cf);
          if (cf) {
            CFRelease(cf);
          }
          CFDictionaryRef v11 = *(const __CFDictionary **)v46;
          if (!*(void *)v46)
          {
            exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not construct");
            goto LABEL_57;
          }
          CFNumberRef v12 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[16]>(*(const __CFDictionary **)v46, "coordinatesType");
          if (!v12 || (uint64_t v13 = applesauce::CF::convert_as<unsigned int,0>(v12), (v13 & 0xFF00000000) == 0))
          {
LABEL_46:
            CFRelease(v11);
            BOOL v20 = v9;
            goto LABEL_47;
          }
          if (v13 != 1) {
            break;
          }
          LODWORD(cf) = 0;
          float v21 = applesauce::CF::at_or<float,char const(&)[5]>(v11, "minX", (uint64_t)&cf);
          LODWORD(cf) = 0;
          float v22 = applesauce::CF::at_or<float,char const(&)[5]>(v11, "maxX", (uint64_t)&cf);
          LODWORD(cf) = 0;
          float v23 = applesauce::CF::at_or<float,char const(&)[5]>(v11, "minY", (uint64_t)&cf);
          LODWORD(cf) = 0;
          float v24 = applesauce::CF::at_or<float,char const(&)[5]>(v11, "maxY", (uint64_t)&cf);
          LODWORD(cf) = 0;
          float v25 = applesauce::CF::at_or<float,char const(&)[5]>(v11, "minZ", (uint64_t)&cf);
          LODWORD(cf) = 0;
          float v26 = applesauce::CF::at_or<float,char const(&)[5]>(v11, "maxZ", (uint64_t)&cf);
          float v27 = v26;
          unint64_t v28 = *((void *)this + 2);
          if ((unint64_t)v9 < v28)
          {
            *(_DWORD *)uint64_t v9 = 1;
            v9[1] = v21;
            v9[2] = v22;
            v9[3] = v23;
            v9[4] = v24;
            BOOL v20 = v9 + 7;
            v9[5] = v25;
            v9[6] = v26;
            goto LABEL_45;
          }
          int v29 = *(float **)this;
          uint64_t v35 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v9 - *(void *)this) >> 2);
          unint64_t v36 = v35 + 1;
          if ((unint64_t)(v35 + 1) > 0x924924924924924) {
LABEL_58:
          }
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          unint64_t v37 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v28 - (void)v29) >> 2);
          if (2 * v37 > v36) {
            unint64_t v36 = 2 * v37;
          }
          if (v37 >= 0x492492492492492) {
            unint64_t v33 = 0x924924924924924;
          }
          else {
            unint64_t v33 = v36;
          }
          if (v33) {
            unint64_t v33 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUSM::ExclusionZone>>(v33);
          }
          else {
            uint64_t v34 = 0;
          }
          uint64_t v38 = (float *)(v33 + 28 * v35);
          *(_DWORD *)uint64_t v38 = 1;
          v38[1] = v21;
          v38[2] = v22;
          v38[3] = v23;
          v38[4] = v24;
          v38[5] = v25;
          v38[6] = v27;
          uint64_t v39 = v38;
          if (v9 != v29)
          {
            do
            {
              long long v41 = *(_OWORD *)(v9 - 7);
              *((_OWORD *)v39 - 1) = *((_OWORD *)v9 - 1);
              *(_OWORD *)(v39 - 7) = v41;
              v39 -= 7;
              v9 -= 7;
            }
            while (v9 != v29);
LABEL_42:
            uint64_t v9 = v29;
          }
LABEL_43:
          BOOL v20 = v38 + 7;
          *(void *)this = v39;
          *((void *)this + 1) = v38 + 7;
          *((void *)this + 2) = v33 + 28 * v34;
          if (v9) {
            operator delete(v9);
          }
LABEL_45:
          *((void *)this + 1) = v20;
          CFDictionaryRef v11 = *(const __CFDictionary **)v46;
          uint64_t v9 = v20;
          if (*(void *)v46) {
            goto LABEL_46;
          }
LABEL_47:
          ++v10;
          uint64_t v9 = v20;
          if (v10 == Count) {
            goto LABEL_48;
          }
        }
        if (v13) {
          goto LABEL_46;
        }
        LODWORD(cf) = 0;
        float v14 = applesauce::CF::at_or<float,char const(&)[13]>(v11, "minElevation", (uint64_t)&cf);
        LODWORD(cf) = 0;
        float v15 = applesauce::CF::at_or<float,char const(&)[13]>(v11, "maxElevation", (uint64_t)&cf);
        LODWORD(cf) = 0;
        float v16 = applesauce::CF::at_or<float,char const(&)[11]>(v11, "minAzimuth", (uint64_t)&cf);
        LODWORD(cf) = 0;
        float v17 = applesauce::CF::at_or<float,char const(&)[11]>(v11, "maxAzimuth", (uint64_t)&cf);
        float v18 = v17;
        unint64_t v19 = *((void *)this + 2);
        if ((unint64_t)v9 < v19)
        {
          *uint64_t v9 = 0.0;
          v9[1] = v14;
          v9[2] = v15;
          BOOL v20 = v9 + 7;
          v9[3] = v16;
          v9[4] = v17;
          goto LABEL_45;
        }
        int v29 = *(float **)this;
        uint64_t v30 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v9 - *(void *)this) >> 2);
        unint64_t v31 = v30 + 1;
        if ((unint64_t)(v30 + 1) > 0x924924924924924) {
          goto LABEL_58;
        }
        unint64_t v32 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v19 - (void)v29) >> 2);
        if (2 * v32 > v31) {
          unint64_t v31 = 2 * v32;
        }
        if (v32 >= 0x492492492492492) {
          unint64_t v33 = 0x924924924924924;
        }
        else {
          unint64_t v33 = v31;
        }
        if (v33) {
          unint64_t v33 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUSM::ExclusionZone>>(v33);
        }
        else {
          uint64_t v34 = 0;
        }
        uint64_t v38 = (float *)(v33 + 28 * v30);
        *uint64_t v38 = 0.0;
        v38[1] = v14;
        v38[2] = v15;
        v38[3] = v16;
        v38[4] = v18;
        uint64_t v39 = v38;
        if (v9 == v29) {
          goto LABEL_43;
        }
        do
        {
          long long v40 = *(_OWORD *)(v9 - 7);
          *((_OWORD *)v39 - 1) = *((_OWORD *)v9 - 1);
          *(_OWORD *)(v39 - 7) = v40;
          v39 -= 7;
          v9 -= 7;
        }
        while (v9 != v29);
        goto LABEL_42;
      }
LABEL_48:
      CFRelease(v6);
      goto LABEL_51;
    }
    CFRelease(v6);
  }
  LOBYTE(v47) = 0;
  char v48 = 0;
LABEL_51:
  uint64_t result = std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v47);
  uint64_t v43 = *(void *)this;
  uint64_t v42 = *((void *)this + 1);
  while (v43 != v42)
  {
    uint64_t result = AUSM::ExclusionZone::clampValues(v43);
    v43 += 28;
  }
  return result;
}

void sub_1BB3DCCCC(void *a1)
{
  __cxa_free_exception(v1);
  __clang_call_terminate(a1);
}

uint64_t AUSpatialMixerV2InputElement::SetExclusionZones(void *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t)(a1 + 81);
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)(a1 + 81));
  float v5 = (uint64_t *)a1[31];
  uint64_t v6 = (uint64_t *)a1[32];
  while (1)
  {
    if (v5 == v6)
    {
      memset(v9, 0, sizeof(v9));
      std::vector<AUSM::ExclusionZone>::__init_with_size[abi:ne180100]<AUSM::ExclusionZone*,AUSM::ExclusionZone*>(v9, *(const void **)a2, *(void *)(a2 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2));
      caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)(a1 + 167));
      operator new();
    }
    uint64_t v7 = AUSpatialMixerV2ChannelProcessor::setExclusionZones(*v5, a2);
    if (v7) {
      break;
    }
    ++v5;
  }
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(v4);
  return v7;
}

void sub_1BB3DCE64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  MEMORY[0x1C185D370](v12, 0x20C40960023A9);
  caulk::pooled_semaphore_mutex::_unlock(v11);
  if (__p) {
    operator delete(__p);
  }
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(v10);
  _Unwind_Resume(a1);
}

void AUSM::ExclusionZone::exclusionZonesFromArray(AUSM::ExclusionZone *this, const float *a2, unsigned int a3)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  if (!a3) {
    return;
  }
  uint64_t v6 = 0;
  unsigned int v7 = 0;
  while (1)
  {
    float v8 = a2[v7];
    if (a3 - v7 < 5 || v8 != 0.0) {
      break;
    }
    float v9 = a2[v7 + 1];
    float v10 = a2[v7 + 2];
    float v11 = a2[v7 + 3];
    float v12 = a2[v7 + 4];
    unint64_t v13 = *((void *)this + 2);
    if ((unint64_t)v6 >= v13)
    {
      float v23 = *(_DWORD **)this;
      uint64_t v24 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v6 - *(void *)this) >> 2);
      unint64_t v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) > 0x924924924924924) {
        goto LABEL_48;
      }
      unint64_t v26 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v13 - (void)v23) >> 2);
      if (2 * v26 > v25) {
        unint64_t v25 = 2 * v26;
      }
      if (v26 >= 0x492492492492492) {
        unint64_t v27 = 0x924924924924924;
      }
      else {
        unint64_t v27 = v25;
      }
      if (v27) {
        unint64_t v27 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUSM::ExclusionZone>>(v27);
      }
      else {
        uint64_t v28 = 0;
      }
      uint64_t v35 = (float *)(v27 + 28 * v24);
      float *v35 = 0.0;
      v35[1] = v9;
      v35[2] = v10;
      v35[3] = v11;
      v35[4] = v12;
      unint64_t v36 = v35;
      if (v6 != v23)
      {
        do
        {
          long long v37 = *(_OWORD *)(v6 - 7);
          *((_OWORD *)v36 - 1) = *((_OWORD *)v6 - 1);
          *(_OWORD *)(v36 - 7) = v37;
          v36 -= 7;
          v6 -= 7;
        }
        while (v6 != v23);
        uint64_t v6 = v23;
      }
      float v14 = v35 + 7;
      *(void *)this = v36;
      *((void *)this + 1) = v35 + 7;
      *((void *)this + 2) = v27 + 28 * v28;
      if (v6) {
        operator delete(v6);
      }
      int v15 = 5;
    }
    else
    {
      *uint64_t v6 = 0;
      *((float *)v6 + 1) = v9;
      *((float *)v6 + 2) = v10;
      float v14 = v6 + 7;
      int v15 = 5;
      *((float *)v6 + 3) = v11;
      *((float *)v6 + 4) = v12;
    }
LABEL_41:
    *((void *)this + 1) = v14;
    v7 += v15;
    uint64_t v6 = v14;
    if (v7 >= a3) {
      goto LABEL_44;
    }
  }
  if (a3 - v7 >= 7 && v8 == 1.0)
  {
    float v16 = a2[v7 + 1];
    float v17 = a2[v7 + 2];
    float v18 = a2[v7 + 3];
    float v19 = a2[v7 + 4];
    float v20 = a2[v7 + 5];
    float v21 = a2[v7 + 6];
    unint64_t v22 = *((void *)this + 2);
    if ((unint64_t)v6 >= v22)
    {
      int v29 = *(_DWORD **)this;
      uint64_t v30 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v6 - *(void *)this) >> 2);
      unint64_t v31 = v30 + 1;
      if ((unint64_t)(v30 + 1) > 0x924924924924924) {
LABEL_48:
      }
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      unint64_t v32 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v22 - (void)v29) >> 2);
      if (2 * v32 > v31) {
        unint64_t v31 = 2 * v32;
      }
      if (v32 >= 0x492492492492492) {
        unint64_t v33 = 0x924924924924924;
      }
      else {
        unint64_t v33 = v31;
      }
      if (v33) {
        unint64_t v33 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUSM::ExclusionZone>>(v33);
      }
      else {
        uint64_t v34 = 0;
      }
      uint64_t v38 = (float *)(v33 + 28 * v30);
      *(_DWORD *)uint64_t v38 = 1;
      v38[1] = v16;
      v38[2] = v17;
      v38[3] = v18;
      v38[4] = v19;
      v38[5] = v20;
      v38[6] = v21;
      uint64_t v39 = v38;
      if (v6 != v29)
      {
        do
        {
          long long v40 = *(_OWORD *)(v6 - 7);
          *((_OWORD *)v39 - 1) = *((_OWORD *)v6 - 1);
          *(_OWORD *)(v39 - 7) = v40;
          v39 -= 7;
          v6 -= 7;
        }
        while (v6 != v29);
        uint64_t v6 = v29;
      }
      float v14 = v38 + 7;
      *(void *)this = v39;
      *((void *)this + 1) = v38 + 7;
      *((void *)this + 2) = v33 + 28 * v34;
      if (v6) {
        operator delete(v6);
      }
      int v15 = 7;
    }
    else
    {
      *uint64_t v6 = 1;
      *((float *)v6 + 1) = v16;
      *((float *)v6 + 2) = v17;
      *((float *)v6 + 3) = v18;
      *((float *)v6 + 4) = v19;
      float v14 = v6 + 7;
      int v15 = 7;
      *((float *)v6 + 5) = v20;
      *((float *)v6 + 6) = v21;
    }
    goto LABEL_41;
  }
  float v14 = v6;
LABEL_44:
  for (uint64_t i = *(void *)this; (_DWORD *)i != v14; i += 28)
    AUSM::ExclusionZone::clampValues(i);
}

void applesauce::CF::ArrayRef::from_get_noexcept(applesauce::CF::ArrayRef *this, CFTypeRef cf)
{
  if (cf && (CFRetain(cf), CFTypeID v4 = CFGetTypeID(cf), v4 != CFArrayGetTypeID()))
  {
    *(void *)this = 0;
    CFRelease(cf);
  }
  else
  {
    *(void *)this = cf;
  }
}

void applesauce::CF::ArrayRef_proxy::pretty_print(applesauce::CF::ArrayRef_proxy *this, const void *a2)
{
  if (a2)
  {
    CFStringRef v3 = CFCopyDescription(a2);
    applesauce::CF::details::CFString_get_value<true>(v3, (uint64_t)this);
    if (v3) {
      CFRelease(v3);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(this, "(null)");
  }
}

void sub_1BB3DD2F0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void *applesauce::CF::ArrayRef_iterator<applesauce::CF::DictionaryRef>::ArrayRef_iterator(void *a1, CFArrayRef theArray)
{
  *a1 = theArray;
  a1[1] = 0;
  if (theArray) {
    CFIndex Count = CFArrayGetCount(theArray);
  }
  else {
    CFIndex Count = 0;
  }
  a1[2] = Count;
  return a1;
}

uint64_t AUSpatialMixerV2::UpdateTuningWarper(AUSpatialMixerV2 *this)
{
  uint64_t v1 = this;
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  unint64_t v33 = (char *)this + 3088;
  char v34 = 1;
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 3088);
  uint64_t v30 = 0;
  unint64_t v31 = 0;
  unint64_t v32 = 0;
  unint64_t v2 = *((void *)v1 + 381);
  if (v2)
  {
    if (v2 >> 59) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    CFStringRef v3 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(v2);
    float v5 = &v3[32 * v4];
    uint64_t v30 = v3;
    unint64_t v31 = v3;
    unint64_t v32 = v5;
  }
  else
  {
    float v5 = 0;
    CFStringRef v3 = 0;
  }
  uint64_t v6 = (void *)*((void *)v1 + 379);
  unsigned int v7 = (void *)((char *)v1 + 3040);
  if (v6 == (void *)((char *)v1 + 3040))
  {
    float v9 = v3;
  }
  else
  {
    int v29 = v1;
    float v8 = v31;
    float v9 = v3;
    do
    {
      float v10 = v6 + 4;
      if (v3 >= v5)
      {
        uint64_t v12 = (v3 - v9) >> 5;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 59)
        {
          uint64_t v30 = v9;
          unint64_t v31 = v8;
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        }
        if ((v5 - v9) >> 4 > v13) {
          unint64_t v13 = (v5 - v9) >> 4;
        }
        if ((unint64_t)(v5 - v9) >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v14 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14) {
          unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(v14);
        }
        else {
          uint64_t v15 = 0;
        }
        long long v16 = *((_OWORD *)v6 + 3);
        float v17 = (_OWORD *)(v14 + 32 * v12);
        *float v17 = *v10;
        v17[1] = v16;
        if (v3 == v9)
        {
          float v20 = (char *)(v14 + 32 * v12);
        }
        else
        {
          unint64_t v18 = v14 + 32 * v12;
          do
          {
            long long v19 = *((_OWORD *)v3 - 1);
            float v20 = (char *)(v18 - 32);
            *(_OWORD *)(v18 - 32) = *((_OWORD *)v3 - 2);
            *(_OWORD *)(v18 - 16) = v19;
            v3 -= 32;
            v18 -= 32;
          }
          while (v3 != v9);
        }
        float v5 = (char *)(v14 + 32 * v15);
        float v8 = (char *)(v17 + 2);
        unint64_t v32 = v5;
        if (v9) {
          operator delete(v9);
        }
        float v9 = v20;
      }
      else
      {
        long long v11 = *((_OWORD *)v6 + 3);
        *(_OWORD *)CFStringRef v3 = *v10;
        *((_OWORD *)v3 + 1) = v11;
        float v8 = v3 + 32;
      }
      float v21 = (void *)v6[1];
      if (v21)
      {
        do
        {
          unint64_t v22 = v21;
          float v21 = (void *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          unint64_t v22 = (void *)v6[2];
          BOOL v23 = *v22 == (void)v6;
          uint64_t v6 = v22;
        }
        while (!v23);
      }
      CFStringRef v3 = v8;
      uint64_t v6 = v22;
    }
    while (v22 != v7);
    uint64_t v30 = v9;
    unint64_t v31 = v8;
    uint64_t v1 = v29;
  }
  CFRetain(@"AUSMSoundStageLargeParameters");
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, @"AUSMSoundStageLargeParameters");
  if (!cf)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  applesauce::CF::convert_to<std::string,0>((const __CFString *)cf, (uint64_t)&__p);
  long long v35 = xmmword_1BB873CD0;
  int v36 = 1065353216;
  int v24 = AUSM::SoundStage::setSoundStageParameters((uint64_t)v1 + 8416, 3, &v30, &__p, (uint64_t)&v35, 1.0, 0.0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v24)
  {
    atomic_store(3u, (unsigned int *)v1 + 2206);
    *((_DWORD *)v1 + 2210) = 1065353216;
    atomic_store(1u, (unsigned __int8 *)v1 + 8893);
  }
  else
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    unint64_t v25 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      unint64_t v27 = (void *)((char *)v1 + 3368);
      if (*((char *)v1 + 3391) < 0) {
        unint64_t v27 = (void *)*v27;
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"UpdateTuningWarper";
      _os_log_error_impl(&dword_1BB0CE000, v25, OS_LOG_TYPE_ERROR, "[%s|%s] failed to set tuning warper parameters", (uint8_t *)&__p, 0x16u);
    }
  }
  if (v9)
  {
    unint64_t v31 = v9;
    operator delete(v9);
  }
  return std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v33);
}

void sub_1BB3DD6FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
}

const __CFNumber *applesauce::CF::DictionaryRef_proxy::at_as<unsigned int,__CFString const*&>(const __CFDictionary *a1)
{
  CFNumberRef result = (const __CFNumber *)applesauce::CF::details::at_key<__CFString const*&>(a1, (const void *)kPresetKeyChannelLabel);
  if (result)
  {
    return (const __CFNumber *)applesauce::CF::convert_as<unsigned int,0>(result);
  }
  return result;
}

const __CFNumber *applesauce::CF::DictionaryRef_proxy::at_as<float,__CFString const*&>(const __CFDictionary *a1, const void *a2)
{
  CFNumberRef result = (const __CFNumber *)applesauce::CF::details::at_key<__CFString const*&>(a1, a2);
  if (result)
  {
    return (const __CFNumber *)applesauce::CF::convert_as<float,0>(result);
  }
  return result;
}

char *std::__tree<std::__value_type<unsigned int,AUSMChannelParameters>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,AUSMChannelParameters>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,AUSMChannelParameters>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 1;
  float v5 = (char *)a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unsigned int v7 = v5;
        unsigned int v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2) {
          break;
        }
        float v5 = *(char **)v7;
        uint64_t v6 = (uint64_t **)v7;
        if (!*(void *)v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      float v5 = (char *)*((void *)v7 + 1);
      if (!v5)
      {
        uint64_t v6 = (uint64_t **)(v7 + 8);
        goto LABEL_9;
      }
    }
  }
  else
  {
    unsigned int v7 = (char *)(a1 + 1);
LABEL_9:
    float v9 = v7;
    unsigned int v7 = (char *)operator new(0x40uLL);
    *((_DWORD *)v7 + 7) = *a3;
    *((void *)v7 + 4) = 0;
    *(_OWORD *)(v7 + 40) = xmmword_1BB873AB0;
    *((void *)v7 + 7) = 0xFFFFFFFF00000001;
    *(void *)unsigned int v7 = 0;
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 2) = v9;
    *uint64_t v6 = (uint64_t *)v7;
    float v10 = (uint64_t *)**a1;
    long long v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      long long v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void *std::vector<AUSMChannelParameters>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<AUSMChannelParameters>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 32 * a2;
    do
    {
      *(void *)uint64_t v4 = 0;
      *(_OWORD *)(v4 + 8) = xmmword_1BB873AB0;
      *(void *)(v4 + 24) = 0xFFFFFFFF00000001;
      v4 += 32;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_1BB3DD94C(_Unwind_Exception *exception_object)
{
  CFStringRef v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

CFArrayRef applesauce::CF::details::make_CFArrayRef<unsigned int>(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 8);
  float v9 = 0;
  float v10 = 0;
  unint64_t v11 = 0;
  std::vector<applesauce::CF::NumberRef>::reserve((char **)&v9, v2);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    uint64_t v4 = *(int **)a1;
    uint64_t v5 = v10;
    uint64_t v6 = 4 * v3;
    do
    {
      if ((unint64_t)v5 >= v11) {
        uint64_t v5 = (CFNumberRef *)std::vector<applesauce::CF::NumberRef>::__emplace_back_slow_path<unsigned int const&>((uint64_t *)&v9, v4);
      }
      else {
        std::construct_at[abi:ne180100]<applesauce::CF::NumberRef,unsigned int const&,applesauce::CF::NumberRef*>(v5++, *v4);
      }
      float v10 = v5;
      ++v4;
      v6 -= 4;
    }
    while (v6);
  }
  CFArrayRef v7 = applesauce::CF::details::make_CFArrayRef<applesauce::CF::NumberRef>(&v9);
  uint64_t v12 = (void **)&v9;
  std::vector<applesauce::CF::NumberRef>::__destroy_vector::operator()[abi:ne180100](&v12);
  return v7;
}

void sub_1BB3DDA20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<applesauce::CF::NumberRef>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[5],float const&>(applesauce::CF::TypeRef *a1, int *a2)
{
  applesauce::CF::TypeRef::TypeRef(a1, "CDDR");
  int valuePtr = *a2;
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  *((void *)a1 + 1) = v4;
  if (!v4)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_1BB3DDAEC(_Unwind_Exception *a1)
{
  uint64_t v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[16],float const&>(applesauce::CF::TypeRef *a1, int *a2)
{
  applesauce::CF::TypeRef::TypeRef(a1, "SharpeningLimit");
  int valuePtr = *a2;
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  *((void *)a1 + 1) = v4;
  if (!v4)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_1BB3DDBC8(_Unwind_Exception *a1)
{
  uint64_t v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[19],float const&>(applesauce::CF::TypeRef *a1, char *a2, int *a3)
{
  applesauce::CF::TypeRef::TypeRef(a1, a2);
  int valuePtr = *a3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  *((void *)a1 + 1) = v5;
  if (!v5)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_1BB3DDC9C(_Unwind_Exception *a1)
{
  uint64_t v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[13],float const&>(applesauce::CF::TypeRef *a1, int *a2)
{
  applesauce::CF::TypeRef::TypeRef(a1, "AnalysisType");
  int valuePtr = *a2;
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  *((void *)a1 + 1) = v4;
  if (!v4)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_1BB3DDD78(_Unwind_Exception *a1)
{
  uint64_t v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[10],unsigned int>(applesauce::CF::TypeRef *a1, int *a2)
{
  applesauce::CF::TypeRef::TypeRef(a1, "FrameSize");
  int valuePtr = *a2;
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *((void *)a1 + 1) = v4;
  if (!v4)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_1BB3DDE54(_Unwind_Exception *a1)
{
  uint64_t v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[8],unsigned int>(applesauce::CF::TypeRef *a1, int *a2)
{
  applesauce::CF::TypeRef::TypeRef(a1, "HopSize");
  int valuePtr = *a2;
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *((void *)a1 + 1) = v4;
  if (!v4)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_1BB3DDF30(_Unwind_Exception *a1)
{
  uint64_t v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

char *std::vector<AUSMChannelParameters>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  }
  CFNumberRef result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<AUSM::ExclusionZone>>(unint64_t a1)
{
  if (a1 >= 0x924924924924925) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(28 * a1);
}

uint64_t AUSM::ExclusionZone::clampValues(uint64_t this)
{
  if (*(_DWORD *)this == 1)
  {
    float v9 = -1.0;
    float v10 = *(float *)(this + 4);
    float v11 = *(float *)(this + 8);
    if (v10 <= 1.0) {
      float v12 = *(float *)(this + 4);
    }
    else {
      float v12 = 1.0;
    }
    if (v10 >= -1.0) {
      float v13 = v12;
    }
    else {
      float v13 = -1.0;
    }
    if (v11 <= 1.0) {
      float v14 = *(float *)(this + 8);
    }
    else {
      float v14 = 1.0;
    }
    if (v11 >= -1.0) {
      float v15 = v14;
    }
    else {
      float v15 = -1.0;
    }
    *(float *)(this + 4) = v13;
    *(float *)(this + 8) = v15;
    float v16 = *(float *)(this + 12);
    float v17 = *(float *)(this + 16);
    if (v16 <= 1.0) {
      float v18 = *(float *)(this + 12);
    }
    else {
      float v18 = 1.0;
    }
    if (v16 >= -1.0) {
      float v19 = v18;
    }
    else {
      float v19 = -1.0;
    }
    if (v17 <= 1.0) {
      float v20 = *(float *)(this + 16);
    }
    else {
      float v20 = 1.0;
    }
    if (v17 >= -1.0) {
      float v21 = v20;
    }
    else {
      float v21 = -1.0;
    }
    *(float *)(this + 12) = v19;
    *(float *)(this + 16) = v21;
    float v23 = *(float *)(this + 20);
    float v22 = *(float *)(this + 24);
    if (v23 <= 1.0) {
      float v24 = *(float *)(this + 20);
    }
    else {
      float v24 = 1.0;
    }
    if (v23 >= -1.0) {
      float v25 = v24;
    }
    else {
      float v25 = -1.0;
    }
    *(float *)(this + 20) = v25;
    if (v22 >= -1.0)
    {
      float v9 = 1.0;
      if (v22 <= 1.0) {
        float v9 = v22;
      }
    }
    *(float *)(this + 24) = v9;
  }
  else if (!*(_DWORD *)this)
  {
    float v1 = -90.0;
    float v2 = 90.0;
    float v3 = *(float *)(this + 4);
    float v4 = *(float *)(this + 8);
    if (v3 <= 90.0) {
      float v2 = *(float *)(this + 4);
    }
    if (v3 >= -90.0) {
      float v1 = v2;
    }
    float v5 = -90.0;
    float v6 = 90.0;
    if (v4 <= 90.0) {
      float v6 = *(float *)(this + 8);
    }
    if (v4 >= -90.0) {
      float v5 = v6;
    }
    *(float *)(this + 4) = v1;
    *(float *)(this + 8) = v5;
    float v7 = *(float *)(this + 12);
    if (v7 < -180.0)
    {
      do
        float v7 = v7 + 360.0;
      while (v7 < -180.0);
      *(float *)(this + 12) = v7;
    }
    if (v7 > 180.0)
    {
      do
        float v7 = v7 + -360.0;
      while (v7 > 180.0);
      *(float *)(this + 12) = v7;
    }
    float v8 = *(float *)(this + 16);
    if (v8 < -180.0)
    {
      do
        float v8 = v8 + 360.0;
      while (v8 < -180.0);
      *(float *)(this + 16) = v8;
    }
    if (v8 > 180.0)
    {
      do
        float v8 = v8 + -360.0;
      while (v8 > 180.0);
      *(float *)(this + 16) = v8;
    }
  }
  return this;
}

void *std::vector<AUSM::ExclusionZone>::__init_with_size[abi:ne180100]<AUSM::ExclusionZone*,AUSM::ExclusionZone*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    float v6 = result;
    CFNumberRef result = std::vector<AUSM::ExclusionZone>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      CFNumberRef result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BB3DE20C(_Unwind_Exception *exception_object)
{
  float v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUSM::ExclusionZone::getPresetFromExclusionZones(float **a1)
{
  if (a1[1] == *a1) {
    return 0;
  }
  BOOL v44 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  AUSM::ExclusionZone::getPreset(1, (void **)&v44);
  float v2 = *a1;
  float v3 = a1[1];
  float v4 = v44;
  if ((char *)v3 - (char *)*a1 != v45 - (void)v44)
  {
    char v7 = 0;
    goto LABEL_10;
  }
  if (v2 != v3)
  {
    float v5 = v44;
    do
    {
      BOOL v6 = AUSM::ExclusionZone::operator==(v2, (uint64_t)v5);
      char v7 = v6;
      if (!v6) {
        break;
      }
      v2 += 7;
      v5 += 28;
    }
    while (v2 != v3);
LABEL_10:
    if (!v4) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  char v7 = 1;
  if (v44) {
LABEL_11:
  }
    operator delete(v4);
LABEL_12:
  if (v7) {
    return 1;
  }
  BOOL v44 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  AUSM::ExclusionZone::getPreset(2, (void **)&v44);
  float v9 = *a1;
  float v10 = a1[1];
  float v11 = v44;
  if ((char *)v10 - (char *)*a1 == v45 - (void)v44)
  {
    if (v9 == v10)
    {
LABEL_19:
      char v13 = 1;
      goto LABEL_31;
    }
    float v12 = v44;
    while (AUSM::ExclusionZone::operator==(v9, (uint64_t)v12))
    {
      v9 += 7;
      v12 += 28;
      if (v9 == v10) {
        goto LABEL_19;
      }
    }
  }
  AUSM::ExclusionZone::getPresetReversed((void **)&v42, 2);
  float v14 = *a1;
  float v15 = a1[1];
  float v16 = v42;
  if ((char *)v15 - (char *)*a1 != v43 - (void)v42)
  {
    char v13 = 0;
    goto LABEL_29;
  }
  if (v14 != v15)
  {
    float v17 = v42;
    do
    {
      BOOL v18 = AUSM::ExclusionZone::operator==(v14, (uint64_t)v17);
      char v13 = v18;
      if (!v18) {
        break;
      }
      v14 += 7;
      v17 += 28;
    }
    while (v14 != v15);
LABEL_29:
    if (!v16) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  char v13 = 1;
  if (v42) {
LABEL_30:
  }
    operator delete(v16);
LABEL_31:
  if (v11) {
    operator delete(v11);
  }
  if (v13) {
    return 2;
  }
  BOOL v44 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  AUSM::ExclusionZone::getPreset(3, (void **)&v44);
  float v19 = *a1;
  float v20 = a1[1];
  float v21 = v44;
  if ((char *)v20 - (char *)*a1 == v45 - (void)v44)
  {
    if (v19 == v20)
    {
LABEL_40:
      char v23 = 1;
      goto LABEL_50;
    }
    float v22 = v44;
    while (AUSM::ExclusionZone::operator==(v19, (uint64_t)v22))
    {
      v19 += 7;
      v22 += 28;
      if (v19 == v20) {
        goto LABEL_40;
      }
    }
  }
  AUSM::ExclusionZone::getPresetReversed((void **)&v42, 3);
  float v24 = *a1;
  float v25 = a1[1];
  unint64_t v26 = v42;
  if ((char *)v25 - (char *)*a1 != v43 - (void)v42)
  {
    char v23 = 0;
    goto LABEL_48;
  }
  if (v24 != v25)
  {
    unint64_t v27 = v42;
    do
    {
      BOOL v28 = AUSM::ExclusionZone::operator==(v24, (uint64_t)v27);
      char v23 = v28;
      if (!v28) {
        break;
      }
      v24 += 7;
      v27 += 28;
    }
    while (v24 != v25);
LABEL_48:
    if (!v26) {
      goto LABEL_50;
    }
    goto LABEL_49;
  }
  char v23 = 1;
  if (v42) {
LABEL_49:
  }
    operator delete(v26);
LABEL_50:
  if (v21) {
    operator delete(v21);
  }
  if (v23) {
    return 3;
  }
  BOOL v44 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  AUSM::ExclusionZone::getPreset(4, (void **)&v44);
  int v29 = *a1;
  uint64_t v30 = a1[1];
  unint64_t v31 = v44;
  if ((char *)v30 - (char *)*a1 != v45 - (void)v44)
  {
    char v34 = 0;
    goto LABEL_63;
  }
  if (v29 != v30)
  {
    unint64_t v32 = v44;
    do
    {
      BOOL v33 = AUSM::ExclusionZone::operator==(v29, (uint64_t)v32);
      char v34 = v33;
      if (!v33) {
        break;
      }
      v29 += 7;
      v32 += 28;
    }
    while (v29 != v30);
LABEL_63:
    if (!v31) {
      goto LABEL_65;
    }
    goto LABEL_64;
  }
  char v34 = 1;
  if (v44) {
LABEL_64:
  }
    operator delete(v31);
LABEL_65:
  if (v34) {
    return 4;
  }
  BOOL v44 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  AUSM::ExclusionZone::getPreset(5, (void **)&v44);
  long long v35 = *a1;
  int v36 = a1[1];
  int64_t v37 = (char *)v36 - (char *)*a1;
  uint64_t v38 = v44;
  if (v37 == v45 - (void)v44)
  {
    if (v35 == v36)
    {
      uint64_t v8 = 5;
    }
    else
    {
      uint64_t v39 = v44;
      do
      {
        BOOL v40 = AUSM::ExclusionZone::operator==(v35, (uint64_t)v39);
        if (!v40) {
          break;
        }
        v35 += 7;
        v39 += 28;
      }
      while (v35 != v36);
      if (v40) {
        uint64_t v8 = 5;
      }
      else {
        uint64_t v8 = 0xFFFFFFFFLL;
      }
    }
  }
  else
  {
    uint64_t v8 = 0xFFFFFFFFLL;
  }
  if (v38) {
    operator delete(v38);
  }
  return v8;
}

void AUSM::ExclusionZone::getPreset(int a1, void **a2)
{
  switch(a1)
  {
    case 1:
      float v4 = (char *)a2[1];
      float v3 = (char *)a2[2];
      if (v4 >= v3)
      {
        uint64_t v29 = 0x6DB6DB6DB6DB6DB7 * ((v4 - (unsigned char *)*a2) >> 2);
        unint64_t v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) <= 0x924924924924924)
        {
          unint64_t v31 = 0x6DB6DB6DB6DB6DB7 * ((v3 - (unsigned char *)*a2) >> 2);
          if (2 * v31 > v30) {
            unint64_t v30 = 2 * v31;
          }
          if (v31 >= 0x492492492492492) {
            unint64_t v32 = 0x924924924924924;
          }
          else {
            unint64_t v32 = v30;
          }
          if (v32) {
            unint64_t v32 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUSM::ExclusionZone>>(v32);
          }
          else {
            uint64_t v33 = 0;
          }
          unint64_t v39 = v32 + 28 * v29;
          unint64_t v40 = v32 + 28 * v33;
          *(_DWORD *)unint64_t v39 = 0;
          *(_OWORD *)(v39 + 4) = xmmword_1BB879FD0;
          float v11 = (void *)(v39 + 28);
          unsigned __int8 v58 = (char *)*a2;
          long long v41 = (char *)a2[1];
          if (v41 == *a2) {
            goto LABEL_106;
          }
          do
          {
            long long v59 = *(_OWORD *)(v41 - 28);
            *(_OWORD *)(v39 - 16) = *((_OWORD *)v41 - 1);
            *(_OWORD *)(v39 - 28) = v59;
            v39 -= 28;
            v41 -= 28;
          }
          while (v41 != v58);
LABEL_105:
          long long v41 = (char *)*a2;
LABEL_106:
          *a2 = (void *)v39;
          a2[1] = v11;
          a2[2] = (void *)v40;
          if (v41) {
            operator delete(v41);
          }
          goto LABEL_108;
        }
LABEL_109:
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      }
      *(_DWORD *)float v4 = 0;
      long long v5 = xmmword_1BB879FD0;
LABEL_10:
      *(_OWORD *)(v4 + 4) = v5;
      float v11 = v4 + 28;
LABEL_108:
      a2[1] = v11;
      return;
    case 2:
      char v13 = (char *)a2[1];
      float v12 = (char *)a2[2];
      if (v13 >= v12)
      {
        uint64_t v34 = 0x6DB6DB6DB6DB6DB7 * ((v13 - (unsigned char *)*a2) >> 2);
        unint64_t v35 = v34 + 1;
        if ((unint64_t)(v34 + 1) > 0x924924924924924) {
          goto LABEL_109;
        }
        unint64_t v36 = 0x6DB6DB6DB6DB6DB7 * ((v12 - (unsigned char *)*a2) >> 2);
        if (2 * v36 > v35) {
          unint64_t v35 = 2 * v36;
        }
        if (v36 >= 0x492492492492492) {
          unint64_t v37 = 0x924924924924924;
        }
        else {
          unint64_t v37 = v35;
        }
        if (v37) {
          unint64_t v37 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUSM::ExclusionZone>>(v37);
        }
        else {
          uint64_t v38 = 0;
        }
        unint64_t v60 = v37 + 28 * v34;
        unint64_t v61 = v37 + 28 * v38;
        *(_DWORD *)unint64_t v60 = 0;
        *(_OWORD *)(v60 + 4) = xmmword_1BB879FB0;
        float v9 = (_DWORD *)(v60 + 28);
        AudioUnitScope v63 = (char *)*a2;
        AudioUnitParameterID v62 = (char *)a2[1];
        if (v62 != *a2)
        {
          do
          {
            long long v64 = *(_OWORD *)(v62 - 28);
            *(_OWORD *)(v60 - 16) = *((_OWORD *)v62 - 1);
            *(_OWORD *)(v60 - 28) = v64;
            v60 -= 28;
            v62 -= 28;
          }
          while (v62 != v63);
          AudioUnitParameterID v62 = (char *)*a2;
        }
        *a2 = (void *)v60;
        a2[1] = v9;
        a2[2] = (void *)v61;
        if (v62) {
          operator delete(v62);
        }
      }
      else
      {
        *(_DWORD *)char v13 = 0;
        *(_OWORD *)(v13 + 4) = xmmword_1BB879FB0;
        float v9 = v13 + 28;
      }
      a2[1] = v9;
      double v65 = a2[2];
      if (v9 >= (_DWORD *)v65)
      {
        uint64_t v66 = 0x6DB6DB6DB6DB6DB7 * (((char *)v9 - (unsigned char *)*a2) >> 2);
        if ((unint64_t)(v66 + 1) <= 0x924924924924924)
        {
          unint64_t v67 = 0x6DB6DB6DB6DB6DB7 * ((v65 - (unsigned char *)*a2) >> 2);
          uint64_t v68 = 2 * v67;
          if (2 * v67 <= v66 + 1) {
            uint64_t v68 = v66 + 1;
          }
          if (v67 >= 0x492492492492492) {
            unint64_t v69 = 0x924924924924924;
          }
          else {
            unint64_t v69 = v68;
          }
          if (v69) {
            unint64_t v69 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUSM::ExclusionZone>>(v69);
          }
          else {
            uint64_t v70 = 0;
          }
          unint64_t v39 = v69 + 28 * v66;
          unint64_t v40 = v69 + 28 * v70;
          *(_DWORD *)unint64_t v39 = 0;
          *(_OWORD *)(v39 + 4) = xmmword_1BB879FC0;
          float v11 = (void *)(v39 + 28);
          unint64_t v73 = (char *)*a2;
          long long v41 = (char *)a2[1];
          if (v41 == *a2) {
            goto LABEL_106;
          }
          do
          {
            long long v74 = *(_OWORD *)(v41 - 28);
            *(_OWORD *)(v39 - 16) = *((_OWORD *)v41 - 1);
            *(_OWORD *)(v39 - 28) = v74;
            v39 -= 28;
            v41 -= 28;
          }
          while (v41 != v73);
          goto LABEL_105;
        }
        goto LABEL_109;
      }
      *float v9 = 0;
      long long v50 = xmmword_1BB879FC0;
      goto LABEL_89;
    case 3:
      uint64_t v8 = (char *)a2[1];
      char v7 = (char *)a2[2];
      if (v8 >= v7)
      {
        uint64_t v19 = 0x6DB6DB6DB6DB6DB7 * ((v8 - (unsigned char *)*a2) >> 2);
        unint64_t v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) > 0x924924924924924) {
          goto LABEL_109;
        }
        unint64_t v21 = 0x6DB6DB6DB6DB6DB7 * ((v7 - (unsigned char *)*a2) >> 2);
        if (2 * v21 > v20) {
          unint64_t v20 = 2 * v21;
        }
        if (v21 >= 0x492492492492492) {
          unint64_t v22 = 0x924924924924924;
        }
        else {
          unint64_t v22 = v20;
        }
        if (v22) {
          unint64_t v22 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUSM::ExclusionZone>>(v22);
        }
        else {
          uint64_t v23 = 0;
        }
        unint64_t v44 = v22 + 28 * v19;
        unint64_t v45 = v22 + 28 * v23;
        *(_DWORD *)unint64_t v44 = 0;
        *(_OWORD *)(v44 + 4) = xmmword_1BB879F90;
        float v9 = (_DWORD *)(v44 + 28);
        unsigned __int8 v47 = (char *)*a2;
        uint64_t v46 = (char *)a2[1];
        if (v46 != *a2)
        {
          do
          {
            long long v48 = *(_OWORD *)(v46 - 28);
            *(_OWORD *)(v44 - 16) = *((_OWORD *)v46 - 1);
            *(_OWORD *)(v44 - 28) = v48;
            v44 -= 28;
            v46 -= 28;
          }
          while (v46 != v47);
          uint64_t v46 = (char *)*a2;
        }
        *a2 = (void *)v44;
        a2[1] = v9;
        a2[2] = (void *)v45;
        if (v46) {
          operator delete(v46);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v8 = 0;
        *(_OWORD *)(v8 + 4) = xmmword_1BB879F90;
        float v9 = v8 + 28;
      }
      a2[1] = v9;
      uint64_t v49 = a2[2];
      if (v9 < (_DWORD *)v49)
      {
        *float v9 = 0;
        long long v50 = xmmword_1BB879FA0;
LABEL_89:
        *(_OWORD *)(v9 + 1) = v50;
        float v11 = v9 + 7;
        goto LABEL_108;
      }
      uint64_t v51 = 0x6DB6DB6DB6DB6DB7 * (((char *)v9 - (unsigned char *)*a2) >> 2);
      if ((unint64_t)(v51 + 1) <= 0x924924924924924)
      {
        unint64_t v52 = 0x6DB6DB6DB6DB6DB7 * ((v49 - (unsigned char *)*a2) >> 2);
        uint64_t v53 = 2 * v52;
        if (2 * v52 <= v51 + 1) {
          uint64_t v53 = v51 + 1;
        }
        if (v52 >= 0x492492492492492) {
          unint64_t v54 = 0x924924924924924;
        }
        else {
          unint64_t v54 = v53;
        }
        if (v54) {
          unint64_t v54 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUSM::ExclusionZone>>(v54);
        }
        else {
          uint64_t v55 = 0;
        }
        unint64_t v39 = v54 + 28 * v51;
        unint64_t v40 = v54 + 28 * v55;
        *(_DWORD *)unint64_t v39 = 0;
        *(_OWORD *)(v39 + 4) = xmmword_1BB879FA0;
        float v11 = (void *)(v39 + 28);
        AudioUnitScope v71 = (char *)*a2;
        long long v41 = (char *)a2[1];
        if (v41 == *a2) {
          goto LABEL_106;
        }
        do
        {
          long long v72 = *(_OWORD *)(v41 - 28);
          *(_OWORD *)(v39 - 16) = *((_OWORD *)v41 - 1);
          *(_OWORD *)(v39 - 28) = v72;
          v39 -= 28;
          v41 -= 28;
        }
        while (v41 != v71);
        goto LABEL_105;
      }
      goto LABEL_109;
    case 4:
      float v4 = (char *)a2[1];
      float v10 = (char *)a2[2];
      if (v4 < v10)
      {
        *(_DWORD *)float v4 = 0;
        long long v5 = xmmword_1BB879F80;
        goto LABEL_10;
      }
      uint64_t v24 = 0x6DB6DB6DB6DB6DB7 * ((v4 - (unsigned char *)*a2) >> 2);
      unint64_t v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) > 0x924924924924924) {
        goto LABEL_109;
      }
      unint64_t v26 = 0x6DB6DB6DB6DB6DB7 * ((v10 - (unsigned char *)*a2) >> 2);
      if (2 * v26 > v25) {
        unint64_t v25 = 2 * v26;
      }
      if (v26 >= 0x492492492492492) {
        unint64_t v27 = 0x924924924924924;
      }
      else {
        unint64_t v27 = v25;
      }
      if (v27) {
        unint64_t v27 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUSM::ExclusionZone>>(v27);
      }
      else {
        uint64_t v28 = 0;
      }
      unint64_t v39 = v27 + 28 * v24;
      unint64_t v40 = v27 + 28 * v28;
      *(_DWORD *)unint64_t v39 = 0;
      *(_OWORD *)(v39 + 4) = xmmword_1BB879F80;
      float v11 = (void *)(v39 + 28);
      int v56 = (char *)*a2;
      long long v41 = (char *)a2[1];
      if (v41 == *a2) {
        goto LABEL_106;
      }
      do
      {
        long long v57 = *(_OWORD *)(v41 - 28);
        *(_OWORD *)(v39 - 16) = *((_OWORD *)v41 - 1);
        *(_OWORD *)(v39 - 28) = v57;
        v39 -= 28;
        v41 -= 28;
      }
      while (v41 != v56);
      goto LABEL_105;
    case 5:
      float v4 = (char *)a2[1];
      BOOL v6 = (char *)a2[2];
      if (v4 < v6)
      {
        *(_DWORD *)float v4 = 0;
        long long v5 = xmmword_1BB879FE0;
        goto LABEL_10;
      }
      uint64_t v14 = 0x6DB6DB6DB6DB6DB7 * ((v4 - (unsigned char *)*a2) >> 2);
      unint64_t v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) > 0x924924924924924) {
        goto LABEL_109;
      }
      unint64_t v16 = 0x6DB6DB6DB6DB6DB7 * ((v6 - (unsigned char *)*a2) >> 2);
      if (2 * v16 > v15) {
        unint64_t v15 = 2 * v16;
      }
      if (v16 >= 0x492492492492492) {
        unint64_t v17 = 0x924924924924924;
      }
      else {
        unint64_t v17 = v15;
      }
      if (v17) {
        unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUSM::ExclusionZone>>(v17);
      }
      else {
        uint64_t v18 = 0;
      }
      unint64_t v39 = v17 + 28 * v14;
      unint64_t v40 = v17 + 28 * v18;
      *(_DWORD *)unint64_t v39 = 0;
      *(_OWORD *)(v39 + 4) = xmmword_1BB879FE0;
      float v11 = (void *)(v39 + 28);
      uint64_t v42 = (char *)*a2;
      long long v41 = (char *)a2[1];
      if (v41 == *a2) {
        goto LABEL_106;
      }
      do
      {
        long long v43 = *(_OWORD *)(v41 - 28);
        *(_OWORD *)(v39 - 16) = *((_OWORD *)v41 - 1);
        *(_OWORD *)(v39 - 28) = v43;
        v39 -= 28;
        v41 -= 28;
      }
      while (v41 != v42);
      goto LABEL_105;
    default:
      return;
  }
}

BOOL AUSM::ExclusionZone::operator==(float *a1, uint64_t a2)
{
  float v2 = *a1;
  if (*(_DWORD *)a1 == *(_DWORD *)a2)
  {
    if (LODWORD(v2) == 1)
    {
      if (a1[1] == *(float *)(a2 + 4)
        && a1[2] == *(float *)(a2 + 8)
        && a1[3] == *(float *)(a2 + 12)
        && a1[4] == *(float *)(a2 + 16)
        && a1[5] == *(float *)(a2 + 20))
      {
        float v3 = a1[6];
        float v4 = *(float *)(a2 + 24);
        return v3 == v4;
      }
    }
    else if (v2 == 0.0 && a1[1] == *(float *)(a2 + 4) && a1[2] == *(float *)(a2 + 8) && a1[3] == *(float *)(a2 + 12))
    {
      float v3 = a1[4];
      float v4 = *(float *)(a2 + 16);
      return v3 == v4;
    }
  }
  return 0;
}

__n128 AUSM::ExclusionZone::getPresetReversed(void **a1, int a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  AUSM::ExclusionZone::getPreset(a2, a1);
  float v4 = (char *)*a1;
  long long v5 = (char *)a1[1];
  BOOL v6 = v5 - 28;
  if (*a1 != v5 && v6 > v4)
  {
    uint64_t v8 = v4 + 28;
    do
    {
      *(_OWORD *)float v11 = *(_OWORD *)(v8 - 28);
      *(_OWORD *)&v11[12] = *((_OWORD *)v8 - 1);
      long long v9 = *(_OWORD *)(v6 + 12);
      *(_OWORD *)(v8 - 28) = *(_OWORD *)v6;
      *((_OWORD *)v8 - 1) = v9;
      *(_OWORD *)(v6 + 12) = *(_OWORD *)&v11[12];
      __n128 result = *(__n128 *)v11;
      *(_OWORD *)BOOL v6 = *(_OWORD *)v11;
      v6 -= 28;
      BOOL v10 = v8 >= v6;
      v8 += 28;
    }
    while (!v10);
  }
  return result;
}

void std::default_delete<std::vector<AUSM::ExclusionZone>>::operator()[abi:ne180100](uint64_t a1)
{
  float v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }

  JUMPOUT(0x1C185D370);
}

char *std::vector<AUSM::ExclusionZone>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x924924924924925) {
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AUSM::ExclusionZone>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[28 * v4];
  return result;
}

float applesauce::CF::at_or<float,char const(&)[13]>(const __CFDictionary *a1, char *a2, uint64_t a3)
{
  CFNumberRef v4 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[13]>(a1, a2);
  if (!v4) {
    return *(float *)a3;
  }
  uint64_t v5 = applesauce::CF::convert_as<float,0>(v4);
  float result = *(float *)&v5;
  if ((v5 & 0xFF00000000) == 0) {
    return *(float *)a3;
  }
  return result;
}

float applesauce::CF::at_or<float,char const(&)[5]>(const __CFDictionary *a1, char *a2, uint64_t a3)
{
  CFNumberRef v4 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[5]>(a1, a2);
  if (!v4) {
    return *(float *)a3;
  }
  uint64_t v5 = applesauce::CF::convert_as<float,0>(v4);
  float result = *(float *)&v5;
  if ((v5 & 0xFF00000000) == 0) {
    return *(float *)a3;
  }
  return result;
}

const void *applesauce::CF::details::at_key<char const(&)[16]>(const __CFDictionary *a1, char *__s)
{
  CFIndex v5 = strlen(__s);
  CFStringRef v6 = CFStringCreateWithBytes(0, (const UInt8 *)__s, v5, 0x8000100u, 0);
  if (!v6)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  if (a1) {
    CFArrayRef Value = CFDictionaryGetValue(a1, v6);
  }
  CFRelease(v6);
  if (!a1) {
    return 0;
  }
  return Value;
}

void sub_1BB3DF078(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t AUSpatialMixerV2::GetProperty(AUSpatialMixerV2 *this, signed int a2, unsigned int a3, unsigned int a4, ausdk **a5)
{
  v224[2] = *MEMORY[0x1E4F143B8];
  if (a2 == 5679) {
    signed int v9 = 3112;
  }
  else {
    signed int v9 = a2;
  }
  if (a3 != 2)
  {
    if (a3 != 1)
    {
      if (a3) {
        return 4294956417;
      }
      BOOL v10 = (AUSpatialMixerV2 *)((char *)this + 3360);
      goto LABEL_25;
    }
    uint64_t v11 = *((void *)this + 15);
    if (v11) {
      LODWORD(v12) = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 24))(v11);
    }
    else {
      uint64_t v12 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
    }
    if (v12 > a4)
    {
      buf.__begin_ = (std::vector<unsigned int>::pointer)((char *)this + 3120);
      LOBYTE(buf.__end_) = 1;
      std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)((char *)this + 3120));
      uint64_t Element = ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 80), a4);
      uint64_t Property = AUSM::Properties::getProperty((AUSM::Properties *)(Element + 672), v9, a5);
      std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&buf);
      goto LABEL_26;
    }
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    char v13 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v24 = (unsigned int *)((char *)this + 3368);
      if (*((char *)this + 3391) < 0) {
        uint64_t v24 = *(unsigned int **)v24;
      }
      LODWORD(buf.__begin_) = 136315906;
      *(std::vector<unsigned int>::pointer *)((char *)&buf.__begin_ + 4) = v24;
      WORD2(buf.__end_) = 2080;
      *(std::vector<unsigned int>::pointer *)((char *)&buf.__end_ + 6) = (std::vector<unsigned int>::pointer)"GetProperty";
      HIWORD(buf.__end_cap_.__value_) = 1024;
      LODWORD(v215) = a4;
      WORD2(v215) = 1024;
      *(_DWORD *)((char *)&v215 + 6) = v9;
      _os_log_debug_impl(&dword_1BB0CE000, v13, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid input scope AudioUnitElement element = %u (property = %u)", (uint8_t *)&buf, 0x22u);
    }
LABEL_22:

    return 4294956419;
  }
  if (a4)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    char v13 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v23 = (unsigned int *)((char *)this + 3368);
      if (*((char *)this + 3391) < 0) {
        uint64_t v23 = *(unsigned int **)v23;
      }
      LODWORD(buf.__begin_) = 136315906;
      *(std::vector<unsigned int>::pointer *)((char *)&buf.__begin_ + 4) = v23;
      WORD2(buf.__end_) = 2080;
      *(std::vector<unsigned int>::pointer *)((char *)&buf.__end_ + 6) = (std::vector<unsigned int>::pointer)"GetProperty";
      HIWORD(buf.__end_cap_.__value_) = 1024;
      LODWORD(v215) = a4;
      WORD2(v215) = 1024;
      *(_DWORD *)((char *)&v215 + 6) = v9;
      _os_log_debug_impl(&dword_1BB0CE000, v13, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid output scope AudioUnitElement element = %u (property = %u)", (uint8_t *)&buf, 0x22u);
    }
    goto LABEL_22;
  }
  BOOL v10 = (AUSM::Properties *)(ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 128), 0) + 224);
LABEL_25:
  uint64_t Property = AUSM::Properties::getProperty(v10, v9, a5);
LABEL_26:
  if (Property == -10879)
  {
    uint64_t Property = 4294956417;
    if (v9 > 5000)
    {
      switch(v9)
      {
        case 5001:
          if (a3)
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            unint64_t v16 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
            {
              float v162 = (unsigned int *)((char *)this + 3368);
              if (*((char *)this + 3391) < 0) {
                float v162 = *(unsigned int **)v162;
              }
              LODWORD(buf.__begin_) = 136315906;
              *(std::vector<unsigned int>::pointer *)((char *)&buf.__begin_ + 4) = v162;
              WORD2(buf.__end_) = 2080;
              *(std::vector<unsigned int>::pointer *)((char *)&buf.__end_ + 6) = (std::vector<unsigned int>::pointer)"GetProperty";
              HIWORD(buf.__end_cap_.__value_) = 1024;
              LODWORD(v215) = a3;
              WORD2(v215) = 1024;
              *(_DWORD *)((char *)&v215 + 6) = 5001;
              _os_log_debug_impl(&dword_1BB0CE000, v16, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitScope scope = %u for global scope property = %u", (uint8_t *)&buf, 0x22u);
            }
            goto LABEL_126;
          }
          AUSpatialMixerV2::GetFileNamesDictionary(this);
          uint64_t Property = 0;
          *a5 = (ausdk *)objc_claimAutoreleasedReturnValue();
          return Property;
        case 5002:
          if (a3 >= 2)
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            unint64_t v16 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
            {
              float v171 = (unsigned int *)((char *)this + 3368);
              if (*((char *)this + 3391) < 0) {
                float v171 = *(unsigned int **)v171;
              }
              LODWORD(buf.__begin_) = 136315906;
              *(std::vector<unsigned int>::pointer *)((char *)&buf.__begin_ + 4) = v171;
              WORD2(buf.__end_) = 2080;
              *(std::vector<unsigned int>::pointer *)((char *)&buf.__end_ + 6) = (std::vector<unsigned int>::pointer)"GetProperty";
              HIWORD(buf.__end_cap_.__value_) = 1024;
              LODWORD(v215) = a3;
              WORD2(v215) = 1024;
              *(_DWORD *)((char *)&v215 + 6) = 5002;
              _os_log_debug_impl(&dword_1BB0CE000, v16, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitScope scope = %u for property = %u", (uint8_t *)&buf, 0x22u);
            }
            goto LABEL_126;
          }
          if (a3 == 1)
          {
            uint64_t v25 = *((void *)this + 15);
            if (v25) {
              LODWORD(v26) = (*(uint64_t (**)(uint64_t))(*(void *)v25 + 24))(v25);
            }
            else {
              uint64_t v26 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
            }
            if (v26 <= a4)
            {
              if (getAUSMV2Log(void)::onceToken != -1) {
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
              }
              char v13 = (id)getAUSMV2Log(void)::gLog;
              if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
              {
                float v178 = (unsigned int *)((char *)this + 3368);
                if (*((char *)this + 3391) < 0) {
                  float v178 = *(unsigned int **)v178;
                }
                LODWORD(buf.__begin_) = 136315906;
                *(std::vector<unsigned int>::pointer *)((char *)&buf.__begin_ + 4) = v178;
                WORD2(buf.__end_) = 2080;
                *(std::vector<unsigned int>::pointer *)((char *)&buf.__end_ + 6) = (std::vector<unsigned int>::pointer)"GetProperty";
                HIWORD(buf.__end_cap_.__value_) = 1024;
                LODWORD(v215) = a4;
                WORD2(v215) = 1024;
                *(_DWORD *)((char *)&v215 + 6) = 5002;
                _os_log_debug_impl(&dword_1BB0CE000, v13, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitElement element = %u for input scope property = %u", (uint8_t *)&buf, 0x22u);
              }
              goto LABEL_22;
            }
          }
          uint64_t v132 = [MEMORY[0x1E4F1CA48] array];
          if (a3)
          {
            uint64_t v133 = *((void *)this + 15);
            if (v133) {
              LODWORD(v134) = (*(uint64_t (**)(uint64_t))(*(void *)v133 + 24))(v133);
            }
            else {
              uint64_t v134 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
            }
            if (v134 <= a4)
            {

              return 4294956419;
            }
            uint64_t v144 = ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 80), a4);
            *(void *)&double v145 = AUSpatialMixerV2InputElement::GetChannelParameters((AUSpatialMixerV2InputElement *)&buf, v144).n128_u64[0];
            begiuint64_t n = buf.__begin_;
            std::vector<unsigned int>::pointer end = buf.__end_;
            if (buf.__begin_ != buf.__end_)
            {
              std::vector<unsigned int>::pointer v148 = buf.__begin_;
              do
              {
                v149 = objc_msgSend(MEMORY[0x1E4F1C9B8], "dataWithBytes:length:", v148, 32, v145);
                [v132 addObject:v149];

                v148 += 8;
              }
              while (v148 != end);
            }
            if (begin) {
              operator delete(begin);
            }
          }
          else
          {
            unsigned __int8 v135 = (char *)*((void *)this + 379);
            int v136 = (char *)this + 3040;
            if (v135 != (char *)this + 3040)
            {
              do
              {
                int v137 = [MEMORY[0x1E4F1C9B8] dataWithBytes:v135 + 32 length:32];
                [v132 addObject:v137];

                unsigned __int8 v138 = (char *)*((void *)v135 + 1);
                if (v138)
                {
                  do
                  {
                    BOOL v139 = v138;
                    unsigned __int8 v138 = *(char **)v138;
                  }
                  while (v138);
                }
                else
                {
                  do
                  {
                    BOOL v139 = (char *)*((void *)v135 + 2);
                    _ZF = *(void *)v139 == (void)v135;
                    unsigned __int8 v135 = v139;
                  }
                  while (!_ZF);
                }
                unsigned __int8 v135 = v139;
              }
              while (v139 != v136);
            }
          }
          uint64_t Property = 0;
          *a5 = (ausdk *)v132;
          return Property;
        case 5003:
        case 5007:
        case 5008:
        case 5009:
          return Property;
        case 5004:
        case 5005:
        case 5006:
          if (*((unsigned char *)this + 5968)) {
            return 0;
          }
          if (a3)
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            unint64_t v16 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
            {
              unsigned int v161 = (unsigned int *)((char *)this + 3368);
              if (*((char *)this + 3391) < 0) {
                unsigned int v161 = *(unsigned int **)v161;
              }
              LODWORD(buf.__begin_) = 136315906;
              *(std::vector<unsigned int>::pointer *)((char *)&buf.__begin_ + 4) = v161;
              WORD2(buf.__end_) = 2080;
              *(std::vector<unsigned int>::pointer *)((char *)&buf.__end_ + 6) = (std::vector<unsigned int>::pointer)"GetProperty";
              HIWORD(buf.__end_cap_.__value_) = 1024;
              LODWORD(v215) = a3;
              WORD2(v215) = 1024;
              *(_DWORD *)((char *)&v215 + 6) = v9;
              _os_log_debug_impl(&dword_1BB0CE000, v16, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitScope scope = %u for global scope property = %u", (uint8_t *)&buf, 0x22u);
            }
            goto LABEL_126;
          }
          unint64_t v31 = [MEMORY[0x1E4F1CA48] array];
          if (v9 == 5006) {
            int v32 = 1;
          }
          else {
            int v32 = 3;
          }
          if (v9 == 5005) {
            int v33 = 2;
          }
          else {
            int v33 = v32;
          }
          AUSM::SoundStage::getSoundStageParameters((AUSM::SoundStage *)&buf, (uint64_t)this + 7808, v33);
          std::vector<unsigned int>::pointer v34 = buf.__begin_;
          std::vector<unsigned int>::pointer v35 = buf.__end_;
          if (buf.__begin_ != buf.__end_)
          {
            std::vector<unsigned int>::pointer v36 = buf.__begin_;
            do
            {
              unint64_t v37 = [MEMORY[0x1E4F1C9B8] dataWithBytes:v36 length:32];
              [v31 addObject:v37];

              v36 += 8;
            }
            while (v36 != v35);
          }
          *a5 = (ausdk *)v31;
          if (v34) {
LABEL_259:
          }
            operator delete(v34);
          return 0;
        case 5010:
          if (a3)
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            unint64_t v16 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
            {
              float v163 = (unsigned int *)((char *)this + 3368);
              if (*((char *)this + 3391) < 0) {
                float v163 = *(unsigned int **)v163;
              }
              LODWORD(buf.__begin_) = 136315906;
              *(std::vector<unsigned int>::pointer *)((char *)&buf.__begin_ + 4) = v163;
              WORD2(buf.__end_) = 2080;
              *(std::vector<unsigned int>::pointer *)((char *)&buf.__end_ + 6) = (std::vector<unsigned int>::pointer)"GetProperty";
              HIWORD(buf.__end_cap_.__value_) = 1024;
              LODWORD(v215) = a3;
              WORD2(v215) = 1024;
              *(_DWORD *)((char *)&v215 + 6) = 5010;
              _os_log_debug_impl(&dword_1BB0CE000, v16, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitScope scope = %u for global scope property = %u", (uint8_t *)&buf, 0x22u);
            }
            goto LABEL_126;
          }
          _X0 = 0;
          _X1 = 0;
          _X3 = 0;
          __asm { CASPAL          X2, X3, X0, X1, [X8] }
          float32x2_t v46 = _X2;
          __asm { CASPAL          X2, X3, X0, X1, [X8] }
          int32x4_t v48 = (int32x4_t)vnegq_f32((float32x4_t)_X2);
          int8x16_t v49 = (int8x16_t)vtrn2q_s32((int32x4_t)_X2, vtrn1q_s32((int32x4_t)_X2, v48));
          float32x4_t v50 = (float32x4_t)vrev64q_s32((int32x4_t)_X2);
          v50.i32[0] = v48.i32[1];
          v50.i32[3] = v48.i32[2];
          *(float32x4_t *)&buf.__begin_ = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32((float32x4_t)_X2, (float32x4_t)(unint64_t)v46, 3), v50, (float32x4_t)(unint64_t)v46, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)_X2, (int8x16_t)v48, 8uLL), v46, 1), (float32x4_t)vextq_s8(v49, v49, 8uLL), v46.f32[0]));
          __asm { CASPAL          X0, X1, X0, X1, [X8] }
          float32x4_t v185 = (float32x4_t)_X0;
          float v52 = COERCE_FLOAT(atomic_load((unsigned int *)this + 882));
          if (v52 >= 0.0)
          {
            float32x4_t v53 = vmulq_f32(v185, v185);
            float v54 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v53, 2), vaddq_f32(v53, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v53.f32, 1))).f32[0]);
            if (v54 > 0.0 && (float)(v52 / v54) < 1.0) {
              float32x4_t v185 = vmulq_n_f32(v185, v52 / v54);
            }
          }
          float v187 = (char *)this + 3120;
          char v188 = 1;
          std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)((char *)this + 3120));
          uint64_t v55 = *((void *)this + 15);
          if (v55) {
            LODWORD(v56) = (*(uint64_t (**)(uint64_t))(*(void *)v55 + 24))(v55);
          }
          else {
            uint64_t v56 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
          }
          uint64_t v113 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:v56];
          if (v56)
          {
            unsigned int v114 = 0;
            do
            {
              uint64_t v115 = ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 80), v114);
              AUSpatialMixerV2InputElement::GetGeometry((AUSpatialMixerV2InputElement *)&v202, v115);
              uint64_t v116 = (void *)v202;
              CFTypeRef v202 = 0;
              [v113 addObject:v116];

              ++v114;
            }
            while (v56 != v114);
          }
          CFTypeRef v202 = 0;
          ausdk::AUBase::SaveState(this, (ausdk **)&v202);
          v204[0] = @"PresetLoaded";
          uint64_t v117 = NSNumber;
          unsigned __int8 v118 = atomic_load((unsigned __int8 *)this + 3008);
          uint64_t v205 = [v117 numberWithBool:v118 & 1];
          v204[1] = @"Initialized";
          float v182 = (void *)v205;
          uint64_t v206 = [NSNumber numberWithBool:*((unsigned __int8 *)this + 17)];
          v204[2] = @"Reinitialized";
          uint64_t v119 = NSNumber;
          unsigned __int8 v120 = atomic_load((unsigned __int8 *)this + 3009);
          CFNumberRef v181 = (void *)v206;
          unsigned int v121 = [v119 numberWithBool:v120 & 1];
          float v207 = v121;
          v204[3] = @"ChannelLayoutChanged";
          uint64_t v122 = NSNumber;
          unsigned __int8 v123 = atomic_load((unsigned __int8 *)this + 3010);
          id v124 = [v122 numberWithBool:v123 & 1];
          float v208 = v124;
          v204[4] = @"PositionParametersChanged";
          unint64_t v125 = NSNumber;
          unsigned __int8 v126 = atomic_load((unsigned __int8 *)this + 3011);
          unint64_t v127 = [v125 numberWithBool:v126 & 1];
          uint64_t v209 = v127;
          v204[5] = @"HeadOrientationQuaternion";
          uint64_t v128 = [MEMORY[0x1E4F1C9B8] dataWithBytes:&buf length:16];
          float v210 = v128;
          v204[6] = @"ListenerPosition";
          float v129 = [MEMORY[0x1E4F1C9B8] dataWithBytes:&v185 length:12];
          unsigned int v130 = (void *)v202;
          long long v211 = v129;
          CFTypeRef v212 = v202;
          v204[7] = @"AllParameters";
          v204[8] = @"Geometry";
          int v213 = v113;
          uint64_t v131 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v205 forKeys:v204 count:9];

          atomic_store(0, (unsigned __int8 *)this + 3008);
          atomic_store(0, (unsigned __int8 *)this + 3009);
          atomic_store(0, (unsigned __int8 *)this + 3010);
          atomic_store(0, (unsigned __int8 *)this + 3011);
          *a5 = (ausdk *)v131;

          goto LABEL_225;
        case 5011:
          if (!a3)
          {
            ausdk::AUBase::SaveState(this, a5);
            return 0;
          }
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          unint64_t v16 = (id)getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
          {
            float v164 = (unsigned int *)((char *)this + 3368);
            if (*((char *)this + 3391) < 0) {
              float v164 = *(unsigned int **)v164;
            }
            LODWORD(buf.__begin_) = 136315906;
            *(std::vector<unsigned int>::pointer *)((char *)&buf.__begin_ + 4) = v164;
            WORD2(buf.__end_) = 2080;
            *(std::vector<unsigned int>::pointer *)((char *)&buf.__end_ + 6) = (std::vector<unsigned int>::pointer)"GetProperty";
            HIWORD(buf.__end_cap_.__value_) = 1024;
            LODWORD(v215) = a3;
            WORD2(v215) = 1024;
            *(_DWORD *)((char *)&v215 + 6) = 5011;
            _os_log_debug_impl(&dword_1BB0CE000, v16, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitScope scope = %u for global scope property = %u", (uint8_t *)&buf, 0x22u);
          }
          goto LABEL_126;
        default:
          if (v9 == 5677)
          {
            unint64_t v21 = (void *)*((void *)this + 327);
            unint64_t v22 = applesauce::dispatch::v1::queue::get(v21);
            dispatch_sync(v22, &__block_literal_global_238);

            return 0;
          }
          if (v9 != 5683) {
            return Property;
          }
          if (a3)
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            unint64_t v16 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
            {
              float v170 = (unsigned int *)((char *)this + 3368);
              if (*((char *)this + 3391) < 0) {
                float v170 = *(unsigned int **)v170;
              }
              LODWORD(buf.__begin_) = 136315906;
              *(std::vector<unsigned int>::pointer *)((char *)&buf.__begin_ + 4) = v170;
              WORD2(buf.__end_) = 2080;
              *(std::vector<unsigned int>::pointer *)((char *)&buf.__end_ + 6) = (std::vector<unsigned int>::pointer)"GetProperty";
              HIWORD(buf.__end_cap_.__value_) = 1024;
              LODWORD(v215) = a3;
              WORD2(v215) = 1024;
              *(_DWORD *)((char *)&v215 + 6) = 5683;
              _os_log_debug_impl(&dword_1BB0CE000, v16, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitScope scope = %u for global scope property = %u", (uint8_t *)&buf, 0x22u);
            }
            goto LABEL_126;
          }
          float v187 = (char *)this + 3120;
          char v188 = 1;
          std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)((char *)this + 3120));
          unsigned int v87 = 0;
          float32x4_t v185 = 0uLL;
          unint64_t v186 = 0;
          while (1)
          {
            uint64_t v88 = *((void *)this + 15);
            if (v88) {
              LODWORD(v89) = (*(uint64_t (**)(uint64_t))(*(void *)v88 + 24))(v88);
            }
            else {
              uint64_t v89 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
            }
            if (v87 >= v89) {
              break;
            }
            uint64_t v90 = ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 80), v87);
            AUSpatialMixerV2InputElement::GetGeometry((AUSpatialMixerV2InputElement *)&v202, v90);
            uint64_t v91 = (void *)v185.i64[1];
            if (v185.i64[1] >= v186)
            {
              uint64_t v92 = v185.i64[0];
              uint64_t v93 = (v185.i64[1] - v185.i64[0]) >> 3;
              unint64_t v94 = v93 + 1;
              if ((unint64_t)(v93 + 1) >> 61) {
                std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v95 = v186 - v185.i64[0];
              if ((uint64_t)(v186 - v185.i64[0]) >> 2 > v94) {
                unint64_t v94 = v95 >> 2;
              }
              if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v96 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v96 = v94;
              }
              *((void *)&v215 + 1) = &v186;
              if (v96)
              {
                unint64_t v96 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v96);
                uint64_t v91 = (void *)v185.i64[1];
                uint64_t v92 = v185.i64[0];
              }
              else
              {
                uint64_t v97 = 0;
              }
              uint64_t v98 = v96 + 8 * v93;
              unint64_t v99 = v96 + 8 * v97;
              *(void *)&long long v215 = v99;
              *(void *)uint64_t v98 = v202;
              value = (unsigned int *)(v98 + 8);
              CFTypeRef v202 = 0;
              buf.__end_cap_.__value_ = (unsigned int *)(v98 + 8);
              if (v91 == (void *)v92)
              {
                CFTypeRef v102 = 0;
              }
              else
              {
                do
                {
                  uint64_t v101 = *--v91;
                  *(void *)(v98 - 8) = v101;
                  v98 -= 8;
                  *uint64_t v91 = 0;
                }
                while (v91 != (void *)v92);
                value = buf.__end_cap_.__value_;
                unint64_t v99 = v215;
                CFTypeRef v102 = v202;
              }
              float32x4_t v103 = v185;
              v185.i64[0] = v98;
              *(float32x4_t *)&buf.__end_ = v103;
              unint64_t v104 = v186;
              unint64_t v186 = v99;
              *(void *)&long long v215 = v104;
              buf.__begin_ = (std::vector<unsigned int>::pointer)v103.i64[0];
              std::__split_buffer<applesauce::CF::ArrayRef>::~__split_buffer((uint64_t)&buf);
              v185.i64[1] = (uint64_t)value;
              if (v102) {
                CFRelease(v102);
              }
            }
            else
            {
              *(void *)v185.i64[1] = v202;
              v185.i64[1] = (uint64_t)(v91 + 1);
            }
            ++v87;
          }
          CFArrayRef v183 = applesauce::CF::details::make_CFArrayRef<applesauce::CF::ArrayRef>((uint64_t **)&v185);
          applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[11],applesauce::CF::ArrayRef>((applesauce::CF::TypeRef *)&v202, "InputArray", (const void **)&v183);
          buf.__begin_ = (std::vector<unsigned int>::pointer)&v202;
          buf.__end_ = (std::vector<unsigned int>::pointer)1;
          CFDictionaryRef CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)&buf);
          CFDictionaryRef v184 = CFDictionaryRef;
          if (cf) {
            CFRelease(cf);
          }
          if (v202) {
            CFRelease(v202);
          }
          applesauce::CF::ArrayRef::~ArrayRef((const void **)&v183);
          CFDictionaryRef v184 = 0;
          *a5 = CFDictionaryRef;
          applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&v184);
          buf.__begin_ = (std::vector<unsigned int>::pointer)&v185;
          std::vector<applesauce::CF::ArrayRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
LABEL_225:
          p_std::vector<unsigned int> buf = (std::vector<unsigned int> *)&v187;
          break;
      }
LABEL_226:
      std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)p_buf);
      return 0;
    }
    if (v9 > 3214)
    {
      switch(v9)
      {
        case 3215:
          if (a3 >= 2)
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            unint64_t v16 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v174 = (unsigned int *)((char *)this + 3368);
              if (*((char *)this + 3391) < 0) {
                uint64_t v174 = *(unsigned int **)v174;
              }
              LODWORD(buf.__begin_) = 136315906;
              *(std::vector<unsigned int>::pointer *)((char *)&buf.__begin_ + 4) = v174;
              WORD2(buf.__end_) = 2080;
              *(std::vector<unsigned int>::pointer *)((char *)&buf.__end_ + 6) = (std::vector<unsigned int>::pointer)"GetProperty";
              HIWORD(buf.__end_cap_.__value_) = 1024;
              LODWORD(v215) = a3;
              WORD2(v215) = 1024;
              *(_DWORD *)((char *)&v215 + 6) = 3215;
              _os_log_debug_impl(&dword_1BB0CE000, v16, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitScope scope = %u for property = %u", (uint8_t *)&buf, 0x22u);
            }
            break;
          }
          if (a3 == 1)
          {
            uint64_t v27 = *((void *)this + 15);
            if (v27) {
              LODWORD(v28) = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 24))(v27);
            }
            else {
              uint64_t v28 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
            }
            if (v28 <= a4)
            {
              if (getAUSMV2Log(void)::onceToken != -1) {
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
              }
              char v13 = (id)getAUSMV2Log(void)::gLog;
              if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
              {
                CFNumberRef v179 = (unsigned int *)((char *)this + 3368);
                if (*((char *)this + 3391) < 0) {
                  CFNumberRef v179 = *(unsigned int **)v179;
                }
                LODWORD(buf.__begin_) = 136315906;
                *(std::vector<unsigned int>::pointer *)((char *)&buf.__begin_ + 4) = v179;
                WORD2(buf.__end_) = 2080;
                *(std::vector<unsigned int>::pointer *)((char *)&buf.__end_ + 6) = (std::vector<unsigned int>::pointer)"GetProperty";
                HIWORD(buf.__end_cap_.__value_) = 1024;
                LODWORD(v215) = a4;
                WORD2(v215) = 1024;
                *(_DWORD *)((char *)&v215 + 6) = 3215;
                _os_log_debug_impl(&dword_1BB0CE000, v13, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitElement element = %u for input scope property = %u", (uint8_t *)&buf, 0x22u);
              }
              goto LABEL_22;
            }
            uint64_t v140 = ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 80), a4);
            int v141 = *(uint64_t **)(v140 + 248);
            if (*(uint64_t **)(v140 + 256) == v141) {
              return 0;
            }
            AUSpatialMixerV2ChannelProcessor::getDecorrFilterLengthsOnReverbSend(&buf, *v141);
          }
          else
          {
            uint64_t v106 = ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 80), 0);
            uint64_t v107 = *(void *)(v106 + 248);
            if (a4 >= (unint64_t)((*(void *)(v106 + 256) - v107) >> 3)) {
              return 0;
            }
            AUSpatialMixerV2ChannelProcessor::getDecorrFilterLengthsOnReverbSend(&buf, *(void *)(v107 + 8 * a4));
          }
          goto LABEL_257;
        case 3216:
          if (a3 >= 2)
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            unint64_t v16 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
            {
              CFNumberRef v175 = (unsigned int *)((char *)this + 3368);
              if (*((char *)this + 3391) < 0) {
                CFNumberRef v175 = *(unsigned int **)v175;
              }
              LODWORD(buf.__begin_) = 136315906;
              *(std::vector<unsigned int>::pointer *)((char *)&buf.__begin_ + 4) = v175;
              WORD2(buf.__end_) = 2080;
              *(std::vector<unsigned int>::pointer *)((char *)&buf.__end_ + 6) = (std::vector<unsigned int>::pointer)"GetProperty";
              HIWORD(buf.__end_cap_.__value_) = 1024;
              LODWORD(v215) = a3;
              WORD2(v215) = 1024;
              *(_DWORD *)((char *)&v215 + 6) = 3216;
              _os_log_debug_impl(&dword_1BB0CE000, v16, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitScope scope = %u for property = %u", (uint8_t *)&buf, 0x22u);
            }
            break;
          }
          if (a3 == 1)
          {
            uint64_t v29 = *((void *)this + 15);
            if (v29) {
              LODWORD(v30) = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 24))(v29);
            }
            else {
              uint64_t v30 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
            }
            if (v30 <= a4)
            {
              if (getAUSMV2Log(void)::onceToken != -1) {
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
              }
              char v13 = (id)getAUSMV2Log(void)::gLog;
              if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
              {
                float v180 = (unsigned int *)((char *)this + 3368);
                if (*((char *)this + 3391) < 0) {
                  float v180 = *(unsigned int **)v180;
                }
                LODWORD(buf.__begin_) = 136315906;
                *(std::vector<unsigned int>::pointer *)((char *)&buf.__begin_ + 4) = v180;
                WORD2(buf.__end_) = 2080;
                *(std::vector<unsigned int>::pointer *)((char *)&buf.__end_ + 6) = (std::vector<unsigned int>::pointer)"GetProperty";
                HIWORD(buf.__end_cap_.__value_) = 1024;
                LODWORD(v215) = a4;
                WORD2(v215) = 1024;
                *(_DWORD *)((char *)&v215 + 6) = 3216;
                _os_log_debug_impl(&dword_1BB0CE000, v13, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitElement element = %u for input scope property = %u", (uint8_t *)&buf, 0x22u);
              }
              goto LABEL_22;
            }
            uint64_t v142 = ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 80), a4);
            uint32_t v143 = *(uint64_t **)(v142 + 248);
            if (*(uint64_t **)(v142 + 256) == v143) {
              return 0;
            }
            AUSpatialMixerV2ChannelProcessor::getDecorrFilterCoeffsOnReverbSend((AUSpatialMixerV2ChannelProcessor *)&buf, *v143);
          }
          else
          {
            uint64_t v108 = ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 80), 0);
            uint64_t v109 = *(void *)(v108 + 248);
            if (a4 >= (unint64_t)((*(void *)(v108 + 256) - v109) >> 3)) {
              return 0;
            }
            AUSpatialMixerV2ChannelProcessor::getDecorrFilterCoeffsOnReverbSend((AUSpatialMixerV2ChannelProcessor *)&buf, *(void *)(v109 + 8 * a4));
          }
LABEL_257:
          std::vector<unsigned int>::pointer v34 = buf.__begin_;
          memcpy(a5, buf.__begin_, (char *)buf.__end_ - (char *)buf.__begin_);
          if (!v34) {
            return 0;
          }
          buf.__end_ = v34;
          goto LABEL_259;
        case 3217:
        case 3218:
        case 3219:
        case 3220:
        case 3221:
        case 3223:
        case 3224:
          return Property;
        case 3222:
          if (!a3)
          {
            long long v57 = (_DWORD *)ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 80), 0);
            AUSpatialMixerV2InputElement::GetParametricProcessorParams((AUSpatialMixerV2InputElement *)&buf, v57);
            unsigned __int8 v58 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(&buf);
            *(float *)a5 = applesauce::CF::details::find_at_key<float,char const(&)[5]>(*v58);
            long long v59 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(&buf);
            *((float *)a5 + 1) = applesauce::CF::details::find_at_key<float,char const(&)[16]>(*v59);
            unint64_t v60 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(&buf);
            *((float *)a5 + 2) = applesauce::CF::details::find_at_key<float,char const(&)[19]>(*v60);
            unint64_t v61 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(&buf);
            *((float *)a5 + 3) = applesauce::CF::details::find_at_key<float,char const(&)[13]>(*v61, "AnalysisType");
            AudioUnitParameterID v62 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(&buf);
            *((float *)a5 + 4) = applesauce::CF::details::find_at_key<float,char const(&)[10]>(*v62);
            AudioUnitScope v63 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(&buf);
            *((float *)a5 + 5) = applesauce::CF::details::find_at_key<float,char const(&)[8]>(*v63);
            applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&buf.__begin_);
            return 0;
          }
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          unint64_t v16 = (id)getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
          {
            unsigned int v165 = (unsigned int *)((char *)this + 3368);
            if (*((char *)this + 3391) < 0) {
              unsigned int v165 = *(unsigned int **)v165;
            }
            LODWORD(buf.__begin_) = 136315906;
            *(std::vector<unsigned int>::pointer *)((char *)&buf.__begin_ + 4) = v165;
            WORD2(buf.__end_) = 2080;
            *(std::vector<unsigned int>::pointer *)((char *)&buf.__end_ + 6) = (std::vector<unsigned int>::pointer)"GetProperty";
            HIWORD(buf.__end_cap_.__value_) = 1024;
            LODWORD(v215) = a3;
            WORD2(v215) = 1024;
            *(_DWORD *)((char *)&v215 + 6) = 3222;
            _os_log_debug_impl(&dword_1BB0CE000, v16, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitScope scope = %u for global scope property = %u", (uint8_t *)&buf, 0x22u);
          }
          break;
        case 3225:
          if (a3 != 1)
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            unint64_t v16 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
            {
              float v173 = (unsigned int *)((char *)this + 3368);
              if (*((char *)this + 3391) < 0) {
                float v173 = *(unsigned int **)v173;
              }
              LODWORD(buf.__begin_) = 136315906;
              *(std::vector<unsigned int>::pointer *)((char *)&buf.__begin_ + 4) = v173;
              WORD2(buf.__end_) = 2080;
              *(std::vector<unsigned int>::pointer *)((char *)&buf.__end_ + 6) = (std::vector<unsigned int>::pointer)"GetProperty";
              HIWORD(buf.__end_cap_.__value_) = 1024;
              LODWORD(v215) = a3;
              WORD2(v215) = 1024;
              *(_DWORD *)((char *)&v215 + 6) = 3225;
              _os_log_debug_impl(&dword_1BB0CE000, v16, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitScope scope = %u for input scope property = %u", (uint8_t *)&buf, 0x22u);
            }
            break;
          }
          uint64_t v19 = *((void *)this + 15);
          if (v19) {
            LODWORD(v20) = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 24))(v19);
          }
          else {
            uint64_t v20 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
          }
          if (v20 <= a4)
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            char v13 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
            {
              CFNumberRef v177 = (unsigned int *)((char *)this + 3368);
              if (*((char *)this + 3391) < 0) {
                CFNumberRef v177 = *(unsigned int **)v177;
              }
              LODWORD(buf.__begin_) = 136315906;
              *(std::vector<unsigned int>::pointer *)((char *)&buf.__begin_ + 4) = v177;
              WORD2(buf.__end_) = 2080;
              *(std::vector<unsigned int>::pointer *)((char *)&buf.__end_ + 6) = (std::vector<unsigned int>::pointer)"GetProperty";
              HIWORD(buf.__end_cap_.__value_) = 1024;
              LODWORD(v215) = a4;
              WORD2(v215) = 1024;
              *(_DWORD *)((char *)&v215 + 6) = 3225;
              _os_log_debug_impl(&dword_1BB0CE000, v13, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitElement element = %u for input scope property = %u", (uint8_t *)&buf, 0x22u);
            }
            goto LABEL_22;
          }
          uint64_t v111 = ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 80), a4);
          AUSM::InputGeometry::getExclusionZones((AUSM::InputGeometry *)&buf, v111 + 1296);
          std::vector<unsigned int>::pointer v34 = buf.__begin_;
          AUSM::ExclusionZone::exclusionZonesToDictionary((CFDictionaryRef *)&buf, buf.__begin_, buf.__end_);
          *a5 = (ausdk *)CFRetain(buf.__begin_);
          applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&buf.__begin_);
          if (v34) {
            goto LABEL_259;
          }
          return 0;
        case 3226:
          if (a3 != 1)
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            unint64_t v16 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
            {
              float v172 = (unsigned int *)((char *)this + 3368);
              if (*((char *)this + 3391) < 0) {
                float v172 = *(unsigned int **)v172;
              }
              LODWORD(buf.__begin_) = 136315906;
              *(std::vector<unsigned int>::pointer *)((char *)&buf.__begin_ + 4) = v172;
              WORD2(buf.__end_) = 2080;
              *(std::vector<unsigned int>::pointer *)((char *)&buf.__end_ + 6) = (std::vector<unsigned int>::pointer)"GetProperty";
              HIWORD(buf.__end_cap_.__value_) = 1024;
              LODWORD(v215) = a3;
              WORD2(v215) = 1024;
              *(_DWORD *)((char *)&v215 + 6) = 3226;
              _os_log_debug_impl(&dword_1BB0CE000, v16, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitScope scope = %u for input scope property = %u", (uint8_t *)&buf, 0x22u);
            }
            break;
          }
          uint64_t v17 = *((void *)this + 15);
          if (v17) {
            LODWORD(v18) = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 24))(v17);
          }
          else {
            uint64_t v18 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
          }
          if (v18 <= a4)
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            char v13 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
            {
              float v176 = (unsigned int *)((char *)this + 3368);
              if (*((char *)this + 3391) < 0) {
                float v176 = *(unsigned int **)v176;
              }
              LODWORD(buf.__begin_) = 136315906;
              *(std::vector<unsigned int>::pointer *)((char *)&buf.__begin_ + 4) = v176;
              WORD2(buf.__end_) = 2080;
              *(std::vector<unsigned int>::pointer *)((char *)&buf.__end_ + 6) = (std::vector<unsigned int>::pointer)"GetProperty";
              HIWORD(buf.__end_cap_.__value_) = 1024;
              LODWORD(v215) = a4;
              WORD2(v215) = 1024;
              *(_DWORD *)((char *)&v215 + 6) = 3226;
              _os_log_debug_impl(&dword_1BB0CE000, v13, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitElement element = %u for input scope property = %u", (uint8_t *)&buf, 0x22u);
            }
            goto LABEL_22;
          }
          uint64_t v110 = ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 80), a4);
          AUSM::InputGeometry::getExclusionZones((AUSM::InputGeometry *)&buf, v110 + 1296);
          std::vector<unsigned int>::pointer v34 = buf.__begin_;
          AUSM::ExclusionZone::arrayFromZones(buf.__begin_, buf.__end_, (uint64_t)a5);
          if (v34) {
            goto LABEL_259;
          }
          return 0;
        default:
          if (v9 == 3268)
          {
            if (!a3)
            {
              AUSM::GlobalGeometry::getTuningParameters((AUSM::GlobalGeometry *)&buf, (uint64_t)this + 7808);
              std::vector<unsigned int>::pointer v86 = buf.__begin_;
              buf.__begin_ = 0;
              *a5 = (ausdk *)v86;
              std::pair<applesauce::CF::ArrayRef,AUSM::GlobalGeometry::DataType>::~pair((const void **)&buf.__begin_);
              return 0;
            }
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            unint64_t v16 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
            {
              int v168 = (unsigned int *)((char *)this + 3368);
              if (*((char *)this + 3391) < 0) {
                int v168 = *(unsigned int **)v168;
              }
              LODWORD(buf.__begin_) = 136315906;
              *(std::vector<unsigned int>::pointer *)((char *)&buf.__begin_ + 4) = v168;
              WORD2(buf.__end_) = 2080;
              *(std::vector<unsigned int>::pointer *)((char *)&buf.__end_ + 6) = (std::vector<unsigned int>::pointer)"GetProperty";
              HIWORD(buf.__end_cap_.__value_) = 1024;
              LODWORD(v215) = a3;
              WORD2(v215) = 1024;
              *(_DWORD *)((char *)&v215 + 6) = 3268;
              _os_log_debug_impl(&dword_1BB0CE000, v16, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitScope scope = %u for global scope property = %u", (uint8_t *)&buf, 0x22u);
            }
          }
          else
          {
            if (v9 != 3270) {
              return Property;
            }
            if (!a3)
            {
              uint64_t Property = 0;
              *(_DWORD *)a5 = AUSM::IRManager::hasRoomCongruenceAttributes((AUSpatialMixerV2 *)((char *)this + 6176));
              return Property;
            }
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            unint64_t v16 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
            {
              int v169 = (unsigned int *)((char *)this + 3368);
              if (*((char *)this + 3391) < 0) {
                int v169 = *(unsigned int **)v169;
              }
              LODWORD(buf.__begin_) = 136315906;
              *(std::vector<unsigned int>::pointer *)((char *)&buf.__begin_ + 4) = v169;
              WORD2(buf.__end_) = 2080;
              *(std::vector<unsigned int>::pointer *)((char *)&buf.__end_ + 6) = (std::vector<unsigned int>::pointer)"GetProperty";
              HIWORD(buf.__end_cap_.__value_) = 1024;
              LODWORD(v215) = a3;
              WORD2(v215) = 1024;
              *(_DWORD *)((char *)&v215 + 6) = 3270;
              _os_log_debug_impl(&dword_1BB0CE000, v16, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitScope scope = %u for global scope property = %u", (uint8_t *)&buf, 0x22u);
            }
          }
          break;
      }
LABEL_126:

      return 4294956430;
    }
    if (v9 == 3107)
    {
      if (a3)
      {
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        unint64_t v16 = (id)getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
        {
          BOOL v166 = (unsigned int *)((char *)this + 3368);
          if (*((char *)this + 3391) < 0) {
            BOOL v166 = *(unsigned int **)v166;
          }
          LODWORD(buf.__begin_) = 136315906;
          *(std::vector<unsigned int>::pointer *)((char *)&buf.__begin_ + 4) = v166;
          WORD2(buf.__end_) = 2080;
          *(std::vector<unsigned int>::pointer *)((char *)&buf.__end_ + 6) = (std::vector<unsigned int>::pointer)"GetProperty";
          HIWORD(buf.__end_cap_.__value_) = 1024;
          LODWORD(v215) = a3;
          WORD2(v215) = 1024;
          *(_DWORD *)((char *)&v215 + 6) = 3107;
          _os_log_debug_impl(&dword_1BB0CE000, v16, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitScope scope = %u for global scope property = %u", (uint8_t *)&buf, 0x22u);
        }
        goto LABEL_126;
      }
      long long v64 = (const void **)((char *)this + 3016);
      if (*((void *)this + 377))
      {
        double v65 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->((void *)this + 377);
        LODWORD(v184) = 1101004800;
        LODWORD(v202) = applesauce::CF::at_or<float,char const(&)[12]>(*v65, (uint64_t)&v184);
        applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[12],float>((applesauce::CF::TypeRef *)&buf, (int *)&v202);
        uint64_t v66 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->((void *)this + 377);
        int v201 = 1086324736;
        LODWORD(v183) = applesauce::CF::at_or<float,char const(&)[15]>(*v66, (uint64_t)&v201);
        applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[15],float>((applesauce::CF::TypeRef *)&buf.__end_cap_, (int *)&v183);
        unint64_t v67 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->((void *)this + 377);
        int v199 = -1061158912;
        float v200 = applesauce::CF::at_or<float,char const(&)[11]>(*v67, "Constraint", (uint64_t)&v199);
        applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[11],float>((applesauce::CF::TypeRef *)((char *)&v215 + 8), (int *)&v200);
        uint64_t v68 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->((void *)this + 377);
        int v197 = 1186693120;
        float v198 = applesauce::CF::at_or<float,char const(&)[21]>(*v68, (uint64_t)&v197);
        applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[21],float>((applesauce::CF::TypeRef *)&v216, (int *)&v198);
        unint64_t v69 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->((void *)this + 377);
        int v195 = 1120403456;
        float v196 = applesauce::CF::at_or<float,char const(&)[17]>(*v69, "PostTimbralBlend", (uint64_t)&v195);
        applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[17],float>((applesauce::CF::TypeRef *)&v217, "PostTimbralBlend", (int *)&v196);
        uint64_t v70 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->((void *)this + 377);
        int v193 = 1175232512;
        float v194 = applesauce::CF::at_or<float,char const(&)[10]>(*v70, (uint64_t)&v193);
        applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[10],float>((applesauce::CF::TypeRef *)&v218, (int *)&v194);
        AudioUnitScope v71 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->((void *)this + 377);
        int v191 = 0;
        float v192 = applesauce::CF::at_or<float,char const(&)[9]>(*v71, (uint64_t)&v191);
        applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[9],float>((applesauce::CF::TypeRef *)&v219, (int *)&v192);
        long long v72 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->((void *)this + 377);
        unsigned __int16 v73 = applesauce::CF::details::find_at_key_or_optional<BOOL,char const(&)[25]>(*v72, "CounteractRotationShader");
        applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)v220, "CounteractRotationShader");
        char v74 = v73;
        if (v73 <= 0x100u) {
          char v74 = 0;
        }
        uint64_t v75 = *MEMORY[0x1E4F1CFD0];
        uint64_t v76 = *MEMORY[0x1E4F1CFC8];
        if (v74) {
          uint64_t v77 = *MEMORY[0x1E4F1CFD0];
        }
        else {
          uint64_t v77 = *MEMORY[0x1E4F1CFC8];
        }
        v220[1] = v77;
        uint64_t v78 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->((void *)this + 377);
        int v189 = 1132462080;
        float v190 = applesauce::CF::at_or<float,char const(&)[13]>(*v78, "FilterLength", (uint64_t)&v189);
        applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[13],float>((applesauce::CF::TypeRef *)&v221, (int *)&v190);
        uint64_t v79 = *((void *)this + 1117);
        if (v79) {
          BOOL v80 = *(unsigned __int8 *)(v79 + 57) != 0;
        }
        else {
          BOOL v80 = 0;
        }
        applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)v222, "MagicUnicorn");
        if (v80) {
          uint64_t v150 = v75;
        }
        else {
          uint64_t v150 = v76;
        }
        v222[1] = v150;
        uint64_t v151 = *((void *)this + 1117);
        if (v151) {
          BOOL v152 = *(void *)(v151 + 784) != 0;
        }
        else {
          BOOL v152 = 0;
        }
        applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)v223, "ReferenceData");
        if (v152) {
          uint64_t v153 = v75;
        }
        else {
          uint64_t v153 = v76;
        }
        v224[0] = v153;
        v185.i64[0] = (uint64_t)&buf;
        v185.i64[1] = 11;
        CFDictionaryRef v154 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)&v185);
        unsigned __int8 v155 = *v64;
        *long long v64 = v154;
        float v187 = v155;
        applesauce::CF::DictionaryRef::~DictionaryRef(&v187);
        for (uint64_t i = 0; i != -22; i -= 2)
        {
          uint64_t v157 = (const void *)v224[i];
          if (v157) {
            CFRelease(v157);
          }
          int v158 = *(const void **)&v223[i * 8];
          if (v158) {
            CFRelease(v158);
          }
        }
      }
      else
      {
        AUSpatialMixerV2::RefreshXTCTuningParameters(this);
      }
      CFNumberRef v159 = *v64;
      *a5 = (ausdk *)*v64;
      if (v159) {
        CFRetain(v159);
      }
      return 0;
    }
    if (v9 == 3116)
    {
      if (a3)
      {
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        unint64_t v16 = (id)getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
        {
          v167 = (unsigned int *)((char *)this + 3368);
          if (*((char *)this + 3391) < 0) {
            v167 = *(unsigned int **)v167;
          }
          LODWORD(buf.__begin_) = 136315906;
          *(std::vector<unsigned int>::pointer *)((char *)&buf.__begin_ + 4) = v167;
          WORD2(buf.__end_) = 2080;
          *(std::vector<unsigned int>::pointer *)((char *)&buf.__end_ + 6) = (std::vector<unsigned int>::pointer)"GetProperty";
          HIWORD(buf.__end_cap_.__value_) = 1024;
          LODWORD(v215) = a3;
          WORD2(v215) = 1024;
          *(_DWORD *)((char *)&v215 + 6) = 3116;
          _os_log_debug_impl(&dword_1BB0CE000, v16, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitScope scope = %u for global scope property = %u", (uint8_t *)&buf, 0x22u);
        }
        goto LABEL_126;
      }
      buf.__begin_ = (std::vector<unsigned int>::pointer)((char *)this + 3120);
      LOBYTE(buf.__end_) = 1;
      std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)((char *)this + 3120));
      unsigned int v81 = 0;
      while (1)
      {
        uint64_t v82 = *((void *)this + 15);
        if (v82) {
          LODWORD(v83) = (*(uint64_t (**)(uint64_t))(*(void *)v82 + 24))(v82);
        }
        else {
          uint64_t v83 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
        }
        if (v81 >= v83) {
          break;
        }
        unsigned __int8 v84 = atomic_load((unsigned __int8 *)(ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 80), v81++)+ 1632));
        if (v84)
        {
          int v85 = 1;
          goto LABEL_219;
        }
      }
      int v85 = 0;
LABEL_219:
      *(_DWORD *)a5 = v85;
      p_std::vector<unsigned int> buf = &buf;
      goto LABEL_226;
    }
  }
  return Property;
}

void sub_1BB3E12B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *AUSM::InputGeometry::getExclusionZones(AUSM::InputGeometry *this, uint64_t a2)
{
  AUSM::RealtimeSafePingPongContainer<std::vector<AUSM::ExclusionZone>>::update((int8x16_t *)(a2 + 24));
  uint64_t v4 = *(void *)(a2 + 32);
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = 0;
  CFIndex v5 = *(const void **)v4;
  uint64_t v6 = *(void *)(v4 + 8);
  unint64_t v7 = 0x6DB6DB6DB6DB6DB7 * ((v6 - *(void *)v4) >> 2);

  return std::vector<AUSM::ExclusionZone>::__init_with_size[abi:ne180100]<AUSM::ExclusionZone*,AUSM::ExclusionZone*>(this, v5, v6, v7);
}

void AUSM::ExclusionZone::exclusionZonesToDictionary(CFDictionaryRef *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  long long v48 = 0uLL;
  unint64_t v49 = 0;
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    do
    {
      CFTypeRef cf = 0;
      uint64_t v57 = 0;
      p_CFTypeRef cf = &cf;
      LODWORD(valuePtr) = *v4;
      CFNumberRef v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      if (!v5)
      {
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      uint64_t v6 = (CFTypeRef *)operator new(0x30uLL);
      int valuePtr = v6;
      *(void *)&long long v51 = &cf;
      BYTE8(v51) = 0;
      CFStringRef v7 = CFStringCreateWithBytes(0, (const UInt8 *)"coordinatesType", 15, 0x8000100u, 0);
      v6[4] = v7;
      if (!v7)
      {
        std::vector<unsigned int>::pointer v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v36, "Could not construct");
      }
      CFRetain(v5);
      v6[5] = v5;
      BYTE8(v51) = 1;
      uint64_t v8 = (CFTypeRef **)std::__tree<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>>::__find_equal<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>((uint64_t)&p_cf, &v54, v6 + 4);
      if (!*v8)
      {
        CFArrayRef v9 = v54;
        *uint64_t v6 = 0;
        v6[1] = 0;
        _DWORD v6[2] = v9;
        *uint64_t v8 = v6;
        if (*(void *)p_cf)
        {
          p_CFTypeRef cf = *(CFTypeRef *)p_cf;
          uint64_t v6 = *v8;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)cf, (uint64_t *)v6);
        ++v57;
        int valuePtr = 0;
      }
      std::unique_ptr<std::__tree_node<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,void *>>>>::reset[abi:ne180100]((uint64_t)&valuePtr);
      CFRelease(v5);
      if (*v4 == 1)
      {
        LODWORD(v54) = v4[1];
        uint64_t v14 = (void **)CFNumberCreate(0, kCFNumberFloatType, &v54);
        int valuePtr = (CFTypeRef *)v14;
        if (!v14)
        {
          unint64_t v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v40, "Could not construct");
        }
        std::__tree<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>>::__emplace_unique_impl<char const(&)[5],applesauce::CF::NumberRef>((uint64_t **)&p_cf, "minX", (const void **)&valuePtr);
        CFRelease(v14);
        LODWORD(v54) = v4[2];
        unint64_t v15 = (void **)CFNumberCreate(0, kCFNumberFloatType, &v54);
        int valuePtr = (CFTypeRef *)v15;
        if (!v15)
        {
          uint64_t v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v38, "Could not construct");
        }
        std::__tree<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>>::__emplace_unique_impl<char const(&)[5],applesauce::CF::NumberRef>((uint64_t **)&p_cf, "maxX", (const void **)&valuePtr);
        CFRelease(v15);
        LODWORD(v54) = v4[3];
        unint64_t v16 = (void **)CFNumberCreate(0, kCFNumberFloatType, &v54);
        int valuePtr = (CFTypeRef *)v16;
        if (!v16)
        {
          uint64_t v42 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v42, "Could not construct");
        }
        std::__tree<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>>::__emplace_unique_impl<char const(&)[5],applesauce::CF::NumberRef>((uint64_t **)&p_cf, "minY", (const void **)&valuePtr);
        CFRelease(v16);
        LODWORD(v54) = v4[4];
        uint64_t v17 = (void **)CFNumberCreate(0, kCFNumberFloatType, &v54);
        int valuePtr = (CFTypeRef *)v17;
        if (!v17)
        {
          unint64_t v45 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v45, "Could not construct");
        }
        std::__tree<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>>::__emplace_unique_impl<char const(&)[5],applesauce::CF::NumberRef>((uint64_t **)&p_cf, "maxY", (const void **)&valuePtr);
        CFRelease(v17);
        LODWORD(v54) = v4[5];
        uint64_t v18 = (void **)CFNumberCreate(0, kCFNumberFloatType, &v54);
        int valuePtr = (CFTypeRef *)v18;
        if (!v18)
        {
          unint64_t v44 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v44, "Could not construct");
        }
        std::__tree<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>>::__emplace_unique_impl<char const(&)[5],applesauce::CF::NumberRef>((uint64_t **)&p_cf, "minZ", (const void **)&valuePtr);
        CFRelease(v18);
        LODWORD(v54) = v4[6];
        uint64_t v19 = (void **)CFNumberCreate(0, kCFNumberFloatType, &v54);
        int valuePtr = (CFTypeRef *)v19;
        if (!v19)
        {
          long long v43 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v43, "Could not construct");
        }
        std::__tree<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>>::__emplace_unique_impl<char const(&)[5],applesauce::CF::NumberRef>((uint64_t **)&p_cf, "maxZ", (const void **)&valuePtr);
        CFRelease(v19);
      }
      else if (!*v4)
      {
        LODWORD(v54) = v4[1];
        BOOL v10 = (void **)CFNumberCreate(0, kCFNumberFloatType, &v54);
        int valuePtr = (CFTypeRef *)v10;
        if (!v10)
        {
          long long v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v41, "Could not construct");
        }
        std::__tree<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>>::__emplace_unique_impl<char const(&)[13],applesauce::CF::NumberRef>((uint64_t **)&p_cf, "minElevation", (const void **)&valuePtr);
        CFRelease(v10);
        LODWORD(v54) = v4[2];
        uint64_t v11 = (void **)CFNumberCreate(0, kCFNumberFloatType, &v54);
        int valuePtr = (CFTypeRef *)v11;
        if (!v11)
        {
          unint64_t v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v39, "Could not construct");
        }
        std::__tree<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>>::__emplace_unique_impl<char const(&)[13],applesauce::CF::NumberRef>((uint64_t **)&p_cf, "maxElevation", (const void **)&valuePtr);
        CFRelease(v11);
        LODWORD(v54) = v4[3];
        uint64_t v12 = (void **)CFNumberCreate(0, kCFNumberFloatType, &v54);
        int valuePtr = (CFTypeRef *)v12;
        if (!v12)
        {
          unint64_t v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v37, "Could not construct");
        }
        std::__tree<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>>::__emplace_unique_impl<char const(&)[11],applesauce::CF::NumberRef>((uint64_t **)&p_cf, "minAzimuth", (const void **)&valuePtr);
        CFRelease(v12);
        LODWORD(v54) = v4[4];
        char v13 = (void **)CFNumberCreate(0, kCFNumberFloatType, &v54);
        int valuePtr = (CFTypeRef *)v13;
        if (!v13)
        {
          float32x2_t v46 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v46, "Could not construct");
        }
        std::__tree<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>>::__emplace_unique_impl<char const(&)[11],applesauce::CF::NumberRef>((uint64_t **)&p_cf, "maxAzimuth", (const void **)&valuePtr);
        CFRelease(v13);
      }
      applesauce::CF::make_DictionaryRef<applesauce::CF::StringRef,applesauce::CF::TypeRef>(&v54, (const void ***)&p_cf);
      uint64_t v20 = (void *)*((void *)&v48 + 1);
      if (*((void *)&v48 + 1) >= v49)
      {
        unint64_t v21 = (void *)v48;
        uint64_t v22 = (uint64_t)(*((void *)&v48 + 1) - v48) >> 3;
        unint64_t v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 61) {
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v24 = v49 - v48;
        if ((uint64_t)(v49 - v48) >> 2 > v23) {
          unint64_t v23 = v24 >> 2;
        }
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v25 = v23;
        }
        float32x4_t v53 = &v49;
        if (v25)
        {
          unint64_t v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v25);
          uint64_t v20 = (void *)*((void *)&v48 + 1);
          unint64_t v21 = (void *)v48;
        }
        else
        {
          uint64_t v26 = 0;
        }
        uint64_t v27 = (CFArrayRef *)(v25 + 8 * v22);
        unint64_t v28 = v25 + 8 * v26;
        unint64_t v52 = v28;
        CFArrayRef *v27 = v54;
        uint64_t v29 = v27 + 1;
        CFArrayRef v54 = 0;
        *((void *)&v51 + 1) = v27 + 1;
        if (v20 == v21)
        {
          CFArrayRef v31 = 0;
        }
        else
        {
          do
          {
            CFArrayRef v30 = (const __CFArray *)*--v20;
            *--uint64_t v27 = v30;
            void *v20 = 0;
          }
          while (v20 != v21);
          uint64_t v29 = (void *)*((void *)&v51 + 1);
          unint64_t v28 = v52;
          CFArrayRef v31 = v54;
        }
        long long v32 = v48;
        *(void *)&long long v48 = v27;
        long long v51 = v32;
        unint64_t v33 = v49;
        unint64_t v49 = v28;
        unint64_t v52 = v33;
        int valuePtr = (CFTypeRef *)v32;
        std::__split_buffer<applesauce::CF::DictionaryRef>::~__split_buffer((uint64_t)&valuePtr);
        *((void *)&v48 + 1) = v29;
        if (v31) {
          CFRelease(v31);
        }
      }
      else
      {
        **((void **)&v48 + 1) = v54;
        *((void *)&v48 + 1) = v20 + 1;
      }
      std::__tree<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>>::destroy(cf);
      v4 += 7;
    }
    while (v4 != a3);
  }
  CFArrayRef v34 = applesauce::CF::details::make_CFArrayRef<applesauce::CF::DictionaryRef>((uint64_t **)&v48);
  CFArrayRef v54 = v34;
  applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[15],applesauce::CF::ArrayRef>((applesauce::CF::TypeRef *)&p_cf, "ExclusionZones", (const void **)&v54);
  int valuePtr = &p_cf;
  *(void *)&long long v51 = 1;
  *a1 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)&valuePtr);
  if (cf) {
    CFRelease(cf);
  }
  if (p_cf) {
    CFRelease(p_cf);
  }
  if (v34) {
    CFRelease(v34);
  }
  int valuePtr = (CFTypeRef *)&v48;
  std::vector<applesauce::CF::DictionaryRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&valuePtr);
}

void sub_1BB3E1E68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

_DWORD *AUSM::ExclusionZone::arrayFromZones(_DWORD *result, _DWORD *a2, uint64_t a3)
{
  if (result != a2)
  {
    unsigned int v3 = 0;
    while (*result != 1)
    {
      if (!*result)
      {
        *(_DWORD *)(a3 + 4 * v3) = 0;
        *(_DWORD *)(a3 + 4 * (v3 + 1)) = result[1];
        *(_DWORD *)(a3 + 4 * (v3 + 2)) = result[2];
        *(_DWORD *)(a3 + 4 * (v3 + 3)) = result[3];
        uint64_t v4 = result + 4;
        int v5 = 5;
        int v6 = 4;
LABEL_7:
        *(_DWORD *)(a3 + 4 * (v3 + v6)) = *v4;
        v3 += v5;
      }
      result += 7;
      if (result == a2) {
        return result;
      }
    }
    *(_DWORD *)(a3 + 4 * v3) = 1065353216;
    *(_DWORD *)(a3 + 4 * (v3 + 1)) = result[1];
    *(_DWORD *)(a3 + 4 * (v3 + 2)) = result[2];
    *(_DWORD *)(a3 + 4 * (v3 + 3)) = result[3];
    *(_DWORD *)(a3 + 4 * (v3 + 4)) = result[4];
    *(_DWORD *)(a3 + 4 * (v3 + 5)) = result[5];
    uint64_t v4 = result + 6;
    int v5 = 7;
    int v6 = 6;
    goto LABEL_7;
  }
  return result;
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[13],float>(applesauce::CF::TypeRef *a1, int *a2)
{
  applesauce::CF::TypeRef::TypeRef(a1, "FilterLength");
  int valuePtr = *a2;
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  *((void *)a1 + 1) = v4;
  if (!v4)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_1BB3E20D4(_Unwind_Exception *a1)
{
  unsigned int v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

id AUSpatialMixerV2::GetFileNamesDictionary(AUSpatialMixerV2 *this)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  float32x4_t v53 = (IR *)objc_alloc_init(MEMORY[0x1E4F1CA60]);
  uint64_t v1 = NSString;
  IR::getProductTypeXTCIRFullPath((uint64_t *)buf, v53);
  if (v69 >= 0) {
    float v2 = buf;
  }
  else {
    float v2 = *(unsigned char **)buf;
  }
  unsigned int v3 = [v1 stringWithUTF8String:v2];
  [(IR *)v53 setObject:v3 forKeyedSubscript:@"XTCIRFullPath"];

  if (v69 < 0) {
    operator delete(*(void **)buf);
  }
  int v5 = NSString;
  IR::getGenericIRBasePath((uint64_t *)buf, v4);
  if (v69 >= 0) {
    int v6 = buf;
  }
  else {
    int v6 = *(unsigned char **)buf;
  }
  CFStringRef v7 = [v5 stringWithUTF8String:v6];
  [(IR *)v53 setObject:v7 forKeyedSubscript:@"HRIRFullPath"];

  if (v69 < 0) {
    operator delete(*(void **)buf);
  }
  long long v51 = (IR *)objc_alloc_init(MEMORY[0x1E4F28CB8]);
  uint64_t v8 = NSString;
  IR::getProductTypeXTCIRFullPath((uint64_t *)buf, v51);
  if (v69 >= 0) {
    CFArrayRef v9 = buf;
  }
  else {
    CFArrayRef v9 = *(unsigned char **)buf;
  }
  BOOL v10 = [v8 stringWithUTF8String:v9];
  id v63 = 0;
  uint64_t v11 = [(IR *)v51 subpathsOfDirectoryAtPath:v10 error:&v63];
  id v50 = v63;
  uint64_t v12 = objc_msgSend(v11, "sortedArrayUsingSelector:");

  if (v69 < 0) {
    operator delete(*(void **)buf);
  }
  if (v50)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    char v13 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      float32x2_t v46 = (void *)((char *)this + 3368);
      if (*((char *)this + 3391) < 0) {
        float32x2_t v46 = (void *)*v46;
      }
      *(_DWORD *)std::vector<unsigned int> buf = 136315394;
      *(void *)&uint8_t buf[4] = v46;
      __int16 v67 = 2080;
      uint64_t v68 = "GetFileNamesDictionary";
      _os_log_error_impl(&dword_1BB0CE000, v13, OS_LOG_TYPE_ERROR, "[%s|%s] XTCIRFileList error or empty list", buf, 0x16u);
    }
  }
  long long v61 = 0u;
  long long v62 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  obuint64_t j = v12;
  uint64_t v14 = 0;
  uint64_t v15 = [obj countByEnumeratingWithState:&v59 objects:v65 count:16];
  if (v15)
  {
    uint64_t v16 = *(void *)v60;
    do
    {
      for (uint64_t i = 0; i != v15; ++i)
      {
        if (*(void *)v60 != v16) {
          objc_enumerationMutation(obj);
        }
        uint64_t v18 = *(void **)(*((void *)&v59 + 1) + 8 * i);
        uint64_t v19 = [v18 pathExtension];
        int v20 = [v19 isEqualToString:@"ir"];

        if (v20)
        {
          uint64_t v14 = (v14 + 1);
          unint64_t v21 = NSString;
          uint64_t v22 = [NSNumber numberWithUnsignedInt:v14];
          unint64_t v23 = [v21 stringWithFormat:@"XTCIRFile%@", v22];
          [(IR *)v53 setObject:v18 forKeyedSubscript:v23];
        }
      }
      uint64_t v15 = [obj countByEnumeratingWithState:&v59 objects:v65 count:16];
    }
    while (v15);
  }

  uint64_t v24 = [NSNumber numberWithUnsignedInt:v14];
  [(IR *)v53 setObject:v24 forKeyedSubscript:@"NumXTCIRFiles"];

  unint64_t v25 = NSString;
  IR::getGenericIRBasePath((uint64_t *)buf, v26);
  if (v69 >= 0) {
    uint64_t v27 = buf;
  }
  else {
    uint64_t v27 = *(unsigned char **)buf;
  }
  unint64_t v28 = [v25 stringWithUTF8String:v27];
  id v58 = v50;
  uint64_t v29 = [(IR *)v51 subpathsOfDirectoryAtPath:v28 error:&v58];
  id v49 = v58;

  CFArrayRef v30 = [v29 sortedArrayUsingSelector:sel_compare_];

  if (v69 < 0) {
    operator delete(*(void **)buf);
  }
  if (v49)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    CFArrayRef v31 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      unsigned __int8 v47 = (void *)((char *)this + 3368);
      if (*((char *)this + 3391) < 0) {
        unsigned __int8 v47 = (void *)*v47;
      }
      *(_DWORD *)std::vector<unsigned int> buf = 136315394;
      *(void *)&uint8_t buf[4] = v47;
      __int16 v67 = 2080;
      uint64_t v68 = "GetFileNamesDictionary";
      _os_log_error_impl(&dword_1BB0CE000, v31, OS_LOG_TYPE_ERROR, "[%s|%s] IRFileList error or empty list", buf, 0x16u);
    }
  }
  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  id v32 = v30;
  uint64_t v33 = 0;
  uint64_t v34 = [v32 countByEnumeratingWithState:&v54 objects:v64 count:16];
  if (v34)
  {
    uint64_t v35 = *(void *)v55;
    do
    {
      for (uint64_t j = 0; j != v34; ++j)
      {
        if (*(void *)v55 != v35) {
          objc_enumerationMutation(v32);
        }
        unint64_t v37 = *(void **)(*((void *)&v54 + 1) + 8 * j);
        uint64_t v38 = [v37 pathExtension];
        int v39 = [v38 isEqualToString:@"ir"];

        if (v39)
        {
          uint64_t v33 = (v33 + 1);
          unint64_t v40 = NSString;
          long long v41 = [NSNumber numberWithUnsignedInt:v33];
          uint64_t v42 = [v40 stringWithFormat:@"IRFile%@", v41];
          [(IR *)v53 setObject:v37 forKeyedSubscript:v42];
        }
      }
      uint64_t v34 = [v32 countByEnumeratingWithState:&v54 objects:v64 count:16];
    }
    while (v34);
  }

  long long v43 = [NSNumber numberWithUnsignedInt:v33];
  [(IR *)v53 setObject:v43 forKeyedSubscript:@"NumIRFiles"];

  unint64_t v44 = (void *)[(IR *)v53 copy];

  return v44;
}

void sub_1BB3E27A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

float applesauce::CF::details::find_at_key<float,char const(&)[5]>(const __CFDictionary *a1)
{
  CFNumberRef v1 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[5]>(a1, "CDDR");
  if (!v1)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
  }

  return applesauce::CF::convert_to<float,0>(v1);
}

void sub_1BB3E29A8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

float applesauce::CF::details::find_at_key<float,char const(&)[16]>(const __CFDictionary *a1)
{
  CFNumberRef v1 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[16]>(a1, "SharpeningLimit");
  if (!v1)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
  }

  return applesauce::CF::convert_to<float,0>(v1);
}

void sub_1BB3E2A2C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

float applesauce::CF::details::find_at_key<float,char const(&)[19]>(const __CFDictionary *a1)
{
  CFNumberRef v1 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[19]>(a1, "DecorrelationLimit");
  if (!v1)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
  }

  return applesauce::CF::convert_to<float,0>(v1);
}

void sub_1BB3E2AB0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

float applesauce::CF::details::find_at_key<float,char const(&)[13]>(const __CFDictionary *a1, char *a2)
{
  CFNumberRef v2 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[13]>(a1, a2);
  if (!v2)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
  }

  return applesauce::CF::convert_to<float,0>(v2);
}

void sub_1BB3E2B2C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

float applesauce::CF::details::find_at_key<float,char const(&)[10]>(const __CFDictionary *a1)
{
  CFNumberRef v1 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[10]>(a1, "FrameSize");
  if (!v1)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
  }

  return applesauce::CF::convert_to<float,0>(v1);
}

void sub_1BB3E2BB0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

float applesauce::CF::details::find_at_key<float,char const(&)[8]>(const __CFDictionary *a1)
{
  CFNumberRef v1 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[8]>(a1, "HopSize");
  if (!v1)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
  }

  return applesauce::CF::convert_to<float,0>(v1);
}

void sub_1BB3E2C34(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

CFArrayRef applesauce::CF::details::make_CFArrayRef<applesauce::CF::ArrayRef>(uint64_t **a1)
{
  std::vector<void const*>::vector(__p, a1[1] - *a1);
  CFNumberRef v2 = *a1;
  unsigned int v3 = a1[1];
  if (*a1 != v3)
  {
    CFNumberRef v4 = __p[0];
    do
    {
      uint64_t v5 = *v2++;
      *v4++ = v5;
    }
    while (v2 != v3);
  }
  CFArrayRef CFArray = applesauce::CF::details::make_CFArrayRef<void const*>((uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return CFArray;
}

void sub_1BB3E2CC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<applesauce::CF::ArrayRef>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    std::__destroy_at[abi:ne180100]<applesauce::CF::ArrayRef,0>((const void **)(i - 8));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[11],applesauce::CF::ArrayRef>(applesauce::CF::TypeRef *a1, char *a2, const void **a3)
{
  applesauce::CF::TypeRef::TypeRef(a1, a2);
  uint64_t v5 = *a3;
  if (v5) {
    CFRetain(v5);
  }
  *((void *)a1 + 1) = v5;
  return a1;
}

void std::vector<applesauce::CF::ArrayRef>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  CFNumberRef v1 = *a1;
  CFNumberRef v2 = (const void **)**a1;
  if (v2)
  {
    CFNumberRef v4 = (const void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
        std::__destroy_at[abi:ne180100]<applesauce::CF::ArrayRef,0>(--v4);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

const void *applesauce::CF::details::at_key<char const(&)[19]>(const __CFDictionary *a1, char *__s)
{
  CFIndex v5 = strlen(__s);
  CFStringRef v6 = CFStringCreateWithBytes(0, (const UInt8 *)__s, v5, 0x8000100u, 0);
  if (!v6)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  if (a1) {
    CFArrayRef Value = CFDictionaryGetValue(a1, v6);
  }
  CFRelease(v6);
  if (!a1) {
    return 0;
  }
  return Value;
}

void sub_1BB3E2EC8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void std::__tree<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>>::__emplace_unique_impl<char const(&)[13],applesauce::CF::NumberRef>(uint64_t **a1, const char *a2, const void **a3)
{
  CFStringRef v6 = a1 + 1;
  CFStringRef v7 = operator new(0x30uLL);
  v14[0] = v7;
  v14[1] = v6;
  char v15 = 0;
  CFIndex v8 = strlen(a2);
  CFStringRef v9 = CFStringCreateWithBytes(0, (const UInt8 *)a2, v8, 0x8000100u, 0);
  *((void *)v7 + 4) = v9;
  if (!v9)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  BOOL v10 = *a3;
  if (v10) {
    CFRetain(v10);
  }
  *((void *)v7 + 5) = v10;
  char v15 = 1;
  uint64_t v11 = (uint64_t **)std::__tree<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>>::__find_equal<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>((uint64_t)a1, &v13, (CFTypeRef *)v7 + 4);
  if (!*v11)
  {
    std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at(a1, v13, v11, (uint64_t *)v7);
    v14[0] = 0;
  }
  std::unique_ptr<std::__tree_node<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,void *>>>>::reset[abi:ne180100]((uint64_t)v14);
}

void sub_1BB3E3020(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*v2) {
    CFRelease(*v2);
  }
  std::unique_ptr<std::__tree_node<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>>::__emplace_unique_impl<char const(&)[11],applesauce::CF::NumberRef>(uint64_t **a1, const char *a2, const void **a3)
{
  CFStringRef v6 = a1 + 1;
  CFStringRef v7 = operator new(0x30uLL);
  v14[0] = v7;
  v14[1] = v6;
  char v15 = 0;
  CFIndex v8 = strlen(a2);
  CFStringRef v9 = CFStringCreateWithBytes(0, (const UInt8 *)a2, v8, 0x8000100u, 0);
  *((void *)v7 + 4) = v9;
  if (!v9)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  BOOL v10 = *a3;
  if (v10) {
    CFRetain(v10);
  }
  *((void *)v7 + 5) = v10;
  char v15 = 1;
  uint64_t v11 = (uint64_t **)std::__tree<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>>::__find_equal<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>((uint64_t)a1, &v13, (CFTypeRef *)v7 + 4);
  if (!*v11)
  {
    std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at(a1, v13, v11, (uint64_t *)v7);
    v14[0] = 0;
  }
  std::unique_ptr<std::__tree_node<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,void *>>>>::reset[abi:ne180100]((uint64_t)v14);
}

void sub_1BB3E3178(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*v2) {
    CFRelease(*v2);
  }
  std::unique_ptr<std::__tree_node<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>>::__emplace_unique_impl<char const(&)[5],applesauce::CF::NumberRef>(uint64_t **a1, const char *a2, const void **a3)
{
  CFStringRef v6 = a1 + 1;
  CFStringRef v7 = operator new(0x30uLL);
  v14[0] = v7;
  v14[1] = v6;
  char v15 = 0;
  CFIndex v8 = strlen(a2);
  CFStringRef v9 = CFStringCreateWithBytes(0, (const UInt8 *)a2, v8, 0x8000100u, 0);
  *((void *)v7 + 4) = v9;
  if (!v9)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  BOOL v10 = *a3;
  if (v10) {
    CFRetain(v10);
  }
  *((void *)v7 + 5) = v10;
  char v15 = 1;
  uint64_t v11 = (uint64_t **)std::__tree<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>>::__find_equal<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>((uint64_t)a1, &v13, (CFTypeRef *)v7 + 4);
  if (!*v11)
  {
    std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at(a1, v13, v11, (uint64_t *)v7);
    v14[0] = 0;
  }
  std::unique_ptr<std::__tree_node<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,void *>>>>::reset[abi:ne180100]((uint64_t)v14);
}

void sub_1BB3E32D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*v2) {
    CFRelease(*v2);
  }
  std::unique_ptr<std::__tree_node<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void applesauce::CF::make_DictionaryRef<applesauce::CF::StringRef,applesauce::CF::TypeRef>(CFDictionaryRef *a1, const void ***a2)
{
  memset(v23, 0, sizeof(v23));
  v24[0] = 0;
  std::vector<applesauce::CF::TypeRefPair>::reserve(v23, (unint64_t)a2[2]);
  CFStringRef v6 = *a2;
  CFNumberRef v4 = a2 + 1;
  CFIndex v5 = v6;
  if (v6 != (const void **)v4)
  {
    CFStringRef v7 = *(void **)&v23[2];
    do
    {
      if ((unint64_t)v7 >= v24[0])
      {
        uint64_t v8 = ((uint64_t)v7 - *(void *)v23) >> 4;
        if ((unint64_t)(v8 + 1) >> 60) {
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v9 = (uint64_t)(v24[0] - *(void *)v23) >> 3;
        if (v9 <= v8 + 1) {
          unint64_t v9 = v8 + 1;
        }
        if (v24[0] - *(void *)v23 >= 0x7FFFFFFFFFFFFFF0uLL) {
          unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v10 = v9;
        }
        unint64_t v28 = v24;
        if (v10) {
          uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,applesauce::CF::DictionaryRef>>>((uint64_t)v24, v10);
        }
        else {
          uint64_t v11 = 0;
        }
        uint64_t v12 = &v11[2 * v8];
        unint64_t v25 = v11;
        v26.i64[0] = (uint64_t)v12;
        uint64_t v27 = &v11[2 * v10];
        applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef const&,applesauce::CF::TypeRef const&>(v12, v5[4], v5 + 5);
        CFStringRef v7 = v12 + 2;
        v26.i64[1] = (uint64_t)v7;
        uint64_t v14 = *(void **)v23;
        uint64_t v13 = *(void **)&v23[2];
        uint64_t v15 = v26.i64[0];
        if (*(void *)&v23[2] == *(void *)v23)
        {
          int64x2_t v17 = vdupq_n_s64(*(unint64_t *)&v23[2]);
        }
        else
        {
          do
          {
            uint64_t v16 = *(v13 - 2);
            v13 -= 2;
            *(void *)(v15 - 16) = v16;
            v15 -= 16;
            *uint64_t v13 = 0;
            *(void *)(v15 + 8) = v13[1];
            v13[1] = 0;
          }
          while (v13 != v14);
          int64x2_t v17 = *(int64x2_t *)v23;
          CFStringRef v7 = (void *)v26.i64[1];
        }
        *(void *)unint64_t v23 = v15;
        *(void *)&v23[2] = v7;
        int64x2_t v26 = v17;
        uint64_t v18 = (void **)v24[0];
        v24[0] = v27;
        uint64_t v27 = v18;
        unint64_t v25 = (void **)v17.i64[0];
        std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer((uint64_t)&v25);
      }
      else
      {
        applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef const&,applesauce::CF::TypeRef const&>(v7, v5[4], v5 + 5);
        v7 += 2;
      }
      *(void *)&v23[2] = v7;
      uint64_t v19 = (const void **)v5[1];
      if (v19)
      {
        do
        {
          int v20 = (const void ***)v19;
          uint64_t v19 = (const void **)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          int v20 = (const void ***)v5[2];
          BOOL v21 = *v20 == v5;
          CFIndex v5 = (const void **)v20;
        }
        while (!v21);
      }
      CFIndex v5 = (const void **)v20;
    }
    while (v20 != v4);
  }
  CFDictionaryRef CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((void ***)v23);
  unint64_t v25 = (void **)v23;
  std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100](&v25);
  *a1 = CFDictionaryRef;
}

void sub_1BB3E34EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a9;
  std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>>::destroy(*a1);
    std::__tree<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<applesauce::CF::StringRef const,applesauce::CF::TypeRef>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[15],applesauce::CF::ArrayRef>(applesauce::CF::TypeRef *a1, char *a2, const void **a3)
{
  applesauce::CF::TypeRef::TypeRef(a1, a2);
  CFIndex v5 = *a3;
  if (v5) {
    CFRetain(v5);
  }
  *((void *)a1 + 1) = v5;
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<applesauce::CF::StringRef const,applesauce::CF::TypeRef>,0>(uint64_t a1)
{
  CFNumberRef v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRelease(v2);
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
}

void *applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef const&,applesauce::CF::TypeRef const&>(void *a1, CFTypeRef cf, const void **a3)
{
  if (cf) {
    CFRetain(cf);
  }
  *a1 = cf;
  CFStringRef v6 = *a3;
  if (v6) {
    CFRetain(v6);
  }
  a1[1] = v6;
  return a1;
}

void *std::__tree<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>>::__find_equal<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>(uint64_t a1, void *a2, CFTypeRef *a3)
{
  CFIndex v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        CFStringRef v7 = (void *)v4;
        uint64_t v8 = (CFTypeRef *)(v4 + 32);
        if ((unint64_t)applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(a3, (const __CFString **)(v4 + 32)) < 2)break; {
        uint64_t v4 = *v7;
        }
        CFIndex v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if ((unint64_t)applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(v8, (const __CFString **)a3) < 2)break; {
      CFIndex v5 = v7 + 1;
      }
      uint64_t v4 = v7[1];
    }
    while (v4);
  }
  else
  {
    CFStringRef v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void std::unique_ptr<std::__tree_node<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  CFNumberRef v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<applesauce::CF::StringRef const,applesauce::CF::TypeRef>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

uint64_t AUSM::RealtimeSafePingPongContainer<std::vector<AUSM::ExclusionZone>>::update(int8x16_t *a1)
{
  CFIndex v5 = a1 + 1;
  int v2 = caulk::pooled_semaphore_mutex::try_lock((caulk::pooled_semaphore_mutex *)&a1[1]);
  char v6 = v2;
  if (v2)
  {
    unsigned __int8 v3 = atomic_load(&a1[1].u8[4]);
    if (v3)
    {
      *a1 = vextq_s8(*a1, *a1, 8uLL);
      atomic_store(0, &a1[1].u8[4]);
    }
  }
  return std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v5);
}

uint64_t AUSpatialMixerV2::GetPropertyInfo(AUSpatialMixerV2 *this, signed int a2, unsigned int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  if (a2 == 5679) {
    signed int v11 = 3112;
  }
  else {
    signed int v11 = a2;
  }
  if (a3 == 2)
  {
    if (a4)
    {
      if (getAUSMV2Log(void)::onceToken != -1) {
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
      }
      uint64_t v13 = (id)getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        unint64_t v25 = (unsigned int *)((char *)this + 3368);
        if (*((char *)this + 3391) < 0) {
          unint64_t v25 = *(unsigned int **)v25;
        }
        LODWORD(v68.__begin_) = 136315906;
        *(std::vector<unsigned int>::pointer *)((char *)&v68.__begin_ + 4) = v25;
        WORD2(v68.__end_) = 2080;
        *(std::vector<unsigned int>::pointer *)((char *)&v68.__end_ + 6) = (std::vector<unsigned int>::pointer)"GetPropertyInfo";
        HIWORD(v68.__end_cap_.__value_) = 1024;
        unsigned int v69 = a4;
        __int16 v70 = 1024;
        int v71 = v11;
        _os_log_debug_impl(&dword_1BB0CE000, v13, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid output scope AudioUnitElement element = %u (property = %u)", (uint8_t *)&v68, 0x22u);
      }
      goto LABEL_33;
    }
    uint64_t v12 = (AUSM::Properties *)(ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 128), 0) + 224);
    goto LABEL_17;
  }
  if (a3 != 1)
  {
    if (a3) {
      return 4294956417;
    }
    uint64_t v12 = (AUSpatialMixerV2 *)((char *)this + 3360);
LABEL_17:
    uint64_t PropertyInfo = AUSM::Properties::getPropertyInfo(v12, v11, a5, a6);
    goto LABEL_21;
  }
  uint64_t v14 = *((void *)this + 15);
  if (v14) {
    LODWORD(v15) = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 24))(v14);
  }
  else {
    uint64_t v15 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
  }
  if (v15 <= a4)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    uint64_t v13 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      int64x2_t v26 = (unsigned int *)((char *)this + 3368);
      if (*((char *)this + 3391) < 0) {
        int64x2_t v26 = *(unsigned int **)v26;
      }
      LODWORD(v68.__begin_) = 136315906;
      *(std::vector<unsigned int>::pointer *)((char *)&v68.__begin_ + 4) = v26;
      WORD2(v68.__end_) = 2080;
      *(std::vector<unsigned int>::pointer *)((char *)&v68.__end_ + 6) = (std::vector<unsigned int>::pointer)"GetPropertyInfo";
      HIWORD(v68.__end_cap_.__value_) = 1024;
      unsigned int v69 = a4;
      __int16 v70 = 1024;
      int v71 = v11;
      _os_log_debug_impl(&dword_1BB0CE000, v13, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid input scope AudioUnitElement element = %u (property = %u)", (uint8_t *)&v68, 0x22u);
    }
    goto LABEL_33;
  }
  v68.__begin_ = (std::vector<unsigned int>::pointer)((char *)this + 3120);
  LOBYTE(v68.__end_) = 1;
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)((char *)this + 3120));
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 80), a4);
  uint64_t PropertyInfo = AUSM::Properties::getPropertyInfo((AUSM::Properties *)(Element + 672), v11, a5, a6);
  std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v68);
LABEL_21:
  if (PropertyInfo != -10879) {
    return PropertyInfo;
  }
  uint64_t PropertyInfo = 4294956417;
  if (v11 > 3293)
  {
    if (v11 > 5000)
    {
      switch(v11)
      {
        case 5001:
        case 5010:
          if (!a3) {
            goto LABEL_97;
          }
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          uint64_t v18 = (id)getAUSMV2Log(void)::gLog;
          if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG)) {
            break;
          }
          unint64_t v44 = (unsigned int *)((char *)this + 3368);
          if (*((char *)this + 3391) < 0) {
            unint64_t v44 = *(unsigned int **)v44;
          }
          goto LABEL_208;
        case 5002:
          if (a3 >= 2)
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            uint64_t v18 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
            {
              long long v62 = (unsigned int *)((char *)this + 3368);
              if (*((char *)this + 3391) < 0) {
                long long v62 = *(unsigned int **)v62;
              }
              LODWORD(v68.__begin_) = 136315906;
              *(std::vector<unsigned int>::pointer *)((char *)&v68.__begin_ + 4) = v62;
              WORD2(v68.__end_) = 2080;
              *(std::vector<unsigned int>::pointer *)((char *)&v68.__end_ + 6) = (std::vector<unsigned int>::pointer)"GetPropertyInfo";
              HIWORD(v68.__end_cap_.__value_) = 1024;
              unsigned int v69 = a3;
              __int16 v70 = 1024;
              int v71 = 5002;
              _os_log_debug_impl(&dword_1BB0CE000, v18, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitScope scope = %u for property = %u", (uint8_t *)&v68, 0x22u);
            }
            break;
          }
          if (a3 != 1) {
            goto LABEL_199;
          }
          uint64_t v31 = *((void *)this + 15);
          if (v31) {
            LODWORD(v32) = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 24))(v31);
          }
          else {
            uint64_t v32 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
          }
          if (v32 > a4) {
            goto LABEL_199;
          }
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          uint64_t v13 = (id)getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
          {
            __int16 v67 = (unsigned int *)((char *)this + 3368);
            if (*((char *)this + 3391) < 0) {
              __int16 v67 = *(unsigned int **)v67;
            }
            LODWORD(v68.__begin_) = 136315906;
            *(std::vector<unsigned int>::pointer *)((char *)&v68.__begin_ + 4) = v67;
            WORD2(v68.__end_) = 2080;
            *(std::vector<unsigned int>::pointer *)((char *)&v68.__end_ + 6) = (std::vector<unsigned int>::pointer)"GetPropertyInfo";
            HIWORD(v68.__end_cap_.__value_) = 1024;
            unsigned int v69 = a4;
            __int16 v70 = 1024;
            int v71 = 5002;
            _os_log_debug_impl(&dword_1BB0CE000, v13, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitElement element = %u for input scope property = %u", (uint8_t *)&v68, 0x22u);
          }
          goto LABEL_33;
        case 5003:
        case 5007:
        case 5008:
        case 5009:
          return PropertyInfo;
        case 5004:
        case 5005:
        case 5006:
          if (!a3) {
            goto LABEL_199;
          }
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          uint64_t v18 = (id)getAUSMV2Log(void)::gLog;
          if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG)) {
            break;
          }
          unint64_t v44 = (unsigned int *)((char *)this + 3368);
          if (*((char *)this + 3391) < 0) {
            unint64_t v44 = *(unsigned int **)v44;
          }
          goto LABEL_208;
        case 5011:
          if (!a3) {
            goto LABEL_97;
          }
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          uint64_t v18 = (id)getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
          {
            long long v51 = (unsigned int *)((char *)this + 3368);
            if (*((char *)this + 3391) < 0) {
              long long v51 = *(unsigned int **)v51;
            }
            LODWORD(v68.__begin_) = 136315906;
            *(std::vector<unsigned int>::pointer *)((char *)&v68.__begin_ + 4) = v51;
            WORD2(v68.__end_) = 2080;
            *(std::vector<unsigned int>::pointer *)((char *)&v68.__end_ + 6) = (std::vector<unsigned int>::pointer)"GetPropertyInfo";
            HIWORD(v68.__end_cap_.__value_) = 1024;
            unsigned int v69 = a3;
            __int16 v70 = 1024;
            int v71 = 5011;
            _os_log_debug_impl(&dword_1BB0CE000, v18, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitScope scope = %u for global scope property = %u", (uint8_t *)&v68, 0x22u);
          }
          break;
        default:
          if (v11 == 5677)
          {
            uint64_t PropertyInfo = 0;
            *a5 = 0;
            goto LABEL_125;
          }
          if (v11 != 5683) {
            return PropertyInfo;
          }
          if (!a3)
          {
LABEL_97:
            uint64_t PropertyInfo = 0;
            unsigned int v23 = 8;
            goto LABEL_124;
          }
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          uint64_t v18 = (id)getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
          {
            long long v55 = (unsigned int *)((char *)this + 3368);
            if (*((char *)this + 3391) < 0) {
              long long v55 = *(unsigned int **)v55;
            }
            LODWORD(v68.__begin_) = 136315906;
            *(std::vector<unsigned int>::pointer *)((char *)&v68.__begin_ + 4) = v55;
            WORD2(v68.__end_) = 2080;
            *(std::vector<unsigned int>::pointer *)((char *)&v68.__end_ + 6) = (std::vector<unsigned int>::pointer)"GetPropertyInfo";
            HIWORD(v68.__end_cap_.__value_) = 1024;
            unsigned int v69 = a3;
            __int16 v70 = 1024;
            int v71 = 5683;
            _os_log_debug_impl(&dword_1BB0CE000, v18, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitScope scope = %u for global scope property = %u", (uint8_t *)&v68, 0x22u);
          }
          break;
      }
LABEL_142:

      return 4294956430;
    }
    if (v11 == 3294)
    {
      if (a3)
      {
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        uint64_t v18 = (id)getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
        {
          unint64_t v52 = (unsigned int *)((char *)this + 3368);
          if (*((char *)this + 3391) < 0) {
            unint64_t v52 = *(unsigned int **)v52;
          }
          LODWORD(v68.__begin_) = 136315906;
          *(std::vector<unsigned int>::pointer *)((char *)&v68.__begin_ + 4) = v52;
          WORD2(v68.__end_) = 2080;
          *(std::vector<unsigned int>::pointer *)((char *)&v68.__end_ + 6) = (std::vector<unsigned int>::pointer)"GetPropertyInfo";
          HIWORD(v68.__end_cap_.__value_) = 1024;
          unsigned int v69 = a3;
          __int16 v70 = 1024;
          int v71 = 3294;
          _os_log_debug_impl(&dword_1BB0CE000, v18, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitScope scope = %u for global scope property = %u", (uint8_t *)&v68, 0x22u);
        }
        goto LABEL_142;
      }
LABEL_103:
      uint64_t PropertyInfo = 0;
      unsigned int v24 = 16;
      goto LABEL_200;
    }
    if (v11 == 3295)
    {
LABEL_47:
      if (a3)
      {
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        uint64_t v18 = (id)getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
        {
          unint64_t v44 = (unsigned int *)((char *)this + 3368);
          if (*((char *)this + 3391) < 0) {
            unint64_t v44 = *(unsigned int **)v44;
          }
LABEL_208:
          LODWORD(v68.__begin_) = 136315906;
          *(std::vector<unsigned int>::pointer *)((char *)&v68.__begin_ + 4) = v44;
          WORD2(v68.__end_) = 2080;
          *(std::vector<unsigned int>::pointer *)((char *)&v68.__end_ + 6) = (std::vector<unsigned int>::pointer)"GetPropertyInfo";
          HIWORD(v68.__end_cap_.__value_) = 1024;
          unsigned int v69 = a3;
          __int16 v70 = 1024;
          int v71 = v11;
          _os_log_debug_impl(&dword_1BB0CE000, v18, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitScope scope = %u for global scope property = %u", (uint8_t *)&v68, 0x22u);
        }
        goto LABEL_142;
      }
      goto LABEL_103;
    }
    return PropertyInfo;
  }
  if (v11 <= 3267)
  {
    switch(v11)
    {
      case 3215:
        if (a3 >= 2)
        {
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          uint64_t v18 = (id)getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
          {
            id v58 = (unsigned int *)((char *)this + 3368);
            if (*((char *)this + 3391) < 0) {
              id v58 = *(unsigned int **)v58;
            }
            LODWORD(v68.__begin_) = 136315906;
            *(std::vector<unsigned int>::pointer *)((char *)&v68.__begin_ + 4) = v58;
            WORD2(v68.__end_) = 2080;
            *(std::vector<unsigned int>::pointer *)((char *)&v68.__end_ + 6) = (std::vector<unsigned int>::pointer)"GetPropertyInfo";
            HIWORD(v68.__end_cap_.__value_) = 1024;
            unsigned int v69 = a3;
            __int16 v70 = 1024;
            int v71 = 3215;
            _os_log_debug_impl(&dword_1BB0CE000, v18, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitScope scope = %u for property = %u", (uint8_t *)&v68, 0x22u);
          }
          goto LABEL_142;
        }
        if (a3 == 1)
        {
          uint64_t v27 = *((void *)this + 15);
          if (v27) {
            LODWORD(v28) = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 24))(v27);
          }
          else {
            uint64_t v28 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
          }
          if (v28 <= a4)
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            uint64_t v13 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
            {
              double v65 = (unsigned int *)((char *)this + 3368);
              if (*((char *)this + 3391) < 0) {
                double v65 = *(unsigned int **)v65;
              }
              LODWORD(v68.__begin_) = 136315906;
              *(std::vector<unsigned int>::pointer *)((char *)&v68.__begin_ + 4) = v65;
              WORD2(v68.__end_) = 2080;
              *(std::vector<unsigned int>::pointer *)((char *)&v68.__end_ + 6) = (std::vector<unsigned int>::pointer)"GetPropertyInfo";
              HIWORD(v68.__end_cap_.__value_) = 1024;
              unsigned int v69 = a4;
              __int16 v70 = 1024;
              int v71 = 3215;
              _os_log_debug_impl(&dword_1BB0CE000, v13, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitElement element = %u for input scope property = %u", (uint8_t *)&v68, 0x22u);
            }
            break;
          }
          uint64_t v45 = ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 80), a4);
          float32x2_t v46 = *(uint64_t **)(v45 + 248);
          if (*(uint64_t **)(v45 + 256) == v46) {
            goto LABEL_188;
          }
          AUSpatialMixerV2ChannelProcessor::getDecorrFilterLengthsOnReverbSend(&v68, *v46);
        }
        else
        {
          uint64_t v33 = ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 80), 0);
          uint64_t v34 = *(void *)(v33 + 248);
          if (a4 >= (unint64_t)((*(void *)(v33 + 256) - v34) >> 3)) {
            goto LABEL_188;
          }
          AUSpatialMixerV2ChannelProcessor::getDecorrFilterLengthsOnReverbSend(&v68, *(void *)(v34 + 8 * a4));
        }
        goto LABEL_186;
      case 3216:
        if (a3 >= 2)
        {
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          uint64_t v18 = (id)getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
          {
            long long v59 = (unsigned int *)((char *)this + 3368);
            if (*((char *)this + 3391) < 0) {
              long long v59 = *(unsigned int **)v59;
            }
            LODWORD(v68.__begin_) = 136315906;
            *(std::vector<unsigned int>::pointer *)((char *)&v68.__begin_ + 4) = v59;
            WORD2(v68.__end_) = 2080;
            *(std::vector<unsigned int>::pointer *)((char *)&v68.__end_ + 6) = (std::vector<unsigned int>::pointer)"GetPropertyInfo";
            HIWORD(v68.__end_cap_.__value_) = 1024;
            unsigned int v69 = a3;
            __int16 v70 = 1024;
            int v71 = 3216;
            _os_log_debug_impl(&dword_1BB0CE000, v18, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitScope scope = %u for property = %u", (uint8_t *)&v68, 0x22u);
          }
          goto LABEL_142;
        }
        if (a3 != 1)
        {
          uint64_t v35 = ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 80), 0);
          uint64_t v36 = *(void *)(v35 + 248);
          if (a4 < (unint64_t)((*(void *)(v35 + 256) - v36) >> 3))
          {
            AUSpatialMixerV2ChannelProcessor::getDecorrFilterCoeffsOnReverbSend((AUSpatialMixerV2ChannelProcessor *)&v68, *(void *)(v36 + 8 * a4));
            goto LABEL_186;
          }
LABEL_188:
          *a5 = 0;
          *a6 = 1;
          return 0;
        }
        uint64_t v29 = *((void *)this + 15);
        if (v29) {
          LODWORD(v30) = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 24))(v29);
        }
        else {
          uint64_t v30 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
        }
        if (v30 > a4)
        {
          uint64_t v47 = ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 80), a4);
          long long v48 = *(uint64_t **)(v47 + 248);
          if (*(uint64_t **)(v47 + 256) != v48)
          {
            AUSpatialMixerV2ChannelProcessor::getDecorrFilterCoeffsOnReverbSend((AUSpatialMixerV2ChannelProcessor *)&v68, *v48);
LABEL_186:
            begiuint64_t n = v68.__begin_;
            *a5 = (LODWORD(v68.__end_) - LODWORD(v68.__begin_)) & 0xFFFFFFFC;
            *a6 = 1;
            if (!begin) {
              return 0;
            }
            v68.__end_ = begin;
LABEL_195:
            operator delete(begin);
            return 0;
          }
          goto LABEL_188;
        }
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        uint64_t v13 = (id)getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v66 = (unsigned int *)((char *)this + 3368);
          if (*((char *)this + 3391) < 0) {
            uint64_t v66 = *(unsigned int **)v66;
          }
          LODWORD(v68.__begin_) = 136315906;
          *(std::vector<unsigned int>::pointer *)((char *)&v68.__begin_ + 4) = v66;
          WORD2(v68.__end_) = 2080;
          *(std::vector<unsigned int>::pointer *)((char *)&v68.__end_ + 6) = (std::vector<unsigned int>::pointer)"GetPropertyInfo";
          HIWORD(v68.__end_cap_.__value_) = 1024;
          unsigned int v69 = a4;
          __int16 v70 = 1024;
          int v71 = 3216;
          _os_log_debug_impl(&dword_1BB0CE000, v13, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitElement element = %u for input scope property = %u", (uint8_t *)&v68, 0x22u);
        }
        break;
      case 3217:
      case 3218:
      case 3219:
      case 3220:
      case 3221:
      case 3223:
      case 3224:
        return PropertyInfo;
      case 3222:
        if (!a3)
        {
          uint64_t PropertyInfo = 0;
          unsigned int v24 = 24;
          goto LABEL_200;
        }
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        uint64_t v18 = (id)getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
        {
          id v50 = (unsigned int *)((char *)this + 3368);
          if (*((char *)this + 3391) < 0) {
            id v50 = *(unsigned int **)v50;
          }
          LODWORD(v68.__begin_) = 136315906;
          *(std::vector<unsigned int>::pointer *)((char *)&v68.__begin_ + 4) = v50;
          WORD2(v68.__end_) = 2080;
          *(std::vector<unsigned int>::pointer *)((char *)&v68.__end_ + 6) = (std::vector<unsigned int>::pointer)"GetPropertyInfo";
          HIWORD(v68.__end_cap_.__value_) = 1024;
          unsigned int v69 = a3;
          __int16 v70 = 1024;
          int v71 = 3222;
          _os_log_debug_impl(&dword_1BB0CE000, v18, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitScope scope = %u for global scope property = %u", (uint8_t *)&v68, 0x22u);
        }
        goto LABEL_142;
      case 3225:
        if (a3 != 1)
        {
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          uint64_t v18 = (id)getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
          {
            long long v60 = (unsigned int *)((char *)this + 3368);
            if (*((char *)this + 3391) < 0) {
              long long v60 = *(unsigned int **)v60;
            }
            LODWORD(v68.__begin_) = 136315906;
            *(std::vector<unsigned int>::pointer *)((char *)&v68.__begin_ + 4) = v60;
            WORD2(v68.__end_) = 2080;
            *(std::vector<unsigned int>::pointer *)((char *)&v68.__end_ + 6) = (std::vector<unsigned int>::pointer)"GetPropertyInfo";
            HIWORD(v68.__end_cap_.__value_) = 1024;
            unsigned int v69 = a3;
            __int16 v70 = 1024;
            int v71 = 3225;
            _os_log_debug_impl(&dword_1BB0CE000, v18, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitScope scope = %u for input scope property = %u", (uint8_t *)&v68, 0x22u);
          }
          goto LABEL_142;
        }
        uint64_t v19 = *((void *)this + 15);
        if (v19) {
          LODWORD(v20) = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 24))(v19);
        }
        else {
          uint64_t v20 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
        }
        if (v20 > a4) {
          goto LABEL_199;
        }
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        uint64_t v13 = (id)getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
        {
          id v63 = (unsigned int *)((char *)this + 3368);
          if (*((char *)this + 3391) < 0) {
            id v63 = *(unsigned int **)v63;
          }
          LODWORD(v68.__begin_) = 136315906;
          *(std::vector<unsigned int>::pointer *)((char *)&v68.__begin_ + 4) = v63;
          WORD2(v68.__end_) = 2080;
          *(std::vector<unsigned int>::pointer *)((char *)&v68.__end_ + 6) = (std::vector<unsigned int>::pointer)"GetPropertyInfo";
          HIWORD(v68.__end_cap_.__value_) = 1024;
          unsigned int v69 = a4;
          __int16 v70 = 1024;
          int v71 = 3225;
          _os_log_debug_impl(&dword_1BB0CE000, v13, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitElement element = %u for input scope property = %u", (uint8_t *)&v68, 0x22u);
        }
        break;
      case 3226:
        if (a3 != 1)
        {
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          uint64_t v18 = (id)getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
          {
            long long v61 = (unsigned int *)((char *)this + 3368);
            if (*((char *)this + 3391) < 0) {
              long long v61 = *(unsigned int **)v61;
            }
            LODWORD(v68.__begin_) = 136315906;
            *(std::vector<unsigned int>::pointer *)((char *)&v68.__begin_ + 4) = v61;
            WORD2(v68.__end_) = 2080;
            *(std::vector<unsigned int>::pointer *)((char *)&v68.__end_ + 6) = (std::vector<unsigned int>::pointer)"GetPropertyInfo";
            HIWORD(v68.__end_cap_.__value_) = 1024;
            unsigned int v69 = a3;
            __int16 v70 = 1024;
            int v71 = 3226;
            _os_log_debug_impl(&dword_1BB0CE000, v18, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitScope scope = %u for input scope property = %u", (uint8_t *)&v68, 0x22u);
          }
          goto LABEL_142;
        }
        uint64_t v21 = *((void *)this + 15);
        if (v21) {
          LODWORD(v22) = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 24))(v21);
        }
        else {
          uint64_t v22 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
        }
        if (v22 <= a4)
        {
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          uint64_t v13 = (id)getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
          {
            long long v64 = (unsigned int *)((char *)this + 3368);
            if (*((char *)this + 3391) < 0) {
              long long v64 = *(unsigned int **)v64;
            }
            LODWORD(v68.__begin_) = 136315906;
            *(std::vector<unsigned int>::pointer *)((char *)&v68.__begin_ + 4) = v64;
            WORD2(v68.__end_) = 2080;
            *(std::vector<unsigned int>::pointer *)((char *)&v68.__end_ + 6) = (std::vector<unsigned int>::pointer)"GetPropertyInfo";
            HIWORD(v68.__end_cap_.__value_) = 1024;
            unsigned int v69 = a4;
            __int16 v70 = 1024;
            int v71 = 3226;
            _os_log_debug_impl(&dword_1BB0CE000, v13, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitElement element = %u for input scope property = %u", (uint8_t *)&v68, 0x22u);
          }
          break;
        }
        uint64_t v37 = ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 80), a4);
        AUSM::InputGeometry::getExclusionZones((AUSM::InputGeometry *)&v68, v37 + 1296);
        begiuint64_t n = v68.__begin_;
        if (v68.__begin_ == v68.__end_)
        {
          int v39 = 0;
        }
        else
        {
          int v39 = 0;
          std::vector<unsigned int>::pointer v40 = v68.__begin_;
          do
          {
            unsigned int v42 = *v40;
            v40 += 7;
            unsigned int v41 = v42;
            int v43 = v39 + 7;
            if (!v42) {
              v39 += 5;
            }
            if (v41 == 1) {
              int v39 = v43;
            }
          }
          while (v40 != v68.__end_);
        }
        *a5 = 4 * v39;
        *a6 = 1;
        if (!begin) {
          return 0;
        }
        goto LABEL_195;
      default:
        if (v11 == 3107)
        {
          if (!a3) {
            goto LABEL_199;
          }
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          uint64_t v18 = (id)getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
          {
            long long v57 = (unsigned int *)((char *)this + 3368);
            if (*((char *)this + 3391) < 0) {
              long long v57 = *(unsigned int **)v57;
            }
            LODWORD(v68.__begin_) = 136315906;
            *(std::vector<unsigned int>::pointer *)((char *)&v68.__begin_ + 4) = v57;
            WORD2(v68.__end_) = 2080;
            *(std::vector<unsigned int>::pointer *)((char *)&v68.__end_ + 6) = (std::vector<unsigned int>::pointer)"GetPropertyInfo";
            HIWORD(v68.__end_cap_.__value_) = 1024;
            unsigned int v69 = a3;
            __int16 v70 = 1024;
            int v71 = 3107;
            _os_log_debug_impl(&dword_1BB0CE000, v18, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitScope scope = %u for global scope property = %u", (uint8_t *)&v68, 0x22u);
          }
          goto LABEL_142;
        }
        if (v11 != 3116) {
          return PropertyInfo;
        }
        if (a3)
        {
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          uint64_t v18 = (id)getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
          {
            long long v56 = (unsigned int *)((char *)this + 3368);
            if (*((char *)this + 3391) < 0) {
              long long v56 = *(unsigned int **)v56;
            }
            LODWORD(v68.__begin_) = 136315906;
            *(std::vector<unsigned int>::pointer *)((char *)&v68.__begin_ + 4) = v56;
            WORD2(v68.__end_) = 2080;
            *(std::vector<unsigned int>::pointer *)((char *)&v68.__end_ + 6) = (std::vector<unsigned int>::pointer)"GetPropertyInfo";
            HIWORD(v68.__end_cap_.__value_) = 1024;
            unsigned int v69 = a3;
            __int16 v70 = 1024;
            int v71 = 3116;
            _os_log_debug_impl(&dword_1BB0CE000, v18, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitScope scope = %u for global scope property = %u", (uint8_t *)&v68, 0x22u);
          }
          goto LABEL_142;
        }
        goto LABEL_123;
    }
LABEL_33:

    return 4294956419;
  }
  if (v11 == 3268)
  {
    if (a3)
    {
      if (getAUSMV2Log(void)::onceToken != -1) {
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
      }
      uint64_t v18 = (id)getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        float32x4_t v53 = (unsigned int *)((char *)this + 3368);
        if (*((char *)this + 3391) < 0) {
          float32x4_t v53 = *(unsigned int **)v53;
        }
        LODWORD(v68.__begin_) = 136315906;
        *(std::vector<unsigned int>::pointer *)((char *)&v68.__begin_ + 4) = v53;
        WORD2(v68.__end_) = 2080;
        *(std::vector<unsigned int>::pointer *)((char *)&v68.__end_ + 6) = (std::vector<unsigned int>::pointer)"GetPropertyInfo";
        HIWORD(v68.__end_cap_.__value_) = 1024;
        unsigned int v69 = a3;
        __int16 v70 = 1024;
        int v71 = 3268;
        _os_log_debug_impl(&dword_1BB0CE000, v18, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitScope scope = %u for global scope property = %u", (uint8_t *)&v68, 0x22u);
      }
      goto LABEL_142;
    }
LABEL_199:
    uint64_t PropertyInfo = 0;
    unsigned int v24 = 8;
LABEL_200:
    *a5 = v24;
    *a6 = 1;
    return PropertyInfo;
  }
  if (v11 != 3270)
  {
    if (v11 != 3293) {
      return PropertyInfo;
    }
    goto LABEL_47;
  }
  if (a3)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    uint64_t v18 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      long long v54 = (unsigned int *)((char *)this + 3368);
      if (*((char *)this + 3391) < 0) {
        long long v54 = *(unsigned int **)v54;
      }
      LODWORD(v68.__begin_) = 136315906;
      *(std::vector<unsigned int>::pointer *)((char *)&v68.__begin_ + 4) = v54;
      WORD2(v68.__end_) = 2080;
      *(std::vector<unsigned int>::pointer *)((char *)&v68.__end_ + 6) = (std::vector<unsigned int>::pointer)"GetPropertyInfo";
      HIWORD(v68.__end_cap_.__value_) = 1024;
      unsigned int v69 = a3;
      __int16 v70 = 1024;
      int v71 = 3270;
      _os_log_debug_impl(&dword_1BB0CE000, v18, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid AudioUnitScope scope = %u for global scope property = %u", (uint8_t *)&v68, 0x22u);
    }
    goto LABEL_142;
  }
LABEL_123:
  uint64_t PropertyInfo = 0;
  unsigned int v23 = 4;
LABEL_124:
  *a5 = v23;
LABEL_125:
  *a6 = 0;
  return PropertyInfo;
}

void sub_1BB3E4E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t AUSpatialMixerV2::Reset(AUSpatialMixerV2 *this, int a2, unsigned int a3)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (getAUSMV2Log(void)::onceToken != -1) {
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
  }
  char v6 = (id)getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v7 = (char *)this + 3368;
    if (*((char *)this + 3391) < 0) {
      CFStringRef v7 = *(const char **)v7;
    }
    *(_DWORD *)std::vector<unsigned int> buf = 136315906;
    uint64_t v37 = v7;
    __int16 v38 = 2080;
    *(void *)int v39 = "Reset";
    *(_WORD *)&v39[8] = 1024;
    *(_DWORD *)&v39[10] = a2;
    __int16 v40 = 1024;
    unsigned int v41 = a3;
    _os_log_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_DEFAULT, "[%s|%s] scope = %u, AudioUnitElement element = %u", buf, 0x22u);
  }

  v35[0] = (uint64_t)this + 3072;
  v35[1] = (uint64_t)this + 3088;
  std::lock[abi:ne180100]<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>((uint64_t)this + 3072, (uint64_t)this + 3088);
  if (!a2)
  {
    unsigned __int8 v10 = atomic_load((unsigned __int8 *)this + 8977);
    if (v10)
    {
      uint64_t v11 = *((void *)this + 15);
      if (v11)
      {
        LODWORD(v12) = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 24))(v11);
        if (!v12) {
          goto LABEL_26;
        }
LABEL_24:
        unsigned int v17 = 0;
        do
        {
          uint64_t Element = ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 80), v17);
          (*(void (**)(uint64_t))(*(void *)Element + 120))(Element);
          *(_OWORD *)(Element + 520) = 0u;
          *(_OWORD *)(Element + 536) = 0u;
          *(_OWORD *)(Element + 488) = 0u;
          *(_OWORD *)(Element + 504) = 0u;
          *(_OWORD *)(Element + 456) = 0u;
          *(_OWORD *)(Element + 472) = 0u;
          *(_OWORD *)(Element + 424) = 0u;
          *(_OWORD *)(Element + 440) = 0u;
          *(_OWORD *)(Element + 392) = 0u;
          *(_OWORD *)(Element + 408) = 0u;
          *(_OWORD *)(Element + 360) = 0u;
          *(_OWORD *)(Element + 376) = 0u;
          *(_OWORD *)(Element + 344) = 0u;
          *(void *)(Element + 584) = 0x3FF0000000000000;
          ++v17;
          *(unsigned char *)(Element + 600) = 1;
        }
        while (v12 != v17);
        goto LABEL_26;
      }
      uint64_t v12 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
      if (v12) {
        goto LABEL_24;
      }
    }
LABEL_26:
    IR::SharedIRBuses::reset((AUSpatialMixerV2 *)((char *)this + 2104));
    caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 2032);
    IR::IRProcessor::reset(*((IR::FFTFilter ***)this + 253));
    caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock((uint64_t)this + 2032);
    caulk::pooled_semaphore_mutex::_lock((AUSpatialMixerV2 *)((char *)this + 1968));
    FeedbackDelayNetwork<float>::Reset((_OWORD *)this + 43);
    caulk::pooled_semaphore_mutex::_unlock((AUSpatialMixerV2 *)((char *)this + 1968));
    uint64_t v19 = (OpaqueAudioComponentInstance ***)*((void *)this + 416);
    for (uint64_t i = (OpaqueAudioComponentInstance ***)*((void *)this + 417); v19 != i; ++v19)
    {
      uint64_t v21 = *v19;
      uint64_t v22 = **v19;
      if (v22)
      {
        OSStatus v23 = AudioUnitReset(v22, 0, 0);
        if (v23)
        {
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          unsigned int v24 = (id)getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
          {
            unint64_t v25 = v21 + 9;
            if (*((char *)v21 + 95) < 0) {
              unint64_t v25 = (void *)*v25;
            }
            *(_DWORD *)std::vector<unsigned int> buf = 136315650;
            uint64_t v37 = "reset";
            __int16 v38 = 1024;
            *(_DWORD *)int v39 = v23;
            *(_WORD *)&v39[4] = 2080;
            *(void *)&v39[6] = v25;
            _os_log_error_impl(&dword_1BB0CE000, v24, OS_LOG_TYPE_ERROR, "%s: error %d resetting %s", buf, 0x1Cu);
          }
        }
        *(_OWORD *)(v21 + 7) = 0u;
        *(_OWORD *)(v21 + 5) = 0u;
        *(_OWORD *)(v21 + 3) = 0u;
        *(_OWORD *)(v21 + 1) = 0u;
      }
    }
    *((_DWORD *)this + 2245) = -1;
    goto LABEL_40;
  }
  if (a2 != 1)
  {
LABEL_40:
    int64x2_t v26 = (ParametricFilters *)*((void *)this + 1124);
    if (v26) {
      ParametricFilters::reset(v26);
    }
    AUSpatialMixerV2::ResetReverbFilters((uint64_t)this);
    uint64_t v27 = *((void *)this + 334);
    if (v27) {
      (*(void (**)(uint64_t))(*(void *)v27 + 24))(v27);
    }
    caulk::pooled_semaphore_mutex::_lock((AUSpatialMixerV2 *)((char *)this + 12164));
    uint64_t v28 = (IR::FixedIntegerDelay *)*((void *)this + 1513);
    uint64_t v29 = (IR::FixedIntegerDelay *)*((void *)this + 1514);
    while (v28 != v29)
    {
      IR::FixedIntegerDelay::reset(v28);
      uint64_t v28 = (IR::FixedIntegerDelay *)((char *)v28 + 56);
    }
    uint64_t v30 = (IR::FixedIntegerDelay *)*((void *)this + 1516);
    uint64_t v31 = (IR::FixedIntegerDelay *)*((void *)this + 1517);
    while (v30 != v31)
    {
      IR::FixedIntegerDelay::reset(v30);
      uint64_t v30 = (IR::FixedIntegerDelay *)((char *)v30 + 56);
    }
    caulk::pooled_semaphore_mutex::_unlock((AUSpatialMixerV2 *)((char *)this + 12164));
    uint64_t v32 = *((void *)this + 372);
    if (v32) {
      Overlapper<float>::clear(v32 + 40);
    }
    uint64_t v16 = 0;
    *((_DWORD *)this + 746) = -1;
    goto LABEL_53;
  }
  uint64_t v8 = *((void *)this + 15);
  if (v8) {
    LODWORD(v9) = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 24))(v8);
  }
  else {
    uint64_t v9 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
  }
  if (v9 > a3)
  {
    unsigned __int8 v13 = atomic_load((unsigned __int8 *)this + 8977);
    if (v13)
    {
      uint64_t v14 = ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 80), a3);
      (*(void (**)(uint64_t))(*(void *)v14 + 120))(v14);
    }
    goto LABEL_40;
  }
  if (getAUSMV2Log(void)::onceToken != -1) {
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
  }
  uint64_t v15 = (id)getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    uint64_t v34 = (char *)this + 3368;
    if (*((char *)this + 3391) < 0) {
      uint64_t v34 = *(const char **)v34;
    }
    *(_DWORD *)std::vector<unsigned int> buf = 136315650;
    uint64_t v37 = v34;
    __int16 v38 = 2080;
    *(void *)int v39 = "Reset";
    *(_WORD *)&v39[8] = 1024;
    *(_DWORD *)&v39[10] = a3;
    _os_log_error_impl(&dword_1BB0CE000, v15, OS_LOG_TYPE_ERROR, "[%s|%s] Invalid input scope element %u", buf, 0x1Cu);
  }

  uint64_t v16 = 4294956419;
LABEL_53:
  std::scoped_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~scoped_lock[abi:ne180100](v35);
  return v16;
}

void sub_1BB3E5468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::scoped_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~scoped_lock[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t AUSpatialMixerV2::Cleanup(AUSpatialMixerV2 *this)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  atomic_store(0, (unsigned __int8 *)this + 8977);
  atomic_store(0, (unsigned __int8 *)this + 8978);
  atomic_store(1u, (unsigned __int8 *)this + 2632);
  __dmb(0xBu);
  if (getAUSMV2Log(void)::onceToken != -1) {
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
  }
  int v2 = (id)getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    unsigned __int8 v3 = (void *)((char *)this + 3368);
    if (*((char *)this + 3391) < 0) {
      unsigned __int8 v3 = (void *)*v3;
    }
    *(_DWORD *)std::vector<unsigned int> buf = 136315394;
    *(void *)&uint8_t buf[4] = v3;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "Cleanup";
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEFAULT, "[%s|%s] Cleaning up", buf, 0x16u);
  }

  uint64_t v4 = (void *)[objc_alloc(MEMORY[0x1E4F1CB18]) initWithSuiteName:@"com.apple.coreaudio"];
  if (([v4 BOOLForKey:@"ausm_capture_all"] & 1) != 0
    || ([v4 BOOLForKey:@"ausm_capture_config"] & 1) != 0)
  {
    if (*((char *)this + 5967) < 0)
    {
      if (*((void *)this + 744)) {
        goto LABEL_11;
      }
    }
    else if (*((unsigned char *)this + 5967))
    {
LABEL_11:
      *(void *)std::vector<unsigned int> buf = 0;
      CFIndex v5 = (CATimeUtilities *)(*(uint64_t (**)(AUSpatialMixerV2 *, unsigned char *))(*(void *)this + 272))(this, buf);
      if (!v5)
      {
        char v6 = *(NSObject **)buf;
        unint64_t CurrentGregorianDate = CATimeUtilities::GetCurrentGregorianDate(v5);
        uint64_t v11 = (void *)((char *)this + 5944);
        caulk::make_string((caulk *)"%d%02d%02d.%02d%02d%02d", (uint64_t)&__p, CurrentGregorianDate, ((int)(CurrentGregorianDate >> 8) >> 24), ((int)(CurrentGregorianDate >> 16) >> 24), ((int)(CurrentGregorianDate >> 24) >> 24), (SHIDWORD(CurrentGregorianDate) >> 24), (int)v12);
        if (*((char *)this + 5967) < 0) {
          uint64_t v11 = (void *)*v11;
        }
        unsigned __int8 v13 = (char *)this + 3368;
        uint64_t v14 = (char *)this + 3368;
        if (*((char *)this + 3391) < 0) {
          uint64_t v14 = *(char **)v13;
        }
        p_p = &__p;
        if (v65 < 0) {
          p_p = __p;
        }
        uint64_t v16 = objc_msgSend(NSString, "stringWithFormat:", @"%s/ausm_%s_preset_%s_%u.aupreset", v11, v14, p_p, *((unsigned int *)this + 767));
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        unsigned int v17 = (id)getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v18 = (char *)this + 3368;
          if (*((char *)this + 3391) < 0) {
            uint64_t v18 = *(char **)v13;
          }
          *(_DWORD *)std::vector<unsigned int> buf = 136315650;
          *(void *)&uint8_t buf[4] = v18;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "CaptureConfigIfNecessary";
          *(_WORD *)&buf[22] = 2112;
          __int16 v67 = v16;
          _os_log_impl(&dword_1BB0CE000, v17, OS_LOG_TYPE_DEFAULT, "[%s|%s] Captured preset will be saved to file %@", buf, 0x20u);
        }

        if ([v6 writeToFile:v16 atomically:1])
        {
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          uint64_t v19 = (id)getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
          {
            if (*((char *)this + 3391) < 0) {
              unsigned __int8 v13 = *(char **)v13;
            }
            *(_DWORD *)std::vector<unsigned int> buf = 136315650;
            *(void *)&uint8_t buf[4] = v13;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "CaptureConfigIfNecessary";
            *(_WORD *)&buf[22] = 2112;
            __int16 v67 = v16;
            _os_log_debug_impl(&dword_1BB0CE000, v19, OS_LOG_TYPE_DEBUG, "[%s|%s] Preset exported to %@", buf, 0x20u);
          }
        }
        else
        {
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          uint64_t v19 = (id)getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          {
            if (*((char *)this + 3391) < 0) {
              unsigned __int8 v13 = *(char **)v13;
            }
            *(_DWORD *)std::vector<unsigned int> buf = 136315650;
            *(void *)&uint8_t buf[4] = v13;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "CaptureConfigIfNecessary";
            *(_WORD *)&buf[22] = 2112;
            __int16 v67 = v16;
            _os_log_error_impl(&dword_1BB0CE000, v19, OS_LOG_TYPE_ERROR, "[%s|%s] ERROR: could not export the preset to %@", buf, 0x20u);
          }
        }

        ++*((_DWORD *)this + 767);
        if (v65 < 0) {
          operator delete(__p);
        }
        goto LABEL_50;
      }
      if (getAUSMV2Log(void)::onceToken != -1) {
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
      }
      char v6 = (id)getAUSMV2Log(void)::gLog;
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
LABEL_50:

        goto LABEL_51;
      }
      CFStringRef v7 = (void *)((char *)this + 3368);
      if (*((char *)this + 3391) < 0) {
        CFStringRef v7 = (void *)*v7;
      }
      *(_DWORD *)std::vector<unsigned int> buf = 136315394;
      *(void *)&uint8_t buf[4] = v7;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "CaptureConfigIfNecessary";
      uint64_t v8 = "[%s|%s] ERROR: Could not capture preset";
LABEL_25:
      _os_log_error_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_ERROR, v8, buf, 0x16u);
      goto LABEL_50;
    }
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    char v6 = (id)getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_50;
    }
    uint64_t v9 = (void *)((char *)this + 3368);
    if (*((char *)this + 3391) < 0) {
      uint64_t v9 = (void *)*v9;
    }
    *(_DWORD *)std::vector<unsigned int> buf = 136315394;
    *(void *)&uint8_t buf[4] = v9;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "CaptureConfigIfNecessary";
    uint64_t v8 = "[%s|%s] ERROR: no capture dir path available";
    goto LABEL_25;
  }
LABEL_51:

  uint64_t v20 = *((void *)this + 328);
  uint64_t v21 = *((void *)this + 327);
  applesauce::dispatch::v1::queue::get(v21);
  objc_claimAutoreleasedReturnValue();
  if (v20)
  {
    uint64_t v22 = v62;
    v62[0] = MEMORY[0x1E4F143A8];
    v62[1] = 3221225472;
    v62[2] = ___ZN16AUSpatialMixerV27CleanupEv_block_invoke;
    v62[3] = &__block_descriptor_40_e5_v8__0l;
    v62[4] = this;
  }
  else
  {
    uint64_t v22 = &__block_literal_global_152;
  }
  dispatch_sync(v21, v22);

  OSStatus v23 = (AUSpatialMixerV2OrientationObserver *)*((void *)this + 374);
  if (v23)
  {
    AUSpatialMixerV2OrientationObserver::unregister(v23);
    unsigned int v24 = (std::__shared_weak_count *)*((void *)this + 375);
    *((_OWORD *)this + 187) = 0u;
    if (v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    }
  }
  unint64_t v25 = (IR::IRDataLoader *)AudioDSP::Core::HeadTracker::UnregisterUserChoiceListener((AUSpatialMixerV2 *)((char *)this + 8944));
  IR::IRDataLoader::instance(v25);
  std::operator+<char>();
  IR::IRDataLoader::removeFromPersonalizedHRTFCallbackPool();
  if (v61 < 0) {
    operator delete(v60);
  }
  *(void *)std::vector<unsigned int> buf = (char *)this + 3072;
  *(void *)&buf[8] = (char *)this + 3088;
  *(void *)&buf[16] = (char *)this + 3104;
  std::__lock_first<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>(0, (uint64_t)this + 3072, (uint64_t)this + 3088, (uint64_t)this + 3104);
  ElementVector::freeOld(*((ElementVector ***)this + 72));
  AUSpatialMixerV2::DisposeInputConverters(this);
  AUSpatialMixerV2::DisposeOutputConverter(this);
  uint64_t v26 = 0;
  uint64_t v27 = *((void *)this + 341);
  do
  {
    uint64_t v28 = v27 + v26;
    *(void *)(v28 + 8) = *(void *)(v27 + v26);
    *(unsigned char *)(v28 + 24) = 1;
    v26 += 32;
  }
  while (v26 != 128);
  uint64_t v29 = (void *)(v27 + 128);
  do
  {
    v29[1] = *v29;
    v29 += 3;
  }
  while (v29 != (void *)(v27 + 200));
  *(void *)(v27 + 208) = *(void *)(v27 + 200);
  *(void *)(v27 + 816) = *(void *)(v27 + 808);
  std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__clear[abi:ne180100]((uint64_t *)(v27 + 224));
  *(void *)(v27 + 256) = *(void *)(v27 + 248);
  LOBYTE(__p) = 0;
  uint64_t v30 = *(_DWORD **)(v27 + 272);
  unint64_t v31 = *(void *)(v27 + 280) - (void)v30;
  if (v31 > 7)
  {
    if (v31 != 8) {
      *(void *)(v27 + 280) = v30 + 2;
    }
  }
  else
  {
    std::vector<char>::__append((std::vector<char> *)(v27 + 272), 8 - v31, (std::vector<char>::const_reference)&__p);
    uint64_t v30 = *(_DWORD **)(v27 + 272);
  }
  _DWORD *v30 = 0;
  *(void *)(v27 + 304) = *(void *)(v27 + 296);
  *(void *)(v27 + 336) = *(void *)(v27 + 328);
  *(void *)(v27 + 360) = *(void *)(v27 + 352);
  *(void *)(v27 + 496) = *(void *)(v27 + 488);
  *(void *)(v27 + 520) = *(void *)(v27 + 512);
  *(void *)(v27 + 560) = *(void *)(v27 + 552);
  *(void *)(v27 + 592) = *(void *)(v27 + 584);
  *(void *)(v27 + 616) = *(void *)(v27 + 608);
  *(void *)(v27 + 656) = *(void *)(v27 + 648);
  *(void *)(v27 + 688) = *(void *)(v27 + 680);
  *(void *)(v27 + 712) = *(void *)(v27 + 704);
  *(void *)(v27 + 752) = *(void *)(v27 + 744);
  *(void *)(v27 + 400) = *(void *)(v27 + 392);
  *(void *)(v27 + 424) = *(void *)(v27 + 416);
  *(void *)(v27 + 464) = *(void *)(v27 + 456);
  *(_DWORD *)(v27 + 324) = 0;
  IR::ComplexDataCircBuffer::cleanup((IR::ComplexDataCircBuffer *)(v27 + 776));
  IR::ComplexDataCircBuffer::cleanup((IR::ComplexDataCircBuffer *)(v27 + 784));
  IR::ComplexDataCircBuffer::cleanup((IR::ComplexDataCircBuffer *)(v27 + 792));
  IR::ComplexDataCircBuffer::cleanup((IR::ComplexDataCircBuffer *)(v27 + 800));
  *((void *)this + 343) = *((void *)this + 342);
  LOBYTE(__p) = 0;
  uint64_t v32 = (_DWORD *)*((void *)this + 345);
  unint64_t v33 = *((void *)this + 346) - (void)v32;
  if (v33 > 7)
  {
    if (v33 != 8) {
      *((void *)this + 346) = v32 + 2;
    }
  }
  else
  {
    std::vector<char>::__append((std::vector<char> *)this + 115, 8 - v33, (std::vector<char>::const_reference)&__p);
    uint64_t v32 = (_DWORD *)*((void *)this + 345);
  }
  _DWORD *v32 = 0;
  *((void *)this + 349) = *((void *)this + 348);
  *((_DWORD *)this + 703) = 0;
  *((void *)this + 353) = *((void *)this + 352);
  LOBYTE(__p) = 0;
  uint64_t v34 = (_DWORD *)*((void *)this + 355);
  unint64_t v35 = *((void *)this + 356) - (void)v34;
  if (v35 > 7)
  {
    if (v35 != 8) {
      *((void *)this + 356) = v34 + 2;
    }
  }
  else
  {
    std::vector<char>::__append((std::vector<char> *)((char *)this + 2840), 8 - v35, (std::vector<char>::const_reference)&__p);
    uint64_t v34 = (_DWORD *)*((void *)this + 355);
  }
  *uint64_t v34 = 0;
  *((void *)this + 359) = *((void *)this + 358);
  *((_DWORD *)this + 723) = 0;
  uint64_t v36 = *((void *)this + 247);
  *((void *)this + 248) = v36;
  *((unsigned char *)this + 2000) = 1;
  *((void *)this + 251) = v36;
  *((_DWORD *)this + 504) = -1;
  atomic_store(0, (unsigned int *)this + 505);
  uint64_t v37 = *((void *)this + 256);
  *((void *)this + 257) = v37;
  *((unsigned char *)this + 2072) = 1;
  *((void *)this + 260) = v37;
  *((_DWORD *)this + 522) = -1;
  atomic_store(0, (unsigned int *)this + 523);
  uint64_t v38 = *((void *)this + 301);
  *((void *)this + 302) = v38;
  *((unsigned char *)this + 2432) = 1;
  *((void *)this + 305) = v38;
  *((_DWORD *)this + 612) = -1;
  atomic_store(0, (unsigned int *)this + 613);
  uint64_t v39 = *((void *)this + 307);
  *((void *)this + 308) = v39;
  *((unsigned char *)this + 2480) = 1;
  *((void *)this + 311) = v39;
  *((_DWORD *)this + 624) = -1;
  atomic_store(0, (unsigned int *)this + 625);
  uint64_t v40 = *((void *)this + 313);
  *((void *)this + 314) = v40;
  *((unsigned char *)this + 2528) = 1;
  *((void *)this + 317) = v40;
  *((_DWORD *)this + 636) = -1;
  atomic_store(0, (unsigned int *)this + 637);
  LOBYTE(v40) = atomic_load((unsigned __int8 *)this + 2608);
  if (v40)
  {
    uint64_t v41 = *((void *)this + 320);
    *((void *)this + 321) = v41;
    *((unsigned char *)this + 2584) = 1;
    *((void *)this + 324) = v41;
    *((_DWORD *)this + 650) = -1;
    atomic_store(0, (unsigned int *)this + 651);
  }
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 2032);
  IR::IRProcessor::uninitialize(*((IR::IRProcessor **)this + 253));
  atomic_store(0, (unsigned __int8 *)this + 2096);
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock((uint64_t)this + 2032);
  std::string __p = (char *)this + 2252;
  char v64 = 1;
  caulk::pooled_semaphore_mutex::_lock((AUSpatialMixerV2 *)((char *)this + 2252));
  *((_DWORD *)this + 586) = 0;
  *((_DWORD *)this + 588) = 0;
  atomic_store(0, (unsigned __int8 *)this + 2348);
  atomic_store(0, (unsigned __int8 *)this + 2248);
  atomic_store(0, (unsigned __int8 *)this + 2249);
  atomic_store(0, (unsigned __int8 *)this + 2250);
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 284);
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 287);
  std::vector<std::shared_ptr<vp::vx::io::Node_Terminal>>::__clear[abi:ne180100]((uint64_t *)this + 263);
  std::vector<std::shared_ptr<vp::vx::io::Node_Terminal>>::__clear[abi:ne180100]((uint64_t *)this + 269);
  std::vector<std::shared_ptr<vp::vx::io::Node_Terminal>>::__clear[abi:ne180100]((uint64_t *)this + 275);
  *((void *)this + 267) = *((void *)this + 266);
  *((void *)this + 273) = *((void *)this + 272);
  *((void *)this + 279) = *((void *)this + 278);
  std::vector<std::shared_ptr<vp::vx::io::Node_Terminal>>::__clear[abi:ne180100]((uint64_t *)this + 290);
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&__p);
  atomic_store(0, (unsigned __int8 *)this + 2552);
  atomic_store(0, (unsigned __int8 *)this + 2553);
  uint64_t v42 = (AUSM::AUFXWrapper **)*((void *)this + 417);
  int v43 = (AUSM::AUFXWrapper **)*((void *)this + 416);
  while (v42 != v43)
    std::unique_ptr<AUSM::AUFXWrapper>::reset[abi:ne180100](--v42);
  *((void *)this + 417) = v43;
  AUSpatialMixerV2::AlignmentDelay::reset((AUSpatialMixerV2 *)((char *)this + 12104));
  std::unique_ptr<ParametricFilters>::reset[abi:ne180100]((void ***)this + 1123, 0);
  std::unique_ptr<ParametricFilters>::reset[abi:ne180100]((void ***)this + 1124, 0);
  uint64_t v44 = *((void *)this + 15);
  if (v44)
  {
    LODWORD(v45) = (*(uint64_t (**)(uint64_t))(*(void *)v44 + 24))(v44);
    if (!v45) {
      goto LABEL_86;
    }
  }
  else
  {
    uint64_t v45 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
    if (!v45) {
      goto LABEL_86;
    }
  }
  unsigned int v46 = 0;
  do
  {
    uint64_t Element = ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 80), v46);
    (*(void (**)(uint64_t))(*(void *)Element + 128))(Element);
    ++v46;
  }
  while (v45 != v46);
LABEL_86:
  uint64_t v48 = ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 128), 0);
  (*(void (**)(uint64_t))(*(void *)v48 + 128))(v48);
  atomic_store(0, (unsigned int *)this + 3024);
  id v49 = (uint64_t *)*((void *)this + 68);
  std::vector<std::vector<float>>::__clear[abi:ne180100](v49 + 4);
  v49[8] = v49[7];
  id v50 = (void *)v49[11];
  v49[11] = 0;
  if (v50) {
    std::default_delete<AUSM::InputABLBuffer>::operator()[abi:ne180100](v50);
  }
  std::unique_ptr<APAC::Metadata>::reset[abi:ne180100](v49 + 3, 0);
  long long v51 = (std::__shared_weak_count *)*((void *)this + 412);
  *((void *)this + 411) = 0;
  *((void *)this + 412) = 0;
  if (v51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v51);
  }
  std::unique_ptr<AUSM::SharedBuffers>::reset[abi:ne180100]((uint64_t *)this + 339, 0);
  std::unique_ptr<AUSM::SharedBuffers>::reset[abi:ne180100]((uint64_t *)this + 340, 0);
  *((_DWORD *)this + 3025) = -1;
  atomic_store(0, (unsigned __int8 *)this + 2633);
  uint64_t v52 = *((void *)this + 372);
  if (v52)
  {
    TorqueEngine::resizeBuffers((void **)v52, 0);
    *(_DWORD *)(v52 + 16832) = -1082130432;
    __asm { FMOV            V0.2S, #-1.0 }
    *(void *)(v52 + 16848) = _D0;
  }
  long long v58 = *(_OWORD *)&buf[8];
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(*(uint64_t *)buf);
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(v58);
  return caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(*((uint64_t *)&v58 + 1));
}

void sub_1BB3E60E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void ___ZN16AUSpatialMixerV27CleanupEv_block_invoke(uint64_t a1)
{
  dispatch_source_t source = *(dispatch_source_t *)(*(void *)(a1 + 32) + 2624);
  applesauce::dispatch::v1::queue::get(source);
  objc_claimAutoreleasedReturnValue();
  dispatch_source_cancel(source);
}

void AUSpatialMixerV2OrientationObserver::unregister(AUSpatialMixerV2OrientationObserver *this)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  CFNumberRef v1 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v1)
  {
    uint64_t v3 = *(void *)this;
    atomic_fetch_add_explicit(&v1->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v4 = std::__shared_weak_count::lock(v1);
    if (v4)
    {
      CFIndex v5 = v4;
      if (v3)
      {
        std::mutex::lock((std::mutex *)((char *)this + 80));
        unsigned __int8 v6 = atomic_load((unsigned __int8 *)this + 72);
        if (v6)
        {
          atomic_store(0, (unsigned __int8 *)this + 72);
          if (*((_DWORD *)this + 4) == 1)
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            CFStringRef v7 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v8 = (void *)((char *)this + 40);
              if (*((char *)this + 63) < 0) {
                uint64_t v8 = (void *)*v8;
              }
              int v11 = 136315138;
              double v12 = v8;
              _os_log_impl(&dword_1BB0CE000, v7, OS_LOG_TYPE_DEFAULT, "Unregistering UI orientation observer %s", (uint8_t *)&v11, 0xCu);
            }

            CAUnregisterUIOrientation();
          }
          else
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            uint64_t v9 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
            {
              unsigned __int8 v10 = (void *)((char *)this + 40);
              if (*((char *)this + 63) < 0) {
                unsigned __int8 v10 = (void *)*v10;
              }
              int v11 = 136315138;
              double v12 = v10;
              _os_log_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_DEFAULT, "Unregistering device orientation observer %s", (uint8_t *)&v11, 0xCu);
            }

            CAUnregisterDeviceOrientation();
          }
        }
        std::mutex::unlock((std::mutex *)((char *)this + 80));
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_1BB3E63DC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v3);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__lock_first<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  while (a1 == 1)
  {
    uint64_t v11 = a3;
    char v12 = 1;
    caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock(a3);
    int v9 = std::try_lock[abi:ne180100]<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>(a4, a2);
    if (v9 == -1)
    {
LABEL_10:
      uint64_t v11 = 0;
      char v12 = 0;
      return std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v11);
    }
    std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v11);
    if (v9 == 1) {
      a1 = 0;
    }
    else {
      a1 = v9 + 2;
    }
LABEL_9:
    sched_yield();
  }
  if (!a1)
  {
    uint64_t v11 = a2;
    char v12 = 1;
    caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock(a2);
    int v8 = std::try_lock[abi:ne180100]<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>(a3, a4);
    if (v8 == -1) {
      goto LABEL_10;
    }
    std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v11);
    a1 = v8 + 1;
    goto LABEL_9;
  }
  return std::__lock_first<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>((a1 - 2), a4, a2, a3);
}

void sub_1BB3E6508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

OpaqueAudioConverter *AUSpatialMixerV2::DisposeInputConverters(AUSpatialMixerV2 *this)
{
  int v2 = (OpaqueAudioConverter *)*((void *)this + 362);
  if (v2) {
    AudioConverterDispose(v2);
  }
  *((void *)this + 362) = 0;
  float result = (OpaqueAudioConverter *)*((void *)this + 363);
  if (result) {
    float result = (OpaqueAudioConverter *)AudioConverterDispose(result);
  }
  *((void *)this + 363) = 0;
  return result;
}

uint64_t AUSpatialMixerV2::DisposeOutputConverter(AUSpatialMixerV2 *this)
{
  int v2 = (OpaqueAudioConverter *)*((void *)this + 364);
  if (v2) {
    AudioConverterDispose(v2);
  }
  *((void *)this + 364) = 0;

  return AUSpatialMixerV2::DisposeOutputCaptureFile((uint64_t)this);
}

AUSM::AUFXWrapper *std::unique_ptr<AUSM::AUFXWrapper>::reset[abi:ne180100](AUSM::AUFXWrapper **a1)
{
  float result = *a1;
  *a1 = 0;
  if (result)
  {
    AUSM::AUFXWrapper::~AUFXWrapper(result);
    JUMPOUT(0x1C185D370);
  }
  return result;
}

uint64_t std::scoped_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::__unlock_unpack[abi:ne180100]<0ul,1ul,2ul>(uint64_t *a1)
{
  uint64_t v1 = a1[1];
  uint64_t v2 = a1[2];
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(*a1);
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(v1);

  return caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(v2);
}

void AUSM::AUFXWrapper::~AUFXWrapper(AUSM::AUFXWrapper *this)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(OpaqueAudioComponentInstance **)this;
  if (v2)
  {
    AudioComponentInstanceDispose(v2);
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    uint64_t v3 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = (void *)((char *)this + 72);
      if (*((char *)this + 95) < 0) {
        uint64_t v4 = (void *)*v4;
      }
      int v8 = 136315394;
      int v9 = "~AUFXWrapper";
      __int16 v10 = 2080;
      uint64_t v11 = v4;
      _os_log_impl(&dword_1BB0CE000, v3, OS_LOG_TYPE_DEFAULT, "%s: disposing of %s", (uint8_t *)&v8, 0x16u);
    }

    *(void *)this = 0;
  }
  CFIndex v5 = (void *)*((void *)this + 23);
  if (v5)
  {
    *((void *)this + 24) = v5;
    operator delete(v5);
  }
  unsigned __int8 v6 = (void *)*((void *)this + 20);
  if (v6)
  {
    *((void *)this + 21) = v6;
    operator delete(v6);
  }
  CFStringRef v7 = (void *)*((void *)this + 17);
  if (v7)
  {
    *((void *)this + 18) = v7;
    operator delete(v7);
  }
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
}

void sub_1BB3E6798(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t AUSpatialMixerV2::DisposeOutputCaptureFile(uint64_t this)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (*(void *)(this + 3056))
  {
    uint64_t v1 = this;
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    uint64_t v2 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(v1 + 3368);
      if (*(char *)(v1 + 3391) < 0) {
        uint64_t v3 = (void *)*v3;
      }
      int v4 = 136315394;
      CFIndex v5 = v3;
      __int16 v6 = 2080;
      CFStringRef v7 = "DisposeOutputCaptureFile";
      _os_log_debug_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEBUG, "[%s|%s] Disposing output capture file", (uint8_t *)&v4, 0x16u);
    }

    this = ExtAudioFileDispose(*(ExtAudioFileRef *)(v1 + 3056));
    *(void *)(v1 + 3056) = 0;
  }
  return this;
}

uint64_t std::try_lock[abi:ne180100]<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a1;
  int v3 = caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::try_lock(a1);
  char v7 = v3;
  if (v3)
  {
    if (caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::try_lock(a2))
    {
      uint64_t v6 = 0;
      char v7 = 0;
      uint64_t v4 = 0xFFFFFFFFLL;
    }
    else
    {
      uint64_t v4 = 1;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v6);
  return v4;
}

void sub_1BB3E691C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t AUSpatialMixerV2::Initialize(AUSpatialMixerV2 *this)
{
  uint64_t v253 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (char *)&xmmword_1E9F7EFF8 + 8;
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    CFTypeRef v223 = (id)getAUSMV2Log(void)::gLog;
    os_signpost_id_t v224 = os_signpost_id_generate(v223);

    AUSpatialMixerV2::Initialize(void)::spid = v224;
    uint64_t v2 = (unsigned char *)(&xmmword_1E9F7EFF8 + 8);
  }
  if (*((void *)v2 + 271) != -1) {
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
  }
  int v3 = (id)getAUSMV2Log(void)::gLog;
  uint64_t v4 = v3;
  os_signpost_id_t v5 = AUSpatialMixerV2::Initialize(void)::spid;
  if ((unint64_t)(AUSpatialMixerV2::Initialize(void)::spid - 1) <= 0xFFFFFFFFFFFFFFFDLL
    && os_signpost_enabled(v3))
  {
    uint64_t v6 = (void *)((char *)this + 3368);
    if (*((char *)this + 3391) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    buf.st_dev = 136315138;
    *(void *)&buf.st_mode = v6;
    _os_signpost_emit_with_name_impl(&dword_1BB0CE000, v4, OS_SIGNPOST_INTERVAL_BEGIN, v5, "AUSM_INIT_EVENT", "%s", (uint8_t *)&buf, 0xCu);
  }

  mach_absolute_time();
  atomic_store(1u, (unsigned __int8 *)this + 2632);
  __dmb(0xBu);
  char v7 = (void *)*((void *)this + 327);
  uint64_t v8 = applesauce::dispatch::v1::queue::get(v7);
  dispatch_sync(v8, &__block_literal_global_3946);

  Boolean keyExistsAndHasValidFormat = 0;
  AppBooleanCFArrayRef Value = CFPreferencesGetAppBooleanValue(@"ausm_all_features", @"com.apple.coreaudio", &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat && AppBooleanValue)
  {
    v248[0] = @"SourceExtent";
    v248[1] = kOptionalFeatureSourceDiffuse;
    v249[0] = MEMORY[0x1E4F1CC38];
    v249[1] = MEMORY[0x1E4F1CC38];
    v248[2] = @"SourceDivergence";
    v248[3] = @"SourceDirectivity";
    v249[2] = MEMORY[0x1E4F1CC38];
    v249[3] = MEMORY[0x1E4F1CC38];
    v248[4] = @"NearFieldHOA";
    v248[5] = @"NearFieldHRTF";
    v249[4] = MEMORY[0x1E4F1CC38];
    v249[5] = MEMORY[0x1E4F1CC38];
    v248[6] = @"EnableAPACRoomPresets";
    v249[6] = MEMORY[0x1E4F1CC38];
    __int16 v10 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v249 forKeys:v248 count:7];
    *(void *)&__x.Float64 mSampleRate = v10;
    dev_t v11 = (*(uint64_t (**)(AUSpatialMixerV2 *, uint64_t, void, void, AudioStreamBasicDescription *, uint64_t))(*(void *)this + 96))(this, 3279, 0, 0, &__x, 8);
    if (v11)
    {
      if (getAUSMV2Log(void)::onceToken != -1) {
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
      }
      uint64_t v12 = (id)getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        long long v215 = (void *)((char *)this + 3368);
        if (*((char *)this + 3391) < 0) {
          long long v215 = (void *)*v215;
        }
        buf.st_dev = 136315650;
        *(void *)&buf.st_mode = v215;
        WORD2(buf.st_ino) = 2080;
        *(__darwin_ino64_t *)((char *)&buf.st_ino + 6) = (__darwin_ino64_t)"Initialize";
        HIWORD(buf.st_gid) = 1024;
        buf.st_rdev = v11;
        _os_log_error_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_ERROR, "[%s|%s] Could not enable all features (user defaults), err = %d", (uint8_t *)&buf, 0x1Cu);
      }
    }
  }
  atomic_store(1u, (unsigned __int8 *)this + 8977);
  __dmb(0xBu);
  unsigned int v13 = *((_DWORD *)this + 84);
  if (getAUSMV2Log(void)::onceToken != -1) {
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
  }
  uint64_t v14 = (id)getAUSMV2Log(void)::gLog;
  uint64_t v15 = v14;
  if (v13 <= 0x10000)
  {
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v17 = (void *)((char *)this + 3368);
      if (*((char *)this + 3391) < 0) {
        unsigned int v17 = (void *)*v17;
      }
      buf.st_dev = 136315650;
      *(void *)&buf.st_mode = v17;
      WORD2(buf.st_ino) = 2080;
      *(__darwin_ino64_t *)((char *)&buf.st_ino + 6) = (__darwin_ino64_t)"Initialize";
      HIWORD(buf.st_gid) = 1024;
      buf.st_rdev = v13;
      _os_log_impl(&dword_1BB0CE000, v15, OS_LOG_TYPE_DEFAULT, "[%s|%s] Initializing with max frames per slice = %u", (uint8_t *)&buf, 0x1Cu);
    }

    uint64_t v19 = *((void *)this + 68);
    unsigned __int8 v20 = atomic_load((unsigned __int8 *)(v19 + 96));
    if (v20)
    {
      uint64_t v21 = (int64x2_t *)(v19 + 32);
      if (*(void *)(v19 + 40) != *(void *)(v19 + 32) || *(void *)(v19 + 64) != *(void *)(v19 + 56))
      {
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        uint64_t v22 = (id)getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          float v220 = (void *)(v19 + 104);
          if (*(char *)(v19 + 127) < 0) {
            float v220 = (void *)*v220;
          }
          buf.st_dev = 136315394;
          *(void *)&buf.st_mode = v220;
          WORD2(buf.st_ino) = 2080;
          *(__darwin_ino64_t *)((char *)&buf.st_ino + 6) = (__darwin_ino64_t)"initialize";
          _os_log_error_impl(&dword_1BB0CE000, v22, OS_LOG_TYPE_ERROR, "[%s|%s] Cleanup was not done appropriately (1)", (uint8_t *)&buf, 0x16u);
        }

        std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)(v19 + 32));
        *(void *)(v19 + 64) = *(void *)(v19 + 56);
      }
      if (*(_DWORD *)(*(void *)(v19 + 16) + 32))
      {
        unsigned int v23 = 0;
        do
        {
          uint64_t v24 = *(unsigned int *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(*(void *)v19 + 80), v23) + 108);
          uint64_t v26 = *(std::vector<char> **)(v19 + 40);
          unint64_t v25 = *(void *)(v19 + 48);
          if ((unint64_t)v26 >= v25)
          {
            unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v26 - v21->i64[0]) >> 3);
            unint64_t v30 = v29 + 1;
            if (v29 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - v21->i64[0]) >> 3);
            if (2 * v31 > v30) {
              unint64_t v30 = 2 * v31;
            }
            if (v31 >= 0x555555555555555) {
              unint64_t v32 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v32 = v30;
            }
            buf.st_atimespec.tv_sec = v19 + 48;
            if (v32)
            {
              if (v32 > 0xAAAAAAAAAAAAAAALL) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              unint64_t v33 = (char *)operator new(24 * v32);
            }
            else
            {
              unint64_t v33 = 0;
            }
            *(void *)&buf.st_dev = v33;
            buf.__darwin_ino64_t st_ino = (__darwin_ino64_t)&v33[24 * v29];
            *(void *)&buf.st_uid = buf.st_ino;
            *(void *)&buf.st_rdev = &v33[24 * v32];
            LOBYTE(__x.mSampleRate) = 0;
            *(_DWORD *)std::vector<char>::vector((std::vector<char> *)buf.st_ino, (16 * v24) | 8, (const std::vector<char>::value_type *)&__x)->__begin_ = v24;
            __darwin_ino64_t st_ino = buf.st_ino;
            uint64_t v27 = *(void *)&buf.st_uid + 24;
            *(void *)&buf.st_uid += 24;
            uint64_t v36 = *(void **)(v19 + 32);
            unint64_t v35 = *(void **)(v19 + 40);
            if (v35 == v36)
            {
              int64x2_t v38 = vdupq_n_s64((unint64_t)v35);
            }
            else
            {
              do
              {
                *(void *)(st_ino - 24) = 0;
                *(void *)(st_ino - 16) = 0;
                st_ino -= 24;
                *(void *)(st_ino + 16) = 0;
                long long v37 = *(_OWORD *)(v35 - 3);
                v35 -= 3;
                *(_OWORD *)__darwin_ino64_t st_ino = v37;
                *(void *)(st_ino + 16) = v35[2];
                void *v35 = 0;
                v35[1] = 0;
                uint64_t v35[2] = 0;
              }
              while (v35 != v36);
              int64x2_t v38 = *v21;
              uint64_t v27 = *(void *)&buf.st_uid;
            }
            *(void *)(v19 + 32) = st_ino;
            *(void *)(v19 + 40) = v27;
            *(int64x2_t *)&buf.__darwin_ino64_t st_ino = v38;
            uint64_t v39 = *(void *)(v19 + 48);
            *(void *)(v19 + 48) = *(void *)&buf.st_rdev;
            *(void *)&buf.st_rdev = v39;
            *(void *)&buf.st_dev = v38.i64[0];
            std::__split_buffer<std::vector<unsigned int>>::~__split_buffer((uint64_t)&buf);
          }
          else
          {
            LOBYTE(buf.st_dev) = 0;
            std::vector<char>::vector(v26, (16 * v24) | 8, (const std::vector<char>::value_type *)&buf);
            begiuint64_t n = v26->__begin_;
            uint64_t v27 = (uint64_t)&v26[1];
            *begiuint64_t n = v24;
            *(void *)(v19 + 40) = v27;
          }
          *(void *)(v19 + 40) = v27;
          uint64_t v40 = *(void *)(v27 - 24);
          uint64_t v42 = *(void **)(v19 + 64);
          unint64_t v41 = *(void *)(v19 + 72);
          if ((unint64_t)v42 >= v41)
          {
            uint64_t v44 = *(void *)(v19 + 56);
            uint64_t v45 = ((uint64_t)v42 - v44) >> 3;
            if ((unint64_t)(v45 + 1) >> 61) {
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v46 = v41 - v44;
            uint64_t v47 = v46 >> 2;
            if (v46 >> 2 <= (unint64_t)(v45 + 1)) {
              uint64_t v47 = v45 + 1;
            }
            if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v48 = v47;
            }
            if (v48) {
              unint64_t v48 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v48);
            }
            else {
              uint64_t v49 = 0;
            }
            id v50 = (void *)(v48 + 8 * v45);
            *id v50 = v40;
            int v43 = v50 + 1;
            uint64_t v52 = *(char **)(v19 + 56);
            long long v51 = *(char **)(v19 + 64);
            if (v51 != v52)
            {
              do
              {
                uint64_t v53 = *((void *)v51 - 1);
                v51 -= 8;
                *--id v50 = v53;
              }
              while (v51 != v52);
              long long v51 = *(char **)(v19 + 56);
            }
            *(void *)(v19 + 56) = v50;
            *(void *)(v19 + 64) = v43;
            *(void *)(v19 + 72) = v48 + 8 * v49;
            if (v51) {
              operator delete(v51);
            }
          }
          else
          {
            *uint64_t v42 = v40;
            int v43 = v42 + 1;
          }
          *(void *)(v19 + 64) = v43;
          ++v23;
        }
        while (v23 < *(_DWORD *)(*(void *)(v19 + 16) + 32));
      }
      if (*(void *)(v19 + 88))
      {
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        long long v54 = (id)getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
        {
          float v222 = (void *)(v19 + 104);
          if (*(char *)(v19 + 127) < 0) {
            float v222 = (void *)*v222;
          }
          buf.st_dev = 136315394;
          *(void *)&buf.st_mode = v222;
          WORD2(buf.st_ino) = 2080;
          *(__darwin_ino64_t *)((char *)&buf.st_ino + 6) = (__darwin_ino64_t)"initialize";
          _os_log_error_impl(&dword_1BB0CE000, v54, OS_LOG_TYPE_ERROR, "[%s|%s] Cleanup was not done appropriately (2)", (uint8_t *)&buf, 0x16u);
        }
      }
      operator new();
    }
    AUSM::Messenger::instance(v18);
    AUSM::Messenger::get((AUSM::Messenger *)&buf);
    long long v55 = (std::__shared_weak_count *)*((void *)this + 412);
    *(_OWORD *)((char *)this + 3288) = *(_OWORD *)&buf.st_dev;
    if (v55) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v55);
    }
    long long v56 = (AUSpatialMixerV2OrientationObserver *)*((void *)this + 374);
    if (v56)
    {
      AUSpatialMixerV2OrientationObserver::unregister(v56);
      long long v57 = (std::__shared_weak_count *)*((void *)this + 375);
      *((_OWORD *)this + 187) = 0u;
      if (v57) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v57);
      }
    }
    unsigned int v58 = atomic_load((unsigned int *)this + 1237);
    if (v58 - 1 >= 2)
    {
      if (v58 || (unsigned __int8 v73 = atomic_load((unsigned __int8 *)this + 3444), (v73 & 1) != 0))
      {
LABEL_129:
        AUSM::AppleSauceCFWithMutex<__CFDictionary const*>::load(&v238, (uint64_t)this + 5480);
        if (v238)
        {
          unsigned int v83 = (unsigned __int16)applesauce::CF::details::find_at_key_or_optional<BOOL,__CFString const*&>((const __CFDictionary *)v238, (const void *)kOptionalFeatureSourceDiffuse);
          if (v83 <= 0x100) {
            LOBYTE(v83) = 0;
          }
          unsigned __int8 v84 = v83 != 0;
        }
        else
        {
          unsigned __int8 v84 = 0;
        }
        atomic_store(v84, (unsigned __int8 *)this + 2608);
        float v236 = (char *)this + 3072;
        float v237 = (char *)this + 3088;
        unsigned int v226 = (char *)this + 3072;
        std::lock[abi:ne180100]<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>((uint64_t)this + 3072, (uint64_t)this + 3088);
        int v85 = (unsigned __int8 *)this + 8288;
        Boolean v235 = 0;
        AppIntegerCFArrayRef Value = CFPreferencesGetAppIntegerValue(@"ausm_verbose", @"com.apple.coreaudio", &v235);
        if (v235) {
          int v87 = AppIntegerValue;
        }
        else {
          int v87 = 0;
        }
        *((_DWORD *)this + 1484) = v87;
        Boolean v234 = 0;
        if (CFPreferencesGetAppIntegerValue(@"ausm_trace_render", @"com.apple.coreaudio", &v234)) {
          BOOL v88 = v234 == 0;
        }
        else {
          BOOL v88 = 1;
        }
        char v89 = !v88;
        *((unsigned char *)this + 8976) = v89;
        Boolean v233 = 0;
        int v90 = CFPreferencesGetAppBooleanValue(@"ausm_enable_debug_features", @"com.apple.coreaudio", &v233);
        if (v233 && v90)
        {
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          uint64_t v91 = (id)getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled(v91, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v219 = (void *)((char *)this + 3368);
            if (*((char *)this + 3391) < 0) {
              uint64_t v219 = (void *)*v219;
            }
            buf.st_dev = 136315650;
            *(void *)&buf.st_mode = v219;
            WORD2(buf.st_ino) = 2080;
            *(__darwin_ino64_t *)((char *)&buf.st_ino + 6) = (__darwin_ino64_t)"Initialize";
            HIWORD(buf.st_gid) = 2112;
            *(void *)&buf.st_rdev = @"ausm_enable_debug_features";
            _os_log_debug_impl(&dword_1BB0CE000, v91, OS_LOG_TYPE_DEBUG, "[%s|%s] Using defaults write %@", (uint8_t *)&buf, 0x20u);
          }

          uint64_t v92 = *((void *)this + 327);
          applesauce::dispatch::v1::queue::get(v92);
          objc_claimAutoreleasedReturnValue();
          uint64_t v93 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, v92);

          unint64_t v94 = (void *)*((void *)this + 328);
          *((void *)this + 328) = v93;

          uint64_t v95 = *((void *)this + 328);
          int v85 = (unsigned __int8 *)this + 8288;
          if (v95)
          {
            applesauce::dispatch::v1::queue::get(*((id *)this + 328));
            objc_claimAutoreleasedReturnValue();
            dispatch_time_t v96 = dispatch_time(0, 50000000);
            dispatch_source_set_timer(v95, v96, 0x2FAF080uLL, 0x17D7840uLL);

            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            uint64_t v97 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v97, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v221 = (void *)((char *)this + 3368);
              if (*((char *)this + 3391) < 0) {
                uint64_t v221 = (void *)*v221;
              }
              buf.st_dev = 136315394;
              *(void *)&buf.st_mode = v221;
              WORD2(buf.st_ino) = 2080;
              *(__darwin_ino64_t *)((char *)&buf.st_ino + 6) = (__darwin_ino64_t)"Initialize";
              _os_log_debug_impl(&dword_1BB0CE000, v97, OS_LOG_TYPE_DEBUG, "[%s|%s] Creating a timer to check defaults writes while running", (uint8_t *)&buf, 0x16u);
            }

            uint64_t v98 = (void *)*((void *)this + 328);
            unint64_t v99 = applesauce::dispatch::v1::queue::get(v98);
            handler[0] = MEMORY[0x1E4F143A8];
            handler[1] = 3221225472;
            handler[2] = ___ZN16AUSpatialMixerV210InitializeEv_block_invoke_145;
            handler[3] = &__block_descriptor_40_e5_v8__0l;
            handler[4] = this;
            dispatch_source_set_event_handler(v99, handler);

            __int16 v100 = (void *)*((void *)this + 328);
            uint64_t v101 = applesauce::dispatch::v1::queue::get(v100);
            dispatch_resume(v101);

            AUSpatialMixerV2::DebugSoloInputElement(this);
            int v85 = (unsigned __int8 *)this + 8288;
          }
        }
        (*(void (**)(AUSpatialMixerV2 *, uint64_t))(*(void *)this + 592))(this, 3111);
        double v102 = *(double *)(ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 128), 0) + 80);
        uint64_t Element = ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 128), 0);
        std::mutex::lock((std::mutex *)((char *)this + 7736));
        float v104 = v102;
        *((float *)this + 1552) = v104;
        ausdk::AUChannelLayout::CopyStorage((AUSpatialMixerV2 *)((char *)this + 6216), (const ausdk::AUChannelLayout *)(Element + 120));
        std::mutex::unlock((std::mutex *)((char *)this + 7736));
        AUSM::IRManager::updateHRIRAttributes((AUSpatialMixerV2 *)((char *)this + 6176));
        AUSM::IRManager::updateXTCIRAttributes((AUSpatialMixerV2 *)((char *)this + 6176));
        (*(void (**)(AUSpatialMixerV2 *, uint64_t))(*(void *)this + 592))(this, 3113);
        *((float *)this + 2073) = v104;
        uint64_t v105 = *((void *)this + 1035);
        if (!*(unsigned char *)(v105 + 2608))
        {
          float v106 = COERCE_FLOAT(atomic_load((unsigned int *)(v105 + 2488)));
          float v107 = 5.0;
          if (v106 <= 5.0) {
            float v107 = v106;
          }
          if (v106 >= 0.001) {
            float v108 = v107;
          }
          else {
            float v108 = 0.001;
          }
          *((float *)this + 2057) = v108;
          unsigned int v109 = atomic_load((unsigned int *)(*((void *)this + 1035) + 2484));
          atomic_store(v109, (unsigned int *)this + 2056);
          AUSM::SoundStage::initialize((AUSpatialMixerV2 *)((char *)this + 7808), v104);
        }
        AUSM::SoundStage::initialize((AUSpatialMixerV2 *)((char *)this + 8416), v104);
        *int v85 = AUSM::GlobalProperties::isEnabledFeature(*((AUSM::GlobalProperties **)this + 1035), @"SourceDivergence");
        v85[1] = AUSM::GlobalProperties::isEnabledFeature(*((AUSM::GlobalProperties **)this + 1035), @"SourceDirectivity");
        AUSM::GlobalGeometry::update((float32x4_t *)this + 488, 0, 1);
        uint64_t v110 = *((void *)this + 15);
        if (v110)
        {
          LODWORD(v111) = (*(uint64_t (**)(uint64_t))(*(void *)v110 + 24))(v110);
          if (!v111) {
            goto LABEL_166;
          }
        }
        else
        {
          uint64_t v111 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
          if (!v111) {
            goto LABEL_166;
          }
        }
        unsigned int v112 = 0;
        do
        {
          uint64_t v113 = ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 80), v112);
          (*(void (**)(uint64_t))(*(void *)v113 + 112))(v113);
          ++v112;
        }
        while (v111 != v112);
LABEL_166:
        *(void *)&buf.st_dev = (char *)this + 3120;
        LOBYTE(buf.st_ino) = 1;
        std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)((char *)this + 3120));
        uint64_t v114 = *((void *)this + 15);
        if (v114)
        {
          LODWORD(v115) = (*(uint64_t (**)(uint64_t))(*(void *)v114 + 24))(v114);
          if (v115) {
            goto LABEL_168;
          }
        }
        else
        {
          uint64_t v115 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
          if (v115)
          {
LABEL_168:
            unsigned int v116 = 0;
            unsigned int v117 = 0;
            do
            {
              unsigned __int8 v118 = (AUSpatialMixerV2InputElement *)ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 80), v116);
              unsigned int UncompensatedLatencyFrames = AUSpatialMixerV2InputElement::GetUncompensatedLatencyFrames(v118);
              if (UncompensatedLatencyFrames > v117) {
                unsigned int v117 = UncompensatedLatencyFrames;
              }
              ++v116;
            }
            while (v115 != v116);
LABEL_175:
            std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&buf);
            unsigned int v120 = atomic_load((unsigned int *)(*((void *)this + 772) + 88));
            if (v120 == 1) {
              unsigned int v121 = atomic_load((unsigned int *)this + 1553);
            }
            else {
              unsigned int v121 = 0;
            }
            atomic_store(v121 + v117, (unsigned int *)this + 3024);
            if (v111)
            {
              unsigned int v122 = 0;
              do
              {
                unsigned __int8 v123 = (void *)ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 80), v122);
                AUSpatialMixerV2InputElement::UpdateAlignmentDelayLines(v123);
                ++v122;
              }
              while (v111 != v122);
            }
            uint64_t v124 = *((void *)this + 51);
            uint64_t v125 = *((void *)this + 52);
            while (v124 != v125)
            {
              if (*(_DWORD *)v124 == 3116) {
                (*(void (**)(void, void, uint64_t, void, void))(v124 + 8))(*(void *)(v124 + 16), *((void *)this + 1), 3116, 0, 0);
              }
              v124 += 24;
            }
            AUSpatialMixerV2::ReloadFactoryPresetIfNecessary(this);
            atomic_store(1u, v85 + 690);
            uint64_t v126 = ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 128), 0);
            (*(void (**)(uint64_t))(*(void *)v126 + 112))(v126);
            unsigned int v127 = atomic_load((unsigned int *)this + 862);
            if (v127 == 2) {
              AUSpatialMixerV2::UpdateCounteractRotationShader(this);
            }
            unint64_t v128 = *((unsigned int *)this + 84);
            unint64_t v129 = *(unsigned int *)(ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 128), 0) + 108);
            AUSpatialMixerV2::ReconfigureSharedBuffers(this, 1, 1);
            *((_DWORD *)this + 703) = v129;
            std::vector<float>::resize((uint64_t)this + 2736, (v129 * v128));
            unint64_t v130 = (16 * v129) | 8;
            LOBYTE(buf.st_dev) = 0;
            uint64_t v131 = (_DWORD *)*((void *)this + 345);
            unint64_t v132 = *((void *)this + 346) - (void)v131;
            if (v130 <= v132)
            {
              if (v130 < v132) {
                *((void *)this + 346) = (char *)v131 + v130;
              }
            }
            else
            {
              std::vector<char>::__append((std::vector<char> *)this + 115, v130 - v132, (std::vector<char>::const_reference)&buf);
              uint64_t v131 = (_DWORD *)*((void *)this + 345);
            }
            *uint64_t v131 = v129;
            *(void *)&buf.st_dev = 0;
            std::vector<float *>::assign((char **)this + 348, v129, &buf);
            *((_DWORD *)this + 723) = v129;
            std::vector<float>::resize((uint64_t)this + 2816, (v129 * v128));
            LOBYTE(buf.st_dev) = 0;
            uint64_t v133 = (_DWORD *)*((void *)this + 355);
            unint64_t v134 = *((void *)this + 356) - (void)v133;
            if (v130 <= v134)
            {
              if (v130 < v134) {
                *((void *)this + 356) = (char *)v133 + v130;
              }
            }
            else
            {
              std::vector<char>::__append((std::vector<char> *)((char *)this + 2840), v130 - v134, (std::vector<char>::const_reference)&buf);
              uint64_t v133 = (_DWORD *)*((void *)this + 355);
            }
            *uint64_t v133 = v129;
            *(void *)&buf.st_dev = 0;
            std::vector<float *>::assign((char **)this + 358, v129, &buf);
            buf.st_dev = 0;
            std::vector<float>::assign((char **)this + 247, v128, &buf);
            *((unsigned char *)this + 2000) = *(float *)&buf.st_dev == 0.0;
            *((void *)this + 251) = *((void *)this + 247);
            *((_DWORD *)this + 504) = -1;
            atomic_store(0, (unsigned int *)this + 505);
            buf.st_dev = 0;
            std::vector<float>::assign((char **)this + 256, v128, &buf);
            *((unsigned char *)this + 2072) = *(float *)&buf.st_dev == 0.0;
            *((void *)this + 260) = *((void *)this + 256);
            *((_DWORD *)this + 522) = -1;
            atomic_store(0, (unsigned int *)this + 523);
            buf.st_dev = 0;
            std::vector<float>::assign((char **)this + 301, v128, &buf);
            *((unsigned char *)this + 2432) = *(float *)&buf.st_dev == 0.0;
            *((void *)this + 305) = *((void *)this + 301);
            *((_DWORD *)this + 612) = -1;
            atomic_store(0, (unsigned int *)this + 613);
            buf.st_dev = 0;
            std::vector<float>::assign((char **)this + 307, v128, &buf);
            *((unsigned char *)this + 2480) = *(float *)&buf.st_dev == 0.0;
            *((void *)this + 311) = *((void *)this + 307);
            *((_DWORD *)this + 624) = -1;
            atomic_store(0, (unsigned int *)this + 625);
            buf.st_dev = 0;
            std::vector<float>::assign((char **)this + 313, v128, &buf);
            *((unsigned char *)this + 2528) = *(float *)&buf.st_dev == 0.0;
            *((void *)this + 317) = *((void *)this + 313);
            *((_DWORD *)this + 636) = -1;
            atomic_store(0, (unsigned int *)this + 637);
            unsigned __int8 v136 = atomic_load((unsigned __int8 *)this + 2608);
            if (v136)
            {
              buf.st_dev = 0;
              std::vector<float>::assign((char **)this + 320, v128, &buf);
              *((unsigned char *)this + 2584) = *(float *)&buf.st_dev == 0.0;
              *((void *)this + 324) = *((void *)this + 320);
              *((_DWORD *)this + 650) = -1;
              atomic_store(0, (unsigned int *)this + 651);
            }
            v135.i64[0] = *((void *)this + 365);
            int8x16_t v228 = v135;
            v135.i32[0] = *((_DWORD *)this + 732);
            int8x16_t v230 = v135;
            int v137 = *((_DWORD *)this + 733);
            *(void *)&buf.st_dev = 0x40E5888000000000;
            *(_OWORD *)&buf.__darwin_ino64_t st_ino = xmmword_1BB8727B0;
            *(_OWORD *)&buf.st_rdev = xmmword_1BB879EA0;
            *(_OWORD *)&__x.Float64 mSampleRate = *(_OWORD *)&buf.st_dev;
            *(_OWORD *)&__x.mBytesPerPacket = *(_OWORD *)&buf.st_uid;
            *(void *)&__x.mBitsPerChannel = 32;
            uint64_t v138 = NewIIRFilter((const AudioStreamBasicDescription *)&buf, &__x, (const CAStreamBasicDescription *)1);
            uint64_t v139 = *((void *)this + 334);
            *((void *)this + 334) = v138;
            if (v139) {
              (*(void (**)(uint64_t))(*(void *)v139 + 8))(v139);
            }
            *((unsigned char *)this + 2704) = 1;
            *((void *)this + 335) = v228.i64[0];
            int8x16_t v140 = vextq_s8(vextq_s8(v230, v230, 4uLL), v228, 0xCuLL);
            v140.i32[3] = v140.i32[0];
            *((int8x16_t *)this + 168) = v140;
            AUSpatialMixerV2::SetReverbFilter(this, *(float *)v228.i32, *(float *)&v228.i32[1], *(float *)v230.i32, v137, v104);
            AUSpatialMixerV2::DisposeInputConverters(this);
            *(void *)&buf.st_dev = 0x40E5888000000000;
            *(_OWORD *)&buf.__darwin_ino64_t st_ino = xmmword_1BB87A000;
            *(_OWORD *)&buf.st_rdev = xmmword_1BB87A010;
            __x.Float64 mSampleRate = 44100.0;
            *(_OWORD *)&__x.mFormatID = xmmword_1BB87A020;
            *(_OWORD *)&__x.mBytesPerFrame = xmmword_1BB87A030;
            inDestinationFormat.Float64 mSampleRate = 44100.0;
            *(_OWORD *)&inDestinationFormat.mFormatID = xmmword_1BB8727B0;
            *(_OWORD *)&inDestinationFormat.mBytesPerFrame = xmmword_1BB8727C0;
            AudioConverterNew((const AudioStreamBasicDescription *)&buf, &inDestinationFormat, (AudioConverterRef *)this + 362);
            AudioConverterNew(&__x, &inDestinationFormat, (AudioConverterRef *)this + 363);
            AUSpatialMixerV2::InitializeOutputConverter((AudioConverterRef *)this);
            atomic_store(0, (unsigned __int8 *)this + 2632);
            __dmb(0xBu);
            unsigned __int8 v141 = atomic_load((unsigned __int8 *)this + 4776);
            if (v141)
            {
              float v244 = 0;
              int v245 = 0;
              uint64_t v246 = 0;
              char v142 = atomic_load((unsigned int *)this + 1195);
              if ((v142 & 2) != 0) {
                operator new();
              }
              char v144 = atomic_load((unsigned int *)this + 1195);
              if (v144) {
                operator new();
              }
              uint64_t v145 = ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 128), 0);
              long long v146 = *(_OWORD *)(v145 + 96);
              *(_OWORD *)&__x.Float64 mSampleRate = *(_OWORD *)(v145 + 80);
              *(_OWORD *)&__x.mBytesPerPacket = v146;
              *(void *)&__x.mBitsPerChannel = *(void *)(v145 + 112);
              uint64_t v147 = ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 128), 0);
              ausdk::AUChannelLayout::AUChannelLayout((ausdk::AUChannelLayout *)inData, (const ausdk::AUChannelLayout *)(v147 + 120));
              std::vector<unsigned int>::pointer v148 = v244;
              v149 = v245;
              if (v244 != v245)
              {
                float v229 = (char **)((char *)this + 3368);
                do
                {
                  uint64_t v150 = (OpaqueAudioComponentInstance **)*v148;
                  *(_OWORD *)(v150 + 7) = 0u;
                  *(_OWORD *)(v150 + 5) = 0u;
                  *(_OWORD *)(v150 + 3) = 0u;
                  *(_OWORD *)(v150 + 1) = 0u;
                  uint64_t v151 = *v148;
                  BOOL v152 = *(OpaqueAudioComponentInstance **)*v148;
                  dev_t v153 = -66744;
                  if (!v152) {
                    goto LABEL_226;
                  }
                  OSStatus v154 = AudioUnitSetProperty(v152, 8u, 1u, 0, &__x, 0x28u);
                  if (v154)
                  {
                    if (getAUSMV2Log(void)::onceToken != -1) {
                      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                    }
                    unsigned __int8 v155 = (id)getAUSMV2Log(void)::gLog;
                    if (os_log_type_enabled(v155, OS_LOG_TYPE_ERROR))
                    {
                      *(_OWORD *)&buf.st_dev = *(_OWORD *)&__x.mSampleRate;
                      *(_OWORD *)&buf.st_uid = *(_OWORD *)&__x.mBytesPerPacket;
                      buf.st_atimespec.tv_sec = *(void *)&__x.mBitsPerChannel;
                      CA::StreamDescription::AsString((CA::StreamDescription *)&buf, (uint64_t)&v247, *(int16x8_t *)&__x.mBytesPerPacket);
                      CFDictionaryRef v184 = (std::string *)v247.__r_.__value_.__r.__words[0];
                      if ((v247.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        CFDictionaryRef v184 = &v247;
                      }
                      float32x4_t v185 = (void *)((char *)v151 + 72);
                      if (*((char *)v151 + 95) < 0) {
                        float32x4_t v185 = (void *)*v185;
                      }
                      LODWORD(inDestinationFormat.mSampleRate) = 136315906;
                      *(void *)((char *)&inDestinationFormat.mSampleRate + 4) = "setInputAndOutputStreamFormat";
                      LOWORD(inDestinationFormat.mFormatFlags) = 1024;
                      *(AudioFormatFlags *)((char *)&inDestinationFormat.mFormatFlags + 2) = v154;
                      HIWORD(inDestinationFormat.mBytesPerPacket) = 2080;
                      *(void *)&inDestinationFormat.mFramesPerPacket = v184;
                      LOWORD(inDestinationFormat.mChannelsPerFrame) = 2080;
                      *(void *)((char *)&inDestinationFormat.mChannelsPerFrame + 2) = v185;
                      _os_log_error_impl(&dword_1BB0CE000, v155, OS_LOG_TYPE_ERROR, "%s: error %d setting input stream format %s for %s", (uint8_t *)&inDestinationFormat, 0x26u);
                      if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v247.__r_.__value_.__l.__data_);
                      }
                    }
                  }
                  dev_t v153 = -66744;
                  if (!*(void *)v151
                    || (dev_t v153 = AudioUnitSetProperty(*(AudioUnit *)v151, 8u, 2u, 0, &__x, 0x28u)) != 0)
                  {
                    if (getAUSMV2Log(void)::onceToken != -1) {
                      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                    }
                    int v156 = (id)getAUSMV2Log(void)::gLog;
                    if (os_log_type_enabled(v156, OS_LOG_TYPE_ERROR))
                    {
                      *(_OWORD *)&buf.st_dev = *(_OWORD *)&__x.mSampleRate;
                      *(_OWORD *)&buf.st_uid = *(_OWORD *)&__x.mBytesPerPacket;
                      buf.st_atimespec.tv_sec = *(void *)&__x.mBitsPerChannel;
                      CA::StreamDescription::AsString((CA::StreamDescription *)&buf, (uint64_t)&v247, *(int16x8_t *)&__x.mBytesPerPacket);
                      float v182 = (std::string *)v247.__r_.__value_.__r.__words[0];
                      if ((v247.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        float v182 = &v247;
                      }
                      CFArrayRef v183 = (void *)((char *)v151 + 72);
                      if (*((char *)v151 + 95) < 0) {
                        CFArrayRef v183 = (void *)*v183;
                      }
                      LODWORD(inDestinationFormat.mSampleRate) = 136315906;
                      *(void *)((char *)&inDestinationFormat.mSampleRate + 4) = "setInputAndOutputStreamFormat";
                      LOWORD(inDestinationFormat.mFormatFlags) = 1024;
                      *(AudioFormatFlags *)((char *)&inDestinationFormat.mFormatFlags + 2) = v154;
                      HIWORD(inDestinationFormat.mBytesPerPacket) = 2080;
                      *(void *)&inDestinationFormat.mFramesPerPacket = v182;
                      LOWORD(inDestinationFormat.mChannelsPerFrame) = 2080;
                      *(void *)((char *)&inDestinationFormat.mChannelsPerFrame + 2) = v183;
                      _os_log_error_impl(&dword_1BB0CE000, v156, OS_LOG_TYPE_ERROR, "%s: error %d setting output stream format %s for %s", (uint8_t *)&inDestinationFormat, 0x26u);
                      if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v247.__r_.__value_.__l.__data_);
                      }
                    }
                  }
                  if (v154) {
                    dev_t v153 = v154;
                  }
                  if (!v153)
                  {
                    int v158 = *v148;
                    CFNumberRef v159 = *(OpaqueAudioComponentInstance **)*v148;
                    if (v159)
                    {
                      OSStatus v160 = AudioUnitSetProperty(v159, 0x13u, 1u, 0, inData[0], 20 * *((_DWORD *)inData[0] + 2) + 12);
                      if (v160)
                      {
                        if (getAUSMV2Log(void)::onceToken != -1) {
                          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                        }
                        unsigned int v161 = (id)getAUSMV2Log(void)::gLog;
                        if (os_log_type_enabled(v161, OS_LOG_TYPE_ERROR))
                        {
                          int v191 = (void *)((char *)v158 + 72);
                          if (*((char *)v158 + 95) < 0) {
                            int v191 = (void *)*v191;
                          }
                          buf.st_dev = 136315650;
                          *(void *)&buf.st_mode = "setInputAndOutputAudioChannelLayout";
                          WORD2(buf.st_ino) = 1024;
                          *(_DWORD *)((char *)&buf.st_ino + 6) = v160;
                          HIWORD(buf.st_uid) = 2080;
                          *(void *)&buf.st_gid = v191;
                          _os_log_error_impl(&dword_1BB0CE000, v161, OS_LOG_TYPE_ERROR, "%s: error %d setting input audio channel layout for %s", (uint8_t *)&buf, 0x1Cu);
                        }
                      }
                      if (!*(void *)v158
                        || AudioUnitSetProperty(*(AudioUnit *)v158, 0x13u, 2u, 0, inData[0], 20 * *((_DWORD *)inData[0] + 2) + 12))
                      {
                        if (getAUSMV2Log(void)::onceToken != -1) {
                          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                        }
                        float v162 = (id)getAUSMV2Log(void)::gLog;
                        if (os_log_type_enabled(v162, OS_LOG_TYPE_ERROR))
                        {
                          char v188 = (void *)((char *)v158 + 72);
                          if (*((char *)v158 + 95) < 0) {
                            char v188 = (void *)*v188;
                          }
                          buf.st_dev = 136315650;
                          *(void *)&buf.st_mode = "setInputAndOutputAudioChannelLayout";
                          WORD2(buf.st_ino) = 1024;
                          *(_DWORD *)((char *)&buf.st_ino + 6) = v160;
                          HIWORD(buf.st_uid) = 2080;
                          *(void *)&buf.st_gid = v188;
                          _os_log_error_impl(&dword_1BB0CE000, v162, OS_LOG_TYPE_ERROR, "%s: error %d setting input audio channel layout for %s", (uint8_t *)&buf, 0x1Cu);
                        }
                      }
                    }
                    float v163 = (char *)*v148 + 96;
                    if (*((char *)*v148 + 119) < 0) {
                      float v163 = *(char **)v163;
                    }
                    std::string::basic_string[abi:ne180100]<0>(__p, v163);
                    std::string::basic_string[abi:ne180100]<0>(&v247, "/aufx-");
                    if ((v241 & 0x80u) == 0) {
                      float v164 = __p;
                    }
                    else {
                      float v164 = (void **)__p[0];
                    }
                    if ((v241 & 0x80u) == 0) {
                      std::string::size_type v165 = v241;
                    }
                    else {
                      std::string::size_type v165 = (std::string::size_type)__p[1];
                    }
                    BOOL v166 = std::string::append(&v247, (const std::string::value_type *)v164, v165);
                    long long v167 = *(_OWORD *)&v166->__r_.__value_.__l.__data_;
                    *(void *)&buf.st_uid = *((void *)&v166->__r_.__value_.__l + 2);
                    *(_OWORD *)&buf.st_dev = v167;
                    v166->__r_.__value_.__l.__size_ = 0;
                    v166->__r_.__value_.__r.__words[2] = 0;
                    v166->__r_.__value_.__r.__words[0] = 0;
                    int v168 = std::string::append((std::string *)&buf, "-appl-headphone.aupreset", 0x18uLL);
                    long long v169 = *(_OWORD *)&v168->__r_.__value_.__l.__data_;
                    *(void *)&inDestinationFormat.mBytesPerPacket = *((void *)&v168->__r_.__value_.__l + 2);
                    *(_OWORD *)&inDestinationFormat.Float64 mSampleRate = v169;
                    v168->__r_.__value_.__l.__size_ = 0;
                    v168->__r_.__value_.__r.__words[2] = 0;
                    v168->__r_.__value_.__r.__words[0] = 0;
                    if (SHIBYTE(buf.st_gid) < 0) {
                      operator delete(*(void **)&buf.st_dev);
                    }
                    if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v247.__r_.__value_.__l.__data_);
                    }
                    std::string::basic_string[abi:ne180100]<0>(&buf, "/Library/Audio/Tunings/Generic/AU");
                    if ((inDestinationFormat.mFramesPerPacket & 0x80000000) == 0) {
                      Float64 mSampleRate = COERCE_DOUBLE(&inDestinationFormat);
                    }
                    else {
                      Float64 mSampleRate = inDestinationFormat.mSampleRate;
                    }
                    if ((inDestinationFormat.mFramesPerPacket & 0x80000000) == 0) {
                      std::string::size_type mFramesPerPacket_high = HIBYTE(inDestinationFormat.mFramesPerPacket);
                    }
                    else {
                      std::string::size_type mFramesPerPacket_high = *(void *)&inDestinationFormat.mFormatID;
                    }
                    float v172 = std::string::append((std::string *)&buf, *(const std::string::value_type **)&mSampleRate, mFramesPerPacket_high);
                    long long v173 = *(_OWORD *)&v172->__r_.__value_.__l.__data_;
                    v247.__r_.__value_.__r.__words[2] = v172->__r_.__value_.__r.__words[2];
                    *(_OWORD *)&v247.__r_.__value_.__l.__data_ = v173;
                    v172->__r_.__value_.__l.__size_ = 0;
                    v172->__r_.__value_.__r.__words[2] = 0;
                    v172->__r_.__value_.__r.__words[0] = 0;
                    if (SHIBYTE(buf.st_gid) < 0) {
                      operator delete(*(void **)&buf.st_dev);
                    }
                    if ((v247.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      uint64_t v174 = &v247;
                    }
                    else {
                      uint64_t v174 = (std::string *)v247.__r_.__value_.__r.__words[0];
                    }
                    if (stat((const char *)v174, &buf))
                    {
                      CFTypeRef cf = 0;
                    }
                    else
                    {
                      if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0)
                      {
                        std::string::__init_copy_ctor_external((std::string *)&buf, v247.__r_.__value_.__l.__data_, v247.__r_.__value_.__l.__size_);
                      }
                      else
                      {
                        *(_OWORD *)&buf.st_dev = *(_OWORD *)&v247.__r_.__value_.__l.__data_;
                        *(void *)&buf.st_uid = *((void *)&v247.__r_.__value_.__l + 2);
                      }
                      AUSM::loadAUPreset(&cf, (const char *)&buf);
                      if (SHIBYTE(buf.st_gid) < 0) {
                        operator delete(*(void **)&buf.st_dev);
                      }
                    }
                    if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v247.__r_.__value_.__l.__data_);
                    }
                    if (SHIBYTE(inDestinationFormat.mFramesPerPacket) < 0) {
                      operator delete(*(void **)&inDestinationFormat.mSampleRate);
                    }
                    if ((char)v241 < 0) {
                      operator delete(__p[0]);
                    }
                    if (cf)
                    {
                      *(void *)&inDestinationFormat.Float64 mSampleRate = cf;
                      CFNumberRef v177 = *(OpaqueAudioComponentInstance **)*v148;
                      dev_t v178 = -66744;
                      if (!v177 || (dev_t v178 = AudioUnitSetProperty(v177, 0, 0, 0, &inDestinationFormat, 8u)) != 0)
                      {
                        if (getAUSMV2Log(void)::onceToken != -1) {
                          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                        }
                        CFNumberRef v179 = (id)getAUSMV2Log(void)::gLog;
                        if (os_log_type_enabled(v179, OS_LOG_TYPE_ERROR))
                        {
                          int v189 = (char *)this + 3368;
                          if (*((char *)this + 3391) < 0) {
                            int v189 = *v229;
                          }
                          float v190 = (void *)((char *)*v148 + 72);
                          if (*((char *)*v148 + 95) < 0) {
                            float v190 = (void *)*v190;
                          }
                          buf.st_dev = 136315906;
                          *(void *)&buf.st_mode = v189;
                          WORD2(buf.st_ino) = 2080;
                          *(__darwin_ino64_t *)((char *)&buf.st_ino + 6) = (__darwin_ino64_t)"InitializeDynamicsProcessing";
                          HIWORD(buf.st_gid) = 1024;
                          buf.st_rdev = v178;
                          *((_WORD *)&buf.st_rdev + 2) = 2080;
                          *(void *)((char *)&buf.st_rdev + 6) = v190;
                          _os_log_error_impl(&dword_1BB0CE000, v179, OS_LOG_TYPE_ERROR, "[%s|%s] error %d setting preset on %s", (uint8_t *)&buf, 0x26u);
                        }
                      }
                    }
                    dev_t v180 = AUSM::AUFXWrapper::initialize(*v148, *((_DWORD *)this + 84));
                    if (v180)
                    {
                      if (getAUSMV2Log(void)::onceToken != -1) {
                        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                      }
                      CFNumberRef v181 = (id)getAUSMV2Log(void)::gLog;
                      if (os_log_type_enabled(v181, OS_LOG_TYPE_ERROR))
                      {
                        unint64_t v186 = (char *)this + 3368;
                        if (*((char *)this + 3391) < 0) {
                          unint64_t v186 = *v229;
                        }
                        float v187 = (void *)((char *)*v148 + 72);
                        if (*((char *)*v148 + 95) < 0) {
                          float v187 = (void *)*v187;
                        }
                        buf.st_dev = 136315906;
                        *(void *)&buf.st_mode = v186;
                        WORD2(buf.st_ino) = 2080;
                        *(__darwin_ino64_t *)((char *)&buf.st_ino + 6) = (__darwin_ino64_t)"InitializeDynamicsProcessing";
                        HIWORD(buf.st_gid) = 1024;
                        buf.st_rdev = v180;
                        *((_WORD *)&buf.st_rdev + 2) = 2080;
                        *(void *)((char *)&buf.st_rdev + 6) = v187;
                        _os_log_error_impl(&dword_1BB0CE000, v181, OS_LOG_TYPE_ERROR, "[%s|%s] error %d initalizing %s; processing disabled",
                          (uint8_t *)&buf,
                          0x26u);
                      }
                    }
                    if (cf) {
                      CFRelease(cf);
                    }
                  }
                  else
                  {
LABEL_226:
                    if (getAUSMV2Log(void)::onceToken != -1) {
                      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                    }
                    uint64_t v157 = (id)getAUSMV2Log(void)::gLog;
                    if (os_log_type_enabled(v157, OS_LOG_TYPE_ERROR))
                    {
                      CFNumberRef v175 = (char *)this + 3368;
                      if (*((char *)this + 3391) < 0) {
                        CFNumberRef v175 = *v229;
                      }
                      float v176 = (void *)((char *)*v148 + 72);
                      if (*((char *)*v148 + 95) < 0) {
                        float v176 = (void *)*v176;
                      }
                      buf.st_dev = 136315906;
                      *(void *)&buf.st_mode = v175;
                      WORD2(buf.st_ino) = 2080;
                      *(__darwin_ino64_t *)((char *)&buf.st_ino + 6) = (__darwin_ino64_t)"InitializeDynamicsProcessing";
                      HIWORD(buf.st_gid) = 1024;
                      buf.st_rdev = v153;
                      *((_WORD *)&buf.st_rdev + 2) = 2080;
                      *(void *)((char *)&buf.st_rdev + 6) = v176;
                      _os_log_error_impl(&dword_1BB0CE000, v157, OS_LOG_TYPE_ERROR, "[%s|%s] error %d setting stream formats on %s; disabling processing",
                        (uint8_t *)&buf,
                        0x26u);
                    }

                    AUSM::AUFXWrapper::uninitialize((OpaqueAudioComponentInstance **)*v148);
                  }
                  ++v148;
                }
                while (v148 != v149);
                if (v244 != v245)
                {
                  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)v226);
                  float v192 = (AUSM::AUFXWrapper **)*((void *)this + 417);
                  int v193 = (AUSM::AUFXWrapper **)*((void *)this + 416);
                  while (v192 != v193)
                    std::unique_ptr<AUSM::AUFXWrapper>::reset[abi:ne180100](--v192);
                  *((void *)this + 417) = v193;
                  float v194 = v244;
                  int v195 = v245;
                  if (v244 != v245)
                  {
                    float v196 = (void *)((char *)this + 3344);
                    do
                    {
                      if ((unint64_t)v193 >= *v196)
                      {
                        uint64_t v198 = *((void *)this + 416);
                        uint64_t v199 = ((uint64_t)v193 - v198) >> 3;
                        if ((unint64_t)(v199 + 1) >> 61) {
                          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                        }
                        uint64_t v200 = *v196 - v198;
                        uint64_t v201 = v200 >> 2;
                        if (v200 >> 2 <= (unint64_t)(v199 + 1)) {
                          uint64_t v201 = v199 + 1;
                        }
                        if ((unint64_t)v200 >= 0x7FFFFFFFFFFFFFF8) {
                          unint64_t v202 = 0x1FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v202 = v201;
                        }
                        buf.st_atimespec.tv_sec = (__darwin_time_t)this + 3344;
                        if (v202) {
                          unint64_t v202 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v202);
                        }
                        else {
                          uint64_t v203 = 0;
                        }
                        float v204 = (AUSM::AUFXWrapper **)(v202 + 8 * v199);
                        unint64_t v205 = v202 + 8 * v203;
                        *(void *)&buf.st_rdev = v205;
                        uint64_t v206 = *v194;
                        NSObject *v194 = 0;
                        *float v204 = v206;
                        int v193 = v204 + 1;
                        *(void *)&buf.st_uid = v204 + 1;
                        float v207 = (void *)*((void *)this + 417);
                        float v208 = (void *)*((void *)this + 416);
                        if (v207 == v208)
                        {
                          int64x2_t v210 = vdupq_n_s64((unint64_t)v207);
                        }
                        else
                        {
                          do
                          {
                            uint64_t v209 = (AUSM::AUFXWrapper *)*--v207;
                            void *v207 = 0;
                            *--float v204 = v209;
                          }
                          while (v207 != v208);
                          int64x2_t v210 = *((int64x2_t *)this + 208);
                          int v193 = *(AUSM::AUFXWrapper ***)&buf.st_uid;
                          unint64_t v205 = *(void *)&buf.st_rdev;
                        }
                        *((void *)this + 416) = v204;
                        *((void *)this + 417) = v193;
                        *(int64x2_t *)&buf.__darwin_ino64_t st_ino = v210;
                        uint64_t v211 = *((void *)this + 418);
                        *((void *)this + 418) = v205;
                        *(void *)&buf.st_rdev = v211;
                        *(void *)&buf.st_dev = v210.i64[0];
                        std::__split_buffer<std::unique_ptr<AUSM::AUFXWrapper>>::~__split_buffer((uint64_t)&buf);
                      }
                      else
                      {
                        int v197 = *v194;
                        NSObject *v194 = 0;
                        *v193++ = v197;
                      }
                      *((void *)this + 417) = v193;
                      ++v194;
                    }
                    while (v194 != v195);
                  }
                  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock((uint64_t)v226);
                }
              }
              if (inData[0])
              {
                inData[1] = inData[0];
                operator delete(inData[0]);
              }
              *(void *)&buf.st_dev = &v244;
              std::vector<std::unique_ptr<AUSM::AUFXWrapper>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
            }
            AUSpatialMixerV2::UpdateDiffuseProcessors(this);
            if (*((void *)this + 771))
            {
              AUSM::AppleSauceCFWithMutex<__CFDictionary const*>::load(&buf, (uint64_t)this + 5408);
              CFTypeRef v212 = *(const void **)&buf.st_dev;
              if (*(void *)&buf.st_dev)
              {
                int v213 = (float *)*((void *)this + 771);
                CFRetain(*(CFTypeRef *)&buf.st_dev);
                CFTypeRef v231 = v212;
                AUSM::RoomCongruence::Processor::setTuningParameters(v213, &v231);
                CFRelease(v212);
              }
              AUSM::AppleSauceCFWithMutex<__CFDictionary const*>::load(&__x, (uint64_t)this + 5048);
              Float64 v214 = __x.mSampleRate;
              if (*(void *)&__x.mSampleRate)
              {
                (*(void (**)(AUSpatialMixerV2 *, uint64_t))(*(void *)this + 592))(this, 3239);
                CFRelease(*(CFTypeRef *)&v214);
              }
              if (v212) {
                CFRelease(v212);
              }
            }
            ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 128), 0);
            operator new();
          }
        }
        unsigned int v117 = 0;
        goto LABEL_175;
      }
    }
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    long long v59 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v216 = (void *)((char *)this + 3368);
      if (*((char *)this + 3391) < 0) {
        uint64_t v216 = (void *)*v216;
      }
      unsigned int v217 = atomic_load((unsigned int *)this + 1237);
      buf.st_dev = 136315650;
      *(void *)&buf.st_mode = v216;
      WORD2(buf.st_ino) = 2080;
      *(__darwin_ino64_t *)((char *)&buf.st_ino + 6) = (__darwin_ino64_t)"Initialize";
      if (v217 == 2) {
        uint64_t v218 = "device";
      }
      else {
        uint64_t v218 = "UI";
      }
      HIWORD(buf.st_gid) = 2080;
      *(void *)&buf.st_rdev = v218;
      _os_log_debug_impl(&dword_1BB0CE000, v59, OS_LOG_TYPE_DEBUG, "[%s|%s] Creating %s orientation observer", (uint8_t *)&buf, 0x20u);
    }

    unsigned int v60 = atomic_load((unsigned int *)this + 1237);
    BOOL v61 = v60 != 2;
    uint64_t v62 = *((void *)this + 1);
    id v63 = (char *)operator new(0xA8uLL);
    *((void *)v63 + 2) = 0;
    *((void *)v63 + 1) = 0;
    *(void *)id v63 = &unk_1F14AD220;
    *((void *)v63 + 3) = 0;
    *((void *)v63 + 4) = 0;
    *((_DWORD *)v63 + 10) = v61;
    *((_OWORD *)v63 + 4) = 0u;
    char v64 = (void **)(v63 + 64);
    *((_OWORD *)v63 + 5) = 0u;
    v63[96] = 0;
    *((void *)v63 + 13) = 850045863;
    *((_OWORD *)v63 + 7) = 0u;
    *((_OWORD *)v63 + 8) = 0u;
    *((_OWORD *)v63 + 9) = 0u;
    *((void *)v63 + 20) = 0;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v63 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v63 + 2, 1uLL, memory_order_relaxed);
    *((void *)v63 + 3) = v63 + 24;
    *((void *)v63 + 4) = v63;
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v63);
    std::string::basic_string[abi:ne180100]<0>(&buf, "AUSpatialMixerV2_");
    int v65 = *((char *)this + 3391);
    if (v65 >= 0) {
      uint64_t v66 = (char *)this + 3368;
    }
    else {
      uint64_t v66 = (const std::string::value_type *)*((void *)this + 421);
    }
    if (v65 >= 0) {
      std::string::size_type v67 = *((unsigned __int8 *)this + 3391);
    }
    else {
      std::string::size_type v67 = *((void *)this + 422);
    }
    uint64_t v68 = std::string::append((std::string *)&buf, v66, v67);
    std::string::size_type v69 = v68->__r_.__value_.__r.__words[0];
    *(void *)&__x.Float64 mSampleRate = v68->__r_.__value_.__l.__size_;
    *(void *)((char *)&__x.mSampleRate + 7) = *(std::string::size_type *)((char *)&v68->__r_.__value_.__r.__words[1]
                                                                          + 7);
    unsigned int v70 = HIBYTE(v68->__r_.__value_.__r.__words[2]);
    v68->__r_.__value_.__l.__size_ = 0;
    v68->__r_.__value_.__r.__words[2] = 0;
    v68->__r_.__value_.__r.__words[0] = 0;
    if (v63[87] < 0) {
      operator delete(*v64);
    }
    *((void *)v63 + 9) = *(void *)&__x.mSampleRate;
    *((void *)v63 + 8) = v69;
    *(Float64 *)(v63 + 79) = *(Float64 *)((char *)&__x.mSampleRate + 7);
    v63[87] = v70;
    if (SHIBYTE(buf.st_gid) < 0)
    {
      operator delete(*(void **)&buf.st_dev);
      unsigned int v70 = v63[87];
      if ((v70 & 0x80) == 0) {
        goto LABEL_94;
      }
    }
    else if ((v70 & 0x80) == 0)
    {
LABEL_94:
      CFIndex v71 = v70;
      uint64_t v72 = (const UInt8 *)(v63 + 64);
      goto LABEL_101;
    }
    uint64_t v72 = (const UInt8 *)*v64;
    if (!*v64)
    {
      CFStringRef v74 = 0;
LABEL_102:
      uint64_t v75 = (const void *)*((void *)v63 + 11);
      *((void *)v63 + 11) = v74;
      if (v75) {
        CFRelease(v75);
      }
      *((void *)v63 + 6) = v62;
      *((_DWORD *)v63 + 14) = 3101;
      atomic_store(1u, (unsigned __int8 *)v63 + 96);
      uint64_t v76 = *((void *)v63 + 3);
      uint64_t v77 = (std::__shared_weak_count *)*((void *)v63 + 4);
      if (v77) {
        atomic_fetch_add_explicit(&v77->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      *(void *)&buf.st_dev = MEMORY[0x1E4F143A8];
      buf.__darwin_ino64_t st_ino = 3321888768;
      *(void *)&buf.st_uid = ___ZN35AUSpatialMixerV2OrientationObserver16registerObserverEP28OpaqueAudioComponentInstancejRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke;
      *(void *)&buf.st_rdev = &__block_descriptor_56_ea8_40c60_ZTSNSt3__18weak_ptrI35AUSpatialMixerV2OrientationObserverEE_e8_v12__0i8l;
      buf.st_atimespec.tv_sec = (__darwin_time_t)(v63 + 24);
      buf.st_atimespec.tv_nsec = v76;
      buf.st_mtimespec.tv_sec = (__darwin_time_t)v77;
      if (v77) {
        atomic_fetch_add_explicit(&v77->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v78 = _Block_copy(&buf);
      if (*((_DWORD *)v63 + 10) == 1)
      {
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        uint64_t v79 = (id)getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
        {
          if (v63[87] < 0) {
            char v64 = (void **)*v64;
          }
          LODWORD(__x.mSampleRate) = 136315138;
          *(void *)((char *)&__x.mSampleRate + 4) = v64;
          _os_log_impl(&dword_1BB0CE000, v79, OS_LOG_TYPE_DEFAULT, "Registering UI orientation observer %s", (uint8_t *)&__x, 0xCu);
        }

        CARegisterUIOrientation();
      }
      else
      {
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        BOOL v80 = (id)getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
        {
          if (v63[87] < 0) {
            char v64 = (void **)*v64;
          }
          LODWORD(__x.mSampleRate) = 136315138;
          *(void *)((char *)&__x.mSampleRate + 4) = v64;
          _os_log_impl(&dword_1BB0CE000, v80, OS_LOG_TYPE_DEFAULT, "Registering device orientation observer %s", (uint8_t *)&__x, 0xCu);
        }

        CARegisterDeviceOrientation();
      }

      *(void *)&long long v81 = v63 + 24;
      if (buf.st_mtimespec.tv_sec)
      {
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)buf.st_mtimespec.tv_sec);
        *(void *)&long long v81 = v63 + 24;
      }
      *((void *)&v81 + 1) = v63;
      if (v77)
      {
        long long v227 = v81;
        std::__shared_weak_count::__release_weak(v77);
        long long v81 = v227;
      }
      uint64_t v82 = (std::__shared_weak_count *)*((void *)this + 375);
      *((_OWORD *)this + 187) = v81;
      if (v82) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v82);
      }
      goto LABEL_129;
    }
    CFIndex v71 = *((void *)v63 + 9);
LABEL_101:
    CFStringRef v74 = CFStringCreateWithBytes(0, v72, v71, 0x8000100u, 0);
    if (!v74)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    goto LABEL_102;
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    uint32_t v143 = (void *)((char *)this + 3368);
    if (*((char *)this + 3391) < 0) {
      uint32_t v143 = (void *)*v143;
    }
    buf.st_dev = 136315650;
    *(void *)&buf.st_mode = v143;
    WORD2(buf.st_ino) = 2080;
    *(__darwin_ino64_t *)((char *)&buf.st_ino + 6) = (__darwin_ino64_t)"Initialize";
    HIWORD(buf.st_gid) = 1024;
    buf.st_rdev = v13;
    _os_log_error_impl(&dword_1BB0CE000, v15, OS_LOG_TYPE_ERROR, "[%s|%s] Too large max frames per slice: %u", (uint8_t *)&buf, 0x1Cu);
  }

  return 4294956421;
}

void sub_1BB3E9DD8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t applesauce::CF::details::find_at_key_or_optional<BOOL,__CFString const*&>(const __CFDictionary *a1, const void *a2)
{
  CFBooleanRef v2 = (const __CFBoolean *)applesauce::CF::details::at_key<__CFString const*&>(a1, a2);
  if (v2)
  {
    LOWORD(v2) = applesauce::CF::convert_as<BOOL,0>(v2);
    int v3 = BYTE1(v2);
  }
  else
  {
    int v3 = 0;
  }
  return v2 | (v3 << 8);
}

CFIndex ___ZN16AUSpatialMixerV210InitializeEv_block_invoke_145(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  HIBYTE(v14) = 0;
  AppIntegerCFArrayRef Value = CFPreferencesGetAppIntegerValue(@"ausm_source_mode_override", @"com.apple.coreaudio", (Boolean *)&v14 + 7);
  LODWORD(v14) = AppIntegerValue;
  if (HIBYTE(v14)) {
    BOOL v3 = AppIntegerValue > 3;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    uint64_t v12 = v1 + 3120;
    char v13 = 1;
    std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(v1 + 3120));
    unsigned int v4 = 0;
    char v5 = 0;
    while (1)
    {
      uint64_t v6 = *(void *)(v1 + 120);
      if (v6) {
        LODWORD(v7) = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6);
      }
      else {
        uint64_t v7 = (*(void *)(v1 + 104) - *(void *)(v1 + 96)) >> 3;
      }
      if (v4 >= v7) {
        break;
      }
      *(_DWORD *)stat buf = 0;
      uint64_t v8 = (AUSM::Properties *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(v1 + 80), v4) + 672);
      AUSM::Properties::getProperty(v8, 0xBBDu, buf);
      if (*(_DWORD *)buf != v14)
      {
        AUSM::Properties::setProperty(v8, 3005, &v14, 4, 0);
        char v5 = 1;
      }
      ++v4;
    }
    if (v5)
    {
      if (getAUSMV2Log(void)::onceToken != -1) {
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
      }
      int v9 = (id)getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        dev_t v11 = (void *)(v1 + 3368);
        if (*(char *)(v1 + 3391) < 0) {
          dev_t v11 = (void *)*v11;
        }
        *(_DWORD *)stat buf = 136315906;
        uint64_t v16 = v11;
        __int16 v17 = 2080;
        uint64_t v18 = "Initialize_block_invoke";
        __int16 v19 = 2112;
        unsigned __int8 v20 = @"ausm_source_mode_override";
        __int16 v21 = 1024;
        int v22 = (int)v14;
        _os_log_debug_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_DEBUG, "[%s|%s] Applied defaults write %@ %u", buf, 0x26u);
      }

      atomic_store(1u, (unsigned __int8 *)(v1 + 3008));
    }
    std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v12);
  }
  return AUSpatialMixerV2::DebugSoloInputElement((AUSpatialMixerV2 *)v1);
}

void sub_1BB3EA4C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

CFIndex AUSpatialMixerV2::DebugSoloInputElement(AUSpatialMixerV2 *this)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  Boolean keyExistsAndHasValidFormat = 0;
  CFIndex result = CFPreferencesGetAppIntegerValue(@"ausm_solo_input", @"com.apple.coreaudio", &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat)
  {
    int v4 = result;
    uint64_t v5 = 0;
    v3.n128_u32[1] = 0;
    while (1)
    {
      uint64_t v6 = *((void *)this + 15);
      CFIndex result = v6
             ? (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6)
             : (*((void *)this + 13) - *((void *)this + 12)) >> 3;
      if (v5 >= result) {
        break;
      }
      if (v4 == v5) {
        v3.n128_f32[0] = 1.0;
      }
      else {
        v3.n128_f32[0] = 0.0;
      }
      int v7 = (*(uint64_t (**)(AUSpatialMixerV2 *, uint64_t, uint64_t, uint64_t, void, __n128))(*(void *)this + 152))(this, 5, 1, v5, 0, v3);
      if (v7)
      {
        int v8 = v7;
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        int v9 = (id)getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          __int16 v10 = (char *)this + 3368;
          if (*((char *)this + 3391) < 0) {
            __int16 v10 = (char *)*((void *)this + 421);
          }
          *(_DWORD *)stat buf = 136316162;
          dev_t v11 = "disabled";
          if (v4 == v5) {
            dev_t v11 = "enabled";
          }
          CFTypeRef v14 = v10;
          __int16 v15 = 2080;
          uint64_t v16 = "DebugSoloInputElement";
          __int16 v17 = 1024;
          int v18 = v5;
          __int16 v19 = 2080;
          unsigned __int8 v20 = v11;
          __int16 v21 = 1024;
          int v22 = v8;
          _os_log_error_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_ERROR, "[%s|%s] Solo: could not set input #%u to %s, err = %d", buf, 0x2Cu);
        }
      }
      uint64_t v5 = (v5 + 1);
    }
  }
  return result;
}

void AUSpatialMixerV2::InitializeOutputConverter(AudioConverterRef *this)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  AUSpatialMixerV2::DisposeOutputConverter((AUSpatialMixerV2 *)this);
  uint64_t Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(this + 16), 0);
  long long v3 = *(_OWORD *)(Element + 96);
  *(_OWORD *)&inDestinationFormat.Float64 mSampleRate = *(_OWORD *)(Element + 80);
  *(_OWORD *)&inDestinationFormat.mBytesPerPacket = v3;
  *(void *)&inDestinationFormat.mBitsPerChannel = *(void *)(Element + 112);
  inDestinationFormat.Float64 mSampleRate = 44100.0;
  inSourceFormat.Float64 mSampleRate = 44100.0;
  *(_OWORD *)&inSourceFormat.mFormatID = xmmword_1BB8727B0;
  inSourceFormat.mBytesPerFrame = 4;
  inSourceFormat.UInt32 mChannelsPerFrame = HIDWORD(v3);
  *(void *)&inSourceFormat.mBitsPerChannel = 32;
  AudioConverterNew(&inSourceFormat, &inDestinationFormat, this + 364);
  if (this[382])
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    int v4 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v30 = this + 421;
      if (*((char *)this + 3391) < 0) {
        unint64_t v30 = (void *)*v30;
      }
      *(_DWORD *)stat buf = 136315394;
      *(void *)&uint8_t buf[4] = v30;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "CreateOutputCaptureFileIfNecessary";
      _os_log_debug_impl(&dword_1BB0CE000, v4, OS_LOG_TYPE_DEBUG, "[%s|%s] Inconsistent behaviour: there was already an output capture file! Disposing of it.", buf, 0x16u);
    }

    AUSpatialMixerV2::DisposeOutputCaptureFile((uint64_t)this);
  }
  uint64_t v5 = (void *)[objc_alloc(MEMORY[0x1E4F1CB18]) initWithSuiteName:@"com.apple.coreaudio"];
  if ([v5 BOOLForKey:@"ausm_capture_all"]) {
    int v6 = 1;
  }
  else {
    int v6 = [v5 BOOLForKey:@"ausm_capture_output"];
  }
  if (getAUSMV2Log(void)::onceToken != -1) {
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
  }
  int v7 = (id)getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v28 = this + 421;
    if (*((char *)this + 3391) < 0) {
      uint64_t v28 = (void *)*v28;
    }
    unint64_t v29 = "no";
    *(_DWORD *)stat buf = 136315650;
    *(void *)&uint8_t buf[4] = v28;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "CreateOutputCaptureFileIfNecessary";
    if (v6) {
      unint64_t v29 = "yes";
    }
    *(_WORD *)&buf[22] = 2080;
    *(void *)&unsigned char buf[24] = v29;
    _os_log_debug_impl(&dword_1BB0CE000, v7, OS_LOG_TYPE_DEBUG, "[%s|%s] Creating the output capture file: %s", buf, 0x20u);
  }

  if (v6)
  {
    if (*((char *)this + 5967) < 0)
    {
      if (this[744])
      {
LABEL_15:
        unint64_t CurrentGregorianDate = CATimeUtilities::GetCurrentGregorianDate(v8);
        __int16 v10 = this + 743;
        caulk::make_string((caulk *)"%d%02d%02d.%02d%02d%02d", (uint64_t)v38, CurrentGregorianDate, ((int)(CurrentGregorianDate >> 8) >> 24), ((int)(CurrentGregorianDate >> 16) >> 24), ((int)(CurrentGregorianDate >> 24) >> 24), (SHIDWORD(CurrentGregorianDate) >> 24), (int)v11);
        if (*((char *)this + 5967) < 0) {
          __int16 v10 = (void *)*v10;
        }
        uint64_t v12 = (char *)(this + 421);
        char v13 = (char *)(this + 421);
        if (*((char *)this + 3391) < 0) {
          char v13 = *(char **)v12;
        }
        CFTypeRef v14 = v38;
        if (v39 < 0) {
          CFTypeRef v14 = (void **)v38[0];
        }
        CFStringRef v15 = CFStringCreateWithFormat(0, 0, @"%s/ausm_%s_output_%s_%u.caf", v10, v13, v14, *((unsigned int *)this + 766));
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&filePath, v15);
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        uint64_t v16 = (id)getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v17 = (char *)(this + 421);
          if (*((char *)this + 3391) < 0) {
            __int16 v17 = *(char **)v12;
          }
          if (!filePath)
          {
            exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not construct");
          }
          applesauce::CF::convert_to<std::string,0>(filePath, (uint64_t)&__p);
          if ((__p.mFramesPerPacket & 0x80000000) == 0) {
            Float64 mSampleRate = COERCE_DOUBLE(&__p);
          }
          else {
            Float64 mSampleRate = __p.mSampleRate;
          }
          *(_DWORD *)stat buf = 136315650;
          *(void *)&uint8_t buf[4] = v17;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "CreateOutputCaptureFileIfNecessary";
          *(_WORD *)&buf[22] = 2080;
          *(Float64 *)&unsigned char buf[24] = mSampleRate;
          _os_log_impl(&dword_1BB0CE000, v16, OS_LOG_TYPE_DEFAULT, "[%s|%s] Capture file: %s", buf, 0x20u);
          if (SHIBYTE(__p.mFramesPerPacket) < 0) {
            operator delete(*(void **)&__p.mSampleRate);
          }
        }

        CFURLRef v19 = CFURLCreateWithFileSystemPath(0, filePath, kCFURLPOSIXPathStyle, 0);
        applesauce::CF::URLRef::URLRef((applesauce::CF::URLRef *)&inURL, v19);
        uint64_t v20 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(this + 16), 0);
        __int16 v21 = this + 382;
        long long v22 = *(_OWORD *)(v20 + 96);
        *(_OWORD *)stat buf = *(_OWORD *)(v20 + 80);
        *(_OWORD *)&buf[16] = v22;
        uint64_t v47 = *(void *)(v20 + 112);
        __p.Float64 mSampleRate = *(Float64 *)buf;
        *(void *)&__p.mFormatID = 0x96C70636DLL;
        __p.mBytesPerPacket = 4 * HIDWORD(v22);
        __p.mFramesPerPacket = 1;
        __p.mBytesPerFrame = 4 * HIDWORD(v22);
        __p.UInt32 mChannelsPerFrame = HIDWORD(v22);
        *(void *)&__p.mBitsPerChannel = 32;
        OSStatus v23 = ExtAudioFileCreateWithURL(inURL, 0x63616666u, &__p, 0, 1u, this + 382);
        if (v23)
        {
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          uint64_t v24 = (id)getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
          {
            if (*((char *)this + 3391) < 0) {
              uint64_t v12 = *(char **)v12;
            }
            *(_DWORD *)uint64_t v40 = 136315650;
            unint64_t v41 = v12;
            __int16 v42 = 2080;
            int v43 = "CreateOutputCaptureFileIfNecessary";
            __int16 v44 = 1024;
            OSStatus v45 = v23;
            _os_log_error_impl(&dword_1BB0CE000, v24, OS_LOG_TYPE_ERROR, "[%s|%s] ERROR: Could not create mixer output capture file (ExtAudioFileCreateWithURL returned %d)", v40, 0x1Cu);
          }
        }
        else
        {
          OSStatus v26 = ExtAudioFileSetProperty(*v21, 0x63666D74u, 0x28u, buf);
          if (!v26)
          {
LABEL_48:
            ++*((_DWORD *)this + 766);
            if (inURL) {
              CFRelease(inURL);
            }
            if (filePath) {
              CFRelease(filePath);
            }
            if (v39 < 0) {
              operator delete(v38[0]);
            }
            goto LABEL_54;
          }
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          uint64_t v27 = (id)getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
          {
            if (*((char *)this + 3391) < 0) {
              uint64_t v12 = *(char **)v12;
            }
            *(_DWORD *)uint64_t v40 = 136315650;
            unint64_t v41 = v12;
            __int16 v42 = 2080;
            int v43 = "CreateOutputCaptureFileIfNecessary";
            __int16 v44 = 1024;
            OSStatus v45 = v26;
            _os_log_error_impl(&dword_1BB0CE000, v27, OS_LOG_TYPE_ERROR, "[%s|%s] ERROR: Could not create mixer output file (ExtAudioFileSetProperty with kExtAudioFileProperty_ClientDataFormat returned %d)", v40, 0x1Cu);
          }

          ExtAudioFileDispose(*v21);
        }
        *__int16 v21 = 0;
        goto LABEL_48;
      }
    }
    else if (*((unsigned char *)this + 5967))
    {
      goto LABEL_15;
    }
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    unint64_t v25 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      unint64_t v31 = this + 421;
      if (*((char *)this + 3391) < 0) {
        unint64_t v31 = (void *)*v31;
      }
      *(_DWORD *)stat buf = 136315394;
      *(void *)&uint8_t buf[4] = v31;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "CreateOutputCaptureFileIfNecessary";
      _os_log_error_impl(&dword_1BB0CE000, v25, OS_LOG_TYPE_ERROR, "[%s|%s] ERROR: Could not create mixer output capture file (no capture dir path available)", buf, 0x16u);
    }
  }
LABEL_54:
}

void sub_1BB3EAE74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,CFTypeRef a32,CFTypeRef cf,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  __cxa_free_exception(v40);

  if (cf) {
    CFRelease(cf);
  }
  if (a39 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void AUSpatialMixerV2::UpdateDiffuseProcessors(AUSpatialMixerV2 *this)
{
  *(void *)&buf.mChannelDescriptions[0].mCoordinates[1] = *MEMORY[0x1E4F143B8];
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)this + 2608);
  if ((v1 & 1) == 0) {
    return;
  }
  long long v3 = (AUSpatialMixerV2 *)((char *)this + 128);
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 128), 0);
  uint64_t v5 = *(ausdk::AUChannelLayout **)(Element + 120);
  unsigned int v7 = ausdk::AUChannelLayout::NumberChannels(v5, v6);
  if ((*(_DWORD *)v5 | 0x10000) == 0x10000)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    int v8 = (id)getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      goto LABEL_6;
    }
    OSStatus v23 = (void *)((char *)this + 3368);
    if (*((char *)this + 3391) < 0) {
      OSStatus v23 = (void *)*v23;
    }
    buf.AudioChannelLayoutTag mChannelLayoutTag = 136315394;
    *(void *)&buf.mChannelBitmap = v23;
    LOWORD(buf.mChannelDescriptions[0].mChannelLabel) = 2080;
    *(void *)((char *)&buf.mChannelDescriptions[0].mChannelLabel + 2) = "UpdateDiffuseProcessors";
    CFTypeRef v14 = "[%s|%s] Error: this output layout tag is not supported";
LABEL_53:
    _os_log_error_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_ERROR, v14, (uint8_t *)&buf, 0x16u);
LABEL_6:

    int v9 = (AUSpatialMixerV2 *)((char *)this + 9016);
    uint64_t v10 = 3072;
    do
    {
      if (*((unsigned char *)v9 + 184))
      {
        IR::IRProcessor::~IRProcessor(v9);
        *((unsigned char *)v9 + 184) = 0;
      }
      int v9 = (IR::IRProcessor *)((char *)v9 + 192);
      v10 -= 192;
    }
    while (v10);
    *((_DWORD *)this + 3023) = 0;
    return;
  }
  unsigned int v11 = v7;
  if (!v7)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    int v8 = (id)getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      goto LABEL_6;
    }
    char v13 = (void *)((char *)this + 3368);
    if (*((char *)this + 3391) < 0) {
      char v13 = (void *)*v13;
    }
    buf.AudioChannelLayoutTag mChannelLayoutTag = 136315394;
    *(void *)&buf.mChannelBitmap = v13;
    LOWORD(buf.mChannelDescriptions[0].mChannelLabel) = 2080;
    *(void *)((char *)&buf.mChannelDescriptions[0].mChannelLabel + 2) = "UpdateDiffuseProcessors";
    CFTypeRef v14 = "[%s|%s] Error: this output layout is invalid";
    goto LABEL_53;
  }
  if (v7 >= 0x11)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    int v8 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v12 = (void *)((char *)this + 3368);
      if (*((char *)this + 3391) < 0) {
        uint64_t v12 = (void *)*v12;
      }
      buf.AudioChannelLayoutTag mChannelLayoutTag = 136315394;
      *(void *)&buf.mChannelBitmap = v12;
      LOWORD(buf.mChannelDescriptions[0].mChannelLabel) = 2080;
      *(void *)((char *)&buf.mChannelDescriptions[0].mChannelLabel + 2) = "UpdateDiffuseProcessors";
      _os_log_debug_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_DEBUG, "[%s|%s] Not enough DiffuseProcessors for this output layout!", (uint8_t *)&buf, 0x16u);
    }
    goto LABEL_6;
  }
  if (*(_DWORD *)v5 != *((_DWORD *)this + 3022))
  {
    *((_DWORD *)this + 3023) = 0;
    GetChannelLayoutChannelLabels(&buf, (int *)v5);
    uint64_t v15 = 0;
    uint64_t v16 = (AUSpatialMixerV2 *)((char *)this + 9016);
    __int16 v17 = (const float *)&AUSM::kDiffuseCoeffs;
    do
    {
      unsigned int v18 = *(_DWORD *)(*(void *)&buf.mChannelLayoutTag + v15);
      BOOL v19 = v18 > 0x3E || ((0x4000002000000010uLL >> v18) & 1) == 0;
      if (!v19 || v18 == 45 || v18 == 40)
      {
        if (*((unsigned char *)v16 + 184))
        {
          IR::IRProcessor::~IRProcessor(v16);
          *((unsigned char *)v16 + 184) = 0;
        }
      }
      else
      {
        if (*((unsigned char *)v16 + 184))
        {
          IR::IRProcessor::uninitialize(v16);
          IR::IRProcessor::reset((IR::FFTFilter **)v16);
        }
        else
        {
          IR::IRProcessor::IRProcessor(v16, 512, 0.0, 1, 128, 1, 0);
          *((unsigned char *)v16 + 184) = 1;
        }
        float v20 = *(double *)(ausdk::AUScope::SafeGetElement(v3, 0) + 80);
        IR::IRProcessor::initialize(v16, v20, *((_DWORD *)this + 84), 0x80u, 0, 0, 0);
        float v25 = 0.0;
        uint64_t v24 = v17;
        IR::IRProcessor::setIRCoeffs(v16, &v24, &v25, 1, 512);
        ++*((_DWORD *)this + 3023);
      }
      v15 += 4;
      v17 += 512;
      uint64_t v16 = (IR::IRProcessor *)((char *)v16 + 192);
    }
    while (4 * v11 != v15);
    if (v11 <= 0xF)
    {
      uint64_t v21 = v11 + 1;
      long long v22 = (AUSpatialMixerV2 *)((char *)this + 192 * v11 + 9016);
      do
      {
        if (*((unsigned char *)v22 + 184))
        {
          IR::IRProcessor::~IRProcessor(v22);
          *((unsigned char *)v22 + 184) = 0;
        }
        long long v22 = (IR::IRProcessor *)((char *)v22 + 192);
        BOOL v19 = v21++ == 16;
      }
      while (!v19);
    }
    *((_DWORD *)this + 3022) = **(_DWORD **)(Element + 120);
    if (*(void *)&buf.mChannelLayoutTag)
    {
      *(void *)&buf.mNumberChannelDescriptions = *(void *)&buf.mChannelLayoutTag;
      operator delete(*(void **)&buf.mChannelLayoutTag);
    }
  }
}

void sub_1BB3EB364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[20],unsigned int &>(applesauce::CF::TypeRef *a1, char *a2, int *a3)
{
  applesauce::CF::TypeRef::TypeRef(a1, a2);
  int valuePtr = *a3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *((void *)a1 + 1) = v5;
  if (!v5)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_1BB3EB428(_Unwind_Exception *a1)
{
  long long v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

void *___Z28AudioStatisticsLibraryLoaderv_block_invoke()
{
  CFIndex result = dlopen("/usr/lib/libAudioStatistics.dylib", 1);
  if (result)
  {
    uint64_t v1 = result;
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void))dlsym(result, "CreateSharedCAReportingClient");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void))dlsym(v1, "CAReportingClientCreateReporterID");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v1, "CAReportingClientCreateReporterIDFromSessionID");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v1, "CAReportingClientCreatePerformanceReporterID");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void))dlsym(v1, "CAReportingClientStartReporter");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = dlsym(v1, "CAReportingClientStopReporter");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void, void))dlsym(v1, "CAReportingClientSetAudioServiceType");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = dlsym(v1, "CAReportingClientGetAudioServiceType");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void, void))dlsym(v1, "CAReportingClientSetConfiguration");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = dlsym(v1, "CAReportingClientCopyConfiguration");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void, void, void, void))dlsym(v1, "CAReportingClientSendMessage");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void, void, void))dlsym(v1, "CAReportingClientSendSingleMessage");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = dlsym(v1, "CAReportingClientDestroyReporterID");
    CFIndex result = dlsym(v1, "CAReportingClientRequestMessage");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t)result;
  }
  return result;
}

uint64_t AUSM::AUFXWrapper::AUFXWrapper(uint64_t a1, OSType a2, long long *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = 0;
  CFNumberRef v5 = (_OWORD *)(a1 + 72);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 72), *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v6 = *a3;
    *(void *)(a1 + 88) = *((void *)a3 + 2);
    *CFNumberRef v5 = v6;
  }
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  unsigned int v7 = (void **)(a1 + 96);
  *(void *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = a2;
  *(unsigned char *)(a1 + 124) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  __x[0] = 0;
  std::vector<char>::vector((std::vector<char> *)(a1 + 160), 8uLL, __x);
  **(_DWORD **)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*v7);
  }
  *(unsigned char *)(a1 + 96) = HIBYTE(a2);
  *(unsigned char *)(a1 + 97) = BYTE2(a2);
  *(unsigned char *)(a1 + 98) = BYTE1(a2);
  *(unsigned char *)(a1 + 99) = a2;
  *(_WORD *)(a1 + 100) = 0;
  *(unsigned char *)(a1 + 119) = 5;
  inDesc.componentType = 1635083896;
  inDesc.componentSubType = a2;
  *(void *)&inDesc.componentManufacturer = 1634758764;
  inDesc.componentFlagsMasuint64_t k = 0;
  Next = AudioComponentFindNext(0, &inDesc);
  if (!Next)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    uint64_t v10 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a1 + 95) < 0) {
        CFNumberRef v5 = *(_OWORD **)v5;
      }
      if (*(char *)(a1 + 119) < 0) {
        unsigned int v7 = (void **)*v7;
      }
      *(_DWORD *)AudioStreamBasicDescription __x = 136315650;
      CFTypeRef v14 = "AUFXWrapper";
      __int16 v15 = 2080;
      uint64_t v16 = v5;
      __int16 v17 = 2080;
      unsigned int v18 = v7;
      _os_log_error_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_ERROR, "%s %s: could not find aufx %s appl", (uint8_t *)__x, 0x20u);
    }
    goto LABEL_39;
  }
  if (!AudioComponentInstanceNew(Next, (AudioComponentInstance *)a1))
  {
    if (AudioComponentInstanceCanDo(*(AudioComponentInstance *)a1, 20))
    {
      *(_DWORD *)(a1 + 128) = 1;
      if (getAUSMV2Log(void)::onceToken != -1) {
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
      }
      uint64_t v10 = (id)getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(a1 + 95) < 0) {
          CFNumberRef v5 = *(_OWORD **)v5;
        }
        if (*(char *)(a1 + 119) < 0) {
          unsigned int v7 = (void **)*v7;
        }
        *(_DWORD *)AudioStreamBasicDescription __x = 136315650;
        CFTypeRef v14 = "AUFXWrapper";
        __int16 v15 = 2080;
        uint64_t v16 = v5;
        __int16 v17 = 2080;
        unsigned int v18 = v7;
        _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_DEFAULT, "%s %s: aufx %s appl created; using BaseProcess",
          (uint8_t *)__x,
          0x20u);
      }
    }
    else if (AudioComponentInstanceCanDo(*(AudioComponentInstance *)a1, 21))
    {
      *(_DWORD *)(a1 + 128) = 2;
      if (getAUSMV2Log(void)::onceToken != -1) {
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
      }
      uint64_t v10 = (id)getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(a1 + 95) < 0) {
          CFNumberRef v5 = *(_OWORD **)v5;
        }
        if (*(char *)(a1 + 119) < 0) {
          unsigned int v7 = (void **)*v7;
        }
        *(_DWORD *)AudioStreamBasicDescription __x = 136315650;
        CFTypeRef v14 = "AUFXWrapper";
        __int16 v15 = 2080;
        uint64_t v16 = v5;
        __int16 v17 = 2080;
        unsigned int v18 = v7;
        _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_DEFAULT, "%s %s: aufx %s appl created; using ProcessMultiple",
          (uint8_t *)__x,
          0x20u);
      }
    }
    else
    {
      if (getAUSMV2Log(void)::onceToken != -1) {
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
      }
      uint64_t v10 = (id)getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        if (*(char *)(a1 + 95) < 0) {
          CFNumberRef v5 = *(_OWORD **)v5;
        }
        if (*(char *)(a1 + 119) < 0) {
          unsigned int v7 = (void **)*v7;
        }
        *(_DWORD *)AudioStreamBasicDescription __x = 136315650;
        CFTypeRef v14 = "AUFXWrapper";
        __int16 v15 = 2080;
        uint64_t v16 = v5;
        __int16 v17 = 2080;
        unsigned int v18 = v7;
        _os_log_error_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_ERROR, "%s %s: aufx %s appl only supports render method; processing will be bypassed",
          (uint8_t *)__x,
          0x20u);
      }
    }
LABEL_39:

    return a1;
  }
  if (getAUSMV2Log(void)::onceToken != -1) {
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
  }
  int v9 = (id)getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    if (*(char *)(a1 + 95) < 0) {
      CFNumberRef v5 = *(_OWORD **)v5;
    }
    if (*(char *)(a1 + 119) < 0) {
      unsigned int v7 = (void **)*v7;
    }
    *(_DWORD *)AudioStreamBasicDescription __x = 136315650;
    CFTypeRef v14 = "AUFXWrapper";
    __int16 v15 = 2080;
    uint64_t v16 = v5;
    __int16 v17 = 2080;
    unsigned int v18 = v7;
    _os_log_error_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_ERROR, "%s %s: could not instantiate aufx %s appl", (uint8_t *)__x, 0x20u);
  }

  *(void *)a1 = 0;
  return a1;
}

void sub_1BB3EBB0C(_Unwind_Exception *exception_object)
{
}

uint64_t std::__split_buffer<std::unique_ptr<AUSM::AUFXWrapper>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    std::unique_ptr<AUSM::AUFXWrapper>::reset[abi:ne180100]((AUSM::AUFXWrapper **)(i - 8));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<std::unique_ptr<AUSM::AUFXWrapper>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  CFBooleanRef v2 = (AUSM::AUFXWrapper **)**a1;
  if (v2)
  {
    int v4 = (AUSM::AUFXWrapper **)v1[1];
    CFNumberRef v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<AUSM::AUFXWrapper>::reset[abi:ne180100](--v4);
      while (v4 != v2);
      CFNumberRef v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void ___ZN35AUSpatialMixerV2OrientationObserver16registerObserverEP28OpaqueAudioComponentInstancejRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke(void *a1, int a2)
{
  *(void *)&v15[5] = *MEMORY[0x1E4F143B8];
  int inData = a2;
  uint64_t v3 = a1[4];
  if (getAUSMV2Log(void)::onceToken != -1) {
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
  }
  int v4 = (id)getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v11 = (void *)(v3 + 40);
    if (*(char *)(v3 + 63) < 0) {
      unsigned int v11 = (void *)*v11;
    }
    *(_DWORD *)AudioChannelLayout buf = 136315138;
    *(void *)__int16 v15 = v11;
    _os_log_debug_impl(&dword_1BB0CE000, v4, OS_LOG_TYPE_DEBUG, "Orientation handler callback %s", buf, 0xCu);
  }

  CFNumberRef v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    long long v6 = std::__shared_weak_count::lock(v5);
    if (v6)
    {
      unsigned int v7 = v6;
      uint64_t v8 = a1[5];
      if (v8 && std::mutex::try_lock((std::mutex *)(v8 + 80)))
      {
        unsigned __int8 v9 = atomic_load((unsigned __int8 *)(v8 + 72));
        if (v9)
        {
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          uint64_t v10 = (id)getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v12 = (void *)(v8 + 40);
            if (*(char *)(v8 + 63) < 0) {
              uint64_t v12 = (void *)*v12;
            }
            *(_DWORD *)AudioChannelLayout buf = 67109378;
            v15[0] = inData;
            LOWORD(v15[1]) = 2080;
            *(void *)((char *)&v15[1] + 2) = v12;
            _os_log_debug_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_DEBUG, "Setting orientation %u on %s", buf, 0x12u);
          }

          AudioUnitSetProperty(*(AudioUnit *)(v8 + 24), *(_DWORD *)(v8 + 32), 0, 0, &inData, 4u);
        }
        std::mutex::unlock((std::mutex *)(v8 + 80));
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1BB3EBE30(_Unwind_Exception *a1)
{
  std::mutex::unlock(v2);
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_40c60_ZTSNSt3__18weak_ptrI35AUSpatialMixerV2OrientationObserverEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t __copy_helper_block_ea8_40c60_ZTSNSt3__18weak_ptrI35AUSpatialMixerV2OrientationObserverEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__shared_ptr_emplace<AUSpatialMixerV2OrientationObserver>::__on_zero_shared(uint64_t a1)
{
  AUSpatialMixerV2OrientationObserver::unregister((AUSpatialMixerV2OrientationObserver *)(a1 + 24));
  std::mutex::~mutex((std::mutex *)(a1 + 104));
  uint64_t v2 = *(const void **)(a1 + 88);
  if (v2) {
    CFRelease(v2);
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void std::__shared_ptr_emplace<AUSpatialMixerV2OrientationObserver>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14AD220;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

void std::__shared_ptr_emplace<AUSpatialMixerV2OrientationObserver>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14AD220;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void AUSpatialMixerV2::~AUSpatialMixerV2(AUSpatialMixerV2 *this)
{
  AUSpatialMixerV2::~AUSpatialMixerV2(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  NSObject *v3;
  NSObject *v4;
  void *v5;
  IR::IRProcessor *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  const void *v9;
  const void *v10;
  std::__shared_weak_count *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void block[5];
  unsigned char buf[12];
  __int16 v32;
  const char *v33;
  uint64_t v34;

  uint64_t v34 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1F14ACED8;
  *((void *)this + 66) = &unk_1F14AD150;
  atomic_store(1u, (unsigned __int8 *)this + 2632);
  __dmb(0xBu);
  uint64_t v2 = (void *)*((void *)this + 327);
  uint64_t v3 = applesauce::dispatch::v1::queue::get(v2);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___ZN16AUSpatialMixerV2D2Ev_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = this;
  dispatch_sync(v3, block);

  std::__lock_first<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,std::shared_mutex>(0, (uint64_t)this + 3072, (uint64_t)this + 3088, (std::__shared_mutex_base *)((char *)this + 3120));
  if (getAUSMV2Log(void)::onceToken != -1) {
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
  }
  int v4 = (id)getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    CFNumberRef v5 = (void *)((char *)this + 3368);
    if (*((char *)this + 3391) < 0) {
      CFNumberRef v5 = (void *)*v5;
    }
    *(_DWORD *)AudioChannelLayout buf = 136315394;
    *(void *)&uint8_t buf[4] = v5;
    unint64_t v32 = 2080;
    unint64_t v33 = "~AUSpatialMixerV2";
    _os_log_impl(&dword_1BB0CE000, v4, OS_LOG_TYPE_DEFAULT, "[%s|%s] Instance is being destructed.", buf, 0x16u);
  }

  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock((uint64_t)this + 3072);
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock((uint64_t)this + 3088);
  std::__shared_mutex_base::unlock((std::__shared_mutex_base *)((char *)this + 3120));
  *(void *)AudioChannelLayout buf = (char *)this + 12128;
  std::vector<IR::FixedIntegerDelay>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)AudioChannelLayout buf = (char *)this + 12104;
  std::vector<IR::FixedIntegerDelay>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  long long v6 = (AUSpatialMixerV2 *)((char *)this + 11896);
  unsigned int v7 = -3072;
  do
  {
    if (*((unsigned char *)v6 + 184)) {
      IR::IRProcessor::~IRProcessor(v6);
    }
    long long v6 = (IR::IRProcessor *)((char *)v6 - 192);
    v7 += 192;
  }
  while (v7);
  std::unique_ptr<ParametricFilters>::reset[abi:ne180100]((void ***)this + 1124, 0);
  std::unique_ptr<ParametricFilters>::reset[abi:ne180100]((void ***)this + 1123, 0);
  MEMORY[0x1C185C3B0]((char *)this + 8944);
  std::unique_ptr<AUSpatialMixerV2DynamicXTCFilter>::reset[abi:ne180100]((uint64_t *)this + 1117, 0);
  AUSM::SoundStage::~SoundStage((AUSpatialMixerV2 *)((char *)this + 8416));
  AUSM::SoundStage::~SoundStage((AUSpatialMixerV2 *)((char *)this + 7808));
  AUSM::IRManager::~IRManager((AUSpatialMixerV2 *)((char *)this + 6176));
  std::unique_ptr<AUSM::RoomCongruence::Processor>::reset[abi:ne180100]((uint64_t *)this + 771, 0);
  std::__hash_table<vp::vx::io::Object_ID<vp::vx::io::Node>,std::hash<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::equal_to<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::allocator<vp::vx::io::Object_ID<vp::vx::io::Node>>>::~__hash_table((uint64_t)this + 6120);
  std::__hash_table<vp::vx::io::Object_ID<vp::vx::io::Node>,std::hash<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::equal_to<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::allocator<vp::vx::io::Object_ID<vp::vx::io::Node>>>::~__hash_table((uint64_t)this + 6080);
  std::__hash_table<vp::vx::io::Object_ID<vp::vx::io::Node>,std::hash<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::equal_to<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::allocator<vp::vx::io::Object_ID<vp::vx::io::Node>>>::~__hash_table((uint64_t)this + 6040);
  if (*((char *)this + 6031) < 0) {
    operator delete(*((void **)this + 751));
  }
  AUSM::GlobalProperties::~GlobalProperties((AUSpatialMixerV2 *)((char *)this + 3360));
  *(void *)AudioChannelLayout buf = (char *)this + 3328;
  std::vector<std::unique_ptr<AUSM::AUFXWrapper>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 412);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 3232));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 3184));
  std::mutex::~mutex((std::mutex *)((char *)this + 3120));
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*((void **)this + 380));
  unsigned __int8 v9 = (const void *)*((void *)this + 378);
  if (v9) {
    CFRelease(v9);
  }
  uint64_t v10 = (const void *)*((void *)this + 377);
  if (v10) {
    CFRelease(v10);
  }
  unsigned int v11 = (std::__shared_weak_count *)*((void *)this + 375);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  std::unique_ptr<TorqueEngine>::reset[abi:ne180100]((void ***)this + 372, 0);
  uint64_t v12 = (void *)*((void *)this + 358);
  if (v12)
  {
    *((void *)this + 359) = v12;
    operator delete(v12);
  }
  char v13 = (void *)*((void *)this + 355);
  if (v13)
  {
    *((void *)this + 356) = v13;
    operator delete(v13);
  }
  CFTypeRef v14 = (void *)*((void *)this + 352);
  if (v14)
  {
    *((void *)this + 353) = v14;
    operator delete(v14);
  }
  __int16 v15 = (void *)*((void *)this + 348);
  if (v15)
  {
    *((void *)this + 349) = v15;
    operator delete(v15);
  }
  uint64_t v16 = (void *)*((void *)this + 345);
  if (v16)
  {
    *((void *)this + 346) = v16;
    operator delete(v16);
  }
  __int16 v17 = (void *)*((void *)this + 342);
  if (v17)
  {
    *((void *)this + 343) = v17;
    operator delete(v17);
  }
  std::unique_ptr<AUSM::SharedBuffers>::reset[abi:ne180100]((uint64_t *)this + 341, 0);
  std::unique_ptr<AUSM::SharedBuffers>::reset[abi:ne180100]((uint64_t *)this + 340, 0);
  std::unique_ptr<AUSM::SharedBuffers>::reset[abi:ne180100]((uint64_t *)this + 339, 0);
  unsigned int v18 = *((void *)this + 334);
  *((void *)this + 334) = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  uint64_t v19 = (void *)*((void *)this + 331);
  if (v19)
  {
    *((void *)this + 332) = v19;
    operator delete(v19);
  }
  float v20 = (void *)*((void *)this + 328);
  *((void *)this + 328) = 0;

  uint64_t v21 = (void *)*((void *)this + 327);
  *((void *)this + 327) = 0;

  long long v22 = (void *)*((void *)this + 320);
  if (v22)
  {
    *((void *)this + 321) = v22;
    operator delete(v22);
  }
  OSStatus v23 = (void *)*((void *)this + 313);
  if (v23)
  {
    *((void *)this + 314) = v23;
    operator delete(v23);
  }
  uint64_t v24 = (void *)*((void *)this + 307);
  if (v24)
  {
    *((void *)this + 308) = v24;
    operator delete(v24);
  }
  float v25 = (void *)*((void *)this + 301);
  if (v25)
  {
    *((void *)this + 302) = v25;
    operator delete(v25);
  }
  *(void *)AudioChannelLayout buf = (char *)this + 2376;
  std::vector<IR::FixedIntegerDelay>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  IR::SharedIRBuses::~SharedIRBuses((AUSpatialMixerV2 *)((char *)this + 2104));
  OSStatus v26 = (void *)*((void *)this + 256);
  if (v26)
  {
    *((void *)this + 257) = v26;
    operator delete(v26);
  }
  std::unique_ptr<IR::IRProcessor>::reset[abi:ne180100]((IR::IRProcessor **)this + 253, 0);
  uint64_t v27 = (void *)*((void *)this + 247);
  if (v27)
  {
    *((void *)this + 248) = v27;
    operator delete(v27);
  }
  uint64_t v28 = 1152;
  do
  {
    unint64_t v29 = *(void **)((char *)this + v28 + 728);
    if (v29)
    {
      *(void *)((char *)this + v28 + 736) = v29;
      operator delete(v29);
    }
    v28 -= 72;
  }
  while (v28);
  AUScopeDynamic::~AUScopeDynamic((ElementVector ***)this + 69);
  std::unique_ptr<AUSM::Metadata>::reset[abi:ne180100]((uint64_t *)this + 68, 0);
  ausdk::AUBase::~AUBase(this);
}

void sub_1BB3EC4BC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void ___ZN16AUSpatialMixerV2D2Ev_block_invoke(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  if (getAUSMV2Log(void)::onceToken != -1) {
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
  }
  uint64_t v2 = (id)getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = (void *)(v1 + 3368);
    if (*(char *)(v1 + 3391) < 0) {
      uint64_t v3 = (void *)*v3;
    }
    int v4 = 136315394;
    CFNumberRef v5 = v3;
    __int16 v6 = 2080;
    unsigned int v7 = "~AUSpatialMixerV2_block_invoke";
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEFAULT, "[%s|%s] Dispatch queue cleared", (uint8_t *)&v4, 0x16u);
  }
}

uint64_t std::__lock_first<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,std::shared_mutex>(int a1, uint64_t a2, uint64_t a3, std::__shared_mutex_base *a4)
{
  while (a1 == 1)
  {
    uint64_t v17 = a3;
    char v18 = 1;
    caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock(a3);
    int v9 = std::try_lock[abi:ne180100]<std::shared_mutex,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>(a4, a2);
    if (v9 == -1)
    {
LABEL_30:
      uint64_t v17 = 0;
      char v18 = 0;
      return std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v17);
    }
    std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v17);
    if (v9 == 1) {
      a1 = 0;
    }
    else {
      a1 = v9 + 2;
    }
LABEL_9:
    sched_yield();
  }
  if (!a1)
  {
    uint64_t v17 = a2;
    char v18 = 1;
    caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock(a2);
    int v8 = std::try_lock[abi:ne180100]<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,std::shared_mutex>(a3, a4);
    if (v8 == -1) {
      goto LABEL_30;
    }
    std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v17);
    a1 = v8 + 1;
    goto LABEL_9;
  }
  int v10 = a1 - 2;
  while (v10 == 1)
  {
    uint64_t v17 = a2;
    char v18 = 1;
    caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock(a2);
    int v12 = std::try_lock[abi:ne180100]<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,std::shared_mutex>(a3, a4);
    if (v12 == -1) {
      goto LABEL_30;
    }
    std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v17);
    if (v12 == 1) {
      int v10 = 0;
    }
    else {
      int v10 = v12 + 2;
    }
LABEL_19:
    sched_yield();
  }
  if (!v10)
  {
    uint64_t v17 = (uint64_t)a4;
    char v18 = 1;
    std::__shared_mutex_base::lock(a4);
    int v11 = std::try_lock[abi:ne180100]<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>(a2, a3);
    if (v11 == -1)
    {
LABEL_31:
      uint64_t v17 = 0;
      char v18 = 0;
      return std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v17);
    }
    std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v17);
    int v10 = v11 + 1;
    goto LABEL_19;
  }
  int v13 = v10 - 2;
  while (v13 == 1)
  {
    uint64_t v17 = (uint64_t)a4;
    char v18 = 1;
    std::__shared_mutex_base::lock(a4);
    int v15 = std::try_lock[abi:ne180100]<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>(a2, a3);
    if (v15 == -1) {
      goto LABEL_31;
    }
    std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v17);
    if (v15 == 1) {
      int v13 = 0;
    }
    else {
      int v13 = v15 + 2;
    }
LABEL_29:
    sched_yield();
  }
  if (!v13)
  {
    uint64_t v17 = a3;
    char v18 = 1;
    caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock(a3);
    int v14 = std::try_lock[abi:ne180100]<std::shared_mutex,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>(a4, a2);
    if (v14 == -1) {
      goto LABEL_30;
    }
    std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v17);
    int v13 = v14 + 1;
    goto LABEL_29;
  }
  return std::__lock_first<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,std::shared_mutex>((v13 - 2), a2, a3, a4);
}

void sub_1BB3EC800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void AUSM::IRManager::~IRManager(AUSM::IRManager *this)
{
  std::mutex::~mutex((std::mutex *)((char *)this + 1560));
  uint64_t v2 = (void *)*((void *)this + 192);
  if (v2)
  {
    *((void *)this + 193) = v2;
    operator delete(v2);
  }
  IR::IRDataAttributes::~IRDataAttributes((AUSM::IRManager *)((char *)this + 1368));
  IR::IRDataAttributes::~IRDataAttributes((AUSM::IRManager *)((char *)this + 1200));
  IR::IRDataAttributes::~IRDataAttributes((AUSM::IRManager *)((char *)this + 1032));
  IR::IRDataAttributes::~IRDataAttributes((AUSM::IRManager *)((char *)this + 864));
  IR::IRDataAttributes::~IRDataAttributes((AUSM::IRManager *)((char *)this + 696));
  IR::IRDataAttributes::~IRDataAttributes((AUSM::IRManager *)((char *)this + 528));
  if (*((unsigned char *)this + 520)) {
    IR::IRDataAttributes::~IRDataAttributes((AUSM::IRManager *)((char *)this + 368));
  }
  IR::IRDataAttributes::~IRDataAttributes((AUSM::IRManager *)((char *)this + 216));
  IR::IRDataAttributes::~IRDataAttributes((AUSM::IRManager *)((char *)this + 64));
  uint64_t v3 = (void *)*((void *)this + 5);
  if (v3)
  {
    *((void *)this + 6) = v3;
    operator delete(v3);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

uint64_t *std::unique_ptr<AUSM::RoomCongruence::Processor>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *CFIndex result = a2;
  if (v2)
  {
    AUSM::RoomCongruence::Cache::~Cache((AUSM::RoomCongruence::Cache *)(v2 + 168));
    uint64_t v3 = *(void **)(v2 + 104);
    if (v3)
    {
      *(void *)(v2 + 112) = v3;
      operator delete(v3);
    }
    std::__hash_table<std::__hash_value_type<IR::IRPreset,AUSM::RoomCongruence::UserData>,std::__unordered_map_hasher<IR::IRPreset,std::__hash_value_type<IR::IRPreset,AUSM::RoomCongruence::UserData>,std::hash<IR::IRPreset>,std::equal_to<IR::IRPreset>,true>,std::__unordered_map_equal<IR::IRPreset,std::__hash_value_type<IR::IRPreset,AUSM::RoomCongruence::UserData>,std::equal_to<IR::IRPreset>,std::hash<IR::IRPreset>,true>,std::allocator<std::__hash_value_type<IR::IRPreset,AUSM::RoomCongruence::UserData>>>::~__hash_table(v2 + 64);
    int v4 = *(void **)(v2 + 40);
    if (v4)
    {
      *(void *)(v2 + 48) = v4;
      operator delete(v4);
    }
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    JUMPOUT(0x1C185D370);
  }
  return result;
}

void AUSM::GlobalProperties::~GlobalProperties(AUSM::GlobalProperties *this)
{
  *(void *)this = &unk_1F14B6408;
  if (*((char *)this + 2607) < 0) {
    operator delete(*((void **)this + 323));
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 2416));
  uint64_t v2 = (const void *)*((void *)this + 301);
  if (v2) {
    CFRelease(v2);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 2344));
  uint64_t v3 = (const void *)*((void *)this + 292);
  if (v3) {
    CFRelease(v3);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 2272));
  int v4 = (const void *)*((void *)this + 283);
  if (v4) {
    CFRelease(v4);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 2200));
  CFNumberRef v5 = (const void *)*((void *)this + 274);
  if (v5) {
    CFRelease(v5);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 2128));
  __int16 v6 = (const void *)*((void *)this + 265);
  if (v6) {
    CFRelease(v6);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 2056));
  unsigned int v7 = (const void *)*((void *)this + 256);
  if (v7) {
    CFRelease(v7);
  }
  std::mutex::~mutex((std::mutex *)this + 31);
  int v8 = (const void *)*((void *)this + 247);
  if (v8) {
    CFRelease(v8);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 1912));
  int v9 = (const void *)*((void *)this + 238);
  if (v9) {
    CFRelease(v9);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 1840));
  int v10 = (const void *)*((void *)this + 229);
  if (v10) {
    CFRelease(v10);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 1768));
  int v11 = (const void *)*((void *)this + 220);
  if (v11) {
    CFRelease(v11);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 1696));
  int v12 = (const void *)*((void *)this + 211);
  if (v12) {
    CFRelease(v12);
  }
  int v13 = (void *)*((void *)this + 208);
  if (v13)
  {
    *((void *)this + 209) = v13;
    operator delete(v13);
  }
  std::mutex::~mutex((std::mutex *)this + 25);
  int v14 = (const void *)*((void *)this + 199);
  if (v14) {
    CFRelease(v14);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 1504));
  int v15 = (const void *)*((void *)this + 187);
  if (v15) {
    CFRelease(v15);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 1432));
  uint64_t v16 = (const void *)*((void *)this + 178);
  if (v16) {
    CFRelease(v16);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 1352));
  uint64_t v17 = (const void *)*((void *)this + 168);
  if (v17) {
    CFRelease(v17);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 1272));
  char v18 = (const void *)*((void *)this + 158);
  if (v18) {
    CFRelease(v18);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 1192));
  uint64_t v19 = (const void *)*((void *)this + 148);
  if (v19) {
    CFRelease(v19);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 1120));
  float v20 = (const void *)*((void *)this + 139);
  if (v20) {
    CFRelease(v20);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 1048));
  uint64_t v21 = (const void *)*((void *)this + 130);
  if (v21) {
    CFRelease(v21);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 976));
  long long v22 = (const void *)*((void *)this + 121);
  if (v22) {
    CFRelease(v22);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 904));
  OSStatus v23 = (const void *)*((void *)this + 112);
  if (v23) {
    CFRelease(v23);
  }
  std::mutex::~mutex((std::mutex *)this + 13);
  uint64_t v24 = (const void *)*((void *)this + 103);
  if (v24) {
    CFRelease(v24);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 760));
  float v25 = (const void *)*((void *)this + 94);
  if (v25) {
    CFRelease(v25);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 688));
  OSStatus v26 = (const void *)*((void *)this + 85);
  if (v26) {
    CFRelease(v26);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 616));
  uint64_t v27 = (const void *)*((void *)this + 76);
  if (v27) {
    CFRelease(v27);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 544));
  uint64_t v28 = (const void *)*((void *)this + 67);
  if (v28) {
    CFRelease(v28);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 472));
  unint64_t v29 = (const void *)*((void *)this + 58);
  if (v29) {
    CFRelease(v29);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 400));
  unint64_t v30 = (const void *)*((void *)this + 49);
  if (v30) {
    CFRelease(v30);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 328));
  unint64_t v31 = (const void *)*((void *)this + 40);
  if (v31) {
    CFRelease(v31);
  }
  std::mutex::~mutex((std::mutex *)this + 4);
  unint64_t v32 = (const void *)*((void *)this + 31);
  if (v32) {
    CFRelease(v32);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 184));
  unint64_t v33 = (const void *)*((void *)this + 22);
  if (v33) {
    CFRelease(v33);
  }
  *(void *)this = &unk_1F14BE008;
  std::__tree<std::__value_type<unsigned int,std::unique_ptr<AUSM::PropertyDescriptor>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::unique_ptr<AUSM::PropertyDescriptor>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::unique_ptr<AUSM::PropertyDescriptor>>>>::destroy(*((void **)this + 6));
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

void ***std::unique_ptr<TorqueEngine>::reset[abi:ne180100](void ***result, void **a2)
{
  uint64_t v2 = *result;
  *CFIndex result = a2;
  if (v2)
  {
    free(v2[1975]);
    free(v2[1845]);
    free(v2[1715]);
    free(v2[1585]);
    free(v2[1455]);
    free(v2[1325]);
    free(v2[1195]);
    free(v2[1065]);
    STFT<float>::~STFT((uint64_t)(v2 + 5));
    JUMPOUT(0x1C185D370);
  }
  return result;
}

void IR::SharedIRBuses::~SharedIRBuses(IR::SharedIRBuses *this)
{
  __int16 v6 = (void **)((char *)this + 216);
  std::vector<std::shared_ptr<vp::vx::io::Node_Terminal>>::__destroy_vector::operator()[abi:ne180100](&v6);
  __int16 v6 = (void **)((char *)this + 192);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  __int16 v6 = (void **)((char *)this + 168);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 20);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (void *)*((void *)this + 15);
  if (v3)
  {
    *((void *)this + 16) = v3;
    operator delete(v3);
  }
  __int16 v6 = (void **)((char *)this + 96);
  std::vector<std::shared_ptr<vp::vx::io::Node_Terminal>>::__destroy_vector::operator()[abi:ne180100](&v6);
  int v4 = (void *)*((void *)this + 9);
  if (v4)
  {
    *((void *)this + 10) = v4;
    operator delete(v4);
  }
  __int16 v6 = (void **)((char *)this + 48);
  std::vector<std::shared_ptr<vp::vx::io::Node_Terminal>>::__destroy_vector::operator()[abi:ne180100](&v6);
  CFNumberRef v5 = (void *)*((void *)this + 3);
  if (v5)
  {
    *((void *)this + 4) = v5;
    operator delete(v5);
  }
  __int16 v6 = (void **)this;
  std::vector<std::shared_ptr<vp::vx::io::Node_Terminal>>::__destroy_vector::operator()[abi:ne180100](&v6);
}

uint64_t *std::unique_ptr<AUSM::Metadata>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *CFIndex result = a2;
  if (v2)
  {
    uint64_t v3 = *(void **)(v2 + 248);
    if (v3)
    {
      *(void *)(v2 + 256) = v3;
      operator delete(v3);
    }
    if (*(char *)(v2 + 223) < 0) {
      operator delete(*(void **)(v2 + 200));
    }
    int v4 = *(void **)(v2 + 176);
    if (v4)
    {
      *(void *)(v2 + 184) = v4;
      operator delete(v4);
    }
    if (*(char *)(v2 + 151) < 0) {
      operator delete(*(void **)(v2 + 128));
    }
    if (*(char *)(v2 + 127) < 0) {
      operator delete(*(void **)(v2 + 104));
    }
    CFNumberRef v5 = *(void **)(v2 + 88);
    *(void *)(v2 + 88) = 0;
    if (v5) {
      std::default_delete<AUSM::InputABLBuffer>::operator()[abi:ne180100](v5);
    }
    __int16 v6 = *(void **)(v2 + 56);
    if (v6)
    {
      *(void *)(v2 + 64) = v6;
      operator delete(v6);
    }
    int v8 = (void **)(v2 + 32);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
    std::unique_ptr<APAC::Metadata>::reset[abi:ne180100]((uint64_t *)(v2 + 24), 0);
    std::unique_ptr<AUSM::Metadata::PImpl>::reset[abi:ne180100]((uint64_t *)(v2 + 16), 0);
    uint64_t v7 = *(void *)(v2 + 8);
    *(void *)(v2 + 8) = 0;
    if (v7) {
      MEMORY[0x1C185D370](v7, 0xC400A2AC0F1);
    }
    JUMPOUT(0x1C185D370);
  }
  return result;
}

uint64_t std::try_lock[abi:ne180100]<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,std::shared_mutex>(uint64_t a1, std::__shared_mutex_base *a2)
{
  uint64_t v6 = a1;
  int v3 = caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::try_lock(a1);
  char v7 = v3;
  if (v3)
  {
    if (std::__shared_mutex_base::try_lock(a2))
    {
      uint64_t v6 = 0;
      char v7 = 0;
      uint64_t v4 = 0xFFFFFFFFLL;
    }
    else
    {
      uint64_t v4 = 1;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v6);
  return v4;
}

void sub_1BB3ECFE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::try_lock[abi:ne180100]<std::shared_mutex,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>(std::__shared_mutex_base *a1, uint64_t a2)
{
  uint64_t v6 = a1;
  BOOL v3 = std::__shared_mutex_base::try_lock(a1);
  BOOL v7 = v3;
  if (v3)
  {
    if (caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::try_lock(a2))
    {
      uint64_t v6 = 0;
      BOOL v7 = 0;
      uint64_t v4 = 0xFFFFFFFFLL;
    }
    else
    {
      uint64_t v4 = 1;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v6);
  return v4;
}

void sub_1BB3ED068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void AUSpatialMixerV2::AUSpatialMixerV2(AUSpatialMixerV2 *this, OpaqueAudioComponentInstance *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  BOOL v3 = ausdk::AUBase::AUBase(this, a2, 32, 1);
  uint64_t v4 = (uint64_t)v3 + 528;
  *(void *)BOOL v3 = &unk_1F14ACED8;
  *((void *)v3 + 66) = &unk_1F14AD150;
  *((unsigned char *)v3 + 536) = 0;
  *((unsigned char *)v3 + 540) = 0;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((_DWORD *)v3 + 142) = 0;
  *((void *)v3 + 69) = &unk_1F14C8550;
  *((void *)v3 + 72) = 0;
  CADeprecated::CAMutex::CAMutex((ausdk::AUBase *)((char *)v3 + 584), "AUScopeDynamic NRT lock");
  *((void *)this + 69) = &unk_1F14C7588;
  *((void *)this + 84) = this;
  *((unsigned char *)this + 680) = 0;
  *((void *)this + 86) = 0x3CA3D70A3BA3D70ALL;
  *((void *)this + 87) = 0x3FD99999A0000000;
  *((void *)this + 88) = 0x3FD3333340000000;
  __asm { FMOV            V8.2S, #1.0 }
  *((void *)this + 89) = _D8;
  *((void *)this + 99) = 0;
  *(_OWORD *)((char *)this + 744) = 0u;
  *(_OWORD *)((char *)this + 760) = 0u;
  *(_OWORD *)((char *)this + 776) = 0u;
  for (uint64_t i = 800; i != 1952; i += 72)
  {
    int v11 = (char *)this + i;
    *((void *)v11 + 6) = 0;
    *((_OWORD *)v11 + 1) = 0uLL;
    *((_OWORD *)v11 + 2) = 0uLL;
    *(_OWORD *)int v11 = 0uLL;
  }
  *((_DWORD *)this + 180) = 1065353216;
  *((unsigned char *)this + 1952) = 1;
  *((void *)this + 245) = 0x3FD999999999999ALL;
  caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((AUSpatialMixerV2 *)((char *)this + 1968));
  *((void *)this + 249) = 0;
  *(_OWORD *)((char *)this + 1976) = 0u;
  *((unsigned char *)this + 2000) = 1;
  *((void *)this + 251) = 0;
  *((_DWORD *)this + 504) = -1;
  *(void *)((char *)this + 2020) = 0;
  *(_OWORD *)((char *)this + 2028) = 0u;
  int v12 = (AUSM::Messenger *)caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((AUSpatialMixerV2 *)((char *)this + 2044));
  *((void *)this + 258) = 0;
  *((_OWORD *)this + 128) = 0u;
  *((unsigned char *)this + 2072) = 1;
  *((void *)this + 260) = 0;
  *((void *)this + 261) = 0xFFFFFFFFLL;
  *((unsigned char *)this + 2096) = 0;
  AUSM::Messenger::instance(v12);
  AUSM::Messenger::get((AUSM::Messenger *)v15);
  *(_DWORD *)((char *)this + 2247) = 0;
  *(_OWORD *)((char *)this + 2216) = 0u;
  *(_OWORD *)((char *)this + 2232) = 0u;
  *(_OWORD *)((char *)this + 2184) = 0u;
  *(_OWORD *)((char *)this + 2200) = 0u;
  *(_OWORD *)((char *)this + 2152) = 0u;
  *(_OWORD *)((char *)this + 2168) = 0u;
  *(_OWORD *)((char *)this + 2120) = 0u;
  *(_OWORD *)((char *)this + 2136) = 0u;
  *(_OWORD *)((char *)this + 2104) = 0u;
  caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((AUSpatialMixerV2 *)((char *)this + 2252));
  int v13 = (std::__shared_weak_count *)v15[1];
  *((void *)this + 282) = v15[0];
  *((void *)this + 283) = v13;
  if (v13)
  {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    *(_OWORD *)((char *)this + 2333) = 0u;
    *((_OWORD *)this + 145) = 0u;
    *((_OWORD *)this + 144) = 0u;
    *((_OWORD *)this + 143) = 0u;
    *((_OWORD *)this + 142) = 0u;
    *((unsigned char *)this + 2349) = 1;
    *((void *)this + 295) = 0;
    *((void *)this + 294) = 0;
    *((void *)this + 296) = 0x10000000000;
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  else
  {
    *((_OWORD *)this + 145) = 0u;
    *((_OWORD *)this + 144) = 0u;
    *((_OWORD *)this + 143) = 0u;
    *((_OWORD *)this + 142) = 0u;
    *(_OWORD *)((char *)this + 2333) = 0u;
    *((unsigned char *)this + 2349) = 1;
    *((void *)this + 295) = 0;
    *((void *)this + 294) = 0;
    *((void *)this + 296) = 0x10000000000;
  }
  *((void *)this + 299) = 0;
  *(_OWORD *)((char *)this + 2376) = 0u;
  caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((AUSpatialMixerV2 *)((char *)this + 2400));
  *((void *)this + 303) = 0;
  *(_OWORD *)((char *)this + 2408) = 0u;
  *((unsigned char *)this + 2432) = 1;
  *((void *)this + 305) = 0;
  *((_DWORD *)this + 612) = -1;
  *((_DWORD *)this + 619) = 0;
  *(void *)((char *)this + 2452) = 0;
  *(_OWORD *)((char *)this + 2460) = 0u;
  *((unsigned char *)this + 2480) = 1;
  *((void *)this + 311) = 0;
  *((_DWORD *)this + 624) = -1;
  *((_DWORD *)this + 631) = 0;
  *(void *)((char *)this + 2500) = 0;
  *(_OWORD *)((char *)this + 2508) = 0u;
  *((unsigned char *)this + 2528) = 1;
  *((void *)this + 317) = 0;
  *((void *)this + 318) = 0xFFFFFFFFLL;
  *((_WORD *)this + 1276) = 0;
  *((void *)this + 322) = 0;
  *((_OWORD *)this + 160) = 0u;
  *((unsigned char *)this + 2584) = 1;
  *((void *)this + 324) = 0;
  *((void *)this + 325) = 0xFFFFFFFFLL;
  *((unsigned char *)this + 2608) = 1;
  *(_OWORD *)((char *)this + 2616) = 0u;
  *((_WORD *)this + 1316) = 1;
  *(void *)((char *)this + 2636) = 0x8000000080;
  *(_OWORD *)((char *)this + 2648) = 0u;
  *(_OWORD *)((char *)this + 2664) = 0u;
  *(_OWORD *)((char *)this + 2680) = xmmword_1BB87A050;
  *((void *)this + 337) = 1128792064;
  *((_WORD *)this + 1352) = 1;
  *(_OWORD *)((char *)this + 2708) = 0u;
  *(_OWORD *)((char *)this + 2724) = 0u;
  *(_OWORD *)((char *)this + 2740) = 0u;
  *((_DWORD *)this + 689) = 0;
  __x[0] = 0;
  std::vector<char>::vector((std::vector<char> *)this + 115, 8uLL, __x);
  **((_DWORD **)this + 345) = 0;
  *((_OWORD *)this + 174) = 0u;
  *((_OWORD *)this + 175) = 0u;
  *((_OWORD *)this + 176) = 0u;
  *((void *)this + 354) = 0;
  __x[0] = 0;
  std::vector<char>::vector((std::vector<char> *)((char *)this + 2840), 8uLL, __x);
  **((_DWORD **)this + 355) = 0;
  *((_OWORD *)this + 179) = 0u;
  *((_OWORD *)this + 180) = 0u;
  *((_OWORD *)this + 181) = 0u;
  *((void *)this + 364) = 0;
  *((void *)this + 365) = 0x3E80000044FA0000;
  *((void *)this + 366) = 0;
  *((unsigned char *)this + 2936) = 1;
  *(void *)((char *)this + 2940) = 0xFFFFFFFF00000000;
  *(int32x2_t *)((char *)this + 2948) = vdup_n_s32(0x3F3504F3u);
  *(_OWORD *)((char *)this + 2956) = xmmword_1BB87A060;
  *((void *)this + 372) = 0;
  *((_DWORD *)this + 746) = -1;
  *((_OWORD *)this + 190) = 0u;
  *((_DWORD *)this + 752) = 0;
  *((_OWORD *)this + 187) = 0u;
  *(_OWORD *)((char *)this + 3016) = 0u;
  *((void *)this + 379) = (char *)this + 3040;
  *((_DWORD *)this + 770) = 0;
  *((void *)this + 384) = 0;
  *((_OWORD *)this + 191) = 0u;
  caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((AUSpatialMixerV2 *)((char *)this + 3084));
  *((void *)this + 386) = 0;
  *((_DWORD *)this + 774) = 0;
  caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((AUSpatialMixerV2 *)((char *)this + 3100));
  *((void *)this + 388) = 0;
  *((_DWORD *)this + 778) = 0;
  caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((AUSpatialMixerV2 *)((char *)this + 3116));
  std::__shared_mutex_base::__shared_mutex_base((std::__shared_mutex_base *)((char *)this + 3120));
  *((void *)this + 414) = 0;
  *((_DWORD *)this + 830) = 0;
  *((unsigned char *)this + 3304) = 0;
  *(_OWORD *)((char *)this + 3288) = 0u;
  caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((AUSpatialMixerV2 *)((char *)this + 3324));
  *((void *)this + 418) = 0;
  *((_OWORD *)this + 208) = 0u;
  caulk::make_string((caulk *)"%p", (uint64_t)__x, a2);
  AUSM::GlobalProperties::GlobalProperties((uint64_t)this + 3360, v4, (long long *)__x);
}

void sub_1BB3EF61C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void ***a11, AUSM::SoundStage *a12, AUSM::SoundStage *a13, AUSM::IRManager *a14, uint64_t a15, const void **a16, AUSM::ABLBuffer *a17, AUSM::ABLBuffer *a18, id *a19, void **a20,uint64_t a21,IR::SharedIRBuses *a22,void **a23,void ***a24,uint64_t a25,uint64_t *a26,uint64_t a27,uint64_t a28,void **a29,uint64_t *a30,uint64_t *a31,IR::IRProcessor **a32,ElementVector ***a33,void **a34,void **a35,uint64_t a36,IR::IRDataAttributes *a37,AUSM::GlobalProperties *a38,_Unwind_Exception *exception_object,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,CFTypeRef cf,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  AUSpatialMixerV2::AlignmentDelay::~AlignmentDelay(a34);
  long long v57 = (IR::IRProcessor *)(v52 + 11896);
  uint64_t v58 = -3072;
  while (1)
  {
    if (*((unsigned char *)v57 + 184)) {
      IR::IRProcessor::~IRProcessor(v57);
    }
    long long v57 = (IR::IRProcessor *)((char *)v57 - 192);
    v58 += 192;
    if (!v58)
    {
      std::unique_ptr<ParametricFilters>::reset[abi:ne180100]((void ***)(v52 + 8992), 0);
      std::unique_ptr<ParametricFilters>::reset[abi:ne180100](a11, 0);
      MEMORY[0x1C185C3B0](a28);
      std::unique_ptr<AUSpatialMixerV2DynamicXTCFilter>::reset[abi:ne180100]((uint64_t *)(v52 + 8936), 0);
      AUSM::SoundStage::~SoundStage(a12);
      AUSM::SoundStage::~SoundStage(a13);
      AUSM::IRManager::~IRManager(a14);
      std::unique_ptr<AUSM::RoomCongruence::Processor>::reset[abi:ne180100](a26, 0);
      AUSM::TuningManager::~TuningManager(a35);
      AUSM::GlobalProperties::~GlobalProperties(a38);
      *(void *)(v56 - 160) = v52 + 3328;
      std::vector<std::unique_ptr<AUSM::AUFXWrapper>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v56 - 160));
      long long v59 = *(std::__shared_weak_count **)(v52 + 3296);
      if (v59) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v59);
      }
      std::shared_mutex::~shared_mutex[abi:ne180100](a15);
      std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(void **)(v52 + 3040));
      applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v52 + 3024));
      applesauce::CF::DictionaryRef::~DictionaryRef(a16);
      unsigned int v60 = *(std::__shared_weak_count **)(v52 + 3000);
      if (v60) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v60);
      }
      std::unique_ptr<TorqueEngine>::reset[abi:ne180100](a24, 0);
      AUSM::ABLBuffer::~ABLBuffer(a17);
      AUSM::ABLBuffer::~ABLBuffer(a18);
      std::unique_ptr<AUSM::SharedBuffers>::reset[abi:ne180100](a31, 0);
      std::unique_ptr<AUSM::SharedBuffers>::reset[abi:ne180100]((uint64_t *)(v52 + 2720), 0);
      std::unique_ptr<AUSM::SharedBuffers>::reset[abi:ne180100]((uint64_t *)(v52 + 2712), 0);
      uint64_t v61 = *(void *)(v52 + 2672);
      *(void *)(v52 + 2672) = 0;
      if (v61) {
        (*(void (**)(uint64_t))(*(void *)v61 + 8))(v61);
      }
      uint64_t v62 = (void **)(v52 + 2560);
      id v63 = *a29;
      if (*a29)
      {
        *(void *)(v52 + 2656) = v63;
        operator delete(v63);
      }
      applesauce::dispatch::v1::source::~source((id *)(v52 + 2624));
      applesauce::dispatch::v1::source::~source(a19);
      char v64 = *v62;
      if (*v62)
      {
        *(void *)(v52 + 2568) = v64;
        operator delete(v64);
      }
      int v65 = *(void **)(v52 + 2504);
      if (v65)
      {
        *(void *)(v52 + 2512) = v65;
        operator delete(v65);
      }
      uint64_t v66 = *(void **)(v52 + 2456);
      if (v66)
      {
        *(void *)(v52 + 2464) = v66;
        operator delete(v66);
      }
      std::string::size_type v67 = *a20;
      if (*a20)
      {
        *(void *)(v52 + 2416) = v67;
        operator delete(v67);
      }
      *(void *)(v56 - 160) = a21;
      std::vector<IR::FixedIntegerDelay>::__destroy_vector::operator()[abi:ne180100]((void ***)(v56 - 160));
      IR::SharedIRBuses::~SharedIRBuses(a22);
      uint64_t v68 = *(void **)(v52 + 2048);
      if (v68)
      {
        *(void *)(v52 + 2056) = v68;
        operator delete(v68);
      }
      std::unique_ptr<IR::IRProcessor>::reset[abi:ne180100](a32, 0);
      std::string::size_type v69 = *a23;
      if (*a23)
      {
        *(void *)(v52 + 1984) = v69;
        operator delete(v69);
      }
      uint64_t v70 = 1152;
      while (1)
      {
        CFIndex v71 = *(void **)(v52 + v70 + 728);
        if (v71)
        {
          *(void *)(v52 + v70 + 736) = v71;
          operator delete(v71);
        }
        v70 -= 72;
        if (!v70)
        {
          AUScopeDynamic::~AUScopeDynamic(a33);
          std::unique_ptr<AUSM::Metadata>::reset[abi:ne180100](a30, 0);
          ausdk::AUBase::~AUBase((ausdk::AUBase *)v52);
          _Unwind_Resume(a1);
        }
      }
    }
  }
}

void std::vector<AudioUnitParameterEvent>::reserve(void **a1, unint64_t a2)
{
  if (a2 > ((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5)
  {
    int64_t v3 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(a2);
    CFNumberRef v5 = &v4[v3 & 0xFFFFFFFFFFFFFFE0];
    BOOL v7 = &v4[32 * v6];
    int v9 = (char *)*a1;
    int v8 = (char *)a1[1];
    int v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        long long v11 = *((_OWORD *)v8 - 1);
        *((_OWORD *)v10 - 2) = *((_OWORD *)v8 - 2);
        *((_OWORD *)v10 - 1) = v11;
        v10 -= 32;
        v8 -= 32;
      }
      while (v8 != v9);
      int v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void AUSpatialMixerV2::AlignmentDelay::~AlignmentDelay(void **this)
{
  uint64_t v2 = this + 3;
  std::vector<IR::FixedIntegerDelay>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this;
  std::vector<IR::FixedIntegerDelay>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void AUSM::TuningManager::~TuningManager(void **this)
{
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void std::shared_mutex::~shared_mutex[abi:ne180100](uint64_t a1)
{
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 112));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 64));

  std::mutex::~mutex((std::mutex *)a1);
}

void applesauce::dispatch::v1::source::~source(id *this)
{
  id v2 = *this;
  *this = 0;
}

uint64_t AUSpatialMixerV2::SetAPACProperty(AUSpatialMixerV2 *this, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, uint64_t a6)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  if (a3 || !*((unsigned char *)this + 6032)) {
    goto LABEL_27;
  }
  unint64_t v12 = *((void *)this + 756);
  if (!v12) {
    goto LABEL_20;
  }
  int v13 = (void *)((char *)this + 6040);
  uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
  v14.i16[0] = vaddlv_u8(v14);
  unint64_t v15 = v14.u32[0];
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v16 = a2;
    if (v12 <= a2) {
      unint64_t v16 = a2 % v12;
    }
  }
  else
  {
    unint64_t v16 = (v12 - 1) & a2;
  }
  uint64_t v17 = *(uint64_t ***)(*v13 + 8 * v16);
  if (!v17 || (char v18 = *v17) == 0)
  {
LABEL_20:
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    uint64_t v21 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      long long v22 = (void *)((char *)this + 6008);
      if (*((char *)this + 6031) < 0) {
        long long v22 = (void *)*v22;
      }
      *(_DWORD *)AudioChannelLayout buf = 136315650;
      OSStatus v45 = v22;
      __int16 v46 = 2080;
      uint64_t v47 = "UpdateReservedGlobalAPACPropertyList";
      __int16 v48 = 1024;
      int v49 = a2;
      _os_log_impl(&dword_1BB0CE000, v21, OS_LOG_TYPE_DEFAULT, "[%s|%s] property %u is not listed as reserved, hence is not going to be intercepted.", buf, 0x1Cu);
    }

    goto LABEL_27;
  }
  unint64_t v19 = v12 - 1;
  while (1)
  {
    unint64_t v20 = v18[1];
    if (v20 == a2) {
      break;
    }
    if (v14.u32[0] > 1uLL)
    {
      if (v20 >= v12) {
        v20 %= v12;
      }
    }
    else
    {
      v20 &= v19;
    }
    if (v20 != v16) {
      goto LABEL_20;
    }
LABEL_19:
    char v18 = (uint64_t *)*v18;
    if (!v18) {
      goto LABEL_20;
    }
  }
  if (*((_DWORD *)v18 + 4) != a2) {
    goto LABEL_19;
  }
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v25 = a2;
    if (v12 <= a2) {
      unint64_t v25 = a2 % v12;
    }
  }
  else
  {
    unint64_t v25 = (v12 - 1) & a2;
  }
  OSStatus v26 = *(void ***)(*v13 + 8 * v25);
  if (v26)
  {
    uint64_t v27 = *v26;
    if (*v26)
    {
      do
      {
        unint64_t v28 = v27[1];
        if (v28 == a2)
        {
          if (*((_DWORD *)v27 + 4) == a2) {
            goto LABEL_70;
          }
        }
        else
        {
          if (v14.u32[0] > 1uLL)
          {
            if (v28 >= v12) {
              v28 %= v12;
            }
          }
          else
          {
            v28 &= v19;
          }
          if (v28 != v25) {
            break;
          }
        }
        uint64_t v27 = (void *)*v27;
      }
      while (v27);
    }
  }
  int v43 = (char *)this + 6040;
  unint64_t v29 = v25;
  unint64_t v30 = operator new(0x18uLL);
  unint64_t v31 = v29;
  uint64_t v27 = v30;
  unint64_t v32 = (uint64_t *)v43;
  void *v27 = 0;
  v27[1] = a2;
  *((_DWORD *)v27 + 4) = a2;
  float v33 = (float)(unint64_t)(*((void *)this + 758) + 1);
  *((unsigned char *)v27 + 20) = 0;
  float v34 = *((float *)this + 1518);
  if ((float)(v34 * (float)v12) < v33)
  {
    BOOL v36 = v12 < 3 || v15 > 1;
    unint64_t v37 = v36 | (2 * v12);
    unint64_t v38 = vcvtps_u32_f32(v33 / v34);
    if (v37 <= v38) {
      size_t v39 = v38;
    }
    else {
      size_t v39 = v37;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>>>::__rehash<true>((uint64_t)v43, v39);
    unint64_t v12 = *((void *)this + 756);
    unint64_t v32 = (uint64_t *)v43;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v12 <= a2) {
        unint64_t v31 = a2 % v12;
      }
      else {
        unint64_t v31 = a2;
      }
    }
    else
    {
      unint64_t v31 = (v12 - 1) & a2;
    }
  }
  uint64_t v40 = *v32;
  unint64_t v41 = *(void **)(*v32 + 8 * v31);
  if (v41)
  {
    void *v27 = *v41;
    goto LABEL_68;
  }
  void *v27 = *((void *)this + 757);
  *((void *)this + 757) = v27;
  *(void *)(v40 + 8 * v31) = (char *)this + 6056;
  if (*v27)
  {
    unint64_t v42 = *(void *)(*v27 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v42 >= v12) {
        v42 %= v12;
      }
    }
    else
    {
      v42 &= v12 - 1;
    }
    unint64_t v41 = (void *)(*v32 + 8 * v42);
LABEL_68:
    void *v41 = v27;
  }
  ++*((void *)this + 758);
LABEL_70:
  *((unsigned char *)v27 + 20) = 1;
LABEL_27:
  OSStatus v23 = *(uint64_t (**)(AUSpatialMixerV2 *, uint64_t, uint64_t, uint64_t, const void *, uint64_t))(*(void *)this + 96);

  return v23(this, a2, a3, a4, a5, a6);
}

void sub_1BB3F0508(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void LPFilterBank::~LPFilterBank(LPFilterBank *this)
{
  LPFilterBank::~LPFilterBank(this);

  JUMPOUT(0x1C185D370);
}

{
  unsigned char *v2;
  void *v3;
  unsigned char *v4;
  unsigned char *v5;
  unsigned char *v6;
  unsigned char *v7;
  unsigned char *v8;
  std::__shared_weak_count *v9;

  *(void *)this = &unk_1F14AD3C8;
  int64_t v3 = (void *)((char *)this + 64);
  id v2 = (unsigned char *)*((void *)this + 8);
  if (v2)
  {
    uint64_t v4 = (unsigned char *)*((void *)this + 9);
    if (v4 != v2) {
      *((void *)this + 9) = &v4[(v2 - v4 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v2);
    ausdk::AUBase *v3 = 0;
    v3[1] = 0;
  }
  CFNumberRef v5 = (unsigned char *)*((void *)this + 6);
  if (v5)
  {
    uint64_t v6 = (unsigned char *)*((void *)this + 7);
    if (v6 != v5) {
      *((void *)this + 7) = &v6[(v5 - v6 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v5);
    *((void *)this + 6) = 0;
    *((void *)this + 7) = 0;
  }
  BOOL v7 = (unsigned char *)*((void *)this + 4);
  if (v7)
  {
    int v8 = (unsigned char *)*((void *)this + 5);
    if (v8 != v7) {
      *((void *)this + 5) = &v8[(v7 - v8 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v7);
    *((void *)this + 4) = 0;
    *((void *)this + 5) = 0;
  }
  int v9 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

uint64_t LPFilterBank::Initialize(LPFilterBank *this, int a2, int a3, unsigned int a4, int a5, int a6)
{
  if (a4 == 64 && a5 == 32 && a6 == 3)
  {
    int v9 = &h_64_32_3;
  }
  else if (a4 == 128 && a5 == 64 && a6 == 3)
  {
    int v9 = &h_128_64_3;
  }
  else if (a4 == 256 && a5 == 128 && a6 == 3)
  {
    int v9 = &h_256_128_3;
  }
  else if (a4 == 512 && a5 == 256 && a6 == 3)
  {
    int v9 = &h_512_256_3;
  }
  else if (a4 == 1024 && a5 == 512 && a6 == 3)
  {
    int v9 = &h_1024_512_3;
  }
  else if (a4 == 64 && a5 == 40 && a6 == 4)
  {
    int v9 = &h_64_40_4;
  }
  else if (a4 == 128 && a5 == 80 && a6 == 4)
  {
    int v9 = &h_128_80_4;
  }
  else if (a4 == 256 && a5 == 160 && a6 == 4)
  {
    int v9 = &h_256_160_4;
  }
  else if (a4 == 512 && a5 == 320 && a6 == 4)
  {
    int v9 = &h_512_320_4;
  }
  else if (a4 == 1024 && a5 == 640 && a6 == 4)
  {
    int v9 = &h_1024_640_4;
  }
  else
  {
    if (a4 != 480 || a5 != 240 || a6 != 1)
    {
      *((void *)this + 3) = 0;
      return 0xFFFFFFFFLL;
    }
    int v9 = &h_480_240_1;
  }
  *((void *)this + 3) = v9;
  *((_DWORD *)this + 21) = a4;
  *((_DWORD *)this + 22) = a5;
  *((_DWORD *)this + 23) = a6;
  if (MultiRadixRealFFT::Initialize((LPFilterBank *)((char *)this + 8), a4)) {
    return 4294967294;
  }
  unint64_t v11 = (*((_DWORD *)this + 23) * *((_DWORD *)this + 21));
  std::valarray<float>::resize((uint64_t)this + 32, (v11 * a2), 0.0);
  std::valarray<float>::resize((uint64_t)this + 48, (v11 * a3), 0.0);
  std::valarray<float>::resize((uint64_t)this + 64, v11, 0.0);
  *((float *)this + 24) = 1.0 / (float)*((unsigned int *)this + 21);
  unint64_t v12 = (void *)*((void *)this + 4);
  uint64_t v13 = *((void *)this + 5) - (void)v12;
  if (v13 >= 1) {
    bzero(v12, 4 * (((unint64_t)v13 >> 2) - ((unint64_t)v13 > 3)) + 4);
  }
  uint8x8_t v14 = (void *)*((void *)this + 6);
  uint64_t v15 = *((void *)this + 7) - (void)v14;
  if (v15 >= 1) {
    bzero(v14, 4 * (((unint64_t)v15 >> 2) - ((unint64_t)v15 > 3)) + 4);
  }
  return 0;
}

void std::valarray<float>::resize(uint64_t a1, unint64_t a2, float a3)
{
  uint64_t v6 = *(unsigned char **)a1;
  if (v6)
  {
    BOOL v7 = *(unsigned char **)(a1 + 8);
    if (v7 != v6) {
      *(void *)(a1 + 8) = &v7[(v6 - v7 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v6);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
  }
  if (a2)
  {
    if (a2 >> 62) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int v8 = (float *)operator new(4 * a2);
    *(void *)a1 = v8;
    do
    {
      *v8++ = a3;
      --a2;
    }
    while (a2);
    *(void *)(a1 + 8) = v8;
  }
}

void LPFilterBank::Analysis(LPFilterBank *this, int a2, const float *a3, DSPSplitComplex *a4)
{
  vDSP_Length v7 = (*((_DWORD *)this + 23) * *((_DWORD *)this + 21));
  int v8 = (char *)(*((void *)this + 4) + 4 * (v7 * a2));
  memmove(v8, &v8[4 * *((unsigned int *)this + 22)], 4 * (v7 - *((_DWORD *)this + 22)));
  memcpy(&v8[4 * (v7 - *((_DWORD *)this + 22))], a3, 4 * *((unsigned int *)this + 22));
  vDSP_vmul((const float *)v8, 1, *((const float **)this + 3), 1, *((float **)this + 8), 1, v7);
  if (*((int *)this + 23) >= 2)
  {
    int v9 = 1;
    do
      vDSP_vadd(*((const float **)this + 8), 1, (const float *)(*((void *)this + 8) + 4 * (*((_DWORD *)this + 21) * v9++)), 1, *((float **)this + 8), 1, *((unsigned int *)this + 21));
    while (v9 < *((_DWORD *)this + 23));
  }
  vDSP_ctoz(*((const DSPComplex **)this + 8), 2, a4, 1, (unint64_t)*((unsigned int *)this + 21) >> 1);
  MultiRadixRealFFT::RealInPlaceTransform((LPFilterBank *)((char *)this + 8), a4, 1, v10);
  vDSP_vsmul(a4->realp, 1, (const float *)this + 24, a4->realp, 1, (unint64_t)*((unsigned int *)this + 21) >> 1);
  imagp = a4->imagp;
  vDSP_Length v12 = (unint64_t)*((unsigned int *)this + 21) >> 1;

  vDSP_vsmul(imagp, 1, (const float *)this + 24, imagp, 1, v12);
}

void LPFilterBank::Synthesis(LPFilterBank *this, int a2, const DSPSplitComplex *a3, float *a4)
{
  int v7 = *((_DWORD *)this + 21);
  int v8 = *((_DWORD *)this + 23);
  uint64_t v9 = *((void *)this + 6);
  MultiRadixRealFFT::RealOutOfPlaceInverseTransform((const vDSP_DFT_SetupStruct ***)this + 1, a3, *((DSPComplex **)this + 8));
  if (*((int *)this + 23) >= 2)
  {
    int v10 = 1;
    do
      memcpy((void *)(*((void *)this + 8) + 4 * (*((_DWORD *)this + 21) * v10++)), *((const void **)this + 8), 4 * *((unsigned int *)this + 21));
    while (v10 < *((_DWORD *)this + 23));
  }
  int v11 = v8 * v7;
  vDSP_Length v12 = (float *)(v9 + 4 * (v11 * a2));
  vDSP_vma(*((const float **)this + 8), 1, *((const float **)this + 3), 1, v12, 1, a4, 1, *((unsigned int *)this + 22));
  vDSP_vma((const float *)(*((void *)this + 8) + 4 * *((unsigned int *)this + 22)), 1, (const float *)(*((void *)this + 3) + 4 * *((unsigned int *)this + 22)), 1, &v12[*((unsigned int *)this + 22)], 1, v12, 1, (v11 - *((_DWORD *)this + 22)));
  vDSP_Length v13 = *((unsigned int *)this + 22);

  vDSP_vclr(&v12[(v11 - v13)], 1, v13);
}

uint64_t GetAcousticID(void)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&GetAcousticID(void)::sOnceFlag, memory_order_acquire) != -1)
  {
    int64_t v3 = &v1;
    id v2 = &v3;
    std::__call_once(&GetAcousticID(void)::sOnceFlag, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<GetAcousticID(void)::$_0 &&>>);
  }
  return GetAcousticID(void)::optionalValue;
}

CFIndex std::__call_once_proxy[abi:ne180100]<std::tuple<GetAcousticID(void)::$_0 &&>>()
{
  CFIndex result = CFPreferencesGetAppIntegerValue(@"acoustic_id", @"com.apple.coreaudio", 0);
  if (result)
  {
    if (!BYTE4(GetAcousticID(void)::optionalValue)) {
      BYTE4(GetAcousticID(void)::optionalValue) = 1;
    }
    LODWORD(GetAcousticID(void)::optionalValue) = result;
  }
  else
  {
    CFIndex result = MGIsQuestionValid();
    if (result)
    {
      CFIndex result = MGGetSInt32Answer();
      LODWORD(GetAcousticID(void)::optionalValue) = result;
      BYTE4(GetAcousticID(void)::optionalValue) = result != 0;
    }
    else if (BYTE4(GetAcousticID(void)::optionalValue))
    {
      BYTE4(GetAcousticID(void)::optionalValue) = 0;
    }
  }
  return result;
}

void GetHWIdentifierString(uint64_t a1, uint64_t __val)
{
  v8[2] = *MEMORY[0x1E4F143B8];
  if ((__val & 0xFF00000000) != 0)
  {
    std::to_string(&__p, __val);
    int64_t v3 = std::string::insert(&__p, 0, "AID", 3uLL);
    std::string::size_type v4 = v3->__r_.__value_.__r.__words[0];
    v8[0] = v3->__r_.__value_.__l.__size_;
    *(void *)((char *)v8 + 7) = *(std::string::size_type *)((char *)&v3->__r_.__value_.__r.__words[1] + 7);
    char v5 = HIBYTE(v3->__r_.__value_.__r.__words[2]);
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    uint64_t v6 = v8[0];
    *(void *)a1 = v4;
    *(void *)(a1 + 8) = v6;
    *(void *)(a1 + 15) = *(void *)((char *)v8 + 7);
    *(unsigned char *)(a1 + 23) = v5;
    *(unsigned char *)(a1 + 24) = 1;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
}

void sub_1BB3F0DCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IR::IRProcessor::setWeightedKernel(IR::IRProcessor *this, const IR::IRCoordinates *a2, float *a3, unsigned int a4)
{
  if (!*((unsigned char *)this + 40)
    || (*(unsigned int (**)(void))(**((void **)this + 3) + 16))(*((void *)this + 3)) != 4)
  {
    return 4294956429;
  }
  ScratchKernels = (void *)IR::FFTFilter::getScratchKernels(*((IR::FFTFilter **)this + 6));
  int v8 = ScratchKernels;
  uint64_t v9 = *((void *)this + 3);
  if (!*(unsigned char *)(v9 + 176) || *(void *)(v9 + 272) == *(void *)(v9 + 264))
  {
    uint64_t v15 = 4294956429;
  }
  else
  {
    uint64_t v10 = *(void *)(v9 + 240);
    if (0xCCCCCCCCCCCCCCCDLL * ((*(void *)(v9 + 248) - v10) >> 3) >= 0xCCCCCCCCCCCCCCCDLL
                                                                      * ((uint64_t)(ScratchKernels[1] - *ScratchKernels) >> 3))
      unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(ScratchKernels[1] - *ScratchKernels) >> 3);
    else {
      unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(v9 + 248) - v10) >> 3);
    }
    IR::IRData::getInterpolatedCoeffs();
    if (v11)
    {
      uint64_t v12 = 0;
      do
      {
        IR::FFTFilterKernel::scale((IR::FFTFilterKernel *)(*v8 + v12), *a3);
        v12 += 40;
      }
      while (40 * v11 != v12);
    }
    if (a4 >= 2)
    {
      uint64_t v13 = 1;
      do
      {
        IR::IRData::getInterpolatedCoeffs();
        if (v11)
        {
          uint64_t v14 = 0;
          do
          {
            IR::FFTFilterKernel::accumulate();
            v14 += 40;
          }
          while (40 * v11 != v14);
        }
        ++v13;
      }
      while (v13 != a4);
    }
    uint64_t v15 = 0;
  }
  IR::FFTFilter::setFilterKernels();
  return v15;
}

uint64_t IR::IRProcessor::initialize(IR::IRProcessor *this, float a2, unsigned int a3, unsigned int a4, int a5, BOOL a6, char a7)
{
  uint64_t v13 = (char *)this + 8;
  char v14 = 1;
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 8);
  IR::IRProcessor::uninitialize(this);
  uint64_t v11 = (*(uint64_t (**)(void, float))(**((void **)this + 3) + 40))(*((void *)this + 3), a2);
  if (!v11)
  {
    *((unsigned char *)this + 176) = a7;
    *((unsigned char *)this + 56) = a5;
    if (a5) {
      operator new();
    }
    operator new();
  }
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v13);
  return v11;
}

void sub_1BB3F1568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t IR::IRProcessor::uninitialize(IR::IRProcessor *this)
{
  int v8 = (char *)this + 8;
  char v9 = 1;
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 8);
  uint64_t v2 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v4 = *((void *)this + 8);
  for (uint64_t i = *((void *)this + 9); i != v4; IR::DelayLine::~DelayLine((IR::DelayLine *)(i - 304)))
    ;
  *((void *)this + 9) = v4;
  uint64_t v6 = (void *)*((void *)this + 11);
  for (uint64_t j = (void *)*((void *)this + 12); j != v6; std::__destroy_at[abi:ne180100]<IR::FixedIntegerDelay,0>(j))
    j -= 7;
  *((void *)this + 12) = v6;
  *((void *)this + 15) = *((void *)this + 14);
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 17);
  *((unsigned char *)this + 40) = 0;
  return std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v8);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<IR::DelayLine>>(unint64_t a1)
{
  if (a1 >= 0xD79435E50D7944) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(304 * a1);
}

uint64_t *std::vector<IR::DelayLine>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = 0;
  OSStatus v26 = result;
  uint64_t v28 = *result;
  uint64_t v29 = result[1];
  uint64_t v3 = a2[1];
  uint64_t v30 = v3;
  while (1)
  {
    uint64_t v4 = v3 + v2;
    uint64_t v5 = v29 + v2;
    if (v29 + v2 == v28) {
      break;
    }
    uint64_t v6 = v5 - 304;
    *(void *)(v4 - 304) = *(void *)(v5 - 304);
    *(_DWORD *)(v4 - 296) = *(_DWORD *)(v5 - 296);
    *(unsigned char *)(v4 - 292) = 1;
    int v7 = (void *)(v4 - 288);
    v7[1] = 0;
    v7[2] = 0;
    *int v7 = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(v4 - 288), *(const void **)(v5 - 288), *(void *)(v5 - 280), (uint64_t)(*(void *)(v5 - 280) - *(void *)(v5 - 288)) >> 2);
    uint64_t v8 = v3 + v2;
    uint64_t v9 = *(void *)(v6 + 40);
    *(void *)(v3 + v2 - 256) = 0;
    uint64_t v10 = (void *)(v3 + v2 - 256);
    *(v10 - 1) = v9;
    v10[1] = 0;
    v10[2] = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v10, *(const void **)(v6 + 48), *(void *)(v6 + 56), (uint64_t)(*(void *)(v6 + 56) - *(void *)(v6 + 48)) >> 2);
    *(void *)(v8 - 232) = 0;
    *(void *)(v8 - 224) = 0;
    uint64_t v11 = (void *)(v3 + v2 - 232);
    v11[2] = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v11, *(const void **)(v6 + 72), *(void *)(v6 + 80), (uint64_t)(*(void *)(v6 + 80) - *(void *)(v6 + 72)) >> 2);
    uint64_t v12 = v3 + v2;
    *(_DWORD *)(v12 - 208) = *(_DWORD *)(v6 + 96);
    *(void *)(v12 - 200) = *(void *)(v6 + 104);
    *(void *)(v12 - 192) = 0;
    *(_OWORD *)(v12 - 184) = *(_OWORD *)(v6 + 120);
    *(void *)(v3 + v2 - 168) = 0;
    *(void *)(v12 - 160) = 0;
    *(void *)(v12 - 152) = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(v3 + v2 - 168), *(const void **)(v6 + 136), *(void *)(v6 + 144), (uint64_t)(*(void *)(v6 + 144) - *(void *)(v6 + 136)) >> 2);
    *(void *)(v12 - 144) = 0;
    *(void *)(v12 - 136) = 0;
    *(void *)(v12 - 128) = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(v3 + v2 - 144), *(const void **)(v6 + 160), *(void *)(v6 + 168), (uint64_t)(*(void *)(v6 + 168) - *(void *)(v6 + 160)) >> 2);
    uint64_t v13 = v3 + v2;
    uint64_t v14 = v3 + v2;
    *(void *)(v14 - 120) = 0;
    *(void *)(v14 - 112) = 0;
    *(void *)(v3 + v2 - 104) = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(v3 + v2 - 120), *(const void **)(v6 + 184), *(void *)(v6 + 192), (uint64_t)(*(void *)(v6 + 192) - *(void *)(v6 + 184)) >> 2);
    *(void *)(v13 - 96) = 0;
    *(void *)(v13 - 88) = 0;
    uint64_t v15 = (void *)(v3 + v2 - 96);
    void v15[2] = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v15, *(const void **)(v6 + 208), *(void *)(v6 + 216), (uint64_t)(*(void *)(v6 + 216) - *(void *)(v6 + 208)) >> 2);
    unint64_t v16 = (void *)(v3 + v2);
    *(v16 - 9) = 0;
    *(v16 - 8) = 0;
    uint64_t v17 = (void *)(v3 + v2 - 72);
    v17[2] = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v17, *(const void **)(v6 + 232), *(void *)(v6 + 240), (uint64_t)(*(void *)(v6 + 240) - *(void *)(v6 + 232)) >> 2);
    *(v16 - 6) = 0;
    *(v16 - 5) = 0;
    v16 -= 6;
    v16[2] = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v16, *(const void **)(v6 + 256), *(void *)(v6 + 264), (uint64_t)(*(void *)(v6 + 264) - *(void *)(v6 + 256)) >> 2);
    uint64_t v18 = v30 + v2;
    *(void *)(v18 - 24) = 0;
    *(void *)(v18 - 16) = 0;
    unint64_t v19 = (void *)(v30 + v2 - 24);
    v19[2] = 0;
    CFIndex result = std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v19, *(const void **)(v6 + 280), *(void *)(v6 + 288), (uint64_t)(*(void *)(v6 + 288) - *(void *)(v6 + 280)) >> 2);
    uint64_t v3 = v30;
    if ((*(_DWORD *)(v4 - 300) - 5) <= 2)
    {
      SincKernelFactorySingleton::instance((SincKernelFactorySingleton *)result);
      CFIndex result = (uint64_t *)SincKernelFactorySingleton::ReferenceSincKernel(v20, v21, v22);
      *(void *)(v12 - 192) = result;
    }
    v2 -= 304;
  }
  a2[1] = v4;
  uint64_t v23 = *v26;
  uint64_t *v26 = v4;
  a2[1] = v23;
  uint64_t v24 = v26[1];
  v26[1] = a2[2];
  a2[2] = v24;
  uint64_t v25 = v26[2];
  v26[2] = a2[3];
  a2[3] = v25;
  *a2 = a2[1];
  return result;
}

void sub_1BB3F1998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, IR::DelayLine *a16)
{
  unint64_t v19 = (IR::DelayLine *)(v17 + v16);
  unint64_t v20 = (void **)(v17 + v16 - 48);
  double v21 = (void **)(v17 + v16 - 72);
  double v22 = (void **)((char *)v19 - 96);
  uint64_t v23 = (void **)((char *)v19 - 120);
  uint64_t v24 = (void **)((char *)v19 - 144);
  BOOL v36 = (void **)((char *)v19 - 288);
  unint64_t v37 = (void **)((char *)v19 - 256);
  uint64_t v25 = (void **)((char *)v19 - 232);
  OSStatus v26 = (void *)*((void *)v19 - 3);
  if (v26)
  {
    *((void *)v19 - 2) = v26;
    operator delete(v26);
  }
  uint64_t v27 = *v20;
  if (*v20)
  {
    *((void *)v19 - 5) = v27;
    operator delete(v27);
  }
  uint64_t v28 = *v21;
  if (*v21)
  {
    *((void *)v19 - 8) = v28;
    operator delete(v28);
  }
  uint64_t v29 = *v22;
  if (*v22)
  {
    *((void *)v19 - 11) = v29;
    operator delete(v29);
  }
  uint64_t v30 = *v23;
  if (*v23)
  {
    *((void *)v19 - 14) = v30;
    operator delete(v30);
  }
  unint64_t v38 = (void **)((char *)v19 - 168);
  unint64_t v31 = *v24;
  if (*v24)
  {
    *((void *)v19 - 17) = v31;
    operator delete(v31);
  }
  unint64_t v32 = *v38;
  if (*v38)
  {
    *((void *)v19 - 20) = v32;
    operator delete(v32);
  }
  float v33 = *v25;
  if (*v25)
  {
    *((void *)v19 - 28) = v33;
    operator delete(v33);
  }
  float v34 = *v37;
  if (*v37)
  {
    *((void *)v19 - 31) = v34;
    operator delete(v34);
  }
  unint64_t v35 = *v36;
  if (*v36)
  {
    *((void *)v19 - 35) = v35;
    operator delete(v35);
  }
  while (v19 != a16)
  {
    IR::DelayLine::~DelayLine(v19);
    unint64_t v19 = (IR::DelayLine *)((char *)v19 + 304);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<IR::DelayLine>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 304;
    IR::DelayLine::~DelayLine((IR::DelayLine *)(i - 304));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t IR::IRProcessor::reset(IR::FFTFilter **this)
{
  int v7 = (char *)(this + 1);
  char v8 = 1;
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)(this + 1));
  if (*((unsigned char *)this + 40))
  {
    IR::FFTFilter::reset(this[6]);
    uint64_t v2 = this[8];
    uint64_t v3 = this[9];
    while (v2 != v3)
    {
      IR::DelayLine::reset(v2);
      uint64_t v2 = (IR::DelayLine *)((char *)v2 + 304);
    }
    uint64_t v4 = this[11];
    uint64_t v5 = this[12];
    while (v4 != v5)
    {
      IR::FixedIntegerDelay::reset(v4);
      uint64_t v4 = (IR::FixedIntegerDelay *)((char *)v4 + 56);
    }
    *((unsigned char *)this + 168) = 1;
  }
  return std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v7);
}

void sub_1BB3F1BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t IR::IRProcessor::getTailLength(IR::IRProcessor *this)
{
  int v2 = (*(uint64_t (**)(void))(**((void **)this + 3) + 72))(*((void *)this + 3));
  int v3 = (*(uint64_t (**)(void))(**((void **)this + 3) + 80))(*((void *)this + 3));
  int v4 = *((_DWORD *)this + 43);
  if (v4 == 1) {
    int v5 = *(_DWORD *)(*((void *)this + 3) + 164);
  }
  else {
    int v5 = 0;
  }
  if (v4) {
    int v6 = v3 + 5;
  }
  else {
    int v6 = v3;
  }
  return (v6 + v2 + v5);
}

uint64_t IR::IRProcessor::setIRCoeffs(IR::IRProcessor *this, const float *const *a2, const float *a3, int a4, uint64_t a5)
{
  if (!*((unsigned char *)this + 40)) {
    return 4294956429;
  }
  if ((*(uint64_t (**)(void))(**((void **)this + 3) + 24))(*((void *)this + 3))) {
    return 4294956433;
  }
  ScratchKernels = (void *)IR::FFTFilter::getScratchKernels(*((IR::FFTFilter **)this + 6));
  if (a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(ScratchKernels[1] - *ScratchKernels) >> 3) <= v12) {
        break;
      }
      IR::FFTFilterKernel::storeCoeffs((IR::FFTFilterKernel *)(*ScratchKernels + 40 * v12), a2[v12], a5, 0);
      int v13 = a3 ? LODWORD(a3[v12]) : 0;
      *(_DWORD *)(*((void *)this + 14) + 4 * v12++) = v13;
    }
    while (v12 != a4);
  }
  IR::FFTFilter::setFilterKernels();
  return 0;
}

uint64_t IR::IRProcessor::processMultipleInputs(IR::IRProcessor *this, const float **a2, float *const *a3, unsigned int a4, unsigned int a5, vDSP_Length a6, float a7, IR::ComplexDataCircBuffer *a8)
{
  __Start[1] = *(float **)MEMORY[0x1E4F143B8];
  float __B = a7;
  if (!*((unsigned char *)this + 40)) {
    return 4294956429;
  }
  uint64_t result = 4294967246;
  if (a4 && a5)
  {
    uint64_t v70 = (char *)this + 8;
    uint64_t v16 = caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::try_lock((uint64_t)this + 8);
    char v71 = v16;
    if ((v16 & 1) == 0)
    {
      size_t v23 = 4 * a6;
      uint64_t v24 = a5;
      do
      {
        uint64_t v25 = *a3++;
        bzero(v25, v23);
        --v24;
      }
      while (v24);
      goto LABEL_60;
    }
    vDSP_Length v67 = a6;
    if (*(_DWORD *)(*((void *)this + 3) + 168) >= a5) {
      unsigned int v17 = a5;
    }
    else {
      unsigned int v17 = *(_DWORD *)(*((void *)this + 3) + 168);
    }
    if (v17 >= a4) {
      unsigned int v18 = a4;
    }
    else {
      unsigned int v18 = v17;
    }
    if (*((unsigned char *)this + 176)) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = v17;
    }
    MEMORY[0x1F4188790](v16);
    if (8 * (unint64_t)v19 >= 0x200) {
      size_t v21 = 512;
    }
    else {
      size_t v21 = 8 * v19;
    }
    uint64_t v68 = (char *)&v63 - v20;
    bzero((char *)&v63 - v20, v21);
    int v22 = *((unsigned __int8 *)this + 176);
    uint64_t v66 = v19;
    if (v22)
    {
      if (v19) {
        memcpy(v68, a2, 8 * v19);
      }
    }
    else if (v19)
    {
      OSStatus v26 = *a2;
      uint64_t v27 = (const float **)v68;
      uint64_t v28 = v66;
      do
      {
        *v27++ = v26;
        --v28;
      }
      while (v28);
    }
    uint64_t v29 = (*(uint64_t (**)(void))(**((void **)this + 3) + 24))(*((void *)this + 3));
    if (v29)
    {
      uint64_t v29 = (*(uint64_t (**)(void))(**((void **)this + 3) + 104))(*((void *)this + 3));
      if (v29)
      {
        uint64_t v29 = IR::FFTFilter::doXFadeUpdate(*((IR::FFTFilter **)this + 6));
        if (v29)
        {
          uint64_t ScratchKernels = IR::FFTFilter::getScratchKernels(*((IR::FFTFilter **)this + 6));
          (*(void (**)(void, uint64_t, char *, uint64_t))(**((void **)this + 3) + 112))(*((void *)this + 3), ScratchKernels, (char *)this + 112, 3);
          uint64_t v29 = IR::FFTFilter::setFilterKernels();
        }
      }
    }
    if (!*((unsigned char *)this + 56))
    {
      long long v54 = (IR::FFTFilter *)*((void *)this + 6);
      if (*((unsigned char *)this + 176)) {
        IR::FFTFilter::processMultipleInputs(v54, (float *const *)a2, a3, v67, v66, v66, 0);
      }
      else {
        IR::FFTFilter::process(v54, *a2, a3);
      }
      uint64_t v56 = v66;
      uint64_t v55 = v67;
      if (v66)
      {
        uint64_t v57 = 0;
        uint64_t v58 = 0;
        uint64_t v59 = 0;
        do
        {
          if (*((_DWORD *)this + 43) == 1)
          {
            IR::DelayLine::setDelay(*((void *)this + 8) + v57, *(float *)(*((void *)this + 14) + 4 * v59));
            unsigned int v60 = (float *)(*((void *)this + 8) + v57);
            v60[24] = expf(-1.0 / *((float *)this + 40));
            __Start[0] = a3[v59];
            IR::DelayLine::process((IR::DelayLine *)v60, __Start[0], __Start, v55);
          }
          else
          {
            uint64_t v61 = *((void *)this + 11);
            if (v61 != *((void *)this + 12)) {
              IR::FixedIntegerDelay::process((IR::FixedIntegerDelay *)(v61 + v58), a3[v59], a3[v59], v55);
            }
          }
          float v62 = *((float *)this + 41);
          if (__B == v62 || *((unsigned char *)this + 168))
          {
            vDSP_vsmul(a3[v59], 1, &__B, a3[v59], 1, v55);
          }
          else if (v55)
          {
            LODWORD(__Start[0]) = *((_DWORD *)this + 41);
            float __Step = (float)(__B - v62) / (float)v55;
            vDSP_vrampmul(a3[v59], 1, (float *)__Start, &__Step, a3[v59], 1, v55);
          }
          ++v59;
          v58 += 56;
          v57 += 304;
        }
        while (v56 != v59);
      }
      goto LABEL_59;
    }
    MEMORY[0x1F4188790](v29);
    float v33 = (float *const *)((char *)&v63 - v32);
    if (v31 >= 0x200) {
      size_t v34 = 512;
    }
    else {
      size_t v34 = v31;
    }
    bzero((char *)&v63 - v32, v34);
    if (v66)
    {
      uint64_t v63 = (uint64_t)&v63;
      char v64 = a8;
      int v65 = &v63;
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v38 = 0;
      uint64_t v39 = v67;
      vDSP_Length v40 = v67;
      float v41 = (float)v67;
      uint64_t v42 = 24 * v66;
      do
      {
        float v43 = *((float *)this + 41);
        if (__B == v43 || *((unsigned char *)this + 168))
        {
          vDSP_vsmul(*(const float **)&v68[8 * v38], 1, &__B, *(float **)(*((void *)this + 17) + v37), 1, v40);
        }
        else if (v39)
        {
          LODWORD(__Start[0]) = *((_DWORD *)this + 41);
          float __Step = (float)(__B - v43) / v41;
          vDSP_vrampmul(*(const float **)&v68[8 * v38], 1, (float *)__Start, &__Step, *(float **)(*((void *)this + 17) + v37), 1, v40);
        }
        if (*((_DWORD *)this + 43) == 1)
        {
          IR::DelayLine::setDelay(*((void *)this + 8) + v35, *(float *)(*((void *)this + 14) + 4 * v38));
          __int16 v44 = (float *)(*((void *)this + 8) + v35);
          v44[24] = expf(-1.0 / *((float *)this + 40));
          __Start[0] = *(float **)(*((void *)this + 17) + v37);
          OSStatus v45 = (IR::DelayLine *)v44;
          uint64_t v39 = v67;
          IR::DelayLine::process(v45, __Start[0], __Start, v67);
        }
        else
        {
          uint64_t v46 = *((void *)this + 11);
          if (v46 != *((void *)this + 12)) {
            IR::FixedIntegerDelay::process((IR::FixedIntegerDelay *)(v46 + v36), *(float **)(*((void *)this + 17) + v37), *(float **)(*((void *)this + 17) + v37), v39);
          }
        }
        v33[v38++] = *(float *const *)(*((void *)this + 17) + v37);
        v37 += 24;
        v36 += 56;
        v35 += 304;
      }
      while (v42 != v37);
      a8 = v64;
      if (!*((unsigned char *)this + 176))
      {
        if (v66 >= 2)
        {
          uint64_t v47 = (float *)*((void *)this + 14);
          float v49 = *v47;
          __int16 v48 = v47 + 1;
          float v50 = v49;
          uint64_t v51 = v66 - 1;
          char v52 = 1;
          do
          {
            float v53 = *v48++;
            v52 &= v53 == v50;
            --v51;
          }
          while (v51);
          if ((v52 & 1) == 0)
          {
            IR::FFTFilter::processMultipleInputs(*((IR::FFTFilter **)this + 6), v33, a3, v39, v66, v66, v64);
LABEL_59:
            *((unsigned char *)this + 168) = 0;
            *((float *)this + 41) = __B;
LABEL_60:
            std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v70);
            return 0;
          }
        }
LABEL_58:
        IR::FFTFilter::process(*((IR::FFTFilter **)this + 6), *(const float **)v33, a3, v39, v66, a8);
        goto LABEL_59;
      }
    }
    else
    {
      uint64_t v39 = v67;
      if (!*((unsigned char *)this + 176)) {
        goto LABEL_58;
      }
    }
    IR::FFTFilter::processMultipleInputs(*((IR::FFTFilter **)this + 6), v33, a3, v39, v66, v66, a8);
    goto LABEL_59;
  }
  return result;
}

void sub_1BB3F23CC(_Unwind_Exception *a1)
{
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100](v1 - 136);
  _Unwind_Resume(a1);
}

uint64_t GetVPSmartCoverIsAttached(BOOL *a1)
{
  v25[2] = *MEMORY[0x1E4F143B8];
  unsigned int v18 = 1768452981;
  if (GetVPSmartCoverIsAttached::gIOHIDEventSystemClientRef
    || (GetVPSmartCoverIsAttached::gIOHIDEventSystemClientRef = IOHIDEventSystemClientCreate()) != 0)
  {
    uint64_t v16 = a1;
    v24[0] = @"PrimaryUsagePage";
    int v2 = [NSNumber numberWithInt:65280];
    v24[1] = @"PrimaryUsage";
    v25[0] = v2;
    int v3 = [NSNumber numberWithInt:41];
    v25[1] = v3;
    unsigned int v17 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v25 forKeys:v24 count:2];

    IOHIDEventSystemClientSetMatching();
    CFArrayRef v4 = IOHIDEventSystemClientCopyServices((IOHIDEventSystemClientRef)GetVPSmartCoverIsAttached::gIOHIDEventSystemClientRef);
    CFArrayRef v5 = v4;
    if (v4)
    {
      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      CFArrayRef v6 = v4;
      uint64_t v7 = [(__CFArray *)v6 countByEnumeratingWithState:&v19 objects:v23 count:16];
      if (v7)
      {
        uint64_t v8 = *(void *)v20;
        while (2)
        {
          for (uint64_t i = 0; i != v7; ++i)
          {
            if (*(void *)v20 != v8) {
              objc_enumerationMutation(v6);
            }
            KeyboardEvent = (void *)IOHIDEventCreateKeyboardEvent();
            uint64_t v11 = (void *)IOHIDServiceClientCopyEvent();
            if (!v11)
            {
              unsigned int v18 = 1768452965;
LABEL_20:

              goto LABEL_21;
            }
            IntegerCFArrayRef Value = IOHIDEventGetIntegerValue();
            uint64_t v13 = IOHIDEventGetIntegerValue();
            if (IntegerValue == 65289 && v13 == 16)
            {
              unsigned int v18 = 0;
              *uint64_t v16 = IOHIDEventGetIntegerValue() != 0;
              goto LABEL_20;
            }
          }
          uint64_t v7 = [(__CFArray *)v6 countByEnumeratingWithState:&v19 objects:v23 count:16];
          if (v7) {
            continue;
          }
          break;
        }
      }
LABEL_21:
    }
    else
    {
      unsigned int v18 = 1768452963;
    }
  }
  else
  {
    return 1768449395;
  }
  return v18;
}

void sub_1BB3F26B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

uint64_t DOABasedProbability::SetSubbandDOATimeSmoothing(uint64_t this, float a2)
{
  if (*(unsigned char *)(this + 488))
  {
    uint64_t v2 = *(void *)(this + 536);
    if (v2)
    {
      *(float *)(this + 492) = a2;
      *(float *)(v2 + 12) = a2;
    }
  }
  return this;
}

void DOABasedProbability::SetSubbandDOA(DOABasedProbability *this, const float *a2, size_t __n)
{
  int v3 = __n;
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *((void *)this + 65);
  CFArrayRef v6 = (void *)*((void *)this + 64);
  if (v5 - (void)v6 == __n)
  {
    memcpy(v6, a2, __n);
  }
  else
  {
    if (AUSpatialProbabilityLogScope(void)::once != -1) {
      dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
    }
    if (AUSpatialProbabilityLogScope(void)::scope)
    {
      uint64_t v7 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
      if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
        return;
      }
    }
    else
    {
      uint64_t v7 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *((void *)this + 65) - *((void *)this + 64);
      int v9 = 136315906;
      uint64_t v10 = "DOABasedProbability.hpp";
      __int16 v11 = 1024;
      int v12 = 115;
      __int16 v13 = 1024;
      int v14 = v3;
      __int16 v15 = 2048;
      uint64_t v16 = v8;
      _os_log_impl(&dword_1BB0CE000, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d SubbandDOA not set. Input size (%u) and internal size (%lu) do not match.\n", (uint8_t *)&v9, 0x22u);
    }
  }
}

void DOABasedProbability::SetTargetDistance(DOABasedProbability *this, float a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a2 >= 0.0)
  {
    *((float *)this + 112) = a2;
    *((unsigned char *)this + 452) = 1;
    return;
  }
  if (AUSpatialProbabilityLogScope(void)::once != -1) {
    dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
  }
  if (AUSpatialProbabilityLogScope(void)::scope)
  {
    CFArrayRef v4 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
    if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
      return;
    }
  }
  else
  {
    CFArrayRef v4 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    double v5 = *((float *)this + 112);
    int v6 = 136315906;
    uint64_t v7 = "DOABasedProbability.hpp";
    __int16 v8 = 1024;
    int v9 = 157;
    __int16 v10 = 2048;
    double v11 = a2;
    __int16 v12 = 2048;
    double v13 = v5;
    _os_log_impl(&dword_1BB0CE000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Target distance not set to (%f), it remains at the current value (%f). Distance must be nonnegative.\n", (uint8_t *)&v6, 0x26u);
  }
}

void DOABasedProbability::SetTargetElevation(DOABasedProbability *this, float a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2 >= -90.0 && a2 <= 90.0)
  {
    *((float *)this + 111) = a2;
    *((unsigned char *)this + 452) = 1;
    return;
  }
  if (AUSpatialProbabilityLogScope(void)::once != -1) {
    dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
  }
  if (AUSpatialProbabilityLogScope(void)::scope)
  {
    double v5 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
    if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
      return;
    }
  }
  else
  {
    double v5 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    double v6 = *((float *)this + 111);
    int v7 = 136315906;
    __int16 v8 = "DOABasedProbability.hpp";
    __int16 v9 = 1024;
    int v10 = 144;
    __int16 v11 = 2048;
    double v12 = a2;
    __int16 v13 = 2048;
    double v14 = v6;
    _os_log_impl(&dword_1BB0CE000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Target elevation not set to (%f), it remains at the current value (%f). Elevation must be in range [-90, 90].\n", (uint8_t *)&v7, 0x26u);
  }
}

uint64_t DOABasedProbability::SetTargetAzimuth(uint64_t this, float a2)
{
  *(float *)(this + 440) = a2;
  *(unsigned char *)(this + 452) = 1;
  return this;
}

uint64_t DOABasedProbability::ProcessBufferList(DOABasedProbability *this, const AudioBufferList *a2)
{
  return (*(uint64_t (**)(void))(*(void *)this + 16))();
}

void DOABasedProbability::~DOABasedProbability(DOABasedProbability *this)
{
  DOABasedProbability::~DOABasedProbability(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t vars8;

  *(void *)this = &unk_1F14AD3E8;
  uint64_t v2 = (void *)*((void *)this + 71);
  if (v2)
  {
    *((void *)this + 72) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 68);
  if (v3)
  {
    *((void *)this + 69) = v3;
    operator delete(v3);
  }
  CFArrayRef v4 = *((void *)this + 67);
  *((void *)this + 67) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  double v5 = (void *)*((void *)this + 64);
  if (v5)
  {
    *((void *)this + 65) = v5;
    operator delete(v5);
  }
  double v6 = *((void *)this + 60);
  *((void *)this + 60) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
  }
  int v7 = *((void *)this + 59);
  *((void *)this + 59) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 24))(v7);
  }
  __int16 v8 = *((void *)this + 58);
  *((void *)this + 58) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 24))(v8);
  }

  SpatialProbabilityBase::~SpatialProbabilityBase(this);
}

void SpatialProbabilityBase::~SpatialProbabilityBase(SpatialProbabilityBase *this)
{
  *(void *)this = &unk_1F14C7860;
  uint64_t v2 = (void *)*((void *)this + 52);
  if (v2)
  {
    *((void *)this + 53) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 46);
  if (v3)
  {
    *((void *)this + 47) = v3;
    operator delete(v3);
  }
  CFArrayRef v4 = (void *)*((void *)this + 41);
  if (v4)
  {
    *((void *)this + 42) = v4;
    operator delete(v4);
  }
  double v5 = (void *)*((void *)this + 38);
  if (v5)
  {
    *((void *)this + 39) = v5;
    operator delete(v5);
  }
  double v6 = (void *)*((void *)this + 35);
  if (v6)
  {
    *((void *)this + 36) = v6;
    operator delete(v6);
  }
  int v7 = (void *)*((void *)this + 30);
  if (v7)
  {
    *((void *)this + 31) = v7;
    operator delete(v7);
  }
  __int16 v8 = (void *)*((void *)this + 27);
  if (v8)
  {
    *((void *)this + 28) = v8;
    operator delete(v8);
  }
  __int16 v9 = (void *)*((void *)this + 24);
  if (v9)
  {
    *((void *)this + 25) = v9;
    operator delete(v9);
  }
  int v10 = (void *)*((void *)this + 21);
  if (v10)
  {
    *((void *)this + 22) = v10;
    operator delete(v10);
  }
  __int16 v11 = (void *)*((void *)this + 18);
  if (v11)
  {
    *((void *)this + 19) = v11;
    operator delete(v11);
  }
  double v12 = (void *)*((void *)this + 15);
  if (v12)
  {
    *((void *)this + 16) = v12;
    operator delete(v12);
  }
  __int16 v13 = (void *)*((void *)this + 12);
  if (v13)
  {
    *((void *)this + 13) = v13;
    operator delete(v13);
  }
  double v14 = (void *)*((void *)this + 8);
  if (v14)
  {
    *((void *)this + 9) = v14;
    operator delete(v14);
  }
}

float DOABasedProbability::EstimateSpatialProbabilities(DOABasedProbability *this)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  SpatialProbabilityBase::UpdatePriorProbabilities(this);
  SpatialProbabilityBase::UpdateShapeParameter(this);
  if (*((unsigned char *)this + 452))
  {
    CircularModelDOA::SetTargetDOA(*((CircularModelDOA **)this + 58), *((float *)this + 110), *((float *)this + 111), *((float *)this + 112));
    CircularModelDOA::SetTargetDOA(*((CircularModelDOA **)this + 59), *((float *)this + 110), *((float *)this + 111), *((float *)this + 112));
    CircularModelDOA::SetTargetDOA(*((CircularModelDOA **)this + 60), *((float *)this + 110), *((float *)this + 111), *((float *)this + 112));
  }
  *((unsigned char *)this + 452) = 0;
  if (!*((unsigned char *)this + 488))
  {
    uint64_t v16 = (const void **)((char *)this + 504);
    goto LABEL_81;
  }
  uint64_t v2 = *((void *)this + 67);
  unsigned int v3 = *((_DWORD *)this + 2);
  DOAConditioner::LogDOA((uint64_t)this + 504, *(void **)(v2 + 56));
  int v4 = *((_DWORD *)this + 126);
  if (v4 != *(_DWORD *)(v2 + 160)) {
    __assert_rtn("SetXYZFromPolarDOA", "SubbandXYZ.hpp", 52, "polarDOA.GetNumBands() == GetNumBands()");
  }
  unsigned int v5 = v4 + 1;
  if (v4 + 1 < v3) {
    vDSP_Length v6 = (v4 + 1);
  }
  else {
    vDSP_Length v6 = v3;
  }
  if (v6)
  {
    uint64_t v7 = 0;
    do
    {
      if (4 * (v4 + 1) == v7) {
        __assert_rtn("Get", "SubbandDOA.h", 56, "bandIdx < GetNumBands()");
      }
      __int16 v8 = (float *)(*((void *)this + 64) + v7);
      float v9 = *v8 * 3.14159265 / 180.0;
      float v10 = v8[v4 + 1] * 3.14159265 / 180.0;
      __float2 v11 = __sincosf_stret(v9);
      __float2 v12 = __sincosf_stret(v10);
      __int16 v13 = (float *)(*(void *)(v2 + 168) + v7);
      *__int16 v13 = v11.__cosval * v12.__cosval;
      v13[v4 + 1] = v11.__sinval * v12.__cosval;
      v13[2 * v4 + 2] = v12.__sinval;
      v7 += 4;
    }
    while (4 * v6 != v7);
  }
  if (*(unsigned char *)(v2 + 32))
  {
    int v14 = *(_DWORD *)(v2 + 24);
    switch(v14)
    {
      case 1:
        uint64_t v15 = (float *)(*(void *)(v2 + 168) + 4 * v5);
        goto LABEL_22;
      case 2:
        uint64_t v15 = (float *)(*(void *)(v2 + 168) + 4 * (2 * v4 + 2));
LABEL_22:
        vDSP_vneg(v15, 1, v15, 1, v6);
        vDSP_vswap((float *)(*(void *)(v2 + 168) + 4 * (*(_DWORD *)(v2 + 160) + 1)), 1, (float *)(*(void *)(v2 + 168) + 4 * (2 * *(_DWORD *)(v2 + 160) + 2)), 1, v6);
        goto LABEL_27;
      case 3:
        goto LABEL_27;
      case 4:
        unsigned int v18 = (float *)(*(void *)(v2 + 168) + 4 * v5);
        vDSP_vneg(v18, 1, v18, 1, v6);
        long long v19 = (float *)(*(void *)(v2 + 168) + 4 * (2 * *(_DWORD *)(v2 + 160) + 2));
        vDSP_vneg(v19, 1, v19, 1, v6);
        goto LABEL_27;
      default:
        if (SCLogScope(void)::once != -1) {
          dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
        }
        if (SCLogScope(void)::scope)
        {
          uint64_t v17 = *(NSObject **)SCLogScope(void)::scope;
          if (!*(void *)SCLogScope(void)::scope) {
            goto LABEL_27;
          }
        }
        else
        {
          uint64_t v17 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          *(float *)AudioChannelLayout buf = 4.8152e-34;
          long long v54 = "SubbandXYZ.cpp";
          __int16 v55 = 1024;
          int v56 = 123;
          __int16 v57 = 1024;
          int v58 = v14;
          _os_log_impl(&dword_1BB0CE000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d Invalid orientation %u", buf, 0x18u);
        }
LABEL_27:
        int v20 = *(_DWORD *)(v2 + 28);
        if (v20 == 1) {
          break;
        }
        if (v20)
        {
          if (SCLogScope(void)::once != -1) {
            dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
          }
          if (SCLogScope(void)::scope)
          {
            uint64_t v24 = *(NSObject **)SCLogScope(void)::scope;
            if (!*(void *)SCLogScope(void)::scope) {
              break;
            }
          }
          else
          {
            uint64_t v24 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
          {
            *(float *)AudioChannelLayout buf = 4.8152e-34;
            long long v54 = "SubbandXYZ.cpp";
            __int16 v55 = 1024;
            int v56 = 150;
            __int16 v57 = 1024;
            int v58 = v20;
            _os_log_impl(&dword_1BB0CE000, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d Invalid camera direction %u", buf, 0x18u);
          }
        }
        else
        {
          int v21 = *(_DWORD *)(v2 + 160);
          if (v21 + 1 < v3) {
            vDSP_Length v22 = (v21 + 1);
          }
          else {
            vDSP_Length v22 = v3;
          }
          vDSP_vneg(*(const float **)(v2 + 168), 1, *(float **)(v2 + 168), 1, v22);
          size_t v23 = (float *)(*(void *)(v2 + 168) + 4 * (*(_DWORD *)(v2 + 160) + 1));
          vDSP_vneg(v23, 1, v23, 1, v22);
        }
        break;
    }
  }
  if (!*(unsigned char *)(v2 + 40))
  {
    *(_DWORD *)(v2 + 128) = *(_DWORD *)(v2 + 160);
    std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(v2 + 136), *(char **)(v2 + 168), *(void *)(v2 + 176), (uint64_t)(*(void *)(v2 + 176) - *(void *)(v2 + 168)) >> 2);
  }
  *(unsigned char *)(v2 + 40) = 1;
  if (*(unsigned char *)(v2 + 8))
  {
    unint64_t v25 = *(unsigned int *)(v2 + 36);
    uint64_t v26 = *(void *)(v2 + 72);
    if (v25 >= (*(void *)(v2 + 80) - v26) >> 3) {
      std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
    }
    if (*(void *)(v26 + 8 * v25))
    {
      float v27 = *(float *)(v2 + 16);
      *(float *)AudioChannelLayout buf = *(float *)(v2 + 12);
      char v28 = 1;
      vDSP_vsmul(*(const float **)(v2 + 136), 1, (const float *)buf, *(float **)(v2 + 136), 1, (uint64_t)(*(void *)(v2 + 144) - *(void *)(v2 + 136)) >> 2);
      for (uint64_t i = 0; i != 3; ++i)
      {
        float v30 = SubbandXYZ::UpdateWithTimeFrequencySmoothing(SubbandXYZ const&,float,sparse_m_float *&,float)::regularizationVecXYZ[i];
        float v31 = (1.0 - *(float *)buf) * (1.0 - (float)(v30 * v27));
        BOOL v32 = sparse_matrix_vector_product_dense_float(CblasNoTrans, v31, *(sparse_matrix_float *)(v26 + 8 * v25), (const float *)(*(void *)(v2 + 168) + 4 * (i + i * *(_DWORD *)(v2 + 160))), 1, (float *)(*(void *)(v2 + 136) + 4 * (i + i * *(_DWORD *)(v2 + 128))), 1) == SPARSE_SUCCESS;
        if (fabsf(v30) > 1.0e-15)
        {
          float v33 = (1.0 - *(float *)buf) * v27 * v30;
          float __B = v33;
          vDSP_Length v34 = (*(_DWORD *)(v2 + 128) + 1);
          uint64_t v35 = (float *)(*(void *)(v2 + 136) + 4 * (v34 * i));
          vDSP_vsadd(v35, 1, &__B, v35, 1, v34);
        }
        v28 &= v32;
      }
      if (v28) {
        goto LABEL_60;
      }
    }
    if (SCLogScope(void)::once != -1) {
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
    }
    if (SCLogScope(void)::scope)
    {
      uint64_t v36 = *(NSObject **)SCLogScope(void)::scope;
      if (!*(void *)SCLogScope(void)::scope) {
        goto LABEL_60;
      }
    }
    else
    {
      uint64_t v36 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      *(float *)AudioChannelLayout buf = 4.8151e-34;
      long long v54 = "DOAConditioner.cpp";
      __int16 v55 = 1024;
      int v56 = 34;
      _os_log_impl(&dword_1BB0CE000, v36, OS_LOG_TYPE_ERROR, "%25s:%-5d Time-frequency smoothing update failed", buf, 0x12u);
    }
    goto LABEL_60;
  }
  *(_DWORD *)(v2 + 128) = *(_DWORD *)(v2 + 160);
  std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(v2 + 136), *(char **)(v2 + 168), *(void *)(v2 + 176), (uint64_t)(*(void *)(v2 + 176) - *(void *)(v2 + 168)) >> 2);
LABEL_60:
  int v37 = *(_DWORD *)(v2 + 96);
  if (v37 != *(_DWORD *)(v2 + 128)) {
    __assert_rtn("SetPolarDOAFromXYZ", "SubbandXYZ.cpp", 182, "polarDOA.GetNumBands() == GetNumBands()");
  }
  if (v37 + 1 < v3) {
    uint64_t v38 = (v37 + 1);
  }
  else {
    uint64_t v38 = v3;
  }
  if (v38)
  {
    for (uint64_t j = 0; j != v38; ++j)
    {
      vDSP_Length v40 = (float *)(*(void *)(v2 + 136) + 4 * j);
      int v41 = *(_DWORD *)(v2 + 128);
      float v42 = v40[2 * v41 + 2];
      float v43 = 1.0;
      if (v42 <= 1.0)
      {
        float v43 = v40[2 * v41 + 2];
        if (v42 < -1.0) {
          float v43 = -1.0;
        }
      }
      if (fabsf(v43) > 1.0) {
        __assert_rtn("SetPolarDOAFromXYZ", "SubbandXYZ.cpp", 196, "fabsf(z) <= 1.0");
      }
      float v44 = *v40;
      float v45 = v40[v41 + 1];
      float v46 = asinf(v43);
      if ((LODWORD(v46) & 0x7FFFFFFFu) >= 0x7F800000) {
        __assert_rtn("SetPolarDOAFromXYZ", "SubbandXYZ.cpp", 198, "isfinite(el)");
      }
      if (fabsf(v45) < 1.0e-15 && fabsf(v44) < 1.0e-15) {
        float v45 = 1.0e-15;
      }
      float v47 = atan2f(-v45, v44);
      if ((LODWORD(v47) & 0x7FFFFFFFu) >= 0x7F800000) {
        __assert_rtn("SetPolarDOAFromXYZ", "SubbandXYZ.cpp", 204, "isfinite(az)");
      }
      float v48 = (float)(v47 * -180.0) / 3.14159265;
      float v49 = (float)(v46 * 180.0) / 3.14159265;
      SubbandDOA::Set((SubbandDOA *)(v2 + 96), j, v48, v49);
    }
  }
  if (*(unsigned char *)(v2 + 41) && *(_DWORD *)(v2 + 96) != -1)
  {
    unsigned int v50 = 0;
    do
      SubbandDOA::Set((SubbandDOA *)(v2 + 96), v50++, *(float *)(v2 + 44), *(float *)(v2 + 48));
    while (v50 < *(_DWORD *)(v2 + 96) + 1);
  }
  DOAConditioner::LogDOA(v2 + 96, *(void **)(v2 + 64));
  uint64_t v16 = (const void **)(*((void *)this + 67) + 96);
LABEL_81:
  memcpy(*((void **)this + 68), v16[1], 4 * *((unsigned int *)this + 2));
  memcpy(*((void **)this + 71), (char *)v16[1] + 4 * *((unsigned int *)this + 2), 4 * *((unsigned int *)this + 2));
  (*(void (**)(void, char *, char *, char *))(**((void **)this + 58) + 48))(*((void *)this + 58), (char *)this + 544, (char *)this + 568, (char *)this + 96);
  (*(void (**)(void, char *, char *, char *))(**((void **)this + 59) + 48))(*((void *)this + 59), (char *)this + 544, (char *)this + 568, (char *)this + 120);
  (*(void (**)(void, char *, char *, char *))(**((void **)this + 60) + 48))(*((void *)this + 60), (char *)this + 544, (char *)this + 568, (char *)this + 144);

  return SpatialProbabilityBase::UpdatePosteriorProbabilities(this);
}

uint64_t DOABasedProbability::UpdateModelsWithShapeParameter(void **a1, uint64_t a2)
{
  (*(void (**)(void *))(*a1[58] + 40))(a1[58]);
  (*(void (**)(void *, uint64_t))(*a1[59] + 40))(a1[59], a2);
  int v4 = *(uint64_t (**)(void))(*a1[60] + 40);

  return v4();
}

uint64_t DOABasedProbability::UpdateModelsWithShapeParameter(DOABasedProbability *this, float a2)
{
  (*(void (**)(void))(**((void **)this + 58) + 32))(*((void *)this + 58));
  (*(void (**)(void, float))(**((void **)this + 59) + 32))(*((void *)this + 59), a2);
  int v4 = *(uint64_t (**)(__n128))(**((void **)this + 60) + 32);
  v5.n128_f32[0] = a2;

  return v4(v5);
}

void CircularModelDOAFactory::CreateModel(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 0:
      operator new();
    case 1:
      operator new();
    case 2:
      operator new();
    case 3:
      operator new();
    case 4:
      operator new();
    default:
      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "Unknown selected model!");
  }
}

void sub_1BB3F3C60(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void CircularModelDOA::CircularModelDOA(CircularModelDOA *this, unsigned int a2, float a3, float a4, float a5)
{
  *(void *)this = &unk_1F14B8F48;
  *((_DWORD *)this + 2) = a2;
  int v15 = 0;
  std::vector<float>::vector((void *)this + 3, a2, &v15);
  unint64_t v9 = *((unsigned int *)this + 2);
  int v15 = 1065353216;
  std::vector<float>::vector((void *)this + 6, v9, &v15);
  unint64_t v10 = *((unsigned int *)this + 2);
  *((_DWORD *)this + 18) = v10;
  *(_OWORD *)((char *)this + 76) = xmmword_1BB87A160;
  *((_DWORD *)this + 23) = 1016003125;
  int v15 = 1065353216;
  std::vector<float>::vector((void *)this + 12, v10, &v15);
  unint64_t v11 = *((unsigned int *)this + 2);
  int v15 = 0;
  std::vector<float>::vector((void *)this + 15, v11, &v15);
  unint64_t v12 = *((unsigned int *)this + 2);
  int v15 = 1065353216;
  std::vector<float>::vector((void *)this + 18, v12, &v15);
  unint64_t v13 = *((unsigned int *)this + 2);
  int v15 = 0;
  std::vector<float>::vector((void *)this + 21, v13, &v15);
  unint64_t v14 = *((unsigned int *)this + 2);
  int v15 = 0;
  std::vector<float>::vector((void *)this + 24, v14, &v15);
  CircularModelDOA::SetTargetDOA(this, a3, a4, a5);
}

void sub_1BB3F3EB8(_Unwind_Exception *exception_object)
{
  __int16 v8 = v5;
  unint64_t v10 = *v8;
  if (*v8)
  {
    v1[22] = v10;
    operator delete(v10);
  }
  unint64_t v11 = *v7;
  if (*v7)
  {
    v1[19] = v11;
    operator delete(v11);
  }
  unint64_t v12 = *v6;
  if (*v6)
  {
    v1[16] = v12;
    operator delete(v12);
  }
  unint64_t v13 = *v4;
  if (*v4)
  {
    v1[13] = v13;
    operator delete(v13);
  }
  unint64_t v14 = *v3;
  if (*v3)
  {
    v1[7] = v14;
    operator delete(v14);
  }
  int v15 = *v2;
  if (*v2)
  {
    v1[4] = v15;
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

char *SubbandDOA::Reset(char **this, int a2)
{
  if (!a2) {
    __assert_rtn("Reset", "SubbandDOA.h", 41, "blockSize > 0");
  }
  *(_DWORD *)this = a2;
  int v3 = 0;
  return std::vector<float>::assign(this + 1, (2 * a2 + 2), &v3);
}

char *SubbandXYZ::Reset(char **this, int a2)
{
  if (!a2) {
    __assert_rtn("Reset", "SubbandXYZ.hpp", 28, "blockSize > 0");
  }
  *(_DWORD *)this = a2;
  int v3 = 0;
  return std::vector<float>::assign(this + 1, (3 * a2 + 3), &v3);
}

void sub_1BB3F4190(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x1C185D210](v1);
  _Unwind_Resume(a1);
}

void DOAConditioner::~DOAConditioner(DOAConditioner *this)
{
  DOAConditioner::~DOAConditioner(this);

  JUMPOUT(0x1C185D370);
}

{
  void **v2;
  void **v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  *(void *)this = &unk_1F14AD470;
  uint64_t v2 = (void **)*((void *)this + 9);
  int v3 = (void **)*((void *)this + 10);
  while (v2 != v3)
  {
    if (*v2) {
      sparse_matrix_destroy(*v2);
    }
    ++v2;
  }
  int v4 = (void *)*((void *)this + 21);
  if (v4)
  {
    *((void *)this + 22) = v4;
    operator delete(v4);
  }
  __n128 v5 = (void *)*((void *)this + 17);
  if (v5)
  {
    *((void *)this + 18) = v5;
    operator delete(v5);
  }
  vDSP_Length v6 = (void *)*((void *)this + 13);
  if (v6)
  {
    *((void *)this + 14) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 9);
  if (v7)
  {
    *((void *)this + 10) = v7;
    operator delete(v7);
  }
  __int16 v8 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  unint64_t v9 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
}

uint64_t AUSPLMeter::SupportedNumChannels(AUSPLMeter *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUSPLMeter::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 2;
}

BOOL AUSPLMeter::StreamFormatWritable(AUSPLMeter *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUSPLMeter::SupportsTail(AUSPLMeter *this)
{
  return 1;
}

double AUSPLMeter::GetTailTime(AUSPLMeter *this)
{
  return 0.0;
}

double AUSPLMeter::GetLatency(AUSPLMeter *this)
{
  return 0.0;
}

uint64_t AUSPLMeter::GetParameterInfo(AUSPLMeter *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result = 4294956418;
  if (!a2 && a3 <= 0xC)
  {
    __n128 v5 = (char *)&paramInfo + 104 * a3;
    *(_OWORD *)&buffer->clumpID = *((_OWORD *)v5 + 4);
    uint64_t v6 = *((void *)v5 + 12);
    *(void *)&buffer->flags = v6;
    *(_OWORD *)&buffer->name[48] = *((_OWORD *)v5 + 3);
    *(_OWORD *)&buffer->unit = *((_OWORD *)v5 + 5);
    *(_OWORD *)buffer->name = *(_OWORD *)v5;
    *(_OWORD *)&buffer->name[16] = *((_OWORD *)v5 + 1);
    *(_OWORD *)&buffer->name[32] = *((_OWORD *)v5 + 2);
    CFStringRef v7 = (const __CFString *)*((void *)v5 + 9);
    buffer->cfNameString = v7;
    buffer->flags = v6 | 0x8000000;
    CFStringGetCString(v7, buffer->name, 52, 0x8000100u);
    return 0;
  }
  return result;
}

uint64_t AUSPLMeter::Render(AUSPLMeter *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  __int16 v8 = (AUSPLMeter *)((char *)this + 80);
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUSPLMeter *)((char *)this + 80), 0);
  uint64_t v10 = ausdk::AUScope::SafeGetElement((AUSPLMeter *)((char *)this + 128), 0);
  unsigned int v15 = 0;
  unint64_t v11 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 0);
  uint64_t result = ausdk::AUInputElement::PullInput(v11, &v15, a3, 0, a4);
  if (!result)
  {
    uint64_t BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 144));
    uint64_t v14 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144));
    return (*(uint64_t (**)(AUSPLMeter *, unsigned int *, uint64_t, uint64_t, uint64_t))(*(void *)this + 176))(this, a2, BufferList, v14, a4);
  }
  return result;
}

uint64_t AUSPLMeter::ProcessBufferLists(AUSPLMeter *this, unsigned int *a2, const AudioBufferList *a3, AudioBufferList *a4, UInt32 a5)
{
  if (*((_DWORD *)this + 84) < a5) {
    return 4294956422;
  }
  uint64_t v10 = (AudioBufferList *)**((void **)this + 88);
  unint64_t mNumberBuffers = a3->mNumberBuffers;
  if (mNumberBuffers == a4->mNumberBuffers && mNumberBuffers != 0)
  {
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    do
    {
      size_t mDataByteSize = a3->mBuffers[v13].mDataByteSize;
      if (mDataByteSize == a4->mBuffers[v13].mDataByteSize)
      {
        int mData = a3->mBuffers[v13].mData;
        uint64_t v17 = a4->mBuffers[v13].mData;
        if (mData != v17)
        {
          memcpy(v17, mData, mDataByteSize);
          unint64_t mNumberBuffers = a3->mNumberBuffers;
        }
      }
      ++v14;
      ++v13;
    }
    while (v14 < mNumberBuffers);
  }
  if (!*((unsigned char *)this + 528))
  {
    uint64_t Element = ausdk::AUScope::SafeGetElement((AUSPLMeter *)((char *)this + 80), 0);
    unint64_t v19 = a3->mNumberBuffers;
    if (v19 == v10[2].mNumberBuffers && a3->mNumberBuffers)
    {
      uint64_t v20 = 0;
      unint64_t v21 = 0;
      size_t v22 = *(_DWORD *)(Element + 104) * a5;
      do
      {
        if (a3->mBuffers[v20].mDataByteSize >= v22
          && v10[2].mBuffers[v20].mDataByteSize >= v22)
        {
          size_t v23 = a3->mBuffers[v20].mData;
          uint64_t v24 = v10[2].mBuffers[v20].mData;
          if (v23 != v24)
          {
            memcpy(v24, v23, v22);
            unint64_t v19 = a3->mNumberBuffers;
          }
        }
        ++v21;
        ++v20;
      }
      while (v21 < v19);
    }
    unsigned __int8 v25 = atomic_load((unsigned __int8 *)this + 588);
    if ((v25 & 1) != 0 && *((unsigned char *)this + 596))
    {
      long long v26 = *((_OWORD *)this + 18);
      *(_OWORD *)&inTimeStamp.mSampleTime = *((_OWORD *)this + 17);
      *(_OWORD *)&inTimeStamp.mRateScalar = v26;
      long long v27 = *((_OWORD *)this + 20);
      *(_OWORD *)&inTimeStamp.mSMPTETime.mSubframes = *((_OWORD *)this + 19);
      *(_OWORD *)&inTimeStamp.mSMPTETime.mHours = v27;
      AudioUnitRenderActionFlags ioActionFlags = 512;
      AudioUnitProcess(*((AudioUnit *)this + 87), &ioActionFlags, &inTimeStamp, a5, v10 + 2);
    }
    uint64_t v28 = a3->mNumberBuffers;
    if (v28)
    {
      uint64_t v29 = 0;
      uint64_t v30 = 8 * v28;
      p_int mData = &v10[2].mBuffers[0].mData;
      do
      {
        BOOL v32 = *p_mData;
        p_mData += 2;
        *(void *)(*((void *)this + 84) + v29) = v32;
        v29 += 8;
      }
      while (v30 != v29);
    }
    float v33 = (float)a5 / *((float *)this + 145);
    *((float *)this + 143) = v33;
    vDSP_Length v34 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUSPLMeter *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v34, 8u, v33, 0);
    float v35 = *((float *)this + 133);
    float v36 = *((float *)this + 144);
    float v37 = 0.0;
    float v38 = 0.0;
    if (*((unsigned char *)this + 548))
    {
      float v39 = LoudnessMeter::Process(*((LoudnessMeter **)this + 81), *((float ***)this + 84), a5);
      if (v35 > v36)
      {
        float v40 = fmax(v39, 1.0e-15);
        float v38 = fmaxf(*((float *)this + 136) + (float)(log10f(v40) * 10.0), 0.0);
      }
    }
    *((float *)this + 138) = v38;
    int v41 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUSPLMeter *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v41, 3u, v38, 0);
    if (*((unsigned char *)this + 556))
    {
      float v42 = LoudnessMeter::Process(*((LoudnessMeter **)this + 82), *((float ***)this + 84), a5);
      if (v35 > v36)
      {
        float v43 = fmax(v42, 1.0e-15);
        float v37 = fmaxf(*((float *)this + 136) + (float)(log10f(v43) * 10.0), 0.0);
      }
    }
    *((float *)this + 140) = v37;
    float v44 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUSPLMeter *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v44, 5u, v37, 0);
    float v45 = 0.0;
    if (*((unsigned char *)this + 564))
    {
      float v46 = LoudnessMeter::Process(*((LoudnessMeter **)this + 83), *((float ***)this + 84), a5);
      if (v35 > v36)
      {
        float v47 = fmax(v46, 1.0e-15);
        float v45 = log10f(v47) * 10.0;
      }
    }
    *((float *)this + 142) = v45;
    float v48 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUSPLMeter *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v48, 7u, v45, 0);
  }
  return 0;
}

uint64_t AUSPLMeter::CanScheduleParameters(AUSPLMeter *this)
{
  return 0;
}

uint64_t AUSPLMeter::SetParameter(AUSPLMeter *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5, UInt32 a6)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  if (!a3)
  {
    switch(a2)
    {
      case 0u:
        (*(void (**)(AUSPLMeter *, void, void, void, char *))(*(void *)this + 144))(this, 0, 0, 0, (char *)this + 532);
        float v15 = AUSPLMeter::MapVolume(*((float **)this + 75), *((void *)this + 76), *((void *)this + 78), *((void *)this + 79), *((float *)this + 133));
        *((float *)this + 134) = v15;
        uint64_t v16 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUSPLMeter *)((char *)this + 32), 0);
        ausdk::AUElement::SetParameter(v16, 0xAu, v15, 0);
        float v17 = (float)((float)(*((float *)this + 134) + *((float *)this + 135)) - *((float *)this + 146)) + 13.0;
        *((float *)this + 136) = v17;
        unsigned int v18 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUSPLMeter *)((char *)this + 32), 0);
        ausdk::AUElement::SetParameter(v18, 0xBu, v17, 0);
        if (AUSPLMeterLogScope(void)::once != -1) {
          dispatch_once(&AUSPLMeterLogScope(void)::once, &__block_literal_global_4305);
        }
        if (AUSPLMeterLogScope(void)::scope)
        {
          unint64_t v19 = *(NSObject **)AUSPLMeterLogScope(void)::scope;
          if (!*(void *)AUSPLMeterLogScope(void)::scope) {
            return 0;
          }
        }
        else
        {
          unint64_t v19 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
        {
          double v24 = *((float *)this + 133);
          double v25 = *((float *)this + 134);
          inCFArrayRef Value = 4.8153e-34;
          float v31 = "AUSPLMeter.cpp";
          __int16 v32 = 1024;
          int v33 = 522;
          __int16 v34 = 2048;
          double v35 = v24;
          __int16 v36 = 2048;
          double v37 = v25;
          long long v26 = "%25s:%-5d Volume Input/Mapped: %f, %f";
          long long v27 = v19;
          uint32_t v28 = 38;
          goto LABEL_24;
        }
        return 0;
      case 1u:
        uint64_t v20 = (float *)((char *)this + 540);
        (*(void (**)(AUSPLMeter *, uint64_t, void, void, char *))(*(void *)this + 144))(this, 1, 0, 0, (char *)this + 540);
        float v21 = (float)((float)(*((float *)this + 134) + *((float *)this + 135)) - *((float *)this + 146)) + 13.0;
        *((float *)this + 136) = v21;
        size_t v22 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUSPLMeter *)((char *)this + 32), 0);
        ausdk::AUElement::SetParameter(v22, 0xBu, v21, 0);
        if (AUSPLMeterLogScope(void)::once != -1) {
          dispatch_once(&AUSPLMeterLogScope(void)::once, &__block_literal_global_4305);
        }
        if (AUSPLMeterLogScope(void)::scope)
        {
          size_t v23 = *(NSObject **)AUSPLMeterLogScope(void)::scope;
          if (!*(void *)AUSPLMeterLogScope(void)::scope) {
            return 0;
          }
        }
        else
        {
          size_t v23 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
        {
          double v29 = *v20;
          inCFArrayRef Value = 4.8152e-34;
          float v31 = "AUSPLMeter.cpp";
          __int16 v32 = 1024;
          int v33 = 529;
          __int16 v34 = 2048;
          double v35 = v29;
          long long v26 = "%25s:%-5d Output Sensitivity: %f";
          long long v27 = v23;
          uint32_t v28 = 28;
LABEL_24:
          _os_log_impl(&dword_1BB0CE000, v27, OS_LOG_TYPE_DEBUG, v26, (uint8_t *)&inValue, v28);
        }
        break;
      case 2u:
        inCFArrayRef Value = 0.0;
        (*(void (**)(AUSPLMeter *, uint64_t, void, void, AudioUnitParameterValue *))(*(void *)this
                                                                                                 + 144))(this, 2, 0, 0, &inValue);
        *((unsigned char *)this + 548) = inValue > 0.0;
        return 0;
      case 4u:
        inCFArrayRef Value = 0.0;
        (*(void (**)(AUSPLMeter *, uint64_t, void, void, AudioUnitParameterValue *))(*(void *)this
                                                                                                 + 144))(this, 4, 0, 0, &inValue);
        *((unsigned char *)this + 556) = inValue > 0.0;
        return 0;
      case 6u:
        inCFArrayRef Value = 0.0;
        (*(void (**)(AUSPLMeter *, uint64_t, void, void, AudioUnitParameterValue *))(*(void *)this
                                                                                                 + 144))(this, 6, 0, 0, &inValue);
        *((unsigned char *)this + 564) = inValue > 0.0;
        return 0;
      case 0xCu:
        inCFArrayRef Value = 0.0;
        (*(void (**)(AUSPLMeter *, uint64_t, void, void, AudioUnitParameterValue *))(*(void *)this
                                                                                                 + 144))(this, 12, 0, 0, &inValue);
        AudioUnitSetParameter(*((AudioUnit *)this + 87), 5u, 0, a4, inValue, a6);
        return 0;
      default:
        return 0;
    }
  }
  return 0;
}

float AUSPLMeter::MapVolume(float *a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  if (*a1 >= a5) {
    return *(float *)a3;
  }
  if (*(float *)(a2 - 4) <= a5) {
    return *(float *)(a4 - 4);
  }
  unint64_t v5 = (unint64_t)(a2 - (void)a1) >> 2;
  if (v5 < 2)
  {
    LODWORD(v5) = 1;
  }
  else
  {
    uint64_t v6 = 1;
    while (a1[v6] < a5)
    {
      if (((unint64_t)(a2 - (void)a1) >> 2) == ++v6) {
        return *(float *)(a3 + 4 * v5)
      }
             + (float)((float)(*(float *)(a3 + 4 * (v5 - 1)) - *(float *)(a3 + 4 * v5))
                     * (float)((float)(a5 - a1[v5])
                             / (float)(a1[(v5 - 1)] - a1[v5])));
    }
    LODWORD(v5) = v6;
  }
  return *(float *)(a3 + 4 * v5)
       + (float)((float)(*(float *)(a3 + 4 * (v5 - 1)) - *(float *)(a3 + 4 * v5))
               * (float)((float)(a5 - a1[v5]) / (float)(a1[(v5 - 1)] - a1[v5])));
}

void ___ZL18AUSPLMeterLogScopev_block_invoke()
{
}

uint64_t AUSPLMeter::SetProperty(AUSPLMeter *this, int a2, int a3, AudioUnitElement a4, CFTypeRef *a5, UInt32 a6)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 <= 64001)
  {
    if (a2 == 21)
    {
      if (a6 < 4) {
        return 4294956445;
      }
      uint64_t result = 0;
      *((unsigned char *)this + 528) = *(_DWORD *)a5 != 0;
      return result;
    }
    if (a2 != 64001) {
      return result;
    }
    CFTypeRef v8 = *a5;
    if (*a5) {
      CFRetain(*a5);
    }
    applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&cf, v8);
    if (!cf)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t v72 = 136315394;
        *(void *)&v72[4] = "AUSPLMeter.cpp";
        *(_WORD *)&v72[12] = 1024;
        *(_DWORD *)&v72[14] = 428;
        _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Invalid value for kAUSPLMeterProperty_VolumeMap", v72, 0x12u);
      }
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = &unk_1F14C8B68;
      exception[2] = 2003329396;
    }
    CFArrayRef v9 = (const __CFArray *)applesauce::CF::details::at_key<char const(&)[9]>((const __CFDictionary *)cf, "InputMap");
    if (v9)
    {
      applesauce::CF::convert_as<std::vector<float>,0>((uint64_t)v72, v9);
    }
    else
    {
      v72[0] = 0;
      char v73 = 0;
    }
    if (!cf)
    {
      float v46 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v46, "Could not construct");
    }
    CFArrayRef v12 = (const __CFArray *)applesauce::CF::details::at_key<char const(&)[10]>((const __CFDictionary *)cf, "OutputMap");
    if (v12)
    {
      applesauce::CF::convert_as<std::vector<float>,0>((uint64_t)&v65, v12);
    }
    else
    {
      LOBYTE(v65) = 0;
      char v67 = 0;
    }
    if (v73)
    {
      if (v67)
      {
        __src = 0;
        uint64_t v63 = 0;
        uint64_t v64 = 0;
        uint64_t v13 = *(void **)v72;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__src, *(const void **)v72, *(uint64_t *)&v72[8], (uint64_t)(*(void *)&v72[8] - *(void *)v72) >> 2);
        uint64_t v59 = 0;
        unsigned int v60 = 0;
        uint64_t v61 = 0;
        unint64_t v14 = v65;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v59, v65, v66, (v66 - (uint64_t)v65) >> 2);
        unint64_t v15 = v63 - (unsigned char *)__src;
        unint64_t v16 = (unint64_t)(v63 - (unsigned char *)__src) >> 2;
        unint64_t v17 = v60 - (unsigned char *)v59;
        if (v16 == ((unint64_t)(v60 - (unsigned char *)v59) >> 2))
        {
          if (v16 > 1)
          {
            if (!AUSPLMeter::ValidateMap((float **)&__src))
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                AUSPLMeter::ConvertToString(v70, &__src);
                long long v54 = v71 >= 0 ? v70 : (void **)v70[0];
                *(_DWORD *)AudioChannelLayout buf = 136315650;
                uint64_t v75 = "AUSPLMeter.cpp";
                __int16 v76 = 1024;
                int v77 = 598;
                __int16 v78 = 2080;
                uint64_t v79 = v54;
                _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Input volume curve is not monotonic. %s", buf, 0x1Cu);
                if (v71 < 0) {
                  operator delete(v70[0]);
                }
              }
              __int16 v55 = __cxa_allocate_exception(0x10uLL);
              *(void *)__int16 v55 = &unk_1F14C8B68;
              v55[2] = 2003329396;
            }
            if (!AUSPLMeter::ValidateMap((float **)&v59))
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                AUSPLMeter::ConvertToString(v70, &v59);
                int v56 = v71 >= 0 ? v70 : (void **)v70[0];
                *(_DWORD *)AudioChannelLayout buf = 136315650;
                uint64_t v75 = "AUSPLMeter.cpp";
                __int16 v76 = 1024;
                int v77 = 601;
                __int16 v78 = 2080;
                uint64_t v79 = v56;
                _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Output volume curve is not monotonic. %s", buf, 0x1Cu);
                if (v71 < 0) {
                  operator delete(v70[0]);
                }
              }
              __int16 v57 = __cxa_allocate_exception(0x10uLL);
              *(void *)__int16 v57 = &unk_1F14C8B68;
              v57[2] = 2003329396;
            }
            unint64_t v18 = (v15 >> 2);
            unint64_t v19 = (void *)*((void *)this + 75);
            if (v18 != (uint64_t)(*((void *)this + 76) - (void)v19) >> 2)
            {
              std::vector<float>::resize((uint64_t)this + 600, v18);
              unint64_t v19 = (void *)*((void *)this + 75);
            }
            memcpy(v19, __src, 4 * v18);
            unint64_t v20 = (v17 >> 2);
            float v21 = (void *)*((void *)this + 78);
            if (v20 != (uint64_t)(*((void *)this + 79) - (void)v21) >> 2)
            {
              std::vector<float>::resize((uint64_t)this + 624, v20);
              float v21 = (void *)*((void *)this + 78);
            }
            memcpy(v21, v59, 4 * v20);
            size_t v22 = (float *)*((void *)this + 75);
            size_t v23 = (float *)*((void *)this + 76);
            if (v22 != v23)
            {
              double v24 = v22 + 1;
              if (v22 + 1 != v23)
              {
                float v25 = *v22;
                long long v26 = v22 + 1;
                do
                {
                  float v27 = *v26++;
                  float v28 = v27;
                  if (v27 < v25)
                  {
                    float v25 = v28;
                    size_t v22 = v24;
                  }
                  double v24 = v26;
                }
                while (v26 != v23);
              }
            }
            *((float *)this + 144) = *v22;
            AUSPLMeter::ConvertToString(v70, (void *)this + 75);
            if (AUSPLMeterLogScope(void)::once != -1) {
              dispatch_once(&AUSPLMeterLogScope(void)::once, &__block_literal_global_4305);
            }
            if (AUSPLMeterLogScope(void)::scope)
            {
              double v29 = *(NSObject **)AUSPLMeterLogScope(void)::scope;
              if (!*(void *)AUSPLMeterLogScope(void)::scope) {
                goto LABEL_54;
              }
            }
            else
            {
              double v29 = MEMORY[0x1E4F14500];
            }
            if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v30 = v70;
              if (v71 < 0) {
                uint64_t v30 = (void **)v70[0];
              }
              *(_DWORD *)AudioChannelLayout buf = 136315650;
              uint64_t v75 = "AUSPLMeter.cpp";
              __int16 v76 = 1024;
              int v77 = 661;
              __int16 v78 = 2080;
              uint64_t v79 = v30;
              _os_log_impl(&dword_1BB0CE000, v29, OS_LOG_TYPE_DEBUG, "%25s:%-5d Volume Input Map: %s", buf, 0x1Cu);
            }
LABEL_54:
            AUSPLMeter::ConvertToString(__p, (void *)this + 78);
            if (AUSPLMeterLogScope(void)::once != -1) {
              dispatch_once(&AUSPLMeterLogScope(void)::once, &__block_literal_global_4305);
            }
            if (AUSPLMeterLogScope(void)::scope)
            {
              float v31 = *(NSObject **)AUSPLMeterLogScope(void)::scope;
              if (!*(void *)AUSPLMeterLogScope(void)::scope)
              {
LABEL_64:
                if (v69 < 0) {
                  operator delete(__p[0]);
                }
                if (v71 < 0) {
                  operator delete(v70[0]);
                }
                if (v59)
                {
                  unsigned int v60 = v59;
                  operator delete(v59);
                }
                if (__src)
                {
                  uint64_t v63 = __src;
                  operator delete(__src);
                }
                if (v14) {
                  operator delete(v14);
                }
                if (v13) {
                  operator delete(v13);
                }
                float v33 = AUSPLMeter::MapVolume(*((float **)this + 75), *((void *)this + 76), *((void *)this + 78), *((void *)this + 79), *((float *)this + 133));
                *((float *)this + 134) = v33;
                uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUSPLMeter *)((char *)this + 32), 0);
                ausdk::AUElement::SetParameter(Element, 0xAu, v33, 0);
                double v35 = (float *)*((void *)this + 78);
                __int16 v36 = (float *)*((void *)this + 79);
                if (v35 != v36)
                {
                  double v37 = v35 + 1;
                  if (v35 + 1 != v36)
                  {
                    float v38 = *v35;
                    float v39 = v35 + 1;
                    do
                    {
                      float v40 = *v39++;
                      float v41 = v40;
                      if (v38 < v40)
                      {
                        float v38 = v41;
                        double v35 = v37;
                      }
                      double v37 = v39;
                    }
                    while (v39 != v36);
                  }
                }
                float v42 = *v35;
                *((float *)this + 146) = *v35;
                float v43 = (float)((float)(*((float *)this + 134) + *((float *)this + 135)) - v42) + 13.0;
                *((float *)this + 136) = v43;
                float v44 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUSPLMeter *)((char *)this + 32), 0);
                ausdk::AUElement::SetParameter(v44, 0xBu, v43, 0);
                if (cf) {
                  CFRelease(cf);
                }
                return 0;
              }
            }
            else
            {
              float v31 = MEMORY[0x1E4F14500];
            }
            if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
            {
              __int16 v32 = __p;
              if (v69 < 0) {
                __int16 v32 = (void **)__p[0];
              }
              *(_DWORD *)AudioChannelLayout buf = 136315650;
              uint64_t v75 = "AUSPLMeter.cpp";
              __int16 v76 = 1024;
              int v77 = 664;
              __int16 v78 = 2080;
              uint64_t v79 = v32;
              _os_log_impl(&dword_1BB0CE000, v31, OS_LOG_TYPE_DEBUG, "%25s:%-5d Volume Output Map: %s", buf, 0x1Cu);
            }
            goto LABEL_64;
          }
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
LABEL_101:
            float v53 = __cxa_allocate_exception(0x10uLL);
            *(void *)float v53 = &unk_1F14C8B68;
            v53[2] = 2003329396;
          }
          *(_DWORD *)AudioChannelLayout buf = 136315650;
          uint64_t v75 = "AUSPLMeter.cpp";
          __int16 v76 = 1024;
          int v77 = 594;
          __int16 v78 = 1024;
          LODWORD(v79) = v16;
          unsigned int v50 = MEMORY[0x1E4F14500];
          uint64_t v51 = "%25s:%-5d  Not enough volume map points. Mapping requires 2 or more points. Only found %d.";
          uint32_t v52 = 24;
        }
        else
        {
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_101;
          }
          *(_DWORD *)AudioChannelLayout buf = 136315394;
          uint64_t v75 = "AUSPLMeter.cpp";
          __int16 v76 = 1024;
          int v77 = 593;
          unsigned int v50 = MEMORY[0x1E4F14500];
          uint64_t v51 = "%25s:%-5d  Volume curve steps must match";
          uint32_t v52 = 18;
        }
        _os_log_impl(&dword_1BB0CE000, v50, OS_LOG_TYPE_ERROR, v51, buf, v52);
        goto LABEL_101;
      }
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
LABEL_95:
        float v49 = __cxa_allocate_exception(0x10uLL);
        *(void *)float v49 = &unk_1F14C8B68;
        v49[2] = 2003329396;
      }
      *(_DWORD *)AudioChannelLayout buf = 136315394;
      uint64_t v75 = "AUSPLMeter.cpp";
      __int16 v76 = 1024;
      int v77 = 584;
      float v47 = MEMORY[0x1E4F14500];
      float v48 = "%25s:%-5d  Output volume curve cannot be null";
    }
    else
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_95;
      }
      *(_DWORD *)AudioChannelLayout buf = 136315394;
      uint64_t v75 = "AUSPLMeter.cpp";
      __int16 v76 = 1024;
      int v77 = 583;
      float v47 = MEMORY[0x1E4F14500];
      float v48 = "%25s:%-5d  Input volume curve cannot be null";
    }
    _os_log_impl(&dword_1BB0CE000, v47, OS_LOG_TYPE_ERROR, v48, buf, 0x12u);
    goto LABEL_95;
  }
  if (a2 == 64002)
  {
    unint64_t v11 = (OpaqueAudioComponentInstance *)*((void *)this + 87);
    return AudioUnitSetProperty(v11, 0, 0, a4, a5, a6);
  }
  else if (a2 == 64003)
  {
    int v10 = *(_DWORD *)a5;
    *((_DWORD *)this + 148) = *(_DWORD *)a5;
    if (v10 == 8228 || v10 == 8212)
    {
      uint64_t result = 0;
      atomic_store(1u, (unsigned __int8 *)this + 588);
    }
    else
    {
      uint64_t result = 0;
      atomic_store(0, (unsigned __int8 *)this + 588);
    }
  }
  return result;
}

void sub_1BB3F5924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a2)
  {
    if (__p)
    {
      a12 = (uint64_t)__p;
      operator delete(__p);
    }
    if (a14)
    {
      a15 = (uint64_t)a14;
      operator delete(a14);
    }
    if (a17) {
      operator delete(a17);
    }
    if (a33 && a30) {
      operator delete(a30);
    }
    applesauce::CF::DictionaryRef::~DictionaryRef(&a10);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BB3F4E58);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BB3F5A30()
{
}

BOOL AUSPLMeter::ValidateMap(float **a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (**a1 <= *(v2 - 1)) {
    goto LABEL_19;
  }
  if (AUSPLMeterLogScope(void)::once != -1) {
    dispatch_once(&AUSPLMeterLogScope(void)::once, &__block_literal_global_4305);
  }
  if (!AUSPLMeterLogScope(void)::scope)
  {
    int v4 = MEMORY[0x1E4F14500];
    goto LABEL_8;
  }
  int v4 = *(NSObject **)AUSPLMeterLogScope(void)::scope;
  if (*(void *)AUSPLMeterLogScope(void)::scope)
  {
LABEL_8:
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      AUSPLMeter::ConvertToString(__p, a1);
      unint64_t v5 = v19 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioChannelLayout buf = 136315650;
      float v21 = "AUSPLMeter.cpp";
      __int16 v22 = 1024;
      int v23 = 623;
      __int16 v24 = 2080;
      float v25 = v5;
      _os_log_impl(&dword_1BB0CE000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Volume Map component is not in increasing order: %s. Reversing the order.", buf, 0x1Cu);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 != v2)
  {
    uint64_t v6 = v2 - 1;
    if (v2 - 1 > v1)
    {
      CFStringRef v7 = v1 + 1;
      do
      {
        int v8 = *((_DWORD *)v7 - 1);
        *(v7 - 1) = *v6;
        *(_DWORD *)v6-- = v8;
      }
      while (v7++ < v6);
    }
  }
LABEL_19:
  uint64_t v10 = (char *)v2 - (char *)v1;
  if ((unint64_t)v10 < 8) {
    return 1;
  }
  unint64_t v12 = v10 >> 2;
  unsigned int v13 = 2;
  unint64_t v14 = 1;
  do
  {
    float v15 = v1[v13 - 2];
    float v16 = v1[v14];
    BOOL result = v15 <= v16;
    unint64_t v14 = v13++;
  }
  while (v15 <= v16 && v12 > v14);
  return result;
}

uint64_t AUSPLMeter::ConvertToString(void *a1, void *a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v7);
  if (a2[1] != *a2)
  {
    unint64_t v4 = 0;
    do
    {
      if (v4) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)", ", 2);
      }
      std::ostream::operator<<();
      ++v4;
    }
    while (v4 < (uint64_t)(a2[1] - *a2) >> 2);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v9, a1);
  v7[0] = *MEMORY[0x1E4FBA408];
  uint64_t v5 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v7 + *(void *)(v7[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  uint64_t v8 = v5;
  v9[0] = MEMORY[0x1E4FBA470] + 16;
  if (v10 < 0) {
    operator delete((void *)v9[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C185D210](&v11);
}

void sub_1BB3F5DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t AUSPLMeter::GetProperty(AUSPLMeter *this, int a2, int a3, AudioUnitElement a4, CFDictionaryRef *outData)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 <= 64001)
  {
    if (a2 != 21)
    {
      if (a2 == 64001)
      {
        unint64_t v17 = 0;
        unint64_t v18 = 0;
        float v16 = (uint64_t *)&v17;
        std::string::basic_string[abi:ne180100]<0>(__p, "InputMap");
        float v21 = __p;
        uint64_t v8 = (char *)(std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v16, __p, (_OWORD **)&v21)+ 7);
        if (v8 != (char *)this + 600) {
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v8, *((char **)this + 75), *((void *)this + 76), (uint64_t)(*((void *)this + 76) - *((void *)this + 75)) >> 2);
        }
        if (SHIBYTE(v20) < 0) {
          operator delete(__p[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "OutputMap");
        float v21 = __p;
        CFArrayRef v9 = (char *)(std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v16, __p, (_OWORD **)&v21)+ 7);
        if (v9 != (char *)this + 624) {
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v9, *((char **)this + 78), *((void *)this + 79), (uint64_t)(*((void *)this + 79) - *((void *)this + 78)) >> 2);
        }
        if (SHIBYTE(v20) < 0) {
          operator delete(__p[0]);
        }
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v20 = 0;
        std::vector<applesauce::CF::TypeRefPair>::reserve(__p, v18);
        char v10 = v16;
        if (v16 != (uint64_t *)&v17)
        {
          do
          {
            std::vector<applesauce::CF::TypeRefPair>::emplace_back<std::string const&,std::vector<float> const&>(__p, (const UInt8 *)v10 + 32, v10 + 7);
            uint64_t v11 = (uint64_t *)v10[1];
            if (v11)
            {
              do
              {
                unint64_t v12 = v11;
                uint64_t v11 = (uint64_t *)*v11;
              }
              while (v11);
            }
            else
            {
              do
              {
                unint64_t v12 = (uint64_t *)v10[2];
                BOOL v13 = *v12 == (void)v10;
                char v10 = v12;
              }
              while (!v13);
            }
            char v10 = v12;
          }
          while (v12 != (uint64_t *)&v17);
        }
        CFDictionaryRef CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((void ***)__p);
        float v21 = __p;
        std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100](&v21);
        CFRetain(CFDictionaryRef);
        *outData = CFDictionaryRef;
        if (CFDictionaryRef) {
          CFRelease(CFDictionaryRef);
        }
        std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(v17);
        return 0;
      }
      return result;
    }
    uint64_t result = 0;
    int v15 = *((unsigned __int8 *)this + 528);
LABEL_29:
    *(_DWORD *)outData = v15;
    return result;
  }
  if (a2 == 64002)
  {
    LODWORD(__p[0]) = 0;
    return AudioUnitGetProperty(*((AudioUnit *)this + 87), 0, 0, a4, outData, (UInt32 *)__p);
  }
  if (a2 == 64003)
  {
    uint64_t result = 0;
    int v15 = *((_DWORD *)this + 148);
    goto LABEL_29;
  }
  return result;
}

void sub_1BB3F6014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, void **a2, _OWORD **a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (!v5)
  {
    uint64_t v8 = a1 + 1;
LABEL_9:
    char v10 = (uint64_t *)operator new(0x50uLL);
    uint64_t v11 = *a3;
    uint64_t v12 = *((void *)*a3 + 2);
    *((_OWORD *)v10 + 2) = **a3;
    v10[6] = v12;
    *uint64_t v11 = 0;
    v11[1] = 0;
    v11[2] = 0;
    v10[8] = 0;
    v10[9] = 0;
    v10[7] = 0;
    *char v10 = 0;
    v10[1] = 0;
    v10[2] = (uint64_t)v8;
    *uint64_t v6 = v10;
    BOOL v13 = (uint64_t *)**a1;
    unint64_t v14 = v10;
    if (v13)
    {
      *a1 = v13;
      unint64_t v14 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v14);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v10;
  }
  while (1)
  {
    while (1)
    {
      uint64_t v8 = (uint64_t **)v5;
      CFArrayRef v9 = v5 + 4;
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (void **)v5 + 4) & 0x80) == 0) {
        break;
      }
      uint64_t v5 = *v8;
      uint64_t v6 = v8;
      if (!*v8) {
        goto LABEL_9;
      }
    }
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v9, a2) & 0x80) == 0) {
      break;
    }
    uint64_t v6 = v8 + 1;
    uint64_t v5 = v8[1];
    if (!v5) {
      goto LABEL_9;
    }
  }
  char v10 = *v6;
  if (!*v6) {
    goto LABEL_9;
  }
  return v10;
}

uint64_t std::vector<applesauce::CF::TypeRefPair>::emplace_back<std::string const&,std::vector<float> const&>(void *a1, const UInt8 *a2, void *a3)
{
  unint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  unint64_t v7 = v8;
  unint64_t v9 = *(void *)(v6 - 8);
  if (v9 >= v8)
  {
    uint64_t v12 = (uint64_t)(v9 - *a1) >> 4;
    if ((unint64_t)(v12 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = v7 - *a1;
    uint64_t v14 = v13 >> 3;
    if (v13 >> 3 <= (unint64_t)(v12 + 1)) {
      uint64_t v14 = v12 + 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    uint64_t v21 = v6;
    if (v15) {
      float v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,applesauce::CF::DictionaryRef>>>(v6, v15);
    }
    else {
      float v16 = 0;
    }
    unint64_t v17 = v16;
    unint64_t v18 = (CFStringRef *)&v16[16 * v12];
    uint64_t v20 = &v16[16 * v15];
    applesauce::CF::TypeRefPair::TypeRefPair<std::string const&,std::vector<float> const&>(v18, a2, a3);
    char v19 = v18 + 2;
    std::vector<applesauce::CF::TypeRefPair>::__swap_out_circular_buffer(a1, &v17);
    unint64_t v11 = a1[1];
    uint64_t result = std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer((uint64_t)&v17);
  }
  else
  {
    uint64_t result = (uint64_t)applesauce::CF::TypeRefPair::TypeRefPair<std::string const&,std::vector<float> const&>(*(CFStringRef **)(v6 - 8), a2, a3);
    unint64_t v11 = v9 + 16;
    a1[1] = v9 + 16;
  }
  a1[1] = v11;
  return result;
}

void sub_1BB3F627C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<float>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<float>>,0>(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    int v3 = *(void **)a1;
    operator delete(v3);
  }
}

CFStringRef *applesauce::CF::TypeRefPair::TypeRefPair<std::string const&,std::vector<float> const&>(CFStringRef *a1, const UInt8 *a2, void *a3)
{
  CFIndex v5 = *((void *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    CFIndex v6 = a2[23];
  }
  else
  {
    a2 = *(const UInt8 **)a2;
    CFIndex v6 = v5;
  }
  CFStringRef v7 = CFStringCreateWithBytes(0, a2, v6, 0x8000100u, 0);
  *a1 = v7;
  if (!v7)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  a1[1] = (CFStringRef)applesauce::CF::details::make_CFArrayRef<float>(a3);
  return a1;
}

void sub_1BB3F63F4(_Unwind_Exception *exception_object)
{
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUSPLMeter::GetPropertyInfo(AUSPLMeter *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3) {
    return 4294956417;
  }
  unsigned int v7 = 4;
  uint64_t result = 4294956417;
  if (a2 <= 64001)
  {
    if (a2 != 21)
    {
      if (a2 != 64001) {
        return result;
      }
      goto LABEL_10;
    }
    goto LABEL_11;
  }
  if (a2 == 64002)
  {
LABEL_10:
    unsigned int v7 = 8;
    goto LABEL_11;
  }
  if (a2 == 64003)
  {
LABEL_11:
    uint64_t result = 0;
    *a6 = 1;
    *a5 = v7;
  }
  return result;
}

uint64_t AUSPLMeter::Reset(AUSPLMeter *this)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (OpaqueAudioComponentInstance *)*((void *)this + 87);
  if (v1)
  {
    OSStatus v2 = AudioUnitReset(v1, 0, 0);
    if (v2)
    {
      OSStatus v3 = v2;
      if (AUSPLMeterLogScope(void)::once != -1) {
        dispatch_once(&AUSPLMeterLogScope(void)::once, &__block_literal_global_4305);
      }
      if (AUSPLMeterLogScope(void)::scope)
      {
        unint64_t v4 = *(NSObject **)AUSPLMeterLogScope(void)::scope;
        if (!*(void *)AUSPLMeterLogScope(void)::scope) {
          return 0;
        }
      }
      else
      {
        unint64_t v4 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        int v6 = 136315650;
        unsigned int v7 = "AUSPLMeter.cpp";
        __int16 v8 = 1024;
        int v9 = 246;
        __int16 v10 = 1024;
        OSStatus v11 = v3;
        _os_log_impl(&dword_1BB0CE000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Embedded VarEQ fails with error %u", (uint8_t *)&v6, 0x18u);
      }
    }
  }
  return 0;
}

uint64_t AUSPLMeter::Initialize(AUSPLMeter *this)
{
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUSPLMeter *)((char *)this + 80), 0);
  long long v3 = *(_OWORD *)(Element + 96);
  *(_OWORD *)&v8.Float64 mSampleRate = *(_OWORD *)(Element + 80);
  *(_OWORD *)&v8.mBytesPerPacket = v3;
  *(void *)&v8.mBitsPerChannel = *(void *)(Element + 112);
  uint64_t v4 = ausdk::AUScope::SafeGetElement((AUSPLMeter *)((char *)this + 128), 0);
  long long v5 = *(_OWORD *)(v4 + 96);
  *(_OWORD *)&v7.Float64 mSampleRate = *(_OWORD *)(v4 + 80);
  *(_OWORD *)&v7.mBytesPerPacket = v5;
  *(void *)&v7.mBitsPerChannel = *(void *)(v4 + 112);
  if (v8.mSampleRate == v7.mSampleRate
    && v8.mFormatID == v7.mFormatID
    && *(void *)&v8.mBytesPerPacket == *(void *)&v7.mBytesPerPacket
    && *(void *)&v8.mChannelsPerFrame == *(void *)&v7.mChannelsPerFrame
    && CA::Implementation::EquivalentFormatFlags((CA::Implementation *)&v8, &v7, 0, 0)
    && v8.mChannelsPerFrame <= 2)
  {
    std::vector<void const*>::resize((uint64_t)this + 672, v8.mChannelsPerFrame);
    operator new();
  }
  return 4294956428;
}

void sub_1BB3F6814(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t std::default_delete<LoudnessMeter>::operator()[abi:ne180100](uint64_t a1)
{
  OSStatus v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(void *)(a1 + 104) = v2;
    operator delete(v2);
  }
  long long v5 = (void **)(a1 + 72);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Biquad::SetupWrapper *)(a1 + 48));
  long long v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  return MEMORY[0x1C185D370](a1, 0x10A0C40D09BC750);
}

void *CA::AudioBuffers::AudioBuffers(CA::AudioBuffers *this, const AudioStreamBasicDescription *a2)
{
  uint64_t v3 = ExtendedAudioBufferList_CreateWithFormat();

  return CA::AudioBuffers::AudioBuffers(this, v3);
}

void std::default_delete<CA::AudioBuffers>::operator()[abi:ne180100]()
{
  ExtendedAudioBufferList_Destroy();

  JUMPOUT(0x1C185D370);
}

OpaqueAudioComponentInstance *AUSPLMeter::InitializeVarEQ(AudioUnit *this)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  AudioUnitUninitialize(this[87]);
  uint64_t Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(this + 10), 0);
  long long v3 = *(_OWORD *)(Element + 96);
  inData[0] = *(_OWORD *)(Element + 80);
  inData[1] = v3;
  uint64_t v18 = *(void *)(Element + 112);
  uint64_t v4 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(this + 16), 0);
  long long v5 = *(_OWORD *)(v4 + 96);
  v15[0] = *(_OWORD *)(v4 + 80);
  v15[1] = v5;
  uint64_t v16 = *(void *)(v4 + 112);
  uint64_t result = (OpaqueAudioComponentInstance *)AudioUnitSetProperty(this[87], 8u, 1u, 0, inData, 0x28u);
  if (!result)
  {
    uint64_t result = (OpaqueAudioComponentInstance *)AudioUnitSetProperty(this[87], 8u, 2u, 0, v15, 0x28u);
    if (!result)
    {
      uint64_t result = this[87];
      if (result)
      {
        uint64_t result = (OpaqueAudioComponentInstance *)AudioUnitInitialize(result);
        if (!result)
        {
          *((unsigned char *)this + 596) = 1;
          if (queryBuildType(void)::once != -1) {
            dispatch_once(&queryBuildType(void)::once, &__block_literal_global_99);
          }
          if (!gIsInternal) {
            return 0;
          }
          CFPreferencesAppSynchronize(@"com.apple.coreaudio");
          BOOL v14 = 0;
          AppBooleanCFBooleanRef Value = CACFPreferencesGetAppBooleanValue(@"auspl_lc_menu", @"com.apple.coreaudio", &v14);
          if (!v14) {
            return 0;
          }
          if (!AppBooleanValue) {
            return 0;
          }
          CFPreferencesAppSynchronize(@"com.apple.MobileBluetooth.debug");
          CFDictionaryRef v8 = (const __CFDictionary *)CFPreferencesCopyAppValue(@"A2DP", @"com.apple.MobileBluetooth.debug");
          if (!v8) {
            return 0;
          }
          CFDictionaryRef v9 = v8;
          *((unsigned char *)this + 596) = 0;
          if (CFDictionaryContainsKey(v8, @"LoudnessCompensationEQEnable"))
          {
            CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(v9, @"LoudnessCompensationEQEnable");
            *((unsigned char *)this + 596) = CFBooleanGetValue(Value) != 0;
          }
          if (AUSPLMeterLogScope(void)::once != -1) {
            dispatch_once(&AUSPLMeterLogScope(void)::once, &__block_literal_global_4305);
          }
          if (AUSPLMeterLogScope(void)::scope)
          {
            OSStatus v11 = *(NSObject **)AUSPLMeterLogScope(void)::scope;
            if (!*(void *)AUSPLMeterLogScope(void)::scope)
            {
LABEL_24:
              CFRelease(v9);
              return 0;
            }
          }
          else
          {
            OSStatus v11 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v12 = "YES";
            int v13 = *((unsigned __int8 *)this + 596);
            uint64_t v20 = "AUSPLMeter.cpp";
            *(_DWORD *)AudioChannelLayout buf = 136315650;
            if (!v13) {
              uint64_t v12 = "NO";
            }
            __int16 v21 = 1024;
            int v22 = 300;
            __int16 v23 = 2080;
            __int16 v24 = v12;
            _os_log_impl(&dword_1BB0CE000, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d LoudnessCompensationEQEnable defaults-preferences is enabled: %s", buf, 0x1Cu);
          }
          goto LABEL_24;
        }
      }
    }
  }
  return result;
}

void *CA::AudioBuffers::AudioBuffers(void *a1, uint64_t a2)
{
  *a1 = a2;
  if (!a2)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "ExtendedAudioBufferList_CreateWithFormat failed");
    goto LABEL_6;
  }
  if (!ExtendedAudioBufferList_Prepare())
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "ExtendedAudioBufferList_Prepare failed");
LABEL_6:
  }
  return a1;
}

void sub_1BB3F6CD0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void AUSPLMeter::~AUSPLMeter(AUSPLMeter *this)
{
  AUSPLMeter::~AUSPLMeter(this);

  JUMPOUT(0x1C185D370);
}

{
  void (**v2)(AUSPLMeter *);
  OpaqueAudioComponentInstance *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t vars8;

  OSStatus v2 = (void (**)(AUSPLMeter *))&unk_1F14AD490;
  *(void *)this = &unk_1F14AD490;
  long long v3 = (OpaqueAudioComponentInstance *)*((void *)this + 87);
  if (v3)
  {
    AudioComponentInstanceDispose(v3);
    *((void *)this + 87) = 0;
    OSStatus v2 = *(void (***)(AUSPLMeter *))this;
  }
  v2[8](this);
  uint64_t v4 = *((void *)this + 88);
  *((void *)this + 88) = 0;
  if (v4) {
    std::default_delete<CA::AudioBuffers>::operator()[abi:ne180100]();
  }
  long long v5 = (void *)*((void *)this + 84);
  if (v5)
  {
    *((void *)this + 85) = v5;
    operator delete(v5);
  }
  int v6 = *((void *)this + 83);
  *((void *)this + 83) = 0;
  if (v6) {
    std::default_delete<LoudnessMeter>::operator()[abi:ne180100](v6);
  }
  AudioStreamBasicDescription v7 = *((void *)this + 82);
  *((void *)this + 82) = 0;
  if (v7) {
    std::default_delete<LoudnessMeter>::operator()[abi:ne180100](v7);
  }
  CFDictionaryRef v8 = *((void *)this + 81);
  *((void *)this + 81) = 0;
  if (v8) {
    std::default_delete<LoudnessMeter>::operator()[abi:ne180100](v8);
  }
  CFDictionaryRef v9 = (void *)*((void *)this + 78);
  if (v9)
  {
    *((void *)this + 79) = v9;
    operator delete(v9);
  }
  __int16 v10 = (void *)*((void *)this + 75);
  if (v10)
  {
    *((void *)this + 76) = v10;
    operator delete(v10);
  }

  ausdk::AUBase::~AUBase(this);
}

void ULDATFeaturesChain::GetSuperFeatureDimensions(int a1, std::vector<unsigned int> *this)
{
  std::vector<unsigned int>::resize(this, 3uLL);
  begiuint64_t n = this->__begin_;
  std::vector<unsigned int>::pointer end = this->__end_;
  if (this->__begin_ != end)
  {
    memset_pattern16(begin, &unk_1BB87C0D0, (((char *)end - (char *)begin - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
  }
}

uint64_t ULDATFeaturesChain::GetNumSuperFeatures(ULDATFeaturesChain *this)
{
  return 3;
}

uint64_t ULDATFeaturesChain::GetInputAudioFormat(uint64_t a1, void *outData)
{
  UInt32 ioDataSize = 40;
  return AudioUnitGetProperty(*(AudioUnit *)(a1 + 64), 8u, 1u, 0, outData, &ioDataSize);
}

uint64_t ULDATFeaturesChain::ComputeAllFeaturesFromAudio(uint64_t a1, uint64_t a2, UInt32 a3, Float64 *a4, uint64_t a5, void *a6)
{
  inInputBufferLists[1] = *(AudioBufferList **)MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 16) != a3) {
    __assert_rtn("ComputeAllFeaturesFromAudio", "ULDATFeaturesChain.cpp", 322, "numAudioSamples == mAudioBufferSize");
  }
  inTimeStamp.mSampleTime = *a4;
  memset(&inTimeStamp.mHostTime, 0, 24);
  *(void *)&inTimeStamp.mFlags = 1;
  Biquad::Process_Float32(*(Biquad **)(a1 + 56), *(float **)(a2 + 16), *(float **)(a5 + 16), a3);
  AudioUnitRenderActionFlags ioActionFlags = 512;
  ioOutputBufferLists = (AudioBufferList *)a5;
  inInputBufferLists[0] = (AudioBufferList *)a5;
  uint64_t v11 = AudioUnitProcessMultiple(*(AudioUnit *)(a1 + 64), &ioActionFlags, &inTimeStamp, a3, 1u, (const AudioBufferList **)inInputBufferLists, 1u, &ioOutputBufferLists);
  if (v11)
  {
    uint64_t v12 = v11;
    if (EndpointVAD2LogScope(void)::once != -1) {
      dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_6);
    }
    if (EndpointVAD2LogScope(void)::scope)
    {
      int v13 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
      if (!*(void *)EndpointVAD2LogScope(void)::scope) {
        return v12;
      }
    }
    else
    {
      int v13 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioChannelLayout buf = 136315394;
      __int16 v36 = "ULDATFeaturesChain.cpp";
      __int16 v37 = 1024;
      int v38 = 355;
      unint64_t v15 = "%25s:%-5d Noise suppressor failed to process.";
LABEL_45:
      _os_log_impl(&dword_1BB0CE000, v13, OS_LOG_TYPE_ERROR, v15, buf, 0x12u);
      return v12;
    }
    return v12;
  }
  uint64_t v14 = AudioUnitProcess(*(AudioUnit *)(a1 + 72), &ioActionFlags, &inTimeStamp, a3, (AudioBufferList *)a5);
  if (!v14)
  {
    uint64_t v16 = (AudioUnitParameterValue *)a6[3];
    if ((AudioUnitParameterValue *)a6[4] != v16)
    {
      AudioUnitGetParameter(*(AudioUnit *)(a1 + 64), 1u, 0, 0, v16);
      uint64_t v17 = a6[3];
      if ((unint64_t)(a6[4] - v17) > 4)
      {
        AudioUnitGetParameter(*(AudioUnit *)(a1 + 64), 2u, 0, 0, (AudioUnitParameterValue *)(v17 + 4));
        uint64_t v18 = a6[3];
        if ((unint64_t)(a6[4] - v18) > 8)
        {
          AudioUnitGetParameter(*(AudioUnit *)(a1 + 72), 0x3Du, 0, 0, (AudioUnitParameterValue *)(v18 + 8));
          uint64_t v19 = a6[3];
          if ((unint64_t)(a6[4] - v19) > 0xC)
          {
            AudioUnitGetParameter(*(AudioUnit *)(a1 + 72), 0x3Cu, 0, 0, (AudioUnitParameterValue *)(v19 + 12));
            uint64_t v20 = a6[3];
            unint64_t v21 = a6[4] - v20;
            if (v21 <= 0x1C) {
              goto LABEL_47;
            }
            *(_DWORD *)(v20 + 28) = 1056964608;
            if (v21 > 0x20)
            {
              AudioUnitGetParameter(*(AudioUnit *)(a1 + 72), 0x3Bu, 0, 0, (AudioUnitParameterValue *)(v20 + 32));
              uint64_t v22 = a6[3];
              if ((unint64_t)(a6[4] - v22) > 0x24)
              {
                AudioUnitGetParameter(*(AudioUnit *)(a1 + 72), 0x37u, 0, 0, (AudioUnitParameterValue *)(v22 + 36));
                __int16 v23 = (float *)a6[3];
                unint64_t v24 = a6[4] - (void)v23;
                if (v24 > 0x10)
                {
                  float v25 = 0.0;
                  float v26 = *v23 <= 0.5 ? 0.0 : 1.0;
                  int v23[4] = v26;
                  if (v24 > 0x20)
                  {
                    if (v23[2] > v23[8]) {
                      float v25 = 1.0;
                    }
                    v23[5] = v25;
                    if (v24 > 0x24)
                    {
                      float v27 = 0.0;
                      if (v23[3] > v23[9]) {
                        float v27 = 1.0;
                      }
                      v23[6] = v27;
                      float v28 = (double *)a6[7];
                      unint64_t v29 = a6[8] - (void)v28;
                      if (v29)
                      {
                        double v30 = *(double *)(a1 + 40) * a4[1];
                        double v31 = v30 + 0.0;
                        double *v28 = v30 + 0.0;
                        v28[1] = (v30 + 0.0) / *(double *)(a1 + 40);
                        if (v29 > 0x10)
                        {
                          v28[2] = v31;
                          v28[3] = v31 / *(double *)(a1 + 40);
                          if (v29 > 0x20)
                          {
                            v28[4] = v31;
                            v28[5] = v31 / *(double *)(a1 + 40);
                            if (v29 > 0x30)
                            {
                              v28[6] = v31;
                              v28[7] = v31 / *(double *)(a1 + 40);
                              if (v29 > 0x70)
                              {
                                v28[14] = v30;
                                v28[15] = v30 / *(double *)(a1 + 40);
                                if (v29 > 0x80)
                                {
                                  v28[16] = v30;
                                  v28[17] = v30 / *(double *)(a1 + 40);
                                  if (v29 > 0x90)
                                  {
                                    uint64_t v12 = 0;
                                    v28[18] = v30;
                                    v28[19] = v30 / *(double *)(a1 + 40);
                                    v28[8] = v31;
                                    v28[9] = v31 / *(double *)(a1 + 40);
                                    v28[10] = v31;
                                    v28[11] = v31 / *(double *)(a1 + 40);
                                    v28[12] = v31;
                                    v28[13] = v31 / *(double *)(a1 + 40);
                                    ++*(_DWORD *)(a1 + 12);
                                    return v12;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
LABEL_47:
                __assert_rtn("operator[]", "FeatureTimeSeries.h", 91, "index < mArray.size()");
              }
            }
          }
        }
      }
    }
    __assert_rtn("PointerAt", "FeatureTimeSeries.h", 70, "index < mArray.size()");
  }
  uint64_t v12 = v14;
  if (EndpointVAD2LogScope(void)::once != -1) {
    dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_6);
  }
  if (EndpointVAD2LogScope(void)::scope)
  {
    int v13 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
    if (!*(void *)EndpointVAD2LogScope(void)::scope) {
      return v12;
    }
  }
  else
  {
    int v13 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioChannelLayout buf = 136315394;
    __int16 v36 = "ULDATFeaturesChain.cpp";
    __int16 v37 = 1024;
    int v38 = 367;
    unint64_t v15 = "%25s:%-5d AGC failed to process.";
    goto LABEL_45;
  }
  return v12;
}

uint64_t ULDATFeaturesChain::Uninitialize(AudioUnit *this)
{
  uint64_t v2 = AudioUnitUninitialize(this[8]);
  if (!v2)
  {
    uint64_t v2 = AudioUnitUninitialize(this[9]);
    if (!v2) {
      *((unsigned char *)this + 8) = 0;
    }
    long long v3 = this[9];
    if (v3)
    {
      AudioComponentInstanceDispose(v3);
      this[9] = 0;
    }
    uint64_t v4 = this[8];
    if (v4)
    {
      AudioComponentInstanceDispose(v4);
      this[8] = 0;
    }
    *((_DWORD *)this + 3) = 0;
  }
  return v2;
}

void ULDATFeaturesChain::Initialize(AudioComponentInstance *a1, void *a2, const __CFDictionary *a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  (*((void (**)(AudioComponentInstance *))*a1 + 3))(a1);
  FeaturesDSPChain::InitializeInputOutputBufferSizes((uint64_t)a1, a2, a3, 10);
  BYTE1(inDesc.componentFlags) = 0;
  HIWORD(inDesc.componentFlags) = 0;
  inDesc.componentFlagsMasuint64_t k = 0;
  strcpy((char *)&inDesc, "xfuasncolppa");
  Next = AudioComponentFindNext(0, &inDesc);
  AudioStreamBasicDescription v7 = a1 + 8;
  if (!AudioComponentInstanceNew(Next, a1 + 8))
  {
    inValue.componentFlagsMasuint64_t k = 0;
    *(void *)&inValue.componentManufacturer = 0;
    *(void *)&inValue.componentType = 0x6167633261756678;
    CFDictionaryRef v8 = AudioComponentFindNext(0, &inValue);
    if (!AudioComponentInstanceNew(v8, a1 + 9)) {
      goto LABEL_11;
    }
  }
  if (EndpointVAD2LogScope(void)::once != -1) {
    dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_6);
  }
  if (EndpointVAD2LogScope(void)::scope)
  {
    CFDictionaryRef v9 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
    if (!*(void *)EndpointVAD2LogScope(void)::scope) {
      goto LABEL_11;
    }
  }
  else
  {
    CFDictionaryRef v9 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    inDesc.componentType = 136315394;
    *(void *)&inDesc.componentSubType = "ULDATFeaturesChain.cpp";
    LOWORD(inDesc.componentFlags) = 1024;
    *(UInt32 *)((char *)&inDesc.componentFlags + 2) = 36;
    _os_log_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to instantiate internal audio units.", (uint8_t *)&inDesc, 0x12u);
  }
LABEL_11:
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a3, @"AUOneChannelNSProperties");
  CFDictionaryRef v11 = (const __CFDictionary *)CFDictionaryGetValue(a3, @"AUAGCV2Properties");
  if (AudioUnitSetProperty(*v7, 8u, 1u, 0, a2, 0x28u)) {
    goto LABEL_59;
  }
  if (AudioUnitSetProperty(*v7, 8u, 2u, 0, a2, 0x28u)) {
    goto LABEL_59;
  }
  int inData = 1;
  if (AudioUnitSetProperty(*v7, 0xE74u, 0, 0, &inData, 4u) || AudioUnitSetProperty(a1[8], 0xEu, 0, 0, a1 + 2, 4u)) {
    goto LABEL_59;
  }
  *(void *)&inDesc.componentType = 0;
  CFNumberRef v12 = (const __CFNumber *)CFDictionaryGetValue(Value, @"NoiseSuppressFloorDB");
  int v13 = CFNumberGetValue(v12, kCFNumberFloat64Type, &inDesc);
  if (v13) {
    OSStatus v14 = 0;
  }
  else {
    OSStatus v14 = -50;
  }
  if (v13)
  {
    inValue.componentType = 0;
    CFNumberRef v15 = (const __CFNumber *)CFDictionaryGetValue(Value, @"UseVADMode");
    int v16 = CFNumberGetValue(v15, kCFNumberSInt32Type, &inValue);
    OSStatus v14 = v16 ? 0 : -50;
    if (v16)
    {
      AudioUnitParameterValue v17 = *(double *)&inDesc.componentType;
      OSStatus v14 = AudioUnitSetParameter(*v7, 0, 0, 0, v17, 0);
      if (!v14)
      {
        OSStatus v14 = AudioUnitSetParameter(*v7, 1u, 0, 0, 0.0, 0);
        if (!v14)
        {
          OSStatus v14 = AudioUnitSetParameter(*v7, 2u, 0, 0, 40.0, 0);
          if (!v14)
          {
            OSStatus v14 = AudioUnitSetParameter(*v7, 3u, 0, 0, 0.0, 0);
            if (!v14)
            {
              OSStatus v14 = AudioUnitSetParameter(*v7, 4u, 0, 0, 4.0, 0);
              if (!v14)
              {
                OSStatus v14 = AudioUnitSetParameter(*v7, 5u, 0, 0, 40.0, 0);
                if (!v14)
                {
                  OSStatus v14 = AudioUnitSetParameter(*v7, 6u, 0, 0, 70.0, 0);
                  if (!v14)
                  {
                    AudioUnitSetParameter(*v7, 7u, 0, 0, 4.0, 0);
                    OSStatus v14 = AudioUnitSetProperty(*v7, 0x11ABu, 0, 0, &inValue, 4u);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (v14
    || AudioUnitSetProperty(a1[9], 8u, 1u, 0, a2, 0x28u)
    || AudioUnitSetProperty(a1[9], 8u, 2u, 0, a2, 0x28u)
    || AudioUnitSetProperty(a1[9], 0xEu, 0, 0, a1 + 2, 4u)
    || AudioUnitSetParameter(a1[9], 0x20u, 0, 0, 0.0, 0))
  {
    goto LABEL_59;
  }
  AudioUnitSetParameter(a1[9], 0x1Bu, 0, 0, 4.0, 0);
  inValue.componentType = -1035993088;
  unsigned int valuePtr = 1;
  if (!v11) {
    goto LABEL_40;
  }
  CFNumberRef v18 = (const __CFNumber *)CFDictionaryGetValue(v11, @"AbsoluteSilenceThdDb");
  if (CFNumberGetValue(v18, kCFNumberFloat32Type, &inValue))
  {
    if (!CFDictionaryContainsKey(v11, @"UseNoiseDithering")
      || (CFNumberRef v19 = (const __CFNumber *)CFDictionaryGetValue(v11, @"UseNoiseDithering"),
          CFNumberGetValue(v19, kCFNumberSInt32Type, &valuePtr)))
    {
LABEL_40:
      AudioUnitSetParameter(a1[9], 0x22u, 0, 0, *(AudioUnitParameterValue *)&inValue.componentType, 0);
      if (!AudioUnitSetParameter(a1[9], 0x40u, 0, 0, (float)valuePtr, 0)) {
        goto LABEL_67;
      }
      goto LABEL_59;
    }
    if (EndpointVAD2LogScope(void)::once != -1) {
      dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_6);
    }
    if (EndpointVAD2LogScope(void)::scope)
    {
      uint64_t v20 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
      if (!*(void *)EndpointVAD2LogScope(void)::scope) {
        goto LABEL_59;
      }
    }
    else
    {
      uint64_t v20 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      inDesc.componentType = 136315394;
      *(void *)&inDesc.componentSubType = "ULDATFeaturesChain.cpp";
      LOWORD(inDesc.componentFlags) = 1024;
      *(UInt32 *)((char *)&inDesc.componentFlags + 2) = 273;
      goto LABEL_58;
    }
  }
  else
  {
    if (EndpointVAD2LogScope(void)::once != -1) {
      dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_6);
    }
    if (EndpointVAD2LogScope(void)::scope)
    {
      uint64_t v20 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
      if (!*(void *)EndpointVAD2LogScope(void)::scope) {
        goto LABEL_59;
      }
    }
    else
    {
      uint64_t v20 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      inDesc.componentType = 136315394;
      *(void *)&inDesc.componentSubType = "ULDATFeaturesChain.cpp";
      LOWORD(inDesc.componentFlags) = 1024;
      *(UInt32 *)((char *)&inDesc.componentFlags + 2) = 265;
LABEL_58:
      _os_log_impl(&dword_1BB0CE000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d Error reading AbsoluteSilenceThdDb from AGC plist dictionary.", (uint8_t *)&inDesc, 0x12u);
    }
  }
LABEL_59:
  if (EndpointVAD2LogScope(void)::once != -1) {
    dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_6);
  }
  if (EndpointVAD2LogScope(void)::scope)
  {
    unint64_t v21 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
    if (!*(void *)EndpointVAD2LogScope(void)::scope) {
      goto LABEL_67;
    }
  }
  else
  {
    unint64_t v21 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    inDesc.componentType = 136315394;
    *(void *)&inDesc.componentSubType = "ULDATFeaturesChain.cpp";
    LOWORD(inDesc.componentFlags) = 1024;
    *(UInt32 *)((char *)&inDesc.componentFlags + 2) = 45;
    _os_log_impl(&dword_1BB0CE000, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to set up internal audio units.", (uint8_t *)&inDesc, 0x12u);
  }
LABEL_67:
  if (AudioUnitInitialize(*v7) || AudioUnitInitialize(a1[9]))
  {
    if (EndpointVAD2LogScope(void)::once != -1) {
      dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_6);
    }
    if (EndpointVAD2LogScope(void)::scope)
    {
      uint64_t v22 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
      if (!*(void *)EndpointVAD2LogScope(void)::scope) {
        goto LABEL_77;
      }
    }
    else
    {
      uint64_t v22 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      inDesc.componentType = 136315394;
      *(void *)&inDesc.componentSubType = "ULDATFeaturesChain.cpp";
      LOWORD(inDesc.componentFlags) = 1024;
      *(UInt32 *)((char *)&inDesc.componentFlags + 2) = 52;
      _os_log_impl(&dword_1BB0CE000, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to initialize internal audio units.", (uint8_t *)&inDesc, 0x12u);
    }
  }
LABEL_77:
  *(void *)&inValue.componentType = 0;
  CFNumberRef v23 = (const __CFNumber *)CFDictionaryGetValue(a3, @"HighpassFilterCutoffHz");
  if (CFNumberGetValue(v23, kCFNumberFloat64Type, &inValue)) {
    goto LABEL_78;
  }
  if (EndpointVAD2LogScope(void)::once != -1) {
    dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_6);
  }
  if (EndpointVAD2LogScope(void)::scope)
  {
    unint64_t v24 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
    if (!*(void *)EndpointVAD2LogScope(void)::scope) {
      goto LABEL_78;
    }
  }
  else
  {
    unint64_t v24 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
  {
    inDesc.componentType = 136315394;
    *(void *)&inDesc.componentSubType = "ULDATFeaturesChain.cpp";
    LOWORD(inDesc.componentFlags) = 1024;
    *(UInt32 *)((char *)&inDesc.componentFlags + 2) = 60;
    _os_log_impl(&dword_1BB0CE000, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to read ULDAT highpass filter cutoff frequency from plist.", (uint8_t *)&inDesc, 0x12u);
  }
LABEL_78:
  operator new();
}

double FeaturesDSPChain::InitializeInputOutputBufferSizes(uint64_t a1, void *a2, CFDictionaryRef theDict, int a4)
{
  CFDictionaryRef v8 = (void *)(a1 + 32);
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"AudioSampleRateHz");
  CFNumberGetValue(Value, kCFNumberFloat64Type, v8);
  *a2 = *(void *)(a1 + 32);
  CFNumberRef v10 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"AudioBufferSizeSamples");
  CFNumberGetValue(v10, kCFNumberSInt32Type, (void *)(a1 + 16));
  CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"AudioAnalysisSizeSamples");
  CFNumberGetValue(v11, kCFNumberSInt32Type, (void *)(a1 + 20));
  *(_DWORD *)(a1 + 24) = a4;
  LODWORD(v12) = *(_DWORD *)(a1 + 16);
  double result = *(double *)(a1 + 32) / (double)v12;
  *(double *)(a1 + 40) = result;
  return result;
}

void ULDATFeaturesChain::~ULDATFeaturesChain(AudioUnit *this)
{
  ULDATFeaturesChain::~ULDATFeaturesChain(this);

  JUMPOUT(0x1C185D370);
}

{
  AudioUnit v2;

  *this = (AudioUnit)&unk_1F14AD700;
  ULDATFeaturesChain::Uninitialize(this);
  uint64_t v2 = this[7];
  this[7] = 0;
  if (v2) {
    MEMORY[0x1C185D370](v2, 0x1000C40FF89C88ELL);
  }
}

float **DistanceEstimator::processBufferList(DistanceEstimator *this, const AudioBufferList *a2, const AudioBufferList *a3, AudioBufferList *a4)
{
  if (a4->mNumberBuffers)
  {
    unint64_t v8 = 0;
    uint64_t v9 = 16;
    do
    {
      memcpy(*(void **)((char *)&a4->mNumberBuffers + v9), *(const void **)((char *)&a2->mNumberBuffers + v9), 4 * (2 * *((_DWORD *)this + 2)));
      ++v8;
      v9 += 16;
    }
    while (v8 < a4->mNumberBuffers);
  }
  uint64_t mNumberBuffers = a2->mNumberBuffers;
  float v11 = *((float *)this + 8) * *((float *)this + 8);
  float v45 = *((float *)this + 9) * *((float *)this + 9);
  float __B = v11;
  vDSP_vclr(*((float **)this + 8), 1, (*((_DWORD *)this + 12) * mNumberBuffers));
  vDSP_vclr(*((float **)this + 11), 1, (*((_DWORD *)this + 12) * mNumberBuffers));
  if (mNumberBuffers)
  {
    uint64_t v12 = 0;
    p_int mData = &a3->mBuffers[0].mData;
    OSStatus v14 = &a2->mBuffers[0].mData;
    do
    {
      int v16 = (float *)*v14;
      v14 += 2;
      CFNumberRef v15 = v16;
      uint64_t v17 = *((unsigned int *)this + 2);
      CFNumberRef v18 = &v16[v17];
      CFNumberRef v19 = (float *)*p_mData;
      p_mData += 2;
      __A.realp = v15 + 1;
      __A.imagp = v18 + 1;
      unsigned int v20 = *((_DWORD *)this + 12) * v12;
      float v21 = *v15 * *v15;
      uint64_t v22 = &v19[v17];
      uint64_t v23 = *((void *)this + 8);
      *(float *)(v23 + 4 * v20) = v21;
      float v24 = *v19;
      v43.realp = v19 + 1;
      uint64_t v25 = *((void *)this + 11);
      *(float *)(v25 + 4 * v20) = v24 * v24;
      float v26 = *v18 * *v18;
      LODWORD(v18) = v20 + v17;
      *(float *)(v23 + 4 * v18) = v26;
      *(float *)&CFNumberRef v19 = *v22;
      v43.imagp = v22 + 1;
      unsigned int v27 = v20 + 1;
      *(float *)(v25 + 4 * v18) = *(float *)&v19 * *(float *)&v19;
      vDSP_zvmags(&__A, 1, (float *)(v23 + 4 * (v20 + 1)), 1, (v17 - 1));
      vDSP_zvmags(&v43, 1, (float *)(*((void *)this + 11) + 4 * v27), 1, (*((_DWORD *)this + 2) - 1));
      ++v12;
    }
    while (mNumberBuffers != v12);
  }
  vDSP_vsmul(*((const float **)this + 8), 1, &__B, *((float **)this + 8), 1, (*((_DWORD *)this + 12) * mNumberBuffers));
  vDSP_vsmul(*((const float **)this + 11), 1, &v45, *((float **)this + 11), 1, (*((_DWORD *)this + 12) * mNumberBuffers));
  float v28 = (void *)*((void *)this + 14);
  if (*((float *)this + 6) <= 0.0)
  {
    memcpy(v28, *((const void **)this + 8), 4 * (*((_DWORD *)this + 12) * mNumberBuffers));
    memcpy(*((void **)this + 17), *((const void **)this + 11), 4 * (*((_DWORD *)this + 12) * mNumberBuffers));
  }
  else
  {
    vDSP_vsmsma((const float *)v28, 1, (const float *)this + 6, *((const float **)this + 8), 1, (const float *)this + 7, (float *)v28, 1, (*((_DWORD *)this + 12) * mNumberBuffers));
    vDSP_vsmsma(*((const float **)this + 17), 1, (const float *)this + 6, *((const float **)this + 11), 1, (const float *)this + 7, *((float **)this + 17), 1, (*((_DWORD *)this + 12) * mNumberBuffers));
  }
  vDSP_vclr(*((float **)this + 28), 1, *((unsigned int *)this + 62));
  if (mNumberBuffers)
  {
    int v29 = 0;
    do
    {
      int v30 = *((_DWORD *)this + 13);
      unsigned int v31 = *((_DWORD *)this + 12) * v29;
      unsigned int v32 = v30 * (mNumberBuffers + v29);
      sparse_matrix_vector_product_dense_float(CblasNoTrans, 1.0, *((sparse_matrix_float *)this + 7), (const float *)(*((void *)this + 14) + 4 * v31), 1, (float *)(*((void *)this + 28) + 4 * (v30 * v29)), 1);
      sparse_matrix_vector_product_dense_float(CblasNoTrans, 1.0, *((sparse_matrix_float *)this + 7), (const float *)(*((void *)this + 17) + 4 * v31), 1, (float *)(*((void *)this + 28) + 4 * v32), 1);
      ++v29;
    }
    while (mNumberBuffers != v29);
    vDSP_vthr(*((const float **)this + 28), 1, (const float *)this + 10, *((float **)this + 28), 1, *((unsigned int *)this + 62));
    int v33 = 0;
    LODWORD(__A.realp) = 2 * *((_DWORD *)this + 13);
    do
    {
      vvlogf((float *)(*((void *)this + 28) + 4 * (LODWORD(__A.realp) * v33)), (const float *)(*((void *)this + 28) + 4 * (LODWORD(__A.realp) * v33)), (const int *)&__A);
      ++v33;
    }
    while (mNumberBuffers != v33);
  }
  else
  {
    vDSP_vthr(*((const float **)this + 28), 1, (const float *)this + 10, *((float **)this + 28), 1, *((unsigned int *)this + 62));
    LODWORD(__A.realp) = 2 * *((_DWORD *)this + 13);
  }
  double result = (float **)(*(uint64_t (**)(void, char *))(***((void ***)this + 32) + 72))(**((void **)this + 32), (char *)this + 224);
  float v35 = **result;
  *((float *)this + 49) = v35;
  if (*((float *)this + 11) <= 0.0)
  {
    float v42 = *((float *)this + 53);
    if (*((unsigned char *)this + 216))
    {
      float v42 = v42 + 1.0;
      *((float *)this + 53) = v42;
    }
    if (v42 > (float)*((unsigned int *)this + 52))
    {
      *((_DWORD *)this + 53) = 0;
      *((_WORD *)this + 108) = 256;
    }
  }
  else
  {
    *((_DWORD *)this + 53) = 0;
    *((_WORD *)this + 108) = 1;
    float v36 = *((float *)this + 50);
    float v37 = *((float *)this + 41);
    float v38 = *((float *)this + 40) + *((float *)this + 47);
    *((float *)this + 42) = v38;
    *((float *)this + 43) = v35 - v36;
    float v39 = v38 / (float)((float)(v38 + v37) + *((float *)this + 10));
    *((float *)this + 44) = v38 + v37;
    *((float *)this + 45) = v39;
    float v40 = v36 + (float)(v39 * (float)(v35 - v36));
    float v41 = (float)(v37 * (float)(v39 * v39)) + (float)((float)((float)(1.0 - v39) * (float)(1.0 - v39)) * v38);
    *((float *)this + 46) = v40;
    *((float *)this + 47) = v41;
    *((float *)this + 48) = v35 - v40;
    *((float *)this + 50) = v40;
    *((float *)this + 51) = v41;
  }
  return result;
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUADAMSink>::Factory()
{
  double result = malloc_type_malloc(0x270uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUADAMSink>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUADAMSink>::Destruct;
  return result;
}

ausdk::AUBase *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUADAMSink>::Construct(ausdk::AUBase *a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  long long v3 = ausdk::AUBase::AUBase(a1, a2, 1, 1);
  *(void *)long long v3 = &unk_1F14BB6E0;
  *((void *)v3 + 66) = 561211748;
  *((unsigned char *)v3 + 536) = 0;
  *((unsigned char *)v3 + 540) = 0;
  *((void *)v3 + 68) = 0;
  *((unsigned char *)v3 + 552) = 0;
  {
    AU::ADAMSink::get_log(void)::auadam_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "AUADAMSink");
  }
  uint64_t v4 = AU::ADAMSink::get_log(void)::auadam_os_log;
  if (os_log_type_enabled((os_log_t)AU::ADAMSink::get_log(void)::auadam_os_log, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315394;
    AudioStreamBasicDescription v7 = "AUADAMSink.cpp";
    __int16 v8 = 1024;
    int v9 = 31;
    _os_log_impl(&dword_1BB0CE000, v4, OS_LOG_TYPE_INFO, "%s:%-5d created", (uint8_t *)&v6, 0x12u);
  }
  return a1;
}

void *ausdk::APFactory<ausdk::AUBaseProcessLookup,AUCrossCorrelator>::Factory()
{
  double result = malloc_type_malloc(0x3D0uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUCrossCorrelator>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUCrossCorrelator>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUCrossCorrelator>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessLookup,AUCrossCorrelator>::Construct(void *a1, OpaqueAudioComponentInstance *a2)
{
  long long v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *(void *)long long v3 = &unk_1F14C3800;
  *((unsigned char *)v3 + 528) = 0;
  *(_OWORD *)((char *)v3 + 532) = 0u;
  *(_OWORD *)((char *)v3 + 548) = 0u;
  *(_OWORD *)((char *)v3 + 564) = 0u;
  *(_OWORD *)((char *)v3 + 580) = 0u;
  *(_OWORD *)((char *)v3 + 600) = 0u;
  *(_OWORD *)((char *)v3 + 616) = 0u;
  *(_OWORD *)((char *)v3 + 632) = 0u;
  *(_OWORD *)((char *)v3 + 648) = 0u;
  *(_OWORD *)((char *)v3 + 664) = 0u;
  *(_OWORD *)((char *)v3 + 680) = xmmword_1BB8D5858;
  *(_OWORD *)((char *)v3 + 696) = unk_1BB8D5868;
  *(_OWORD *)((char *)v3 + 712) = 0u;
  *(_OWORD *)((char *)v3 + 728) = 0u;
  *((unsigned char *)v3 + 744) = 1;
  *((_DWORD *)v3 + 188) = 0;
  *((_DWORD *)v3 + 187) = 0;
  *((_DWORD *)v3 + 210) = 0;
  *(_OWORD *)((char *)v3 + 824) = 0u;
  *((_OWORD *)v3 + 53) = 0u;
  *((_OWORD *)v3 + 54) = 0u;
  *((_DWORD *)v3 + 220) = 0;
  *((void *)v3 + 113) = 0;
  *(_OWORD *)((char *)v3 + 888) = 0u;
  *(_OWORD *)((char *)v3 + 760) = 0u;
  *(_OWORD *)((char *)v3 + 776) = 0u;
  *(_OWORD *)((char *)v3 + 792) = 0u;
  *(_OWORD *)((char *)v3 + 804) = 0u;
  ausdk::AUBase::CreateElements((uint64_t)v3);
  unsigned int v4 = 0;
  uint64_t v20 = 0x408F400000000000;
  v21[0] = xmmword_1BB8727B0;
  v21[1] = xmmword_1BB8727C0;
  while (1)
  {
    uint64_t v5 = a1[15];
    if (v5) {
      LODWORD(v6) = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
    }
    else {
      uint64_t v6 = (a1[13] - a1[12]) >> 3;
    }
    if (v4 >= v6) {
      break;
    }
    uint64_t Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 10), v4);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)Element + 56))(Element, &v20);
    ++v4;
  }
  for (unsigned int i = 0; ; ++i)
  {
    uint64_t v9 = a1[21];
    if (v9) {
      LODWORD(v10) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 24))(v9);
    }
    else {
      uint64_t v10 = (a1[19] - a1[18]) >> 3;
    }
    if (i >= v10) {
      break;
    }
    uint64_t v11 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 16), i);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v11 + 56))(v11, &v20);
  }
  getParameterInfo(&v20);
  uint64_t v12 = v20;
  if ((_OWORD *)v20 != v21)
  {
    do
    {
      uint64_t v13 = 0;
      uint64_t v14 = *(unsigned int *)(v12 + 32);
      float v15 = *(float *)(v12 + 132);
      while (v13 < *(_DWORD *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 10), 0) + 108))
      {
        (*(void (**)(void *, uint64_t, uint64_t, uint64_t, void, float))(*a1 + 152))(a1, v14, 4, v13, 0, v15);
        uint64_t v13 = (v13 + 1);
      }
      int v16 = *(void **)(v12 + 8);
      if (v16)
      {
        do
        {
          uint64_t v17 = v16;
          int v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          uint64_t v17 = *(_OWORD **)(v12 + 16);
          BOOL v18 = *(void *)v17 == v12;
          uint64_t v12 = (uint64_t)v17;
        }
        while (!v18);
      }
      uint64_t v12 = (uint64_t)v17;
    }
    while (v17 != v21);
  }
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(void **)&v21[0]);
  return a1;
}

void sub_1BB3F88A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v15 = *v13;
  *uint64_t v13 = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  a9 = (void **)(v9 + 848);
  std::vector<std::unique_ptr<ausdk::AUElement>>::__destroy_vector::operator()[abi:ne180100](&a9);
  int v16 = *v12;
  const char *v12 = 0;
  if (v16) {
    std::default_delete<CADeprecated::CABufferList>::operator()[abi:ne180100](v16);
  }
  CrossCorrelator::~CrossCorrelator(v10);
  uint64_t v17 = *(void **)(v9 + 624);
  if (v17)
  {
    *(void *)(v9 + 632) = v17;
    operator delete(v17);
  }
  BOOL v18 = *v11;
  if (*v11)
  {
    *(void *)(v9 + 608) = v18;
    operator delete(v18);
  }
  CFNumberRef v19 = *(void **)(v9 + 584);
  *(void *)(v9 + 584) = 0;
  if (v19) {
    std::default_delete<CADeprecated::CABufferList>::operator()[abi:ne180100](v19);
  }
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v9);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessLookup,AUSPLMeter>::Factory()
{
  double result = malloc_type_malloc(0x308uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUSPLMeter>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUSPLMeter>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUSPLMeter>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUSPLMeter>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  *(void *)&v29[4] = *MEMORY[0x1E4F143B8];
  long long v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *(void *)long long v3 = &unk_1F14AD490;
  *((unsigned char *)v3 + 528) = 0;
  *(_OWORD *)((char *)v3 + 532) = 0u;
  *((unsigned char *)v3 + 548) = 1;
  *((_DWORD *)v3 + 138) = 0;
  *((unsigned char *)v3 + 556) = 0;
  *((_DWORD *)v3 + 140) = 0;
  *((unsigned char *)v3 + 564) = 0;
  *((_DWORD *)v3 + 148) = 0;
  *((unsigned char *)v3 + 596) = 0;
  unsigned int v4 = (char *)v3 + 600;
  uint64_t v5 = (char *)v3 + 624;
  *(_OWORD *)((char *)v3 + 568) = 0u;
  *(void *)((char *)v3 + 581) = 0;
  *(_OWORD *)((char *)v3 + 600) = 0u;
  *(_OWORD *)((char *)v3 + 616) = 0u;
  *(_OWORD *)((char *)v3 + 632) = 0u;
  *(_OWORD *)((char *)v3 + 648) = 0u;
  *((void *)v3 + 83) = 0;
  std::vector<float *>::vector((void *)v3 + 84, 0x20uLL);
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)AudioComponentDescription inDesc = xmmword_1BB886F8C;
  *(_OWORD *)&inDesc[16] = unk_1BB886F9C;
  long long v26 = xmmword_1BB886FAC;
  long long v27 = unk_1BB886FBC;
  int v28 = 0;
  std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v4, inDesc, (uint64_t)v29, 0x11uLL);
  *(_OWORD *)AudioComponentDescription inDesc = xmmword_1BB886FD0;
  *(_OWORD *)&inDesc[16] = unk_1BB886FE0;
  long long v26 = xmmword_1BB886FF0;
  long long v27 = unk_1BB887000;
  int v28 = 0;
  std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v5, inDesc, (uint64_t)v29, 0x11uLL);
  uint64_t v6 = *(float **)(a1 + 608);
  AudioStreamBasicDescription v7 = *(float **)(a1 + 600);
  if ((char *)v6 - (char *)v7 != *(void *)(a1 + 632) - *(void *)(a1 + 624))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioComponentDescription inDesc = 136315394;
      *(void *)&inDesc[4] = "AUSPLMeter.cpp";
      *(_WORD *)&inDesc[12] = 1024;
      *(_DWORD *)&inDesc[14] = 166;
      _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Volume curve steps must match", inDesc, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &unk_1F14C8B68;
    exception[2] = 2003329396;
  }
  if (v7 != v6)
  {
    __int16 v8 = v7 + 1;
    if (v7 + 1 != v6)
    {
      float v9 = *v7;
      uint64_t v10 = v7 + 1;
      do
      {
        float v11 = *v10++;
        float v12 = v11;
        if (v11 < v9)
        {
          float v9 = v12;
          AudioStreamBasicDescription v7 = v8;
        }
        __int16 v8 = v10;
      }
      while (v10 != v6);
    }
  }
  *(float *)(a1 + 576) = *v7;
  uint64_t Element = ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)Element + 40))(Element, 13);
  uint64_t v14 = 0;
  uint64_t v15 = (float *)&dword_1E623D2FC;
  do
  {
    (*(void (**)(uint64_t, uint64_t, void, void, void, float))(*(void *)a1 + 152))(a1, v14++, 0, 0, 0, *v15);
    v15 += 26;
  }
  while (v14 != 13);
  *(_DWORD *)&inDesc[16] = 0;
  *(_OWORD *)AudioComponentDescription inDesc = *(_OWORD *)"xfua2qrvlppa";
  Next = AudioComponentFindNext(0, (const AudioComponentDescription *)inDesc);
  if (!Next)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v21 = 136315394;
      uint64_t v22 = "AUSPLMeter.cpp";
      __int16 v23 = 1024;
      int v24 = 177;
      _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Unable to instantiate VarEQ AU", (uint8_t *)&v21, 0x12u);
    }
    CFNumberRef v19 = __cxa_allocate_exception(0x10uLL);
    *(void *)CFNumberRef v19 = &unk_1F14C8B68;
    v19[2] = 2003329396;
  }
  if (AudioComponentInstanceNew(Next, (AudioComponentInstance *)(a1 + 696)))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v21 = 136315394;
      uint64_t v22 = "AUSPLMeter.cpp";
      __int16 v23 = 1024;
      int v24 = 179;
      _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Unable to instantiate VarEQ AU", (uint8_t *)&v21, 0x12u);
    }
    uint64_t v20 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v20 = &unk_1F14C8B68;
    v20[2] = 2003329396;
  }
  return a1;
}

void sub_1BB3F8E94(_Unwind_Exception *a1)
{
  uint64_t v6 = *((void *)v1 + 88);
  *((void *)v1 + 88) = 0;
  if (v6) {
    std::default_delete<CA::AudioBuffers>::operator()[abi:ne180100]();
  }
  AudioStreamBasicDescription v7 = *v4;
  if (*v4)
  {
    *((void *)v1 + 85) = v7;
    operator delete(v7);
  }
  uint64_t v8 = *((void *)v1 + 83);
  *((void *)v1 + 83) = 0;
  if (v8) {
    std::default_delete<LoudnessMeter>::operator()[abi:ne180100](v8);
  }
  uint64_t v9 = *((void *)v1 + 82);
  *((void *)v1 + 82) = 0;
  if (v9) {
    std::default_delete<LoudnessMeter>::operator()[abi:ne180100](v9);
  }
  uint64_t v10 = *((void *)v1 + 81);
  *((void *)v1 + 81) = 0;
  if (v10) {
    std::default_delete<LoudnessMeter>::operator()[abi:ne180100](v10);
  }
  float v11 = *v3;
  if (*v3)
  {
    *((void *)v1 + 79) = v11;
    operator delete(v11);
  }
  float v12 = *v2;
  if (*v2)
  {
    *((void *)v1 + 76) = v12;
    operator delete(v12);
  }
  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUECMIMOHelper>::Factory()
{
  double result = malloc_type_malloc(0x360uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUECMIMOHelper>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUECMIMOHelper>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUECMIMOHelper>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUECMIMOHelper>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  long long v3 = (_OWORD *)(a1 + 580);
  unsigned int v4 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 2, 1);
  *(void *)unsigned int v4 = &unk_1F14B9A70;
  *((_OWORD *)v4 + 33) = xmmword_1BB87A170;
  *((_OWORD *)v4 + 34) = xmmword_1BB87A180;
  *((_OWORD *)v4 + 35) = xmmword_1BB87A190;
  *((unsigned char *)v4 + 576) = 0;
  _OWORD *v3 = xmmword_1BB87A1A0;
  *((unsigned char *)v4 + 596) = 1;
  *(_OWORD *)((char *)v3 + 20) = xmmword_1BB87A1B0;
  *((_DWORD *)v4 + 154) = 1028443341;
  *(_OWORD *)((char *)v4 + 620) = 0u;
  *(_OWORD *)((char *)v4 + 636) = 0u;
  *(_OWORD *)((char *)v4 + 652) = 0u;
  *(_OWORD *)((char *)v4 + 668) = 0u;
  *(_OWORD *)((char *)v4 + 684) = 0u;
  *(void *)((char *)v4 + 700) = 0;
  *(_OWORD *)((char *)v4 + 712) = 0u;
  *(_OWORD *)((char *)v4 + 728) = 0u;
  *(_OWORD *)((char *)v4 + 744) = 0u;
  *(_OWORD *)((char *)v4 + 760) = 0u;
  *(_OWORD *)((char *)v4 + 776) = 0u;
  *((_DWORD *)v4 + 198) = 0;
  ausdk::AUBase::CreateElements((uint64_t)v4);
  unsigned int v5 = 0;
  uint64_t v33 = 0x40D7700000000000;
  long long v34 = xmmword_1BB8727B0;
  long long v35 = xmmword_1BB879E90;
  uint64_t v30 = 0x40D7700000000000;
  long long v31 = xmmword_1BB8727B0;
  long long v32 = xmmword_1BB8727C0;
  while (1)
  {
    uint64_t v6 = *(void *)(a1 + 120);
    if (v6) {
      LODWORD(v7) = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6);
    }
    else {
      uint64_t v7 = (*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 3;
    }
    if (v5 >= v7) {
      break;
    }
    uint64_t Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v5);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)Element + 56))(Element, &v33);
    ++v5;
  }
  for (unsigned int i = 0; ; ++i)
  {
    uint64_t v10 = *(void *)(a1 + 168);
    if (v10) {
      LODWORD(v11) = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 24))(v10);
    }
    else {
      uint64_t v11 = (*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 3;
    }
    if (i >= v11) {
      break;
    }
    uint64_t v12 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), i);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v12 + 56))(v12, &v30);
  }
  uint64_t v13 = ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 40))(v13, 15);
  uint64_t v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v14, 0, 160.0, 0);
  uint64_t v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v15, 1u, 0.0, 0);
  int v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v16, 2u, 0.0, 0);
  uint64_t v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v17, 3u, 0.0, 0);
  BOOL v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v18, 4u, 160.0, 0);
  CFNumberRef v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v19, 5u, 0.95, 0);
  uint64_t v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v20, 6u, 0.05, 0);
  int v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v21, 7u, 0.0, 0);
  uint64_t v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v22, 0xAu, 0.95, 0);
  __int16 v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v23, 0xBu, 0.95, 0);
  int v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v24, 0xCu, 0.28, 0);
  uint64_t v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v25, 9u, 1.0, 0);
  long long v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v26, 8u, 0.0, 0);
  long long v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v27, 0xDu, 100.0, 0);
  int v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v28, 0xEu, -200.0, 0);
  *(unsigned char *)(a1 + 376) = 1;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 512))(a1, 512);
  return a1;
}

void sub_1BB3F9434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)(v10 + 760);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  uint64_t v13 = *(void **)(v10 + 736);
  if (v13)
  {
    *(void *)(v10 + 744) = v13;
    operator delete(v13);
  }
  uint64_t v14 = *v11;
  if (*v11)
  {
    *(void *)(v10 + 720) = v14;
    operator delete(v14);
  }
  uint64_t v15 = *(void **)(v10 + 672);
  if (v15)
  {
    *(void *)(v10 + 680) = v15;
    operator delete(v15);
  }
  int v16 = *(void **)(v10 + 648);
  if (v16)
  {
    *(void *)(v10 + 656) = v16;
    operator delete(v16);
  }
  a10 = (void **)(v10 + 624);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v10);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEcConvergenceOversight>::Factory()
{
  double result = malloc_type_malloc(0x918uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEcConvergenceOversight>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEcConvergenceOversight>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEcConvergenceOversight>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEcConvergenceOversight>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  long long v3 = (_OWORD *)(a1 + 572);
  unsigned int v4 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 3, 1);
  *(void *)unsigned int v4 = &unk_1F14BF370;
  *((void *)v4 + 66) = 0;
  *(void *)((char *)v4 + 533) = 0;
  *((void *)v4 + 68) = 0x6447A0000;
  *((void *)v4 + 69) = 0x600000006;
  *((unsigned char *)v4 + 560) = 1;
  *(void *)((char *)v4 + 564) = 0x600000001;
  _OWORD *v3 = xmmword_1BB87A1C0;
  *((_DWORD *)v4 + 147) = 0x40000000;
  *(void *)&long long v5 = 0x100000001;
  *((void *)&v5 + 1) = 0x100000001;
  *((_OWORD *)v4 + 37) = v5;
  *((_DWORD *)v4 + 152) = 1;
  *((_WORD *)v4 + 306) = 0;
  *((void *)v4 + 77) = 0;
  *((_DWORD *)v4 + 180) = 0;
  uint64_t v6 = (_OWORD *)((char *)v4 + 728);
  *(_OWORD *)((char *)v4 + 728) = 0u;
  *((_DWORD *)v4 + 186) = 1065353216;
  *((void *)v4 + 100) = 0x43FA000042480000;
  *((_DWORD *)v4 + 202) = 1;
  v3[21] = xmmword_1BB87A1D0;
  v3[22] = xmmword_1BB87A1E0;
  *((_DWORD *)v4 + 352) = 0;
  *((_WORD *)v4 + 918) = 0;
  *((unsigned char *)v4 + 1838) = 0;
  *((void *)v4 + 232) = 0;
  *((_OWORD *)v4 + 115) = 0u;
  *((_DWORD *)v4 + 466) = 507307272;
  *((_WORD *)v4 + 934) = 0;
  *((_OWORD *)v4 + 117) = 0u;
  *((_OWORD *)v4 + 118) = xmmword_1BB87A1F0;
  *((_OWORD *)v4 + 120) = 0u;
  *((_OWORD *)v4 + 121) = 0u;
  *((_OWORD *)v4 + 122) = xmmword_1BB87A200;
  *((void *)v4 + 246) = 0x200000001;
  uint64_t v7 = (_OWORD *)((char *)v4 + 1976);
  *(_OWORD *)((char *)v4 + 1976) = xmmword_1BB87A210;
  *((_DWORD *)v4 + 501) = 0;
  *((void *)v4 + 249) = 0;
  *((unsigned char *)v4 + 2000) = 0;
  *((void *)v4 + 251) = 0x1E0000003C0;
  *((_DWORD *)v4 + 504) = 0;
  *((void *)v4 + 271) = 0;
  *((_DWORD *)v4 + 544) = 1;
  uint64_t v8 = (_OWORD *)((char *)v4 + 2184);
  *(_OWORD *)((char *)v4 + 2248) = 0u;
  *((_DWORD *)v4 + 554) = 0;
  *(_OWORD *)((char *)v4 + 2184) = 0u;
  *(_OWORD *)((char *)v4 + 2200) = 0u;
  ausdk::AUBase::CreateElements((uint64_t)v4);
  unsigned int v9 = 0;
  uint64_t v62 = 0x408F400000000000;
  long long v63 = xmmword_1BB8727B0;
  long long v64 = xmmword_1BB8727C0;
  while (1)
  {
    uint64_t v10 = *(void *)(a1 + 120);
    if (v10) {
      LODWORD(v11) = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 24))(v10);
    }
    else {
      uint64_t v11 = (*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 3;
    }
    if (v9 >= v11) {
      break;
    }
    uint64_t Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v9);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)Element + 56))(Element, &v62);
    ++v9;
  }
  for (unsigned int i = 0; ; ++i)
  {
    uint64_t v14 = *(void *)(a1 + 168);
    if (v14) {
      LODWORD(v15) = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 24))(v14);
    }
    else {
      uint64_t v15 = (*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 3;
    }
    if (i >= v15) {
      break;
    }
    uint64_t v16 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), i);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v16 + 56))(v16, &v62);
  }
  uint64_t v17 = ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 40))(v17, 43);
  BOOL v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v18, 0, 0.0, 0);
  CFNumberRef v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v19, 1u, 0.0, 0);
  uint64_t v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v20, 2u, 0.0, 0);
  int v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v21, 3u, 0.0, 0);
  uint64_t v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v22, 4u, 1.0, 0);
  __int16 v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v23, 5u, 6.0, 0);
  int v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v24, 6u, 4.0, 0);
  uint64_t v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v25, 7u, 50.0, 0);
  long long v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v26, 8u, 300.0, 0);
  long long v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v27, 0xBu, -70.0, 0);
  int v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v28, 0xCu, -65.0, 0);
  int v29 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v29, 9u, -20.0, 0);
  uint64_t v30 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v30, 0xAu, -12.0, 0);
  long long v31 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v31, 0xDu, 0.2, 0);
  long long v32 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v32, 0xEu, 6.0, 0);
  uint64_t v33 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v33, 0xFu, 4.0, 0);
  long long v34 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v34, 0x10u, 4.0, 0);
  long long v35 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v35, 0x11u, 4.0, 0);
  float v36 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v36, 0x12u, 90.0, 0);
  float v37 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v37, 0x13u, 80.0, 0);
  float v38 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v38, 0x14u, 70.0, 0);
  float v39 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v39, 0x15u, -65.0, 0);
  float v40 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v40, 0x16u, 200.0, 0);
  float v41 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v41, 0x17u, -200.0, 0);
  float v42 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v42, 0x18u, 35.0, 0);
  DSPSplitComplex v43 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v43, 0x19u, 60.0, 0);
  float v44 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v44, 0x1Au, 2.0, 0);
  float v45 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v45, 0x1Bu, 4.0, 0);
  float v46 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v46, 0x1Cu, 0.0, 0);
  float v47 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v47, 0x1Du, 1024.0, 0);
  float v48 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v48, 0x1Eu, 80.0, 0);
  float v49 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v49, 0x1Fu, 200.0, 0);
  unsigned int v50 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v50, 0x20u, 350.0, 0);
  uint64_t v51 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v51, 0x21u, 0.85, 0);
  uint32_t v52 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v52, 0x22u, 7.25, 0);
  float v53 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v53, 0x23u, 6.75, 0);
  long long v54 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v54, 0x24u, 5.75, 0);
  __int16 v55 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v55, 0x25u, 0.0, 0);
  int v56 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v56, 0x26u, 0.0, 0);
  __int16 v57 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v57, 0x27u, 0.0, 0);
  int v58 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v58, 0x28u, 0.0, 0);
  uint64_t v59 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v59, 0x29u, 0.0, 0);
  unsigned int v60 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v60, 0x2Au, 0.0, 0);
  *(unsigned char *)(a1 + 376) = 1;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 512))(a1, 32);
  *(unsigned char *)(a1 + 540) = 0;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(void *)(a1 + 712) = 0;
  *uint64_t v6 = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(_OWORD *)(a1 + 1392) = 0u;
  *(_OWORD *)(a1 + 1376) = 0u;
  *(_OWORD *)(a1 + 1360) = 0u;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(_OWORD *)(a1 + 1312) = 0u;
  *(_DWORD *)(a1 + 1864) = 507307272;
  *(void *)(a1 + 532) = 0;
  *(_WORD *)(a1 + 1868) = 0;
  *(void *)(a1 + 1888) = 0x20000000400;
  *(_DWORD *)(a1 + 1896) = 1;
  *(_OWORD *)(a1 + 1904) = 0u;
  *(_OWORD *)(a1 + 1920) = 0u;
  *(_OWORD *)(a1 + 1936) = 0u;
  *(_OWORD *)(a1 + 1952) = xmmword_1BB87A200;
  *(void *)(a1 + 1968) = 0x100000001;
  *uint64_t v7 = xmmword_1BB87A220;
  *(void *)(a1 + 1992) = 0;
  *(void *)(a1 + 2008) = 0x1E0000003C0;
  *(_DWORD *)(a1 + 2016) = 928;
  *(void *)(a1 + 2168) = 0;
  *(_DWORD *)(a1 + 2176) = 1;
  *(unsigned char *)(a1 + 2000) = 0;
  *(_DWORD *)(a1 + 2004) = 0;
  *(void *)(a1 + 2236) = 0;
  *(_OWORD *)(a1 + 2220) = 0u;
  *(_OWORD *)(a1 + 2024) = 0u;
  *(_OWORD *)(a1 + 2040) = 0u;
  *(_OWORD *)(a1 + 2056) = 0u;
  *(_OWORD *)(a1 + 2072) = 0u;
  *(_OWORD *)(a1 + 2088) = 0u;
  *(_OWORD *)(a1 + 2104) = 0u;
  *(_OWORD *)(a1 + 2120) = 0u;
  *(_OWORD *)(a1 + 2136) = 0u;
  *(_OWORD *)(a1 + 2152) = 0u;
  *uint64_t v8 = 0u;
  v8[1] = 0u;
  return a1;
}

void sub_1BB3F9E98(_Unwind_Exception *a1)
{
  long long v3 = (std::__shared_weak_count *)*((void *)v1 + 282);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  unsigned int v4 = (std::__shared_weak_count *)*((void *)v1 + 235);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessLookup,AUSilenceNonFiniteAnalyzer>::Factory()
{
  double result = malloc_type_malloc(0x2A0uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUSilenceNonFiniteAnalyzer>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUSilenceNonFiniteAnalyzer>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUSilenceNonFiniteAnalyzer>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUSilenceNonFiniteAnalyzer>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  long long v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *(void *)long long v3 = &unk_1F14C7A88;
  *((_DWORD *)v3 + 132) = 0;
  *(_DWORD *)((char *)v3 + 531) = 0;
  *(_OWORD *)((char *)v3 + 536) = 0u;
  *((void *)v3 + 69) = 0xBF80000000000000;
  *((_OWORD *)v3 + 35) = 0u;
  *((_OWORD *)v3 + 36) = 0u;
  *((_OWORD *)v3 + 37) = 0u;
  ausdk::AUBase::CreateElements((uint64_t)v3);
  uint64_t Element = ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)Element + 40))(Element, 7);
  long long v5 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v5, 0, 0.0, 0);
  uint64_t v6 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v6, 1u, 0.0, 0);
  uint64_t v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v7, 2u, 0.0, 0);
  uint64_t v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v8, 3u, 0.0, 0);
  unsigned int v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v9, 6u, -1.0, 0);
  uint64_t v10 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v10, 4u, 0.0, 0);
  uint64_t v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v11, 5u, 0.0, 0);
  return a1;
}

void sub_1BB3FA0DC(_Unwind_Exception *a1)
{
  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessLookup,AUMixGainCompensation>::Factory()
{
  double result = malloc_type_malloc(0x260uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUMixGainCompensation>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUMixGainCompensation>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUMixGainCompensation>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  long long v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *(void *)long long v3 = &unk_1F14A9DC0;
  *((unsigned char *)v3 + 528) = 0;
  *(void *)((char *)v3 + 532) = 0;
  ausdk::AUBase::CreateElements((uint64_t)v3);
  uint64_t Element = ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)Element + 40))(Element, 2);
  long long v5 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v5, 0, 0.0, 0);
  uint64_t v6 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v6, 1u, 0.0, 0);
  return a1;
}

void sub_1BB3FA238(_Unwind_Exception *a1)
{
  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessLookup,AUAmbienceLeveler>::Factory()
{
  double result = malloc_type_malloc(0x4A28uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUAmbienceLeveler>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUAmbienceLeveler>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUAmbienceLeveler>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUAmbienceLeveler>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  long long v3 = AUDspLibWithNewParameters::AUDspLibWithNewParameters((void *)a1, a2, (uint64_t)&DspLib::kBubbleParameterConverters, (long long *)&DspLib::AmbienceLeveler::Parameters::kSystemDefinition, @"AUAmbienceLeveler_ViewFactory");
  void *v3 = &unk_1F14AA600;
  *((_DWORD *)v3 + 586) = 0;
  *(_OWORD *)(v3 + 287) = xmmword_1BB87D374;
  *(_OWORD *)(v3 + 289) = unk_1BB87D384;
  *(_OWORD *)(v3 + 291) = xmmword_1BB87D394;
  *(_OWORD *)(v3 + 279) = xmmword_1BB87D334;
  *(_OWORD *)(v3 + 281) = unk_1BB87D344;
  *(_OWORD *)(v3 + 283) = xmmword_1BB87D354;
  *(_OWORD *)(v3 + 285) = unk_1BB87D364;
  *(_OWORD *)(v3 + 275) = xmmword_1BB87D314;
  *(_OWORD *)(v3 + 277) = unk_1BB87D324;
  *(_OWORD *)((char *)v3 + 18828) = 0u;
  *((_OWORD *)v3 + 1176) = 0u;
  *((_OWORD *)v3 + 1175) = 0u;
  *((_OWORD *)v3 + 1174) = 0u;
  *((_OWORD *)v3 + 1173) = 0u;
  *((_OWORD *)v3 + 1178) = 0u;
  *((_OWORD *)v3 + 1179) = 0u;
  *((_OWORD *)v3 + 1180) = 0u;
  *((_OWORD *)v3 + 1181) = 0u;
  v3[2364] = 0;
  *(void *)((char *)v3 + 2356) = 0;
  *(void *)((char *)v3 + 2364) = 0;
  *(void *)((char *)v3 + 2348) = 0;
  *(_DWORD *)(a1 + 2372) = 0;
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(v3 + 4), 0);
  ausdk::AUElement::SetParameter(Element, 0x64u, 0.0, 0);
  return a1;
}

void sub_1BB3FA3EC(_Unwind_Exception *a1)
{
  long long v5 = (void *)*((void *)v1 + 2362);
  if (v5)
  {
    *((void *)v1 + 2363) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)v1 + 2359);
  if (v6)
  {
    *((void *)v1 + 2360) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *v3;
  if (*v3)
  {
    *((void *)v1 + 2357) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)v1 + 2352);
  if (v8)
  {
    *((void *)v1 + 2353) = v8;
    operator delete(v8);
  }
  unsigned int v9 = (void *)*((void *)v1 + 2349);
  if (v9)
  {
    *((void *)v1 + 2350) = v9;
    operator delete(v9);
  }
  uint64_t v10 = *v2;
  if (*v2)
  {
    *((void *)v1 + 2347) = v10;
    operator delete(v10);
  }
  AUDspLib::~AUDspLib(v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessLookup,AUVolumeTaper>::Factory()
{
  double result = malloc_type_malloc(0x8E8uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUVolumeTaper>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUVolumeTaper>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUVolumeTaper>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessLookup,AUVolumeTaper>::Construct(void *a1, OpaqueAudioComponentInstance *a2)
{
  long long v3 = AUDspLibWithNewParameters::AUDspLibWithNewParameters(a1, a2, (uint64_t)&DspLib::kBubbleParameterConverters, (long long *)&DspLib::VolumeTaper::Parameters::kSystemDefinition, @"AUVolumeTaper_ViewFactory");
  void *v3 = &unk_1F14C45A8;
  v3[276] = 0;
  unsigned int v4 = (ausdk::AUScope *)(v3 + 4);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(v3 + 4), 0);
  ausdk::AUElement::SetParameter(Element, 0x64u, 0.0, 0);
  uint64_t v6 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v4, 0);
  ausdk::AUElement::SetParameter(v6, 0x65u, 0.0, 0);
  uint64_t v7 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v4, 0);
  ausdk::AUElement::SetParameter(v7, 0x66u, 0.0, 0);
  return a1;
}

void sub_1BB3FA5B4(_Unwind_Exception *a1)
{
  AUDspLib::~AUDspLib((AUDspLib *)v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessLookup,AULoudspeakerSystemIDV2>::Factory()
{
  double result = malloc_type_malloc(0x8F8uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AULoudspeakerSystemIDV2>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AULoudspeakerSystemIDV2>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AULoudspeakerSystemIDV2>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessLookup,AULoudspeakerSystemIDV2>::Construct(void *a1, OpaqueAudioComponentInstance *a2)
{
  long long v3 = AUDspLibWithNewParameters::AUDspLibWithNewParameters(a1, a2, (uint64_t)&DspLib::kBubbleParameterConverters, (long long *)&DspLib::LoudspeakerSystemIDV2::Parameters::kSystemDefinition, @"AULoudspeakerSystemIDV2ViewFactory");
  void *v3 = &unk_1F14C4990;
  *((unsigned char *)v3 + 2200) = 0;
  *((unsigned char *)v3 + 2224) = 0;
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(v3 + 4), 0);
  ausdk::AUElement::SetParameter(Element, 0x40000000u, 0.0, 0);
  return a1;
}

void sub_1BB3FA6EC(_Unwind_Exception *a1)
{
  if (*(unsigned char *)(v1 + 2224))
  {
    long long v3 = *(void **)(v1 + 2200);
    if (v3)
    {
      *(void *)(v1 + 2208) = v3;
      operator delete(v3);
    }
  }
  AUDspLib::~AUDspLib((AUDspLib *)v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULoudspeakerManagerV2>::Factory()
{
  double result = malloc_type_malloc(0x998uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULoudspeakerManagerV2>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULoudspeakerManagerV2>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULoudspeakerManagerV2>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULoudspeakerManagerV2>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  long long v3 = AUDspLibWithNewParameters::AUDspLibWithNewParameters((void *)a1, a2, (uint64_t)&DspLib::kBubbleParameterConverters, (long long *)&DspLib::LoudspeakerManagerV2::Parameters::kSystemDefinition, @"AULoudspeakerManagerV2_ViewFactory");
  void *v3 = &unk_1F14BDCB8;
  *(_OWORD *)(v3 + 275) = 0u;
  *(_OWORD *)(v3 + 277) = 0u;
  *(_OWORD *)(v3 + 279) = xmmword_1BB87A230;
  *((_DWORD *)v3 + 562) = 1112014848;
  *((unsigned char *)v3 + 2252) = 0;
  AULoudspeakerManagerV2::TimeScale<float>::TimeScale((uint64_t)(v3 + 282), "cpms_ts_i");
  AULoudspeakerManagerV2::TimeScale<float>::TimeScale((uint64_t)v10, "cpms_ts_100");
  AULoudspeakerManagerV2::TimeScale<float>::withPowerSmootherTC(a1 + 2288, (uint64_t)v10, 0.1);
  AULoudspeakerManagerV2::TimeScale<float>::TimeScale((uint64_t)v9, "cpms_ts_1000");
  AULoudspeakerManagerV2::TimeScale<float>::withPowerSmootherTC(a1 + 2320, (uint64_t)v9, 1.0);
  AULoudspeakerManagerV2::TimeScale<float>::TimeScale((uint64_t)cf, "cpms_ts_thermal");
  AULoudspeakerManagerV2::TimeScale<float>::withPowerSmootherTC(a1 + 2352, (uint64_t)cf, 60.0);
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (v9[0]) {
    CFRelease(v9[0]);
  }
  if (v10[0]) {
    CFRelease(v10[0]);
  }
  *(_WORD *)(a1 + 2384) = 257;
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(Element, 0x40000000u, 0.0, 0);
  long long v5 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v5, 0x40000001u, 0.0, 0);
  uint64_t v6 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v6, 0x40000002u, 0.0, 0);
  return a1;
}

void sub_1BB3FA968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef cf, uint64_t a14, uint64_t a15, uint64_t a16, CFTypeRef a17)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a17) {
    CFRelease(a17);
  }
  while (1)
  {
    uint64_t v22 = *(const void **)(v19 - 32);
    v19 -= 32;
    int v21 = v22;
    if (v22) {
      CFRelease(v21);
    }
    if (v19 == v18)
    {
      a17 = v17 + 276;
      std::vector<std::unique_ptr<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
      __int16 v23 = (const void *)v17[275];
      if (v23) {
        CFRelease(v23);
      }
      AUDspLib::~AUDspLib((AUDspLib *)v17);
      _Unwind_Resume(a1);
    }
  }
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULoudspeakerManager>::Factory()
{
  double result = malloc_type_malloc(0x8E0uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULoudspeakerManager>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULoudspeakerManager>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULoudspeakerManager>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULoudspeakerManager>::Construct(void *a1, OpaqueAudioComponentInstance *a2)
{
  double result = AUDspLibWithNewParameters::AUDspLibWithNewParameters(a1, a2, (uint64_t)&DspLib::kBubbleParameterConverters, (long long *)&DspLib::LoudspeakerManagerV1::Parameters::kSystemDefinition, @"AULoudspeakerManager_ViewFactory");
  *double result = &unk_1F14C3540;
  result[275] = 0;
  return result;
}

void *ausdk::APFactory<ausdk::AUBaseProcessAndMultipleLookup,AULoudnessNormalizer>::Factory()
{
  double result = malloc_type_malloc(0x8B8uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessAndMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessAndMultipleLookup,AULoudnessNormalizer>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessAndMultipleLookup,AULoudnessNormalizer>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessAndMultipleLookup,AULoudnessNormalizer>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessLookup,AUXTC>::Factory()
{
  double result = malloc_type_malloc(0x13C0uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUXTC>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUXTC>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUXTC>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void ausdk::APFactory<ausdk::AUBaseProcessLookup,AUXTC>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  long long v4 = 0uLL;
  uint64_t v5 = 0;
  long long v3 = (void *)AUDspLib::AUDspLib(a1, a2, (uint64_t)&kParameterList, &v4, @"AUXTC_ViewFactory", 0);
  void *v3 = &unk_1F14C0EA0;
  DspLib::XTC::Algorithm::Algorithm((DspLib::XTC::Algorithm *)(v3 + 271));
  *(void *)(a1 + 2696) = 0;
  *(void *)(a1 + 2704) = 850045863;
  *(_OWORD *)(a1 + 2712) = 0u;
  *(_OWORD *)(a1 + 2728) = 0u;
  *(_OWORD *)(a1 + 2744) = 0u;
  *(_OWORD *)(a1 + 2753) = 0u;
  *(unsigned char *)(a1 + 2769) = 1;
  dspLibMessenger((void *)(a1 + 2776));
  *(void *)(a1 + 2816) = &unk_1F14C1130;
  *(void *)(a1 + 2880) = &unk_1F14C1150;
  boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::queue((unsigned int *)(a1 + 2944));
  boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::queue((unsigned int *)(a1 + 3904));
  *(unsigned char *)(a1 + 4865) = 0;
  operator new();
}

void sub_1BB3FAE10(_Unwind_Exception *a1)
{
  uint64_t v7 = v6;
  MEMORY[0x1C185D370](v7, 0x10A0C40A4A4A4D4);
  *(void *)(v1 + 2816) = v4;
  ca::concurrent::deferred_deletion_queue<DspLib::XTC::FIRMatrix,10ul,std::default_delete<DspLib::XTC::FIRMatrix>>::~deferred_deletion_queue(v5);
  unsigned int v9 = *(std::__shared_weak_count **)(v1 + 2784);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  std::mutex::~mutex(v3);

  DspLib::XTC::Algorithm::~Algorithm(v2);
  AUDspLib::~AUDspLib((AUDspLib *)v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessLookup,AUThermalSpeakerProtection>::Factory()
{
  double result = malloc_type_malloc(0x8B8uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUThermalSpeakerProtection>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUThermalSpeakerProtection>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUThermalSpeakerProtection>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessLookup,AUThermalSpeakerProtection>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  long long v3 = 0uLL;
  uint64_t v4 = 0;
  double result = (void *)AUDspLib::AUDspLib(a1, a2, (uint64_t)&kParameterList, &v3, @"AUThermalSpeakerProtection_ViewFactory", 0);
  *double result = &unk_1F14BBC88;
  return result;
}

void *ausdk::APFactory<ausdk::AUBaseProcessLookup,AUPeakPowerGuard>::Factory()
{
  double result = malloc_type_malloc(0x8C0uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUPeakPowerGuard>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUPeakPowerGuard>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUPeakPowerGuard>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessLookup,AUPeakPowerGuard>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  v5[0] = DspLib::PeakPowerGuard::Parameters::kNames;
  v5[1] = 47;
  v5[2] = &DspLib::PeakPowerGuard::Parameters::kUnits;
  v5[3] = 47;
  v5[4] = &DspLib::PeakPowerGuard::Parameters::kFlags;
  v5[5] = 47;
  v5[6] = &_ZGRN6DspLib14PeakPowerGuard10ParametersL8kMinimumE__0;
  v5[7] = 47;
  v5[8] = &_ZGRN6DspLib14PeakPowerGuard10ParametersL8kMaximumE__0;
  v5[9] = 47;
  v5[10] = &_ZGRN6DspLib14PeakPowerGuard10ParametersL8kDefaultE__0;
  v5[11] = 47;
  v5[12] = &_ZGRN6DspLib14PeakPowerGuard10ParametersL13kAUParametersE_;
  v5[13] = 38;
  v5[14] = &_ZGRN6DspLib14PeakPowerGuard10ParametersL20kDefaultAUParametersE_;
  v5[15] = 38;
  v5[16] = &_ZGRN6DspLib14PeakPowerGuard10ParametersL7kClumpsE_;
  v5[17] = 38;
  v5[18] = DspLib::PeakPowerGuard::Parameters::kClumpNames;
  v5[19] = 5;
  long long v3 = 0uLL;
  uint64_t v4 = 0;
  double result = (void *)AUDspLib::AUDspLib(a1, a2, (uint64_t)v5, &v3, @"AUPeakPowerGuard_ViewFactory", 0);
  *double result = &unk_1F14C0BF0;
  result[271] = 0;
  return result;
}

void *ausdk::APFactory<ausdk::AUBaseProcessLookup,AULittleLateNightMode>::Factory()
{
  double result = malloc_type_malloc(0x2C0uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AULittleLateNightMode>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AULittleLateNightMode>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AULittleLateNightMode>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AULittleLateNightMode>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  char v3 = 1;
  uint64_t v4 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  unsigned int v5 = 0;
  *((_WORD *)v4 + 276) = 0;
  *((void *)v4 + 68) = 0;
  *((_OWORD *)v4 + 33) = 0u;
  *((unsigned char *)v4 + 554) = 1;
  *((_DWORD *)v4 + 139) = 0;
  *((unsigned char *)v4 + 560) = 0;
  *((_DWORD *)v4 + 147) = 0;
  *(_OWORD *)((char *)v4 + 568) = 0u;
  *((unsigned char *)v4 + 584) = 0;
  *(void *)uint64_t v4 = &unk_1F14A98B0;
  *(void *)((char *)v4 + 628) = 0x3F8000003F800000;
  *((void *)v4 + 74) = 0;
  float v41 = (char *)v4 + 528;
  float v42 = (AudioComponentInstance **)((char *)v4 + 592);
  *(_OWORD *)((char *)v4 + 600) = 0u;
  *((unsigned char *)v4 + 616) = 0;
  *((unsigned char *)v4 + 636) = 0;
  uint64_t v6 = (ausdk::AUBase *)((char *)v4 + 32);
  *(void *)((char *)v4 + 620) = 0;
  do
  {
    char v7 = v3;
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v6, 0);
    ausdk::AUElement::SetParameter(Element, v5, 0.0, 0);
    char v3 = 0;
    unsigned int v5 = *(_DWORD *)(a1 + 620) + 1;
    *(_DWORD *)(a1 + 620) = v5;
  }
  while ((v7 & 1) != 0);
  CFDictionaryRef v9 = (const __CFDictionary *)presetCreateForNumberOfChannels(0, *(unsigned __int8 *)(a1 + 636));
  if (!CFDictionaryContainsKey(v9, @"DSPchain"))
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_46;
    }
    inDesc.componentType = 136315394;
    *(void *)&inDesc.componentSubType = "AULittleLateNightMode.cpp";
    LOWORD(inDesc.componentFlags) = 1024;
    *(UInt32 *)((char *)&inDesc.componentFlags + 2) = 63;
    float v38 = MEMORY[0x1E4F14500];
    float v39 = "%25s:%-5d  key 'DSPchain' not found";
LABEL_45:
    _os_log_impl(&dword_1BB0CE000, v38, OS_LOG_TYPE_ERROR, v39, (uint8_t *)&inDesc, 0x12u);
    goto LABEL_46;
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v9, @"DSPchain");
  if (!Value)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_46;
    }
    inDesc.componentType = 136315394;
    *(void *)&inDesc.componentSubType = "AULittleLateNightMode.cpp";
    LOWORD(inDesc.componentFlags) = 1024;
    *(UInt32 *)((char *)&inDesc.componentFlags + 2) = 66;
    float v38 = MEMORY[0x1E4F14500];
    float v39 = "%25s:%-5d  could not load DSPchain";
    goto LABEL_45;
  }
  CFStringRef v11 = CFStringCreateWithFormat(0, 0, @"Processor_%d", 0, v41);
  LODWORD(v12) = 0;
  CFDictionaryRef v43 = v9;
LABEL_6:
  if (CFDictionaryContainsKey(Value, v11))
  {
    CFDictionaryRef v13 = Value;
    CFStringRef v14 = (const __CFString *)CFDictionaryGetValue(Value, v11);
    if (v14)
    {
      OSType v15 = convertCFStringToOSType(v14);
      if (v15)
      {
        AudioComponentInstance outInstance = 0;
        inDesc.componentType = 1635083896;
        inDesc.componentSubType = v15;
        *(void *)&inDesc.componentManufacturer = 1634758764;
        inDesc.componentFlagsMasuint64_t k = 0;
        Next = AudioComponentFindNext(0, &inDesc);
        OSStatus v17 = AudioComponentInstanceNew(Next, &outInstance);
        AudioComponentInstance v18 = outInstance;
        if (outInstance)
        {
          if (!v17)
          {
            uint64_t v19 = *(AudioComponentInstance **)(a1 + 600);
            unint64_t v20 = *(void *)(a1 + 608);
            if ((unint64_t)v19 >= v20)
            {
              uint64_t v22 = *v42;
              uint64_t v23 = v19 - *v42;
              unint64_t v24 = v23 + 1;
              if ((unint64_t)(v23 + 1) >> 61) {
                std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v25 = v20 - (void)v22;
              if (v25 >> 2 > v24) {
                unint64_t v24 = v25 >> 2;
              }
              if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
              }
              if (v24)
              {
                if (v24 >> 61) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                unint64_t v26 = v24;
                long long v27 = (char *)operator new(8 * v24);
              }
              else
              {
                long long v27 = 0;
                unint64_t v26 = 0;
              }
              int v28 = (AudioComponentInstance *)&v27[8 * v23];
              AudioComponentInstance *v28 = v18;
              int v21 = v28 + 1;
              while (v19 != v22)
              {
                int v29 = *--v19;
                *uint64_t v19 = 0;
                *--int v28 = v29;
              }
              long long v30 = *(_OWORD *)(a1 + 592);
              *(void *)(a1 + 592) = v28;
              *(void *)(a1 + 600) = v21;
              *(void *)(a1 + 608) = &v27[8 * v26];
              long long v31 = (OpaqueAudioComponentInstance **)*((void *)&v30 + 1);
              long long v32 = (OpaqueAudioComponentInstance **)v30;
              while (v31 != v32)
                std::unique_ptr<OpaqueAudioComponentInstance,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioComponentInstance*,&(AudioComponentInstanceDispose)>>::reset[abi:ne180100](--v31);
              if (v32) {
                operator delete(v32);
              }
            }
            else
            {
              *uint64_t v19 = outInstance;
              int v21 = v19 + 1;
            }
            *(void *)(a1 + 600) = v21;
          }
        }
      }
      OSType v33 = 0;
      long long v34 = *(OpaqueAudioComponentInstance **)(*(void *)(a1 + 600) - 8);
      while (1)
      {
        inDesc.componentType = 0;
        AudioUnitGetPropertyInfo(v34, 3u, 0, 0, &inDesc.componentType, 0);
        if (v33 >= inDesc.componentType >> 2)
        {
          CFRelease(v11);
          CFDictionaryRef Value = v13;
          CFDictionaryRef v9 = v43;
          uint64_t v12 = (v12 + 1);
          CFStringRef v11 = CFStringCreateWithFormat(0, 0, @"Processor_%d", v12);
          goto LABEL_6;
        }
        outCFDictionaryRef Value = 0.0;
        if (AudioUnitGetParameter(v34, v33, 0, 0, &outValue)) {
          break;
        }
        unsigned int v35 = *(_DWORD *)(a1 + 620);
        float v36 = outValue;
        float v37 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v6, 0);
        ausdk::AUElement::SetParameter(v37, v35, v36, 0);
        ++*(_DWORD *)(a1 + 620);
        ++v33;
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        inDesc.componentType = 136315394;
        *(void *)&inDesc.componentSubType = "AULittleLateNightMode.cpp";
        LOWORD(inDesc.componentFlags) = 1024;
        *(UInt32 *)((char *)&inDesc.componentFlags + 2) = 83;
        _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  could not get parameter value", (uint8_t *)&inDesc, 0x12u);
      }
      CFDictionaryRef v9 = v43;
    }
    else
    {
      CFDictionaryRef v9 = v43;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        inDesc.componentType = 136315394;
        *(void *)&inDesc.componentSubType = "AULittleLateNightMode.cpp";
        LOWORD(inDesc.componentFlags) = 1024;
        *(UInt32 *)((char *)&inDesc.componentFlags + 2) = 73;
        _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  could not get processorSubType string", (uint8_t *)&inDesc, 0x12u);
      }
    }
  }
  if (v11) {
    CFRelease(v11);
  }
LABEL_46:
  if (v9) {
    CFRelease(v9);
  }
  return a1;
}

void sub_1BB3FB738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = a11;
  std::vector<std::unique_ptr<OpaqueAudioComponentInstance,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioComponentInstance*,&(AudioComponentInstanceDispose)>>>::__destroy_vector::operator()[abi:ne180100](&a14);
  *(void *)CFStringRef v14 = &unk_1F14C8258;
  a14 = a10;
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__destroy_vector::operator()[abi:ne180100](&a14);
  ausdk::AUBase::~AUBase(v14);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessLookup,AUMozartCompressorSingleBand>::Factory()
{
  double result = malloc_type_malloc(0x8B8uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUMozartCompressorSingleBand>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUMozartCompressorSingleBand>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUMozartCompressorSingleBand>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessLookup,AUMozartCompressorSingleBand>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  double result = (void *)AUDspLib::AUDspLib(a1, a2, (uint64_t)&kParameterList, (long long *)&kPresetList, @"AUMozartCompressorSingleBand_ViewFactory", 0);
  *double result = &unk_1F14C7088;
  return result;
}

void *ausdk::APFactory<ausdk::AUBaseProcessLookup,AULoudnessMeter>::Factory()
{
  double result = malloc_type_malloc(0x8B8uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AULoudnessMeter>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AULoudnessMeter>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AULoudnessMeter>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessLookup,AULoudnessMeter>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  long long v3 = 0uLL;
  uint64_t v4 = 0;
  double result = (void *)AUDspLib::AUDspLib(a1, a2, (uint64_t)&kParameterList, &v3, @"AULoudnessMeter_ViewFactory", 0);
  *double result = &unk_1F14B2B88;
  return result;
}

void *ausdk::APFactory<ausdk::AUBaseProcessLookup,AUToneMeister>::Factory()
{
  double result = malloc_type_malloc(0x1180uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUToneMeister>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUToneMeister>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUToneMeister>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUToneMeister>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  long long v5 = 0uLL;
  uint64_t v6 = 0;
  uint64_t v3 = AUDspLib::AUDspLib(a1, a2, (uint64_t)&kParameterList, &v5, @"AUToneMeister_ViewFactory", 0);
  *(void *)uint64_t v3 = &unk_1F14BCBE8;
  *(void *)(v3 + 2168) = 0x447A000000000000;
  *(unsigned char *)(v3 + 2176) = 1;
  *(void *)(v3 + 2184) = 0;
  *(void *)(v3 + 2192) = 1;
  dspLibMessenger((void *)(v3 + 2200));
  *(void *)(a1 + 2240) = &unk_1F14BCE78;
  *(void *)(a1 + 2304) = &unk_1F14BCE98;
  boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::queue((unsigned int *)(a1 + 2368));
  boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::queue((unsigned int *)(a1 + 3328));
  *(unsigned char *)(a1 + 4289) = 0;
  *(_OWORD *)(a1 + 4352) = 0u;
  return a1;
}

void sub_1BB3FBB28(_Unwind_Exception *a1)
{
  uint64_t v4 = (void *)*v2;
  void *v2 = 0;
  if (v4) {
    std::default_delete<DspLib::ToneMeister::CrossFade>::operator()[abi:ne180100]((uint64_t)v2, v4);
  }
  AUDspLib::~AUDspLib(v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessLookup,AUMeisterStueck>::Factory()
{
  double result = malloc_type_malloc(0x1250uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUMeisterStueck>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUMeisterStueck>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUMeisterStueck>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUMeisterStueck>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  long long v5 = 0uLL;
  uint64_t v6 = 0;
  uint64_t v3 = (void *)AUDspLib::AUDspLib(a1, a2, (uint64_t)&kParameterList, &v5, @"AUMeisterStueck_ViewFactory", 1);
  void *v3 = &unk_1F14B54A0;
  bzero(v3 + 271, 0x991uLL);
  return a1;
}

void *ausdk::APFactory<ausdk::AUBaseProcessLookup,AULowFlow>::Factory()
{
  double result = malloc_type_malloc(0x8C8uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AULowFlow>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AULowFlow>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AULowFlow>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AULowFlow>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  long long v3 = 0uLL;
  uint64_t v4 = 0;
  uint64_t result = AUDspLib::AUDspLib(a1, a2, (uint64_t)&kParameterList, &v3, @"AULowFlow_ViewFactory", 0);
  *(void *)uint64_t result = &unk_1F14B9590;
  *(_DWORD *)(result + 2168) = 0;
  *(void *)(result + 2176) = 0;
  return result;
}

void *ausdk::APFactory<ausdk::AUBaseProcessLookup,AUBassQueen>::Factory()
{
  uint64_t result = malloc_type_malloc(0x8B8uLL, 0xB0CA1167uLL);
  *uint64_t result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUBassQueen>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUBassQueen>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUBassQueen>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessLookup,AUBassQueen>::Construct(void *a1, OpaqueAudioComponentInstance *a2)
{
  long long v17 = 0uLL;
  uint64_t v18 = 0;
  long long v3 = (void *)AUDspLib::AUDspLib((uint64_t)a1, a2, (uint64_t)&kParameterList, &v17, @"AUBassQueenViewFactory", 0);
  unsigned int v4 = 0;
  void *v3 = &unk_1F14C1ED8;
  long long v5 = (ausdk::AUScope *)(v3 + 10);
  while (1)
  {
    uint64_t v6 = a1[15];
    if (v6) {
      LODWORD(v7) = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6);
    }
    else {
      uint64_t v7 = (a1[13] - a1[12]) >> 3;
    }
    if (v4 >= v7) {
      break;
    }
    uint64_t Element = ausdk::AUScope::SafeGetElement(v5, v4);
    uint64_t v14 = 0x40E5888000000000;
    long long v15 = xmmword_1BB8727B0;
    long long v16 = xmmword_1BB8727C0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)Element + 56))(Element, &v14);
    ++v4;
  }
  for (unsigned int i = 0; ; ++i)
  {
    uint64_t v10 = a1[21];
    if (v10) {
      LODWORD(v11) = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 24))(v10);
    }
    else {
      uint64_t v11 = (a1[19] - a1[18]) >> 3;
    }
    if (i >= v11) {
      break;
    }
    uint64_t v12 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 16), i);
    uint64_t v14 = 0x40E5888000000000;
    long long v15 = xmmword_1BB8727B0;
    long long v16 = xmmword_1BB8727C0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v12 + 56))(v12, &v14);
  }
  return a1;
}

void sub_1BB3FBFD4(_Unwind_Exception *a1)
{
  AUDspLib::~AUDspLib(v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessLookup,BassKoenig>::Factory()
{
  uint64_t result = malloc_type_malloc(0x8C0uLL, 0xB0CA1167uLL);
  *uint64_t result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessLookup,BassKoenig>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessLookup,BassKoenig>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,BassKoenig>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

double ausdk::APFactory<ausdk::AUBaseProcessLookup,BassKoenig>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  long long v8 = 0uLL;
  uint64_t v9 = 0;
  uint64_t v2 = AUDspLib::AUDspLib(a1, a2, (uint64_t)&kParameterList, &v8, @"BassKoenig_ViewFactory", 0);
  *(void *)uint64_t v2 = &unk_1F14ABD10;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(v2 + 2168) = result;
  return result;
}

void *ausdk::APFactory<ausdk::AUBaseProcessLookup,AUVirtualBass>::Factory()
{
  double result = malloc_type_malloc(0x8B8uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUVirtualBass>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUVirtualBass>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUVirtualBass>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessLookup,AUVirtualBass>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  long long v3 = 0uLL;
  uint64_t v4 = 0;
  double result = (void *)AUDspLib::AUDspLib(a1, a2, (uint64_t)&kParameterList, &v3, @"AUVirtualBass_ViewFactory", 0);
  *double result = &unk_1F14BC488;
  return result;
}

void *ausdk::APFactory<ausdk::AUBaseProcessLookup,AUBuzzKill>::Factory()
{
  double result = malloc_type_malloc(0x8B8uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUBuzzKill>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUBuzzKill>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUBuzzKill>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessLookup,AUBuzzKill>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  v5[0] = &kDspLibBuzzKillParameterNames;
  v5[1] = 98;
  v5[2] = &_ZGRL29kDspLibBuzzKillParameterUnits_;
  v5[3] = 98;
  v5[4] = &_ZGRL29kDspLibBuzzKillParameterFlags_;
  v5[5] = 98;
  v5[6] = &_ZGRN6DspLib8BuzzKill10ParametersL8kMinimumE_;
  v5[7] = 98;
  v5[8] = &_ZGRN6DspLib8BuzzKill10ParametersL8kMaximumE_;
  v5[9] = 98;
  v5[10] = &_ZGRN6DspLib8BuzzKill10ParametersL8kDefaultE_;
  v5[11] = 98;
  v5[12] = &_ZGRN6DspLib8BuzzKill10ParametersL13kAUParametersE_;
  v5[13] = 45;
  v5[14] = &_ZGRN6DspLib8BuzzKill10ParametersL20kDefaultAUParametersE_;
  v5[15] = 45;
  long long v6 = 0u;
  long long v7 = 0u;
  uint64_t v4 = 0;
  long long v3 = 0uLL;
  double result = (void *)AUDspLib::AUDspLib(a1, a2, (uint64_t)v5, &v3, @"AUBuzzKill_ViewFactory", 0);
  *double result = &unk_1F14C2D78;
  return result;
}

void *ausdk::APFactory<ausdk::AUBaseProcessLookup,AUControlFreak>::Factory()
{
  double result = malloc_type_malloc(0x8B8uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUControlFreak>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUControlFreak>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUControlFreak>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessLookup,AUControlFreak>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  double result = (void *)AUDspLib::AUDspLib(a1, a2, (uint64_t)&kParameterList, (long long *)&kPresetList, @"AUControlFreak_ViewFactory", 1);
  *double result = &unk_1F14BB450;
  return result;
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMicIssueDetector>::Factory()
{
  double result = malloc_type_malloc(0x388uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMicIssueDetector>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMicIssueDetector>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMicIssueDetector>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMicIssueDetector>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  long long v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 2, 5);
  *(void *)long long v3 = &unk_1F14B7EE8;
  uint64_t v4 = (void **)((char *)v3 + 528);
  *((_OWORD *)v3 + 33) = 0u;
  *((_OWORD *)v3 + 34) = 0u;
  *((_OWORD *)v3 + 35) = 0u;
  *((unsigned char *)v3 + 576) = 0;
  *(_OWORD *)((char *)v3 + 580) = 0u;
  *(_OWORD *)((char *)v3 + 596) = xmmword_1BB873AA0;
  *((_DWORD *)v3 + 153) = 1;
  *(_OWORD *)((char *)v3 + 616) = 0u;
  *(_OWORD *)((char *)v3 + 632) = 0u;
  *(_OWORD *)((char *)v3 + 648) = 0u;
  *(_OWORD *)((char *)v3 + 664) = 0u;
  *(_OWORD *)((char *)v3 + 680) = 0u;
  *(_OWORD *)((char *)v3 + 696) = 0u;
  *(_OWORD *)((char *)v3 + 712) = 0u;
  *(_OWORD *)((char *)v3 + 728) = 0u;
  *(_OWORD *)((char *)v3 + 744) = 0u;
  *(_OWORD *)((char *)v3 + 760) = 0u;
  *(_OWORD *)((char *)v3 + 772) = 0u;
  *(_OWORD *)((char *)v3 + 792) = 0u;
  *(_OWORD *)((char *)v3 + 808) = 0u;
  *(_OWORD *)((char *)v3 + 824) = 0u;
  long long v5 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(1uLL);
  long long v7 = (char *)&v5[4 * v6];
  *long long v5 = @"Wind Flag";
  v5[1] = 0xA00000000001;
  v5[2] = 0x3F80000000000000;
  v5[3] = 0x100000000;
  long long v8 = (char *)(v5 + 4);
  uint64_t v9 = *(char **)(a1 + 536);
  uint64_t v10 = *(char **)(a1 + 528);
  uint64_t v11 = v5;
  if (v9 != v10)
  {
    do
    {
      long long v12 = *((_OWORD *)v9 - 1);
      *((_OWORD *)v11 - 2) = *((_OWORD *)v9 - 2);
      *((_OWORD *)v11 - 1) = v12;
      v11 -= 4;
      v9 -= 32;
    }
    while (v9 != v10);
    uint64_t v9 = (char *)*v4;
  }
  *(void *)(a1 + 528) = v11;
  *(void *)(a1 + 536) = v8;
  *(void *)(a1 + 544) = v7;
  if (v9)
  {
    operator delete(v9);
    long long v7 = *(char **)(a1 + 544);
  }
  *(void *)(a1 + 536) = v8;
  if (v8 >= v7)
  {
    uint64_t v14 = (v8 - (unsigned char *)*v4) >> 5;
    if ((unint64_t)(v14 + 1) >> 59) {
      goto LABEL_712;
    }
    uint64_t v15 = v7 - (unsigned char *)*v4;
    uint64_t v16 = v15 >> 4;
    if (v15 >> 4 <= (unint64_t)(v14 + 1)) {
      uint64_t v16 = v14 + 1;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v17 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v16;
    }
    if (v17) {
      unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(v17);
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v19 = (void *)(v17 + 32 * v14);
    unint64_t v20 = v17 + 32 * v18;
    *uint64_t v19 = @"Blocked Mic Flag";
    v19[1] = 0xA00000000001;
    v19[2] = 0x3F80000000000000;
    v19[3] = 0x100000000;
    CFDictionaryRef v13 = v19 + 4;
    int v21 = *(char **)(a1 + 536);
    uint64_t v22 = *(char **)(a1 + 528);
    if (v21 != v22)
    {
      do
      {
        long long v23 = *((_OWORD *)v21 - 1);
        *((_OWORD *)v19 - 2) = *((_OWORD *)v21 - 2);
        *((_OWORD *)v19 - 1) = v23;
        v19 -= 4;
        v21 -= 32;
      }
      while (v21 != v22);
      int v21 = (char *)*v4;
    }
    *(void *)(a1 + 528) = v19;
    *(void *)(a1 + 536) = v13;
    *(void *)(a1 + 544) = v20;
    if (v21) {
      operator delete(v21);
    }
  }
  else
  {
    v5[4] = @"Blocked Mic Flag";
    v5[5] = 0xA00000000001;
    v5[6] = 0x3F80000000000000;
    v5[7] = 0x100000000;
    CFDictionaryRef v13 = v5 + 8;
  }
  *(void *)(a1 + 536) = v13;
  unint64_t v24 = *(void *)(a1 + 544);
  if ((unint64_t)v13 >= v24)
  {
    uint64_t v26 = ((char *)v13 - (unsigned char *)*v4) >> 5;
    if ((unint64_t)(v26 + 1) >> 59) {
      goto LABEL_712;
    }
    uint64_t v27 = v24 - (void)*v4;
    uint64_t v28 = v27 >> 4;
    if (v27 >> 4 <= (unint64_t)(v26 + 1)) {
      uint64_t v28 = v26 + 1;
    }
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v29 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v29 = v28;
    }
    if (v29) {
      unint64_t v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(v29);
    }
    else {
      uint64_t v30 = 0;
    }
    long long v31 = (void *)(v29 + 32 * v26);
    unint64_t v32 = v29 + 32 * v30;
    void *v31 = @"Best Mic";
    v31[1] = 0xA00000000001;
    v31[2] = 0x4120000000000000;
    v31[3] = 0x100000000;
    uint64_t v25 = v31 + 4;
    OSType v33 = *(char **)(a1 + 536);
    long long v34 = *(char **)(a1 + 528);
    if (v33 != v34)
    {
      do
      {
        long long v35 = *((_OWORD *)v33 - 1);
        *((_OWORD *)v31 - 2) = *((_OWORD *)v33 - 2);
        *((_OWORD *)v31 - 1) = v35;
        v31 -= 4;
        v33 -= 32;
      }
      while (v33 != v34);
      OSType v33 = (char *)*v4;
    }
    *(void *)(a1 + 528) = v31;
    *(void *)(a1 + 536) = v25;
    *(void *)(a1 + 544) = v32;
    if (v33) {
      operator delete(v33);
    }
  }
  else
  {
    *CFDictionaryRef v13 = @"Best Mic";
    v13[1] = 0xA00000000001;
    v13[2] = 0x4120000000000000;
    v13[3] = 0x100000000;
    uint64_t v25 = v13 + 4;
  }
  *(void *)(a1 + 536) = v25;
  unint64_t v36 = *(void *)(a1 + 544);
  if ((unint64_t)v25 >= v36)
  {
    uint64_t v38 = ((char *)v25 - (unsigned char *)*v4) >> 5;
    if ((unint64_t)(v38 + 1) >> 59) {
      goto LABEL_712;
    }
    uint64_t v39 = v36 - (void)*v4;
    uint64_t v40 = v39 >> 4;
    if (v39 >> 4 <= (unint64_t)(v38 + 1)) {
      uint64_t v40 = v38 + 1;
    }
    if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v41 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v41 = v40;
    }
    if (v41) {
      unint64_t v41 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(v41);
    }
    else {
      uint64_t v42 = 0;
    }
    CFDictionaryRef v43 = (void *)(v41 + 32 * v38);
    unint64_t v44 = v41 + 32 * v42;
    *CFDictionaryRef v43 = @"Preferred Mic Override";
    v43[1] = 0xA00000000001;
    v43[2] = 0x41000000BF800000;
    v43[3] = 0x1BF800000;
    float v37 = v43 + 4;
    float v45 = *(char **)(a1 + 536);
    float v46 = *(char **)(a1 + 528);
    if (v45 != v46)
    {
      do
      {
        long long v47 = *((_OWORD *)v45 - 1);
        *((_OWORD *)v43 - 2) = *((_OWORD *)v45 - 2);
        *((_OWORD *)v43 - 1) = v47;
        v43 -= 4;
        v45 -= 32;
      }
      while (v45 != v46);
      float v45 = (char *)*v4;
    }
    *(void *)(a1 + 528) = v43;
    *(void *)(a1 + 536) = v37;
    *(void *)(a1 + 544) = v44;
    if (v45) {
      operator delete(v45);
    }
  }
  else
  {
    void *v25 = @"Preferred Mic Override";
    v25[1] = 0xA00000000001;
    v25[2] = 0x41000000BF800000;
    v25[3] = 0x1BF800000;
    float v37 = v25 + 4;
  }
  *(void *)(a1 + 536) = v37;
  unint64_t v48 = *(void *)(a1 + 544);
  if ((unint64_t)v37 >= v48)
  {
    uint64_t v50 = ((char *)v37 - (unsigned char *)*v4) >> 5;
    if ((unint64_t)(v50 + 1) >> 59) {
      goto LABEL_712;
    }
    uint64_t v51 = v48 - (void)*v4;
    uint64_t v52 = v51 >> 4;
    if (v51 >> 4 <= (unint64_t)(v50 + 1)) {
      uint64_t v52 = v50 + 1;
    }
    if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v53 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v53 = v52;
    }
    if (v53) {
      unint64_t v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(v53);
    }
    else {
      uint64_t v54 = 0;
    }
    __int16 v55 = (void *)(v53 + 32 * v50);
    unint64_t v56 = v53 + 32 * v54;
    void *v55 = @"Aggregate Omni Mode";
    v55[1] = 0x8000000000000001;
    v55[2] = 0x3F80000000000000;
    v55[3] = 0x200000000;
    float v49 = v55 + 4;
    __int16 v57 = *(char **)(a1 + 536);
    int v58 = *(char **)(a1 + 528);
    if (v57 != v58)
    {
      do
      {
        long long v59 = *((_OWORD *)v57 - 1);
        *((_OWORD *)v55 - 2) = *((_OWORD *)v57 - 2);
        *((_OWORD *)v55 - 1) = v59;
        v55 -= 4;
        v57 -= 32;
      }
      while (v57 != v58);
      __int16 v57 = (char *)*v4;
    }
    *(void *)(a1 + 528) = v55;
    *(void *)(a1 + 536) = v49;
    *(void *)(a1 + 544) = v56;
    if (v57) {
      operator delete(v57);
    }
  }
  else
  {
    void *v37 = @"Aggregate Omni Mode";
    v37[1] = 0x8000000000000001;
    v37[2] = 0x3F80000000000000;
    v37[3] = 0x200000000;
    float v49 = v37 + 4;
  }
  *(void *)(a1 + 536) = v49;
  unint64_t v60 = *(void *)(a1 + 544);
  if ((unint64_t)v49 >= v60)
  {
    uint64_t v62 = ((char *)v49 - (unsigned char *)*v4) >> 5;
    if ((unint64_t)(v62 + 1) >> 59) {
      goto LABEL_712;
    }
    uint64_t v63 = v60 - (void)*v4;
    uint64_t v64 = v63 >> 4;
    if (v63 >> 4 <= (unint64_t)(v62 + 1)) {
      uint64_t v64 = v62 + 1;
    }
    if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v65 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v65 = v64;
    }
    if (v65) {
      unint64_t v65 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(v65);
    }
    else {
      uint64_t v66 = 0;
    }
    char v67 = (void *)(v65 + 32 * v62);
    unint64_t v68 = v65 + 32 * v66;
    *char v67 = @"Input Pre-Processing Gain";
    v67[1] = 0x800000000000000DLL;
    v67[2] = 0x43480000C3480000;
    v67[3] = 0x300000000;
    uint64_t v61 = v67 + 4;
    char v69 = *(char **)(a1 + 536);
    uint64_t v70 = *(char **)(a1 + 528);
    if (v69 != v70)
    {
      do
      {
        long long v71 = *((_OWORD *)v69 - 1);
        *((_OWORD *)v67 - 2) = *((_OWORD *)v69 - 2);
        *((_OWORD *)v67 - 1) = v71;
        v67 -= 4;
        v69 -= 32;
      }
      while (v69 != v70);
      char v69 = (char *)*v4;
    }
    *(void *)(a1 + 528) = v67;
    *(void *)(a1 + 536) = v61;
    *(void *)(a1 + 544) = v68;
    if (v69) {
      operator delete(v69);
    }
  }
  else
  {
    void *v49 = @"Input Pre-Processing Gain";
    v49[1] = 0x800000000000000DLL;
    v49[2] = 0x43480000C3480000;
    v49[3] = 0x300000000;
    uint64_t v61 = v49 + 4;
  }
  *(void *)(a1 + 536) = v61;
  unint64_t v72 = *(void *)(a1 + 544);
  if ((unint64_t)v61 >= v72)
  {
    uint64_t v74 = ((char *)v61 - (unsigned char *)*v4) >> 5;
    if ((unint64_t)(v74 + 1) >> 59) {
      goto LABEL_712;
    }
    uint64_t v75 = v72 - (void)*v4;
    uint64_t v76 = v75 >> 4;
    if (v75 >> 4 <= (unint64_t)(v74 + 1)) {
      uint64_t v76 = v74 + 1;
    }
    if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v77 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v77 = v76;
    }
    if (v77) {
      unint64_t v77 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(v77);
    }
    else {
      uint64_t v78 = 0;
    }
    uint64_t v79 = (void *)(v77 + 32 * v74);
    unint64_t v80 = v77 + 32 * v78;
    void *v79 = @"Suppression Gain Floor";
    v79[1] = 0x800000000000000DLL;
    v79[2] = 3276275712;
    v79[3] = 0x3C1100000;
    char v73 = v79 + 4;
    long long v81 = *(char **)(a1 + 536);
    uint64_t v82 = *(char **)(a1 + 528);
    if (v81 != v82)
    {
      do
      {
        long long v83 = *((_OWORD *)v81 - 1);
        *((_OWORD *)v79 - 2) = *((_OWORD *)v81 - 2);
        *((_OWORD *)v79 - 1) = v83;
        v79 -= 4;
        v81 -= 32;
      }
      while (v81 != v82);
      long long v81 = (char *)*v4;
    }
    *(void *)(a1 + 528) = v79;
    *(void *)(a1 + 536) = v73;
    *(void *)(a1 + 544) = v80;
    if (v81) {
      operator delete(v81);
    }
  }
  else
  {
    void *v61 = @"Suppression Gain Floor";
    v61[1] = 0x800000000000000DLL;
    v61[2] = 3276275712;
    v61[3] = 0x3C1100000;
    char v73 = v61 + 4;
  }
  *(void *)(a1 + 536) = v73;
  unint64_t v84 = *(void *)(a1 + 544);
  if ((unint64_t)v73 >= v84)
  {
    uint64_t v86 = ((char *)v73 - (unsigned char *)*v4) >> 5;
    if ((unint64_t)(v86 + 1) >> 59) {
      goto LABEL_712;
    }
    uint64_t v87 = v84 - (void)*v4;
    uint64_t v88 = v87 >> 4;
    if (v87 >> 4 <= (unint64_t)(v86 + 1)) {
      uint64_t v88 = v86 + 1;
    }
    if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v89 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v89 = v88;
    }
    if (v89) {
      unint64_t v89 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(v89);
    }
    else {
      uint64_t v90 = 0;
    }
    uint64_t v91 = (void *)(v89 + 32 * v86);
    unint64_t v92 = v89 + 32 * v90;
    *uint64_t v91 = @"Time Constant for PSD Est.";
    v91[1] = 0x8000000000000018;
    v91[2] = 0x461C400000000000;
    v91[3] = 0x442C80000;
    int v85 = v91 + 4;
    uint64_t v93 = *(char **)(a1 + 536);
    unint64_t v94 = *(char **)(a1 + 528);
    if (v93 != v94)
    {
      do
      {
        long long v95 = *((_OWORD *)v93 - 1);
        *((_OWORD *)v91 - 2) = *((_OWORD *)v93 - 2);
        *((_OWORD *)v91 - 1) = v95;
        v91 -= 4;
        v93 -= 32;
      }
      while (v93 != v94);
      uint64_t v93 = (char *)*v4;
    }
    *(void *)(a1 + 528) = v91;
    *(void *)(a1 + 536) = v85;
    *(void *)(a1 + 544) = v92;
    if (v93) {
      operator delete(v93);
    }
  }
  else
  {
    *char v73 = @"Time Constant for PSD Est.";
    v73[1] = 0x8000000000000018;
    v73[2] = 0x461C400000000000;
    v73[3] = 0x442C80000;
    int v85 = v73 + 4;
  }
  *(void *)(a1 + 536) = v85;
  unint64_t v96 = *(void *)(a1 + 544);
  if ((unint64_t)v85 >= v96)
  {
    uint64_t v98 = ((char *)v85 - (unsigned char *)*v4) >> 5;
    if ((unint64_t)(v98 + 1) >> 59) {
      goto LABEL_712;
    }
    uint64_t v99 = v96 - (void)*v4;
    uint64_t v100 = v99 >> 4;
    if (v99 >> 4 <= (unint64_t)(v98 + 1)) {
      uint64_t v100 = v98 + 1;
    }
    if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v101 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v101 = v100;
    }
    if (v101) {
      unint64_t v101 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(v101);
    }
    else {
      uint64_t v102 = 0;
    }
    float32x4_t v103 = (void *)(v101 + 32 * v98);
    unint64_t v104 = v101 + 32 * v102;
    *float32x4_t v103 = @"Time Constant for Energy Smoothing";
    v103[1] = 0x8000000000000018;
    v103[2] = 0x461C400000000000;
    v103[3] = 0x441A00000;
    uint64_t v97 = v103 + 4;
    uint64_t v105 = *(char **)(a1 + 536);
    float v106 = *(char **)(a1 + 528);
    if (v105 != v106)
    {
      do
      {
        long long v107 = *((_OWORD *)v105 - 1);
        *((_OWORD *)v103 - 2) = *((_OWORD *)v105 - 2);
        *((_OWORD *)v103 - 1) = v107;
        v103 -= 4;
        v105 -= 32;
      }
      while (v105 != v106);
      uint64_t v105 = (char *)*v4;
    }
    *(void *)(a1 + 528) = v103;
    *(void *)(a1 + 536) = v97;
    *(void *)(a1 + 544) = v104;
    if (v105) {
      operator delete(v105);
    }
  }
  else
  {
    *int v85 = @"Time Constant for Energy Smoothing";
    v85[1] = 0x8000000000000018;
    v85[2] = 0x461C400000000000;
    v85[3] = 0x441A00000;
    uint64_t v97 = v85 + 4;
  }
  *(void *)(a1 + 536) = v97;
  unint64_t v108 = *(void *)(a1 + 544);
  if ((unint64_t)v97 >= v108)
  {
    uint64_t v110 = ((char *)v97 - (unsigned char *)*v4) >> 5;
    if ((unint64_t)(v110 + 1) >> 59) {
      goto LABEL_712;
    }
    uint64_t v111 = v108 - (void)*v4;
    uint64_t v112 = v111 >> 4;
    if (v111 >> 4 <= (unint64_t)(v110 + 1)) {
      uint64_t v112 = v110 + 1;
    }
    if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v113 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v113 = v112;
    }
    if (v113) {
      unint64_t v113 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(v113);
    }
    else {
      uint64_t v114 = 0;
    }
    uint64_t v115 = (void *)(v113 + 32 * v110);
    unint64_t v116 = v113 + 32 * v114;
    *uint64_t v115 = @"Time Constant for Raw Ps Energy Smoothing";
    v115[1] = 0x8000000000000018;
    v115[2] = 0x461C400000000000;
    v115[3] = 0x43F800000;
    unsigned int v109 = v115 + 4;
    unsigned int v117 = *(char **)(a1 + 536);
    unsigned __int8 v118 = *(char **)(a1 + 528);
    if (v117 != v118)
    {
      do
      {
        long long v119 = *((_OWORD *)v117 - 1);
        *((_OWORD *)v115 - 2) = *((_OWORD *)v117 - 2);
        *((_OWORD *)v115 - 1) = v119;
        v115 -= 4;
        v117 -= 32;
      }
      while (v117 != v118);
      unsigned int v117 = (char *)*v4;
    }
    *(void *)(a1 + 528) = v115;
    *(void *)(a1 + 536) = v109;
    *(void *)(a1 + 544) = v116;
    if (v117) {
      operator delete(v117);
    }
  }
  else
  {
    *uint64_t v97 = @"Time Constant for Raw Ps Energy Smoothing";
    v97[1] = 0x8000000000000018;
    v97[2] = 0x461C400000000000;
    v97[3] = 0x43F800000;
    unsigned int v109 = v97 + 4;
  }
  *(void *)(a1 + 536) = v109;
  unint64_t v120 = *(void *)(a1 + 544);
  if ((unint64_t)v109 >= v120)
  {
    uint64_t v122 = ((char *)v109 - (unsigned char *)*v4) >> 5;
    if ((unint64_t)(v122 + 1) >> 59) {
      goto LABEL_712;
    }
    uint64_t v123 = v120 - (void)*v4;
    uint64_t v124 = v123 >> 4;
    if (v123 >> 4 <= (unint64_t)(v122 + 1)) {
      uint64_t v124 = v122 + 1;
    }
    if ((unint64_t)v123 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v125 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v125 = v124;
    }
    if (v125) {
      unint64_t v125 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(v125);
    }
    else {
      uint64_t v126 = 0;
    }
    unsigned int v127 = (void *)(v125 + 32 * v122);
    unint64_t v128 = v125 + 32 * v126;
    void *v127 = @"Hysteresis Time for Wind/BlockeMic/BestMic Flags";
    v127[1] = 0x8000000000000018;
    v127[2] = 0x461C400000000000;
    v127[3] = 0x443FA0000;
    unsigned int v121 = v127 + 4;
    unint64_t v129 = *(char **)(a1 + 536);
    unint64_t v130 = *(char **)(a1 + 528);
    if (v129 != v130)
    {
      do
      {
        long long v131 = *((_OWORD *)v129 - 1);
        *((_OWORD *)v127 - 2) = *((_OWORD *)v129 - 2);
        *((_OWORD *)v127 - 1) = v131;
        v127 -= 4;
        v129 -= 32;
      }
      while (v129 != v130);
      unint64_t v129 = (char *)*v4;
    }
    *(void *)(a1 + 528) = v127;
    *(void *)(a1 + 536) = v121;
    *(void *)(a1 + 544) = v128;
    if (v129) {
      operator delete(v129);
    }
  }
  else
  {
    *unsigned int v109 = @"Hysteresis Time for Wind/BlockeMic/BestMic Flags";
    v109[1] = 0x8000000000000018;
    v109[2] = 0x461C400000000000;
    v109[3] = 0x443FA0000;
    unsigned int v121 = v109 + 4;
  }
  *(void *)(a1 + 536) = v121;
  unint64_t v132 = *(void *)(a1 + 544);
  if ((unint64_t)v121 >= v132)
  {
    uint64_t v134 = ((char *)v121 - (unsigned char *)*v4) >> 5;
    if ((unint64_t)(v134 + 1) >> 59) {
      goto LABEL_712;
    }
    uint64_t v135 = v132 - (void)*v4;
    uint64_t v136 = v135 >> 4;
    if (v135 >> 4 <= (unint64_t)(v134 + 1)) {
      uint64_t v136 = v134 + 1;
    }
    if ((unint64_t)v135 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v137 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v137 = v136;
    }
    if (v137) {
      unint64_t v137 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(v137);
    }
    else {
      uint64_t v138 = 0;
    }
    uint64_t v139 = (void *)(v137 + 32 * v134);
    unint64_t v140 = v137 + 32 * v138;
    void *v139 = @"Hysteresis Time for Wind/BlockeMic Flags offset";
    v139[1] = 0x8000000000000018;
    v139[2] = 0x461C400000000000;
    v139[3] = 0x4447A0000;
    uint64_t v133 = v139 + 4;
    unsigned __int8 v141 = *(char **)(a1 + 536);
    char v142 = *(char **)(a1 + 528);
    if (v141 != v142)
    {
      do
      {
        long long v143 = *((_OWORD *)v141 - 1);
        *((_OWORD *)v139 - 2) = *((_OWORD *)v141 - 2);
        *((_OWORD *)v139 - 1) = v143;
        v139 -= 4;
        v141 -= 32;
      }
      while (v141 != v142);
      unsigned __int8 v141 = (char *)*v4;
    }
    *(void *)(a1 + 528) = v139;
    *(void *)(a1 + 536) = v133;
    *(void *)(a1 + 544) = v140;
    if (v141) {
      operator delete(v141);
    }
  }
  else
  {
    void *v121 = @"Hysteresis Time for Wind/BlockeMic Flags offset";
    v121[1] = 0x8000000000000018;
    v121[2] = 0x461C400000000000;
    v121[3] = 0x4447A0000;
    uint64_t v133 = v121 + 4;
  }
  *(void *)(a1 + 536) = v133;
  unint64_t v144 = *(void *)(a1 + 544);
  if ((unint64_t)v133 >= v144)
  {
    uint64_t v146 = ((char *)v133 - (unsigned char *)*v4) >> 5;
    if ((unint64_t)(v146 + 1) >> 59) {
      goto LABEL_712;
    }
    uint64_t v147 = v144 - (void)*v4;
    uint64_t v148 = v147 >> 4;
    if (v147 >> 4 <= (unint64_t)(v146 + 1)) {
      uint64_t v148 = v146 + 1;
    }
    if ((unint64_t)v147 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v149 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v149 = v148;
    }
    if (v149) {
      unint64_t v149 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(v149);
    }
    else {
      uint64_t v150 = 0;
    }
    uint64_t v151 = (void *)(v149 + 32 * v146);
    unint64_t v152 = v149 + 32 * v150;
    *uint64_t v151 = @"Threshold on Wind Probability";
    v151[1] = 0x8000000000000000;
    v151[2] = 0x3F80000000000000;
    v151[3] = 0x53F333333;
    uint64_t v145 = v151 + 4;
    dev_t v153 = *(char **)(a1 + 536);
    OSStatus v154 = *(char **)(a1 + 528);
    if (v153 != v154)
    {
      do
      {
        long long v155 = *((_OWORD *)v153 - 1);
        *((_OWORD *)v151 - 2) = *((_OWORD *)v153 - 2);
        *((_OWORD *)v151 - 1) = v155;
        v151 -= 4;
        v153 -= 32;
      }
      while (v153 != v154);
      dev_t v153 = (char *)*v4;
    }
    *(void *)(a1 + 528) = v151;
    *(void *)(a1 + 536) = v145;
    *(void *)(a1 + 544) = v152;
    if (v153) {
      operator delete(v153);
    }
  }
  else
  {
    *uint64_t v133 = @"Threshold on Wind Probability";
    v133[1] = 0x8000000000000000;
    void v133[2] = 0x3F80000000000000;
    v133[3] = 0x53F333333;
    uint64_t v145 = v133 + 4;
  }
  *(void *)(a1 + 536) = v145;
  unint64_t v156 = *(void *)(a1 + 544);
  if ((unint64_t)v145 >= v156)
  {
    uint64_t v158 = ((char *)v145 - (unsigned char *)*v4) >> 5;
    if ((unint64_t)(v158 + 1) >> 59) {
      goto LABEL_712;
    }
    uint64_t v159 = v156 - (void)*v4;
    uint64_t v160 = v159 >> 4;
    if (v159 >> 4 <= (unint64_t)(v158 + 1)) {
      uint64_t v160 = v158 + 1;
    }
    if ((unint64_t)v159 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v161 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v161 = v160;
    }
    if (v161) {
      unint64_t v161 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(v161);
    }
    else {
      uint64_t v162 = 0;
    }
    float v163 = (void *)(v161 + 32 * v158);
    unint64_t v164 = v161 + 32 * v162;
    *float v163 = @"Threshold on Blocked Mic Probability";
    v163[1] = 0x8000000000000000;
    v163[2] = 0x3F80000000000000;
    v163[3] = 0x53F333333;
    uint64_t v157 = v163 + 4;
    std::string::size_type v165 = *(char **)(a1 + 536);
    BOOL v166 = *(char **)(a1 + 528);
    if (v165 != v166)
    {
      do
      {
        long long v167 = *((_OWORD *)v165 - 1);
        *((_OWORD *)v163 - 2) = *((_OWORD *)v165 - 2);
        *((_OWORD *)v163 - 1) = v167;
        v163 -= 4;
        v165 -= 32;
      }
      while (v165 != v166);
      std::string::size_type v165 = (char *)*v4;
    }
    *(void *)(a1 + 528) = v163;
    *(void *)(a1 + 536) = v157;
    *(void *)(a1 + 544) = v164;
    if (v165) {
      operator delete(v165);
    }
  }
  else
  {
    void *v145 = @"Threshold on Blocked Mic Probability";
    v145[1] = 0x8000000000000000;
    v145[2] = 0x3F80000000000000;
    v145[3] = 0x53F333333;
    uint64_t v157 = v145 + 4;
  }
  *(void *)(a1 + 536) = v157;
  unint64_t v168 = *(void *)(a1 + 544);
  if ((unint64_t)v157 >= v168)
  {
    uint64_t v170 = ((char *)v157 - (unsigned char *)*v4) >> 5;
    if ((unint64_t)(v170 + 1) >> 59) {
      goto LABEL_712;
    }
    uint64_t v171 = v168 - (void)*v4;
    uint64_t v172 = v171 >> 4;
    if (v171 >> 4 <= (unint64_t)(v170 + 1)) {
      uint64_t v172 = v170 + 1;
    }
    if ((unint64_t)v171 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v173 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v173 = v172;
    }
    if (v173) {
      unint64_t v173 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(v173);
    }
    else {
      uint64_t v174 = 0;
    }
    CFNumberRef v175 = (void *)(v173 + 32 * v170);
    unint64_t v176 = v173 + 32 * v174;
    void *v175 = @"ECLee Process";
    v175[1] = 0x8000000000000001;
    v175[2] = 0x3F80000000000000;
    v175[3] = 0x53F800000;
    long long v169 = v175 + 4;
    CFNumberRef v177 = *(char **)(a1 + 536);
    dev_t v178 = *(char **)(a1 + 528);
    if (v177 != v178)
    {
      do
      {
        long long v179 = *((_OWORD *)v177 - 1);
        *((_OWORD *)v175 - 2) = *((_OWORD *)v177 - 2);
        *((_OWORD *)v175 - 1) = v179;
        v175 -= 4;
        v177 -= 32;
      }
      while (v177 != v178);
      CFNumberRef v177 = (char *)*v4;
    }
    *(void *)(a1 + 528) = v175;
    *(void *)(a1 + 536) = v169;
    *(void *)(a1 + 544) = v176;
    if (v177) {
      operator delete(v177);
    }
  }
  else
  {
    *uint64_t v157 = @"ECLee Process";
    v157[1] = 0x8000000000000001;
    v157[2] = 0x3F80000000000000;
    v157[3] = 0x53F800000;
    long long v169 = v157 + 4;
  }
  *(void *)(a1 + 536) = v169;
  unint64_t v180 = *(void *)(a1 + 544);
  if ((unint64_t)v169 >= v180)
  {
    uint64_t v182 = ((char *)v169 - (unsigned char *)*v4) >> 5;
    if ((unint64_t)(v182 + 1) >> 59) {
      goto LABEL_712;
    }
    uint64_t v183 = v180 - (void)*v4;
    uint64_t v184 = v183 >> 4;
    if (v183 >> 4 <= (unint64_t)(v182 + 1)) {
      uint64_t v184 = v182 + 1;
    }
    if ((unint64_t)v183 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v185 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v185 = v184;
    }
    if (v185) {
      unint64_t v185 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(v185);
    }
    else {
      uint64_t v186 = 0;
    }
    float v187 = (void *)(v185 + 32 * v182);
    unint64_t v188 = v185 + 32 * v186;
    void *v187 = @"Best Echo Mic Available?";
    v187[1] = 0x8000000000000001;
    v187[2] = 0x3F80000000000000;
    v187[3] = 0x600000000;
    CFNumberRef v181 = v187 + 4;
    int v189 = *(char **)(a1 + 536);
    float v190 = *(char **)(a1 + 528);
    if (v189 != v190)
    {
      do
      {
        long long v191 = *((_OWORD *)v189 - 1);
        *((_OWORD *)v187 - 2) = *((_OWORD *)v189 - 2);
        *((_OWORD *)v187 - 1) = v191;
        v187 -= 4;
        v189 -= 32;
      }
      while (v189 != v190);
      int v189 = (char *)*v4;
    }
    *(void *)(a1 + 528) = v187;
    *(void *)(a1 + 536) = v181;
    *(void *)(a1 + 544) = v188;
    if (v189) {
      operator delete(v189);
    }
  }
  else
  {
    void *v169 = @"Best Echo Mic Available?";
    v169[1] = 0x8000000000000001;
    v169[2] = 0x3F80000000000000;
    v169[3] = 0x600000000;
    CFNumberRef v181 = v169 + 4;
  }
  *(void *)(a1 + 536) = v181;
  unint64_t v192 = *(void *)(a1 + 544);
  if ((unint64_t)v181 >= v192)
  {
    uint64_t v194 = ((char *)v181 - (unsigned char *)*v4) >> 5;
    if ((unint64_t)(v194 + 1) >> 59) {
      goto LABEL_712;
    }
    uint64_t v195 = v192 - (void)*v4;
    uint64_t v196 = v195 >> 4;
    if (v195 >> 4 <= (unint64_t)(v194 + 1)) {
      uint64_t v196 = v194 + 1;
    }
    if ((unint64_t)v195 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v197 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v197 = v196;
    }
    if (v197) {
      unint64_t v197 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(v197);
    }
    else {
      uint64_t v198 = 0;
    }
    uint64_t v199 = (void *)(v197 + 32 * v194);
    unint64_t v200 = v197 + 32 * v198;
    void *v199 = @"Best Echo Mic Index (e.g., Mic2 for iPhone)";
    v199[1] = 0x8000000000000001;
    v199[2] = 0x4100000000000000;
    v199[3] = 0x640000000;
    int v193 = v199 + 4;
    uint64_t v201 = *(char **)(a1 + 536);
    unint64_t v202 = *(char **)(a1 + 528);
    if (v201 != v202)
    {
      do
      {
        long long v203 = *((_OWORD *)v201 - 1);
        *((_OWORD *)v199 - 2) = *((_OWORD *)v201 - 2);
        *((_OWORD *)v199 - 1) = v203;
        v199 -= 4;
        v201 -= 32;
      }
      while (v201 != v202);
      uint64_t v201 = (char *)*v4;
    }
    *(void *)(a1 + 528) = v199;
    *(void *)(a1 + 536) = v193;
    *(void *)(a1 + 544) = v200;
    if (v201) {
      operator delete(v201);
    }
  }
  else
  {
    void *v181 = @"Best Echo Mic Index (e.g., Mic2 for iPhone)";
    v181[1] = 0x8000000000000001;
    v181[2] = 0x4100000000000000;
    v181[3] = 0x640000000;
    int v193 = v181 + 4;
  }
  *(void *)(a1 + 536) = v193;
  unint64_t v204 = *(void *)(a1 + 544);
  if ((unint64_t)v193 >= v204)
  {
    uint64_t v206 = ((char *)v193 - (unsigned char *)*v4) >> 5;
    if ((unint64_t)(v206 + 1) >> 59) {
      goto LABEL_712;
    }
    uint64_t v207 = v204 - (void)*v4;
    uint64_t v208 = v207 >> 4;
    if (v207 >> 4 <= (unint64_t)(v206 + 1)) {
      uint64_t v208 = v206 + 1;
    }
    if ((unint64_t)v207 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v209 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v209 = v208;
    }
    if (v209) {
      unint64_t v209 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(v209);
    }
    else {
      uint64_t v210 = 0;
    }
    uint64_t v211 = (void *)(v209 + 32 * v206);
    unint64_t v212 = v209 + 32 * v210;
    *uint64_t v211 = @"Primary Mic Blocked or In High Echo Coupling State";
    v211[1] = 0xA00000000001;
    v211[2] = 0x3F80000000000000;
    v211[3] = 0x100000000;
    unint64_t v205 = (char *)(v211 + 4);
    int v213 = *(char **)(a1 + 536);
    Float64 v214 = *(char **)(a1 + 528);
    if (v213 != v214)
    {
      do
      {
        long long v215 = *((_OWORD *)v213 - 1);
        *((_OWORD *)v211 - 2) = *((_OWORD *)v213 - 2);
        *((_OWORD *)v211 - 1) = v215;
        v211 -= 4;
        v213 -= 32;
      }
      while (v213 != v214);
      int v213 = (char *)*v4;
    }
    *(void *)(a1 + 528) = v211;
    *(void *)(a1 + 536) = v205;
    *(void *)(a1 + 544) = v212;
    if (v213) {
      operator delete(v213);
    }
  }
  else
  {
    char *v193 = @"Primary Mic Blocked or In High Echo Coupling State";
    v193[1] = 0xA00000000001;
    v193[2] = 0x3F80000000000000;
    v193[3] = 0x100000000;
    unint64_t v205 = (char *)(v193 + 4);
  }
  *(void *)(a1 + 536) = v205;
  unint64_t v216 = *(void *)(a1 + 544);
  if ((unint64_t)v205 >= v216)
  {
    uint64_t v218 = (v205 - (unsigned char *)*v4) >> 5;
    if ((unint64_t)(v218 + 1) >> 59) {
      goto LABEL_712;
    }
    uint64_t v219 = v216 - (void)*v4;
    uint64_t v220 = v219 >> 4;
    if (v219 >> 4 <= (unint64_t)(v218 + 1)) {
      uint64_t v220 = v218 + 1;
    }
    if ((unint64_t)v219 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v221 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v221 = v220;
    }
    if (v221) {
      unint64_t v221 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(v221);
    }
    else {
      uint64_t v222 = 0;
    }
    CFTypeRef v223 = (void *)(v221 + 32 * v218);
    unint64_t v224 = v221 + 32 * v222;
    *CFTypeRef v223 = @"Time Constant for ECLee Energy Smoothing";
    v223[1] = 0x8000000000000018;
    v223[2] = 0x461C400000000000;
    v223[3] = 0x642C80000;
    unsigned int v217 = (char *)(v223 + 4);
    float v225 = *(char **)(a1 + 536);
    unsigned int v226 = *(char **)(a1 + 528);
    if (v225 != v226)
    {
      do
      {
        long long v227 = *((_OWORD *)v225 - 1);
        *((_OWORD *)v223 - 2) = *((_OWORD *)v225 - 2);
        *((_OWORD *)v223 - 1) = v227;
        v223 -= 4;
        v225 -= 32;
      }
      while (v225 != v226);
      float v225 = (char *)*v4;
    }
    *(void *)(a1 + 528) = v223;
    *(void *)(a1 + 536) = v217;
    *(void *)(a1 + 544) = v224;
    if (v225) {
      operator delete(v225);
    }
  }
  else
  {
    *(void *)unint64_t v205 = @"Time Constant for ECLee Energy Smoothing";
    *((void *)v205 + 1) = 0x8000000000000018;
    *((void *)v205 + 2) = 0x461C400000000000;
    *((void *)v205 + 3) = 0x642C80000;
    unsigned int v217 = v205 + 32;
  }
  *(void *)(a1 + 536) = v217;
  unint64_t v228 = *(void *)(a1 + 544);
  if ((unint64_t)v217 >= v228)
  {
    uint64_t v230 = (v217 - (unsigned char *)*v4) >> 5;
    if ((unint64_t)(v230 + 1) >> 59) {
      goto LABEL_712;
    }
    uint64_t v231 = v228 - (void)*v4;
    uint64_t v232 = v231 >> 4;
    if (v231 >> 4 <= (unint64_t)(v230 + 1)) {
      uint64_t v232 = v230 + 1;
    }
    if ((unint64_t)v231 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v233 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v233 = v232;
    }
    if (v233) {
      unint64_t v233 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(v233);
    }
    else {
      uint64_t v234 = 0;
    }
    Boolean v235 = (void *)(v233 + 32 * v230);
    unint64_t v236 = v233 + 32 * v234;
    *Boolean v235 = @"Hangover Time Onset for Primary Mic Blocked/Coupling Flag";
    v235[1] = 0x8000000000000018;
    v235[2] = 0x461C400000000000;
    v235[3] = 0x641F00000;
    float v229 = (char *)(v235 + 4);
    float v237 = *(char **)(a1 + 536);
    CFTypeRef v238 = *(char **)(a1 + 528);
    if (v237 != v238)
    {
      do
      {
        long long v239 = *((_OWORD *)v237 - 1);
        *((_OWORD *)v235 - 2) = *((_OWORD *)v237 - 2);
        *((_OWORD *)v235 - 1) = v239;
        v235 -= 4;
        v237 -= 32;
      }
      while (v237 != v238);
      float v237 = (char *)*v4;
    }
    *(void *)(a1 + 528) = v235;
    *(void *)(a1 + 536) = v229;
    *(void *)(a1 + 544) = v236;
    if (v237) {
      operator delete(v237);
    }
  }
  else
  {
    *(void *)unsigned int v217 = @"Hangover Time Onset for Primary Mic Blocked/Coupling Flag";
    *((void *)v217 + 1) = 0x8000000000000018;
    *((void *)v217 + 2) = 0x461C400000000000;
    *((void *)v217 + 3) = 0x641F00000;
    float v229 = v217 + 32;
  }
  *(void *)(a1 + 536) = v229;
  unint64_t v240 = *(void *)(a1 + 544);
  if ((unint64_t)v229 >= v240)
  {
    uint64_t v242 = (v229 - (unsigned char *)*v4) >> 5;
    if ((unint64_t)(v242 + 1) >> 59) {
      goto LABEL_712;
    }
    uint64_t v243 = v240 - (void)*v4;
    uint64_t v244 = v243 >> 4;
    if (v243 >> 4 <= (unint64_t)(v242 + 1)) {
      uint64_t v244 = v242 + 1;
    }
    if ((unint64_t)v243 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v245 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v245 = v244;
    }
    if (v245) {
      unint64_t v245 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(v245);
    }
    else {
      uint64_t v246 = 0;
    }
    std::string v247 = (void *)(v245 + 32 * v242);
    unint64_t v248 = v245 + 32 * v246;
    *std::string v247 = @"Hangover Time Offset for Primary Mic Blocked/Coupling Flag";
    v247[1] = 0x8000000000000018;
    v247[2] = 0x461C400000000000;
    v247[3] = 0x643FA0000;
    unsigned __int8 v241 = (char *)(v247 + 4);
    uint64_t v249 = *(char **)(a1 + 536);
    uint64_t v250 = *(char **)(a1 + 528);
    if (v249 != v250)
    {
      do
      {
        long long v251 = *((_OWORD *)v249 - 1);
        *((_OWORD *)v247 - 2) = *((_OWORD *)v249 - 2);
        *((_OWORD *)v247 - 1) = v251;
        v247 -= 4;
        v249 -= 32;
      }
      while (v249 != v250);
      uint64_t v249 = (char *)*v4;
    }
    *(void *)(a1 + 528) = v247;
    *(void *)(a1 + 536) = v241;
    *(void *)(a1 + 544) = v248;
    if (v249) {
      operator delete(v249);
    }
  }
  else
  {
    *(void *)float v229 = @"Hangover Time Offset for Primary Mic Blocked/Coupling Flag";
    *((void *)v229 + 1) = 0x8000000000000018;
    *((void *)v229 + 2) = 0x461C400000000000;
    *((void *)v229 + 3) = 0x643FA0000;
    unsigned __int8 v241 = v229 + 32;
  }
  *(void *)(a1 + 536) = v241;
  unint64_t v252 = *(void *)(a1 + 544);
  if ((unint64_t)v241 >= v252)
  {
    uint64_t v254 = (v241 - (unsigned char *)*v4) >> 5;
    if ((unint64_t)(v254 + 1) >> 59) {
      goto LABEL_712;
    }
    uint64_t v255 = v252 - (void)*v4;
    uint64_t v256 = v255 >> 4;
    if (v255 >> 4 <= (unint64_t)(v254 + 1)) {
      uint64_t v256 = v254 + 1;
    }
    if ((unint64_t)v255 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v257 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v257 = v256;
    }
    if (v257) {
      unint64_t v257 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(v257);
    }
    else {
      uint64_t v258 = 0;
    }
    float v259 = (void *)(v257 + 32 * v254);
    unint64_t v260 = v257 + 32 * v258;
    *float v259 = @"Low Freq for Blocked Mic Detection Band";
    v259[1] = 0x8000000000000008;
    v259[2] = 0x469C400000000000;
    v259[3] = 0x6457A0000;
    uint64_t v253 = (char *)(v259 + 4);
    uint64_t v261 = *(char **)(a1 + 536);
    int v262 = *(char **)(a1 + 528);
    if (v261 != v262)
    {
      do
      {
        long long v263 = *((_OWORD *)v261 - 1);
        *((_OWORD *)v259 - 2) = *((_OWORD *)v261 - 2);
        *((_OWORD *)v259 - 1) = v263;
        v259 -= 4;
        v261 -= 32;
      }
      while (v261 != v262);
      uint64_t v261 = (char *)*v4;
    }
    *(void *)(a1 + 528) = v259;
    *(void *)(a1 + 536) = v253;
    *(void *)(a1 + 544) = v260;
    if (v261) {
      operator delete(v261);
    }
  }
  else
  {
    *(void *)unsigned __int8 v241 = @"Low Freq for Blocked Mic Detection Band";
    *((void *)v241 + 1) = 0x8000000000000008;
    *((void *)v241 + 2) = 0x469C400000000000;
    *((void *)v241 + 3) = 0x6457A0000;
    uint64_t v253 = v241 + 32;
  }
  *(void *)(a1 + 536) = v253;
  unint64_t v264 = *(void *)(a1 + 544);
  if ((unint64_t)v253 >= v264)
  {
    uint64_t v266 = (v253 - (unsigned char *)*v4) >> 5;
    if ((unint64_t)(v266 + 1) >> 59) {
      goto LABEL_712;
    }
    uint64_t v267 = v264 - (void)*v4;
    uint64_t v268 = v267 >> 4;
    if (v267 >> 4 <= (unint64_t)(v266 + 1)) {
      uint64_t v268 = v266 + 1;
    }
    if ((unint64_t)v267 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v269 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v269 = v268;
    }
    if (v269) {
      unint64_t v269 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(v269);
    }
    else {
      uint64_t v270 = 0;
    }
    int v271 = (void *)(v269 + 32 * v266);
    unint64_t v272 = v269 + 32 * v270;
    *int v271 = @"High Freq for Blocked Mic Detection Band";
    v271[1] = 0x8000000000000008;
    v271[2] = 0x469C400000000000;
    v271[3] = 0x645FA0000;
    uint64_t v265 = (char *)(v271 + 4);
    char v273 = *(char **)(a1 + 536);
    uint64_t v274 = *(char **)(a1 + 528);
    if (v273 != v274)
    {
      do
      {
        long long v275 = *((_OWORD *)v273 - 1);
        *((_OWORD *)v271 - 2) = *((_OWORD *)v273 - 2);
        *((_OWORD *)v271 - 1) = v275;
        v271 -= 4;
        v273 -= 32;
      }
      while (v273 != v274);
      char v273 = (char *)*v4;
    }
    *(void *)(a1 + 528) = v271;
    *(void *)(a1 + 536) = v265;
    *(void *)(a1 + 544) = v272;
    if (v273) {
      operator delete(v273);
    }
  }
  else
  {
    *(void *)uint64_t v253 = @"High Freq for Blocked Mic Detection Band";
    *((void *)v253 + 1) = 0x8000000000000008;
    *((void *)v253 + 2) = 0x469C400000000000;
    *((void *)v253 + 3) = 0x645FA0000;
    uint64_t v265 = v253 + 32;
  }
  *(void *)(a1 + 536) = v265;
  unint64_t v276 = *(void *)(a1 + 544);
  if ((unint64_t)v265 >= v276)
  {
    uint64_t v278 = (v265 - (unsigned char *)*v4) >> 5;
    if ((unint64_t)(v278 + 1) >> 59) {
      goto LABEL_712;
    }
    uint64_t v279 = v276 - (void)*v4;
    uint64_t v280 = v279 >> 4;
    if (v279 >> 4 <= (unint64_t)(v278 + 1)) {
      uint64_t v280 = v278 + 1;
    }
    if ((unint64_t)v279 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v281 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v281 = v280;
    }
    if (v281) {
      unint64_t v281 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(v281);
    }
    else {
      uint64_t v282 = 0;
    }
    unint64_t v283 = (void *)(v281 + 32 * v278);
    unint64_t v284 = v281 + 32 * v282;
    *unint64_t v283 = @"Coherence Thr in Blocked Mic Detection Band";
    v283[1] = 0x8000000000000000;
    v283[2] = 0x3F80000000000000;
    v283[3] = 0x63F000000;
    int v277 = (char *)(v283 + 4);
    unint64_t v285 = *(char **)(a1 + 536);
    int v286 = *(char **)(a1 + 528);
    if (v285 != v286)
    {
      do
      {
        long long v287 = *((_OWORD *)v285 - 1);
        *((_OWORD *)v283 - 2) = *((_OWORD *)v285 - 2);
        *((_OWORD *)v283 - 1) = v287;
        v283 -= 4;
        v285 -= 32;
      }
      while (v285 != v286);
      unint64_t v285 = (char *)*v4;
    }
    *(void *)(a1 + 528) = v283;
    *(void *)(a1 + 536) = v277;
    *(void *)(a1 + 544) = v284;
    if (v285) {
      operator delete(v285);
    }
  }
  else
  {
    *(void *)uint64_t v265 = @"Coherence Thr in Blocked Mic Detection Band";
    *((void *)v265 + 1) = 0x8000000000000000;
    *((void *)v265 + 2) = 0x3F80000000000000;
    *((void *)v265 + 3) = 0x63F000000;
    int v277 = v265 + 32;
  }
  *(void *)(a1 + 536) = v277;
  unint64_t v288 = *(void *)(a1 + 544);
  if ((unint64_t)v277 >= v288)
  {
    uint64_t v290 = (v277 - (unsigned char *)*v4) >> 5;
    if ((unint64_t)(v290 + 1) >> 59) {
      goto LABEL_712;
    }
    uint64_t v291 = v288 - (void)*v4;
    uint64_t v292 = v291 >> 4;
    if (v291 >> 4 <= (unint64_t)(v290 + 1)) {
      uint64_t v292 = v290 + 1;
    }
    if ((unint64_t)v291 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v293 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v293 = v292;
    }
    if (v293) {
      unint64_t v293 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(v293);
    }
    else {
      uint64_t v294 = 0;
    }
    uint64_t v295 = (void *)(v293 + 32 * v290);
    unint64_t v296 = v293 + 32 * v294;
    *uint64_t v295 = @"Energy Thr in Blocked Mic Detection Band";
    v295[1] = 0x8000000000000000;
    v295[2] = 0x43480000C3480000;
    v295[3] = 0x6C2DC0000;
    int v289 = (char *)(v295 + 4);
    v297 = *(char **)(a1 + 536);
    uint64_t v298 = *(char **)(a1 + 528);
    if (v297 != v298)
    {
      do
      {
        long long v299 = *((_OWORD *)v297 - 1);
        *((_OWORD *)v295 - 2) = *((_OWORD *)v297 - 2);
        *((_OWORD *)v295 - 1) = v299;
        v295 -= 4;
        v297 -= 32;
      }
      while (v297 != v298);
      v297 = (char *)*v4;
    }
    *(void *)(a1 + 528) = v295;
    *(void *)(a1 + 536) = v289;
    *(void *)(a1 + 544) = v296;
    if (v297) {
      operator delete(v297);
    }
  }
  else
  {
    *(void *)int v277 = @"Energy Thr in Blocked Mic Detection Band";
    *((void *)v277 + 1) = 0x8000000000000000;
    *((void *)v277 + 2) = 0x43480000C3480000;
    *((void *)v277 + 3) = 0x6C2DC0000;
    int v289 = v277 + 32;
  }
  *(void *)(a1 + 536) = v289;
  unint64_t v300 = *(void *)(a1 + 544);
  if ((unint64_t)v289 >= v300)
  {
    uint64_t v302 = (v289 - (unsigned char *)*v4) >> 5;
    if ((unint64_t)(v302 + 1) >> 59) {
      goto LABEL_712;
    }
    uint64_t v303 = v300 - (void)*v4;
    uint64_t v304 = v303 >> 4;
    if (v303 >> 4 <= (unint64_t)(v302 + 1)) {
      uint64_t v304 = v302 + 1;
    }
    if ((unint64_t)v303 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v305 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v305 = v304;
    }
    if (v305) {
      unint64_t v305 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(v305);
    }
    else {
      uint64_t v306 = 0;
    }
    unsigned int v307 = (void *)(v305 + 32 * v302);
    unint64_t v308 = v305 + 32 * v306;
    *unsigned int v307 = @"Energy Ration Thr in Blocked Mic Detection Band";
    v307[1] = 0x8000000000000000;
    v307[2] = 0x43480000C3480000;
    v307[3] = 0x641200000;
    v301 = v307 + 4;
    unint64_t v309 = *(char **)(a1 + 536);
    uint64_t v310 = *(char **)(a1 + 528);
    if (v309 != v310)
    {
      do
      {
        long long v311 = *((_OWORD *)v309 - 1);
        *((_OWORD *)v307 - 2) = *((_OWORD *)v309 - 2);
        *((_OWORD *)v307 - 1) = v311;
        v307 -= 4;
        v309 -= 32;
      }
      while (v309 != v310);
      unint64_t v309 = (char *)*v4;
    }
    *(void *)(a1 + 528) = v307;
    *(void *)(a1 + 536) = v301;
    *(void *)(a1 + 544) = v308;
    if (v309) {
      operator delete(v309);
    }
  }
  else
  {
    *(void *)int v289 = @"Energy Ration Thr in Blocked Mic Detection Band";
    *((void *)v289 + 1) = 0x8000000000000000;
    *((void *)v289 + 2) = 0x43480000C3480000;
    *((void *)v289 + 3) = 0x641200000;
    v301 = v289 + 32;
  }
  *(void *)(a1 + 536) = v301;
  unsigned int v312 = *(void **)(a1 + 560);
  unint64_t v313 = *(void *)(a1 + 568);
  if ((unint64_t)v312 >= v313)
  {
    uint64_t v315 = *(void *)(a1 + 552);
    uint64_t v316 = ((uint64_t)v312 - v315) >> 5;
    unint64_t v317 = v316 + 1;
    if ((unint64_t)(v316 + 1) >> 59) {
      goto LABEL_712;
    }
    uint64_t v318 = v313 - v315;
    if (v318 >> 4 > v317) {
      unint64_t v317 = v318 >> 4;
    }
    if ((unint64_t)v318 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v319 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v319 = v317;
    }
    if (v319) {
      unint64_t v319 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(v319);
    }
    else {
      uint64_t v320 = 0;
    }
    int v321 = (void *)(v319 + 32 * v316);
    unint64_t v322 = v319 + 32 * v320;
    *int v321 = @"Wind Probability";
    v321[1] = 0xA00000000000;
    v321[2] = 0x3F80000000000000;
    v321[3] = 0xFFFFFFFF00000000;
    int v314 = v321 + 4;
    v323 = *(char **)(a1 + 560);
    uint64_t v324 = *(char **)(a1 + 552);
    if (v323 != v324)
    {
      do
      {
        long long v325 = *((_OWORD *)v323 - 1);
        *((_OWORD *)v321 - 2) = *((_OWORD *)v323 - 2);
        *((_OWORD *)v321 - 1) = v325;
        v321 -= 4;
        v323 -= 32;
      }
      while (v323 != v324);
      v323 = *(char **)(a1 + 552);
    }
    *(void *)(a1 + 552) = v321;
    *(void *)(a1 + 560) = v314;
    *(void *)(a1 + 568) = v322;
    if (v323) {
      operator delete(v323);
    }
  }
  else
  {
    *unsigned int v312 = @"Wind Probability";
    v312[1] = 0xA00000000000;
    v312[2] = 0x3F80000000000000;
    v312[3] = 0xFFFFFFFF00000000;
    int v314 = v312 + 4;
  }
  *(void *)(a1 + 560) = v314;
  unint64_t v326 = *(void *)(a1 + 568);
  if ((unint64_t)v314 >= v326)
  {
    uint64_t v328 = *(void *)(a1 + 552);
    uint64_t v329 = ((uint64_t)v314 - v328) >> 5;
    if ((unint64_t)(v329 + 1) >> 59) {
      goto LABEL_712;
    }
    uint64_t v330 = v326 - v328;
    uint64_t v331 = v330 >> 4;
    if (v330 >> 4 <= (unint64_t)(v329 + 1)) {
      uint64_t v331 = v329 + 1;
    }
    if ((unint64_t)v330 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v332 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v332 = v331;
    }
    if (v332) {
      unint64_t v332 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(v332);
    }
    else {
      uint64_t v333 = 0;
    }
    char v334 = (void *)(v332 + 32 * v329);
    unint64_t v335 = v332 + 32 * v333;
    *char v334 = @"Wind Flag";
    v334[1] = 0xA00000000000;
    v334[2] = 0x3F80000000000000;
    v334[3] = 0xFFFFFFFF00000000;
    unsigned int v327 = v334 + 4;
    uint64_t v336 = *(char **)(a1 + 560);
    uint64_t v337 = *(char **)(a1 + 552);
    if (v336 != v337)
    {
      do
      {
        long long v338 = *((_OWORD *)v336 - 1);
        *((_OWORD *)v334 - 2) = *((_OWORD *)v336 - 2);
        *((_OWORD *)v334 - 1) = v338;
        v334 -= 4;
        v336 -= 32;
      }
      while (v336 != v337);
      uint64_t v336 = *(char **)(a1 + 552);
    }
    *(void *)(a1 + 552) = v334;
    *(void *)(a1 + 560) = v327;
    *(void *)(a1 + 568) = v335;
    if (v336) {
      operator delete(v336);
    }
  }
  else
  {
    *int v314 = @"Wind Flag";
    v314[1] = 0xA00000000000;
    v314[2] = 0x3F80000000000000;
    v314[3] = 0xFFFFFFFF00000000;
    unsigned int v327 = v314 + 4;
  }
  *(void *)(a1 + 560) = v327;
  unint64_t v339 = *(void *)(a1 + 568);
  if ((unint64_t)v327 >= v339)
  {
    uint64_t v341 = *(void *)(a1 + 552);
    uint64_t v342 = ((uint64_t)v327 - v341) >> 5;
    if ((unint64_t)(v342 + 1) >> 59) {
      goto LABEL_712;
    }
    uint64_t v343 = v339 - v341;
    uint64_t v344 = v343 >> 4;
    if (v343 >> 4 <= (unint64_t)(v342 + 1)) {
      uint64_t v344 = v342 + 1;
    }
    if ((unint64_t)v343 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v345 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v345 = v344;
    }
    if (v345) {
      unint64_t v345 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(v345);
    }
    else {
      uint64_t v346 = 0;
    }
    uint64_t v347 = (void *)(v345 + 32 * v342);
    unint64_t v348 = v345 + 32 * v346;
    *uint64_t v347 = @"Blocked Mic Probability";
    v347[1] = 0xA00000000000;
    v347[2] = 0x3F80000000000000;
    v347[3] = 0xFFFFFFFF00000000;
    uint64_t v340 = v347 + 4;
    int v349 = *(char **)(a1 + 560);
    uint64_t v350 = *(char **)(a1 + 552);
    if (v349 != v350)
    {
      do
      {
        long long v351 = *((_OWORD *)v349 - 1);
        *((_OWORD *)v347 - 2) = *((_OWORD *)v349 - 2);
        *((_OWORD *)v347 - 1) = v351;
        v347 -= 4;
        v349 -= 32;
      }
      while (v349 != v350);
      int v349 = *(char **)(a1 + 552);
    }
    *(void *)(a1 + 552) = v347;
    *(void *)(a1 + 560) = v340;
    *(void *)(a1 + 568) = v348;
    if (v349) {
      operator delete(v349);
    }
  }
  else
  {
    *unsigned int v327 = @"Blocked Mic Probability";
    v327[1] = 0xA00000000000;
    v327[2] = 0x3F80000000000000;
    v327[3] = 0xFFFFFFFF00000000;
    uint64_t v340 = v327 + 4;
  }
  *(void *)(a1 + 560) = v340;
  unint64_t v352 = *(void *)(a1 + 568);
  if ((unint64_t)v340 >= v352)
  {
    uint64_t v354 = *(void *)(a1 + 552);
    uint64_t v355 = ((uint64_t)v340 - v354) >> 5;
    if ((unint64_t)(v355 + 1) >> 59) {
      goto LABEL_712;
    }
    uint64_t v356 = v352 - v354;
    uint64_t v357 = v356 >> 4;
    if (v356 >> 4 <= (unint64_t)(v355 + 1)) {
      uint64_t v357 = v355 + 1;
    }
    if ((unint64_t)v356 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v358 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v358 = v357;
    }
    if (v358) {
      unint64_t v358 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(v358);
    }
    else {
      uint64_t v359 = 0;
    }
    float v360 = (void *)(v358 + 32 * v355);
    unint64_t v361 = v358 + 32 * v359;
    *float v360 = @"Blocked Mic Flag";
    v360[1] = 0xA00000000001;
    v360[2] = 0x3F80000000000000;
    v360[3] = 0xFFFFFFFF00000000;
    std::string v353 = v360 + 4;
    unsigned __int8 v362 = *(char **)(a1 + 560);
    float v363 = *(char **)(a1 + 552);
    if (v362 != v363)
    {
      do
      {
        long long v364 = *((_OWORD *)v362 - 1);
        *((_OWORD *)v360 - 2) = *((_OWORD *)v362 - 2);
        *((_OWORD *)v360 - 1) = v364;
        v360 -= 4;
        v362 -= 32;
      }
      while (v362 != v363);
      unsigned __int8 v362 = *(char **)(a1 + 552);
    }
    *(void *)(a1 + 552) = v360;
    *(void *)(a1 + 560) = v353;
    *(void *)(a1 + 568) = v361;
    if (v362) {
      operator delete(v362);
    }
  }
  else
  {
    *uint64_t v340 = @"Blocked Mic Flag";
    v340[1] = 0xA00000000001;
    v340[2] = 0x3F80000000000000;
    v340[3] = 0xFFFFFFFF00000000;
    std::string v353 = v340 + 4;
  }
  *(void *)(a1 + 560) = v353;
  unint64_t v365 = *(void *)(a1 + 568);
  if ((unint64_t)v353 >= v365)
  {
    uint64_t v367 = *(void *)(a1 + 552);
    uint64_t v368 = ((uint64_t)v353 - v367) >> 5;
    if ((unint64_t)(v368 + 1) >> 59) {
      goto LABEL_712;
    }
    uint64_t v369 = v365 - v367;
    uint64_t v370 = v369 >> 4;
    if (v369 >> 4 <= (unint64_t)(v368 + 1)) {
      uint64_t v370 = v368 + 1;
    }
    if ((unint64_t)v369 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v371 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v371 = v370;
    }
    if (v371) {
      unint64_t v371 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(v371);
    }
    else {
      uint64_t v372 = 0;
    }
    unsigned int v373 = (void *)(v371 + 32 * v368);
    unint64_t v374 = v371 + 32 * v372;
    void *v373 = @"Wind Level";
    v373[1] = 0xA0000000000DLL;
    v373[2] = 0x42700000C30C0000;
    v373[3] = 0xFFFFFFFF00000000;
    float v366 = v373 + 4;
    int v375 = *(char **)(a1 + 560);
    float v376 = *(char **)(a1 + 552);
    if (v375 != v376)
    {
      do
      {
        long long v377 = *((_OWORD *)v375 - 1);
        *((_OWORD *)v373 - 2) = *((_OWORD *)v375 - 2);
        *((_OWORD *)v373 - 1) = v377;
        v373 -= 4;
        v375 -= 32;
      }
      while (v375 != v376);
      int v375 = *(char **)(a1 + 552);
    }
    *(void *)(a1 + 552) = v373;
    *(void *)(a1 + 560) = v366;
    *(void *)(a1 + 568) = v374;
    if (v375) {
      operator delete(v375);
    }
  }
  else
  {
    *std::string v353 = @"Wind Level";
    v353[1] = 0xA0000000000DLL;
    v353[2] = 0x42700000C30C0000;
    v353[3] = 0xFFFFFFFF00000000;
    float v366 = v353 + 4;
  }
  *(void *)(a1 + 560) = v366;
  unint64_t v378 = *(void *)(a1 + 568);
  if ((unint64_t)v366 >= v378)
  {
    uint64_t v380 = *(void *)(a1 + 552);
    uint64_t v381 = ((uint64_t)v366 - v380) >> 5;
    if ((unint64_t)(v381 + 1) >> 59) {
      goto LABEL_712;
    }
    uint64_t v382 = v378 - v380;
    uint64_t v383 = v382 >> 4;
    if (v382 >> 4 <= (unint64_t)(v381 + 1)) {
      uint64_t v383 = v381 + 1;
    }
    if ((unint64_t)v382 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v384 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v384 = v383;
    }
    if (v384) {
      unint64_t v384 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(v384);
    }
    else {
      uint64_t v385 = 0;
    }
    long long v386 = (void *)(v384 + 32 * v381);
    unint64_t v387 = v384 + 32 * v385;
    *long long v386 = @"Mic Gain Linear";
    v386[1] = 0xA00000000000;
    v386[2] = 0x3F80000000000000;
    v386[3] = 0xFFFFFFFF00000000;
    long long v379 = v386 + 4;
    int v388 = *(char **)(a1 + 560);
    int v389 = *(char **)(a1 + 552);
    if (v388 != v389)
    {
      do
      {
        long long v390 = *((_OWORD *)v388 - 1);
        *((_OWORD *)v386 - 2) = *((_OWORD *)v388 - 2);
        *((_OWORD *)v386 - 1) = v390;
        v386 -= 4;
        v388 -= 32;
      }
      while (v388 != v389);
      int v388 = *(char **)(a1 + 552);
    }
    *(void *)(a1 + 552) = v386;
    *(void *)(a1 + 560) = v379;
    *(void *)(a1 + 568) = v387;
    if (v388) {
      operator delete(v388);
    }
  }
  else
  {
    *float v366 = @"Mic Gain Linear";
    v366[1] = 0xA00000000000;
    v366[2] = 0x3F80000000000000;
    v366[3] = 0xFFFFFFFF00000000;
    long long v379 = v366 + 4;
  }
  *(void *)(a1 + 560) = v379;
  unint64_t v391 = *(void *)(a1 + 568);
  if ((unint64_t)v379 >= v391)
  {
    uint64_t v393 = *(void *)(a1 + 552);
    uint64_t v394 = ((uint64_t)v379 - v393) >> 5;
    if ((unint64_t)(v394 + 1) >> 59) {
      goto LABEL_712;
    }
    uint64_t v395 = v391 - v393;
    uint64_t v396 = v395 >> 4;
    if (v395 >> 4 <= (unint64_t)(v394 + 1)) {
      uint64_t v396 = v394 + 1;
    }
    if ((unint64_t)v395 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v397 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v397 = v396;
    }
    if (v397) {
      unint64_t v397 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(v397);
    }
    else {
      uint64_t v398 = 0;
    }
    v399 = (void *)(v397 + 32 * v394);
    unint64_t v400 = v397 + 32 * v398;
    void *v399 = @"ECLee Engergy from EC";
    v399[1] = 0xA00000000000;
    v399[2] = 0x43480000C3480000;
    v399[3] = 0xFFFFFFFF00000000;
    unint64_t v392 = v399 + 4;
    std::string v401 = *(char **)(a1 + 560);
    double v402 = *(char **)(a1 + 552);
    if (v401 != v402)
    {
      do
      {
        long long v403 = *((_OWORD *)v401 - 1);
        *((_OWORD *)v399 - 2) = *((_OWORD *)v401 - 2);
        *((_OWORD *)v399 - 1) = v403;
        v399 -= 4;
        v401 -= 32;
      }
      while (v401 != v402);
      std::string v401 = *(char **)(a1 + 552);
    }
    *(void *)(a1 + 552) = v399;
    *(void *)(a1 + 560) = v392;
    *(void *)(a1 + 568) = v400;
    if (v401) {
      operator delete(v401);
    }
  }
  else
  {
    *long long v379 = @"ECLee Engergy from EC";
    v379[1] = 0xA00000000000;
    v379[2] = 0x43480000C3480000;
    v379[3] = 0xFFFFFFFF00000000;
    unint64_t v392 = v379 + 4;
  }
  *(void *)(a1 + 560) = v392;
  unint64_t v404 = *(void *)(a1 + 568);
  if ((unint64_t)v392 >= v404)
  {
    uint64_t v406 = *(void *)(a1 + 552);
    uint64_t v407 = ((uint64_t)v392 - v406) >> 5;
    if ((unint64_t)(v407 + 1) >> 59) {
      goto LABEL_712;
    }
    uint64_t v408 = v404 - v406;
    uint64_t v409 = v408 >> 4;
    if (v408 >> 4 <= (unint64_t)(v407 + 1)) {
      uint64_t v409 = v407 + 1;
    }
    if ((unint64_t)v408 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v410 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v410 = v409;
    }
    if (v410) {
      unint64_t v410 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(v410);
    }
    else {
      uint64_t v411 = 0;
    }
    int v412 = (void *)(v410 + 32 * v407);
    unint64_t v413 = v410 + 32 * v411;
    *int v412 = @"Echo2Lv from EC";
    v412[1] = 0xA00000000000;
    v412[2] = 0x43480000C3480000;
    v412[3] = 0xFFFFFFFF00000000;
    __int16 v405 = v412 + 4;
    __int16 v414 = *(char **)(a1 + 560);
    v415 = *(char **)(a1 + 552);
    if (v414 != v415)
    {
      do
      {
        long long v416 = *((_OWORD *)v414 - 1);
        *((_OWORD *)v412 - 2) = *((_OWORD *)v414 - 2);
        *((_OWORD *)v412 - 1) = v416;
        v412 -= 4;
        v414 -= 32;
      }
      while (v414 != v415);
      __int16 v414 = *(char **)(a1 + 552);
    }
    *(void *)(a1 + 552) = v412;
    *(void *)(a1 + 560) = v405;
    *(void *)(a1 + 568) = v413;
    if (v414) {
      operator delete(v414);
    }
  }
  else
  {
    *unint64_t v392 = @"Echo2Lv from EC";
    v392[1] = 0xA00000000000;
    v392[2] = 0x43480000C3480000;
    v392[3] = 0xFFFFFFFF00000000;
    __int16 v405 = v392 + 4;
  }
  *(void *)(a1 + 560) = v405;
  unint64_t v417 = *(void *)(a1 + 568);
  if ((unint64_t)v405 >= v417)
  {
    uint64_t v419 = *(void *)(a1 + 552);
    uint64_t v420 = ((uint64_t)v405 - v419) >> 5;
    if ((unint64_t)(v420 + 1) >> 59) {
      goto LABEL_712;
    }
    uint64_t v421 = v417 - v419;
    uint64_t v422 = v421 >> 4;
    if (v421 >> 4 <= (unint64_t)(v420 + 1)) {
      uint64_t v422 = v420 + 1;
    }
    if ((unint64_t)v421 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v423 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v423 = v422;
    }
    if (v423) {
      unint64_t v423 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(v423);
    }
    else {
      uint64_t v424 = 0;
    }
    v425 = (void *)(v423 + 32 * v420);
    unint64_t v426 = v423 + 32 * v424;
    void *v425 = @"Echo Flag from EC";
    v425[1] = 0xA00000000000;
    v425[2] = 0x3F80000000000000;
    v425[3] = 0xFFFFFFFF00000000;
    v418 = v425 + 4;
    v427 = *(char **)(a1 + 560);
    v428 = *(char **)(a1 + 552);
    if (v427 != v428)
    {
      do
      {
        long long v429 = *((_OWORD *)v427 - 1);
        *((_OWORD *)v425 - 2) = *((_OWORD *)v427 - 2);
        *((_OWORD *)v425 - 1) = v429;
        v425 -= 4;
        v427 -= 32;
      }
      while (v427 != v428);
      v427 = *(char **)(a1 + 552);
    }
    *(void *)(a1 + 552) = v425;
    *(void *)(a1 + 560) = v418;
    *(void *)(a1 + 568) = v426;
    if (v427) {
      operator delete(v427);
    }
  }
  else
  {
    *__int16 v405 = @"Echo Flag from EC";
    v405[1] = 0xA00000000000;
    v405[2] = 0x3F80000000000000;
    v405[3] = 0xFFFFFFFF00000000;
    v418 = v405 + 4;
  }
  *(void *)(a1 + 560) = v418;
  unint64_t v430 = *(void *)(a1 + 568);
  if ((unint64_t)v418 >= v430)
  {
    uint64_t v432 = *(void *)(a1 + 552);
    uint64_t v433 = ((uint64_t)v418 - v432) >> 5;
    if ((unint64_t)(v433 + 1) >> 59) {
      goto LABEL_712;
    }
    uint64_t v434 = v430 - v432;
    uint64_t v435 = v434 >> 4;
    if (v434 >> 4 <= (unint64_t)(v433 + 1)) {
      uint64_t v435 = v433 + 1;
    }
    if ((unint64_t)v434 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v436 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v436 = v435;
    }
    if (v436) {
      unint64_t v436 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(v436);
    }
    else {
      uint64_t v437 = 0;
    }
    v438 = (void *)(v436 + 32 * v433);
    unint64_t v439 = v436 + 32 * v437;
    void *v438 = @"Echo Leakage from EC";
    v438[1] = 0xA00000000000;
    v438[2] = 0x43480000C3480000;
    v438[3] = 0xFFFFFFFF00000000;
    v431 = v438 + 4;
    v440 = *(char **)(a1 + 560);
    v441 = *(char **)(a1 + 552);
    if (v440 != v441)
    {
      do
      {
        long long v442 = *((_OWORD *)v440 - 1);
        *((_OWORD *)v438 - 2) = *((_OWORD *)v440 - 2);
        *((_OWORD *)v438 - 1) = v442;
        v438 -= 4;
        v440 -= 32;
      }
      while (v440 != v441);
      v440 = *(char **)(a1 + 552);
    }
    *(void *)(a1 + 552) = v438;
    *(void *)(a1 + 560) = v431;
    *(void *)(a1 + 568) = v439;
    if (v440) {
      operator delete(v440);
    }
  }
  else
  {
    void *v418 = @"Echo Leakage from EC";
    v418[1] = 0xA00000000000;
    v418[2] = 0x43480000C3480000;
    v418[3] = 0xFFFFFFFF00000000;
    v431 = v418 + 4;
  }
  *(void *)(a1 + 560) = v431;
  unint64_t v443 = *(void *)(a1 + 568);
  if ((unint64_t)v431 >= v443)
  {
    uint64_t v445 = *(void *)(a1 + 552);
    uint64_t v446 = ((uint64_t)v431 - v445) >> 5;
    if ((unint64_t)(v446 + 1) >> 59) {
      goto LABEL_712;
    }
    uint64_t v447 = v443 - v445;
    uint64_t v448 = v447 >> 4;
    if (v447 >> 4 <= (unint64_t)(v446 + 1)) {
      uint64_t v448 = v446 + 1;
    }
    if ((unint64_t)v447 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v449 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v449 = v448;
    }
    if (v449) {
      unint64_t v449 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(v449);
    }
    else {
      uint64_t v450 = 0;
    }
    v451 = (void *)(v449 + 32 * v446);
    unint64_t v452 = v449 + 32 * v450;
    void *v451 = @"Threshold on ECLee Energy";
    v451[1] = 0x8000000000000000;
    v451[2] = 0x43480000C3480000;
    v451[3] = -1018691584;
    v444 = v451 + 4;
    v453 = *(char **)(a1 + 560);
    v454 = *(char **)(a1 + 552);
    if (v453 != v454)
    {
      do
      {
        long long v455 = *((_OWORD *)v453 - 1);
        *((_OWORD *)v451 - 2) = *((_OWORD *)v453 - 2);
        *((_OWORD *)v451 - 1) = v455;
        v451 -= 4;
        v453 -= 32;
      }
      while (v453 != v454);
      v453 = *(char **)(a1 + 552);
    }
    *(void *)(a1 + 552) = v451;
    *(void *)(a1 + 560) = v444;
    *(void *)(a1 + 568) = v452;
    if (v453) {
      operator delete(v453);
    }
  }
  else
  {
    void *v431 = @"Threshold on ECLee Energy";
    v431[1] = 0x8000000000000000;
    v431[2] = 0x43480000C3480000;
    v431[3] = -1018691584;
    v444 = v431 + 4;
  }
  int v456 = 0;
  *(void *)(a1 + 560) = v444;
  do
  {
    unint64_t v457 = *(void *)(a1 + 568);
    if ((unint64_t)v444 >= v457)
    {
      uint64_t v458 = *(void *)(a1 + 552);
      uint64_t v459 = ((uint64_t)v444 - v458) >> 5;
      if ((unint64_t)(v459 + 1) >> 59) {
        goto LABEL_712;
      }
      uint64_t v460 = v457 - v458;
      uint64_t v461 = v460 >> 4;
      if (v460 >> 4 <= (unint64_t)(v459 + 1)) {
        uint64_t v461 = v459 + 1;
      }
      if ((unint64_t)v460 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v462 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v462 = v461;
      }
      if (v462) {
        unint64_t v462 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(v462);
      }
      else {
        uint64_t v463 = 0;
      }
      v464 = (void *)(v462 + 32 * v459);
      void *v464 = @"Threshold on ECLee Energy Diff";
      v464[1] = 0x8000000000000000;
      v464[2] = 0x43480000C3480000;
      v464[3] = -3166175232;
      v465 = *(char **)(a1 + 560);
      v466 = *(char **)(a1 + 552);
      v467 = v464;
      if (v465 != v466)
      {
        do
        {
          long long v468 = *((_OWORD *)v465 - 1);
          *((_OWORD *)v467 - 2) = *((_OWORD *)v465 - 2);
          *((_OWORD *)v467 - 1) = v468;
          v467 -= 4;
          v465 -= 32;
        }
        while (v465 != v466);
        v465 = *(char **)(a1 + 552);
      }
      *(void *)(a1 + 552) = v467;
      v444 = v464 + 4;
      *(void *)(a1 + 560) = v464 + 4;
      *(void *)(a1 + 568) = v462 + 32 * v463;
      if (v465) {
        operator delete(v465);
      }
    }
    else
    {
      void *v444 = @"Threshold on ECLee Energy Diff";
      v444[1] = 0x8000000000000000;
      v444[2] = 0x43480000C3480000;
      v444[3] = -3166175232;
      v444 += 4;
    }
    *(void *)(a1 + 560) = v444;
    ++v456;
  }
  while (v456 != 8);
  unint64_t v469 = *(void *)(a1 + 568);
  if ((unint64_t)v444 >= v469)
  {
    uint64_t v471 = *(void *)(a1 + 552);
    uint64_t v472 = ((uint64_t)v444 - v471) >> 5;
    if ((unint64_t)(v472 + 1) >> 59) {
      goto LABEL_712;
    }
    uint64_t v473 = v469 - v471;
    uint64_t v474 = v473 >> 4;
    if (v473 >> 4 <= (unint64_t)(v472 + 1)) {
      uint64_t v474 = v472 + 1;
    }
    if ((unint64_t)v473 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v475 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v475 = v474;
    }
    if (v475) {
      unint64_t v475 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(v475);
    }
    else {
      uint64_t v476 = 0;
    }
    v477 = (void *)(v475 + 32 * v472);
    unint64_t v478 = v475 + 32 * v476;
    void *v477 = @"En Ratio Thr vs Ch0 for Blocked Mic In Echo";
    v477[1] = 0x8000000000000000;
    v477[2] = 0x43480000C3480000;
    v477[3] = -3202351104;
    v470 = v477 + 4;
    v479 = *(char **)(a1 + 560);
    v480 = *(char **)(a1 + 552);
    if (v479 != v480)
    {
      do
      {
        long long v481 = *((_OWORD *)v479 - 1);
        *((_OWORD *)v477 - 2) = *((_OWORD *)v479 - 2);
        *((_OWORD *)v477 - 1) = v481;
        v477 -= 4;
        v479 -= 32;
      }
      while (v479 != v480);
      v479 = *(char **)(a1 + 552);
    }
    *(void *)(a1 + 552) = v477;
    *(void *)(a1 + 560) = v470;
    *(void *)(a1 + 568) = v478;
    if (v479) {
      operator delete(v479);
    }
  }
  else
  {
    void *v444 = @"En Ratio Thr vs Ch0 for Blocked Mic In Echo";
    v444[1] = 0x8000000000000000;
    v444[2] = 0x43480000C3480000;
    v444[3] = -3202351104;
    v470 = v444 + 4;
  }
  *(void *)(a1 + 560) = v470;
  unint64_t v482 = *(void *)(a1 + 568);
  if ((unint64_t)v470 >= v482)
  {
    uint64_t v484 = *(void *)(a1 + 552);
    uint64_t v485 = ((uint64_t)v470 - v484) >> 5;
    if ((unint64_t)(v485 + 1) >> 59) {
      goto LABEL_712;
    }
    uint64_t v486 = v482 - v484;
    uint64_t v487 = v486 >> 4;
    if (v486 >> 4 <= (unint64_t)(v485 + 1)) {
      uint64_t v487 = v485 + 1;
    }
    if ((unint64_t)v486 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v488 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v488 = v487;
    }
    if (v488) {
      unint64_t v488 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(v488);
    }
    else {
      uint64_t v489 = 0;
    }
    v490 = (void *)(v488 + 32 * v485);
    unint64_t v491 = v488 + 32 * v489;
    void *v490 = @"En Ratio Thr vs Ch1 for Blocked Mic In Echo";
    v490[1] = 0x8000000000000000;
    v490[2] = 0x43480000C3480000;
    v490[3] = -3191341056;
    v483 = v490 + 4;
    v492 = *(char **)(a1 + 560);
    v493 = *(char **)(a1 + 552);
    if (v492 != v493)
    {
      do
      {
        long long v494 = *((_OWORD *)v492 - 1);
        *((_OWORD *)v490 - 2) = *((_OWORD *)v492 - 2);
        *((_OWORD *)v490 - 1) = v494;
        v490 -= 4;
        v492 -= 32;
      }
      while (v492 != v493);
      v492 = *(char **)(a1 + 552);
    }
    *(void *)(a1 + 552) = v490;
    *(void *)(a1 + 560) = v483;
    *(void *)(a1 + 568) = v491;
    if (v492) {
      operator delete(v492);
    }
  }
  else
  {
    void *v470 = @"En Ratio Thr vs Ch1 for Blocked Mic In Echo";
    v470[1] = 0x8000000000000000;
    v470[2] = 0x43480000C3480000;
    v470[3] = -3191341056;
    v483 = v470 + 4;
  }
  *(void *)(a1 + 560) = v483;
  unint64_t v495 = *(void *)(a1 + 568);
  if ((unint64_t)v483 >= v495)
  {
    uint64_t v497 = *(void *)(a1 + 552);
    uint64_t v498 = ((uint64_t)v483 - v497) >> 5;
    if ((unint64_t)(v498 + 1) >> 59) {
      goto LABEL_712;
    }
    uint64_t v499 = v495 - v497;
    uint64_t v500 = v499 >> 4;
    if (v499 >> 4 <= (unint64_t)(v498 + 1)) {
      uint64_t v500 = v498 + 1;
    }
    if ((unint64_t)v499 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v501 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v501 = v500;
    }
    if (v501) {
      unint64_t v501 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(v501);
    }
    else {
      uint64_t v502 = 0;
    }
    v503 = (void *)(v501 + 32 * v498);
    unint64_t v504 = v501 + 32 * v502;
    void *v503 = @"En Ratio Thr vs Ch2 for Blocked Mic In Echo";
    v503[1] = 0x8000000000000000;
    v503[2] = 0x43480000C3480000;
    v503[3] = -3202351104;
    v496 = v503 + 4;
    v505 = *(char **)(a1 + 560);
    v506 = *(char **)(a1 + 552);
    if (v505 != v506)
    {
      do
      {
        long long v507 = *((_OWORD *)v505 - 1);
        *((_OWORD *)v503 - 2) = *((_OWORD *)v505 - 2);
        *((_OWORD *)v503 - 1) = v507;
        v503 -= 4;
        v505 -= 32;
      }
      while (v505 != v506);
      v505 = *(char **)(a1 + 552);
    }
    *(void *)(a1 + 552) = v503;
    *(void *)(a1 + 560) = v496;
    *(void *)(a1 + 568) = v504;
    if (v505) {
      operator delete(v505);
    }
  }
  else
  {
    void *v483 = @"En Ratio Thr vs Ch2 for Blocked Mic In Echo";
    v483[1] = 0x8000000000000000;
    v483[2] = 0x43480000C3480000;
    v483[3] = -3202351104;
    v496 = v483 + 4;
  }
  *(void *)(a1 + 560) = v496;
  unint64_t v508 = *(void *)(a1 + 568);
  if ((unint64_t)v496 >= v508)
  {
    uint64_t v510 = *(void *)(a1 + 552);
    uint64_t v511 = ((uint64_t)v496 - v510) >> 5;
    if (!((unint64_t)(v511 + 1) >> 59))
    {
      uint64_t v512 = v508 - v510;
      uint64_t v513 = v512 >> 4;
      if (v512 >> 4 <= (unint64_t)(v511 + 1)) {
        uint64_t v513 = v511 + 1;
      }
      if ((unint64_t)v512 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v514 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v514 = v513;
      }
      if (v514) {
        unint64_t v514 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(v514);
      }
      else {
        uint64_t v515 = 0;
      }
      v516 = (void *)(v514 + 32 * v511);
      unint64_t v517 = v514 + 32 * v515;
      void *v516 = @"En Ratio Thr vs Ch3 for Blocked Mic In Echo";
      v516[1] = 0x8000000000000000;
      v516[2] = 0x43480000C3480000;
      v516[3] = -3191341056;
      v509 = v516 + 4;
      v518 = *(char **)(a1 + 560);
      v519 = *(char **)(a1 + 552);
      if (v518 != v519)
      {
        do
        {
          long long v520 = *((_OWORD *)v518 - 1);
          *((_OWORD *)v516 - 2) = *((_OWORD *)v518 - 2);
          *((_OWORD *)v516 - 1) = v520;
          v516 -= 4;
          v518 -= 32;
        }
        while (v518 != v519);
        v518 = *(char **)(a1 + 552);
      }
      *(void *)(a1 + 552) = v516;
      *(void *)(a1 + 560) = v509;
      *(void *)(a1 + 568) = v517;
      if (v518) {
        operator delete(v518);
      }
      goto LABEL_664;
    }
LABEL_712:
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  }
  void *v496 = @"En Ratio Thr vs Ch3 for Blocked Mic In Echo";
  v496[1] = 0x8000000000000000;
  v496[2] = 0x43480000C3480000;
  v496[3] = -3191341056;
  v509 = v496 + 4;
LABEL_664:
  *(void *)(a1 + 560) = v509;
  for (int i = 4; i != 8; ++i)
  {
    unint64_t v522 = *(void *)(a1 + 568);
    if ((unint64_t)v509 >= v522)
    {
      uint64_t v523 = *(void *)(a1 + 552);
      uint64_t v524 = ((uint64_t)v509 - v523) >> 5;
      if ((unint64_t)(v524 + 1) >> 59) {
        goto LABEL_712;
      }
      uint64_t v525 = v522 - v523;
      uint64_t v526 = v525 >> 4;
      if (v525 >> 4 <= (unint64_t)(v524 + 1)) {
        uint64_t v526 = v524 + 1;
      }
      if ((unint64_t)v525 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v527 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v527 = v526;
      }
      if (v527) {
        unint64_t v527 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(v527);
      }
      else {
        uint64_t v528 = 0;
      }
      v529 = (void *)(v527 + 32 * v524);
      void *v529 = @"En Ratio Thr vs ChX for Blocked Mic In Echo";
      v529[1] = 0x8000000000000000;
      v529[2] = 0x43480000C3480000;
      v529[3] = -3166175232;
      v530 = *(char **)(a1 + 560);
      v531 = *(char **)(a1 + 552);
      v532 = v529;
      if (v530 != v531)
      {
        do
        {
          long long v533 = *((_OWORD *)v530 - 1);
          *((_OWORD *)v532 - 2) = *((_OWORD *)v530 - 2);
          *((_OWORD *)v532 - 1) = v533;
          v532 -= 4;
          v530 -= 32;
        }
        while (v530 != v531);
        v530 = *(char **)(a1 + 552);
      }
      *(void *)(a1 + 552) = v532;
      v509 = v529 + 4;
      *(void *)(a1 + 560) = v529 + 4;
      *(void *)(a1 + 568) = v527 + 32 * v528;
      if (v530) {
        operator delete(v530);
      }
    }
    else
    {
      void *v509 = @"En Ratio Thr vs ChX for Blocked Mic In Echo";
      v509[1] = 0x8000000000000000;
      v509[2] = 0x43480000C3480000;
      v509[3] = -3166175232;
      v509 += 4;
    }
    *(void *)(a1 + 560) = v509;
  }
  ausdk::AUBase::CreateElements(a1);
  uint64_t v534 = *(void *)(a1 + 528);
  if (*(void *)(a1 + 536) != v534)
  {
    unint64_t v535 = 0;
    uint64_t v536 = 24;
    do
    {
      float v537 = *(float *)(v534 + v536);
      uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 32), 0);
      ausdk::AUElement::SetParameter(Element, v535++, v537, 0);
      uint64_t v534 = *(void *)(a1 + 528);
      v536 += 32;
    }
    while (v535 < (*(void *)(a1 + 536) - v534) >> 5);
  }
  for (unsigned int j = 0; ; ++j)
  {
    uint64_t v540 = *(void *)(a1 + 816);
    if (v540) {
      LODWORD(v541) = (*(uint64_t (**)(uint64_t))(*(void *)v540 + 24))(v540);
    }
    else {
      uint64_t v541 = (*(void *)(a1 + 800) - *(void *)(a1 + 792)) >> 3;
    }
    if (j >= v541) {
      break;
    }
    if (*(void *)(a1 + 560) != *(void *)(a1 + 552))
    {
      unint64_t v542 = 0;
      uint64_t v543 = 24;
      do
      {
        v544 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 776), j);
        ausdk::AUElement::SetParameter(v544, v542++, *(float *)(*(void *)(a1 + 552) + v543), 0);
        v543 += 32;
      }
      while (v542 < (uint64_t)(*(void *)(a1 + 560) - *(void *)(a1 + 552)) >> 5);
    }
  }
  unsigned int v545 = 0;
  uint64_t v562 = 0x40D7700000000000;
  long long v563 = xmmword_1BB87A250;
  long long v564 = xmmword_1BB87A240;
  while (1)
  {
    uint64_t v546 = *(void *)(a1 + 120);
    if (v546) {
      LODWORD(v547) = (*(uint64_t (**)(uint64_t))(*(void *)v546 + 24))(v546);
    }
    else {
      uint64_t v547 = (*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 3;
    }
    if (v545 >= v547) {
      break;
    }
    uint64_t v548 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v545);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v548 + 56))(v548, &v562);
    ++v545;
  }
  unsigned int v549 = 0;
  uint64_t v559 = 0x40D7700000000000;
  long long v561 = xmmword_1BB87A260;
  long long v560 = xmmword_1BB87A250;
  uint64_t v556 = 0x40D7700000000000;
  long long v557 = xmmword_1BB8727B0;
  long long v558 = xmmword_1BB8727C0;
  while (1)
  {
    uint64_t v550 = *(void *)(a1 + 168);
    if (v550) {
      LODWORD(v551) = (*(uint64_t (**)(uint64_t))(*(void *)v550 + 24))(v550);
    }
    else {
      uint64_t v551 = (*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 3;
    }
    if (v549 >= v551) {
      break;
    }
    switch(v549)
    {
      case 0u:
      case 3u:
        uint64_t v552 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), v549);
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v552 + 56))(v552, &v562);
        if (v549 == 2) {
          goto LABEL_709;
        }
        if (v549 == 1) {
          goto LABEL_708;
        }
        break;
      case 1u:
      case 4u:
LABEL_708:
        uint64_t v553 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), v549);
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v553 + 56))(v553, &v559);
        if (v549 == 2) {
          goto LABEL_709;
        }
        break;
      case 2u:
LABEL_709:
        uint64_t v554 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 2u);
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v554 + 56))(v554, &v556);
        break;
      default:
        break;
    }
    ++v549;
  }
  *(unsigned char *)(a1 + 376) = 1;
  return a1;
}

void sub_1BB3FF160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11)
{
  uint64_t v14 = *(std::__shared_weak_count **)(v11 + 832);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  std::vector<std::unique_ptr<ausdk::AUElement>>::__destroy_vector::operator()[abi:ne180100](&a11);
  uint64_t v15 = *(void **)(v11 + 752);
  if (v15)
  {
    *(void *)(v11 + 760) = v15;
    operator delete(v15);
  }
  a11 = (void **)(v11 + 728);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a11);
  a11 = (void **)(v11 + 704);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a11);
  uint64_t v16 = *(void **)(v11 + 680);
  if (v16)
  {
    *(void *)(v11 + 688) = v16;
    operator delete(v16);
  }
  a11 = (void **)(v11 + 656);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a11);
  a11 = (void **)(v11 + 632);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a11);
  uint64_t v17 = *(void *)(v11 + 624);
  *(void *)(v11 + 624) = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  uint64_t v18 = *(void **)(v11 + 552);
  if (v18)
  {
    *(void *)(v11 + 560) = v18;
    operator delete(v18);
  }
  uint64_t v19 = *v12;
  if (*v12)
  {
    *(void *)(v11 + 536) = v19;
    operator delete(v19);
  }
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v11);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSignalCombiner>::Factory()
{
  double result = malloc_type_malloc(0x690uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSignalCombiner>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSignalCombiner>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSignalCombiner>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSignalCombiner>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  long long v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 20, 21);
  uint64_t v4 = 0;
  *(void *)long long v3 = &unk_1F14B2E18;
  *((unsigned char *)v3 + 528) = 0;
  *(_OWORD *)((char *)v3 + 532) = 0u;
  *(_OWORD *)((char *)v3 + 548) = xmmword_1BB873AA0;
  *(void *)((char *)v3 + 564) = 1;
  long long v5 = (uint64_t **)((char *)v3 + 576);
  uint64_t v6 = (uint64_t **)((char *)v3 + 584);
  *((void *)v3 + 74) = 0;
  *((void *)v3 + 73) = 0;
  *((void *)v3 + 72) = (char *)v3 + 584;
  long long v7 = (uint64_t **)((char *)v3 + 600);
  long long v8 = (uint64_t *)((char *)v3 + 608);
  uint64_t v9 = (uint64_t **)((char *)v3 + 608);
  *((void *)v3 + 77) = 0;
  *((void *)v3 + 76) = 0;
  *((void *)v3 + 75) = (char *)v3 + 608;
  *((void *)v3 + 80) = 0;
  *((void *)v3 + 79) = 0;
  *((void *)v3 + 78) = (char *)v3 + 632;
  uint64_t v10 = (uint64_t **)((char *)v3 + 648);
  uint64_t v11 = (uint64_t *)((char *)v3 + 656);
  long long v12 = (uint64_t **)((char *)v3 + 656);
  *((void *)v3 + 83) = 0;
  *((void *)v3 + 82) = 0;
  *((void *)v3 + 81) = (char *)v3 + 656;
  *((_DWORD *)v3 + 168) = 0;
  *((_WORD *)v3 + 338) = 0;
  *((void *)v3 + 85) = 0;
  *((_DWORD *)v3 + 172) = 0;
  *(void *)((char *)v3 + 692) = -1;
  *(void *)((char *)v3 + 700) = -1;
  *((void *)v3 + 90) = 0;
  *(void *)((char *)v3 + 708) = 0;
  *((unsigned char *)v3 + 716) = 0;
  do
  {
    uint64_t v13 = a1 + v4;
    *(void *)(v13 + 728) = 0xFFFFFFFFLL;
    *(unsigned char *)(v13 + 736) = 0;
    *(void *)(a1 + v4 + 740) = 0xFFFFFFFFLL;
    *(_DWORD *)(v13 + 748) = -1;
    v4 += 24;
  }
  while (v4 != 480);
  *(_OWORD *)(a1 + 1600) = 0u;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_DWORD *)(a1 + 1576) = 0;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_OWORD *)(a1 + 1352) = 0u;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_OWORD *)(a1 + 1400) = 0u;
  *(_OWORD *)(a1 + 1416) = 0u;
  *(_OWORD *)(a1 + 1432) = 0u;
  *(_OWORD *)(a1 + 1448) = 0u;
  *(_OWORD *)(a1 + 1464) = 0u;
  *(_OWORD *)(a1 + 1480) = 0u;
  *(_OWORD *)(a1 + 1496) = 0u;
  *(_OWORD *)(a1 + 1512) = 0u;
  *(_OWORD *)(a1 + 1528) = 0u;
  *(_OWORD *)(a1 + 1544) = 0u;
  *(_OWORD *)(a1 + 1560) = 0u;
  uint64_t v14 = operator new(0x48uLL);
  v14[8] = 0;
  *((void *)v14 + 5) = @"Operation Mode";
  *((void *)v14 + 6) = 0x8000000000000001;
  *((void *)v14 + 7) = 0x3F80000000000000;
  *((void *)v14 + 8) = -3229614080;
  std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at(v5, (uint64_t)v6, v6, (uint64_t *)v14);
  *(_DWORD *)std::string __p = 10;
  *(void *)&__p[8] = @"Wind Flag";
  *(_OWORD *)&__p[16] = xmmword_1BB87A270;
  *(void *)&__p[32] = 0x100000000;
  std::__tree<std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>>::__emplace_unique_impl<std::pair<sicm::ParametersInScoped,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,int,int,int,int>>>(v5, (int32x2_t *)__p);
  *(_DWORD *)std::string __p = 11;
  *(void *)&__p[8] = @"Occlusion Flag";
  *(_OWORD *)&__p[16] = xmmword_1BB87A270;
  *(void *)&__p[32] = 0x100000000;
  std::__tree<std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>>::__emplace_unique_impl<std::pair<sicm::ParametersInScoped,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,int,int,int,int>>>(v5, (int32x2_t *)__p);
  *(_DWORD *)std::string __p = 50;
  *(void *)&__p[8] = @"Default Channel Selection";
  *(_OWORD *)&__p[16] = xmmword_1BB87A280;
  *(void *)&__p[32] = 0x200000000;
  std::__tree<std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>>::__emplace_unique_impl<std::pair<sicm::ParametersInScoped,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,int,int,int,int>>>(v5, (int32x2_t *)__p);
  *(_DWORD *)std::string __p = 51;
  *(void *)&__p[8] = @"External Channel Selection";
  *(_OWORD *)&__p[16] = xmmword_1BB87A290;
  *(void *)&__p[32] = 0x200000000;
  std::__tree<std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>>::__emplace_unique_impl<std::pair<sicm::ParametersInScoped,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,int,int,int,int>>>(v5, (int32x2_t *)__p);
  *(_DWORD *)std::string __p = 100;
  *(void *)&__p[8] = @"Main Mics Bus?";
  *(_OWORD *)&__p[16] = xmmword_1BB87A2A0;
  *(void *)&__p[32] = 0x3FFFFFFFFLL;
  std::__tree<std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>>::__emplace_unique_impl<std::pair<sicm::ParametersInScoped,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,int,int,int,int>>>(v5, (int32x2_t *)__p);
  *(_DWORD *)std::string __p = 101;
  *(void *)&__p[8] = @"ECLee Bus?";
  *(_OWORD *)&__p[16] = xmmword_1BB87A2A0;
  *(void *)&__p[32] = 0x3FFFFFFFFLL;
  std::__tree<std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>>::__emplace_unique_impl<std::pair<sicm::ParametersInScoped,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,int,int,int,int>>>(v5, (int32x2_t *)__p);
  *(_DWORD *)std::string __p = 102;
  *(void *)&__p[8] = @"Wind Suppressed Bus?";
  *(_OWORD *)&__p[16] = xmmword_1BB87A2A0;
  *(void *)&__p[32] = 0x3FFFFFFFFLL;
  std::__tree<std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>>::__emplace_unique_impl<std::pair<sicm::ParametersInScoped,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,int,int,int,int>>>(v5, (int32x2_t *)__p);
  *(_DWORD *)std::string __p = 103;
  *(void *)&__p[8] = @"Echo Suppressed Bus?";
  *(_OWORD *)&__p[16] = xmmword_1BB87A2A0;
  *(void *)&__p[32] = 0x3FFFFFFFFLL;
  std::__tree<std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>>::__emplace_unique_impl<std::pair<sicm::ParametersInScoped,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,int,int,int,int>>>(v5, (int32x2_t *)__p);
  *(_DWORD *)std::string __p = 150;
  *(void *)&__p[8] = @"Default Phase Bus";
  *(_OWORD *)&__p[16] = xmmword_1BB87A280;
  *(void *)&__p[32] = 0x400000000;
  std::__tree<std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>>::__emplace_unique_impl<std::pair<sicm::ParametersInScoped,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,int,int,int,int>>>(v5, (int32x2_t *)__p);
  *(_DWORD *)std::string __p = 151;
  *(void *)&__p[8] = @"Selected Phase Bus";
  *(_OWORD *)&__p[16] = xmmword_1BB87A290;
  *(void *)&__p[32] = 0x400000000;
  std::__tree<std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>>::__emplace_unique_impl<std::pair<sicm::ParametersInScoped,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,int,int,int,int>>>(v5, (int32x2_t *)__p);
  *(_DWORD *)std::string __p = 152;
  *(void *)&__p[8] = @"Low Frequency For Combining";
  *(_OWORD *)&__p[16] = xmmword_1BB87A2B0;
  *(void *)&__p[32] = 0x400000000;
  std::__tree<std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>>::__emplace_unique_impl<std::pair<sicm::ParametersInScoped,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,int,int,int,int>>>(v5, (int32x2_t *)__p);
  *(_DWORD *)std::string __p = 153;
  *(void *)&__p[8] = @"High Frequency For Combining";
  *(_OWORD *)&__p[16] = xmmword_1BB87A2B0;
  *(void *)&__p[32] = 0x400001B58;
  std::__tree<std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>>::__emplace_unique_impl<std::pair<sicm::ParametersInScoped,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,int,int,int,int>>>(v5, (int32x2_t *)__p);
  *(_DWORD *)std::string __p = 154;
  *(void *)&__p[8] = @"ECLee Energy";
  *(_OWORD *)&__p[16] = xmmword_1BB87A2C0;
  *(void *)&__p[32] = 0x400000000;
  std::__tree<std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>>::__emplace_unique_impl<std::pair<sicm::ParametersInScoped,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,int,int,int,int>>>(v5, (int32x2_t *)__p);
  *(_DWORD *)std::string __p = 155;
  *(void *)&__p[8] = @"ECLee Threshold";
  *(_OWORD *)&__p[16] = xmmword_1BB87A2D0;
  *(void *)&__p[32] = 0x4FFFFFFC4;
  std::__tree<std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>>::__emplace_unique_impl<std::pair<sicm::ParametersInScoped,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,int,int,int,int>>>(v5, (int32x2_t *)__p);
  *(_DWORD *)std::string __p = 156;
  *(void *)&__p[8] = @"ECLee Combine?";
  *(_OWORD *)&__p[16] = xmmword_1BB87A2E0;
  *(void *)&__p[32] = 0x400000000;
  std::__tree<std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>>::__emplace_unique_impl<std::pair<sicm::ParametersInScoped,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,int,int,int,int>>>(v5, (int32x2_t *)__p);
  *(_DWORD *)std::string __p = 0;
  *(void *)&__p[8] = @"Default Channel Override";
  *(_OWORD *)&__p[16] = xmmword_1BB87A2A0;
  *(void *)&__p[32] = -1;
  std::__tree<std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>>::__emplace_unique_impl<std::pair<sicm::ParametersInScoped,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,int,int,int,int>>>(v7, (int32x2_t *)__p);
  uint64_t v15 = operator new(0x48uLL);
  v15[8] = 1;
  *((void *)v15 + 5) = @"Channel Selection Rule";
  *((void *)v15 + 6) = 0x8000000000000001;
  *((void *)v15 + 7) = 0x4000000000000000;
  *((void *)v15 + 8) = 0xFFFFFFFF40000000;
  uint64_t v16 = *v9;
  uint64_t v17 = v9;
  if (*v9)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v17 = (uint64_t **)v16;
        unsigned int v18 = *((_DWORD *)v16 + 8);
        if (v18 < 2) {
          break;
        }
        uint64_t v16 = *v17;
        uint64_t v9 = v17;
        if (!*v17) {
          goto LABEL_10;
        }
      }
      if (v18) {
        break;
      }
      uint64_t v16 = v17[1];
      if (!v16)
      {
        uint64_t v9 = v17 + 1;
        goto LABEL_10;
      }
    }
    operator delete(v15);
  }
  else
  {
LABEL_10:
    std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at(v7, (uint64_t)v17, v9, (uint64_t *)v15);
  }
  *(_DWORD *)std::string __p = 2;
  *(void *)&__p[8] = @"Combine?";
  *(_OWORD *)&__p[16] = xmmword_1BB87A2E0;
  *(void *)&__p[32] = 0xFFFFFFFF00000000;
  std::__tree<std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>>::__emplace_unique_impl<std::pair<sicm::ParametersInScoped,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,int,int,int,int>>>(v7, (int32x2_t *)__p);
  *(_DWORD *)std::string __p = 3;
  *(void *)&__p[8] = @"Passthrough Output Bus?";
  *(_OWORD *)&__p[16] = xmmword_1BB87A2A0;
  *(void *)&__p[32] = -1;
  std::__tree<std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>>::__emplace_unique_impl<std::pair<sicm::ParametersInScoped,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,int,int,int,int>>>(v7, (int32x2_t *)__p);
  *(_DWORD *)std::string __p = 50;
  *(void *)&__p[8] = @"Selected Channel";
  *(_OWORD *)&__p[16] = xmmword_1BB87A290;
  *(void *)&__p[32] = 0xFFFFFFFF00000000;
  std::__tree<std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>>::__emplace_unique_impl<std::pair<sicm::ParametersInScoped,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,int,int,int,int>>>(v7, (int32x2_t *)__p);
  *(_DWORD *)std::string __p = 51;
  *(void *)&__p[8] = @"Combine Override";
  *(_OWORD *)&__p[16] = xmmword_1BB87A2F0;
  *(void *)&__p[32] = -1;
  std::__tree<std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>>::__emplace_unique_impl<std::pair<sicm::ParametersInScoped,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,int,int,int,int>>>(v7, (int32x2_t *)__p);
  uint64_t v19 = operator new(0x48uLL);
  v19[8] = 0;
  *((void *)v19 + 5) = @"EC Delta EIR";
  *((void *)v19 + 6) = 0xA00000000000;
  *((void *)v19 + 7) = 0x501502F900000000;
  *((void *)v19 + 8) = 0xFFFFFFFF00000000;
  while (1)
  {
    unint64_t v20 = *v12;
    if (!*v12) {
      break;
    }
    long long v12 = (uint64_t **)*v12;
    if (!*((_DWORD *)v20 + 8))
    {
      operator delete(v19);
      goto LABEL_17;
    }
  }
  std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at(v10, (uint64_t)v12, v12, (uint64_t *)v19);
LABEL_17:
  *(_DWORD *)std::string __p = 1;
  *(void *)&__p[8] = @"EC IR Delay";
  *(_OWORD *)&__p[16] = xmmword_1BB87A300;
  *(void *)&__p[32] = 0xFFFFFFFF00000000;
  std::__tree<std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>>::__emplace_unique_impl<std::pair<sicm::ParametersInScoped,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,int,int,int,int>>>(v10, (int32x2_t *)__p);
  *(_DWORD *)std::string __p = 2;
  *(void *)&__p[8] = @"EC Adapted flag";
  *(_OWORD *)&__p[16] = xmmword_1BB87A270;
  *(void *)&__p[32] = 0xFFFFFFFF00000000;
  std::__tree<std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>>::__emplace_unique_impl<std::pair<sicm::ParametersInScoped,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,int,int,int,int>>>(v10, (int32x2_t *)__p);
  *(_DWORD *)std::string __p = 3;
  *(void *)&__p[8] = @"EC Time aligned ref signal energy";
  *(_OWORD *)&__p[16] = xmmword_1BB87A310;
  *(void *)&__p[32] = 0xFFFFFFFF00000000;
  std::__tree<std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>>::__emplace_unique_impl<std::pair<sicm::ParametersInScoped,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,int,int,int,int>>>(v10, (int32x2_t *)__p);
  *(_DWORD *)std::string __p = 4;
  *(void *)&__p[8] = @"EC Mic-Eclee cross correlation";
  *(_OWORD *)&__p[16] = xmmword_1BB87A270;
  *(void *)&__p[32] = 0xFFFFFFFF00000000;
  std::__tree<std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>>::__emplace_unique_impl<std::pair<sicm::ParametersInScoped,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,int,int,int,int>>>(v10, (int32x2_t *)__p);
  ausdk::AUBase::CreateElements(a1);
  int v21 = *v5;
  if (*v5 != (uint64_t *)v6)
  {
    do
    {
      unsigned int v22 = *((_DWORD *)v21 + 8);
      float v23 = *((float *)v21 + 16);
      uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 32), 0);
      ausdk::AUElement::SetParameter(Element, v22, v23, 0);
      uint64_t v25 = (uint64_t *)v21[1];
      if (v25)
      {
        do
        {
          uint64_t v26 = v25;
          uint64_t v25 = (uint64_t *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          uint64_t v26 = (uint64_t *)v21[2];
          BOOL v27 = *v26 == (void)v21;
          int v21 = v26;
        }
        while (!v27);
      }
      int v21 = v26;
    }
    while (v26 != (uint64_t *)v6);
  }
  for (unsigned int i = 0; ; ++i)
  {
    uint64_t v29 = *(void *)(a1 + 120);
    if (v29) {
      LODWORD(v30) = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 24))(v29);
    }
    else {
      uint64_t v30 = (*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 3;
    }
    if (i >= v30) {
      break;
    }
    std::to_string(&v59, i);
    long long v31 = std::string::insert(&v59, 0, "In", 2uLL);
    long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    *(void *)&__p[16] = *((void *)&v31->__r_.__value_.__l + 2);
    *(_OWORD *)std::string __p = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v59.__r_.__value_.__l.__data_);
    }
    if (__p[23] >= 0) {
      OSType v33 = __p;
    }
    else {
      OSType v33 = *(const char **)__p;
    }
    CFStringRef v34 = CFStringCreateWithCString(0, v33, 0x8000100u);
    uint64_t v35 = ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 80), i);
    ausdk::Owned<__CFString const*>::operator=((const void **)(v35 + 72), v34);
    CFRelease(v34);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
  }
  for (unsigned int j = 0; ; ++j)
  {
    uint64_t v37 = *(void *)(a1 + 120);
    if (v37) {
      LODWORD(v38) = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 24))(v37);
    }
    else {
      uint64_t v38 = (*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 3;
    }
    if (j >= v38) {
      break;
    }
    uint64_t v39 = *v7;
    if (*v7 != v8)
    {
      do
      {
        uint64_t v40 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 80), j);
        ausdk::AUElement::SetParameter(v40, *((_DWORD *)v39 + 8), *((float *)v39 + 16), 0);
        unint64_t v41 = (uint64_t *)v39[1];
        if (v41)
        {
          do
          {
            uint64_t v42 = v41;
            unint64_t v41 = (uint64_t *)*v41;
          }
          while (v41);
        }
        else
        {
          do
          {
            uint64_t v42 = (uint64_t *)v39[2];
            BOOL v27 = *v42 == (void)v39;
            uint64_t v39 = v42;
          }
          while (!v27);
        }
        uint64_t v39 = v42;
      }
      while (v42 != v8);
    }
  }
  for (unsigned int k = 0; ; ++k)
  {
    uint64_t v44 = *(void *)(a1 + 1608);
    if (v44) {
      LODWORD(v45) = (*(uint64_t (**)(uint64_t))(*(void *)v44 + 24))(v44);
    }
    else {
      uint64_t v45 = (*(void *)(a1 + 1592) - *(void *)(a1 + 1584)) >> 3;
    }
    if (k >= v45) {
      break;
    }
    float v46 = *v10;
    if (*v10 != v11)
    {
      do
      {
        long long v47 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 1568), k);
        ausdk::AUElement::SetParameter(v47, *((_DWORD *)v46 + 8), *((float *)v46 + 16), 0);
        unint64_t v48 = (uint64_t *)v46[1];
        if (v48)
        {
          do
          {
            float v49 = v48;
            unint64_t v48 = (uint64_t *)*v48;
          }
          while (v48);
        }
        else
        {
          do
          {
            float v49 = (uint64_t *)v46[2];
            BOOL v27 = *v49 == (void)v46;
            float v46 = v49;
          }
          while (!v27);
        }
        float v46 = v49;
      }
      while (v49 != v11);
    }
  }
  unsigned int v50 = 0;
  *(void *)std::string __p = 0x40D7700000000000;
  *(_OWORD *)&__p[24] = xmmword_1BB87A260;
  *(_OWORD *)&__p[8] = xmmword_1BB87A250;
  while (1)
  {
    uint64_t v51 = *(void *)(a1 + 120);
    if (v51) {
      LODWORD(v52) = (*(uint64_t (**)(uint64_t))(*(void *)v51 + 24))(v51);
    }
    else {
      uint64_t v52 = (*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 3;
    }
    if (v50 >= v52) {
      break;
    }
    uint64_t v53 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v50);
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v53 + 56))(v53, __p);
    ++v50;
  }
  for (unsigned int m = 0; ; ++m)
  {
    uint64_t v55 = *(void *)(a1 + 168);
    if (v55) {
      LODWORD(v56) = (*(uint64_t (**)(uint64_t))(*(void *)v55 + 24))(v55);
    }
    else {
      uint64_t v56 = (*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 3;
    }
    if (m >= v56) {
      break;
    }
    uint64_t v57 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), m);
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v57 + 56))(v57, __p);
  }
  *(unsigned char *)(a1 + 376) = 1;
  return a1;
}

void sub_1BB3FFEA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  a17 = v29 + 1584;
  std::vector<std::unique_ptr<ausdk::AUElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  long long v31 = *(void **)(v29 + 1544);
  if (v31)
  {
    *(void *)(v29 + 1552) = v31;
    operator delete(v31);
  }
  long long v32 = *(void **)(v29 + 1520);
  if (v32)
  {
    *(void *)(v29 + 1528) = v32;
    operator delete(v32);
  }
  OSType v33 = *(void **)(v29 + 1496);
  if (v33)
  {
    *(void *)(v29 + 1504) = v33;
    operator delete(v33);
  }
  CFStringRef v34 = *(void **)(v29 + 1472);
  if (v34)
  {
    *(void *)(v29 + 1480) = v34;
    operator delete(v34);
  }
  uint64_t v35 = *(void **)(v29 + 1448);
  if (v35)
  {
    *(void *)(v29 + 1456) = v35;
    operator delete(v35);
  }
  unint64_t v36 = *(void **)(v29 + 1424);
  if (v36)
  {
    *(void *)(v29 + 1432) = v36;
    operator delete(v36);
  }
  uint64_t v37 = *(void **)(v29 + 1400);
  if (v37)
  {
    *(void *)(v29 + 1408) = v37;
    operator delete(v37);
  }
  uint64_t v38 = *(void **)(v29 + 1376);
  if (v38)
  {
    *(void *)(v29 + 1384) = v38;
    operator delete(v38);
  }
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(void **)(v29 + 656));
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(void **)(v29 + 632));
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(void **)(v29 + 608));
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(void **)(v29 + 584));
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v29);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUExpanseController>::Factory()
{
  double result = malloc_type_malloc(0x280uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUExpanseController>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUExpanseController>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUExpanseController>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUExpanseController>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  long long v3 = (_OWORD *)(a1 + 532);
  uint64_t v4 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 2, 2);
  *(void *)uint64_t v4 = &unk_1F14B2038;
  *((_WORD *)v4 + 264) = 0;
  _OWORD *v3 = xmmword_1BB87A320;
  v3[1] = xmmword_1BB875840;
  *((_DWORD *)v4 + 141) = 1065353216;
  *((void *)v4 + 71) = 1;
  ausdk::AUBase::CreateElements((uint64_t)v4);
  unsigned int v5 = 0;
  *(void *)uint64_t v25 = 0x40E7700000000000;
  *(_OWORD *)&v25[8] = xmmword_1BB8727B0;
  long long v26 = xmmword_1BB8727C0;
  char v6 = 1;
  do
  {
    char v7 = v6;
    uint64_t Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v5);
    (*(void (**)(uint64_t, unsigned char *))(*(void *)Element + 56))(Element, v25);
    char v6 = 0;
    unsigned int v5 = 1;
  }
  while ((v7 & 1) != 0);
  unsigned int v9 = 0;
  char v10 = 1;
  do
  {
    char v11 = v10;
    uint64_t v12 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), v9);
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v12 + 56))(v12, v25);
    char v10 = 0;
    unsigned int v9 = 1;
  }
  while ((v11 & 1) != 0);
  uint64_t v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v13, 0, -15.0, 0);
  uint64_t v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v14, 1u, -15.0, 0);
  uint64_t v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v15, 2u, 0.0, 0);
  uint64_t v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v16, 3u, 0.0, 0);
  uint64_t v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v17, 4u, 0.0, 0);
  unsigned int v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v18, 5u, 1.0, 0);
  uint64_t v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v19, 6u, 0.0, 0);
  unint64_t v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v20, 7u, 0.0, 0);
  int v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v21, 8u, 0.0, 0);
  unsigned int v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v22, 9u, 0.0, 0);
  if (getAUExpanseControllerLog(void)::onceToken != -1) {
    dispatch_once(&getAUExpanseControllerLog(void)::onceToken, &__block_literal_global_10414);
  }
  float v23 = getAUExpanseControllerLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUExpanseControllerLog(void)::gLog, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t v25 = 134217984;
    *(void *)&void v25[4] = a1;
    _os_log_impl(&dword_1BB0CE000, v23, OS_LOG_TYPE_INFO, "[%p] created", v25, 0xCu);
  }
  return a1;
}

void sub_1BB400354(_Unwind_Exception *a1)
{
  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUClipDetector>::Factory()
{
  double result = malloc_type_malloc(0x288uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUClipDetector>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUClipDetector>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUClipDetector>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUClipDetector>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  long long v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *(void *)long long v3 = &unk_1F14B4FD0;
  *((void *)v3 + 66) = 0;
  *((_DWORD *)v3 + 134) = 0;
  *((_OWORD *)v3 + 34) = 0u;
  *((_OWORD *)v3 + 35) = 0u;
  *((unsigned char *)v3 + 576) = 0;
  ausdk::AUBase::CreateElements((uint64_t)v3);
  unsigned int v4 = 0;
  *(void *)uint64_t v14 = 0x40E7700000000000;
  *(_OWORD *)&v14[8] = xmmword_1BB8727B0;
  long long v15 = xmmword_1BB8727C0;
  while (1)
  {
    uint64_t v5 = *(void *)(a1 + 120);
    if (v5) {
      LODWORD(v6) = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
    }
    else {
      uint64_t v6 = (*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 3;
    }
    if (v4 >= v6) {
      break;
    }
    uint64_t Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v4);
    (*(void (**)(uint64_t, unsigned char *))(*(void *)Element + 56))(Element, v14);
    ++v4;
  }
  for (unsigned int i = 0; ; ++i)
  {
    uint64_t v9 = *(void *)(a1 + 168);
    if (v9) {
      LODWORD(v10) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 24))(v9);
    }
    else {
      uint64_t v10 = (*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 3;
    }
    if (i >= v10) {
      break;
    }
    uint64_t v11 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), i);
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v11 + 56))(v11, v14);
  }
  AUClipDetector::SetDefaultParameters((AUClipDetector *)a1);
  *(unsigned char *)(a1 + 376) = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, int), uint64_t))(*(void *)a1 + 112))(a1, 8, AUClipDetector::AUClipDetector(OpaqueAudioComponentInstance *)::$_0::__invoke<OpaqueAudioComponentInstance *,unsigned int,unsigned int,unsigned int>, a1);
  if (getAUClipDetectorLog(void)::onceToken != -1) {
    dispatch_once(&getAUClipDetectorLog(void)::onceToken, &__block_literal_global_13839);
  }
  uint64_t v12 = getAUClipDetectorLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUClipDetectorLog(void)::gLog, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t v14 = 134217984;
    *(void *)&v14[4] = a1;
    _os_log_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_INFO, "[%p] created", v14, 0xCu);
  }
  return a1;
}

void sub_1BB4006B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  a9 = v9 + 68;
  std::vector<std::unique_ptr<ausdk::AUElement>>::__destroy_vector::operator()[abi:ne180100](&a9);
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v9);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULimitWindBoost>::Factory()
{
  double result = malloc_type_malloc(0x430uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULimitWindBoost>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULimitWindBoost>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULimitWindBoost>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULimitWindBoost>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  long long v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 3, 1);
  *(void *)long long v3 = &unk_1F14C4ED8;
  LimitWindBoost::LimitWindBoost((ausdk::AUBase *)((char *)v3 + 528));
  *(_DWORD *)(a1 + 928) = 0;
  *(unsigned char *)(a1 + 932) = 0;
  *(_DWORD *)(a1 + 936) = 1024;
  *(void *)(a1 + 944) = 0;
  *(_DWORD *)(a1 + 952) = 0;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  ausdk::AUBase::CreateElements(a1);
  *(unsigned char *)(a1 + 376) = 1;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 512))(a1, 1024);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(Element, 0, 0.0, 0);
  uint64_t v5 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v5, 1u, 500.0, 0);
  uint64_t v6 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v6, 2u, 6.0, 0);
  char v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v7, 3u, 0.0, 0);
  long long v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v8, 4u, 20.0, 0);
  uint64_t v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v9, 5u, -100.0, 0);
  uint64_t v10 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v10, 6u, 0.03, 0);
  uint64_t v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v11, 7u, -12.0, 0);
  uint64_t v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v12, 8u, 1250.0, 0);
  uint64_t v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v13, 9u, 0.1, 0);
  uint64_t v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v14, 0xAu, 1.0, 0);
  long long v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v15, 0xBu, 1.5, 0);
  uint64_t v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v16, 0xCu, 0.4, 0);
  uint64_t v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v17, 0xDu, 250.0, 0);
  unsigned int v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v18, 0xEu, -90.0, 0);
  uint64_t v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v19, 0xFu, 0.25, 0);
  unint64_t v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v20, 0x10u, 0.25, 0);
  int v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v21, 0x11u, 0.75, 0);
  atomic_fetch_add((atomic_uint *volatile)(a1 + 928), 1u);
  uint64_t v32 = 0x40E5888000000000;
  uint64_t v29 = 0x40E5888000000000;
  long long v31 = xmmword_1BB87A240;
  long long v33 = xmmword_1BB87A250;
  long long v34 = xmmword_1BB87A260;
  long long v30 = xmmword_1BB87A250;
  uint64_t v22 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v22 + 56))(v22, &v29);
  uint64_t v23 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 2u);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v23 + 56))(v23, &v32);
  for (unsigned int i = 0; ; ++i)
  {
    uint64_t v25 = *(void *)(a1 + 168);
    if (v25) {
      LODWORD(v26) = (*(uint64_t (**)(uint64_t))(*(void *)v25 + 24))(v25);
    }
    else {
      uint64_t v26 = (*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 3;
    }
    if (i >= v26) {
      break;
    }
    uint64_t v27 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), i);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v27 + 56))(v27, &v29);
  }
  atomic_store(1u, (unsigned int *)(a1 + 928));
  return a1;
}

void sub_1BB400BC0(_Unwind_Exception *a1)
{
  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUHearingLossCompensator>::Factory()
{
  double result = malloc_type_malloc(0x2E8uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUHearingLossCompensator>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUHearingLossCompensator>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUHearingLossCompensator>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

unsigned char *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUHearingLossCompensator>::Construct(unsigned char *a1, OpaqueAudioComponentInstance *a2)
{
  long long v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *(void *)long long v3 = &unk_1F14AEE28;
  *((void *)v3 + 66) = 0;
  *((_DWORD *)v3 + 134) = 1133903872;
  unsigned int v4 = (ausdk::AUBase *)((char *)v3 + 32);
  *(_OWORD *)((char *)v3 + 540) = 0u;
  *(void *)((char *)v3 + 555) = 0;
  *(_OWORD *)((char *)v3 + 568) = 0u;
  *(_OWORD *)((char *)v3 + 584) = 0u;
  *(_OWORD *)((char *)v3 + 600) = 0u;
  *(_OWORD *)((char *)v3 + 616) = 0u;
  *(_OWORD *)((char *)v3 + 632) = 0u;
  *(_OWORD *)((char *)v3 + 648) = 0u;
  *(_OWORD *)((char *)v3 + 664) = 0u;
  uint64_t Element = ausdk::AUScope::GetElement((ausdk::AUBase *)((char *)v3 + 32), 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)Element + 40))(Element, 40);
  ausdk::AUBase::CreateElements((uint64_t)a1);
  for (uint64_t i = 0; i != 40; ++i)
  {
    float v7 = AUHearingLossCompensator::kUserParameterDefault[i];
    long long v8 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v4, 0);
    ausdk::AUElement::SetParameter(v8, i, v7, 0);
  }
  uint64_t v12 = 0x40E5888000000000;
  long long v13 = xmmword_1BB8727B0;
  long long v14 = xmmword_1BB879EA0;
  uint64_t v9 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v9 + 56))(v9, &v12);
  uint64_t v10 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v10 + 56))(v10, &v12);
  a1[376] = 1;
  return a1;
}

void sub_1BB400E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  long long v13 = *(void **)(v10 + 656);
  if (v13)
  {
    *(void *)(v10 + 664) = v13;
    operator delete(v13);
  }
  long long v14 = *(void **)(v10 + 632);
  if (v14)
  {
    *(void *)(v10 + 640) = v14;
    operator delete(v14);
  }
  a10 = (void **)(v10 + 608);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = (void **)(v10 + 584);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::unique_ptr<HearingLossCompensator_Core>::reset[abi:ne180100]((uint64_t *)(v10 + 576), 0);
  std::unique_ptr<BlockProcessor>::reset[abi:ne180100](v11, 0);
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v10);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpeechEnhancer>::Factory()
{
  double result = malloc_type_malloc(0x2E8uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpeechEnhancer>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpeechEnhancer>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpeechEnhancer>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpeechEnhancer>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  long long v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *(void *)long long v3 = &unk_1F14ABAC0;
  *((void *)v3 + 69) = 0;
  *((_DWORD *)v3 + 140) = 0;
  *((_OWORD *)v3 + 33) = 0u;
  *((_WORD *)v3 + 272) = 0;
  *(_OWORD *)((char *)v3 + 568) = 0u;
  *(_OWORD *)((char *)v3 + 584) = 0u;
  *(_OWORD *)((char *)v3 + 600) = 0u;
  *(_OWORD *)((char *)v3 + 616) = 0u;
  *(_OWORD *)((char *)v3 + 632) = 0u;
  *((_DWORD *)v3 + 162) = 1;
  *(void *)((char *)v3 + 652) = 0;
  *(void *)((char *)v3 + 668) = 0;
  *(void *)((char *)v3 + 660) = 0;
  *((_DWORD *)v3 + 169) = 0;
  spen::populateParameterInfoTable((void **)v3 + 82);
  uint64_t Element = ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  (*(void (**)(uint64_t, void))(*(void *)Element + 40))(Element, (*(void *)(a1 + 664) - *(void *)(a1 + 656)) >> 5);
  ausdk::AUBase::CreateElements(a1);
  uint64_t v5 = *(void *)(a1 + 656);
  if (*(void *)(a1 + 664) != v5)
  {
    unint64_t v6 = 0;
    uint64_t v7 = 24;
    do
    {
      float v8 = *(float *)(v5 + v7);
      uint64_t v9 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 32), 0);
      ausdk::AUElement::SetParameter(v9, v6++, v8, 0);
      uint64_t v5 = *(void *)(a1 + 656);
      v7 += 32;
    }
    while (v6 < (*(void *)(a1 + 664) - v5) >> 5);
  }
  *(unsigned char *)(a1 + 376) = 1;
  return a1;
}

void sub_1BB4010C0(_Unwind_Exception *a1)
{
  unint64_t v6 = *v3;
  if (*v3)
  {
    *((void *)v1 + 83) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)v1 + 78);
  if (v7)
  {
    *((void *)v1 + 79) = v7;
    operator delete(v7);
  }
  float v8 = (void *)*((void *)v1 + 75);
  if (v8)
  {
    *((void *)v1 + 76) = v8;
    operator delete(v8);
  }
  std::unique_ptr<SpeechEnhancerCore<float>>::reset[abi:ne180100](v2, 0);
  uint64_t v9 = *v4;
  if (*v4)
  {
    *((void *)v1 + 72) = v9;
    operator delete(v9);
  }
  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessLookup,AUMidSide>::Factory()
{
  double result = malloc_type_malloc(0x268uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUMidSide>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUMidSide>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUMidSide>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

float *ausdk::APFactory<ausdk::AUBaseProcessLookup,AUMidSide>::Construct(float *a1, OpaqueAudioComponentInstance *a2)
{
  long long v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *(void *)long long v3 = &unk_1F14B0430;
  __asm { FMOV            V0.2S, #1.0 }
  *((void *)v3 + 66) = _D0;
  *((void *)v3 + 67) = 1;
  *((unsigned char *)v3 + 544) = 0;
  uint64_t v9 = (ausdk::AUBase *)((char *)v3 + 32);
  uint64_t Element = ausdk::AUScope::GetElement((ausdk::AUBase *)((char *)v3 + 32), 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)Element + 40))(Element, 2);
  uint64_t v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v9, 0);
  ausdk::AUElement::SetParameter(v11, 0, 0.0, 0);
  uint64_t v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v9, 0);
  ausdk::AUElement::SetParameter(v12, 1u, 0.0, 0);
  a1[132] = __exp10f(0.0);
  a1[133] = __exp10f(0.0);
  return a1;
}

void sub_1BB4012AC(_Unwind_Exception *a1)
{
  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUChannelSelector>::Factory()
{
  double result = malloc_type_malloc(0x300uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUChannelSelector>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUChannelSelector>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUChannelSelector>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

ausdk::AUBase *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUChannelSelector>::Construct(ausdk::AUBase *a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  long long v3 = ausdk::AUBase::AUBase(a1, a2, 1, 1);
  *(void *)long long v3 = &unk_1F14B17C0;
  *((unsigned char *)v3 + 528) = 0;
  *((unsigned char *)v3 + 552) = 0;
  *((unsigned char *)v3 + 560) = 0;
  *(_OWORD *)((char *)v3 + 564) = 0u;
  *(_OWORD *)((char *)v3 + 580) = 0u;
  *(_OWORD *)((char *)v3 + 596) = 0u;
  *(_OWORD *)((char *)v3 + 612) = 0u;
  *(_OWORD *)((char *)v3 + 628) = 0u;
  *(_OWORD *)((char *)v3 + 644) = 0u;
  *(_OWORD *)((char *)v3 + 660) = 0u;
  *(_OWORD *)((char *)v3 + 676) = 0u;
  *((_OWORD *)v3 + 43) = 0u;
  if (getAUChannelSelectorLog(void)::onceToken != -1) {
    dispatch_once(&getAUChannelSelectorLog(void)::onceToken, &__block_literal_global_9832);
  }
  unsigned int v4 = getAUChannelSelectorLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUChannelSelectorLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    int v6 = 134217984;
    uint64_t v7 = a1;
    _os_log_debug_impl(&dword_1BB0CE000, v4, OS_LOG_TYPE_DEBUG, "[%p] constructed", (uint8_t *)&v6, 0xCu);
  }
  return a1;
}

void *ausdk::APFactory<ausdk::AUBaseProcessLookup,AUMultiChannelAGC>::Factory()
{
  double result = malloc_type_malloc(0x318uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUMultiChannelAGC>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUMultiChannelAGC>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUMultiChannelAGC>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUMultiChannelAGC>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  long long v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *((_WORD *)v3 + 276) = 0;
  *((void *)v3 + 68) = 0;
  *((_OWORD *)v3 + 33) = 0u;
  *((unsigned char *)v3 + 554) = 1;
  *((_DWORD *)v3 + 139) = 0;
  *((unsigned char *)v3 + 560) = 0;
  *((_DWORD *)v3 + 147) = 0;
  *(_OWORD *)((char *)v3 + 568) = 0u;
  *((unsigned char *)v3 + 584) = 0;
  *(void *)long long v3 = &unk_1F14B4B00;
  *((void *)v3 + 74) = 0;
  *((_DWORD *)v3 + 166) = 0;
  *((_OWORD *)v3 + 42) = 0u;
  *((_DWORD *)v3 + 172) = 1;
  *(_OWORD *)((char *)v3 + 692) = 0u;
  *(_OWORD *)((char *)v3 + 708) = 0u;
  ausdk::AUBase::CreateElements((uint64_t)v3);
  uint64_t Element = ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)Element + 40))(Element, 66);
  BYTE1(v11.componentFlags) = 0;
  HIWORD(v11.componentFlags) = 0;
  v11.componentFlagsMasunsigned int k = 0;
  strcpy((char *)&v11, "xfua2cgalppa");
  Next = AudioComponentFindNext(0, &v11);
  if (Next) {
    AudioComponentInstanceNew(Next, (AudioComponentInstance *)(a1 + 592));
  }
  for (AudioUnitParameterID i = 0; i != 65; ++i)
  {
    v11.componentType = 0;
    AudioUnitGetParameter(*(AudioUnit *)(a1 + 592), i, 0, 0, (AudioUnitParameterValue *)&v11.componentType);
    float v7 = *(float *)&v11.componentType;
    uint64_t v8 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 32), 0);
    ausdk::AUElement::SetParameter(v8, i, v7, 0);
  }
  uint64_t v9 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v9, 0x41u, 0.0, 0);
  *(unsigned char *)(a1 + 376) = 1;
  return a1;
}

void sub_1BB4016A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  long long v14 = (void *)(v12 + 672);
  long long v15 = *(void **)(v12 + 696);
  if (v15)
  {
    *(void *)(v12 + 704) = v15;
    operator delete(v15);
  }
  if (*v14)
  {
    (*((void (**)(void))ausdk::BufferAllocator::instance(void)::global + 3))();
    *long long v14 = 0;
  }
  *(void *)(v12 + 680) = 0;
  *(_DWORD *)(v12 + 664) = 0;
  *(void *)uint64_t v12 = &unk_1F14C8258;
  a12 = (void **)(v12 + 528);
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__destroy_vector::operator()[abi:ne180100](&a12);
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v12);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMicSense>::Factory()
{
  double result = malloc_type_malloc(0x318uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMicSense>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMicSense>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMicSense>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

ausdk::AUBase *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMicSense>::Construct(ausdk::AUBase *a1, OpaqueAudioComponentInstance *a2)
{
  long long v3 = ausdk::AUBase::AUBase(a1, a2, 1, 1);
  *(void *)long long v3 = &unk_1F14B5D98;
  *((_DWORD *)v3 + 132) = 0;
  unsigned int v4 = (ausdk::AUBase *)((char *)v3 + 560);
  *((_DWORD *)v3 + 154) = 0;
  *(_OWORD *)((char *)v3 + 648) = 0u;
  *(_OWORD *)((char *)v3 + 664) = 0u;
  uint64_t v5 = (ausdk::AUBase *)((char *)v3 + 32);
  *(_OWORD *)((char *)v3 + 536) = 0u;
  *(_OWORD *)((char *)v3 + 552) = 0u;
  *((_DWORD *)v3 + 142) = 0;
  *((_OWORD *)v3 + 36) = 0u;
  *((_OWORD *)v3 + 37) = 0u;
  *(void *)((char *)v3 + 605) = 0;
  *((_OWORD *)v3 + 39) = 0u;
  *((_DWORD *)v3 + 160) = 0;
  *((unsigned char *)v3 + 696) = 0;
  *(_OWORD *)((char *)v3 + 680) = 0u;
  *(_OWORD *)((char *)v3 + 700) = 0u;
  *(void *)((char *)v3 + 714) = 0;
  uint64_t Element = ausdk::AUScope::GetElement((ausdk::AUBase *)((char *)v3 + 32), 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)Element + 40))(Element, 14);
  ausdk::AUBase::CreateElements((uint64_t)a1);
  for (uint64_t i = 0; i != 14; ++i)
  {
    float v8 = AUMicSense::kUserParameterDefault[i];
    uint64_t v9 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v5, 0);
    ausdk::AUElement::SetParameter(v9, i, v8, 0);
  }
  for (unsigned int j = 0; j != 8; ++j)
  {
    for (uint64_t k = 0; k != 14; ++k)
    {
      uint64_t v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, j);
      ausdk::AUElement::SetParameter(v12, k, AUMicSense::kUserParameterDefault[k], 0);
    }
  }
  *((unsigned char *)a1 + 376) = 1;
  return a1;
}

void sub_1BB401958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)(v10 + 672);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::unique_ptr<BlockProcessor>::reset[abi:ne180100]((uint64_t *)(v10 + 624), 0);
  a10 = (void **)(v10 + 576);
  std::vector<std::unique_ptr<ausdk::AUElement>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<AUMicSense::MicSenseInfo>::__destroy_vector::operator()[abi:ne180100](&a10);
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v10);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUHOAZoom>::Factory()
{
  double result = malloc_type_malloc(0x2D0uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUHOAZoom>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUHOAZoom>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUHOAZoom>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUHOAZoom>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  *(void *)&long long v52 = *MEMORY[0x1E4F143B8];
  long long v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *(void *)long long v3 = &unk_1F14B90D0;
  *((_OWORD *)v3 + 33) = 0u;
  *((_DWORD *)v3 + 136) = 1;
  unsigned int v4 = (uint64_t *)operator new(0x18uLL);
  *(_OWORD *)unsigned int v4 = xmmword_1BB87A330;
  v4[2] = 1120403456;
  uint64_t v5 = (uint64_t *)operator new(0x10uLL);
  *(_OWORD *)uint64_t v5 = xmmword_1BB87A340;
  int v6 = v5 + 2;
  uint64_t v28 = v5;
  float v7 = (uint64_t *)operator new(0x10uLL);
  *(_OWORD *)float v7 = xmmword_1BB87A350;
  std::string::basic_string[abi:ne180100]<0>(&v49, "HOAZoomCurve");
  std::string::basic_string[abi:ne180100]<0>(&v50, "HOAZoomInDominanceCurve");
  std::string::basic_string[abi:ne180100]<0>(v51, "HOAZoomOutDominanceCurve");
  uint64_t v29 = 0;
  v30[0] = 0uLL;
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
  __str.__r_.__value_.__s.__data_[8] = 0;
  uint64_t v29 = (uint64_t)operator new(0x48uLL);
  *(void *)&v30[0] = v29;
  *((void *)&v30[0] + 1) = v29 + 72;
  uint64_t v8 = 0;
  *(void *)&v30[0] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v30 + 8, (long long *)&v49, &v52, (std::string *)v29);
  do
  {
    if (SHIBYTE(v51[v8 + 2]) < 0) {
      operator delete((void *)v51[v8]);
    }
    v8 -= 3;
  }
  while (v8 != -9);
  memset(&v49, 0, sizeof(v49));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v49, (long long *)v29, *(long long **)&v30[0], 0xAAAAAAAAAAAAAAABLL * ((*(void *)&v30[0] - v29) >> 3));
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  ZoomCurveValue::ZoomCurveValue(a1 + 552, (uint64_t)&v49, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  *(void *)&long long v46 = &v49;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  CFDictionaryRef v43 = 0;
  std::vector<std::pair<float,float>>::__init_with_size[abi:ne180100]<std::pair<float,float>*,std::pair<float,float>*>((char *)&v43, v4, v4 + 3, 3uLL);
  PiecewiseLinearTransform::PiecewiseLinearTransform((uint64_t **)&v46, (uint64_t **)&v43, v9);
  std::string::basic_string[abi:ne180100]<0>(__p, "HOAZoomCurve");
  uint64_t v10 = ZoomCurveValue::operator[](a1 + 552, (long long *)__p);
  AudioComponentDescription v11 = (void *)*v10;
  if (*v10)
  {
    v10[1] = (uint64_t)v11;
    operator delete(v11);
    *uint64_t v10 = 0;
    v10[1] = 0;
    v10[2] = 0;
  }
  *(_OWORD *)uint64_t v10 = v46;
  v10[2] = v47;
  long long v46 = 0uLL;
  uint64_t v47 = 0;
  if (v42 < 0)
  {
    operator delete(__p[0]);
    if ((void)v46)
    {
      *((void *)&v46 + 1) = v46;
      operator delete((void *)v46);
    }
  }
  if (v43)
  {
    uint64_t v44 = v43;
    operator delete(v43);
  }
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v38 = 0;
  std::vector<std::pair<float,float>>::__init_with_size[abi:ne180100]<std::pair<float,float>*,std::pair<float,float>*>((char *)&v38, v28, v6, 2uLL);
  PiecewiseLinearTransform::PiecewiseLinearTransform((uint64_t **)&v46, (uint64_t **)&v38, v12);
  std::string::basic_string[abi:ne180100]<0>(v36, "HOAZoomInDominanceCurve");
  long long v13 = ZoomCurveValue::operator[](a1 + 552, (long long *)v36);
  long long v14 = (void *)*v13;
  if (*v13)
  {
    v13[1] = (uint64_t)v14;
    operator delete(v14);
    *long long v13 = 0;
    v13[1] = 0;
    v13[2] = 0;
  }
  *(_OWORD *)long long v13 = v46;
  v13[2] = v47;
  long long v46 = 0uLL;
  uint64_t v47 = 0;
  if (v37 < 0)
  {
    operator delete(v36[0]);
    if ((void)v46)
    {
      *((void *)&v46 + 1) = v46;
      operator delete((void *)v46);
    }
  }
  if (v38)
  {
    uint64_t v39 = v38;
    operator delete(v38);
  }
  long long v34 = 0;
  uint64_t v35 = 0;
  long long v33 = 0;
  std::vector<std::pair<float,float>>::__init_with_size[abi:ne180100]<std::pair<float,float>*,std::pair<float,float>*>((char *)&v33, v7, v7 + 2, 2uLL);
  PiecewiseLinearTransform::PiecewiseLinearTransform((uint64_t **)&v46, (uint64_t **)&v33, v15);
  std::string::basic_string[abi:ne180100]<0>(v31, "HOAZoomOutDominanceCurve");
  uint64_t v16 = ZoomCurveValue::operator[](a1 + 552, (long long *)v31);
  uint64_t v17 = (void *)*v16;
  if (*v16)
  {
    v16[1] = (uint64_t)v17;
    operator delete(v17);
    *uint64_t v16 = 0;
    v16[1] = 0;
    v16[2] = 0;
  }
  *(_OWORD *)uint64_t v16 = v46;
  v16[2] = v47;
  long long v46 = 0uLL;
  uint64_t v47 = 0;
  if (v32 < 0)
  {
    operator delete(v31[0]);
    if ((void)v46)
    {
      *((void *)&v46 + 1) = v46;
      operator delete((void *)v46);
    }
  }
  if (v33)
  {
    long long v34 = v33;
    operator delete(v33);
  }
  *(void *)&long long v46 = &v29;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
  operator delete(v7);
  operator delete(v28);
  operator delete(v4);
  *(_DWORD *)(a1 + 640) = 0;
  *(_OWORD *)(a1 + 624) = 0u;
  *(unsigned char *)(a1 + 644) = 1;
  *(_DWORD *)(a1 + 648) = 0;
  *(unsigned char *)(a1 + 652) = 0;
  ausdk::AUBase::CreateElements(a1);
  AUHOAZoom::UpdateChannelLayoutTag((AUHOAZoom *)a1, 12451844);
  v49.__r_.__value_.__r.__words[0] = 0x40E7700000000000;
  long long v50 = xmmword_1BB87A360;
  *(_OWORD *)&v49.__r_.__value_.__r.__words[1] = xmmword_1BB87A250;
  uint64_t v29 = 0x40E7700000000000;
  v30[0] = xmmword_1BB87A250;
  v30[1] = xmmword_1BB87A360;
  uint64_t Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, std::string *))(*(void *)Element + 56))(Element, &v49);
  uint64_t v19 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v19 + 56))(v19, &v29);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 512))(a1, 1156);
  *(unsigned char *)(a1 + 376) = 1;
  ParameterMap = (void *)AUHOAZoom::GetParameterMap((AUHOAZoom *)a1);
  int v21 = ParameterMap + 1;
  uint64_t v22 = (void *)*ParameterMap;
  if ((void *)*ParameterMap != ParameterMap + 1)
  {
    do
    {
      uint64_t v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
      ausdk::AUElement::SetParameter(v23, *((_DWORD *)v22 + 8), *((float *)v22 + 33), 0);
      unint64_t v24 = (void *)v22[1];
      if (v24)
      {
        do
        {
          uint64_t v25 = v24;
          unint64_t v24 = (void *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          uint64_t v25 = (void *)v22[2];
          BOOL v26 = *v25 == (void)v22;
          uint64_t v22 = v25;
        }
        while (!v26);
      }
      uint64_t v22 = v25;
    }
    while (v25 != v21);
  }
  return a1;
}

void sub_1BB402020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,char *a42,char *a43)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a42)
  {
    a43 = a42;
    operator delete(a42);
  }
  if (a21)
  {
    a22 = (uint64_t)a21;
    operator delete(a21);
  }
  if (*(char *)(v43 + 623) < 0) {
    operator delete(*(void **)(v43 + 600));
  }
  a42 = (char *)(v43 + 576);
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&a42);
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*(void **)(v43 + 560));
  a42 = &a10;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&a42);
  operator delete(v45);
  operator delete(a9);
  operator delete(v44);
  uint64_t v47 = *(void *)(v43 + 536);
  *(void *)(v43 + 536) = 0;
  if (v47) {
    std::default_delete<DominanceZoom>::operator()[abi:ne180100](v47);
  }
  std::unique_ptr<std::map<unsigned int,HOAZoomParameterInfo>>::reset[abi:ne180100]((uint64_t *)(v43 + 528), 0);
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v43);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpatialCapture>::Factory()
{
  double result = malloc_type_malloc(0x410uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpatialCapture>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpatialCapture>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpatialCapture>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpatialCapture>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  long long v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 3, 1);
  *(void *)long long v3 = &unk_1F14AE208;
  *((_OWORD *)v3 + 33) = 0u;
  *((_OWORD *)v3 + 34) = 0u;
  *((_OWORD *)v3 + 35) = 0u;
  *((_OWORD *)v3 + 36) = 0u;
  *((_DWORD *)v3 + 148) = 1;
  *((void *)v3 + 75) = 0x300000003;
  *((_DWORD *)v3 + 152) = 0;
  *((unsigned char *)v3 + 612) = 0;
  *((void *)v3 + 77) = 850045863;
  *((_OWORD *)v3 + 39) = 0u;
  *((_OWORD *)v3 + 40) = 0u;
  *((_OWORD *)v3 + 41) = 0u;
  *((void *)v3 + 84) = 0;
  *((void *)v3 + 85) = 850045863;
  *((_OWORD *)v3 + 43) = 0u;
  *((_OWORD *)v3 + 44) = 0u;
  *((_OWORD *)v3 + 45) = 0u;
  *((void *)v3 + 92) = 0;
  *((void *)v3 + 93) = 1018212795;
  *((_OWORD *)v3 + 47) = 0u;
  *((_OWORD *)v3 + 48) = 0u;
  *((void *)v3 + 98) = 0;
  *((_DWORD *)v3 + 198) = 1028443341;
  *((_DWORD *)v3 + 200) = 6946818;
  *(_OWORD *)((char *)v3 + 808) = 0u;
  std::string::basic_string[abi:ne180100]<0>((void *)v3 + 103, "/tmp/");
  unsigned int v4 = (char *)(a1 + 848);
  *(void *)(a1 + 864) = 0;
  *(_OWORD *)(a1 + 848) = 0u;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 872), "<plist path not set>");
  *(_WORD *)(a1 + 896) = 1;
  ZoomCurveValue::ZoomCurveValue((ZoomCurveValue *)(a1 + 904));
  if (DSPGraph::ABIVersion(v5) != 4)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioChannelLayout buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = -10875;
      _os_log_error_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "throwing %d", buf, 8u);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    ausdk::AUException::AUException(exception, -10875);
  }
  ausdk::AUBase::CreateElements(a1);
  unsigned int v6 = 0;
  *(void *)AudioChannelLayout buf = 0x40E5888000000000;
  long long v22 = xmmword_1BB8727B0;
  long long v23 = xmmword_1BB879E90;
  uint64_t v18 = 0x40E5888000000000;
  long long v19 = xmmword_1BB8727B0;
  long long v20 = xmmword_1BB879EA0;
  do
  {
    uint64_t Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v6);
    (*(void (**)(uint64_t, uint8_t *))(*(void *)Element + 56))(Element, buf);
    ++v6;
  }
  while (v6 != 3);
  uint64_t v8 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v8 + 56))(v8, &v18);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 512))(a1, 1156);
  ParameterMap = (void *)AUSpatialCapture::GetParameterMap((AUSpatialCapture *)a1);
  uint64_t v10 = ParameterMap + 1;
  AudioComponentDescription v11 = (void *)*ParameterMap;
  if ((void *)*ParameterMap != ParameterMap + 1)
  {
    do
    {
      double v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
      ausdk::AUElement::SetParameter(v12, *((_DWORD *)v11 + 8), *((float *)v11 + 33), 0);
      long long v13 = (void *)v11[1];
      if (v13)
      {
        do
        {
          long long v14 = v13;
          long long v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          long long v14 = (void *)v11[2];
          BOOL v15 = *v14 == (void)v11;
          AudioComponentDescription v11 = v14;
        }
        while (!v15);
      }
      AudioComponentDescription v11 = v14;
    }
    while (v14 != v10);
  }
  if (*(char *)(a1 + 871) < 0)
  {
    *(void *)(a1 + 856) = 18;
    unsigned int v4 = *(char **)(a1 + 848);
  }
  else
  {
    *(unsigned char *)(a1 + 871) = 18;
  }
  strcpy(v4, "<no tuning loaded>");
  return a1;
}

void sub_1BB4026A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  __cxa_free_exception(v18);
  if (*(char *)(v15 + 975) < 0) {
    operator delete(*(void **)(v15 + 952));
  }
  a15 = v15 + 928;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*(void **)(v15 + 912));
  if (*(char *)(v15 + 895) < 0) {
    operator delete(*v17);
  }
  if (*(char *)(v15 + 871) < 0) {
    operator delete(*v20);
  }
  if (*(char *)(v15 + 847) < 0) {
    operator delete(*v16);
  }
  uint64_t v22 = *v19;
  *long long v19 = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  std::condition_variable::~condition_variable((std::condition_variable *)(v15 + 744));
  std::mutex::~mutex((std::mutex *)(v15 + 680));
  std::mutex::~mutex((std::mutex *)(v15 + 616));
  long long v23 = *(const void **)(v15 + 584);
  if (v23) {
    CFRelease(v23);
  }
  uint64_t v24 = (void **)(v15 + 528);
  std::unique_ptr<std::map<unsigned int,SpatialCaptureParameterInfo>>::reset[abi:ne180100]((uint64_t *)(v15 + 576), 0);
  uint64_t v25 = *(void **)(v15 + 552);
  if (v25)
  {
    *(void *)(v15 + 560) = v25;
    operator delete(v25);
  }
  BOOL v26 = *v24;
  if (*v24)
  {
    *(void *)(v15 + 536) = v26;
    operator delete(v26);
  }
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v15);
  _Unwind_Resume(a1);
}

void sub_1BB4027D0(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1BB4027C8);
}

void *ausdk::APFactory<ausdk::AUBaseProcessLookup,AUChannelSpecificDelay>::Factory()
{
  double result = malloc_type_malloc(0x910uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUChannelSpecificDelay>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUChannelSpecificDelay>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUChannelSpecificDelay>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUChannelSpecificDelay>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  long long v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  uint64_t v4 = 0;
  *(void *)long long v3 = &unk_1F14BC978;
  *((_DWORD *)v3 + 132) = 0;
  *((_WORD *)v3 + 266) = 0;
  uint64_t v5 = (_OWORD *)((char *)v3 + 1816);
  do
  {
    uint64_t v6 = a1 + v4;
    *(_OWORD *)(v6 + 560) = 0uLL;
    *(_DWORD *)(v6 + 552) = 0;
    *(_OWORD *)(a1 + v4 + 536) = xmmword_1BB87A370;
    v4 += 40;
  }
  while (v4 != 1280);
  *(void *)(a1 + 2200) = 0;
  *(_DWORD *)(a1 + 2208) = 0;
  *(_OWORD *)(a1 + 2216) = 0u;
  *(_DWORD *)(a1 + 2248) = 0;
  *(_OWORD *)(a1 + 2232) = 0u;
  uint64_t Element = ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)Element + 40))(Element, 8);
  ausdk::AUBase::CreateElements(a1);
  for (unsigned int i = 0; i != 8; ++i)
  {
    double v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
    ausdk::AUElement::SetParameter(v9, i, 0.0, 0);
  }
  for (unsigned int j = 0; ; ++j)
  {
    uint64_t v11 = *(void *)(a1 + 2240);
    if (v11) {
      LODWORD(v12) = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 24))(v11);
    }
    else {
      uint64_t v12 = (*(void *)(a1 + 2224) - *(void *)(a1 + 2216)) >> 3;
    }
    if (j >= v12) {
      break;
    }
    long long v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 2200), j);
    ausdk::AUElement::SetParameter(v13, 0, 0.0, 0);
  }
  v5[22] = 0u;
  v5[23] = 0u;
  void v5[20] = 0u;
  v5[21] = 0u;
  v5[18] = 0u;
  v5[19] = 0u;
  void v5[16] = 0u;
  v5[17] = 0u;
  v5[14] = 0u;
  v5[15] = 0u;
  v5[12] = 0u;
  v5[13] = 0u;
  v5[10] = 0u;
  v5[11] = 0u;
  v5[8] = 0u;
  v5[9] = 0u;
  v5[6] = 0u;
  v5[7] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  v5[2] = 0u;
  v5[3] = 0u;
  *uint64_t v5 = 0u;
  v5[1] = 0u;
  if (AUChannelSpecificDelayLogScope(void)::once != -1) {
    dispatch_once(&AUChannelSpecificDelayLogScope(void)::once, &__block_literal_global_24117);
  }
  if (AUChannelSpecificDelayLogScope(void)::scope)
  {
    if (*(unsigned char *)(AUChannelSpecificDelayLogScope(void)::scope + 8))
    {
      long long v14 = *(NSObject **)AUChannelSpecificDelayLogScope(void)::scope;
      if (*(void *)AUChannelSpecificDelayLogScope(void)::scope)
      {
        if (os_log_type_enabled(*(os_log_t *)AUChannelSpecificDelayLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
        {
          int v16 = 136315394;
          uint64_t v17 = "AUChannelSpecificDelay.cpp";
          __int16 v18 = 1024;
          int v19 = 65;
          _os_log_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUChannelSpecificDelay instantiated", (uint8_t *)&v16, 0x12u);
        }
      }
    }
  }
  return a1;
}

void sub_1BB402B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::unique_ptr<ausdk::AUElement>>::__destroy_vector::operator()[abi:ne180100](&a9);
  uint64_t v11 = 1280;
  while (1)
  {
    uint64_t v12 = (char *)v9 + v11;
    long long v13 = *(unsigned char **)((char *)v9 + v11 + 520);
    if (v13)
    {
      long long v14 = (unsigned char *)*((void *)v12 + 66);
      if (v14 != v13) {
        *((void *)v12 + 66) = &v14[(v13 - v14 + 3) & 0xFFFFFFFFFFFFFFFCLL];
      }
      uint64_t v15 = v12 + 520;
      operator delete(v13);
      *uint64_t v15 = 0;
      v15[1] = 0;
    }
    v11 -= 40;
    if (!v11)
    {
      ausdk::AUBase::~AUBase(v9);
      _Unwind_Resume(a1);
    }
  }
}

void *ausdk::APFactory<ausdk::AUBaseProcessLookup,AUFixedGain>::Factory()
{
  double result = malloc_type_malloc(0x270uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUFixedGain>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUFixedGain>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUFixedGain>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUFixedGain>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  long long v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *(void *)long long v3 = &unk_1F14B7440;
  *((_DWORD *)v3 + 132) = 1;
  uint64_t v4 = (void **)((char *)v3 + 552);
  *(void *)((char *)v3 + 540) = 0;
  *(void *)((char *)v3 + 548) = 0;
  *(void *)((char *)v3 + 532) = 0;
  *((_DWORD *)v3 + 139) = 0;
  ausdk::AUBase::CreateElements((uint64_t)v3);
  for (unsigned int i = 0; i != 16; ++i)
  {
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
    ausdk::AUElement::SetParameter(Element, i, 0.0, 0);
  }
  float v7 = *(void **)(a1 + 544);
  if (v7)
  {
    free(v7);
    *(void *)(a1 + 544) = 0;
  }
  CADeprecated::CAAutoFree<float>::allocBytes(v4, 0x40uLL);
  memset_pattern16(*(void **)(a1 + 552), &unk_1BB873A60, 0x40uLL);
  uint64_t v11 = 0x40E5888000000000;
  long long v12 = xmmword_1BB8727B0;
  long long v13 = xmmword_1BB8727C0;
  uint64_t v8 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v8 + 56))(v8, &v11);
  uint64_t v9 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v9 + 56))(v9, &v11);
  return a1;
}

void sub_1BB402D84(_Unwind_Exception *a1)
{
  if (*v2)
  {
    free(*v2);
    uint64_t *v2 = 0;
  }
  uint64_t v4 = (void *)*((void *)v1 + 68);
  if (v4)
  {
    free(v4);
    *((void *)v1 + 68) = 0;
  }
  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUHapticsProtection>::Factory()
{
  double result = malloc_type_malloc(0x320uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUHapticsProtection>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUHapticsProtection>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUHapticsProtection>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUHapticsProtection>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  long long v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *(void *)long long v3 = &unk_1F14C1C28;
  *((_OWORD *)v3 + 33) = 0u;
  *((void *)v3 + 68) = 1;
  *((unsigned char *)v3 + 552) = 0;
  *((_OWORD *)v3 + 35) = 0u;
  *((_OWORD *)v3 + 36) = 0u;
  *((_OWORD *)v3 + 37) = 0u;
  *((_OWORD *)v3 + 38) = 0u;
  *((_OWORD *)v3 + 39) = 0u;
  *((_OWORD *)v3 + 40) = 0u;
  *((_OWORD *)v3 + 41) = 0u;
  *((_OWORD *)v3 + 42) = 0u;
  *((_OWORD *)v3 + 43) = 0u;
  *((_OWORD *)v3 + 44) = 0u;
  *((_OWORD *)v3 + 45) = 0u;
  ausdk::AUBase::CreateElements((uint64_t)v3);
  for (uint64_t i = 0; i != 47; ++i)
  {
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
    ausdk::AUElement::SetParameter(Element, i + 4096, *(float *)&htlDefaultCoeffs[4 * i], 0);
  }
  uint64_t v12 = 0x40E5888000000000;
  long long v13 = xmmword_1BB8727B0;
  long long v14 = xmmword_1BB879EA0;
  uint64_t v9 = 0x40E5888000000000;
  long long v10 = xmmword_1BB8727B0;
  long long v11 = xmmword_1BB8727C0;
  uint64_t v6 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 56))(v6, &v12);
  uint64_t v7 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 56))(v7, &v9);
  return a1;
}

void sub_1BB402FC0(_Unwind_Exception *a1)
{
  long long v3 = (void *)v1[78];
  if (v3)
  {
    v1[79] = (uint64_t)v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)v1[75];
  if (v4)
  {
    v1[76] = (uint64_t)v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)v1[72];
  if (v5)
  {
    v1[73] = (uint64_t)v5;
    operator delete(v5);
  }
  std::unique_ptr<HapticTravelLimiter::HTL>::reset[abi:ne180100](v1 + 66, 0);
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessLookup,AULoudnessWarrior>::Factory()
{
  double result = malloc_type_malloc(0xB40uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AULoudnessWarrior>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AULoudnessWarrior>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AULoudnessWarrior>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

char *ausdk::APFactory<ausdk::AUBaseProcessLookup,AULoudnessWarrior>::Construct(char *a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(v21, "AULoudnessWarrior");
  std::string::basic_string[abi:ne180100]<0>(&__p, "loudnesswarrior_verbose");
  AUJBase::AUJBase((uint64_t)a1, a2, (long long *)v21);
  if (v20 < 0) {
    operator delete(__p);
  }
  if (v22 < 0) {
    operator delete(v21[0]);
  }
  *(void *)a1 = &unk_1F14B5750;
  *((void *)a1 + 80) = &unk_1F14B59F0;
  *((void *)a1 + 88) = &unk_1F14B5A10;
  boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::queue((unsigned int *)a1 + 192);
  boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::queue((unsigned int *)a1 + 432);
  a1[2689] = 0;
  *((void *)a1 + 344) = 0;
  *((void *)a1 + 345) = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  *((_WORD *)a1 + 1384) = 257;
  a1[2776] = 0;
  *((void *)a1 + 348) = 0;
  a1[2792] = 0;
  *((void *)a1 + 350) = 0;
  if (AULoudnessWarriorLogScope(void)::once != -1) {
    dispatch_once(&AULoudnessWarriorLogScope(void)::once, &__block_literal_global_14704);
  }
  if (AULoudnessWarriorLogScope(void)::scope)
  {
    uint64_t v4 = *(NSObject **)AULoudnessWarriorLogScope(void)::scope;
    if (!*(void *)AULoudnessWarriorLogScope(void)::scope) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v4 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioChannelLayout buf = 136315394;
    *(void *)&uint8_t buf[4] = "AULoudnessWarrior.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 136;
    _os_log_impl(&dword_1BB0CE000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d AULoudnessWarrior construction starting\n", buf, 0x12u);
  }
LABEL_13:
  ausdk::AUBase::CreateElements((uint64_t)a1);
  *(void *)AudioChannelLayout buf = 0x40E5888000000000;
  *(_OWORD *)&uint8_t buf[8] = xmmword_1BB8727B0;
  long long v24 = xmmword_1BB879EA0;
  uint64_t Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, unsigned char *))(*(void *)Element + 56))(Element, buf);
  uint64_t v16 = 0x40E5888000000000;
  long long v17 = xmmword_1BB8727B0;
  long long v18 = xmmword_1BB879EA0;
  uint64_t v6 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 56))(v6, &v16);
  uint64_t v7 = 41;
  uint64_t v8 = &qword_1E9F7C498;
  do
  {
    CFStringRef v9 = (const __CFString *)*(v8 - 3);
    *(_DWORD *)v8 |= 0x8000000u;
    CFStringGetCString(v9, (char *)v8 - 96, 52, 0x8000100u);
    int v10 = *(_DWORD *)v8;
    int v11 = *(_DWORD *)v8 | 0x40000000;
    *(_DWORD *)uint64_t v8 = v11;
    if (*((_DWORD *)v8 - 8))
    {
      int v11 = v10 | 0x40100000;
      *(_DWORD *)uint64_t v8 = v10 | 0x40100000;
    }
    unsigned int v12 = *((_DWORD *)v8 - 26);
    if (v12 > 0x24 || ((1 << v12) & 0x10020040F8) == 0) {
      unsigned int v14 = 0x80000000;
    }
    else {
      unsigned int v14 = 0x8000;
    }
    *(_DWORD *)uint64_t v8 = v11 | v14;
    (*(void (**)(char *, float))(*(void *)a1 + 152))(a1, *((float *)v8 - 1));
    v8 += 14;
    --v7;
  }
  while (v7);
  ausdk::AUBase::SetAFactoryPresetAsCurrent(a1, &kAuPresets);
  return a1;
}

void sub_1BB403468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  CACFDictionary::~CACFDictionary((CACFDictionary *)(v30 + 2760));
  std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100]((AULoudnessWarriorKernel **)(v30 + 2752), 0);
  *(void *)(v30 + 640) = v31;
  ca::concurrent::deferred_deletion_queue<AULoudnessWarriorKernel,10ul,std::default_delete<AULoudnessWarriorKernel>>::~deferred_deletion_queue(v32);
  *(void *)uint64_t v30 = &unk_1F14C2A10;
  long long v34 = *(void **)(v30 + 608);
  if (v34)
  {
    *(void *)(v30 + 616) = v34;
    operator delete(v34);
  }
  uint64_t v35 = *(void **)(v30 + 584);
  if (v35)
  {
    *(void *)(v30 + 592) = v35;
    operator delete(v35);
  }
  unint64_t v36 = *(void **)(v30 + 560);
  if (v36)
  {
    *(void *)(v30 + 568) = v36;
    operator delete(v36);
  }
  if (*(char *)(v30 + 551) < 0) {
    operator delete(*(void **)(v30 + 528));
  }
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v30);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUCircArray>::Factory()
{
  double result = malloc_type_malloc(0xC00uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUCircArray>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUCircArray>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUCircArray>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

unsigned char *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUCircArray>::Construct(unsigned char *a1, OpaqueAudioComponentInstance *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v12, "CircArray");
  std::string::basic_string[abi:ne180100]<0>(&__p, "circarray_verbose");
  AUJBase::AUJBase((uint64_t)a1, a2, (long long *)v12);
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  *(void *)a1 = &unk_1F14B7120;
  *((_WORD *)a1 + 316) = 0;
  *((void *)a1 + 80) = &unk_1F14B73C0;
  *((void *)a1 + 88) = &unk_1F14B73E0;
  boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::queue((unsigned int *)a1 + 192);
  boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::queue((unsigned int *)a1 + 432);
  a1[2689] = 0;
  *((_OWORD *)a1 + 172) = 0u;
  *((_OWORD *)a1 + 173) = 0u;
  *((_OWORD *)a1 + 174) = 0u;
  *((void *)a1 + 350) = 0;
  *((void *)a1 + 351) = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  *((_WORD *)a1 + 1408) = 257;
  *((void *)a1 + 353) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  *((_WORD *)a1 + 1416) = 257;
  *((void *)a1 + 355) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  *((_WORD *)a1 + 1424) = 257;
  *((void *)a1 + 357) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  *((_WORD *)a1 + 1432) = 257;
  *((void *)a1 + 359) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  *((_WORD *)a1 + 1440) = 257;
  *((void *)a1 + 361) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  *((_WORD *)a1 + 1448) = 257;
  *((void *)a1 + 363) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  *((_WORD *)a1 + 1456) = 257;
  *((void *)a1 + 365) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  *((_WORD *)a1 + 1464) = 257;
  *((void *)a1 + 367) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  *((_WORD *)a1 + 1472) = 257;
  *((void *)a1 + 369) = 0;
  a1[2960] = 1;
  *((void *)a1 + 371) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  *((_WORD *)a1 + 1488) = 257;
  *((_DWORD *)a1 + 746) = 0;
  *((void *)a1 + 374) = 0;
  *((_DWORD *)a1 + 750) = 0;
  a1[3004] = 1;
  ausdk::AUBase::CreateElements((uint64_t)a1);
  uint64_t v4 = 0;
  do
  {
    (*(void (**)(unsigned char *, uint64_t, void, void, void, double))(*(void *)a1 + 152))(a1, v4, 0, 0, 0, 0.0);
    uint64_t v5 = (v4 + 8);
    (*(void (**)(unsigned char *, uint64_t, void, void, void, double))(*(void *)a1 + 152))(a1, v5, 0, 0, 0, 0.0);
    uint64_t v6 = (v5 + 8);
    (*(void (**)(unsigned char *, uint64_t, void, void, void, float))(*(void *)a1 + 152))(a1, v6, 0, 0, 0, 1.0);
    uint64_t v7 = (v6 + 8);
    (*(void (**)(unsigned char *, uint64_t, void, void, void, double))(*(void *)a1 + 152))(a1, v7, 0, 0, 0, 0.0);
    uint64_t v4 = (v7 - 23);
  }
  while (v4 != 8);
  (*(void (**)(unsigned char *, uint64_t, void, void, void, float))(*(void *)a1 + 152))(a1, 32, 0, 0, 0, 40.0);
  uint64_t v8 = (AUDebugFeature *)(*(uint64_t (**)(unsigned char *, uint64_t, void, void, void, double))(*(void *)a1 + 152))(a1, 33, 0, 0, 0, 0.0);
  a1[3004] = AUDebugFeature::IsNonFiniteHandlingEnabled(v8);
  return a1;
}

void sub_1BB4039D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  CACFString::~CACFString((CACFString *)(v22 + 2952));
  CACFArray::~CACFArray((CACFArray *)(v22 + 2936));
  CACFArray::~CACFArray((CACFArray *)(v22 + 2920));
  CACFArray::~CACFArray((CACFArray *)(v22 + 2904));
  CACFArray::~CACFArray((CACFArray *)(v22 + 2888));
  CACFArray::~CACFArray((CACFArray *)(v22 + 2872));
  CACFArray::~CACFArray((CACFArray *)(v22 + 2856));
  CACFArray::~CACFArray((CACFArray *)(v22 + 2840));
  CACFArray::~CACFArray((CACFArray *)(v22 + 2824));
  CACFDictionary::~CACFDictionary((CACFDictionary *)(v22 + 2808));
  uint64_t v25 = *(void **)(v22 + 2784);
  if (v25)
  {
    *(void *)(v22 + 2792) = v25;
    operator delete(v25);
  }
  BOOL v26 = *(void **)(v22 + 2760);
  if (v26)
  {
    *(void *)(v22 + 2768) = v26;
    operator delete(v26);
  }
  std::unique_ptr<CircArrayKernel>::reset[abi:ne180100]((CircArrayKernel **)(v22 + 2752), 0);
  *(void *)(v22 + 640) = v23;
  ca::concurrent::deferred_deletion_queue<CircArrayKernel,10ul,std::default_delete<CircArrayKernel>>::~deferred_deletion_queue(v24);
  *(void *)uint64_t v22 = &unk_1F14C2A10;
  uint64_t v27 = *(void **)(v22 + 608);
  if (v27)
  {
    *(void *)(v22 + 616) = v27;
    operator delete(v27);
  }
  uint64_t v28 = *(void **)(v22 + 584);
  if (v28)
  {
    *(void *)(v22 + 592) = v28;
    operator delete(v28);
  }
  uint64_t v29 = *(void **)(v22 + 560);
  if (v29)
  {
    *(void *)(v22 + 568) = v29;
    operator delete(v29);
  }
  if (*(char *)(v22 + 551) < 0) {
    operator delete(*(void **)(v22 + 528));
  }
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v22);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUScotty>::Factory()
{
  double result = malloc_type_malloc(0x338uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUScotty>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUScotty>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUScotty>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUScotty>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  *(void *)ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1) = &unk_1F14AD7F8;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)buf);
  std::ostream::operator<<();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v20, (void *)(a1 + 528));
  *(void *)AudioChannelLayout buf = *MEMORY[0x1E4FBA408];
  uint64_t v3 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)&buf[*(void *)(*(void *)buf - 24)] = *(void *)(MEMORY[0x1E4FBA408] + 64);
  *(void *)&buf[16] = v3;
  *(void *)&v20[0] = MEMORY[0x1E4FBA470] + 16;
  if (v22 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C185D210](&v23);
  *(void *)(a1 + 552) = -1;
  *(void *)(a1 + 560) = 16777217;
  *(unsigned char *)(a1 + 568) = 1;
  *(void *)(a1 + 576) = 0;
  *(_DWORD *)(a1 + 584) = 0;
  caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((caulk::pooled_semaphore_mutex *)(a1 + 588));
  *(void *)(a1 + 752) = 0;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  if (getScottyLog(void)::onceToken != -1) {
    dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_33998);
  }
  uint64_t v4 = getScottyLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = a1 + 528;
    if (*(char *)(a1 + 551) < 0) {
      uint64_t v5 = *(void *)(a1 + 528);
    }
    *(_DWORD *)AudioChannelLayout buf = 136315394;
    *(void *)&uint8_t buf[4] = v5;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "AUScotty";
    _os_log_impl(&dword_1BB0CE000, v4, OS_LOG_TYPE_DEFAULT, "[%s|%s] Constructing", buf, 0x16u);
  }
  ausdk::AUBase::CreateElements(a1);
  uint64_t Element = ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)Element + 40))(Element, 34);
  *(void *)AudioChannelLayout buf = 0x40E5888000000000;
  *(_OWORD *)&uint8_t buf[8] = xmmword_1BB8727B0;
  v20[0] = xmmword_1BB87A380;
  uint64_t v7 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v7 + 56))(v7, buf);
  uint64_t v8 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v8 + 56))(v8, buf);
  for (unsigned int i = 0; i != 34; ++i)
  {
    *(_DWORD *)uint64_t v24 = 0;
    if (ScottyUpmixer::GetParamDefault(i, 0, (float *)v24))
    {
      float v10 = *(float *)v24;
      char v11 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 32), 0);
      ausdk::AUElement::SetParameter(v11, i, v10, 0);
    }
  }
  unsigned int v12 = ausdk::AUBase::SetAFactoryPresetAsCurrent((char *)a1, (const AUPreset *)&kPresets);
  uint64_t v13 = 0;
  *(unsigned char *)(a1 + 563) = AUDebugFeature::IsNonFiniteHandlingEnabled((AUDebugFeature *)v12);
  do
  {
    *(_DWORD *)uint64_t v24 = 0;
    if (ScottyUpmixer::GetParamDefault(v13, 0, (float *)v24))
    {
      unsigned int v14 = *(_DWORD *)v24;
    }
    else
    {
      uint64_t v15 = 0;
      while (1)
      {
        uint64_t v16 = (char *)&kParameterInfo + v15;
        if (*(_DWORD *)((char *)&kParameterInfo + v15) == v13) {
          break;
        }
        v15 += 40;
        if (v15 == 1360) {
          goto LABEL_22;
        }
      }
      if (v16 != (char *)&kDspLibBuzzKillParameterNames)
      {
        unsigned int v14 = *((_DWORD *)v16 + 7);
        goto LABEL_26;
      }
LABEL_22:
      if (getScottyLog(void)::onceToken != -1) {
        dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_33998);
      }
      long long v17 = getScottyLog(void)::gLog;
      unsigned int v14 = 0;
      if (os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t v24 = 136315394;
        uint64_t v25 = "GetParamDefault";
        __int16 v26 = 1024;
        int v27 = v13;
        _os_log_impl(&dword_1BB0CE000, v17, OS_LOG_TYPE_DEFAULT, "%s: Invalid Parameter ID: %u", v24, 0x12u);
      }
    }
LABEL_26:
    atomic_store(v14, (unsigned int *)(a1 + 592 + 4 * v13++));
  }
  while (v13 != 34);
  return a1;
}

void sub_1BB404124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (v27[551] < 0) {
    operator delete(*v28);
  }
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v27);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULando>::Factory()
{
  double result = malloc_type_malloc(0x268uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULando>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULando>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULando>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULando>::Construct(ausdk::AUBase *a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v2 = ausdk::AUBase::AUBase(a1, a2, 1, 1);
  *(void *)uint64_t v2 = &unk_1F14AC8E0;
  *((unsigned char *)v2 + 528) = 0;
  *((void *)v2 + 67) = 0x40E5888000000000;
  operator new();
}

void sub_1BB404BBC(_Unwind_Exception *a1)
{
  uint64_t v5 = (void *)v2[21];
  if (v5)
  {
    v2[22] = (uint64_t)v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)v2[18];
  if (v6)
  {
    v2[19] = (uint64_t)v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)v2[14];
  if (v7)
  {
    v2[15] = (uint64_t)v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)v2[11];
  if (v8)
  {
    v2[12] = (uint64_t)v8;
    operator delete(v8);
  }
  CFStringRef v9 = (void *)v2[7];
  if (v9)
  {
    v2[8] = (uint64_t)v9;
    operator delete(v9);
  }
  float v10 = (void *)v2[4];
  if (v10)
  {
    v2[5] = (uint64_t)v10;
    operator delete(v10);
  }
  std::unique_ptr<IR::IRProcessor>::reset[abi:ne180100](v4, 0);
  std::unique_ptr<IR::IRProcessor>::reset[abi:ne180100](v3, 0);
  uint64_t v11 = *v2;
  uint64_t *v2 = 0;
  if (v11) {
    std::default_delete<Crossover2f>::operator()[abi:ne180100](v11);
  }
  MEMORY[0x1C185D370](v2, 0x10A0C4052BE26CALL);
  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUCarter>::Factory()
{
  double result = malloc_type_malloc(0x3B0uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUCarter>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUCarter>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUCarter>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUCarter>::Construct(void *a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *(void *)uint64_t v3 = &unk_1F14C4C88;
  *((unsigned char *)v3 + 528) = 0;
  *((void *)v3 + 67) = 0x40E5888000000000;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 89) = 0;
  ausdk::AUBase::CreateElements((uint64_t)v3);
  unsigned int v4 = 0;
  uint64_t v16 = 0x40E7700000000000;
  long long v17 = xmmword_1BB8727B0;
  long long v18 = xmmword_1BB87A380;
  uint64_t v13 = 0x40E7700000000000;
  long long v14 = xmmword_1BB8727B0;
  long long v15 = xmmword_1BB879EA0;
  while (1)
  {
    uint64_t v5 = a1[15];
    if (v5) {
      LODWORD(v6) = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
    }
    else {
      uint64_t v6 = (a1[13] - a1[12]) >> 3;
    }
    if (v4 >= v6) {
      break;
    }
    uint64_t Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 10), v4);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)Element + 56))(Element, &v16);
    ++v4;
  }
  for (unsigned int i = 0; ; ++i)
  {
    uint64_t v9 = a1[21];
    if (v9) {
      LODWORD(v10) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 24))(v9);
    }
    else {
      uint64_t v10 = (a1[19] - a1[18]) >> 3;
    }
    if (i >= v10) {
      break;
    }
    uint64_t v11 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 16), i);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v11 + 56))(v11, &v13);
  }
  return a1;
}

void sub_1BB404F2C(_Unwind_Exception *a1)
{
  std::unique_ptr<IR::DelayLine>::reset[abi:ne180100](v1 + 89, 0);
  std::unique_ptr<IR::DelayLine>::reset[abi:ne180100](v1 + 68, 0);
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUFIREngine>::Factory()
{
  double result = malloc_type_malloc(0xB80uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUFIREngine>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUFIREngine>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUFIREngine>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

AUFIREngine *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUFIREngine>::Construct(AUFIREngine *a1, OpaqueAudioComponentInstance *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v15, "AUFIREngine_");
  std::string::basic_string[abi:ne180100]<0>(&__p, "firengine_verbose");
  AUJBase::AUJBase((uint64_t)a1, a2, (long long *)v15);
  if (v14 < 0) {
    operator delete(__p);
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  *(void *)a1 = &unk_1F14C0360;
  *((_WORD *)a1 + 316) = 0;
  *((_OWORD *)a1 + 40) = 0u;
  *((_OWORD *)a1 + 41) = 0u;
  *((void *)a1 + 88) = &unk_1F14C0600;
  *((void *)a1 + 96) = &unk_1F14C0620;
  boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::queue((unsigned int *)a1 + 208);
  boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::queue((unsigned int *)a1 + 448);
  *((unsigned char *)a1 + 2753) = 0;
  *((_OWORD *)a1 + 176) = 0u;
  *((_OWORD *)a1 + 177) = 0u;
  *((_OWORD *)a1 + 178) = 0u;
  ausdk::AUBase::CreateElements((uint64_t)a1);
  (*(void (**)(AUFIREngine *, void, void, void, void, double))(*(void *)a1 + 152))(a1, 0, 0, 0, 0, 0.0);
  (*(void (**)(AUFIREngine *, uint64_t, void, void, void, float))(*(void *)a1 + 152))(a1, 1, 0, 0, 0, 20.0);
  (*(void (**)(AUFIREngine *, uint64_t, void, void, void, double))(*(void *)a1 + 152))(a1, 2, 0, 0, 0, 0.0);
  for (unsigned int i = 0; ; unsigned int i = v10 - 2999999)
  {
    int v5 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUFIREngine *)((char *)a1 + 80), 0) + 108);
    if (i >= *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUFIREngine *)((char *)a1 + 128), 0) + 108) * v5) {
      break;
    }
    uint64_t v7 = i + 1000000;
    AUFIREngine::AddParameter(a1, v7, v6);
    uint64_t v8 = (v7 + 1000000);
    AUFIREngine::AddParameter(a1, v8, v9);
    uint64_t v10 = (v8 + 1000000);
    AUFIREngine::AddParameter(a1, v10, v11);
  }
  return a1;
}

void sub_1BB40526C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMatrixPatcher>::Factory()
{
  double result = malloc_type_malloc(0x290uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMatrixPatcher>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMatrixPatcher>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMatrixPatcher>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMatrixPatcher>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *(void *)uint64_t v3 = &unk_1F14BDA68;
  *((void *)v3 + 66) = 0;
  *(void *)(a1 + 536) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  *(_WORD *)(a1 + 544) = 257;
  *(void *)(a1 + 552) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  *(_WORD *)(a1 + 560) = 257;
  *(void *)(a1 + 568) = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  *(_WORD *)(a1 + 576) = 257;
  *(void *)(a1 + 584) = 0x100000001;
  ausdk::AUBase::CreateElements(a1);
  uint64_t v8 = 0x40E5888000000000;
  long long v9 = xmmword_1BB8727B0;
  long long v10 = xmmword_1BB8727C0;
  uint64_t Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)Element + 56))(Element, &v8);
  uint64_t v5 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v5 + 56))(v5, &v8);
  if (*(_DWORD *)(a1 + 588) * *(_DWORD *)(a1 + 584))
  {
    uint64_t v6 = 0;
    do
    {
      (*(void (**)(uint64_t, uint64_t, void, void, void, double))(*(void *)a1 + 152))(a1, v6, 0, 0, 0, 0.0);
      uint64_t v6 = (v6 + 1);
    }
    while (v6 < *(_DWORD *)(a1 + 588) * *(_DWORD *)(a1 + 584));
  }
  return a1;
}

void sub_1BB4055B8(_Unwind_Exception *a1)
{
  CACFDictionary::~CACFDictionary((CACFDictionary *)(v1 + 71));
  CACFArray::~CACFArray((CACFArray *)(v1 + 69));
  CACFArray::~CACFArray((CACFArray *)(v1 + 67));
  std::unique_ptr<MatrixMixerCore>::reset[abi:ne180100](v1 + 66, 0);
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDSPGraph>::Factory()
{
  double result = malloc_type_malloc(0x480uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDSPGraph>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDSPGraph>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDSPGraph>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDSPGraph>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *(void *)uint64_t v3 = &unk_1F14B2918;
  *((unsigned char *)v3 + 528) = 0;
  unsigned int v4 = (std::string *)((char *)v3 + 536);
  *((unsigned char *)v3 + 592) = 0;
  *((unsigned char *)v3 + 600) = 0;
  *((unsigned char *)v3 + 624) = 0;
  uint64_t v5 = (void *)((char *)v3 + 632);
  *((unsigned char *)v3 + 632) = 0;
  *((unsigned char *)v3 + 656) = 0;
  *(_OWORD *)((char *)v3 + 532) = 0u;
  *(_OWORD *)((char *)v3 + 548) = 0u;
  *(void *)((char *)v3 + 561) = 0;
  *((void *)v3 + 83) = 0;
  *((void *)v3 + 85) = 0;
  *((void *)v3 + 84) = 0;
  *(void *)(a1 + 688) = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  *(_WORD *)(a1 + 696) = 257;
  *(void *)(a1 + 704) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  *(_WORD *)(a1 + 712) = 257;
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  *(void *)(a1 + 720) = Mutable;
  *(_WORD *)(a1 + 728) = 257;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(void *)(a1 + 893) = 0;
  *(void *)(a1 + 904) = 0;
  *(void *)(a1 + 920) = 0;
  *(void *)(a1 + 912) = 0;
  *(void *)(a1 + 928) = 850045863;
  *(void *)(a1 + 1008) = 0;
  *(void *)(a1 + 1016) = 0;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(void *)(a1 + 1000) = a1 + 1008;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  if (DSPGraph::ABIVersion(Mutable) != 4)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioChannelLayout buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = -10875;
      _os_log_error_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "throwing %d", buf, 8u);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    ausdk::AUException::AUException(exception, -10875);
  }
  ausdk::AUBase::CreateElements(a1);
  uint64_t v19 = 0x40E5888000000000;
  long long v20 = xmmword_1BB8727B0;
  long long v21 = xmmword_1BB8727C0;
  uint64_t Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)Element + 56))(Element, &v19);
  uint64_t v8 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v8 + 56))(v8, &v19);
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    std::string::operator=(v4, &__str);
  }
  else
  {
    long long v27 = 0u;
    long long v28 = 0u;
    memset(buf, 0, sizeof(buf));
    __t.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    time_t v24 = std::chrono::system_clock::to_time_t(&__t);
    long long v10 = localtime(&v24);
    strftime((char *)buf, 0x40uLL, "%Y%m%d.%H%M%S", v10);
    std::string::basic_string[abi:ne180100]<0>(&v22, (char *)buf);
    if (*(char *)(a1 + 559) < 0) {
      operator delete(v4->__r_.__value_.__l.__data_);
    }
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v22;
    v4->__r_.__value_.__r.__words[2] = v23;
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (*(unsigned char *)(a1 + 656))
  {
    if (getAUDSPGraphLog(void)::onceToken != -1) {
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
    }
    uint64_t v11 = getAUDSPGraphLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a1 + 655) < 0) {
        uint64_t v5 = (void *)*v5;
      }
      *(_DWORD *)AudioChannelLayout buf = 136315394;
      *(void *)&uint8_t buf[4] = v5;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = a1;
      unsigned int v12 = "[%s|%p] constructed";
      uint64_t v13 = v11;
      uint32_t v14 = 22;
      goto LABEL_22;
    }
  }
  else
  {
    if (getAUDSPGraphLog(void)::onceToken != -1) {
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
    }
    uint64_t v15 = getAUDSPGraphLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioChannelLayout buf = 134217984;
      *(void *)&uint8_t buf[4] = a1;
      unsigned int v12 = "[%p] constructed";
      uint64_t v13 = v15;
      uint32_t v14 = 12;
LABEL_22:
      _os_log_impl(&dword_1BB0CE000, v13, OS_LOG_TYPE_DEFAULT, v12, buf, v14);
    }
  }
  return a1;
}

void sub_1BB405B2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  __cxa_free_exception(v19);
  long long v22 = *(const void **)(v16 + 1080);
  if (v22) {
    CFRelease(v22);
  }
  std::string::size_type v23 = *(const void **)(v16 + 1072);
  if (v23) {
    CFRelease(v23);
  }
  time_t v24 = *(const void **)(v16 + 1064);
  if (v24) {
    CFRelease(v24);
  }
  uint64_t v25 = *(const void **)(v16 + 1056);
  if (v25) {
    CFRelease(v25);
  }
  __int16 v26 = *(const void **)(v16 + 1048);
  if (v26) {
    CFRelease(v26);
  }
  long long v27 = *(void **)(v16 + 1024);
  if (v27)
  {
    *(void *)(v16 + 1032) = v27;
    operator delete(v27);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(void **)(v16 + 1008));
  long long v28 = *(const void **)(v16 + 992);
  if (v28) {
    CFRelease(v28);
  }
  std::mutex::~mutex(v18);
  a16 = v16 + 904;
  std::vector<AU::DSPGraph::MetaParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  uint64_t v29 = *(void **)(v16 + 872);
  if (v29)
  {
    *(void *)(v16 + 880) = v29;
    operator delete(v29);
  }
  uint64_t v30 = *(void **)(v16 + 848);
  if (v30)
  {
    *(void *)(v16 + 856) = v30;
    operator delete(v30);
  }
  uint64_t v31 = *(const void **)(v16 + 840);
  if (v31) {
    CFRelease(v31);
  }
  uint64_t v32 = *(const void **)(v16 + 832);
  if (v32) {
    CFRelease(v32);
  }
  long long v33 = *(const void **)(v16 + 824);
  if (v33) {
    CFRelease(v33);
  }
  long long v34 = *(void **)(v16 + 800);
  if (v34)
  {
    *(void *)(v16 + 808) = v34;
    operator delete(v34);
  }
  uint64_t v35 = *(void **)(v16 + 776);
  if (v35)
  {
    *(void *)(v16 + 784) = v35;
    operator delete(v35);
  }
  unint64_t v36 = *(void **)(v16 + 752);
  if (v36)
  {
    *(void *)(v16 + 760) = v36;
    operator delete(v36);
  }
  char v37 = *(std::__shared_weak_count **)(v16 + 744);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  CACFArray::~CACFArray((CACFArray *)(v16 + 720));
  CACFArray::~CACFArray((CACFArray *)(v16 + 704));
  CACFDictionary::~CACFDictionary((CACFDictionary *)(v16 + 688));
  uint64_t v38 = *(const void **)(v16 + 680);
  if (v38) {
    CFRelease(v38);
  }
  uint64_t v39 = *(const void **)(v16 + 672);
  if (v39) {
    CFRelease(v39);
  }
  uint64_t v40 = *(const void **)(v16 + 664);
  if (v40) {
    CFRelease(v40);
  }
  if (*(unsigned char *)(v16 + 656) && *(char *)(v16 + 655) < 0) {
    operator delete(*v20);
  }
  if (*(unsigned char *)(v16 + 624) && *(char *)(v16 + 623) < 0) {
    operator delete(*(void **)(v16 + 600));
  }
  if (*(unsigned char *)(v16 + 592) && *(char *)(v16 + 591) < 0) {
    operator delete(*(void **)(v16 + 568));
  }
  uint64_t v41 = *(void *)(v16 + 560);
  *(void *)(v16 + 560) = 0;
  if (v41) {
    (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
  }
  if (*(char *)(v16 + 559) < 0) {
    operator delete(*v17);
  }
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v16);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDecorrelator>::Factory()
{
  double result = malloc_type_malloc(0x2C0uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDecorrelator>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDecorrelator>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDecorrelator>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDecorrelator>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *(void *)uint64_t v3 = &unk_1F14B6BC8;
  *((unsigned char *)v3 + 528) = 0;
  *(void *)((char *)v3 + 532) = 0;
  *((void *)v3 + 68) = 0x246BB8000;
  *((_DWORD *)v3 + 138) = 1045220557;
  *((void *)v3 + 74) = 0x100000000;
  *((void *)v3 + 75) = 0x3DCCCCCD00000002;
  unsigned int v4 = (char *)v3 + 608;
  *((_OWORD *)v3 + 38) = 0u;
  *((_OWORD *)v3 + 39) = 0u;
  ausdk::AUBase::CreateElements((uint64_t)v3);
  uint64_t Element = ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)Element + 40))(Element, 3);
  uint64_t v6 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v6, 0, 0.2, 0);
  uint64_t v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v7, 1u, 0.0, 0);
  uint64_t v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v8, 2u, 1.0, 0);
  *(_DWORD *)(a1 + 552) = 1045220557;
  *(void *)(a1 + 592) = 0x100000000;
  unint64_t v16 = 0x40D7700000000000;
  *(_OWORD *)std::string __p = xmmword_1BB8727B0;
  long long v18 = xmmword_1BB879EA0;
  uint64_t v9 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, unint64_t *))(*(void *)v9 + 56))(v9, &v16);
  uint64_t v10 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, unint64_t *))(*(void *)v10 + 56))(v10, &v16);
  *(_WORD *)(a1 + 540) = 0;
  float v11 = *(double *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0) + 80);
  *(float *)(a1 + 544) = v11;
  unsigned int v12 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0) + 108);
  if (v12 >= 2) {
    unsigned int v12 = 2;
  }
  *(_DWORD *)(a1 + 548) = v12;
  unint64_t v13 = *(unsigned int *)(a1 + 336);
  unint64_t v16 = __PAIR64__(*(_DWORD *)(a1 + 552), v12);
  std::vector<float>::vector(__p, v13);
  *((void *)&v18 + 1) = *(void *)(a1 + 592);
  *(void *)(a1 + 600) = v16;
  if ((unint64_t *)(a1 + 600) != &v16) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v4, (char *)__p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 2);
  }
  uint32_t v14 = __p[0];
  *(void *)(a1 + 632) = *((void *)&v18 + 1);
  if (v14)
  {
    __p[1] = v14;
    operator delete(v14);
  }
  return a1;
}

void sub_1BB4060B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v15 = *v13;
  if (*v13)
  {
    *((void *)v12 + 77) = v15;
    operator delete(v15);
  }
  ausdk::AUBase::~AUBase(v12);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUTweakaLeakIR>::Factory()
{
  double result = malloc_type_malloc(0x4C0uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUTweakaLeakIR>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUTweakaLeakIR>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUTweakaLeakIR>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUTweakaLeakIR>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = (_OWORD *)(a1 + 540);
  unsigned int v4 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 2, 1);
  *(void *)unsigned int v4 = &unk_1F14B0900;
  *((void *)v4 + 66) = 0;
  *(_DWORD *)((char *)v4 + 535) = 0;
  _OWORD *v3 = xmmword_1BB87A3A0;
  *(void *)((char *)v4 + 556) = 0x3F80000000000100;
  *(_OWORD *)((char *)v4 + 628) = xmmword_1BB8D4A4C;
  *(_OWORD *)((char *)v4 + 644) = unk_1BB8D4A5C;
  *(_OWORD *)((char *)v4 + 660) = xmmword_1BB8D4A6C;
  *(_OWORD *)((char *)v4 + 564) = xmmword_1BB8D4A0C;
  *(_OWORD *)((char *)v4 + 580) = unk_1BB8D4A1C;
  *(_OWORD *)((char *)v4 + 596) = xmmword_1BB8D4A2C;
  *(_OWORD *)((char *)v4 + 612) = unk_1BB8D4A3C;
  *((unsigned char *)v4 + 676) = 1;
  *(_OWORD *)((char *)v3 + 140) = xmmword_1BB87A3B0;
  *((void *)v4 + 87) = 0x800000004;
  *((_DWORD *)v4 + 176) = 5;
  *(_OWORD *)((char *)v3 + 168) = xmmword_1BB87A3C0;
  *(_OWORD *)((char *)v3 + 184) = xmmword_1BB87A3D0;
  *(_OWORD *)((char *)v3 + 200) = xmmword_1BB87A3E0;
  *((_DWORD *)v4 + 189) = 1151500288;
  *((void *)v4 + 95) = 0x3F80000044A28000;
  *((unsigned char *)v4 + 768) = 0;
  *(_OWORD *)((char *)v4 + 840) = 0u;
  *((unsigned char *)v4 + 887) = 0;
  *(_OWORD *)((char *)v4 + 772) = 0u;
  *(_OWORD *)((char *)v4 + 788) = 0u;
  *(_OWORD *)((char *)v4 + 804) = 0u;
  *((_DWORD *)v4 + 205) = 0;
  *(_OWORD *)((char *)v4 + 888) = xmmword_1BB87A3F0;
  *((unsigned char *)v4 + 904) = 0;
  uint64_t v5 = (uint64_t)v4 + 912;
  *((unsigned char *)v4 + 936) = 0;
  *((void *)v4 + 116) = 0;
  *((_OWORD *)v4 + 57) = 0u;
  *((_OWORD *)v4 + 59) = 0u;
  *((_OWORD *)v4 + 60) = 0u;
  *((_OWORD *)v4 + 61) = 0u;
  *((_OWORD *)v4 + 62) = 0u;
  *((_OWORD *)v4 + 63) = 0u;
  *((_OWORD *)v4 + 64) = 0u;
  *(void *)(a1 + 1040) = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  *(_WORD *)(a1 + 1048) = 257;
  *(unsigned char *)(a1 + 1064) = 0;
  *(unsigned char *)(a1 + 1072) = 0;
  *(unsigned char *)(a1 + 1128) = 0;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_DWORD *)(a1 + 1148) = 0;
  *(_OWORD *)(a1 + 1132) = 0u;
  ausdk::AUBase::CreateElements(a1);
  unsigned int v6 = 0;
  uint64_t v47 = 0x40CF400000000000;
  long long v48 = xmmword_1BB8727B0;
  long long v49 = xmmword_1BB8727C0;
  while (1)
  {
    uint64_t v7 = *(void *)(a1 + 120);
    if (v7) {
      LODWORD(v8) = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 24))(v7);
    }
    else {
      uint64_t v8 = (*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 3;
    }
    if (v6 >= v8) {
      break;
    }
    uint64_t Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v6);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)Element + 56))(Element, &v47);
    ++v6;
  }
  for (unsigned int i = 0; ; ++i)
  {
    uint64_t v11 = *(void *)(a1 + 168);
    if (v11) {
      LODWORD(v12) = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 24))(v11);
    }
    else {
      uint64_t v12 = (*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 3;
    }
    if (i >= v12) {
      break;
    }
    uint64_t v13 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), i);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v13 + 56))(v13, &v47);
  }
  uint64_t v14 = ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 40))(v14, 30);
  uint64_t v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v15, 0, 0.0, 0);
  unint64_t v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v16, 0x15u, 0.0, 0);
  long long v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v17, 1u, 0.0, 0);
  long long v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v18, 2u, 512.0, 0);
  uint64_t v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v19, 3u, 192.0, 0);
  long long v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v20, 4u, 500.0, 0);
  long long v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v21, 5u, 1000.0, 0);
  long long v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v22, 6u, 11.0, 0);
  std::string::size_type v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v23, 7u, 0.0, 0);
  time_t v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v24, 8u, 6.0, 0);
  uint64_t v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v25, 9u, -2.0, 0);
  __int16 v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v26, 0xAu, 9.0, 0);
  long long v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v27, 0xBu, -5.0, 0);
  long long v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v28, 0xCu, -25.0, 0);
  uint64_t v29 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v29, 0xDu, 0.01, 0);
  uint64_t v30 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v30, 0xEu, 0.01, 0);
  uint64_t v31 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v31, 0xFu, 1.1, 0);
  uint64_t v32 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v32, 0x10u, 1300.0, 0);
  long long v33 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v33, 0x11u, 1300.0, 0);
  long long v34 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v34, 0x16u, 0.0, 0);
  uint64_t v35 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v35, 0x17u, 70.0, 0);
  unint64_t v36 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v36, 0x12u, 90.0, 0);
  char v37 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v37, 0x13u, 5.0, 0);
  uint64_t v38 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v38, 0x14u, 0.01, 0);
  uint64_t v39 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v39, 0x18u, 0.0, 0);
  uint64_t v40 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v40, 0x19u, 0.0, 0);
  uint64_t v41 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v41, 0x1Au, 0.0, 0);
  char v42 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v42, 0x1Bu, 2.0, 0);
  uint64_t v43 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v43, 0x1Cu, 1.0, 0);
  uint64_t v44 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v44, 0x1Du, 0.0, 0);
  *(unsigned char *)(a1 + 376) = 1;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 512))(a1, 192);
  *(unsigned char *)(a1 + 856) = 0;
  *(_DWORD *)(a1 + 540) = *(_DWORD *)(a1 + 336);
  *(_DWORD *)(a1 + 544) = 16000;
  *(void *)(a1 + 857) = 0x101010101010101;
  *(void *)(a1 + 865) = 0x101010101010101;
  *(void *)(a1 + 873) = 0x101010101010101;
  *(void *)(a1 + 879) = 0x101010101010101;
  *(_WORD *)(a1 + 536) = 0;
  *(unsigned char *)(a1 + 538) = 0;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_DWORD *)(a1 + 908) = 1;
  DspLib::Biquad::Filter::uninitialize((DspLib::Biquad::Filter *)(a1 + 936));
  uint64_t v45 = *(void *)(a1 + 1008);
  *(void *)(a1 + 1008) = 0;
  if (v45) {
    std::default_delete<BiquadInterpolator>::operator()[abi:ne180100](v45);
  }
  *(unsigned char *)(a1 + 887) = 0;
  std::vector<DspLib::Biquad::Section>::resize(v5, 1uLL);
  return a1;
}

void sub_1BB4068E8(_Unwind_Exception *a1)
{
  uint64_t v5 = (void *)v1[127];
  if (v5)
  {
    v1[128] = v5;
    operator delete(v5);
  }
  uint64_t v6 = v1[126];
  v1[126] = 0;
  if (v6) {
    std::default_delete<BiquadInterpolator>::operator()[abi:ne180100](v6);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Biquad::SetupWrapper *)(v1 + 123));
  uint64_t v7 = (void *)v1[120];
  if (v7)
  {
    v1[121] = v7;
    operator delete(v7);
  }
  uint64_t v8 = *v2;
  if (*v2)
  {
    v1[115] = v8;
    operator delete(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)v1[106];
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v10 = (void *)v1[98];
  if (v10)
  {
    v1[99] = v10;
    operator delete(v10);
  }
  uint64_t v11 = *v3;
  _OWORD *v3 = 0;
  if (v11) {
    std::default_delete<AUTweakaLeakIR::AURealTimeDebugLog<AUTweakaLeakIR::TaLIRInternals,256ul>>::operator()[abi:ne180100](v11);
  }
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessLookup,AUDCBlocker>::Factory()
{
  double result = malloc_type_malloc(0x298uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUDCBlocker>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUDCBlocker>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUDCBlocker>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUDCBlocker>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *(void *)uint64_t v3 = &unk_1F14AFCD0;
  unsigned int v4 = (void **)((char *)v3 + 544);
  *((_OWORD *)v3 + 33) = xmmword_1BB87A400;
  *((_OWORD *)v3 + 34) = 0u;
  *((_OWORD *)v3 + 35) = 0u;
  *((void *)v3 + 72) = 0;
  *((void *)v3 + 73) = 1065353216;
  *((void *)v3 + 74) = 0;
  ausdk::AUBase::CreateElements((uint64_t)v3);
  std::vector<BiquadCoefficients>::resize(v4, 1uLL);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(Element, 0, 30.0, 0);
  uint64_t v6 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v6, 1u, 35.0, 0);
  uint64_t v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v7, 2u, 0.0, 0);
  uint64_t v11 = 0x40E5888000000000;
  long long v12 = xmmword_1BB8727B0;
  long long v13 = xmmword_1BB879EA0;
  uint64_t v8 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v8 + 56))(v8, &v11);
  uint64_t v9 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v9 + 56))(v9, &v11);
  return a1;
}

void sub_1BB406BE4(_Unwind_Exception *a1)
{
  unsigned int v4 = (void *)*((void *)v1 + 74);
  if (v4)
  {
    free(v4);
    *((void *)v1 + 74) = 0;
  }
  CADeprecated::CAAutoDelete<ausdk::AUBufferList>::set((void *)v1 + 72, 0);
  uint64_t v5 = *((void *)v1 + 71);
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *((void *)v1 + 71) = 0;
  }
  uint64_t v6 = *v2;
  if (*v2)
  {
    *((void *)v1 + 69) = v6;
    operator delete(v6);
  }
  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessLookup,AUEarPlug>::Factory()
{
  double result = malloc_type_malloc(0x2A0uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUEarPlug>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUEarPlug>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUEarPlug>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessLookup,AUEarPlug>::Construct(void *a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *(void *)uint64_t v3 = &unk_1F14B3BA0;
  *((void *)v3 + 66) = 0;
  *((unsigned char *)v3 + 536) = 0;
  *((_OWORD *)v3 + 36) = 0u;
  *((_OWORD *)v3 + 37) = 0u;
  ausdk::AUBase::CreateElements((uint64_t)v3);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 4), 0);
  ausdk::AUElement::SetParameter(Element, 0, 5.0, 0);
  for (uint64_t i = 0; i != 4; ++i)
  {
    uint64_t v6 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 4), 0);
    ausdk::AUElement::SetParameter(v6, i + 1, 0.0, 0);
    uint64_t v7 = (char *)a1 + 4 * i;
    *((_DWORD *)v7 + 135) = 0;
    *((_DWORD *)v7 + 139) = 1065353216;
  }
  uint64_t v8 = (void *)a1[74];
  if (v8)
  {
    free(v8);
    a1[74] = 0;
  }
  uint64_t v9 = (void *)a1[75];
  if (v9)
  {
    free(v9);
    a1[75] = 0;
  }
  uint64_t v13 = 0x40E5888000000000;
  long long v14 = xmmword_1BB8727B0;
  long long v15 = xmmword_1BB8727C0;
  uint64_t v10 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 10), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v10 + 56))(v10, &v13);
  uint64_t v11 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 16), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v11 + 56))(v11, &v13);
  return a1;
}

void sub_1BB406E78(_Unwind_Exception *a1)
{
  uint64_t v3 = (void *)*((void *)v1 + 75);
  if (v3)
  {
    free(v3);
    *((void *)v1 + 75) = 0;
  }
  unsigned int v4 = (void *)*((void *)v1 + 74);
  if (v4)
  {
    free(v4);
    *((void *)v1 + 74) = 0;
  }
  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AURotationShading>::Factory()
{
  double result = malloc_type_malloc(0x2C8uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AURotationShading>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AURotationShading>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AURotationShading>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AURotationShading>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *(void *)uint64_t v3 = &unk_1F14AFF40;
  *((_DWORD *)v3 + 132) = 1;
  unsigned int v4 = (void **)((char *)v3 + 544);
  *(_OWORD *)((char *)v3 + 532) = 0u;
  *(_OWORD *)((char *)v3 + 548) = 0u;
  *(_OWORD *)((char *)v3 + 564) = 0u;
  *(_OWORD *)((char *)v3 + 580) = 0u;
  *(void *)((char *)v3 + 596) = 1;
  *((_WORD *)v3 + 302) = 1;
  *((unsigned char *)v3 + 606) = 0;
  ausdk::AUBase::CreateElements((uint64_t)v3);
  std::vector<BiquadCoefficients>::resize(v4, 2uLL);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(Element, 0, 1.0, 0);
  uint64_t v6 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v6, 1u, 1.0, 0);
  uint64_t v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v7, 2u, 4000.0, 0);
  uint64_t v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v8, 3u, 4000.0, 0);
  uint64_t v15 = 0x40E5888000000000;
  long long v16 = xmmword_1BB8727B0;
  long long v17 = xmmword_1BB879EA0;
  uint64_t v9 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v9 + 56))(v9, &v15);
  uint64_t v12 = 0x40E5888000000000;
  long long v13 = xmmword_1BB8727B0;
  long long v14 = xmmword_1BB879E90;
  uint64_t v10 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v10 + 56))(v10, &v12);
  *(void *)(a1 + 640) = 0;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  return a1;
}

void sub_1BB40711C(_Unwind_Exception *a1)
{
  unsigned int v4 = (void *)*((void *)v1 + 71);
  if (v4)
  {
    *((void *)v1 + 72) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *v2;
  if (*v2)
  {
    *((void *)v1 + 69) = v5;
    operator delete(v5);
  }
  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUReferenceSignalMixer>::Factory()
{
  double result = malloc_type_malloc(0x2E8uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUReferenceSignalMixer>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUReferenceSignalMixer>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUReferenceSignalMixer>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

ausdk::AUBase *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUReferenceSignalMixer>::Construct(ausdk::AUBase *a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = ausdk::AUBase::AUBase(a1, a2, 1, 1);
  *(void *)uint64_t v3 = &unk_1F14AC300;
  *((unsigned char *)v3 + 528) = 0;
  *((_DWORD *)v3 + 133) = 2;
  *((unsigned char *)v3 + 536) = 0;
  *((unsigned char *)v3 + 560) = 0;
  *((_DWORD *)v3 + 142) = 2;
  *((unsigned char *)v3 + 576) = 0;
  *((unsigned char *)v3 + 600) = 0;
  *((void *)v3 + 76) = 1;
  *((void *)v3 + 77) = &unk_1F14AC550;
  *((_OWORD *)v3 + 39) = 0u;
  *((_OWORD *)v3 + 40) = 0u;
  *((_DWORD *)v3 + 164) = 1065353216;
  *(_OWORD *)((char *)v3 + 664) = 0u;
  uint64_t Element = ausdk::AUScope::GetElement((ausdk::AUBase *)((char *)v3 + 32), 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)Element + 40))(Element, 1);
  AUReferenceSignalMixer::SetParameter((uint64_t)a1, 1.0);
  {
    AU::ReferenceSignalMixer::getLog(void)::gLog = (uint64_t)os_log_create("com.apple.coreaudio", "AUReferenceSignalMixer");
  }
  uint64_t v5 = AU::ReferenceSignalMixer::getLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)AU::ReferenceSignalMixer::getLog(void)::gLog, OS_LOG_TYPE_INFO))
  {
    int v7 = 134217984;
    uint64_t v8 = a1;
    _os_log_impl(&dword_1BB0CE000, v5, OS_LOG_TYPE_INFO, "[%p] created", (uint8_t *)&v7, 0xCu);
  }
  return a1;
}

void sub_1BB4073B8(_Unwind_Exception *a1)
{
  unsigned int v4 = *(const void **)(v1 + 672);
  if (v4) {
    CFRelease(v4);
  }
  std::__hash_table<std::__hash_value_type<AU::ReferenceSignalMixer::Orientation,std::shared_ptr<AUReferenceSignalMixer::MatrixKernel>>,std::__unordered_map_hasher<AU::ReferenceSignalMixer::Orientation,std::__hash_value_type<AU::ReferenceSignalMixer::Orientation,std::shared_ptr<AUReferenceSignalMixer::MatrixKernel>>,std::hash<AU::ReferenceSignalMixer::Orientation>,std::equal_to<AU::ReferenceSignalMixer::Orientation>,true>,std::__unordered_map_equal<AU::ReferenceSignalMixer::Orientation,std::__hash_value_type<AU::ReferenceSignalMixer::Orientation,std::shared_ptr<AUReferenceSignalMixer::MatrixKernel>>,std::equal_to<AU::ReferenceSignalMixer::Orientation>,std::hash<AU::ReferenceSignalMixer::Orientation>,true>,std::allocator<std::__hash_value_type<AU::ReferenceSignalMixer::Orientation,std::shared_ptr<AUReferenceSignalMixer::MatrixKernel>>>>::~__hash_table(v2);
  if (*(unsigned char *)(v1 + 600))
  {
    uint64_t v5 = *(void **)(v1 + 576);
    if (v5)
    {
      *(void *)(v1 + 584) = v5;
      operator delete(v5);
    }
  }
  if (*(unsigned char *)(v1 + 560))
  {
    uint64_t v6 = *(void **)(v1 + 536);
    if (v6)
    {
      *(void *)(v1 + 544) = v6;
      operator delete(v6);
    }
  }
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v1);
  _Unwind_Resume(a1);
}

void sub_1BB407410(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1BB407408);
}

void *ausdk::APFactory<ausdk::AUBaseProcessLookup,AUMNBandEQ>::Factory()
{
  double result = malloc_type_malloc(0x348uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUMNBandEQ>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUMNBandEQ>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUMNBandEQ>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUMNBandEQ>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *(void *)uint64_t v3 = &unk_1F14BD6B8;
  unsigned int v4 = (ausdk::AUBase *)((char *)v3 + 584);
  *(_OWORD *)((char *)v3 + 600) = 0u;
  *((_DWORD *)v3 + 132) = 1;
  uint64_t v5 = (void **)((char *)v3 + 536);
  *((_OWORD *)v3 + 40) = 0u;
  *((_OWORD *)v3 + 41) = 0u;
  *((_OWORD *)v3 + 42) = 0u;
  *((_OWORD *)v3 + 43) = 0u;
  *((_OWORD *)v3 + 44) = 0u;
  *((_OWORD *)v3 + 45) = 0u;
  *((_OWORD *)v3 + 46) = 0u;
  *((_OWORD *)v3 + 47) = 0u;
  *((void *)v3 + 96) = 0;
  *(_OWORD *)((char *)v3 + 532) = 0u;
  *(_OWORD *)((char *)v3 + 548) = 0u;
  *(_OWORD *)((char *)v3 + 564) = 0u;
  *(_OWORD *)((char *)v3 + 580) = 0u;
  *(_OWORD *)((char *)v3 + 616) = 0u;
  *((_DWORD *)v3 + 158) = 0;
  ausdk::AUBase::CreateElements((uint64_t)v3);
  std::vector<BiquadCoefficients>::resize(v5, 0x80uLL);
  for (unsigned int i = 0; i != 8; ++i)
  {
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, i);
    ausdk::AUElement::SetParameter(Element, 0, 0.0, 0);
    for (unsigned int j = 0; j != 16; unsigned int j = v13 - 4999)
    {
      double v9 = *(double *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0) + 80) * 0.5;
      if (v9 >= 10000.0) {
        double v10 = 250.0;
      }
      else {
        double v10 = v9 / 40.0;
      }
      double v11 = pow(v10, (double)j / 15.0);
      uint64_t v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, i);
      unsigned int v13 = j + 1000;
      ausdk::AUElement::SetParameter(v12, v13, 1.0, 0);
      long long v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, i);
      v13 += 1000;
      ausdk::AUElement::SetParameter(v14, v13, 0.0, 0);
      uint64_t v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, i);
      float v16 = v11 * 40.0;
      v13 += 1000;
      ausdk::AUElement::SetParameter(v15, v13, v16, 0);
      long long v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, i);
      v13 += 1000;
      ausdk::AUElement::SetParameter(v17, v13, 0.0, 0);
      long long v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, i);
      v13 += 1000;
      ausdk::AUElement::SetParameter(v18, v13, 0.5, 0);
    }
  }
  uint64_t v22 = 0x40E5888000000000;
  long long v23 = xmmword_1BB8727B0;
  long long v24 = xmmword_1BB87A410;
  uint64_t v19 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v19 + 56))(v19, &v22);
  uint64_t v20 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v20 + 56))(v20, &v22);
  return a1;
}

void sub_1BB40775C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v5 = v2 + 80;
  uint64_t v6 = v2[83];
  if (v6)
  {
    v2[84] = v6;
    operator delete(v6);
  }
  int v7 = *v5;
  if (*v5)
  {
    v2[81] = v7;
    operator delete(v7);
  }
  std::vector<std::unique_ptr<ausdk::AUElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  uint64_t v8 = v2[70];
  if (v8)
  {
    v2[71] = v8;
    operator delete(v8);
  }
  double v9 = *v3;
  if (*v3)
  {
    v2[68] = v9;
    operator delete(v9);
  }
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v2);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessLookup,AUVariableEQV2>::Factory()
{
  double result = malloc_type_malloc(0x568uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUVariableEQV2>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUVariableEQV2>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUVariableEQV2>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessLookup,AUVariableEQV2>::Construct(void *a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = a1 + 67;
  unsigned int v4 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *(void *)unsigned int v4 = &unk_1F14BC718;
  *((unsigned char *)v4 + 528) = 0;
  _OWORD *v3 = xmmword_1BB873AA0;
  *((_DWORD *)v4 + 138) = 0;
  *(_OWORD *)((char *)v3 + 20) = xmmword_1BB873CD0;
  *((_WORD *)v4 + 286) = 256;
  *(_OWORD *)((char *)v4 + 574) = 0u;
  *((_WORD *)v4 + 295) = 0;
  *((void *)v4 + 76) = 0;
  *((void *)v4 + 78) = 0;
  *((void *)v4 + 77) = 0;
  *((_DWORD *)v4 + 158) = 0;
  *((_OWORD *)v4 + 40) = 0u;
  *((_OWORD *)v4 + 41) = 0u;
  uint64_t v5 = 85;
  *((unsigned char *)v4 + 672) = 0;
  do
  {
    uint64_t v6 = &a1[v5];
    *uint64_t v6 = 0;
    v6[1] = 0;
    v6[3] = 0;
    v6[4] = 0;
    _DWORD v6[2] = 0x3FF0000000000000;
    v5 += 5;
  }
  while (v6 + 5 != (void *)((char *)v4 + 1000));
  uint64_t v7 = 125;
  do
  {
    uint64_t v8 = &a1[v7];
    *uint64_t v8 = 0;
    v8[1] = 0;
    void v8[3] = 0;
    v8[4] = 0;
    v8[2] = 0x3FF0000000000000;
    v7 += 5;
  }
  while (v8 + 5 != a1 + 165);
  ausdk::AUBase::CreateElements((uint64_t)a1);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 4), 0);
  ausdk::AUElement::SetParameter(Element, 1u, 0.2, 0);
  double v10 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 4), 0);
  ausdk::AUElement::SetParameter(v10, 2u, 0.5, 0);
  double v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 4), 0);
  ausdk::AUElement::SetParameter(v11, 3u, 0.8, 0);
  uint64_t v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 4), 0);
  ausdk::AUElement::SetParameter(v12, 4u, 0.9, 0);
  unsigned int v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 4), 0);
  ausdk::AUElement::SetParameter(v13, 5u, 1.0, 0);
  long long v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 4), 0);
  ausdk::AUElement::SetParameter(v14, 7u, 0.0, 0);
  uint64_t v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 4), 0);
  ausdk::AUElement::SetParameter(v15, 6u, 40.0, 0);
  for (unsigned int i = 0; ; ++i)
  {
    uint64_t v17 = a1[83];
    if (v17) {
      LODWORD(v18) = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 24))(v17);
    }
    else {
      uint64_t v18 = (a1[81] - a1[80]) >> 3;
    }
    if (i >= v18) {
      break;
    }
    uint64_t v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 78), i);
    ausdk::AUElement::SetParameter(v19, 0, 0.0, 0);
    for (unsigned int j = 3000; j != 3008; ++j)
    {
      long long v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 78), i);
      ausdk::AUElement::SetParameter(v21, j - 1000, 0.0, 0);
      uint64_t v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 78), i);
      ausdk::AUElement::SetParameter(v22, j, 1000.0, 0);
      long long v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 78), i);
      ausdk::AUElement::SetParameter(v23, j + 1000, 0.0, 0);
      long long v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 78), i);
      ausdk::AUElement::SetParameter(v24, j + 2000, 0.5, 0);
      uint64_t v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 78), i);
      ausdk::AUElement::SetParameter(v25, j - 2000, 1.0, 0);
    }
  }
  uint64_t v29 = 0x40BF400000000000;
  long long v30 = xmmword_1BB8727B0;
  long long v31 = xmmword_1BB8727C0;
  uint64_t v26 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 10), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v26 + 56))(v26, &v29);
  uint64_t v27 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 16), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v27 + 56))(v27, &v29);
  return a1;
}

void sub_1BB407C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::unique_ptr<ausdk::AUElement>>::__destroy_vector::operator()[abi:ne180100](&a9);
  CADeprecated::CAAutoDelete<ausdk::AUBufferList>::set((void *)v9 + 77, 0);
  CADeprecated::CAAutoDelete<ausdk::AUBufferList>::set(v10, 0);
  uint64_t v12 = *((void *)v9 + 73);
  if (v12)
  {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    *((void *)v9 + 73) = 0;
  }
  uint64_t v13 = *((void *)v9 + 72);
  if (v13)
  {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    *((void *)v9 + 72) = 0;
  }
  ausdk::AUBase::~AUBase(v9);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUAnomalyDetection>::Factory()
{
  double result = malloc_type_malloc(0x2A0uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUAnomalyDetection>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUAnomalyDetection>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUAnomalyDetection>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUAnomalyDetection>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 3, 1);
  *(void *)uint64_t v3 = &unk_1F14ADA48;
  *((unsigned char *)v3 + 528) = 0;
  *(_OWORD *)((char *)v3 + 532) = xmmword_1BB87A420;
  *(void *)((char *)v3 + 548) = 0x40C0000000000001;
  *((_DWORD *)v3 + 139) = 0;
  *((void *)v3 + 70) = 1065353216;
  *((_DWORD *)v3 + 142) = 0;
  *(void *)((char *)v3 + 572) = 1056964608;
  *((void *)v3 + 73) = 0;
  *((void *)v3 + 75) = 0;
  *((void *)v3 + 74) = 0;
  ausdk::AUBase::CreateElements((uint64_t)v3);
  uint64_t v20 = 0x40D7700000000000;
  long long v21 = xmmword_1BB8727B0;
  long long v22 = xmmword_1BB8727C0;
  uint64_t Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)Element + 56))(Element, &v20);
  uint64_t v5 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 1u);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v5 + 56))(v5, &v20);
  uint64_t v17 = 0x40D7700000000000;
  long long v18 = xmmword_1BB8727B0;
  long long v19 = xmmword_1BB8727C0;
  uint64_t v6 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 2u);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 56))(v6, &v17);
  uint64_t v7 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 56))(v7, &v17);
  uint64_t v8 = ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 40))(v8, 7);
  double v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v9, 0, 6.0, 0);
  double v10 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v10, 1u, 0.0, 0);
  double v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v11, 2u, 1.0, 0);
  uint64_t v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v12, 3u, 1.0, 0);
  uint64_t v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v13, 4u, 0.0, 0);
  long long v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v14, 5u, 0.5, 0);
  uint64_t v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v15, 6u, 0.0, 0);
  return a1;
}

void sub_1BB40800C(_Unwind_Exception *a1)
{
  unsigned int v4 = *v2;
  if (*v2)
  {
    *((void *)v1 + 74) = v4;
    operator delete(v4);
  }
  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDynamicDuckerV2>::Factory()
{
  double result = malloc_type_malloc(0x5B0uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDynamicDuckerV2>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDynamicDuckerV2>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDynamicDuckerV2>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 5, 2);
  *(void *)uint64_t v3 = &unk_1F14B5B48;
  *((_WORD *)v3 + 264) = 256;
  *((unsigned char *)v3 + 530) = 0;
  *((_DWORD *)v3 + 133) = 0;
  *((void *)v3 + 67) = 0x100000001;
  *((unsigned char *)v3 + 544) = 0;
  *((unsigned char *)v3 + 648) = 0;
  *((unsigned char *)v3 + 656) = 0;
  *((unsigned char *)v3 + 760) = 0;
  *((unsigned char *)v3 + 768) = 0;
  *((unsigned char *)v3 + 872) = 0;
  *((unsigned char *)v3 + 880) = 0;
  *((unsigned char *)v3 + 984) = 0;
  __asm { FMOV            V0.4S, #1.0 }
  *((_OWORD *)v3 + 62) = _Q0;
  __asm { FMOV            V0.2S, #1.0 }
  *((void *)v3 + 126) = _Q0;
  *(_OWORD *)((char *)v3 + 1016) = 0u;
  *((_DWORD *)v3 + 258) = 0;
  *(_OWORD *)((char *)v3 + 1036) = xmmword_1BB87A430;
  *((_DWORD *)v3 + 263) = 1048576000;
  *((void *)v3 + 132) = 0x3DCCCCCD00000000;
  *((void *)v3 + 135) = 0;
  *((void *)v3 + 133) = 0;
  *(void *)((char *)v3 + 1069) = 0;
  *((_DWORD *)v3 + 272) = -1018691584;
  *((void *)v3 + 139) = 0;
  *((unsigned char *)v3 + 1120) = 0;
  *((unsigned char *)v3 + 1144) = 0;
  *((void *)v3 + 144) = 0;
  *((unsigned char *)v3 + 1160) = 0;
  *((unsigned char *)v3 + 1184) = 0;
  *((void *)v3 + 149) = 0;
  *((unsigned char *)v3 + 1200) = 0;
  *((unsigned char *)v3 + 1224) = 0;
  *((void *)v3 + 154) = 0;
  *((unsigned char *)v3 + 1240) = 0;
  *((unsigned char *)v3 + 1264) = 0;
  *((void *)v3 + 159) = 0;
  *((unsigned char *)v3 + 1280) = 0;
  *((unsigned char *)v3 + 1304) = 0;
  *((unsigned char *)v3 + 1312) = 0;
  *((unsigned char *)v3 + 1320) = 0;
  *((unsigned char *)v3 + 1328) = 0;
  *((unsigned char *)v3 + 1352) = 0;
  *((unsigned char *)v3 + 1360) = 0;
  *((unsigned char *)v3 + 1384) = 0;
  *((unsigned char *)v3 + 1108) = 0;
  *(_OWORD *)((char *)v3 + 1092) = 0u;
  ausdk::AUBase::CreateElements((uint64_t)v3);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  (*(void (**)(ausdk::AUElement *, uint64_t))(*(void *)Element + 40))(Element, 26);
  ausdk::AUElement::SetParameter(Element, 0, -18.0, 0);
  ausdk::AUElement::SetParameter(Element, 1u, -18.0, 0);
  ausdk::AUElement::SetParameter(Element, 2u, -18.0, 0);
  ausdk::AUElement::SetParameter(Element, 3u, -40.0, 0);
  ausdk::AUElement::SetParameter(Element, 4u, -40.0, 0);
  ausdk::AUElement::SetParameter(Element, 5u, -40.0, 0);
  ausdk::AUElement::SetParameter(Element, 6u, -45.0, 0);
  ausdk::AUElement::SetParameter(Element, 7u, -50.0, 0);
  ausdk::AUElement::SetParameter(Element, 8u, -18.0, 0);
  ausdk::AUElement::SetParameter(Element, 9u, 0.0, 0);
  ausdk::AUElement::SetParameter(Element, 0xAu, 0.0, 0);
  ausdk::AUElement::SetParameter(Element, 0xBu, 0.0, 0);
  ausdk::AUElement::SetParameter(Element, 0xCu, -96.0, 0);
  ausdk::AUElement::SetParameter(Element, 0xDu, 0.25, 0);
  ausdk::AUElement::SetParameter(Element, 0xEu, 0.1, 0);
  ausdk::AUElement::SetParameter(Element, 0xFu, 0.0, 0);
  ausdk::AUElement::SetParameter(Element, 0x10u, 0.0, 0);
  ausdk::AUElement::SetParameter(Element, 0x13u, 0.5, 0);
  ausdk::AUElement::SetParameter(Element, 0x12u, 0.0, 0);
  ausdk::AUElement::SetParameter(Element, 0x11u, 0.0, 0);
  ausdk::AUElement::SetParameter(Element, 0x14u, -200.0, 0);
  ausdk::AUElement::SetParameter(Element, 0x15u, 0.0, 0);
  ausdk::AUElement::SetParameter(Element, 0x16u, -200.0, 0);
  ausdk::AUElement::SetParameter(Element, 0x17u, 0.0, 0);
  ausdk::AUElement::SetParameter(Element, 0x18u, 0.0, 0);
  ausdk::AUElement::SetParameter(Element, 0x19u, 0.0, 0);
  unsigned int v10 = 0;
  v15[0] = xmmword_1BB8A91A8;
  v15[1] = unk_1BB8A91B8;
  uint64_t v16 = 32;
  do
  {
    uint64_t v11 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v10);
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v11 + 56))(v11, v15);
    ++v10;
  }
  while (v10 != 5);
  uint64_t v12 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  for (char i = 1; ; char i = 0)
  {
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v12 + 56))(v12, v15);
    if ((i & 1) == 0) {
      break;
    }
    uint64_t v12 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 1u);
  }
  return a1;
}

void sub_1BB40852C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v10 + 1384))
  {
    uint64_t v11 = *(void **)(v10 + 1360);
    if (v11)
    {
      *(void *)(v10 + 1368) = v11;
      operator delete(v11);
    }
  }
  if (*(unsigned char *)(v10 + 1352))
  {
    uint64_t v12 = *(void **)(v10 + 1328);
    if (v12)
    {
      *(void *)(v10 + 1336) = v12;
      operator delete(v12);
    }
  }
  std::__optional_destruct_base<CA::AudioBuffers,false>::~__optional_destruct_base[abi:ne180100](v10 + 1312);
  if (*(unsigned char *)(v10 + 1304))
  {
    uint64_t v13 = *(void **)(v10 + 1280);
    if (v13)
    {
      *(void *)(v10 + 1288) = v13;
      operator delete(v13);
    }
  }
  std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>::reset[abi:ne180100]((OpaqueAudioConverter **)(v10 + 1272), 0);
  if (*(unsigned char *)(v10 + 1264))
  {
    long long v14 = *(void **)(v10 + 1240);
    if (v14)
    {
      *(void *)(v10 + 1248) = v14;
      operator delete(v14);
    }
  }
  std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>::reset[abi:ne180100]((OpaqueAudioConverter **)(v10 + 1232), 0);
  if (*(unsigned char *)(v10 + 1224))
  {
    uint64_t v15 = *(void **)(v10 + 1200);
    if (v15)
    {
      *(void *)(v10 + 1208) = v15;
      operator delete(v15);
    }
  }
  std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>::reset[abi:ne180100]((OpaqueAudioConverter **)(v10 + 1192), 0);
  if (*(unsigned char *)(v10 + 1184))
  {
    uint64_t v16 = *(void **)(v10 + 1160);
    if (v16)
    {
      *(void *)(v10 + 1168) = v16;
      operator delete(v16);
    }
  }
  std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>::reset[abi:ne180100]((OpaqueAudioConverter **)(v10 + 1152), 0);
  if (*(unsigned char *)(v10 + 1144))
  {
    uint64_t v17 = *(void **)(v10 + 1120);
    if (v17)
    {
      *(void *)(v10 + 1128) = v17;
      operator delete(v17);
    }
  }
  std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>::reset[abi:ne180100]((OpaqueAudioConverter **)(v10 + 1112), 0);
  std::__optional_destruct_base<AUDynamicDuckerV2::PowerHistoryWindow,false>::~__optional_destruct_base[abi:ne180100](v10 + 880);
  std::__optional_destruct_base<AUDynamicDuckerV2::PowerHistoryWindow,false>::~__optional_destruct_base[abi:ne180100](v10 + 768);
  std::__optional_destruct_base<AUDynamicDuckerV2::PowerHistoryWindow,false>::~__optional_destruct_base[abi:ne180100](v10 + 656);
  std::__optional_destruct_base<AUDynamicDuckerV2::PowerHistoryWindow,false>::~__optional_destruct_base[abi:ne180100](v10 + 544);
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v10);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDynamicDucker>::Factory()
{
  double result = malloc_type_malloc(0x368uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDynamicDucker>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDynamicDucker>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDynamicDucker>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDynamicDucker>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 5, 2);
  *(void *)uint64_t v3 = &unk_1F14C5938;
  *((_DWORD *)v3 + 132) = 1;
  *(void *)((char *)v3 + 532) = 0;
  *((unsigned char *)v3 + 540) = 0;
  *((void *)v3 + 70) = 0;
  *((_DWORD *)v3 + 142) = 0;
  *((void *)v3 + 85) = 0;
  *((void *)v3 + 84) = 0;
  *((void *)v3 + 94) = 0;
  *((void *)v3 + 72) = 0;
  *((void *)v3 + 74) = 0;
  *((void *)v3 + 73) = 0;
  *((_DWORD *)v3 + 150) = 0;
  *((void *)v3 + 76) = 0;
  *((void *)v3 + 78) = 0;
  *((void *)v3 + 77) = 0;
  *((_DWORD *)v3 + 158) = 0;
  *((void *)v3 + 82) = 0;
  *((_DWORD *)v3 + 166) = 0;
  *((void *)v3 + 80) = 0;
  *((void *)v3 + 81) = 0;
  *((_WORD *)v3 + 380) = 1;
  *((unsigned char *)v3 + 762) = 0;
  *((_DWORD *)v3 + 191) = 0;
  *((void *)v3 + 96) = 0x3DCCCCCD3E800000;
  *((void *)v3 + 97) = 0;
  *((_DWORD *)v3 + 196) = 0;
  *((_DWORD *)v3 + 198) = 0;
  ausdk::AUBase::CreateElements((uint64_t)v3);
  unsigned int v4 = 0;
  uint64_t v39 = 0x40E5888000000000;
  long long v40 = xmmword_1BB8727B0;
  long long v41 = xmmword_1BB8727C0;
  do
  {
    uint64_t Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v4);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)Element + 56))(Element, &v39);
    ++v4;
  }
  while (v4 != 5);
  unsigned int v6 = 0;
  char v7 = 1;
  do
  {
    char v8 = v7;
    uint64_t v9 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), v6);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v9 + 56))(v9, &v39);
    char v7 = 0;
    unsigned int v6 = 1;
  }
  while ((v8 & 1) != 0);
  *(_DWORD *)(a1 + 552) = 1065353216;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(a1 + 544) = _D0;
  uint64_t v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v15, 0, -18.0, 0);
  uint64_t v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v16, 1u, -18.0, 0);
  uint64_t v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v17, 2u, -18.0, 0);
  long long v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v18, 3u, -40.0, 0);
  long long v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v19, 4u, -40.0, 0);
  uint64_t v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v20, 5u, -40.0, 0);
  long long v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v21, 6u, -45.0, 0);
  long long v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v22, 7u, -50.0, 0);
  long long v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v23, 8u, -18.0, 0);
  long long v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v24, 9u, 0.0, 0);
  uint64_t v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v25, 0xAu, 0.0, 0);
  uint64_t v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v26, 0xBu, 0.0, 0);
  uint64_t v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v27, 0xCu, -96.0, 0);
  long long v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v28, 0xDu, 0.25, 0);
  uint64_t v29 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v29, 0xEu, 0.1, 0);
  long long v30 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v30, 0xFu, 0.0, 0);
  long long v31 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v31, 0x10u, 0.0, 0);
  uint64_t v32 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v32, 0x13u, 0.5, 0);
  long long v33 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v33, 0x12u, 0.0, 0);
  long long v34 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v34, 0x11u, 0.0, 0);
  uint64_t v35 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v35, 0x14u, -200.0, 0);
  unint64_t v36 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v36, 0x15u, 0.0, 0);
  char v37 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v37, 0x16u, -200.0, 0);
  return a1;
}

void sub_1BB408B70(_Unwind_Exception *a1)
{
  CDSPSplitComplex::~CDSPSplitComplex((CDSPSplitComplex *)(v1 + 656));
  CDSPSplitComplex::~CDSPSplitComplex((CDSPSplitComplex *)(v1 + 624));
  CDSPSplitComplex::~CDSPSplitComplex((CDSPSplitComplex *)(v1 + 592));
  CDSPSplitComplex::~CDSPSplitComplex((CDSPSplitComplex *)(v1 + 560));
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMultiBandDynamicsProcessorV2>::Factory()
{
  double result = malloc_type_malloc(0x620uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMultiBandDynamicsProcessorV2>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMultiBandDynamicsProcessorV2>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMultiBandDynamicsProcessorV2>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMultiBandDynamicsProcessorV2>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 2, 1);
  *(void *)uint64_t v3 = &unk_1F14C7338;
  *((_OWORD *)v3 + 33) = xmmword_1BB873AA0;
  *((void *)v3 + 68) = 0x100000000;
  *((_DWORD *)v3 + 138) = 0;
  *((void *)v3 + 107) = 2;
  *((_DWORD *)v3 + 216) = 0;
  unsigned int v4 = (void *)((char *)v3 + 888);
  *((void *)v3 + 149) = 0;
  *((void *)v3 + 148) = 0;
  *(_OWORD *)((char *)v3 + 888) = 0u;
  *(_OWORD *)((char *)v3 + 904) = 0u;
  *(_OWORD *)((char *)v3 + 920) = 0u;
  *(_OWORD *)((char *)v3 + 936) = 0u;
  *(_OWORD *)((char *)v3 + 952) = 0u;
  *(_OWORD *)((char *)v3 + 968) = 0u;
  *(_OWORD *)((char *)v3 + 984) = 0u;
  *(_OWORD *)((char *)v3 + 1000) = 0u;
  *(_OWORD *)((char *)v3 + 1016) = 0u;
  *(_OWORD *)((char *)v3 + 1032) = 0u;
  *(_OWORD *)((char *)v3 + 1048) = 0u;
  *(_OWORD *)((char *)v3 + 1064) = 0u;
  *(_OWORD *)((char *)v3 + 1080) = 0u;
  *(_OWORD *)((char *)v3 + 1096) = 0u;
  *(_OWORD *)((char *)v3 + 1112) = 0u;
  *(_OWORD *)((char *)v3 + 1128) = 0u;
  *(_OWORD *)((char *)v3 + 1144) = 0u;
  *((_DWORD *)v3 + 290) = 0;
  *(_OWORD *)((char *)v3 + 1164) = xmmword_1BB87A440;
  *((void *)v3 + 154) = 0;
  *((void *)v3 + 153) = 0;
  *((_DWORD *)v3 + 304) = 0;
  *((_OWORD *)v3 + 75) = xmmword_1BB87A370;
  *((unsigned char *)v3 + 1240) = 0;
  *((_DWORD *)v3 + 318) = 4;
  *((unsigned char *)v3 + 1276) = 1;
  *((_WORD *)v3 + 656) = 0;
  *((void *)v3 + 165) = 0;
  *(_OWORD *)((char *)v3 + 1352) = 0u;
  *(_OWORD *)((char *)v3 + 1368) = 0u;
  *(_OWORD *)((char *)v3 + 1384) = 0u;
  *(_OWORD *)((char *)v3 + 1400) = 0u;
  *(_OWORD *)((char *)v3 + 1416) = 0u;
  *(_OWORD *)((char *)v3 + 1432) = 0u;
  *(_OWORD *)((char *)v3 + 1448) = 0u;
  *(_OWORD *)((char *)v3 + 1464) = 0u;
  *(_OWORD *)((char *)v3 + 1480) = 0u;
  *(_OWORD *)((char *)v3 + 1336) = 0u;
  *((_DWORD *)v3 + 332) = 0;
  *((void *)v3 + 187) = 0;
  v47[0] = 0;
  v47[1] = 0;
  int v48 = 0;
  ausdk::ComponentBase::GetComponentDescription((ausdk::ComponentBase *)v47, *((OpaqueAudioComponentInstance **)v3 + 1));
  *(unsigned char *)(a1 + 1314) = HIDWORD(v47[0]) == 1835298866;
  ausdk::AUBase::CreateElements(a1);
  *(void *)AudioComponentDescription inDesc = 0x40E5888000000000;
  *(_OWORD *)&inDesc[8] = xmmword_1BB8727B0;
  long long v50 = xmmword_1BB8727C0;
  uint64_t Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  for (char i = 1; ; char i = 0)
  {
    (*(void (**)(uint64_t, unsigned char *))(*(void *)Element + 56))(Element, inDesc);
    if ((i & 1) == 0) {
      break;
    }
    uint64_t Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 1u);
  }
  uint64_t v7 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v7 + 56))(v7, inDesc);
  *(void *)(a1 + 1244) = 0x400000001;
  *(_DWORD *)(a1 + 868) = 0;
  *(void *)(a1 + 872) = 0x3F80000000000000;
  *(void *)(a1 + 880) = 0;
  CADeprecated::CAAutoDelete<ausdk::AUBufferList>::set(v4, 0);
  CADeprecated::CAAutoDelete<ausdk::AUBufferList>::set((void *)(a1 + 896), 0);
  *(void *)(a1 + 848) = 0;
  *(_DWORD *)(a1 + 1280) = 0;
  ++*(_DWORD *)(a1 + 528);
  inDesc[13] = 0;
  *(_WORD *)&inDesc[14] = 0;
  *(_DWORD *)&inDesc[16] = 0;
  strcpy(inDesc, "xfua2clvlppa");
  Next = AudioComponentFindNext(0, (const AudioComponentDescription *)inDesc);
  uint64_t v9 = (AudioUnit *)(a1 + 848);
  int inData = AUMultiBandDynamicsProcessorV2::RenderCallbackVolComp;
  uint64_t v52 = a1;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  uint64_t v10 = 816;
  while (1)
  {
    uint64_t v11 = (AudioUnit *)(a1 + v10);
    if (AudioComponentInstanceNew(Next, (AudioComponentInstance *)(a1 + v10))
      || AudioUnitSetProperty(*v11, 0x17u, 1u, 0, &inData, 0x10u))
    {
      break;
    }
    AudioUnitSetParameter(*v11, 0xDu, 0, 0, 2.0, 0);
    AudioUnitSetParameter(*v11, 0xEu, 0, 0, 2.0, 0);
    v10 += 8;
    if (v10 == 848)
    {
      inDesc[13] = 0;
      *(_WORD *)&inDesc[14] = 0;
      *(_DWORD *)&inDesc[16] = 0;
      strcpy(inDesc, "xfuaqebnlppa");
      uint64_t v12 = AudioComponentFindNext(0, (const AudioComponentDescription *)inDesc);
      int inData = AUMultiBandDynamicsProcessorV2::RenderCallbackNBandEQ;
      uint64_t v52 = a1;
      *(_OWORD *)(a1 + 688) = 0u;
      *(_OWORD *)(a1 + 704) = 0u;
      *(_OWORD *)(a1 + 720) = 0u;
      *(_OWORD *)(a1 + 736) = 0u;
      *(_OWORD *)(a1 + 752) = 0u;
      *(_OWORD *)(a1 + 768) = 0u;
      uint64_t v13 = 688;
      *(_OWORD *)(a1 + 784) = 0u;
      *(_OWORD *)(a1 + 800) = 0u;
      while (!AudioComponentInstanceNew(v12, (AudioComponentInstance *)(a1 + v13))
           && !AudioUnitSetProperty(*(AudioUnit *)(a1 + v13), 0x17u, 1u, 0, &inData, 0x10u))
      {
        v13 += 8;
        if (v13 == 816)
        {
          inDesc[13] = 0;
          *(_WORD *)&inDesc[14] = 0;
          *(_DWORD *)&inDesc[16] = 0;
          strcpy(inDesc, "xfua2clvlppa");
          long long v14 = AudioComponentFindNext(0, (const AudioComponentDescription *)inDesc);
          if (!AudioComponentInstanceNew(v14, (AudioComponentInstance *)(a1 + 848)))
          {
            AudioUnitSetParameter(*v9, 0xAu, 0, 0, 0.0, 0);
            AudioUnitSetParameter(*v9, 0xBu, 0, 0, 0.0, 0);
            AudioUnitSetParameter(*v9, 0xDu, 0, 0, 2.0, 0);
            AudioUnitSetParameter(*v9, 0xEu, 0, 0, 2.0, 0);
            int inData = AUMultiBandDynamicsProcessorV2::RenderCallbackVolComp;
            uint64_t v52 = a1;
            AudioUnitSetProperty(*(AudioUnit *)(a1 + 848), 0x17u, 1u, 0, &inData, 0x10u);
          }
          goto LABEL_14;
        }
      }
      break;
    }
  }
LABEL_14:
  int v15 = *(unsigned __int8 *)(a1 + 1314);
  uint64_t v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  if (v15)
  {
    ausdk::AUElement::SetParameter(v16, 0, 1.0, 0);
    uint64_t v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
    ausdk::AUElement::SetParameter(v17, 6u, 0.0, 0);
    long long v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
    ausdk::AUElement::SetParameter(v18, 7u, 1.0, 0);
    long long v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
    ausdk::AUElement::SetParameter(v19, 0xCu, 0.0, 0);
    uint64_t v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
    ausdk::AUElement::SetParameter(v20, 1u, 0.0, 0);
    long long v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
    ausdk::AUElement::SetParameter(v21, 5u, 0.0, 0);
    long long v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
    ausdk::AUElement::SetParameter(v22, 8u, 24000.0, 0);
    long long v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
    ausdk::AUElement::SetParameter(v23, 9u, 24000.0, 0);
    long long v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
    ausdk::AUElement::SetParameter(v24, 0xAu, 24000.0, 0);
    uint64_t v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
    ausdk::AUElement::SetParameter(v25, 2u, 0.0, 0);
    uint64_t v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
    ausdk::AUElement::SetParameter(v26, 3u, 0.0, 0);
    uint64_t v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
    ausdk::AUElement::SetParameter(v27, 4u, 0.0, 0);
    long long v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
    ausdk::AUElement::SetParameter(v28, 0xDu, -18.0, 0);
    uint64_t v29 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
    ausdk::AUElement::SetParameter(v29, 0xEu, -18.0, 0);
    long long v30 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
    ausdk::AUElement::SetParameter(v30, 0xFu, -18.0, 0);
    long long v31 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
    ausdk::AUElement::SetParameter(v31, 0x10u, -40.0, 0);
    uint64_t v32 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
    ausdk::AUElement::SetParameter(v32, 0x11u, -40.0, 0);
    long long v33 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
    ausdk::AUElement::SetParameter(v33, 0x12u, -30.0, 0);
    long long v34 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
    ausdk::AUElement::SetParameter(v34, 0x13u, -45.0, 0);
    uint64_t v35 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
    ausdk::AUElement::SetParameter(v35, 0x14u, -45.0, 0);
    unint64_t v36 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
    ausdk::AUElement::SetParameter(v36, 0x15u, -18.0, 0);
    char v37 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
    ausdk::AUElement::SetParameter(v37, 0x16u, 0.0, 0);
    uint64_t v38 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
    ausdk::AUElement::SetParameter(v38, 0x17u, 0.0, 0);
    uint64_t v39 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
    ausdk::AUElement::SetParameter(v39, 0x18u, 0.0, 0);
    AUMultiBandDynamicsProcessorV2::UpdateCrossOverEQs(a1);
    AUMultiBandDynamicsProcessorV2::SetVolCompParameters((AUMultiBandDynamicsProcessorV2 *)a1, *(AudioUnit *)(a1 + 848), 0);
    int v40 = 100;
    for (uint64_t j = 816; j != 848; j += 8)
    {
      AUMultiBandDynamicsProcessorV2::SetVolCompParameters((AUMultiBandDynamicsProcessorV2 *)a1, *(AudioUnit *)(a1 + j), v40);
      v40 += 100;
    }
  }
  else
  {
    ausdk::AUElement::SetParameter(v16, 8u, 24000.0, 0);
    char v42 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
    ausdk::AUElement::SetParameter(v42, 9u, 24000.0, 0);
    uint64_t v43 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
    ausdk::AUElement::SetParameter(v43, 0xAu, 24000.0, 0);
    AUMultiBandDynamicsProcessorV2::UpdateCrossOverEQs(a1);
    uint64_t v44 = 0;
    *(unsigned char *)(a1 + 1284) = 0;
    *(_DWORD *)(a1 + 1292) = 0;
    int v45 = 100;
    do
    {
      AUMultiBandDynamicsProcessorV2::SetVolCompParameters((AUMultiBandDynamicsProcessorV2 *)a1, *(AudioUnit *)(a1 + 8 * v44 + 816), v45);
      *(unsigned char *)(a1 + v44 + 1285) = 0;
      *(_DWORD *)(a1 + 1296 + 4 * v44) = 0;
      v45 += 100;
      ++v44;
    }
    while (v44 != 4);
  }
  return a1;
}

void sub_1BB40947C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v12 = (void *)*((void *)v9 + 174);
  if (v12)
  {
    *((void *)v9 + 175) = v12;
    operator delete(v12);
  }
  uint64_t v13 = (void *)*((void *)v9 + 171);
  if (v13)
  {
    *((void *)v9 + 172) = v13;
    operator delete(v13);
  }
  std::vector<std::unique_ptr<ausdk::AUElement>>::__destroy_vector::operator()[abi:ne180100](&a9);
  long long v14 = (unsigned char *)*((void *)v9 + 153);
  if (v14)
  {
    int v15 = (unsigned char *)*((void *)v9 + 154);
    if (v15 != v14) {
      *((void *)v9 + 154) = &v15[(v14 - v15 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v14);
    *((void *)v9 + 153) = 0;
    *((void *)v9 + 154) = 0;
  }
  uint64_t v16 = (unsigned char *)*((void *)v9 + 148);
  if (v16)
  {
    uint64_t v17 = (unsigned char *)*((void *)v9 + 149);
    if (v17 != v16) {
      *((void *)v9 + 149) = &v17[(v16 - v17 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v16);
    *((void *)v9 + 148) = 0;
    *((void *)v9 + 149) = 0;
  }
  uint64_t v18 = 0;
  while (1)
  {
    long long v19 = (void *)((char *)v9 + v18);
    uint64_t v20 = *(unsigned char **)((char *)v9 + v18 + 1144);
    if (v20)
    {
      long long v21 = (unsigned char *)v19[144];
      if (v21 != v20) {
        v19[144] = &v21[(v20 - v21 + 3) & 0xFFFFFFFFFFFFFFFCLL];
      }
      long long v22 = v19 + 143;
      operator delete(v20);
      *long long v22 = 0;
      v22[1] = 0;
    }
    v18 -= 16;
    if (v18 == -128)
    {
      uint64_t v23 = 0;
      while (1)
      {
        long long v24 = (void *)((char *)v9 + v23);
        uint64_t v25 = *(unsigned char **)((char *)v9 + v23 + 1016);
        if (v25)
        {
          uint64_t v26 = (unsigned char *)v24[128];
          if (v26 != v25) {
            v24[128] = &v26[(v25 - v26 + 3) & 0xFFFFFFFFFFFFFFFCLL];
          }
          uint64_t v27 = v24 + 127;
          operator delete(v25);
          void *v27 = 0;
          v27[1] = 0;
        }
        v23 -= 16;
        if (v23 == -128)
        {
          CADeprecated::CAAutoDelete<ausdk::AUBufferList>::set((void *)v9 + 112, 0);
          CADeprecated::CAAutoDelete<ausdk::AUBufferList>::set(v10, 0);
          ausdk::AUBase::~AUBase(v9);
          _Unwind_Resume(a1);
        }
      }
    }
  }
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUReverbSuppressor>::Factory()
{
  double result = malloc_type_malloc(0x1308uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUReverbSuppressor>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUReverbSuppressor>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUReverbSuppressor>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUReverbSuppressor>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 2);
  *(void *)uint64_t v3 = &unk_1F14C5E00;
  *((void *)v3 + 66) = 1;
  *((_DWORD *)v3 + 134) = 0;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 72) = 0;
  *((void *)v3 + 71) = 0;
  *((void *)v3 + 69) = (char *)v3 + 560;
  *((void *)v3 + 74) = 0;
  *((void *)v3 + 73) = 0;
  DSPSplitComplexV<float>::DSPSplitComplexV((void *)v3 + 75, 0);
  std::string::basic_string[abi:ne180100]<0>(&v61, "InpFrameNode");
  AutoValue<DSPSplitComplexV<float>,(LogTypes)0>::AutoValue((void *)(a1 + 664), (long long *)&v61);
  if (SHIBYTE(v62) < 0) {
    operator delete((void *)v61);
  }
  std::string::basic_string[abi:ne180100]<0>(&v61, "OutFrameNode");
  AutoValue<DSPSplitComplexV<float>,(LogTypes)0>::AutoValue((void *)(a1 + 1056), (long long *)&v61);
  if (SHIBYTE(v62) < 0) {
    operator delete((void *)v61);
  }
  std::string::basic_string[abi:ne180100]<0>(&v61, "pass1GainFloor(dB)");
  AutoValue<float,(LogTypes)0>::AutoValue(a1 + 1448, (long long *)&v61);
  if (SHIBYTE(v62) < 0) {
    operator delete((void *)v61);
  }
  std::string::basic_string[abi:ne180100]<0>(&v61, "pass2GainFloor(dB)");
  AutoValue<float,(LogTypes)0>::AutoValue(a1 + 1784, (long long *)&v61);
  if (SHIBYTE(v62) < 0) {
    operator delete((void *)v61);
  }
  std::string::basic_string[abi:ne180100]<0>(&v61, "reverbTailGain(dB)");
  AutoValue<float,(LogTypes)0>::AutoValue(a1 + 2120, (long long *)&v61);
  if (SHIBYTE(v62) < 0) {
    operator delete((void *)v61);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "pass1GainFloor(dB)_i");
  Trackable::Trackable<AutoValue<float,(LogTypes)0>>(a1 + 2456, (long long *)&__p, a1 + 1448);
  *(void *)(a1 + 2456) = &unk_1F14C6090;
  *(void *)(a1 + 2712) = 0;
  *(void *)(a1 + 2704) = 0;
  *(_OWORD *)(a1 + 2736) = xmmword_1BB872720;
  *(_DWORD *)(a1 + 2752) = 0;
  *(void *)(a1 + 2760) = 0;
  *(_OWORD *)(a1 + 2768) = xmmword_1BB87A440;
  unsigned int v4 = operator new(4uLL);
  *(void *)(a1 + 2760) = v4;
  *(void *)(a1 + 2776) = 1;
  _DWORD *v4 = 0;
  *(void *)(a1 + 2784) = 0;
  uint64_t v61 = (uint64_t)&unk_1F14C60D0;
  *((void *)&v62 + 1) = a1 + 1448;
  *(void *)&long long v63 = &v61;
  std::__function::__value_func<float const& ()(float &)>::swap[abi:ne180100](&v61, (void *)(a1 + 2680));
  std::__function::__value_func<float const& ()(float &)>::~__value_func[abi:ne180100](&v61);
  *(_DWORD *)(a1 + 2464) = 0;
  *(void *)(a1 + 2472) = 0;
  *(void *)(a1 + 2728) = 0;
  *(void *)(a1 + 2720) = 0;
  if (SHIBYTE(v57) < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "pass2GainFloor(dB)_i");
  Trackable::Trackable<AutoValue<float,(LogTypes)0>>(a1 + 2792, (long long *)&__p, a1 + 1784);
  *(void *)(a1 + 2792) = &unk_1F14C6090;
  *(void *)(a1 + 3048) = 0;
  *(void *)(a1 + 3040) = 0;
  *(_OWORD *)(a1 + 3072) = xmmword_1BB872720;
  *(_DWORD *)(a1 + 3088) = 0;
  *(void *)(a1 + 3096) = 0;
  *(_OWORD *)(a1 + 3104) = xmmword_1BB87A440;
  uint64_t v5 = operator new(4uLL);
  *(void *)(a1 + 3096) = v5;
  *(void *)(a1 + 3112) = 1;
  *uint64_t v5 = 0;
  *(void *)(a1 + 3120) = 0;
  uint64_t v61 = (uint64_t)&unk_1F14C6118;
  *((void *)&v62 + 1) = a1 + 1784;
  *(void *)&long long v63 = &v61;
  std::__function::__value_func<float const& ()(float &)>::swap[abi:ne180100](&v61, (void *)(a1 + 3016));
  std::__function::__value_func<float const& ()(float &)>::~__value_func[abi:ne180100](&v61);
  *(_DWORD *)(a1 + 2800) = 0;
  *(void *)(a1 + 2808) = 0;
  *(void *)(a1 + 3064) = 0;
  *(void *)(a1 + 3056) = 0;
  if (SHIBYTE(v57) < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "reverbTailGain(dB)_i");
  uint64_t v54 = Trackable::Trackable<AutoValue<float,(LogTypes)0>>(a1 + 3128, (long long *)&__p, a1 + 2120);
  *(void *)(a1 + 3128) = &unk_1F14C6090;
  *(void *)(a1 + 3384) = 0;
  *(void *)(a1 + 3376) = 0;
  *(_OWORD *)(a1 + 3408) = xmmword_1BB872720;
  *(_DWORD *)(a1 + 3424) = 0;
  *(void *)(a1 + 3432) = 0;
  *(_OWORD *)(a1 + 3440) = xmmword_1BB87A440;
  unsigned int v6 = operator new(4uLL);
  *(void *)(a1 + 3432) = v6;
  *(void *)(a1 + 3448) = 1;
  *unsigned int v6 = 0;
  *(void *)(a1 + 3456) = 0;
  uint64_t v61 = (uint64_t)&unk_1F14C6160;
  *((void *)&v62 + 1) = a1 + 2120;
  *(void *)&long long v63 = &v61;
  std::__function::__value_func<float const& ()(float &)>::swap[abi:ne180100](&v61, (void *)(a1 + 3352));
  std::__function::__value_func<float const& ()(float &)>::~__value_func[abi:ne180100](&v61);
  *(_DWORD *)(a1 + 3136) = 0;
  *(void *)(a1 + 3144) = 0;
  *(void *)(a1 + 3400) = 0;
  *(void *)(a1 + 3392) = 0;
  if (SHIBYTE(v57) < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&v61, "internalBypass_pref");
  uint64_t v7 = a1 + 3464;
  AutoValue<BOOL,(LogTypes)0>::AutoValue(a1 + 3464, (long long *)&v61);
  if (SHIBYTE(v62) < 0) {
    operator delete((void *)v61);
  }
  std::string::basic_string[abi:ne180100]<0>(&v61, "internalBypass_fail");
  uint64_t v8 = a1 + 3800;
  AutoValue<BOOL,(LogTypes)0>::AutoValue(a1 + 3800, (long long *)&v61);
  if (SHIBYTE(v62) < 0) {
    operator delete((void *)v61);
  }
  std::string::basic_string[abi:ne180100]<0>(&v61, "internalBypass_noTail");
  uint64_t v9 = a1 + 4136;
  AutoValue<BOOL,(LogTypes)0>::AutoValue(a1 + 4136, (long long *)&v61);
  if (SHIBYTE(v62) < 0) {
    operator delete((void *)v61);
  }
  std::string::basic_string[abi:ne180100]<0>(v59, "internalBypass");
  *(void *)(a1 + 4472) = &unk_1F14C6070;
  *(unsigned char *)(a1 + 4496) = 0;
  *(void *)(a1 + 4504) = 0;
  *(void *)(a1 + 4520) = 0;
  *(void *)(a1 + 4512) = 0;
  *(void *)(a1 + 4536) = 0;
  if (SHIBYTE(v60) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 4544), (const std::string::value_type *)v59[0], (std::string::size_type)v59[1]);
  }
  else
  {
    *(_OWORD *)(a1 + 4544) = *(_OWORD *)v59;
    *(void *)(a1 + 4560) = v60;
  }
  *(unsigned char *)(a1 + 4568) = 0;
  *(_OWORD *)(a1 + 4576) = 0u;
  *(_OWORD *)(a1 + 4592) = 0u;
  *(_OWORD *)(a1 + 4608) = 0u;
  *(_OWORD *)(a1 + 4624) = 0u;
  *(_OWORD *)(a1 + 4640) = 0u;
  *(_OWORD *)(a1 + 4656) = 0u;
  *(_OWORD *)(a1 + 4672) = 0u;
  *(void *)(a1 + 4688) = 0;
  uint64_t v10 = operator new(8uLL);
  *uint64_t v10 = v7;
  *(void *)(a1 + 4600) = v10;
  *(void *)(a1 + 4608) = v10 + 1;
  *(void *)(a1 + 4616) = v10 + 1;
  uint64_t v11 = std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(2uLL);
  v11[1] = v8;
  uint64_t v12 = (char *)(v11 + 1);
  long long v14 = (char *)&v11[v13];
  int v15 = (char *)(v11 + 2);
  uint64_t v16 = *(char **)(a1 + 4608);
  uint64_t v17 = *(char **)(a1 + 4600);
  if (v16 != v17)
  {
    do
    {
      uint64_t v18 = *((void *)v16 - 1);
      v16 -= 8;
      *((void *)v12 - 1) = v18;
      v12 -= 8;
    }
    while (v16 != v17);
    uint64_t v16 = *(char **)(a1 + 4600);
  }
  *(void *)(a1 + 4600) = v12;
  *(void *)(a1 + 4608) = v15;
  *(void *)(a1 + 4616) = v14;
  if (v16)
  {
    operator delete(v16);
    long long v14 = *(char **)(a1 + 4616);
  }
  *(void *)(a1 + 4608) = v15;
  if (v15 >= v14)
  {
    uint64_t v20 = *(void *)(a1 + 4600);
    uint64_t v21 = (uint64_t)&v15[-v20] >> 3;
    if ((unint64_t)(v21 + 1) >> 61) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v22 = (uint64_t)&v14[-v20];
    uint64_t v23 = v22 >> 2;
    if (v22 >> 2 <= (unint64_t)(v21 + 1)) {
      uint64_t v23 = v21 + 1;
    }
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v24 = v23;
    }
    if (v24) {
      unint64_t v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v24);
    }
    else {
      uint64_t v25 = 0;
    }
    uint64_t v26 = (uint64_t *)(v24 + 8 * v21);
    unint64_t v27 = v24 + 8 * v25;
    uint64_t *v26 = v9;
    long long v19 = v26 + 1;
    long long v28 = *(char **)(a1 + 4608);
    uint64_t v29 = *(char **)(a1 + 4600);
    if (v28 != v29)
    {
      do
      {
        uint64_t v30 = *((void *)v28 - 1);
        v28 -= 8;
        *--uint64_t v26 = v30;
      }
      while (v28 != v29);
      long long v28 = *(char **)(a1 + 4600);
    }
    *(void *)(a1 + 4600) = v26;
    *(void *)(a1 + 4608) = v19;
    *(void *)(a1 + 4616) = v27;
    if (v28) {
      operator delete(v28);
    }
  }
  else
  {
    v11[2] = v9;
    long long v19 = v11 + 3;
  }
  *(void *)(a1 + 4608) = v19;
  *(void *)(a1 + 4528) = 0;
  *(_DWORD *)(a1 + 4480) = 0;
  *(void *)(a1 + 4472) = &unk_1F14C6050;
  uint64_t v31 = a1 + 4696;
  *(void *)(a1 + 4728) = 0;
  *(void *)(a1 + 4720) = 0;
  *(_OWORD *)(a1 + 4752) = xmmword_1BB872720;
  *(unsigned char *)(a1 + 4768) = 0;
  *(void *)(a1 + 4776) = 0;
  *(_OWORD *)(a1 + 4784) = xmmword_1BB87A440;
  uint64_t v32 = operator new(1uLL);
  *(void *)(a1 + 4776) = v32;
  unsigned char *v32 = 0;
  *(_OWORD *)(a1 + 4792) = xmmword_1BB87A440;
  long long v33 = operator new(0x28uLL);
  void *v33 = &unk_1F14C61C8;
  v33[1] = IfAnyNode::IfAnyFun<AutoValue<BOOL,(LogTypes)0> &,AutoValue<BOOL,(LogTypes)0> &,AutoValue<BOOL,(LogTypes)0> &>;
  v33[2] = v7;
  v33[3] = v8;
  v33[4] = v9;
  *(void *)&long long v63 = v33;
  if ((uint64_t *)(a1 + 4696) != &v61)
  {
    long long v34 = (void *)(a1 + 4720);
    if (*(void *)(a1 + 4720) == v31)
    {
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v31 + 24))(a1 + 4696, &v61);
      (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *, uint64_t, void *, uint64_t, uint64_t))(*(void *)*v34 + 32))(*v34, v35, v36, v37, v38, v39, v40, v41, a1 + 3352, &unk_1F14C6090, v54, &unk_1F14C6090, a1 + 3016, a1 + 2792);
      *long long v34 = v63;
      *(void *)&long long v63 = &v61;
    }
    else
    {
      *(void *)&long long v63 = *(void *)(a1 + 4720);
      *long long v34 = v33;
    }
  }
  std::__function::__value_func<BOOL const& ()(BOOL &)>::~__value_func[abi:ne180100](&v61);
  *(_DWORD *)(a1 + 4480) = 0;
  *(void *)(a1 + 4488) = 0;
  *(void *)(a1 + 4744) = 0;
  *(void *)(a1 + 4736) = 0;
  *(void *)(a1 + 4472) = &unk_1F14C61A8;
  if (SHIBYTE(v60) < 0) {
    operator delete(v59[0]);
  }
  ausdk::AUBase::CreateElements(a1);
  uint64_t Element = ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)Element + 40))(Element, 3);
  uint64_t v43 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v43, 0, -24.0, 0);
  uint64_t v44 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v44, 1u, -18.0, 0);
  int v45 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v45, 2u, 0.0, 0);
  uint64_t v61 = 0x40E5888000000000;
  std::string __p = (void *)0x40E5888000000000;
  long long v62 = xmmword_1BB87A250;
  long long v63 = xmmword_1BB87A260;
  long long v57 = xmmword_1BB8727B0;
  long long v58 = xmmword_1BB8727C0;
  uint64_t v46 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v46 + 56))(v46, &v61);
  for (unsigned int i = 0; ; ++i)
  {
    uint64_t v48 = *(void *)(a1 + 168);
    if (v48) {
      LODWORD(v49) = (*(uint64_t (**)(uint64_t))(*(void *)v48 + 24))(v48);
    }
    else {
      uint64_t v49 = (*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 3;
    }
    if (i >= v49) {
      break;
    }
    if (i == 1)
    {
      uint64_t v50 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 1u);
      p_p = &__p;
    }
    else
    {
      if (i) {
        continue;
      }
      uint64_t v50 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
      p_p = (void **)&v61;
    }
    (*(void (**)(uint64_t, void **))(*(void *)v50 + 56))(v50, p_p);
  }
  int inData = 1;
  if (AudioUnitSetProperty(*(AudioUnit *)(a1 + 8), 0xE74u, 0, 0, &inData, 4u))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioChannelLayout buf = 136315650;
      unint64_t v65 = "AUReverbSuppressor.cpp";
      __int16 v66 = 1024;
      int v67 = 580;
      __int16 v68 = 2080;
      char v69 = "UsesFixedBlockSize";
      _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d AudioUnitSetProperty failed for %s", buf, 0x1Cu);
    }
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    void *exception = MEMORY[0x1E4FBA510] + 16;
  }
  return a1;
}

void sub_1BB40A184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, Trackable *a11, uint64_t a12, uint64_t a13, Trackable *a14, uint64_t a15, uint64_t a16, Trackable *a17, uint64_t a18, uint64_t a19, uint64_t a20,Trackable *a21,Trackable *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNoiseSelector>::Factory()
{
  double result = malloc_type_malloc(0x2A0uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNoiseSelector>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNoiseSelector>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNoiseSelector>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNoiseSelector>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v96 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 2, 2);
  *(void *)uint64_t v3 = &unk_1F14B1550;
  *((void *)v3 + 66) = 1;
  *((void *)v3 + 67) = 0;
  *((unsigned char *)v3 + 552) = 1;
  unsigned int v4 = (void *)((char *)v3 + 568);
  *((_OWORD *)v3 + 35) = 0u;
  *((_OWORD *)v3 + 36) = 0u;
  *((void *)v3 + 74) = 0;
  *((_DWORD *)v3 + 150) = 1065353216;
  uint64_t v5 = (ausdk::AUBase *)((char *)v3 + 32);
  uint64_t Element = ausdk::AUScope::GetElement((ausdk::AUBase *)((char *)v3 + 32), 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)Element + 40))(Element, 15);
  ausdk::AUBase::CreateElements(a1);
  unsigned int v7 = 0;
  *(_DWORD *)(a1 + 544) = 44100;
  uint64_t v23 = 0x40E5888000000000;
  long long v25 = xmmword_1BB87A450;
  long long v24 = xmmword_1BB87A250;
  uint64_t v20 = 0x40E5888000000000;
  long long v21 = xmmword_1BB87A250;
  long long v22 = xmmword_1BB87A260;
  while (1)
  {
    uint64_t v8 = *(void *)(a1 + 120);
    if (v8) {
      LODWORD(v9) = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 24))(v8);
    }
    else {
      uint64_t v9 = (*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 3;
    }
    if (v7 >= v9) {
      break;
    }
    uint64_t v10 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v7);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v10 + 56))(v10, &v23);
    ++v7;
  }
  for (unsigned int i = 0; ; ++i)
  {
    uint64_t v12 = *(void *)(a1 + 168);
    if (v12) {
      LODWORD(v13) = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 24))(v12);
    }
    else {
      uint64_t v13 = (*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 3;
    }
    if (i >= v13) {
      break;
    }
    uint64_t v14 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), i);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v14 + 56))(v14, &v20);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 512))(a1, 1156);
  *(unsigned char *)(a1 + 376) = 1;
  if (AUNoiseSelectorLogScope(void)::once != -1) {
    dispatch_once(&AUNoiseSelectorLogScope(void)::once, &__block_literal_global_9707);
  }
  LODWORD(v23) = 0;
  *(void *)&long long v24 = @"Wind Probability";
  *((void *)&v24 + 1) = 0;
  LODWORD(v25) = 1065353216;
  *(void *)((char *)&v25 + 4) = 0xC080000000000000;
  int v26 = 1;
  unint64_t v27 = @"Pframe";
  uint64_t v28 = 0;
  int v29 = 1065353216;
  unint64_t v30 = 0xC080000000000000;
  int v31 = 2;
  uint64_t v32 = @"No Wind Threshold";
  unint64_t v33 = 0xC1A0000000000000;
  unint64_t v35 = 0xC08000000000000DLL;
  int v34 = 1101004800;
  int v36 = 3;
  uint64_t v37 = @"No Wind Low Frequency";
  uint64_t v38 = 1120403456;
  unint64_t v40 = 0xC080000000000008;
  int v39 = 1157234688;
  int v41 = 4;
  char v42 = @"No Wind High Frequency";
  uint64_t v43 = 0x457A000046BB8000;
  int v44 = 1186693120;
  int v46 = 5;
  unint64_t v45 = 0xC080000000000008;
  uint64_t v47 = @"Wind Threshold";
  uint64_t v48 = 0x40000000;
  unint64_t v50 = 0xC08000000000000DLL;
  int v49 = 1101004800;
  int v51 = 6;
  uint64_t v52 = @"Wind Low Frequency";
  uint64_t v53 = 1157234688;
  uint64_t v54 = 0x844FA0000;
  int v55 = -1065353216;
  int v56 = 7;
  long long v57 = @"Wind High Frequency";
  uint64_t v58 = 0x44FA000046BB8000;
  uint64_t v59 = 0x846BB8000;
  int v60 = -1065353216;
  int v61 = 8;
  long long v62 = @"Voice Noise Probability Threshold";
  uint64_t v63 = 1056964608;
  uint64_t v64 = 1065353216;
  int v65 = -1065353216;
  int v66 = 9;
  int v67 = @"Min Probability In Noise";
  uint64_t v68 = 1036831949;
  uint64_t v69 = 1065353216;
  int v70 = -1065353216;
  int v71 = 10;
  unint64_t v72 = @"Min Probability In Voice";
  uint64_t v73 = 1056964608;
  uint64_t v74 = 1065353216;
  int v75 = -1065353216;
  int v76 = 11;
  unint64_t v77 = @"Voice Time Out";
  uint64_t v78 = 1048576000;
  uint64_t v79 = 0x441200000;
  int v80 = -1065353216;
  int v81 = 12;
  uint64_t v82 = @"Min Between Voice And Noise";
  uint64_t v83 = 1065353216;
  uint64_t v84 = 0x13F800000;
  int v85 = -1065353216;
  int v86 = 13;
  uint64_t v87 = @"Mic Switch decided in NoiseSelector";
  uint64_t v88 = 0;
  uint64_t v89 = 0x23F800000;
  int v90 = -1065353216;
  int v91 = 14;
  unint64_t v92 = @"Threshold for MagDiffVAD";
  unint64_t v93 = 0xC1A00000C1200000;
  uint64_t v94 = 0xD41A00000;
  int v95 = -1065353216;
  std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>>>::__assign_unique<std::pair<unsigned int const,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>> const*>((uint64_t)v4, (unsigned int *)&v23, (unsigned int *)&v96);
  unsigned int v15 = 0;
  LODWORD(v23) = 0;
  do
  {
    uint64_t v16 = std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>>>::find<unsigned int>(v4, v15);
    if (v16)
    {
      float v17 = *((float *)std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v4, v15, &v23)+ 8);
      uint64_t v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v5, 0);
      ausdk::AUElement::SetParameter(v18, v15, v17, 0);
    }
    LODWORD(v23) = ++v15;
  }
  while (v15 != 15);
  *(unsigned char *)(a1 + 552) = AUDebugFeature::IsNonFiniteHandlingEnabled((AUDebugFeature *)v16);
  return a1;
}

void sub_1BB40ADCC(_Unwind_Exception *a1)
{
  std::__hash_table<vp::vx::io::Object_ID<vp::vx::io::Node>,std::hash<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::equal_to<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::allocator<vp::vx::io::Object_ID<vp::vx::io::Node>>>::~__hash_table(v2);
  std::unique_ptr<NoiseSelectorCore>::reset[abi:ne180100]((void *)v1 + 70, 0);
  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUHandsetNoiseEQ>::Factory()
{
  double result = malloc_type_malloc(0x2A0uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUHandsetNoiseEQ>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUHandsetNoiseEQ>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUHandsetNoiseEQ>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUHandsetNoiseEQ>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 2, 2);
  *(void *)uint64_t v3 = &unk_1F14B0CC0;
  *((_DWORD *)v3 + 132) = 1;
  *(_OWORD *)((char *)v3 + 532) = 0u;
  *((unsigned char *)v3 + 556) = 1;
  unsigned int v4 = (void *)((char *)v3 + 568);
  *((_OWORD *)v3 + 35) = 0u;
  *((_OWORD *)v3 + 36) = 0u;
  *((_DWORD *)v3 + 150) = 1065353216;
  uint64_t v5 = (ausdk::AUBase *)((char *)v3 + 32);
  *((void *)v3 + 74) = 0;
  uint64_t Element = ausdk::AUScope::GetElement((ausdk::AUBase *)((char *)v3 + 32), 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)Element + 40))(Element, 9);
  ausdk::AUBase::CreateElements(a1);
  unsigned int v7 = 0;
  *(_DWORD *)(a1 + 548) = 44100;
  uint64_t v23 = 0x40E5888000000000;
  long long v25 = xmmword_1BB87A240;
  long long v24 = xmmword_1BB87A250;
  uint64_t v20 = 0x40E5888000000000;
  long long v21 = xmmword_1BB87A250;
  long long v22 = xmmword_1BB87A260;
  while (1)
  {
    uint64_t v8 = *(void *)(a1 + 120);
    if (v8) {
      LODWORD(v9) = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 24))(v8);
    }
    else {
      uint64_t v9 = (*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 3;
    }
    if (v7 >= v9) {
      break;
    }
    uint64_t v10 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v7);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v10 + 56))(v10, &v23);
    ++v7;
  }
  for (unsigned int i = 0; ; ++i)
  {
    uint64_t v12 = *(void *)(a1 + 168);
    if (v12) {
      LODWORD(v13) = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 24))(v12);
    }
    else {
      uint64_t v13 = (*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 3;
    }
    if (i >= v13) {
      break;
    }
    uint64_t v14 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), i);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v14 + 56))(v14, &v20);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 512))(a1, 1156);
  *(unsigned char *)(a1 + 376) = 1;
  if (AUHandsetNoiseEQLogScope(void)::once != -1) {
    dispatch_once(&AUHandsetNoiseEQLogScope(void)::once, &__block_literal_global_8866);
  }
  LODWORD(v23) = 0;
  *(void *)&long long v24 = @"Pframe";
  *((void *)&v24 + 1) = 0;
  LODWORD(v25) = 1065353216;
  *(void *)((char *)&v25 + 4) = 0xC080000000000000;
  int v26 = 1;
  unint64_t v27 = @"Min Gain";
  unint64_t v28 = 0xC3480000C1A00000;
  int v29 = 0;
  unint64_t v30 = 0xC08000000000000DLL;
  int v31 = 2;
  uint64_t v32 = @"Max Gain";
  uint64_t v33 = 1109393408;
  unint64_t v35 = 0xC08000000000000DLL;
  int v34 = 1128792064;
  int v36 = 3;
  uint64_t v37 = @"Voice Noise Threshold";
  uint64_t v38 = 0x3F8000003FA00000;
  unint64_t v40 = 0xC08000000000000DLL;
  int v39 = 1101004800;
  int v41 = 4;
  char v42 = @"Speech Prob Threshold";
  uint64_t v43 = 1056964608;
  unint64_t v45 = 0xC080000000000000;
  int v44 = 1065353216;
  int v46 = 5;
  uint64_t v47 = @"Gain TC in Noise";
  uint64_t v48 = 1048576000;
  unint64_t v50 = 0xC080000000000004;
  int v49 = 1092616192;
  int v51 = 6;
  uint64_t v52 = @"Gain TC in Voice";
  uint64_t v53 = 1008981770;
  uint64_t v54 = 0x441200000;
  int v55 = -1065353216;
  int v56 = 7;
  long long v57 = @"Power Spectrum TC";
  uint64_t v58 = 1000593162;
  uint64_t v59 = 0x441200000;
  int v60 = -1065353216;
  int v61 = 8;
  long long v62 = @"Frequency Smooth";
  uint64_t v63 = 1065353216;
  uint64_t v64 = 0x13F800000;
  int v65 = -1065353216;
  std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>>>::__assign_unique<std::pair<unsigned int const,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>> const*>((uint64_t)v4, (unsigned int *)&v23, (unsigned int *)&v66);
  unsigned int v15 = 0;
  LODWORD(v23) = 0;
  do
  {
    uint64_t v16 = std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>>>::find<unsigned int>(v4, v15);
    if (v16)
    {
      float v17 = *((float *)std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v4, v15, &v23)+ 8);
      uint64_t v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v5, 0);
      ausdk::AUElement::SetParameter(v18, v15, v17, 0);
    }
    LODWORD(v23) = ++v15;
  }
  while (v15 != 9);
  *(unsigned char *)(a1 + 556) = AUDebugFeature::IsNonFiniteHandlingEnabled((AUDebugFeature *)v16);
  return a1;
}

void sub_1BB40B36C(_Unwind_Exception *a1)
{
  std::__hash_table<vp::vx::io::Object_ID<vp::vx::io::Node>,std::hash<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::equal_to<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::allocator<vp::vx::io::Object_ID<vp::vx::io::Node>>>::~__hash_table(v2);
  std::unique_ptr<HandsetNoiseEQCore>::reset[abi:ne180100]((void *)v1 + 70, 0);
  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUBSS2>::Factory()
{
  double result = malloc_type_malloc(0x300uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUBSS2>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUBSS2>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUBSS2>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUBSS2>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  *(void *)unsigned __int8 v118 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 8, 8);
  *(void *)uint64_t v3 = &unk_1F14ABFA0;
  *((_OWORD *)v3 + 33) = xmmword_1BB87A440;
  unsigned int v4 = (ausdk::AUBase *)((char *)v3 + 552);
  *((void *)v3 + 69) = 0;
  *((_DWORD *)v3 + 140) = 0;
  *(_OWORD *)((char *)v3 + 568) = 0u;
  *(_OWORD *)((char *)v3 + 584) = 0u;
  *((void *)v3 + 75) = 0;
  *((unsigned char *)v3 + 608) = 1;
  uint64_t v5 = (void *)((char *)v3 + 624);
  *(_OWORD *)((char *)v3 + 616) = 0u;
  *(_OWORD *)((char *)v3 + 632) = 0u;
  *((void *)v3 + 81) = 0;
  *((_DWORD *)v3 + 164) = 1065353216;
  unsigned int v6 = (void *)((char *)v3 + 664);
  *((_DWORD *)v3 + 174) = 1065353216;
  unsigned int v7 = (ausdk::AUBase *)((char *)v3 + 32);
  *(_OWORD *)((char *)v3 + 664) = 0u;
  *(_OWORD *)((char *)v3 + 680) = 0u;
  uint64_t Element = ausdk::AUScope::GetElement((ausdk::AUBase *)((char *)v3 + 32), 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)Element + 40))(Element, 18);
  ausdk::AUBase::CreateElements(a1);
  unsigned int v9 = 0;
  *(_DWORD *)(a1 + 540) = 44100;
  uint64_t v30 = 0x40E5888000000000;
  long long v32 = xmmword_1BB87A460;
  long long v31 = xmmword_1BB87A250;
  uint64_t v27 = 0x40E5888000000000;
  long long v28 = xmmword_1BB87A250;
  long long v29 = xmmword_1BB87A460;
  while (1)
  {
    uint64_t v10 = *(void *)(a1 + 120);
    if (v10) {
      LODWORD(v11) = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 24))(v10);
    }
    else {
      uint64_t v11 = (*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 3;
    }
    if (v9 >= v11) {
      break;
    }
    uint64_t v12 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v9);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v12 + 56))(v12, &v30);
    ++v9;
  }
  for (unsigned int i = 0; ; ++i)
  {
    uint64_t v14 = *(void *)(a1 + 168);
    if (v14) {
      LODWORD(v15) = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 24))(v14);
    }
    else {
      uint64_t v15 = (*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 3;
    }
    if (i >= v15) {
      break;
    }
    uint64_t v16 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), i);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v16 + 56))(v16, &v27);
  }
  *(unsigned char *)(a1 + 376) = 1;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 512))(a1, 1156);
  LODWORD(v30) = 0;
  *(void *)&long long v31 = @"Adapt BSS Filters";
  *((void *)&v31 + 1) = 1065353216;
  LODWORD(v32) = 1065353216;
  *(void *)((char *)&v32 + 4) = 0xC080000000000002;
  int v33 = 1;
  int v34 = @"Covariance Alpha TC";
  uint64_t v35 = 0x3DCCCCCD3FC00000;
  int v36 = 1084227584;
  unint64_t v37 = 0xC080000000000000;
  unsigned int v38 = 2;
  int v39 = @"Mixture Phase";
  uint64_t v40 = 0;
  unint64_t v42 = 0xC080000000000001;
  int v41 = 1065353216;
  int v43 = 3;
  int v44 = @"Energy Regularization";
  unint64_t v45 = 0xC47A000042200000;
  unint64_t v47 = 0xC08000000000000DLL;
  int v46 = 1148846080;
  int v48 = 4;
  int v49 = @"Covariance Regularization";
  unint64_t v50 = 0xC47A0000C3480000;
  unint64_t v52 = 0xC08000000000000DLL;
  int v51 = 1148846080;
  int v53 = 5;
  uint64_t v54 = @"Weighted Covariance Regularization";
  unint64_t v55 = 0xC47A0000C38C0000;
  unint64_t v57 = 0xC08000000000000DLL;
  int v56 = 1148846080;
  int v58 = 6;
  uint64_t v59 = @"Unmixing Regularization";
  unint64_t v60 = 0xC47A0000C38C0000;
  uint64_t v61 = 0xD447A0000;
  int v62 = -1065353216;
  int v63 = 7;
  uint64_t v64 = @"Scale Mode";
  uint64_t v65 = 0;
  uint64_t v66 = 0x141000000;
  int v68 = 8;
  int v67 = -1065353216;
  uint64_t v69 = @"Source Prior Beta";
  uint64_t v70 = 0x3727C5AC3F800000;
  uint64_t v71 = 0xE40000000;
  int v72 = -1065353216;
  int v73 = 9;
  uint64_t v74 = @"White Noise Gain Max";
  unint64_t v75 = 0xC348000000000000;
  uint64_t v76 = 0xD43480000;
  int v77 = -1065353216;
  int v78 = 10;
  uint64_t v79 = @"Optimization Mode";
  uint64_t v80 = 0;
  uint64_t v81 = 0x141200000;
  int v82 = -1065353216;
  int v83 = 11;
  uint64_t v84 = @"Minimum Energy Threshold";
  unint64_t v85 = 0xC3960000C30C0000;
  uint64_t v86 = 0xD00000000;
  int v88 = 12;
  int v87 = -1065353216;
  uint64_t v89 = @"Start Up Wait";
  uint64_t v90 = 1036831949;
  uint64_t v91 = 0x440000000;
  int v92 = -1065353216;
  int v93 = 13;
  uint64_t v94 = @"Covariance Diagonal Initialization";
  unint64_t v95 = 0xC47A0000C3200000;
  uint64_t v96 = 0xD447A0000;
  int v97 = -1065353216;
  int v98 = 14;
  uint64_t v99 = @"Energy Low Frequency";
  uint64_t v100 = 1133903872;
  uint64_t v101 = 0x844FA0000;
  int v102 = -1065353216;
  int v103 = 15;
  unint64_t v104 = @"Energy High Frequency";
  uint64_t v105 = 0x44FA000046BB8000;
  uint64_t v106 = 0x846BB8000;
  int v107 = -1065353216;
  int v108 = 16;
  unsigned int v109 = @"Mixing Mode";
  uint64_t v110 = 0;
  uint64_t v111 = 0x140000000;
  int v112 = -1065353216;
  int v113 = 17;
  uint64_t v114 = @"Num of Echo Chan";
  uint64_t v115 = 0;
  uint64_t v116 = 0x40000000;
  int v117 = -1065353216;
  std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>>>::__assign_unique<std::pair<unsigned int const,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>> const*>((uint64_t)v5, (unsigned int *)&v30, v118);
  LODWORD(v30) = 0;
  *(void *)&long long v31 = @"Adaptive Prior Probability";
  *((void *)&v31 + 1) = 1056964608;
  LODWORD(v32) = 1065353216;
  *(void *)((char *)&v32 + 4) = 0xC080000000000000;
  int v33 = 1;
  int v34 = @"Prior Strength";
  uint64_t v35 = 1092616192;
  int v36 = 1112014848;
  unint64_t v37 = 0xC080000000000000;
  std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>>>::__assign_unique<std::pair<unsigned int const,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>> const*>((uint64_t)v6, (unsigned int *)&v30, &v38);
  unsigned int v17 = 0;
  LODWORD(v30) = 0;
  do
  {
    if (std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>>>::find<unsigned int>(v5, v17))
    {
      float v18 = *((float *)std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v5, v17, &v30)+ 8);
      long long v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v7, 0);
      ausdk::AUElement::SetParameter(v19, v17, v18, 0);
    }
    LODWORD(v30) = ++v17;
  }
  while (v17 != 18);
  for (unsigned int j = 0; ; ++j)
  {
    uint64_t v21 = *(void *)(a1 + 592);
    long long v22 = (AUDebugFeature *)(v21
                           ? (*(uint64_t (**)(uint64_t))(*(void *)v21 + 24))(v21)
                           : (*(void *)(a1 + 576) - *(void *)(a1 + 568)) >> 3);
    if (j >= v22) {
      break;
    }
    uint64_t v23 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v4, j);
    unsigned int v24 = 0;
    LODWORD(v30) = 0;
    do
    {
      if (ausdk::AUElement::HasParameterID(v23, v24))
      {
        if (std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>>>::find<unsigned int>(v6, v24))
        {
          long long v25 = (float *)std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v6, v24, &v30);
          ausdk::AUElement::SetParameter(v23, v24, v25[8], 0);
        }
      }
      LODWORD(v30) = ++v24;
    }
    while (v24 != 2);
  }
  *(unsigned char *)(a1 + 608) = AUDebugFeature::IsNonFiniteHandlingEnabled(v22);
  return a1;
}

void sub_1BB40BBBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::__hash_table<vp::vx::io::Object_ID<vp::vx::io::Node>,std::hash<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::equal_to<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::allocator<vp::vx::io::Object_ID<vp::vx::io::Node>>>::~__hash_table(v11);
  std::__hash_table<vp::vx::io::Object_ID<vp::vx::io::Node>,std::hash<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::equal_to<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::allocator<vp::vx::io::Object_ID<vp::vx::io::Node>>>::~__hash_table(v10);
  uint64_t v14 = *v12;
  uint64_t *v12 = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 56))(v14);
  }
  std::vector<std::unique_ptr<ausdk::AUElement>>::__destroy_vector::operator()[abi:ne180100](&a9);
  ausdk::AUBase::~AUBase(v9);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUBSS1>::Factory()
{
  double result = malloc_type_malloc(0x328uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUBSS1>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUBSS1>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUBSS1>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

unsigned char *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUBSS1>::Construct(unsigned char *a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 2, 2);
  *(void *)uint64_t v3 = &unk_1F14AC628;
  *((unsigned char *)v3 + 528) = 1;
  *((_DWORD *)v3 + 133) = 1;
  *(void *)((char *)v3 + 548) = 0;
  *(void *)((char *)v3 + 652) = 0x3F80000000000000;
  *((void *)v3 + 67) = 0;
  *((unsigned char *)v3 + 544) = 0;
  *((_OWORD *)v3 + 35) = 0u;
  *((_OWORD *)v3 + 36) = 0u;
  *((_OWORD *)v3 + 37) = 0u;
  *((_OWORD *)v3 + 38) = 0u;
  *((_OWORD *)v3 + 39) = 0u;
  *(_OWORD *)((char *)v3 + 633) = 0u;
  *((void *)v3 + 83) = 0;
  *((_DWORD *)v3 + 184) = 0;
  ausdk::AUBase::CreateElements((uint64_t)v3);
  a1[376] = 1;
  (*(void (**)(unsigned char *, uint64_t))(*(void *)a1 + 512))(a1, 192);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(Element, 0, 0.0, 0);
  uint64_t v5 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v5, 1u, 0.0, 0);
  unsigned int v6 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v6, 2u, 1.0, 0);
  unsigned int v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v7, 3u, 0.0, 0);
  uint64_t v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v8, 4u, 0.0, 0);
  unsigned int v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v9, 5u, 0.0, 0);
  uint64_t v10 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v10, 6u, 40.0, 0);
  uint64_t v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v11, 7u, 0.0, 0);
  uint64_t v20 = 0x40CF400000000000;
  long long v21 = xmmword_1BB8727B0;
  long long v22 = xmmword_1BB879EA0;
  uint64_t v17 = 0x40CF400000000000;
  long long v18 = xmmword_1BB8727B0;
  long long v19 = xmmword_1BB8727C0;
  uint64_t v12 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v12 + 56))(v12, &v20);
  uint64_t v13 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 1u);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v13 + 56))(v13, &v20);
  uint64_t v14 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v14 + 56))(v14, &v20);
  uint64_t v15 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 1u);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v15 + 56))(v15, &v17);
  AUBSS1::UpdateState((AUBSS1 *)a1);
  return a1;
}

void sub_1BB40BFB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)(v14 + 624);
  std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&a14);
  a14 = (void **)(v14 + 600);
  std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&a14);
  std::unique_ptr<BlockProcessor>::reset[abi:ne180100]((uint64_t *)(v14 + 592), 0);
  uint64_t v16 = *(void *)(v14 + 584);
  *(void *)(v14 + 584) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  std::vector<std::unique_ptr<VPTimeFreqConverter>>::__destroy_vector::operator()[abi:ne180100](&a14);
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v14);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMagnitudeDifferenceNoiseSuppressorV4>::Factory()
{
  double result = malloc_type_malloc(0x268uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMagnitudeDifferenceNoiseSuppressorV4>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMagnitudeDifferenceNoiseSuppressorV4>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMagnitudeDifferenceNoiseSuppressorV4>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

unsigned char *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMagnitudeDifferenceNoiseSuppressorV4>::Construct(unsigned char *a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 4, 4);
  *(void *)uint64_t v3 = &unk_1F14B6098;
  *((unsigned char *)v3 + 528) = 0;
  *((void *)v3 + 68) = 0;
  *(void *)((char *)v3 + 532) = 0;
  *((_WORD *)v3 + 270) = 0;
  ausdk::AUBase::CreateElements((uint64_t)v3);
  uint64_t Element = ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)Element + 40))(Element, 23);
  uint64_t v5 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v5, 1u, -24.0, 0);
  unsigned int v6 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v6, 2u, 0.0, 0);
  unsigned int v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v7, 9u, 40.0, 0);
  uint64_t v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v8, 5u, 0.0, 0);
  unsigned int v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v9, 6u, 0.0, 0);
  uint64_t v10 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v10, 7u, 0.0, 0);
  uint64_t v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v11, 8u, 0.0, 0);
  uint64_t v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v12, 0xAu, 40.0, 0);
  uint64_t v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v13, 0, 2.0, 0);
  uint64_t v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v14, 0xBu, 0.0, 0);
  uint64_t v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v15, 0xCu, 0.0, 0);
  uint64_t v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v16, 0xDu, -24.0, 0);
  uint64_t v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v17, 3u, 80.0, 0);
  long long v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v18, 4u, 2.0, 0);
  long long v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v19, 0xEu, 0.0, 0);
  uint64_t v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v20, 0xFu, 0.0, 0);
  long long v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v21, 0x10u, 0.0, 0);
  long long v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v22, 0x11u, 0.0, 0);
  uint64_t v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v23, 0x12u, 0.0, 0);
  unsigned int v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v24, 0x13u, 0.0, 0);
  long long v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v25, 0x14u, 0.0, 0);
  int v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v26, 0x15u, 0.0, 0);
  uint64_t v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v27, 0x16u, 0.0, 0);
  a1[376] = 1;
  (*(void (**)(unsigned char *, uint64_t))(*(void *)a1 + 512))(a1, 480);
  uint64_t v40 = 0x40CF400000000000;
  long long v41 = xmmword_1BB87A250;
  long long v42 = xmmword_1BB87A260;
  uint64_t v37 = 0x40CF400000000000;
  long long v39 = xmmword_1BB8727C0;
  long long v38 = xmmword_1BB87A470;
  uint64_t v28 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v28 + 56))(v28, &v40);
  uint64_t v29 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 1u);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v29 + 56))(v29, &v40);
  uint64_t v30 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 2u);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v30 + 56))(v30, &v37);
  uint64_t v31 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 3u);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v31 + 56))(v31, &v37);
  uint64_t v32 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v32 + 56))(v32, &v40);
  uint64_t v33 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 1u);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v33 + 56))(v33, &v37);
  uint64_t v34 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 2u);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v34 + 56))(v34, &v37);
  uint64_t v35 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 3u);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v35 + 56))(v35, &v37);
  return a1;
}

void sub_1BB40C630(_Unwind_Exception *a1)
{
  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMagnitudeDifferenceNoiseSuppressor>::Factory()
{
  double result = malloc_type_malloc(0x268uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMagnitudeDifferenceNoiseSuppressor>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMagnitudeDifferenceNoiseSuppressor>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMagnitudeDifferenceNoiseSuppressor>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

unsigned char *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMagnitudeDifferenceNoiseSuppressor>::Construct(unsigned char *a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 3, 3);
  *(void *)uint64_t v3 = &unk_1F14C4328;
  *((unsigned char *)v3 + 528) = 0;
  *((void *)v3 + 68) = 0;
  *(void *)((char *)v3 + 532) = 0;
  *((_WORD *)v3 + 270) = 0;
  ausdk::AUBase::CreateElements((uint64_t)v3);
  uint64_t Element = ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)Element + 40))(Element, 23);
  uint64_t v5 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v5, 1u, -6.0, 0);
  unsigned int v6 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v6, 2u, 0.0, 0);
  unsigned int v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v7, 9u, 40.0, 0);
  uint64_t v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v8, 5u, 0.0, 0);
  unsigned int v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v9, 6u, 0.0, 0);
  uint64_t v10 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v10, 7u, 0.0, 0);
  uint64_t v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v11, 8u, 0.0, 0);
  uint64_t v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v12, 0xAu, 40.0, 0);
  uint64_t v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v13, 0, 2.0, 0);
  uint64_t v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v14, 0xBu, 0.0, 0);
  uint64_t v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v15, 0xCu, 0.0, 0);
  uint64_t v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v16, 0xDu, -24.0, 0);
  uint64_t v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v17, 3u, 80.0, 0);
  long long v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v18, 4u, 2.0, 0);
  long long v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v19, 0xEu, 0.0, 0);
  uint64_t v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v20, 0xFu, 0.0, 0);
  long long v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v21, 0x10u, 0.0, 0);
  long long v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v22, 0x11u, 0.0, 0);
  uint64_t v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v23, 0x12u, 0.0, 0);
  unsigned int v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v24, 0x13u, 0.0, 0);
  long long v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v25, 0x14u, 0.0, 0);
  int v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v26, 0x15u, 0.0, 0);
  uint64_t v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v27, 0x16u, 0.0, 0);
  a1[376] = 1;
  (*(void (**)(unsigned char *, uint64_t))(*(void *)a1 + 512))(a1, 480);
  uint64_t v38 = 0x40D5888000000000;
  long long v39 = xmmword_1BB87A250;
  long long v40 = xmmword_1BB87A260;
  uint64_t v35 = 0x40D5888000000000;
  long long v37 = xmmword_1BB8727C0;
  long long v36 = xmmword_1BB87A470;
  uint64_t v28 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v28 + 56))(v28, &v38);
  uint64_t v29 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 1u);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v29 + 56))(v29, &v38);
  uint64_t v30 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 2u);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v30 + 56))(v30, &v35);
  uint64_t v31 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v31 + 56))(v31, &v38);
  uint64_t v32 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 1u);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v32 + 56))(v32, &v35);
  uint64_t v33 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 2u);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v33 + 56))(v33, &v35);
  return a1;
}

void sub_1BB40CBD0(_Unwind_Exception *a1)
{
  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMicSelectorV2>::Factory()
{
  double result = malloc_type_malloc(0x5D0uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMicSelectorV2>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMicSelectorV2>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMicSelectorV2>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMicSelectorV2>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 6, 1);
  *(void *)uint64_t v3 = &unk_1F14ADDE8;
  *((unsigned char *)v3 + 528) = 0;
  unsigned int v4 = (AudioComponentInstance *)((char *)v3 + 968);
  *((void *)v3 + 121) = 0;
  *((void *)v3 + 145) = 0;
  *((void *)v3 + 144) = 0;
  *((_OWORD *)v3 + 65) = 0u;
  *((_OWORD *)v3 + 66) = 0u;
  *(_OWORD *)((char *)v3 + 1068) = 0u;
  *((_OWORD *)v3 + 68) = 0u;
  *((_OWORD *)v3 + 70) = 0u;
  *(_OWORD *)((char *)v3 + 1132) = 0u;
  uint64_t v5 = 1192;
  *((_OWORD *)v3 + 69) = 0u;
  do
  {
    uint64_t v6 = a1 + v5;
    *(void *)uint64_t v6 = 0;
    *(void *)(v6 + 8) = 0;
    *(_DWORD *)(v6 + 16) = 0;
    v5 += 24;
  }
  while (v5 != 1264);
  *((void *)v3 + 158) = 0;
  *((void *)v3 + 159) = 0;
  *((_DWORD *)v3 + 320) = 0;
  *(_DWORD *)(a1 + 1412) = 0;
  *(unsigned char *)(a1 + 1416) = 0;
  ausdk::AUBase::CreateElements(a1);
  *(void *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 536) = 0u;
  *(void *)(a1 + 752) = 0;
  *(_OWORD *)(a1 + 760) = 0u;
  *(unsigned char *)(a1 + 376) = 1;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 512))(a1, 128);
  uint64_t Element = ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)Element + 40))(Element, 66);
  uint64_t v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v8, 0, 0.0, 0);
  unsigned int v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v9, 1u, 0.25, 0);
  uint64_t v10 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v10, 2u, 0.6, 0);
  uint64_t v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v11, 3u, 2.0, 0);
  uint64_t v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v12, 4u, 6.0, 0);
  uint64_t v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v13, 5u, 15.0, 0);
  uint64_t v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v14, 6u, 4.0, 0);
  uint64_t v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v15, 7u, 0.0, 0);
  uint64_t v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v16, 0x40u, -120.0, 0);
  uint64_t v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v17, 8u, 7.0, 0);
  long long v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v18, 9u, 20.0, 0);
  long long v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v19, 0xAu, 5.0, 0);
  uint64_t v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v20, 0xBu, 0.0, 0);
  long long v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v21, 0x41u, -140.0, 0);
  long long v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v22, 0xCu, 7.0, 0);
  uint64_t v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v23, 0xDu, 20.0, 0);
  unsigned int v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v24, 0xEu, 4.0, 0);
  long long v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v25, 0xFu, -10.0, 0);
  int v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v26, 0x3Eu, -35.0, 0);
  uint64_t v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v27, 0x10u, 0.0, 0);
  uint64_t v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v28, 0x11u, 0.95, 0);
  uint64_t v29 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v29, 0x12u, 8.0, 0);
  uint64_t v30 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v30, 0x13u, 8.0, 0);
  uint64_t v31 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v31, 0x14u, 20.0, 0);
  uint64_t v32 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v32, 0x15u, 3.0, 0);
  uint64_t v33 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v33, 0x16u, 4.0, 0);
  uint64_t v34 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v34, 0x17u, 4.0, 0);
  uint64_t v35 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v35, 0x18u, 15.0, 0);
  long long v36 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v36, 0x19u, 0.5, 0);
  long long v37 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v37, 0x1Au, 0.5, 0);
  uint64_t v38 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v38, 0x1Bu, 0.0, 0);
  long long v39 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v39, 0x1Eu, 0.0, 0);
  long long v40 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v40, 0x1Fu, 0.0, 0);
  long long v41 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v41, 0x20u, 0.0, 0);
  long long v42 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v42, 0x21u, 0.0, 0);
  int v43 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v43, 0x22u, 0.0, 0);
  int v44 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v44, 0x23u, 0.0, 0);
  unint64_t v45 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v45, 0x24u, 0.0, 0);
  int v46 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v46, 0x25u, 0.0, 0);
  unint64_t v47 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v47, 0x26u, 0.0, 0);
  int v48 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v48, 0x27u, 0.0, 0);
  int v49 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v49, 0x28u, 0.0, 0);
  unint64_t v50 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v50, 0x29u, 0.0, 0);
  int v51 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v51, 0x2Au, 0.0, 0);
  unint64_t v52 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v52, 0x2Bu, 0.0, 0);
  int v53 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v53, 0x30u, 0.0, 0);
  uint64_t v54 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v54, 0x31u, 0.0, 0);
  unint64_t v55 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v55, 0x2Cu, 0.0, 0);
  int v56 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v56, 0x2Du, -83.0, 0);
  unint64_t v57 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v57, 0x2Eu, -65.0, 0);
  int v58 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v58, 0x2Fu, -90.0, 0);
  uint64_t v59 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v59, 0x32u, 0.0, 0);
  unint64_t v60 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v60, 0x33u, 0.0, 0);
  uint64_t v61 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v61, 0x34u, 0.0, 0);
  int v62 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v62, 0x35u, 0.6, 0);
  int v63 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v63, 0x36u, 1.25, 0);
  uint64_t v64 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v64, 0x37u, 4.0, 0);
  uint64_t v65 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v65, 0x38u, 1.0, 0);
  uint64_t v66 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v66, 0x39u, 0.0, 0);
  int v67 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v67, 0x3Au, 0.0, 0);
  int v68 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v68, 0x1Cu, 2.0, 0);
  uint64_t v69 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v69, 0x3Bu, 0.0, 0);
  uint64_t v70 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v70, 0x3Cu, 0.0, 0);
  uint64_t v71 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v71, 0x3Du, 0.0, 0);
  unsigned int v72 = 0;
  *(void *)AudioComponentDescription inDesc = 0x40BF400000000000;
  *(_OWORD *)&inDesc[8] = xmmword_1BB8727B0;
  long long v84 = xmmword_1BB8727C0;
  while (1)
  {
    uint64_t v73 = *(void *)(a1 + 120);
    if (v73) {
      LODWORD(v74) = (*(uint64_t (**)(uint64_t))(*(void *)v73 + 24))(v73);
    }
    else {
      uint64_t v74 = (*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 3;
    }
    if (v72 >= v74) {
      break;
    }
    uint64_t v75 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v72);
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v75 + 56))(v75, inDesc);
    ++v72;
  }
  for (unsigned int i = 0; ; ++i)
  {
    uint64_t v77 = *(void *)(a1 + 168);
    if (v77) {
      LODWORD(v78) = (*(uint64_t (**)(uint64_t))(*(void *)v77 + 24))(v77);
    }
    else {
      uint64_t v78 = (*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 3;
    }
    if (i >= v78) {
      break;
    }
    uint64_t v79 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), i);
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v79 + 56))(v79, inDesc);
  }
  inDesc[13] = 0;
  *(_WORD *)&inDesc[14] = 0;
  *(_DWORD *)&inDesc[16] = 0;
  strcpy(inDesc, "xfuaqebnlppa");
  Next = AudioComponentFindNext(0, (const AudioComponentDescription *)inDesc);
  uint64_t v81 = -24;
  while (!AudioComponentInstanceNew(Next, (AudioComponentInstance *)(a1 + v81 + 560))
       && !AudioComponentInstanceNew(Next, (AudioComponentInstance *)(a1 + v81 + 776)))
  {
    v81 += 8;
    if (!v81)
    {
      AudioComponentInstanceNew(Next, v4);
      return a1;
    }
  }
  return a1;
}

void sub_1BB40D6D0(_Unwind_Exception *a1)
{
  if (*v4) {
    MEMORY[0x1C185D340](*v4, 0x1000C8052888210);
  }
  uint64_t v6 = 0;
  *(void *)(v1 + 1264) = 0;
  uint64_t v7 = v1 + 1240;
  while (1)
  {
    uint64_t v8 = *(void *)(v7 + v6);
    if (v8) {
      MEMORY[0x1C185D340](v8, 0x1000C8052888210);
    }
    *(void *)(v7 + v6) = 0;
    v6 -= 24;
    if (v6 == -72)
    {
      if (*v3)
      {
        (*((void (**)(void))ausdk::BufferAllocator::instance(void)::global + 3))();
        void *v3 = 0;
      }
      *(void *)(v1 + 1160) = 0;
      *(_DWORD *)(v1 + 1144) = 0;
      if (*(void *)(v1 + 1088))
      {
        (*((void (**)(void))ausdk::BufferAllocator::instance(void)::global + 3))();
        void *v2 = 0;
      }
      *(void *)(v1 + 1096) = 0;
      *(_DWORD *)(v1 + 1080) = 0;
      ausdk::AUBase::~AUBase((ausdk::AUBase *)v1);
      _Unwind_Resume(a1);
    }
  }
}

void *ausdk::APFactory<ausdk::AUBaseProcessLookup,AUDeesser>::Factory()
{
  double result = malloc_type_malloc(0x3E8uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUDeesser>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUDeesser>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUDeesser>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUDeesser>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *(void *)uint64_t v3 = &unk_1F14B9340;
  *((_OWORD *)v3 + 33) = 0u;
  *((void *)v3 + 68) = 0x100000000;
  *((void *)v3 + 69) = 0;
  *((_DWORD *)v3 + 140) = 0;
  *((unsigned char *)v3 + 856) = 0;
  *((unsigned char *)v3 + 864) = 0;
  *((unsigned char *)v3 + 888) = 0;
  *((unsigned char *)v3 + 896) = 0;
  *((unsigned char *)v3 + 920) = 0;
  *((_DWORD *)v3 + 232) = 0;
  *((_OWORD *)v3 + 51) = 0u;
  *((unsigned char *)v3 + 832) = 0;
  *((void *)v3 + 71) = 0;
  *((void *)v3 + 73) = 0;
  *((void *)v3 + 72) = 0;
  *((_DWORD *)v3 + 148) = 0;
  *((void *)v3 + 76) = 0;
  *((void *)v3 + 75) = 0;
  *((_DWORD *)v3 + 156) = 0;
  *((void *)v3 + 77) = 0;
  *((void *)v3 + 80) = 0;
  *((_WORD *)v3 + 324) = 0;
  *((void *)v3 + 79) = 0;
  ausdk::AUBase::CreateElements((uint64_t)v3);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(Element, 0, 2500.0, 0);
  uint64_t v5 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v5, 1u, 6000.0, 0);
  uint64_t v6 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v6, 2u, 48000.0, 0);
  uint64_t v7 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v7, 3u, -38.0, 0);
  uint64_t v8 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v8, 5u, -9.0, 0);
  unsigned int v9 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v9, 7u, 24.0, 0);
  uint64_t v10 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v10, 9u, 10.0, 0);
  uint64_t v11 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v11, 0xBu, 100.0, 0);
  uint64_t v12 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v12, 0xDu, -96.0, 0);
  uint64_t v13 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v13, 0xFu, 0.0, 0);
  uint64_t v14 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v14, 0x11u, 0.0, 0);
  uint64_t v15 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v15, 4u, -48.0, 0);
  uint64_t v16 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v16, 6u, -9.0, 0);
  uint64_t v17 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v17, 8u, 24.0, 0);
  long long v18 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v18, 0xAu, 10.0, 0);
  long long v19 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v19, 0xCu, 100.0, 0);
  uint64_t v20 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v20, 0xEu, -96.0, 0);
  long long v21 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v21, 0x10u, 0.0, 0);
  long long v22 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v22, 0x12u, 0.0, 0);
  uint64_t v23 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  uint64_t v35 = 32;
  *(void *)AudioComponentDescription inDesc = 0x40E5888000000000;
  uint64_t v34 = 0x100000004;
  *(_OWORD *)&inDesc[8] = xmmword_1BB8727B0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v23 + 56))(v23, inDesc);
  uint64_t v24 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  uint64_t v35 = 32;
  *(void *)AudioComponentDescription inDesc = 0x40E5888000000000;
  uint64_t v34 = 0x100000004;
  *(_OWORD *)&inDesc[8] = xmmword_1BB8727B0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v24 + 56))(v24, inDesc);
  inDesc[13] = 0;
  *(_WORD *)&inDesc[14] = 0;
  *(_DWORD *)&inDesc[16] = 0;
  strcpy(inDesc, "xfuaqebnlppa");
  Next = AudioComponentFindNext(0, (const AudioComponentDescription *)inDesc);
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  int v26 = (AudioUnit *)(a1 + 816);
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  uint64_t v27 = 736;
  do
  {
    OSStatus v28 = AudioComponentInstanceNew(Next, (AudioComponentInstance *)(a1 + v27));
    if (v28) {
      break;
    }
    BOOL v29 = v27 == 808;
    v27 += 8;
  }
  while (!v29);
  if (!v28)
  {
    inDesc[13] = 0;
    *(_WORD *)&inDesc[14] = 0;
    *(_DWORD *)&inDesc[16] = 0;
    strcpy(inDesc, "xfua2clvlppa");
    uint64_t v30 = AudioComponentFindNext(0, (const AudioComponentDescription *)inDesc);
    if (!AudioComponentInstanceNew(v30, (AudioComponentInstance *)(a1 + 816)))
    {
      AudioUnitSetParameter(*v26, 0xAu, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*v26, 0xBu, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*v26, 0xDu, 0, 0, 2.0, 0);
      AudioUnitSetParameter(*v26, 0xEu, 0, 0, 2.0, 0);
      uint64_t v31 = (AudioUnit *)(a1 + 824);
      if (!AudioComponentInstanceNew(v30, (AudioComponentInstance *)(a1 + 824)))
      {
        AudioUnitSetParameter(*v31, 0xAu, 0, 0, 0.0, 0);
        AudioUnitSetParameter(*v31, 0xBu, 0, 0, 0.0, 0);
        AudioUnitSetParameter(*v31, 0xDu, 0, 0, 2.0, 0);
        AudioUnitSetParameter(*v31, 0xEu, 0, 0, 2.0, 0);
      }
    }
  }
  return a1;
}

void sub_1BB40DDC8(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<ausdk::AUBufferList,false>::~__optional_destruct_base[abi:ne180100](v1 + 896);
  std::__optional_destruct_base<ausdk::AUBufferList,false>::~__optional_destruct_base[abi:ne180100](v1 + 864);
  std::__optional_destruct_base<ausdk::AUBufferList,false>::~__optional_destruct_base[abi:ne180100](v1 + 832);
  CDSPSplitComplex::~CDSPSplitComplex((CDSPSplitComplex *)(v1 + 616));
  CDSPSplitComplex::~CDSPSplitComplex((CDSPSplitComplex *)(v1 + 584));
  CDSPSplitComplex::~CDSPSplitComplex((CDSPSplitComplex *)(v1 + 552));
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessLookup,AUVolumeCompressorV2>::Factory()
{
  double result = malloc_type_malloc(0x738uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUVolumeCompressorV2>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUVolumeCompressorV2>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUVolumeCompressorV2>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUVolumeCompressorV2>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *(void *)uint64_t v3 = &unk_1F14B0680;
  *((void *)v3 + 93) = 0;
  *((void *)v3 + 97) = 0;
  unsigned int v4 = (char *)v3 + 1040;
  *(void *)(a1 + 528) = 0;
  *(_WORD *)(a1 + 536) = 0;
  uint64_t v5 = 784;
  do
  {
    uint64_t v6 = a1 + v5;
    *(void *)uint64_t v6 = 0;
    *(_DWORD *)(v6 + 8) = 0;
    *(void *)(v6 + 16) = 0;
    *(void *)(v6 + 24) = 0;
    v5 += 32;
  }
  while ((void *)(v6 + 32) != v4);
  bzero(v4, 0x228uLL);
  *(_DWORD *)(a1 + 1676) = 5;
  *(_OWORD *)(a1 + 1680) = 0u;
  uint64_t v7 = operator new(0x20uLL);
  *(void *)(a1 + 1680) = v7;
  *uint64_t v7 = 0u;
  v7[1] = 0u;
  *(void *)(a1 + 1688) = v7 + 2;
  *(_OWORD *)(a1 + 1696) = 0u;
  uint64_t v8 = operator new(0x20uLL);
  *(void *)(a1 + 1696) = v8;
  *uint64_t v8 = 0u;
  v8[1] = 0u;
  *(void *)(a1 + 1704) = v8 + 2;
  *(_DWORD *)(a1 + 1712) = 5;
  unsigned int v9 = (void *)(a1 + 1720);
  *(_OWORD *)(a1 + 1720) = 0u;
  uint64_t v10 = operator new(0x20uLL);
  *(void *)(a1 + 1720) = v10;
  *uint64_t v10 = 0u;
  v10[1] = 0u;
  *(void *)(a1 + 1728) = v10 + 2;
  *(_OWORD *)(a1 + 1736) = 0u;
  uint64_t v11 = operator new(0x20uLL);
  *(void *)(a1 + 1736) = v11;
  *uint64_t v11 = 0u;
  v11[1] = 0u;
  *(void *)(a1 + 1744) = v11 + 2;
  *(_OWORD *)(a1 + 1752) = 0u;
  uint64_t v12 = operator new(0x20uLL);
  *(void *)(a1 + 1752) = v12;
  _OWORD *v12 = 0u;
  v12[1] = 0u;
  *(void *)(a1 + 1760) = v12 + 2;
  *(void *)(a1 + 1768) = 1;
  *(_DWORD *)(a1 + 1776) = 0;
  ausdk::AUBase::CreateElements(a1);
  uint64_t v73 = 0x40E5888000000000;
  long long v74 = xmmword_1BB8727B0;
  long long v75 = xmmword_1BB879EA0;
  uint64_t Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)Element + 56))(Element, &v73);
  uint64_t v14 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v14 + 56))(v14, &v73);
  *(_OWORD *)(a1 + 1624) = 0u;
  *(_OWORD *)(a1 + 1640) = 0u;
  *(_OWORD *)(a1 + 1592) = 0u;
  *(_OWORD *)(a1 + 1608) = 0u;
  *(void *)(a1 + 592) = 0xC2980000C28C0000;
  *(void *)(a1 + 648) = 0xBF8000003F800000;
  *(_DWORD *)(a1 + 640) = 1128792064;
  *(_DWORD *)(a1 + 600) = 529;
  *(void *)(a1 + 624) = 0x3F800000C1F00000;
  *(_DWORD *)(a1 + 632) = 1065353216;
  *(_DWORD *)(a1 + 1676) = 5;
  *(_DWORD *)(a1 + 1712) = 5;
  *(_OWORD *)(a1 + 608) = xmmword_1BB87A480;
  *(unsigned char *)(a1 + 752) = 0;
  *(_OWORD *)(a1 + 560) = xmmword_1BB87A490;
  *(_OWORD *)(a1 + 576) = 0u;
  *(void *)(a1 + 656) = 0x4080000000000000;
  *(unsigned char *)(a1 + 684) = 0;
  *(_DWORD *)(a1 + 664) = 0;
  *(_OWORD *)(a1 + 688) = xmmword_1BB87A4A0;
  *(_OWORD *)(a1 + 760) = 0u;
  float v15 = (float)(44100.0 / (float)*(unsigned int *)(a1 + 336)) * 360.0;
  float v16 = 0.0;
  if (v15 >= 0.00001) {
    float v16 = expf(-4.6052 / v15);
  }
  *(float *)(a1 + 704) = 1.0 - v16;
  uint64_t v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v17, 0, -199.0, 0);
  long long v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v18, 0xFu, 0.0, 0);
  long long v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v19, 1u, 0.0, 0);
  uint64_t v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v20, 2u, 0.0, 0);
  long long v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v21, 3u, 0.0, 0);
  long long v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v22, 4u, -70.0, 0);
  uint64_t v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v23, 5u, -76.0, 0);
  uint64_t v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v24, 0x3Cu, -70.0, 0);
  long long v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v25, 0x3Du, -76.0, 0);
  int v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v26, 6u, 1.0, 0);
  uint64_t v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v27, 7u, -1.0, 0);
  OSStatus v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v28, 8u, 200.0, 0);
  BOOL v29 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v29, 9u, 12.0, 0);
  uint64_t v30 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v30, 0xBu, 0.0, 0);
  uint64_t v31 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v31, 0xAu, -60.0, 0);
  uint64_t v32 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v32, 0x14u, 0.5, 0);
  uint64_t v33 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v33, 0x1Eu, -30.0, 0);
  uint64_t v34 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v34, 0xCu, 1.0, 0);
  uint64_t v35 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v35, 0x10u, 1.0, 0);
  long long v36 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v36, 0xDu, 5.0, 0);
  long long v37 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v37, 0xEu, 5.0, 0);
  uint64_t v38 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v38, 0x11u, 0.0, 0);
  long long v39 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v39, 0x12u, 0.0, 0);
  long long v40 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v40, 0x41u, 0.0, 0);
  long long v41 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v41, 0x43u, 4.0, 0);
  long long v42 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v42, 0x42u, 0.0, 0);
  int v43 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v43, 0x44u, 0.004, 0);
  int v44 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v44, 0x45u, 0.008, 0);
  unint64_t v45 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v45, 0x46u, -6.0, 0);
  int v46 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v46, 0x47u, 0.0, 0);
  unint64_t v47 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v47, 0x48u, 0.0, 0);
  int v48 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v48, 0x49u, 360.0, 0);
  int v49 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v49, 0x4Au, 0.003, 0);
  unint64_t v50 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v50, 0x4Bu, 0.012, 0);
  int v51 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v51, 0x4Cu, -6.0, 0);
  unint64_t v52 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v52, 0x3Eu, 0.0, 0);
  int v53 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v53, 0x3Fu, 0.0, 0);
  uint64_t v54 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  float v55 = 0.0;
  ausdk::AUElement::SetParameter(v54, 0x40u, 0.0, 0);
  float v56 = *(float *)(a1 + 616);
  float v57 = (float)(*(float *)(a1 + 612) - v56) / 6.0;
  int v58 = *(_DWORD **)(a1 + 1680);
  *int v58 = 0;
  uint64_t v59 = *(void *)(a1 + 1696);
  *(float *)uint64_t v59 = v56;
  v58[7] = 1065353216;
  *(_DWORD *)(v59 + 28) = *(_DWORD *)(a1 + 612);
  for (uint64_t i = 1; i != 6; ++i)
  {
    float v55 = v55 + 0.16667;
    float v56 = v57 + v56;
    *(float *)(*(void *)(a1 + 1680) + 4 * i) = v55;
    *(float *)(*(void *)(a1 + 1696) + 4 * i) = v56;
    uint64_t v61 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
    ausdk::AUElement::SetParameter(v61, i + 19, v55, 0);
    int v62 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
    ausdk::AUElement::SetParameter(v62, i + 29, v56, 0);
  }
  **(_DWORD **)(a1 + 1720) = -1031012352;
  **(_DWORD **)(a1 + 1752) = 1065353216;
  LODWORD(v63) = *(_DWORD *)(a1 + 1712);
  if (!v63) {
    goto LABEL_12;
  }
  float v64 = -70.0;
  unint64_t v65 = 1;
  do
  {
    float v64 = v64 + 11.667;
    *(float *)(*v9 + 4 * v65) = v64;
    *(float *)(*(void *)(a1 + 1752) + 4 * v65) = 1.0 / (float)v65;
    uint64_t v66 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
    ausdk::AUElement::SetParameter(v66, v65 + 39, *(float *)(*v9 + 4 * v65), 0);
    int v67 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
    ausdk::AUElement::SetParameter(v67, v65 + 49, 1.0, 0);
    unint64_t v63 = *(unsigned int *)(a1 + 1712);
  }
  while (v65++ < v63);
  if (v63 < 5)
  {
LABEL_12:
    unsigned int v69 = v63 + 40;
    do
    {
      uint64_t v70 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
      ausdk::AUElement::SetParameter(v70, v69, *(float *)(*(void *)(a1 + 1720) + 4 * (*(_DWORD *)(a1 + 1712) - 1)), 0);
      uint64_t v71 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
      ausdk::AUElement::SetParameter(v71, v69 + 10, 1.0, 0);
      ++v69;
    }
    while (v69 != 45);
    LODWORD(v63) = *(_DWORD *)(a1 + 1712);
  }
  *(float *)(*(void *)(a1 + 1720) + 4 * (v63 + 1)) = *(float *)(*(void *)(a1 + 1720)
                                                                                + 4 * (v63 + 1))
                                                                     + 100.0;
  ausdk::AUBase::SetAFactoryPresetAsCurrent((char *)a1, (const AUPreset *)&sAUVolumeCompressorV2Presets);
  return a1;
}

void sub_1BB40E800(_Unwind_Exception *a1)
{
  uint64_t v8 = (unsigned char *)*((void *)v1 + 219);
  if (v8)
  {
    unsigned int v9 = (unsigned char *)*((void *)v1 + 220);
    if (v9 != v8) {
      *((void *)v1 + 220) = &v9[(v8 - v9 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v8);
    *uint64_t v6 = 0;
    v6[1] = 0;
  }
  uint64_t v10 = (unsigned char *)*((void *)v1 + 217);
  if (v10)
  {
    uint64_t v11 = (unsigned char *)*((void *)v1 + 218);
    if (v11 != v10) {
      *((void *)v1 + 218) = &v11[(v10 - v11 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v10);
    *uint64_t v5 = 0;
    v5[1] = 0;
  }
  uint64_t v12 = (unsigned char *)*((void *)v1 + 215);
  if (v12)
  {
    uint64_t v13 = (unsigned char *)*((void *)v1 + 216);
    if (v13 != v12) {
      *((void *)v1 + 216) = &v13[(v12 - v13 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v12);
    void *v4 = 0;
    v4[1] = 0;
  }
  uint64_t v14 = (unsigned char *)*((void *)v1 + 212);
  if (v14)
  {
    float v15 = (unsigned char *)*((void *)v1 + 213);
    if (v15 != v14) {
      *((void *)v1 + 213) = &v15[(v14 - v15 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v14);
    void *v3 = 0;
    v3[1] = 0;
  }
  float v16 = (unsigned char *)*((void *)v1 + 210);
  if (v16)
  {
    uint64_t v17 = (unsigned char *)*((void *)v1 + 211);
    if (v17 != v16) {
      *((void *)v1 + 211) = &v17[(v16 - v17 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v16);
    void *v2 = 0;
    v2[1] = 0;
  }
  uint64_t v18 = 0;
  while (1)
  {
    long long v19 = (void *)((char *)v1 + v18);
    uint64_t v20 = *(unsigned char **)((char *)v1 + v18 + 1576);
    if (v20)
    {
      long long v21 = (unsigned char *)v19[198];
      if (v21 != v20) {
        v19[198] = &v21[(v20 - v21 + 3) & 0xFFFFFFFFFFFFFFFCLL];
      }
      long long v22 = v19 + 197;
      operator delete(v20);
      *long long v22 = 0;
      v22[1] = 0;
    }
    v18 -= 16;
    if (v18 == -128)
    {
      uint64_t v23 = 0;
      while (1)
      {
        uint64_t v24 = (void *)((char *)v1 + v23);
        long long v25 = *(unsigned char **)((char *)v1 + v23 + 1448);
        if (v25)
        {
          int v26 = (unsigned char *)v24[182];
          if (v26 != v25) {
            v24[182] = &v26[(v25 - v26 + 3) & 0xFFFFFFFFFFFFFFFCLL];
          }
          uint64_t v27 = v24 + 181;
          operator delete(v25);
          void *v27 = 0;
          v27[1] = 0;
        }
        v23 -= 16;
        if (v23 == -128)
        {
          uint64_t v28 = 0;
          while (1)
          {
            BOOL v29 = (void *)((char *)v1 + v28);
            uint64_t v30 = *(unsigned char **)((char *)v1 + v28 + 1320);
            if (v30)
            {
              uint64_t v31 = (unsigned char *)v29[166];
              if (v31 != v30) {
                v29[166] = &v31[(v30 - v31 + 3) & 0xFFFFFFFFFFFFFFFCLL];
              }
              uint64_t v32 = v29 + 165;
              operator delete(v30);
              void *v32 = 0;
              v32[1] = 0;
            }
            v28 -= 16;
            if (v28 == -128)
            {
              uint64_t v33 = 0;
              while (1)
              {
                uint64_t v34 = (void *)((char *)v1 + v33);
                uint64_t v35 = *(unsigned char **)((char *)v1 + v33 + 1192);
                if (v35)
                {
                  long long v36 = (unsigned char *)v34[150];
                  if (v36 != v35) {
                    v34[150] = &v36[(v35 - v36 + 3) & 0xFFFFFFFFFFFFFFFCLL];
                  }
                  long long v37 = v34 + 149;
                  operator delete(v35);
                  void *v37 = 0;
                  v37[1] = 0;
                }
                v33 -= 16;
                if (v33 == -128)
                {
                  for (uint64_t i = 0; i != -256; i -= 32)
                    CDSPSplitComplex::~CDSPSplitComplex((ausdk::AUBase *)((char *)v1 + i + 1008));
                  uint64_t v39 = *((void *)v1 + 93);
                  if (v39)
                  {
                    (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
                    *((void *)v1 + 93) = 0;
                  }
                  ausdk::AUBase::~AUBase(v1);
                  _Unwind_Resume(a1);
                }
              }
            }
          }
        }
      }
    }
  }
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEchoGateV3>::Factory()
{
  double result = malloc_type_malloc(0x378uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEchoGateV3>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEchoGateV3>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEchoGateV3>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

unsigned char *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEchoGateV3>::Construct(unsigned char *a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 8, 1);
  *(void *)uint64_t v3 = &unk_1F14AA3A0;
  *((unsigned char *)v3 + 528) = 0;
  *((void *)v3 + 67) = 0;
  *((unsigned char *)v3 + 544) = 0;
  *((unsigned char *)v3 + 568) = 0;
  *((void *)v3 + 72) = 0;
  *((_DWORD *)v3 + 146) = 0;
  *(_OWORD *)((char *)v3 + 596) = 0u;
  *(_OWORD *)((char *)v3 + 616) = 0u;
  *(_OWORD *)((char *)v3 + 632) = 0u;
  *(_OWORD *)((char *)v3 + 648) = 0u;
  *(_OWORD *)((char *)v3 + 664) = 0u;
  *(_OWORD *)((char *)v3 + 680) = 0u;
  *(_OWORD *)((char *)v3 + 696) = 0u;
  *((void *)v3 + 89) = 0x3F800000447A0000;
  *((void *)v3 + 90) = 1112014848;
  *((_DWORD *)v3 + 182) = 1065353216;
  *(_OWORD *)((char *)v3 + 732) = 0u;
  *((_DWORD *)v3 + 189) = 0;
  *(void *)((char *)v3 + 748) = 0;
  *((void *)v3 + 95) = 1;
  *((_WORD *)v3 + 384) = 0;
  *(void *)((char *)v3 + 772) = 0xF1000000F0;
  *((void *)v3 + 98) = 0;
  *((_WORD *)v3 + 396) = 0;
  *((void *)v3 + 100) = 0;
  unsigned int v4 = (caulk::deferred_logger **)egt3Subsystem();
  caulk::deferred_logger::create_v(*v4, v5);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUBase::CreateElements((uint64_t)a1);
  (*(void (**)(ausdk::AUElement *, uint64_t))(*(void *)Element + 40))(Element, 47);
  ausdk::AUElement::SetParameter(Element, 0, 0.0, 0);
  ausdk::AUElement::SetParameter(Element, 1u, 0.0, 0);
  ausdk::AUElement::SetParameter(Element, 2u, 0.0, 0);
  ausdk::AUElement::SetParameter(Element, 3u, 0.0, 0);
  ausdk::AUElement::SetParameter(Element, 5u, 0.0, 0);
  ausdk::AUElement::SetParameter(Element, 4u, 0.0, 0);
  ausdk::AUElement::SetParameter(Element, 6u, -95.0, 0);
  ausdk::AUElement::SetParameter(Element, 7u, 0.0, 0);
  ausdk::AUElement::SetParameter(Element, 8u, -70.0, 0);
  ausdk::AUElement::SetParameter(Element, 9u, 10.0, 0);
  ausdk::AUElement::SetParameter(Element, 0xAu, 5.0, 0);
  ausdk::AUElement::SetParameter(Element, 0xBu, 1.0, 0);
  ausdk::AUElement::SetParameter(Element, 0xCu, 2.0, 0);
  ausdk::AUElement::SetParameter(Element, 0xDu, 0.0, 0);
  ausdk::AUElement::SetParameter(Element, 0xEu, 0.0, 0);
  ausdk::AUElement::SetParameter(Element, 0xFu, 20.0, 0);
  ausdk::AUElement::SetParameter(Element, 0x10u, 0.0, 0);
  ausdk::AUElement::SetParameter(Element, 0x11u, 0.0, 0);
  ausdk::AUElement::SetParameter(Element, 0x12u, 10.0, 0);
  ausdk::AUElement::SetParameter(Element, 0x13u, 0.0, 0);
  ausdk::AUElement::SetParameter(Element, 0x14u, 1.0, 0);
  ausdk::AUElement::SetParameter(Element, 0x15u, 0.0, 0);
  ausdk::AUElement::SetParameter(Element, 0x16u, 1.0, 0);
  ausdk::AUElement::SetParameter(Element, 0x17u, 1.0, 0);
  ausdk::AUElement::SetParameter(Element, 0x18u, 10.0, 0);
  ausdk::AUElement::SetParameter(Element, 0x19u, 15.0, 0);
  ausdk::AUElement::SetParameter(Element, 0x1Au, 6.0, 0);
  ausdk::AUElement::SetParameter(Element, 0x23u, -60.0, 0);
  ausdk::AUElement::SetParameter(Element, 0x24u, 0.0, 0);
  ausdk::AUElement::SetParameter(Element, 0x25u, 200.0, 0);
  ausdk::AUElement::SetParameter(Element, 0x26u, -14.0, 0);
  ausdk::AUElement::SetParameter(Element, 0x27u, 18.0, 0);
  ausdk::AUElement::SetParameter(Element, 0x28u, 0.5, 0);
  ausdk::AUElement::SetParameter(Element, 0x29u, 2.0, 0);
  ausdk::AUElement::SetParameter(Element, 0x2Au, 0.0, 0);
  ausdk::AUElement::SetParameter(Element, 0x2Bu, 48.0, 0);
  ausdk::AUElement::SetParameter(Element, 0x2Cu, 60.0, 0);
  ausdk::AUElement::SetParameter(Element, 0x2Du, 30.0, 0);
  ausdk::AUElement::SetParameter(Element, 0x2Eu, 0.25, 0);
  ausdk::AUElement::SetParameter(Element, 0x1Bu, 2.5, 0);
  ausdk::AUElement::SetParameter(Element, 0x1Cu, 0.0, 0);
  ausdk::AUElement::SetParameter(Element, 0x1Du, 2.0, 0);
  ausdk::AUElement::SetParameter(Element, 0x1Eu, 2.0, 0);
  ausdk::AUElement::SetParameter(Element, 0x1Fu, -5.0, 0);
  ausdk::AUElement::SetParameter(Element, 0x20u, -12.0, 0);
  ausdk::AUElement::SetParameter(Element, 0x21u, 10.0, 0);
  ausdk::AUElement::SetParameter(Element, 0x22u, 4.0, 0);
  uint64_t v23 = 0x40D5888000000000;
  long long v24 = xmmword_1BB8727B0;
  long long v25 = xmmword_1BB8727C0;
  uint64_t v7 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 56))(v7, &v23);
  a1[588] = 0;
  uint64_t v8 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v8 + 56))(v8, &v23);
  uint64_t v20 = 0x40D5888000000000;
  long long v22 = xmmword_1BB87A260;
  long long v21 = xmmword_1BB87A250;
  uint64_t v9 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 2u);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v9 + 56))(v9, &v20);
  a1[590] = 1;
  uint64_t v10 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 3u);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v10 + 56))(v10, &v20);
  a1[591] = 1;
  uint64_t v11 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 1u);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v11 + 56))(v11, &v20);
  a1[589] = 1;
  uint64_t v17 = 0x40D5888000000000;
  long long v18 = xmmword_1BB87A470;
  long long v19 = xmmword_1BB8727C0;
  uint64_t v12 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 4u);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v12 + 56))(v12, &v17);
  a1[592] = 0;
  uint64_t v13 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 5u);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v13 + 56))(v13, &v17);
  a1[593] = 0;
  uint64_t v14 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 6u);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v14 + 56))(v14, &v17);
  a1[594] = 0;
  uint64_t v15 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 7u);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v15 + 56))(v15, &v17);
  a1[595] = 0;
  a1[376] = 1;
  (*(void (**)(unsigned char *, uint64_t))(*(void *)a1 + 512))(a1, 240);
  return a1;
}

void sub_1BB40F2E8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 759) < 0) {
    operator delete(*(void **)(v1 + 736));
  }
  unsigned int v4 = *(void **)(v1 + 688);
  if (v4)
  {
    *(void *)(v1 + 696) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(v1 + 664);
  if (v5)
  {
    *(void *)(v1 + 672) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(v1 + 640);
  if (v6)
  {
    *(void *)(v1 + 648) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 624) = v7;
    operator delete(v7);
  }
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUResidualEchoSuppressorV5>::Factory()
{
  double result = malloc_type_malloc(0x308uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUResidualEchoSuppressorV5>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUResidualEchoSuppressorV5>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUResidualEchoSuppressorV5>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUResidualEchoSuppressorV5>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = (void *)(a1 + 540);
  unsigned int v4 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 6, 4);
  *(void *)unsigned int v4 = &unk_1F14AA8A0;
  *((unsigned char *)v4 + 528) = 0;
  *(void *)((char *)v4 + 532) = 0;
  *((void *)v4 + 69) = 0x1E1000001E0;
  v3[3] = 0x400000006;
  *((_WORD *)v4 + 316) = 256;
  *((_OWORD *)v4 + 36) = 0u;
  *((_DWORD *)v4 + 159) = 1048576000;
  *((_OWORD *)v4 + 41) = 0u;
  *((_OWORD *)v4 + 42) = 0u;
  *((void *)v4 + 86) = 24;
  *((_DWORD *)v4 + 174) = 1065353216;
  *((unsigned char *)v4 + 700) = 0;
  *((_DWORD *)v4 + 176) = 1101004800;
  ausdk::AUBase::CreateElements((uint64_t)v4);
  uint64_t v5 = *(void *)(a1 + 120);
  if (v5) {
    LODWORD(v6) = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  else {
    uint64_t v6 = (*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 3;
  }
  *(_DWORD *)(a1 + 564) = v6;
  uint64_t v7 = *(void *)(a1 + 168);
  if (v7) {
    LODWORD(v8) = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 24))(v7);
  }
  else {
    uint64_t v8 = (*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 3;
  }
  *(_DWORD *)(a1 + 568) = v8;
  uint64_t Element = ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)Element + 40))(Element, 50);
  uint64_t v10 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v10, 0, 1.0, 0);
  uint64_t v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v11, 1u, -15.0, 0);
  uint64_t v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v12, 2u, -15.0, 0);
  uint64_t v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v13, 3u, 0.0, 0);
  uint64_t v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v14, 4u, 0.0, 0);
  uint64_t v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v15, 5u, 0.0, 0);
  float v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v16, 6u, 1.0, 0);
  uint64_t v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v17, 6u, 0.0, 0);
  long long v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v18, 8u, 1.0, 0);
  long long v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v19, 9u, 1.0, 0);
  uint64_t v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v20, 0xAu, 0.0, 0);
  long long v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v21, 0xBu, -12.0, 0);
  long long v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v22, 0xCu, -25.0, 0);
  uint64_t v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v23, 0xDu, 0.0, 0);
  long long v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v24, 0xEu, 0.92, 0);
  long long v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v25, 0xFu, 0.87, 0);
  int v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v26, 0x10u, 25.0, 0);
  uint64_t v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v27, 0x11u, 25.0, 0);
  uint64_t v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v28, 0x12u, 25.0, 0);
  BOOL v29 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v29, 0x13u, 0.0, 0);
  uint64_t v30 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v30, 0x14u, 0.0, 0);
  uint64_t v31 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v31, 0x15u, 1.0, 0);
  uint64_t v32 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v32, 0x16u, -6.0, 0);
  uint64_t v33 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v33, 0x17u, -6.0, 0);
  uint64_t v34 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v34, 0x18u, 1.0, 0);
  uint64_t v35 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v35, 0x19u, 1.0, 0);
  long long v36 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v36, 0x1Au, 2000.0, 0);
  long long v37 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v37, 0x1Bu, -10.0, 0);
  uint64_t v38 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v38, 0x1Cu, -70.0, 0);
  uint64_t v39 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v39, 0x1Du, 0.0, 0);
  long long v40 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v40, 0x1Eu, -6.0, 0);
  long long v41 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v41, 0x1Fu, 10.0, 0);
  long long v42 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v42, 0x20u, 0.0, 0);
  int v43 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v43, 0x21u, 80.0, 0);
  int v44 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v44, 0x22u, 2.0, 0);
  unint64_t v45 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v45, 0x23u, 40.0, 0);
  int v46 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v46, 0x24u, 0.0, 0);
  unint64_t v47 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v47, 0x25u, 0.0, 0);
  int v48 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v48, 0x26u, 0.0, 0);
  int v49 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v49, 0x27u, 0.0, 0);
  unint64_t v50 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v50, 0x28u, 1.0e-20, 0);
  int v51 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v51, 0x29u, 0.0, 0);
  unint64_t v52 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v52, 0x2Au, 0.0, 0);
  int v53 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v53, 0x2Bu, 0.0, 0);
  uint64_t v54 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v54, 0x2Cu, 0.0, 0);
  float v55 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v55, 0x2Du, 0.0, 0);
  float v56 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v56, 0x2Eu, 1.0, 0);
  float v57 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v57, 0x2Fu, 0.0, 0);
  int v58 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v58, 0x30u, 0.0, 0);
  uint64_t v59 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v59, 0x31u, 1.0, 0);
  *(_WORD *)(a1 + 616) = 0;
  *(unsigned char *)(a1 + 618) = 0;
  *(_DWORD *)(a1 + 620) = 0;
  unint64_t v60 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  *(float *)(a1 + 624) = ausdk::AUElement::GetParameter(v60, 0x28u);
  uint64_t v61 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  unsigned int Parameter = ausdk::AUElement::GetParameter(v61, 0x2Bu);
  if (Parameter >= 2) {
    unsigned int Parameter = 2;
  }
  *(_DWORD *)(a1 + 628) = Parameter;
  unint64_t v63 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  *(_DWORD *)(a1 + 560) = ausdk::AUElement::GetParameter(v63, 8u);
  float v64 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  *(unsigned char *)(a1 + 640) = ausdk::AUElement::GetParameter(v64, 0x2Cu) != 0.0;
  unint64_t v65 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  *(float *)(a1 + 644) = ausdk::AUElement::GetParameter(v65, 0x2Du);
  uint64_t v66 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  *(_DWORD *)(a1 + 648) = (int)ausdk::AUElement::GetParameter(v66, 0x2Eu);
  int v67 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  *(_DWORD *)(a1 + 652) = (int)ausdk::AUElement::GetParameter(v67, 0x2Fu);
  int v68 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  *(_DWORD *)(a1 + 692) = ausdk::AUElement::GetParameter(v68, 0x30u);
  unsigned int v69 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  *(float *)(a1 + 696) = ausdk::AUElement::GetParameter(v69, 0x31u);
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(void *)(a1 + 608) = 0;
  uint64_t v84 = 0x40D5888000000000;
  long long v85 = xmmword_1BB87A250;
  long long v86 = xmmword_1BB87A260;
  uint64_t v70 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v70 + 56))(v70, &v84);
  uint64_t v71 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 1u);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v71 + 56))(v71, &v84);
  uint64_t v72 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 2u);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v72 + 56))(v72, &v84);
  uint64_t v73 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v73 + 56))(v73, &v84);
  if (*((_DWORD *)v3 + 6) >= 6u)
  {
    uint64_t v74 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 5u);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v74 + 56))(v74, &v84);
  }
  if (*(_DWORD *)(a1 + 568) >= 2u)
  {
    uint64_t v75 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 1u);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v75 + 56))(v75, &v84);
  }
  uint64_t v81 = 0x40D5888000000000;
  long long v83 = xmmword_1BB8727C0;
  long long v82 = xmmword_1BB8727B0;
  if (*((_DWORD *)v3 + 6) >= 4u)
  {
    uint64_t v76 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 3u);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v76 + 56))(v76, &v81);
    if (*((_DWORD *)v3 + 6) >= 5u)
    {
      uint64_t v77 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 4u);
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v77 + 56))(v77, &v81);
    }
  }
  if (*(_DWORD *)(a1 + 568) >= 3u)
  {
    uint64_t v78 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 2u);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v78 + 56))(v78, &v81);
    if (*(_DWORD *)(a1 + 568) >= 4u)
    {
      uint64_t v79 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 3u);
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v79 + 56))(v79, &v81);
    }
  }
  void *v3 = 0x101010000010101;
  *(_WORD *)(a1 + 548) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 512))(a1, 480);
  *(unsigned char *)(a1 + 376) = 1;
  return a1;
}

void sub_1BB40FF1C(_Unwind_Exception *a1)
{
  uint64_t v3 = (void *)*((void *)v1 + 83);
  if (v3)
  {
    *((void *)v1 + 84) = v3;
    operator delete(v3);
  }
  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUResidualEchoSuppressorV4>::Factory()
{
  double result = malloc_type_malloc(0x280uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUResidualEchoSuppressorV4>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUResidualEchoSuppressorV4>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUResidualEchoSuppressorV4>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUResidualEchoSuppressorV4>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 5, 2);
  *(void *)uint64_t v3 = &unk_1F14BF110;
  *((unsigned char *)v3 + 528) = 0;
  *(void *)((char *)v3 + 532) = 0;
  *((_OWORD *)v3 + 35) = 0u;
  ausdk::AUBase::CreateElements((uint64_t)v3);
  uint64_t Element = ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)Element + 40))(Element, 37);
  uint64_t v5 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v5, 0, 1.0, 0);
  uint64_t v6 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v6, 1u, -15.0, 0);
  uint64_t v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v7, 2u, -15.0, 0);
  uint64_t v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v8, 3u, 0.0, 0);
  uint64_t v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v9, 4u, 0.0, 0);
  uint64_t v10 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v10, 5u, 0.0, 0);
  uint64_t v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v11, 6u, 1.0, 0);
  uint64_t v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v12, 6u, 0.0, 0);
  uint64_t v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v13, 8u, 1.0, 0);
  uint64_t v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v14, 9u, 1.0, 0);
  uint64_t v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v15, 0xAu, 0.0, 0);
  float v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v16, 0xBu, -12.0, 0);
  uint64_t v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v17, 0xCu, -25.0, 0);
  long long v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v18, 0xDu, 0.0, 0);
  long long v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v19, 0xEu, 0.92, 0);
  uint64_t v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v20, 0xFu, 0.87, 0);
  long long v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v21, 0x10u, 25.0, 0);
  long long v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v22, 0x11u, 25.0, 0);
  uint64_t v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v23, 0x12u, 25.0, 0);
  long long v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v24, 0x13u, 0.0, 0);
  long long v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v25, 0x14u, 0.0, 0);
  int v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v26, 0x15u, 1.0, 0);
  uint64_t v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v27, 0x16u, -6.0, 0);
  uint64_t v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v28, 0x17u, -6.0, 0);
  BOOL v29 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v29, 0x18u, 1.0, 0);
  uint64_t v30 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v30, 0x19u, 1.0, 0);
  uint64_t v31 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v31, 0x1Au, 2000.0, 0);
  uint64_t v32 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v32, 0x1Bu, -10.0, 0);
  uint64_t v33 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v33, 0x1Cu, -70.0, 0);
  uint64_t v34 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v34, 0x1Du, 0.0, 0);
  uint64_t v35 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v35, 0x1Eu, -6.0, 0);
  long long v36 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v36, 0x1Fu, 10.0, 0);
  long long v37 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v37, 0x20u, 0.0, 0);
  uint64_t v38 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v38, 0x21u, 80.0, 0);
  uint64_t v39 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v39, 0x22u, 2.0, 0);
  long long v40 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v40, 0x23u, 40.0, 0);
  long long v41 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v41, 0x24u, 0.0, 0);
  uint64_t v53 = 0x40D5888000000000;
  long long v54 = xmmword_1BB87A250;
  long long v55 = xmmword_1BB87A260;
  uint64_t v42 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v42 + 56))(v42, &v53);
  uint64_t v43 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 1u);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v43 + 56))(v43, &v53);
  uint64_t v44 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 2u);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v44 + 56))(v44, &v53);
  uint64_t v45 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v45 + 56))(v45, &v53);
  uint64_t v50 = 0x40D5888000000000;
  long long v52 = xmmword_1BB8727C0;
  long long v51 = xmmword_1BB8727B0;
  uint64_t v46 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 3u);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v46 + 56))(v46, &v50);
  uint64_t v47 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 4u);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v47 + 56))(v47, &v50);
  uint64_t v48 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 1u);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v48 + 56))(v48, &v50);
  *(_DWORD *)(a1 + 540) = 65793;
  *(_WORD *)(a1 + 544) = 256;
  *(unsigned char *)(a1 + 546) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 512))(a1, 480);
  *(unsigned char *)(a1 + 376) = 1;
  return a1;
}

void sub_1BB4106C4(_Unwind_Exception *a1)
{
  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUResidualEchoSuppressorV3>::Factory()
{
  double result = malloc_type_malloc(0x278uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUResidualEchoSuppressorV3>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUResidualEchoSuppressorV3>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUResidualEchoSuppressorV3>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUResidualEchoSuppressorV3>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 4, 2);
  *(void *)uint64_t v3 = &unk_1F14B8A00;
  *((unsigned char *)v3 + 528) = 0;
  *(void *)((char *)v3 + 532) = 0;
  *((void *)v3 + 70) = 0;
  ausdk::AUBase::CreateElements((uint64_t)v3);
  uint64_t Element = ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)Element + 40))(Element, 36);
  uint64_t v5 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v5, 0, 1.0, 0);
  uint64_t v6 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v6, 1u, -15.0, 0);
  uint64_t v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v7, 2u, -15.0, 0);
  uint64_t v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v8, 3u, 0.0, 0);
  uint64_t v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v9, 4u, 0.0, 0);
  uint64_t v10 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v10, 5u, 0.0, 0);
  uint64_t v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v11, 6u, 1.0, 0);
  uint64_t v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v12, 6u, 0.0, 0);
  uint64_t v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v13, 8u, 1.0, 0);
  uint64_t v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v14, 9u, 1.0, 0);
  uint64_t v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v15, 0xAu, 0.0, 0);
  float v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v16, 0xBu, -12.0, 0);
  uint64_t v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v17, 0xCu, -25.0, 0);
  long long v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v18, 0xDu, 0.0, 0);
  long long v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v19, 0xEu, 0.92, 0);
  uint64_t v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v20, 0xFu, 0.87, 0);
  long long v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v21, 0x10u, 25.0, 0);
  long long v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v22, 0x11u, 25.0, 0);
  uint64_t v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v23, 0x12u, 25.0, 0);
  long long v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v24, 0x13u, 0.0, 0);
  long long v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v25, 0x14u, 0.0, 0);
  int v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v26, 0x15u, 1.0, 0);
  uint64_t v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v27, 0x16u, -6.0, 0);
  uint64_t v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v28, 0x17u, -6.0, 0);
  BOOL v29 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v29, 0x18u, 1.0, 0);
  uint64_t v30 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v30, 0x19u, 1.0, 0);
  uint64_t v31 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v31, 0x1Au, 2000.0, 0);
  uint64_t v32 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v32, 0x1Bu, -10.0, 0);
  uint64_t v33 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v33, 0x1Cu, -70.0, 0);
  uint64_t v34 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v34, 0x1Du, 0.0, 0);
  uint64_t v35 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v35, 0x1Eu, -6.0, 0);
  long long v36 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v36, 0x1Fu, 10.0, 0);
  long long v37 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v37, 0x20u, 0.0, 0);
  uint64_t v38 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v38, 0x21u, 80.0, 0);
  uint64_t v39 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v39, 0x22u, 2.0, 0);
  long long v40 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v40, 0x23u, 40.0, 0);
  uint64_t v51 = 0x40D5888000000000;
  long long v52 = xmmword_1BB87A250;
  long long v53 = xmmword_1BB87A260;
  uint64_t v41 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v41 + 56))(v41, &v51);
  uint64_t v42 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 1u);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v42 + 56))(v42, &v51);
  uint64_t v43 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 2u);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v43 + 56))(v43, &v51);
  uint64_t v44 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v44 + 56))(v44, &v51);
  uint64_t v48 = 0x40D5888000000000;
  long long v50 = xmmword_1BB8727C0;
  long long v49 = xmmword_1BB8727B0;
  uint64_t v45 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 3u);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v45 + 56))(v45, &v48);
  uint64_t v46 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 1u);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v46 + 56))(v46, &v48);
  *(_DWORD *)(a1 + 540) = 65793;
  *(_WORD *)(a1 + 544) = 1;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 512))(a1, 480);
  *(unsigned char *)(a1 + 376) = 1;
  return a1;
}

void sub_1BB410E00(_Unwind_Exception *a1)
{
  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpeechLevelEstimator>::Factory()
{
  double result = malloc_type_malloc(0x320uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpeechLevelEstimator>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpeechLevelEstimator>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpeechLevelEstimator>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

unsigned char *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpeechLevelEstimator>::Construct(unsigned char *a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *(void *)uint64_t v3 = &unk_1F14C0960;
  *((void *)v3 + 66) = 1186693120;
  *((_DWORD *)v3 + 134) = 0;
  *((unsigned char *)v3 + 540) = 1;
  *((void *)v3 + 68) = 0xF1000000F0;
  *((_DWORD *)v3 + 138) = 0;
  *((_DWORD *)v3 + 139) = 65793;
  *((_OWORD *)v3 + 35) = xmmword_1BB87A4B0;
  *((void *)v3 + 72) = 0;
  *((void *)v3 + 74) = 0;
  *((void *)v3 + 73) = 0;
  *((_WORD *)v3 + 300) = 0;
  *((_OWORD *)v3 + 38) = 0u;
  *((_OWORD *)v3 + 39) = 0u;
  *((_OWORD *)v3 + 40) = 0u;
  *((_OWORD *)v3 + 41) = 0u;
  *((_OWORD *)v3 + 42) = 0u;
  *((_OWORD *)v3 + 43) = 0u;
  *((_OWORD *)v3 + 44) = 0u;
  *((void *)v3 + 90) = 0;
  *((_DWORD *)v3 + 182) = 1065353216;
  ausdk::AUBase::CreateElements((uint64_t)v3);
  uint64_t Element = ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)Element + 40))(Element, 16);
  uint64_t v5 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v5, 0, 0.0, 0);
  uint64_t v6 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v6, 1u, 64.0, 0);
  uint64_t v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v7, 2u, 1.0, 0);
  uint64_t v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v8, 3u, 1.0, 0);
  uint64_t v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v9, 4u, 1.0, 0);
  uint64_t v10 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v10, 5u, 0.0, 0);
  uint64_t v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v11, 6u, 0.0, 0);
  uint64_t v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v12, 7u, 0.0, 0);
  uint64_t v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v13, 8u, 0.9, 0);
  uint64_t v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v14, 9u, -100.0, 0);
  uint64_t v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v15, 0xAu, 1.0, 0);
  float v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v16, 0xBu, -100.0, 0);
  uint64_t v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v17, 0xCu, 64.0, 0);
  long long v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v18, 0xDu, 64.0, 0);
  long long v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v19, 0xEu, 64.0, 0);
  uint64_t v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v20, 0xFu, 64.0, 0);
  uint64_t v24 = 0x40E5888000000000;
  long long v25 = xmmword_1BB87A250;
  long long v26 = xmmword_1BB87A260;
  uint64_t v21 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v21 + 56))(v21, &v24);
  uint64_t v22 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v22 + 56))(v22, &v24);
  a1[540] = 1;
  a1[376] = 1;
  return a1;
}

void sub_1BB41122C(_Unwind_Exception *a1)
{
  uint64_t v3 = (void *)v1[88];
  if (v3)
  {
    v1[89] = v3;
    operator delete(v3);
  }
  unsigned int v4 = (void *)v1[85];
  if (v4)
  {
    v1[86] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)v1[82];
  if (v5)
  {
    v1[83] = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)v1[79];
  if (v6)
  {
    v1[80] = v6;
    operator delete(v6);
  }
  uint64_t v7 = v1[78];
  v1[78] = 0;
  if (v7) {
    std::default_delete<SPLMeter<float,AWeight>>::operator()[abi:ne180100](v7);
  }
  uint64_t v8 = (void **)(v1 + 76);
  uint64_t v9 = v1[77];
  v1[77] = 0;
  if (v9) {
    std::default_delete<SPLMeter<float,AWeight>>::operator()[abi:ne180100](v9);
  }
  uint64_t v10 = *v8;
  *uint64_t v8 = 0;
  if (v10) {
    std::default_delete<SmoothedNoiseEstimator<float,NoiseSuppression::Noise::HendriksSPP>>::operator()[abi:ne180100](v10);
  }
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUOneChannelNoiseEstimator>::Factory()
{
  double result = malloc_type_malloc(0x2B0uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUOneChannelNoiseEstimator>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUOneChannelNoiseEstimator>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUOneChannelNoiseEstimator>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

unsigned char *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUOneChannelNoiseEstimator>::Construct(unsigned char *a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *(void *)uint64_t v3 = &unk_1F14C2478;
  *((_DWORD *)v3 + 132) = 0;
  *((unsigned char *)v3 + 532) = 1;
  *((_DWORD *)v3 + 134) = 240;
  *((_OWORD *)v3 + 34) = 0u;
  *((_OWORD *)v3 + 35) = 0u;
  *((_OWORD *)v3 + 36) = 0u;
  *((_OWORD *)v3 + 37) = 0u;
  *((void *)v3 + 76) = 0;
  ausdk::AUBase::CreateElements((uint64_t)v3);
  uint64_t Element = ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)Element + 40))(Element, 4);
  uint64_t v5 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v5, 0, 64.0, 0);
  uint64_t v6 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v6, 1u, 0.0, 0);
  uint64_t v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v7, 2u, 64.0, 0);
  uint64_t v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v8, 3u, 64.0, 0);
  uint64_t v12 = 0x40E5888000000000;
  long long v13 = xmmword_1BB87A250;
  long long v14 = xmmword_1BB87A260;
  uint64_t v9 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v9 + 56))(v9, &v12);
  uint64_t v10 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v10 + 56))(v10, &v12);
  a1[532] = 1;
  a1[376] = 1;
  return a1;
}

void sub_1BB411520(_Unwind_Exception *a1)
{
  uint64_t v3 = (void *)v1[74];
  if (v3)
  {
    v1[75] = v3;
    operator delete(v3);
  }
  unsigned int v4 = (void *)v1[71];
  if (v4)
  {
    v1[72] = v4;
    operator delete(v4);
  }
  uint64_t v5 = v1[70];
  v1[70] = 0;
  if (v5) {
    std::default_delete<SPLMeter<float,AWeight>>::operator()[abi:ne180100](v5);
  }
  uint64_t v6 = (void **)(v1 + 68);
  uint64_t v7 = v1[69];
  v1[69] = 0;
  if (v7) {
    std::default_delete<SPLMeter<float,AWeight>>::operator()[abi:ne180100](v7);
  }
  uint64_t v8 = *v6;
  *uint64_t v6 = 0;
  if (v8) {
    std::default_delete<SmoothedNoiseEstimator<float,NoiseSuppression::Noise::HendriksSPP>>::operator()[abi:ne180100](v8);
  }
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUOneChannelNSV4>::Factory()
{
  double result = malloc_type_malloc(0x2B8uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUOneChannelNSV4>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUOneChannelNSV4>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUOneChannelNSV4>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUOneChannelNSV4>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 3, 3);
  *(void *)uint64_t v3 = &unk_1F14AEBC8;
  *((void *)v3 + 66) = 0;
  *((unsigned char *)v3 + 536) = 0;
  *(void *)((char *)v3 + 540) = 0;
  *((_WORD *)v3 + 274) = 0;
  *(_OWORD *)((char *)v3 + 552) = 0u;
  *(_OWORD *)((char *)v3 + 568) = 0u;
  *((void *)v3 + 73) = 0;
  *((void *)v3 + 74) = 1065353216;
  *((_DWORD *)v3 + 150) = 0;
  *((void *)v3 + 77) = 0;
  *((void *)v3 + 76) = 0;
  ausdk::AUBase::CreateElements((uint64_t)v3);
  uint64_t Element = ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)Element + 40))(Element, 11);
  uint64_t v5 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v5, 0, -18.0, 0);
  uint64_t v6 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v6, 1u, 0.0, 0);
  uint64_t v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v7, 2u, 40.0, 0);
  uint64_t v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v8, 3u, 0.0, 0);
  uint64_t v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v9, 4u, 0.0, 0);
  uint64_t v10 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v10, 5u, 40.0, 0);
  uint64_t v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v11, 6u, 80.0, 0);
  uint64_t v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v12, 7u, 5.0, 0);
  long long v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v13, 8u, 0.0, 0);
  long long v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v14, 9u, 1000.0, 0);
  uint64_t v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v15, 0xAu, 0.0, 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 512))(a1, 1024);
  uint64_t v30 = 0x40CF400000000000;
  long long v31 = xmmword_1BB87A250;
  long long v32 = xmmword_1BB87A260;
  uint64_t v27 = 0x40CF400000000000;
  long long v29 = xmmword_1BB8727C0;
  long long v28 = xmmword_1BB87A470;
  uint64_t v16 = *(void *)(a1 + 120);
  if (v16) {
    LODWORD(v17) = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 24))(v16);
  }
  else {
    uint64_t v17 = (*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 3;
  }
  *(_DWORD *)(a1 + 624) = v17;
  uint64_t v18 = *(void *)(a1 + 168);
  if (v18) {
    LODWORD(v19) = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 24))(v18);
  }
  else {
    uint64_t v19 = (*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 3;
  }
  *(_DWORD *)(a1 + 628) = v19;
  uint64_t v20 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v20 + 56))(v20, &v30);
  if (*(_DWORD *)(a1 + 624) >= 2u)
  {
    uint64_t v21 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 1u);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v21 + 56))(v21, &v27);
    if (*(_DWORD *)(a1 + 624) >= 3u)
    {
      uint64_t v22 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 2u);
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v22 + 56))(v22, &v27);
    }
  }
  uint64_t v23 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v23 + 56))(v23, &v30);
  if (*(_DWORD *)(a1 + 628) >= 2u)
  {
    uint64_t v24 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 1u);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v24 + 56))(v24, &v27);
    if (*(_DWORD *)(a1 + 628) >= 3u)
    {
      uint64_t v25 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 2u);
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v25 + 56))(v25, &v27);
    }
  }
  return a1;
}

void sub_1BB411A98(_Unwind_Exception *a1)
{
  std::unique_ptr<BlockProcessor>::reset[abi:ne180100](v1 + 66, 0);
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUOneChannelNS>::Factory()
{
  double result = malloc_type_malloc(0x2B8uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUOneChannelNS>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUOneChannelNS>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUOneChannelNS>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUOneChannelNS>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 2, 2);
  *(void *)uint64_t v3 = &unk_1F14BC228;
  *((void *)v3 + 66) = 0;
  *((unsigned char *)v3 + 536) = 0;
  *(void *)((char *)v3 + 540) = 0;
  *((_WORD *)v3 + 274) = 0;
  *(_OWORD *)((char *)v3 + 552) = 0u;
  *(_OWORD *)((char *)v3 + 568) = 0u;
  *(_OWORD *)((char *)v3 + 580) = 0u;
  *((void *)v3 + 75) = 1065353216;
  *((_DWORD *)v3 + 152) = 0;
  *((void *)v3 + 78) = 0;
  *((void *)v3 + 77) = 0;
  ausdk::AUBase::CreateElements((uint64_t)v3);
  uint64_t Element = ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)Element + 40))(Element, 8);
  uint64_t v5 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v5, 0, -6.0, 0);
  uint64_t v6 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v6, 1u, 0.0, 0);
  uint64_t v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v7, 2u, 40.0, 0);
  uint64_t v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v8, 3u, 0.0, 0);
  uint64_t v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v9, 4u, 0.0, 0);
  uint64_t v10 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v10, 5u, 40.0, 0);
  uint64_t v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v11, 6u, 80.0, 0);
  uint64_t v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v12, 7u, 5.0, 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 512))(a1, 1024);
  uint64_t v21 = 0x40D5888000000000;
  long long v22 = xmmword_1BB87A250;
  long long v23 = xmmword_1BB87A260;
  uint64_t v18 = 0x40D5888000000000;
  long long v20 = xmmword_1BB8727C0;
  long long v19 = xmmword_1BB87A470;
  uint64_t v13 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v13 + 56))(v13, &v21);
  uint64_t v14 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 1u);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v14 + 56))(v14, &v18);
  uint64_t v15 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v15 + 56))(v15, &v21);
  uint64_t v16 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 1u);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v16 + 56))(v16, &v18);
  return a1;
}

void sub_1BB411E58(_Unwind_Exception *a1)
{
  std::unique_ptr<BlockProcessor>::reset[abi:ne180100](v1 + 66, 0);
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSubBandMultEchoCanceler>::Factory()
{
  double result = malloc_type_malloc(0xED0uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSubBandMultEchoCanceler>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSubBandMultEchoCanceler>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSubBandMultEchoCanceler>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSubBandMultEchoCanceler>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 2, 3);
  *(void *)uint64_t v3 = &unk_1F14AB798;
  *((unsigned char *)v3 + 528) = 0;
  *(void *)((char *)v3 + 532) = 0;
  unsigned int v4 = (_OWORD *)((char *)v3 + 568);
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_DWORD *)(a1 + 608) = 0;
  *(_DWORD *)(a1 + 1456) = 0;
  *(_OWORD *)((char *)v3 + 1464) = 0u;
  *(_OWORD *)((char *)v3 + 1480) = 0u;
  *(_OWORD *)((char *)v3 + 1496) = 0u;
  *(_OWORD *)((char *)v3 + 1512) = 0u;
  *(_OWORD *)((char *)v3 + 1528) = 0u;
  *(_OWORD *)((char *)v3 + 1544) = 0u;
  *(_OWORD *)(a1 + 1557) = 0u;
  *(_DWORD *)(a1 + 1672) = 0;
  *((_OWORD *)v3 + 105) = 0u;
  *((_OWORD *)v3 + 106) = 0u;
  *((_OWORD *)v3 + 107) = 0u;
  *((_OWORD *)v3 + 108) = 0u;
  *((_OWORD *)v3 + 109) = 0u;
  *((_OWORD *)v3 + 110) = 0u;
  *(_OWORD *)((char *)v3 + 1773) = 0u;
  *(_DWORD *)(a1 + 1888) = 0;
  *(_OWORD *)((char *)v3 + 1896) = 0u;
  *(_OWORD *)((char *)v3 + 1912) = 0u;
  *(_OWORD *)((char *)v3 + 1928) = 0u;
  *(_OWORD *)((char *)v3 + 1944) = 0u;
  *(_OWORD *)((char *)v3 + 1960) = 0u;
  *(_OWORD *)((char *)v3 + 1976) = 0u;
  *(_OWORD *)(a1 + 1989) = 0u;
  *(_DWORD *)(a1 + 2104) = 0;
  *((_OWORD *)v3 + 132) = 0u;
  *((_OWORD *)v3 + 133) = 0u;
  *((_OWORD *)v3 + 134) = 0u;
  *((_OWORD *)v3 + 135) = 0u;
  *((_OWORD *)v3 + 136) = 0u;
  *((_OWORD *)v3 + 137) = 0u;
  *(_OWORD *)((char *)v3 + 2205) = 0u;
  *(_DWORD *)(a1 + 2320) = 0;
  *(_OWORD *)((char *)v3 + 2328) = 0u;
  *(_OWORD *)((char *)v3 + 2344) = 0u;
  *(_OWORD *)((char *)v3 + 2360) = 0u;
  *(_OWORD *)((char *)v3 + 2376) = 0u;
  *(_OWORD *)((char *)v3 + 2392) = 0u;
  *(_OWORD *)((char *)v3 + 2408) = 0u;
  *(_OWORD *)(a1 + 2421) = 0u;
  *(_DWORD *)(a1 + 2616) = 0;
  *(void *)(a1 + 2608) = 0;
  *((_OWORD *)v3 + 162) = 0u;
  *((_OWORD *)v3 + 165) = 0u;
  *((_OWORD *)v3 + 166) = 0u;
  *((_OWORD *)v3 + 167) = 0u;
  *((_OWORD *)v3 + 168) = 0u;
  *((_OWORD *)v3 + 169) = 0u;
  *((_OWORD *)v3 + 170) = 0u;
  *((_OWORD *)v3 + 171) = 0u;
  *((_OWORD *)v3 + 172) = 0u;
  *((_OWORD *)v3 + 164) = 0u;
  *(_OWORD *)((char *)v3 + 2764) = 0u;
  *(_DWORD *)(a1 + 2864) = 0;
  *(_OWORD *)(a1 + 2848) = 0u;
  *(_OWORD *)(a1 + 2832) = 0u;
  *(_OWORD *)(a1 + 2816) = 0u;
  *(_OWORD *)(a1 + 2800) = 0u;
  *(_OWORD *)(a1 + 2784) = 0u;
  *(_DWORD *)(a1 + 2896) = 0;
  *(void *)(a1 + 2888) = 0;
  *(_OWORD *)((char *)v3 + 2872) = 0u;
  *(_OWORD *)((char *)v3 + 3044) = 0u;
  *(_OWORD *)((char *)v3 + 3032) = 0u;
  *(_OWORD *)((char *)v3 + 3016) = 0u;
  *(_OWORD *)((char *)v3 + 3000) = 0u;
  *(_OWORD *)((char *)v3 + 2984) = 0u;
  *(_OWORD *)((char *)v3 + 2968) = 0u;
  *(_OWORD *)((char *)v3 + 2952) = 0u;
  *(_OWORD *)((char *)v3 + 2936) = 0u;
  *(_OWORD *)((char *)v3 + 2920) = 0u;
  *(_OWORD *)((char *)v3 + 2904) = 0u;
  *(_DWORD *)(a1 + 3080) = 0;
  *(_OWORD *)((char *)v3 + 3064) = 0u;
  *(_DWORD *)(a1 + 3248) = 0;
  *((_OWORD *)v3 + 202) = 0u;
  *((_OWORD *)v3 + 201) = 0u;
  *((_OWORD *)v3 + 200) = 0u;
  *((_OWORD *)v3 + 199) = 0u;
  *((_OWORD *)v3 + 198) = 0u;
  *((_OWORD *)v3 + 197) = 0u;
  *((_OWORD *)v3 + 196) = 0u;
  *((_OWORD *)v3 + 195) = 0u;
  *((_OWORD *)v3 + 194) = 0u;
  *((_OWORD *)v3 + 193) = 0u;
  *(_DWORD *)(a1 + 3464) = 0;
  *(_OWORD *)((char *)v3 + 3448) = 0u;
  *(_OWORD *)((char *)v3 + 3432) = 0u;
  *(_OWORD *)((char *)v3 + 3416) = 0u;
  *(_OWORD *)((char *)v3 + 3400) = 0u;
  *(_OWORD *)((char *)v3 + 3384) = 0u;
  *(_OWORD *)((char *)v3 + 3368) = 0u;
  *(_OWORD *)((char *)v3 + 3352) = 0u;
  *(_OWORD *)((char *)v3 + 3336) = 0u;
  *(_OWORD *)((char *)v3 + 3320) = 0u;
  *(_OWORD *)((char *)v3 + 3304) = 0u;
  *(void *)(a1 + 3592) = 0;
  *(void *)(a1 + 3584) = 0;
  *(_DWORD *)(a1 + 3608) = 0;
  *(void *)(a1 + 3600) = 0;
  *(_WORD *)(a1 + 568) = 0;
  *(unsigned char *)(a1 + 570) = 0;
  *(void *)(a1 + 3616) = 0;
  *(_DWORD *)(a1 + 3624) = 0;
  *(_DWORD *)(a1 + 3696) = 0;
  *(_OWORD *)(a1 + 3680) = 0u;
  *(_OWORD *)(a1 + 3664) = 0u;
  *(_OWORD *)(a1 + 3648) = 0u;
  *(_OWORD *)(a1 + 3632) = 0u;
  bzero((char *)v3 + 616, 0x345uLL);
  *(_OWORD *)(a1 + 1653) = 0u;
  v4[67] = 0u;
  v4[66] = 0u;
  v4[65] = 0u;
  v4[63] = 0u;
  v4[64] = 0u;
  *(_OWORD *)((char *)v4 + 1224) = 0u;
  *(_OWORD *)((char *)v4 + 1240) = 0u;
  *(_OWORD *)((char *)v4 + 1256) = 0u;
  *(_OWORD *)((char *)v4 + 1272) = 0u;
  *(_OWORD *)((char *)v4 + 1288) = 0u;
  *(_OWORD *)((char *)v4 + 1301) = 0u;
  v4[90] = 0u;
  v4[91] = 0u;
  v4[92] = 0u;
  v4[93] = 0u;
  v4[94] = 0u;
  *(_OWORD *)(a1 + 2085) = 0u;
  *(_OWORD *)((char *)v4 + 1733) = 0u;
  *(_OWORD *)((char *)v4 + 1720) = 0u;
  *(_OWORD *)((char *)v4 + 1704) = 0u;
  *(_OWORD *)((char *)v4 + 1688) = 0u;
  *(_OWORD *)((char *)v4 + 1672) = 0u;
  *(_OWORD *)((char *)v4 + 1656) = 0u;
  *(_DWORD *)(a1 + 2584) = 0;
  v4[125] = 0u;
  v4[124] = 0u;
  v4[123] = 0u;
  v4[122] = 0u;
  v4[121] = 0u;
  v4[120] = 0u;
  v4[119] = 0u;
  v4[118] = 0u;
  v4[117] = 0u;
  *(_OWORD *)((char *)v4 + 2716) = 0u;
  v4[169] = 0u;
  v4[168] = 0u;
  *(_OWORD *)(a1 + 3516) = 0u;
  *(_OWORD *)(a1 + 3504) = 0u;
  *(_OWORD *)(a1 + 3488) = 0u;
  *(_OWORD *)(a1 + 3472) = 0u;
  *(_OWORD *)(a1 + 3536) = 0u;
  *(_OWORD *)(a1 + 3552) = 0u;
  *(_OWORD *)(a1 + 3564) = 0u;
  *(_DWORD *)(a1 + 3700) = 3;
  *(void *)(a1 + 3704) = 0;
  ausdk::AUBase::CreateElements(a1);
  unsigned int v5 = 0;
  uint64_t v28 = 0x40CF400000000000;
  long long v29 = xmmword_1BB8727B0;
  long long v30 = xmmword_1BB8727C0;
  while (1)
  {
    uint64_t v6 = *(void *)(a1 + 120);
    if (v6) {
      LODWORD(v7) = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6);
    }
    else {
      uint64_t v7 = (*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 3;
    }
    if (v5 >= v7) {
      break;
    }
    uint64_t Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v5);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)Element + 56))(Element, &v28);
    ++v5;
  }
  for (unsigned int i = 0; ; ++i)
  {
    uint64_t v10 = *(void *)(a1 + 168);
    if (v10) {
      LODWORD(v11) = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 24))(v10);
    }
    else {
      uint64_t v11 = (*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 3;
    }
    if (i >= v11) {
      break;
    }
    uint64_t v12 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), i);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v12 + 56))(v12, &v28);
  }
  uint64_t v13 = ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 40))(v13, 13);
  uint64_t v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v14, 0, 80.0, 0);
  uint64_t v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v15, 1u, 2.0, 0);
  uint64_t v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v16, 3u, 120.0, 0);
  uint64_t v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v17, 2u, 480.0, 0);
  uint64_t v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v18, 4u, 1.0, 0);
  long long v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v19, 5u, 1.0, 0);
  long long v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v20, 6u, 0.0, 0);
  uint64_t v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v21, 7u, 0.0, 0);
  long long v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v22, 8u, 0.0, 0);
  long long v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v23, 9u, 0.0, 0);
  uint64_t v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v24, 0xAu, 0.0, 0);
  uint64_t v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v25, 0xBu, 2.0, 0);
  long long v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v26, 0xBu, 1.0, 0);
  *(unsigned char *)(a1 + 376) = 1;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 512))(a1, 120);
  *(void *)(a1 + 3704) = 0;
  *(_DWORD *)(a1 + 3712) = 0;
  return a1;
}

void sub_1BB412574(_Unwind_Exception *a1)
{
  AUsubMAEC::myAecCore::~myAecCore(v2);
  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUTTYEchoSuppressor>::Factory()
{
  double result = malloc_type_malloc(0x300uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUTTYEchoSuppressor>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUTTYEchoSuppressor>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUTTYEchoSuppressor>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUTTYEchoSuppressor>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 2, 1);
  *(void *)uint64_t v3 = &unk_1F14C2780;
  *((unsigned char *)v3 + 528) = 0;
  *((_DWORD *)v3 + 133) = 1;
  *((void *)v3 + 67) = 0;
  *((_DWORD *)v3 + 140) = 0;
  *(void *)((char *)v3 + 588) = 1;
  *((_DWORD *)v3 + 153) = 0;
  *((void *)v3 + 80) = 1;
  ausdk::AUBase::CreateElements((uint64_t)v3);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(Element, 0, -27.0, 0);
  unsigned int v5 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v5, 1u, -27.0, 0);
  uint64_t v6 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v6, 2u, -40.0, 0);
  uint64_t v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v7, 3u, 0.001, 0);
  uint64_t v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v8, 4u, 0.01, 0);
  uint64_t v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v9, 5u, 0.001, 0);
  uint64_t v10 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v10, 6u, 0.001, 0);
  uint64_t v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v11, 7u, 0.02, 0);
  uint64_t v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v12, 8u, 0.01, 0);
  uint64_t v17 = 0x40E5888000000000;
  long long v18 = xmmword_1BB8727B0;
  long long v19 = xmmword_1BB8727C0;
  uint64_t v13 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v13 + 56))(v13, &v17);
  uint64_t v14 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 1u);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v14 + 56))(v14, &v17);
  uint64_t v15 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v15 + 56))(v15, &v17);
  return a1;
}

void sub_1BB41289C(_Unwind_Exception *a1)
{
  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUECMicRef>::Factory()
{
  double result = malloc_type_malloc(0x360uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUECMicRef>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUECMicRef>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUECMicRef>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUECMicRef>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 3, 3);
  *(void *)uint64_t v3 = &unk_1F14B4480;
  *((unsigned char *)v3 + 528) = 0;
  *(void *)((char *)v3 + 532) = 0;
  *((void *)v3 + 77) = 850045863;
  *((_OWORD *)v3 + 39) = 0u;
  *((_OWORD *)v3 + 40) = 0u;
  *((_OWORD *)v3 + 41) = 0u;
  *((void *)v3 + 84) = 0;
  unsigned int v4 = (uint64_t *)((char *)v3 + 728);
  unsigned int v5 = (uint64_t *)((char *)v3 + 792);
  *((void *)v3 + 99) = 0;
  *(_OWORD *)((char *)v3 + 728) = 0u;
  *(_OWORD *)((char *)v3 + 744) = 0u;
  *(_OWORD *)((char *)v3 + 760) = 0u;
  *(_OWORD *)((char *)v3 + 769) = 0u;
  ausdk::AUBase::CreateElements((uint64_t)v3);
  uint64_t v41 = 0x40CF400000000000;
  long long v42 = xmmword_1BB8727B0;
  long long v43 = xmmword_1BB879E90;
  uint64_t v38 = 0x40CF400000000000;
  long long v39 = xmmword_1BB8727B0;
  long long v40 = xmmword_1BB879EA0;
  uint64_t Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)Element + 56))(Element, &v41);
  uint64_t v7 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 1u);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 56))(v7, &v38);
  uint64_t v8 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 2u);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v8 + 56))(v8, &v41);
  uint64_t v9 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v9 + 56))(v9, &v41);
  uint64_t v10 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 1u);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v10 + 56))(v10, &v41);
  uint64_t v11 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 2u);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v11 + 56))(v11, &v38);
  uint64_t v12 = ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 40))(v12, 23);
  uint64_t v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v13, 0, 160.0, 0);
  uint64_t v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v14, 1u, -60.0, 0);
  uint64_t v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v15, 2u, -60.0, 0);
  uint64_t v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v16, 3u, 7.0, 0);
  uint64_t v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v17, 4u, -120.0, 0);
  long long v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v18, 5u, 2.0, 0);
  long long v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v19, 6u, -20.0, 0);
  long long v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v20, 7u, 2.0, 0);
  uint64_t v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v21, 8u, 3333.0, 0);
  long long v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v22, 9u, 0.5, 0);
  long long v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v23, 0xAu, 0.032, 0);
  uint64_t v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v24, 0xBu, 3.0, 0);
  uint64_t v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v25, 0xCu, -80.0, 0);
  long long v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v26, 0xDu, 32.0, 0);
  uint64_t v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v27, 0xEu, 0.0, 0);
  uint64_t v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v28, 0xFu, 0.0, 0);
  long long v29 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v29, 0x10u, 0.0, 0);
  long long v30 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v30, 0x11u, 1.0, 0);
  long long v31 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v31, 0x12u, 0.0, 0);
  long long v32 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v32, 0x13u, 2.0, 0);
  uint64_t v33 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v33, 0x14u, -160.0, 0);
  uint64_t v34 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v34, 0x15u, 30.0, 0);
  uint64_t v35 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v35, 0x16u, 0.0, 0);
  *(unsigned char *)(a1 + 376) = 1;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 512))(a1, 512);
  uint64_t v36 = *v4;
  uint64_t *v4 = 0;
  if (v36) {
    (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
  }
  *(void *)(a1 + 540) = 0x3E80000000A0;
  *(_DWORD *)(a1 + 548) = *(_DWORD *)(a1 + 336);
  *(void *)(a1 + 552) = 0x200000004;
  *(_DWORD *)(a1 + 572) = 32;
  *(void *)(a1 + 576) = 0;
  *(_DWORD *)(a1 + 588) = 2;
  *(void *)(a1 + 592) = 0x41F00000C3200000;
  *(_OWORD *)(a1 + 680) = xmmword_1BB87A4C0;
  *(_OWORD *)(a1 + 696) = xmmword_1BB87A4D0;
  *(_OWORD *)(a1 + 712) = xmmword_1BB87A4E0;
  std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100](v5, 0);
  return a1;
}

void sub_1BB412F2C(_Unwind_Exception *a1)
{
  std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100](v3, 0);
  uint64_t v6 = (void *)*((void *)v1 + 95);
  if (v6)
  {
    *((void *)v1 + 96) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)v1 + 92);
  if (v7)
  {
    *((void *)v1 + 93) = v7;
    operator delete(v7);
  }
  uint64_t v8 = *v4;
  uint64_t *v4 = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  std::mutex::~mutex(v2);
  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUECRMDF>::Factory()
{
  double result = malloc_type_malloc(0x320uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUECRMDF>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUECRMDF>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUECRMDF>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUECRMDF>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = (_OWORD *)(a1 + 532);
  unsigned int v4 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 2, 3);
  *(void *)unsigned int v4 = &unk_1F14C3278;
  *((unsigned char *)v4 + 528) = 0;
  _OWORD *v3 = xmmword_1BB87A4F0;
  v3[1] = xmmword_1BB87A500;
  v3[2] = xmmword_1BB87A510;
  *(void *)((char *)v4 + 580) = 0x140800000;
  *((_DWORD *)v4 + 147) = 1086324736;
  *((unsigned char *)v4 + 592) = 1;
  *(void *)((char *)v4 + 596) = 0x100000000;
  *((_DWORD *)v4 + 151) = 1133903872;
  *((void *)v4 + 76) = 0x3E99999A44E10000;
  *((void *)v4 + 77) = 0;
  *((_OWORD *)v4 + 39) = 0u;
  *((_DWORD *)v4 + 160) = 1065353216;
  *((unsigned char *)v4 + 644) = 0;
  *(_OWORD *)((char *)v3 + 116) = xmmword_1BB87A520;
  *((void *)v4 + 83) = 0xC08000003F800000;
  *((unsigned char *)v4 + 672) = 0;
  *((_DWORD *)v4 + 169) = 1008981770;
  *((unsigned char *)v4 + 680) = 0;
  *((unsigned char *)v4 + 688) = 0;
  *((unsigned char *)v4 + 696) = 0;
  *((unsigned char *)v4 + 704) = 0;
  *((unsigned char *)v4 + 712) = 0;
  unsigned int v5 = (void *)((char *)v4 + 720);
  *((_OWORD *)v4 + 45) = 0u;
  ausdk::AUBase::CreateElements((uint64_t)v4);
  uint64_t v49 = 0x40D7700000000000;
  long long v50 = xmmword_1BB8727B0;
  long long v51 = xmmword_1BB879E90;
  uint64_t v46 = 0x40D7700000000000;
  long long v48 = xmmword_1BB879EA0;
  long long v47 = xmmword_1BB8727B0;
  uint64_t Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)Element + 56))(Element, &v49);
  uint64_t v7 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 1u);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 56))(v7, &v46);
  uint64_t v8 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v8 + 56))(v8, &v49);
  uint64_t v9 = *(void *)(a1 + 168);
  if (v9) {
    LODWORD(v10) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 24))(v9);
  }
  else {
    uint64_t v10 = (*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 3;
  }
  if (v10 >= 2)
  {
    uint64_t v11 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 1u);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v11 + 56))(v11, &v49);
    if (v10 != 2)
    {
      uint64_t v12 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 2u);
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v12 + 56))(v12, &v46);
    }
  }
  uint64_t v13 = ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 40))(v13, 30);
  uint64_t v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v14, 0, 360.0, 0);
  uint64_t v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v15, 1u, -120.0, 0);
  uint64_t v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v16, 2u, 20.0, 0);
  uint64_t v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v17, 3u, 3.0, 0);
  long long v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v18, 4u, -120.0, 0);
  long long v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v19, 5u, 4.0, 0);
  long long v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v20, 6u, 1.0, 0);
  uint64_t v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v21, 7u, 6.0, 0);
  long long v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v22, 8u, 1.0, 0);
  long long v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v23, 9u, 0.0, 0);
  uint64_t v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v24, 0xAu, 1.0, 0);
  uint64_t v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v25, 0xBu, 300.0, 0);
  long long v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v26, 0xCu, 1800.0, 0);
  uint64_t v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v27, 0xDu, 0.3, 0);
  uint64_t v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v28, 0xEu, 0.0, 0);
  long long v29 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v29, 0xFu, 0.0, 0);
  long long v30 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v30, 0x10u, 10.0, 0);
  long long v31 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v31, 0x11u, 0.0, 0);
  long long v32 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v32, 0x12u, 0.0, 0);
  uint64_t v33 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v33, 0x13u, 1.0, 0);
  uint64_t v34 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v34, 0x14u, 0.0, 0);
  uint64_t v35 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v35, 0x15u, 40.0, 0);
  uint64_t v36 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v36, 0x16u, 120.0, 0);
  long long v37 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v37, 0x17u, 0.1, 0);
  uint64_t v38 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v38, 0x18u, -10.0, 0);
  long long v39 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v39, 0x19u, 0.0, 0);
  long long v40 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v40, 0x1Au, -4.0, 0);
  uint64_t v41 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v41, 0x1Bu, 0.0, 0);
  long long v42 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v42, 0x1Cu, 0.01, 0);
  long long v43 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v43, 0x1Du, 0.0, 0);
  *(unsigned char *)(a1 + 376) = 1;
  uint64_t v44 = (caulk::concurrent::messenger *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 512))(a1, 480);
  if (!*v5)
  {
    caulk::concurrent::messenger::shared_logging_priority(v44);
    operator new();
  }
  return a1;
}

void sub_1BB413724(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v3, 0x20C40A4A59CD2);
  std::unique_ptr<ecRMDF>::reset[abi:ne180100](v1 + 91, 0);
  std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100](v2, 0);
  std::__optional_destruct_base<CA::AudioBuffers,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(v1 + 88));
  std::__optional_destruct_base<CA::AudioBuffers,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(v1 + 86));
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUECRMGS>::Factory()
{
  double result = malloc_type_malloc(0x2A8uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUECRMGS>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUECRMGS>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUECRMGS>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUECRMGS>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 2, 3);
  *(void *)uint64_t v3 = &unk_1F14C2168;
  *((unsigned char *)v3 + 528) = 0;
  *(void *)((char *)v3 + 532) = 0;
  *(_OWORD *)((char *)v3 + 600) = 0u;
  ausdk::AUBase::CreateElements((uint64_t)v3);
  uint64_t v24 = 0x40D7700000000000;
  long long v25 = xmmword_1BB87A250;
  long long v26 = xmmword_1BB87A360;
  uint64_t v21 = 0x40D7700000000000;
  long long v23 = xmmword_1BB87A240;
  long long v22 = xmmword_1BB87A250;
  uint64_t Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)Element + 56))(Element, &v24);
  uint64_t v5 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 1u);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v5 + 56))(v5, &v21);
  uint64_t v6 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 56))(v6, &v24);
  uint64_t v7 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 1u);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 56))(v7, &v24);
  uint64_t v8 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 2u);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v8 + 56))(v8, &v21);
  uint64_t v9 = ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 40))(v9, 9);
  uint64_t v10 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v10, 0, 360.0, 0);
  uint64_t v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v11, 1u, -120.0, 0);
  uint64_t v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v12, 2u, 0.0, 0);
  uint64_t v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v13, 3u, 6.0, 0);
  uint64_t v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v14, 4u, -120.0, 0);
  uint64_t v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v15, 5u, 3.0, 0);
  uint64_t v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v16, 6u, 4.0, 0);
  uint64_t v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v17, 7u, 2.0, 0);
  long long v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v18, 8u, 0.0, 0);
  *(unsigned char *)(a1 + 376) = 1;
  long long v19 = (caulk::concurrent::messenger *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 512))(a1, 480);
  *(_DWORD *)(a1 + 560) = 360;
  *(_DWORD *)(a1 + 540) = 24000;
  *(_DWORD *)(a1 + 544) = *(_DWORD *)(a1 + 336);
  *(void *)(a1 + 548) = 0x200000004;
  *(_OWORD *)(a1 + 564) = xmmword_1BB87A530;
  *(_DWORD *)(a1 + 580) = 3;
  *(void *)(a1 + 584) = 0x200000004;
  *(unsigned char *)(a1 + 592) = 0;
  if (!*(void *)(a1 + 600))
  {
    caulk::concurrent::messenger::shared_logging_priority(v19);
    operator new();
  }
  return a1;
}

void sub_1BB413BF0(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v3, 0x20C40A4A59CD2);
  std::unique_ptr<ecRMGS>::reset[abi:ne180100](v1 + 76, 0);
  std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100](v2, 0);
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUECSUMO>::Factory()
{
  double result = malloc_type_malloc(0x390uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUECSUMO>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUECSUMO>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUECSUMO>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUECSUMO>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 3, 4);
  *(void *)uint64_t v3 = &unk_1F14B3E10;
  *((unsigned char *)v3 + 528) = 0;
  *(void *)((char *)v3 + 532) = 0;
  *((void *)v3 + 78) = 850045863;
  *((_WORD *)v3 + 356) = 0;
  *((_WORD *)v3 + 378) = 0;
  unsigned int v4 = (uint64_t *)((char *)v3 + 760);
  uint64_t v5 = (uint64_t *)((char *)v3 + 840);
  *(_OWORD *)((char *)v3 + 632) = 0u;
  *(_OWORD *)((char *)v3 + 648) = 0u;
  *(_OWORD *)((char *)v3 + 664) = 0u;
  *(_OWORD *)((char *)v3 + 676) = 0u;
  *(_OWORD *)((char *)v3 + 760) = 0u;
  *(_OWORD *)((char *)v3 + 776) = 0u;
  *(_OWORD *)((char *)v3 + 792) = 0u;
  *(_OWORD *)((char *)v3 + 808) = 0u;
  *(_OWORD *)((char *)v3 + 824) = 0u;
  *((void *)v3 + 105) = 0;
  ausdk::AUBase::CreateElements((uint64_t)v3);
  uint64_t v48 = 0x40CF400000000000;
  long long v49 = xmmword_1BB8727B0;
  long long v50 = xmmword_1BB879EA0;
  uint64_t v45 = 0x40CF400000000000;
  long long v46 = xmmword_1BB8727B0;
  long long v47 = xmmword_1BB879EA0;
  uint64_t Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)Element + 56))(Element, &v48);
  uint64_t v7 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 1u);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 56))(v7, &v45);
  uint64_t v8 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v8 + 56))(v8, &v48);
  uint64_t v9 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 1u);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v9 + 56))(v9, &v48);
  uint64_t v10 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 2u);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v10 + 56))(v10, &v45);
  uint64_t v11 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 3u);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v11 + 56))(v11, &v48);
  uint64_t v12 = ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 40))(v12, 32);
  uint64_t v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v13, 0, 32.0, 0);
  uint64_t v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v14, 1u, -120.0, 0);
  uint64_t v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v15, 2u, 1.0, 0);
  uint64_t v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v16, 3u, -120.0, 0);
  uint64_t v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v17, 4u, 0.0, 0);
  long long v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v18, 5u, 1.0, 0);
  long long v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v19, 6u, 0.64, 0);
  long long v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v20, 7u, -80.0, 0);
  uint64_t v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v21, 8u, 32.0, 0);
  long long v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v22, 9u, 0.0, 0);
  long long v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v23, 0xAu, 0.0, 0);
  uint64_t v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v24, 0xBu, 1.0, 0);
  long long v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v25, 0xCu, 8.0, 0);
  long long v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v26, 0xDu, 1.0, 0);
  uint64_t v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v27, 0xEu, 1.0, 0);
  uint64_t v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v28, 0xFu, 0.0, 0);
  long long v29 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v29, 0x10u, 0.0, 0);
  long long v30 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v30, 0x11u, 1.0, 0);
  long long v31 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v31, 0x12u, 2.0, 0);
  long long v32 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v32, 0x13u, -160.0, 0);
  uint64_t v33 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v33, 0x14u, 30.0, 0);
  uint64_t v34 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v34, 0x15u, 1.0, 0);
  uint64_t v35 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v35, 0x16u, 0.0, 0);
  uint64_t v36 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v36, 0x17u, 0.0, 0);
  long long v37 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v37, 0x18u, 0.0, 0);
  uint64_t v38 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v38, 0x19u, 32.0, 0);
  long long v39 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v39, 0x1Au, 0.0, 0);
  long long v40 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v40, 0x1Bu, 0.32, 0);
  uint64_t v41 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v41, 0x1Cu, 1.0, 0);
  long long v42 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v42, 0x1Du, 0.0, 0);
  long long v43 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v43, 0x1Eu, 0.0, 0);
  *(unsigned char *)(a1 + 376) = 1;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 512))(a1, 512);
  std::unique_ptr<ecSUMO>::reset[abi:ne180100](v4, 0);
  *(void *)(a1 + 540) = 0x3E8000000020;
  *(_DWORD *)(a1 + 548) = *(_DWORD *)(a1 + 336);
  *(void *)(a1 + 552) = 0x200000002;
  *(_DWORD *)(a1 + 560) = 2;
  *(_DWORD *)(a1 + 572) = 32;
  *(void *)(a1 + 576) = 0;
  *(void *)(a1 + 600) = 0x41F00000C3200000;
  *(_OWORD *)(a1 + 716) = xmmword_1BB87A540;
  *(_DWORD *)(a1 + 732) = 1065353216;
  *(void *)(a1 + 736) = 0xC2A000003F23D70ALL;
  *(void *)(a1 + 744) = 0x100000000;
  *(_DWORD *)(a1 + 588) = 8;
  *(_DWORD *)(a1 + 752) = 1;
  *(void *)(a1 + 592) = 0x23F800000;
  *(_WORD *)(a1 + 692) = 1;
  *(void *)(a1 + 696) = 0x2000000000;
  *(_WORD *)(a1 + 712) = 0;
  std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100](v5, 0);
  return a1;
}

void sub_1BB4143A4(_Unwind_Exception *a1)
{
  std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100](v3, 0);
  uint64_t v6 = (void *)*((void *)v1 + 102);
  if (v6)
  {
    *((void *)v1 + 103) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)v1 + 99);
  if (v7)
  {
    *((void *)v1 + 100) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)v1 + 96);
  if (v8)
  {
    *((void *)v1 + 97) = v8;
    operator delete(v8);
  }
  std::unique_ptr<ecSUMO>::reset[abi:ne180100](v4, 0);
  std::mutex::~mutex(v2);
  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUECMIMO>::Factory()
{
  double result = malloc_type_malloc(0x350uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUECMIMO>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUECMIMO>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUECMIMO>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUECMIMO>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 2, 3);
  *(void *)uint64_t v3 = &unk_1F14AF098;
  *((unsigned char *)v3 + 528) = 0;
  *(void *)((char *)v3 + 532) = 0;
  unsigned int v4 = (uint64_t *)((char *)v3 + 720);
  uint64_t v5 = (uint64_t *)((char *)v3 + 776);
  *((_OWORD *)v3 + 45) = 0u;
  *((_OWORD *)v3 + 46) = 0u;
  *((_OWORD *)v3 + 47) = 0u;
  *((_OWORD *)v3 + 48) = 0u;
  ausdk::AUBase::CreateElements((uint64_t)v3);
  uint64_t v52 = 0x40CF400000000000;
  long long v53 = xmmword_1BB8727B0;
  long long v54 = xmmword_1BB8727C0;
  uint64_t v49 = 0x40CF400000000000;
  long long v50 = xmmword_1BB8727B0;
  long long v51 = xmmword_1BB8727C0;
  uint64_t Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)Element + 56))(Element, &v52);
  uint64_t v7 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 1u);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 56))(v7, &v49);
  uint64_t v8 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v8 + 56))(v8, &v52);
  uint64_t v9 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 1u);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v9 + 56))(v9, &v52);
  uint64_t v10 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 2u);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v10 + 56))(v10, &v49);
  uint64_t v11 = ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 40))(v11, 36);
  uint64_t v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v12, 0, 4.0, 0);
  uint64_t v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v13, 1u, -65.0, 0);
  uint64_t v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v14, 2u, -65.0, 0);
  uint64_t v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v15, 3u, 7.0, 0);
  uint64_t v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v16, 4u, -120.0, 0);
  uint64_t v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v17, 5u, 2.0, 0);
  long long v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v18, 6u, -20.0, 0);
  long long v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v19, 7u, 2.0, 0);
  long long v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v20, 8u, 3333.0, 0);
  uint64_t v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v21, 9u, 0.5, 0);
  long long v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v22, 0xAu, 0.032, 0);
  long long v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v23, 0xBu, 3.0, 0);
  uint64_t v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v24, 0xCu, -160.0, 0);
  long long v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v25, 0xDu, 4.0, 0);
  long long v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v26, 0xEu, 0.0, 0);
  uint64_t v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v27, 0xFu, 1.0, 0);
  uint64_t v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v28, 0x10u, 0.0, 0);
  long long v29 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v29, 0x11u, 0.0, 0);
  long long v30 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v30, 0x12u, 0.0, 0);
  long long v31 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v31, 0x13u, 0.0, 0);
  long long v32 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v32, 0x14u, 0.0, 0);
  uint64_t v33 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v33, 0x15u, 0.0, 0);
  uint64_t v34 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v34, 0x16u, 0.0, 0);
  uint64_t v35 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v35, 0x17u, 1.0, 0);
  uint64_t v36 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v36, 0x18u, 0.0, 0);
  long long v37 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v37, 0x19u, -160.0, 0);
  uint64_t v38 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v38, 0x1Au, 30.0, 0);
  long long v39 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v39, 0x1Bu, 0.0, 0);
  long long v40 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v40, 0x1Cu, 300.0, 0);
  uint64_t v41 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v41, 0x1Du, 1800.0, 0);
  long long v42 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v42, 0x1Eu, 0.03, 0);
  long long v43 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v43, 0x1Fu, 0.0, 0);
  uint64_t v44 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v44, 0x20u, 0.0, 0);
  uint64_t v45 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v45, 0x21u, 0.0, 0);
  long long v46 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v46, 0x22u, 0.0, 0);
  *(unsigned char *)(a1 + 376) = 1;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 512))(a1, 64);
  uint64_t v47 = *v4;
  uint64_t *v4 = 0;
  if (v47) {
    (*(void (**)(uint64_t))(*(void *)v47 + 8))(v47);
  }
  *(void *)(a1 + 540) = 0x3E8000000004;
  *(_DWORD *)(a1 + 548) = *(_DWORD *)(a1 + 336);
  *(void *)(a1 + 552) = 0x100000001;
  *(_DWORD *)(a1 + 568) = 4;
  *(void *)(a1 + 576) = 0;
  *(_DWORD *)(a1 + 588) = 1;
  *(void *)(a1 + 592) = 0x41F00000C3200000;
  *(void *)(a1 + 600) = 0x4396000000000000;
  *(void *)(a1 + 608) = 0x3CF5C28F44E10000;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 648) = xmmword_1BB87A550;
  *(_OWORD *)(a1 + 664) = xmmword_1BB87A4D0;
  *(_OWORD *)(a1 + 680) = xmmword_1BB87A560;
  *(void *)(a1 + 712) = 0;
  *(void *)(a1 + 696) = 0;
  *(void *)(a1 + 701) = 0;
  std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100](v5, 0);
  return a1;
}

void sub_1BB414B9C(_Unwind_Exception *a1)
{
  std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100](v2, 0);
  uint64_t v5 = (void *)*((void *)v1 + 94);
  if (v5)
  {
    *((void *)v1 + 95) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)v1 + 91);
  if (v6)
  {
    *((void *)v1 + 92) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *v3;
  uint64_t *v3 = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEchoCancelerV5>::Factory()
{
  double result = malloc_type_malloc(0x2F8uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEchoCancelerV5>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEchoCancelerV5>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEchoCancelerV5>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

int32x4_t *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEchoCancelerV5>::Construct(int32x4_t *a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 2, 6);
  *(void *)uint64_t v3 = &unk_1F14BA158;
  *((unsigned char *)v3 + 528) = 0;
  *(void *)((char *)v3 + 532) = 0;
  *((void *)v3 + 85) = 0;
  *((unsigned char *)v3 + 688) = 0;
  *((_OWORD *)v3 + 36) = 0u;
  *((_OWORD *)v3 + 37) = 0u;
  *((_OWORD *)v3 + 38) = 0u;
  *((_OWORD *)v3 + 39) = 0u;
  *((void *)v3 + 80) = 0;
  ausdk::AUBase::CreateElements((uint64_t)v3);
  unsigned int v4 = 0;
  uint64_t v87 = 0x40D5888000000000;
  long long v88 = xmmword_1BB8727B0;
  long long v89 = xmmword_1BB8727C0;
  while (1)
  {
    uint64_t v5 = a1[7].i64[1];
    if (v5) {
      LODWORD(v6) = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
    }
    else {
      unint64_t v6 = (unint64_t)(a1[6].i64[1] - a1[6].i64[0]) >> 3;
    }
    if (v4 >= v6) {
      break;
    }
    uint64_t Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)&a1[5], v4);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)Element + 56))(Element, &v87);
    ++v4;
  }
  for (unsigned int i = 0; ; ++i)
  {
    uint64_t v9 = a1[10].i64[1];
    if (v9) {
      LODWORD(v10) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 24))(v9);
    }
    else {
      unint64_t v10 = (unint64_t)(a1[9].i64[1] - a1[9].i64[0]) >> 3;
    }
    if (i >= v10) {
      break;
    }
    uint64_t v11 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)&a1[8], i);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v11 + 56))(v11, &v87);
  }
  uint64_t v12 = ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 40))(v12, 72);
  uint64_t v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v13, 0, 79.0, 0);
  uint64_t v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v14, 1u, 0.0, 0);
  uint64_t v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v15, 2u, 0.0, 0);
  uint64_t v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v16, 3u, 0.0, 0);
  uint64_t v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v17, 4u, 0.0, 0);
  long long v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v18, 5u, 0.0, 0);
  long long v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v19, 6u, 0.0, 0);
  long long v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v20, 7u, 0.0, 0);
  uint64_t v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v21, 8u, 0.0, 0);
  long long v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v22, 9u, 1.0, 0);
  long long v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v23, 0xAu, 0.0, 0);
  uint64_t v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v24, 0xBu, 1.0, 0);
  long long v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v25, 0xCu, 220.0, 0);
  long long v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v26, 0xDu, 20.0, 0);
  uint64_t v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v27, 0xEu, 100.0, 0);
  uint64_t v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v28, 0xFu, 200.0, 0);
  long long v29 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v29, 0x10u, 150.0, 0);
  long long v30 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v30, 0x11u, -35.0, 0);
  long long v31 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v31, 0x12u, 0.4, 0);
  long long v32 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v32, 0x13u, -0.5, 0);
  uint64_t v33 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v33, 0x14u, -6.0, 0);
  uint64_t v34 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v34, 0x15u, -90.0, 0);
  uint64_t v35 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v35, 0x16u, 20.0, 0);
  uint64_t v36 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v36, 0x17u, 0.35, 0);
  long long v37 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v37, 0x18u, 0.15, 0);
  uint64_t v38 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v38, 0x19u, 0.86, 0);
  long long v39 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v39, 0x1Au, 0.5, 0);
  long long v40 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v40, 0x1Bu, 30.0, 0);
  uint64_t v41 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v41, 0x1Cu, 1.0, 0);
  long long v42 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v42, 0x1Du, 0.01, 0);
  long long v43 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v43, 0x1Eu, 0.0, 0);
  uint64_t v44 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v44, 0x1Fu, 0.04, 0);
  uint64_t v45 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v45, 0x20u, 0.79, 0);
  long long v46 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v46, 0x21u, 0.0, 0);
  uint64_t v47 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v47, 0x22u, 0.0, 0);
  uint64_t v48 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v48, 0x23u, -3.0, 0);
  uint64_t v49 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v49, 0x24u, 0.0, 0);
  long long v50 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v50, 0x25u, 0.0, 0);
  long long v51 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v51, 0x26u, 1.0, 0);
  uint64_t v52 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v52, 0x27u, 1.0, 0);
  long long v53 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v53, 0x28u, 40.0, 0);
  long long v54 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v54, 0x29u, 200.0, 0);
  long long v55 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v55, 0x2Au, 0.0, 0);
  float v56 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v56, 0x2Bu, 3.0, 0);
  float v57 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v57, 0x2Cu, 1.0, 0);
  int v58 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v58, 0x2Du, 0.0, 0);
  uint64_t v59 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v59, 0x2Eu, 1.0, 0);
  unint64_t v60 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v60, 0x2Fu, 1.0, 0);
  uint64_t v61 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v61, 0x30u, 1.0, 0);
  int v62 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v62, 0x31u, 1.0, 0);
  unint64_t v63 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v63, 0x32u, 1.0, 0);
  float v64 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v64, 0x33u, 1.0, 0);
  unint64_t v65 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v65, 0x34u, 1.0, 0);
  uint64_t v66 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v66, 0x35u, 1.0, 0);
  int v67 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v67, 0x36u, 1.0, 0);
  int v68 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v68, 0x37u, 1.0, 0);
  unsigned int v69 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v69, 0x38u, -80.458, 0);
  uint64_t v70 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v70, 0x3Bu, 0.0, 0);
  uint64_t v71 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v71, 0x39u, 0.0, 0);
  uint64_t v72 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v72, 0x3Au, 1.0, 0);
  uint64_t v73 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v73, 0x3Cu, -6.0, 0);
  uint64_t v74 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v74, 0x3Du, 10.0, 0);
  uint64_t v75 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v75, 0x3Eu, 6.0, 0);
  uint64_t v76 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v76, 0x3Fu, 40.0, 0);
  uint64_t v77 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v77, 0x40u, 0.0, 0);
  uint64_t v78 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v78, 0x41u, 0.0, 0);
  uint64_t v79 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v79, 0x42u, 0.0, 0);
  uint64_t v80 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v80, 0x43u, 0.0, 0);
  uint64_t v81 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v81, 0x44u, 0.0, 0);
  long long v82 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v82, 0x45u, 0.0, 0);
  long long v83 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v83, 0x46u, -26.0, 0);
  uint64_t v84 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  ausdk::AUElement::SetParameter(v84, 0x47u, 0.0, 0);
  a1[23].i8[8] = 1;
  (*(void (**)(int32x4_t *, uint64_t))(a1->i64[0] + 512))(a1, 480);
  a1[35] = vdupq_n_s32(0xC2C80000);
  a1[41].i64[0] = 0;
  a1[41].i32[2] = 1;
  long long v85 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[2], 0);
  a1[42].i8[0] = ausdk::AUElement::GetParameter(v85, 0x41u) != 0.0;
  return a1;
}

void sub_1BB41572C(_Unwind_Exception *a1)
{
  uint64_t v3 = (unsigned char *)*((void *)v1 + 79);
  if (v3)
  {
    unsigned int v4 = (unsigned char *)*((void *)v1 + 80);
    if (v4 != v3) {
      *((void *)v1 + 80) = &v4[(v3 - v4 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v3);
    *((void *)v1 + 79) = 0;
    *((void *)v1 + 80) = 0;
  }
  uint64_t v5 = (unsigned char *)*((void *)v1 + 77);
  if (v5)
  {
    unint64_t v6 = (unsigned char *)*((void *)v1 + 78);
    if (v6 != v5) {
      *((void *)v1 + 78) = &v6[(v5 - v6 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v5);
    *((void *)v1 + 77) = 0;
    *((void *)v1 + 78) = 0;
  }
  uint64_t v7 = (unsigned char *)*((void *)v1 + 75);
  if (v7)
  {
    uint64_t v8 = (unsigned char *)*((void *)v1 + 76);
    if (v8 != v7) {
      *((void *)v1 + 76) = &v8[(v7 - v8 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v7);
    *((void *)v1 + 75) = 0;
    *((void *)v1 + 76) = 0;
  }
  uint64_t v9 = (unsigned char *)*((void *)v1 + 73);
  if (v9)
  {
    unint64_t v10 = (unsigned char *)*((void *)v1 + 74);
    if (v10 != v9) {
      *((void *)v1 + 74) = &v10[(v9 - v10 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v9);
    *((void *)v1 + 73) = 0;
    *((void *)v1 + 74) = 0;
  }
  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMultiChanEchoCanceler>::Factory()
{
  double result = malloc_type_malloc(0x360uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMultiChanEchoCanceler>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMultiChanEchoCanceler>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMultiChanEchoCanceler>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

int32x2_t *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMultiChanEchoCanceler>::Construct(int32x2_t *a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 2, 3);
  *(void *)uint64_t v3 = &unk_1F14B1268;
  *((unsigned char *)v3 + 528) = 0;
  *(void *)((char *)v3 + 532) = 0;
  *((_OWORD *)v3 + 43) = 0u;
  *((_OWORD *)v3 + 44) = 0u;
  *((_OWORD *)v3 + 45) = 0u;
  *((_OWORD *)v3 + 46) = 0u;
  *((void *)v3 + 94) = 0;
  ausdk::AUBase::CreateElements((uint64_t)v3);
  unsigned int v4 = 0;
  uint64_t v71 = 0x40D5888000000000;
  long long v72 = xmmword_1BB8727B0;
  long long v73 = xmmword_1BB8727C0;
  while (1)
  {
    int32x2_t v5 = a1[15];
    if (v5) {
      LODWORD(v6) = (*(uint64_t (**)(int32x2_t))(**(void **)&v5 + 24))(v5);
    }
    else {
      uint64_t v6 = (*(void *)&a1[13] - *(void *)&a1[12]) >> 3;
    }
    if (v4 >= v6) {
      break;
    }
    uint64_t Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)&a1[10], v4);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)Element + 56))(Element, &v71);
    ++v4;
  }
  for (unsigned int i = 0; ; ++i)
  {
    int32x2_t v9 = a1[21];
    if (v9) {
      LODWORD(v10) = (*(uint64_t (**)(int32x2_t))(**(void **)&v9 + 24))(v9);
    }
    else {
      uint64_t v10 = (*(void *)&a1[19] - *(void *)&a1[18]) >> 3;
    }
    if (i >= v10) {
      break;
    }
    uint64_t v11 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)&a1[16], i);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v11 + 56))(v11, &v71);
  }
  uint64_t v12 = ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 40))(v12, 57);
  uint64_t v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v13, 0, 79.0, 0);
  uint64_t v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v14, 1u, 0.0, 0);
  uint64_t v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v15, 2u, 0.0, 0);
  uint64_t v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v16, 3u, 0.0, 0);
  uint64_t v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v17, 4u, 0.0, 0);
  long long v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v18, 5u, 0.0, 0);
  long long v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v19, 6u, 0.0, 0);
  long long v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v20, 7u, 0.0, 0);
  uint64_t v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v21, 8u, 0.0, 0);
  long long v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v22, 9u, 1.0, 0);
  long long v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v23, 0xAu, 0.0, 0);
  uint64_t v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v24, 0xBu, 1.0, 0);
  long long v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v25, 0xCu, 220.0, 0);
  long long v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v26, 0xDu, 20.0, 0);
  uint64_t v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v27, 0xEu, 100.0, 0);
  uint64_t v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v28, 0xFu, 200.0, 0);
  long long v29 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v29, 0x10u, 150.0, 0);
  long long v30 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v30, 0x11u, -35.0, 0);
  long long v31 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v31, 0x12u, 0.4, 0);
  long long v32 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v32, 0x13u, -0.5, 0);
  uint64_t v33 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v33, 0x14u, -6.0, 0);
  uint64_t v34 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v34, 0x15u, -90.0, 0);
  uint64_t v35 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v35, 0x16u, 20.0, 0);
  uint64_t v36 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v36, 0x17u, 0.35, 0);
  long long v37 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v37, 0x18u, 0.15, 0);
  uint64_t v38 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v38, 0x19u, 0.86, 0);
  long long v39 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v39, 0x1Au, 0.5, 0);
  long long v40 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v40, 0x1Bu, 30.0, 0);
  uint64_t v41 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v41, 0x1Cu, 1.0, 0);
  long long v42 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v42, 0x1Du, 0.01, 0);
  long long v43 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v43, 0x1Eu, 1.0, 0);
  uint64_t v44 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v44, 0x1Fu, 0.04, 0);
  uint64_t v45 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v45, 0x20u, 0.79, 0);
  long long v46 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v46, 0x21u, 0.0, 0);
  uint64_t v47 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v47, 0x22u, 0.0, 0);
  uint64_t v48 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v48, 0x23u, -3.0, 0);
  uint64_t v49 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v49, 0x24u, 0.0, 0);
  long long v50 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v50, 0x25u, 0.0, 0);
  long long v51 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v51, 0x26u, 1.0, 0);
  uint64_t v52 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v52, 0x27u, 1.0, 0);
  long long v53 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v53, 0x28u, 40.0, 0);
  long long v54 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v54, 0x29u, 200.0, 0);
  long long v55 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v55, 0x2Au, 0.0, 0);
  float v56 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v56, 0x2Bu, 3.0, 0);
  float v57 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v57, 0x2Cu, 1.0, 0);
  int v58 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v58, 0x2Du, 0.0, 0);
  uint64_t v59 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v59, 0x2Eu, 1.0, 0);
  unint64_t v60 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v60, 0x2Fu, 1.0, 0);
  uint64_t v61 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v61, 0x30u, 1.0, 0);
  int v62 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v62, 0x31u, 1.0, 0);
  unint64_t v63 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v63, 0x32u, 1.0, 0);
  float v64 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v64, 0x33u, 1.0, 0);
  unint64_t v65 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v65, 0x34u, 1.0, 0);
  uint64_t v66 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v66, 0x35u, 1.0, 0);
  int v67 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v67, 0x36u, 1.0, 0);
  int v68 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v68, 0x37u, 1.0, 0);
  unsigned int v69 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v69, 0x38u, -80.458, 0);
  a1[47].i8[0] = 1;
  (*(void (**)(int32x2_t *, uint64_t))(*(void *)a1 + 512))(a1, 480);
  a1[85] = vdup_n_s32(0xC2C80000);
  a1[97] = 0;
  a1[98] = (int32x2_t)0x100000001;
  a1[96] = (int32x2_t)0x100000001;
  a1[99].i32[0] = 1065353216;
  a1[95].i32[1] = 0;
  return a1;
}

void sub_1BB41617C(_Unwind_Exception *a1)
{
  uint64_t v3 = (unsigned char *)*((void *)v1 + 93);
  if (v3)
  {
    unsigned int v4 = (unsigned char *)*((void *)v1 + 94);
    if (v4 != v3) {
      *((void *)v1 + 94) = &v4[(v3 - v4 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v3);
    *((void *)v1 + 93) = 0;
    *((void *)v1 + 94) = 0;
  }
  int32x2_t v5 = (unsigned char *)*((void *)v1 + 91);
  if (v5)
  {
    uint64_t v6 = (unsigned char *)*((void *)v1 + 92);
    if (v6 != v5) {
      *((void *)v1 + 92) = &v6[(v5 - v6 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v5);
    *((void *)v1 + 91) = 0;
    *((void *)v1 + 92) = 0;
  }
  uint64_t v7 = (unsigned char *)*((void *)v1 + 89);
  if (v7)
  {
    uint64_t v8 = (unsigned char *)*((void *)v1 + 90);
    if (v8 != v7) {
      *((void *)v1 + 90) = &v8[(v7 - v8 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v7);
    *((void *)v1 + 89) = 0;
    *((void *)v1 + 90) = 0;
  }
  int32x2_t v9 = (unsigned char *)*((void *)v1 + 87);
  if (v9)
  {
    uint64_t v10 = (unsigned char *)*((void *)v1 + 88);
    if (v10 != v9) {
      *((void *)v1 + 88) = &v10[(v9 - v10 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v9);
    *((void *)v1 + 87) = 0;
    *((void *)v1 + 88) = 0;
  }
  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULinearEchoCancelerV3>::Factory()
{
  double result = malloc_type_malloc(0x340uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULinearEchoCancelerV3>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULinearEchoCancelerV3>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULinearEchoCancelerV3>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

int32x2_t *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULinearEchoCancelerV3>::Construct(int32x2_t *a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 2, 3);
  *(void *)uint64_t v3 = &unk_1F14B0190;
  *((unsigned char *)v3 + 528) = 0;
  *(void *)((char *)v3 + 532) = 0;
  *((_OWORD *)v3 + 43) = 0u;
  *((_OWORD *)v3 + 44) = 0u;
  *((_OWORD *)v3 + 45) = 0u;
  *((_OWORD *)v3 + 46) = 0u;
  *((void *)v3 + 94) = 0;
  ausdk::AUBase::CreateElements((uint64_t)v3);
  unsigned int v4 = 0;
  uint64_t v56 = 0x40D5888000000000;
  long long v57 = xmmword_1BB8727B0;
  long long v58 = xmmword_1BB8727C0;
  while (1)
  {
    int32x2_t v5 = a1[15];
    if (v5) {
      LODWORD(v6) = (*(uint64_t (**)(int32x2_t))(**(void **)&v5 + 24))(v5);
    }
    else {
      uint64_t v6 = (*(void *)&a1[13] - *(void *)&a1[12]) >> 3;
    }
    if (v4 >= v6) {
      break;
    }
    uint64_t Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)&a1[10], v4);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)Element + 56))(Element, &v56);
    ++v4;
  }
  for (unsigned int i = 0; ; ++i)
  {
    int32x2_t v9 = a1[21];
    if (v9) {
      LODWORD(v10) = (*(uint64_t (**)(int32x2_t))(**(void **)&v9 + 24))(v9);
    }
    else {
      uint64_t v10 = (*(void *)&a1[19] - *(void *)&a1[18]) >> 3;
    }
    if (i >= v10) {
      break;
    }
    uint64_t v11 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)&a1[16], i);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v11 + 56))(v11, &v56);
  }
  uint64_t v12 = ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 40))(v12, 42);
  uint64_t v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v13, 0, 79.0, 0);
  uint64_t v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v14, 1u, 0.0, 0);
  uint64_t v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v15, 2u, 0.0, 0);
  uint64_t v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v16, 3u, 0.0, 0);
  uint64_t v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v17, 4u, 0.0, 0);
  long long v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v18, 5u, 0.0, 0);
  long long v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v19, 6u, 0.0, 0);
  long long v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v20, 7u, 0.0, 0);
  uint64_t v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v21, 8u, 0.0, 0);
  long long v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v22, 9u, 1.0, 0);
  long long v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v23, 0xAu, 0.0, 0);
  uint64_t v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v24, 0xBu, 1.0, 0);
  long long v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v25, 0xCu, 220.0, 0);
  long long v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v26, 0xDu, 20.0, 0);
  uint64_t v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v27, 0xEu, 100.0, 0);
  uint64_t v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v28, 0xFu, 200.0, 0);
  long long v29 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v29, 0x10u, 150.0, 0);
  long long v30 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v30, 0x11u, -35.0, 0);
  long long v31 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v31, 0x12u, 0.4, 0);
  long long v32 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v32, 0x13u, -0.5, 0);
  uint64_t v33 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v33, 0x14u, -6.0, 0);
  uint64_t v34 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v34, 0x15u, -90.0, 0);
  uint64_t v35 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v35, 0x16u, 20.0, 0);
  uint64_t v36 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v36, 0x17u, 0.35, 0);
  long long v37 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v37, 0x18u, 0.15, 0);
  uint64_t v38 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v38, 0x19u, 0.86, 0);
  long long v39 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v39, 0x1Au, 0.5, 0);
  long long v40 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v40, 0x1Bu, 30.0, 0);
  uint64_t v41 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v41, 0x1Cu, 1.0, 0);
  long long v42 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v42, 0x1Du, 0.01, 0);
  long long v43 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v43, 0x1Eu, 1.0, 0);
  uint64_t v44 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v44, 0x1Fu, 0.04, 0);
  uint64_t v45 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v45, 0x20u, 0.79, 0);
  long long v46 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v46, 0x21u, 0.0, 0);
  uint64_t v47 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v47, 0x22u, 0.0, 0);
  uint64_t v48 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v48, 0x23u, -3.0, 0);
  uint64_t v49 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v49, 0x24u, 0.0, 0);
  long long v50 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v50, 0x25u, 0.0, 0);
  long long v51 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v51, 0x26u, 1.0, 0);
  uint64_t v52 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v52, 0x27u, 1.0, 0);
  long long v53 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v53, 0x28u, 40.0, 0);
  long long v54 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&a1[4], 0);
  ausdk::AUElement::SetParameter(v54, 0x29u, 200.0, 0);
  a1[47].i8[0] = 1;
  (*(void (**)(int32x2_t *, uint64_t))(*(void *)a1 + 512))(a1, 480);
  a1[85] = vdup_n_s32(0xC2C80000);
  return a1;
}

void sub_1BB416A08(_Unwind_Exception *a1)
{
  uint64_t v3 = (unsigned char *)*((void *)v1 + 93);
  if (v3)
  {
    unsigned int v4 = (unsigned char *)*((void *)v1 + 94);
    if (v4 != v3) {
      *((void *)v1 + 94) = &v4[(v3 - v4 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v3);
    *((void *)v1 + 93) = 0;
    *((void *)v1 + 94) = 0;
  }
  int32x2_t v5 = (unsigned char *)*((void *)v1 + 91);
  if (v5)
  {
    uint64_t v6 = (unsigned char *)*((void *)v1 + 92);
    if (v6 != v5) {
      *((void *)v1 + 92) = &v6[(v5 - v6 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v5);
    *((void *)v1 + 91) = 0;
    *((void *)v1 + 92) = 0;
  }
  uint64_t v7 = (unsigned char *)*((void *)v1 + 89);
  if (v7)
  {
    uint64_t v8 = (unsigned char *)*((void *)v1 + 90);
    if (v8 != v7) {
      *((void *)v1 + 90) = &v8[(v7 - v8 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v7);
    *((void *)v1 + 89) = 0;
    *((void *)v1 + 90) = 0;
  }
  int32x2_t v9 = (unsigned char *)*((void *)v1 + 87);
  if (v9)
  {
    uint64_t v10 = (unsigned char *)*((void *)v1 + 88);
    if (v10 != v9) {
      *((void *)v1 + 88) = &v10[(v9 - v10 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v9);
    *((void *)v1 + 87) = 0;
    *((void *)v1 + 88) = 0;
  }
  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessLookup,AUAGCV2>::Factory()
{
  double result = malloc_type_malloc(0x298uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUAGCV2>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUAGCV2>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUAGCV2>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

unsigned char *ausdk::APFactory<ausdk::AUBaseProcessLookup,AUAGCV2>::Construct(unsigned char *a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *((_WORD *)v3 + 276) = 0;
  *((void *)v3 + 68) = 0;
  *((_OWORD *)v3 + 33) = 0u;
  *((unsigned char *)v3 + 554) = 1;
  *((_DWORD *)v3 + 139) = 0;
  *((unsigned char *)v3 + 560) = 0;
  *(void *)((char *)v3 + 588) = 0;
  *(_OWORD *)((char *)v3 + 568) = 0u;
  *((unsigned char *)v3 + 584) = 0;
  *(void *)uint64_t v3 = &unk_1F14BE7E0;
  *((unsigned char *)v3 + 596) = 0;
  ausdk::AUBase::CreateElements((uint64_t)v3);
  a1[376] = 1;
  (*(void (**)(unsigned char *, uint64_t))(*(void *)a1 + 512))(a1, 128);
  uint64_t Element = ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)Element + 40))(Element, 65);
  int32x2_t v5 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v5, 0, -100.0, 0);
  uint64_t v6 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v6, 1u, 0.0, 0);
  uint64_t v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v7, 2u, 2.0, 0);
  uint64_t v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v8, 3u, 1.0, 0);
  int32x2_t v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v9, 4u, 0.8, 0);
  uint64_t v10 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v10, 5u, 10.0, 0);
  uint64_t v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v11, 6u, 10.0, 0);
  uint64_t v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v12, 7u, 40.0, 0);
  uint64_t v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v13, 8u, 3.0, 0);
  uint64_t v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v14, 9u, -35.0, 0);
  uint64_t v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v15, 0xAu, 0.06, 0);
  uint64_t v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v16, 0xBu, 0.25, 0);
  uint64_t v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v17, 0xCu, 18.0, 0);
  long long v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v18, 0xDu, 1.0, 0);
  long long v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v19, 0xEu, 0.0, 0);
  long long v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v20, 0xFu, 12.0, 0);
  uint64_t v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v21, 0x10u, 1.0, 0);
  long long v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v22, 0x11u, 0.0, 0);
  long long v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v23, 0x12u, 0.0, 0);
  uint64_t v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v24, 0x13u, 0.0, 0);
  long long v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v25, 0x14u, 60.0, 0);
  long long v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v26, 0x15u, 0.5, 0);
  uint64_t v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v27, 0x16u, 6.0, 0);
  uint64_t v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v28, 0x17u, 2.0, 0);
  long long v29 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v29, 0x18u, 1.0, 0);
  long long v30 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v30, 0x19u, 4.0, 0);
  long long v31 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v31, 0x1Au, 0.5, 0);
  long long v32 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v32, 0x1Bu, 0.0, 0);
  uint64_t v33 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v33, 0x1Cu, -12.0, 0);
  uint64_t v34 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v34, 0x1Du, 0.03, 0);
  uint64_t v35 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v35, 0x1Eu, 300.0, 0);
  uint64_t v36 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v36, 0x1Fu, 60.0, 0);
  long long v37 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v37, 0x20u, 1.0, 0);
  uint64_t v38 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v38, 0x21u, 0.125, 0);
  long long v39 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v39, 0x22u, -48.0, 0);
  long long v40 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v40, 0x23u, 0.0, 0);
  uint64_t v41 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v41, 0x24u, 0.4, 0);
  long long v42 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v42, 0x25u, -100.0, 0);
  long long v43 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v43, 0x26u, 4.0, 0);
  uint64_t v44 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v44, 0x27u, 10.0, 0);
  uint64_t v45 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v45, 0x28u, 0.0, 0);
  long long v46 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v46, 0x29u, 0.0, 0);
  uint64_t v47 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v47, 0x2Au, 0.0, 0);
  uint64_t v48 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v48, 0x2Bu, -30.0, 0);
  uint64_t v49 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v49, 0x2Cu, 3.0, 0);
  long long v50 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v50, 0x2Du, 0.0, 0);
  long long v51 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v51, 0x2Eu, 200.0, 0);
  uint64_t v52 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v52, 0x2Fu, 18.0, 0);
  long long v53 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v53, 0x30u, 12.0, 0);
  long long v54 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v54, 0x31u, 0.9, 0);
  long long v55 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v55, 0x32u, 15.0, 0);
  uint64_t v56 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v56, 0x33u, 70.0, 0);
  long long v57 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v57, 0x34u, 350.0, 0);
  long long v58 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v58, 0x35u, 15.0, 0);
  uint64_t v59 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v59, 0x36u, 0.2, 0);
  unint64_t v60 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v60, 0x37u, 0.08, 0);
  uint64_t v61 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v61, 0x3Cu, 0.0, 0);
  int v62 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v62, 0x38u, 50.0, 0);
  unint64_t v63 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v63, 0x39u, 15.0, 0);
  float v64 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v64, 0x3Au, 0.2, 0);
  unint64_t v65 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v65, 0x3Bu, 0.02, 0);
  uint64_t v66 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v66, 0x3Du, 0.0, 0);
  int v67 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v67, 0x40u, 1.0, 0);
  int v68 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v68, 0x3Eu, 0.0, 0);
  unsigned int v69 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v69, 0x3Fu, 1.0, 0);
  v73[0] = xmmword_1BB8C8540;
  v73[1] = unk_1BB8C8550;
  uint64_t v74 = 32;
  uint64_t v70 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v70 + 56))(v70, v73);
  uint64_t v71 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v71 + 56))(v71, v73);
  a1[584] = 1;
  return a1;
}

void sub_1BB417490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *int32x2_t v9 = &unk_1F14C8258;
  a9 = v9 + 66;
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__destroy_vector::operator()[abi:ne180100](&a9);
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v9);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessLookup,AUCPMSVolumeV1>::Factory()
{
  double result = malloc_type_malloc(0x2B8uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUCPMSVolumeV1>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUCPMSVolumeV1>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUCPMSVolumeV1>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUCPMSVolumeV1>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *(void *)uint64_t v3 = &unk_1F14C1880;
  caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((ausdk::AUBase *)((char *)v3 + 528));
  *(_WORD *)(a1 + 536) = 0;
  *(unsigned char *)(a1 + 544) = 0;
  *(unsigned char *)(a1 + 584) = 0;
  *(unsigned char *)(a1 + 592) = 0;
  *(unsigned char *)(a1 + 608) = 0;
  *(_DWORD *)(a1 + 616) = 0;
  *(unsigned char *)(a1 + 620) = 0;
  ausdk::AUBase::CreateElements(a1);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(Element, 0, 1.0, 0);
  atomic_store(1u, (unsigned __int8 *)(a1 + 616));
  ausdk::AUElement::SetParameter(Element, 1u, 10.0, 0);
  atomic_store(1u, (unsigned __int8 *)(a1 + 617));
  ausdk::AUElement::SetParameter(Element, 2u, 0.0, 0);
  atomic_store(1u, (unsigned __int8 *)(a1 + 618));
  ausdk::AUElement::SetParameter(Element, 3u, 0.0, 0);
  atomic_store(1u, (unsigned __int8 *)(a1 + 619));
  *(void *)a1 = &unk_1F14C1630;
  *(void *)(a1 + 624) = 0;
  if (!*(unsigned char *)(a1 + 537)) {
    *(unsigned char *)(a1 + 537) = 1;
  }
  *(unsigned char *)(a1 + 536) = 0;
  return a1;
}

void sub_1BB4176A8(_Unwind_Exception *a1)
{
  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<cpms::LUTSystem<float>,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v2 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = 0;
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(void **)(a1 + 8));
  }
  return a1;
}

BOOL AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::StreamFormatWritable(uint64_t a1)
{
  return *(unsigned char *)(a1 + 17) == 0;
}

uint64_t AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::SupportsTail()
{
  return 1;
}

uint64_t AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetParameterInfo(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a2) {
    return 4294956430;
  }
  switch(a3)
  {
    case 0:
      *(void *)(a4 + 56) = 0;
      *(_DWORD *)(a4 + 80) = 4;
      *(void *)(a4 + 84) = 0x4120000000000000;
      *(void *)(a4 + 92) = 0xC00000003F800000;
      uint64_t v7 = "Gain smoothing attack TC";
      goto LABEL_13;
    case 1:
      *(void *)(a4 + 56) = 0;
      *(_DWORD *)(a4 + 80) = 4;
      *(void *)(a4 + 84) = 0x41A0000000000000;
      *(void *)(a4 + 92) = 0xC000000041200000;
      uint64_t v7 = "Gain smoothing release TC";
      goto LABEL_13;
    case 2:
      *(void *)(a4 + 56) = 0;
      *(_DWORD *)(a4 + 80) = 0;
      *(void *)(a4 + 84) = 0x3F80000000000000;
      *(void *)(a4 + 92) = 0xC000000000000000;
      uint64_t v7 = "Volume level";
      goto LABEL_13;
    case 3:
      *(void *)(a4 + 56) = 0;
      *(_DWORD *)(a4 + 80) = 0;
      *(void *)(a4 + 84) = 3253731328;
      *(void *)(a4 + 92) = 0x4000800000000000;
      uint64_t v7 = "Output gain (dB)";
LABEL_13:
      CFStringRef v9 = CFStringCreateWithCString(0, v7, 0x8000100u);
      *(void *)(a4 + 72) = v9;
      *(_DWORD *)(a4 + 96) |= 0x8000010u;
      CFStringGetCString(v9, (char *)a4, 52, 0x8000100u);
      return 0;
    default:
      if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1) {
        dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_4718);
      }
      if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
      {
        uint64_t v8 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
        if (!*(void *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope) {
          goto LABEL_17;
        }
      }
      else
      {
        uint64_t v8 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        int v10 = 136315650;
        uint64_t v11 = "AUTemplateBase.h";
        __int16 v12 = 1024;
        int v13 = 725;
        __int16 v14 = 1024;
        int v15 = a3;
        _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d Parameter info for unsupported parameter (%u) requested", (uint8_t *)&v10, 0x18u);
      }
LABEL_17:
      uint64_t result = 4294956418;
      break;
  }
  return result;
}

void ___ZN14AUTemplateBaseI14AUCPMSVolumeV1NSt3__15tupleIJN4cpms8VolumeV110Parameters18TC_smoother_attackENS5_19TC_smoother_releaseENS5_11VolumeLevelENS5_10OutputGainEEEENS2_IJN9AUGeneric10Properties6BypassENS4_10Properties9LUTSystemEEEENS2_IJNSE_11PowerBudgetEEEEE11GetLogScopeEv_block_invoke()
{
}

double AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetParameterList(uint64_t a1, int a2, _OWORD *a3, _DWORD *a4)
{
  if (!a2)
  {
    *a4 = 4;
    if (a3)
    {
      *(void *)&double result = 0x100000000;
      *a3 = xmmword_1BB8727D0;
    }
  }
  return result;
}

uint64_t AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::CanScheduleParameters()
{
  return 0;
}

uint64_t AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::SetParameter(ausdk::AUBase *a1, int a2, unsigned int a3, unsigned int a4, float a5)
{
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(a1, a3);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement(Scope, a4);
  if (!Element) {
    return 4294956419;
  }
  switch(a2)
  {
    case 0:
      ausdk::AUElement::SetParameter(Element, 0, a5, 0);
      uint64_t v11 = (unsigned __int8 *)a1 + 616;
      goto LABEL_9;
    case 1:
      ausdk::AUElement::SetParameter(Element, 1u, a5, 0);
      uint64_t v11 = (unsigned __int8 *)a1 + 617;
      goto LABEL_9;
    case 2:
      ausdk::AUElement::SetParameter(Element, 2u, a5, 0);
      uint64_t v11 = (unsigned __int8 *)a1 + 618;
      goto LABEL_9;
    case 3:
      ausdk::AUElement::SetParameter(Element, 3u, a5, 0);
      uint64_t v11 = (unsigned __int8 *)a1 + 619;
LABEL_9:
      uint64_t result = 0;
      atomic_store(1u, v11);
      break;
    default:
      uint64_t result = 4294956418;
      break;
  }
  return result;
}

uint64_t AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetParameter(ausdk::AUBase *a1, unsigned int a2, unsigned int a3, unsigned int a4, float *a5)
{
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(a1, a3);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement(Scope, a4);
  if (!Element) {
    return 4294956419;
  }
  if (a2 > 3) {
    return 4294956418;
  }
  float Parameter = ausdk::AUElement::GetParameter(Element, a2);
  uint64_t result = 0;
  *a5 = Parameter;
  return result;
}

uint64_t AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::SetProperty(uint64_t a1, int a2, int a3, uint64_t a4, const void **a5, int a6)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  if (a3) {
    return 4294956430;
  }
  if (a2 == 64101)
  {
    if (a5)
    {
      if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1) {
        dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_4718);
      }
      if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
      {
        int v13 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
        if (!*(void *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope) {
          goto LABEL_85;
        }
      }
      else
      {
        int v13 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)AudioChannelLayout buf = 136315906;
        *(void *)&uint8_t buf[4] = "AUTemplateBase.h";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 801;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 64101;
        v77[0] = 2080;
        *(void *)&v77[1] = "Characterized amplifier system";
        _os_log_impl(&dword_1BB0CE000, v13, OS_LOG_TYPE_INFO, "%25s:%-5d Attempting to set data for property %u (%s)", buf, 0x22u);
      }
LABEL_85:
      if (a6 == 8 && (long long v30 = *a5) != 0)
      {
        CFRetain(v30);
        applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v72, v30);
        if (v72)
        {
          long long v31 = applesauce::CF::details::at_key<char const(&)[9]>((const __CFDictionary *)v72, "PowerLUT");
          if (v31)
          {
            long long v32 = v31;
            CFRetain(v31);
            applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&theArray, v32);
            *(_OWORD *)&uint8_t buf[8] = 0uLL;
            *(void *)AudioChannelLayout buf = &buf[8];
            CFArrayRef v33 = theArray;
            if (theArray)
            {
              CFIndex Count = CFArrayGetCount(theArray);
              CFArrayRef v35 = theArray;
              if (theArray) {
                CFIndex v36 = CFArrayGetCount(theArray);
              }
              else {
                CFIndex v36 = 0;
              }
              if (Count)
              {
                unint64_t v39 = 0;
                int32x4_t v69 = vdupq_n_s32(0x42480000u);
                do
                {
                  if (v33 == v35 && v39 == v36) {
                    break;
                  }
                  applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>(v33, v39, (applesauce::CF::DictionaryRef *)&cf);
                  if (!cf)
                  {
                    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(exception, "Could not construct");
                  }
                  CFNumberRef v40 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[12]>((const __CFDictionary *)cf, "VolumeLevel");
                  if (!v40)
                  {
                    int v62 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v62, "Could not find item");
                  }
                  float v41 = applesauce::CF::convert_to<float,0>(v40);
                  if (!cf)
                  {
                    uint64_t v61 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v61, "Could not construct");
                  }
                  float v42 = v41;
                  long long v43 = applesauce::CF::details::at_key<char const(&)[13]>((const __CFDictionary *)cf, "Measurements");
                  if (!v43)
                  {
                    unint64_t v63 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v63, "Could not find item");
                  }
                  uint64_t v44 = v43;
                  CFRetain(v43);
                  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v74, v44);
                  if (!v74) {
                    goto LABEL_179;
                  }
                  int32x4_t v71 = v69;
                  if (applesauce::CF::details::has_key<char const* const&>((BOOL)v74, (const UInt8 *)"power_inst"))
                  {
                    if (!v74) {
                      goto LABEL_179;
                    }
                    int v45 = applesauce::CF::details::find_at_key<int,char const* const&>((const __CFDictionary *)v74, (const char **)cpms::powertuplekinds::PowerLUTEntry::name_inst);
                    v46.i32[0] = 1112014848;
                    int32x4_t v47 = vdupq_lane_s32(v46, 0);
                    *(float *)v47.i32 = (float)v45 / 1000.0;
                    int32x4_t v71 = v47;
                  }
                  if (!v74) {
                    goto LABEL_179;
                  }
                  if (applesauce::CF::details::has_key<char const* const&>((BOOL)v74, (const UInt8 *)"power_100ms"))
                  {
                    if (!v74) {
                      goto LABEL_179;
                    }
                    int v48 = applesauce::CF::details::find_at_key<int,char const* const&>((const __CFDictionary *)v74, (const char **)cpms::powertuplekinds::PowerLUTEntry::name_100ms);
                    int32x4_t v49 = v71;
                    *(float *)&v49.i32[1] = (float)v48 / 1000.0;
                    int32x4_t v71 = v49;
                  }
                  if (!v74) {
                    goto LABEL_179;
                  }
                  if (applesauce::CF::details::has_key<char const* const&>((BOOL)v74, (const UInt8 *)"power_1000ms"))
                  {
                    if (!v74) {
                      goto LABEL_179;
                    }
                    int v50 = applesauce::CF::details::find_at_key<int,char const* const&>((const __CFDictionary *)v74, (const char **)cpms::powertuplekinds::PowerLUTEntry::name_1000ms);
                    int32x4_t v51 = v71;
                    *(float *)&v51.i32[2] = (float)v50 / 1000.0;
                    int32x4_t v71 = v51;
                  }
                  if (!v74)
                  {
LABEL_179:
                    float v64 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v64, "Could not construct");
                  }
                  if (applesauce::CF::details::has_key<char const* const&>((BOOL)v74, (const UInt8 *)"power_thermal"))
                  {
                    if (!v74) {
                      goto LABEL_179;
                    }
                    int v52 = applesauce::CF::details::find_at_key<int,char const* const&>((const __CFDictionary *)v74, (const char **)cpms::powertuplekinds::PowerLUTEntry::name_thermal);
                    int32x4_t v53 = v71;
                    *(float *)&v53.i32[3] = (float)v52 / 1000.0;
                    int32x4_t v71 = v53;
                  }
                  long long v54 = *(float **)&buf[8];
                  long long v55 = (float **)&buf[8];
                  uint64_t v56 = (float **)&buf[8];
                  if (*(void *)&buf[8])
                  {
                    do
                    {
                      while (1)
                      {
                        uint64_t v56 = (float **)v54;
                        float v57 = v54[7];
                        if (v42 >= v57) {
                          break;
                        }
                        long long v54 = *(float **)v54;
                        long long v55 = v56;
                        if (!*v56) {
                          goto LABEL_141;
                        }
                      }
                      if (v57 >= v42) {
                        goto LABEL_144;
                      }
                      long long v54 = (float *)*((void *)v54 + 1);
                    }
                    while (v54);
                    long long v55 = v56 + 1;
                  }
LABEL_141:
                  long long v58 = (float *)operator new(0x30uLL);
                  v58[7] = v42;
                  *((int32x4_t *)v58 + 2) = v71;
                  *(void *)long long v58 = 0;
                  *((void *)v58 + 1) = 0;
                  *((void *)v58 + 2) = v56;
                  ausdk::AUElement *v55 = v58;
                  if (**(void **)buf)
                  {
                    *(void *)AudioChannelLayout buf = **(void **)buf;
                    long long v58 = *v55;
                  }
                  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)&buf[8], (uint64_t *)v58);
                  ++*(void *)&buf[16];
LABEL_144:
                  if (v74) {
                    CFRelease(v74);
                  }
                  if (cf) {
                    CFRelease(cf);
                  }
                  ++v39;
                }
                while (v39 != Count);
              }
              if (theArray) {
                CFRelease(theArray);
              }
            }
            if (v72)
            {
              applesauce::CF::details::find_at_key<applesauce::CF::DictionaryRef,char const(&)[19]>((applesauce::CF::DictionaryRef *)&cf, (const __CFDictionary *)v72, "AmpEfficiencyCoefs");
              cpms::efficiency::AmpModelFactory((cpms::efficiency *)v77, (const __CFDictionary **)&cf);
            }
            int v67 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v67, "Could not construct");
          }
          unint64_t v65 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v65, "Could not find item");
LABEL_186:
        }
      }
      else
      {
        CFTypeRef v72 = 0;
      }
      unint64_t v65 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v65, "Could not construct");
      goto LABEL_186;
    }
    if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1) {
      dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_4718);
    }
    if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
    {
      uint64_t v16 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
      if (!*(void *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
      {
LABEL_162:
        if (!*(unsigned char *)(a1 + 584)) {
          return 0;
        }
        uint64_t v59 = *(void *)(a1 + 568);
        *(void *)(a1 + 568) = 0;
        if (v59) {
          (*(void (**)(uint64_t))(*(void *)v59 + 8))(v59);
        }
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(void **)(a1 + 552));
        uint64_t result = 0;
        *(unsigned char *)(a1 + 584) = 0;
        return result;
      }
    }
    else
    {
      uint64_t v16 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioChannelLayout buf = 136315906;
      *(void *)&uint8_t buf[4] = "AUTemplateBase.h";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 796;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 64101;
      v77[0] = 2080;
      *(void *)&v77[1] = "Characterized amplifier system";
      _os_log_impl(&dword_1BB0CE000, v16, OS_LOG_TYPE_INFO, "%25s:%-5d Clearing the value of property %u (%s)", buf, 0x22u);
    }
    goto LABEL_162;
  }
  if (a2 != 64100)
  {
    if (a2 == 21)
    {
      if (a5)
      {
        if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1) {
          dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_4718);
        }
        if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
        {
          uint64_t v11 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
          if (!*(void *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope) {
            goto LABEL_95;
          }
        }
        else
        {
          uint64_t v11 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)AudioChannelLayout buf = 136315906;
          *(void *)&uint8_t buf[4] = "AUTemplateBase.h";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 801;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = 21;
          v77[0] = 2080;
          *(void *)&v77[1] = "Bypass";
          _os_log_impl(&dword_1BB0CE000, v11, OS_LOG_TYPE_INFO, "%25s:%-5d Attempting to set data for property %u (%s)", buf, 0x22u);
        }
LABEL_95:
        if (a6 != 4)
        {
          uint64_t v66 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v66, "PODProp constructor: inDataSize did not match the given type.");
        }
        BOOL v37 = *(_DWORD *)a5 != 0;
        if (!*(unsigned char *)(a1 + 537)) {
          *(unsigned char *)(a1 + 537) = 1;
        }
        *(unsigned char *)(a1 + 536) = v37;
        if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1) {
          dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_4718);
        }
        if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
        {
          long long v29 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
          if (!*(void *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope) {
            return 0;
          }
        }
        else
        {
          long long v29 = MEMORY[0x1E4F14500];
        }
        uint64_t result = os_log_type_enabled(v29, OS_LOG_TYPE_INFO);
        if (result)
        {
          *(_DWORD *)AudioChannelLayout buf = 136315906;
          *(void *)&uint8_t buf[4] = "AUTemplateBase.h";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 812;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = 21;
          v77[0] = 2080;
          uint64_t v38 = "Bypass";
LABEL_171:
          *(void *)&v77[1] = v38;
          _os_log_impl(&dword_1BB0CE000, v29, OS_LOG_TYPE_INFO, "%25s:%-5d Successfully set data for property %u (%s)", buf, 0x22u);
          return 0;
        }
        return result;
      }
      if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1) {
        dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_4718);
      }
      if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
      {
        uint64_t v17 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
        if (!*(void *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope) {
          goto LABEL_169;
        }
      }
      else
      {
        uint64_t v17 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)AudioChannelLayout buf = 136315906;
        *(void *)&uint8_t buf[4] = "AUTemplateBase.h";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 796;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 21;
        v77[0] = 2080;
        *(void *)&v77[1] = "Bypass";
        _os_log_impl(&dword_1BB0CE000, v17, OS_LOG_TYPE_INFO, "%25s:%-5d Clearing the value of property %u (%s)", buf, 0x22u);
      }
LABEL_169:
      if (*(unsigned char *)(a1 + 537))
      {
        uint64_t result = 0;
        *(unsigned char *)(a1 + 537) = 0;
        return result;
      }
      return 0;
    }
    if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1) {
      dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_4718);
    }
    if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
    {
      __int16 v14 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
      if (!*(void *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope) {
        return 4294956417;
      }
    }
    else
    {
      __int16 v14 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioChannelLayout buf = 136315650;
      *(void *)&uint8_t buf[4] = "AUTemplateBase.h";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 824;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = a2;
      _os_log_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d Attempting to set an unsupported property: %u", buf, 0x18u);
    }
    return 4294956417;
  }
  if (!a5)
  {
    if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1) {
      dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_4718);
    }
    if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
    {
      int v15 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
      if (!*(void *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
      {
LABEL_156:
        if (*(unsigned char *)(a1 + 608)) {
          *(unsigned char *)(a1 + 608) = 0;
        }
        uint64_t result = 0;
        atomic_store(1u, (unsigned __int8 *)(a1 + 620));
        return result;
      }
    }
    else
    {
      int v15 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioChannelLayout buf = 136315906;
      *(void *)&uint8_t buf[4] = "AUTemplateBase.h";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 796;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 64100;
      v77[0] = 2080;
      *(void *)&v77[1] = "Power budget";
      _os_log_impl(&dword_1BB0CE000, v15, OS_LOG_TYPE_INFO, "%25s:%-5d Clearing the value of property %u (%s)", buf, 0x22u);
    }
    goto LABEL_156;
  }
  if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1) {
    dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_4718);
  }
  if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
  {
    __int16 v12 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
    if (!*(void *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope) {
      goto LABEL_52;
    }
  }
  else
  {
    __int16 v12 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)AudioChannelLayout buf = 136315906;
    *(void *)&uint8_t buf[4] = "AUTemplateBase.h";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 801;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = 64100;
    v77[0] = 2080;
    *(void *)&v77[1] = "Power budget";
    _os_log_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_INFO, "%25s:%-5d Attempting to set data for property %u (%s)", buf, 0x22u);
  }
LABEL_52:
  if (a6 != 8 || (long long v18 = *a5) == 0)
  {
    CFTypeRef cf = 0;
    goto LABEL_191;
  }
  CFRetain(v18);
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&cf, v18);
  if (!cf) {
    goto LABEL_191;
  }
  if (applesauce::CF::details::has_key<char const* const&>((BOOL)cf, (const UInt8 *)"cpms_ts_i"))
  {
    if (!cf) {
      goto LABEL_191;
    }
    int v19 = applesauce::CF::details::find_at_key<int,char const* const&>((const __CFDictionary *)cf, (const char **)cpms::powertuplekinds::PowerBudget::name_inst);
    v20.i32[0] = 1112014848;
    int32x4_t v21 = vdupq_lane_s32(v20, 0);
    *(float *)v21.i32 = (float)v19 / 1000.0;
    int32x4_t v70 = v21;
  }
  else
  {
    int32x4_t v70 = vdupq_n_s32(0x42480000u);
  }
  if (!cf) {
    goto LABEL_191;
  }
  if (applesauce::CF::details::has_key<char const* const&>((BOOL)cf, (const UInt8 *)"cpms_ts_100"))
  {
    if (!cf) {
      goto LABEL_191;
    }
    int v22 = applesauce::CF::details::find_at_key<int,char const* const&>((const __CFDictionary *)cf, (const char **)cpms::powertuplekinds::PowerBudget::name_100ms);
    int32x4_t v23 = v70;
    *(float *)&v23.i32[1] = (float)v22 / 1000.0;
    int32x4_t v70 = v23;
  }
  if (!cf) {
    goto LABEL_191;
  }
  if (applesauce::CF::details::has_key<char const* const&>((BOOL)cf, (const UInt8 *)"cpms_ts_1000"))
  {
    if (!cf) {
      goto LABEL_191;
    }
    int v24 = applesauce::CF::details::find_at_key<int,char const* const&>((const __CFDictionary *)cf, (const char **)cpms::powertuplekinds::PowerBudget::name_1000ms);
    int32x4_t v25 = v70;
    *(float *)&v25.i32[2] = (float)v24 / 1000.0;
    int32x4_t v70 = v25;
  }
  if (!cf) {
    goto LABEL_191;
  }
  if (!applesauce::CF::details::has_key<char const* const&>((BOOL)cf, (const UInt8 *)"cpms_ts_thermal")) {
    goto LABEL_71;
  }
  if (!cf)
  {
LABEL_191:
    int v68 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v68, "Could not construct");
  }
  int v26 = applesauce::CF::details::find_at_key<int,char const* const&>((const __CFDictionary *)cf, (const char **)cpms::powertuplekinds::PowerBudget::name_thermal);
  int32x4_t v27 = v70;
  *(float *)&v27.i32[3] = (float)v26 / 1000.0;
  int32x4_t v70 = v27;
LABEL_71:
  if (cf) {
    CFRelease(cf);
  }
  caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)(a1 + 528));
  if (atomic_load_explicit((atomic_uchar *volatile)(a1 + 620), memory_order_acquire)) {
    atomic_store(0, (unsigned __int8 *)(a1 + 620));
  }
  int v28 = *(unsigned __int8 *)(a1 + 608);
  *(int32x4_t *)(a1 + 592) = v70;
  if (!v28) {
    *(unsigned char *)(a1 + 608) = 1;
  }
  atomic_store(1u, (unsigned __int8 *)(a1 + 620));
  caulk::pooled_semaphore_mutex::_unlock((caulk::pooled_semaphore_mutex *)(a1 + 528));
  if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1) {
    dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_4718);
  }
  if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
  {
    long long v29 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
    if (!*(void *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope) {
      return 0;
    }
  }
  else
  {
    long long v29 = MEMORY[0x1E4F14500];
  }
  uint64_t result = os_log_type_enabled(v29, OS_LOG_TYPE_INFO);
  if (result)
  {
    *(_DWORD *)AudioChannelLayout buf = 136315906;
    *(void *)&uint8_t buf[4] = "AUTemplateBase.h";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 812;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = 64100;
    v77[0] = 2080;
    uint64_t v38 = "Power budget";
    goto LABEL_171;
  }
  return result;
}

void sub_1BB418F0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef a13, CFTypeRef a14, CFTypeRef a15, CFTypeRef cf, uint64_t a17, uint64_t a18, long long buf, __int16 a20,__int16 a21,int a22,long long a23)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __cxa_free_exception(v23);
  if (cf) {
    CFRelease(cf);
  }
  __cxa_begin_catch(exception_object);
  if (*(void *)(v24 + 616) != -1) {
    dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_4718);
  }
  int32x4_t v27 = *(NSObject ***)(v25 + 624);
  if (v27)
  {
    int v28 = *v27;
    if (!*v27) {
      goto LABEL_14;
    }
  }
  else
  {
    int v28 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf) = 136315906;
    *(void *)((char *)&buf + 4) = "AUTemplateBase.h";
    WORD6(buf) = 1024;
    *(_DWORD *)((char *)&buf + 14) = 807;
    a21 = 1024;
    a22 = 64100;
    LOWORD(a23) = 2080;
    *(void *)((char *)&a23 + 2) = "Power budget";
    _os_log_impl(&dword_1BB0CE000, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to set data for property %u (%s)", (uint8_t *)&buf, 0x22u);
  }
LABEL_14:
  __cxa_end_catch();
  JUMPOUT(0x1BB417BD0);
}

void sub_1BB4193EC()
{
}

uint64_t cpms::LUTSystem<float>::~LUTSystem(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(void **)(a1 + 8));
  return a1;
}

BOOL applesauce::CF::details::has_key<char const* const&>(BOOL a1, const UInt8 *__s)
{
  uint64_t v2 = __s;
  CFIndex v4 = strlen((const char *)__s);
  if (v2)
  {
    uint64_t v2 = (const UInt8 *)CFStringCreateWithBytes(0, v2, v4, 0x8000100u, 0);
    if (!v2)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    if (!a1)
    {
LABEL_4:
      if (!v2) {
        return a1;
      }
      goto LABEL_8;
    }
  }
  else if (!a1)
  {
    goto LABEL_4;
  }
  a1 = CFDictionaryContainsKey((CFDictionaryRef)a1, v2) != 0;
  if (v2) {
LABEL_8:
  }
    CFRelease(v2);
  return a1;
}

void sub_1BB419520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

uint64_t applesauce::CF::details::find_at_key<int,char const* const&>(const __CFDictionary *a1, const char **a2)
{
  CFNumberRef v2 = (const __CFNumber *)applesauce::CF::details::at_key<char const* const&>(a1, a2);
  if (!v2)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
  }

  return applesauce::CF::convert_to<int,0>(v2);
}

void sub_1BB4195B0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

applesauce::CF::DictionaryRef *applesauce::CF::details::find_at_key<applesauce::CF::DictionaryRef,char const(&)[19]>(applesauce::CF::DictionaryRef *a1, const __CFDictionary *a2, char *__s)
{
  CFIndex v4 = applesauce::CF::details::at_key<char const(&)[19]>(a2, __s);
  if (!v4)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
  }
  int32x2_t v5 = v4;
  CFRetain(v4);

  return applesauce::CF::DictionaryRef::DictionaryRef(a1, v5);
}

void sub_1BB419648(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void cpms::efficiency::AmpModelFactory(cpms::efficiency *this, const __CFDictionary **a2)
{
  if (*a2)
  {
    CFStringRef v2 = (const __CFString *)applesauce::CF::details::at_key<char const(&)[13]>(*a2, "AmpModelType");
    if (v2)
    {
      applesauce::CF::convert_to<std::string,0>(v2, (uint64_t)v21);
      uint64_t v3 = v22;
      if ((v22 & 0x80u) != 0) {
        uint64_t v3 = (uint64_t)v21[1];
      }
      if (v3 > 13)
      {
        if (v3 == 19)
        {
          int v13 = v21;
          if ((v22 & 0x80u) != 0) {
            int v13 = (void **)v21[0];
          }
          __int16 v14 = *v13;
          int v15 = v13[1];
          uint64_t v16 = *(uint64_t *)((char *)v13 + 11);
          if (v14 == (void *)0x6974617264617551 && v15 == (void *)0x6F4D74736F6F4263 && v16 == 0x6C65646F4D74736FLL) {
            operator new();
          }
        }
        else if (v3 == 14)
        {
          int32x2_t v5 = v21;
          if ((v22 & 0x80u) != 0) {
            int32x2_t v5 = (void **)v21[0];
          }
          uint64_t v6 = *v5;
          uint64_t v7 = *(uint64_t *)((char *)v5 + 6);
          if (v6 == (void *)0x6974617264617551 && v7 == 0x6C65646F4D636974) {
            operator new();
          }
        }
      }
      else if (v3 == 5)
      {
        CFStringRef v9 = v21;
        if ((v22 & 0x80u) != 0) {
          CFStringRef v9 = (void **)v21[0];
        }
        int v10 = *(_DWORD *)v9;
        int v11 = *((unsigned __int8 *)v9 + 4);
        if (v10 == 1835889988 && v11 == 121) {
          operator new();
        }
      }
      else if (v3 == 8)
      {
        CFIndex v4 = v21;
        if ((v22 & 0x80u) != 0) {
          CFIndex v4 = (void **)v21[0];
        }
        if (*v4 == (void *)0x6C65646F4D676F4CLL) {
          operator new();
        }
      }
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "No valid AmpModelType entry found in plist.");
    }
    int32x2_t v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(v20);
  }
  else
  {
    int32x2_t v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(v20);
  }
}

void sub_1BB419F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  if (a23) {
    operator delete(a23);
  }
  MEMORY[0x1C185D370](v24, 0x1081C402C4B44A1);
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

float applesauce::CF::details::find_at_key<float,char const(&)[18]>(const __CFDictionary *a1, char *a2)
{
  CFNumberRef v2 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[18]>(a1, a2);
  if (!v2)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
  }

  return applesauce::CF::convert_to<float,0>(v2);
}

void sub_1BB41A154(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *cpms::efficiency::Dummy<float>::toString@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Dummy amplifier (100% efficiency).");
}

void cpms::efficiency::Dummy<float>::CreateCFDictionary(CFDictionaryRef *a1@<X8>)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  CFTypeRef v5 = CFStringCreateWithBytes(0, (const UInt8 *)"AmpModelType", 12, 0x8000100u, 0);
  if (!v5)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFTypeRef v4 = CFStringCreateWithBytes(0, (const UInt8 *)"Dummy", 5, 0x8000100u, 0);
  if (!v4)
  {
    uint64_t v3 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v3, "Could not construct");
  }
  applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,applesauce::CF::StringRef>(&v7, &v5, &v4);
  v6[0] = &v7;
  v6[1] = 1;
  *a1 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v6);
  if (cf) {
    CFRelease(cf);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (v4) {
    CFRelease(v4);
  }
  if (v5) {
    CFRelease(v5);
  }
}

void sub_1BB41A2E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  _Unwind_Resume(a1);
}

float cpms::efficiency::Dummy<float>::ComputeNeededPowerGain(uint64_t a1, float *a2, uint64_t a3)
{
  return fminf(*a2 / (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, a3), 1.0);
}

float cpms::efficiency::Dummy<float>::ComputePower(uint64_t a1, float **a2)
{
  CFNumberRef v2 = *a2;
  float result = 0.0;
  while (v2 != a2[1])
  {
    float v4 = *v2++;
    float result = result + v4;
  }
  return result;
}

void cpms::efficiency::Dummy<float>::~Dummy()
{
}

float applesauce::CF::details::find_at_key<float,char const(&)[2]>(const __CFDictionary *a1, char *__s)
{
  CFIndex v4 = strlen(__s);
  CFStringRef v5 = CFStringCreateWithBytes(0, (const UInt8 *)__s, v4, 0x8000100u, 0);
  if (!v5)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, v5);
  CFRelease(v5);
  if (!Value)
  {
    uint64_t v9 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(v9);
  }

  return applesauce::CF::convert_to<float,0>(Value);
}

void sub_1BB41A514(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

float applesauce::CF::details::find_at_key<float,char const(&)[11]>(const __CFDictionary *a1, char *a2)
{
  CFNumberRef v2 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[11]>(a1, a2);
  if (!v2)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
  }

  return applesauce::CF::convert_to<float,0>(v2);
}

void sub_1BB41A594(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void cpms::efficiency::LogModel<float>::toString(float *a1@<X0>, std::string *a2@<X8>)
{
  std::to_string(&v33, a1[2]);
  CFIndex v4 = std::string::append(&v33, " * ln(x - ", 0xAuLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v32, a1[3]);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v6 = &v32;
  }
  else {
    uint64_t v6 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v32.__r_.__value_.__l.__size_;
  }
  uint64_t v8 = std::string::append(&v34, (const std::string::value_type *)v6, size);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  int v10 = std::string::append(&v35, ") + ", 4uLL);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v31, a1[4]);
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    __int16 v12 = &v31;
  }
  else {
    __int16 v12 = (std::string *)v31.__r_.__value_.__r.__words[0];
  }
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v13 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v13 = v31.__r_.__value_.__l.__size_;
  }
  __int16 v14 = std::string::append(&v36, (const std::string::value_type *)v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  uint64_t v16 = std::string::append(&v37, ", for x in [", 0xCuLL);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v30, a1[5]);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v18 = &v30;
  }
  else {
    long long v18 = (std::string *)v30.__r_.__value_.__r.__words[0];
  }
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v19 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v19 = v30.__r_.__value_.__l.__size_;
  }
  int32x2_t v20 = std::string::append(&v38, (const std::string::value_type *)v18, v19);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v39.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  unsigned __int8 v22 = std::string::append(&v39, ", ", 2uLL);
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v40.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v29, a1[6]);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v24 = &v29;
  }
  else {
    uint64_t v24 = (std::string *)v29.__r_.__value_.__r.__words[0];
  }
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v25 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v25 = v29.__r_.__value_.__l.__size_;
  }
  int v26 = std::string::append(&v40, (const std::string::value_type *)v24, v25);
  long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v41.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  int v28 = std::string::append(&v41, "]", 1uLL);
  *a2 = *v28;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
}

void sub_1BB41A8C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v59 - 57) < 0) {
    operator delete(*(void **)(v59 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v59 - 89) < 0) {
    operator delete(*(void **)(v59 - 112));
  }
  if (*(char *)(v59 - 121) < 0) {
    operator delete(*(void **)(v59 - 144));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v59 - 153) < 0) {
    operator delete(*(void **)(v59 - 176));
  }
  if (*(char *)(v59 - 185) < 0) {
    operator delete(*(void **)(v59 - 208));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BB41A9DC()
{
}

void sub_1BB41A9E4()
{
}

void sub_1BB41A9EC()
{
}

void sub_1BB41A9F4()
{
}

void cpms::efficiency::LogModel<float>::CreateCFDictionary(_DWORD *a1@<X0>, CFDictionaryRef *a2@<X8>)
{
  v37[2] = *MEMORY[0x1E4F143B8];
  CFTypeRef v30 = CFStringCreateWithBytes(0, (const UInt8 *)"a", 1, 0x8000100u, 0);
  if (!v30)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  LODWORD(valuePtr) = a1[2];
  CFTypeRef v29 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  if (!v29)
  {
    uint64_t v8 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v8, "Could not construct");
  }
  applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v32, &v30, &v29);
  CFStringRef valuePtr = CFStringCreateWithBytes(0, (const UInt8 *)"b", 1, 0x8000100u, 0);
  if (!valuePtr)
  {
    long long v9 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v9, "Could not construct");
  }
  LODWORD(v26) = a1[3];
  CFTypeRef v27 = CFNumberCreate(0, kCFNumberFloatType, &v26);
  if (!v27)
  {
    int v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v10, "Could not construct");
  }
  applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,applesauce::CF::NumberRef>(&v33, (CFTypeRef *)&valuePtr, &v27);
  CFTypeRef v26 = CFStringCreateWithBytes(0, (const UInt8 *)"c", 1, 0x8000100u, 0);
  if (!v26)
  {
    long long v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v11, "Could not construct");
  }
  LODWORD(v24) = a1[4];
  CFTypeRef v25 = CFNumberCreate(0, kCFNumberFloatType, &v24);
  if (!v25)
  {
    __int16 v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v12, "Could not construct");
  }
  applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,applesauce::CF::NumberRef>(&v34, &v26, &v25);
  CFTypeRef v24 = CFStringCreateWithBytes(0, (const UInt8 *)"rangeMin_W", 10, 0x8000100u, 0);
  if (!v24)
  {
    std::string::size_type v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v13, "Could not construct");
  }
  LODWORD(v22) = a1[5];
  CFTypeRef v23 = CFNumberCreate(0, kCFNumberFloatType, &v22);
  if (!v23)
  {
    __int16 v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v14, "Could not construct");
  }
  applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,applesauce::CF::NumberRef>(&v35, &v24, &v23);
  CFTypeRef v22 = CFStringCreateWithBytes(0, (const UInt8 *)"rangeMax_W", 10, 0x8000100u, 0);
  if (!v22)
  {
    long long v15 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v15, "Could not construct");
  }
  LODWORD(v20) = a1[6];
  CFTypeRef v21 = CFNumberCreate(0, kCFNumberFloatType, &v20);
  if (!v21)
  {
    uint64_t v16 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v16, "Could not construct");
  }
  applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,applesauce::CF::NumberRef>(&v36, &v22, &v21);
  CFTypeRef v20 = CFStringCreateWithBytes(0, (const UInt8 *)"AmpModelType", 12, 0x8000100u, 0);
  if (!v20)
  {
    long long v17 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v17, "Could not construct");
  }
  CFTypeRef cf = CFStringCreateWithBytes(0, (const UInt8 *)"LogModel", 8, 0x8000100u, 0);
  if (!cf)
  {
    long long v18 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v18, "Could not construct");
  }
  applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,applesauce::CF::StringRef>(v37, &v20, &cf);
  v31[0] = v32;
  v31[1] = 6;
  uint64_t v4 = 0;
  *a2 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v31);
  do
  {
    long long v5 = (const void *)v37[v4 + 1];
    if (v5) {
      CFRelease(v5);
    }
    uint64_t v6 = (const void *)v37[v4];
    if (v6) {
      CFRelease(v6);
    }
    v4 -= 2;
  }
  while (v4 != -12);
  if (cf) {
    CFRelease(cf);
  }
  if (v20) {
    CFRelease(v20);
  }
  if (v21) {
    CFRelease(v21);
  }
  if (v22) {
    CFRelease(v22);
  }
  if (v23) {
    CFRelease(v23);
  }
  if (v24) {
    CFRelease(v24);
  }
  if (v25) {
    CFRelease(v25);
  }
  if (v26) {
    CFRelease(v26);
  }
  if (v27) {
    CFRelease(v27);
  }
  if (valuePtr) {
    CFRelease(valuePtr);
  }
  if (v29) {
    CFRelease(v29);
  }
  if (v30) {
    CFRelease(v30);
  }
}

void sub_1BB41B048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, CFTypeRef a11, CFTypeRef a12, CFTypeRef a13, CFTypeRef a14, CFTypeRef a15, CFTypeRef a16, CFTypeRef a17, CFTypeRef a18, CFTypeRef a19, CFTypeRef a20,CFTypeRef a21,uint64_t a22,uint64_t a23,char a24)
{
  if (cf) {
    CFRelease(cf);
  }
  applesauce::CF::StringRef::~StringRef(&a11);
  applesauce::CF::NumberRef::~NumberRef(&a12);
  applesauce::CF::StringRef::~StringRef(&a13);
  applesauce::CF::NumberRef::~NumberRef(&a14);
  applesauce::CF::StringRef::~StringRef(&a15);
  applesauce::CF::NumberRef::~NumberRef(&a16);
  applesauce::CF::StringRef::~StringRef(&a17);
  applesauce::CF::NumberRef::~NumberRef(&a18);
  applesauce::CF::StringRef::~StringRef(&a19);
  applesauce::CF::NumberRef::~NumberRef(&a20);
  applesauce::CF::StringRef::~StringRef(&a21);
  while (v24 != (applesauce::CF::TypeRefPair *)&a24)
  {
    CFTypeRef v24 = (applesauce::CF::TypeRefPair *)((char *)v24 - 16);
    applesauce::CF::TypeRefPair::~TypeRefPair(v24);
  }
  _Unwind_Resume(a1);
}

float cpms::efficiency::LogModel<float>::ComputeNeededPowerGain()
{
  return 1.0;
}

float cpms::efficiency::LogModel<float>::ComputePower(float *a1, float **a2)
{
  float v2 = a1[6];
  if (v2 >= **a2) {
    float v2 = **a2;
  }
  if (a1[5] >= v2) {
    float v3 = a1[5];
  }
  else {
    float v3 = v2;
  }
  float v4 = a1[2];
  return v3 * (float)(a1[4] + (float)(v4 * logf(v3 - a1[3])));
}

void cpms::efficiency::LogModel<float>::~LogModel()
{
}

void *cpms::Polynomial<float,1ul>::Polynomial(void *result, void *a2, uint64_t a3)
{
  *float result = 0;
  if (a3 - (void)a2 != 8)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v4, 2uLL);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Polynomial needs ", &v4, &v5);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" coefficients", &v5, &v6);
    std::runtime_error::runtime_error(exception, &v6);
  }
  *float result = *a2;
  return result;
}

void sub_1BB41B4EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v28 & 1) == 0) {
LABEL_10:
    }
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v27);
  goto LABEL_10;
}

uint64_t cpms::Polynomial<float,2ul>::Polynomial(uint64_t result, uint64_t **a2)
{
  *(_DWORD *)float result = 0;
  *(void *)(result + 4) = 0;
  float v2 = *a2;
  if ((char *)a2[1] - (char *)*a2 != 12)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v5, 3uLL);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Polynomial needs ", &v5, &v6);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" coefficients", &v6, &v7);
    std::runtime_error::runtime_error(exception, &v7);
  }
  uint64_t v3 = *v2;
  *(_DWORD *)(result + 8) = *((_DWORD *)v2 + 2);
  *(void *)float result = v3;
  return result;
}

void sub_1BB41B634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v28 & 1) == 0) {
LABEL_10:
    }
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v27);
  goto LABEL_10;
}

void *cpms::efficiency::QuadraticBoostModel<float>::toString@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "QuadraticBoostModel");
}

void cpms::efficiency::QuadraticBoostModel<float>::CreateCFDictionary(_DWORD *a1@<X0>, CFDictionaryRef *a2@<X8>)
{
  v50[2] = *MEMORY[0x1E4F143B8];
  CFStringRef v4 = CFStringCreateWithBytes(0, (const UInt8 *)"high_power_coefs", 16, 0x8000100u, 0);
  v41[1] = v4;
  if (!v4)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  cpms::Polynomial<float,1ul>::as_vector(v40, a1 + 2);
  CFArrayRef CFArray = applesauce::CF::details::make_CFArrayRef<float>(v40);
  v41[0] = CFArray;
  applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,applesauce::CF::ArrayRef>(v43, v4, v41);
  CFStringRef v6 = CFStringCreateWithBytes(0, (const UInt8 *)"low_power_coefs", 15, 0x8000100u, 0);
  v39[1] = v6;
  if (!v6)
  {
    __int16 v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v14, "Could not construct");
  }
  cpms::Polynomial<float,1ul>::as_vector(v38, a1 + 4);
  CFArrayRef v7 = applesauce::CF::details::make_CFArrayRef<float>(v38);
  v39[0] = v7;
  applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,applesauce::CF::ArrayRef>(&v44, v6, v39);
  CFStringRef v8 = CFStringCreateWithBytes(0, (const UInt8 *)"boost_coefs", 11, 0x8000100u, 0);
  v37[1] = v8;
  if (!v8)
  {
    long long v15 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v15, "Could not construct");
  }
  cpms::Polynomial<float,2ul>::as_vector(__p, a1 + 6);
  CFArrayRef v9 = applesauce::CF::details::make_CFArrayRef<float>(__p);
  v37[0] = v9;
  applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,applesauce::CF::ArrayRef>(&v45, v8, v37);
  CFTypeRef v35 = CFStringCreateWithBytes(0, (const UInt8 *)"high_power_threshold", 20, 0x8000100u, 0);
  if (!v35)
  {
    uint64_t v16 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v16, "Could not construct");
  }
  LODWORD(valuePtr) = a1[9];
  CFTypeRef v34 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  if (!v34)
  {
    long long v17 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v17, "Could not construct");
  }
  applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,applesauce::CF::NumberRef>(&v46, &v35, &v34);
  CFStringRef valuePtr = CFStringCreateWithBytes(0, (const UInt8 *)"rangeMin_W", 10, 0x8000100u, 0);
  if (!valuePtr)
  {
    long long v18 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v18, "Could not construct");
  }
  LODWORD(v31) = a1[10];
  CFTypeRef v32 = CFNumberCreate(0, kCFNumberFloatType, &v31);
  if (!v32)
  {
    std::string::size_type v19 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v19, "Could not construct");
  }
  applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,applesauce::CF::NumberRef>(&v47, (CFTypeRef *)&valuePtr, &v32);
  CFTypeRef v31 = CFStringCreateWithBytes(0, (const UInt8 *)"rangeMax_W", 10, 0x8000100u, 0);
  if (!v31)
  {
    CFTypeRef v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v20, "Could not construct");
  }
  LODWORD(v29) = a1[11];
  CFTypeRef v30 = CFNumberCreate(0, kCFNumberFloatType, &v29);
  if (!v30)
  {
    CFTypeRef v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v21, "Could not construct");
  }
  applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,applesauce::CF::NumberRef>(&v48, &v31, &v30);
  CFTypeRef v29 = CFStringCreateWithBytes(0, (const UInt8 *)"power_multiplier", 16, 0x8000100u, 0);
  if (!v29)
  {
    CFTypeRef v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v22, "Could not construct");
  }
  LODWORD(v27) = a1[12];
  CFTypeRef v28 = CFNumberCreate(0, kCFNumberFloatType, &v27);
  if (!v28)
  {
    CFTypeRef v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v23, "Could not construct");
  }
  applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,applesauce::CF::NumberRef>(&v49, &v29, &v28);
  CFTypeRef v27 = CFStringCreateWithBytes(0, (const UInt8 *)"AmpModelType", 12, 0x8000100u, 0);
  if (!v27)
  {
    CFTypeRef v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v24, "Could not construct");
  }
  CFTypeRef cf = CFStringCreateWithBytes(0, (const UInt8 *)"QuadraticBoostModel", 19, 0x8000100u, 0);
  if (!cf)
  {
    CFTypeRef v25 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v25, "Could not construct");
  }
  applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,applesauce::CF::StringRef>(v50, &v27, &cf);
  v42[0] = v43;
  v42[1] = 8;
  uint64_t v10 = 0;
  *a2 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v42);
  do
  {
    long long v11 = (const void *)v50[v10 + 1];
    if (v11) {
      CFRelease(v11);
    }
    __int16 v12 = (const void *)v50[v10];
    if (v12) {
      CFRelease(v12);
    }
    v10 -= 2;
  }
  while (v10 != -16);
  if (cf) {
    CFRelease(cf);
  }
  if (v27) {
    CFRelease(v27);
  }
  if (v28) {
    CFRelease(v28);
  }
  if (v29) {
    CFRelease(v29);
  }
  if (v30) {
    CFRelease(v30);
  }
  if (v31) {
    CFRelease(v31);
  }
  if (v32) {
    CFRelease(v32);
  }
  if (valuePtr) {
    CFRelease(valuePtr);
  }
  if (v34) {
    CFRelease(v34);
  }
  if (v35) {
    CFRelease(v35);
  }
  if (v9) {
    CFRelease(v9);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  CFRelease(v8);
  if (v7) {
    CFRelease(v7);
  }
  if (v38[0])
  {
    v38[1] = v38[0];
    operator delete(v38[0]);
  }
  CFRelease(v6);
  if (CFArray) {
    CFRelease(CFArray);
  }
  if (v40[0])
  {
    v40[1] = v40[0];
    operator delete(v40[0]);
  }
  CFRelease(v4);
}

void sub_1BB41BE6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, CFTypeRef a10, CFTypeRef a11, CFTypeRef a12, CFTypeRef a13, CFTypeRef a14, CFTypeRef a15, CFTypeRef a16, CFTypeRef a17, CFTypeRef a18, void *__p, uint64_t a20,uint64_t a21,const void *a22,const void *a23,void *a24,uint64_t a25,uint64_t a26,const void *a27,const void *a28,void *a29,uint64_t a30,uint64_t a31,const void *a32,const void *a33,uint64_t a34,uint64_t a35,char a36)
{
  if (cf) {
    CFRelease(cf);
  }
  applesauce::CF::StringRef::~StringRef(&a10);
  applesauce::CF::NumberRef::~NumberRef(&a11);
  applesauce::CF::StringRef::~StringRef(&a12);
  applesauce::CF::NumberRef::~NumberRef(&a13);
  applesauce::CF::StringRef::~StringRef(&a14);
  applesauce::CF::NumberRef::~NumberRef(&a15);
  applesauce::CF::StringRef::~StringRef(&a16);
  applesauce::CF::NumberRef::~NumberRef(&a17);
  applesauce::CF::StringRef::~StringRef(&a18);
  applesauce::CF::ArrayRef::~ArrayRef(&a22);
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  applesauce::CF::StringRef::~StringRef(&a23);
  applesauce::CF::ArrayRef::~ArrayRef(&a27);
  if (a24)
  {
    a25 = (uint64_t)a24;
    operator delete(a24);
  }
  applesauce::CF::StringRef::~StringRef(&a28);
  applesauce::CF::ArrayRef::~ArrayRef(&a32);
  if (a29)
  {
    a30 = (uint64_t)a29;
    operator delete(a29);
  }
  applesauce::CF::StringRef::~StringRef(&a33);
  while (v36 != (applesauce::CF::TypeRefPair *)&a36)
  {
    uint64_t v36 = (applesauce::CF::TypeRefPair *)((char *)v36 - 16);
    applesauce::CF::TypeRefPair::~TypeRefPair(v36);
  }
  _Unwind_Resume(a1);
}

void *cpms::Polynomial<float,1ul>::as_vector(void *a1, const void *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return std::vector<float>::__init_with_size[abi:ne180100]<float const*,float const*>(a1, a2, (uint64_t)a2 + 8, 2uLL);
}

void *applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,applesauce::CF::ArrayRef>(void *a1, CFTypeRef cf, const void **a3)
{
  if (cf) {
    CFRetain(cf);
  }
  *a1 = cf;
  CFStringRef v6 = *a3;
  if (v6) {
    CFRetain(v6);
  }
  a1[1] = v6;
  return a1;
}

void *cpms::Polynomial<float,2ul>::as_vector(void *a1, const void *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return std::vector<float>::__init_with_size[abi:ne180100]<float const*,float const*>(a1, a2, (uint64_t)a2 + 12, 3uLL);
}

void *std::vector<float>::__init_with_size[abi:ne180100]<float const*,float const*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    CFStringRef v6 = result;
    float result = std::vector<unsigned int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      float result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BB41C368(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cpms::efficiency::QuadraticBoostModel<float>::ComputeNeededPowerGain(float *a1, float *a2, uint64_t *a3)
{
  v45[1] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  MEMORY[0x1F4188790](a1);
  size_t v8 = (float *)((char *)v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v9);
  long long v11 = (_DWORD *)((char *)v45 - v10);
  uint64_t v12 = (v5 - v6) >> 2;
  if (v5 == v6)
  {
    long long v17 = &v8[v12];
    uint64_t result = std::__sort<std::__less<float,float> &,float *>();
  }
  else
  {
    uint64_t v13 = 0;
    float v14 = a1[10];
    float v15 = a1[11];
    do
    {
      float v16 = *(float *)(v6 + v13 * 4);
      if (v15 < v16) {
        float v16 = v15;
      }
      if (v14 >= v16) {
        float v16 = v14;
      }
      v8[v13++] = v16;
    }
    while (v6 + v13 * 4 != v5);
    long long v17 = &v8[v12];
    uint64_t result = std::__sort<std::__less<float,float> &,float *>();
    float v19 = *v8;
    *long long v11 = *(_DWORD *)v8;
    if (v5 - v6 != 4)
    {
      CFTypeRef v20 = v8 + 1;
      CFTypeRef v21 = (float *)(v11 + 1);
      uint64_t v22 = 4 * v12 - 4;
      do
      {
        float v23 = *v20++;
        float v19 = v19 + v23;
        *v21++ = v19;
        v22 -= 4;
      }
      while (v22);
    }
  }
  uint64_t v24 = 0;
  float v25 = *a2;
  float v26 = 0.0;
  float v27 = 2.0;
  do
  {
    float v28 = (float)(v26 + v27) * 0.5;
    CFTypeRef v29 = v17;
    if (v6 != v5)
    {
      CFTypeRef v29 = v8;
      unint64_t v30 = (v5 - v6) >> 2;
      do
      {
        unint64_t v31 = v30 >> 1;
        CFTypeRef v32 = &v29[v30 >> 1];
        float v34 = *v32;
        uint64_t v33 = v32 + 1;
        v30 += ~(v30 >> 1);
        if (v34 < (float)(a1[9] / v28)) {
          CFTypeRef v29 = v33;
        }
        else {
          unint64_t v30 = v31;
        }
      }
      while (v30);
    }
    uint64_t v36 = (char *)v29 - (char *)v8;
    BOOL v35 = v36 == 0;
    uint64_t v37 = v36 >> 2;
    if (v35) {
      double v38 = 0.0;
    }
    else {
      double v38 = *(float *)&v11[v37 - 1];
    }
    float v39 = (float)(a1[4] * (float)v37) + (float)(v28 * a1[5]) * v38 + 0.0;
    double v40 = (float)(a1[2] * (float)(unint64_t)(v12 - v37)) + (float)(v28 * a1[3]) * (*(float *)&v11[v12 - 1] - v38);
    double v41 = v40 * 100.0;
    *(float *)&double v40 = v40;
    *(float *)&double v40 = v41 / (float)(a1[6] + (float)((float)(a1[7] + (float)(a1[8] * *(float *)&v40)) * *(float *)&v40))
                   + v39;
    BOOL v42 = v25 < *(float *)&v40;
    BOOL v43 = v25 <= *(float *)&v40;
    float v44 = (float)(v26 + v27) * 0.5;
    if (v43)
    {
      float v44 = v26;
      float v27 = (float)(v26 + v27) * 0.5;
      if (!v42) {
        break;
      }
    }
    ++v24;
    float v26 = v44;
  }
  while (v24 != 8);
  return result;
}

float cpms::efficiency::QuadraticBoostModel<float>::ComputePower(float *a1, float **a2)
{
  float v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 == v3)
  {
    float v5 = 0.0;
    float v4 = 0.0;
  }
  else
  {
    float v4 = 0.0;
    float v5 = 0.0;
    do
    {
      if (a1[11] >= *v2) {
        float v6 = *v2;
      }
      else {
        float v6 = a1[11];
      }
      if (a1[10] >= v6) {
        float v6 = a1[10];
      }
      if (*v2 >= a1[9]) {
        float v4 = v4 + (float)(a1[2] + (float)(a1[3] * v6));
      }
      else {
        float v5 = v5 + (float)(a1[4] + (float)(a1[5] * v6));
      }
      ++v2;
    }
    while (v2 != v3);
  }
  return a1[12]
       * (float)(v5 + (float)(v4 / (float)((float)(a1[6] + (float)(v4 * (float)((float)(v4 * a1[8]) + a1[7]))) / 100.0)));
}

void cpms::efficiency::QuadraticBoostModel<float>::~QuadraticBoostModel()
{
}

void applesauce::CF::convert_to<std::vector<float>,0>(uint64_t a1, const void *a2)
{
  CFTypeID TypeID = CFArrayGetTypeID();
  if (TypeID != CFGetTypeID(a2))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
  }
  int Count = CFArrayGetCount((CFArrayRef)a2);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  std::vector<float>::reserve((void **)a1, Count);
  if (Count >= 1)
  {
    for (CFIndex i = 0; i != Count; ++i)
    {
      CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)a2, i);
      float v8 = applesauce::CF::convert_to<float,0>(ValueAtIndex);
      float v9 = v8;
      long long v11 = *(float **)(a1 + 8);
      unint64_t v10 = *(void *)(a1 + 16);
      if ((unint64_t)v11 >= v10)
      {
        uint64_t v13 = *(float **)a1;
        uint64_t v14 = ((uint64_t)v11 - *(void *)a1) >> 2;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62) {
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v16 = v10 - (void)v13;
        if (v16 >> 1 > v15) {
          unint64_t v15 = v16 >> 1;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17)
        {
          long long v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(a1 + 16, v17);
          uint64_t v13 = *(float **)a1;
          long long v11 = *(float **)(a1 + 8);
        }
        else
        {
          long long v18 = 0;
        }
        float v19 = (float *)&v18[4 * v14];
        *float v19 = v9;
        uint64_t v12 = v19 + 1;
        while (v11 != v13)
        {
          int v20 = *((_DWORD *)v11-- - 1);
          *((_DWORD *)v19-- - 1) = v20;
        }
        *(void *)a1 = v19;
        *(void *)(a1 + 8) = v12;
        *(void *)(a1 + 16) = &v18[4 * v17];
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        *long long v11 = v8;
        uint64_t v12 = v11 + 1;
      }
      *(void *)(a1 + 8) = v12;
    }
  }
}

void sub_1BB41C880(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void cpms::efficiency::QuadraticModel<float>::toString(float *a1@<X0>, std::string *a2@<X8>)
{
  int v20 = 0;
  float v4 = a1 + 5;
  cpms::efficiency::QuadraticModel<float>::toString_impl<float const*>(&v21, &v20, a1 + 2, a1 + 5);
  float v5 = std::string::append(&v21, ", for x in [", 0xCuLL);
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v19, *v4);
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v7 = &v19;
  }
  else {
    uint64_t v7 = (std::string *)v19.__r_.__value_.__r.__words[0];
  }
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v19.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v19.__r_.__value_.__l.__size_;
  }
  float v9 = std::string::append(&v22, (const std::string::value_type *)v7, size);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  long long v11 = std::string::append(&v23, ", ", 2uLL);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a1[6]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v14 = __p.__r_.__value_.__l.__size_;
  }
  unint64_t v15 = std::string::append(&v24, (const std::string::value_type *)p_p, v14);
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  unint64_t v17 = std::string::append(&v25, "]", 1uLL);
  *a2 = *v17;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
}

void sub_1BB41CA88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (*(char *)(v40 - 41) < 0) {
    operator delete(*(void **)(v40 - 64));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v40 - 73) < 0) {
    operator delete(*(void **)(v40 - 96));
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void cpms::efficiency::QuadraticModel<float>::toString_impl<float const*>(std::string *a1, int *a2, float *a3, float *a4)
{
  if (a3 == a4)
  {
    std::string::basic_string[abi:ne180100]<0>(a1, "");
  }
  else
  {
    std::to_string(&v28, *a3);
    int v8 = *a2;
    if (*a2 < 1)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "");
    }
    else
    {
      std::to_string(&v24, *a2);
      float v9 = std::string::insert(&v24, 0, " * x^", 5uLL);
      long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      int64_t v26 = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
    }
    if (v26 >= 0) {
      long long v11 = __p;
    }
    else {
      long long v11 = (void **)__p[0];
    }
    if (v26 >= 0) {
      std::string::size_type v12 = HIBYTE(v26);
    }
    else {
      std::string::size_type v12 = (std::string::size_type)__p[1];
    }
    uint64_t v13 = std::string::append(&v28, (const std::string::value_type *)v11, v12);
    std::string v27 = *v13;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v26) < 0) {
      operator delete(__p[0]);
    }
    if (v8 >= 1 && SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
    int v23 = *a2 + 1;
    cpms::efficiency::QuadraticModel<float>::toString_impl<float const*>(__p, &v23, a3 + 1, a4);
    std::string::size_type v14 = (void *)HIBYTE(v26);
    if (v26 < 0) {
      std::string::size_type v14 = __p[1];
    }
    if (v14)
    {
      int v15 = SHIBYTE(v27.__r_.__value_.__r.__words[2]);
      if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = HIBYTE(v27.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t size = v27.__r_.__value_.__l.__size_;
      }
      unint64_t v17 = &v28;
      std::string::basic_string[abi:ne180100]((uint64_t)&v28, size + 3);
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        unint64_t v17 = (std::string *)v28.__r_.__value_.__r.__words[0];
      }
      if (size)
      {
        if (v15 >= 0) {
          long long v18 = &v27;
        }
        else {
          long long v18 = (std::string *)v27.__r_.__value_.__r.__words[0];
        }
        memmove(v17, v18, size);
      }
      *(_DWORD *)((char *)&v17->__r_.__value_.__l.__data_ + size) = 2108192;
      if (v26 >= 0) {
        std::string v19 = __p;
      }
      else {
        std::string v19 = (void **)__p[0];
      }
      if (v26 >= 0) {
        std::string::size_type v20 = HIBYTE(v26);
      }
      else {
        std::string::size_type v20 = (std::string::size_type)__p[1];
      }
      std::string v21 = std::string::append(&v28, (const std::string::value_type *)v19, v20);
      long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      a1->__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v28.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      int v15 = SHIBYTE(v27.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(a1, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
      }
      else {
        *a1 = v27;
      }
    }
    if ((SHIBYTE(v26) & 0x80000000) == 0)
    {
      if ((v15 & 0x80000000) == 0) {
        return;
      }
LABEL_49:
      operator delete(v27.__r_.__value_.__l.__data_);
      return;
    }
    operator delete(__p[0]);
    if (v15 < 0) {
      goto LABEL_49;
    }
  }
}

void sub_1BB41CDC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v29 - 57) < 0) {
    operator delete(*(void **)(v29 - 80));
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (v28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

void cpms::efficiency::QuadraticModel<float>::CreateCFDictionary(_DWORD *a1@<X0>, CFDictionaryRef *a2@<X8>)
{
  v28[2] = *MEMORY[0x1E4F143B8];
  CFTypeRef v23 = CFStringCreateWithBytes(0, (const UInt8 *)"rangeMin_W", 10, 0x8000100u, 0);
  if (!v23)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  LODWORD(valuePtr[0]) = a1[5];
  CFTypeRef v22 = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
  if (!v22)
  {
    long long v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v10, "Could not construct");
  }
  applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v25, &v23, &v22);
  CFTypeRef v21 = CFStringCreateWithBytes(0, (const UInt8 *)"rangeMax_W", 10, 0x8000100u, 0);
  if (!v21)
  {
    long long v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v11, "Could not construct");
  }
  LODWORD(valuePtr[0]) = a1[6];
  CFTypeRef v20 = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
  if (!v20)
  {
    std::string::size_type v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v12, "Could not construct");
  }
  applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,applesauce::CF::NumberRef>(&v26, &v21, &v20);
  CFStringRef v4 = CFStringCreateWithBytes(0, (const UInt8 *)"coefs", 5, 0x8000100u, 0);
  v19[1] = v4;
  if (!v4)
  {
    uint64_t v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v13, "Could not construct");
  }
  cpms::Polynomial<float,2ul>::as_vector(valuePtr, a1 + 2);
  CFArrayRef CFArray = applesauce::CF::details::make_CFArrayRef<float>(valuePtr);
  v19[0] = CFArray;
  applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,applesauce::CF::ArrayRef>(&v27, v4, v19);
  CFTypeRef v17 = CFStringCreateWithBytes(0, (const UInt8 *)"AmpModelType", 12, 0x8000100u, 0);
  if (!v17)
  {
    std::string::size_type v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v14, "Could not construct");
  }
  CFTypeRef cf = CFStringCreateWithBytes(0, (const UInt8 *)"QuadraticModel", 14, 0x8000100u, 0);
  if (!cf)
  {
    int v15 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v15, "Could not construct");
  }
  applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,applesauce::CF::StringRef>(v28, &v17, &cf);
  v24[0] = v25;
  v24[1] = 4;
  uint64_t v6 = 0;
  *a2 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v24);
  do
  {
    uint64_t v7 = (const void *)v28[v6 + 1];
    if (v7) {
      CFRelease(v7);
    }
    int v8 = (const void *)v28[v6];
    if (v8) {
      CFRelease(v8);
    }
    v6 -= 2;
  }
  while (v6 != -8);
  if (cf) {
    CFRelease(cf);
  }
  if (v17) {
    CFRelease(v17);
  }
  if (CFArray) {
    CFRelease(CFArray);
  }
  if (valuePtr[0])
  {
    valuePtr[1] = valuePtr[0];
    operator delete(valuePtr[0]);
  }
  CFRelease(v4);
  if (v20) {
    CFRelease(v20);
  }
  if (v21) {
    CFRelease(v21);
  }
  if (v22) {
    CFRelease(v22);
  }
  if (v23) {
    CFRelease(v23);
  }
}

void sub_1BB41D29C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, CFTypeRef a10, void *__p, uint64_t a12, uint64_t a13, const void *a14, const void *a15, CFTypeRef a16, CFTypeRef a17, CFTypeRef a18, CFTypeRef a19, uint64_t a20,uint64_t a21,char a22)
{
  if (cf) {
    CFRelease(cf);
  }
  applesauce::CF::StringRef::~StringRef(&a10);
  applesauce::CF::ArrayRef::~ArrayRef(&a14);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  applesauce::CF::StringRef::~StringRef(&a15);
  applesauce::CF::NumberRef::~NumberRef(&a16);
  applesauce::CF::StringRef::~StringRef(&a17);
  applesauce::CF::NumberRef::~NumberRef(&a18);
  applesauce::CF::StringRef::~StringRef(&a19);
  while (v22 != (applesauce::CF::TypeRefPair *)&a22)
  {
    CFTypeRef v22 = (applesauce::CF::TypeRefPair *)((char *)v22 - 16);
    applesauce::CF::TypeRefPair::~TypeRefPair(v22);
  }
  _Unwind_Resume(a1);
}

float cpms::efficiency::QuadraticModel<float>::ComputeNeededPowerGain(uint64_t a1)
{
  v24[1] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (float *)MEMORY[0x1F4188790](a1);
  uint64_t v6 = (float *)((char *)v24 - v5);
  uint64_t v7 = v3 - v4;
  if (v3 == v4)
  {
    float v14 = 0.0;
    float v18 = 0.0;
  }
  else
  {
    float v8 = v1[5];
    float v9 = v1[6];
    long long v10 = v6;
    do
    {
      float v11 = *v4++;
      float v12 = v11;
      if (v9 < v11) {
        float v12 = v9;
      }
      if (v8 >= v12) {
        float v12 = v8;
      }
      *v10++ = v12;
    }
    while (v4 != v3);
    uint64_t v13 = 4 * v7;
    float v14 = 0.0;
    uint64_t v15 = 4 * v7;
    long long v16 = v6;
    do
    {
      float v17 = *v16++;
      float v14 = v14 + v17;
      v15 -= 4;
    }
    while (v15);
    float v18 = 0.0;
    do
    {
      float v19 = *v6++;
      float v18 = v18 + (float)(v19 * v19);
      v13 -= 4;
    }
    while (v13);
  }
  float v20 = v1[2] * (float)(unint64_t)v7;
  float v21 = v18 * v1[4];
  if (v21 < 0.00000011921) {
    float v21 = 0.00000011921;
  }
  float v22 = *v2;
  if (*v2 < v20) {
    float v22 = v1[2] * (float)(unint64_t)v7;
  }
  return (float)(sqrtf((float)((float)(v21 * 4.0) * (float)(v22 - v20))+ (float)((float)(v14 * v1[3]) * (float)(v14 * v1[3])))- (float)(v14 * v1[3]))/ (float)(v21 + v21);
}

double cpms::efficiency::QuadraticModel<float>::ComputePower(float *a1, float **a2)
{
  float v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 == v3) {
    return 0.0;
  }
  double result = 0.0;
  do
  {
    float v5 = *v2++;
    float v6 = v5;
    if (a1[6] < v5) {
      float v6 = a1[6];
    }
    if (a1[5] >= v6) {
      float v6 = a1[5];
    }
    *(float *)&double result = *(float *)&result + (float)(a1[2] + (float)(v6 * (float)(a1[3] + (float)(a1[4] * v6))));
  }
  while (v2 != v3);
  return result;
}

void cpms::efficiency::QuadraticModel<float>::~QuadraticModel()
{
}

uint64_t AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetProperty(uint64_t a1, int a2, int a3, uint64_t a4, CFDictionaryRef *a5)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  if (a3) {
    return 4294956430;
  }
  switch(a2)
  {
    case 64101:
      if (!*(unsigned char *)(a1 + 584))
      {
        if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1) {
          dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_4718);
        }
        if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
        {
          float v9 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
          if (!*(void *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope) {
            return 0;
          }
        }
        else
        {
          float v9 = MEMORY[0x1E4F14500];
        }
        uint64_t result = os_log_type_enabled(v9, OS_LOG_TYPE_INFO);
        if (!result) {
          return result;
        }
        *(_DWORD *)CFStringRef valuePtr = 136315906;
        *(void *)&valuePtr[4] = "AUTemplateBase.h";
        *(_WORD *)&valuePtr[12] = 1024;
        *(_DWORD *)&valuePtr[14] = 775;
        *(_WORD *)&valuePtr[18] = 1024;
        *(_DWORD *)&valuePtr[20] = 64101;
        LOWORD(v73) = 2080;
        uint64_t v49 = "Characterized amplifier system";
        goto LABEL_126;
      }
      long long v56 = 0uLL;
      unint64_t v57 = 0;
      float v14 = *(void **)(a1 + 544);
      int32x4_t v53 = (void *)(a1 + 552);
      if (v14 != (void *)(a1 + 552))
      {
        do
        {
          applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&v68, "VolumeLevel");
          *(_DWORD *)CFStringRef valuePtr = *((_DWORD *)v14 + 7);
          if (!CFNumberCreate(0, kCFNumberFloatType, valuePtr))
          {
            exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not construct");
          }
          int v62 = (int)(float)(*((float *)v14 + 8) * 1000.0);
          applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,int>((applesauce::CF::TypeRef *)valuePtr, "power_inst", &v62);
          int v58 = (int)(float)(*((float *)v14 + 9) * 1000.0);
          applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,int>((applesauce::CF::TypeRef *)&valuePtr[16], "power_100ms", &v58);
          int v61 = (int)(float)(*((float *)v14 + 10) * 1000.0);
          applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,int>((applesauce::CF::TypeRef *)((char *)&v73 + 8), "power_1000ms", &v61);
          int v60 = (int)(float)(*((float *)v14 + 11) * 1000.0);
          applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,int>((applesauce::CF::TypeRef *)v74, "power_thermal", &v60);
          v63[0] = valuePtr;
          v63[1] = 4;
          CFDictionaryRef CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v63);
          for (uint64_t i = 0; i != -64; i -= 16)
          {
            float v17 = *(const void **)&v74[i + 8];
            if (v17) {
              CFRelease(v17);
            }
            float v18 = *(const void **)&v74[i];
            if (v18) {
              CFRelease(v18);
            }
          }
          applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)v70, "Measurements");
          if (CFDictionaryRef) {
            CFRetain(CFDictionaryRef);
          }
          CFDictionaryRef v71 = CFDictionaryRef;
          v59[0] = &v68;
          v59[1] = 2;
          CFDictionaryRef v19 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v59);
          for (uint64_t j = 0; j != -32; j -= 16)
          {
            float v21 = *(const void **)&valuePtr[j - 8];
            if (v21) {
              CFRelease(v21);
            }
            float v22 = *(const void **)&v70[j];
            if (v22) {
              CFRelease(v22);
            }
          }
          if (CFDictionaryRef) {
            CFRelease(CFDictionaryRef);
          }
          CFTypeRef v23 = (void *)*((void *)&v56 + 1);
          if (*((void *)&v56 + 1) >= v57)
          {
            std::string v25 = (void *)v56;
            uint64_t v26 = (uint64_t)(*((void *)&v56 + 1) - v56) >> 3;
            unint64_t v27 = v26 + 1;
            if ((unint64_t)(v26 + 1) >> 61) {
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v28 = v57 - v56;
            if ((uint64_t)(v57 - v56) >> 2 > v27) {
              unint64_t v27 = v28 >> 2;
            }
            if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v29 = v27;
            }
            *((void *)&v73 + 1) = &v57;
            if (v29)
            {
              unint64_t v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v29);
              CFTypeRef v23 = (void *)*((void *)&v56 + 1);
              std::string v25 = (void *)v56;
            }
            else
            {
              uint64_t v30 = 0;
            }
            unint64_t v31 = (CFDictionaryRef *)(v29 + 8 * v26);
            unint64_t v32 = v29 + 8 * v30;
            *(void *)&long long v73 = v32;
            CFDictionaryRef *v31 = v19;
            *(void *)&valuePtr[16] = v31 + 1;
            if (v23 == v25)
            {
              std::string v24 = v31 + 1;
            }
            else
            {
              do
              {
                CFDictionaryRef v33 = (const __CFDictionary *)*--v23;
                *--unint64_t v31 = v33;
                void *v23 = 0;
              }
              while (v23 != v25);
              std::string v24 = *(void **)&valuePtr[16];
              unint64_t v32 = v73;
            }
            long long v34 = v56;
            *(void *)&long long v56 = v31;
            *((void *)&v56 + 1) = v24;
            *(_OWORD *)&valuePtr[8] = v34;
            unint64_t v35 = v57;
            unint64_t v57 = v32;
            *(void *)&long long v73 = v35;
            *(void *)CFStringRef valuePtr = v34;
            std::__split_buffer<applesauce::CF::DictionaryRef>::~__split_buffer((uint64_t)valuePtr);
          }
          else
          {
            **((void **)&v56 + 1) = v19;
            std::string v24 = v23 + 1;
          }
          *((void *)&v56 + 1) = v24;
          uint64_t v36 = (void *)v14[1];
          if (v36)
          {
            do
            {
              uint64_t v37 = v36;
              uint64_t v36 = (void *)*v36;
            }
            while (v36);
          }
          else
          {
            do
            {
              uint64_t v37 = (void *)v14[2];
              BOOL v38 = *v37 == (void)v14;
              float v14 = v37;
            }
            while (!v38);
          }
          float v14 = v37;
        }
        while (v37 != v53);
      }
      CFArrayRef v39 = applesauce::CF::details::make_CFArrayRef<applesauce::CF::DictionaryRef>((uint64_t **)&v56);
      CFArrayRef v54 = v39;
      *(void *)CFStringRef valuePtr = &v56;
      std::vector<applesauce::CF::DictionaryRef>::__destroy_vector::operator()[abi:ne180100]((void ***)valuePtr);
      applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[9],applesauce::CF::ArrayRef>((applesauce::CF::TypeRef *)v64, "PowerLUT", (const void **)&v54);
      (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 568) + 32))(valuePtr);
      applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)v65, "AmpEfficiencyCoefs");
      uint64_t v40 = *(void *)valuePtr;
      if (*(void *)valuePtr) {
        CFRetain(*(CFTypeRef *)valuePtr);
      }
      v65[1] = v40;
      float v41 = *(float *)(a1 + 576);
      applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)v66, "TargetGainLimitDB");
      float v68 = log10f(v41) * 10.0;
      CFNumberRef v67 = CFNumberCreate(0, kCFNumberFloatType, &v68);
      if (!v67)
      {
        int32x4_t v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v51, "Could not construct");
      }
      v55[0] = v64;
      v55[1] = 3;
      CFDictionaryRef v42 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v55);
      for (uint64_t k = 0; k != -48; k -= 16)
      {
        float v44 = *(CFNumberRef *)((char *)&v67 + k);
        if (v44) {
          CFRelease(v44);
        }
        uint64_t v45 = *(const void **)&v66[k];
        if (v45) {
          CFRelease(v45);
        }
      }
      if (*(void *)valuePtr) {
        CFRelease(*(CFTypeRef *)valuePtr);
      }
      if (v39) {
        CFRelease(v39);
      }
      *a5 = v42;
      if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1) {
        dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_4718);
      }
      if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
      {
        float v9 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
        if (!*(void *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope) {
          return 0;
        }
      }
      else
      {
        float v9 = MEMORY[0x1E4F14500];
      }
      uint64_t result = os_log_type_enabled(v9, OS_LOG_TYPE_INFO);
      if (!result) {
        return result;
      }
      *(_DWORD *)CFStringRef valuePtr = 136315906;
      *(void *)&valuePtr[4] = "AUTemplateBase.h";
      *(_WORD *)&valuePtr[12] = 1024;
      *(_DWORD *)&valuePtr[14] = 773;
      *(_WORD *)&valuePtr[18] = 1024;
      *(_DWORD *)&valuePtr[20] = 64101;
      LOWORD(v73) = 2080;
      uint64_t v47 = "Characterized amplifier system";
      break;
    case 64100:
      if (!*(unsigned char *)(a1 + 608))
      {
        if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1) {
          dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_4718);
        }
        if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
        {
          float v9 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
          if (!*(void *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope) {
            return 0;
          }
        }
        else
        {
          float v9 = MEMORY[0x1E4F14500];
        }
        uint64_t result = os_log_type_enabled(v9, OS_LOG_TYPE_INFO);
        if (!result) {
          return result;
        }
        *(_DWORD *)CFStringRef valuePtr = 136315906;
        *(void *)&valuePtr[4] = "AUTemplateBase.h";
        *(_WORD *)&valuePtr[12] = 1024;
        *(_DWORD *)&valuePtr[14] = 775;
        *(_WORD *)&valuePtr[18] = 1024;
        *(_DWORD *)&valuePtr[20] = 64100;
        LOWORD(v73) = 2080;
        uint64_t v49 = "Power budget";
        goto LABEL_126;
      }
      LODWORD(v68) = (int)(float)(*(float *)(a1 + 592) * 1000.0);
      applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,int>((applesauce::CF::TypeRef *)valuePtr, "cpms_ts_i", (int *)&v68);
      LODWORD(v56) = (int)(float)(*(float *)(a1 + 596) * 1000.0);
      applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,int>((applesauce::CF::TypeRef *)&valuePtr[16], "cpms_ts_100", (int *)&v56);
      LODWORD(v63[0]) = (int)(float)(*(float *)(a1 + 600) * 1000.0);
      applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,int>((applesauce::CF::TypeRef *)((char *)&v73 + 8), "cpms_ts_1000", (int *)v63);
      LODWORD(v59[0]) = (int)(float)(*(float *)(a1 + 604) * 1000.0);
      applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,int>((applesauce::CF::TypeRef *)v74, "cpms_ts_thermal", (int *)v59);
      v64[0] = valuePtr;
      v64[1] = 4;
      CFDictionaryRef v10 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v64);
      for (uint64_t m = 0; m != -64; m -= 16)
      {
        float v12 = *(const void **)&v74[m + 8];
        if (v12) {
          CFRelease(v12);
        }
        uint64_t v13 = *(const void **)&v74[m];
        if (v13) {
          CFRelease(v13);
        }
      }
      *a5 = v10;
      if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1) {
        dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_4718);
      }
      if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
      {
        float v9 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
        if (!*(void *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope) {
          return 0;
        }
      }
      else
      {
        float v9 = MEMORY[0x1E4F14500];
      }
      uint64_t result = os_log_type_enabled(v9, OS_LOG_TYPE_INFO);
      if (!result) {
        return result;
      }
      *(_DWORD *)CFStringRef valuePtr = 136315906;
      *(void *)&valuePtr[4] = "AUTemplateBase.h";
      *(_WORD *)&valuePtr[12] = 1024;
      *(_DWORD *)&valuePtr[14] = 773;
      *(_WORD *)&valuePtr[18] = 1024;
      *(_DWORD *)&valuePtr[20] = 64100;
      LOWORD(v73) = 2080;
      uint64_t v47 = "Power budget";
      break;
    case 21:
      if (*(unsigned char *)(a1 + 537))
      {
        *(_DWORD *)a5 = *(unsigned __int8 *)(a1 + 536);
        if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1) {
          dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_4718);
        }
        if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
        {
          float v9 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
          if (!*(void *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope) {
            return 0;
          }
        }
        else
        {
          float v9 = MEMORY[0x1E4F14500];
        }
        uint64_t result = os_log_type_enabled(v9, OS_LOG_TYPE_INFO);
        if (!result) {
          return result;
        }
        *(_DWORD *)CFStringRef valuePtr = 136315906;
        *(void *)&valuePtr[4] = "AUTemplateBase.h";
        *(_WORD *)&valuePtr[12] = 1024;
        *(_DWORD *)&valuePtr[14] = 773;
        *(_WORD *)&valuePtr[18] = 1024;
        *(_DWORD *)&valuePtr[20] = 21;
        LOWORD(v73) = 2080;
        uint64_t v47 = "Bypass";
        break;
      }
      if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1) {
        dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_4718);
      }
      if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
      {
        float v9 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
        if (!*(void *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope) {
          return 0;
        }
      }
      else
      {
        float v9 = MEMORY[0x1E4F14500];
      }
      uint64_t result = os_log_type_enabled(v9, OS_LOG_TYPE_INFO);
      if (!result) {
        return result;
      }
      *(_DWORD *)CFStringRef valuePtr = 136315906;
      *(void *)&valuePtr[4] = "AUTemplateBase.h";
      *(_WORD *)&valuePtr[12] = 1024;
      *(_DWORD *)&valuePtr[14] = 775;
      *(_WORD *)&valuePtr[18] = 1024;
      *(_DWORD *)&valuePtr[20] = 21;
      LOWORD(v73) = 2080;
      uint64_t v49 = "Bypass";
LABEL_126:
      *(void *)((char *)&v73 + 2) = v49;
      uint64_t v48 = "%25s:%-5d Retrieved (unset) property data for property %u (%s)";
      goto LABEL_127;
    default:
      if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1) {
        dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_4718);
      }
      if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
      {
        uint64_t v46 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
        if (!*(void *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope) {
          return 4294956417;
        }
      }
      else
      {
        uint64_t v46 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)CFStringRef valuePtr = 136315650;
        *(void *)&valuePtr[4] = "AUTemplateBase.h";
        *(_WORD *)&valuePtr[12] = 1024;
        *(_DWORD *)&valuePtr[14] = 786;
        *(_WORD *)&valuePtr[18] = 1024;
        *(_DWORD *)&valuePtr[20] = a2;
        _os_log_impl(&dword_1BB0CE000, v46, OS_LOG_TYPE_ERROR, "%25s:%-5d Property data for unsupported property (%u) requested.", valuePtr, 0x18u);
      }
      return 4294956417;
  }
  *(void *)((char *)&v73 + 2) = v47;
  uint64_t v48 = "%25s:%-5d Retrieved property data for property %u (%s)";
LABEL_127:
  _os_log_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_INFO, v48, valuePtr, 0x22u);
  return 0;
}

void sub_1BB41E1C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,CFTypeRef a33,CFTypeRef cf,CFTypeRef a35,CFTypeRef a36)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a33) {
    CFRelease(a33);
  }
  uint64_t v40 = *(const void **)(v38 - 192);
  if (v40) {
    CFRelease(v40);
  }
  if (v36) {
    CFRelease(v36);
  }
  while (1)
  {
    float v41 = (const void *)*((void *)v37 - 1);
    if (v41) {
      CFRelease(v41);
    }
    CFDictionaryRef v42 = (const void *)*((void *)v37 - 2);
    if (v42) {
      CFRelease(v42);
    }
    v37 -= 16;
    if (v37 == &a29) {
      _Unwind_Resume(exception_object);
    }
  }
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,int>(applesauce::CF::TypeRef *a1, char *a2, int *a3)
{
  applesauce::CF::TypeRef::TypeRef(a1, a2);
  int valuePtr = *a3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *((void *)a1 + 1) = v5;
  if (!v5)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_1BB41E5D0(_Unwind_Exception *a1)
{
  uint64_t v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[9],applesauce::CF::ArrayRef>(applesauce::CF::TypeRef *a1, char *a2, const void **a3)
{
  applesauce::CF::TypeRef::TypeRef(a1, a2);
  CFNumberRef v5 = *a3;
  if (v5) {
    CFRetain(v5);
  }
  *((void *)a1 + 1) = v5;
  return a1;
}

uint64_t AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetPropertyInfo(uint64_t a1, int a2, int a3, uint64_t a4, _DWORD *a5, unsigned char *a6)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a3) {
    return 4294956430;
  }
  switch(a2)
  {
    case 64101:
      *a6 = *(unsigned char *)(a1 + 17) ^ 1;
      *a5 = 8;
      if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1) {
        dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_4718);
      }
      if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
      {
        float v8 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
        if (!*(void *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope) {
          return 0;
        }
      }
      else
      {
        float v8 = MEMORY[0x1E4F14500];
      }
      uint64_t result = os_log_type_enabled(v8, OS_LOG_TYPE_INFO);
      if (!result) {
        return result;
      }
      int v11 = 136315906;
      float v12 = "AUTemplateBase.h";
      __int16 v13 = 1024;
      int v14 = 835;
      __int16 v15 = 1024;
      int v16 = 64101;
      __int16 v17 = 2080;
      CFDictionaryRef v10 = "Characterized amplifier system";
      goto LABEL_35;
    case 64100:
      *a6 = 1;
      *a5 = 8;
      if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1) {
        dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_4718);
      }
      if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
      {
        float v8 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
        if (!*(void *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope) {
          return 0;
        }
      }
      else
      {
        float v8 = MEMORY[0x1E4F14500];
      }
      uint64_t result = os_log_type_enabled(v8, OS_LOG_TYPE_INFO);
      if (!result) {
        return result;
      }
      int v11 = 136315906;
      float v12 = "AUTemplateBase.h";
      __int16 v13 = 1024;
      int v14 = 835;
      __int16 v15 = 1024;
      int v16 = 64100;
      __int16 v17 = 2080;
      CFDictionaryRef v10 = "Power budget";
      goto LABEL_35;
    case 21:
      *a6 = 1;
      *a5 = 4;
      if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1) {
        dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_4718);
      }
      if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
      {
        float v8 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
        if (!*(void *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope) {
          return 0;
        }
      }
      else
      {
        float v8 = MEMORY[0x1E4F14500];
      }
      uint64_t result = os_log_type_enabled(v8, OS_LOG_TYPE_INFO);
      if (!result) {
        return result;
      }
      int v11 = 136315906;
      float v12 = "AUTemplateBase.h";
      __int16 v13 = 1024;
      int v14 = 835;
      __int16 v15 = 1024;
      int v16 = 21;
      __int16 v17 = 2080;
      CFDictionaryRef v10 = "Bypass";
LABEL_35:
      float v18 = v10;
      _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_INFO, "%25s:%-5d Retrieved info for property %u (%s)", (uint8_t *)&v11, 0x22u);
      return 0;
  }
  if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1) {
    dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_4718);
  }
  if (!AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
  {
    float v9 = MEMORY[0x1E4F14500];
LABEL_38:
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      int v11 = 136315650;
      float v12 = "AUTemplateBase.h";
      __int16 v13 = 1024;
      int v14 = 845;
      __int16 v15 = 1024;
      int v16 = a2;
      _os_log_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_INFO, "%25s:%-5d Info for unsupported property (%u) requested.", (uint8_t *)&v11, 0x18u);
    }
    return 4294956417;
  }
  float v9 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
  if (*(void *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope) {
    goto LABEL_38;
  }
  return 4294956417;
}

void AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::~AUTemplateBase(ausdk::AUBase *a1)
{
  *(void *)a1 = &unk_1F14C1880;
  std::__optional_destruct_base<cpms::LUTSystem<float>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)a1 + 544);
  ausdk::AUBase::~AUBase(a1);

  JUMPOUT(0x1C185D370);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_1F14C1880;
  std::__optional_destruct_base<cpms::LUTSystem<float>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)a1 + 544);

  ausdk::AUBase::~AUBase(a1);
}

void *ausdk::APFactory<AUAuxVPLookup,AUAuxVPDownlink>::Factory()
{
  uint64_t result = malloc_type_malloc(0x260uLL, 0xB0CA1167uLL);
  *uint64_t result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = AUAuxVPLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<AUAuxVPLookup,AUAuxVPDownlink>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<AUAuxVPLookup,AUAuxVPDownlink>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<AUAuxVPLookup,AUAuxVPDownlink>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<AUAuxVPLookup,AUAuxVPDownlink>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *((_OWORD *)v3 + 33) = 0u;
  *(void *)uint64_t v3 = &unk_1F14C6B78;
  ausdk::AUBase::CreateElements((uint64_t)v3);
  uint64_t Element = ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)Element + 40))(Element, 16);
  CFNumberRef v5 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v5, 0, 0.0, 0);
  float v6 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v6, 8u, 0.0, 0);
  uint64_t v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v7, 1u, 480.0, 0);
  float v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v8, 3u, -15.0, 0);
  float v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v9, 2u, -15.0, 0);
  CFDictionaryRef v10 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v10, 0xAu, 0.0, 0);
  int v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v11, 9u, 0.0, 0);
  float v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v12, 0xFu, 0.0, 0);
  __int16 v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v13, 4u, 100.0, 0);
  int v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v14, 5u, 0.0, 0);
  __int16 v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v15, 6u, 0.0, 0);
  int v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v16, 7u, 1.0, 0);
  __int16 v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v17, 0xBu, 0.0, 0);
  float v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v18, 0xCu, 0.0, 0);
  uint64_t v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v19, 0xEu, 0.0, 0);
  float v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v20, 0xDu, 0.0, 0);
  return a1;
}

void sub_1BB41ED78(_Unwind_Exception *a1)
{
  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<AUAuxVPLookup,AUAuxVPUplink>::Factory()
{
  uint64_t result = malloc_type_malloc(0x260uLL, 0xB0CA1167uLL);
  *uint64_t result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = AUAuxVPLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<AUAuxVPLookup,AUAuxVPUplink>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<AUAuxVPLookup,AUAuxVPUplink>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<AUAuxVPLookup,AUAuxVPUplink>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<AUAuxVPLookup,AUAuxVPUplink>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *((_OWORD *)v3 + 33) = 0u;
  *(void *)uint64_t v3 = &unk_1F14C6DC8;
  ausdk::AUBase::CreateElements((uint64_t)v3);
  uint64_t Element = ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)Element + 40))(Element, 19);
  CFNumberRef v5 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v5, 0, 0.0, 0);
  float v6 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v6, 1u, 0.0, 0);
  uint64_t v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v7, 2u, 10.0, 0);
  float v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v8, 3u, 0.0, 0);
  float v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v9, 4u, 0.0, 0);
  CFDictionaryRef v10 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v10, 5u, 0.0, 0);
  int v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v11, 6u, 0.0, 0);
  float v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v12, 7u, 0.0, 0);
  __int16 v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v13, 8u, 0.0, 0);
  int v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v14, 9u, 0.0, 0);
  __int16 v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v15, 0xAu, 0.0, 0);
  int v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v16, 0xBu, 0.0, 0);
  __int16 v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v17, 0xCu, 0.0, 0);
  float v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v18, 0xFu, 480.0, 0);
  uint64_t v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v19, 0x10u, 480.0, 0);
  float v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v20, 0x11u, 1.0, 0);
  float v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v21, 0x12u, 0.0, 0);
  return a1;
}

void sub_1BB41F09C(_Unwind_Exception *a1)
{
  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessLookup,AUCNG>::Factory()
{
  uint64_t result = malloc_type_malloc(0x258uLL, 0xB0CA1167uLL);
  *uint64_t result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUCNG>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUCNG>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUCNG>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUCNG>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *(void *)uint64_t v3 = &unk_1F14A9318;
  *((unsigned char *)v3 + 528) = 0;
  ausdk::AUBase::CreateElements((uint64_t)v3);
  uint64_t v9 = 0x40BF400000000000;
  long long v10 = xmmword_1BB8727B0;
  long long v11 = xmmword_1BB8727C0;
  uint64_t Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)Element + 56))(Element, &v9);
  uint64_t v5 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v5 + 56))(v5, &v9);
  float v6 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v6, 0, -120.0, 0);
  uint64_t v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v7, 1u, 0.0, 0);
  ausdk::AUBase::SetAFactoryPresetAsCurrent((char *)a1, (const AUPreset *)&sAUCNGPresets);
  srandom(5u);
  return a1;
}

void sub_1BB41F288(_Unwind_Exception *a1)
{
  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULevelDrivenSuppressor>::Factory()
{
  uint64_t result = malloc_type_malloc(0x758uLL, 0xB0CA1167uLL);
  *uint64_t result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULevelDrivenSuppressor>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULevelDrivenSuppressor>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULevelDrivenSuppressor>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULevelDrivenSuppressor>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = (_OWORD *)(a1 + 536);
  CFStringRef v4 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 2, 1);
  *(void *)CFStringRef v4 = &unk_1F14AB528;
  *((_DWORD *)v4 + 132) = 0;
  *((unsigned char *)v4 + 532) = 1;
  *((void *)v4 + 67) = 1;
  *((_DWORD *)v4 + 136) = 1;
  *(void *)((char *)v4 + 548) = 0;
  *((_WORD *)v4 + 278) = 0;
  *((_DWORD *)v4 + 140) = 2;
  *(_OWORD *)((char *)v4 + 564) = 0u;
  *(_OWORD *)((char *)v4 + 580) = 0u;
  *(_OWORD *)((char *)v4 + 596) = 0u;
  *((_DWORD *)v4 + 153) = 0;
  v3[5] = xmmword_1BB87A570;
  v3[6] = xmmword_1BB87A580;
  v3[7] = xmmword_1BB87A590;
  *((_DWORD *)v4 + 166) = 1112014848;
  *((void *)v4 + 84) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *((void *)v4 + 85) = _D1;
  *((void *)v4 + 86) = 0;
  *((_DWORD *)v4 + 174) = 0;
  *((void *)v4 + 120) = 0;
  *((_OWORD *)v4 + 58) = 0u;
  *((_OWORD *)v4 + 59) = 0u;
  *((_OWORD *)v4 + 56) = 0u;
  *((_OWORD *)v4 + 57) = 0u;
  *((_OWORD *)v4 + 54) = 0u;
  *((_OWORD *)v4 + 55) = 0u;
  *((_OWORD *)v4 + 52) = 0u;
  *((_OWORD *)v4 + 53) = 0u;
  *((_OWORD *)v4 + 50) = 0u;
  *((_OWORD *)v4 + 51) = 0u;
  *((_OWORD *)v4 + 48) = 0u;
  *((_OWORD *)v4 + 49) = 0u;
  *((_OWORD *)v4 + 46) = 0u;
  *((_OWORD *)v4 + 47) = 0u;
  *((_OWORD *)v4 + 44) = 0u;
  *((_OWORD *)v4 + 45) = 0u;
  *(void *)((char *)v4 + 980) = 0xC1000000C1000000;
  *(void *)((char *)v4 + 1092) = 0;
  *((_OWORD *)v4 + 62) = 0u;
  *((_OWORD *)v4 + 63) = 0u;
  *((_OWORD *)v4 + 64) = 0u;
  *((_OWORD *)v4 + 65) = 0u;
  *((void *)v4 + 132) = 0;
  *((_WORD *)v4 + 550) = 1;
  *((void *)v4 + 138) = 0;
  *((_DWORD *)v4 + 278) = 0;
  *((_OWORD *)v4 + 70) = 0u;
  *((_OWORD *)v4 + 71) = 0u;
  *((_OWORD *)v4 + 72) = 0u;
  *((_OWORD *)v4 + 73) = 0u;
  *((_OWORD *)v4 + 74) = 0u;
  *((_OWORD *)v4 + 75) = 0u;
  *((_OWORD *)v4 + 76) = 0u;
  *((_OWORD *)v4 + 77) = 0u;
  *((_OWORD *)v4 + 78) = 0u;
  *((_OWORD *)v4 + 79) = 0u;
  *((_OWORD *)v4 + 80) = 0u;
  *((_OWORD *)v4 + 81) = 0u;
  *((_OWORD *)v4 + 82) = 0u;
  *((_OWORD *)v4 + 83) = 0u;
  *((_OWORD *)v4 + 84) = 0u;
  *((_OWORD *)v4 + 85) = 0u;
  *((_OWORD *)v4 + 86) = 0u;
  *((_OWORD *)v4 + 87) = 0u;
  *((_DWORD *)v4 + 352) = 7;
  *(_OWORD *)((char *)v4 + 1416) = 0u;
  *(_OWORD *)((char *)v4 + 1432) = 0u;
  *(_OWORD *)((char *)v4 + 1448) = 0u;
  *(_OWORD *)((char *)v4 + 1464) = 0u;
  *(_OWORD *)((char *)v4 + 1480) = 0u;
  *(_OWORD *)((char *)v4 + 1496) = 0u;
  *(_OWORD *)((char *)v4 + 1512) = 0u;
  *(_OWORD *)((char *)v4 + 1528) = 0u;
  *(_OWORD *)((char *)v4 + 1544) = 0u;
  *(_OWORD *)((char *)v4 + 1560) = 0u;
  *(_OWORD *)((char *)v4 + 1576) = 0u;
  *(_OWORD *)((char *)v4 + 1592) = 0u;
  *(_OWORD *)((char *)v4 + 1608) = 0u;
  *((void *)v4 + 203) = 0;
  *((_DWORD *)v4 + 408) = 21;
  *((_DWORD *)v4 + 429) = 1078788662;
  *(_OWORD *)((char *)v4 + 1684) = xmmword_1BB8D5F38;
  *(_OWORD *)((char *)v4 + 1700) = unk_1BB8D5F48;
  *(_OWORD *)((char *)v4 + 1652) = unk_1BB8D5F18;
  *(_OWORD *)((char *)v4 + 1668) = xmmword_1BB8D5F28;
  *(_OWORD *)((char *)v4 + 1636) = NoiseSuppression::Gain::Gain<float,(LogTypes)0>::ComputeHypergeometricGain(std::vector<float> &,AutoValue<std::vector<float>,(LogTypes)0> &)::table;
  *(_OWORD *)((char *)v4 + 1720) = 0u;
  *(_OWORD *)((char *)v4 + 1736) = 0u;
  *(_OWORD *)((char *)v4 + 1752) = 0u;
  *(_OWORD *)((char *)v4 + 1768) = 0u;
  *(_OWORD *)((char *)v4 + 1784) = 0u;
  *(_OWORD *)((char *)v4 + 1800) = 0u;
  ausdk::AUBase::CreateElements((uint64_t)v4);
  uint64_t v10 = *(void *)(a1 + 120);
  if (v10) {
    LODWORD(v11) = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 24))(v10);
  }
  else {
    uint64_t v11 = (*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 3;
  }
  *(_DWORD *)(a1 + 560) = v11;
  uint64_t v26 = 0x40D7700000000000;
  long long v27 = xmmword_1BB87A250;
  long long v28 = xmmword_1BB87A260;
  uint64_t Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)Element + 56))(Element, &v26);
  uint64_t v13 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v13 + 56))(v13, &v26);
  if (*(_DWORD *)(a1 + 560) >= 2u)
  {
    uint64_t v23 = 0x40D7700000000000;
    long long v25 = xmmword_1BB8727C0;
    long long v24 = xmmword_1BB8727B0;
    uint64_t v14 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 1u);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v14 + 56))(v14, &v23);
  }
  uint64_t v15 = ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 40))(v15, 5);
  int v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v16, 0, 0.0, 0);
  __int16 v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v17, 1u, -26.0, 0);
  float v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v18, 2u, -24.0, 0);
  uint64_t v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v19, 3u, -75.0, 0);
  float v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v20, 4u, 0.0, 0);
  float v21 = AULevelDrivenSuppressor::InitializeInternals((AULevelDrivenSuppressor *)a1);
  *(unsigned char *)(a1 + 376) = 1;
  (*(void (**)(uint64_t, uint64_t, float))(*(void *)a1 + 512))(a1, 480, v21);
  *(void *)(a1 + 644) = 0x1E046BB8000;
  *(unsigned char *)(a1 + 557) = 0;
  _OWORD *v3 = xmmword_1BB873AA0;
  return a1;
}

void sub_1BB41F7B4(_Unwind_Exception *a1)
{
  uint64_t v7 = (void *)*((void *)v1 + 223);
  if (v7)
  {
    *((void *)v1 + 224) = v7;
    operator delete(v7);
  }
  float v8 = (void *)*((void *)v1 + 220);
  if (v8)
  {
    *((void *)v1 + 221) = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)*((void *)v1 + 217);
  if (v9)
  {
    *((void *)v1 + 218) = v9;
    operator delete(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)v1 + 216);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  uint64_t v11 = (void *)*((void *)v1 + 201);
  if (v11)
  {
    *((void *)v1 + 202) = v11;
    operator delete(v11);
  }
  float v12 = (void *)*((void *)v1 + 198);
  if (v12)
  {
    *((void *)v1 + 199) = v12;
    operator delete(v12);
  }
  uint64_t v13 = (void *)*((void *)v1 + 195);
  if (v13)
  {
    *((void *)v1 + 196) = v13;
    operator delete(v13);
  }
  uint64_t v14 = (void *)*((void *)v1 + 192);
  if (v14)
  {
    *((void *)v1 + 193) = v14;
    operator delete(v14);
  }
  uint64_t v15 = (void *)*((void *)v1 + 189);
  if (v15)
  {
    *((void *)v1 + 190) = v15;
    operator delete(v15);
  }
  int v16 = (void *)*((void *)v1 + 186);
  if (v16)
  {
    *((void *)v1 + 187) = v16;
    operator delete(v16);
  }
  __int16 v17 = (void *)*((void *)v1 + 183);
  if (v17)
  {
    *((void *)v1 + 184) = v17;
    operator delete(v17);
  }
  float v18 = (void *)*((void *)v1 + 180);
  if (v18)
  {
    *((void *)v1 + 181) = v18;
    operator delete(v18);
  }
  uint64_t v19 = *v5;
  if (*v5)
  {
    *((void *)v1 + 178) = v19;
    operator delete(v19);
  }
  float v20 = (void *)*((void *)v1 + 173);
  if (v20)
  {
    *((void *)v1 + 174) = v20;
    operator delete(v20);
  }
  float v21 = (void *)*((void *)v1 + 170);
  if (v21)
  {
    *((void *)v1 + 171) = v21;
    operator delete(v21);
  }
  float v22 = (void *)*((void *)v1 + 167);
  if (v22)
  {
    *((void *)v1 + 168) = v22;
    operator delete(v22);
  }
  uint64_t v23 = (void *)*((void *)v1 + 164);
  if (v23)
  {
    *((void *)v1 + 165) = v23;
    operator delete(v23);
  }
  long long v24 = (void *)*((void *)v1 + 161);
  if (v24)
  {
    *((void *)v1 + 162) = v24;
    operator delete(v24);
  }
  long long v25 = (void *)*((void *)v1 + 158);
  if (v25)
  {
    *((void *)v1 + 159) = v25;
    operator delete(v25);
  }
  uint64_t v26 = (void *)*((void *)v1 + 155);
  if (v26)
  {
    *((void *)v1 + 156) = v26;
    operator delete(v26);
  }
  long long v27 = (void *)*((void *)v1 + 152);
  if (v27)
  {
    *((void *)v1 + 153) = v27;
    operator delete(v27);
  }
  long long v28 = (void *)*((void *)v1 + 149);
  if (v28)
  {
    *((void *)v1 + 150) = v28;
    operator delete(v28);
  }
  unint64_t v29 = (void *)*((void *)v1 + 146);
  if (v29)
  {
    *((void *)v1 + 147) = v29;
    operator delete(v29);
  }
  uint64_t v30 = (void *)*((void *)v1 + 143);
  if (v30)
  {
    *((void *)v1 + 144) = v30;
    operator delete(v30);
  }
  unint64_t v31 = *v4;
  if (*v4)
  {
    *((void *)v1 + 141) = v31;
    operator delete(v31);
  }
  unint64_t v32 = (void *)*((void *)v1 + 130);
  if (v32)
  {
    *((void *)v1 + 131) = v32;
    operator delete(v32);
  }
  CFDictionaryRef v33 = (void *)*((void *)v1 + 127);
  if (v33)
  {
    *((void *)v1 + 128) = v33;
    operator delete(v33);
  }
  long long v34 = *v3;
  if (*v3)
  {
    *((void *)v1 + 125) = v34;
    operator delete(v34);
  }
  unint64_t v35 = (void *)*((void *)v1 + 118);
  if (v35)
  {
    *((void *)v1 + 119) = v35;
    operator delete(v35);
  }
  uint64_t v36 = (void *)*((void *)v1 + 115);
  if (v36)
  {
    *((void *)v1 + 116) = v36;
    operator delete(v36);
  }
  uint64_t v37 = (void *)*((void *)v1 + 112);
  if (v37)
  {
    *((void *)v1 + 113) = v37;
    operator delete(v37);
  }
  uint64_t v38 = (void *)*((void *)v1 + 109);
  if (v38)
  {
    *((void *)v1 + 110) = v38;
    operator delete(v38);
  }
  CFArrayRef v39 = (void *)*((void *)v1 + 106);
  if (v39)
  {
    *((void *)v1 + 107) = v39;
    operator delete(v39);
  }
  uint64_t v40 = (void *)*((void *)v1 + 103);
  if (v40)
  {
    *((void *)v1 + 104) = v40;
    operator delete(v40);
  }
  float v41 = (void *)*((void *)v1 + 100);
  if (v41)
  {
    *((void *)v1 + 101) = v41;
    operator delete(v41);
  }
  CFDictionaryRef v42 = (void *)*((void *)v1 + 97);
  if (v42)
  {
    *((void *)v1 + 98) = v42;
    operator delete(v42);
  }
  BOOL v43 = (void *)*((void *)v1 + 94);
  if (v43)
  {
    *((void *)v1 + 95) = v43;
    operator delete(v43);
  }
  float v44 = (void *)*((void *)v1 + 91);
  if (v44)
  {
    *((void *)v1 + 92) = v44;
    operator delete(v44);
  }
  uint64_t v45 = *v2;
  if (*v2)
  {
    *((void *)v1 + 89) = v45;
    operator delete(v45);
  }
  uint64_t v46 = (void *)*((void *)v1 + 74);
  if (v46)
  {
    *((void *)v1 + 75) = v46;
    operator delete(v46);
  }
  uint64_t v47 = (void *)*((void *)v1 + 71);
  if (v47)
  {
    *((void *)v1 + 72) = v47;
    operator delete(v47);
  }
  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULoudnessInNoise>::Factory()
{
  uint64_t result = malloc_type_malloc(0x12E8uLL, 0xB0CA1167uLL);
  *uint64_t result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULoudnessInNoise>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULoudnessInNoise>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULoudnessInNoise>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULoudnessInNoise>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1 + 612;
  CFStringRef v4 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 3, 1);
  *(void *)CFStringRef v4 = &unk_1F14BE158;
  *((void *)v4 + 66) = 0;
  *((void *)v4 + 67) = 0xC304000000000140;
  *((_OWORD *)v4 + 34) = 0u;
  *((_OWORD *)v4 + 35) = xmmword_1BB873AA0;
  *((_WORD *)v4 + 288) = 0;
  *(void *)((char *)v4 + 580) = 0x467A00000000001ELL;
  *((_DWORD *)v4 + 147) = 320;
  *((void *)v4 + 74) = 0x14100000280;
  *((unsigned char *)v4 + 600) = 0;
  *(void *)((char *)v4 + 604) = 0;
  *(_OWORD *)uint64_t v3 = xmmword_1BB87A5A0;
  *(_OWORD *)(v3 + 16) = xmmword_1BB87A5B0;
  *(void *)((char *)v4 + 644) = 0;
  *((void *)v4 + 84) = 0;
  *((_DWORD *)v4 + 170) = 0;
  *(void *)((char *)v4 + 684) = 0xFFFFFFFFLL;
  *(void *)((char *)v4 + 692) = 0x3C7DF3B600000000;
  *(_OWORD *)(a1 + 656) = 0u;
  bzero((char *)v4 + 700, 0x39DuLL);
  *(_DWORD *)(a1 + 1652) = 1065353216;
  *(unsigned char *)(a1 + 1656) = 0;
  *(_DWORD *)(a1 + 4284) = 0;
  *(unsigned char *)(v3 + 3676) = 0;
  bzero((void *)(a1 + 1676), 0xA24uLL);
  *(_OWORD *)(a1 + 4640) = 0u;
  *(_OWORD *)(a1 + 4612) = 0u;
  *(_OWORD *)(a1 + 4628) = 0u;
  *(_OWORD *)(a1 + 4580) = 0u;
  *(_OWORD *)(a1 + 4596) = 0u;
  *(_OWORD *)(a1 + 4548) = 0u;
  *(_OWORD *)(a1 + 4564) = 0u;
  *(_OWORD *)(a1 + 4516) = 0u;
  *(_OWORD *)(a1 + 4532) = 0u;
  *(_OWORD *)(a1 + 4484) = 0u;
  *(_OWORD *)(a1 + 4500) = 0u;
  *(_OWORD *)(a1 + 4452) = 0u;
  *(_OWORD *)(a1 + 4468) = 0u;
  *(_OWORD *)(a1 + 4420) = 0u;
  *(_OWORD *)(a1 + 4436) = 0u;
  *(_OWORD *)(a1 + 4388) = 0u;
  *(_OWORD *)(a1 + 4404) = 0u;
  *(_OWORD *)(a1 + 4356) = 0u;
  *(_OWORD *)(a1 + 4372) = 0u;
  *(_OWORD *)(a1 + 4324) = 0u;
  *(_OWORD *)(a1 + 4340) = 0u;
  *(_OWORD *)(a1 + 4292) = 0u;
  *(_OWORD *)(a1 + 4308) = 0u;
  *(_OWORD *)(a1 + 4656) = xmmword_1BB8C83F4;
  *(_OWORD *)(a1 + 4672) = unk_1BB8C8404;
  *(_OWORD *)(a1 + 4688) = xmmword_1BB8C8414;
  *(void *)(a1 + 4704) = 0x40E0000045FA0000;
  *(_DWORD *)(a1 + 4744) = 0;
  if (AULINNLogScope(void)::once != -1) {
    dispatch_once(&AULINNLogScope(void)::once, &__block_literal_global_26104);
  }
  if (AULINNLogScope(void)::scope)
  {
    uint64_t v5 = *(NSObject **)AULINNLogScope(void)::scope;
    if (!*(void *)AULINNLogScope(void)::scope) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v5 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioChannelLayout buf = 136315394;
    *(void *)&uint8_t buf[4] = "AULoudnessInNoise.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 161;
    _os_log_impl(&dword_1BB0CE000, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d AULoudnessInNoise: Initialize", buf, 0x12u);
  }
LABEL_9:
  ausdk::AUBase::CreateElements(a1);
  *(void *)AudioChannelLayout buf = 0x40CF400000000000;
  long long v35 = xmmword_1BB87A260;
  *(_OWORD *)&uint8_t buf[8] = xmmword_1BB87A250;
  uint64_t Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, unsigned char *))(*(void *)Element + 56))(Element, buf);
  uint64_t v7 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 1u);
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v7 + 56))(v7, buf);
  uint64_t v8 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 2u);
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v8 + 56))(v8, buf);
  uint64_t v9 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v9 + 56))(v9, buf);
  uint64_t v10 = ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 40))(v10, 67);
  uint64_t v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v11, 0, 0.0, 0);
  float v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v12, 1u, 0.0, 0);
  uint64_t v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v13, 2u, 1.0, 0);
  uint64_t v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v14, 3u, 1.0, 0);
  uint64_t v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v15, 4u, 90.0, 0);
  int v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v16, 5u, 0.0, 0);
  __int16 v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v17, 6u, 0.5, 0);
  float v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v18, 7u, -80.0, 0);
  uint64_t v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v19, 8u, -80.0, 0);
  float v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v20, 9u, 200.0, 0);
  float v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v21, 0xAu, 5005.0, 0);
  float v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v22, 0xBu, 2.0, 0);
  uint64_t v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v23, 0xCu, 0.25, 0);
  long long v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v24, 0x1Eu, 0.0, 0);
  long long v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v25, 0x20u, 0.0, 0);
  uint64_t v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v26, 0x3Du, 0.0, 0);
  long long v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v27, 0x3Cu, 0.0, 0);
  long long v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v28, 0x3Eu, 0.0, 0);
  unint64_t v29 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v29, 0x3Fu, -1.0, 0);
  uint64_t v30 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v30, 0x40u, 0.0, 0);
  unint64_t v31 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v31, 0x41u, 0.0, 0);
  unint64_t v32 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v32, 0x42u, -200.0, 0);
  *(unsigned char *)(a1 + 1656) = 0;
  *(unsigned char *)(a1 + 376) = 1;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 512))(a1, 320);
  *(_DWORD *)(a1 + 596) = 321;
  *(void *)(a1 + 584) = 0x140467A0000;
  *(unsigned char *)(a1 + 577) = 0;
  *(_DWORD *)(a1 + 544) = 0;
  *(_OWORD *)(a1 + 560) = xmmword_1BB873AA0;
  *(unsigned char *)(a1 + 1624) = 0;
  AULoudnessInNoise::Set_Level_Spreading_PropertyRelatedDefaults((AULoudnessInNoise *)a1);
  return a1;
}

void sub_1BB420178(_Unwind_Exception *a1)
{
  CFStringRef v4 = (void *)*((void *)v1 + 579);
  if (v4)
  {
    *((void *)v1 + 580) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)v1 + 576);
  if (v5)
  {
    *((void *)v1 + 577) = v5;
    operator delete(v5);
  }
  float v6 = (void *)*((void *)v1 + 573);
  if (v6)
  {
    *((void *)v1 + 574) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)v1 + 570);
  if (v7)
  {
    *((void *)v1 + 571) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)v1 + 567);
  if (v8)
  {
    *((void *)v1 + 568) = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)*((void *)v1 + 564);
  if (v9)
  {
    *((void *)v1 + 565) = v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)*((void *)v1 + 561);
  if (v10)
  {
    *((void *)v1 + 562) = v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)*((void *)v1 + 558);
  if (v11)
  {
    *((void *)v1 + 559) = v11;
    operator delete(v11);
  }
  float v12 = (void *)*((void *)v1 + 555);
  if (v12)
  {
    *((void *)v1 + 556) = v12;
    operator delete(v12);
  }
  uint64_t v13 = (void *)*((void *)v1 + 552);
  if (v13)
  {
    *((void *)v1 + 553) = v13;
    operator delete(v13);
  }
  uint64_t v14 = (void *)*((void *)v1 + 549);
  if (v14)
  {
    *((void *)v1 + 550) = v14;
    operator delete(v14);
  }
  uint64_t v15 = (void *)*((void *)v1 + 546);
  if (v15)
  {
    *((void *)v1 + 547) = v15;
    operator delete(v15);
  }
  int v16 = (void *)*((void *)v1 + 543);
  if (v16)
  {
    *((void *)v1 + 544) = v16;
    operator delete(v16);
  }
  __int16 v17 = (void *)*((void *)v1 + 540);
  if (v17)
  {
    *((void *)v1 + 541) = v17;
    operator delete(v17);
  }
  float v18 = (void *)*((void *)v1 + 537);
  if (v18)
  {
    *((void *)v1 + 538) = v18;
    operator delete(v18);
  }
  uint64_t v19 = (void *)*((void *)v1 + 531);
  if (v19)
  {
    *((void *)v1 + 532) = v19;
    operator delete(v19);
  }
  float v20 = (void *)*((void *)v1 + 528);
  if (v20)
  {
    *((void *)v1 + 529) = v20;
    operator delete(v20);
  }
  float v21 = (void *)*((void *)v1 + 525);
  if (v21)
  {
    *((void *)v1 + 526) = v21;
    operator delete(v21);
  }
  float v22 = (void *)*((void *)v1 + 522);
  if (v22)
  {
    *((void *)v1 + 523) = v22;
    operator delete(v22);
  }
  uint64_t v23 = (void *)*((void *)v1 + 519);
  if (v23)
  {
    *((void *)v1 + 520) = v23;
    operator delete(v23);
  }
  long long v24 = (void *)*((void *)v1 + 516);
  if (v24)
  {
    *((void *)v1 + 517) = v24;
    operator delete(v24);
  }
  long long v25 = (void *)*((void *)v1 + 513);
  if (v25)
  {
    *((void *)v1 + 514) = v25;
    operator delete(v25);
  }
  uint64_t v26 = (void *)*((void *)v1 + 510);
  if (v26)
  {
    *((void *)v1 + 511) = v26;
    operator delete(v26);
  }
  long long v27 = (void *)*((void *)v1 + 507);
  if (v27)
  {
    *((void *)v1 + 508) = v27;
    operator delete(v27);
  }
  long long v28 = (void *)*((void *)v1 + 504);
  if (v28)
  {
    *((void *)v1 + 505) = v28;
    operator delete(v28);
  }
  unint64_t v29 = (void *)*((void *)v1 + 501);
  if (v29)
  {
    *((void *)v1 + 502) = v29;
    operator delete(v29);
  }
  uint64_t v30 = 0;
  while (1)
  {
    unint64_t v31 = *(void **)((char *)v1 + v30 + 3984);
    if (v31)
    {
      *(void *)((char *)v1 + v30 + 3992) = v31;
      operator delete(v31);
    }
    v30 -= 24;
    if (v30 == -720)
    {
      unint64_t v32 = (void *)*((void *)v1 + 408);
      if (v32)
      {
        *((void *)v1 + 409) = v32;
        operator delete(v32);
      }
      CFDictionaryRef v33 = (void *)*((void *)v1 + 405);
      if (v33)
      {
        *((void *)v1 + 406) = v33;
        operator delete(v33);
      }
      long long v34 = (void *)*((void *)v1 + 402);
      if (v34)
      {
        *((void *)v1 + 403) = v34;
        operator delete(v34);
      }
      long long v35 = (void *)*((void *)v1 + 399);
      if (v35)
      {
        *((void *)v1 + 400) = v35;
        operator delete(v35);
      }
      uint64_t v36 = 0;
      while (1)
      {
        uint64_t v37 = *(void **)((char *)v1 + v36 + 3168);
        if (v37)
        {
          *(void *)((char *)v1 + v36 + 3176) = v37;
          operator delete(v37);
        }
        v36 -= 24;
        if (v36 == -720)
        {
          uint64_t v38 = (void *)*((void *)v1 + 306);
          if (v38)
          {
            *((void *)v1 + 307) = v38;
            operator delete(v38);
          }
          uint64_t v39 = 0;
          while (1)
          {
            uint64_t v40 = *(void **)((char *)v1 + v39 + 2424);
            if (v40)
            {
              *(void *)((char *)v1 + v39 + 2432) = v40;
              operator delete(v40);
            }
            v39 -= 24;
            if (v39 == -720)
            {
              float v41 = (void *)*((void *)v1 + 213);
              if (v41)
              {
                *((void *)v1 + 214) = v41;
                operator delete(v41);
              }
              CFDictionaryRef v42 = (void *)*((void *)v1 + 210);
              if (v42)
              {
                *((void *)v1 + 211) = v42;
                operator delete(v42);
              }
              BOOL v43 = (void *)*((void *)v1 + 200);
              if (v43)
              {
                *((void *)v1 + 201) = v43;
                operator delete(v43);
              }
              float v44 = (void *)*((void *)v1 + 197);
              if (v44)
              {
                *((void *)v1 + 198) = v44;
                operator delete(v44);
              }
              uint64_t v45 = (void *)*((void *)v1 + 194);
              if (v45)
              {
                *((void *)v1 + 195) = v45;
                operator delete(v45);
              }
              uint64_t v46 = (void *)*((void *)v1 + 191);
              if (v46)
              {
                *((void *)v1 + 192) = v46;
                operator delete(v46);
              }
              uint64_t v47 = (void *)*((void *)v1 + 187);
              if (v47)
              {
                *((void *)v1 + 188) = v47;
                operator delete(v47);
              }
              uint64_t v48 = (void *)*((void *)v1 + 184);
              if (v48)
              {
                *((void *)v1 + 185) = v48;
                operator delete(v48);
              }
              uint64_t v49 = 0;
              while (1)
              {
                int v50 = *(void **)((char *)v1 + v49 + 1448);
                if (v50)
                {
                  *(void *)((char *)v1 + v49 + 1456) = v50;
                  operator delete(v50);
                }
                v49 -= 24;
                if (v49 == -720)
                {
                  int32x4_t v51 = (void *)*((void *)v1 + 91);
                  if (v51)
                  {
                    *((void *)v1 + 92) = v51;
                    operator delete(v51);
                  }
                  int v52 = (void *)*((void *)v1 + 88);
                  if (v52)
                  {
                    *((void *)v1 + 89) = v52;
                    operator delete(v52);
                  }
                  int32x4_t v53 = *v2;
                  if (*v2)
                  {
                    *((void *)v1 + 83) = v53;
                    operator delete(v53);
                  }
                  uint64_t v54 = *((void *)v1 + 66);
                  *((void *)v1 + 66) = 0;
                  if (v54) {
                    MEMORY[0x1C185D370](v54, 0x60C4044C4A2DFLL);
                  }
                  ausdk::AUBase::~AUBase(v1);
                  _Unwind_Resume(a1);
                }
              }
            }
          }
        }
      }
    }
  }
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUFTSpatialAC>::Factory()
{
  uint64_t result = malloc_type_malloc(0x1530uLL, 0xB0CA1167uLL);
  *uint64_t result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUFTSpatialAC>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUFTSpatialAC>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUFTSpatialAC>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUWindKill>::Factory()
{
  uint64_t result = malloc_type_malloc(0x648uLL, 0xB0CA1167uLL);
  *uint64_t result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUWindKill>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUWindKill>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUWindKill>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUWindKill>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = a1 + 568;
  CFStringRef v4 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *(void *)CFStringRef v4 = &unk_1F14B9820;
  *((void *)v4 + 66) = 1;
  *((unsigned char *)v4 + 536) = 0;
  uint64_t v5 = (ausdk::AUBase *)((char *)v4 + 544);
  *((void *)v4 + 68) = 0x1AF1C9013F800000;
  *((unsigned char *)v4 + 552) = 0;
  *((void *)v4 + 70) = 0x40CF400000000000;
  *(_OWORD *)uint64_t v3 = xmmword_1BB87A5C0;
  *(_OWORD *)(v3 + 16) = xmmword_1BB87A5D0;
  *((void *)v4 + 75) = 0xEF00000000;
  *((_OWORD *)v4 + 38) = 0u;
  *((_OWORD *)v4 + 39) = 0u;
  *((_OWORD *)v4 + 40) = 0u;
  *(void *)((char *)v4 + 653) = 0;
  *(_OWORD *)((char *)v4 + 824) = 0u;
  *(_OWORD *)((char *)v4 + 840) = 0u;
  *(_OWORD *)((char *)v4 + 856) = 0u;
  *(_OWORD *)((char *)v4 + 872) = 0u;
  *(_OWORD *)((char *)v4 + 888) = 0u;
  *(_OWORD *)((char *)v4 + 904) = 0u;
  *(_OWORD *)((char *)v4 + 920) = 0u;
  *(_OWORD *)((char *)v4 + 936) = 0u;
  *(_OWORD *)((char *)v4 + 952) = 0u;
  float v6 = operator new(0xCuLL);
  *(void *)(a1 + 944) = v6;
  *(void *)(a1 + 960) = v6 + 3;
  *(void *)float v6 = 0x3F0000003E800000;
  void v6[2] = 1048576000;
  *(void *)(a1 + 952) = v6 + 3;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(void *)(a1 + 1125) = 0;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(_OWORD *)(a1 + 1312) = 0u;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_OWORD *)(a1 + 1360) = 0u;
  *(unsigned char *)(a1 + 1376) = 0;
  *(_OWORD *)(a1 + 1076) = 0u;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  LODWORD(v63) = 0;
  std::vector<float>::assign((char **)(a1 + 1040), 0xEuLL, &v63);
  *(unsigned char *)(a1 + 664) = 0;
  *(_OWORD *)(v3 + 100) = xmmword_1BB87A5E0;
  *(_OWORD *)(v3 + 116) = xmmword_1BB87A5F0;
  *(_OWORD *)(v3 + 132) = xmmword_1BB87A600;
  *(void *)(v3 + 148) = 0x3F0000003F4CCCCDLL;
  *(_DWORD *)(a1 + 748) = 0;
  *(void *)(a1 + 724) = 0;
  *(void *)(a1 + 740) = 0;
  *(void *)(a1 + 732) = 0;
  *(_OWORD *)(a1 + 752) = xmmword_1BB87A610;
  *(_OWORD *)(a1 + 768) = xmmword_1BB87A620;
  *(_DWORD *)(a1 + 784) = 1056964608;
  *(unsigned char *)(a1 + 788) = 0;
  *(_OWORD *)(v3 + 224) = xmmword_1BB87A630;
  *(_OWORD *)(v3 + 240) = xmmword_1BB87A640;
  WindDetectorAndSuppressor::UpdateWindSuppressorCoreState(v5);
  ausdk::AUBase::CreateElements(a1);
  *(unsigned char *)(a1 + 376) = 1;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 512))(a1, 1156);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(Element, 0, 0.0, 0);
  uint64_t v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v8, 1u, 0.0, 0);
  uint64_t v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v9, 0x1Bu, 160.0, 0);
  uint64_t v10 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v10, 2u, 0.7, 0);
  uint64_t v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v11, 3u, -12.0, 0);
  float v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v12, 4u, 0.0, 0);
  uint64_t v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v13, 5u, 300.0, 0);
  uint64_t v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v14, 6u, 0.05, 0);
  uint64_t v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v15, 7u, 0.5, 0);
  int v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v16, 8u, 6.0, 0);
  __int16 v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v17, 0x13u, 0.0, 0);
  float v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v18, 9u, 500.0, 0);
  uint64_t v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v19, 0xAu, 4000.0, 0);
  float v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v20, 0xBu, 0.8, 0);
  float v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v21, 0xCu, 0.5, 0);
  float v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v22, 0xDu, 0.0, 0);
  uint64_t v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v23, 0xEu, 0.0, 0);
  long long v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v24, 0xFu, 0.0, 0);
  long long v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v25, 0x14u, 0.0, 0);
  uint64_t v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v26, 0x1Cu, 0.0, 0);
  long long v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v27, 0x1Du, 0.0, 0);
  long long v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v28, 0x10u, 0.0, 0);
  unint64_t v29 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v29, 0x15u, 160.0, 0);
  uint64_t v30 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v30, 0x11u, 1000.0, 0);
  unint64_t v31 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v31, 0x16u, 0.02, 0);
  unint64_t v32 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v32, 0x12u, 24.0, 0);
  CFDictionaryRef v33 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v33, 0x1Eu, -80.0, 0);
  long long v34 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v34, 0x17u, -110.0, 0);
  long long v35 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v35, 0x18u, 0.03, 0);
  uint64_t v36 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v36, 0x19u, 0.5, 0);
  uint64_t v37 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v37, 0x1Au, 0.5, 0);
  uint64_t v38 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v38, 0x1Fu, 0.0, 0);
  uint64_t v39 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v39, 0x20u, 0.05, 0);
  uint64_t v40 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v40, 0x21u, 0.25, 0);
  float v41 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v41, 0x22u, 1.5, 0);
  CFDictionaryRef v42 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v42, 0x23u, 0.25, 0);
  BOOL v43 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v43, 0x24u, 0.005, 0);
  float v44 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v44, 0x25u, -20.0, 0);
  uint64_t v45 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v45, 0x26u, 5.0, 0);
  uint64_t v46 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v46, 0x27u, 0.0, 0);
  for (unsigned int i = 0; ; ++i)
  {
    uint64_t v48 = *(void *)(a1 + 120);
    if (v48) {
      LODWORD(v49) = (*(uint64_t (**)(uint64_t))(*(void *)v48 + 24))(v48);
    }
    else {
      uint64_t v49 = (*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 3;
    }
    if (i >= v49) {
      break;
    }
    if (!i)
    {
      uint64_t v50 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
      uint64_t v63 = 0x40E5888000000000;
      long long v64 = xmmword_1BB87A250;
      long long v65 = xmmword_1BB87A240;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v50 + 56))(v50, &v63);
    }
  }
  for (unsigned int j = 0; ; ++j)
  {
    uint64_t v52 = *(void *)(a1 + 168);
    if (v52) {
      LODWORD(v53) = (*(uint64_t (**)(uint64_t))(*(void *)v52 + 24))(v52);
    }
    else {
      uint64_t v53 = (*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 3;
    }
    if (j >= v53) {
      break;
    }
    switch(j)
    {
      case 2u:
        uint64_t v55 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 2u);
        uint64_t v63 = 0x40E5888000000000;
        long long v64 = xmmword_1BB8727B0;
        long long v65 = xmmword_1BB8727C0;
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v55 + 56))(v55, &v63);
        break;
      case 1u:
        uint64_t v56 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 1u);
        uint64_t v63 = 0x40E5888000000000;
        long long v64 = xmmword_1BB87A250;
        long long v65 = xmmword_1BB87A260;
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v56 + 56))(v56, &v63);
        break;
      case 0u:
        uint64_t v54 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
        uint64_t v63 = 0x40E5888000000000;
        long long v64 = xmmword_1BB87A250;
        long long v65 = xmmword_1BB87A240;
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v54 + 56))(v54, &v63);
        break;
    }
  }
  long long v57 = *(_OWORD *)(a1 + 776);
  *(_OWORD *)(a1 + 1480) = *(_OWORD *)(a1 + 760);
  *(_OWORD *)(a1 + 1496) = v57;
  long long v58 = *(_OWORD *)(a1 + 808);
  *(_OWORD *)(a1 + 1512) = *(_OWORD *)(a1 + 792);
  *(_OWORD *)(a1 + 1528) = v58;
  long long v59 = *(_OWORD *)(a1 + 712);
  *(_OWORD *)(a1 + 1416) = *(_OWORD *)(a1 + 696);
  *(_OWORD *)(a1 + 1432) = v59;
  long long v60 = *(_OWORD *)(a1 + 744);
  *(_OWORD *)(a1 + 1448) = *(_OWORD *)(a1 + 728);
  *(_OWORD *)(a1 + 1464) = v60;
  long long v61 = *(_OWORD *)(a1 + 680);
  *(_OWORD *)(a1 + 1384) = *(_OWORD *)(a1 + 664);
  *(_OWORD *)(a1 + 1400) = v61;
  return a1;
}

void sub_1BB420F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  WindSuppressorCore::~WindSuppressorCore(v21);
  long long v25 = (void *)*((void *)v20 + 127);
  if (v25)
  {
    *((void *)v20 + 128) = v25;
    operator delete(v25);
  }
  uint64_t v26 = (void *)*((void *)v20 + 124);
  if (v26)
  {
    *((void *)v20 + 125) = v26;
    operator delete(v26);
  }
  long long v27 = *v23;
  if (*v23)
  {
    *((void *)v20 + 122) = v27;
    operator delete(v27);
  }
  long long v28 = (void *)*((void *)v20 + 118);
  if (v28)
  {
    *((void *)v20 + 119) = v28;
    operator delete(v28);
  }
  unint64_t v29 = (void *)*((void *)v20 + 115);
  if (v29)
  {
    *((void *)v20 + 116) = v29;
    operator delete(v29);
  }
  uint64_t v30 = (void *)*((void *)v20 + 112);
  if (v30)
  {
    *((void *)v20 + 113) = v30;
    operator delete(v30);
  }
  unint64_t v31 = (void *)*((void *)v20 + 109);
  if (v31)
  {
    *((void *)v20 + 110) = v31;
    operator delete(v31);
  }
  unint64_t v32 = (void *)*((void *)v20 + 106);
  if (v32)
  {
    *((void *)v20 + 107) = v32;
    operator delete(v32);
  }
  CFDictionaryRef v33 = *v22;
  if (*v22)
  {
    *((void *)v20 + 104) = v33;
    operator delete(v33);
  }
  ausdk::AUBase::~AUBase(v20);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNFNSwitch>::Factory()
{
  uint64_t result = malloc_type_malloc(0x2E8uLL, 0xB0CA1167uLL);
  *uint64_t result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNFNSwitch>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNFNSwitch>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNFNSwitch>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNFNSwitch>::Construct(ausdk::AUBase *a1, OpaqueAudioComponentInstance *a2)
{
  float v2 = ausdk::AUBase::AUBase(a1, a2, 3, 2);
  *(void *)float v2 = &unk_1F14AE458;
  *((_OWORD *)v2 + 33) = xmmword_1BB873AA0;
  *((unsigned char *)v2 + 544) = 0;
  *((void *)v2 + 69) = 0;
  ausdk::AUBase::CreateElements((uint64_t)v2);
  operator new();
}

void sub_1BB4217A0(_Unwind_Exception *a1)
{
  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUBeamIt>::Factory()
{
  uint64_t result = malloc_type_malloc(0x4B8uLL, 0xB0CA1167uLL);
  *uint64_t result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUBeamIt>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUBeamIt>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUBeamIt>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUBeamIt>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 2, 4);
  *(void *)uint64_t v3 = &unk_1F14B41F0;
  *((_OWORD *)v3 + 33) = xmmword_1BB87A440;
  *((_OWORD *)v3 + 34) = xmmword_1BB87A440;
  *((_OWORD *)v3 + 35) = xmmword_1BB87A440;
  *((unsigned char *)v3 + 576) = 0;
  *((void *)v3 + 73) = 0;
  *((_DWORD *)v3 + 148) = 0;
  *(_OWORD *)((char *)v3 + 600) = 0u;
  *(_OWORD *)((char *)v3 + 616) = 0u;
  *((_WORD *)v3 + 316) = 0;
  *((unsigned char *)v3 + 634) = 1;
  *((void *)v3 + 80) = 0;
  *((void *)v3 + 142) = 0;
  ausdk::AUBase::CreateElements((uint64_t)v3);
  v5[0] = 0;
  v5[1] = 0;
  int v6 = 0;
  ausdk::ComponentBase::GetComponentDescription((ausdk::ComponentBase *)v5, *(OpaqueAudioComponentInstance **)(a1 + 8));
  BOOL v4 = HIDWORD(v5[0]) == 1651340388;
  *(unsigned char *)(a1 + 633) = HIDWORD(v5[0]) == 1651340388;
  if (!v4) {
    operator new();
  }
  operator new();
}

void sub_1BB4223A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14)
{
  uint64_t v23 = v19[11];
  v19[11] = 0;
  if (v23) {
    std::default_delete<SubbandDOACalculator>::operator()[abi:ne180100](v23);
  }
  long long v24 = (void *)v19[7];
  if (v24)
  {
    v19[8] = v24;
    operator delete(v24);
  }
  long long v25 = *v20;
  if (*v20)
  {
    v19[5] = v25;
    operator delete(v25);
  }
  uint64_t v26 = -11520;
  while (1)
  {
    long long v27 = (void *)*(v19 - 1);
    if (v27)
    {
      *uint64_t v19 = v27;
      operator delete(v27);
    }
    v19 -= 5;
    v26 += 40;
    if (!v26)
    {
      uint64_t v28 = -110592;
      uint64_t v29 = -184320;
      uint64_t v30 = -184320;
      while (1)
      {
        unint64_t v31 = (void *)*(v18 - 1);
        if (v31)
        {
          *float v18 = v31;
          operator delete(v31);
        }
        v18 -= 5;
        v30 += 40;
        if (!v30)
        {
          while (1)
          {
            unint64_t v32 = (void *)*(v17 - 1);
            if (v32)
            {
              *__int16 v17 = v32;
              operator delete(v32);
            }
            v17 -= 5;
            v29 += 40;
            if (!v29)
            {
              uint64_t v33 = -110592;
              while (1)
              {
                long long v34 = (void *)*(v21 - 1);
                if (v34)
                {
                  *float v21 = v34;
                  operator delete(v34);
                }
                v21 -= 3;
                v33 += 24;
                if (!v33)
                {
                  uint64_t v35 = -110592;
                  while (1)
                  {
                    uint64_t v37 = (void *)*(a9 - 1);
                    if (v37)
                    {
                      *a9 = v37;
                      operator delete(v37);
                    }
                    a9 -= 3;
                    v35 += 24;
                    if (!v35)
                    {
                      uint64_t v38 = -6912;
                      while (1)
                      {
                        uint64_t v40 = (void *)*(a10 - 1);
                        if (v40)
                        {
                          *a10 = v40;
                          operator delete(v40);
                        }
                        a10 -= 3;
                        v38 += 24;
                        if (!v38)
                        {
                          uint64_t v41 = -6912;
                          while (1)
                          {
                            BOOL v43 = (void *)*(a11 - 1);
                            if (v43)
                            {
                              *a11 = v43;
                              operator delete(v43);
                            }
                            a11 -= 3;
                            v41 += 24;
                            if (!v41)
                            {
                              while (1)
                              {
                                uint64_t v45 = (void *)*(a12 - 1);
                                if (v45)
                                {
                                  *a12 = v45;
                                  operator delete(v45);
                                }
                                a12 -= 3;
                                v28 += 24;
                                if (!v28)
                                {
                                  while (1)
                                  {
                                    uint64_t v46 = *(void **)((char *)v15 + v16 + 19584);
                                    if (v46)
                                    {
                                      *(void *)((char *)v15 + v16 + 19592) = v46;
                                      operator delete(v46);
                                    }
                                    v16 -= 24;
                                    if (!v16)
                                    {
                                      BeamformerBase::~BeamformerBase(v15);
                                      MEMORY[0x1C185D370](v15, 0x10B1C403E6D1052);
                                      a14 = a13;
                                      std::vector<std::unique_ptr<ausdk::AUElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
                                      ausdk::AUBase::~AUBase(v14);
                                      _Unwind_Resume(a1);
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDistance>::Factory()
{
  uint64_t result = malloc_type_malloc(0x2D8uLL, 0xB0CA1167uLL);
  *uint64_t result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDistance>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDistance>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDistance>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDistance>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 2, 1);
  *(void *)uint64_t v3 = &unk_1F14BFF50;
  *((_OWORD *)v3 + 33) = xmmword_1BB87A440;
  *((unsigned char *)v3 + 544) = 0;
  *((void *)v3 + 69) = 0;
  *((_DWORD *)v3 + 140) = 0;
  *(_OWORD *)((char *)v3 + 584) = 0u;
  *(_OWORD *)((char *)v3 + 568) = 0u;
  *((unsigned char *)v3 + 600) = 0;
  *((_DWORD *)v3 + 151) = 1156;
  *((void *)v3 + 76) = 0x40E5888000000000;
  *((_DWORD *)v3 + 154) = 16;
  *((unsigned char *)v3 + 620) = 1;
  *((void *)v3 + 82) = 0;
  ausdk::AUBase::CreateElements((uint64_t)v3);
  if (getDistanceLogScope(void)::once != -1) {
    dispatch_once(&getDistanceLogScope(void)::once, &__block_literal_global_28506);
  }
  if (getDistanceLogScope(void)::scope)
  {
    BOOL v4 = *(NSObject **)getDistanceLogScope(void)::scope;
    if (!*(void *)getDistanceLogScope(void)::scope) {
      goto LABEL_9;
    }
  }
  else
  {
    BOOL v4 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioChannelLayout buf = 136315394;
    *(void *)&uint8_t buf[4] = "AUDistance.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 627;
    _os_log_impl(&dword_1BB0CE000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting the default parameter values.", buf, 0x12u);
  }
LABEL_9:
  *(_DWORD *)(a1 + 624) = 50;
  *(_OWORD *)(a1 + 628) = xmmword_1BB879DF0;
  *(void *)(a1 + 644) = 0x3F0000003DCCCCCDLL;
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(Element, 0, 1.0, 0);
  int v6 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v6, 1u, 0.5, 0);
  uint64_t v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v7, 2u, 50.0, 0);
  uint64_t v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v8, 3u, 1.0, 0);
  uint64_t v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v9, 4u, 0.0, 0);
  uint64_t v10 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v10, 5u, 0.0, 0);
  uint64_t v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v11, 6u, 0.0, 0);
  float v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v12, 7u, 0.1, 0);
  uint64_t v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v13, 8u, 0.5, 0);
  if (getDistanceLogScope(void)::once != -1) {
    dispatch_once(&getDistanceLogScope(void)::once, &__block_literal_global_28506);
  }
  if (getDistanceLogScope(void)::scope)
  {
    uint64_t v14 = *(NSObject **)getDistanceLogScope(void)::scope;
    if (!*(void *)getDistanceLogScope(void)::scope) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v14 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioChannelLayout buf = 136315394;
    *(void *)&uint8_t buf[4] = "AUDistance.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 651;
    _os_log_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting the format defaults.", buf, 0x12u);
  }
LABEL_17:
  unsigned int v15 = 0;
  *(void *)(a1 + 608) = 0x40E5888000000000;
  *(void *)AudioChannelLayout buf = 0x40E5888000000000;
  long long v27 = xmmword_1BB87A6A0;
  *(_OWORD *)&uint8_t buf[8] = xmmword_1BB87A250;
  while (1)
  {
    uint64_t v16 = *(void *)(a1 + 120);
    if (v16) {
      LODWORD(v17) = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 24))(v16);
    }
    else {
      uint64_t v17 = (*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 3;
    }
    if (v15 >= v17) {
      break;
    }
    uint64_t v18 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v15);
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v18 + 56))(v18, buf);
    ++v15;
  }
  for (unsigned int i = 0; ; ++i)
  {
    uint64_t v20 = *(void *)(a1 + 168);
    if (v20) {
      LODWORD(v21) = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 24))(v20);
    }
    else {
      uint64_t v21 = (*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 3;
    }
    if (i >= v21) {
      break;
    }
    uint64_t v22 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), i);
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v22 + 56))(v22, buf);
  }
  uint64_t v23 = (AUDebugFeature *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 512))(a1, 1156);
  *(unsigned char *)(a1 + 376) = 1;
  *(unsigned char *)(a1 + 620) = AUDebugFeature::IsNonFiniteHandlingEnabled(v23);
  if (getDistanceLogScope(void)::once != -1) {
    dispatch_once(&getDistanceLogScope(void)::once, &__block_literal_global_28506);
  }
  if (getDistanceLogScope(void)::scope)
  {
    long long v24 = *(NSObject **)getDistanceLogScope(void)::scope;
    if (!*(void *)getDistanceLogScope(void)::scope) {
      return a1;
    }
  }
  else
  {
    long long v24 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)AudioChannelLayout buf = 136315394;
    *(void *)&uint8_t buf[4] = "AUDistance.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 70;
    _os_log_impl(&dword_1BB0CE000, v24, OS_LOG_TYPE_INFO, "%25s:%-5d Constructed.", buf, 0x12u);
  }
  return a1;
}

void sub_1BB422CE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<DistanceEstimator>::reset[abi:ne180100](v2 + 82, 0);
  std::vector<std::unique_ptr<ausdk::AUElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v2);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpatialProbability>::Factory()
{
  uint64_t result = malloc_type_malloc(0x400uLL, 0xB0CA1167uLL);
  *uint64_t result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpatialProbability>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpatialProbability>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpatialProbability>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpatialProbability>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *(void *)uint64_t v3 = &unk_1F14AE978;
  *((_OWORD *)v3 + 33) = xmmword_1BB87A440;
  *((_OWORD *)v3 + 34) = xmmword_1BB87A440;
  *((_OWORD *)v3 + 35) = xmmword_1BB87A440;
  *((unsigned char *)v3 + 576) = 0;
  *((_DWORD *)v3 + 145) = 1156;
  *((void *)v3 + 73) = 0x40E5888000000000;
  *((_DWORD *)v3 + 148) = 16;
  *((unsigned char *)v3 + 596) = 1;
  *(_OWORD *)((char *)v3 + 728) = 0u;
  *(_OWORD *)((char *)v3 + 744) = 0u;
  *(_OWORD *)((char *)v3 + 760) = 0u;
  *(_OWORD *)((char *)v3 + 776) = 0u;
  *(_OWORD *)((char *)v3 + 792) = 0u;
  *(_OWORD *)((char *)v3 + 808) = 0u;
  *(_OWORD *)((char *)v3 + 824) = 0u;
  *(_OWORD *)((char *)v3 + 840) = 0u;
  *(_OWORD *)((char *)v3 + 856) = 0u;
  *(_OWORD *)((char *)v3 + 872) = 0u;
  *(_OWORD *)((char *)v3 + 888) = 0u;
  *(_OWORD *)((char *)v3 + 904) = 0u;
  *(_OWORD *)((char *)v3 + 920) = 0u;
  *(_OWORD *)((char *)v3 + 936) = 0u;
  *((void *)v3 + 119) = 0;
  ausdk::AUBase::CreateElements((uint64_t)v3);
  *(void *)(a1 + 600) = 0;
  *(void *)(a1 + 608) = 0x3F80000000000000;
  *(_OWORD *)(a1 + 616) = xmmword_1BB872720;
  *(void *)(a1 + 632) = 1092616192;
  *(void *)(a1 + 640) = 0x3F00000000000000;
  *(_DWORD *)(a1 + 648) = 1056964608;
  *(unsigned char *)(a1 + 652) = 0;
  *(_DWORD *)(a1 + 656) = 0;
  *(void *)(a1 + 664) = 1056964608;
  *(float *)(a1 + 672) = __exp10f(-15.0);
  *(_DWORD *)(a1 + 676) = 1065353216;
  *(void *)(a1 + 688) = 0;
  *(void *)(a1 + 680) = 0;
  *(unsigned char *)(a1 + 696) = 0;
  *(float *)(a1 + 700) = __exp10f(-15.0);
  *(void *)(a1 + 704) = 1165623296;
  *(float *)(a1 + 712) = __exp10f(-1.0);
  *(void *)(a1 + 716) = 0x3D4CCCCD00000000;
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(Element, 0, 0.0, 0);
  uint64_t v5 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v5, 1u, 0.0, 0);
  int v6 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v6, 2u, 0.0, 0);
  uint64_t v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v7, 3u, 1.0, 0);
  uint64_t v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v8, 4u, 0.0, 0);
  uint64_t v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v9, 5u, 0.0, 0);
  uint64_t v10 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v10, 6u, 1.0, 0);
  uint64_t v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v11, 7u, 0.0, 0);
  float v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v12, 8u, 10.0, 0);
  uint64_t v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v13, 9u, 0.0, 0);
  uint64_t v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v14, 0xAu, 0.0, 0);
  unsigned int v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v15, 0xBu, 0.5, 0);
  uint64_t v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v16, 0xCu, 0.5, 0);
  uint64_t v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v17, 0xDu, 0.0, 0);
  uint64_t v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v18, 0xEu, 0.0, 0);
  uint64_t v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v19, 0xFu, 0.5, 0);
  uint64_t v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v20, 0x10u, 0.0, 0);
  uint64_t v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v21, 0x11u, -300.0, 0);
  uint64_t v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v22, 0x12u, 1.0, 0);
  uint64_t v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v23, 0x13u, 0.0, 0);
  long long v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v24, 0x14u, 0.0, 0);
  long long v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v25, 0x15u, 0.0, 0);
  uint64_t v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v26, 0x16u, 0.0, 0);
  long long v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v27, 0x17u, 0.0, 0);
  uint64_t v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v28, 0x18u, -300.0, 0);
  uint64_t v29 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v29, 0x19u, 4000.0, 0);
  uint64_t v30 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v30, 0x1Au, 0.0, 0);
  unint64_t v31 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v31, 0x1Bu, -20.0, 0);
  unint64_t v32 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v32, 0x1Cu, 0.0, 0);
  uint64_t v33 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v33, 0x1Du, 0.05, 0);
  unsigned int v34 = 0;
  *(void *)(a1 + 584) = 0x40E5888000000000;
  uint64_t v45 = 0x40E5888000000000;
  long long v46 = xmmword_1BB87A250;
  long long v47 = xmmword_1BB87A6A0;
  uint64_t v42 = 0x40E5888000000000;
  long long v44 = xmmword_1BB87A6A0;
  long long v43 = xmmword_1BB87A250;
  while (1)
  {
    uint64_t v35 = *(void *)(a1 + 120);
    if (v35) {
      LODWORD(v36) = (*(uint64_t (**)(uint64_t))(*(void *)v35 + 24))(v35);
    }
    else {
      uint64_t v36 = (*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 3;
    }
    if (v34 >= v36) {
      break;
    }
    uint64_t v37 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v34);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v37 + 56))(v37, &v45);
    ++v34;
  }
  for (unsigned int i = 0; ; ++i)
  {
    uint64_t v39 = *(void *)(a1 + 168);
    if (v39) {
      LODWORD(v40) = (*(uint64_t (**)(uint64_t))(*(void *)v39 + 24))(v39);
    }
    else {
      uint64_t v40 = (*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 3;
    }
    if (i >= v40)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 512))(a1, 1156);
      *(unsigned char *)(a1 + 376) = 1;
      operator new();
    }
    uint64_t v41 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), i);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v41 + 56))(v41, &v42);
  }
}

void sub_1BB423498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  uint64_t v19 = *(void *)(v16 + 64);
  *(void *)(v16 + 64) = 0;
  if (v19) {
    MEMORY[0x1C185D370](v19, 0x60C4044C4A2DFLL);
  }
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a14);
  a14 = (void **)v16;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a14);
  MEMORY[0x1C185D370](v16, 0x1020C40A98CFEF5);
  uint64_t v20 = (void *)*((void *)v14 + 117);
  if (v20)
  {
    *((void *)v14 + 118) = v20;
    operator delete(v20);
  }
  uint64_t v21 = (void *)*((void *)v14 + 114);
  if (v21)
  {
    *((void *)v14 + 115) = v21;
    operator delete(v21);
  }
  uint64_t v22 = (void *)*((void *)v14 + 111);
  if (v22)
  {
    *((void *)v14 + 112) = v22;
    operator delete(v22);
  }
  uint64_t v23 = (void *)*((void *)v14 + 108);
  if (v23)
  {
    *((void *)v14 + 109) = v23;
    operator delete(v23);
  }
  long long v24 = (void *)*((void *)v14 + 105);
  if (v24)
  {
    *((void *)v14 + 106) = v24;
    operator delete(v24);
  }
  long long v25 = (void *)*((void *)v14 + 102);
  if (v25)
  {
    *((void *)v14 + 103) = v25;
    operator delete(v25);
  }
  uint64_t v26 = (void *)*((void *)v14 + 99);
  if (v26)
  {
    *((void *)v14 + 100) = v26;
    operator delete(v26);
  }
  long long v27 = (void *)*((void *)v14 + 96);
  if (v27)
  {
    *((void *)v14 + 97) = v27;
    operator delete(v27);
  }
  uint64_t v28 = (void *)*((void *)v14 + 93);
  if (v28)
  {
    *((void *)v14 + 94) = v28;
    operator delete(v28);
  }
  std::unique_ptr<stvPlistHolder>::reset[abi:ne180100](v15, 0);
  uint64_t v29 = *v17;
  *uint64_t v17 = 0;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 32))(v29);
  }
  ausdk::AUBase::~AUBase(v14);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSeparate>::Factory()
{
  uint64_t result = malloc_type_malloc(0x300uLL, 0xB0CA1167uLL);
  *uint64_t result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSeparate>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSeparate>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSeparate>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSeparate>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *(void *)uint64_t v3 = &unk_1F14C5148;
  *((_OWORD *)v3 + 33) = xmmword_1BB87A440;
  *((unsigned char *)v3 + 544) = 0;
  *((void *)v3 + 69) = 0;
  *((_DWORD *)v3 + 140) = 0;
  *(_OWORD *)((char *)v3 + 584) = 0u;
  *(_OWORD *)((char *)v3 + 568) = 0u;
  *((_DWORD *)v3 + 150) = 512;
  *((void *)v3 + 76) = 0x40E5888000000000;
  *((_DWORD *)v3 + 154) = 3;
  *((unsigned char *)v3 + 620) = 1;
  *((_OWORD *)v3 + 43) = 0u;
  ausdk::AUBase::CreateElements((uint64_t)v3);
  *(_DWORD *)(a1 + 624) = 0;
  *(_OWORD *)(a1 + 628) = xmmword_1BB87A6B0;
  *(_DWORD *)(a1 + 644) = -1046478848;
  *(unsigned char *)(a1 + 648) = 0;
  *(_DWORD *)(a1 + 652) = -1041235968;
  *(_OWORD *)(a1 + 660) = xmmword_1BB87A6C0;
  *(_DWORD *)(a1 + 676) = -1027080192;
  *(void *)(a1 + 680) = 0xC2C80000C2B40000;
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(Element, 0, 0.0, 0);
  uint64_t v5 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v5, 1u, 2.0, 0);
  int v6 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v6, 2u, 0.9, 0);
  uint64_t v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v7, 3u, -30.0, 0);
  uint64_t v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v8, 4u, 9.5424, 0);
  uint64_t v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v9, 5u, -20.0, 0);
  uint64_t v10 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v10, 6u, 0.0, 0);
  uint64_t v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v11, 7u, -30.0, 0);
  float v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v12, 8u, 60.0, 0);
  uint64_t v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v13, 9u, 7000.0, 0);
  uint64_t v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v14, 0xAu, 0.1, 0);
  unsigned int v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v15, 0xBu, 6.0, 0);
  uint64_t v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v16, 0xCu, -100.0, 0);
  uint64_t v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v17, 0xDu, -90.0, 0);
  uint64_t v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v18, 0xEu, -100.0, 0);
  unsigned int v19 = 0;
  *(void *)(a1 + 608) = 0x40E5888000000000;
  uint64_t v32 = 0x40E5888000000000;
  long long v33 = xmmword_1BB87A250;
  long long v34 = xmmword_1BB87A450;
  uint64_t v29 = 0x40E5888000000000;
  long long v31 = xmmword_1BB87A450;
  long long v30 = xmmword_1BB87A250;
  while (1)
  {
    uint64_t v20 = *(void *)(a1 + 120);
    if (v20) {
      LODWORD(v21) = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 24))(v20);
    }
    else {
      uint64_t v21 = (*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 3;
    }
    if (v19 >= v21) {
      break;
    }
    uint64_t v22 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v19);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v22 + 56))(v22, &v32);
    ++v19;
  }
  for (unsigned int i = 0; ; ++i)
  {
    uint64_t v24 = *(void *)(a1 + 168);
    if (v24) {
      LODWORD(v25) = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 24))(v24);
    }
    else {
      uint64_t v25 = (*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 3;
    }
    if (i >= v25) {
      break;
    }
    uint64_t v26 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), i);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v26 + 56))(v26, &v29);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 512))(a1, 512);
  *(unsigned char *)(a1 + 376) = 1;
  AUSeparate::InitializeIVAClasses((AUSeparate *)a1);
  *(unsigned char *)(a1 + 620) = AUDebugFeature::IsNonFiniteHandlingEnabled(v27);
  return a1;
}

void sub_1BB423AC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<IVA_DirectiV_Rank1A>::reset[abi:ne180100](v2 + 87, 0);
  std::unique_ptr<IVA_HRLS_Rank1>::reset[abi:ne180100](v2 + 86, 0);
  std::vector<std::unique_ptr<ausdk::AUElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v2);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNeuralNetVAD>::Factory()
{
  uint64_t result = malloc_type_malloc(0x348uLL, 0xB0CA1167uLL);
  *uint64_t result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNeuralNetVAD>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNeuralNetVAD>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNeuralNetVAD>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNeuralNetVAD>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *(void *)uint64_t v3 = &unk_1F14B0F30;
  *((_OWORD *)v3 + 33) = xmmword_1BB87A440;
  *((unsigned char *)v3 + 544) = 0;
  *((void *)v3 + 69) = 0;
  *((_DWORD *)v3 + 140) = 0;
  *(_OWORD *)((char *)v3 + 584) = 0u;
  *(_OWORD *)((char *)v3 + 568) = 0u;
  *((_WORD *)v3 + 300) = 256;
  *((_DWORD *)v3 + 151) = 1156;
  *((_OWORD *)v3 + 38) = xmmword_1BB87A6D0;
  *((_DWORD *)v3 + 156) = 1;
  uint64_t v4 = (uint64_t)v3 + 736;
  *(_OWORD *)((char *)v3 + 628) = 0u;
  *(_OWORD *)((char *)v3 + 648) = 0u;
  *(_OWORD *)((char *)v3 + 664) = 0u;
  *(_OWORD *)((char *)v3 + 677) = 0u;
  *(_OWORD *)((char *)v3 + 696) = 0u;
  *(_OWORD *)((char *)v3 + 712) = 0u;
  *(void *)((char *)v3 + 725) = 0;
  *((void *)v3 + 96) = 0;
  *((_OWORD *)v3 + 46) = 0u;
  *((_OWORD *)v3 + 47) = 0u;
  ausdk::AUBase::CreateElements((uint64_t)v3);
  *(_DWORD *)(a1 + 688) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(Element, 0, 0.0, 0);
  int v6 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v6, 1u, 1.0, 0);
  uint64_t v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v7, 2u, 0.3, 0);
  uint64_t v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v8, 3u, 0.0, 0);
  uint64_t v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v9, 4u, 0.0, 0);
  uint64_t v10 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v10, 5u, 0.0, 0);
  uint64_t v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v11, 6u, 0.0, 0);
  float v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v12, 7u, 0.5, 0);
  uint64_t v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v13, 8u, 10.0, 0);
  uint64_t v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v14, 9u, 0.1, 0);
  unsigned int v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v15, 0xAu, 0.1, 0);
  uint64_t v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v16, 0xBu, 0.0, 0);
  uint64_t v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v17, 0x16u, 0.0, 0);
  *(unsigned char *)(a1 + 692) = 0;
  *(_DWORD *)(a1 + 696) = 0;
  *(_DWORD *)(a1 + 704) = 0;
  *(void *)(a1 + 708) = 0x3F0000003F800000;
  *(_DWORD *)(a1 + 716) = 2;
  *(void *)(a1 + 720) = 0;
  *(_DWORD *)(a1 + 728) = 1162039296;
  uint64_t v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v18, 0xCu, 0.0, 0);
  unsigned int v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v19, 0xDu, 0.0, 0);
  uint64_t v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v20, 0xEu, 0.0, 0);
  uint64_t v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v21, 0xFu, 0.0, 0);
  uint64_t v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v22, 0x10u, 1.0, 0);
  uint64_t v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v23, 0x11u, 0.5, 0);
  uint64_t v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v24, 0x12u, 2.0, 0);
  uint64_t v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v25, 0x13u, 0.0, 0);
  uint64_t v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v26, 0x14u, 0.0, 0);
  long long v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v27, 0x15u, 3125.0, 0);
  unsigned int v28 = 0;
  *(void *)(a1 + 608) = 0x40E5888000000000;
  uint64_t v38 = 0x40E5888000000000;
  long long v39 = xmmword_1BB87A250;
  long long v40 = xmmword_1BB87A260;
  while (1)
  {
    uint64_t v29 = *(void *)(a1 + 120);
    if (v29) {
      LODWORD(v30) = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 24))(v29);
    }
    else {
      uint64_t v30 = (*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 3;
    }
    if (v28 >= v30) {
      break;
    }
    uint64_t v31 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v28);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v31 + 56))(v31, &v38);
    ++v28;
  }
  for (unsigned int i = 0; ; ++i)
  {
    uint64_t v33 = *(void *)(a1 + 168);
    if (v33) {
      LODWORD(v34) = (*(uint64_t (**)(uint64_t))(*(void *)v33 + 24))(v33);
    }
    else {
      uint64_t v34 = (*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 3;
    }
    if (i >= v34) {
      break;
    }
    uint64_t v35 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), i);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v35 + 56))(v35, &v38);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 512))(a1, 1156);
  *(unsigned char *)(a1 + 376) = 1;
  *(void *)(a1 + 744) = *(void *)(a1 + 736);
  std::vector<float>::resize(v4, (*(_DWORD *)(a1 + 604) + 1));
  *(unsigned char *)(a1 + 601) = AUDebugFeature::IsNonFiniteHandlingEnabled(v36);
  return a1;
}

void sub_1BB4240FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100](v9 + 96, 0);
  std::unique_ptr<DirectionalVAD>::reset[abi:ne180100](v9 + 95, 0);
  uint64_t v13 = *v11;
  if (*v11)
  {
    v9[93] = (uint64_t)v13;
    operator delete(v13);
  }
  std::unique_ptr<NeuralNetVAD>::reset[abi:ne180100](v10, 0);
  std::vector<std::unique_ptr<ausdk::AUElement>>::__destroy_vector::operator()[abi:ne180100](&a9);
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v9);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNeuralNet>::Factory()
{
  uint64_t result = malloc_type_malloc(0x5C0uLL, 0xB0CA1167uLL);
  *uint64_t result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNeuralNet>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNeuralNet>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNeuralNet>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNeuralNet>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  *(void *)ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1) = &unk_1F14ACC48;
  if (AUNeuralNetLogScope(void)::once != -1) {
    dispatch_once(&AUNeuralNetLogScope(void)::once, &__block_literal_global_3112);
  }
  caulk::deferred_logger::create_v(*(caulk::deferred_logger **)AUNeuralNetLogScope(void)::scope, v3);
  *(_DWORD *)(a1 + 544) = 1156;
  *(_DWORD *)(a1 + 596) = 0;
  *(_WORD *)(a1 + 600) = 0;
  *(_OWORD *)(a1 + 604) = 0u;
  *(_OWORD *)(a1 + 548) = 0u;
  *(_OWORD *)(a1 + 564) = 0u;
  *(_OWORD *)(a1 + 578) = 0u;
  *(_DWORD *)(a1 + 620) = 1036831949;
  *(void *)(a1 + 624) = 0;
  *(_DWORD *)(a1 + 648) = 0;
  *(_OWORD *)(a1 + 632) = 0u;
  *(unsigned char *)(a1 + 652) = 1;
  *(_DWORD *)(a1 + 668) = 0;
  *(void *)(a1 + 656) = 0;
  *(unsigned char *)(a1 + 664) = 0;
  *(unsigned char *)(a1 + 672) = 1;
  *(void *)(a1 + 680) = 1;
  *(void *)(a1 + 688) = 0;
  *(void *)(a1 + 816) = 0;
  *(_OWORD *)(a1 + 800) = 0u;
  *(void *)AudioChannelLayout buf = a1 + 800;
  uint8_t buf[8] = 0;
  uint64_t v4 = (char *)operator new(0x270uLL);
  *(void *)(a1 + 800) = v4;
  uint64_t v5 = v4 + 624;
  *(void *)(a1 + 816) = v4 + 624;
  bzero(v4, 0x270uLL);
  *(void *)(a1 + 808) = v5;
  *(_DWORD *)(a1 + 824) = 0;
  *(unsigned char *)(a1 + 1232) = 0;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_OWORD *)(a1 + 1193) = 0u;
  caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((caulk::pooled_semaphore_mutex *)(a1 + 1240));
  *(_WORD *)(a1 + 1244) = 256;
  *(_DWORD *)(a1 + 1248) = 1;
  *(void *)(a1 + 1280) = 0;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(_DWORD *)(a1 + 1272) = 0;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(void *)(a1 + 1304) = 0x33D6BF953F800000;
  *(_DWORD *)(a1 + 1312) = 0;
  *(_DWORD *)(a1 + 1352) = 0;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(void *)(a1 + 1356) = 0x3ECCCCCD3F666666;
  *(void *)(a1 + 1364) = 0x3200000003;
  *(unsigned char *)(a1 + 1372) = 0;
  *(_DWORD *)(a1 + 1376) = 0;
  *(void *)(a1 + 1392) = 0;
  *(void *)(a1 + 1384) = 0;
  *(_WORD *)(a1 + 1400) = 0;
  if (getAUNeuralNetLog(void)::onceToken != -1) {
    dispatch_once(&getAUNeuralNetLog(void)::onceToken, &__block_literal_global_94);
  }
  int v6 = getAUNeuralNetLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUNeuralNetLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioChannelLayout buf = 134217984;
    *(void *)&uint8_t buf[4] = a1;
    _os_log_debug_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_DEBUG, "[%p] will construct", buf, 0xCu);
  }
  ausdk::AUBase::CreateElements(a1);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(Element, 0, 0.0, 0);
  *(_DWORD *)(a1 + 548) = 1065353216;
  uint64_t v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v8, 1u, 0.0, 0);
  *(float *)(a1 + 552) = __exp10f(-14.0);
  uint64_t v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v9, 2u, -140.0, 0);
  *(_DWORD *)(a1 + 556) = -1035468800;
  uint64_t v10 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v10, 3u, -50.0, 0);
  *(_DWORD *)(a1 + 560) = -1035468800;
  uint64_t v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v11, 4u, -50.0, 0);
  *(_DWORD *)(a1 + 564) = 0;
  float v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v12, 5u, 0.0, 0);
  *(_DWORD *)(a1 + 568) = 0;
  uint64_t v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v13, 6u, 0.0, 0);
  *(float *)(a1 + 572) = __exp10f(-5.0);
  uint64_t v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v14, 7u, -100.0, 0);
  *(unsigned char *)(a1 + 592) = 0;
  unsigned int v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v15, 0xCu, 0.0, 0);
  *(unsigned char *)(a1 + 593) = 0;
  uint64_t v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v16, 0xDu, 0.0, 0);
  *(float *)(a1 + 576) = __exp10f(-15.0);
  uint64_t v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v17, 8u, -300.0, 0);
  *(float *)(a1 + 580) = __exp10f(5.0);
  uint64_t v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v18, 9u, 100.0, 0);
  *(float *)(a1 + 584) = __exp10f(-15.0);
  unsigned int v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v19, 0xAu, -300.0, 0);
  *(float *)(a1 + 588) = __exp10f(5.0);
  uint64_t v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v20, 0xBu, 100.0, 0);
  uint64_t v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v21, 0xEu, 0.0, 0);
  uint64_t v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v22, 0xFu, 1.0, 0);
  uint64_t v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v23, 0x10u, 1.0, 0);
  uint64_t v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v24, 0x11u, 0.0, 0);
  uint64_t v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v25, 0x12u, 480.0, 0);
  uint64_t v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v26, 0x13u, 0.0, 0);
  long long v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v27, 0x14u, 0.0, 0);
  unsigned int v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v28, 0x13u, 0.0, 0);
  *(unsigned char *)(a1 + 600) = 0;
  uint64_t v29 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v29, 0x15u, 0.0, 0);
  *(unsigned char *)(a1 + 601) = 0;
  uint64_t v30 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v30, 0x16u, 0.0, 0);
  *(_DWORD *)(a1 + 604) = 925353388;
  uint64_t v31 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v31, 0x17u, 0.00001, 0);
  *(_DWORD *)(a1 + 608) = 925353388;
  uint64_t v32 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v32, 0x18u, 0.00001, 0);
  uint64_t v33 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v33, 0x19u, 1.0, 0);
  uint64_t v34 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v34, 0x1Au, 1.0, 0);
  unsigned int v35 = 0;
  *(void *)AudioChannelLayout buf = 0x40E5888000000000;
  *(_OWORD *)&uint8_t buf[8] = xmmword_1BB8727B0;
  uint64_t v46 = 0x100000004;
  uint64_t v47 = 32;
  while (1)
  {
    uint64_t v36 = *(void *)(a1 + 120);
    if (v36) {
      LODWORD(v37) = (*(uint64_t (**)(uint64_t))(*(void *)v36 + 24))(v36);
    }
    else {
      uint64_t v37 = (*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 3;
    }
    if (v35 >= v37) {
      break;
    }
    uint64_t v38 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v35);
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v38 + 56))(v38, buf);
    ++v35;
  }
  for (unsigned int i = 0; ; ++i)
  {
    uint64_t v40 = *(void *)(a1 + 168);
    if (v40) {
      LODWORD(v41) = (*(uint64_t (**)(uint64_t))(*(void *)v40 + 24))(v40);
    }
    else {
      uint64_t v41 = (*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 3;
    }
    if (i >= v41) {
      break;
    }
    uint64_t v42 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), i);
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v42 + 56))(v42, buf);
  }
  *(unsigned char *)(a1 + 376) = 1;
  if (getAUNeuralNetLog(void)::onceToken != -1) {
    dispatch_once(&getAUNeuralNetLog(void)::onceToken, &__block_literal_global_94);
  }
  long long v43 = getAUNeuralNetLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUNeuralNetLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioChannelLayout buf = 134217984;
    *(void *)&uint8_t buf[4] = a1;
    _os_log_impl(&dword_1BB0CE000, v43, OS_LOG_TYPE_DEFAULT, "[%p] constructed", buf, 0xCu);
  }
  return a1;
}

void sub_1BB424A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  if (*(unsigned char *)(v10 + 1232))
  {
    float v12 = *(void **)(v10 + 1208);
    if (v12)
    {
      *(void *)(v10 + 1216) = v12;
      operator delete(v12);
    }
  }
  uint64_t v13 = *(const void **)(v10 + 1200);
  if (v13) {
    CFRelease(v13);
  }
  uint64_t v14 = *(const void **)(v10 + 1192);
  if (v14) {
    CFRelease(v14);
  }
  unsigned int v15 = *(const void **)(v10 + 1184);
  if (v15) {
    CFRelease(v15);
  }
  uint64_t v16 = *(void **)(v10 + 1160);
  if (v16)
  {
    *(void *)(v10 + 1168) = v16;
    operator delete(v16);
  }
  uint64_t v17 = *(void **)(v10 + 1128);
  if (v17)
  {
    *(void *)(v10 + 1136) = v17;
    operator delete(v17);
  }
  uint64_t v18 = *(void **)(v10 + 1104);
  if (v18)
  {
    *(void *)(v10 + 1112) = v18;
    operator delete(v18);
  }
  unsigned int v19 = *(void **)(v10 + 1080);
  if (v19)
  {
    *(void *)(v10 + 1088) = v19;
    operator delete(v19);
  }
  a10 = (void **)(v10 + 1056);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  uint64_t v20 = *(void **)(v10 + 1032);
  if (v20)
  {
    *(void *)(v10 + 1040) = v20;
    operator delete(v20);
  }
  uint64_t v21 = *(void **)(v10 + 1008);
  if (v21)
  {
    *(void *)(v10 + 1016) = v21;
    operator delete(v21);
  }
  uint64_t v22 = *(void **)(v10 + 984);
  if (v22)
  {
    *(void *)(v10 + 992) = v22;
    operator delete(v22);
  }
  uint64_t v23 = *(void **)(v10 + 952);
  if (v23)
  {
    *(void *)(v10 + 960) = v23;
    operator delete(v23);
  }
  uint64_t v24 = *(void **)(v10 + 928);
  if (v24)
  {
    *(void *)(v10 + 936) = v24;
    operator delete(v24);
  }
  uint64_t v25 = *(void **)(v10 + 904);
  if (v25)
  {
    *(void *)(v10 + 912) = v25;
    operator delete(v25);
  }
  uint64_t v26 = *(void **)(v10 + 880);
  if (v26)
  {
    *(void *)(v10 + 888) = v26;
    operator delete(v26);
  }
  long long v27 = (void **)(v10 + 832);
  unsigned int v28 = *(void **)(v10 + 856);
  if (v28)
  {
    *(void *)(v10 + 864) = v28;
    operator delete(v28);
  }
  uint64_t v29 = *v27;
  if (*v27)
  {
    *(void *)(v10 + 840) = v29;
    operator delete(v29);
  }
  std::vector<AUNeuralNet::NeuralNetWrapper>::__destroy_vector::operator()[abi:ne180100](&a10);
  uint64_t v30 = *(std::__shared_weak_count **)(v10 + 536);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v10);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNeuralNetSPP>::Factory()
{
  uint64_t result = malloc_type_malloc(0x458uLL, 0xB0CA1167uLL);
  *uint64_t result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNeuralNetSPP>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNeuralNetSPP>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNeuralNetSPP>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNeuralNetSPP>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 3, 1);
  *(void *)uint64_t v3 = &unk_1F14C3F48;
  *((_OWORD *)v3 + 33) = xmmword_1BB87A440;
  *((_OWORD *)v3 + 34) = xmmword_1BB87A440;
  *((unsigned char *)v3 + 560) = 0;
  uint64_t v4 = (ausdk::AUBase *)((char *)v3 + 568);
  *((void *)v3 + 71) = 0;
  *((_DWORD *)v3 + 144) = 0;
  *(_OWORD *)((char *)v3 + 584) = 0u;
  *(_OWORD *)((char *)v3 + 600) = 0u;
  *((_WORD *)v3 + 308) = 0;
  *((_DWORD *)v3 + 155) = 1156;
  *((void *)v3 + 78) = 0x40E5888000000000;
  *((_DWORD *)v3 + 158) = 16;
  *((unsigned char *)v3 + 636) = 1;
  *(_OWORD *)((char *)v3 + 984) = 0u;
  *(_OWORD *)((char *)v3 + 1000) = 0u;
  *(_OWORD *)((char *)v3 + 1016) = 0u;
  *(_OWORD *)((char *)v3 + 1032) = 0u;
  ausdk::AUBase::CreateElements((uint64_t)v3);
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(a1 + 640) = _Q0;
  *(unsigned char *)(a1 + 656) = 0;
  unint64_t v10 = 0;
  *(float *)(a1 + 660) = __exp10f(-30.0);
  for (uint64_t i = 664; ; i += 20)
  {
    uint64_t v12 = *(void *)(a1 + 608);
    if (v12) {
      LODWORD(v13) = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 24))(v12);
    }
    else {
      uint64_t v13 = (*(void *)(a1 + 592) - *(void *)(a1 + 584)) >> 3;
    }
    if (v10 >= v13) {
      break;
    }
    uint64_t v14 = a1 + i;
    ++v10;
    *(void *)uint64_t v14 = 0;
    *(void *)(v14 + 8) = 0;
    *(_DWORD *)(v14 + 16) = 0;
  }
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(Element, 0, 0.0, 0);
  uint64_t v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v16, 1u, 1.0, 0);
  uint64_t v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v17, 2u, 0.3, 0);
  uint64_t v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v18, 3u, 0.0, 0);
  unsigned int v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v19, 4u, 0.0, 0);
  uint64_t v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v20, 5u, 0.0, 0);
  uint64_t v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v21, 6u, 1.0, 0);
  uint64_t v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v22, 7u, 0.3, 0);
  uint64_t v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v23, 8u, 0.0, 0);
  uint64_t v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v24, 9u, 0.0, 0);
  uint64_t v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v25, 0xAu, 0.0, 0);
  uint64_t v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v26, 0xBu, -300.0, 0);
  for (unsigned int j = 0; ; ++j)
  {
    uint64_t v28 = *(void *)(a1 + 608);
    if (v28) {
      LODWORD(v29) = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 24))(v28);
    }
    else {
      uint64_t v29 = (*(void *)(a1 + 592) - *(void *)(a1 + 584)) >> 3;
    }
    if (j >= v29) {
      break;
    }
    uint64_t v30 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, j);
    ausdk::AUElement::SetParameter(v30, 0x64u, 0.0, 0);
    uint64_t v31 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, j);
    ausdk::AUElement::SetParameter(v31, 0x65u, 0.0, 0);
    uint64_t v32 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, j);
    ausdk::AUElement::SetParameter(v32, 0x66u, 0.0, 0);
    uint64_t v33 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, j);
    ausdk::AUElement::SetParameter(v33, 0x67u, 0.0, 0);
    uint64_t v34 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, j);
    ausdk::AUElement::SetParameter(v34, 0x68u, 0.0, 0);
  }
  unsigned int v35 = 0;
  *(void *)(a1 + 624) = 0x40E5888000000000;
  uint64_t v45 = 0x40E5888000000000;
  long long v46 = xmmword_1BB87A250;
  long long v47 = xmmword_1BB87A6A0;
  while (1)
  {
    uint64_t v36 = *(void *)(a1 + 120);
    if (v36) {
      LODWORD(v37) = (*(uint64_t (**)(uint64_t))(*(void *)v36 + 24))(v36);
    }
    else {
      uint64_t v37 = (*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 3;
    }
    if (v35 >= v37) {
      break;
    }
    uint64_t v38 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v35);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v38 + 56))(v38, &v45);
    ++v35;
  }
  for (unsigned int k = 0; ; ++k)
  {
    uint64_t v40 = *(void *)(a1 + 168);
    if (v40) {
      LODWORD(v41) = (*(uint64_t (**)(uint64_t))(*(void *)v40 + 24))(v40);
    }
    else {
      uint64_t v41 = (*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 3;
    }
    if (k >= v41) {
      break;
    }
    uint64_t v42 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), k);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v42 + 56))(v42, &v45);
  }
  long long v43 = (AUDebugFeature *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 512))(a1, 1156);
  *(unsigned char *)(a1 + 376) = 1;
  *(unsigned char *)(a1 + 636) = AUDebugFeature::IsNonFiniteHandlingEnabled(v43);
  return a1;
}

void sub_1BB42520C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::unique_ptr<NeuralNetRES>::reset[abi:ne180100](v9 + 130, 0);
  std::unique_ptr<NeuralNetRES>::reset[abi:ne180100](v9 + 129, 0);
  uint64_t v12 = (void *)v9[126];
  if (v12)
  {
    v9[127] = (uint64_t)v12;
    operator delete(v12);
  }
  uint64_t v13 = *v10;
  if (*v10)
  {
    v9[124] = (uint64_t)v13;
    operator delete(v13);
  }
  std::vector<std::unique_ptr<ausdk::AUElement>>::__destroy_vector::operator()[abi:ne180100](&a9);
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v9);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNeuralNetRES>::Factory()
{
  uint64_t result = malloc_type_malloc(0x410uLL, 0xB0CA1167uLL);
  *uint64_t result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNeuralNetRES>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNeuralNetRES>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNeuralNetRES>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNeuralNetRES>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 2, 1);
  *(void *)uint64_t v3 = &unk_1F14AE708;
  *((_OWORD *)v3 + 33) = xmmword_1BB87A440;
  *((_OWORD *)v3 + 34) = xmmword_1BB87A440;
  *((unsigned char *)v3 + 560) = 0;
  uint64_t v4 = (ausdk::AUBase *)((char *)v3 + 568);
  *((void *)v3 + 71) = 0;
  *((_DWORD *)v3 + 144) = 0;
  *(_OWORD *)((char *)v3 + 584) = 0u;
  *(_OWORD *)((char *)v3 + 600) = 0u;
  *((unsigned char *)v3 + 616) = 0;
  *((_DWORD *)v3 + 155) = 1156;
  *((void *)v3 + 78) = 0x40E5888000000000;
  *((_DWORD *)v3 + 158) = 16;
  *((unsigned char *)v3 + 636) = 1;
  *((void *)v3 + 121) = 0;
  ausdk::AUBase::CreateElements((uint64_t)v3);
  unint64_t v5 = 0;
  *(float *)(a1 + 640) = __exp10f(-15.0);
  *(unsigned char *)(a1 + 644) = 0;
  for (uint64_t i = 648; ; i += 20)
  {
    uint64_t v7 = *(void *)(a1 + 608);
    if (v7) {
      LODWORD(v8) = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 24))(v7);
    }
    else {
      uint64_t v8 = (*(void *)(a1 + 592) - *(void *)(a1 + 584)) >> 3;
    }
    if (v5 >= v8) {
      break;
    }
    uint64_t v9 = a1 + i;
    ++v5;
    *(void *)uint64_t v9 = 0;
    *(void *)(v9 + 8) = 0;
    *(_DWORD *)(v9 + 16) = 0;
  }
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(Element, 0, 0.0, 0);
  uint64_t v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v11, 1u, 1.0, 0);
  uint64_t v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v12, 2u, 0.3, 0);
  uint64_t v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v13, 3u, -300.0, 0);
  uint64_t v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v14, 4u, 0.0, 0);
  for (unsigned int j = 0; ; ++j)
  {
    uint64_t v16 = *(void *)(a1 + 608);
    if (v16) {
      LODWORD(v17) = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 24))(v16);
    }
    else {
      uint64_t v17 = (*(void *)(a1 + 592) - *(void *)(a1 + 584)) >> 3;
    }
    if (j >= v17) {
      break;
    }
    uint64_t v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, j);
    ausdk::AUElement::SetParameter(v18, 0x64u, 0.0, 0);
    unsigned int v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, j);
    ausdk::AUElement::SetParameter(v19, 0x65u, 0.0, 0);
    uint64_t v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, j);
    ausdk::AUElement::SetParameter(v20, 0x66u, 0.0, 0);
    uint64_t v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, j);
    ausdk::AUElement::SetParameter(v21, 0x67u, 0.0, 0);
    uint64_t v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, j);
    ausdk::AUElement::SetParameter(v22, 0x68u, 0.0, 0);
  }
  unsigned int v23 = 0;
  *(void *)(a1 + 624) = 0x40E5888000000000;
  uint64_t v36 = 0x40E5888000000000;
  long long v37 = xmmword_1BB87A250;
  long long v38 = xmmword_1BB87A6A0;
  uint64_t v33 = 0x40E5888000000000;
  long long v35 = xmmword_1BB87A260;
  long long v34 = xmmword_1BB87A250;
  while (1)
  {
    uint64_t v24 = *(void *)(a1 + 120);
    if (v24) {
      LODWORD(v25) = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 24))(v24);
    }
    else {
      uint64_t v25 = (*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 3;
    }
    if (v23 >= v25) {
      break;
    }
    uint64_t v26 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v23);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v26 + 56))(v26, &v36);
    ++v23;
  }
  for (unsigned int k = 0; ; ++k)
  {
    uint64_t v28 = *(void *)(a1 + 168);
    if (v28) {
      LODWORD(v29) = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 24))(v28);
    }
    else {
      uint64_t v29 = (*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 3;
    }
    if (k >= v29) {
      break;
    }
    uint64_t v30 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), k);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v30 + 56))(v30, &v33);
  }
  uint64_t v31 = (AUDebugFeature *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 512))(a1, 1156);
  *(unsigned char *)(a1 + 376) = 1;
  *(unsigned char *)(a1 + 636) = AUDebugFeature::IsNonFiniteHandlingEnabled(v31);
  return a1;
}

void sub_1BB425750(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<NeuralNetRES>::reset[abi:ne180100](v2 + 121, 0);
  std::vector<std::unique_ptr<ausdk::AUElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v2);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDenoise>::Factory()
{
  uint64_t result = malloc_type_malloc(0x528uLL, 0xB0CA1167uLL);
  *uint64_t result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDenoise>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDenoise>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDenoise>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDenoise>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 2, 2);
  *(void *)uint64_t v3 = &unk_1F14B6E18;
  *((_OWORD *)v3 + 33) = xmmword_1BB87A440;
  *((_OWORD *)v3 + 34) = xmmword_1BB87A440;
  *((unsigned char *)v3 + 560) = 0;
  uint64_t v4 = (ausdk::AUBase *)((char *)v3 + 568);
  *((void *)v3 + 71) = 0;
  *((_DWORD *)v3 + 144) = 0;
  *(_OWORD *)((char *)v3 + 584) = 0u;
  *(_OWORD *)((char *)v3 + 600) = 0u;
  *((_DWORD *)v3 + 154) = 512;
  *((void *)v3 + 78) = 0x40E5888000000000;
  *((_DWORD *)v3 + 158) = 3;
  *((_WORD *)v3 + 328) = 1;
  *(_OWORD *)((char *)v3 + 1144) = 0u;
  *(_OWORD *)((char *)v3 + 1160) = 0u;
  *(_OWORD *)((char *)v3 + 1176) = 0u;
  *(_OWORD *)((char *)v3 + 1192) = 0u;
  *(_OWORD *)((char *)v3 + 1208) = 0u;
  *(_OWORD *)((char *)v3 + 1224) = 0u;
  *(_OWORD *)((char *)v3 + 1240) = 0u;
  ausdk::AUBase::CreateElements((uint64_t)v3);
  *(_DWORD *)(a1 + 660) = 0;
  *(_OWORD *)(a1 + 664) = xmmword_1BB87A6E0;
  *(_OWORD *)(a1 + 680) = xmmword_1BB87A6F0;
  *(void *)(a1 + 696) = 0x500000005;
  *(_OWORD *)(a1 + 704) = xmmword_1BB87A700;
  *(_DWORD *)(a1 + 720) = 0;
  *(unsigned char *)(a1 + 724) = 0;
  *(void *)(a1 + 728) = 0;
  *(void *)(a1 + 736) = 3279552512;
  *(_DWORD *)(a1 + 756) = 0;
  *(unsigned char *)(a1 + 760) = 0;
  *(_DWORD *)(a1 + 764) = 1;
  *(_OWORD *)(a1 + 768) = xmmword_1BB87A710;
  *(void *)(a1 + 784) = 0x40C000003F800000;
  *(_DWORD *)(a1 + 792) = 0;
  *(unsigned char *)(a1 + 796) = 1;
  *(void *)(a1 + 800) = 0x200000001;
  *(_WORD *)(a1 + 808) = 0;
  *(void *)(a1 + 812) = 0xC2700000C2700000;
  *(_OWORD *)(a1 + 1108) = 0u;
  *(_OWORD *)(a1 + 1124) = 0u;
  *(_OWORD *)(a1 + 1076) = 0u;
  *(_OWORD *)(a1 + 1092) = 0u;
  *(_OWORD *)(a1 + 1044) = 0u;
  *(_OWORD *)(a1 + 1060) = 0u;
  *(_OWORD *)(a1 + 1012) = 0u;
  *(_OWORD *)(a1 + 1028) = 0u;
  *(_OWORD *)(a1 + 980) = 0u;
  *(_OWORD *)(a1 + 996) = 0u;
  *(_OWORD *)(a1 + 948) = 0u;
  *(_OWORD *)(a1 + 964) = 0u;
  *(_OWORD *)(a1 + 916) = 0u;
  *(_OWORD *)(a1 + 932) = 0u;
  *(_OWORD *)(a1 + 884) = 0u;
  *(_OWORD *)(a1 + 900) = 0u;
  *(_OWORD *)(a1 + 852) = 0u;
  *(_OWORD *)(a1 + 868) = 0u;
  *(_OWORD *)(a1 + 820) = 0u;
  *(_OWORD *)(a1 + 836) = 0u;
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(Element, 0, 0.0, 0);
  int v6 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v6, 1u, 0.38, 0);
  uint64_t v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v7, 2u, 0.38, 0);
  uint64_t v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v8, 3u, 0.0, 0);
  uint64_t v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v9, 4u, 1.0, 0);
  unint64_t v10 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v10, 5u, -30.0, 0);
  uint64_t v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v11, 6u, 0.5, 0);
  uint64_t v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v12, 7u, 1.0, 0);
  uint64_t v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v13, 8u, 100000.0, 0);
  uint64_t v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v14, 9u, 5.0, 0);
  unsigned int v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v15, 0xAu, 5.0, 0);
  uint64_t v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v16, 0xBu, 6.9897, 0);
  uint64_t v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v17, 0xCu, -300.0, 0);
  uint64_t v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v18, 0xDu, 0.99, 0);
  unsigned int v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v19, 0x17u, 0.05, 0);
  uint64_t v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v20, 0x18u, 0.0, 0);
  uint64_t v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v21, 0x19u, 0.0, 0);
  uint64_t v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v22, 0x1Au, 0.0, 0);
  unsigned int v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v23, 0x1Bu, 0.0, 0);
  uint64_t v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v24, 0x1Cu, -250.0, 0);
  uint64_t v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v25, 0x1Du, 0.0, 0);
  uint64_t v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v26, 0x1Eu, 0.0, 0);
  long long v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v27, 0x1Fu, 0.0, 0);
  uint64_t v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v28, 0x20u, 1.0, 0);
  uint64_t v29 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v29, 0x21u, 100.0, 0);
  uint64_t v30 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v30, 0x22u, 7000.0, 0);
  uint64_t v31 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v31, 0x23u, 0.5, 0);
  uint64_t v32 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v32, 0x24u, 0.001, 0);
  uint64_t v33 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v33, 0x25u, 1.0, 0);
  long long v34 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v34, 0x26u, 6.0, 0);
  long long v35 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v35, 0x27u, 0.0, 0);
  uint64_t v36 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v36, 0x28u, 1.0, 0);
  long long v37 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v37, 0x29u, 1.0, 0);
  long long v38 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v38, 0x2Au, 2.0, 0);
  long long v39 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v39, 0xEu, 0.0, 0);
  uint64_t v40 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v40, 0xFu, 0.0, 0);
  uint64_t v41 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v41, 0x10u, -60.0, 0);
  uint64_t v42 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v42, 0x11u, -60.0, 0);
  for (unsigned int i = 0; ; ++i)
  {
    uint64_t v44 = *(void *)(a1 + 608);
    if (v44) {
      LODWORD(v45) = (*(uint64_t (**)(uint64_t))(*(void *)v44 + 24))(v44);
    }
    else {
      uint64_t v45 = (*(void *)(a1 + 592) - *(void *)(a1 + 584)) >> 3;
    }
    if (i >= v45) {
      break;
    }
    long long v46 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, i);
    ausdk::AUElement::SetParameter(v46, 0x12u, 0.0, 0);
    long long v47 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, i);
    ausdk::AUElement::SetParameter(v47, 0x13u, 0.0, 0);
    uint64_t v48 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, i);
    ausdk::AUElement::SetParameter(v48, 0x14u, 0.0, 0);
    uint64_t v49 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, i);
    ausdk::AUElement::SetParameter(v49, 0x15u, 0.0, 0);
    uint64_t v50 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, i);
    ausdk::AUElement::SetParameter(v50, 0x16u, 0.0, 0);
  }
  unsigned int v51 = 0;
  *(void *)(a1 + 624) = 0x40E5888000000000;
  uint64_t v62 = 0x40E5888000000000;
  long long v63 = xmmword_1BB87A250;
  long long v64 = xmmword_1BB87A450;
  uint64_t v59 = 0x40E5888000000000;
  long long v61 = xmmword_1BB87A450;
  long long v60 = xmmword_1BB87A250;
  while (1)
  {
    uint64_t v52 = *(void *)(a1 + 120);
    if (v52) {
      LODWORD(v53) = (*(uint64_t (**)(uint64_t))(*(void *)v52 + 24))(v52);
    }
    else {
      uint64_t v53 = (*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 3;
    }
    if (v51 >= v53) {
      break;
    }
    uint64_t v54 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v51);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v54 + 56))(v54, &v62);
    ++v51;
  }
  for (unsigned int j = 0; ; ++j)
  {
    uint64_t v56 = *(void *)(a1 + 168);
    if (v56) {
      LODWORD(v57) = (*(uint64_t (**)(uint64_t))(*(void *)v56 + 24))(v56);
    }
    else {
      uint64_t v57 = (*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 3;
    }
    if (j >= v57)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 512))(a1, 512);
      *(unsigned char *)(a1 + 376) = 1;
      operator new();
    }
    uint64_t v58 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), j);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v58 + 56))(v58, &v59);
  }
}

void sub_1BB426148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  uint64_t v21 = *(void *)(v19 + 64);
  *(void *)(v19 + 64) = 0;
  if (v21) {
    MEMORY[0x1C185D370](v21, 0x60C4044C4A2DFLL);
  }
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a16);
  a16 = (void **)v19;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a16);
  MEMORY[0x1C185D370](v19, 0x1020C40A98CFEF5);
  std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100](v18, 0);
  uint64_t v22 = (void *)*((void *)v16 + 153);
  if (v22)
  {
    *((void *)v16 + 154) = v22;
    operator delete(v22);
  }
  unsigned int v23 = (void *)*((void *)v16 + 150);
  if (v23)
  {
    *((void *)v16 + 151) = v23;
    operator delete(v23);
  }
  uint64_t v24 = (void *)*((void *)v16 + 147);
  if (v24)
  {
    *((void *)v16 + 148) = v24;
    operator delete(v24);
  }
  uint64_t v25 = *((void *)v16 + 146);
  *((void *)v16 + 146) = 0;
  if (v25) {
    std::default_delete<PMWFStvPlistHolder>::operator()[abi:ne180100](v25);
  }
  std::unique_ptr<GuidedMWF>::reset[abi:ne180100]((void *)v16 + 145, 0);
  std::unique_ptr<iPMWF_HRLS_vDSP>::reset[abi:ne180100]((void *)v16 + 144, 0);
  std::unique_ptr<PMWF_FAST_GS_vDSP>::reset[abi:ne180100](v17, 0);
  std::vector<std::unique_ptr<ausdk::AUElement>>::__destroy_vector::operator()[abi:ne180100](&a10);
  ausdk::AUBase::~AUBase(v16);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDereverb>::Factory()
{
  uint64_t result = malloc_type_malloc(0x478uLL, 0xB0CA1167uLL);
  *uint64_t result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDereverb>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDereverb>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDereverb>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDereverb>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 2, 2);
  *(void *)uint64_t v3 = &unk_1F14B2610;
  *((_OWORD *)v3 + 33) = xmmword_1BB87A440;
  *((_OWORD *)v3 + 34) = xmmword_1BB87A440;
  *((unsigned char *)v3 + 560) = 0;
  uint64_t v4 = (ausdk::AUBase *)((char *)v3 + 568);
  *((void *)v3 + 71) = 0;
  *((_DWORD *)v3 + 144) = 0;
  *(_OWORD *)((char *)v3 + 584) = 0u;
  *(_OWORD *)((char *)v3 + 600) = 0u;
  *((_DWORD *)v3 + 154) = 512;
  *((void *)v3 + 78) = 0x40E5888000000000;
  *((_DWORD *)v3 + 158) = 3;
  *((unsigned char *)v3 + 656) = 1;
  unint64_t v5 = (uint64_t *)((char *)v3 + 1072);
  *(_OWORD *)((char *)v3 + 1048) = 0u;
  *(_OWORD *)((char *)v3 + 1064) = 0u;
  ausdk::AUBase::CreateElements((uint64_t)v3);
  unint64_t v6 = 0;
  *(void *)(a1 + 664) = 0x500000001;
  *(void *)(a1 + 684) = 0xC2700000C2700000;
  *(_DWORD *)(a1 + 660) = 1;
  *(void *)(a1 + 672) = 0x412000003FCA3D71;
  *(_WORD *)(a1 + 680) = 0;
  *(unsigned char *)(a1 + 1012) = 1;
  *(void *)(a1 + 1016) = 0x45DAC00042480000;
  *(_DWORD *)(a1 + 1024) = 0;
  uint64_t v7 = 692;
  *(_OWORD *)(a1 + 1028) = xmmword_1BB87A720;
  while (1)
  {
    uint64_t v8 = *(void *)(a1 + 608);
    if (v8) {
      LODWORD(v9) = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 24))(v8);
    }
    else {
      uint64_t v9 = (*(void *)(a1 + 592) - *(void *)(a1 + 584)) >> 3;
    }
    if (v6 >= v9) {
      break;
    }
    uint64_t v10 = a1 + v7;
    ++v6;
    *(void *)uint64_t v10 = 0;
    *(void *)(v10 + 8) = 0;
    *(_DWORD *)(v10 + 16) = 0;
    v7 += 20;
  }
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(Element, 0, 1.0, 0);
  uint64_t v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v12, 1u, 1.0, 0);
  uint64_t v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v13, 2u, 5.0, 0);
  uint64_t v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v14, 3u, 1.58, 0);
  unsigned int v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v15, 4u, 10.0, 0);
  uint64_t v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v16, 5u, 0.0, 0);
  uint64_t v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v17, 6u, 0.0, 0);
  uint64_t v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v18, 7u, -60.0, 0);
  uint64_t v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v19, 8u, -60.0, 0);
  uint64_t v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v20, 0xEu, 1.0, 0);
  uint64_t v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v21, 0xFu, 50.0, 0);
  uint64_t v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v22, 0x10u, 7000.0, 0);
  unsigned int v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v23, 0x11u, 0.0, 0);
  uint64_t v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v24, 0x12u, -70.0, 0);
  uint64_t v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v25, 0x13u, 0.0, 0);
  uint64_t v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v26, 0x14u, 0.0, 0);
  long long v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v27, 0x15u, 0.0, 0);
  for (unsigned int i = 0; ; ++i)
  {
    uint64_t v29 = *(void *)(a1 + 608);
    if (v29) {
      LODWORD(v30) = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 24))(v29);
    }
    else {
      uint64_t v30 = (*(void *)(a1 + 592) - *(void *)(a1 + 584)) >> 3;
    }
    if (i >= v30) {
      break;
    }
    uint64_t v31 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, i);
    ausdk::AUElement::SetParameter(v31, 9u, 0.0, 0);
    uint64_t v32 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, i);
    ausdk::AUElement::SetParameter(v32, 0xAu, 0.0, 0);
    uint64_t v33 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, i);
    ausdk::AUElement::SetParameter(v33, 0xBu, 0.0, 0);
    long long v34 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, i);
    ausdk::AUElement::SetParameter(v34, 0xCu, 0.0, 0);
    long long v35 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, i);
    ausdk::AUElement::SetParameter(v35, 0xDu, 0.0, 0);
  }
  unsigned int v36 = 0;
  *(void *)(a1 + 624) = 0x40E5888000000000;
  uint64_t v49 = 0x40E5888000000000;
  long long v50 = xmmword_1BB87A250;
  long long v51 = xmmword_1BB87A450;
  uint64_t v46 = 0x40E5888000000000;
  long long v48 = xmmword_1BB87A450;
  long long v47 = xmmword_1BB87A250;
  while (1)
  {
    uint64_t v37 = *(void *)(a1 + 120);
    if (v37) {
      LODWORD(v38) = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 24))(v37);
    }
    else {
      uint64_t v38 = (*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 3;
    }
    if (v36 >= v38) {
      break;
    }
    uint64_t v39 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v36);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v39 + 56))(v39, &v49);
    ++v36;
  }
  for (unsigned int j = 0; ; ++j)
  {
    uint64_t v41 = *(void *)(a1 + 168);
    if (v41) {
      LODWORD(v42) = (*(uint64_t (**)(uint64_t))(*(void *)v41 + 24))(v41);
    }
    else {
      uint64_t v42 = (*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 3;
    }
    if (j >= v42) {
      break;
    }
    uint64_t v43 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), j);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v43 + 56))(v43, &v46);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 512))(a1, 512);
  *(unsigned char *)(a1 + 376) = 1;
  AUDereverb::InitializeMCLPClasses((AUDereverb *)a1);
  uint64_t v44 = (AUDebugFeature *)std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100](v5, 0);
  *(unsigned char *)(a1 + 656) = AUDebugFeature::IsNonFiniteHandlingEnabled(v44);
  return a1;
}

void sub_1BB4268D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100](v4, 0);
  std::unique_ptr<MCLP_FLSL_Joint_OS_vDSP>::reset[abi:ne180100](v2 + 133, 0);
  std::unique_ptr<MCLP_FRLS_vDSP>::reset[abi:ne180100](v2 + 132, 0);
  std::unique_ptr<MCLP_ORNLMS_BLAS>::reset[abi:ne180100](v3, 0);
  std::vector<std::unique_ptr<ausdk::AUElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v2);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessLookup,AUFIRFilter>::Factory()
{
  uint64_t result = malloc_type_malloc(0x2C0uLL, 0xB0CA1167uLL);
  *uint64_t result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUFIRFilter>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUFIRFilter>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUFIRFilter>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUFIRFilter>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *((_WORD *)v3 + 276) = 0;
  *((void *)v3 + 68) = 0;
  *((_OWORD *)v3 + 33) = 0u;
  *((unsigned char *)v3 + 554) = 1;
  *((_DWORD *)v3 + 139) = 0;
  *((unsigned char *)v3 + 560) = 0;
  *((_DWORD *)v3 + 147) = 0;
  *(_OWORD *)((char *)v3 + 568) = 0u;
  *((unsigned char *)v3 + 584) = 0;
  *(void *)uint64_t v3 = &unk_1F14B22A8;
  *((_OWORD *)v3 + 37) = 0u;
  *((_OWORD *)v3 + 38) = 0u;
  *((_OWORD *)v3 + 39) = 0u;
  ausdk::AUBase::CreateElements((uint64_t)v3);
  uint64_t v7 = 0x40E5888000000000;
  long long v8 = xmmword_1BB8727B0;
  long long v9 = xmmword_1BB879EA0;
  uint64_t Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)Element + 56))(Element, &v7);
  uint64_t v5 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v5 + 56))(v5, &v7);
  return a1;
}

void sub_1BB426AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v12 = *(const void **)(v10 + 624);
  if (v12) {
    CFRelease(v12);
  }
  uint64_t v13 = *(const void **)(v10 + 616);
  if (v13) {
    CFRelease(v13);
  }
  uint64_t v14 = *(void **)(v10 + 592);
  if (v14)
  {
    *(void *)(v10 + 600) = v14;
    operator delete(v14);
  }
  *(void *)uint64_t v10 = &unk_1F14C8258;
  a10 = (void **)(v10 + 528);
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__destroy_vector::operator()[abi:ne180100](&a10);
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v10);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMixSwitchNF>::Factory()
{
  uint64_t result = malloc_type_malloc(0x2C0uLL, 0xB0CA1167uLL);
  *uint64_t result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMixSwitchNF>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMixSwitchNF>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMixSwitchNF>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMixSwitchNF>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 2, 1);
  *(void *)uint64_t v3 = &unk_1F14B3930;
  *((unsigned char *)v3 + 528) = 0;
  *(_OWORD *)((char *)v3 + 536) = 0u;
  *(_OWORD *)((char *)v3 + 552) = 0u;
  *(_OWORD *)((char *)v3 + 568) = 0u;
  *(_OWORD *)((char *)v3 + 584) = 0u;
  *(_OWORD *)((char *)v3 + 600) = 0u;
  *(_OWORD *)((char *)v3 + 616) = 0u;
  *((void *)v3 + 79) = 1148846080;
  ausdk::AUBase::CreateElements((uint64_t)v3);
  uint64_t Element = ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)Element + 40))(Element, 1);
  uint64_t v5 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  ausdk::Owned<__CFString const*>::operator=((const void **)(v5 + 72), @"Mic 1 EC LEE");
  uint64_t v6 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 40))(v6, 5);
  uint64_t v7 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 1u);
  ausdk::Owned<__CFString const*>::operator=((const void **)(v7 + 72), @"Mic 4 EC LEE");
  uint64_t v8 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 1u);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 40))(v8, 5);
  uint64_t v9 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  ausdk::Owned<__CFString const*>::operator=((const void **)(v9 + 72), @"EC LEE Output");
  uint64_t v10 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 40))(v10, 5);
  *(unsigned char *)(a1 + 376) = 1;
  uint64_t v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v11, 0, 0.0, 0);
  uint64_t v12 = 0;
  *(void *)&v34[0] = 0x100000000;
  do
  {
    unsigned int v13 = *(_DWORD *)((char *)v34 + v12);
    uint64_t v14 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v13);
    ausdk::AUElement::SetParameter(v14, 0, 0.0, 0);
    unsigned int v15 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v13);
    ausdk::AUElement::SetParameter(v15, 1u, 0.0, 0);
    uint64_t v16 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v13);
    ausdk::AUElement::SetParameter(v16, 2u, 0.0, 0);
    uint64_t v17 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v13);
    ausdk::AUElement::SetParameter(v17, 3u, 0.0, 0);
    uint64_t v18 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v13);
    ausdk::AUElement::SetParameter(v18, 4u, 0.0, 0);
    v12 += 4;
  }
  while (v12 != 8);
  uint64_t v19 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  ausdk::AUElement::SetParameter(v19, 0, 0.0, 0);
  uint64_t v20 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  ausdk::AUElement::SetParameter(v20, 1u, 0.0, 0);
  uint64_t v21 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  ausdk::AUElement::SetParameter(v21, 2u, 0.0, 0);
  uint64_t v22 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  ausdk::AUElement::SetParameter(v22, 3u, 0.0, 0);
  unsigned int v23 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  ausdk::AUElement::SetParameter(v23, 4u, 0.0, 0);
  unsigned int v24 = 0;
  v34[0] = xmmword_1BB8998C0;
  v34[1] = unk_1BB8998D0;
  uint64_t v35 = 64;
  while (1)
  {
    uint64_t v25 = *(void *)(a1 + 120);
    if (v25) {
      LODWORD(v26) = (*(uint64_t (**)(uint64_t))(*(void *)v25 + 24))(v25);
    }
    else {
      uint64_t v26 = (*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 3;
    }
    if (v24 >= v26) {
      break;
    }
    uint64_t v27 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v24);
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v27 + 56))(v27, v34);
    ++v24;
  }
  for (unsigned int i = 0; ; ++i)
  {
    uint64_t v29 = *(void *)(a1 + 168);
    if (v29) {
      LODWORD(v30) = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 24))(v29);
    }
    else {
      uint64_t v30 = (*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 3;
    }
    if (i >= v30) {
      break;
    }
    uint64_t v31 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), i);
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v31 + 56))(v31, v34);
  }
  if (getAUMixSwitchNFLog(void)::onceToken != -1) {
    dispatch_once(&getAUMixSwitchNFLog(void)::onceToken, &__block_literal_global_12544);
  }
  uint64_t v32 = getAUMixSwitchNFLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUMixSwitchNFLog(void)::gLog, OS_LOG_TYPE_INFO))
  {
    LODWORD(v34[0]) = 134217984;
    *(void *)((char *)v34 + 4) = a1;
    _os_log_impl(&dword_1BB0CE000, v32, OS_LOG_TYPE_INFO, "[%p] created", (uint8_t *)v34, 0xCu);
  }
  return a1;
}

void sub_1BB4270F0(_Unwind_Exception *a1)
{
  uint64_t v4 = (void *)*((void *)v1 + 76);
  if (v4)
  {
    *((void *)v1 + 77) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)v1 + 73);
  if (v5)
  {
    *((void *)v1 + 74) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)v1 + 70);
  if (v6)
  {
    *((void *)v1 + 71) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *v2;
  if (*v2)
  {
    *((void *)v1 + 68) = v7;
    operator delete(v7);
  }
  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMixSwitch>::Factory()
{
  uint64_t result = malloc_type_malloc(0x290uLL, 0xB0CA1167uLL);
  *uint64_t result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMixSwitch>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMixSwitch>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMixSwitch>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMixSwitch>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 2, 1);
  *(void *)uint64_t v3 = &unk_1F14A9B50;
  *((unsigned char *)v3 + 528) = 0;
  *(_OWORD *)((char *)v3 + 536) = 0u;
  *(_OWORD *)((char *)v3 + 552) = 0u;
  *(_OWORD *)((char *)v3 + 568) = 0u;
  *((void *)v3 + 73) = 1148846080;
  ausdk::AUBase::CreateElements((uint64_t)v3);
  uint64_t Element = ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)Element + 40))(Element, 1);
  uint64_t v5 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  ausdk::Owned<__CFString const*>::operator=((const void **)(v5 + 72), @"Front mic EC LEE");
  uint64_t v6 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 40))(v6, 5);
  uint64_t v7 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 1u);
  ausdk::Owned<__CFString const*>::operator=((const void **)(v7 + 72), @"Back mic EC LEE");
  uint64_t v8 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 1u);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 40))(v8, 5);
  uint64_t v9 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  ausdk::Owned<__CFString const*>::operator=((const void **)(v9 + 72), @"EC LEE Output");
  uint64_t v10 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 40))(v10, 5);
  *(unsigned char *)(a1 + 376) = 1;
  uint64_t v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v11, 0, 0.0, 0);
  uint64_t v12 = 0;
  *(void *)&v34[0] = 0x100000000;
  do
  {
    unsigned int v13 = *(_DWORD *)((char *)v34 + v12);
    uint64_t v14 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v13);
    ausdk::AUElement::SetParameter(v14, 0, 0.0, 0);
    unsigned int v15 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v13);
    ausdk::AUElement::SetParameter(v15, 1u, 0.0, 0);
    uint64_t v16 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v13);
    ausdk::AUElement::SetParameter(v16, 2u, 0.0, 0);
    uint64_t v17 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v13);
    ausdk::AUElement::SetParameter(v17, 3u, 0.0, 0);
    uint64_t v18 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v13);
    ausdk::AUElement::SetParameter(v18, 4u, 0.0, 0);
    v12 += 4;
  }
  while (v12 != 8);
  uint64_t v19 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  ausdk::AUElement::SetParameter(v19, 0, 0.0, 0);
  uint64_t v20 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  ausdk::AUElement::SetParameter(v20, 1u, 0.0, 0);
  uint64_t v21 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  ausdk::AUElement::SetParameter(v21, 2u, 0.0, 0);
  uint64_t v22 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  ausdk::AUElement::SetParameter(v22, 3u, 0.0, 0);
  unsigned int v23 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  ausdk::AUElement::SetParameter(v23, 4u, 0.0, 0);
  unsigned int v24 = 0;
  v34[0] = xmmword_1BB8998C0;
  v34[1] = unk_1BB8998D0;
  uint64_t v35 = 64;
  while (1)
  {
    uint64_t v25 = *(void *)(a1 + 120);
    if (v25) {
      LODWORD(v26) = (*(uint64_t (**)(uint64_t))(*(void *)v25 + 24))(v25);
    }
    else {
      uint64_t v26 = (*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 3;
    }
    if (v24 >= v26) {
      break;
    }
    uint64_t v27 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v24);
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v27 + 56))(v27, v34);
    ++v24;
  }
  for (unsigned int i = 0; ; ++i)
  {
    uint64_t v29 = *(void *)(a1 + 168);
    if (v29) {
      LODWORD(v30) = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 24))(v29);
    }
    else {
      uint64_t v30 = (*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 3;
    }
    if (i >= v30) {
      break;
    }
    uint64_t v31 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), i);
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v31 + 56))(v31, v34);
  }
  if (getAUMixSwitchLog(void)::onceToken != -1) {
    dispatch_once(&getAUMixSwitchLog(void)::onceToken, &__block_literal_global_182);
  }
  uint64_t v32 = getAUMixSwitchLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUMixSwitchLog(void)::gLog, OS_LOG_TYPE_INFO))
  {
    LODWORD(v34[0]) = 134217984;
    *(void *)((char *)v34 + 4) = a1;
    _os_log_impl(&dword_1BB0CE000, v32, OS_LOG_TYPE_INFO, "[%p] created", (uint8_t *)v34, 0xCu);
  }
  return a1;
}

void sub_1BB4276C8(_Unwind_Exception *a1)
{
  uint64_t v4 = (void *)*((void *)v1 + 70);
  if (v4)
  {
    *((void *)v1 + 71) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *v2;
  if (*v2)
  {
    *((void *)v1 + 68) = v5;
    operator delete(v5);
  }
  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUBeamNFSelector>::Factory()
{
  uint64_t result = malloc_type_malloc(0x580uLL, 0xB0CA1167uLL);
  *uint64_t result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUBeamNFSelector>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUBeamNFSelector>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUBeamNFSelector>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUBeamNFSelector>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 5, 2);
  *(void *)uint64_t v3 = &unk_1F14BD1B0;
  *((void *)v3 + 66) = 1;
  *((unsigned char *)v3 + 536) = 0;
  *((_DWORD *)v3 + 135) = 0;
  *((void *)v3 + 68) = 0x48400000000;
  *((void *)v3 + 69) = 0x40E5888000000000;
  *((_DWORD *)v3 + 140) = 0;
  *(_OWORD *)((char *)v3 + 584) = 0u;
  *(_OWORD *)((char *)v3 + 600) = 0u;
  *(_OWORD *)((char *)v3 + 616) = 0u;
  *(_OWORD *)((char *)v3 + 632) = 0u;
  *(_OWORD *)((char *)v3 + 648) = 0u;
  *(_OWORD *)((char *)v3 + 568) = 0u;
  *((_OWORD *)v3 + 42) = 0u;
  *((_OWORD *)v3 + 43) = 0u;
  *((_DWORD *)v3 + 176) = 0;
  *((_DWORD *)v3 + 178) = 0;
  *(void *)((char *)v3 + 716) = 0;
  *((_DWORD *)v3 + 166) = 0;
  *((void *)v3 + 153) = 0;
  *(_OWORD *)((char *)v3 + 1192) = 0u;
  *(_OWORD *)((char *)v3 + 1208) = 0u;
  *(_OWORD *)((char *)v3 + 1160) = 0u;
  *(_OWORD *)((char *)v3 + 1176) = 0u;
  *(_OWORD *)((char *)v3 + 1128) = 0u;
  *(_OWORD *)((char *)v3 + 1144) = 0u;
  *(_OWORD *)((char *)v3 + 1096) = 0u;
  *(_OWORD *)((char *)v3 + 1112) = 0u;
  *(_OWORD *)((char *)v3 + 1064) = 0u;
  *(_OWORD *)((char *)v3 + 1080) = 0u;
  *(_OWORD *)((char *)v3 + 1032) = 0u;
  *(_OWORD *)((char *)v3 + 1048) = 0u;
  *(_OWORD *)((char *)v3 + 1000) = 0u;
  *(_OWORD *)((char *)v3 + 1016) = 0u;
  *(_OWORD *)((char *)v3 + 968) = 0u;
  *(_OWORD *)((char *)v3 + 984) = 0u;
  *(_OWORD *)((char *)v3 + 936) = 0u;
  *(_OWORD *)((char *)v3 + 952) = 0u;
  *(_OWORD *)((char *)v3 + 904) = 0u;
  *(_OWORD *)((char *)v3 + 920) = 0u;
  *(_OWORD *)((char *)v3 + 872) = 0u;
  *(_OWORD *)((char *)v3 + 888) = 0u;
  *(_OWORD *)((char *)v3 + 840) = 0u;
  *(_OWORD *)((char *)v3 + 856) = 0u;
  *(_OWORD *)((char *)v3 + 808) = 0u;
  *(_OWORD *)((char *)v3 + 824) = 0u;
  *(_OWORD *)((char *)v3 + 776) = 0u;
  *(_OWORD *)((char *)v3 + 792) = 0u;
  *(_OWORD *)((char *)v3 + 744) = 0u;
  *(_OWORD *)((char *)v3 + 760) = 0u;
  *(_OWORD *)((char *)v3 + 728) = 0u;
  ausdk::AUBase::CreateElements((uint64_t)v3);
  uint64_t Element = ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)Element + 40))(Element, 27);
  uint64_t v5 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v5, 2u, 0.0, 0);
  uint64_t v6 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v6, 1u, 0.0, 0);
  uint64_t v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v7, 0, 1.0, 0);
  uint64_t v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v8, 3u, 0.0, 0);
  uint64_t v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v9, 4u, 1.0, 0);
  uint64_t v10 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v10, 5u, 4.0, 0);
  uint64_t v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v11, 6u, 7.0, 0);
  uint64_t v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v12, 7u, 4.0, 0);
  unsigned int v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v13, 8u, 60.0, 0);
  uint64_t v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v14, 9u, 75.0, 0);
  unsigned int v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v15, 0xAu, 60.0, 0);
  uint64_t v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v16, 0xBu, 0.0, 0);
  uint64_t v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v17, 0xCu, 1.0, 0);
  uint64_t v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v18, 0xDu, 0.84, 0);
  uint64_t v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v19, 0xEu, -0.13, 0);
  uint64_t v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v20, 0xFu, 160.0, 0);
  uint64_t v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v21, 0x10u, 800.0, 0);
  uint64_t v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v22, 0x11u, 0.0, 0);
  unsigned int v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v23, 0x12u, 0.0, 0);
  unsigned int v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v24, 0x13u, 0.0, 0);
  uint64_t v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v25, 0x14u, 0.0, 0);
  uint64_t v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v26, 0x15u, 0.1, 0);
  uint64_t v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v27, 0x16u, 0.5, 0);
  uint64_t v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v28, 0x17u, 0.0, 0);
  uint64_t v29 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v29, 0x18u, 0.0, 0);
  uint64_t v30 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v30, 0x19u, 0.0, 0);
  uint64_t v31 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v31, 0x1Au, 5.0, 0);
  *(_OWORD *)(a1 + 1232) = xmmword_1BB87A440;
  *(_DWORD *)(a1 + 1248) = 1;
  *(_OWORD *)(a1 + 1252) = xmmword_1BB87A730;
  *(_DWORD *)(a1 + 1268) = 1117126656;
  *(void *)(a1 + 1272) = 1114636288;
  *(unsigned char *)(a1 + 1280) = 0;
  *(_DWORD *)(a1 + 1284) = 1065353216;
  *(void *)(a1 + 1288) = 0xBE051EB83F570A3DLL;
  *(void *)(a1 + 1296) = 0;
  *(unsigned char *)(a1 + 1304) = 0;
  *(_OWORD *)(a1 + 1308) = 0u;
  *(_OWORD *)(a1 + 1324) = 0u;
  *(_DWORD *)(a1 + 1340) = 5;
  (*(void (**)(uint64_t, uint64_t, void (*)(AUBeamNFSelector *, AudioUnit, OpaqueAudioComponentInstance *, AudioUnitScope, AudioUnitElement), uint64_t))(*(void *)a1 + 112))(a1, 2, AUBeamNFSelector::SampleRateChangedCallback, a1);
  (*(void (**)(uint64_t, uint64_t, void (*)(AUBeamNFSelector *, AudioUnit, OpaqueAudioComponentInstance *, AudioUnitScope, AudioUnitElement), uint64_t))(*(void *)a1 + 112))(a1, 8, AUBeamNFSelector::SampleRateChangedCallback, a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t (*)(AUBeamNFSelector *, AudioUnit, OpaqueAudioComponentInstance *, AudioUnitScope, AudioUnitElement), uint64_t))(*(void *)a1 + 112))(a1, 14, AUBeamNFSelector::BlockSizeChangedCallback, a1);
  unsigned int v32 = 0;
  *(unsigned char *)(a1 + 376) = 1;
  uint64_t v41 = 0x40E5888000000000;
  long long v42 = xmmword_1BB87A250;
  long long v43 = xmmword_1BB87A260;
  while (1)
  {
    uint64_t v33 = *(void *)(a1 + 120);
    if (v33) {
      LODWORD(v34) = (*(uint64_t (**)(uint64_t))(*(void *)v33 + 24))(v33);
    }
    else {
      uint64_t v34 = (*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 3;
    }
    if (v32 >= v34) {
      break;
    }
    uint64_t v35 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v32);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v35 + 56))(v35, &v41);
    ++v32;
  }
  for (unsigned int i = 0; ; ++i)
  {
    uint64_t v37 = *(void *)(a1 + 168);
    if (v37) {
      LODWORD(v38) = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 24))(v37);
    }
    else {
      uint64_t v38 = (*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 3;
    }
    if (i >= v38) {
      break;
    }
    uint64_t v39 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), i);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v39 + 56))(v39, &v41);
  }
  return a1;
}

void sub_1BB427E6C(_Unwind_Exception *a1)
{
  uint64_t v5 = *(void **)(v1 + 1208);
  if (v5)
  {
    *(void *)(v1 + 1216) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(v1 + 1184);
  if (v6)
  {
    *(void *)(v1 + 1192) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)(v1 + 1160);
  if (v7)
  {
    *(void *)(v1 + 1168) = v7;
    operator delete(v7);
  }
  uint64_t v8 = *(void **)(v1 + 1136);
  if (v8)
  {
    *(void *)(v1 + 1144) = v8;
    operator delete(v8);
  }
  uint64_t v9 = *(void **)(v1 + 1112);
  if (v9)
  {
    *(void *)(v1 + 1120) = v9;
    operator delete(v9);
  }
  uint64_t v10 = *(void **)(v1 + 1088);
  if (v10)
  {
    *(void *)(v1 + 1096) = v10;
    operator delete(v10);
  }
  uint64_t v11 = *(void **)(v1 + 1064);
  if (v11)
  {
    *(void *)(v1 + 1072) = v11;
    operator delete(v11);
  }
  uint64_t v12 = *(void **)(v1 + 1040);
  if (v12)
  {
    *(void *)(v1 + 1048) = v12;
    operator delete(v12);
  }
  unsigned int v13 = *(void **)(v1 + 1016);
  if (v13)
  {
    *(void *)(v1 + 1024) = v13;
    operator delete(v13);
  }
  uint64_t v14 = *(void **)(v1 + 992);
  if (v14)
  {
    *(void *)(v1 + 1000) = v14;
    operator delete(v14);
  }
  unsigned int v15 = *(void **)(v1 + 968);
  if (v15)
  {
    *(void *)(v1 + 976) = v15;
    operator delete(v15);
  }
  uint64_t v16 = *(void **)(v1 + 944);
  if (v16)
  {
    *(void *)(v1 + 952) = v16;
    operator delete(v16);
  }
  uint64_t v17 = *(void **)(v1 + 920);
  if (v17)
  {
    *(void *)(v1 + 928) = v17;
    operator delete(v17);
  }
  uint64_t v18 = *(void **)(v1 + 896);
  if (v18)
  {
    *(void *)(v1 + 904) = v18;
    operator delete(v18);
  }
  uint64_t v19 = *(void **)(v1 + 872);
  if (v19)
  {
    *(void *)(v1 + 880) = v19;
    operator delete(v19);
  }
  uint64_t v20 = *(void **)(v1 + 848);
  if (v20)
  {
    *(void *)(v1 + 856) = v20;
    operator delete(v20);
  }
  uint64_t v21 = *(void **)(v1 + 824);
  if (v21)
  {
    *(void *)(v1 + 832) = v21;
    operator delete(v21);
  }
  uint64_t v22 = *(void **)(v1 + 800);
  if (v22)
  {
    *(void *)(v1 + 808) = v22;
    operator delete(v22);
  }
  unsigned int v23 = *(void **)(v1 + 776);
  if (v23)
  {
    *(void *)(v1 + 784) = v23;
    operator delete(v23);
  }
  unsigned int v24 = *(void **)(v1 + 752);
  if (v24)
  {
    *(void *)(v1 + 760) = v24;
    operator delete(v24);
  }
  uint64_t v25 = (void **)(v1 + 672);
  uint64_t v26 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 736) = v26;
    operator delete(v26);
  }
  uint64_t v27 = *v25;
  if (*v25)
  {
    *(void *)(v1 + 680) = v27;
    operator delete(v27);
  }
  uint64_t v28 = *(void **)(v1 + 632);
  if (v28)
  {
    *(void *)(v1 + 640) = v28;
    operator delete(v28);
  }
  uint64_t v29 = *(void **)(v1 + 608);
  if (v29)
  {
    *(void *)(v1 + 616) = v29;
    operator delete(v29);
  }
  uint64_t v30 = *(void **)(v1 + 584);
  if (v30)
  {
    *(void *)(v1 + 592) = v30;
    operator delete(v30);
  }
  if (*v2)
  {
    (*((void (**)(void))ausdk::BufferAllocator::instance(void)::global + 3))();
    void *v2 = 0;
  }
  *(void *)(v1 + 576) = 0;
  *(_DWORD *)(v1 + 560) = 0;
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUBeamNF>::Factory()
{
  uint64_t result = malloc_type_malloc(0xAC8uLL, 0xB0CA1167uLL);
  *uint64_t result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUBeamNF>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUBeamNF>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUBeamNF>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUBeamNF>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v136 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 2);
  *(void *)uint64_t v3 = &unk_1F14B3698;
  *((void *)v3 + 66) = 0x200000000;
  *((unsigned char *)v3 + 536) = 0;
  *((unsigned char *)v3 + 540) = 0;
  *((void *)v3 + 68) = 0;
  *((unsigned char *)v3 + 552) = 1;
  uint64_t v4 = (ausdk::AUBase *)((char *)v3 + 576);
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 72) = 0;
  *((void *)v3 + 71) = 0;
  *((_DWORD *)v3 + 146) = 0;
  *((_OWORD *)v3 + 37) = 0u;
  *((_OWORD *)v3 + 38) = 0u;
  *(_OWORD *)((char *)v3 + 620) = 0u;
  uint64_t v121 = 0;
  uint64_t v122 = 0;
  int v123 = 0;
  ausdk::ComponentBase::GetComponentDescription((ausdk::ComponentBase *)&v121, *((OpaqueAudioComponentInstance **)v3 + 1));
  *(unsigned char *)(a1 + 636) = 0;
  if (CACFPreferencesGetAppIntegerValue(@"beam2_random_input", @"com.apple.coreaudio", 0)) {
    *(unsigned char *)(a1 + 636) = 1;
  }
  *(unsigned char *)(a1 + 637) = 0;
  if (CACFPreferencesGetAppIntegerValue(@"beam2_dump_diffr", @"com.apple.coreaudio", 0)) {
    *(unsigned char *)(a1 + 637) = 1;
  }
  *(unsigned char *)(a1 + 638) = 0;
  if (CACFPreferencesGetAppIntegerValue(@"beam2_dump_eq", @"com.apple.coreaudio", 0)) {
    *(unsigned char *)(a1 + 638) = 1;
  }
  *(unsigned char *)(a1 + 639) = 0;
  CFStringRef v5 = (const __CFString *)CFPreferencesCopyAppValue(@"beam2_custom_diffr_path", @"com.apple.coreaudio");
  CFStringRef v6 = v5;
  if (v5)
  {
    CFStringGetCString(v5, (char *)(a1 + 640), 1024, 0x600u);
    CFRelease(v6);
    *(unsigned char *)(a1 + 639) = 1;
  }
  *(unsigned char *)(a1 + 1664) = 0;
  CFStringRef v7 = (const __CFString *)CFPreferencesCopyAppValue(@"beam2_custom_eq_path", @"com.apple.coreaudio");
  CFStringRef v10 = v7;
  if (v7)
  {
    CFStringGetCString(v7, (char *)(a1 + 1665), 1024, 0x600u);
    CFRelease(v10);
    *(unsigned char *)(a1 + 1664) = 1;
  }
  if (AUBeamNFLogScope(void)::once != -1) {
    dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_12181);
  }
  if (AUBeamNFLogScope(void)::scope
    && (*(unsigned char *)(AUBeamNFLogScope(void)::scope + 8) & 1) != 0
    && (uint64_t v11 = *(NSObject **)AUBeamNFLogScope(void)::scope) != 0
    && os_log_type_enabled(*(os_log_t *)AUBeamNFLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioChannelLayout buf = 136315650;
    *(void *)&uint8_t buf[4] = "AUBeamNF.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 222;
    *(_WORD *)&buf[18] = 2048;
    uint64_t v133 = (unsigned __int32 *)a1;
    _os_log_impl(&dword_1BB0CE000, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUBeamNF::AUBeamNF (%p)", buf, 0x1Cu);
    uint64_t v12 = AUBeamNFLogScope(void)::once;
  }
  else
  {
    uint64_t v12 = -1;
  }
  v9.i32[0] = HIDWORD(v121);
  v8.i32[0] = v121;
  int16x8_t v13 = (int16x8_t)vmovl_u8(v8);
  *(int16x4_t *)v13.i8 = vrev64_s16(*(int16x4_t *)v13.i8);
  unsigned __int32 v119 = vmovn_s16(v13).u32[0];
  char v120 = 0;
  int16x8_t v14 = (int16x8_t)vmovl_u8(v9);
  *(int16x4_t *)v14.i8 = vrev64_s16(*(int16x4_t *)v14.i8);
  *(int8x8_t *)v14.i8 = vmovn_s16(v14);
  __int32 v117 = v14.i32[0];
  char v118 = 0;
  v14.i32[0] = v122;
  int16x8_t v15 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v14.i8);
  *(int16x4_t *)v15.i8 = vrev64_s16(*(int16x4_t *)v15.i8);
  unsigned __int32 v115 = vmovn_s16(v15).u32[0];
  char v116 = 0;
  if (v12 != -1)
  {
    __int32 v114 = HIDWORD(v121);
    dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_12181);
    v9.i32[0] = v114;
  }
  __int32 v16 = v9.i32[0];
  if (AUBeamNFLogScope(void)::scope)
  {
    uint64_t v17 = *(NSObject **)AUBeamNFLogScope(void)::scope;
    if (!*(void *)AUBeamNFLogScope(void)::scope) {
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t v17 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioChannelLayout buf = 136316162;
    *(void *)&uint8_t buf[4] = "AUBeamNF.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 227;
    *(_WORD *)&buf[18] = 2080;
    uint64_t v133 = &v119;
    *(_WORD *)uint64_t v134 = 2080;
    *(void *)&v134[2] = &v117;
    *(_WORD *)&v134[10] = 2080;
    uint64_t v135 = &v115;
    _os_log_impl(&dword_1BB0CE000, v17, OS_LOG_TYPE_DEBUG, "%25s:%-5d Component info: %s %s %s", buf, 0x30u);
  }
LABEL_27:
  if (v16 == 1650814258)
  {
    *(unsigned char *)(a1 + 552) = 1;
  }
  else
  {
    *(unsigned char *)(a1 + 552) = 0;
    *(unsigned char *)(a1 + 376) = 1;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 512))(a1, 240);
  }
  ausdk::AUBase::CreateElements(a1);
  int v18 = *(unsigned __int8 *)(a1 + 552);
  *(void *)AudioChannelLayout buf = 0x40E5888000000000;
  v19.n128_u64[0] = 0x296C70636DLL;
  if (v18) {
    int v20 = 4;
  }
  else {
    int v20 = 8;
  }
  *(void *)&uint8_t buf[8] = 0x296C70636DLL;
  if (v18) {
    int v21 = 32;
  }
  else {
    int v21 = 64;
  }
  *(_DWORD *)&buf[16] = v20;
  LODWORD(v133) = 1;
  HIDWORD(v133) = v20;
  *(_DWORD *)uint64_t v134 = 2;
  *(_DWORD *)&v134[4] = v21;
  *(_DWORD *)&v134[8] = 0;
  uint64_t v124 = 0x40E5888000000000;
  uint64_t v125 = 0x296C70636DLL;
  int v126 = v20;
  int v127 = 1;
  int v128 = v20;
  int v129 = 1;
  int v130 = v21;
  int v131 = 0;
  if (!v18)
  {
    LODWORD(v125) = 1718773105;
    *(_DWORD *)&uint8_t buf[8] = 1718773105;
  }
  for (unsigned int i = 0; ; ++i)
  {
    uint64_t v23 = *(void *)(a1 + 120);
    if (v23) {
      LODWORD(v24) = (*(uint64_t (**)(uint64_t, __n128))(*(void *)v23 + 24))(v23, v19);
    }
    else {
      uint64_t v24 = (*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 3;
    }
    if (i >= v24) {
      break;
    }
    uint64_t Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), i);
    (*(void (**)(uint64_t, unsigned char *))(*(void *)Element + 56))(Element, buf);
  }
  for (unsigned int j = 0; ; ++j)
  {
    uint64_t v27 = *(void *)(a1 + 168);
    if (v27) {
      LODWORD(v28) = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 24))(v27);
    }
    else {
      uint64_t v28 = (*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 3;
    }
    if (j >= v28) {
      break;
    }
    uint64_t v29 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), j);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v29 + 56))(v29, &v124);
  }
  uint64_t v30 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v30, 0, 0.0, 0);
  uint64_t v31 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v31, 0x20u, 0.0, 0);
  unsigned int v32 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v32, 1u, 1.0, 0);
  uint64_t v33 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v33, 1u, 1.0, 0);
  uint64_t v34 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v34, 2u, 1.0, 0);
  uint64_t v35 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v35, 2u, 1.0, 0);
  uint64_t v36 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v36, 3u, 0.0, 0);
  uint64_t v37 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v37, 3u, 0.0, 0);
  uint64_t v38 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v38, 0x2Au, 1.0, 0);
  uint64_t v39 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v39, 0x2Au, 1.0, 0);
  uint64_t v40 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v40, 4u, 0.0, 0);
  uint64_t v41 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v41, 4u, 0.0, 0);
  if (*(unsigned char *)(a1 + 552))
  {
    long long v42 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
    ausdk::AUElement::SetParameter(v42, 5u, 0.0, 0);
    long long v43 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
    ausdk::AUElement::SetParameter(v43, 5u, 0.0, 0);
    uint64_t v44 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
    ausdk::AUElement::SetParameter(v44, 6u, 0.5, 0);
    uint64_t v45 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
    ausdk::AUElement::SetParameter(v45, 6u, 0.5, 0);
    uint64_t v46 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
    ausdk::AUElement::SetParameter(v46, 0x29u, 1.0, 0);
    long long v47 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
    ausdk::AUElement::SetParameter(v47, 0x29u, 1.0, 0);
  }
  long long v48 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v48, 7u, 0.0, 0);
  uint64_t v49 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v49, 7u, 0.0, 0);
  long long v50 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v50, 8u, 0.5, 0);
  long long v51 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v51, 8u, 0.5, 0);
  uint64_t v52 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v52, 9u, -100.0, 0);
  uint64_t v53 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v53, 9u, -100.0, 0);
  uint64_t v54 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v54, 0xAu, 0.0, 0);
  uint64_t v55 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v55, 0xAu, 0.0, 0);
  uint64_t v56 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v56, 0xBu, 24000.0, 0);
  uint64_t v57 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v57, 0xBu, 24000.0, 0);
  uint64_t v58 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v58, 0xCu, 26.0, 0);
  uint64_t v59 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v59, 0xDu, 1.0, 0);
  long long v60 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v60, 0xDu, 1.0, 0);
  long long v61 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v61, 0xEu, 5.0, 0);
  uint64_t v62 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v62, 0xEu, 5.0, 0);
  long long v63 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v63, 0xFu, 26.0, 0);
  long long v64 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v64, 0xFu, 26.0, 0);
  long long v65 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v65, 0x10u, 145.0, 0);
  uint64_t v66 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v66, 0x10u, 145.0, 0);
  CFNumberRef v67 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v67, 0x11u, 12.0, 0);
  float v68 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v68, 0x11u, 12.0, 0);
  int32x4_t v69 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v69, 0x12u, 1.0, 0);
  int32x4_t v70 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v70, 0x12u, 1.0, 0);
  CFDictionaryRef v71 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v71, 0x13u, 45.0, 0);
  CFTypeRef v72 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v72, 0x13u, 45.0, 0);
  long long v73 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v73, 0x14u, 90.0, 0);
  CFTypeRef v74 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v74, 0x14u, 90.0, 0);
  uint64_t v75 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v75, 0x15u, 3072.0, 0);
  uint64_t v76 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v76, 0x15u, 3072.0, 0);
  uint64_t v77 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v77, 0x16u, 3072.0, 0);
  uint64_t v78 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v78, 0x16u, 3072.0, 0);
  uint64_t v79 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v79, 0x17u, 9.3132e-13, 0);
  uint64_t v80 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v80, 0x17u, 9.3132e-13, 0);
  uint64_t v81 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v81, 0x18u, 768.0, 0);
  long long v82 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v82, 0x18u, 768.0, 0);
  long long v83 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v83, 0x19u, -2304.0, 0);
  uint64_t v84 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v84, 0x19u, -2304.0, 0);
  long long v85 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v85, 0x1Au, -512.0, 0);
  long long v86 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v86, 0x1Au, -512.0, 0);
  uint64_t v87 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v87, 0x1Bu, 768.0, 0);
  long long v88 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v88, 0x1Bu, 768.0, 0);
  long long v89 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v89, 0x1Cu, 250.0, 0);
  uint64_t v90 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v90, 0x1Cu, 250.0, 0);
  uint64_t v91 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v91, 0x1Du, 1625.0, 0);
  int v92 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v92, 0x1Du, 1625.0, 0);
  int v93 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v93, 0x1Eu, 800.0, 0);
  uint64_t v94 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v94, 0x1Eu, 800.0, 0);
  unint64_t v95 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v95, 0x1Fu, 800.0, 0);
  uint64_t v96 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v96, 0x1Fu, 800.0, 0);
  int v97 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v97, 0x21u, 0.0, 0);
  int v98 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v98, 0x21u, 0.0, 0);
  uint64_t v99 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v99, 0x22u, 0.0, 0);
  uint64_t v100 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v100, 0x22u, 0.0, 0);
  uint64_t v101 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v101, 0x23u, 2500.0, 0);
  int v102 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v102, 0x23u, 2500.0, 0);
  int v103 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v103, 0x24u, 0.7, 0);
  unint64_t v104 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v104, 0x24u, 0.7, 0);
  uint64_t v105 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v105, 0x25u, 0.5, 0);
  uint64_t v106 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v106, 0x25u, 0.5, 0);
  int v107 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v107, 0x27u, 1.0, 0);
  int v108 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v108, 0x27u, 1.0, 0);
  unsigned int v109 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v109, 0x26u, 750.0, 0);
  uint64_t v110 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v110, 0x26u, 750.0, 0);
  uint64_t v111 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v111, 0x28u, 0.0, 0);
  int v112 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v112, 0x28u, 0.0, 0);
  return a1;
}

void sub_1BB42904C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
  a15 = v15 + 74;
  std::vector<std::unique_ptr<ausdk::AUElement>>::__destroy_vector::operator()[abi:ne180100](&a15);
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v15);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUBeam2>::Factory()
{
  uint64_t result = malloc_type_malloc(0xB18uLL, 0xB0CA1167uLL);
  *uint64_t result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUBeam2>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUBeam2>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUBeam2>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUBeam2>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v136 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *(void *)uint64_t v3 = &unk_1F14C5B88;
  *((_OWORD *)v3 + 33) = xmmword_1BB87A370;
  *((_DWORD *)v3 + 136) = 0;
  *((_WORD *)v3 + 274) = 1;
  *((unsigned char *)v3 + 632) = 0;
  uint64_t v4 = (ausdk::AUBase *)((char *)v3 + 640);
  *((void *)v3 + 80) = 0;
  *((_DWORD *)v3 + 162) = 0;
  *(_OWORD *)((char *)v3 + 2760) = 0u;
  *(_OWORD *)((char *)v3 + 552) = 0u;
  *((unsigned char *)v3 + 568) = 0;
  *((_OWORD *)v3 + 41) = 0u;
  *((_OWORD *)v3 + 42) = 0u;
  *(_OWORD *)((char *)v3 + 684) = 0u;
  std::unique_ptr<CmhBEAM>::reset[abi:ne180100]((uint64_t *)v3 + 69, 0);
  uint64_t v121 = 0;
  uint64_t v122 = 0;
  int v123 = 0;
  ausdk::ComponentBase::GetComponentDescription((ausdk::ComponentBase *)&v121, *(OpaqueAudioComponentInstance **)(a1 + 8));
  *(unsigned char *)(a1 + 700) = 0;
  if (CACFPreferencesGetAppIntegerValue(@"beam2_random_input", @"com.apple.coreaudio", 0)) {
    *(unsigned char *)(a1 + 700) = 1;
  }
  *(unsigned char *)(a1 + 701) = 0;
  if (CACFPreferencesGetAppIntegerValue(@"beam2_dump_diffr", @"com.apple.coreaudio", 0)) {
    *(unsigned char *)(a1 + 701) = 1;
  }
  *(unsigned char *)(a1 + 702) = 0;
  if (CACFPreferencesGetAppIntegerValue(@"beam2_dump_eq", @"com.apple.coreaudio", 0)) {
    *(unsigned char *)(a1 + 702) = 1;
  }
  *(unsigned char *)(a1 + 703) = 0;
  CFStringRef v5 = (const __CFString *)CFPreferencesCopyAppValue(@"beam2_custom_diffr_path", @"com.apple.coreaudio");
  CFStringRef v6 = v5;
  if (v5)
  {
    CFStringGetCString(v5, (char *)(a1 + 704), 1024, 0x600u);
    CFRelease(v6);
    *(unsigned char *)(a1 + 703) = 1;
  }
  *(unsigned char *)(a1 + 1728) = 0;
  CFStringRef v7 = (const __CFString *)CFPreferencesCopyAppValue(@"beam2_custom_eq_path", @"com.apple.coreaudio");
  CFStringRef v10 = v7;
  if (v7)
  {
    CFStringGetCString(v7, (char *)(a1 + 1729), 1024, 0x600u);
    CFRelease(v10);
    *(unsigned char *)(a1 + 1728) = 1;
  }
  if (AUBeam2LogScope(void)::once != -1) {
    dispatch_once(&AUBeam2LogScope(void)::once, &__block_literal_global_35688);
  }
  if (AUBeam2LogScope(void)::scope
    && (*(unsigned char *)(AUBeam2LogScope(void)::scope + 8) & 1) != 0
    && (uint64_t v11 = *(NSObject **)AUBeam2LogScope(void)::scope) != 0
    && os_log_type_enabled(*(os_log_t *)AUBeam2LogScope(void)::scope, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioChannelLayout buf = 136315650;
    *(void *)&uint8_t buf[4] = "AUBeam2.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 227;
    *(_WORD *)&buf[18] = 2048;
    uint64_t v133 = (unsigned __int32 *)a1;
    _os_log_impl(&dword_1BB0CE000, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUBeam2::AUBeam2 (%p)", buf, 0x1Cu);
    uint64_t v12 = AUBeam2LogScope(void)::once;
  }
  else
  {
    uint64_t v12 = -1;
  }
  v9.i32[0] = HIDWORD(v121);
  v8.i32[0] = v121;
  int16x8_t v13 = (int16x8_t)vmovl_u8(v8);
  *(int16x4_t *)v13.i8 = vrev64_s16(*(int16x4_t *)v13.i8);
  unsigned __int32 v119 = vmovn_s16(v13).u32[0];
  char v120 = 0;
  int16x8_t v14 = (int16x8_t)vmovl_u8(v9);
  *(int16x4_t *)v14.i8 = vrev64_s16(*(int16x4_t *)v14.i8);
  *(int8x8_t *)v14.i8 = vmovn_s16(v14);
  __int32 v117 = v14.i32[0];
  char v118 = 0;
  v14.i32[0] = v122;
  int16x8_t v15 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v14.i8);
  *(int16x4_t *)v15.i8 = vrev64_s16(*(int16x4_t *)v15.i8);
  unsigned __int32 v115 = vmovn_s16(v15).u32[0];
  char v116 = 0;
  if (v12 != -1)
  {
    __int32 v114 = HIDWORD(v121);
    dispatch_once(&AUBeam2LogScope(void)::once, &__block_literal_global_35688);
    v9.i32[0] = v114;
  }
  __int32 v16 = v9.i32[0];
  if (AUBeam2LogScope(void)::scope)
  {
    uint64_t v17 = *(NSObject **)AUBeam2LogScope(void)::scope;
    if (!*(void *)AUBeam2LogScope(void)::scope) {
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t v17 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioChannelLayout buf = 136316162;
    *(void *)&uint8_t buf[4] = "AUBeam2.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 232;
    *(_WORD *)&buf[18] = 2080;
    uint64_t v133 = &v119;
    *(_WORD *)uint64_t v134 = 2080;
    *(void *)&v134[2] = &v117;
    *(_WORD *)&v134[10] = 2080;
    uint64_t v135 = &v115;
    _os_log_impl(&dword_1BB0CE000, v17, OS_LOG_TYPE_DEBUG, "%25s:%-5d Component info: %s %s %s", buf, 0x30u);
  }
LABEL_27:
  if (v16 == 1650814258)
  {
    *(unsigned char *)(a1 + 548) = 1;
  }
  else
  {
    *(unsigned char *)(a1 + 548) = 0;
    *(unsigned char *)(a1 + 376) = 1;
    (*(void (**)(uint64_t, uint64_t, void, void, void *, uint64_t))(*(void *)a1 + 96))(a1, 3701, 0, 0, &kAUBeam2Default_TransformSize, 4);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 512))(a1, 240);
  }
  (*(void (**)(uint64_t, uint64_t, void, void, void *, uint64_t))(*(void *)a1 + 96))(a1, 3709, 0, 0, &kAUBeam2Default_ReverseMicChannelFlag, 4);
  ausdk::AUBase::CreateElements(a1);
  int v18 = *(unsigned __int8 *)(a1 + 548);
  *(void *)AudioChannelLayout buf = 0x40E5888000000000;
  v19.n128_u64[0] = 0x296C70636DLL;
  if (v18) {
    int v20 = 4;
  }
  else {
    int v20 = 8;
  }
  *(void *)&uint8_t buf[8] = 0x296C70636DLL;
  if (v18) {
    int v21 = 32;
  }
  else {
    int v21 = 64;
  }
  *(_DWORD *)&buf[16] = v20;
  LODWORD(v133) = 1;
  HIDWORD(v133) = v20;
  *(_DWORD *)uint64_t v134 = 2;
  *(_DWORD *)&v134[4] = v21;
  *(_DWORD *)&v134[8] = 0;
  uint64_t v124 = 0x40E5888000000000;
  uint64_t v125 = 0x296C70636DLL;
  int v126 = v20;
  int v127 = 1;
  int v128 = v20;
  int v129 = 1;
  int v130 = v21;
  int v131 = 0;
  if (!v18)
  {
    LODWORD(v125) = 1718773105;
    *(_DWORD *)&uint8_t buf[8] = 1718773105;
  }
  for (unsigned int i = 0; ; ++i)
  {
    uint64_t v23 = *(void *)(a1 + 120);
    if (v23) {
      LODWORD(v24) = (*(uint64_t (**)(uint64_t, __n128))(*(void *)v23 + 24))(v23, v19);
    }
    else {
      uint64_t v24 = (*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 3;
    }
    if (i >= v24) {
      break;
    }
    uint64_t Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), i);
    (*(void (**)(uint64_t, unsigned char *))(*(void *)Element + 56))(Element, buf);
  }
  for (unsigned int j = 0; ; ++j)
  {
    uint64_t v27 = *(void *)(a1 + 168);
    if (v27) {
      LODWORD(v28) = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 24))(v27);
    }
    else {
      uint64_t v28 = (*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 3;
    }
    if (j >= v28) {
      break;
    }
    uint64_t v29 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), j);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v29 + 56))(v29, &v124);
  }
  uint64_t v30 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v30, 0, 0.0, 0);
  uint64_t v31 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v31, 0x20u, 0.0, 0);
  unsigned int v32 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v32, 1u, 1.0, 0);
  uint64_t v33 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v33, 1u, 1.0, 0);
  uint64_t v34 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v34, 2u, 1.0, 0);
  uint64_t v35 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v35, 2u, 1.0, 0);
  uint64_t v36 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v36, 3u, 0.0, 0);
  uint64_t v37 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v37, 3u, 0.0, 0);
  uint64_t v38 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v38, 0x2Au, 1.0, 0);
  uint64_t v39 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v39, 0x2Au, 1.0, 0);
  uint64_t v40 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v40, 4u, 1.0, 0);
  uint64_t v41 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v41, 4u, 1.0, 0);
  if (*(unsigned char *)(a1 + 548))
  {
    long long v42 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
    ausdk::AUElement::SetParameter(v42, 5u, 0.0, 0);
    long long v43 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
    ausdk::AUElement::SetParameter(v43, 5u, 0.0, 0);
    uint64_t v44 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
    ausdk::AUElement::SetParameter(v44, 6u, 0.5, 0);
    uint64_t v45 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
    ausdk::AUElement::SetParameter(v45, 6u, 0.5, 0);
    uint64_t v46 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
    ausdk::AUElement::SetParameter(v46, 0x29u, 1.0, 0);
    long long v47 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
    ausdk::AUElement::SetParameter(v47, 0x29u, 1.0, 0);
  }
  long long v48 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v48, 7u, 0.0, 0);
  uint64_t v49 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v49, 7u, 0.0, 0);
  long long v50 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v50, 8u, 0.5, 0);
  long long v51 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v51, 8u, 0.5, 0);
  uint64_t v52 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v52, 9u, -100.0, 0);
  uint64_t v53 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v53, 9u, -100.0, 0);
  uint64_t v54 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v54, 0xAu, 0.0, 0);
  uint64_t v55 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v55, 0xAu, 0.0, 0);
  uint64_t v56 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v56, 0xBu, 24000.0, 0);
  uint64_t v57 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v57, 0xBu, 24000.0, 0);
  uint64_t v58 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v58, 0xCu, 26.0, 0);
  uint64_t v59 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v59, 0xDu, 1.0, 0);
  long long v60 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v60, 0xDu, 1.0, 0);
  long long v61 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v61, 0xEu, 5.0, 0);
  uint64_t v62 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v62, 0xEu, 5.0, 0);
  long long v63 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v63, 0xFu, 26.0, 0);
  long long v64 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v64, 0xFu, 26.0, 0);
  long long v65 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v65, 0x10u, 145.0, 0);
  uint64_t v66 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v66, 0x10u, 145.0, 0);
  CFNumberRef v67 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v67, 0x11u, 4.0, 0);
  float v68 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v68, 0x11u, 4.0, 0);
  int32x4_t v69 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v69, 0x12u, 1.0, 0);
  int32x4_t v70 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v70, 0x12u, 1.0, 0);
  CFDictionaryRef v71 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v71, 0x13u, 45.0, 0);
  CFTypeRef v72 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v72, 0x13u, 45.0, 0);
  long long v73 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v73, 0x14u, 90.0, 0);
  CFTypeRef v74 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v74, 0x14u, 90.0, 0);
  uint64_t v75 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v75, 0x15u, 3072.0, 0);
  uint64_t v76 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v76, 0x15u, 3072.0, 0);
  uint64_t v77 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v77, 0x16u, 3072.0, 0);
  uint64_t v78 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v78, 0x16u, 3072.0, 0);
  uint64_t v79 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v79, 0x17u, 9.3132e-13, 0);
  uint64_t v80 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v80, 0x17u, 9.3132e-13, 0);
  uint64_t v81 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v81, 0x18u, 768.0, 0);
  long long v82 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v82, 0x18u, 768.0, 0);
  long long v83 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v83, 0x19u, -2304.0, 0);
  uint64_t v84 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v84, 0x19u, -2304.0, 0);
  long long v85 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v85, 0x1Au, -512.0, 0);
  long long v86 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v86, 0x1Au, -512.0, 0);
  uint64_t v87 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v87, 0x1Bu, 768.0, 0);
  long long v88 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v88, 0x1Bu, 768.0, 0);
  long long v89 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v89, 0x1Cu, 250.0, 0);
  uint64_t v90 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v90, 0x1Cu, 250.0, 0);
  uint64_t v91 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v91, 0x1Du, 1625.0, 0);
  int v92 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v92, 0x1Du, 1625.0, 0);
  int v93 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v93, 0x1Eu, 800.0, 0);
  uint64_t v94 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v94, 0x1Eu, 800.0, 0);
  unint64_t v95 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v95, 0x1Fu, 800.0, 0);
  uint64_t v96 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v96, 0x1Fu, 800.0, 0);
  int v97 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v97, 0x21u, 0.0, 0);
  int v98 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v98, 0x21u, 0.0, 0);
  uint64_t v99 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v99, 0x22u, 0.0, 0);
  uint64_t v100 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v100, 0x22u, 0.0, 0);
  uint64_t v101 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v101, 0x23u, 2500.0, 0);
  int v102 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v102, 0x23u, 2500.0, 0);
  int v103 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v103, 0x24u, 0.7, 0);
  unint64_t v104 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v104, 0x24u, 0.7, 0);
  uint64_t v105 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v105, 0x25u, 0.5, 0);
  uint64_t v106 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v106, 0x25u, 0.5, 0);
  int v107 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v107, 0x27u, 0.0, 0);
  int v108 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v108, 0x27u, 0.0, 0);
  unsigned int v109 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v109, 0x26u, 24000.0, 0);
  uint64_t v110 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v110, 0x26u, 24000.0, 0);
  uint64_t v111 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v111, 0x28u, 0.0, 0);
  int v112 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 1u);
  ausdk::AUElement::SetParameter(v112, 0x28u, 0.0, 0);
  return a1;
}

void sub_1BB42A0FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
  __n128 v19 = *(unsigned char **)(v15 + 2760);
  if (v19)
  {
    int v20 = *(unsigned char **)(v15 + 2768);
    if (v20 != v19) {
      *(void *)(v15 + 2768) = &v20[(v19 - v20 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v19);
    *uint64_t v17 = 0;
    v17[1] = 0;
  }
  a15 = (void **)(v15 + 656);
  std::vector<std::unique_ptr<ausdk::AUElement>>::__destroy_vector::operator()[abi:ne180100](&a15);
  std::__optional_destruct_base<BlockProcessor,false>::~__optional_destruct_base[abi:ne180100]((unsigned char *)(v15 + 568));
  std::unique_ptr<CmhBEAM2NOpt>::reset[abi:ne180100]((CmhBEAM2NOpt **)(v15 + 560), 0);
  std::unique_ptr<CmhBEAM>::reset[abi:ne180100](v16, 0);
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v15);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpeakerProtectionV3>::Factory()
{
  uint64_t result = malloc_type_malloc(0x5A0uLL, 0xB0CA1167uLL);
  *uint64_t result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpeakerProtectionV3>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpeakerProtectionV3>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpeakerProtectionV3>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpeakerProtectionV3>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v144 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 2, 1);
  *(void *)uint64_t v3 = &unk_1F14BB000;
  *((unsigned char *)v3 + 584) = 0;
  *((unsigned char *)v3 + 592) = 0;
  *((unsigned char *)v3 + 616) = 0;
  *((_DWORD *)v3 + 132) = 0;
  *((_WORD *)v3 + 266) = 0;
  *((void *)v3 + 67) = 0;
  *((_OWORD *)v3 + 34) = 0u;
  *((unsigned char *)v3 + 560) = 0;
  *((_OWORD *)v3 + 39) = 0u;
  *((_OWORD *)v3 + 40) = xmmword_1BB87A740;
  *(void *)(a1 + 656) = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  *(_WORD *)(a1 + 664) = 257;
  *(unsigned char *)(a1 + 776) = 0;
  *(_DWORD *)(a1 + 784) = 0;
  *(void *)(a1 + 792) = 0;
  *(_DWORD *)(a1 + 800) = 0;
  *(unsigned char *)(a1 + 916) = 0;
  *(unsigned char *)(a1 + 920) = 0;
  *(unsigned char *)(a1 + 944) = 0;
  *(unsigned char *)(a1 + 952) = 0;
  *(unsigned char *)(a1 + 956) = 0;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_DWORD *)(a1 + 720) = 0;
  *(void *)(a1 + 728) = 0;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(unsigned char *)(a1 + 752) = 0;
  *(_OWORD *)(a1 + 897) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_DWORD *)(a1 + 960) = 1148846080;
  *(void *)(a1 + 984) = 0;
  *(_OWORD *)(a1 + 968) = 0u;
  uint64_t v4 = (int32x4_t *)operator new(0x10uLL);
  *(void *)(a1 + 968) = v4;
  *v4++ = vdupq_n_s32(0x42480000u);
  *(void *)(a1 + 984) = v4;
  *(void *)(a1 + 976) = v4;
  cpms::TimeScale<float>::TimeScale((uint64_t)buf, "cpms_ts_i");
  cpms::TimeScale<float>::TimeScale((uint64_t)&cf, "cpms_ts_100");
  CFTypeRef v5 = cf;
  if (cf) {
    CFRetain(cf);
  }
  *((void *)&v132 + 1) = v5;
  long long v133 = v129;
  char v135 = 1;
  int v134 = 1036831949;
  cpms::TimeScale<float>::TimeScale((uint64_t)&v124, "cpms_ts_1000");
  CFTypeRef v6 = v124;
  if (v124) {
    CFRetain(v124);
  }
  CFTypeRef v136 = v6;
  long long v137 = v125;
  char v139 = 1;
  int v138 = 1065353216;
  cpms::TimeScale<float>::TimeScale((uint64_t)&v122, "cpms_ts_thermal");
  CFTypeRef v7 = v122;
  if (v122) {
    CFRetain(v122);
  }
  CFTypeRef v140 = v7;
  long long v141 = v123;
  char v143 = 1;
  int v142 = 1114636288;
  *(void *)(a1 + 1000) = 0;
  *(void *)(a1 + 1008) = 0;
  *(void *)(a1 + 992) = 0;
  uint64_t v126 = a1 + 992;
  char v127 = 0;
  uint8x8_t v8 = (char *)operator new(0x80uLL);
  uint64_t v9 = 0;
  *(void *)(a1 + 992) = v8;
  *(void *)(a1 + 1000) = v8;
  *(void *)(a1 + 1008) = v8 + 128;
  do
  {
    std::construct_at[abi:ne180100]<cpms::TimeScale<float>,cpms::TimeScale<float> const&,cpms::TimeScale<float>*>((uint64_t)&v8[v9], (uint64_t)&buf[v9]);
    v9 += 32;
  }
  while (v9 != 128);
  *(void *)(a1 + 1000) = v8 + 128;
  for (uint64_t i = 96; i != -32; i -= 32)
  {
    uint64_t v11 = *(const void **)&buf[i];
    if (v11) {
      CFRelease(v11);
    }
  }
  if (v122) {
    CFRelease(v122);
  }
  if (v124) {
    CFRelease(v124);
  }
  if (cf) {
    CFRelease(cf);
  }
  *(void *)(a1 + 1080) = 0;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(void *)(a1 + 1088) = &unk_1F14BBC58;
  *(void *)(a1 + 1096) = 0;
  *(void *)(a1 + 1104) = &unk_1F14BBC58;
  *(void *)(a1 + 1112) = 0;
  *(void *)(a1 + 1120) = &unk_1F14BBC58;
  *(void *)(a1 + 1176) = 0;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_WORD *)(a1 + 1184) = 1;
  *(void *)(a1 + 1336) = 0;
  *(void *)(a1 + 1352) = 0;
  *(void *)(a1 + 1344) = 0;
  *(_OWORD *)(a1 + 1315) = 0u;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1208) = 0u;
  uint64_t v12 = (caulk::deferred_logger **)spp3Subsystem();
  caulk::deferred_logger::create_v(*v12, v13);
  uint64_t Element = ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)Element + 40))(Element, 20);
  uint64_t v15 = spp3Subsystem();
  if (v15)
  {
    if (*(unsigned char *)(v15 + 8))
    {
      __int32 v16 = *(NSObject **)v15;
      if (*(void *)v15)
      {
        if (os_log_type_enabled(*(os_log_t *)v15, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioChannelLayout buf = 136315394;
          *(void *)&uint8_t buf[4] = "AUSpeakerProtectionV3.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 159;
          _os_log_impl(&dword_1BB0CE000, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUSpeakerProtectionV3::AUSpeakerProtectionV3", buf, 0x12u);
        }
      }
    }
  }
  ausdk::AUBase::CreateElements(a1);
  *(unsigned char *)(a1 + 1185) = CACFPreferencesGetAppBooleanValue(@"clsp_allow_restore", @"com.apple.coreaudio", 0);
  AppBooleanCFNumberRef Value = CACFPreferencesGetAppBooleanValue(@"clsp_enable_closed_loop", @"com.apple.coreaudio", 0);
  for (unsigned int j = 0; ; ++j)
  {
    uint64_t v19 = *(void *)(a1 + 832);
    if (v19) {
      LODWORD(v20) = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 24))(v19);
    }
    else {
      uint64_t v20 = (*(void *)(a1 + 816) - *(void *)(a1 + 808)) >> 3;
    }
    if (j >= v20) {
      break;
    }
    AUSpeakerProtectionV3::SetClosedLoopEnabled((AUSpeakerProtectionV3 *)a1, j, AppBooleanValue);
  }
  uint64_t v21 = spp3Subsystem();
  if (v21)
  {
    if (*(unsigned char *)(v21 + 8))
    {
      uint64_t v22 = *(NSObject **)v21;
      if (*(void *)v21)
      {
        if (os_log_type_enabled(*(os_log_t *)v21, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioChannelLayout buf = 136315394;
          *(void *)&uint8_t buf[4] = "AUSpeakerProtectionV3.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1261;
          _os_log_impl(&dword_1BB0CE000, v22, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUSpeakerProtectionV3::SetDefaultFormats\n", buf, 0x12u);
        }
      }
    }
  }
  *(void *)AudioChannelLayout buf = 0x40E5888000000000;
  *(_OWORD *)&uint8_t buf[8] = xmmword_1BB8727B0;
  long long v132 = xmmword_1BB8727C0;
  uint64_t v23 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v23 + 56))(v23, buf);
  uint64_t v24 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v24 + 56))(v24, buf);
  CFTypeRef cf = (CFTypeRef)0x40E5888000000000;
  long long v129 = xmmword_1BB87A750;
  long long v130 = xmmword_1BB87A760;
  uint64_t v25 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 1u);
  (*(void (**)(uint64_t, CFTypeRef *))(*(void *)v25 + 56))(v25, &cf);
  uint64_t v26 = spp3Subsystem();
  if (v26)
  {
    if (*(unsigned char *)(v26 + 8))
    {
      uint64_t v27 = *(NSObject **)v26;
      if (*(void *)v26)
      {
        if (os_log_type_enabled(*(os_log_t *)v26, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioChannelLayout buf = 136315394;
          *(void *)&uint8_t buf[4] = "AUSpeakerProtectionV3.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2408;
          _os_log_impl(&dword_1BB0CE000, v27, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUSpeakerProtectionV3::SetParamDefaults", buf, 0x12u);
        }
      }
    }
  }
  uint64_t v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v28, 0, 1.0, 0);
  uint64_t v29 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v29, 0x12u, 1.0, 0);
  uint64_t v30 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v30, 0x13u, 0.0, 0);
  uint64_t v31 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v31, 1u, 1.0, 0);
  unsigned int v32 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v32, 4u, 0.0, 0);
  uint64_t v33 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v33, 5u, 0.0, 0);
  uint64_t v34 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v34, 6u, 0.0, 0);
  uint64_t v35 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v35, 7u, 0.0, 0);
  uint64_t v36 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v36, 2u, 0.0, 0);
  uint64_t v37 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v37, 3u, 0.0, 0);
  uint64_t v38 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v38, 8u, 0.0, 0);
  uint64_t v39 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v39, 9u, 0.0, 0);
  uint64_t v40 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v40, 0xAu, 0.0, 0);
  uint64_t v41 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v41, 0xBu, 0.0, 0);
  long long v42 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v42, 0xCu, 0.0, 0);
  long long v43 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v43, 0x11u, 0.0, 0);
  uint64_t v44 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v44, 0xDu, 0.0, 0);
  uint64_t v45 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v45, 0xEu, 5.0, 0);
  uint64_t v46 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v46, 0xFu, 0.0, 0);
  long long v47 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v47, 0x10u, 0.0, 0);
  for (unsigned int k = 0; ; ++k)
  {
    uint64_t v49 = *(void *)(a1 + 832);
    if (v49) {
      LODWORD(v50) = (*(uint64_t (**)(uint64_t))(*(void *)v49 + 24))(v49);
    }
    else {
      uint64_t v50 = (*(void *)(a1 + 816) - *(void *)(a1 + 808)) >> 3;
    }
    if (k >= v50) {
      break;
    }
    long long v51 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v51, 0, 0.0, 0);
    uint64_t v52 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v52, 1u, 0.0, 0);
    uint64_t v53 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v53, 6u, 0.0, 0);
    uint64_t v54 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v54, 8u, 50.0, 0);
    uint64_t v55 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v55, 7u, 50.0, 0);
    uint64_t v56 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v56, 9u, 0.0, 0);
    uint64_t v57 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v57, 0xAu, 0.0, 0);
    uint64_t v58 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v58, 0xBu, 0.0, 0);
    uint64_t v59 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v59, 0xCu, 0.0, 0);
    long long v60 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v60, 0xDu, 0.0, 0);
    long long v61 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v61, 0xEu, 0.0, 0);
    uint64_t v62 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v62, 0xFu, 0.0, 0);
    long long v63 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v63, 0x10u, 0.0, 0);
    long long v64 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v64, 0x11u, 0.0, 0);
    long long v65 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v65, 0x12u, 0.0, 0);
    uint64_t v66 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v66, 0x13u, 0.0, 0);
    CFNumberRef v67 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v67, 2u, 0.0, 0);
    float v68 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v68, 3u, 0.0, 0);
    int32x4_t v69 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v69, 4u, 0.0, 0);
    int32x4_t v70 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v70, 5u, 0.0, 0);
    CFDictionaryRef v71 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v71, 0x1Au, 0.0, 0);
    CFTypeRef v72 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v72, 0x18u, 0.18, 0);
    long long v73 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v73, 0x19u, 0.0, 0);
    CFTypeRef v74 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v74, 0x17u, 0.0, 0);
    if (*(unsigned char *)(a1 + 533)) {
      float v75 = 1.0;
    }
    else {
      float v75 = 0.0;
    }
    uint64_t v76 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v76, 0x16u, v75, 0);
    uint64_t v77 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v77, 0x15u, v75, 0);
    uint64_t v78 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v78, 0x1Bu, -40.0, 0);
    uint64_t v79 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v79, 0x1Cu, -40.0, 0);
    uint64_t v80 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v80, 0x1Du, 100.0, 0);
    uint64_t v81 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v81, 0x1Eu, 100.0, 0);
    long long v82 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v82, 0x1Fu, 0.5, 0);
    long long v83 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v83, 0x43u, 0.01, 0);
    uint64_t v84 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v84, 0x44u, 0.00001, 0);
    long long v85 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v85, 0x20u, 43.066, 0);
    long long v86 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v86, 0x14u, 1.0, 0);
    uint64_t v87 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v87, 0x21u, 1.0, 0);
    long long v88 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v88, 0x22u, 1.0, 0);
    long long v89 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v89, 0x23u, 0.01, 0);
    uint64_t v90 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v90, 0x24u, 1.0, 0);
    uint64_t v91 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v91, 0x25u, 0.0, 0);
    int v92 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v92, 0x26u, 0.0, 0);
    int v93 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v93, 0x27u, 0.0, 0);
    uint64_t v94 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v94, 0x28u, 0.0, 0);
    unint64_t v95 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v95, 0x29u, 0.0, 0);
    uint64_t v96 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v96, 0x2Au, 0.0, 0);
    int v97 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v97, 0x2Bu, 0.0, 0);
    int v98 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v98, 0x2Cu, 0.0, 0);
    uint64_t v99 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v99, 0x2Du, 70.0, 0);
    uint64_t v100 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v100, 0x2Eu, 1.0, 0);
    uint64_t v101 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v101, 0x2Fu, 0.6, 0);
    int v102 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v102, 0x30u, 0.6, 0);
    int v103 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v103, 0x31u, 0.0001, 0);
    unint64_t v104 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v104, 0x32u, 4.0, 0);
    uint64_t v105 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v105, 0x33u, 2.0, 0);
    uint64_t v106 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v106, 0x34u, 0.2, 0);
    int v107 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v107, 0x35u, 0.0001, 0);
    int v108 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v108, 0x35u, 0.0001, 0);
    unsigned int v109 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v109, 0x37u, 0.5, 0);
    uint64_t v110 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v110, 0x38u, 0.5, 0);
    uint64_t v111 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v111, 0x39u, -0.5, 0);
    int v112 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v112, 0x3Au, 0.5, 0);
    int v113 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v113, 0x3Bu, 0.9, 0);
    __int32 v114 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v114, 0x3Cu, 0.7, 0);
    unsigned __int32 v115 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v115, 0x3Du, 50.0, 0);
    char v116 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v116, 0x3Eu, 1.0, 0);
    __int32 v117 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v117, 0x3Fu, 20.0, 0);
    char v118 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v118, 0x40u, 0.0, 0);
    unsigned __int32 v119 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v119, 0x42u, 0.0, 0);
    char v120 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), k);
    ausdk::AUElement::SetParameter(v120, 0x41u, 0.0, 0);
  }
  ++*(_DWORD *)(a1 + 636);
  return a1;
}

void sub_1BB42B3C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CAExtAudioFile *a11, CAExtAudioFile *a12, CAExtAudioFile *a13, uint64_t a14, uint64_t a15, CFTypeRef cf, uint64_t a17, uint64_t a18, uint64_t a19, CFTypeRef a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,CFTypeRef a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpeakerProtectionV2>::Factory()
{
  uint64_t result = malloc_type_malloc(0x370uLL, 0xB0CA1167uLL);
  *uint64_t result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpeakerProtectionV2>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpeakerProtectionV2>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpeakerProtectionV2>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpeakerProtectionV2>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *(void *)uint64_t v3 = &unk_1F14BFAB8;
  *((_WORD *)v3 + 264) = 0;
  *((unsigned char *)v3 + 530) = 0;
  *(_OWORD *)((char *)v3 + 536) = 0u;
  *((_DWORD *)v3 + 138) = -1;
  *((void *)v3 + 70) = 0;
  *((_DWORD *)v3 + 142) = 0;
  uint64_t v4 = (ausdk::AUBase *)((char *)v3 + 32);
  *((_OWORD *)v3 + 36) = 0u;
  *((_OWORD *)v3 + 37) = 0u;
  *((_OWORD *)v3 + 38) = 0u;
  *((_OWORD *)v3 + 39) = 0u;
  *((unsigned char *)v3 + 640) = 0;
  *(_OWORD *)((char *)v3 + 648) = 0u;
  *(_OWORD *)((char *)v3 + 664) = 0u;
  *(_OWORD *)((char *)v3 + 680) = 0u;
  *(_OWORD *)((char *)v3 + 696) = 0u;
  *(_OWORD *)((char *)v3 + 712) = 0u;
  *(_OWORD *)((char *)v3 + 728) = 0u;
  *(_OWORD *)((char *)v3 + 744) = 0u;
  *(_OWORD *)((char *)v3 + 760) = 0u;
  *(_OWORD *)((char *)v3 + 776) = 0u;
  *(_OWORD *)((char *)v3 + 792) = 0u;
  *((void *)v3 + 101) = 0;
  uint64_t Element = ausdk::AUScope::GetElement((ausdk::AUBase *)((char *)v3 + 32), 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)Element + 40))(Element, 34);
  ausdk::AUBase::CreateElements(a1);
  v48[0] = 0;
  AppIntegerCFNumberRef Value = CACFPreferencesGetAppIntegerValue(@"clsp_logging_level", @"com.apple.coreaudio", v48);
  if (v48[0]) {
    *(_DWORD *)(a1 + 632) = AppIntegerValue;
  }
  v48[0] = 0;
  int v7 = CACFPreferencesGetAppIntegerValue(@"clsp_syslog_level", @"com.apple.coreaudio", v48);
  if (v48[0]) {
    *(_DWORD *)(a1 + 636) = v7;
  }
  *(unsigned char *)(a1 + 640) = CACFPreferencesGetAppBooleanValue(@"clsp_allow_restore", @"com.apple.coreaudio", 0);
  *(void *)long long v48 = 0x40E5888000000000;
  long long v49 = xmmword_1BB8727B0;
  long long v50 = xmmword_1BB8727C0;
  uint64_t v8 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, BOOL *))(*(void *)v8 + 56))(v8, v48);
  uint64_t v9 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, BOOL *))(*(void *)v9 + 56))(v9, v48);
  CFStringRef v10 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v10, 0, 1.0, 0);
  uint64_t v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v11, 1u, 1.0, 0);
  uint64_t v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v12, 2u, 0.0, 0);
  int16x8_t v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v13, 3u, 0.0, 0);
  int16x8_t v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v14, 4u, 0.0, 0);
  uint64_t v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v15, 6u, 0.0, 0);
  __int32 v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v16, 7u, 0.0, 0);
  uint64_t v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v17, 8u, 0.0, 0);
  int v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v18, 5u, 0.0, 0);
  uint64_t v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v19, 0x1Du, 0.0, 0);
  uint64_t v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v20, 9u, 0.0, 0);
  uint64_t v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v21, 0xAu, 0.0, 0);
  uint64_t v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v22, 0xBu, 0.0, 0);
  uint64_t v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v23, 0x1Eu, 1.0, 0);
  uint64_t v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v24, 0x1Fu, 0.0, 0);
  uint64_t v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v25, 0x20u, 5.0, 0);
  uint64_t v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v26, 0x21u, 0.0, 0);
  for (unsigned int i = 0; ; ++i)
  {
    uint64_t v28 = *(void *)(a1 + 600);
    if (v28) {
      LODWORD(v29) = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 24))(v28);
    }
    else {
      uint64_t v29 = (*(void *)(a1 + 584) - *(void *)(a1 + 576)) >> 3;
    }
    if (i >= v29) {
      break;
    }
    uint64_t v30 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 560), i);
    ausdk::AUElement::SetParameter(v30, 0x18u, 50.0, 0);
    uint64_t v31 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 560), i);
    ausdk::AUElement::SetParameter(v31, 0x17u, 50.0, 0);
    unsigned int v32 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 560), i);
    ausdk::AUElement::SetParameter(v32, 0xCu, 0.0, 0);
    uint64_t v33 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 560), i);
    ausdk::AUElement::SetParameter(v33, 0xDu, 0.0, 0);
    uint64_t v34 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 560), i);
    ausdk::AUElement::SetParameter(v34, 0xEu, 0.0, 0);
    uint64_t v35 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 560), i);
    ausdk::AUElement::SetParameter(v35, 0xFu, 0.0, 0);
    uint64_t v36 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 560), i);
    ausdk::AUElement::SetParameter(v36, 0x10u, 0.0, 0);
    uint64_t v37 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 560), i);
    ausdk::AUElement::SetParameter(v37, 0x11u, 0.0, 0);
    uint64_t v38 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 560), i);
    ausdk::AUElement::SetParameter(v38, 0x12u, 0.0, 0);
    uint64_t v39 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 560), i);
    ausdk::AUElement::SetParameter(v39, 0x13u, 0.0, 0);
    uint64_t v40 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 560), i);
    ausdk::AUElement::SetParameter(v40, 0x14u, 0.0, 0);
    uint64_t v41 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 560), i);
    ausdk::AUElement::SetParameter(v41, 0x15u, 0.0, 0);
    long long v42 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 560), i);
    ausdk::AUElement::SetParameter(v42, 0x16u, 0.0, 0);
    long long v43 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 560), i);
    ausdk::AUElement::SetParameter(v43, 0x19u, 0.0, 0);
    uint64_t v44 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 560), i);
    ausdk::AUElement::SetParameter(v44, 0x1Au, 0.0, 0);
    uint64_t v45 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 560), i);
    ausdk::AUElement::SetParameter(v45, 0x1Bu, 0.0, 0);
    uint64_t v46 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 560), i);
    ausdk::AUElement::SetParameter(v46, 0x1Cu, 0.0, 0);
  }
  ++*(_DWORD *)(a1 + 548);
  return a1;
}

void sub_1BB42BD3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v11 = *(void **)(v9 + 704);
  if (v11)
  {
    *(void *)(v9 + 712) = v11;
    operator delete(v11);
  }
  uint64_t v12 = *(void **)(v9 + 680);
  if (v12)
  {
    *(void *)(v9 + 688) = v12;
    operator delete(v12);
  }
  uint64_t v13 = 0;
  while (1)
  {
    int16x8_t v14 = *(std::__shared_weak_count **)(v9 + 672 + v13);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    v13 -= 16;
    if (v13 == -32)
    {
      a9 = (void **)(v9 + 608);
      std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>::__destroy_vector::operator()[abi:ne180100](&a9);
      a9 = (void **)(v9 + 576);
      std::vector<std::unique_ptr<ausdk::AUElement>>::__destroy_vector::operator()[abi:ne180100](&a9);
      ausdk::AUBase::~AUBase((ausdk::AUBase *)v9);
      _Unwind_Resume(a1);
    }
  }
}

void *ausdk::APFactory<ausdk::AUBaseProcessLookup,AUSpatialMap>::Factory()
{
  uint64_t result = malloc_type_malloc(0x508uLL, 0xB0CA1167uLL);
  *uint64_t result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUSpatialMap>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUSpatialMap>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUSpatialMap>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUSpatialMap>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *(void *)uint64_t v3 = &unk_1F14B7C18;
  *((_OWORD *)v3 + 33) = 0u;
  *((_OWORD *)v3 + 34) = 0u;
  *((_OWORD *)v3 + 35) = 0u;
  *((_OWORD *)v3 + 36) = 0u;
  *((_OWORD *)v3 + 37) = 0u;
  *((_OWORD *)v3 + 38) = 0u;
  *((_OWORD *)v3 + 39) = 0u;
  *((_OWORD *)v3 + 40) = 0u;
  *((_OWORD *)v3 + 41) = 0u;
  *((_OWORD *)v3 + 42) = 0u;
  *((_OWORD *)v3 + 43) = 0u;
  *((_OWORD *)v3 + 44) = 0u;
  *((void *)v3 + 90) = 0;
  *((_OWORD *)v3 + 46) = 0u;
  *((_OWORD *)v3 + 47) = 0u;
  *((_OWORD *)v3 + 48) = 0u;
  *((_OWORD *)v3 + 49) = 0u;
  *((_OWORD *)v3 + 50) = 0u;
  *((_OWORD *)v3 + 51) = 0u;
  *((_OWORD *)v3 + 52) = 0u;
  *((_OWORD *)v3 + 53) = 0u;
  *((_OWORD *)v3 + 54) = 0u;
  *((_OWORD *)v3 + 55) = 0u;
  *((_OWORD *)v3 + 56) = 0u;
  *((_OWORD *)v3 + 57) = 0u;
  *((_OWORD *)v3 + 58) = 0u;
  *((_OWORD *)v3 + 59) = 0u;
  *((_OWORD *)v3 + 60) = 0u;
  *((_OWORD *)v3 + 61) = 0u;
  *((_OWORD *)v3 + 62) = 0u;
  *((_OWORD *)v3 + 63) = 0u;
  *((_OWORD *)v3 + 64) = 0u;
  *((_OWORD *)v3 + 65) = 0u;
  *((_OWORD *)v3 + 66) = 0u;
  *((_OWORD *)v3 + 67) = 0u;
  *((_OWORD *)v3 + 68) = 0u;
  *((_OWORD *)v3 + 69) = 0u;
  *((_OWORD *)v3 + 70) = 0u;
  *((_OWORD *)v3 + 71) = 0u;
  *((_OWORD *)v3 + 72) = 0u;
  *((_OWORD *)v3 + 73) = 0u;
  *((void *)v3 + 148) = 0x40000000080;
  *((void *)v3 + 150) = 0x43FA000044FA0000;
  *((void *)v3 + 151) = 0;
  *((unsigned char *)v3 + 1216) = 0;
  ausdk::AUBase::CreateElements((uint64_t)v3);
  *(unsigned char *)(a1 + 376) = 1;
  (*(void (**)(uint64_t, void))(*(void *)a1 + 512))(a1, *(unsigned int *)(a1 + 1188));
  uint64_t v10 = 0x40E5888000000000;
  long long v11 = xmmword_1BB8727B0;
  long long v12 = xmmword_1BB879E90;
  uint64_t v7 = 0x40E5888000000000;
  long long v8 = xmmword_1BB8727B0;
  long long v9 = xmmword_1BB879E90;
  uint64_t Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)Element + 56))(Element, &v10);
  uint64_t v5 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v5 + 56))(v5, &v7);
  return a1;
}

void sub_1BB42C024(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CFTypeRef v6 = (void *)*((void *)v2 + 145);
  if (v6)
  {
    *((void *)v2 + 146) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)v2 + 142);
  if (v7)
  {
    *((void *)v2 + 143) = v7;
    operator delete(v7);
  }
  long long v8 = (void *)*((void *)v2 + 139);
  if (v8)
  {
    *((void *)v2 + 140) = v8;
    operator delete(v8);
  }
  long long v9 = (void *)*((void *)v2 + 134);
  if (v9)
  {
    *((void *)v2 + 135) = v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)*((void *)v2 + 129);
  if (v10)
  {
    *((void *)v2 + 130) = v10;
    operator delete(v10);
  }
  long long v11 = (void *)*((void *)v2 + 124);
  if (v11)
  {
    *((void *)v2 + 125) = v11;
    operator delete(v11);
  }
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  long long v12 = (void *)*((void *)v2 + 116);
  if (v12)
  {
    *((void *)v2 + 117) = v12;
    operator delete(v12);
  }
  uint64_t v13 = (void *)*((void *)v2 + 111);
  if (v13)
  {
    *((void *)v2 + 112) = v13;
    operator delete(v13);
  }
  int16x8_t v14 = (void *)*((void *)v2 + 106);
  if (v14)
  {
    *((void *)v2 + 107) = v14;
    operator delete(v14);
  }
  uint64_t v15 = (void *)*((void *)v2 + 103);
  if (v15)
  {
    *((void *)v2 + 104) = v15;
    operator delete(v15);
  }
  __int32 v16 = (void *)*((void *)v2 + 100);
  if (v16)
  {
    *((void *)v2 + 101) = v16;
    operator delete(v16);
  }
  uint64_t v17 = (void *)*((void *)v2 + 95);
  if (v17)
  {
    *((void *)v2 + 96) = v17;
    operator delete(v17);
  }
  int v18 = *v4;
  if (*v4)
  {
    *((void *)v2 + 93) = v18;
    operator delete(v18);
  }
  uint64_t v19 = (void *)*((void *)v2 + 88);
  if (v19)
  {
    *((void *)v2 + 89) = v19;
    operator delete(v19);
  }
  uint64_t v20 = (void *)*((void *)v2 + 83);
  if (v20)
  {
    *((void *)v2 + 84) = v20;
    operator delete(v20);
  }
  uint64_t v21 = (void *)*((void *)v2 + 78);
  if (v21)
  {
    *((void *)v2 + 79) = v21;
    operator delete(v21);
  }
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  uint64_t v22 = (void *)*((void *)v2 + 70);
  if (v22)
  {
    *((void *)v2 + 71) = v22;
    operator delete(v22);
  }
  uint64_t v23 = *((void *)v2 + 67);
  *((void *)v2 + 67) = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  std::unique_ptr<ParametricProcessor>::reset[abi:ne180100](v3, 0);
  ausdk::AUBase::~AUBase(v2);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessLookup,AUVolume>::Factory()
{
  uint64_t result = malloc_type_malloc(0x2A0uLL, 0xB0CA1167uLL);
  *uint64_t result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUVolume>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUVolume>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUVolume>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

ausdk::AUBase *ausdk::APFactory<ausdk::AUBaseProcessLookup,AUVolume>::Construct(ausdk::AUBase *a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = ausdk::AUBase::AUBase(a1, a2, 1, 1);
  *((_WORD *)v3 + 276) = 0;
  *((void *)v3 + 68) = 0;
  *((_OWORD *)v3 + 33) = 0u;
  *((unsigned char *)v3 + 554) = 1;
  *((_DWORD *)v3 + 139) = 0;
  *((unsigned char *)v3 + 560) = 0;
  *(void *)((char *)v3 + 588) = 0;
  *(_OWORD *)((char *)v3 + 568) = 0u;
  *((unsigned char *)v3 + 584) = 0;
  *(void *)uint64_t v3 = &unk_1F14BD420;
  *((void *)v3 + 75) = 0;
  uint64_t v4 = (ausdk::AUBase *)((char *)v3 + 32);
  *(_DWORD *)((char *)v3 + 595) = 0;
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUBase *)((char *)v3 + 32), 0);
  ausdk::AUElement::SetParameter(Element, 0x7063676Eu, 0.0, 0);
  CFTypeRef v6 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v6, 0x5F737776u, 0.0, 0);
  uint64_t v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v7, 0x766F6C74u, 0.05, 0);
  long long v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v8, 0x6365696Cu, 0.0, 0);
  long long v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v9, 0x636C6970u, 0.0, 0);
  uint64_t v10 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v10, 0x6D6F6465u, 1.0, 0);
  long long v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v11, 0x766F6C76u, 0.05, 0);
  return a1;
}

void sub_1BB42C3CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  *(void *)float v2 = &unk_1F14C8258;
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  ausdk::AUBase::~AUBase(v2);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessLookup,AUSoftClip>::Factory()
{
  uint64_t result = malloc_type_malloc(0x298uLL, 0xB0CA1167uLL);
  *uint64_t result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUSoftClip>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUSoftClip>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUSoftClip>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUSoftClip>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *((_WORD *)v3 + 276) = 0;
  *((void *)v3 + 68) = 0;
  *((_OWORD *)v3 + 33) = 0u;
  *((unsigned char *)v3 + 554) = 1;
  *((_DWORD *)v3 + 139) = 0;
  *((unsigned char *)v3 + 560) = 0;
  *(void *)((char *)v3 + 588) = 0;
  *(_OWORD *)((char *)v3 + 568) = 0u;
  *(void *)uint64_t v3 = &unk_1F14B8C60;
  *((unsigned char *)v3 + 584) = 1;
  uint64_t v4 = (ausdk::AUBase *)((char *)v3 + 32);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUBase *)((char *)v3 + 32), 0);
  ausdk::AUElement::SetParameter(Element, 0x736F6674u, 0.0, 0);
  CFTypeRef v6 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v6, 0x68617264u, 0.0, 0);
  ausdk::AUBase::CreateElements(a1);
  uint64_t v10 = 0x40E5888000000000;
  long long v11 = xmmword_1BB87A750;
  long long v12 = xmmword_1BB87A760;
  uint64_t v7 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 56))(v7, &v10);
  uint64_t v8 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v8 + 56))(v8, &v10);
  return a1;
}

void sub_1BB42C600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  *uint64_t v10 = &unk_1F14C8258;
  a10 = v10 + 66;
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__destroy_vector::operator()[abi:ne180100](&a10);
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v10);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessLookup,AUBoostClip>::Factory()
{
  uint64_t result = malloc_type_malloc(0x298uLL, 0xB0CA1167uLL);
  *uint64_t result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUBoostClip>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUBoostClip>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUBoostClip>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

ausdk::AUBase *ausdk::APFactory<ausdk::AUBaseProcessLookup,AUBoostClip>::Construct(ausdk::AUBase *a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = ausdk::AUBase::AUBase(a1, a2, 1, 1);
  *((_WORD *)v3 + 276) = 0;
  *((void *)v3 + 68) = 0;
  *((_OWORD *)v3 + 33) = 0u;
  *((unsigned char *)v3 + 554) = 1;
  *((_DWORD *)v3 + 139) = 0;
  *((unsigned char *)v3 + 560) = 0;
  *((_DWORD *)v3 + 147) = 0;
  *(_OWORD *)((char *)v3 + 568) = 0u;
  *(void *)uint64_t v3 = &unk_1F14BEE70;
  *((void *)v3 + 74) = 0;
  uint64_t v4 = (ausdk::AUBase *)((char *)v3 + 32);
  *((unsigned char *)v3 + 584) = 1;
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUBase *)((char *)v3 + 32), 0);
  ausdk::AUElement::SetParameter(Element, 0x626F6F66u, 0.2, 0);
  CFTypeRef v6 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v6, 0x63757466u, 0.0, 0);
  uint64_t v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v7, 0x7063676Eu, 0.0, 0);
  uint64_t v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v8, 0x5F737776u, 0.0, 0);
  long long v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v9, 0x6D617867u, 12.0, 0);
  uint64_t v10 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v10, 0x766F6C74u, 0.05, 0);
  long long v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v11, 0x6E61746Bu, 0.05, 0);
  long long v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v12, 0x6E72656Cu, 0.05, 0);
  uint64_t v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v13, 0x61746B74u, 0.5, 0);
  int16x8_t v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v14, 0x72656C74u, 0.5, 0);
  uint64_t v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v15, 0x6365696Cu, 0.0, 0);
  __int32 v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v16, 0x636C6970u, 0.0, 0);
  uint64_t v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v17, 0x74687273u, 0.0, 0);
  int v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v18, 0x6E6F6973u, -100.0, 0);
  uint64_t v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v19, 0x6D6F6465u, 0.0, 0);
  uint64_t v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  ausdk::AUElement::SetParameter(v20, 0x7363656Eu, 1.0, 0);
  return a1;
}

void sub_1BB42C990(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  *(void *)float v2 = &unk_1F14C8258;
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  ausdk::AUBase::~AUBase(v2);
  _Unwind_Resume(a1);
}

AudioComponent RegisterInternalAudioUnits_iOS(UInt32 a1)
{
  qmemcpy(&inDesc, "xfuadqbplppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUBiquad", 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUBiquad>::Factory);
  qmemcpy(&inDesc, "xfuadvpelppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUEndpointVAD", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEndpointVAD>::Factory);
  qmemcpy(&inDesc, "xfua2vpelppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUEndpointVAD2", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEndpointVAD2>::Factory);
  qmemcpy(&inDesc, "xfua3vpelppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUEndpointVAD3", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEndpointVAD3>::Factory);
  qmemcpy(&inDesc, "xfuailcblppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUBoostClip", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUBoostClip>::Factory);
  qmemcpy(&inDesc, "xfualcfslppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUSoftClip", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUSoftClip>::Factory);
  qmemcpy(&inDesc, "xfuailovlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUVolume", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUVolume>::Factory);
  qmemcpy(&inDesc, "xfuapmpslppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUSpatialMap", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUSpatialMap>::Factory);
  qmemcpy(&inDesc, "xfua2ppslppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUSpeakerProtectionV2", 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpeakerProtectionV2>::Factory);
  qmemcpy(&inDesc, "xfua3ppslppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUSpeakerProtectionV3", 0x10001u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpeakerProtectionV3>::Factory);
  qmemcpy(&inDesc, "xfua2meblppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUBeam2", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUBeam2>::Factory);
  qmemcpy(&inDesc, "xfuan2mblppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUBeam2N", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUBeam2>::Factory);
  qmemcpy(&inDesc, "xfuafnmblppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUBeamNF", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUBeamNF>::Factory);
  qmemcpy(&inDesc, "xfuasfnblppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUBeamNFSelector", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUBeamNFSelector>::Factory);
  qmemcpy(&inDesc, "xfuatwsmlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUMixSwitch", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMixSwitch>::Factory);
  qmemcpy(&inDesc, "xfuafnsmlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUMixSwitchNF", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMixSwitchNF>::Factory);
  qmemcpy(&inDesc, "xfuafriflppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUFIRFilter", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUFIRFilter>::Factory);
  qmemcpy(&inDesc, "xfuaverdlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUDereverb", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDereverb>::Factory);
  qmemcpy(&inDesc, "xfuasondlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUDenoise", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDenoise>::Factory);
  qmemcpy(&inDesc, "xfuasrnnlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUNeuralNetRES", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNeuralNetRES>::Factory);
  qmemcpy(&inDesc, "xfuapsnnlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUNeuralNetSPP", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNeuralNetSPP>::Factory);
  qmemcpy(&inDesc, "xfuatennlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUNeuralNet", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNeuralNet>::Factory);
  qmemcpy(&inDesc, "xfuaavnnlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUNeuralNetVAD", 0x10601u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNeuralNetVAD>::Factory);
  qmemcpy(&inDesc, "xfuassualppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUSeparate", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSeparate>::Factory);
  qmemcpy(&inDesc, "xfuaorpslppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUSpatialProbability", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpatialProbability>::Factory);
  qmemcpy(&inDesc, "xfuantsdlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUDistance", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDistance>::Factory);
  qmemcpy(&inDesc, "xfuadfmblppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUBeamItFD", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUBeamIt>::Factory);
  qmemcpy(&inDesc, "xfuadtmblppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUBeamItTD", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUBeamIt>::Factory);
  qmemcpy(&inDesc, "xfuasnfnlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUNFNSwitch", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNFNSwitch>::Factory);
  qmemcpy(&inDesc, "xfuakdnwlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUWindKill", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUWindKill>::Factory);
  qmemcpy(&inDesc, "xfuacatflppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUFTSpatialAC", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUFTSpatialAC>::Factory);
  qmemcpy(&inDesc, "xfuannillppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AULoudnessInNoise", 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULoudnessInNoise>::Factory);
  qmemcpy(&inDesc, "xfuapusllppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AULevelDrivenSuppressor", 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULevelDrivenSuppressor>::Factory);
  qmemcpy(&inDesc, "xfuangnclppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUCNG", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUCNG>::Factory);
  qmemcpy(&inDesc, "xauauvxalppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUAuxVPUplink", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<AUAuxVPLookup,AUAuxVPUplink>::Factory);
  qmemcpy(&inDesc, "xauadvxalppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUAuxVPDownlink", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<AUAuxVPLookup,AUAuxVPDownlink>::Factory);
  qmemcpy(&inDesc, "xfua1mpclppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUCPMSVolumeV1", 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUCPMSVolumeV1>::Factory);
  qmemcpy(&inDesc, "xfua2cgalppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUAGCV2", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUAGCV2>::Factory);
  qmemcpy(&inDesc, "xfua3cellppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AULinearEchoCancelerV3", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULinearEchoCancelerV3>::Factory);
  qmemcpy(&inDesc, "xfuacecmlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUMultiChanEchoCanceler", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMultiChanEchoCanceler>::Factory);
  qmemcpy(&inDesc, "xfua5cellppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUEchoCancelerV5", 0x10601u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEchoCancelerV5>::Factory);
  qmemcpy(&inDesc, "xfuaomcelppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUECMIMO", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUECMIMO>::Factory);
  qmemcpy(&inDesc, "xfuaoscelppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUECSUMO", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUECSUMO>::Factory);
  qmemcpy(&inDesc, "xfuasgcelppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUECRMGS", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUECRMGS>::Factory);
  qmemcpy(&inDesc, "xfuamrcelppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUECRMDF", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUECRMDF>::Factory);
  qmemcpy(&inDesc, "xfuarmcelppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUECMicRef", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUECMicRef>::Factory);
  qmemcpy(&inDesc, "xfuaeyttlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUTTYEchoSuppressor", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUTTYEchoSuppressor>::Factory);
  qmemcpy(&inDesc, "xfuacemslppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUSubBandMultEchoCanceler", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSubBandMultEchoCanceler>::Factory);
  qmemcpy(&inDesc, "xfuasncolppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUOneChannelNS", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUOneChannelNS>::Factory);
  qmemcpy(&inDesc, "xfua4snolppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUOneChannelNSV4", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUOneChannelNSV4>::Factory);
  qmemcpy(&inDesc, "xfuaencolppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUOneChannelNoiseEstimator", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUOneChannelNoiseEstimator>::Factory);
  qmemcpy(&inDesc, "xfuaelpslppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUSpeechLevelEstimator", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpeechLevelEstimator>::Factory);
  qmemcpy(&inDesc, "xfua3serlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUResidualEchoSuppressorV3", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUResidualEchoSuppressorV3>::Factory);
  qmemcpy(&inDesc, "xfua4serlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUResidualEchoSuppressorV4", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUResidualEchoSuppressorV4>::Factory);
  qmemcpy(&inDesc, "xfua5serlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUResidualEchoSuppressorV5", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUResidualEchoSuppressorV5>::Factory);
  qmemcpy(&inDesc, "xfua3tgelppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUEchoGateV3", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEchoGateV3>::Factory);
  qmemcpy(&inDesc, "xfua2clvlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUVolumeCompressorV2", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUVolumeCompressorV2>::Factory);
  qmemcpy(&inDesc, "xfuaseedlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUDeesser", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUDeesser>::Factory);
  qmemcpy(&inDesc, "xfua2lsmlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUMicSelectorV2", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMicSelectorV2>::Factory);
  qmemcpy(&inDesc, "xfuasndmlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUMagnitudeDifferenceNoiseSuppressor", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMagnitudeDifferenceNoiseSuppressor>::Factory);
  qmemcpy(&inDesc, "xfua4snmlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUMagnitudeDifferenceNoiseSuppressorV4", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMagnitudeDifferenceNoiseSuppressorV4>::Factory);
  qmemcpy(&inDesc, "xfua1ssblppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUBSS1", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUBSS1>::Factory);
  qmemcpy(&inDesc, "xfua2ssblppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUBSS2", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUBSS2>::Factory);
  qmemcpy(&inDesc, "xfuaqenhlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUHandsetNoiseEQ", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUHandsetNoiseEQ>::Factory);
  qmemcpy(&inDesc, "xfualesnlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUNoiseSelector", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNoiseSelector>::Factory);
  qmemcpy(&inDesc, "xfuabvrdlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUReverbSuppressor", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUReverbSuppressor>::Factory);
  qmemcpy(&inDesc, "xfua2pdmlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUMultiBandDynamicsProcessorV2", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMultiBandDynamicsProcessorV2>::Factory);
  qmemcpy(&inDesc, "xfuakdydlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUDynamicDucker", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDynamicDucker>::Factory);
  qmemcpy(&inDesc, "xfua2vddlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUDynamicDuckerV2", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDynamicDuckerV2>::Factory);
  qmemcpy(&inDesc, "xfuadmnalppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUAnomalyDetection", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUAnomalyDetection>::Factory);
  qmemcpy(&inDesc, "xfua2qrvlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUVariableEQV2", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUVariableEQV2>::Factory);
  qmemcpy(&inDesc, "xfuaqebmlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUMNBandEQ", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUMNBandEQ>::Factory);
  qmemcpy(&inDesc, "xfuaxmsrlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUReferenceSignalMixer", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUReferenceSignalMixer>::Factory);
  qmemcpy(&inDesc, "xfuahsorlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AURotationShading", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AURotationShading>::Factory);
  qmemcpy(&inDesc, "xfuagulplppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUEarPlug", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUEarPlug>::Factory);
  qmemcpy(&inDesc, "xfuabccdlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUDCBlocker", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUDCBlocker>::Factory);
  qmemcpy(&inDesc, "xfuarikllppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUTweakaLeakIR", 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUTweakaLeakIR>::Factory);
  qmemcpy(&inDesc, "xfuarcedlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUDecorrelator", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDecorrelator>::Factory);
  qmemcpy(&inDesc, "xfuagpsdlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUDSPGraph", 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDSPGraph>::Factory);
  qmemcpy(&inDesc, "xfuarhcplppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUMatrixPatcher", 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMatrixPatcher>::Factory);
  qmemcpy(&inDesc, "xfuaeriflppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUFIREngine", 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUFIREngine>::Factory);
  qmemcpy(&inDesc, "xfuatraclppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUCarter", 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUCarter>::Factory);
  qmemcpy(&inDesc, "xfuadnallppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AULando", 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULando>::Factory);
  qmemcpy(&inDesc, "xfuaytcslppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUScotty", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUScotty>::Factory);
  qmemcpy(&inDesc, "xfuaacrclppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUCircArray", 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUCircArray>::Factory);
  qmemcpy(&inDesc, "xfuaduollppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AULoudnessWarrior", 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AULoudnessWarrior>::Factory);
  qmemcpy(&inDesc, "xfuappahlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUHapticsProtection", 0x20000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUHapticsProtection>::Factory);
  qmemcpy(&inDesc, "xfuangxflppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUFixedGain", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUFixedGain>::Factory);
  qmemcpy(&inDesc, "xfuayldclppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUChannelSpecificDelay", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUChannelSpecificDelay>::Factory);
  qmemcpy(&inDesc, "xfuapcpslppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUSpatialCapture", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpatialCapture>::Factory);
  qmemcpy(&inDesc, "xfuazaohlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUHOAZoom", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUHOAZoom>::Factory);
  qmemcpy(&inDesc, "xfuasneslppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUMicSense", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMicSense>::Factory);
  qmemcpy(&inDesc, "xfuacgamlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUMultiChannelAGC", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUMultiChannelAGC>::Factory);
  qmemcpy(&inDesc, "xfualslclppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUChannelSelector", 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUChannelSelector>::Factory);
  qmemcpy(&inDesc, "xfuaisimlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUMidSide", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUMidSide>::Factory);
  qmemcpy(&inDesc, "xfuanepslppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUSpeechEnhancer", 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpeechEnhancer>::Factory);
  qmemcpy(&inDesc, "xfuaraehlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUHearingLossCompensator", 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUHearingLossCompensator>::Factory);
  qmemcpy(&inDesc, "xfuaobwllppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AULimitWindBoost", 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULimitWindBoost>::Factory);
  qmemcpy(&inDesc, "xfuatdlclppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUClipDetector", 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUClipDetector>::Factory);
  qmemcpy(&inDesc, "xfuatcxelppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUExpanseController", 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUExpanseController>::Factory);
  qmemcpy(&inDesc, "xfuamcislppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUSignalCombiner", 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSignalCombiner>::Factory);
  qmemcpy(&inDesc, "xfuadsimlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUMicIssueDetector", 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMicIssueDetector>::Factory);
  qmemcpy(&inDesc, "xfuakrfclppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUControlFreak", 0x40301u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUControlFreak>::Factory);
  qmemcpy(&inDesc, "xfuakzublppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUBuzzKill", 0x20700u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUBuzzKill>::Factory);
  qmemcpy(&inDesc, "xfuanebvlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUVirtualBass", 0x10502u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUVirtualBass>::Factory);
  qmemcpy(&inDesc, "xfuagnkblppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUBassKoenig", 0x30300u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,BassKoenig>::Factory);
  qmemcpy(&inDesc, "xfuanqsblppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUBassQueen", 0x1080000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUBassQueen>::Factory);
  qmemcpy(&inDesc, "xfuawolflppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AULowFlow", 0x30500u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AULowFlow>::Factory);
  qmemcpy(&inDesc, "xfuaktsmlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUMeisterStueck", 0x20100u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUMeisterStueck>::Factory);
  qmemcpy(&inDesc, "xfuatsmtlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUToneMeister", 0x60400u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUToneMeister>::Factory);
  qmemcpy(&inDesc, "xfuatmdllppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AULoudnessMeter", 0x20000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AULoudnessMeter>::Factory);
  qmemcpy(&inDesc, "xfuaszomlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUMozartCompressorSingleBand", 0x20304u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUMozartCompressorSingleBand>::Factory);
  qmemcpy(&inDesc, "xfuamnlllppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AULittleLateNightMode", 0, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AULittleLateNightMode>::Factory);
  qmemcpy(&inDesc, "xfuagppalppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUPeakPowerGuard", 0x10403u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUPeakPowerGuard>::Factory);
  qmemcpy(&inDesc, "xfuapstalppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUThermalSpeakerProtection", 0x20301u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUThermalSpeakerProtection>::Factory);
  qmemcpy(&inDesc, "xfuactxalppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUXTC", 0x30502u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUXTC>::Factory);
  qmemcpy(&inDesc, "xfuamndllppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AULoudnessNormalizer", 0x3040000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessAndMultipleLookup,AULoudnessNormalizer>::Factory);
  qmemcpy(&inDesc, "xfuagmsllppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AULoudspeakerManager", 1u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULoudspeakerManager>::Factory);
  qmemcpy(&inDesc, "xfua2msllppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AULoudspeakerManagerV2", 3u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULoudspeakerManagerV2>::Factory);
  qmemcpy(&inDesc, "xfuadisllppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AULoudspeakerSystemIDV2", 0x2000000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AULoudspeakerSystemIDV2>::Factory);
  qmemcpy(&inDesc, "xfuatlovlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUVolumeTaper", 0x101000Au, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUVolumeTaper>::Factory);
  qmemcpy(&inDesc, "xfuavelalppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUAmbienceLeveler", 0x2030000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUAmbienceLeveler>::Factory);
  qmemcpy(&inDesc, "xfuapcgmlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUMixGainCompensation", 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUMixGainCompensation>::Factory);
  qmemcpy(&inDesc, "xfualesnlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUNoiseSelector", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNoiseSelector>::Factory);
  qmemcpy(&inDesc, "xfuaqenhlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUHandsetNoiseEQ", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUHandsetNoiseEQ>::Factory);
  qmemcpy(&inDesc, "xfuaalislppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUSilenceNonFiniteAnalyzer", 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUSilenceNonFiniteAnalyzer>::Factory);
  qmemcpy(&inDesc, "xfuaoccelppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUEcConvergenceOversight", 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEcConvergenceOversight>::Factory);
  qmemcpy(&inDesc, "xfuannillppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AULoudnessInNoise", 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULoudnessInNoise>::Factory);
  qmemcpy(&inDesc, "xfuapusllppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AULevelDrivenSuppressor", 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULevelDrivenSuppressor>::Factory);
  qmemcpy(&inDesc, "xfuahmcelppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUECMIMOHelper", 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUECMIMOHelper>::Factory);
  qmemcpy(&inDesc, "xfuamlpslppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUSPLMeter", 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUSPLMeter>::Factory);
  qmemcpy(&inDesc, "xfuarocxlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&inDesc, @"Apple: AUCrossCorrelator", 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUCrossCorrelator>::Factory);
  qmemcpy(&inDesc, "xfuaksmalppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMasunsigned int k = 0;
  return AudioComponentRegister(&inDesc, @"Apple: AUADAMSink", 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUADAMSink>::Factory);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEndpointVAD3>::Factory()
{
  uint64_t result = malloc_type_malloc(0x2A0uLL, 0xB0CA1167uLL);
  *uint64_t result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEndpointVAD3>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEndpointVAD3>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEndpointVAD3>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEndpointVAD3>::Construct(ausdk::AUBase *a1, OpaqueAudioComponentInstance *a2)
{
  float v2 = ausdk::AUBase::AUBase(a1, a2, 1, 1);
  *(void *)float v2 = &unk_1F14BF820;
  *((void *)v2 + 66) = &unk_1F14BFA90;
  *((unsigned char *)v2 + 536) = 0;
  operator new();
}

void sub_1BB42ECE0(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *((void *)v1 + 71) = v4;
    operator delete(v4);
  }
  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEndpointVAD2>::Factory()
{
  uint64_t result = malloc_type_malloc(0x2C8uLL, 0xB0CA1167uLL);
  *uint64_t result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEndpointVAD2>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEndpointVAD2>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEndpointVAD2>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEndpointVAD2>::Construct(ausdk::AUBase *a1, OpaqueAudioComponentInstance *a2)
{
  float v2 = ausdk::AUBase::AUBase(a1, a2, 1, 1);
  *(void *)float v2 = &unk_1F14B84D8;
  *((void *)v2 + 66) = &unk_1F14B8748;
  *((unsigned char *)v2 + 536) = 0;
  operator new();
}

void sub_1BB42F1FC(_Unwind_Exception *a1)
{
  uint64_t v3 = (void *)*((void *)v1 + 75);
  if (v3)
  {
    *((void *)v1 + 76) = v3;
    operator delete(v3);
  }
  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEndpointVAD>::Factory()
{
  uint64_t result = malloc_type_malloc(0x2B0uLL, 0xB0CA1167uLL);
  *uint64_t result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEndpointVAD>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEndpointVAD>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEndpointVAD>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEndpointVAD>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *(void *)uint64_t v3 = &unk_1F14B5240;
  *((_OWORD *)v3 + 33) = 0u;
  *((_OWORD *)v3 + 34) = 0u;
  *((void *)v3 + 70) = 0;
  *(_OWORD *)((char *)v3 + 568) = xmmword_1BB87A780;
  *((_DWORD *)v3 + 146) = 0;
  *((void *)v3 + 74) = 0;
  *((_DWORD *)v3 + 150) = 0;
  *((void *)v3 + 76) = 0;
  *((_DWORD *)v3 + 154) = 0;
  *((unsigned char *)v3 + 620) = 0;
  ausdk::AUBase::CreateElements((uint64_t)v3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 512))(a1, 1024);
  uint64_t Element = ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)Element + 40))(Element, 4);
  uint64_t v8 = 0x40CF400000000000;
  long long v9 = xmmword_1BB8727B0;
  long long v10 = xmmword_1BB8727C0;
  uint64_t v5 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v5 + 56))(v5, &v8);
  uint64_t v6 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 56))(v6, &v8);
  return a1;
}

void sub_1BB42F480(_Unwind_Exception *a1)
{
  std::unique_ptr<EndpointVADSegmentHeuristics>::reset[abi:ne180100](v1 + 67, 0);
  std::unique_ptr<EndpointVAD>::reset[abi:ne180100](v1 + 66, 0);
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v1);
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessLookup,AUBiquad>::Factory()
{
  uint64_t result = malloc_type_malloc(0x2E0uLL, 0xB0CA1167uLL);
  *uint64_t result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUBiquad>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUBiquad>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUBiquad>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

unsigned char *ausdk::APFactory<ausdk::AUBaseProcessLookup,AUBiquad>::Construct(unsigned char *a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *((_WORD *)v3 + 276) = 0;
  *((void *)v3 + 68) = 0;
  *((_OWORD *)v3 + 33) = 0u;
  *((unsigned char *)v3 + 554) = 1;
  *((_DWORD *)v3 + 139) = 0;
  *((unsigned char *)v3 + 560) = 0;
  *((_DWORD *)v3 + 147) = 0;
  *(_OWORD *)((char *)v3 + 568) = 0u;
  *((unsigned char *)v3 + 584) = 0;
  *(void *)uint64_t v3 = &unk_1F14B4D68;
  *((_DWORD *)v3 + 150) = 0x1000000;
  *((void *)v3 + 74) = 0;
  *(_OWORD *)((char *)v3 + 604) = 0u;
  *(_OWORD *)((char *)v3 + 620) = 0u;
  *(void *)((char *)v3 + 636) = 0;
  *((_DWORD *)v3 + 162) = 0;
  *((void *)v3 + 82) = 0;
  *((unsigned char *)v3 + 664) = 1;
  ausdk::AUBase::CreateElements((uint64_t)v3);
  a1[553] = 1;
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(Element, 0x62717470u, 2.0, 0);
  uint64_t v5 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v5, 0x66726571u, 1000.0, 0);
  uint64_t v6 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v6, 0x6761696Eu, 0.0, 0);
  uint64_t v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  ausdk::AUElement::SetParameter(v7, 0x62647774u, 1.0, 0);
  return a1;
}

void sub_1BB42F698(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  *(void *)float v2 = &unk_1F14C8258;
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  ausdk::AUBase::~AUBase(v2);
  _Unwind_Resume(a1);
}

AudioComponent RegisterPublicAudioUnits()
{
  *(_OWORD *)&v1.componentType = xmmword_1BB87A790;
  v1.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&v1, @"Apple: AUSpatialMixer", 0x10608u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpatialMixerV2>::Factory);
  *(_OWORD *)&v1.componentType = xmmword_1BB87A7A0;
  v1.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&v1, @"Apple: AUSoundIsolation", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSoundIsolation>::Factory);
  *(_OWORD *)&v1.componentType = xmmword_1BB87A7B0;
  v1.componentFlagsMasunsigned int k = 0;
  return AudioComponentRegister(&v1, @"Apple: AULoudnessNormalizer", 0x3040000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULoudnessNormalizer>::Factory);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULoudnessNormalizer>::Factory()
{
  uint64_t result = malloc_type_malloc(0x8B8uLL, 0xB0CA1167uLL);
  *uint64_t result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULoudnessNormalizer>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULoudnessNormalizer>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULoudnessNormalizer>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSoundIsolation>::Factory()
{
  uint64_t result = malloc_type_malloc(0x338uLL, 0xB0CA1167uLL);
  *uint64_t result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSoundIsolation>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSoundIsolation>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSoundIsolation>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSoundIsolation>::Construct(ausdk::AUBase *a1, OpaqueAudioComponentInstance *a2)
{
  float v2 = a1;
  v47[4] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = ausdk::AUBase::AUBase(a1, a2, 1, 1);
  *(void *)uint64_t v3 = &unk_1F14B47B8;
  *((_WORD *)v3 + 264) = 0;
  *(void *)((char *)v3 + 532) = 0x100000001;
  *(void *)((char *)v3 + 540) = 0x42C8000000000000;
  *(_OWORD *)((char *)v3 + 548) = 0u;
  uint64_t v4 = _get_cpu_capabilities() & 0x78000000;
  if (!v4)
  {
    if (getAUSoundIsolationLog(void)::onceToken != -1) {
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_48);
    }
    uint64_t v5 = getAUSoundIsolationLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioChannelLayout buf = 136315394;
      *(void *)&uint8_t buf[4] = "AUSoundIsolation.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 65;
      _os_log_debug_impl(&dword_1BB0CE000, v5, OS_LOG_TYPE_DEBUG, "%s:%i non-AMX iOS device: HQ model not supported", buf, 0x12u);
    }
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  *((unsigned char *)v2 + 564) = v4 != 0;
  *((_DWORD *)v2 + 146) = 0;
  *((unsigned char *)v2 + 580) = 0;
  *(void *)((char *)v2 + 572) = 0;
  *((void *)v2 + 74) = 1;
  *((void *)v2 + 84) = 0;
  *((void *)v2 + 83) = 0;
  *(_OWORD *)((char *)v2 + 600) = 0u;
  *(_OWORD *)((char *)v2 + 616) = 0u;
  *(_OWORD *)((char *)v2 + 632) = 0u;
  *(_OWORD *)((char *)v2 + 644) = 0u;
  *(_DWORD *)AudioChannelLayout buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  *(_DWORD *)&buf[16] = 1;
  *(void *)&v41[1] = 0;
  void v41[3] = 2;
  uint64_t v42 = 0;
  int v43 = 3;
  uint64_t v44 = 0;
  int v45 = 4;
  uint64_t v46 = 0;
  uint64_t v8 = (uint64_t **)((char *)v2 + 688);
  *((void *)v2 + 87) = 0;
  *((void *)v2 + 86) = 0;
  long long v9 = (uint64_t **)((char *)v2 + 688);
  for (*((void *)v2 + 85) = (char *)v2 + 688; ; long long v9 = (uint64_t **)*((void *)v2 + 85))
  {
    long long v10 = (int *)&buf[16 * v7];
    long long v11 = (char *)v2 + 688;
    if (v9 == v8) {
      goto LABEL_13;
    }
    long long v12 = v6;
    uint64_t v13 = (char *)v2 + 688;
    if (v6)
    {
      do
      {
        long long v11 = (char *)v12;
        long long v12 = (uint64_t *)v12[1];
      }
      while (v12);
    }
    else
    {
      do
      {
        long long v11 = (char *)*((void *)v13 + 2);
        BOOL v14 = *(void *)v11 == (void)v13;
        uint64_t v13 = v11;
      }
      while (v14);
    }
    int v15 = *v10;
    if (*((_DWORD *)v11 + 8) < *v10)
    {
LABEL_13:
      __int32 v16 = v6 ? (uint64_t **)v11 : (uint64_t **)((char *)v2 + 688);
      uint64_t v17 = v6 ? (uint64_t **)(v11 + 8) : (uint64_t **)((char *)v2 + 688);
    }
    else
    {
      __int32 v16 = (uint64_t **)((char *)v2 + 688);
      uint64_t v17 = (uint64_t **)((char *)v2 + 688);
      if (v6)
      {
        uint64_t v17 = (uint64_t **)((char *)v2 + 688);
        while (1)
        {
          while (1)
          {
            __int32 v16 = (uint64_t **)v6;
            int v21 = *((_DWORD *)v6 + 8);
            if (v15 >= v21) {
              break;
            }
            uint64_t v6 = *v16;
            uint64_t v17 = v16;
            if (!*v16) {
              goto LABEL_20;
            }
          }
          if (v21 >= v15) {
            break;
          }
          uint64_t v17 = v16 + 1;
          uint64_t v6 = v16[1];
          if (!v6) {
            goto LABEL_20;
          }
        }
      }
    }
    if (!*v17)
    {
LABEL_20:
      int v18 = operator new(0x30uLL);
      *(void *)&long long v38 = (char *)v2 + 688;
      v18[8] = *v10;
      uint64_t v19 = &buf[16 * v7];
      uint64_t v20 = *((void *)v19 + 1);
      if (v20) {
        CFRetain(*((CFTypeRef *)v19 + 1));
      }
      *((void *)v18 + 5) = v20;
      BYTE8(v38) = 1;
      std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at((uint64_t **)v2 + 85, (uint64_t)v16, v17, (uint64_t *)v18);
      uint64_t v37 = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,void *>>>>::reset[abi:ne180100]((uint64_t)&v37);
    }
    if (++v7 == 5) {
      break;
    }
    uint64_t v6 = *v8;
  }
  for (uint64_t i = 72; i != -8; i -= 16)
  {
    uint64_t v23 = *(void **)&buf[i];
    if (v23) {
      CFRelease(v23);
    }
  }
  *((unsigned char *)v2 + 704) = 0;
  *((unsigned char *)v2 + 712) = 0;
  *((_OWORD *)v2 + 45) = 0u;
  *((_OWORD *)v2 + 46) = 0u;
  *((unsigned char *)v2 + 752) = 0;
  if (DSPGraph::ABIVersion((DSPGraph *)v23) == 4)
  {
    if (getAUSoundIsolationLog(void)::onceToken == -1) {
      goto LABEL_39;
    }
  }
  else
  {
    if (DSPGraph::getLog(void)::onceToken != -1) {
      dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_13603);
    }
    float v2 = (ausdk::AUBase *)(id)DSPGraph::getLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)v2, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)AudioChannelLayout buf = 0;
      _os_log_fault_impl(&dword_1BB0CE000, (os_log_t)v2, OS_LOG_TYPE_FAULT, "DSPGraph assertion failure: DSPGraph ABI runtime/compile-time mismatch", buf, 2u);
    }

    qword_1E9F7DD28 = (uint64_t)buf;
    __break(1u);
  }
  dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_48);
LABEL_39:
  uint64_t v24 = getAUSoundIsolationLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioChannelLayout buf = 136315394;
    *(void *)&uint8_t buf[4] = "AUSoundIsolation.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 247;
    _os_log_impl(&dword_1BB0CE000, v24, OS_LOG_TYPE_DEFAULT, "%s:%i will try to construct", buf, 0x12u);
  }
  ausdk::AUBase::CreateElements((uint64_t)v2);
  if (getAUSoundIsolationLog(void)::onceToken != -1) {
    dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_48);
  }
  uint64_t v25 = getAUSoundIsolationLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioChannelLayout buf = 136315394;
    *(void *)&uint8_t buf[4] = "AUSoundIsolation.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 250;
    _os_log_debug_impl(&dword_1BB0CE000, v25, OS_LOG_TYPE_DEBUG, "%s:%i set the default ioFormat", buf, 0x12u);
  }
  uint64_t v37 = 0x40E7700000000000;
  long long v38 = xmmword_1BB8727B0;
  long long v39 = xmmword_1BB8727C0;
  uint64_t Element = ausdk::AUScope::SafeGetElement((ausdk::AUBase *)((char *)v2 + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)Element + 56))(Element, &v37);
  uint64_t v27 = ausdk::AUScope::SafeGetElement((ausdk::AUBase *)((char *)v2 + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v27 + 56))(v27, &v37);
  (*(void (**)(ausdk::AUBase *, uint64_t))(*(void *)v2 + 512))(v2, 1156);
  *((_DWORD *)v2 + 144) = 1;
  *((void *)v2 + 71) = 0x42C8000000000001;
  *((unsigned char *)v2 + 580) = 0;
  *((_DWORD *)v2 + 146) = 0;
  uint64_t v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUBase *)((char *)v2 + 32), 0);
  ausdk::AUElement::SetParameter(v28, 0, 100.0, 0);
  uint64_t v29 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUBase *)((char *)v2 + 32), 0);
  ausdk::AUElement::SetParameter(v29, 1u, 1.0, 0);
  uint64_t v30 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUBase *)((char *)v2 + 32), 0);
  ausdk::AUElement::SetParameter(v30, 0x17626u, 0.0, 0);
  uint64_t v31 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUBase *)((char *)v2 + 32), 0);
  ausdk::AUElement::SetParameter(v31, 0x17627u, 0.0, 0);
  *((_DWORD *)v2 + 136) = *((_DWORD *)v2 + 143);
  uint64_t v33 = caulk::concurrent::messenger::shared_logging_priority(v32);
  std::allocate_shared[abi:ne180100]<caulk::concurrent::messenger,std::allocator<caulk::concurrent::messenger>,caulk::concurrent::messenger::thread_strategy,caulk::thread::attributes &,void>((uint64_t *)buf, 0, v33);
  uint64_t v34 = (std::__shared_weak_count *)*((void *)v2 + 91);
  *((_OWORD *)v2 + 45) = *(_OWORD *)buf;
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (getAUSoundIsolationLog(void)::onceToken != -1) {
    dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_48);
  }
  uint64_t v35 = getAUSoundIsolationLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioChannelLayout buf = 136315394;
    *(void *)&uint8_t buf[4] = "AUSoundIsolation.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1934;
    _os_log_debug_impl(&dword_1BB0CE000, v35, OS_LOG_TYPE_DEBUG, "%s:%i will create metrics reporter", buf, 0x12u);
  }
  uint64_t v36 = *((void *)v2 + 91);
  if (v36) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 8), 1uLL, memory_order_relaxed);
  }
  v47[0] = &unk_1F14B4AB8;
  v47[3] = v47;
  operator new();
}

void sub_1BB43096C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,CFTypeRef cf,char a28)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpatialMixerV2>::Factory()
{
  uint64_t result = malloc_type_malloc(0x2FD0uLL, 0xB0CA1167uLL);
  *uint64_t result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpatialMixerV2>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpatialMixerV2>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpatialMixerV2>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

AudioComponent RegisterAudioUnits_Analyzer()
{
  *(_OWORD *)&v1.componentType = xmmword_1BB87A7C0;
  v1.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&v1, @"Apple: AUSilenceNonFiniteAnalyzer", 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUSilenceNonFiniteAnalyzer>::Factory);
  *(_OWORD *)&v1.componentType = xmmword_1BB87A7D0;
  v1.componentFlagsMasunsigned int k = 0;
  AudioComponentRegister(&v1, @"Apple: AUSPLMeter", 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUSPLMeter>::Factory);
  *(_OWORD *)&v1.componentType = xmmword_1BB87A7E0;
  v1.componentFlagsMasunsigned int k = 0;
  return AudioComponentRegister(&v1, @"Apple: AUCrossCorrelator", 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUCrossCorrelator>::Factory);
}

AudioComponent RegisterAudioUnits_Internal()
{
  if (CACFPreferencesGetAppBooleanValue(@"AllAUsPublic", @"com.apple.coreaudio", 0)) {
    UInt32 v0 = 0;
  }
  else {
    UInt32 v0 = 0x8000;
  }

  return RegisterInternalAudioUnits_iOS(v0);
}

AudioComponent RegisterAudioUnits_InternalUnsearchable()
{
  if (CACFPreferencesGetAppBooleanValue(@"AllAUsPublic", @"com.apple.coreaudio", 0)) {
    UInt32 v0 = 1;
  }
  else {
    UInt32 v0 = 32769;
  }

  return RegisterInternalAudioUnits_iOS(v0);
}

AudioComponent RegisterAUVoiceIsolation_Unsearchable()
{
  v1.componentFlagsMasunsigned int k = 0;
  *(_OWORD *)&v1.componentType = *(_OWORD *)"xfuasiovlppa";
  AudioComponent result = AudioComponentFindNext(0, &v1);
  if (!result)
  {
    *(_OWORD *)&inDesc.componentType = xmmword_1BB87A7F0;
    inDesc.componentFlagsMasunsigned int k = 0;
    return AudioComponentRegister(&inDesc, @"Apple: AUSoundIsolation", 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSoundIsolation>::Factory);
  }
  return result;
}

uint64_t std::__function::__value_func<void ()(long long,applesauce::CF::DictionaryRef)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__value_func<void ()(long long,applesauce::CF::DictionaryRef)>::~__value_func[abi:ne180100](void *a1)
{
  float v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::default_delete<AU::FTSpatialAC::MetricsReporter>::operator()[abi:ne180100](uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    float v2 = *(void **)(result + 160);
    if (v2)
    {
      do
      {
        uint64_t v3 = (void *)*v2;
        operator delete(v2);
        float v2 = v3;
      }
      while (v3);
    }
    uint64_t v4 = *(void **)(v1 + 144);
    *(void *)(v1 + 144) = 0;
    if (v4) {
      operator delete(v4);
    }
    uint64_t v5 = *(void **)(v1 + 112);
    if (v5)
    {
      *(void *)(v1 + 120) = v5;
      operator delete(v5);
    }
    std::mutex::~mutex((std::mutex *)(v1 + 48));
    std::__function::__value_func<void ()(long long,applesauce::CF::DictionaryRef)>::~__value_func[abi:ne180100]((void *)(v1 + 16));
    uint64_t v6 = *(std::__shared_weak_count **)(v1 + 8);
    if (v6) {
      std::__shared_weak_count::__release_weak(v6);
    }
    JUMPOUT(0x1C185D370);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<AU::FTSpatialAC::MetricsReporter *,std::shared_ptr<AU::FTSpatialAC::MetricsReporter>::__shared_ptr_default_delete<AU::FTSpatialAC::MetricsReporter,AU::FTSpatialAC::MetricsReporter>,std::allocator<AU::FTSpatialAC::MetricsReporter>>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<AU::FTSpatialAC::MetricsReporter>::operator()[abi:ne180100](*(void *)(a1 + 24));
}

void std::__shared_ptr_pointer<AU::FTSpatialAC::MetricsReporter *,std::shared_ptr<AU::FTSpatialAC::MetricsReporter>::__shared_ptr_default_delete<AU::FTSpatialAC::MetricsReporter,AU::FTSpatialAC::MetricsReporter>,std::allocator<AU::FTSpatialAC::MetricsReporter>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

void AU::FTSpatialAC::MetricsReporter::getCAReporterIDs(AU::FTSpatialAC::MetricsReporter *this, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a2 + 48);
  std::mutex::lock((std::mutex *)(a2 + 48));
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(this, *(const void **)(a2 + 112), *(void *)(a2 + 120), (uint64_t)(*(void *)(a2 + 120) - *(void *)(a2 + 112)) >> 3);

  std::mutex::unlock(v4);
}

void sub_1BB4310B4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AU::FTSpatialAC::MetricsReporter::reportAsync(AU::FTSpatialAC::MetricsReporter::Issue const&,caulk::option_set<AU::FTSpatialAC::MetricsReporter::IssueTag,unsigned int> const&,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>> const&)::$_0,AU::FTSpatialAC::MetricsReporter::Issue const&,caulk::option_set<AU::FTSpatialAC::MetricsReporter::IssueTag,unsigned int> const&,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>> const&>::perform(uint64_t a1)
{
  float v2 = (caulk::concurrent::message *)a1;
  AU::FTSpatialAC::MetricsReporter::report(*(void *)(a1 + 24), a1 + 40, (unsigned int *)(a1 + 96), (void *)(a1 + 104));
  return caulk::concurrent::details::rt_message_call<AU::FTSpatialAC::MetricsReporter::reportAsync(AU::FTSpatialAC::MetricsReporter::Issue const&,caulk::option_set<AU::FTSpatialAC::MetricsReporter::IssueTag,unsigned int> const&,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>> const&)::$_0,AU::FTSpatialAC::MetricsReporter::Issue const&,caulk::option_set<AU::FTSpatialAC::MetricsReporter::IssueTag,unsigned int> const&,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>> const&>::rt_cleanup::~rt_cleanup(&v2);
}

void sub_1BB43110C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  caulk::concurrent::details::rt_message_call<AU::FTSpatialAC::MetricsReporter::reportAsync(AU::FTSpatialAC::MetricsReporter::Issue const&,caulk::option_set<AU::FTSpatialAC::MetricsReporter::IssueTag,unsigned int> const&,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>> const&)::$_0,AU::FTSpatialAC::MetricsReporter::Issue const&,caulk::option_set<AU::FTSpatialAC::MetricsReporter::IssueTag,unsigned int> const&,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>> const&>::rt_cleanup::~rt_cleanup((caulk::concurrent::message **)va);
  _Unwind_Resume(a1);
}

void AU::FTSpatialAC::MetricsReporter::report(uint64_t a1, uint64_t a2, unsigned int *a3, void *a4)
{
  long long v9 = (std::mutex *)(a1 + 48);
  std::mutex::lock((std::mutex *)(a1 + 48));
  unint64_t v10 = *a3;
  unint64_t v11 = *(void *)(a1 + 152);
  if (!v11) {
    goto LABEL_33;
  }
  uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    unint64_t v13 = *a3;
    if (v11 <= v10) {
      unint64_t v13 = v10 % v11;
    }
  }
  else
  {
    unint64_t v13 = (v11 - 1) & v10;
  }
  BOOL v14 = *(uint64_t ***)(*(void *)(a1 + 144) + 8 * v13);
  if (!v14 || (int v15 = *v14) == 0)
  {
LABEL_18:
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = *a3;
      if (v11 <= v10) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
    uint64_t v17 = *(uint64_t ***)(*(void *)(a1 + 144) + 8 * v4);
    if (v17)
    {
      for (uint64_t i = *v17; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v19 = i[1];
        if (v19 == v10)
        {
          if (*((_DWORD *)i + 4) == v10) {
            goto LABEL_89;
          }
        }
        else
        {
          if (v12.u32[0] > 1uLL)
          {
            if (v19 >= v11) {
              v19 %= v11;
            }
          }
          else
          {
            v19 &= v11 - 1;
          }
          if (v19 != v4) {
            break;
          }
        }
      }
    }
LABEL_33:
    uint64_t v20 = operator new(0x20uLL);
    void *v20 = 0;
    v20[1] = v10;
    *((_DWORD *)v20 + 4) = v10;
    v20[3] = *a4;
    float v21 = (float)(unint64_t)(*(void *)(a1 + 168) + 1);
    float v22 = *(float *)(a1 + 176);
    if (v11 && (float)(v22 * (float)v11) >= v21)
    {
      unint64_t v10 = v4;
      goto LABEL_79;
    }
    BOOL v23 = 1;
    if (v11 >= 3) {
      BOOL v23 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v24 = v23 | (2 * v11);
    unint64_t v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25) {
      int8x8_t prime = (int8x8_t)v25;
    }
    else {
      int8x8_t prime = (int8x8_t)v24;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v11 = *(void *)(a1 + 152);
    }
    if (*(void *)&prime <= v11)
    {
      if (*(void *)&prime >= v11) {
        goto LABEL_75;
      }
      unint64_t v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 168) / *(float *)(a1 + 176));
      if (v11 < 3 || (uint8x8_t v34 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        unint64_t v33 = std::__next_prime(v33);
      }
      else
      {
        uint64_t v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2) {
          unint64_t v33 = v35;
        }
      }
      if (*(void *)&prime <= v33) {
        int8x8_t prime = (int8x8_t)v33;
      }
      if (*(void *)&prime >= v11)
      {
        unint64_t v11 = *(void *)(a1 + 152);
        goto LABEL_75;
      }
      if (!*(void *)&prime)
      {
        uint64_t v62 = *(void **)(a1 + 144);
        *(void *)(a1 + 144) = 0;
        if (v62) {
          operator delete(v62);
        }
        unint64_t v11 = 0;
        *(void *)(a1 + 152) = 0;
        goto LABEL_75;
      }
    }
    if (*(void *)&prime >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v27 = operator new(8 * *(void *)&prime);
    uint64_t v28 = *(void **)(a1 + 144);
    *(void *)(a1 + 144) = v27;
    if (v28) {
      operator delete(v28);
    }
    uint64_t v29 = 0;
    *(int8x8_t *)(a1 + 152) = prime;
    do
      *(void *)(*(void *)(a1 + 144) + 8 * v29++) = 0;
    while (*(void *)&prime != v29);
    uint64_t v30 = *(void **)(a1 + 160);
    if (v30)
    {
      unint64_t v31 = v30[1];
      uint8x8_t v32 = (uint8x8_t)vcnt_s8(prime);
      v32.i16[0] = vaddlv_u8(v32);
      if (v32.u32[0] > 1uLL)
      {
        if (v31 >= *(void *)&prime) {
          v31 %= *(void *)&prime;
        }
      }
      else
      {
        v31 &= *(void *)&prime - 1;
      }
      *(void *)(*(void *)(a1 + 144) + 8 * v31) = a1 + 160;
      uint64_t v36 = (void *)*v30;
      if (*v30)
      {
        do
        {
          unint64_t v37 = v36[1];
          if (v32.u32[0] > 1uLL)
          {
            if (v37 >= *(void *)&prime) {
              v37 %= *(void *)&prime;
            }
          }
          else
          {
            v37 &= *(void *)&prime - 1;
          }
          if (v37 != v31)
          {
            uint64_t v38 = *(void *)(a1 + 144);
            if (!*(void *)(v38 + 8 * v37))
            {
              *(void *)(v38 + 8 * v37) = v30;
              goto LABEL_71;
            }
            void *v30 = *v36;
            *uint64_t v36 = **(void **)(*(void *)(a1 + 144) + 8 * v37);
            **(void **)(*(void *)(a1 + 144) + 8 * v37) = v36;
            uint64_t v36 = v30;
          }
          unint64_t v37 = v31;
LABEL_71:
          uint64_t v30 = v36;
          uint64_t v36 = (void *)*v36;
          unint64_t v31 = v37;
        }
        while (v36);
      }
    }
    unint64_t v11 = (unint64_t)prime;
LABEL_75:
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v11 <= v10) {
        v10 %= v11;
      }
    }
    else
    {
      unint64_t v10 = (v11 - 1) & v10;
    }
LABEL_79:
    uint64_t v39 = *(void *)(a1 + 144);
    uint64_t v40 = *(void **)(v39 + 8 * v10);
    if (v40)
    {
      void *v20 = *v40;
    }
    else
    {
      void *v20 = *(void *)(a1 + 160);
      *(void *)(a1 + 160) = v20;
      *(void *)(v39 + 8 * v10) = a1 + 160;
      if (!*v20)
      {
LABEL_88:
        ++*(void *)(a1 + 168);
        goto LABEL_89;
      }
      unint64_t v41 = *(void *)(*v20 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v41 >= v11) {
          v41 %= v11;
        }
      }
      else
      {
        v41 &= v11 - 1;
      }
      uint64_t v40 = (void *)(*(void *)(a1 + 144) + 8 * v41);
    }
    *uint64_t v40 = v20;
    goto LABEL_88;
  }
  while (1)
  {
    unint64_t v16 = v15[1];
    if (v16 == v10) {
      break;
    }
    if (v12.u32[0] > 1uLL)
    {
      if (v16 >= v11) {
        v16 %= v11;
      }
    }
    else
    {
      v16 &= v11 - 1;
    }
    if (v16 != v13) {
      goto LABEL_18;
    }
LABEL_17:
    int v15 = (uint64_t *)*v15;
    if (!v15) {
      goto LABEL_18;
    }
  }
  if (*((_DWORD *)v15 + 4) != v10) {
    goto LABEL_17;
  }
  if ((*a4 - v15[3]) / 1000000 >= *(void *)(a1 + 136))
  {
    v15[3] = *a4;
LABEL_89:
    memset(v67, 0, sizeof(v67));
    int v68 = 1065353216;
    if (*(unsigned char *)(a2 + 4))
    {
      std::to_string(&v66, *(float *)a2);
      std::string::basic_string[abi:ne180100]<0>(__p, "ftac_invalid_window_x");
      int32x4_t v69 = __p;
      uint64_t v42 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v67, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v69);
      int v43 = (void **)(v42 + 40);
      if ((char)v42[63] < 0) {
        operator delete(*v43);
      }
      *(std::string *)int v43 = v66;
      *((unsigned char *)&v66.__r_.__value_.__s + 23) = 0;
      v66.__r_.__value_.__s.__data_[0] = 0;
      if (v65 < 0)
      {
        operator delete(__p[0]);
        if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v66.__r_.__value_.__l.__data_);
        }
      }
    }
    if (*(unsigned char *)(a2 + 12))
    {
      std::to_string(&v66, *(float *)(a2 + 8));
      std::string::basic_string[abi:ne180100]<0>(__p, "ftac_invalid_window_y");
      int32x4_t v69 = __p;
      uint64_t v44 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v67, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v69);
      int v45 = (void **)(v44 + 40);
      if ((char)v44[63] < 0) {
        operator delete(*v45);
      }
      *(std::string *)int v45 = v66;
      *((unsigned char *)&v66.__r_.__value_.__s + 23) = 0;
      v66.__r_.__value_.__s.__data_[0] = 0;
      if (v65 < 0)
      {
        operator delete(__p[0]);
        if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v66.__r_.__value_.__l.__data_);
        }
      }
    }
    if (*(unsigned char *)(a2 + 20))
    {
      std::to_string(&v66, *(float *)(a2 + 16));
      std::string::basic_string[abi:ne180100]<0>(__p, "ftac_invalid_aspect_ratio_in_portrait_orientation");
      int32x4_t v69 = __p;
      uint64_t v46 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v67, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v69);
      long long v47 = (void **)(v46 + 40);
      if ((char)v46[63] < 0) {
        operator delete(*v47);
      }
      *(std::string *)long long v47 = v66;
      *((unsigned char *)&v66.__r_.__value_.__s + 23) = 0;
      v66.__r_.__value_.__s.__data_[0] = 0;
      if (v65 < 0)
      {
        operator delete(__p[0]);
        if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v66.__r_.__value_.__l.__data_);
        }
      }
    }
    if (*(unsigned char *)(a2 + 28))
    {
      std::to_string(&v66, *(float *)(a2 + 24));
      std::string::basic_string[abi:ne180100]<0>(__p, "ftac_invalid_aspect_ratio_in_landscape_orientation");
      int32x4_t v69 = __p;
      long long v48 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v67, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v69);
      long long v49 = (void **)(v48 + 40);
      if ((char)v48[63] < 0) {
        operator delete(*v49);
      }
      *(std::string *)long long v49 = v66;
      *((unsigned char *)&v66.__r_.__value_.__s + 23) = 0;
      v66.__r_.__value_.__s.__data_[0] = 0;
      if (v65 < 0)
      {
        operator delete(__p[0]);
        if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v66.__r_.__value_.__l.__data_);
        }
      }
    }
    if (*(_DWORD *)(a2 + 32))
    {
      std::bitset<32ul>::to_string[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v66, (void *)(a2 + 32));
      std::string::basic_string[abi:ne180100]<0>(__p, "ftac_invalid_client_cx_bitset");
      int32x4_t v69 = __p;
      long long v50 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v67, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v69);
      long long v51 = (void **)(v50 + 40);
      if ((char)v50[63] < 0) {
        operator delete(*v51);
      }
      *(std::string *)long long v51 = v66;
      *((unsigned char *)&v66.__r_.__value_.__s + 23) = 0;
      v66.__r_.__value_.__s.__data_[0] = 0;
      if (v65 < 0) {
        operator delete(__p[0]);
      }
    }
    if (*(_DWORD *)(a2 + 40))
    {
      std::bitset<32ul>::to_string[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v66, (void *)(a2 + 40));
      std::string::basic_string[abi:ne180100]<0>(__p, "ftac_invalid_client_cy_bitset");
      int32x4_t v69 = __p;
      uint64_t v52 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v67, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v69);
      uint64_t v53 = (void **)(v52 + 40);
      if ((char)v52[63] < 0) {
        operator delete(*v53);
      }
      *(std::string *)uint64_t v53 = v66;
      *((unsigned char *)&v66.__r_.__value_.__s + 23) = 0;
      v66.__r_.__value_.__s.__data_[0] = 0;
      if (v65 < 0) {
        operator delete(__p[0]);
      }
    }
    int v55 = *(_DWORD *)(a2 + 48);
    uint64_t v54 = (void *)(a2 + 48);
    if (v55)
    {
      std::bitset<32ul>::to_string[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v66, v54);
      std::string::basic_string[abi:ne180100]<0>(__p, "ftac_invalid_client_all_zero_bitset");
      int32x4_t v69 = __p;
      uint64_t v56 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v67, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v69);
      uint64_t v57 = (void **)(v56 + 40);
      if ((char)v56[63] < 0) {
        operator delete(*v57);
      }
      *(std::string *)uint64_t v57 = v66;
      *((unsigned char *)&v66.__r_.__value_.__s + 23) = 0;
      v66.__r_.__value_.__s.__data_[0] = 0;
      if (v65 < 0) {
        operator delete(__p[0]);
      }
    }
    applesauce::CF::make_DictionaryRef<std::string,std::string>((CFDictionaryRef *)&cf, (uint64_t)v67);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v67);
    uint64_t v58 = *(uint64_t **)(a1 + 112);
    uint64_t v59 = *(uint64_t **)(a1 + 120);
    CFTypeRef v60 = cf;
    while (v58 != v59)
    {
      uint64_t v61 = *v58;
      if (v60) {
        CFRetain(v60);
      }
      std::function<void ()(long long,applesauce::CF::DictionaryRef)>::operator()(*(void *)(a1 + 40), v61);
      if (v60) {
        CFRelease(v60);
      }
      ++v58;
    }
    if (v60) {
      CFRelease(v60);
    }
  }
  std::mutex::unlock(v9);
}

void sub_1BB431A48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a23);
  std::mutex::unlock(v23);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AU::FTSpatialAC::MetricsReporter::reportAsync(AU::FTSpatialAC::MetricsReporter::Issue const&,caulk::option_set<AU::FTSpatialAC::MetricsReporter::IssueTag,unsigned int> const&,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>> const&)::$_0,AU::FTSpatialAC::MetricsReporter::Issue const&,caulk::option_set<AU::FTSpatialAC::MetricsReporter::IssueTag,unsigned int> const&,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>> const&>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  float v2 = *a1;
  *(void *)float v2 = &unk_1F14AD7D0;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v2 + 4);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  caulk::concurrent::message::~message(v2);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], v2, 112, 8);
  return a1;
}

_OWORD *std::bitset<32ul>::to_string[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(uint64_t *a1, void *a2)
{
  AudioComponent result = operator new(0x28uLL);
  uint64_t v5 = 0;
  *a1 = (uint64_t)result;
  *(_OWORD *)(a1 + 1) = xmmword_1BB87A800;
  *(void *)&long long v6 = 0x3030303030303030;
  *((void *)&v6 + 1) = 0x3030303030303030;
  *AudioComponent result = v6;
  result[1] = v6;
  *((unsigned char *)result + 32) = 0;
  uint64_t v7 = 31;
  do
  {
    if ((*a2 >> v5))
    {
      if (*((char *)a1 + 23) >= 0) {
        uint64_t v8 = a1;
      }
      else {
        uint64_t v8 = (uint64_t *)*a1;
      }
      *((unsigned char *)v8 + v7) = 49;
    }
    ++v5;
    --v7;
  }
  while (v5 != 32);
  return result;
}

void applesauce::CF::make_DictionaryRef<std::string,std::string>(CFDictionaryRef *a1, uint64_t a2)
{
  memset(v6, 0, sizeof(v6));
  std::vector<applesauce::CF::TypeRefPair>::reserve(v6, *(void *)(a2 + 24));
  for (uint64_t i = (const UInt8 *)(a2 + 16);
        ;
        std::vector<applesauce::CF::TypeRefPair>::emplace_back<std::string const&,std::string const&>(v6, i + 16, (uint64_t)(i + 40)))
  {
    uint64_t i = *(const UInt8 **)i;
    if (!i) {
      break;
    }
  }
  CFDictionaryRef CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef(v6);
  uint64_t v7 = v6;
  std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  *a1 = CFDictionaryRef;
}

void sub_1BB431CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t std::function<void ()(long long,applesauce::CF::DictionaryRef)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  if (!a1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v3);
}

uint64_t std::vector<applesauce::CF::TypeRefPair>::emplace_back<std::string const&,std::string const&>(void *a1, const UInt8 *a2, uint64_t a3)
{
  unint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  unint64_t v7 = v8;
  unint64_t v9 = *(void *)(v6 - 8);
  if (v9 >= v8)
  {
    uint64_t v12 = (uint64_t)(v9 - *a1) >> 4;
    if ((unint64_t)(v12 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = v7 - *a1;
    uint64_t v14 = v13 >> 3;
    if (v13 >> 3 <= (unint64_t)(v12 + 1)) {
      uint64_t v14 = v12 + 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    uint64_t v21 = v6;
    if (v15) {
      unint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,applesauce::CF::DictionaryRef>>>(v6, v15);
    }
    else {
      unint64_t v16 = 0;
    }
    uint64_t v17 = v16;
    int v18 = (CFStringRef *)&v16[16 * v12];
    uint64_t v20 = &v16[16 * v15];
    applesauce::CF::TypeRefPair::TypeRefPair<std::string const&,std::string const&>(v18, a2, a3);
    unint64_t v19 = v18 + 2;
    std::vector<applesauce::CF::TypeRefPair>::__swap_out_circular_buffer(a1, &v17);
    unint64_t v11 = a1[1];
    uint64_t result = std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer((uint64_t)&v17);
  }
  else
  {
    uint64_t result = (uint64_t)applesauce::CF::TypeRefPair::TypeRefPair<std::string const&,std::string const&>(*(CFStringRef **)(v6 - 8), a2, a3);
    unint64_t v11 = v9 + 16;
    a1[1] = v9 + 16;
  }
  a1[1] = v11;
  return result;
}

void sub_1BB431E2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

CFStringRef *applesauce::CF::TypeRefPair::TypeRefPair<std::string const&,std::string const&>(CFStringRef *a1, const UInt8 *a2, uint64_t a3)
{
  CFIndex v5 = *((void *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    CFIndex v6 = a2[23];
  }
  else
  {
    a2 = *(const UInt8 **)a2;
    CFIndex v6 = v5;
  }
  CFStringRef v7 = CFStringCreateWithBytes(0, a2, v6, 0x8000100u, 0);
  *a1 = v7;
  if (!v7)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  int v8 = *(char *)(a3 + 23);
  if (v8 >= 0) {
    unint64_t v9 = (const UInt8 *)a3;
  }
  else {
    unint64_t v9 = *(const UInt8 **)a3;
  }
  if (v8 >= 0) {
    CFIndex v10 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    CFIndex v10 = *(void *)(a3 + 8);
  }
  CFStringRef v11 = CFStringCreateWithBytes(0, v9, v10, 0x8000100u, 0);
  a1[1] = v11;
  if (!v11)
  {
    uint64_t v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v14, "Could not construct");
  }
  return a1;
}

void sub_1BB431F5C(_Unwind_Exception *a1)
{
  uint64_t v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::rt_message_call<AU::FTSpatialAC::MetricsReporter::reportAsync(AU::FTSpatialAC::MetricsReporter::Issue const&,caulk::option_set<AU::FTSpatialAC::MetricsReporter::IssueTag,unsigned int> const&,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>> const&)::$_0,AU::FTSpatialAC::MetricsReporter::Issue const&,caulk::option_set<AU::FTSpatialAC::MetricsReporter::IssueTag,unsigned int> const&,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>> const&>::~rt_message_call(caulk::concurrent::message *this)
{
  *(void *)this = &unk_1F14AD7D0;
  float v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  caulk::concurrent::message::~message(this);

  JUMPOUT(0x1C185D370);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F14AD7D0;
  float v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  caulk::concurrent::message::~message(this);
}

void caulk::concurrent::details::message_call<AU::FTSpatialAC::MetricsReporter::reportAsync(AU::FTSpatialAC::MetricsReporter::Issue const&,caulk::option_set<AU::FTSpatialAC::MetricsReporter::IssueTag,unsigned int> const&,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>> const&)::$_0,AU::FTSpatialAC::MetricsReporter::Issue const&,caulk::option_set<AU::FTSpatialAC::MetricsReporter::IssueTag,unsigned int> const&,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>> const&>::perform(uint64_t a1)
{
}

void caulk::concurrent::details::message_call<AU::FTSpatialAC::MetricsReporter::reportAsync(AU::FTSpatialAC::MetricsReporter::Issue const&,caulk::option_set<AU::FTSpatialAC::MetricsReporter::IssueTag,unsigned int> const&,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>> const&)::$_0,AU::FTSpatialAC::MetricsReporter::Issue const&,caulk::option_set<AU::FTSpatialAC::MetricsReporter::IssueTag,unsigned int> const&,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>> const&>::~message_call(caulk::concurrent::message *this)
{
  *(void *)this = &unk_1F14AD7D0;
  float v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  caulk::concurrent::message::~message(this);

  JUMPOUT(0x1C185D370);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F14AD7D0;
  float v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  caulk::concurrent::message::~message(this);
}

void AUScotty::GetChannelLayoutTags(AUScotty *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a2 == 2)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    CFIndex v5 = operator new(0xCuLL);
    CFIndex v6 = (char *)(v5 + 3);
    a3[2] = v5 + 3;
    *(void *)CFIndex v5 = 0x7E000800790006;
    void v5[2] = 6553601;
    goto LABEL_5;
  }
  if (a2 == 1)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    CFIndex v5 = operator new(0x14uLL);
    CFIndex v6 = (char *)(v5 + 5);
    a3[2] = v5 + 5;
    v5[4] = 8388616;
    *(_OWORD *)CFIndex v5 = xmmword_1BB895100;
LABEL_5:
    *a3 = v5;
    a3[1] = v6;
    return;
  }
  if (getScottyLog(void)::onceToken != -1) {
    dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_33998);
  }
  int v8 = getScottyLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    unint64_t v9 = (void *)((char *)this + 528);
    if (*((char *)this + 551) < 0) {
      unint64_t v9 = (void *)*v9;
    }
    int v10 = 136315650;
    CFStringRef v11 = v9;
    __int16 v12 = 2080;
    uint64_t v13 = "GetChannelLayoutTags";
    __int16 v14 = 1024;
    int v15 = a2;
    _os_log_error_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_ERROR, "[%s|%s] Invalid scope %u", (uint8_t *)&v10, 0x1Cu);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
}

uint64_t AUScotty::SupportedNumChannels(AUScotty *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&sChannels;
  }
  return 15;
}

BOOL AUScotty::StreamFormatWritable(AUScotty *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUScotty::SupportsTail(AUScotty *this)
{
  return 1;
}

double AUScotty::GetTailTime(AUScotty *this)
{
  return 0.0;
}

uint64_t AUScotty::GetLatency(AUScotty *this)
{
  uint64_t result = *((void *)this + 91);
  if (result)
  {
    (*(uint64_t (**)(uint64_t))(*(void *)result + 80))(result);
    return ausdk::AUScope::SafeGetElement((AUScotty *)((char *)this + 128), 0);
  }
  return result;
}

uint64_t AUScotty::NewFactoryPresetSet(AUScotty *this, const AUPreset *a2)
{
  int v15 = (char *)this + 576;
  char v4 = 1;
  char v16 = 1;
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 576);
  uint64_t v5 = 0;
  unsigned int presetNumber = a2->presetNumber;
  while (1)
  {
    char v7 = v4;
    int v8 = (const AUPreset *)&kPresets[4 * v5];
    if (presetNumber == v8->presetNumber) {
      break;
    }
    char v4 = 0;
    uint64_t v5 = 1;
    if ((v7 & 1) == 0) {
      goto LABEL_11;
    }
  }
  if (presetNumber > 1)
  {
LABEL_11:
    uint64_t v12 = 4294956445;
    goto LABEL_12;
  }
  for (unsigned int i = 0; i != 34; ++i)
  {
    float v14 = 0.0;
    if (ScottyUpmixer::GetParamDefault(i, presetNumber, &v14))
    {
      float v10 = v14;
      uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUScotty *)((char *)this + 32), 0);
      ausdk::AUElement::SetParameter(Element, i, v10, 0);
    }
  }
  ausdk::AUBase::SetAFactoryPresetAsCurrent((char *)this, v8);
  uint64_t v12 = 0;
  atomic_store(1u, (unsigned __int8 *)this + 568);
LABEL_12:
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v15);
  return v12;
}

void sub_1BB4324BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t AUScotty::GetPresets(AUScotty *this, const __CFArray **a2)
{
  if (a2)
  {
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0, 2, 0);
    CFArrayAppendValue(Mutable, kPresets);
    CFArrayAppendValue(Mutable, &dword_1E623D838);
    *a2 = Mutable;
  }
  return 0;
}

uint64_t AUScotty::GetParameterValueStrings(AUScotty *this, int a2, int a3, const __CFArray **a4)
{
  if (a2) {
    return 0;
  }
  switch(a3)
  {
    case 4:
      goto LABEL_6;
    case 14:
      if (a4)
      {
        CFIndex v6 = ScottyUpmixer::kAllpass_Labels;
        CFIndex v7 = 6;
        goto LABEL_10;
      }
      return 0;
    case 6:
LABEL_6:
      if (a4)
      {
        CFIndex v6 = ScottyUpmixer::kCrossover_OrderLabels;
        CFIndex v7 = 5;
LABEL_10:
        CFArrayRef v8 = CFArrayCreate(0, (const void **)v6, v7, 0);
        uint64_t result = 0;
        *a4 = v8;
        return result;
      }
      return 0;
  }
  return 4294956417;
}

uint64_t AUScotty::RestoreState(AUScotty *this, const void *a2)
{
  CFIndex v6 = (char *)this + 576;
  char v7 = 1;
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 576);
  uint64_t v4 = ausdk::AUBase::RestoreState((OpaqueAudioComponentInstance **)this, a2);
  if (!v4) {
    atomic_store(1u, (unsigned __int8 *)this + 568);
  }
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v6);
  return v4;
}

void sub_1BB432640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t AUScotty::GetParameterInfo(AUScotty *this, int a2, unsigned int a3, AudioUnitParameterInfo *a4)
{
  a4->AudioUnitParameterOptions flags = 0;
  a4->unitName = 0;
  if (a2) {
    return 4294956418;
  }
  int v11 = -1;
  CFStringRef theString = 0;
  int v13 = 2;
  uint64_t v15 = 0;
  uint64_t v14 = 0;
  if (!ScottyUpmixer::GetParamInfo(a3, (uint64_t)&v11)) {
    return 4294956418;
  }
  if (v11 == -1) {
    return 4294956418;
  }
  CFStringRef v7 = theString;
  a4->cfNameString = theString;
  a4->flags |= 0x8000000u;
  CFStringGetCString(v7, a4->name, 52, 0x8000100u);
  *(void *)&a4->minCFNumberRef Value = v15;
  LODWORD(a4->defaultValue) = v14;
  AudioUnitParameterOptions flags = a4->flags;
  a4->AudioUnitParameterOptions flags = flags | 0xC0000000;
  if (a3 > 0x21) {
    return 4294956418;
  }
  uint64_t result = 0;
  UInt32 v9 = dword_1BB8951E0[a3];
  int v10 = dword_1BB895268[a3];
  a4->unit = dword_1BB895158[a3];
  a4->clumpID = v9;
  a4->AudioUnitParameterOptions flags = flags | v10;
  return result;
}

uint64_t AUScotty::Render(AUScotty *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  v14[1] = *MEMORY[0x1E4F143B8];
  CFArrayRef v8 = (AUScotty *)((char *)this + 80);
  uint64_t Element = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUScotty *)((char *)this + 80), 0);
  uint64_t result = ausdk::AUInputElement::PullInput(Element, a2, a3, 0, a4);
  if (!result)
  {
    uint64_t v11 = ausdk::AUScope::SafeGetElement(v8, 0);
    v14[0] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v11 + 144));
    uint64_t v12 = ausdk::AUScope::SafeGetElement((AUScotty *)((char *)this + 128), 0);
    uint64_t BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v12 + 144));
    return (*(uint64_t (**)(AUScotty *, unsigned int *, uint64_t, uint64_t, void *, uint64_t, uint64_t *))(*(void *)this + 184))(this, a2, a4, 1, v14, 1, &BufferList);
  }
  return result;
}

uint64_t AUScotty::ProcessMultipleBufferLists(AUScotty *this, unsigned int *a2, AudioDSP::Utility *a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  uint64_t v108 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 17))
  {
    unint64_t v12 = *(unsigned int *)(ausdk::AUScope::SafeGetElement((AUScotty *)((char *)this + 80), 0) + 108);
    uint64_t Element = ausdk::AUScope::SafeGetElement((AUScotty *)((char *)this + 128), 0);
    if ((v12 - 9) <= 0xFFFFFFF7) {
      __assert_rtn("ProcessMultipleBufferLists", "AUScotty.cpp", 817, "numIn > 0 && numIn <= kScotty_MaxNumIn");
    }
    uint64_t v14 = *(unsigned int *)(Element + 108);
    if ((v14 - 9) <= 0xFFFFFFF7) {
      __assert_rtn("ProcessMultipleBufferLists", "AUScotty.cpp", 818, "numOut > 0 && numOut <= kScotty_MaxNumOut");
    }
    if (*((unsigned char *)this + 561))
    {
      uint64_t v15 = 0;
      unint64_t v16 = 0;
      do
      {
        uint64_t v17 = (char *)*a7 + v15 * 16;
        int v18 = (void *)*((void *)v17 + 2);
        if (v16 >= v12) {
          bzero(v18, *((unsigned int *)v17 + 3));
        }
        else {
          memcpy(v18, (*a5)->mBuffers[v15].mData, (*a5)->mBuffers[v15].mDataByteSize);
        }
        ++v16;
        ++v15;
      }
      while (v14 != v15);
      return 0;
    }
    uint64_t v91 = this;
    *(_WORD *)uint64_t v101 = 0;
    uint64_t v20 = *(void *)(ausdk::AUScope::SafeGetElement((AUScotty *)((char *)this + 128), 0) + 80);
    v97.mBuffers[0] = (AudioBuffer)xmmword_1BB8727B0;
    int v98 = 4;
    int v99 = v12;
    uint64_t v100 = 32;
    *(void *)&v93.uint64_t mNumberBuffers = v20;
    v93.mBuffers[0] = (AudioBuffer)xmmword_1BB8727B0;
    int v94 = 4;
    int v95 = v14;
    uint64_t v96 = 32;
    *(void *)&v97.uint64_t mNumberBuffers = v20;
    unsigned int v90 = a3;
    AudioDSP::Utility::DetectNonFinites(a3, *a5, &v97, (const AudioStreamBasicDescription *)&v101[1], v21);
    if (v101[1] && *((unsigned char *)this + 563))
    {
      if (getScottyLog(void)::onceToken != -1) {
        dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_33998);
      }
      BOOL v23 = getScottyLog(void)::gLog;
      vDSP_Length v24 = a3;
      if (os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        uint64_t v84 = (void *)((char *)this + 528);
        if (*((char *)this + 551) < 0) {
          uint64_t v84 = (void *)*v84;
        }
        *(_DWORD *)AudioChannelLayout buf = 136315650;
        *(void *)&uint8_t buf[4] = v84;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "ProcessMultipleBufferLists";
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = v101[1];
        _os_log_error_impl(&dword_1BB0CE000, v23, OS_LOG_TYPE_ERROR, "[%s|%s] (InputSignals) is NOT finite: (%d)", buf, 0x1Cu);
      }
      uint64_t v25 = 0;
      uint64_t v26 = v14;
      do
      {
        bzero((*a7)->mBuffers[v25].mData, (*a7)->mBuffers[v25].mDataByteSize);
        ++v25;
        --v26;
      }
      while (v26);
      goto LABEL_126;
    }
    uint64_t v27 = *a5;
    uint64_t v28 = (unsigned int *)*a7;
    int v29 = *a2;
    int v30 = *((unsigned __int8 *)this + 562);
    *((unsigned char *)this + 562) = (v29 & 0x10) != 0;
    if ((v29 & 0x10) != 0)
    {
      unsigned int v44 = v29 & 0x10;
      if (*v28)
      {
        unint64_t v45 = 0;
        uint64_t v46 = (void **)(v28 + 4);
        do
        {
          bzero(*v46, *((unsigned int *)v46 - 1));
          ++v45;
          v46 += 2;
        }
        while (v45 < *v28);
      }
      vDSP_Length v24 = v90;
      if (v30 != v44 >> 4)
      {
        (*(void (**)(void))(**((void **)this + 91) + 32))(*((void *)this + 91));
        vDSP_Length v24 = v90;
      }
      goto LABEL_126;
    }
    unsigned __int8 v31 = atomic_load((unsigned __int8 *)this + 568);
    if (v31)
    {
      *(void *)AudioChannelLayout buf = (char *)this + 576;
      int v32 = caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::try_lock((uint64_t)this + 576);
      uint8_t buf[8] = v32;
      if (v32)
      {
        AUScotty::UpdateParametersFromAU(this);
        atomic_store(0, (unsigned __int8 *)this + 568);
      }
      std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)buf);
    }
    unsigned int v33 = *v27;
    if (*v27 >= 8u) {
      uint64_t v34 = 8;
    }
    else {
      uint64_t v34 = v33;
    }
    if (*v28 >= 8) {
      uint64_t v35 = 8;
    }
    else {
      uint64_t v35 = *v28;
    }
    long long v105 = 0u;
    long long v106 = 0u;
    memset(buf, 0, sizeof(buf));
    long long v102 = 0u;
    long long v103 = 0u;
    memset(&v101[10], 0, 32);
    if (v34)
    {
      uint64_t v36 = (uint64_t *)(v27 + 4);
      unint64_t v37 = buf;
      uint64_t v38 = v34;
      do
      {
        uint64_t v39 = *v36;
        v36 += 2;
        *(void *)unint64_t v37 = v39;
        v37 += 8;
        --v38;
      }
      while (v38);
      if (v33 <= 7)
      {
        uint64_t v40 = *(void *)&v27[4 * (v34 - 1) + 4];
        uint64_t v41 = 8 * v34;
        do
        {
          *(void *)&buf[v41] = v40;
          v41 += 8;
        }
        while (v41 != 64);
      }
    }
    uint64_t v42 = *((unsigned int *)this + 139);
    uint64_t v86 = v14;
    if (v42)
    {
      vDSP_Length v24 = v90;
      if (v42 != 2)
      {
        if (v35)
        {
          long long v49 = (uint64_t *)(v28 + 4);
          long long v50 = &v101[10];
          do
          {
            uint64_t v51 = *v49;
            v49 += 2;
            *v50++ = v51;
            --v35;
          }
          while (v35);
        }
LABEL_50:
        uint64_t v52 = *((void *)this + 91);
        if (v52 && *(unsigned char *)(v52 + 8))
        {
          unsigned int v88 = (*(uint64_t (**)(void))(*(void *)v52 + 72))(*((void *)this + 91));
          if (*(unsigned char *)(v52 + 8) && *(unsigned char *)(v52 + 9) && (!*(unsigned char *)(v52 + 116) || *(_DWORD *)(v52 + 120)))
          {
            if (v24)
            {
              unsigned int v53 = 0;
              uint64_t v92 = v52 + 216;
              float __B = (float *)(v52 + 96);
              unsigned int v54 = v24;
              while (1)
              {
                while (1)
                {
                  unsigned int v55 = *(_DWORD *)(v52 + 280);
                  if (v88 < v55) {
                    __assert_rtn("Process", "ScottyUpmixer.cpp", 426, "nativeFrameSize >= mInputStagingBufferOffset");
                  }
                  if (v88 - v55 >= v54) {
                    unsigned int v56 = v54;
                  }
                  else {
                    unsigned int v56 = v88 - v55;
                  }
                  if (v56)
                  {
                    uint64_t v57 = v24 - v54;
                    if (v56 + v57 > v24) {
                      __assert_rtn("Process", "ScottyUpmixer.cpp", 430, "(inFramesToProcess-inFramesPending+inFramesToCopy) <= inFramesToProcess");
                    }
                    if (v56 + v55 > v88) {
                      __assert_rtn("Process", "ScottyUpmixer.cpp", 431, "(mInputStagingBufferOffset+inFramesToCopy) <= nativeFrameSize");
                    }
                    for (uint64_t i = 0; i != 8; ++i)
                    {
                      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v52 + 128))(v52, i))
                      {
                        uint64_t v59 = *(void *)&buf[8 * i];
                        if (v59) {
                          memmove((void *)(*(void *)(v52 + 8 * i + 152) + 4 * *(unsigned int *)(v52 + 280)), (const void *)(v59 + 4 * v57), 4 * v56);
                        }
                      }
                    }
                    v54 -= v56;
                    unsigned int v55 = *(_DWORD *)(v52 + 280) + v56;
                    *(_DWORD *)(v52 + 280) = v55;
                    vDSP_Length v24 = v90;
                  }
                  unsigned int v87 = v54;
                  if (v55 == v88 && !*(_DWORD *)(v52 + 288))
                  {
                    *(void *)&long long v107 = v52 + 72;
                    int v60 = caulk::pooled_semaphore_mutex::try_lock((caulk::pooled_semaphore_mutex *)(v52 + 72));
                    BYTE8(v107) = v60;
                    if (v60)
                    {
                      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v52 + 144))(v52, v52 + 152, v92);
                      *(_DWORD *)(v52 + 288) = v88;
                      *(void *)(v52 + 280) = 0;
                    }
                    std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v107);
                    vDSP_Length v24 = v90;
                  }
                  unsigned int v61 = *(_DWORD *)(v52 + 288);
                  vDSP_Length v62 = v24 - v53 >= v61 ? v61 : v24 - v53;
                  if (!v62) {
                    break;
                  }
                  if (v62 + v53 > v24) {
                    __assert_rtn("Process", "ScottyUpmixer.cpp", 460, "(outFramesCompleted+outFramesToCopy) <= inFramesToProcess");
                  }
                  if ((*(_DWORD *)(v52 + 284) + v62) > *(_DWORD *)(v52 + 120)) {
                    __assert_rtn("Process", "ScottyUpmixer.cpp", 461, "(mOutputStagingBufferOffset+outFramesToCopy) <= mOutputBufSize");
                  }
                  float v63 = COERCE_FLOAT(atomic_load((unsigned int *)(*(void *)(v52 + 40) + 124)));
                  float v64 = *(float *)(v52 + 100);
                  if (fabsf(v63) > 0.01 || fabsf(v64) > 0.01)
                  {
                    if (v64 == v63)
                    {
                      uint64_t v65 = 0;
                      long long v107 = xmmword_1BB879D60;
                      do
                      {
                        uint64_t v66 = *(unsigned int *)((char *)&v107 + v65);
                        if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v52 + 136))(v52, v66))
                        {
                          CFNumberRef v67 = (float *)(*(void *)(v92 + 8 * v66) + 4 * *(unsigned int *)(v52 + 284));
                          vDSP_vsmul(v67, 1, __B, v67, 1, v62);
                        }
                        v65 += 4;
                      }
                      while (v65 != 16);
                    }
                    else
                    {
                      float v68 = __exp10f(v63 / 20.0);
                      uint64_t v69 = 0;
                      *(float *)&v101[6] = (float)(v68 - *__B) / (float)v62;
                      long long v107 = xmmword_1BB879D60;
                      do
                      {
                        uint64_t v70 = *(unsigned int *)((char *)&v107 + v69);
                        if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v52 + 136))(v52, v70))
                        {
                          *(_DWORD *)&v101[2] = *(_DWORD *)(v52 + 96);
                          CFDictionaryRef v71 = (float *)(*(void *)(v92 + 8 * v70) + 4 * *(unsigned int *)(v52 + 284));
                          vDSP_vrampmul(v71, 1, (float *)&v101[2], (const float *)&v101[6], v71, 1, v62);
                        }
                        v69 += 4;
                      }
                      while (v69 != 16);
                      *(float *)(v52 + 100) = v63;
                      *(float *)(v52 + 96) = v68;
                    }
                  }
                  int v72 = *(_DWORD *)(v52 + 16);
                  if (v72 == 2)
                  {
                    if (*(void *)&v101[26]) {
                      memmove((void *)(*(void *)&v101[26] + 4 * v53), (const void *)(*(void *)(v52 + 232) + 4 * *(unsigned int *)(v52 + 284)), 4 * v62);
                    }
                  }
                  else if (v72)
                  {
                    for (uint64_t j = 0; j != 8; ++j)
                    {
                      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v52 + 136))(v52, j))
                      {
                        uint64_t v77 = *(void *)&v101[8 * j + 10];
                        if (v77) {
                          memmove((void *)(v77 + 4 * v53), (const void *)(*(void *)(v52 + 8 * j + 216) + 4 * *(unsigned int *)(v52 + 284)), 4 * v62);
                        }
                      }
                    }
                  }
                  else
                  {
                    for (uint64_t k = 0; k != 6; ++k)
                    {
                      uint64_t v74 = dword_1BB8D4A90[k];
                      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v52 + 136))(v52, v74))
                      {
                        uint64_t v75 = *(void *)&v101[8 * v74 + 10];
                        if (v75) {
                          memmove((void *)(v75 + 4 * v53), (const void *)(*(void *)(v92 + 8 * v74) + 4 * *(unsigned int *)(v52 + 284)), 4 * v62);
                        }
                      }
                    }
                    if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v52 + 136))(v52, 4) & 1) != 0
                      && (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v52 + 136))(v52, 6)
                      && (void)v102)
                    {
                      vDSP_vadd((const float *)(*(void *)(v52 + 264) + 4 * *(unsigned int *)(v52 + 284)), 1, (const float *)(v102 + 4 * v53), 1, (float *)(v102 + 4 * v53), 1, v62);
                    }
                    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v52 + 136))(v52, 5)
                      && (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v52 + 136))(v52, 7)
                      && *((void *)&v102 + 1))
                    {
                      vDSP_vadd((const float *)(*(void *)(v52 + 272) + 4 * *(unsigned int *)(v52 + 284)), 1, (const float *)(*((void *)&v102 + 1) + 4 * v53), 1, (float *)(*((void *)&v102 + 1) + 4 * v53), 1, v62);
                    }
                  }
                  int v78 = *(_DWORD *)(v52 + 288) - v62;
                  *(_DWORD *)(v52 + 288) = v78;
                  if (v78) {
                    int v78 = *(_DWORD *)(v52 + 284) + v62;
                  }
                  v53 += v62;
                  unsigned int v54 = v87;
                  *(_DWORD *)(v52 + 284) = v78;
                  vDSP_Length v24 = v90;
                  if (!v87) {
                    goto LABEL_122;
                  }
                }
                if (!v54)
                {
LABEL_122:
                  if (v53 >= v24) {
                    break;
                  }
                }
              }
            }
          }
          else
          {
            ScottyUpmixer::ProcessBypass((ScottyUpmixer *)buf, (const float **)&v101[10], v24);
            vDSP_Length v24 = v90;
          }
        }
        uint64_t v14 = v86;
LABEL_126:
        AudioDSP::Utility::DetectNonFinites((AudioDSP::Utility *)v24, *a7, &v93, (const AudioStreamBasicDescription *)v101, v22);
        if (v101[0] && *((unsigned char *)v91 + 563))
        {
          if (getScottyLog(void)::onceToken != -1) {
            dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_33998);
          }
          uint64_t v79 = getScottyLog(void)::gLog;
          if (os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_ERROR))
          {
            long long v85 = (void *)((char *)v91 + 528);
            if (*((char *)v91 + 551) < 0) {
              long long v85 = (void *)*v85;
            }
            *(_DWORD *)AudioChannelLayout buf = 136315650;
            *(void *)&uint8_t buf[4] = v85;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "ProcessMultipleBufferLists";
            *(_WORD *)&buf[22] = 1024;
            *(_DWORD *)&unsigned char buf[24] = v101[0];
            _os_log_error_impl(&dword_1BB0CE000, v79, OS_LOG_TYPE_ERROR, "[%s|%s] (OutputSignals) is NOT finite: (%d)", buf, 0x1Cu);
          }
          (*(void (**)(void))(**((void **)v91 + 91) + 32))(*((void *)v91 + 91));
          if (v14)
          {
            uint64_t v80 = 0;
            unint64_t v81 = 0;
            do
            {
              long long v82 = (char *)*a7 + v80 * 16;
              long long v83 = (void *)*((void *)v82 + 2);
              if (v81 >= v12) {
                bzero(v83, *((unsigned int *)v82 + 3));
              }
              else {
                memcpy(v83, (*a5)->mBuffers[v80].mData, (*a5)->mBuffers[v80].mDataByteSize);
              }
              ++v81;
              ++v80;
            }
            while (v14 != v80);
          }
        }
        return 0;
      }
      unsigned int v43 = 0;
    }
    else
    {
      uint64_t v47 = *((void *)v28 + 4);
      *(void *)&v101[10] = *((void *)v28 + 2);
      *(void *)&v101[18] = v47;
      uint64_t v48 = *((void *)v28 + 12);
      *(void *)&long long v102 = *((void *)v28 + 10);
      *((void *)&v102 + 1) = v48;
      *(void *)&v101[26] = *((void *)v28 + 6);
      uint64_t v42 = 3;
      unsigned int v43 = 2;
      vDSP_Length v24 = v90;
    }
    *(void *)&v101[8 * v42 + 10] = *(void *)&v28[6 * v43 + 4];
    goto LABEL_50;
  }
  return 4294956429;
}

void sub_1BB433504(_Unwind_Exception *a1)
{
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100](v1 - 160);
  _Unwind_Resume(a1);
}

void AUScotty::UpdateParametersFromAU(AUScotty *this)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (!*((void *)this + 91)) {
    return;
  }
  char v2 = 0;
  unsigned int v3 = 0;
  uint64_t v4 = (AUScotty *)((char *)this + 32);
  while (2)
  {
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v4, 0);
    float Parameter = ausdk::AUElement::GetParameter(Element, v3);
    switch(v3)
    {
      case 0x18u:
        if (vabds_f32(Parameter, *((float *)this + 188)) > 0.01)
        {
          *((float *)this + 188) = Parameter;
          goto LABEL_18;
        }
        goto LABEL_19;
      case 0x19u:
        if (vabds_f32(Parameter, *((float *)this + 189)) > 0.01)
        {
          *((float *)this + 189) = Parameter;
          goto LABEL_18;
        }
        goto LABEL_19;
      case 0x1Au:
        goto LABEL_19;
      case 0x1Bu:
        if (vabds_f32(Parameter, *((float *)this + 184)) > 0.01)
        {
          *((float *)this + 184) = Parameter;
          goto LABEL_18;
        }
        goto LABEL_19;
      case 0x1Cu:
        if (vabds_f32(Parameter, *((float *)this + 186)) > 0.01)
        {
          *((float *)this + 186) = Parameter;
          goto LABEL_18;
        }
        goto LABEL_19;
      default:
        if (v3 == 4)
        {
          if (vabds_f32(Parameter, *((float *)this + 185)) <= 0.01) {
            goto LABEL_19;
          }
          *((float *)this + 185) = Parameter;
          goto LABEL_18;
        }
        if (v3 == 6 && vabds_f32(Parameter, *((float *)this + 187)) > 0.01)
        {
          *((float *)this + 187) = Parameter;
LABEL_18:
          char v2 = 1;
        }
LABEL_19:
        AUScotty::SetParameterImmediately((uint64_t)this, v3++, Parameter);
        if (v3 != 34) {
          continue;
        }
        (*(void (**)(void))(**((void **)this + 91) + 56))(*((void *)this + 91));
        (*(void (**)(void, float))(**((void **)this + 91) + 64))(*((void *)this + 91), *((float *)this + 141));
        if (getScottyLog(void)::onceToken != -1) {
          dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_33998);
        }
        CFStringRef v7 = getScottyLog(void)::gLog;
        BOOL v8 = os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_DEBUG);
        if (v2)
        {
          if (v8)
          {
            float v22 = (void *)((char *)this + 528);
            if (*((char *)this + 551) < 0) {
              float v22 = (void *)*v22;
            }
            *(_DWORD *)vDSP_Length v24 = 136315394;
            *(void *)&uint8_t v24[4] = v22;
            __int16 v25 = 2080;
            uint64_t v26 = "UpdateParametersFromAU";
            _os_log_debug_impl(&dword_1BB0CE000, v7, OS_LOG_TYPE_DEBUG, "[%s|%s] Sufficient filter parameter changes occurred --- recalculate filters", v24, 0x16u);
          }
          *(void *)vDSP_Length v24 = (char *)this + 576;
          v24[8] = 1;
          caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 576);
          UInt32 v9 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v4, 0);
          float v10 = ausdk::AUElement::GetParameter(v9, 5u);
          uint64_t v11 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v4, 0);
          float v12 = ausdk::AUElement::GetParameter(v11, 7u);
          if (v10 != -1.0)
          {
            unsigned int v13 = (int)v10 & ~((int)v10 >> 31);
            if (v13 >= 8) {
              unsigned int v13 = 8;
            }
            float v14 = flt_1BB895114[v13];
            *((float *)this + 184) = v14;
            uint64_t v15 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v4, 0);
            ausdk::AUElement::SetParameter(v15, 0x1Bu, v14, 0);
            unint64_t v16 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v4, 0);
            ausdk::AUElement::SetParameter(v16, 5u, -1.0, 0);
            AUScotty::SetParameterImmediately((uint64_t)this, 0x1Bu, *((float *)this + 184));
          }
          if (v12 != -1.0)
          {
            unsigned int v17 = (int)v12 & ~((int)v12 >> 31);
            if (v17 >= 3) {
              unsigned int v17 = 3;
            }
            float v18 = flt_1BB87C0E0[v17];
            *((float *)this + 186) = v18;
            unint64_t v19 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v4, 0);
            ausdk::AUElement::SetParameter(v19, 0x1Cu, v18, 0);
            uint64_t v20 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v4, 0);
            ausdk::AUElement::SetParameter(v20, 7u, -1.0, 0);
            AUScotty::SetParameterImmediately((uint64_t)this, 0x1Cu, *((float *)this + 186));
          }
          uint64_t v21 = (ScottyUpmixer *)*((void *)this + 91);
          if (v21)
          {
            ScottyUpmixer::UpdateCrossover(v21);
            ScottyUpmixer::UpdateSurroundFilters(*((ScottyUpmixer **)this + 91));
          }
          std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)v24);
        }
        else if (v8)
        {
          BOOL v23 = (void *)((char *)this + 528);
          if (*((char *)this + 551) < 0) {
            BOOL v23 = (void *)*v23;
          }
          *(_DWORD *)vDSP_Length v24 = 136315394;
          *(void *)&uint8_t v24[4] = v23;
          __int16 v25 = 2080;
          uint64_t v26 = "UpdateParametersFromAU";
          _os_log_debug_impl(&dword_1BB0CE000, v7, OS_LOG_TYPE_DEBUG, "[%s|%s] Filter parameter changes were not signficant; filters will not be recalculated",
            v24,
            0x16u);
        }
        return;
    }
  }
}

void sub_1BB433954(_Unwind_Exception *exception_object)
{
}

void AUScotty::SetParameterImmediately(uint64_t a1, unsigned int a2, float a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (a2 <= 0x21)
  {
    int v12 = -1;
    uint64_t v13 = 0;
    int v14 = 2;
    *(void *)unint64_t v16 = 0;
    uint64_t v15 = 0;
    if (ScottyUpmixer::GetParamInfo(a2, (uint64_t)&v12))
    {
      float v6 = roundf(a3);
      float v7 = 0.0;
      if (a3 != 0.0) {
        float v7 = 1.0;
      }
      if (v14) {
        float v7 = a3;
      }
      if (v14 != 1) {
        float v6 = v7;
      }
      float v8 = v16[1];
      if (v16[1] >= v6) {
        float v8 = v6;
      }
      if (v6 >= v16[0]) {
        float v9 = v8;
      }
      else {
        float v9 = v16[0];
      }
      atomic_store(LODWORD(v9), (unsigned int *)(a1 + 592 + 4 * a2));
    }
    else
    {
      if (getScottyLog(void)::onceToken != -1) {
        dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_33998);
      }
      float v10 = getScottyLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v11 = (void *)(a1 + 528);
        if (*(char *)(a1 + 551) < 0) {
          uint64_t v11 = (void *)*v11;
        }
        *(_DWORD *)AudioChannelLayout buf = 136315650;
        float v18 = v11;
        __int16 v19 = 2080;
        uint64_t v20 = "SetParameterImmediately";
        __int16 v21 = 1024;
        unsigned int v22 = a2;
        _os_log_debug_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_DEBUG, "[%s|%s] Could not set parameter %i immediately - Not Found", buf, 0x1Cu);
      }
    }
  }
}

uint64_t AUScotty::CanScheduleParameters(AUScotty *this)
{
  return 0;
}

uint64_t AUScotty::SetParameter(AUScotty *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  uint64_t v13 = (char *)this + 576;
  char v14 = 1;
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 576);
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  atomic_store(1u, (unsigned __int8 *)this + 568);
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v13);
  return 0;
}

void sub_1BB433BCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t AUScotty::SetProperty(AUScotty *this, int a2, int a3, unsigned int a4, _DWORD *a5, unsigned int a6)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a2 != 21 || a3)
  {
    if (a2 == 3700)
    {
      if (!a3)
      {
        uint64_t result = 0;
        *((unsigned char *)this + 376) = *a5 != 0;
        return result;
      }
    }
    else
    {
      if (a2 != 1885566051) {
        return 4294956417;
      }
      if (!a5) {
        __assert_rtn("SetProperty", "AUScotty.cpp", 418, "inData");
      }
      if (!a3)
      {
        uint64_t result = 0;
        *((_DWORD *)this + 141) = *a5;
        atomic_store(1u, (unsigned __int8 *)this + 568);
        return result;
      }
    }
    return 4294956430;
  }
  if (a6 < 4) {
    return 4294956445;
  }
  int v8 = *a5 != 0;
  if (*((unsigned __int8 *)this + 561) == v8) {
    return 0;
  }
  if (*((unsigned char *)this + 17)) {
    (*(void (**)(AUScotty *, void, void))(*(void *)this + 72))(this, 0, 0);
  }
  *((unsigned char *)this + 561) = v8;
  if (getScottyLog(void)::onceToken != -1) {
    dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_33998);
  }
  float v9 = getScottyLog(void)::gLog;
  BOOL v10 = os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v10)
  {
    uint64_t v11 = (void *)((char *)this + 528);
    if (*((char *)this + 551) < 0) {
      uint64_t v11 = (void *)*v11;
    }
    int v12 = *((unsigned __int8 *)this + 561);
    int v13 = 136315650;
    char v14 = v11;
    __int16 v15 = 2080;
    unint64_t v16 = "SetProperty";
    __int16 v17 = 1024;
    int v18 = v12;
    _os_log_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_DEFAULT, "[%s|%s] Scotty Bypass %i", (uint8_t *)&v13, 0x1Cu);
    return 0;
  }
  return result;
}

uint64_t AUScotty::GetProperty(AUScotty *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  if (a2 != 21 || a3)
  {
    if (a2 == 1885566051)
    {
      if (!a3)
      {
        int v7 = *((_DWORD *)this + 141);
        goto LABEL_12;
      }
    }
    else
    {
      if (a2 != 3700) {
        return 4294956417;
      }
      if (!a3)
      {
        int v7 = *((unsigned __int8 *)this + 376);
LABEL_12:
        uint64_t result = 0;
        goto LABEL_13;
      }
    }
    return 4294956430;
  }
  uint64_t result = 0;
  int v7 = *((unsigned __int8 *)this + 561);
LABEL_13:
  *a5 = v7;
  return result;
}

uint64_t AUScotty::GetPropertyInfo(AUScotty *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a2 == 21 && !a3)
  {
LABEL_7:
    uint64_t result = 0;
    *a6 = 1;
    *a5 = 4;
    return result;
  }
  if (a2 == 1885566051 || a2 == 3700)
  {
    if (a3) {
      return 4294956430;
    }
    goto LABEL_7;
  }
  return 4294956417;
}

uint64_t AUScotty::Reset(AUScotty *this)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (getScottyLog(void)::onceToken != -1) {
    dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_33998);
  }
  char v2 = getScottyLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v3 = (void *)((char *)this + 528);
    if (*((char *)this + 551) < 0) {
      unsigned int v3 = (void *)*v3;
    }
    int v6 = 136315394;
    int v7 = v3;
    __int16 v8 = 2080;
    float v9 = "Reset";
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEFAULT, "[%s|%s] Resetting", (uint8_t *)&v6, 0x16u);
  }
  uint64_t v4 = *((void *)this + 91);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 32))(v4);
  }
  return 0;
}

uint64_t AUScotty::Cleanup(AUScotty *this)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (getScottyLog(void)::onceToken != -1) {
    dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_33998);
  }
  char v2 = getScottyLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v3 = (void *)((char *)this + 528);
    if (*((char *)this + 551) < 0) {
      unsigned int v3 = (void *)*v3;
    }
    int v5 = 136315394;
    int v6 = v3;
    __int16 v7 = 2080;
    __int16 v8 = "Cleanup";
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEFAULT, "[%s|%s] Cleanup", (uint8_t *)&v5, 0x16u);
  }
  uint64_t result = *((void *)this + 91);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  }
  return result;
}

uint64_t AUScotty::Initialize(AUScotty *this)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (getScottyLog(void)::onceToken != -1) {
    dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_33998);
  }
  char v2 = getScottyLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v3 = (void *)((char *)this + 528);
    if (*((char *)this + 551) < 0) {
      unsigned int v3 = (void *)*v3;
    }
    *(_DWORD *)AudioChannelLayout buf = 136315394;
    *(void *)&uint8_t buf[4] = v3;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "Initialize";
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEFAULT, "[%s|%s] Initializing", buf, 0x16u);
  }
  int v4 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUScotty *)((char *)this + 80), 0) + 108);
  int v5 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUScotty *)((char *)this + 128), 0) + 108);
  (*(void (**)(long long *__return_ptr, AUScotty *, uint64_t, void))(*(void *)this + 392))(&v19, this, 1, 0);
  *(_OWORD *)AudioChannelLayout buf = v19;
  *(_OWORD *)&buf[16] = v20;
  uint64_t v23 = v21;
  (*(void (**)(unsigned char *__return_ptr, AUScotty *, uint64_t, void))(*(void *)this + 392))(v17, this, 2, 0);
  long long v19 = *(_OWORD *)v17;
  long long v20 = *(_OWORD *)&v17[16];
  uint64_t v21 = v18;
  *(_OWORD *)&v17[8] = xmmword_1BB8727B0;
  *(_DWORD *)&v17[24] = 4;
  *(_DWORD *)&v17[28] = v4;
  uint64_t v18 = 32;
  uint64_t v12 = *(void *)buf;
  long long v13 = xmmword_1BB8727B0;
  int v14 = 4;
  int v15 = v5;
  uint64_t v16 = 32;
  *(void *)__int16 v17 = *(void *)buf;
  uint64_t v6 = (*(uint64_t (**)(AUScotty *, uint64_t, void, unsigned char *, unsigned char *))(*(void *)this + 400))(this, 1, 0, buf, v17);
  if (v6)
  {
    if (getScottyLog(void)::onceToken != -1) {
      dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_33998);
    }
    __int16 v7 = getScottyLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      __int16 v8 = (void *)((char *)this + 528);
      if (*((char *)this + 551) < 0) {
        __int16 v8 = (void *)*v8;
      }
      *(_DWORD *)vDSP_Length v24 = 136315650;
      __int16 v25 = v8;
      __int16 v26 = 2080;
      uint64_t v27 = "Initialize";
      __int16 v28 = 1024;
      LODWORD(v29) = v6;
      uint64_t v9 = "[%s|%s] Error with input stream format with error code %d";
LABEL_21:
      _os_log_error_impl(&dword_1BB0CE000, v7, OS_LOG_TYPE_ERROR, v9, v24, 0x1Cu);
    }
  }
  else
  {
    uint64_t v6 = (*(uint64_t (**)(AUScotty *, uint64_t, void, long long *, uint64_t *))(*(void *)this + 400))(this, 2, 0, &v19, &v12);
    if (!v6)
    {
      ausdk::AUScope::SafeGetElement((AUScotty *)((char *)this + 128), 0);
      operator new();
    }
    if (getScottyLog(void)::onceToken != -1) {
      dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_33998);
    }
    __int16 v7 = getScottyLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = (void *)((char *)this + 528);
      if (*((char *)this + 551) < 0) {
        uint64_t v10 = (void *)*v10;
      }
      *(_DWORD *)vDSP_Length v24 = 136315650;
      __int16 v25 = v10;
      __int16 v26 = 2080;
      uint64_t v27 = "Initialize";
      __int16 v28 = 1024;
      LODWORD(v29) = v6;
      uint64_t v9 = "[%s|%s] Error with output stream format with error code %d";
      goto LABEL_21;
    }
  }
  return v6;
}

void sub_1BB4350A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v45 = 0;
  uint64_t v46 = (void *)((char *)v39 + 2432);
  while (1)
  {
    uint64_t v47 = (void *)v46[v45];
    v46[v45] = 0;
    if (v47) {
      std::default_delete<AllPassComb>::operator()[abi:ne180100](v47);
    }
    if (--v45 == -3)
    {
      uint64_t v48 = 0;
      long long v49 = (void *)((char *)v39 + 2408);
      while (1)
      {
        long long v50 = (void *)v49[v48];
        v49[v48] = 0;
        if (v50) {
          std::default_delete<AllPassComb>::operator()[abi:ne180100](v50);
        }
        if (--v48 == -3)
        {
          uint64_t v51 = 0;
          uint64_t v52 = (void *)((char *)v39 + 2384);
          while (1)
          {
            unsigned int v53 = (void *)v52[v51];
            v52[v51] = 0;
            if (v53) {
              std::default_delete<AllPassComb>::operator()[abi:ne180100](v53);
            }
            if (--v51 == -3)
            {
              uint64_t v54 = 0;
              unsigned int v55 = (void *)((char *)v39 + 2360);
              while (1)
              {
                unsigned int v56 = (void *)v55[v54];
                v55[v54] = 0;
                if (v56) {
                  std::default_delete<AllPassComb>::operator()[abi:ne180100](v56);
                }
                if (--v54 == -3)
                {
                  uint64_t v57 = 0;
                  uint64_t v58 = (void *)((char *)v39 + 2336);
                  while (1)
                  {
                    uint64_t v59 = (void *)v58[v57];
                    v58[v57] = 0;
                    if (v59) {
                      std::default_delete<AllPassComb>::operator()[abi:ne180100](v59);
                    }
                    if (--v57 == -3)
                    {
                      uint64_t v60 = 0;
                      unsigned int v61 = (void *)((char *)v39 + 2312);
                      while (1)
                      {
                        vDSP_Length v62 = (void *)v61[v60];
                        v61[v60] = 0;
                        if (v62) {
                          std::default_delete<AllPassComb>::operator()[abi:ne180100](v62);
                        }
                        if (--v60 == -3)
                        {
                          float v63 = (void *)*((void *)v39 + 284);
                          if (v63)
                          {
                            *((void *)v39 + 285) = v63;
                            operator delete(v63);
                          }
                          float v64 = (void *)*((void *)v39 + 281);
                          if (v64)
                          {
                            *((void *)v39 + 282) = v64;
                            operator delete(v64);
                          }
                          uint64_t v65 = *((void *)v39 + 280);
                          *((void *)v39 + 280) = 0;
                          if (v65) {
                            (*(void (**)(uint64_t))(*(void *)v65 + 8))(v65);
                          }
                          uint64_t v66 = *((void *)v39 + 279);
                          *((void *)v39 + 279) = 0;
                          if (v66) {
                            (*(void (**)(uint64_t))(*(void *)v66 + 8))(v66);
                          }
                          uint64_t v67 = *((void *)v39 + 278);
                          *((void *)v39 + 278) = 0;
                          if (v67) {
                            (*(void (**)(uint64_t))(*(void *)v67 + 8))(v67);
                          }
                          uint64_t v68 = *((void *)v39 + 277);
                          *((void *)v39 + 277) = 0;
                          if (v68) {
                            (*(void (**)(uint64_t))(*(void *)v68 + 8))(v68);
                          }
                          uint64_t v69 = *((void *)v39 + 276);
                          *((void *)v39 + 276) = 0;
                          if (v69) {
                            (*(void (**)(uint64_t))(*(void *)v69 + 8))(v69);
                          }
                          uint64_t v70 = *((void *)v39 + 275);
                          *((void *)v39 + 275) = 0;
                          if (v70) {
                            (*(void (**)(uint64_t))(*(void *)v70 + 8))(v70);
                          }
                          uint64_t v71 = *((void *)v39 + 274);
                          *((void *)v39 + 274) = 0;
                          if (v71) {
                            (*(void (**)(uint64_t))(*(void *)v71 + 8))(v71);
                          }
                          uint64_t v72 = *v40;
                          *uint64_t v40 = 0;
                          if (v72) {
                            (*(void (**)(uint64_t))(*(void *)v72 + 8))(v72);
                          }
                          uint64_t v73 = 0;
                          while (1)
                          {
                            uint64_t v74 = *(void **)((char *)v39 + v73 + 1904);
                            if (v74)
                            {
                              *(void *)((char *)v39 + v73 + 1912) = v74;
                              operator delete(v74);
                            }
                            v73 -= 24;
                            if (v73 == -96)
                            {
                              ScottySTFTUpmixer::STFT_tables_t::~STFT_tables_t(v41);
                              ScottySTFTUpmixer::STFT_state_t::~STFT_state_t(v43);
                              uint64_t v75 = *v42;
                              *uint64_t v42 = 0;
                              if (v75) {
                                MultiRadixFFT_Dispose(v75);
                              }
                              ScottyUpmixer::~ScottyUpmixer(v39);
                              if (a32 < 0) {
                                operator delete(__p);
                              }
                              MEMORY[0x1C185D370](v39, 0x10F3C406FF32ED7);
                              _Unwind_Resume(a1);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void AUScotty::~AUScotty(AUScotty *this)
{
  AUScotty::~AUScotty(this);

  JUMPOUT(0x1C185D370);
}

{
  NSObject *v2;
  void *v3;
  uint64_t v4;
  int v5;
  void *v6;
  __int16 v7;
  const char *v8;
  uint64_t v9;

  uint64_t v9 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1F14AD7F8;
  if (getScottyLog(void)::onceToken != -1) {
    dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_33998);
  }
  char v2 = getScottyLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v3 = (void *)((char *)this + 528);
    if (*((char *)this + 551) < 0) {
      unsigned int v3 = (void *)*v3;
    }
    int v5 = 136315394;
    uint64_t v6 = v3;
    __int16 v7 = 2080;
    __int16 v8 = "~AUScotty";
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEFAULT, "[%s|%s] Destructing", (uint8_t *)&v5, 0x16u);
  }
  int v4 = *((void *)this + 91);
  *((void *)this + 91) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  if (*((char *)this + 551) < 0) {
    operator delete(*((void **)this + 66));
  }
  ausdk::AUBase::~AUBase(this);
}

uint64_t AUAnomalyDetection::SupportedNumChannels(AUAnomalyDetection *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUAnomalyDetection::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 1;
}

BOOL AUAnomalyDetection::StreamFormatWritable(AUAnomalyDetection *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t ausdk::AUBase::SupportsTail(ausdk::AUBase *this)
{
  return 0;
}

uint64_t AUAnomalyDetection::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result = ausdk::AUBase::RestoreState(this, a2);
  if (!result) {
    ++*((_DWORD *)this + 133);
  }
  return result;
}

uint64_t AUAnomalyDetection::GetParameterInfo(AUAnomalyDetection *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  buffer->AudioUnitParameterOptions flags = 0x40000000;
  buffer->unitName = 0;
  if (a2) {
    return 4294956418;
  }
  if (a3 > 6) {
    return 4294956430;
  }
  CFStringRef v6 = *(&off_1E623D848 + a3);
  AudioUnitParameterUnit v7 = dword_1BB8952F4[a3];
  AudioUnitParameterValue v8 = flt_1BB895310[a3];
  AudioUnitParameterValue v9 = flt_1BB89532C[a3];
  AudioUnitParameterValue v10 = flt_1BB895348[a3];
  int v11 = dword_1BB895364[a3];
  buffer->cfNameString = v6;
  buffer->AudioUnitParameterOptions flags = 1207959552;
  CFStringGetCString(v6, buffer->name, 52, 0x8000100u);
  uint64_t result = 0;
  buffer->unit = v7;
  buffer->minCFNumberRef Value = v8;
  buffer->maxCFNumberRef Value = v9;
  buffer->defaultCFNumberRef Value = v10;
  buffer->flags |= v11;
  return result;
}

uint64_t AUAnomalyDetection::GetParameterList(AUAnomalyDetection *this, int a2, unsigned int *a3, unsigned int *a4)
{
  if (a2) {
    return 4294956430;
  }
  if (a3)
  {
    *(_OWORD *)a3 = xmmword_1BB8727D0;
    *((void *)a3 + 2) = 0x500000004;
    a3[6] = 6;
  }
  uint64_t result = 0;
  *a4 = 7;
  return result;
}

BOOL AUAnomalyDetection::BusCountWritable(AUAnomalyDetection *this, int a2)
{
  return (a2 - 1) < 2;
}

uint64_t AUAnomalyDetection::Render(AUAnomalyDetection *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  void v28[3] = *MEMORY[0x1E4F143B8];
  AudioUnitParameterValue v8 = (AUAnomalyDetection *)((char *)this + 80);
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUAnomalyDetection *)((char *)this + 80), 0);
  uint64_t v10 = ausdk::AUScope::SafeGetElement((AUAnomalyDetection *)((char *)this + 128), 0);
  uint64_t v11 = ausdk::AUScope::GetElement(v8, 0);
  if (!v11 || !*(_DWORD *)(v11 + 172)) {
    return 4294956420;
  }
  uint64_t v12 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 0);
  uint64_t v13 = ausdk::AUInputElement::PullInput(v12, a2, a3, 0, a4);
  if (!v13)
  {
    uint64_t BufferList = (AudioBufferList *)ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144));
    ausdk::AUBufferList::CopyBufferContentsTo((void *)(Element + 144), BufferList);
  }
  uint64_t v15 = ausdk::AUScope::GetElement(v8, 1u);
  if (v15 && *(_DWORD *)(v15 + 172))
  {
    uint64_t v16 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 1u);
    uint64_t v13 = ausdk::AUInputElement::PullInput(v16, a2, a3, 1, a4);
    if (v13) {
      return v13;
    }
    uint64_t v17 = ausdk::AUScope::SafeGetElement(v8, 1u);
    uint64_t v18 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v17 + 144));
  }
  else
  {
    uint64_t v18 = 0;
  }
  uint64_t v20 = ausdk::AUScope::GetElement(v8, 2u);
  if (v20 && *(_DWORD *)(v20 + 172))
  {
    uint64_t v21 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 2u);
    uint64_t v13 = ausdk::AUInputElement::PullInput(v21, a2, a3, 2, a4);
    if (v13) {
      return v13;
    }
    uint64_t v22 = ausdk::AUScope::SafeGetElement(v8, 2u);
    uint64_t v23 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v22 + 144));
  }
  else
  {
    uint64_t v23 = 0;
  }
  uint64_t v24 = ausdk::AUScope::GetElement(v8, 1u);
  if (v24)
  {
    if (*(_DWORD *)(v24 + 172))
    {
      uint64_t v25 = ausdk::AUScope::GetElement(v8, 2u);
      if (v25)
      {
        if (*(_DWORD *)(v25 + 172))
        {
          uint64_t v26 = ausdk::AUScope::SafeGetElement(v8, 0);
          v28[0] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v26 + 144));
          v28[1] = v18;
          v28[2] = v23;
          uint64_t v27 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144));
          return (*(uint64_t (**)(AUAnomalyDetection *, unsigned int *, uint64_t, uint64_t, void *, uint64_t, uint64_t *))(*(void *)this + 184))(this, a2, a4, 3, v28, 1, &v27);
        }
      }
    }
  }
  return v13;
}

uint64_t AUAnomalyDetection::ProcessMultipleBufferLists(AUAnomalyDetection *this, unsigned int *a2, unsigned int a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  AudioUnitParameterValue v9 = (const float **)*a5;
  uint64_t v10 = a5[1];
  uint64_t v11 = a5[2];
  uint64_t v12 = (float **)*a7;
  uint64_t v13 = (AUAnomalyDetection *)((char *)this + 32);
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUAnomalyDetection *)((char *)this + 80), 1u);
  uint64_t v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v13, 0);
  *((float *)this + 144) = ausdk::AUElement::GetParameter(v15, 4u);
  size_t v16 = *((unsigned int *)v12 + 3);
  if (!*((unsigned char *)this + 528))
  {
    int v20 = *(_DWORD *)v9;
    UInt32 mNumberBuffers = v10->mNumberBuffers;
    *((_DWORD *)this + 139) = 0;
    if (v20 != mNumberBuffers)
    {
      uint64_t v19 = 4294956428;
      goto LABEL_36;
    }
    unsigned int v53 = v13;
    uint64_t v54 = v10;
    __N_4 = v9;
    unsigned int __N = a3;
    if (*(_DWORD *)(Element + 108))
    {
      unint64_t v22 = 0;
      p_int mData = (const float **)&v10->mBuffers[0].mData;
      uint64_t v24 = __N_4 + 2;
      while (1)
      {
        uint64_t v25 = *v24;
        uint64_t v26 = *p_mData;
        uint64_t __C = 0;
        vDSP_svesq(v25, 1, (float *)&__C + 1, __N);
        vDSP_svesq(v26, 1, (float *)&__C, __N);
        float v27 = *(float *)&__C;
        if (fabsf(*(float *)&__C) == INFINITY) {
          break;
        }
        float v28 = *((float *)&__C + 1) + 1.0e-20;
        float v29 = log10f(v28) * 10.0;
        float v30 = v27 + 1.0e-20;
        if ((float)((float)(log10f(v30) * 10.0) - v29) > *((float *)this + 138)) {
          break;
        }
        ++v22;
        p_mData += 2;
        v24 += 2;
        if (v22 >= *(unsigned int *)(Element + 108)) {
          goto LABEL_15;
        }
      }
      *((_DWORD *)this + 139) = 1;
    }
LABEL_15:
    if (*((_DWORD *)this + 142))
    {
      int v31 = *((_DWORD *)this + 139);
    }
    else
    {
      UInt32 v34 = v11->mNumberBuffers;
      int v31 = *((_DWORD *)this + 139);
      unsigned int v32 = __N;
      unsigned int v33 = __N_4;
      if (v11->mNumberBuffers <= *(_DWORD *)v12) {
        goto LABEL_27;
      }
      if (v31) {
        goto LABEL_28;
      }
      int v31 = *(_DWORD *)__N_4;
      uint64_t v52 = (float *)*((void *)this + 73);
      uint64_t __C = 0;
      float v57 = 0.0;
      if (!v31)
      {
LABEL_27:
        if (!v31)
        {
          if (*(_DWORD *)v12)
          {
            unint64_t v47 = 0;
            uint64_t v48 = 2;
            do
            {
              memcpy(v12[v48], *(const void **)((char *)&v11->mNumberBuffers + v48 * 8), v16);
              ++v47;
              v48 += 2;
            }
            while (v47 < *(unsigned int *)v12);
          }
          goto LABEL_35;
        }
LABEL_28:
        vDSP_vsmul(v33[2], 1, (const float *)this + 140, v12[2], 1, v32);
        if (*(_DWORD *)v12 >= 2u)
        {
          unint64_t v45 = 1;
          uint64_t v46 = 4;
          do
          {
            bzero(v12[v46], v16);
            ++v45;
            v46 += 2;
          }
          while (v45 < *(unsigned int *)v12);
        }
LABEL_35:
        uint64_t v19 = 0;
        goto LABEL_36;
      }
      unsigned int v35 = 0;
      uint64_t v51 = (char *)v11 + 16 * (int)(v34 - v31);
      uint64_t v36 = 2;
      while (1)
      {
        unint64_t v37 = v33[v36];
        uint64_t v38 = *(const float **)((char *)&v54->mNumberBuffers + v36 * 8);
        vDSP_vadd(v38, 1, *(const float **)&v51[v36 * 8], 1, v52, 1, __N);
        vDSP_svesq(v37, 1, (float *)&__C + 1, __N);
        vDSP_svesq(v52, 1, (float *)&__C, __N);
        vDSP_svesq(v38, 1, &v57, __N);
        float v39 = *((float *)&__C + 1) + 1.0e-20;
        float v40 = log10f(v39) * 10.0;
        *((float *)&__C + 1) = v40;
        float v41 = v57 + 1.0e-20;
        float v42 = log10f(v41) * 10.0;
        float v57 = v42;
        float v43 = *(float *)&__C + 1.0e-20;
        *(float *)&uint64_t __C = log10f(v43) * 10.0;
        float v44 = *((float *)this + 143);
        if (vabds_f32(v40, *(float *)&__C) >= v44 && (*((float *)this + 144) != 1.0 || vabds_f32(v40, v42) >= v44)) {
          break;
        }
        *((_DWORD *)this + 139) = 0;
        unsigned int v33 = __N_4;
        ++v35;
        v36 += 2;
        if (*(_DWORD *)__N_4 <= v35)
        {
          int v31 = 0;
          uint64_t v13 = v53;
          unsigned int v32 = __N;
          goto LABEL_27;
        }
      }
      int v31 = 1;
      *((_DWORD *)this + 139) = 1;
    }
    uint64_t v13 = v53;
    unsigned int v32 = __N;
    unsigned int v33 = __N_4;
    goto LABEL_27;
  }
  if (*(_DWORD *)v12)
  {
    unint64_t v17 = 0;
    uint64_t v18 = 2;
    do
    {
      memcpy(v12[v18], *(const void **)((char *)&v11->mNumberBuffers + v18 * 8), v16);
      ++v17;
      v18 += 2;
    }
    while (v17 < *(unsigned int *)v12);
  }
  uint64_t v19 = 0;
  *((_DWORD *)this + 139) = 0;
LABEL_36:
  long long v49 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v13, 0);
  ausdk::AUElement::SetParameter(v49, 1u, (float)*((unsigned int *)this + 139), 0);
  return v19;
}

uint64_t AUAnomalyDetection::CanScheduleParameters(AUAnomalyDetection *this)
{
  return 0;
}

uint64_t AUAnomalyDetection::SetParameter(AUAnomalyDetection *this, unsigned int a2, int a3, float a4)
{
  if (a3) {
    return 4294956418;
  }
  ++*((_DWORD *)this + 133);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUAnomalyDetection *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(Element, a2, a4, 0);
  return 0;
}

uint64_t AUAnomalyDetection::SetProperty(AUAnomalyDetection *this, int a2, int a3, unsigned int a4, unsigned char *a5)
{
  if (a3) {
    return 4294956417;
  }
  if (a2 == 3700)
  {
    uint64_t result = 0;
    *((unsigned char *)this + 376) = *a5;
  }
  else
  {
    if (a2 != 21) {
      return 4294956417;
    }
    uint64_t result = 0;
    *((unsigned char *)this + 528) = *(_DWORD *)a5 != 0;
  }
  return result;
}

uint64_t AUAnomalyDetection::GetProperty(AUAnomalyDetection *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  if (a3) {
    return 4294956417;
  }
  if (a2 == 3700)
  {
    CFStringRef v6 = (unsigned __int8 *)this + 376;
  }
  else
  {
    if (a2 != 21) {
      return 4294956417;
    }
    CFStringRef v6 = (unsigned __int8 *)this + 528;
  }
  uint64_t result = 0;
  *a5 = *v6;
  return result;
}

uint64_t AUAnomalyDetection::GetPropertyInfo(AUAnomalyDetection *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3 || a2 != 3700 && a2 != 21) {
    return 4294956417;
  }
  uint64_t result = 0;
  *a6 = 1;
  *a5 = 4;
  return result;
}

uint64_t AUAnomalyDetection::Reset(AUAnomalyDetection *this)
{
  return 0;
}

uint64_t AUAnomalyDetection::Initialize(AUAnomalyDetection *this)
{
  char v2 = AUAnomalyDetectionLogScope();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)AudioChannelLayout buf = 0;
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEFAULT, "Initialize.", buf, 2u);
  }
  uint64_t v3 = *((void *)this + 15);
  if (v3) {
    LODWORD(v4) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  else {
    uint64_t v4 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
  }
  uint64_t v5 = *((void *)this + 21);
  if (v5) {
    LODWORD(v6) = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  else {
    uint64_t v6 = (*((void *)this + 19) - *((void *)this + 18)) >> 3;
  }
  unsigned int v7 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUAnomalyDetection *)((char *)this + 80), 2u) + 108);
  if (v7 < *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUAnomalyDetection *)((char *)this + 128), 0) + 108)) {
    return 4294956428;
  }
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUAnomalyDetection *)((char *)this + 80), 0);
  uint64_t v9 = ausdk::AUScope::SafeGetElement((AUAnomalyDetection *)((char *)this + 80), 1u);
  *((_DWORD *)this + 136) = *(_DWORD *)(Element + 108);
  *((_DWORD *)this + 137) = *(_DWORD *)(v9 + 108);
  *((_DWORD *)this + 135) = *(double *)(Element + 80);
  unint64_t v10 = *((unsigned int *)this + 84);
  int v28 = 0;
  std::vector<float>::assign((char **)this + 73, v10, &v28);
  if (*((_DWORD *)this + 136) != *((_DWORD *)this + 137)) {
    return 4294956428;
  }
  if (v4)
  {
    unsigned int v11 = 0;
    do
    {
      uint64_t v12 = ausdk::AUScope::SafeGetElement((AUAnomalyDetection *)((char *)this + 80), v11);
      LODWORD(v13) = *((_DWORD *)this + 135);
      if (*(double *)(v12 + 80) != (double)v13) {
        return 4294956428;
      }
    }
    while (v4 != ++v11);
  }
  if (v6)
  {
    unsigned int v14 = 0;
    do
    {
      uint64_t v15 = ausdk::AUScope::SafeGetElement((AUAnomalyDetection *)((char *)this + 128), v14);
      LODWORD(v16) = *((_DWORD *)this + 135);
      if (*(double *)(v15 + 80) != (double)v16) {
        return 4294956428;
      }
    }
    while (v6 != ++v14);
  }
  unint64_t v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUAnomalyDetection *)((char *)this + 32), 0);
  *((float *)this + 138) = ausdk::AUElement::GetParameter(v17, 0);
  uint64_t v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUAnomalyDetection *)((char *)this + 32), 0);
  *((_DWORD *)this + 139) = ausdk::AUElement::GetParameter(v18, 1u);
  uint64_t v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUAnomalyDetection *)((char *)this + 32), 0);
  *((float *)this + 140) = ausdk::AUElement::GetParameter(v19, 2u);
  int v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUAnomalyDetection *)((char *)this + 32), 0);
  *((float *)this + 141) = ausdk::AUElement::GetParameter(v20, 3u);
  uint64_t v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUAnomalyDetection *)((char *)this + 32), 0);
  *((float *)this + 144) = ausdk::AUElement::GetParameter(v21, 4u);
  unint64_t v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUAnomalyDetection *)((char *)this + 32), 0);
  *((float *)this + 143) = ausdk::AUElement::GetParameter(v22, 5u);
  uint64_t v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUAnomalyDetection *)((char *)this + 32), 0);
  *((_DWORD *)this + 142) = ausdk::AUElement::GetParameter(v23, 6u);
  *((_DWORD *)this + 134) = *((_DWORD *)this + 133);
  (*(void (**)(AUAnomalyDetection *, void, void))(*(void *)this + 72))(this, 0, 0);
  uint64_t v24 = AUAnomalyDetectionLogScope();
  BOOL v25 = os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v25)
  {
    *(_WORD *)float v27 = 0;
    _os_log_impl(&dword_1BB0CE000, v24, OS_LOG_TYPE_DEFAULT, "Successfully initialized.", v27, 2u);
    return 0;
  }
  return result;
}

uint64_t AUAnomalyDetectionLogScope(void)
{
  UInt32 v0 = &unk_1E9F7E000;
  {
    UInt32 v0 = (void *)&unk_1E9F7E000;
    if (v2)
    {
      AUAnomalyDetectionLogScope(void)::gLog = (uint64_t)os_log_create("com.apple.coreaudio", " AUAnomalyDetection");
      UInt32 v0 = (void *)&unk_1E9F7E000;
    }
  }
  return v0[320];
}

void AUAnomalyDetection::~AUAnomalyDetection(AUAnomalyDetection *this)
{
  AUAnomalyDetection::~AUAnomalyDetection(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F14ADA48;
  int v2 = (void *)*((void *)this + 73);
  if (v2)
  {
    *((void *)this + 74) = v2;
    operator delete(v2);
  }

  ausdk::AUBase::~AUBase(this);
}

void CmhBEAM2NOpt::CmhBEAM2NOpt(CmhBEAM2NOpt *this)
{
  uint64_t v1 = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((void *)this + 20) = 0;
  *((void *)this + 31) = 0;
  *((void *)this + 34) = 0;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *((void *)this + 29) = 0;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((void *)this + 72) = 0;
  *((void *)this + 73) = 0;
  *((_DWORD *)this + 120) = 0;
  *((_OWORD *)this + 26) = 0u;
  *((void *)this + 61) = 0x100000000;
  *((_DWORD *)this + 124) = 0;
  *((_OWORD *)this + 38) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *((_OWORD *)this + 40) = 0u;
  *((_OWORD *)this + 41) = 0u;
  *((_OWORD *)this + 42) = 0u;
  *((_OWORD *)this + 43) = 0u;
  *((_OWORD *)this + 44) = 0u;
  *((_OWORD *)this + 45) = 0u;
  *((_OWORD *)this + 46) = 0u;
  *((_OWORD *)this + 47) = 0u;
  *((void *)this + 96) = 0;
  do
  {
    *(_DWORD *)((char *)this + v1 * 4 + 500) = MC_default_param[v1];
    ++v1;
  }
  while ((v1 * 4) != 76);
  *((_OWORD *)this + 49) = 0u;
  *((_OWORD *)this + 50) = 0u;
  *((void *)this + 103) = 0;
  operator new[]();
}

void sub_1BB436534(_Unwind_Exception *a1)
{
  CmhMicCheck::deallocate_memory(v1 + 464);
  _Unwind_Resume(a1);
}

uint64_t CmhBEAM2NOpt::deallocate_memory(uint64_t this)
{
  if (*(_DWORD *)this)
  {
    uint64_t v1 = this;
    *(_DWORD *)this = 0;
    if (*(void *)(this + 160))
    {
      int v2 = *(_DWORD *)(this + 44);
      if (v2 < 1) {
        goto LABEL_9;
      }
      for (uint64_t i = 0; i < v2; ++i)
      {
        uint64_t v4 = *(void *)(*(void *)(v1 + 160) + 8 * i);
        if (v4)
        {
          MEMORY[0x1C185D340](v4, 0x1000C8052888210);
          int v2 = *(_DWORD *)(v1 + 44);
        }
      }
      if (*(void *)(v1 + 160)) {
LABEL_9:
      }
        MEMORY[0x1C185D340]();
      *(void *)(v1 + 160) = 0;
    }
    uint64_t v5 = 0;
    char v6 = 1;
    do
    {
      char v7 = v6;
      uint64_t v8 = v1 + 16 * v5;
      uint64_t v11 = *(void *)(v8 + 168);
      unint64_t v10 = (void *)(v8 + 168);
      uint64_t v9 = v11;
      if (v11) {
        MEMORY[0x1C185D340](v9, 0x1000C8052888210);
      }
      char v6 = 0;
      *unint64_t v10 = 0;
      v10[1] = 0;
      uint64_t v5 = 1;
    }
    while ((v7 & 1) != 0);
    if (*(void *)(v1 + 408))
    {
      if (*(int *)(v1 + 8) < 1) {
        goto LABEL_36;
      }
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      do
      {
        uint64_t v14 = *(void *)(v1 + 408);
        uint64_t v15 = *(void *)(v14 + v12);
        if (v15)
        {
          MEMORY[0x1C185D340](v15, 0x1000C8052888210);
          uint64_t v14 = *(void *)(v1 + 408);
          unint64_t v16 = (void *)(v14 + v12);
          *unint64_t v16 = 0;
          v16[1] = 0;
        }
        uint64_t v17 = *(void *)(v14 + v12 + 16);
        if (v17)
        {
          MEMORY[0x1C185D340](v17, 0x1000C8052888210);
          uint64_t v14 = *(void *)(v1 + 408);
        }
        uint64_t v18 = *(void *)(v14 + v12 + 24);
        if (v18)
        {
          MEMORY[0x1C185D340](v18, 0x1000C8052888210);
          uint64_t v14 = *(void *)(v1 + 408);
        }
        uint64_t v19 = *(void *)(v14 + v12 + 32);
        if (v19)
        {
          MEMORY[0x1C185D340](v19, 0x1000C8052888210);
          uint64_t v14 = *(void *)(v1 + 408);
        }
        uint64_t v20 = *(void *)(v14 + v12 + 40);
        if (v20)
        {
          MEMORY[0x1C185D340](v20, 0x1000C8052888210);
          uint64_t v14 = *(void *)(v1 + 408);
        }
        uint64_t v21 = *(void *)(v14 + v12 + 48);
        if (v21)
        {
          MEMORY[0x1C185D340](v21, 0x1000C8052888210);
          *(void *)(*(void *)(v1 + 408) + v12 + 48) = 0;
          uint64_t v14 = *(void *)(v1 + 408);
        }
        uint64_t v22 = *(void *)(v14 + v12 + 56);
        if (v22)
        {
          MEMORY[0x1C185D340](v22, 0x1000C8052888210);
          *(void *)(*(void *)(v1 + 408) + v12 + 56) = 0;
          uint64_t v14 = *(void *)(v1 + 408);
        }
        uint64_t v23 = *(void *)(v14 + v12 + 120);
        if (v23) {
          MEMORY[0x1C185D340](v23, 0x1000C8052888210);
        }
        ++v13;
        v12 += 136;
      }
      while (v13 < *(int *)(v1 + 8));
      if (*(void *)(v1 + 408)) {
LABEL_36:
      }
        MEMORY[0x1C185D340]();
      *(void *)(v1 + 408) = 0;
    }
    uint64_t v24 = *(void *)(v1 + 416);
    if (v24)
    {
      MEMORY[0x1C185D340](v24, 0x1000C8052888210);
      *(void *)(v1 + 416) = 0;
    }
    uint64_t v25 = *(void *)(v1 + 424);
    if (v25)
    {
      MEMORY[0x1C185D340](v25, 0x1000C8052888210);
      *(void *)(v1 + 424) = 0;
    }
    uint64_t v26 = *(void *)(v1 + 432);
    if (v26)
    {
      MEMORY[0x1C185D340](v26, 0x1000C8052888210);
      *(void *)(v1 + 432) = 0;
    }
    uint64_t v27 = *(void *)(v1 + 440);
    if (v27)
    {
      MEMORY[0x1C185D340](v27, 0x1000C8052888210);
      *(void *)(v1 + 440) = 0;
    }
    uint64_t v28 = *(void *)(v1 + 448);
    if (v28)
    {
      MEMORY[0x1C185D340](v28, 0x1000C8052888210);
      *(void *)(v1 + 448) = 0;
    }
    uint64_t v29 = *(void *)(v1 + 456);
    if (v29)
    {
      MEMORY[0x1C185D340](v29, 0x1000C8052888210);
      *(void *)(v1 + 456) = 0;
    }
    uint64_t v30 = *(void *)(v1 + 248);
    if (v30) {
      MEMORY[0x1C185D340](v30, 0x1000C8052888210);
    }
    uint64_t v31 = *(void *)(v1 + 296);
    if (v31) {
      MEMORY[0x1C185D340](v31, 0x1000C8052888210);
    }
    uint64_t v32 = *(void *)(v1 + 304);
    if (v32) {
      MEMORY[0x1C185D340](v32, 0x1000C8052888210);
    }
    uint64_t v33 = *(void *)(v1 + 312);
    if (v33) {
      MEMORY[0x1C185D340](v33, 0x1000C8052888210);
    }
    uint64_t v34 = *(void *)(v1 + 320);
    if (v34) {
      MEMORY[0x1C185D340](v34, 0x1000C8052888210);
    }
    uint64_t v35 = *(void *)(v1 + 352);
    if (v35) {
      MEMORY[0x1C185D340](v35, 0x1000C8052888210);
    }
    uint64_t v36 = *(void *)(v1 + 328);
    if (v36) {
      MEMORY[0x1C185D340](v36, 0x1000C8052888210);
    }
    uint64_t v37 = *(void *)(v1 + 336);
    if (v37) {
      MEMORY[0x1C185D340](v37, 0x1000C8052888210);
    }
    uint64_t v38 = *(void *)(v1 + 344);
    if (v38) {
      MEMORY[0x1C185D340](v38, 0x1000C8052888210);
    }
    uint64_t v39 = *(void *)(v1 + 200);
    if (v39)
    {
      MEMORY[0x1C185D340](v39, 0x1000C8052888210);
      uint64_t v40 = *(void *)(v1 + 208);
      if (v40) {
        MEMORY[0x1C185D340](v40, 0x1000C8052888210);
      }
    }
    uint64_t v41 = *(void *)(v1 + 216);
    if (v41)
    {
      MEMORY[0x1C185D340](v41, 0x1000C8052888210);
      uint64_t v42 = *(void *)(v1 + 224);
      if (v42) {
        MEMORY[0x1C185D340](v42, 0x1000C8052888210);
      }
    }
    float v43 = *(void **)(v1 + 232);
    if (v43)
    {
      if (*v43)
      {
        MEMORY[0x1C185D340](*v43, 0x1000C8052888210);
        float v43 = *(void **)(v1 + 232);
      }
      if (!v43[1] || (MEMORY[0x1C185D340](v43[1], 0x1000C8052888210), *(void *)(v1 + 232))) {
        MEMORY[0x1C185D340]();
      }
      *(void *)(v1 + 232) = 0;
    }
    float v44 = *(void **)(v1 + 96);
    if (v44)
    {
      if (*v44)
      {
        MEMORY[0x1C185D340](*v44, 0x1000C8052888210);
        float v44 = *(void **)(v1 + 96);
      }
      if (!v44[1] || (MEMORY[0x1C185D340](v44[1], 0x1000C8052888210), *(void *)(v1 + 96))) {
        MEMORY[0x1C185D340]();
      }
      *(void *)(v1 + 96) = 0;
    }
    unint64_t v45 = *(void **)(v1 + 104);
    if (v45)
    {
      if (*v45)
      {
        MEMORY[0x1C185D340](*v45, 0x1000C8052888210);
        unint64_t v45 = *(void **)(v1 + 104);
      }
      if (!v45[1] || (MEMORY[0x1C185D340](v45[1], 0x1000C8052888210), *(void *)(v1 + 104))) {
        MEMORY[0x1C185D340]();
      }
      *(void *)(v1 + 104) = 0;
    }
    uint64_t v46 = *(void **)(v1 + 112);
    if (v46)
    {
      if (*v46)
      {
        MEMORY[0x1C185D340](*v46, 0x1000C8052888210);
        uint64_t v46 = *(void **)(v1 + 112);
      }
      if (!v46[1] || (MEMORY[0x1C185D340](v46[1], 0x1000C8052888210), *(void *)(v1 + 112))) {
        MEMORY[0x1C185D340]();
      }
      *(void *)(v1 + 112) = 0;
    }
    uint64_t v47 = *(void *)(v1 + 272);
    if (v47) {
      MEMORY[0x1C185D340](v47, 0x1000C8052888210);
    }
    uint64_t v48 = *(void **)(v1 + 808);
    if (v48)
    {
      if (*v48)
      {
        MEMORY[0x1C185D340](*v48, 0x1000C8052888210);
        uint64_t v48 = *(void **)(v1 + 808);
      }
      if (!v48[1] || (MEMORY[0x1C185D340](v48[1], 0x1000C8052888210), *(void *)(v1 + 808))) {
        MEMORY[0x1C185D340]();
      }
      *(void *)(v1 + 808) = 0;
    }
    if (*(void *)(v1 + 784))
    {
      uint64_t v49 = 0;
      char v50 = 1;
      do
      {
        char v51 = v50;
        uint64_t v52 = *(void *)(*(void *)(v1 + 784) + 8 * v49);
        if (v52) {
          MEMORY[0x1C185D340](v52, 0x1000C8052888210);
        }
        char v50 = 0;
        uint64_t v49 = 1;
      }
      while ((v51 & 1) != 0);
      uint64_t v53 = *(void *)(v1 + 784);
      if (v53) {
        MEMORY[0x1C185D340](v53, 0x80C80B8603338);
      }
      *(void *)(v1 + 784) = 0;
    }
    if (*(void *)(v1 + 792))
    {
      uint64_t v54 = 0;
      char v55 = 1;
      do
      {
        char v56 = v55;
        uint64_t v57 = *(void *)(*(void *)(v1 + 792) + 8 * v54);
        if (v57) {
          MEMORY[0x1C185D340](v57, 0x1000C8052888210);
        }
        char v55 = 0;
        uint64_t v54 = 1;
      }
      while ((v56 & 1) != 0);
      uint64_t v58 = *(void *)(v1 + 792);
      if (v58) {
        MEMORY[0x1C185D340](v58, 0x80C80B8603338);
      }
      *(void *)(v1 + 792) = 0;
    }
    this = *(void *)(v1 + 800);
    if (this)
    {
      if (*(void *)this)
      {
        MEMORY[0x1C185D340](*(void *)this, 0x1000C8052888210);
        this = *(void *)(v1 + 800);
      }
      if (!*(void *)(this + 8)
        || (MEMORY[0x1C185D340](*(void *)(this + 8), 0x1000C8052888210), (this = *(void *)(v1 + 800)) != 0))
      {
        this = MEMORY[0x1C185D340]();
      }
      *(void *)(v1 + 800) = 0;
    }
  }
  return this;
}

void CmhBEAM2NOpt::~CmhBEAM2NOpt(CmhBEAM2NOpt *this)
{
  CmhBEAM2NOpt::deallocate_memory((uint64_t)this);
  uint64_t v2 = *((void *)this + 103);
  if (v2) {
    MEMORY[0x1C185D340](v2, 0x1000C8015A9971DLL);
  }
  CmhMicCheck::deallocate_memory((uint64_t)this + 464);
}

uint64_t CmhBEAM2NOpt::initialize(CmhBEAM2NOpt *this, int a2, int a3, int a4, int a5, int a6)
{
  CmhBEAM2NOpt::deallocate_memory((uint64_t)this);
  *((_DWORD *)this + 4) = a3;
  *((_DWORD *)this + 5) = a4;
  *((_DWORD *)this + 12) = a5;
  float v12 = (double)a5 * 0.001;
  *((float *)this + 13) = v12;
  *((_DWORD *)this + 2) = a6;
  *((_DWORD *)this + 3) = a2;
  if (a3 >= 0) {
    int v13 = a3;
  }
  else {
    int v13 = a3 + 1;
  }
  *((int32x2_t *)this + 3) = vadd_s32(vdup_n_s32(v13 >> 1), (int32x2_t)0x1FFFFFFFFLL);
  CmhBEAM2NOpt::deallocate_memory((uint64_t)this);
  if (*(_DWORD *)this)
  {
LABEL_5:
    CmhBEAM2NOpt::calc_cr_ci_vect(this, *((float **)this + 25), *((float **)this + 27));
    CmhBEAM2NOpt::calc_cr_ci_vect(this, *((float **)this + 26), *((float **)this + 28));
    *((void *)this + 7) = 0x40A0000041C00000;
    double v14 = __exp10(1.2);
    double v15 = __exp10(*((float *)this + 15) * 0.05);
    float v16 = *((float *)this + 13);
    int v18 = *((_DWORD *)this + 3);
    int v17 = *((_DWORD *)this + 4);
    if (v17 >= 0) {
      int v19 = *((_DWORD *)this + 4);
    }
    else {
      int v19 = v17 + 1;
    }
    int v20 = v19 >> 1;
    if (v17 >= -1)
    {
      uint64_t v21 = 0;
      float v22 = v16 * 6.28318531 * (double)v18 / (double)(343 * v17);
      float v23 = v14;
      uint64_t v24 = (uint64_t *)*((void *)this + 29);
      uint64_t v25 = *v24;
      uint64_t v26 = v24[1];
      while (1)
      {
        float v27 = sinf(v22 * (float)(int)v21);
        double v28 = (float)(v27 + v27);
        if (v28 > 0.032) {
          break;
        }
        double v28 = 0.032;
        double v29 = v23;
        if (v23 > 31.25) {
          goto LABEL_14;
        }
LABEL_15:
        float v30 = v29;
        *(float *)(v25 + 4 * v21) = v30;
        *(float *)(v26 + 4 * v21++) = v30;
        if (v20 + 1 == v21)
        {
          float v16 = *((float *)this + 13);
          goto LABEL_17;
        }
      }
      double v29 = v23;
      if (1.0 / v28 >= v23) {
        goto LABEL_15;
      }
LABEL_14:
      double v29 = 1.0 / v28;
      goto LABEL_15;
    }
LABEL_17:
    int v31 = vcvtmd_s64_f64(343.0 / (float)(v16 + v16) * 0.9 / (float)((float)v18 / (float)v17));
    int v32 = *((_DWORD *)this + 6);
    int v33 = v31 & ~(v31 >> 31);
    int v34 = v32 - 1;
    if (v32 > v33) {
      int v34 = v33;
    }
    *((_DWORD *)this + 64) = v34;
    *((_DWORD *)this + 8) = 24000;
    if (v34 <= v20)
    {
      float v35 = v15;
      uint64_t v36 = (uint64_t *)*((void *)this + 29);
      uint64_t v38 = *v36;
      uint64_t v37 = v36[1];
      int v39 = v20 - v34 + 1;
      uint64_t v40 = (float *)(v37 + 4 * v34);
      uint64_t v41 = (float *)(v38 + 4 * v34);
      do
      {
        float v42 = *v41;
        if (*v41 >= v35) {
          float v42 = v15;
        }
        *v41++ = v42;
        float v43 = *v40;
        if (*v40 >= v35) {
          float v43 = v15;
        }
        *v40++ = v43;
        --v39;
      }
      while (v39);
    }
    uint64_t v44 = *((unsigned int *)this + 7);
    if ((int)v44 >= 1)
    {
      unint64_t v45 = (int **)*((void *)this + 29);
      uint64_t v46 = *((void *)this + 12);
      uint64_t v47 = *v45;
      uint64_t v48 = v45[1];
      uint64_t v49 = *(_DWORD **)v46;
      char v50 = *(_DWORD **)(v46 + 8);
      uint64_t v51 = *((unsigned int *)this + 7);
      do
      {
        int v52 = *v47++;
        *v49++ = v52;
        int v53 = *v48++;
        *v50++ = v53;
        --v51;
      }
      while (v51);
      uint64_t v54 = (void **)*((void *)this + 13);
      size_t v55 = 4 * v44;
      memset_pattern16(*v54, &unk_1BB873A60, 4 * v44);
      memset_pattern16(v54[1], &unk_1BB873A60, v55);
      char v56 = (void **)*((void *)this + 14);
      memset_pattern16(*v56, &unk_1BB873A60, v55);
      memset_pattern16(v56[1], &unk_1BB873A60, v55);
    }
    if (*((int *)this + 2) <= 0)
    {
      double v73 = (double)(v18 / *((_DWORD *)this + 5));
    }
    else
    {
      uint64_t v57 = 0;
      uint64_t v58 = *((void *)this + 51);
      do
      {
        *(void *)(v58 + 136 * v57 + 64) = 0x3F0000003F000000;
        int v59 = *((_DWORD *)this + 4);
        if (v59 >= 0) {
          int v60 = *((_DWORD *)this + 4);
        }
        else {
          int v60 = v59 + 1;
        }
        int v61 = v60 >> 1;
        if (v59 < 2)
        {
          uint64_t v71 = *(_DWORD **)(v58 + 136 * v57 + 48);
        }
        else
        {
          uint64_t v62 = 0;
          float v63 = 32767.0 / (double)v59 * 0.0000305175781;
          uint64_t v64 = *(void *)(v58 + 136 * v57 + 16);
          do
            *(float *)(v64 + 4 * v62++) = v63;
          while (v61 != v62);
          uint64_t v65 = 0;
          uint64_t v66 = *(void *)(v58 + 136 * v57 + 24);
          do
            *(float *)(v66 + 4 * v65++) = v63;
          while (v61 != v65);
          uint64_t v67 = *(float **)(v58 + 136 * v57 + 32);
          int v68 = v61;
          do
          {
            *v67++ = v63;
            --v68;
          }
          while (v68);
          uint64_t v69 = *(float **)(v58 + 136 * v57 + 40);
          int v70 = v61;
          do
          {
            *v69++ = v63;
            --v70;
          }
          while (v70);
          uint64_t v71 = *(_DWORD **)(v58 + 136 * v57 + 48);
          memset_pattern16(v71, &unk_1BB87C2C0, 4 * (v61 - 1) + 4);
        }
        *uint64_t v71 = 0;
        bzero(*(void **)(v58 + 136 * v57 + 56), 4 * v61);
        uint64_t v58 = *((void *)this + 51);
        uint64_t v72 = v58 + 136 * v57;
        *(_DWORD *)(v72 + 76) = 1048600;
        *(_OWORD *)(v72 + 80) = xmmword_1BB87A880;
        *(_DWORD *)(v72 + 96) = 1065353216;
        double v73 = (double)(*((_DWORD *)this + 3) / *((_DWORD *)this + 5));
        long double v74 = exp(-1.0 / (v73 * 0.3));
        *(float *)&long double v74 = v74;
        *(int32x2_t *)(v72 + 100) = vdup_lane_s32(*(int32x2_t *)&v74, 0);
        ++v57;
      }
      while (v57 < *((int *)this + 2));
    }
    float v141 = exp(-1.0 / (v73 * 0.123745791));
    *((float *)this + 16) = v141;
    CmhBEAM2NOpt::calc_wng_beta_bound((void **)this, *((float *)this + 70));
    uint64_t v143 = *((unsigned int *)this + 6);
    *((_DWORD *)this + 93) = v143;
    *(void *)((char *)this + 364) = 0x3F0000003E800000;
    if ((int)v143 >= 1) {
      memset_pattern16(*((void **)this + 40), &unk_1BB873A60, 4 * v143);
    }
    uint64_t v144 = (float *)*((unsigned int *)this + 7);
    signed int v145 = *((_DWORD *)this + 3);
    int v146 = *((_DWORD *)this + 4);
    if ((int)v144 <= 0)
    {
      *(float *)v142.i32 = (float)v146;
    }
    else
    {
      *(float *)v142.i32 = (float)v146;
      uint64x2_t v147 = (uint64x2_t)vdupq_n_s64((unint64_t)v144 - 1);
      int32x2_t v148 = vdup_n_s32(v145);
      float32x2_t v149 = (float32x2_t)vdup_lane_s32(v142, 0);
      uint64_t v150 = ((unint64_t)v144 + 1) & 0x1FFFFFFFELL;
      int32x2_t v151 = (int32x2_t)0x100000000;
      int64x2_t v152 = (int64x2_t)xmmword_1BB872720;
      dev_t v153 = (float *)(*((void *)this + 43) + 4);
      float32x2_t v154 = (float32x2_t)vdup_n_s32(0xBA15CBEC);
      float32x2_t v155 = (float32x2_t)vdup_n_s32(0x3F524925u);
      __asm { FMOV            V16.2S, #0.75 }
      int64x2_t v161 = vdupq_n_s64(2uLL);
      do
      {
        int32x2_t v162 = vmovn_s64((int64x2_t)vcgeq_u64(v147, (uint64x2_t)v152));
        float32x2_t v163 = vminnm_f32(vmla_f32(v155, v154, vdiv_f32(vcvt_f32_s32(vmul_s32(v148, v151)), v149)), _D16);
        if (v162.i8[0]) {
          *(v153 - 1) = fmaxf(v163.f32[0], 0.25);
        }
        if (v162.i8[4]) {
          *dev_t v153 = fmaxf(v163.f32[1], 0.25);
        }
        int64x2_t v152 = vaddq_s64(v152, v161);
        int32x2_t v151 = vadd_s32(v151, (int32x2_t)0x200000002);
        v153 += 2;
        v150 -= 2;
      }
      while (v150);
    }
    CmhBEAM2NOpt::interpolateFrequencyVector((uint64_t)&model_env_tc_vector_attack_sec, (float *)0x41, *((void *)this + 42), 125.0, v144, (float)v145 / *(float *)v142.i32);
    unint64_t v164 = (float *)*((unsigned int *)this + 7);
    uint64_t v165 = *((void *)this + 42);
    if ((int)v164 >= 1)
    {
      BOOL v166 = (float *)*((void *)this + 41);
      long long v167 = (float *)*((void *)this + 42);
      uint64_t v168 = *((unsigned int *)this + 7);
      do
      {
        double v169 = 0.0;
        if (*v167 > 0.0) {
          double v169 = exp(-1.0 / (*v167 * (double)(*((_DWORD *)this + 3) / *((_DWORD *)this + 5))));
        }
        float v170 = v169;
        float *v166 = v170;
        v166 += 2;
        ++v167;
        --v168;
      }
      while (v168);
    }
    CmhBEAM2NOpt::interpolateFrequencyVector((uint64_t)&model_env_tc_vector_decay_sec, (float *)0x41, v165, 125.0, v164, (float)*((int *)this + 3) / (float)*((int *)this + 4));
    uint64_t v171 = *((unsigned int *)this + 7);
    if ((int)v171 >= 1)
    {
      uint64_t v172 = (float *)*((void *)this + 42);
      unint64_t v173 = (float *)(*((void *)this + 41) + 4);
      do
      {
        double v174 = 0.0;
        if (*v172 > 0.0) {
          double v174 = exp(-1.0 / (*v172 * (double)(*((_DWORD *)this + 3) / *((_DWORD *)this + 5))));
        }
        float v175 = v174;
        float *v173 = v175;
        v173 += 2;
        ++v172;
        --v171;
      }
      while (v171);
    }
    CmhBEAM2NOpt::loadRVSSSuppressionLimits(this);
    int v177 = *((_DWORD *)this + 3);
    int v178 = *((_DWORD *)this + 4);
    if (v177 >= 0) {
      int v179 = *((_DWORD *)this + 3);
    }
    else {
      int v179 = v177 + 1;
    }
    *((float *)this + 35) = (float)(v179 >> 1);
    *((float *)this + 96) = (float)*((int *)this + 7);
    *(float *)v176.i32 = (float)v177;
    int v180 = *((_DWORD *)this + 5);
    float __sz = (float)v177;
    float32x2_t v181 = vmul_n_f32(vdiv_f32((float32x2_t)0x441C4000443B8000, (float32x2_t)vdup_lane_s32(v176, 0)), (float)v178);
    float v264 = (float)v178;
    int8x8_t v182 = vmvn_s8((int8x8_t)vcgez_f32(v181));
    v183.i64[0] = v182.i32[0];
    v183.i64[1] = v182.i32[1];
    __asm
    {
      FMOV            V2.2D, #0.5
      FMOV            V3.2D, #-0.5
    }
    int32x2_t v186 = vmovn_s64(vcvtq_s64_f64(vaddq_f64((float64x2_t)vbslq_s8(v183, _Q3, _Q2), vcvtq_f64_f32(v181))));
    *((int32x2_t *)this + 104) = v186;
    *(float *)v182.i32 = (float)(2000.0 / (float)v177) * (float)v178;
    double v187 = *(float *)v182.i32;
    if (*(float *)v182.i32 >= 0.0) {
      double v188 = 0.5;
    }
    else {
      double v188 = -0.5;
    }
    *((_DWORD *)this + 210) = (int)(v188 + v187) - v186.i32[1] + 1;
    *((_DWORD *)this + 211) = v178 / 2 - 1;
    double v189 = (double)(v177 / v180);
    float v190 = exp(-1.0 / (v189 * 0.123745791));
    *((float *)this + 212) = v190;
    float v191 = (float)(200.0 / __sz) * v264;
    double v192 = v191;
    if (v191 >= 0.0) {
      double v193 = 0.5;
    }
    else {
      double v193 = -0.5;
    }
    *((_DWORD *)this + 213) = (int)(v193 + v192);
    uint64_t v194 = *((void *)this + 103);
    float v195 = exp(-1.0 / (v189 * 0.01));
    float v196 = exp(-1.0 / (v189 * 0.1));
    float v197 = exp(-1.0 / (v189 * 0.03));
    long double v198 = exp(-1.0 / (v189 + v189));
    uint64_t v199 = 0;
    float v200 = v198;
    char v201 = 1;
    int32x2_t v202 = vdup_n_s32(0x39400000u);
    do
    {
      uint64_t v203 = v194 + 76 * v199;
      *(_DWORD *)uint64_t v203 = 0;
      char v204 = v201;
      *(float *)(v203 + 4) = v195;
      *(float *)(v203 + 8) = v196;
      *(_OWORD *)(v203 + 12) = xmmword_1BB87A890;
      *(_DWORD *)(v203 + 28) = 0;
      *(_DWORD *)(v203 + 32) = 0;
      *(float *)(v203 + 36) = v195;
      *(float *)(v203 + 40) = v197;
      *(int32x2_t *)(v203 + 48) = v202;
      *(float *)(v203 + 56) = v200;
      *(_OWORD *)(v203 + 60) = xmmword_1BB87A8A0;
      uint64_t v199 = 1;
      char v201 = 0;
    }
    while ((v204 & 1) != 0);
    *(_DWORD *)(v194 + 44) = 0;
    *(_DWORD *)(v194 + 120) = 1;
    CmhBEAM2NOpt::interpolateFrequencyVector((uint64_t)&sns_gain_table, (float *)0x3F, *((void *)this + 31), 125.0, (float *)*((unsigned int *)this + 6), __sz / v264);
    uint64_t v205 = *((unsigned int *)this + 2);
    uint64_t v206 = *((void *)this + 51);
    if ((int)v205 >= 1)
    {
      uint64_t v207 = 0;
      int v208 = *((_DWORD *)this + 6);
      do
      {
        *(void *)(v206 + 136 * v207 + 108) = 0x3F00000000000000;
        if (v208 >= 1)
        {
          int v209 = 0;
          uint64_t v210 = *(void *)(v206 + 136 * v207 + 120);
          do
            *(_DWORD *)(v210 + 4 * (unsigned __int16)v209++) = 1065353216;
          while (v208 > (unsigned __int16)v209);
        }
        *(void *)(v206 + 136 * v207++ + 128) = 0x3F8000003DE38E39;
      }
      while (v207 != v205);
    }
    *((_DWORD *)this + 60) = 1;
    *(void *)((char *)this + 260) = 0;
    *((_DWORD *)this + 94) = 0;
    *(void *)((char *)this + 396) = 0;
    *((_DWORD *)this + 101) = *(_DWORD *)(v206 + 108);
    int v211 = *((_DWORD *)this + 5);
    int v212 = *((_DWORD *)this + 3);
    int v213 = *((_DWORD *)this + 4) + (*((int *)this + 4) < 0);
    return CmhMicCheck::initialize((CmhBEAM2NOpt *)((char *)this + 464), v212, v211, (v213 >> 1) + 1, (float **)this + 25, (float **)this + 27);
  }
  else
  {
    *(_DWORD *)this = 1;
    LODWORD(v75) = *((_DWORD *)this + 2);
    if (is_mul_ok((int)v75, 0x88uLL)) {
      size_t v76 = 136 * (int)v75;
    }
    else {
      size_t v76 = -1;
    }
    uint64_t v77 = (char *)operator new[](v76, MEMORY[0x1E4FBA2D0]);
    if (v77)
    {
      if (v75)
      {
        uint64_t v78 = 136 * (int)v75;
        uint64_t v79 = v77 + 120;
        do
        {
          void *v79 = 0;
          *(_OWORD *)(v79 - 13) = 0uLL;
          *(_OWORD *)(v79 - 11) = 0uLL;
          *(_OWORD *)(v79 - 9) = 0uLL;
          v79 += 17;
          v78 -= 136;
        }
        while (v78);
      }
      *((void *)this + 51) = v77;
      uint64_t v80 = *((int *)this + 11);
      if ((int)v80 < 0) {
        size_t v81 = -1;
      }
      else {
        size_t v81 = 8 * v80;
      }
      long long v82 = (char *)operator new[](v81, MEMORY[0x1E4FBA2D0]);
      *((void *)this + 20) = v82;
      if (v82)
      {
        long long v83 = v82;
        bzero(v82, 8 * (int)v80);
        uint64_t v84 = *((unsigned int *)this + 4);
        if ((int)v80 <= 0)
        {
LABEL_68:
          uint64_t v89 = 0;
          if ((int)v84 < 0) {
            size_t v90 = -1;
          }
          else {
            size_t v90 = 4 * (int)v84;
          }
          if ((int)v84 >= 0) {
            int v91 = v84;
          }
          else {
            int v91 = v84 + 1;
          }
          unsigned int v92 = v91 >> 1;
          uint64_t v93 = (uint64_t)v91 >> 1;
          char v94 = 1;
          int v95 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
          while (1)
          {
            char v96 = v94;
            AudioBufferList v97 = (char *)operator new[](v90, v95);
            int v98 = (char *)this + 16 * v89;
            *((void *)v98 + 21) = v97;
            if (!v97) {
              break;
            }
            *((void *)v98 + 22) = &v97[4 * v93];
            bzero(v97, 4 * (int)v84);
            char v94 = 0;
            uint64_t v89 = 1;
            if ((v96 & 1) == 0)
            {
              if ((int)v75 < 1)
              {
LABEL_116:
                if ((int)v84 < -1) {
                  size_t v126 = -1;
                }
                else {
                  size_t v126 = 4 * v93;
                }
                char v127 = operator new[](v126, MEMORY[0x1E4FBA2D0]);
                *((void *)this + 52) = v127;
                if (v127)
                {
                  int v128 = operator new[](v126, MEMORY[0x1E4FBA2D0]);
                  *((void *)this + 53) = v128;
                  if (v128)
                  {
                    long long v129 = operator new[](v126, MEMORY[0x1E4FBA2D0]);
                    *((void *)this + 54) = v129;
                    if (v129)
                    {
                      long long v130 = operator new[](v126, MEMORY[0x1E4FBA2D0]);
                      *((void *)this + 55) = v130;
                      if (v130)
                      {
                        int v131 = operator new[](v126, MEMORY[0x1E4FBA2D0]);
                        *((void *)this + 56) = v131;
                        if (v131)
                        {
                          long long v132 = operator new[](v126, MEMORY[0x1E4FBA2D0]);
                          *((void *)this + 57) = v132;
                          if (v132)
                          {
                            uint64_t v133 = *((int *)this + 6);
                            size_t v134 = (int)v133 < 0 ? -1 : 4 * v133;
                            char v135 = operator new[](v134, MEMORY[0x1E4FBA2D0]);
                            *((void *)this + 31) = v135;
                            if (v135)
                            {
                              uint64_t v136 = v133;
                              if ((int)v133 < 1)
                              {
                                long long v215 = operator new[](v134, MEMORY[0x1E4FBA2D0]);
                                *((void *)this + 37) = v215;
                                if (!v215) {
                                  return 4294967294;
                                }
                                unint64_t v216 = operator new[](v134, MEMORY[0x1E4FBA2D0]);
                                *((void *)this + 38) = v216;
                                if (!v216) {
                                  return 4294967294;
                                }
                                unsigned int v217 = operator new[](v134, MEMORY[0x1E4FBA2D0]);
                                *((void *)this + 39) = v217;
                                if (!v217) {
                                  return 4294967294;
                                }
                                uint64_t v218 = operator new[](v134, MEMORY[0x1E4FBA2D0]);
                                *((void *)this + 40) = v218;
                                if (!v218) {
                                  return 4294967294;
                                }
                              }
                              else
                              {
                                bzero(v135, 4 * v133);
                                long long v137 = operator new[](v134, MEMORY[0x1E4FBA2D0]);
                                *((void *)this + 37) = v137;
                                if (!v137) {
                                  return 4294967294;
                                }
                                bzero(v137, 4 * v133);
                                int v138 = operator new[](v134, MEMORY[0x1E4FBA2D0]);
                                *((void *)this + 38) = v138;
                                if (!v138) {
                                  return 4294967294;
                                }
                                bzero(v138, 4 * v133);
                                char v139 = operator new[](v134, MEMORY[0x1E4FBA2D0]);
                                *((void *)this + 39) = v139;
                                if (!v139) {
                                  return 4294967294;
                                }
                                bzero(v139, 4 * v133);
                                CFTypeRef v140 = operator new[](v134, MEMORY[0x1E4FBA2D0]);
                                *((void *)this + 40) = v140;
                                if (!v140) {
                                  return 4294967294;
                                }
                                bzero(v140, 4 * v133);
                              }
                              uint64_t v219 = *((int *)this + 7);
                              if ((int)v219 < 0) {
                                size_t v220 = -1;
                              }
                              else {
                                size_t v220 = 8 * v219;
                              }
                              unint64_t v221 = operator new[](v220, MEMORY[0x1E4FBA2D0]);
                              *((void *)this + 41) = v221;
                              if (v221)
                              {
                                uint64_t v265 = v219;
                                if ((int)v219 >= 1) {
                                  bzero(v221, 4 * (2 * v219));
                                }
                                size_t v222 = (int)v219 < 0 ? -1 : 4 * v219;
                                size_t __sza = v222;
                                CFTypeRef v223 = operator new[](v222, MEMORY[0x1E4FBA2D0]);
                                *((void *)this + 42) = v223;
                                if (v223)
                                {
                                  if ((int)v219 < 1)
                                  {
                                    float v225 = operator new[](__sza, MEMORY[0x1E4FBA2D0]);
                                    *((void *)this + 44) = v225;
                                    if (!v225) {
                                      return 4294967294;
                                    }
                                  }
                                  else
                                  {
                                    bzero(v223, 4 * v219);
                                    unint64_t v224 = operator new[](__sza, MEMORY[0x1E4FBA2D0]);
                                    *((void *)this + 44) = v224;
                                    if (!v224) {
                                      return 4294967294;
                                    }
                                    bzero(v224, 4 * v219);
                                  }
                                  if ((int)v84 < -3) {
                                    size_t v226 = -1;
                                  }
                                  else {
                                    size_t v226 = 4 * (int)(v92 + 1);
                                  }
                                  size_t v263 = v226;
                                  long long v227 = operator new[](v226, MEMORY[0x1E4FBA2D0]);
                                  *((void *)this + 43) = v227;
                                  if (v227)
                                  {
                                    if ((int)v84 >= -1) {
                                      bzero(v227, 4 * (v92 + 1));
                                    }
                                    unint64_t v228 = operator new[](v263, MEMORY[0x1E4FBA2D0]);
                                    *((void *)this + 25) = v228;
                                    if (v228)
                                    {
                                      float v229 = v228;
                                      uint64_t v230 = operator new[](v263, MEMORY[0x1E4FBA2D0]);
                                      *((void *)this + 26) = v230;
                                      if (v230)
                                      {
                                        if ((int)v84 >= -1)
                                        {
                                          uint64_t v231 = v230;
                                          bzero(v229, 4 * (v92 + 1));
                                          bzero(v231, 4 * (v92 + 1));
                                        }
                                        uint64_t v232 = operator new[](v263, MEMORY[0x1E4FBA2D0]);
                                        *((void *)this + 27) = v232;
                                        if (v232)
                                        {
                                          unint64_t v233 = v232;
                                          uint64_t v234 = operator new[](v263, MEMORY[0x1E4FBA2D0]);
                                          *((void *)this + 28) = v234;
                                          if (v234)
                                          {
                                            uint64_t v261 = 4 * (v92 + 1);
                                            if ((int)v84 >= -1)
                                            {
                                              Boolean v235 = v234;
                                              bzero(v233, v261);
                                              bzero(v235, v261);
                                            }
                                            unint64_t v236 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
                                            *((void *)this + 29) = operator new[](0x10uLL, MEMORY[0x1E4FBA2D0]);
                                            *((void *)this + 12) = operator new[](0x10uLL, v236);
                                            *((void *)this + 13) = operator new[](0x10uLL, v236);
                                            float v237 = v236;
                                            uint64_t v238 = 0;
                                            *((void *)this + 14) = operator new[](0x10uLL, v236);
                                            __leuint64_t n = 4 * v265;
                                            char v239 = 1;
                                            while (1)
                                            {
                                              char v240 = v239;
                                              *(void *)(*((void *)this + 29) + 8 * v238) = operator new[](v263, v237);
                                              unsigned __int8 v241 = *(void **)(*((void *)this + 29) + 8 * v238);
                                              if (!v241) {
                                                break;
                                              }
                                              if ((int)v84 >= -1) {
                                                bzero(v241, v261);
                                              }
                                              *(void *)(*((void *)this + 12) + 8 * v238) = operator new[](__sza, v237);
                                              uint64_t v242 = *(void **)(*((void *)this + 12) + 8 * v238);
                                              if (!v242) {
                                                break;
                                              }
                                              if ((int)v265 >= 1) {
                                                bzero(v242, __len);
                                              }
                                              *(void *)(*((void *)this + 13) + 8 * v238) = operator new[](__sza, v237);
                                              uint64_t v243 = *(void **)(*((void *)this + 13) + 8 * v238);
                                              if (!v243) {
                                                break;
                                              }
                                              if ((int)v265 >= 1) {
                                                bzero(v243, __len);
                                              }
                                              *(void *)(*((void *)this + 14) + 8 * v238) = operator new[](__sza, v237);
                                              uint64_t v244 = *(void **)(*((void *)this + 14) + 8 * v238);
                                              if (!v244) {
                                                break;
                                              }
                                              if ((int)v265 >= 1) {
                                                bzero(v244, __len);
                                              }
                                              char v239 = 0;
                                              uint64_t v238 = 1;
                                              if ((v240 & 1) == 0)
                                              {
                                                unint64_t v245 = operator new[](v134, MEMORY[0x1E4FBA2D0]);
                                                *((void *)this + 34) = v245;
                                                if (v245)
                                                {
                                                  if ((int)v136 >= 1) {
                                                    bzero(v245, 4 * v136);
                                                  }
                                                  uint64_t v246 = operator new[](0x10uLL, MEMORY[0x1E4FBA2D0]);
                                                  *((void *)this + 98) = v246;
                                                  if (v246)
                                                  {
                                                    void *v246 = 0;
                                                    v246[1] = 0;
                                                    std::string v247 = operator new[](0x10uLL, MEMORY[0x1E4FBA2D0]);
                                                    *((void *)this + 99) = v247;
                                                    if (v247)
                                                    {
                                                      *std::string v247 = 0;
                                                      v247[1] = 0;
                                                      if ((int)v75 < 1)
                                                      {
LABEL_242:
                                                        uint64_t v253 = operator new[](0x10uLL, MEMORY[0x1E4FBA2D0]);
                                                        *((void *)this + 101) = v253;
                                                        if (v253)
                                                        {
                                                          uint64_t v254 = operator new[](0x10uLL, MEMORY[0x1E4FBA2D0]);
                                                          *((void *)this + 100) = v254;
                                                          if (v254)
                                                          {
                                                            uint64_t v255 = 0;
                                                            char v256 = 1;
                                                            unint64_t v257 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
                                                            while (1)
                                                            {
                                                              char v258 = v256;
                                                              *(void *)(*((void *)this + 101) + 8 * v255) = operator new[](__sza, v257);
                                                              float v259 = *(void **)(*((void *)this + 101) + 8 * v255);
                                                              if (!v259) {
                                                                break;
                                                              }
                                                              if ((int)v265 >= 1) {
                                                                memset_pattern16(v259, &unk_1BB873A60, __len);
                                                              }
                                                              *(void *)(*((void *)this + 100) + 8 * v255) = operator new[](v126, v257);
                                                              unint64_t v260 = *(void **)(*((void *)this + 100) + 8 * v255);
                                                              if (!v260) {
                                                                break;
                                                              }
                                                              if ((int)v84 >= 2) {
                                                                bzero(v260, 4 * v92);
                                                              }
                                                              char v256 = 0;
                                                              uint64_t v255 = 1;
                                                              if ((v258 & 1) == 0) {
                                                                goto LABEL_5;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                      else
                                                      {
                                                        uint64_t v248 = 0;
                                                        if ((int)v84 < 0) {
                                                          size_t v249 = -1;
                                                        }
                                                        else {
                                                          size_t v249 = 4 * (int)v84;
                                                        }
                                                        uint64_t v250 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
                                                        while (1)
                                                        {
                                                          *(void *)(*((void *)this + 98) + v248) = operator new[](v249, v250);
                                                          long long v251 = *(void **)(*((void *)this + 98) + v248);
                                                          if (!v251) {
                                                            break;
                                                          }
                                                          if ((int)v84 >= 1) {
                                                            bzero(v251, 4 * v84);
                                                          }
                                                          *(void *)(*((void *)this + 99) + v248) = operator new[](v249, v250);
                                                          unint64_t v252 = *(void **)(*((void *)this + 99) + v248);
                                                          if (!v252) {
                                                            break;
                                                          }
                                                          if ((int)v84 >= 1) {
                                                            bzero(v252, 4 * v84);
                                                          }
                                                          v248 += 8;
                                                          if (8 * v75 == v248) {
                                                            goto LABEL_242;
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                                return 4294967294;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              else
              {
                uint64_t v99 = 0;
                uint64_t v100 = 120;
                uint64_t v101 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
                while (1)
                {
                  uint64_t v102 = *((int *)this + 4);
                  size_t v103 = (int)v102 < 0 ? -1 : 4 * v102;
                  unint64_t v104 = (char *)operator new[](v103, v101);
                  uint64_t v105 = *((void *)this + 51) + v100;
                  *(void *)(v105 - 120) = v104;
                  if (!v104) {
                    break;
                  }
                  int v106 = (int)v102 >= 0 ? v102 : (int)v102 + 1;
                  unsigned int v107 = v106 >> 1;
                  *(void *)(v105 - 112) = &v104[4 * (v106 >> 1)];
                  bzero(v104, 4 * v102);
                  size_t v108 = (int)v102 < -1 ? -1 : 4 * (int)v107;
                  *(void *)(v105 - 104) = operator new[](v108, v101);
                  uint64_t v109 = *((void *)this + 51) + v100;
                  if (!*(void *)(v109 - 104)) {
                    break;
                  }
                  *(void *)(v109 - 96) = operator new[](v108, v101);
                  uint64_t v110 = *((void *)this + 51);
                  uint64_t v111 = *(void **)(v110 + v100 - 96);
                  if (!v111) {
                    break;
                  }
                  if ((int)v102 >= 2)
                  {
                    bzero(*(void **)(v110 + v100 - 104), 4 * v107);
                    uint64_t v101 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
                    bzero(v111, 4 * v107);
                  }
                  *(void *)(v110 + v100 - 88) = operator new[](v108, v101);
                  uint64_t v112 = *((void *)this + 51) + v100;
                  if (!*(void *)(v112 - 88)) {
                    break;
                  }
                  *(void *)(v112 - 80) = operator new[](v108, v101);
                  uint64_t v113 = *((void *)this + 51);
                  __int32 v114 = *(void **)(v113 + v100 - 80);
                  if (!v114) {
                    break;
                  }
                  if ((int)v102 >= 2)
                  {
                    bzero(*(void **)(v113 + v100 - 88), 4 * v107);
                    uint64_t v101 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
                    bzero(v114, 4 * v107);
                  }
                  *(void *)(v113 + v100 - 72) = operator new[](v108, v101);
                  unsigned __int32 v115 = *(void **)(*((void *)this + 51) + v100 - 72);
                  if (!v115) {
                    break;
                  }
                  bzero(v115, 4 * (int)v107);
                  int v116 = *((_DWORD *)this + 4);
                  int v117 = v116 >= 0 ? *((_DWORD *)this + 4) : v116 + 1;
                  int v118 = v117 >> 1;
                  size_t v119 = 4 * v118;
                  size_t v120 = v116 < -1 ? -1 : 4 * v118;
                  *(void *)(*((void *)this + 51) + v100 - 64) = operator new[](v120, v101);
                  uint64_t v121 = *(void **)(*((void *)this + 51) + v100 - 64);
                  if (!v121) {
                    break;
                  }
                  bzero(v121, v119);
                  uint64_t v122 = *((int *)this + 6);
                  size_t v123 = (int)v122 < 0 ? -1 : 4 * v122;
                  CFTypeRef v124 = operator new[](v123, v101);
                  *(void *)(*((void *)this + 51) + v100) = v124;
                  if (!v124) {
                    break;
                  }
                  if ((int)v122 >= 1) {
                    bzero(v124, 4 * v122);
                  }
                  ++v99;
                  uint64_t v75 = *((int *)this + 2);
                  v100 += 136;
                  if (v99 >= v75)
                  {
                    LODWORD(v84) = *((_DWORD *)this + 4);
                    if ((int)v84 >= 0) {
                      int v125 = *((_DWORD *)this + 4);
                    }
                    else {
                      int v125 = v84 + 1;
                    }
                    unsigned int v92 = v125 >> 1;
                    uint64_t v93 = (uint64_t)v125 >> 1;
                    goto LABEL_116;
                  }
                }
              }
              return 4294967294;
            }
          }
        }
        else
        {
          uint64_t v85 = 0;
          if ((int)v84 < 0) {
            size_t v86 = -1;
          }
          else {
            size_t v86 = 4 * (int)v84;
          }
          unsigned int v87 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
          while (1)
          {
            *(void *)&v83[v85] = operator new[](v86, v87);
            long long v83 = (char *)*((void *)this + 20);
            unsigned int v88 = *(void **)&v83[v85];
            if (!v88) {
              break;
            }
            if ((int)v84 >= 1) {
              bzero(v88, 4 * v84);
            }
            v85 += 8;
            if (8 * v80 == v85) {
              goto LABEL_68;
            }
          }
        }
      }
    }
    else
    {
      *((void *)this + 51) = 0;
    }
    return 4294967294;
  }
}

void CmhBEAM2NOpt::calc_cr_ci_vect(CmhBEAM2NOpt *this, float *a2, float *a3)
{
  int v6 = *((_DWORD *)this + 4);
  if (v6 >= 0) {
    int v7 = *((_DWORD *)this + 4);
  }
  else {
    int v7 = v6 + 1;
  }
  int v8 = v7 >> 1;
  if (v6 >= -1)
  {
    uint64_t v9 = 0;
    double v10 = (float)v6;
    double v11 = (float)((float)(*((float *)this + 13) * (float)*((int *)this + 3)) / 343.0);
    do
    {
      __double2 v12 = __sincos_stret((double)(int)v9 * 6.28318531 / v10 * v11);
      float cosval = v12.__cosval;
      a2[v9] = cosval;
      float sinval = v12.__sinval;
      a3[v9++] = -sinval;
    }
    while (v8 + 1 != v9);
  }
  *a2 = 1.0;
  a2[v8] = 1.0;
  *a3 = 0.0;
  a3[v8] = 0.0;
  *((_DWORD *)this + 9) = 0;
}

void CmhBEAM2NOpt::calc_wng_beta_bound(void **this, float a2)
{
  float v2 = fminf(a2, 1.0);
  uint64_t v3 = *((unsigned int *)this + 6);
  if (v2 <= 0.0)
  {
    if ((int)v3 >= 1) {
      memset_pattern16(this[34], &unk_1BB873A60, 4 * v3);
    }
  }
  else if ((int)v3 >= 1)
  {
    float v4 = *((float *)this + 13) * 6.28318531 * (double)*((int *)this + 3) / (double)(343 * *((_DWORD *)this + 4));
    *(double *)&uint64_t v5 = sqrt(2.0 / v2);
    uint64_t v6 = (v3 + 1) & 0x1FFFFFFFELL;
    uint64x2_t v7 = (uint64x2_t)vdupq_n_s64(v3 - 1);
    float64x2_t v8 = (float64x2_t)vdupq_lane_s64(v5, 0);
    int64x2_t v9 = (int64x2_t)xmmword_1BB872720;
    double v10 = (float *)((char *)this[34] + 4);
    __asm
    {
      FMOV            V5.2D, #-1.0
      FMOV            V6.2S, #1.0
    }
    int64x2_t v17 = vdupq_n_s64(2uLL);
    do
    {
      int32x2_t v18 = vmovn_s64((int64x2_t)vcgeq_u64(v7, (uint64x2_t)v9));
      float32x2_t v19 = vminnm_f32(vcvt_f32_f64(vmlaq_f64(_Q5, vcvtq_f64_f32(vmul_n_f32(vcvt_f32_s32(vadd_s32(vmovn_s64(v9), (int32x2_t)0x100000001)), v4)), v8)), _D6);
      if (v18.i8[0]) {
        *(v10 - 1) = fmaxf(v19.f32[0], -1.0);
      }
      if (v18.i8[4]) {
        *double v10 = fmaxf(v19.f32[1], -1.0);
      }
      int64x2_t v9 = vaddq_s64(v9, v17);
      v10 += 2;
      v6 -= 2;
    }
    while (v6);
  }
}

uint64_t CmhBEAM2NOpt::loadRVSSSuppressionLimits(CmhBEAM2NOpt *this)
{
  uint64_t result = CmhBEAM2NOpt::interpolateFrequencyVector((uint64_t)&max_s_table, (float *)0x41, *((void *)this + 44), 125.0, (float *)*((unsigned int *)this + 7), (float)*((int *)this + 3) / (float)*((int *)this + 4));
  uint64_t v3 = *((unsigned int *)this + 7);
  if ((int)v3 >= 1)
  {
    float v4 = (float *)*((void *)this + 44);
    do
    {
      float v5 = *v4;
      if (*v4 <= *((float *)this + 90)) {
        float v5 = *((float *)this + 90);
      }
      *v4++ = v5;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t CmhBEAM2NOpt::interpolateFrequencyVector(uint64_t this, float *a2, uint64_t a3, float a4, float *a5, float a6)
{
  if ((int)a5 >= 1 && a4 > 0.0 && a6 > 0.0)
  {
    uint64_t v6 = 0;
    do
    {
      float v7 = (float)((float)(int)v6 * a6) / a4;
      int v8 = vcvtps_s32_f32(v7);
      if (v8 >= (int)a2)
      {
        float v10 = *(float *)(this + 4 * (a2 - 1));
      }
      else
      {
        int v9 = vcvtms_s32_f32(v7);
        if (v8 == v9) {
          float v10 = *(float *)(this + 4 * v9);
        }
        else {
          float v10 = *(float *)(this + 4 * v9)
        }
              + (float)((float)(v7 - (float)v9)
                      * (float)((float)(*(float *)(this + 4 * v8) - *(float *)(this + 4 * v9)) / (float)(v8 - v9)));
      }
      *(float *)(a3 + 4 * v6++) = v10;
    }
    while (a5 != v6);
  }
  return this;
}

void CmhBEAM2NOpt::process(CmhBEAM2NOpt *this, const DSPSplitComplex *__A, DSPSplitComplex *__C)
{
  uint64_t v203 = *MEMORY[0x1E4F143B8];
  if (!*(_DWORD *)this) {
    return;
  }
  uint64_t v3 = __C;
  float v4 = __A;
  if (*((_DWORD *)this + 38) != 1)
  {
    DSPSplitComplex v8 = __A[1];
    DSPSplitComplex __Aa = *__C;
    DSPSplitComplex v202 = v8;
    vDSP_zvmov(__A, 1, __C, 1, (uint64_t)(*((_DWORD *)this + 4) + (*((int *)this + 4) < 0)) >> 1);
    if (!*((_DWORD *)this + 60))
    {
      *((_DWORD *)this + 33) = 5;
      if (*((_DWORD *)this + 2) != 2)
      {
        int v33 = *((_DWORD *)this + 1);
        if (v33 == 1)
        {
          int v34 = (const DSPSplitComplex *)*((void *)this + 51);
          vDSP_Length v35 = (uint64_t)(*((_DWORD *)this + 4) + (*((int *)this + 4) < 0)) >> 1;
          p_Aa = &v202;
        }
        else
        {
          if (v33) {
            goto LABEL_75;
          }
          int v34 = (const DSPSplitComplex *)*((void *)this + 51);
          vDSP_Length v35 = (uint64_t)(*((_DWORD *)this + 4) + (*((int *)this + 4) < 0)) >> 1;
          p_Aa = &__Aa;
        }
        vDSP_zvmov(p_Aa, 1, v34, 1, v35);
        goto LABEL_75;
      }
      if (*((int *)this + 11) >= 1)
      {
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        int v32 = &__Aa;
        do
        {
          vDSP_zvmov(v32, 1, (const DSPSplitComplex *)(*((void *)this + 51) + v30), 1, (uint64_t)(*((_DWORD *)this + 4) + (*((int *)this + 4) < 0)) >> 1);
          ++v31;
          v30 += 136;
          ++v32;
        }
        while (v31 < *((int *)this + 11));
      }
LABEL_75:
      if (*((_DWORD *)this + 94))
      {
        int v79 = *((_DWORD *)this + 6);
        if (v79 >= 1)
        {
          int v80 = 0;
          size_t v81 = (float *)*((void *)this + 37);
          long long v82 = (float *)*((void *)this + 38);
          long long v83 = v202.imagp + 1;
          uint64_t v84 = __Aa.imagp + 1;
          uint64_t v85 = v202.realp + 1;
          size_t v86 = __Aa.realp + 1;
          uint64_t v87 = *((void *)this + 41) + 8;
          unsigned int v88 = v82;
          uint64_t v89 = v81;
          do
          {
            float v90 = fabsf(*v86 + *v85) + fabsf(*v84 + *v83);
            *uint64_t v89 = fmaxf(v90 + (float)(*(float *)(v87 + 4 * (*v89 > v90)) * (float)(*v89 - v90)), 0.000091553);
            ++v89;
            float v91 = *v85++;
            float v92 = v91;
            float v93 = *v86++;
            float v94 = v93;
            float v95 = *v83++;
            float v96 = v95;
            float v97 = *v84++;
            float v98 = vabds_f32(v92, v94) + vabds_f32(v96, v97);
            float *v88 = fmaxf(v98 + (float)(*(float *)(v87 + 4 * (*v88 > v98)) * (float)(*v88 - v98)), 0.000030518);
            ++v88;
            ++v80;
            v87 += 8;
          }
          while (v79 > (unsigned __int16)v80);
          int v99 = 0;
          uint64_t v100 = (float *)*((void *)this + 39);
          uint64_t v101 = v100;
          do
          {
            float v102 = *v81++;
            float v103 = v102;
            float v104 = *v82++;
            *v101++ = (float)(*((float *)this + 91) * v103) / v104;
            ++v99;
          }
          while (v79 > (unsigned __int16)v99);
          int v105 = 0;
          int v106 = (float *)*((void *)this + 40);
          unsigned int v107 = (float *)(*((void *)this + 44) + 4);
          do
          {
            float v108 = *v100++;
            float v109 = v108;
            if (v108 > 0.708) {
              float v109 = *(float *)"}?5?";
            }
            if (v109 < 0.125) {
              float v109 = 0.125;
            }
            float v110 = v109 * 108.2375 + -13.6263;
            if (v110 < 0.0) {
              float v110 = 0.0;
            }
            if (v110 > 63.0) {
              float v110 = 63.0;
            }
            float v111 = rvss_table[v110];
            float *v106 = v111;
            float v112 = *v107++;
            float v113 = v112;
            if (v112 > v111) {
              float v111 = v113;
            }
            *v106++ = v111;
            ++v105;
          }
          while (v79 > (unsigned __int16)v105);
        }
      }
      if (!*((_DWORD *)this + 60)) {
        goto LABEL_138;
      }
      if (*((int *)this + 11) >= 1)
      {
        uint64_t v114 = 0;
        unsigned __int32 v115 = (float **)((char *)this + 176);
        do
        {
          vDSP_vmul(*(const float **)(*((void *)this + 29) + 8 * v114), 1, *(v115 - 1), 1, *(v115 - 1), 1, (uint64_t)(*((_DWORD *)this + 4) + (*((int *)this + 4) < 0)) >> 1);
          int v116 = *v115;
          v115 += 2;
          vDSP_vmul(*(const float **)(*((void *)this + 29) + 8 * v114++), 1, v116, 1, v116, 1, (uint64_t)(*((_DWORD *)this + 4) + (*((int *)this + 4) < 0)) >> 1);
        }
        while (v114 < *((int *)this + 11));
      }
      memcpy(**((void ***)this + 100), *(const void **)(*((void *)this + 51) + 48), 4 * (*((int *)this + 4) >> 1));
      if (*((_DWORD *)this + 2) == 2
        && (memcpy(*(void **)(*((void *)this + 100) + 8), *(const void **)(*((void *)this + 51) + 184), 4 * (*((int *)this + 4) >> 1)), *((_DWORD *)this + 2) == 2))
      {
        int v117 = (const float **)((char *)this + 168);
        int v118 = (const float **)((char *)this + 184);
        CmhBEAM2NOpt::abf((uint64_t)this, (const float **)this + 21, (const float **)this + 23, (float **)(*((void *)this + 51) + 136), *((void *)this + 51) + 136, 1);
        uint64_t v120 = *((void *)this + 51);
        if (*((_DWORD *)this + 66)) {
          CmhBEAM2NOpt::abf((uint64_t)this, (const float **)this + 23, (const float **)this + 21, (float **)(v120 + 136), v120 + 136, 0);
        }
        else {
          CmhBEAM2NOpt::abf_output_only((uint64_t)this, *((void *)this + 23), *((void *)this + 24), *((void *)this + 21), *((void *)this + 22), (void *)(v120 + 136), v119);
        }
        CmhBEAM2NOpt::sns((uint64_t)this, *((void *)this + 51) + 136);
      }
      else
      {
        int v121 = *((_DWORD *)this + 1);
        if (v121)
        {
          if (v121 != 1) {
            goto LABEL_120;
          }
          CmhBEAM2NOpt::abf((uint64_t)this, (const float **)this + 21, (const float **)this + 23, *((float ***)this + 51), *((void *)this + 51), 1);
          size_t v123 = (float **)*((void *)this + 51);
          if (*((_DWORD *)this + 65))
          {
            CFTypeRef v124 = this;
            int v125 = (const float **)((char *)this + 184);
            size_t v126 = (const float **)((char *)this + 168);
LABEL_112:
            CmhBEAM2NOpt::abf((uint64_t)v124, v125, v126, v123, (uint64_t)v123, 0);
            goto LABEL_116;
          }
          uint64_t v127 = *((void *)this + 23);
          uint64_t v128 = *((void *)this + 24);
          uint64_t v129 = *((void *)this + 21);
          uint64_t v130 = *((void *)this + 22);
LABEL_115:
          CmhBEAM2NOpt::abf_output_only((uint64_t)this, v127, v128, v129, v130, v123, v122);
LABEL_116:
          CmhBEAM2NOpt::sns((uint64_t)this, *((void *)this + 51));
          if (*((_DWORD *)this + 2) == 2)
          {
            uint64_t v131 = 0;
            uint64_t v132 = 0;
            do
            {
              vDSP_vmul(*(const float **)(*((void *)this + 13) + 8 * v132), 1, *(const float **)(*((void *)this + 51) + v131), 1, *(float **)(*((void *)this + 51) + v131), 1, (uint64_t)(*((_DWORD *)this + 4) + (*((int *)this + 4) < 0)) >> 1);
              vDSP_vmul(*(const float **)(*((void *)this + 13) + 8 * v132++), 1, *(const float **)(*((void *)this + 51) + v131 + 8), 1, *(float **)(*((void *)this + 51) + v131 + 8), 1, (uint64_t)(*((_DWORD *)this + 4) + (*((int *)this + 4) < 0)) >> 1);
              uint64_t v133 = *((int *)this + 2);
              v131 += 136;
            }
            while (v132 < v133);
LABEL_121:
            if (v133 == 2)
            {
              uint64_t v134 = 0;
              uint64_t v135 = 0;
              p_imagp = &__Aa.imagp;
              while (1)
              {
                int v137 = *((_DWORD *)this + 36);
                if (v137 == 1) {
                  break;
                }
                if (v137)
                {
                  memcpy((void *)(*(void *)(*((void *)this + 51) + v134) + 4 * (*((_DWORD *)this + 64) + 2)), &v202.realp[*((_DWORD *)this + 64) + 2], 4 * (*((_DWORD *)this + 6) + ~*((_DWORD *)this + 64)));
                  uint64_t v142 = *((int *)this + 64);
                  uint64_t v139 = v142 + 2;
                  CFTypeRef v140 = (void *)(*(void *)(*((void *)this + 51) + v134 + 8) + 4 * (v142 + 2));
                  float v141 = &v202.imagp;
                  goto LABEL_128;
                }
                memcpy((void *)(*(void *)(*((void *)this + 51) + v134) + 4 * (*((_DWORD *)this + 64) + 2)), &(*(p_imagp - 1))[*((_DWORD *)this + 64) + 2], 4 * (*((_DWORD *)this + 6) + ~*((_DWORD *)this + 64)));
                uint64_t v138 = *((int *)this + 64);
                uint64_t v139 = v138 + 2;
                CFTypeRef v140 = (void *)(*(void *)(*((void *)this + 51) + v134 + 8) + 4 * (v138 + 2));
                float v141 = p_imagp;
LABEL_129:
                memcpy(v140, &(*v141)[v139], 4 * (*((_DWORD *)this + 6) + ~v138));
                ++v135;
                v134 += 136;
                p_imagp += 2;
                if (v135 >= *((int *)this + 2)) {
                  goto LABEL_138;
                }
              }
              memcpy((void *)(*(void *)(*((void *)this + 51) + v134) + 4 * (*((_DWORD *)this + 64) + 2)), &__Aa.realp[*((_DWORD *)this + 64) + 2], 4 * (*((_DWORD *)this + 6) + ~*((_DWORD *)this + 64)));
              uint64_t v142 = *((int *)this + 64);
              uint64_t v139 = v142 + 2;
              CFTypeRef v140 = (void *)(*(void *)(*((void *)this + 51) + v134 + 8) + 4 * (v142 + 2));
              float v141 = &__Aa.imagp;
LABEL_128:
              LODWORD(v138) = v142;
              goto LABEL_129;
            }
            int v143 = *((_DWORD *)this + 36);
            if (v143 == 1)
            {
              uint64_t v144 = (_DWORD *)((char *)this + 24);
              memcpy((void *)(**((void **)this + 51) + 4 * (*((_DWORD *)this + 64) + 2)), &__Aa.realp[*((_DWORD *)this + 64) + 2], 4 * (*((_DWORD *)this + 6) + ~*((_DWORD *)this + 64)));
              uint64_t v149 = *((int *)this + 64);
              uint64_t v146 = v149 + 2;
              uint64x2_t v147 = (void *)(*(void *)(*((void *)this + 51) + 8) + 4 * (v149 + 2));
              int32x2_t v148 = &__Aa.imagp;
            }
            else
            {
              if (!v143)
              {
                uint64_t v144 = (_DWORD *)((char *)this + 24);
                memcpy((void *)(**((void **)this + 51) + 4 * (*((_DWORD *)this + 64) + 2)), (const void *)(*((void *)&__Aa.realp + 2 * *((int *)this + 1)) + 4 * (*((_DWORD *)this + 64) + 2)), 4 * (*((_DWORD *)this + 6) + ~*((_DWORD *)this + 64)));
                uint64_t v145 = *((int *)this + 64);
                uint64_t v146 = v145 + 2;
                uint64x2_t v147 = (void *)(*(void *)(*((void *)this + 51) + 8) + 4 * (v145 + 2));
                int32x2_t v148 = (void *)((unint64_t)(&__Aa + *((int *)this + 1)) | 8);
LABEL_137:
                memcpy(v147, (const void *)(*v148 + 4 * v146), 4 * (*v144 + ~v145));
LABEL_138:
                if (!*((_DWORD *)this + 94)) {
                  goto LABEL_187;
                }
                int v150 = *((_DWORD *)this + 2);
                if (v150 < 1) {
                  goto LABEL_187;
                }
                uint64_t v151 = 0;
                for (uint64_t i = 0; i < v150; ++i)
                {
                  uint64_t v153 = *((void *)this + 51);
                  *((_DWORD *)this + 31) = 1;
                  if (*((_DWORD *)this + 32))
                  {
                    float32x2_t v154 = &v202;
                    switch(*((_DWORD *)this + 33))
                    {
                      case 0:
                      case 2:
                        goto LABEL_144;
                      case 1:
                      case 3:
                        goto LABEL_143;
                      case 4:
                        int v156 = *((_DWORD *)this + 34);
                        if (v156 == 1)
                        {
LABEL_143:
                          float32x2_t v154 = &__Aa;
                        }
                        else
                        {
                          float32x2_t v154 = &v202;
                          if (!v156)
                          {
                            if (v150 == 2) {
                              BOOL v157 = v151 == 0;
                            }
                            else {
                              BOOL v157 = *((_DWORD *)this + 1) == 0;
                            }
                            if (v157) {
                              float32x2_t v154 = &__Aa;
                            }
                            else {
                              float32x2_t v154 = &v202;
                            }
                          }
                        }
LABEL_144:
                        if ((DSPSplitComplex *)(v153 + v151) != v154)
                        {
                          uint64_t v155 = v153 + v151;
                          memcpy(*(void **)(v153 + v151), v154->realp, 4 * (*((_DWORD *)this + 4) / 2));
                          memcpy(*(void **)(v155 + 8), v154->imagp, 4 * (*((_DWORD *)this + 4) / 2));
                          int v150 = *((_DWORD *)this + 2);
                        }
                        break;
                      default:
                        goto LABEL_146;
                    }
                  }
                  else
                  {
LABEL_146:
                    *((_DWORD *)this + 31) = 0;
                  }
                  v151 += 136;
                }
                if (*((_DWORD *)this + 31) || v150 < 1)
                {
LABEL_187:
                  if (*((_DWORD *)this + 10))
                  {
                    if (*((_DWORD *)this + 2) == 2)
                    {
                      uint64_t v188 = 0;
                      uint64_t v189 = 0;
                      do
                      {
                        float v190 = (const float *)(*(void *)(*((void *)this + 14) + 8 * v189) + 4);
                        float v191 = (float *)(*(void *)(*((void *)this + 51) + v188) + 4);
                        vDSP_vmul(v191, 1, v190, 1, v191, 1, *((int *)this + 6));
                        double v192 = (float *)(*(void *)(*((void *)this + 51) + v188 + 8) + 4);
                        vDSP_vmul(v192, 1, v190, 1, v192, 1, *((int *)this + 6));
                        ++v189;
                        v188 += 136;
                      }
                      while (v189 < *((int *)this + 2));
                    }
                    else
                    {
                      double v193 = (const float *)(*(void *)(*((void *)this + 14) + 8 * *((int *)this + 1)) + 4);
                      vDSP_vmul((const float *)(**((void **)this + 51) + 4), 1, v193, 1, (float *)(**((void **)this + 51) + 4), 1, *((int *)this + 6));
                      uint64_t v194 = (float *)(*(void *)(*((void *)this + 51) + 8) + 4);
                      vDSP_vmul(v194, 1, v193, 1, v194, 1, *((int *)this + 6));
                    }
                  }
                  uint64_t v195 = *((unsigned int *)this + 2);
                  if ((int)v195 >= 1)
                  {
                    float v196 = (_DWORD **)(*((void *)this + 51) + 8);
                    do
                    {
                      **float v196 = 0;
                      **(v196 - 1) = 0;
                      v196 += 17;
                      --v195;
                    }
                    while (v195);
                    uint64_t v197 = 0;
                    uint64_t v198 = 0;
                    do
                    {
                      vDSP_zvmov((const DSPSplitComplex *)(*((void *)this + 51) + v197), 1, v3, 1, (uint64_t)(*((_DWORD *)this + 4) + (*((int *)this + 4) < 0)) >> 1);
                      ++v198;
                      uint64_t v195 = *((int *)this + 2);
                      ++v3;
                      v197 += 136;
                    }
                    while (v198 < v195);
                  }
                  if (*((_DWORD *)this + 194))
                  {
                    if (v195 == 2)
                    {
                      CmhBEAM2NOpt::getAuxVectors((uint64_t)this, 0);
                      int v199 = 1;
                    }
                    else
                    {
                      int v199 = *((_DWORD *)this + 1);
                    }
                    CmhBEAM2NOpt::getAuxVectors((uint64_t)this, v199);
                  }
                  return;
                }
                uint64_t v159 = 0;
                int v160 = *((_DWORD *)this + 34);
                while (v160 != 1)
                {
                  if (v160)
                  {
                    int64x2_t v161 = &v202;
                    goto LABEL_171;
                  }
                  if (v150 == 2)
                  {
                    int64x2_t v161 = &__Aa + v159;
                    goto LABEL_171;
                  }
                  int v162 = *((_DWORD *)this + 1);
                  if (!v162) {
                    break;
                  }
                  int64x2_t v161 = &v202;
                  if (v162 == 1) {
                    goto LABEL_171;
                  }
LABEL_184:
                  if (++v159 == v150)
                  {
                    uint64_t v183 = 0;
                    uint64_t v184 = 0;
                    do
                    {
                      unint64_t v185 = (const float *)*((void *)this + 40);
                      int32x2_t v186 = (float *)(*(void *)(*((void *)this + 51) + v183) + 4);
                      vDSP_vmul(v186, 1, v185, 1, v186, 1, *((int *)this + 6));
                      double v187 = (float *)(*(void *)(*((void *)this + 51) + v183 + 8) + 4);
                      vDSP_vmul(v187, 1, v185, 1, v187, 1, *((int *)this + 6));
                      ++v184;
                      v183 += 136;
                    }
                    while (v184 < *((int *)this + 2));
                    goto LABEL_187;
                  }
                }
                int64x2_t v161 = &__Aa;
LABEL_171:
                uint64_t v163 = *((unsigned int *)this + 93);
                if ((int)v163 >= 1)
                {
                  uint64_t v164 = 0;
                  float v165 = *((float *)this + 95);
                  float v166 = fabsf(v165);
                  long long v167 = (uint64_t *)(*((void *)this + 51) + 136 * v159);
                  realp = v161->realp;
                  imagp = v161->imagp;
                  uint64_t v170 = *(void *)(*((void *)this + 101) + 8 * (int)v159);
                  uint64_t v171 = *v167;
                  uint64_t v172 = v167[1] + 4;
                  uint64_t v173 = v171 + 4;
                  double v174 = imagp + 1;
                  float v175 = realp + 1;
                  do
                  {
                    float v176 = *(float *)(v173 + 4 * v164);
                    float v177 = (float)(fabsf(v175[v164]) + fabsf(v174[v164]))
                         / (float)(fabsf(v176) + fabsf(*(float *)(v172 + 4 * v164)));
                    float v178 = 1.0;
                    if (v177 < *((float *)this + 92))
                    {
                      *(float *)(v173 + 4 * v164) = v176 * v177;
                      *(float *)(v172 + 4 * v164) = v177 * *(float *)(v172 + 4 * v164);
                      float v178 = v177;
                    }
                    *(float *)(v170 + 4 * v164) = v178;
                    if (*((float *)this + 95) != 0.0 && *((float *)this + 96) < (float)(v164 + 1))
                    {
                      float v179 = *((float *)this + 97);
                      if (v177 < v179)
                      {
                        float v180 = (float)(v177 - *((float *)this + 98))
                             / (float)(vabds_f32(v179, *((float *)this + 98)) + 1.0e-10);
                        if (v180 < 0.0) {
                          float v180 = 0.0;
                        }
                        float v181 = (float)(1.0 - v166) + (float)(v166 * v180);
                        float v182 = 1.0 - v181;
                        if (v165 >= 0.0) {
                          float v182 = -(float)(1.0 - v181);
                        }
                        *(float *)(v173 + 4 * v164) = (float)(v175[v164] * v182)
                                                    + (float)(v181 * *(float *)(v173 + 4 * v164));
                        *(float *)(v172 + 4 * v164) = (float)(v174[v164] * v182)
                                                    + (float)(v181 * *(float *)(v172 + 4 * v164));
                      }
                    }
                    ++v164;
                  }
                  while (v163 != v164);
                }
                goto LABEL_184;
              }
              uint64_t v144 = (_DWORD *)((char *)this + 24);
              memcpy((void *)(**((void **)this + 51) + 4 * (*((_DWORD *)this + 64) + 2)), &v202.realp[*((_DWORD *)this + 64) + 2], 4 * (*((_DWORD *)this + 6) + ~*((_DWORD *)this + 64)));
              uint64_t v149 = *((int *)this + 64);
              uint64_t v146 = v149 + 2;
              uint64x2_t v147 = (void *)(*(void *)(*((void *)this + 51) + 8) + 4 * (v149 + 2));
              int32x2_t v148 = &v202.imagp;
            }
            LODWORD(v145) = v149;
            goto LABEL_137;
          }
LABEL_120:
          vDSP_vmul(*(const float **)(*((void *)this + 13) + 8 * *((int *)this + 1)), 1, **((const float ***)this + 51), 1, **((float ***)this + 51), 1, (uint64_t)(*((_DWORD *)this + 4) + (*((int *)this + 4) < 0)) >> 1);
          vDSP_vmul(*(const float **)(*((void *)this + 13) + 8 * *((int *)this + 1)), 1, *(const float **)(*((void *)this + 51) + 8), 1, *(float **)(*((void *)this + 51) + 8), 1, (uint64_t)(*((_DWORD *)this + 4) + (*((int *)this + 4) < 0)) >> 1);
          LODWORD(v133) = *((_DWORD *)this + 2);
          goto LABEL_121;
        }
        int v117 = (const float **)((char *)this + 168);
        int v118 = (const float **)((char *)this + 184);
      }
      CmhBEAM2NOpt::abf((uint64_t)this, v118, v117, *((float ***)this + 51), *((void *)this + 51), 1);
      size_t v123 = (float **)*((void *)this + 51);
      if (*((_DWORD *)this + 65))
      {
        CFTypeRef v124 = this;
        int v125 = v117;
        size_t v126 = v118;
        goto LABEL_112;
      }
      uint64_t v127 = *((void *)this + 21);
      uint64_t v128 = *((void *)this + 22);
      uint64_t v129 = *((void *)this + 23);
      uint64_t v130 = *((void *)this + 24);
      goto LABEL_115;
    }
    uint64_t v9 = *((void *)this + 103);
    if (!*(_DWORD *)(v9 + 44))
    {
LABEL_69:
      uint64_t v75 = (float *)*((void *)this + 27);
      v200.realp = (float *)*((void *)this + 25);
      v200.imagp = v75;
      vDSP_zvmul(&v200, 1, &v202, 1, (const DSPSplitComplex *)((char *)this + 168), 1, (uint64_t)(*((_DWORD *)this + 4) + (*((int *)this + 4) < 0)) >> 1, 1);
      vDSP_zvsub(&__Aa, 1, (const DSPSplitComplex *)((char *)this + 168), 1, (const DSPSplitComplex *)((char *)this + 168), 1, (uint64_t)(*((_DWORD *)this + 4) + (*((int *)this + 4) < 0)) >> 1);
      size_t v76 = (float *)*((void *)this + 28);
      v200.realp = (float *)*((void *)this + 26);
      v200.imagp = v76;
      vDSP_zvmul(&v200, 1, &__Aa, 1, (const DSPSplitComplex *)((char *)this + 184), 1, (uint64_t)(*((_DWORD *)this + 4) + (*((int *)this + 4) < 0)) >> 1, 1);
      vDSP_zvsub(&v202, 1, (const DSPSplitComplex *)((char *)this + 184), 1, (const DSPSplitComplex *)((char *)this + 184), 1, (uint64_t)(*((_DWORD *)this + 4) + (*((int *)this + 4) < 0)) >> 1);
      if (*((_DWORD *)this + 216))
      {
        int v77 = 5;
      }
      else
      {
        float v78 = *(float *)(*((void *)this + 39) + 4 * *((int *)this + 177)) * 32767.0;
        if (v78 > 32767.0) {
          float v78 = 32767.0;
        }
        *((float *)this + 155) = v78;
        CmhMicCheck::process((CmhBEAM2NOpt *)((char *)this + 464), (const DSPSplitComplex *)__Aa.realp, (const DSPSplitComplex *)__Aa.imagp, (const DSPSplitComplex *)v202.realp, (const DSPSplitComplex *)v202.imagp, (const float **)this + 21, (const float **)this + 23);
        int v77 = *((_DWORD *)this + 164);
      }
      *((_DWORD *)this + 33) = v77;
      **((_DWORD **)this + 22) = 0;
      **((_DWORD **)this + 21) = 0;
      **((_DWORD **)this + 24) = 0;
      **((_DWORD **)this + 23) = 0;
      goto LABEL_75;
    }
    uint64_t v10 = *((void *)this + 51);
    uint64_t v11 = *(void *)(v10 + 24);
    uint64_t v12 = *((int *)this + 213);
    int v13 = __Aa.realp;
    double v14 = __Aa.imagp;
    float v15 = __Aa.realp[v12];
    float v16 = v202.realp[v12];
    uint64_t v17 = *(void *)(v10 + 40);
    float v18 = __Aa.imagp[v12];
    float v19 = v202.imagp[v12];
    float v20 = (float)(fabsf((float)(v15 + v16) * 0.5) + fabsf((float)(v18 + v19) * 0.5)) * 0.5;
    float v21 = (float)(fabsf((float)(v15 - v16) * 0.5) + fabsf((float)(v18 - v19) * 0.5)) * 0.5;
    if (v20 >= 0.399987793) {
      float v20 = 0.39999;
    }
    int v22 = *((_DWORD *)this + 30);
    float v23 = fmaxf(v20 + (float)(*(float *)(v9 + 36 + 4 * (*(float *)(v9 + 32) > v20)) * (float)(*(float *)(v9 + 32) - v20)), 0.000030518);
    if (v21 >= 0.399987793) {
      float v21 = 0.39999;
    }
    float v24 = fmaxf(v21 + (float)(*(float *)(v9 + 36 + 4 * (*(float *)(v9 + 28) > v21)) * (float)(*(float *)(v9 + 28) - v21)), 0.000030518);
    *(float *)(v9 + 28) = v24;
    *(float *)(v9 + 32) = v23;
    float v25 = v23 - v24;
    if ((float)(v23 - v24) < 0.0) {
      float v25 = -(float)(v23 - v24);
    }
    if (v23 > v24) {
      float v24 = v23;
    }
    float v26 = fminf(v25 / v24, 1.0);
    float v27 = v26 * v26;
    float v28 = 0.0;
    if (v27 > 0.25) {
      float v28 = v27 * *(float *)(v9 + 24);
    }
    *(float *)(v9 + 20) = v28;
    if (v22) {
      goto LABEL_21;
    }
    unint64_t v37 = *((unsigned int *)this + 210);
    if ((int)v37 > 0)
    {
      uint64_t v38 = *((int *)this + 209);
      double v39 = *(float *)(v11 + 4 * v38 + 4);
      double v40 = *(float *)(v17 + 4 * v38 + 4);
      if (v39 * 0.3 > v40 || v40 * 0.3 > v39)
      {
LABEL_21:
        *((_DWORD *)this + 214) = 0;
LABEL_22:
        *(_DWORD *)(*((void *)this + 103) + 20) = 0;
        goto LABEL_51;
      }
      unint64_t v42 = 0;
      uint64_t v43 = 4 * v38 + 8;
      uint64_t v44 = v17 + v43;
      uint64_t v45 = v11 + v43;
      while (v37 - 1 != v42)
      {
        double v46 = *(float *)(v45 + 4 * v42);
        double v47 = *(float *)(v44 + 4 * v42++);
        if (v46 * 0.3 > v47 || v47 * 0.3 > v46)
        {
          *((_DWORD *)this + 214) = v42 >= v37;
          if (v42 < v37) {
            goto LABEL_22;
          }
          goto LABEL_51;
        }
      }
    }
    *((_DWORD *)this + 214) = 1;
LABEL_51:
    uint64_t v49 = *((int *)this + 208);
    float v50 = (float)(fabsf(v202.realp[v49]) + fabsf(v202.imagp[v49])) * 0.5;
    uint64_t v51 = (float *)*((void *)this + 103);
    float v52 = fmaxf(v50 + (float)(v51[(v51[19] > v50) + 20] * (float)(v51[19] - v50)), 0.000030518);
    v51[19] = v52;
    float v53 = *((float *)this + 212);
    float v54 = (float)(fabsf(v13[v49]) + fabsf(v14[v49])) * 0.5;
    float v55 = fmaxf(v54 + (float)(v51[(*v51 > v54) + 1] * (float)(*v51 - v54)), 0.000030518);
    *uint64_t v51 = v55;
    float v57 = v51[3];
    float v56 = v51[4];
    float v58 = v57 * v53;
    if (v55 > v57) {
      float v58 = v55;
    }
    if (v58 < 0.00048828) {
      float v58 = 0.00048828;
    }
    void v51[3] = v58;
    float v59 = v52 + (float)((float)(v56 * -4.0) * v55);
    float v60 = v51[5];
    float v61 = v51[12];
    if (v60 <= 0.0075)
    {
      float v64 = v51[13];
    }
    else
    {
      float v62 = v51[14];
      float v61 = v52 + (float)(v62 * (float)(v61 - v52));
      float v63 = fabsf(v59);
      float v64 = v63 + (float)(v62 * (float)(v51[13] - v63));
      v51[12] = v61;
      v51[13] = v64;
    }
    double v65 = fmax(v64, 0.00000000305175781) / fmaxf(v61, 0.000015259);
    float v66 = v51[15];
    float v67 = v51[16];
    BOOL v68 = (float)(v55 * v66) < v52;
    float v69 = fmin(v65, 1.0);
    float v70 = v66 * v52;
    BOOL v71 = !v68 && v55 <= v70;
    float v72 = v69 * 0.01;
    if (v71) {
      float v72 = v69;
    }
    float v73 = v56 + (float)((float)(v55 * (float)(v59 * (float)((float)(v60 / (float)(v58 * v58)) * v72))) * 0.25);
    v51[4] = v73;
    v51[18] = v72;
    float v74 = v73 * 4.0;
    if ((float)(v73 * 4.0) <= v51[17]) {
      float v74 = v51[17];
    }
    if (v74 >= v67) {
      float v74 = v67;
    }
    *(float *)&v200.realp = v74;
    vDSP_vsmul(v13, 1, (const float *)&v200, v13, 1, *((int *)this + 211) + 1);
    vDSP_vsmul(__Aa.imagp, 1, (const float *)&v200, __Aa.imagp, 1, *((int *)this + 211) + 1);
    goto LABEL_69;
  }
  if (*((_DWORD *)this + 2) == 2)
  {
    uint64_t v6 = 0;
    do
    {
      vDSP_zvmov(v4, 1, v3, 1, (uint64_t)(*((_DWORD *)this + 4) + (*((int *)this + 4) < 0)) >> 1);
      ++v6;
      ++v3;
      ++v4;
    }
    while (v6 < *((int *)this + 2));
    if (*((_DWORD *)this + 194))
    {
      LODWORD(__Aa.realp) = 1065353216;
      vDSP_vfill((const float *)&__Aa, **((float ***)this + 98), 1, *((int *)this + 4));
      vDSP_vclr(**((float ***)this + 99), 1, *((int *)this + 4));
      vDSP_vclr(*(float **)(*((void *)this + 98) + 8), 1, *((int *)this + 4));
      float v7 = *(float **)(*((void *)this + 99) + 8);
LABEL_26:
      vDSP_vfill((const float *)&__Aa, v7, 1, *((int *)this + 4));
    }
  }
  else
  {
    vDSP_zvmov(&__A[*((int *)this + 1)], 1, __C, 1, (uint64_t)(*((_DWORD *)this + 4) + (*((int *)this + 4) < 0)) >> 1);
    if (!*((_DWORD *)this + 194)) {
      return;
    }
    LODWORD(__Aa.realp) = 1065353216;
    double v29 = (float **)*((void *)this + 98);
    if (*((_DWORD *)this + 1))
    {
      vDSP_vclr(*v29, 1, *((int *)this + 4));
      float v7 = (float *)**((void **)this + 99);
      goto LABEL_26;
    }
    vDSP_vfill((const float *)&__Aa, *v29, 1, *((int *)this + 4));
    vDSP_vclr(**((float ***)this + 99), 1, *((int *)this + 4));
  }
}

void CmhBEAM2NOpt::abf(uint64_t a1, const float **a2, const float **a3, float **a4, uint64_t a5, int a6)
{
  uint64_t v10 = a6;
  uint64_t v11 = a5 + 8 * a6;
  double v14 = *(float **)(v11 + 32);
  uint64_t v12 = (uint64_t *)(v11 + 32);
  int v13 = v14;
  float v15 = (float *)*(v12 - 2);
  {
    CmhBEAM2NOpt::abf(DSPSplitComplex const&,DSPSplitComplex const&,DSPSplitComplex&,CmhBEAM2NOpt::DABF_STRUCT *,int)::kPeakDecay = *(_DWORD *)(a1 + 64);
  }
  int v16 = *(_DWORD *)(a1 + 24);
  if (v16 >= 30) {
    int v17 = 30;
  }
  else {
    int v17 = *(_DWORD *)(a1 + 24);
  }
  int v77 = v17;
  uint64_t v80 = v10;
  uint64_t v18 = a5 + 4 * v10;
  float v19 = *(float *)(v18 + 64);
  float __A = *(float *)(v18 + 88);
  float __B = v19;
  vDSP_vabs(*a2, 1, *(float **)(a1 + 416), 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  vDSP_vabs(a2[1], 1, *(float **)(a1 + 424), 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  vDSP_vasm(*(const float **)(a1 + 416), 1, *(const float **)(a1 + 424), 1, &CmhBEAM2NOpt::abf(DSPSplitComplex const&,DSPSplitComplex const&,DSPSplitComplex&,CmhBEAM2NOpt::DABF_STRUCT *,int)::kOneHalf, *(float **)(a1 + 416), 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  vDSP_vclip(v15, 1, &CmhBEAM2NOpt::abf(DSPSplitComplex const&,DSPSplitComplex const&,DSPSplitComplex&,CmhBEAM2NOpt::DABF_STRUCT *,int)::kMinThreshold, &CmhBEAM2NOpt::abf(DSPSplitComplex const&,DSPSplitComplex const&,DSPSplitComplex&,CmhBEAM2NOpt::DABF_STRUCT *,int)::kMaxThreshold, v15, 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  vDSP_vsmul(v15, 1, (const float *)&CmhBEAM2NOpt::abf(DSPSplitComplex const&,DSPSplitComplex const&,DSPSplitComplex&,CmhBEAM2NOpt::DABF_STRUCT *,int)::kPeakDecay, *(float **)(a1 + 424), 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  int v20 = *(_DWORD *)(a1 + 16);
  if (v20 >= 0) {
    int v21 = *(_DWORD *)(a1 + 16);
  }
  else {
    int v21 = v20 + 1;
  }
  int v22 = v21 >> 1;
  if (v20 >= 2)
  {
    unsigned __int16 v23 = 0;
    uint64_t v24 = *(void *)(a1 + 416);
    uint64_t v25 = *(v12 - 2);
    do
    {
      float v26 = *(float *)(v24 + 4 * v23);
      if (v26 <= *(float *)(v25 + 4 * v23)) {
        float v26 = *(float *)(*(void *)(a1 + 424) + 4 * v23);
      }
      *(float *)(v25 + 4 * v23++) = v26;
    }
    while (v22 > v23);
  }
  vDSP_vthr(v15, 1, &CmhBEAM2NOpt::abf(DSPSplitComplex const&,DSPSplitComplex const&,DSPSplitComplex&,CmhBEAM2NOpt::DABF_STRUCT *,int)::kPeakMinValue0, v15, 1, v22);
  vDSP_vabs(*a3, 1, *(float **)(a1 + 416), 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  vDSP_vabs(a3[1], 1, *(float **)(a1 + 424), 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  vDSP_vasm(*(const float **)(a1 + 416), 1, *(const float **)(a1 + 424), 1, &CmhBEAM2NOpt::abf(DSPSplitComplex const&,DSPSplitComplex const&,DSPSplitComplex&,CmhBEAM2NOpt::DABF_STRUCT *,int)::kOneHalf, *(float **)(a1 + 416), 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  vDSP_vclip(v13, 1, &CmhBEAM2NOpt::abf(DSPSplitComplex const&,DSPSplitComplex const&,DSPSplitComplex&,CmhBEAM2NOpt::DABF_STRUCT *,int)::kMinThreshold, &CmhBEAM2NOpt::abf(DSPSplitComplex const&,DSPSplitComplex const&,DSPSplitComplex&,CmhBEAM2NOpt::DABF_STRUCT *,int)::kMaxThreshold, v13, 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  vDSP_vsmul(v13, 1, (const float *)&CmhBEAM2NOpt::abf(DSPSplitComplex const&,DSPSplitComplex const&,DSPSplitComplex&,CmhBEAM2NOpt::DABF_STRUCT *,int)::kPeakDecay, *(float **)(a1 + 424), 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  int v27 = *(_DWORD *)(a1 + 16);
  if (v27 >= 0) {
    int v28 = *(_DWORD *)(a1 + 16);
  }
  else {
    int v28 = v27 + 1;
  }
  int v29 = v28 >> 1;
  if (v27 > 1)
  {
    unsigned __int16 v30 = 0;
    uint64_t v31 = *(void *)(a1 + 416);
    uint64_t v32 = *v12;
    do
    {
      float v33 = *(float *)(v31 + 4 * v30);
      if (v33 <= *(float *)(v32 + 4 * v30)) {
        float v33 = *(float *)(*(void *)(a1 + 424) + 4 * v30);
      }
      *(float *)(v32 + 4 * v30++) = v33;
    }
    while (v29 > v30);
  }
  vDSP_vthr(v13, 1, &CmhBEAM2NOpt::abf(DSPSplitComplex const&,DSPSplitComplex const&,DSPSplitComplex&,CmhBEAM2NOpt::DABF_STRUCT *,int)::kPeakMinValue0, v13, 1, v29);
  uint64_t v34 = a5 + 2 * v10;
  *(_WORD *)(v34 + 72) = 0;
  vDSP_Length v35 = (_WORD *)(v34 + 72);
  vDSP_vsmsb(v15, 1, &__B, v13, 1, *(float **)(a1 + 416), 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  uint64_t v36 = *(float **)(a1 + 416);
  if (v16 >= 1)
  {
    int v37 = (unsigned __int16)*v35;
    if (v77 <= 1) {
      uint64_t v38 = 1;
    }
    else {
      uint64_t v38 = v77;
    }
    double v39 = v36 + 1;
    do
    {
      float v40 = *v39++;
      if (v40 < 0.0) {
        ++v37;
      }
      else {
        --v37;
      }
      --v38;
    }
    while (v38);
    _WORD *v35 = v37;
  }
  uint64_t v41 = a5 + 8 * v10;
  uint64_t v43 = *(const float **)(v41 + 48);
  unint64_t v42 = (const float **)(v41 + 48);
  vDSP_vmul(v43, 1, *a3, 1, v36, 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  vDSP_vsub(*(const float **)(a1 + 416), 1, *a2, 1, *a4, 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  vDSP_vmul(*v42, 1, a3[1], 1, *(float **)(a1 + 416), 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  vDSP_vsub(*(const float **)(a1 + 416), 1, a2[1], 1, a4[1], 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  vDSP_vmax(v15, 1, v13, 1, *(float **)(a1 + 416), 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  vDSP_vthr(*(const float **)(a1 + 416), 1, &CmhBEAM2NOpt::abf(DSPSplitComplex const&,DSPSplitComplex const&,DSPSplitComplex&,CmhBEAM2NOpt::DABF_STRUCT *,int)::kPeakMinValue, *(float **)(a1 + 416), 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  vDSP_vsq(*(const float **)(a1 + 416), 1, *(float **)(a1 + 416), 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  vDSP_vfill(&__A, *(float **)(a1 + 424), 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  vDSP_vdiv(*(const float **)(a1 + 416), 1, *(const float **)(a1 + 424), 1, *(float **)(a1 + 432), 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  if (*v35 >= *(_WORD *)(a5 + 2 * v80 + 76))
  {
    int v54 = *(_DWORD *)(a1 + 256);
    int v47 = a6;
    if (v54 < 0)
    {
      int v56 = 0;
      uint64_t v46 = v80;
      uint64_t v45 = a2;
    }
    else
    {
      int v55 = 0;
      int v56 = 0;
      uint64_t v46 = v80;
      uint64_t v45 = a2;
      uint64_t v57 = *(void *)(a1 + 432);
      uint64_t v58 = *(void *)(a1 + 440);
      uint64_t v59 = *(void *)(a1 + 448);
      uint64_t v60 = *(void *)(a1 + 456);
      do
      {
        unsigned int v61 = v55 + 1;
        int v62 = *(_DWORD *)(a5 + 4 * v80 + 96);
        *(_DWORD *)(v58 + 4 * v61) = *(_DWORD *)(v57 + 4 * v61);
        *(_DWORD *)(v59 + 4 * v61) = 0;
        *(_DWORD *)(v60 + 4 * v61) = v62;
        int v55 = (unsigned __int16)++v56;
      }
      while (v54 >= (unsigned __int16)v56);
    }
    int v63 = *(_DWORD *)(a1 + 24);
    if (v63 > (unsigned __int16)v56)
    {
      int v64 = (unsigned __int16)v56;
      float v65 = (float)a6;
      uint64_t v66 = *(void *)(a1 + 440);
      uint64_t v67 = *(void *)(a1 + 448);
      uint64_t v68 = *(void *)(a1 + 456);
      do
      {
        float v69 = *(float *)(a5 + 4 * v46 + 96);
        float v70 = *(float *)(a5 + 104) * v65;
        unsigned int v71 = v64 + 1;
        *(_DWORD *)(v66 + 4 * v71) = 0;
        *(float *)(v67 + 4 * v71) = v65;
        *(float *)(v68 + 4 * v71) = v70 + (float)((float)(1 - a6) * v69);
        int v64 = (unsigned __int16)++v56;
      }
      while (v63 > (unsigned __int16)v56);
    }
  }
  else
  {
    int v44 = *(_DWORD *)(a1 + 24);
    uint64_t v46 = v80;
    uint64_t v45 = a2;
    int v47 = a6;
    if (v44 >= 1)
    {
      int v48 = 0;
      float v49 = (float)a6;
      float v50 = (float *)(*(void *)(a1 + 456) + 4);
      uint64_t v51 = (float *)(*(void *)(a1 + 448) + 4);
      float v52 = (_DWORD *)(*(void *)(a1 + 440) + 4);
      do
      {
        float v53 = (float)(*(float *)(a5 + 104) * v49) + (float)((float)(1 - a6) * *(float *)(a5 + 4 * v80 + 96));
        *v52++ = 0;
        *v51++ = v49;
        *v50++ = v53;
        ++v48;
      }
      while (v44 > (unsigned __int16)v48);
    }
  }
  vDSP_vmul(*a4, 1, *a3, 1, *(float **)(a1 + 416), 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  vDSP_vmul(a4[1], 1, a3[1], 1, *(float **)(a1 + 424), 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  vDSP_vadd(*(const float **)(a1 + 416), 1, *(const float **)(a1 + 424), 1, *(float **)(a1 + 416), 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  vDSP_vmul(*(const float **)(a1 + 416), 1, *(const float **)(a1 + 440), 1, *(float **)(a1 + 416), 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  vDSP_vmul(*(const float **)(a1 + 456), 1, *v42, 1, *(float **)(a1 + 424), 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  vDSP_vadd(*(const float **)(a1 + 416), 1, *(const float **)(a1 + 424), 1, *(float **)(a1 + 416), 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  vDSP_vmul(*(const float **)(a1 + 448), 1, *(const float **)(a1 + 456), 1, *(float **)(a1 + 424), 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  vDSP_vsub(*(const float **)(a1 + 424), 1, *(const float **)(a1 + 448), 1, *(float **)(a1 + 424), 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  vDSP_vadd(*(const float **)(a1 + 416), 1, *(const float **)(a1 + 424), 1, (float *)*v42, 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  vDSP_vclip(*v42, 1, &CmhBEAM2NOpt::abf(DSPSplitComplex const&,DSPSplitComplex const&,DSPSplitComplex&,CmhBEAM2NOpt::DABF_STRUCT *,int)::kLmsHMin, &CmhBEAM2NOpt::abf(DSPSplitComplex const&,DSPSplitComplex const&,DSPSplitComplex&,CmhBEAM2NOpt::DABF_STRUCT *,int)::kLmsHMax, (float *)*v42, 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  if (!v47)
  {
    vDSP_vmin(*v42 + 1, 1, *(const float **)(a1 + 272), 1, (float *)*v42 + 1, 1, *(_DWORD *)(a1 + 16) / 2 - 1);
    if (!*(_DWORD *)(a1 + 284)) {
      vDSP_vclip(*v42, 1, &CmhBEAM2NOpt::abf(DSPSplitComplex const&,DSPSplitComplex const&,DSPSplitComplex&,CmhBEAM2NOpt::DABF_STRUCT *,int)::kLmsHMin, &CmhBEAM2NOpt::abf(DSPSplitComplex const&,DSPSplitComplex const&,DSPSplitComplex&,CmhBEAM2NOpt::DABF_STRUCT *,int)::zerof, (float *)*v42, 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
    }
  }
  float v72 = *(float *)(a5 + 4 * v46 + 80) + -1.0;
  if (v72 >= (float)(*(_DWORD *)(a1 + 24) - 1)) {
    float v72 = (float)(*(_DWORD *)(a1 + 24) - 1);
  }
  float v73 = v72 + 1.0;
  vDSP_Length v74 = (int)v73;
  if ((int)v74 >= 1)
  {
    uint64_t v75 = (const float *)(*(void *)(a1 + 200) + 4);
    size_t v76 = (const float *)(*(void *)(a1 + 320) + 8);
    vDSP_vsmul(*v42 + 1, 1, v76, (float *)(*(void *)(a1 + 416) + 4), 1, (int)v73);
    vDSP_vsmul(v75, 1, v76, (float *)(*(void *)(a1 + 424) + 4), 1, v74);
    vDSP_vadd((const float *)(*(void *)(a1 + 416) + 4), 1, (const float *)(*(void *)(a1 + 424) + 4), 1, (float *)(*(void *)(a1 + 416) + 4), 1, v74);
    vDSP_vsub(v75, 1, (const float *)(*(void *)(a1 + 416) + 4), 1, (float *)(*(void *)(a1 + 424) + 4), 1, v74);
    vDSP_vmul((const float *)(*(void *)(a1 + 424) + 4), 1, *a3 + 1, 1, (float *)(*(void *)(a1 + 416) + 4), 1, v74);
    vDSP_vsub((const float *)(*(void *)(a1 + 416) + 4), 1, *v45 + 1, 1, *a4 + 1, 1, v74);
    vDSP_vmul((const float *)(*(void *)(a1 + 424) + 4), 1, a3[1] + 1, 1, (float *)(*(void *)(a1 + 416) + 4), 1, v74);
    vDSP_vsub((const float *)(*(void *)(a1 + 416) + 4), 1, v45[1] + 1, 1, a4[1] + 1, 1, v74);
  }
  if (!v47)
  {
    vDSP_vadd(*v45, 1, *a3, 1, *(float **)(a1 + 416), 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
    vDSP_vsmul(*(const float **)(a1 + 416), 1, (const float *)(a1 + 288), *(float **)(a1 + 416), 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
    vDSP_vadd(*a4, 1, *(const float **)(a1 + 416), 1, *a4, 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
    vDSP_vadd(v45[1], 1, a3[1], 1, *(float **)(a1 + 416), 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
    vDSP_vsmul(*(const float **)(a1 + 416), 1, (const float *)(a1 + 288), *(float **)(a1 + 416), 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
    vDSP_vadd(a4[1], 1, *(const float **)(a1 + 416), 1, a4[1], 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  }
}

float CmhBEAM2NOpt::abf_output_only(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, float result)
{
  uint64_t v7 = *(unsigned int *)(a1 + 24);
  if ((int)v7 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 4 * v7;
    uint64_t v10 = a6[1] + 4;
    uint64_t v11 = *(void *)(a1 + 272);
    uint64_t v12 = *a6 + 4;
    uint64_t v13 = a6[6] + 4;
    do
    {
      float v14 = *(float *)(v11 + v8);
      if (v14 >= *(float *)(v13 + v8)) {
        float v14 = *(float *)(v13 + v8);
      }
      *(float *)(v13 + v8) = v14;
      *(float *)(v12 + v8) = *(float *)(a2 + 4 + v8) - (float)(v14 * *(float *)(a4 + 4 + v8));
      uint64_t result = *(float *)(a3 + 4 + v8) - (float)(*(float *)(v13 + v8) * *(float *)(a5 + 4 + v8));
      *(float *)(v10 + v8) = result;
      v8 += 4;
    }
    while (v9 != v8);
  }
  return result;
}

uint64_t CmhBEAM2NOpt::sns(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 56);
  uint64_t v3 = 8;
  float v4 = 0.0;
  do
  {
    float v4 = v4 + fminf(fmaxf(*(float *)(v2 + v3), 0.0), 1.0);
    v3 += 4;
  }
  while (v3 != 44);
  float v5 = fmaxf(v4 * *(float *)(a2 + 128), 0.0);
  if (v5 >= 1.0) {
    float v6 = 64.0;
  }
  else {
    float v6 = v5 * 64.0;
  }
  uint64_t v7 = *(float **)(a2 + 120);
  *uint64_t v7 = sns_table[(int)v6 + 1];
  uint64_t v8 = *(unsigned int *)(result + 24);
  if ((int)v8 > 1)
  {
    uint64_t v9 = v7 + 1;
    uint64_t v10 = v8 - 1;
    uint64_t v11 = (float *)(v2 + 8);
    do
    {
      float v12 = *v11++;
      *v9++ = LODWORD(sns_table[vcvtd_n_s64_f64(fminf(fmaxf(v12, 0.0), 1.0), 6uLL) + 1]);
      --v10;
    }
    while (v10);
  }
  if ((int)v8 >= 1)
  {
    uint64_t v13 = *(float **)(result + 248);
    float v14 = 0.0;
    do
    {
      float v14 = *v7 + (float)(v14 - *v7) * 0.5;
      *uint64_t v7 = v14;
      float v15 = *v13++;
      float v16 = v15;
      if (v15 < v14) {
        float v16 = v14;
      }
      if (v16 <= *(float *)(a2 + 112)) {
        float v16 = *(float *)(a2 + 112);
      }
      *uint64_t v7 = v16;
      float v17 = *(float *)(a2 + 132) * (v16 + -1.0) + 1.0;
      *v7++ = v17;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t CmhBEAM2NOpt::getAuxVectors(uint64_t this, int a2)
{
  uint64_t v2 = *(void *)(this + 784);
  int v3 = *(_DWORD *)(this + 8);
  int v4 = v3 - 1;
  if (v3 - 1 >= a2) {
    int v5 = a2;
  }
  else {
    int v5 = v3 - 1;
  }
  float v6 = (void *)(v2 + 8 * v5);
  uint64_t v7 = *(unsigned int *)(this + 16);
  if ((int)v7 >= 0) {
    int v8 = *(_DWORD *)(this + 16);
  }
  else {
    int v8 = v7 + 1;
  }
  uint64_t v9 = (uint64_t)v8 >> 1;
  uint64_t v10 = *(void *)(this + 792);
  uint64_t v11 = (void *)(v10 + 8 * v5);
  float v12 = *(uint64_t **)(this + 232);
  uint64_t v13 = *(void *)(this + 408) + 136 * v5;
  uint64_t v14 = *(void *)(this + 320);
  if (v3 > 2) {
    int v4 = 1;
  }
  float v15 = (void *)(v10 + 8 * v4);
  float v16 = (void *)(v2 + 8 * v4);
  if (a2 == 1)
  {
    uint64_t v17 = *(void *)(this + 208);
  }
  else
  {
    float v15 = v6;
    float v16 = v11;
    uint64_t v17 = *(void *)(this + 200);
  }
  if (a2 == 1) {
    uint64_t v18 = *(void *)(this + 224);
  }
  else {
    uint64_t v18 = *(void *)(this + 216);
  }
  if (a2 == 1) {
    uint64_t v19 = *(void *)(this + 200);
  }
  else {
    uint64_t v19 = *(void *)(this + 208);
  }
  if (a2 == 1) {
    uint64_t v20 = *(void *)(this + 216);
  }
  else {
    uint64_t v20 = *(void *)(this + 224);
  }
  if (a2 == 1) {
    uint64_t v21 = v12[1];
  }
  else {
    uint64_t v21 = *v12;
  }
  if (a2 == 1) {
    uint64_t v22 = *v12;
  }
  else {
    uint64_t v22 = v12[1];
  }
  uint64_t v23 = *v16 + 4;
  uint64_t v24 = v23 + 4 * v9;
  uint64_t v25 = *v15 + 4;
  uint64_t v26 = v25 + 4 * v9;
  uint64_t v27 = *(void *)(this + 824);
  if (*(_DWORD *)(v27 + 44)) {
    float v28 = *(float *)(v27 + 16) * 4.0;
  }
  else {
    float v28 = 1.0;
  }
  uint64_t v29 = *(void *)(v13 + 48);
  uint64_t v30 = *(void *)(*(void *)(this + 808) + 8 * v5);
  uint64_t v73 = *(void *)(*(void *)(this + 112) + 8 * a2);
  float v31 = *(float *)(v13 + 80);
  uint64_t v32 = *(void *)(*(void *)(this + 104) + 8 * a2);
  float v33 = *(float *)(v14 + 8);
  float v34 = *(float *)(this + 288);
  if (!*(_DWORD *)(this + 124) || !*(_DWORD *)(this + 376))
  {
    uint64_t v38 = *(unsigned int *)(this + 24);
    if ((int)v38 < 1) {
      goto LABEL_77;
    }
    uint64_t v39 = 0;
    uint64_t v40 = v5;
    uint64_t v41 = *(void *)(this + 200) + 4;
    uint64_t v42 = *(void *)(*(void *)(this + 800) + 8 * v5) + 4;
    uint64_t v43 = v29 + 4;
    uint64_t v44 = v32 + 4;
    uint64_t v45 = v22 + 4;
    uint64_t v46 = v21 + 4;
    uint64_t v47 = v20 + 4;
    uint64_t v48 = v19 + 4;
    uint64_t v49 = v18 + 4;
    uint64_t v50 = this + 4 * v40;
    uint64_t v51 = *(int *)(this + 256);
    uint64_t v52 = v17 + 4;
    float v53 = -v34;
    int v54 = *(_DWORD *)(this + 376);
    int v55 = (_DWORD *)(v50 + 260);
    while (v39 > v51)
    {
      *(_DWORD *)(v25 + 4 * v39) = 1065353216;
      *(_DWORD *)(v26 + 4 * v39) = 0;
      *(_DWORD *)(v23 + 4 * v39) = 0;
      *(_DWORD *)(v24 + 4 * v39) = 0;
      if (v54) {
        goto LABEL_58;
      }
LABEL_61:
      if (v38 == ++v39)
      {
        int v62 = v38;
        goto LABEL_71;
      }
    }
    if (v39 >= (int)v31)
    {
      uint64_t v56 = *(void *)(this + 272);
      int v57 = *(_DWORD *)(this + 284);
    }
    else
    {
      uint64_t v56 = *(void *)(this + 272);
      int v57 = *(_DWORD *)(this + 284);
      if (*v55 == 1)
      {
        float v58 = *(float *)(v56 + 4 * v39);
        if (v58 >= *(float *)(v43 + 4 * v39)) {
          float v58 = *(float *)(v43 + 4 * v39);
        }
        float v59 = fminf(v58, 0.0);
        if (!v57) {
          float v58 = v59;
        }
        float v60 = (float)(v58 * v33) - (float)(*(float *)(v41 + 4 * v39) * (float)(1.0 - v33));
        goto LABEL_53;
      }
    }
    float v60 = *(float *)(v56 + 4 * v39);
    if (v60 >= *(float *)(v42 + 4 * v39)) {
      float v60 = *(float *)(v42 + 4 * v39);
    }
    float v61 = fminf(v60, 0.0);
    if (!v57) {
      float v60 = v61;
    }
LABEL_53:
    if (*(_DWORD *)(this + 240))
    {
      *(float *)(v25 + 4 * v39) = *(float *)(v46 + 4 * v39)
                                + (float)((float)(v60 * *(float *)(v48 + 4 * v39)) * *(float *)(v45 + 4 * v39));
      *(float *)(v26 + 4 * v39) = (float)(v60 * *(float *)(v47 + 4 * v39)) * *(float *)(v45 + 4 * v39);
      *(float *)(v23 + 4 * v39) = (float)-(float)(*(float *)(v46 + 4 * v39) * *(float *)(v52 + 4 * v39))
                                - (float)(*(float *)(v45 + 4 * v39) * v60);
      *(float *)(v24 + 4 * v39) = -(float)(*(float *)(v46 + 4 * v39) * *(float *)(v49 + 4 * v39));
      if (*v55 == 1)
      {
        *(float *)(v25 + 4 * v39) = *(float *)(v25 + 4 * v39)
                                  + (float)(v34
                                          * (float)(*(float *)(v46 + 4 * v39)
                                                  - (float)(*(float *)(v48 + 4 * v39) * *(float *)(v45 + 4 * v39))));
        *(float *)(v26 + 4 * v39) = *(float *)(v26 + 4 * v39)
                                  + (float)((float)(*(float *)(v47 + 4 * v39) * v53) * *(float *)(v45 + 4 * v39));
        *(float *)(v23 + 4 * v39) = *(float *)(v23 + 4 * v39)
                                  + (float)(v34
                                          * (float)(*(float *)(v45 + 4 * v39)
                                                  - (float)(*(float *)(v52 + 4 * v39) * *(float *)(v46 + 4 * v39))));
        *(float *)(v24 + 4 * v39) = *(float *)(v24 + 4 * v39)
                                  + (float)((float)(*(float *)(v49 + 4 * v39) * v53) * *(float *)(v46 + 4 * v39));
      }
    }
    else
    {
      *(_DWORD *)(v25 + 4 * v39) = 1065353216;
      *(_DWORD *)(v26 + 4 * v39) = 0;
      *(_DWORD *)(v23 + 4 * v39) = 0;
      *(_DWORD *)(v24 + 4 * v39) = 0;
    }
    *(float *)(v25 + 4 * v39) = *(float *)(v44 + 4 * v39) * *(float *)(v25 + 4 * v39);
    *(float *)(v26 + 4 * v39) = *(float *)(v44 + 4 * v39) * *(float *)(v26 + 4 * v39);
    *(float *)(v23 + 4 * v39) = *(float *)(v44 + 4 * v39) * *(float *)(v23 + 4 * v39);
    *(float *)(v24 + 4 * v39) = *(float *)(v44 + 4 * v39) * *(float *)(v24 + 4 * v39);
    if (!v54) {
      goto LABEL_61;
    }
LABEL_58:
    if (v39 < *(int *)(this + 372))
    {
      *(float *)(v25 + 4 * v39) = *(float *)(v30 + 4 * v39) * *(float *)(v25 + 4 * v39);
      *(float *)(v26 + 4 * v39) = *(float *)(v30 + 4 * v39) * *(float *)(v26 + 4 * v39);
      *(float *)(v23 + 4 * v39) = *(float *)(v30 + 4 * v39) * *(float *)(v23 + 4 * v39);
      *(float *)(v24 + 4 * v39) = *(float *)(v30 + 4 * v39) * *(float *)(v24 + 4 * v39);
    }
    *(float *)(v25 + 4 * v39) = *(float *)(v14 + 4 * v39) * *(float *)(v25 + 4 * v39);
    *(float *)(v26 + 4 * v39) = *(float *)(v14 + 4 * v39) * *(float *)(v26 + 4 * v39);
    *(float *)(v23 + 4 * v39) = *(float *)(v14 + 4 * v39) * *(float *)(v23 + 4 * v39);
    *(float *)(v24 + 4 * v39) = *(float *)(v14 + 4 * v39) * *(float *)(v24 + 4 * v39);
    goto LABEL_61;
  }
  int v35 = *(_DWORD *)(this + 132);
  float v36 = 0.0;
  float v37 = 1.0;
  if (v35 != 4)
  {
    if (v35 != 2 && v35) {
      goto LABEL_68;
    }
LABEL_67:
    float v36 = 1.0;
    float v37 = 0.0;
    goto LABEL_68;
  }
  int v63 = *(_DWORD *)(this + 136);
  if (v63 == 1) {
    goto LABEL_68;
  }
  if (v63) {
    goto LABEL_67;
  }
  if (v3 == 2) {
    BOOL v64 = a2 == 0;
  }
  else {
    BOOL v64 = *(_DWORD *)(this + 4) == 0;
  }
  if (v64) {
    float v37 = 1.0;
  }
  else {
    float v37 = 0.0;
  }
  if (!v64) {
    float v36 = 1.0;
  }
LABEL_68:
  int v62 = *(_DWORD *)(this + 24);
  if (v62 >= 1)
  {
    float v65 = (float *)(*v6 + 4);
    uint64_t v66 = (float *)(*v11 + 4);
    uint64_t v67 = *(unsigned int *)(this + 24);
    do
    {
      *float v65 = v37;
      v65[v9] = 0.0;
      *uint64_t v66 = v36;
      v66[v9] = 0.0;
      ++v66;
      ++v65;
      --v67;
    }
    while (v67);
LABEL_71:
    if (*(_DWORD *)(this + 40)) {
      BOOL v68 = v62 < 1;
    }
    else {
      BOOL v68 = 1;
    }
    if (!v68)
    {
      uint64_t v69 = 0;
      uint64_t v70 = v73 + 4;
      uint64_t v71 = 4 * v62;
      do
      {
        *(float *)(v25 + v69) = *(float *)(v70 + v69) * *(float *)(v25 + v69);
        *(float *)(v26 + v69) = *(float *)(v70 + v69) * *(float *)(v26 + v69);
        *(float *)(v23 + v69) = *(float *)(v70 + v69) * *(float *)(v23 + v69);
        *(float *)(v24 + v69) = *(float *)(v70 + v69) * *(float *)(v24 + v69);
        v69 += 4;
      }
      while (v71 != v69);
    }
  }
LABEL_77:
  if ((int)v7 >= 1)
  {
    float v72 = (float *)*v6;
    do
    {
      *float v72 = v28 * *v72;
      ++v72;
      --v7;
    }
    while (v7);
  }
  return this;
}

float CmhBEAM2NOpt::setParameter(CmhBEAM2NOpt *this, int a2, CmhBEAM2NOpt *a3, double a4, double a5)
{
  switch(a2)
  {
    case 3:
      *(_DWORD *)(*((void *)this + 103) + 44) = *(_DWORD *)a3;
      return *(float *)&a4;
    case 4:
      float v6 = *(float *)a3;
      *((_DWORD *)this + 65) = *(_DWORD *)a3;
      goto LABEL_62;
    case 5:
      *((_DWORD *)this + 94) = *(_DWORD *)a3;
      return *(float *)&a4;
    case 9:
      CmhBEAM2NOpt::setSpatialFilterReal((uint64_t)this, (float *)a3);
      return *(float *)&a4;
    case 10:
      CmhBEAM2NOpt::setSpatialFilterImag((uint64_t)this, (float *)a3);
      return *(float *)&a4;
    case 13:
      uint64_t v7 = a3;
      unsigned int v8 = 0;
      goto LABEL_14;
    case 14:
      uint64_t v9 = a3;
      unsigned int v10 = 0;
      goto LABEL_18;
    case 15:
      uint64_t v7 = a3;
      unsigned int v8 = 1;
LABEL_14:
      CmhBEAM2NOpt::setModelSpatialFilterReal(this, v7, v8);
      return *(float *)&a4;
    case 16:
      uint64_t v9 = a3;
      unsigned int v10 = 1;
LABEL_18:
      CmhBEAM2NOpt::setModelSpatialFilterImag(this, v9, v10);
      return *(float *)&a4;
    case 17:
      *(float *)&a4 = CmhBEAM2NOpt::setModelFreqCompVector(this, a3);
      return *(float *)&a4;
    case 18:
      CmhBEAM2NOpt::setModelOmniEQVector(this, a3);
      return *(float *)&a4;
    case 19:
      uint64_t v11 = a3;
      unsigned int v12 = 0;
      goto LABEL_30;
    case 20:
      uint64_t v13 = a3;
      unsigned int v14 = 0;
      goto LABEL_34;
    case 21:
      uint64_t v11 = a3;
      unsigned int v12 = 1;
LABEL_30:
      *(float *)&a4 = CmhBEAM2NOpt::setModelFreqCompVector(this, v11, v12);
      return *(float *)&a4;
    case 22:
      uint64_t v13 = a3;
      unsigned int v14 = 1;
LABEL_34:
      CmhBEAM2NOpt::setModelOmniEQVector(this, v13, v14);
      return *(float *)&a4;
    case 29:
      uint64_t v15 = *((unsigned int *)this + 2);
      if ((int)v15 >= 1)
      {
        LODWORD(a4) = *(_DWORD *)a3;
        float v16 = (_DWORD *)(*((void *)this + 51) + 64);
        do
        {
          *float v16 = LODWORD(a4);
          v16 += 34;
          --v15;
        }
        while (v15);
      }
      return *(float *)&a4;
    case 30:
      float v28 = *(float *)a3;
      CmhBEAM2NOpt::setWNG(this, v28);
      return *(float *)&a4;
    case 31:
      float v29 = *(float *)a3;
      uint64_t v30 = *((void *)this + 51);
      *(_DWORD *)(v30 + 108) = *(_DWORD *)a3;
      if (*((int *)this + 2) >= 2) {
        *(float *)(v30 + 244) = v29;
      }
      return *(float *)&a4;
    case 34:
      LODWORD(a4) = *(_DWORD *)a3;
      uint64_t v17 = *((void *)this + 51);
      *(_DWORD *)(v17 + 112) = *(_DWORD *)a3;
      if (*((int *)this + 2) >= 2) {
        *(_DWORD *)(v17 + 248) = LODWORD(a4);
      }
      return *(float *)&a4;
    case 35:
      *((_DWORD *)this + 71) = *(_DWORD *)a3;
      return *(float *)&a4;
    case 36:
      LODWORD(a4) = *(_DWORD *)a3;
      *((_DWORD *)this + 72) = *(_DWORD *)a3;
      return *(float *)&a4;
    case 37:
      if (*(_DWORD *)a3 <= 1u) {
        *((_DWORD *)this + 1) = *(_DWORD *)a3;
      }
      return *(float *)&a4;
    case 38:
      *((_DWORD *)this + 30) = *(_DWORD *)a3;
      return *(float *)&a4;
    case 39:
      CmhBEAM2NOpt::setABFVector((uint64_t)this, (float *)a3);
      return *(float *)&a4;
    case 40:
      int v18 = 0;
      goto LABEL_52;
    case 41:
      int v18 = 1;
LABEL_52:
      *(float *)&a4 = CmhBEAM2NOpt::setABFVector(this, v18, (float *)a3);
      return *(float *)&a4;
    case 44:
      *((_DWORD *)this + 38) = *(_DWORD *)a3;
      return *(float *)&a4;
    case 45:
      *((_DWORD *)this + 32) = *(_DWORD *)a3;
      return *(float *)&a4;
    case 46:
      *((_DWORD *)this + 31) = *(_DWORD *)a3;
      return *(float *)&a4;
    case 47:
      *((_DWORD *)this + 33) = *(_DWORD *)a3;
      return *(float *)&a4;
    case 48:
      float v19 = *(float *)a3;
      *((_DWORD *)this + 34) = *(_DWORD *)a3;
      uint64_t v20 = (CmhBEAM2NOpt *)((char *)this + 464);
      *((float *)this + 143) = v19;
      goto LABEL_112;
    case 49:
      *((_DWORD *)this + 60) = *(_DWORD *)a3;
      return *(float *)&a4;
    case 50:
      *((_DWORD *)this + 65) = *(_DWORD *)a3;
      return *(float *)&a4;
    case 51:
      float v6 = *(float *)a3;
LABEL_62:
      *((float *)this + 66) = v6;
      return *(float *)&a4;
    case 52:
      float v21 = *(float *)a3;
      int v22 = *((_DWORD *)this + 2);
      if (v22 >= 1) {
        int v22 = 1;
      }
      goto LABEL_102;
    case 53:
      float v21 = *(float *)a3;
      int v22 = *((_DWORD *)this + 2);
      if (v22 >= 2) {
        int v22 = 2;
      }
LABEL_102:
      *(float *)(*((void *)this + 51) + 136 * v22 - 28) = v21;
      return *(float *)&a4;
    case 54:
      LODWORD(a4) = *(_DWORD *)a3;
      int v23 = *((_DWORD *)this + 2);
      if (v23 >= 1) {
        int v23 = 1;
      }
      goto LABEL_69;
    case 55:
      LODWORD(a4) = *(_DWORD *)a3;
      int v23 = *((_DWORD *)this + 2);
      if (v23 >= 2) {
        int v23 = 2;
      }
LABEL_69:
      *(_DWORD *)(*((void *)this + 51) + 136 * v23 - 24) = LODWORD(a4);
      return *(float *)&a4;
    case 56:
      *(float *)&a4 = (float)((float)*(int *)a3 / (float)*((int *)this + 3)) * (float)*((int *)this + 4);
      *((_DWORD *)this + 8) = *(_DWORD *)a3;
      int v24 = *((_DWORD *)this + 6) - 1;
      if (v24 >= (int)*(float *)&a4) {
        int v24 = (int)*(float *)&a4;
      }
      *((_DWORD *)this + 64) = v24;
      return *(float *)&a4;
    case 58:
      uint64_t v20 = (CmhBEAM2NOpt *)((char *)this + 464);
      LODWORD(a4) = *(_DWORD *)a3;
      *((_DWORD *)this + 125) = *(_DWORD *)a3;
      goto LABEL_112;
    case 59:
      float v25 = __exp10((float)(*(float *)a3 / -20.0));
      *((float *)this + 90) = v25;
      CmhBEAM2NOpt::loadRVSSSuppressionLimits(this);
      return *(float *)&a4;
    case 60:
      uint64_t v20 = (CmhBEAM2NOpt *)((char *)this + 464);
      LODWORD(a4) = *(_DWORD *)a3;
      *((_DWORD *)this + 126) = *(_DWORD *)a3;
      goto LABEL_112;
    case 61:
      uint64_t v20 = (CmhBEAM2NOpt *)((char *)this + 464);
      LODWORD(a4) = *(_DWORD *)a3;
      *((_DWORD *)this + 127) = *(_DWORD *)a3;
      goto LABEL_112;
    case 62:
      uint64_t v20 = (CmhBEAM2NOpt *)((char *)this + 464);
      LODWORD(a4) = *(_DWORD *)a3;
      *((_DWORD *)this + 128) = *(_DWORD *)a3;
      goto LABEL_112;
    case 63:
      uint64_t v20 = (CmhBEAM2NOpt *)((char *)this + 464);
      LODWORD(a4) = *(_DWORD *)a3;
      *((_DWORD *)this + 129) = *(_DWORD *)a3;
      goto LABEL_112;
    case 64:
      uint64_t v20 = (CmhBEAM2NOpt *)((char *)this + 464);
      LODWORD(a4) = *(_DWORD *)a3;
      *((_DWORD *)this + 130) = *(_DWORD *)a3;
      goto LABEL_112;
    case 65:
      uint64_t v20 = (CmhBEAM2NOpt *)((char *)this + 464);
      LODWORD(a4) = *(_DWORD *)a3;
      *((_DWORD *)this + 131) = *(_DWORD *)a3;
      goto LABEL_112;
    case 66:
      uint64_t v20 = (CmhBEAM2NOpt *)((char *)this + 464);
      LODWORD(a4) = *(_DWORD *)a3;
      *((_DWORD *)this + 132) = *(_DWORD *)a3;
      goto LABEL_112;
    case 67:
      uint64_t v20 = (CmhBEAM2NOpt *)((char *)this + 464);
      LODWORD(a4) = *(_DWORD *)a3;
      *((_DWORD *)this + 133) = *(_DWORD *)a3;
      goto LABEL_112;
    case 68:
      uint64_t v20 = (CmhBEAM2NOpt *)((char *)this + 464);
      LODWORD(a4) = *(_DWORD *)a3;
      *((_DWORD *)this + 134) = *(_DWORD *)a3;
      goto LABEL_112;
    case 69:
      uint64_t v20 = (CmhBEAM2NOpt *)((char *)this + 464);
      LODWORD(a4) = *(_DWORD *)a3;
      *((_DWORD *)this + 135) = *(_DWORD *)a3;
      goto LABEL_112;
    case 70:
      uint64_t v20 = (CmhBEAM2NOpt *)((char *)this + 464);
      LODWORD(a4) = *(_DWORD *)a3;
      *((_DWORD *)this + 136) = *(_DWORD *)a3;
      goto LABEL_112;
    case 71:
      uint64_t v20 = (CmhBEAM2NOpt *)((char *)this + 464);
      LODWORD(a4) = *(_DWORD *)a3;
      *((_DWORD *)this + 137) = *(_DWORD *)a3;
      goto LABEL_112;
    case 72:
      uint64_t v20 = (CmhBEAM2NOpt *)((char *)this + 464);
      LODWORD(a4) = *(_DWORD *)a3;
      *((_DWORD *)this + 138) = *(_DWORD *)a3;
      goto LABEL_112;
    case 73:
      uint64_t v20 = (CmhBEAM2NOpt *)((char *)this + 464);
      LODWORD(a4) = *(_DWORD *)a3;
      *((_DWORD *)this + 139) = *(_DWORD *)a3;
      goto LABEL_112;
    case 74:
      uint64_t v20 = (CmhBEAM2NOpt *)((char *)this + 464);
      LODWORD(a4) = *(_DWORD *)a3;
      *((_DWORD *)this + 140) = *(_DWORD *)a3;
      goto LABEL_112;
    case 75:
      uint64_t v20 = (CmhBEAM2NOpt *)((char *)this + 464);
      LODWORD(a4) = *(_DWORD *)a3;
      *((_DWORD *)this + 141) = *(_DWORD *)a3;
      goto LABEL_112;
    case 76:
      uint64_t v20 = (CmhBEAM2NOpt *)((char *)this + 464);
      LODWORD(a4) = *(_DWORD *)a3;
      *((_DWORD *)this + 142) = *(_DWORD *)a3;
      goto LABEL_112;
    case 77:
      uint64_t v31 = 0;
      do
      {
        LODWORD(a4) = *(_DWORD *)((char *)a3 + v31);
        *(_DWORD *)((char *)this + v31 + 500) = LODWORD(a4);
        v31 += 4;
      }
      while (v31 != 76);
      uint64_t v20 = (CmhBEAM2NOpt *)((char *)this + 464);
LABEL_112:
      LODWORD(a4) = CmhMicCheck::init_check_mics(v20, a4, a5).u32[0];
      return *(float *)&a4;
    case 78:
      CmhBEAM2NOpt::setModelFreqEQVector(this, a3);
      return *(float *)&a4;
    case 79:
      uint64_t v32 = a3;
      unsigned int v33 = 0;
      goto LABEL_120;
    case 80:
      uint64_t v32 = a3;
      unsigned int v33 = 1;
LABEL_120:
      CmhBEAM2NOpt::setModelFreqEQVector(this, v32, v33);
      break;
    case 84:
      *((_DWORD *)this + 10) = *(_DWORD *)a3;
      break;
    case 85:
      *((_DWORD *)this + 194) = *(_DWORD *)a3;
      break;
    case 90:
      *((_DWORD *)this + 216) = *(_DWORD *)a3;
      break;
    case 91:
      LODWORD(a4) = *(_DWORD *)a3;
      *((_DWORD *)this + 95) = *(_DWORD *)a3;
      break;
    case 92:
      float v26 = *(float *)a3;
      *((_DWORD *)this + 35) = *(_DWORD *)a3;
      int v27 = (int)(float)((float)(v26 / (float)*((int *)this + 3)) * (float)*((int *)this + 4));
      if (*((_DWORD *)this + 6) - 1 < v27) {
        int v27 = *((_DWORD *)this + 6) - 1;
      }
      *(float *)&a4 = (float)v27;
      *((float *)this + 96) = (float)v27;
      break;
    case 93:
      LODWORD(a4) = *(_DWORD *)a3;
      *((_DWORD *)this + 97) = *(_DWORD *)a3;
      break;
    case 94:
      LODWORD(a4) = *(_DWORD *)a3;
      *((_DWORD *)this + 98) = *(_DWORD *)a3;
      break;
    case 95:
      *((_DWORD *)this + 36) = *(_DWORD *)a3;
      break;
    default:
      return *(float *)&a4;
  }
  return *(float *)&a4;
}

uint64_t CmhBEAM2NOpt::setSpatialFilterReal(uint64_t this, float *a2)
{
  uint64_t v2 = *(unsigned int *)(this + 28);
  if ((int)v2 >= 1)
  {
    int v3 = *(_DWORD **)(this + 200);
    do
    {
      int v4 = *(_DWORD *)a2++;
      *v3++ = v4;
      --v2;
    }
    while (v2);
  }
  int v5 = (int)(float)((float)((float)*(int *)(this + 32) / (float)*(int *)(this + 12)) * (float)*(int *)(this + 16));
  if (*(_DWORD *)(this + 24) - 1 < v5) {
    int v5 = *(_DWORD *)(this + 24) - 1;
  }
  *(_DWORD *)(this + 256) = v5;
  *(_DWORD *)(this + 36) = 1;
  return this;
}

uint64_t CmhBEAM2NOpt::setSpatialFilterImag(uint64_t this, float *a2)
{
  uint64_t v2 = *(unsigned int *)(this + 28);
  if ((int)v2 >= 1)
  {
    int v3 = *(_DWORD **)(this + 216);
    do
    {
      int v4 = *(_DWORD *)a2++;
      *v3++ = v4;
      --v2;
    }
    while (v2);
  }
  int v5 = (int)(float)((float)((float)*(int *)(this + 32) / (float)*(int *)(this + 12)) * (float)*(int *)(this + 16));
  if (*(_DWORD *)(this + 24) - 1 < v5) {
    int v5 = *(_DWORD *)(this + 24) - 1;
  }
  *(_DWORD *)(this + 256) = v5;
  *(_DWORD *)(this + 36) = 1;
  return this;
}

uint64_t CmhBEAM2NOpt::setModelSpatialFilterReal(CmhBEAM2NOpt *this, CmhBEAM2NOpt *a2, unsigned int a3)
{
  uint64_t result = CmhBEAM2NOpt::interpolateFrequencyVector((uint64_t)a2, (float *)0x101, *((void *)this + a3 + 25), 93.75, (float *)*((unsigned int *)this + 7), (float)*((int *)this + 3) / (float)*((int *)this + 4));
  int v5 = (int)(float)((float)((float)*((int *)this + 8) / (float)*((int *)this + 3)) * (float)*((int *)this + 4));
  if (*((_DWORD *)this + 6) - 1 < v5) {
    int v5 = *((_DWORD *)this + 6) - 1;
  }
  *((_DWORD *)this + 64) = v5;
  *((_DWORD *)this + 9) = 1;
  return result;
}

uint64_t CmhBEAM2NOpt::setModelSpatialFilterImag(CmhBEAM2NOpt *this, CmhBEAM2NOpt *a2, unsigned int a3)
{
  int v4 = (float **)((char *)this + 216);
  CmhBEAM2NOpt::interpolateFrequencyVector((uint64_t)a2, (float *)0x101, *((void *)this + a3 + 27), 93.75, (float *)*((unsigned int *)this + 7), (float)*((int *)this + 3) / (float)*((int *)this + 4));
  int v5 = *((_DWORD *)this + 3);
  int v6 = *((_DWORD *)this + 4);
  int v7 = (int)(float)((float)((float)*((int *)this + 8) / (float)v5) * (float)v6);
  int v8 = *((_DWORD *)this + 5);
  if (*((_DWORD *)this + 6) - 1 < v7) {
    int v7 = *((_DWORD *)this + 6) - 1;
  }
  *((_DWORD *)this + 64) = v7;
  *((_DWORD *)this + 9) = 1;
  int v9 = v6 + (v6 < 0);

  return CmhMicCheck::initialize((CmhBEAM2NOpt *)((char *)this + 464), v5, v8, (v9 >> 1) + 1, (float **)this + 25, v4);
}

float CmhBEAM2NOpt::setModelFreqCompVector(CmhBEAM2NOpt *this, CmhBEAM2NOpt *a2)
{
  CmhBEAM2NOpt::setModelFreqCompVector(this, a2, 0);

  return CmhBEAM2NOpt::setModelFreqCompVector(this, a2, 1u);
}

float CmhBEAM2NOpt::setModelFreqCompVector(CmhBEAM2NOpt *this, CmhBEAM2NOpt *a2, unsigned int a3)
{
  CmhBEAM2NOpt::interpolateFrequencyVector((uint64_t)a2, (float *)0x101, *(void *)(*((void *)this + 12) + 8 * a3), 93.75, (float *)*((unsigned int *)this + 7), (float)*((int *)this + 3) / (float)*((int *)this + 4));
  uint64_t v6 = *((unsigned int *)this + 7);
  if ((int)v6 >= 1)
  {
    int v7 = *(float **)(*((void *)this + 12) + 8 * a3);
    int v8 = *(float **)(*((void *)this + 29) + 8 * a3);
    do
    {
      float v9 = *v7++;
      float result = v9;
      *v8++ = v9;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t CmhBEAM2NOpt::setModelOmniEQVector(CmhBEAM2NOpt *this, CmhBEAM2NOpt *a2)
{
  CmhBEAM2NOpt::interpolateFrequencyVector((uint64_t)a2, (float *)0x101, **((void **)this + 13), 93.75, (float *)*((unsigned int *)this + 7), (float)*((int *)this + 3) / (float)*((int *)this + 4));
  uint64_t v4 = *(void *)(*((void *)this + 13) + 8);
  int v5 = (float *)*((unsigned int *)this + 7);
  float v6 = (float)*((int *)this + 3) / (float)*((int *)this + 4);

  return CmhBEAM2NOpt::interpolateFrequencyVector((uint64_t)a2, (float *)0x101, v4, 93.75, v5, v6);
}

uint64_t CmhBEAM2NOpt::setModelOmniEQVector(CmhBEAM2NOpt *this, CmhBEAM2NOpt *a2, unsigned int a3)
{
  return CmhBEAM2NOpt::interpolateFrequencyVector((uint64_t)a2, (float *)0x101, *(void *)(*((void *)this + 13) + 8 * a3), 93.75, (float *)*((unsigned int *)this + 7), (float)*((int *)this + 3) / (float)*((int *)this + 4));
}

uint64_t CmhBEAM2NOpt::setABFVector(uint64_t this, float *a2)
{
  uint64_t v2 = *(unsigned int *)(this + 8);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(unsigned int *)(this + 24);
    do
    {
      if ((int)v4 >= 1)
      {
        uint64_t v5 = *(void *)(this + 408) + 136 * v3;
        uint64_t v6 = *(void *)(v5 + 48);
        int v7 = (_DWORD *)(*(void *)(v5 + 56) + 4);
        int v8 = (_DWORD *)(v6 + 4);
        float v9 = a2;
        uint64_t v10 = v4;
        do
        {
          *v8++ = *(_DWORD *)v9;
          int v11 = *(_DWORD *)v9++;
          *v7++ = v11;
          --v10;
        }
        while (v10);
      }
      ++v3;
    }
    while (v3 != v2);
  }
  return this;
}

float CmhBEAM2NOpt::setABFVector(CmhBEAM2NOpt *this, int a2, float *a3)
{
  uint64_t v3 = *((unsigned int *)this + 6);
  if ((int)v3 >= 1)
  {
    int v4 = *((_DWORD *)this + 2) - 1;
    if (v4 >= a2) {
      int v4 = a2;
    }
    uint64_t v5 = *((void *)this + 51) + 136 * v4;
    uint64_t v6 = *(void *)(v5 + 48);
    int v7 = (float *)(*(void *)(v5 + 56) + 4);
    int v8 = (float *)(v6 + 4);
    do
    {
      *v8++ = *a3;
      float v9 = *a3++;
      float result = v9;
      *v7++ = v9;
      --v3;
    }
    while (v3);
  }
  return result;
}

void CmhBEAM2NOpt::setWNG(CmhBEAM2NOpt *this, float a2)
{
  float v3 = __exp10(a2 * 0.1);
  *((float *)this + 70) = v3;

  CmhBEAM2NOpt::calc_wng_beta_bound((void **)this, v3);
}

uint64_t CmhBEAM2NOpt::setModelFreqEQVector(CmhBEAM2NOpt *this, CmhBEAM2NOpt *a2)
{
  CmhBEAM2NOpt::interpolateFrequencyVector((uint64_t)a2, (float *)0x101, **((void **)this + 14), 93.75, (float *)*((unsigned int *)this + 7), (float)*((int *)this + 3) / (float)*((int *)this + 4));
  uint64_t v4 = *(void *)(*((void *)this + 14) + 8);
  uint64_t v5 = (float *)*((unsigned int *)this + 7);
  float v6 = (float)*((int *)this + 3) / (float)*((int *)this + 4);

  return CmhBEAM2NOpt::interpolateFrequencyVector((uint64_t)a2, (float *)0x101, v4, 93.75, v5, v6);
}

uint64_t CmhBEAM2NOpt::setModelFreqEQVector(CmhBEAM2NOpt *this, CmhBEAM2NOpt *a2, unsigned int a3)
{
  return CmhBEAM2NOpt::interpolateFrequencyVector((uint64_t)a2, (float *)0x101, *(void *)(*((void *)this + 14) + 8 * a3), 93.75, (float *)*((unsigned int *)this + 7), (float)*((int *)this + 3) / (float)*((int *)this + 4));
}

uint64_t Spatializer::getTailTimeFrames(Spatializer *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t Spatializer::getLatencyFrames(Spatializer *this)
{
  return 0;
}

double Spatializer::getDryMix(Spatializer *this)
{
  return 0.0;
}

void Spatializer::getFFTFilterConfigParams(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
}

uint64_t Spatializer::setIRSource()
{
  return 0;
}

uint64_t CartesianSpatializer::processAccumulating(CartesianSpatializer *this, const float *a2, float *const *a3, int a4, float *const *a5, unsigned int a6, unsigned int a7, float a8, IR::ComplexDataCircBuffer *a9)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 16))
  {
    if (*((_WORD *)this + 160) || *((unsigned char *)this + 17) || *((unsigned char *)this + 328))
    {
      *((_WORD *)this + 160) = 0;
      float v15 = *((float *)this + 13);
      float v16 = *((float *)this + 14);
      __float2 v17 = __sincosf_stret(*((float *)this + 12) * 0.017453);
      __float2 v19 = __sincosf_stret(v15 * 0.017453);
      float cosval = v19.__cosval;
      float v20 = (float)(v17.__cosval * v16) * v19.__cosval;
      float v21 = (float)(v17.__sinval * v16) * v19.__cosval;
      float v22 = v16 * v19.__sinval;
      if ((*((unsigned char *)this + 24) & 0x80) != 0)
      {
        float v23 = fabsf(v21);
        float v24 = fabsf(v20);
        float v25 = fabsf(v22);
        if (v23 < v24) {
          float v23 = v24;
        }
        if (v23 < v25) {
          float v23 = v25;
        }
        if (v23 != 0.0)
        {
          float v26 = sqrtf((float)((float)(v20 * v20) + (float)(v21 * v21)) + (float)(v22 * v22)) / v23;
          float v21 = v21 * v26;
          float v20 = v20 * v26;
          float v22 = v22 * v26;
        }
      }
      float v27 = fabsf(v21);
      float v28 = fabsf(v20);
      float v29 = fabsf(v22);
      if (v27 < v28) {
        float v27 = v28;
      }
      if (v27 >= v29) {
        float v30 = v27;
      }
      else {
        float v30 = v29;
      }
      if (v30 > 1.0)
      {
        float v31 = 1.0 / v30;
        float v21 = v21 * v31;
        float v20 = v20 * v31;
        float v22 = v22 * v31;
      }
      BOOL v32 = *((unsigned char *)this + 392) != 0;
      BOOL v33 = v15 < 0.0;
      if (!v32 || !v33) {
        float cosval = 1.0;
      }
      float v34 = v20 * cosval;
      float v35 = 0.0;
      if (!v32 || !v33) {
        float v35 = v22;
      }
      float v36 = v21 * cosval;
      float v37 = *((float *)this + 15);
      if (v37 < *((float *)this + 16)) {
        float v37 = *((float *)this + 16);
      }
      if (v37 < *((float *)this + 17)) {
        float v37 = *((float *)this + 17);
      }
      if (*((unsigned char *)this + 112)) {
        unsigned int v38 = *((_DWORD *)this + 99);
      }
      else {
        unsigned int v38 = 0;
      }
      uint64_t v40 = CartesianPanner::pan((CartesianSpatializer *)((char *)this + 264 * v38 + 400), v37, v36, v34, v35, *((float **)this + 45), (*((void *)this + 46) - *((void *)this + 45)) >> 2);
      if (v40)
      {
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        uint64_t v41 = getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
        {
          std::string::basic_string[abi:ne180100]<0>(&v60, "CartesianSpatializer");
          uint64_t v50 = std::string::append(&v60, "::", 2uLL);
          long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
          __Step.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__Step.__r_.__value_.__l.__data_ = v51;
          v50->__r_.__value_.__l.__size_ = 0;
          v50->__r_.__value_.__r.__words[2] = 0;
          v50->__r_.__value_.__r.__words[0] = 0;
          uint64_t v52 = std::string::append(&__Step, "processAccumulating", 0x13uLL);
          long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
          int64_t v63 = v52->__r_.__value_.__r.__words[2];
          long long __Start = v53;
          v52->__r_.__value_.__l.__size_ = 0;
          v52->__r_.__value_.__r.__words[2] = 0;
          v52->__r_.__value_.__r.__words[0] = 0;
          p_Start = &__Start;
          if (v63 < 0) {
            p_Start = (long long *)__Start;
          }
          *(_DWORD *)AudioChannelLayout buf = 136315394;
          float v65 = p_Start;
          __int16 v66 = 1024;
          int v67 = v40;
          _os_log_debug_impl(&dword_1BB0CE000, v41, OS_LOG_TYPE_DEBUG, "%s: ERROR: could not compute the panning gains, err=%d", buf, 0x12u);
          if (SHIBYTE(v63) < 0) {
            operator delete((void *)__Start);
          }
          if (SHIBYTE(__Step.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__Step.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v60.__r_.__value_.__l.__data_);
          }
        }
        uint64_t v42 = (void *)*((void *)this + 45);
        uint64_t v43 = *((void *)this + 46) - (void)v42;
        if (v43 >= 1) {
          bzero(v42, 4 * (((unint64_t)v43 >> 2) - ((unint64_t)v43 > 3)) + 4);
        }
      }
      if (*((unsigned char *)this + 113)) {
        AUSM::speakerSnap(*((AUSM **)this + 45), (*((void *)this + 46) - *((void *)this + 45)) >> 2);
      }
      if (*((unsigned char *)this + 17)) {
        std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)this + 336, *((char **)this + 45), *((void *)this + 46), (uint64_t)(*((void *)this + 46) - *((void *)this + 45)) >> 2);
      }
      *((unsigned char *)this + 17) = 0;
    }
    else
    {
      uint64_t v40 = 0;
    }
    char v44 = *((unsigned char *)this + 132);
    if (!v44) {
      a8 = 0.0;
    }
    if (a4)
    {
      uint64_t v45 = 0;
      do
      {
        LODWORD(__Start) = 0;
        uint64_t v46 = *((void *)this + 42);
        LODWORD(__Start) = *(_DWORD *)(v46 + 4 * v45);
        float v47 = a8 * *(float *)(*((void *)this + 45) + 4 * v45);
        float v48 = v47;
        if (!*((_DWORD *)this + 81)) {
          float v48 = v47 + (float)(*((float *)this + 96) * (float)(*(float *)(v46 + 4 * v45) - v47));
        }
        *(float *)(v46 + 4 * v45) = v48;
        if (a7)
        {
          LODWORD(__Step.__r_.__value_.__l.__data_) = 0;
          *(float *)&__Step.__r_.__value_.__l.__data_ = (float)(*(float *)(v46 + 4 * v45) - *(float *)&__Start)
                                                      / (float)a7;
          if (fabsf(*(float *)&__Step.__r_.__value_.__l.__data_) <= 0.000001)
          {
            if (fabsf(*(float *)&__Start) > 0.000001)
            {
              *(float *)(v46 + 4 * v45) = v47;
              vDSP_vsma(a2, 1, (const float *)&__Start, a3[v45], 1, a3[v45], 1, a7);
            }
          }
          else
          {
            vDSP_vrampmuladd(a2, 1, (float *)&__Start, (const float *)&__Step, a3[v45], 1, a7);
          }
        }
        ++v45;
      }
      while (a4 != v45);
      char v44 = *((unsigned char *)this + 132);
    }
    *((unsigned char *)this + 268) = v44;
    *((_DWORD *)this + 5) = a7;
  }
  else
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    uint64_t v39 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      std::string::basic_string[abi:ne180100]<0>(&v60, "CartesianSpatializer");
      int v55 = std::string::append(&v60, "::", 2uLL);
      long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
      __Step.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__Step.__r_.__value_.__l.__data_ = v56;
      v55->__r_.__value_.__l.__size_ = 0;
      v55->__r_.__value_.__r.__words[2] = 0;
      v55->__r_.__value_.__r.__words[0] = 0;
      int v57 = std::string::append(&__Step, "processAccumulating", 0x13uLL);
      long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
      int64_t v63 = v57->__r_.__value_.__r.__words[2];
      long long __Start = v58;
      v57->__r_.__value_.__l.__size_ = 0;
      v57->__r_.__value_.__r.__words[2] = 0;
      v57->__r_.__value_.__r.__words[0] = 0;
      float v59 = &__Start;
      if (v63 < 0) {
        float v59 = (long long *)__Start;
      }
      *(_DWORD *)AudioChannelLayout buf = 136315138;
      float v65 = v59;
      _os_log_debug_impl(&dword_1BB0CE000, v39, OS_LOG_TYPE_DEBUG, "%s: ERROR: not initialized", buf, 0xCu);
      if (SHIBYTE(v63) < 0) {
        operator delete((void *)__Start);
      }
      if (SHIBYTE(__Step.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__Step.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v60.__r_.__value_.__l.__data_);
      }
    }
    return 4294956429;
  }
  return v40;
}

void sub_1BB43BE68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void AUSM::speakerSnap(AUSM *this, vDSP_Length __N)
{
  float __C = 0.0;
  vDSP_Length v3 = __N;
  vDSP_svesq((const float *)this, 1, &__C, __N);
  float v4 = __C;
  vDSP_vsq((const float *)this, 1, (float *)this, 1, v3);
  vDSP_vsq((const float *)this, 1, (float *)this, 1, v3);
  vDSP_vsq((const float *)this, 1, (float *)this, 1, v3);
  vDSP_vsq((const float *)this, 1, (float *)this, 1, v3);
  vDSP_vsq((const float *)this, 1, (float *)this, 1, v3);
  float __C = 0.0;
  vDSP_svesq((const float *)this, 1, &__C, v3);
  if (__C > 0.0)
  {
    float __C = powf(__C, -0.5);
    vDSP_vsmul((const float *)this, 1, &__C, (float *)this, 1, v3);
  }
  float __B = 0.01;
  vDSP_vthres((const float *)this, 1, &__B, (float *)this, 1, v3);
  float __C = 0.0;
  vDSP_svesq((const float *)this, 1, &__C, v3);
  if (__C > 0.0)
  {
    float __C = sqrtf(v4) * powf(__C, -0.5);
    vDSP_vsmul((const float *)this, 1, &__C, (float *)this, 1, v3);
  }
}

void CartesianSpatializer::reset(CartesianSpatializer *this)
{
  *((unsigned char *)this + 17) = 1;
  *((unsigned char *)this + 268) = *((unsigned char *)this + 132);
  uint64_t v2 = (void *)*((void *)this + 42);
  uint64_t v3 = *((void *)this + 43) - (void)v2;
  if (v3 >= 1) {
    bzero(v2, 4 * (((unint64_t)v3 >> 2) - ((unint64_t)v3 > 3)) + 4);
  }
}

uint64_t CartesianSpatializer::initialize(CartesianSpatializer *this, float a2, unsigned int a3, int a4)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  *((float *)this + 2) = a2;
  *((_DWORD *)this + 3) = a4;
  double v6 = a2 * 0.001953125 * 0.02;
  if (v6 >= 2.22507386e-308) {
    double v7 = -6.90775528 / v6;
  }
  else {
    double v7 = -INFINITY;
  }
  double v8 = exp(v7);
  if (v7 < -708.4) {
    double v8 = 0.0;
  }
  float v9 = v8;
  *((float *)this + 96) = v9;
  if (a3 < (unint64_t)((uint64_t)(*((void *)this + 46) - *((void *)this + 45)) >> 2)) {
    return 4294900553;
  }
  uint64_t v11 = 0;
  while (1)
  {
    int v12 = dword_1BB8D4A90[v11];
    uint64_t v13 = CartesianPanner::initialize((uint64_t)this + 264 * v12 + 400, *((_DWORD *)this + 83), v12);
    if (v13) {
      break;
    }
    if (++v11 == 6)
    {
      *(_DWORD *)AudioChannelLayout buf = 0;
      std::vector<float>::resize((uint64_t)this + 136, a3, buf);
      *(_DWORD *)AudioChannelLayout buf = 0;
      std::vector<float>::resize((uint64_t)this + 272, a3, buf);
      uint64_t v10 = 0;
      *((_WORD *)this + 8) = 257;
      return v10;
    }
  }
  uint64_t v10 = v13;
  if (getAUSMV2Log(void)::onceToken != -1) {
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
  }
  unsigned int v14 = getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    std::string::basic_string[abi:ne180100]<0>(&v22, "CartesianSpatializer");
    float v16 = std::string::append(&v22, "::", 2uLL);
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    int v18 = std::string::append(&v23, "initialize", 0xAuLL);
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    int64_t v25 = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    float v20 = __p;
    if (v25 < 0) {
      float v20 = (void **)__p[0];
    }
    int v21 = *((_DWORD *)this + 83);
    *(_DWORD *)AudioChannelLayout buf = 136315906;
    float v27 = v20;
    __int16 v28 = 1024;
    int v29 = v12;
    __int16 v30 = 1024;
    int v31 = v21;
    __int16 v32 = 1024;
    int v33 = v10;
    _os_log_debug_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_DEBUG, "%s: ERROR: could not initialize the cartesian panner #%i with channel layout tag %u: err=%d", buf, 0x1Eu);
    if (SHIBYTE(v25) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
  }
  return v10;
}

void sub_1BB43C358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL Spatializer::needsToProcess(Spatializer *this)
{
  return *((unsigned char *)this + 132) || *((unsigned char *)this + 268) != 0;
}

uint64_t Spatializer::isInitialized(Spatializer *this)
{
  return *((unsigned __int8 *)this + 16);
}

void Spatializer::setOptionalFeatureSupportDictionary(uint64_t a1, const void **a2)
{
  uint64_t v3 = *(const void **)(a1 + 40);
  float v4 = *a2;
  *(void *)(a1 + 40) = *a2;
  if (v4) {
    CFRetain(v4);
  }
  if (v3) {
    CFRelease(v3);
  }
}

CFTypeRef Spatializer::getOptionalFeatureSupportDictionary@<X0>(CFTypeRef this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)this + 5);
  if (v3) {
    this = CFRetain(*((CFTypeRef *)this + 5));
  }
  *a2 = v3;
  return this;
}

void Spatializer::setPropertyDictionary(uint64_t a1, const void **a2)
{
  uint64_t v3 = *(const void **)(a1 + 32);
  float v4 = *a2;
  *(void *)(a1 + 32) = *a2;
  if (v4) {
    CFRetain(v4);
  }
  if (v3) {
    CFRelease(v3);
  }
  atomic_store(1u, (unsigned __int8 *)(a1 + 322));
}

CFTypeRef Spatializer::getPropertyDictionary@<X0>(CFTypeRef this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3) {
    this = CFRetain(*((CFTypeRef *)this + 4));
  }
  *a2 = v3;
  return this;
}

uint64_t Spatializer::setParameterSmoothing(uint64_t result, int a2)
{
  *(_DWORD *)(result + 324) = a2;
  return result;
}

uint64_t Spatializer::setMaxDistance(uint64_t this, float a2)
{
  if (*(float *)(this + 128) != a2)
  {
    *(float *)(this + 128) = a2;
    *(unsigned char *)(this + 320) = 1;
  }
  return this;
}

uint64_t Spatializer::setRefDistance(uint64_t this, float a2)
{
  if (*(float *)(this + 124) != a2)
  {
    *(float *)(this + 124) = a2;
    *(unsigned char *)(this + 320) = 1;
  }
  return this;
}

uint64_t Spatializer::setInputChannelLabel(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 120) != a2)
  {
    *(_DWORD *)(this + 120) = a2;
    *(unsigned char *)(this + 320) = 1;
  }
  return this;
}

uint64_t Spatializer::setOrientation(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 116) != a2)
  {
    *(_DWORD *)(result + 116) = a2;
    *(unsigned char *)(result + 320) = 1;
  }
  return result;
}

uint64_t Spatializer::setEnableExclusionZones(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 112) != a2)
  {
    *(unsigned char *)(this + 112) = a2;
    *(unsigned char *)(this + 328) = 1;
  }
  return this;
}

uint64_t CartesianSpatializer::setExclusionZones(uint64_t a1, uint64_t a2)
{
  Spatializer::setExclusionZones(a1, a2);
  if (*(unsigned char *)(a1 + 328))
  {
    int PresetFromExclusionZones = AUSM::ExclusionZone::getPresetFromExclusionZones((float **)(a1 + 88));
    if (PresetFromExclusionZones == -1) {
      int v4 = 0;
    }
    else {
      int v4 = PresetFromExclusionZones;
    }
    *(_DWORD *)(a1 + 396) = v4;
  }
  return 0;
}

uint64_t Spatializer::setExclusionZones(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 88);
  int v4 = (char *)(a1 + 88);
  double v7 = *(char **)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v8 = v6 - *(void *)a2;
  if (v8 == *(void *)(a1 + 96) - v5)
  {
    if (v7 == (char *)v6) {
      return 0;
    }
    float v9 = *(float **)a2;
    while (AUSM::ExclusionZone::operator==(v9, v5))
    {
      v9 += 7;
      v5 += 28;
      if (v9 == (float *)v6) {
        return 0;
      }
    }
  }
  if (v4 != (char *)a2) {
    std::vector<AUSM::ExclusionZone>::__assign_with_size[abi:ne180100]<AUSM::ExclusionZone*,AUSM::ExclusionZone*>(v4, v7, v6, 0x6DB6DB6DB6DB6DB7 * (v8 >> 2));
  }
  *(unsigned char *)(a1 + 328) = 1;
  return 0;
}

char *std::vector<AUSM::ExclusionZone>::__assign_with_size[abi:ne180100]<AUSM::ExclusionZone*,AUSM::ExclusionZone*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  double v7 = result;
  uint64_t v8 = *((void *)result + 2);
  float v9 = *(char **)result;
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - *(void *)result) >> 2) < a4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *double v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    if (a4 > 0x924924924924924) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * (v8 >> 2);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x492492492492492) {
      unint64_t v12 = 0x924924924924924;
    }
    else {
      unint64_t v12 = v11;
    }
    float result = std::vector<AUSM::ExclusionZone>::__vallocate[abi:ne180100](v7, v12);
    unsigned int v14 = (char *)v7[1];
    uint64_t v13 = (void **)(v7 + 1);
    float v9 = v14;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      int v18 = v9;
      long long v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v13 = (void **)(result + 8);
  float v15 = (unsigned char *)*((void *)result + 1);
  if (0x6DB6DB6DB6DB6DB7 * ((v15 - v9) >> 2) >= a4) {
    goto LABEL_16;
  }
  float v16 = &__src[4 * ((v15 - v9) >> 2)];
  if (v15 != v9)
  {
    float result = (char *)memmove(*(void **)result, __src, v15 - v9);
    float v9 = (char *)*v13;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    int v18 = v9;
    long long v19 = v16;
LABEL_18:
    float result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *uint64_t v13 = &v9[v17];
  return result;
}

uint64_t Spatializer::setSpeakerSnap(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 113) != a2)
  {
    *(unsigned char *)(this + 113) = a2;
    *(unsigned char *)(this + 320) = 1;
  }
  return this;
}

uint64_t Spatializer::setStereoAngle(uint64_t this, float a2)
{
  if (*(float *)(this + 84) != a2)
  {
    *(float *)(this + 84) = a2;
    *(unsigned char *)(this + 320) = 1;
  }
  return this;
}

uint64_t Spatializer::setInternalizedAmount(uint64_t this, float a2)
{
  if (*(float *)(this + 80) != a2)
  {
    *(float *)(this + 80) = a2;
    *(unsigned char *)(this + 320) = 1;
  }
  return this;
}

uint64_t Spatializer::setBinauralCompatibilityMode(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 76) != a2)
  {
    *(_DWORD *)(result + 76) = a2;
    *(unsigned char *)(result + 320) = 1;
  }
  return result;
}

uint64_t Spatializer::setDiffuse(uint64_t this, float a2)
{
  if (*(float *)(this + 72) != a2)
  {
    *(float *)(this + 72) = a2;
    *(unsigned char *)(this + 320) = 1;
  }
  return this;
}

uint64_t Spatializer::implementsDiffuse(Spatializer *this)
{
  return 0;
}

uint64_t Spatializer::setSourceDepth(uint64_t this, float a2)
{
  if (*(float *)(this + 68) != a2)
  {
    *(float *)(this + 68) = a2;
    *(unsigned char *)(this + 320) = 1;
  }
  return this;
}

uint64_t Spatializer::setSourceHeight(uint64_t this, float a2)
{
  if (*(float *)(this + 64) != a2)
  {
    *(float *)(this + 64) = a2;
    *(unsigned char *)(this + 320) = 1;
  }
  return this;
}

uint64_t Spatializer::setSourceWidth(uint64_t this, float a2)
{
  if (*(float *)(this + 60) != a2)
  {
    *(float *)(this + 60) = a2;
    *(unsigned char *)(this + 320) = 1;
  }
  return this;
}

uint64_t Spatializer::setDistance(uint64_t this, float a2)
{
  if (*(float *)(this + 56) != a2)
  {
    *(float *)(this + 56) = a2;
    *(unsigned char *)(this + 320) = 1;
  }
  return this;
}

uint64_t Spatializer::setElevation(uint64_t this, float a2)
{
  if (*(float *)(this + 52) != a2)
  {
    *(float *)(this + 52) = a2;
    *(unsigned char *)(this + 320) = 1;
  }
  return this;
}

uint64_t Spatializer::setAzimuth(uint64_t this, float a2)
{
  if (*(float *)(this + 48) != a2)
  {
    *(float *)(this + 48) = a2;
    *(unsigned char *)(this + 320) = 1;
  }
  return this;
}

uint64_t Spatializer::setBypassCoeffs(Spatializer *this, float *a2, unsigned int a3)
{
  uint64_t v6 = a3;
  double v7 = (_DWORD **)((char *)this + 136);
  if (a3 != (uint64_t)(*((void *)this + 18) - *((void *)this + 17)) >> 2)
  {
    if (*((unsigned char *)this + 16)) {
      return 0xFFFFFFFFLL;
    }
    std::vector<float>::resize((uint64_t)this + 136, a3);
  }
  if (a3)
  {
    float v9 = *v7;
    do
    {
      int v10 = *(_DWORD *)a2++;
      *v9++ = v10;
      --v6;
    }
    while (v6);
  }
  uint64_t result = 0;
  *((unsigned char *)this + 321) = 1;
  return result;
}

float Spatializer::getBypassCoeffs(Spatializer *this, float *a2, unsigned int a3)
{
  uint64_t v3 = (float *)*((void *)this + 17);
  uint64_t v4 = (*((void *)this + 18) - (void)v3) >> 2;
  if (v4 >= a3) {
    uint64_t v5 = a3;
  }
  else {
    uint64_t v5 = v4;
  }
  if (v5)
  {
    uint64_t v6 = v5;
    do
    {
      float v7 = *v3++;
      float result = v7;
      *a2++ = v7;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t CartesianSpatializer::setParams(CartesianSpatializer *this, const SpatializerParams *a2)
{
  if (!*((unsigned char *)this + 16)) {
    (*(void (**)(CartesianSpatializer *, char *))(*(void *)this + 152))(this, (char *)a2 + 40);
  }

  return Spatializer::setParams(this, a2);
}

uint64_t Spatializer::setParams(Spatializer *this, const SpatializerParams *a2)
{
  if (!*((unsigned char *)this + 16)
    || (uint64_t v5 = *((void *)a2 + 11),
        uint64_t v4 = *((void *)a2 + 12),
        uint64_t v6 = (void *)*((void *)this + 17),
        uint64_t v7 = *((void *)this + 18) - (void)v6,
        v4 - v5 == v7)
    && *((void *)a2 + 6) - *((void *)a2 + 5) == *((void *)this + 12) - *((void *)this + 11))
  {
    long long v8 = *(_OWORD *)a2;
    long long v9 = *((_OWORD *)a2 + 1);
    *((void *)this + 10) = *((void *)a2 + 4);
    *((_OWORD *)this + 3) = v8;
    *((_OWORD *)this + 4) = v9;
    if ((Spatializer *)((char *)this + 48) == a2)
    {
      long long v12 = *((_OWORD *)a2 + 4);
      *(void *)((char *)this + 125) = *(void *)((char *)a2 + 77);
      *((_OWORD *)this + 7) = v12;
    }
    else
    {
      std::vector<AUSM::ExclusionZone>::__assign_with_size[abi:ne180100]<AUSM::ExclusionZone*,AUSM::ExclusionZone*>((char *)this + 88, *((char **)a2 + 5), *((void *)a2 + 6), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)a2 + 6) - *((void *)a2 + 5)) >> 2));
      long long v10 = *((_OWORD *)a2 + 4);
      *(void *)((char *)this + 125) = *(void *)((char *)a2 + 77);
      *((_OWORD *)this + 7) = v10;
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)this + 136, *((char **)a2 + 11), *((void *)a2 + 12), (uint64_t)(*((void *)a2 + 12) - *((void *)a2 + 11)) >> 2);
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)this + 160, *((char **)a2 + 14), *((void *)a2 + 15), (uint64_t)(*((void *)a2 + 15) - *((void *)a2 + 14)) >> 2);
    }
    *((_WORD *)this + 160) = 257;
    *((unsigned char *)this + 328) = 1;
  }
  else
  {
    *((_OWORD *)this + 3) = *(_OWORD *)a2;
    *((void *)this + 8) = *((void *)a2 + 2);
    *((_DWORD *)this + 18) = *((_DWORD *)a2 + 6);
    *((_DWORD *)this + 19) = *((_DWORD *)a2 + 7);
    *((void *)this + 10) = *((void *)a2 + 4);
    *((unsigned char *)this + 113) = *((unsigned char *)a2 + 65);
    *(void *)((char *)this + 116) = *(void *)((char *)a2 + 68);
    *(void *)((char *)this + 124) = *(void *)((char *)a2 + 76);
    *((unsigned char *)this + 132) = *((unsigned char *)a2 + 84);
    if (v7 >= 1) {
      bzero(v6, 4 * (((unint64_t)v7 >> 2) - ((unint64_t)v7 > 3)) + 4);
    }
    *((_WORD *)this + 160) = 257;
    *((unsigned char *)this + 328) = 1;
    *((void *)this + 12) = *((void *)this + 11);
    *((unsigned char *)this + 112) = 0;
    if (v4 != v5) {
      return 0xFFFFFFFFLL;
    }
  }
  return 0;
}

uint64_t Spatializer::getNumOutputChannels(Spatializer *this)
{
  return (*((void *)this + 18) - *((void *)this + 17)) >> 2;
}

uint64_t Spatializer::setEnable(uint64_t this, char a2)
{
  *(unsigned char *)(this + 132) = a2;
  return this;
}

void CartesianSpatializer::~CartesianSpatializer(CartesianSpatializer *this)
{
  *(void *)this = &unk_1F14ADC98;
  for (uint64_t i = 1720; i != 136; i -= 264)
    CartesianPanner::~CartesianPanner((CartesianSpatializer *)((char *)this + i));
  uint64_t v3 = (void *)*((void *)this + 45);
  if (v3)
  {
    *((void *)this + 46) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 42);
  if (v4)
  {
    *((void *)this + 43) = v4;
    operator delete(v4);
  }
  Spatializer::~Spatializer(this);

  JUMPOUT(0x1C185D370);
}

{
  uint64_t i;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_1F14ADC98;
  for (uint64_t i = 1720; i != 136; i -= 264)
    CartesianPanner::~CartesianPanner((CartesianSpatializer *)((char *)this + i));
  uint64_t v3 = (void *)*((void *)this + 45);
  if (v3)
  {
    *((void *)this + 46) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 42);
  if (v4)
  {
    *((void *)this + 43) = v4;
    operator delete(v4);
  }

  Spatializer::~Spatializer(this);
}

void Spatializer::~Spatializer(Spatializer *this)
{
  *(void *)this = &unk_1F14C7E48;
  uint64_t v2 = (void *)*((void *)this + 37);
  if (v2)
  {
    *((void *)this + 38) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 34);
  if (v3)
  {
    *((void *)this + 35) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 28);
  if (v4)
  {
    *((void *)this + 29) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 20);
  if (v5)
  {
    *((void *)this + 21) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 17);
  if (v6)
  {
    *((void *)this + 18) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 11);
  if (v7)
  {
    *((void *)this + 12) = v7;
    operator delete(v7);
  }
  long long v8 = (const void *)*((void *)this + 5);
  if (v8) {
    CFRelease(v8);
  }
  long long v9 = (const void *)*((void *)this + 4);
  if (v9) {
    CFRelease(v9);
  }
}

{
  uint64_t vars8;

  Spatializer::~Spatializer(this);

  JUMPOUT(0x1C185D370);
}

uint64_t Spatializer::processAccumulating(uint64_t a1)
{
  *(unsigned char *)(a1 + 268) = *(unsigned char *)(a1 + 132);
  return 0;
}

unsigned char *Spatializer::reset(unsigned char *this)
{
  this[17] = 1;
  this[268] = this[132];
  return this;
}

uint64_t Spatializer::initialize(Spatializer *this, float a2, unsigned int a3)
{
  unint64_t v4 = a3;
  int v7 = 0;
  std::vector<float>::resize((uint64_t)this + 136, a3, &v7);
  int v6 = 0;
  std::vector<float>::resize((uint64_t)this + 272, v4, &v6);
  *((_WORD *)this + 8) = 257;
  return 0;
}

void Spatializer::Spatializer(Spatializer *this)
{
  *(void *)this = &unk_1F14C7E48;
  *((void *)this + 1) = 0;
  *((_WORD *)this + 8) = 256;
  *(void *)((char *)this + 20) = 0x400000000;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)((char *)this + 60) = 0u;
  *((_DWORD *)this + 19) = 4;
  *((void *)this + 10) = 0x4234000000000000;
  *(void *)((char *)this + 116) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 11) = 0;
  *((_WORD *)this + 56) = 0;
  *(void *)((char *)this + 124) = 0x447A00003F800000;
  *((unsigned char *)this + 132) = 1;
  *(_OWORD *)((char *)this + 196) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_DWORD *)this + 53) = 4;
  *((void *)this + 27) = 0x4234000000000000;
  *(void *)((char *)this + 252) = 0;
  *((void *)this + 29) = 0;
  *((void *)this + 30) = 0;
  *((void *)this + 28) = 0;
  *((_WORD *)this + 124) = 0;
  *((unsigned char *)this + 268) = 1;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_WORD *)this + 160) = 257;
  *((unsigned char *)this + 322) = 0;
  *((_DWORD *)this + 81) = 0;
  *((unsigned char *)this + 328) = 0;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(void *)((char *)this + 260) = 0x447A00003F800000;
}

void CartesianSpatializer::CartesianSpatializer(CartesianSpatializer *this, AudioChannelLayout *a2)
{
  Spatializer::Spatializer(this);
  *(void *)uint64_t v4 = &unk_1F14ADC98;
  *(_DWORD *)(v4 + 332) = a2->mChannelLayoutTag;
  uint64_t v5 = v4 + 336;
  *(_DWORD *)(v4 + 396) = 0;
  *(_OWORD *)(v4 + 377) = 0u;
  *(_OWORD *)(v4 + 352) = 0u;
  *(_OWORD *)(v4 + 368) = 0u;
  *(_OWORD *)(v4 + 336) = 0u;
  uint64_t v6 = 400;
  do
  {
    int v7 = (char *)this + v6;
    *int v7 = 0;
    v7[256] = 0;
    *(_OWORD *)(v7 + 4) = 0uLL;
    *(_OWORD *)(v7 + 20) = 0uLL;
    *(_OWORD *)(v7 + 36) = 0uLL;
    *(_OWORD *)(v7 + 52) = 0uLL;
    *(_OWORD *)(v7 + 68) = 0uLL;
    *(_OWORD *)(v7 + 84) = 0uLL;
    *(_OWORD *)(v7 + 100) = 0uLL;
    *(_OWORD *)(v7 + 116) = 0uLL;
    *(_OWORD *)(v7 + 132) = 0uLL;
    *(_OWORD *)(v7 + 148) = 0uLL;
    *(_OWORD *)(v7 + 164) = 0uLL;
    *(_OWORD *)(v7 + 180) = 0uLL;
    *(_OWORD *)(v7 + 196) = 0uLL;
    *(_OWORD *)(v7 + 212) = 0uLL;
    v6 += 264;
    *(_OWORD *)(v7 + 228) = 0uLL;
    *(_OWORD *)(v7 + 237) = 0uLL;
  }
  while (v7 + 264 != (char *)(v4 + 1984));
  GetChannelLayoutChannelLabels(&__p, (int *)a2);
  unint64_t v8 = ((*(void *)&__p.mNumberChannelDescriptions - *(void *)&__p.mChannelLayoutTag) >> 2);
  int v9 = 0;
  std::vector<float>::resize(v5, v8, &v9);
  int v9 = 0;
  std::vector<float>::resize((uint64_t)this + 360, v8, &v9);
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  if (*(void *)&__p.mChannelLayoutTag)
  {
    *(void *)&__p.mNumberChannelDescriptions = *(void *)&__p.mChannelLayoutTag;
    operator delete(*(void **)&__p.mChannelLayoutTag);
  }
}

id DeviceNameAsString(int a1)
{
  uint64_t v1 = (__CFString *)PlatformUtilities_iOS::CopyProductTypeFilePrefix(a1);
  if (!v1) {
    __assert_rtn("DeviceNameAsString", "vpDSPEngineConfiguration.mm", 47, "lowerCaseName != NULL");
  }
  uint64_t v2 = v1;
  uint64_t v3 = [(__CFString *)v1 capitalizedString];

  return v3;
}

void sub_1BB43D100(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void DSPEngineConfiguration::DSPEngineConfiguration(DSPEngineConfiguration *this)
{
  v97[3] = *MEMORY[0x1E4F143B8];
  GetVoiceProcessorVersion(vp::Context const&,unsigned int,unsigned int,unsigned int,unsigned int)::sDSPEngineConfiguratiouint64_t n = 0;
  uint64_t v1 = (void *)MEMORY[0x1E4F1CA60];
  v96[0] = @"VP configuration info";
  v95[0] = @"ref port subtype";
  float v78 = objc_msgSend(NSString, "stringWithFormat:", @"b%u", 205);
  float v93 = v78;
  float v94 = &unk_1F14EBD00;
  int v77 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v94 forKeys:&v93 count:1];
  v95[1] = v77;
  v92[0] = @"device";
  size_t v76 = DeviceNameAsString(24);
  v90[0] = v76;
  v91[0] = &unk_1F14EBD28;
  uint64_t v75 = DeviceNameAsString(25);
  v90[1] = v75;
  v91[1] = &unk_1F14EBD50;
  vDSP_Length v74 = DeviceNameAsString(125);
  v90[2] = v74;
  v91[2] = &unk_1F14EBD78;
  uint64_t v73 = DeviceNameAsString(27);
  v90[3] = v73;
  v91[3] = &unk_1F14EBDA0;
  float v72 = DeviceNameAsString(28);
  v90[4] = v72;
  v91[4] = &unk_1F14EBDC8;
  uint64_t v71 = DeviceNameAsString(46);
  v90[5] = v71;
  v91[5] = &unk_1F14EBDF0;
  uint64_t v70 = DeviceNameAsString(26);
  v90[6] = v70;
  v91[6] = &unk_1F14EBE18;
  uint64_t v69 = DeviceNameAsString(32);
  v90[7] = v69;
  v91[7] = &unk_1F14EBE40;
  uint64_t v68 = DeviceNameAsString(33);
  v90[8] = v68;
  v91[8] = &unk_1F14EBE68;
  int v67 = DeviceNameAsString(34);
  v90[9] = v67;
  v91[9] = &unk_1F14EBE90;
  __int16 v66 = DeviceNameAsString(35);
  v90[10] = v66;
  v91[10] = &unk_1F14EBEB8;
  float v65 = DeviceNameAsString(9);
  v90[11] = v65;
  v91[11] = &unk_1F14EBEE0;
  BOOL v64 = DeviceNameAsString(10);
  v90[12] = v64;
  v91[12] = &unk_1F14EBF08;
  int64_t v63 = DeviceNameAsString(180);
  v90[13] = v63;
  v91[13] = &unk_1F14EBF30;
  int v62 = DeviceNameAsString(36);
  v90[14] = v62;
  v91[14] = &unk_1F14EBF58;
  float v61 = DeviceNameAsString(37);
  v90[15] = v61;
  v91[15] = &unk_1F14EBF80;
  std::string v60 = DeviceNameAsString(31);
  v90[16] = v60;
  v91[16] = &unk_1F14EBFA8;
  float v59 = DeviceNameAsString(2);
  v90[17] = v59;
  v91[17] = &unk_1F14EBFD0;
  long long v58 = DeviceNameAsString(4);
  v90[18] = v58;
  v91[18] = &unk_1F14EBFF8;
  int v57 = DeviceNameAsString(5);
  v90[19] = v57;
  v91[19] = &unk_1F14EC020;
  long long v56 = DeviceNameAsString(72);
  v90[20] = v56;
  v91[20] = &unk_1F14EC048;
  int v55 = DeviceNameAsString(73);
  v90[21] = v55;
  v91[21] = &unk_1F14EC070;
  int v54 = DeviceNameAsString(74);
  v90[22] = v54;
  v91[22] = &unk_1F14EC098;
  long long v53 = DeviceNameAsString(87);
  v90[23] = v53;
  v91[23] = &unk_1F14EC0C0;
  uint64_t v52 = DeviceNameAsString(88);
  v90[24] = v52;
  v91[24] = &unk_1F14EC0E8;
  long long v51 = DeviceNameAsString(96);
  v90[25] = v51;
  v91[25] = &unk_1F14EC110;
  uint64_t v50 = DeviceNameAsString(97);
  v90[26] = v50;
  v91[26] = &unk_1F14EC138;
  uint64_t v49 = DeviceNameAsString(100);
  v90[27] = v49;
  v91[27] = &unk_1F14EC160;
  float v48 = DeviceNameAsString(101);
  v90[28] = v48;
  v91[28] = &unk_1F14EC188;
  float v47 = DeviceNameAsString(104);
  v90[29] = v47;
  v91[29] = &unk_1F14EC1B0;
  uint64_t v46 = DeviceNameAsString(105);
  v90[30] = v46;
  v91[30] = &unk_1F14EC1D8;
  uint64_t v45 = DeviceNameAsString(77);
  v90[31] = v45;
  v91[31] = &unk_1F14EC200;
  char v44 = DeviceNameAsString(78);
  v90[32] = v44;
  v91[32] = &unk_1F14EC228;
  uint64_t v43 = DeviceNameAsString(83);
  v90[33] = v43;
  v91[33] = &unk_1F14EC250;
  uint64_t v42 = DeviceNameAsString(85);
  v90[34] = v42;
  v91[34] = &unk_1F14EC278;
  uint64_t v41 = DeviceNameAsString(92);
  v90[35] = v41;
  v91[35] = &unk_1F14EC2A0;
  uint64_t v40 = DeviceNameAsString(80);
  v90[36] = v40;
  v91[36] = &unk_1F14EC2C8;
  uint64_t v39 = DeviceNameAsString(134);
  v90[37] = v39;
  v91[37] = &unk_1F14EC2F0;
  unsigned int v38 = DeviceNameAsString(138);
  v90[38] = v38;
  v91[38] = &unk_1F14EC318;
  float v37 = DeviceNameAsString(141);
  v90[39] = v37;
  v91[39] = &unk_1F14EC340;
  float v36 = DeviceNameAsString(147);
  v90[40] = v36;
  v91[40] = &unk_1F14EC368;
  float v35 = DeviceNameAsString(148);
  v90[41] = v35;
  v91[41] = &unk_1F14EC390;
  uint64_t v34 = DeviceNameAsString(150);
  v90[42] = v34;
  v91[42] = &unk_1F14EC3B8;
  int v33 = DeviceNameAsString(152);
  v90[43] = v33;
  v91[43] = &unk_1F14EC3E0;
  __int16 v32 = DeviceNameAsString(154);
  v90[44] = v32;
  v91[44] = &unk_1F14EC408;
  int v31 = DeviceNameAsString(156);
  v90[45] = v31;
  v91[45] = &unk_1F14EC430;
  __int16 v30 = DeviceNameAsString(158);
  v90[46] = v30;
  v91[46] = &unk_1F14EC458;
  uint64_t v2 = DeviceNameAsString(160);
  v90[47] = v2;
  v91[47] = &unk_1F14EC480;
  uint64_t v3 = DeviceNameAsString(161);
  v90[48] = v3;
  v91[48] = &unk_1F14EC4A8;
  uint64_t v4 = DeviceNameAsString(163);
  v90[49] = v4;
  v91[49] = &unk_1F14EC4D0;
  uint64_t v5 = DeviceNameAsString(169);
  v90[50] = v5;
  v91[50] = &unk_1F14EC4F8;
  uint64_t v6 = DeviceNameAsString(177);
  v90[51] = v6;
  v91[51] = &unk_1F14EC520;
  int v7 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v91 forKeys:v90 count:52];
  v92[1] = v7;
  v92[2] = &unk_1F14EC548;
  unint64_t v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v92 count:3];
  v95[2] = v8;
  int v9 = [MEMORY[0x1E4F1C978] arrayWithObjects:v95 count:3];
  v97[0] = v9;
  v97[1] = &unk_1F14EC5C0;
  v96[1] = @"tree index";
  v96[2] = @"version";
  v97[2] = &unk_1F14EC620;
  long long v10 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v97 forKeys:v96 count:3];
  uint64_t v11 = [v1 dictionaryWithDictionary:v10];

  [v11 objectForKeyedSubscript:@"tree index"];
  long long v81 = 0u;
  long long v82 = 0u;
  long long v79 = 0u;
  long long v80 = 0u;
  id v12 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v13 = [v12 countByEnumeratingWithState:&v79 objects:v89 count:16];
  if (v13)
  {
    uint64_t v14 = *(void *)v80;
    do
    {
      uint64_t v15 = 0;
      do
      {
        if (*(void *)v80 != v14) {
          objc_enumerationMutation(v12);
        }
        float v16 = *(void **)(*((void *)&v79 + 1) + 8 * v15);
        size_t v17 = [v11 objectForKeyedSubscript:v16];
        int v18 = v17;
        if (v17)
        {
          if ((LookUpTreeIsValid(v17) & 1) == 0)
          {
            [v11 removeObjectForKey:v16];
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            long long v19 = (void **)VPLogScope(void)::scope;
            if (VPLogScope(void)::scope)
            {
              if (CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
              {
                float v20 = *v19;
                if (!*v19) {
                  float v20 = (void *)MEMORY[0x1E4F14500];
                }
                int v21 = v20;
                if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
                {
                  uint64_t v22 = [v16 UTF8String];
                  *(_DWORD *)AudioChannelLayout buf = 136315650;
                  uint64_t v84 = "vpDSPEngineConfiguration.mm";
                  __int16 v85 = 1024;
                  int v86 = 132;
                  __int16 v87 = 2080;
                  uint64_t v88 = v22;
                  std::string v23 = v21;
                  os_log_type_t v24 = OS_LOG_TYPE_ERROR;
                  int64_t v25 = "%25s:%-5d DSPEngine configuration file claimed to have tree %s, but it was an a valid tree";
                  goto LABEL_24;
                }
                goto LABEL_25;
              }
            }
          }
        }
        else
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          float v26 = (void **)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(2, VPLogScope(void)::scope, 0))
          {
            float v27 = *v26;
            if (!*v26) {
              float v27 = (void *)MEMORY[0x1E4F14500];
            }
            int v21 = v27;
            if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v28 = [v16 UTF8String];
              *(_DWORD *)AudioChannelLayout buf = 136315650;
              uint64_t v84 = "vpDSPEngineConfiguration.mm";
              __int16 v85 = 1024;
              int v86 = 128;
              __int16 v87 = 2080;
              uint64_t v88 = v28;
              std::string v23 = v21;
              os_log_type_t v24 = OS_LOG_TYPE_DEFAULT;
              int64_t v25 = "%25s:%-5d DSPEngine configuration file claimed to have tree %s, but it was not found";
LABEL_24:
              _os_log_impl(&dword_1BB0CE000, v23, v24, v25, buf, 0x1Cu);
            }
LABEL_25:
          }
        }

        ++v15;
      }
      while (v13 != v15);
      uint64_t v13 = [v12 countByEnumeratingWithState:&v79 objects:v89 count:16];
    }
    while (v13);
  }

  int v29 = (void *)GetVoiceProcessorVersion(vp::Context const&,unsigned int,unsigned int,unsigned int,unsigned int)::sDSPEngineConfiguration;
  GetVoiceProcessorVersion(vp::Context const&,unsigned int,unsigned int,unsigned int,unsigned int)::sDSPEngineConfiguratiouint64_t n = (uint64_t)v11;
}

void sub_1BB43DD9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  _Unwind_Resume(a1);
}

uint64_t GetVoiceProcessorVersion(const vp::Context *a1, AudioObjectID a2, unsigned int a3, AudioObjectID a4, unsigned int a5)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  if (*((char *)a1 + 47) >= 0) {
    long long v10 = (char *)a1 + 24;
  }
  else {
    long long v10 = (char *)*((void *)a1 + 3);
  }
  uint64_t v11 = [NSString stringWithCString:v10 encoding:1];
  if ((*(void *)((unsigned char *)a1 + 148) & 0xFF00000000) != 0)
  {
    id v12 = objc_msgSend(NSString, "stringWithFormat:", @"AID%u", *(void *)((char *)a1 + 148));
    uint64_t v13 = [v11 stringByAppendingPathComponent:v12];
  }
  else
  {
    uint64_t v14 = (void *)((char *)a1 + 104);
    if (*((char *)a1 + 127) < 0)
    {
      uint64_t v14 = (void *)*v14;
      if (!v14) {
        goto LABEL_10;
      }
    }
    id v12 = [NSString stringWithCString:v14 encoding:1];
    uint64_t v13 = [v11 stringByAppendingPathComponent:v12];
  }
  uint64_t v15 = (void *)v13;

  uint64_t v11 = v15;
LABEL_10:
  __p[0] = 0;
  float v16 = [MEMORY[0x1E4F28CB8] defaultManager];
  size_t v17 = [v11 stringByAppendingPathComponent:@"VPVX"];
  char v18 = [v16 fileExistsAtPath:v17 isDirectory:__p];

  if (__p[0]) {
    char v19 = v18;
  }
  else {
    char v19 = 0;
  }

  if ((v19 & 1) == 0)
  {
    {
      if (v63)
      {
        DSPEngineConfiguration::DSPEngineConfiguration(v63);
      }
    }
    if (*((unsigned char *)a1 + 140)) {
      int v21 = *((_DWORD *)a1 + 34);
    }
    else {
      int v21 = 0;
    }
    uint64_t v22 = (NSDictionary *)objc_opt_new();
    GetVPProductFamilyType(v21);
    std::string v23 = DeviceNameAsString(25);
    *(_DWORD *)__s = 0;
    *(void *)float v65 = 0;
    unsigned int v64 = 0;
    if (a2 && a3)
    {
      GetAndPrintPortTypeProperty(0x6F757470u, a3, a2, 0x70737562u, "sub", (unsigned int *)__s);
      GetAndPrintPortTypeProperty(0x6F757470u, a3, a2, 0x70657074u, "end point", &v65[1]);
    }
    if (a4 && a5)
    {
      GetAndPrintPortTypeProperty(0x696E7074u, a5, a4, 0x70737562u, "sub", v65);
      GetAndPrintPortTypeProperty(0x696E7074u, a5, a4, 0x70657074u, "end point", &v64);
    }
    [(NSDictionary *)v22 setObject:v23 forKeyedSubscript:@"device"];
    os_log_type_t v24 = NSString;
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)__p, a3);
    int64_t v25 = [v24 stringWithUTF8String:__p];
    [(NSDictionary *)v22 setObject:v25 forKeyedSubscript:@"ref port"];

    float v26 = NSString;
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)__p, a5);
    float v27 = [v26 stringWithUTF8String:__p];
    [(NSDictionary *)v22 setObject:v27 forKeyedSubscript:@"mic port"];

    uint64_t v28 = NSString;
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)__p, *(unsigned int *)__s);
    int v29 = [v28 stringWithUTF8String:__p];
    [(NSDictionary *)v22 setObject:v29 forKeyedSubscript:@"ref port subtype"];

    __int16 v30 = NSString;
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)__p, v65[1]);
    int v31 = [v30 stringWithUTF8String:__p];
    [(NSDictionary *)v22 setObject:v31 forKeyedSubscript:@"ref port endpoint type"];

    __int16 v32 = NSString;
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)__p, v65[0]);
    int v33 = [v32 stringWithUTF8String:__p];
    [(NSDictionary *)v22 setObject:v33 forKeyedSubscript:@"mic port subtype"];

    uint64_t v34 = NSString;
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)__p, v64);
    float v35 = [v34 stringWithUTF8String:__p];
    [(NSDictionary *)v22 setObject:v35 forKeyedSubscript:@"mic port endpoint type"];

    float v36 = NSString;
    strcpy(__s, "j327");
    std::string::basic_string[abi:ne180100]<0>(__p, __s);
    if ((v71 & 0x80000000) == 0) {
      float v37 = __p;
    }
    else {
      float v37 = *(unsigned char **)__p;
    }
    unsigned int v38 = [v36 stringWithUTF8String:v37];
    if (SBYTE3(v71) < 0) {
      operator delete(*(void **)__p);
    }
    uint64_t v39 = [(NSDictionary *)v22 objectForKeyedSubscript:@"ref port subtype"];
    if ([v39 isEqualToString:v38])
    {
      uint64_t v40 = [(NSDictionary *)v22 objectForKeyedSubscript:@"mic port subtype"];
      char v41 = [v40 isEqualToString:v38];

      if (v41)
      {
        uint64_t v20 = 6;
LABEL_73:

        return v20;
      }
    }
    else
    {
    }
    uint64_t v42 = @"VP configuration info";
    uint64_t v43 = [(id)GetVoiceProcessorVersion(vp::Context const&,unsigned int,unsigned int,unsigned int,unsigned int)::sDSPEngineConfiguration allKeys];
    int v44 = [v43 containsObject:@"VP configuration info"];

    if (v44)
    {
      uint64_t v45 = [(id)GetVoiceProcessorVersion(vp::Context const&,unsigned int,unsigned int,unsigned int,unsigned int)::sDSPEngineConfiguration objectForKeyedSubscript:@"VP configuration info"];
      goto LABEL_46;
    }
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    uint64_t v46 = (void **)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope)
    {
      uint64_t v45 = 0;
      if (!CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0)) {
        goto LABEL_46;
      }
      float v47 = *v46;
      if (!*v46) {
        float v47 = (void *)MEMORY[0x1E4F14500];
      }
      float v48 = v47;
      if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
      {
        uint64_t v49 = @"VP configuration info";
        uint64_t v50 = [@"VP configuration info" UTF8String];
        *(_DWORD *)AudioChannelLayout __p = 136315650;
        *(void *)&__p[4] = "vpDSPEngineConfiguration.mm";
        __int16 v68 = 1024;
        int v69 = 142;
        __int16 v70 = 2080;
        uint64_t v71 = v50;
        _os_log_impl(&dword_1BB0CE000, v48, OS_LOG_TYPE_ERROR, "%25s:%-5d Couldn't get DSPEngine configuration tree %s", __p, 0x1Cu);
      }
    }
    uint64_t v45 = 0;
LABEL_46:

    long long v51 = LookUpTreeGet(v22, v45);

    uint64_t v52 = [v51 objectForKeyedSubscript:@"vp version"];
    long long v53 = [v51 objectForKeyedSubscript:@"unknown device"];
    int v54 = v53;
    if (v53 && [v53 unsignedIntegerValue])
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      int v55 = (void **)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        long long v56 = *v55;
        if (!*v55) {
          long long v56 = (void *)MEMORY[0x1E4F14500];
        }
        int v57 = v56;
        if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioChannelLayout __p = 136315394;
          *(void *)&__p[4] = "vpDSPEngineConfiguration.mm";
          __int16 v68 = 1024;
          int v69 = 253;
          _os_log_impl(&dword_1BB0CE000, v57, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown or unsupported device!!", __p, 0x12u);
        }
      }
    }
    if (v52)
    {
      LODWORD(v20) = [v52 unsignedIntegerValue];
    }
    else
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      long long v58 = (void **)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        float v59 = *v58;
        if (!*v58) {
          float v59 = (void *)MEMORY[0x1E4F14500];
        }
        std::string v60 = v59;
        if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioChannelLayout __p = 136315394;
          *(void *)&__p[4] = "vpDSPEngineConfiguration.mm";
          __int16 v68 = 1024;
          int v69 = 260;
          _os_log_impl(&dword_1BB0CE000, v60, OS_LOG_TYPE_ERROR, "%25s:%-5d Couldn't find the VP version in the DSPEngine configuration file!", __p, 0x12u);
        }
      }
      LODWORD(v20) = 3;
    }
    __p[0] = 0;
    AppIntegerCFNumberRef Value = CACFPreferencesGetAppIntegerValue(@"vp_force_version", @"com.apple.coreaudio", __p);
    if (__p[0]) {
      uint64_t v20 = AppIntegerValue;
    }
    else {
      uint64_t v20 = v20;
    }

    goto LABEL_73;
  }
  return 10;
}

void sub_1BB43EBF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
}

uint64_t NeuralNet::NeuralNet(uint64_t a1, uint64_t *theDict, uint64_t *a3)
{
  uint64_t v121 = *MEMORY[0x1E4F143B8];
  v101[0] = a3;
  v101[1] = theDict;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = a3;
  long long v83 = (NSObject ***)(a1 + 16);
  *(void *)(a1 + 24) = 0;
  long long v82 = (const void **)(a1 + 24);
  if (a3)
  {
    uint64_t v5 = *a3;
    if (!*a3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v5 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioChannelLayout buf = 136315394;
    *(void *)&uint8_t buf[4] = "NeuralNet.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 48;
    _os_log_impl(&dword_1BB0CE000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Preparing a NeuralNet from topLevelDict.", buf, 0x12u);
  }
LABEL_7:
  CFNumberRef Value = CFDictionaryGetValue((CFDictionaryRef)theDict, @"NeuralNetImplementationType");
  int v7 = Value;
  if (Value)
  {
    CFRetain(Value);
    CFTypeRef v100 = v7;
    applesauce::CF::TypeRef::operator applesauce::CF::StringRef(&v100, (applesauce::CF::StringRef *)&v120);
    unint64_t v8 = *v83;
    if (*v83)
    {
      int v9 = *v8;
      if (!*v8) {
        goto LABEL_22;
      }
    }
    else
    {
      int v9 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      CFStringRef v12 = CFCopyDescription(v120.__r_.__value_.__l.__data_);
      applesauce::CF::details::CFString_get_value<true>(v12, (uint64_t)__p);
      if (v12) {
        CFRelease(v12);
      }
      uint64_t v13 = __p;
      if (SBYTE3(v108) < 0) {
        uint64_t v13 = *(unsigned char **)__p;
      }
      *(_DWORD *)AudioChannelLayout buf = 136315650;
      *(void *)&uint8_t buf[4] = "NeuralNet.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 57;
      __int16 v110 = 2080;
      *(void *)float v111 = v13;
      _os_log_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved implementation type (%s).", buf, 0x1Cu);
      if (SBYTE3(v108) < 0) {
        operator delete(*(void **)__p);
      }
    }
LABEL_22:
    CFStringRef v14 = (const __CFString *)v120.__r_.__value_.__r.__words[0];
    if (v120.__r_.__value_.__r.__words[0]) {
      CFRetain(v120.__r_.__value_.__l.__data_);
    }
    CFStringRef v99 = v14;
    std::string::basic_string[abi:ne180100]<0>(v97, "BNNS");
    BOOL v15 = matchiString(&v99, (const UInt8 *)v97);
    if (v98 < 0)
    {
      operator delete(v97[0]);
      if (!v14) {
        goto LABEL_29;
      }
    }
    else if (!v14)
    {
LABEL_29:
      if (v15)
      {
        int v16 = 0;
        goto LABEL_68;
      }
      CFStringRef v17 = (const __CFString *)v120.__r_.__value_.__r.__words[0];
      if (v120.__r_.__value_.__r.__words[0]) {
        CFRetain(v120.__r_.__value_.__l.__data_);
      }
      CFStringRef v96 = v17;
      std::string::basic_string[abi:ne180100]<0>(v94, "Espresso");
      BOOL v18 = matchiString(&v96, (const UInt8 *)v94);
      if (v95 < 0)
      {
        operator delete(v94[0]);
        if (!v17) {
          goto LABEL_41;
        }
      }
      else if (!v17)
      {
LABEL_41:
        if (v18)
        {
          int v16 = 1;
LABEL_68:
          *(_DWORD *)(a1 + 8) = v16;
          if (v120.__r_.__value_.__r.__words[0]) {
            CFRelease(v120.__r_.__value_.__l.__data_);
          }
          goto LABEL_70;
        }
        CFStringRef v19 = (const __CFString *)v120.__r_.__value_.__r.__words[0];
        if (v120.__r_.__value_.__r.__words[0]) {
          CFRetain(v120.__r_.__value_.__l.__data_);
        }
        CFStringRef v93 = v19;
        std::string::basic_string[abi:ne180100]<0>(v91, "EspressoV2");
        BOOL v20 = matchiString(&v93, (const UInt8 *)v91);
        if (v92 < 0)
        {
          operator delete(v91[0]);
          if (!v19) {
            goto LABEL_50;
          }
        }
        else if (!v19)
        {
LABEL_50:
          if (v20)
          {
            int v16 = 2;
          }
          else
          {
            CFStringRef v21 = (const __CFString *)v120.__r_.__value_.__r.__words[0];
            if (v120.__r_.__value_.__r.__words[0]) {
              CFRetain(v120.__r_.__value_.__l.__data_);
            }
            CFStringRef v90 = v21;
            std::string::basic_string[abi:ne180100]<0>(v88, "MIL2BNNS");
            BOOL v22 = matchiString(&v90, (const UInt8 *)v88);
            if (v89 < 0) {
              operator delete(v88[0]);
            }
            if (v21) {
              CFRelease(v21);
            }
            if (v22)
            {
              int v16 = 3;
            }
            else
            {
              CFStringRef v23 = (const __CFString *)v120.__r_.__value_.__r.__words[0];
              if (v120.__r_.__value_.__r.__words[0]) {
                CFRetain(v120.__r_.__value_.__l.__data_);
              }
              CFStringRef v87 = v23;
              std::string::basic_string[abi:ne180100]<0>(v85, "MIL2BNNS_PREPROCESSED");
              BOOL v24 = matchiString(&v87, (const UInt8 *)v85);
              if (v86 < 0) {
                operator delete(v85[0]);
              }
              if (v23) {
                CFRelease(v23);
              }
              if (!v24)
              {
                if (*v83) {
                  long long v79 = **v83;
                }
                else {
                  long long v79 = 0;
                }
                if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
                {
                  applesauce::CF::StringRef::to_description((applesauce::CF::StringRef *)__p, v120.__r_.__value_.__l.__data_);
                  long long v80 = SBYTE3(v108) >= 0 ? __p : *(unsigned char **)__p;
                  *(_DWORD *)AudioChannelLayout buf = 136315906;
                  *(void *)&uint8_t buf[4] = "NeuralNet.cpp";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 85;
                  __int16 v110 = 1024;
                  *(_DWORD *)float v111 = -66743;
                  *(_WORD *)&v111[4] = 2080;
                  *(void *)&v111[6] = v80;
                  _os_log_impl(&dword_1BB0CE000, v79, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d): \"Unknown implementation type (%s).\"", buf, 0x22u);
                  if (SBYTE3(v108) < 0) {
                    operator delete(*(void **)__p);
                  }
                }
                exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
                *(void *)exceptiouint64_t n = &unk_1F14C8B68;
                exception[2] = -66743;
              }
              int v16 = 4;
            }
          }
          goto LABEL_68;
        }
        CFRelease(v19);
        goto LABEL_50;
      }
      CFRelease(v17);
      goto LABEL_41;
    }
    CFRelease(v14);
    goto LABEL_29;
  }
  CFTypeRef v100 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  long long v10 = *(NSObject ***)(a1 + 16);
  if (!v10)
  {
    uint64_t v11 = MEMORY[0x1E4F14500];
LABEL_37:
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioChannelLayout buf = 136315394;
      *(void *)&uint8_t buf[4] = "NeuralNet.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 92;
      _os_log_impl(&dword_1BB0CE000, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Missing dictionary NeuralNetImplementationType, set mImplType to default value.", buf, 0x12u);
    }
LABEL_70:
    int64_t v25 = *v83;
    if (*v83)
    {
      float v26 = *v25;
      if (!*v25) {
        goto LABEL_76;
      }
    }
    else
    {
      float v26 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      int v27 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)AudioChannelLayout buf = 136315650;
      *(void *)&uint8_t buf[4] = "NeuralNet.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 95;
      __int16 v110 = 1024;
      *(_DWORD *)float v111 = v27;
      _os_log_impl(&dword_1BB0CE000, v26, OS_LOG_TYPE_DEFAULT, "%25s:%-5d mImplType set to value (%u).", buf, 0x18u);
    }
    goto LABEL_76;
  }
  uint64_t v11 = *v10;
  if (*v10) {
    goto LABEL_37;
  }
LABEL_76:
  int v28 = *(_DWORD *)(a1 + 8);
  switch(v28)
  {
    case 0:
      int v29 = *v83;
      if (*v83)
      {
        __int16 v30 = *v29;
        if (!*v29)
        {
          LODWORD(v103.__r_.__value_.__l.__data_) = 0;
          goto LABEL_121;
        }
      }
      else
      {
        __int16 v30 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioChannelLayout buf = 136315394;
        *(void *)&uint8_t buf[4] = "NeuralNet.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 102;
        _os_log_impl(&dword_1BB0CE000, v30, OS_LOG_TYPE_DEBUG, "%25s:%-5d Preparing BNNS NeuralNet implementation.", buf, 0x12u);
        int v29 = *v83;
      }
      LODWORD(v103.__r_.__value_.__l.__data_) = 0;
      if (v29)
      {
        uint64_t v39 = *v29;
        if (!*v29) {
          goto LABEL_121;
        }
      }
      else
      {
        uint64_t v39 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)AudioChannelLayout buf = 136315394;
        *(void *)&uint8_t buf[4] = "NeuralNet.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 106;
        _os_log_impl(&dword_1BB0CE000, v39, OS_LOG_TYPE_INFO, "%25s:%-5d Loading NumLayers from topLevelDict.", buf, 0x12u);
      }
LABEL_121:
      if (DictionaryBlobReader::ReadScalarFromDictionary<unsigned int>(v101, (CFDictionaryRef)theDict, @"NumLayers", &v103))
      {
        if (*v83) {
          size_t v76 = **v83;
        }
        else {
          size_t v76 = 0;
        }
        if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioChannelLayout buf = 136315650;
          *(void *)&uint8_t buf[4] = "NeuralNet.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 108;
          __int16 v110 = 1024;
          *(_DWORD *)float v111 = -66741;
          _os_log_impl(&dword_1BB0CE000, v76, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Failed to retrieve NumLayers.\"", buf, 0x18u);
        }
        int v77 = __cxa_allocate_exception(0x10uLL);
        *(void *)int v77 = &unk_1F14C8B68;
        v77[2] = -66741;
      }
      CFNumberRef v45 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)theDict, @"Quantization");
      LODWORD(valuePtr.__r_.__value_.__l.__data_) = 8;
      if (v45)
      {
        CFNumberGetValue(v45, kCFNumberIntType, &valuePtr);
        uint64_t v46 = *v83;
        if (*v83)
        {
          float v47 = *v46;
          if (!*v46) {
            goto LABEL_136;
          }
        }
        else
        {
          float v47 = MEMORY[0x1E4F14500];
        }
        if (!os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_136;
        }
        *(_DWORD *)AudioChannelLayout buf = 136315650;
        *(void *)&uint8_t buf[4] = "NeuralNet.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 116;
        __int16 v110 = 1024;
        *(_DWORD *)float v111 = valuePtr.__r_.__value_.__l.__data_;
        uint64_t v50 = "%25s:%-5d Successfully retrieved Quantization (%u).\n";
        long long v51 = v47;
        os_log_type_t v52 = OS_LOG_TYPE_DEBUG;
      }
      else
      {
        float v48 = *v83;
        if (*v83)
        {
          uint64_t v49 = *v48;
          if (!*v48)
          {
LABEL_136:
            HIDWORD(v54) = valuePtr.__r_.__value_.__l.__data_;
            LODWORD(v54) = valuePtr.__r_.__value_.__l.__data_;
            int v53 = v54 >> 3;
            if (v53 != 4)
            {
              if (v53 != 2)
              {
                if (!v53)
                {
                  memset(&v105, 0, sizeof(v105));
                  std::vector<FullyConnectedLayerBNNS<float>>::resize((uint64_t)&v105, LODWORD(v103.__r_.__value_.__l.__data_));
                  v104.__r_.__value_.__r.__words[2] = (std::string::size_type)*v83;
                  operator new();
                }
                memset(&v105, 0, sizeof(v105));
                std::vector<FullyConnectedLayerBNNS<float>>::resize((uint64_t)&v105, LODWORD(v103.__r_.__value_.__l.__data_));
                v104.__r_.__value_.__r.__words[2] = (std::string::size_type)*v83;
                operator new();
              }
              memset(&v105, 0, sizeof(v105));
              std::vector<FullyConnectedLayerBNNS<float>>::resize((uint64_t)&v105, LODWORD(v103.__r_.__value_.__l.__data_));
              v104.__r_.__value_.__r.__words[2] = (std::string::size_type)*v83;
              operator new();
            }
            memset(&v105, 0, sizeof(v105));
            std::vector<FullyConnectedLayerBNNS<float>>::resize((uint64_t)&v105, LODWORD(v103.__r_.__value_.__l.__data_));
            v104.__r_.__value_.__r.__words[2] = (std::string::size_type)*v83;
            operator new();
          }
        }
        else
        {
          uint64_t v49 = MEMORY[0x1E4F14500];
        }
        if (!os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_136;
        }
        *(_DWORD *)AudioChannelLayout buf = 136315650;
        *(void *)&uint8_t buf[4] = "NeuralNet.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 120;
        __int16 v110 = 1024;
        *(_DWORD *)float v111 = 8;
        uint64_t v50 = "%25s:%-5d Quantization not found, using default (%u) bit.\n";
        long long v51 = v49;
        os_log_type_t v52 = OS_LOG_TYPE_DEFAULT;
      }
      _os_log_impl(&dword_1BB0CE000, v51, v52, v50, buf, 0x18u);
      goto LABEL_136;
    case 1:
      float v37 = *v83;
      if (*v83)
      {
        unsigned int v38 = *v37;
        if (!*v37) {
          goto LABEL_113;
        }
      }
      else
      {
        unsigned int v38 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioChannelLayout buf = 136315394;
        *(void *)&uint8_t buf[4] = "NeuralNet.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 181;
        _os_log_impl(&dword_1BB0CE000, v38, OS_LOG_TYPE_DEBUG, "%25s:%-5d Preparing Espresso NeuralNet implementation.", buf, 0x12u);
      }
LABEL_113:
      NeuralNet::getModelInformationFromPlist((uint64_t)buf, a1, (CFDictionaryRef)theDict);
      CFNumberRef v40 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)theDict, @"CacheImplementation");
      CFNumberRef v41 = v40;
      if (!v40) {
        goto LABEL_168;
      }
      CFRetain(v40);
      *(void *)AudioChannelLayout __p = v41;
      BOOL v42 = applesauce::CF::convert_to<BOOL,0>(v41);
      CFRelease(v41);
      if (!v42) {
        goto LABEL_168;
      }
      uint64_t v43 = *v83;
      if (*v83)
      {
        int v44 = *v43;
        if (!*v43) {
          goto LABEL_146;
        }
      }
      else
      {
        int v44 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)AudioChannelLayout __p = 136315394;
        *(void *)&__p[4] = "NeuralNet.cpp";
        *(_WORD *)&unsigned char __p[12] = 1024;
        *(_DWORD *)&__p[14] = 186;
        _os_log_impl(&dword_1BB0CE000, v44, OS_LOG_TYPE_INFO, "%25s:%-5d Implementation cache enabled.", __p, 0x12u);
      }
LABEL_146:
      if (v111[3] >= 0) {
        int v55 = buf;
      }
      else {
        int v55 = *(const UInt8 **)buf;
      }
      if (v55)
      {
        if (v111[3] >= 0) {
          CFIndex v56 = v111[3];
        }
        else {
          CFIndex v56 = *(void *)&buf[8];
        }
        CFStringRef v57 = CFStringCreateWithBytes(0, v55, v56, 0x8000100u, 0);
        if (!v57)
        {
          long long v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v58, "Could not construct");
        }
      }
      else
      {
        CFStringRef v57 = 0;
      }
      float v59 = *v82;
      *long long v82 = v57;
      if (v59)
      {
        CFRelease(v59);
        CFStringRef v57 = (CFStringRef)*v82;
      }
      if (v57) {
        CFRetain(v57);
      }
      CFStringRef v84 = v57;
      std::string v60 = +[NeuralNetCache sharedCache];
      float v61 = [v60 objectForKey:v57];

      if (v61)
      {
        int v62 = +[NeuralNetCache sharedCache];
        [v62 removeObjectForKey:v84];

        [v61 impl];
      }
      else
      {
        *(void *)AudioChannelLayout __p = 0;
      }

      uint64_t v63 = *(void *)__p;
      *(void *)AudioChannelLayout __p = 0;
      uint64_t v64 = *(void *)a1;
      *(void *)a1 = v63;
      if (v64)
      {
        (*(void (**)(uint64_t))(*(void *)v64 + 8))(v64);
        uint64_t v65 = *(void *)__p;
        *(void *)AudioChannelLayout __p = 0;
        if (v65) {
          (*(void (**)(uint64_t))(*(void *)v65 + 8))(v65);
        }
      }
      if (v84) {
        CFRelease(v84);
      }
LABEL_168:
      if (!*(void *)a1)
      {
        LODWORD(v120.__r_.__value_.__l.__data_) = v119;
        std::make_unique[abi:ne180100]<NeuralNetEspresso,std::string &,std::string &,std::string &,std::string &,std::string &,StreamingMode,__CFDictionary const* const&,CALog::Scope const*&>();
      }
      __int16 v66 = *v83;
      if (*v83)
      {
        int v67 = *v66;
        if (!*v66) {
          goto LABEL_178;
        }
      }
      else
      {
        int v67 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v67, OS_LOG_TYPE_INFO))
      {
        __int16 v68 = buf;
        if (v111[3] < 0) {
          __int16 v68 = *(unsigned char **)buf;
        }
        *(_DWORD *)AudioChannelLayout __p = 136315650;
        *(void *)&__p[4] = "NeuralNet.cpp";
        *(_WORD *)&unsigned char __p[12] = 1024;
        *(_DWORD *)&__p[14] = 192;
        __int16 v107 = 2080;
        float v108 = v68;
        _os_log_impl(&dword_1BB0CE000, v67, OS_LOG_TYPE_INFO, "%25s:%-5d Loaded implementation from cache for model at %s.", __p, 0x1Cu);
      }
LABEL_178:
      if (v118 < 0) {
        operator delete((void *)v117);
      }
      if (v116 < 0) {
        operator delete(v115);
      }
      if (v114 < 0) {
        operator delete(v113);
      }
      if (v112 < 0) {
        operator delete(*(void **)&v111[4]);
      }
      if ((v111[3] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      if (!*(void *)a1)
      {
        if (*v83) {
          __int16 v70 = **v83;
        }
        else {
          __int16 v70 = 0;
        }
        int v71 = -10875;
        if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioChannelLayout buf = 136315650;
          *(void *)&uint8_t buf[4] = "NeuralNet.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 260;
          __int16 v110 = 1024;
          *(_DWORD *)float v111 = -10875;
          uint64_t v72 = "%25s:%-5d EXCEPTION (%d) [pNeuralNetImpl == nullptr is false]: \"NeuralNet implementation not initialized.\"";
          uint64_t v73 = v70;
          uint32_t v74 = 24;
LABEL_197:
          _os_log_impl(&dword_1BB0CE000, v73, OS_LOG_TYPE_ERROR, v72, buf, v74);
        }
LABEL_198:
        uint64_t v75 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v75 = &unk_1F14C8B68;
        v75[2] = v71;
      }
      if (v100) {
        CFRelease(v100);
      }
      return a1;
    case 2:
      int v33 = *v83;
      if (*v83)
      {
        uint64_t v34 = *v33;
        if (!*v33) {
          goto LABEL_99;
        }
      }
      else
      {
        uint64_t v34 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioChannelLayout buf = 136315394;
        *(void *)&uint8_t buf[4] = "NeuralNet.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 210;
        _os_log_impl(&dword_1BB0CE000, v34, OS_LOG_TYPE_DEBUG, "%25s:%-5d Preparing EspressoV2 NeuralNet implementation.", buf, 0x12u);
      }
LABEL_99:
      NeuralNet::getModelInformationFromPlist((uint64_t)buf, a1, (CFDictionaryRef)theDict);
      operator new();
    case 3:
      float v35 = *v83;
      if (*v83)
      {
        float v36 = *v35;
        if (!*v35) {
          goto LABEL_103;
        }
      }
      else
      {
        float v36 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioChannelLayout buf = 136315394;
        *(void *)&uint8_t buf[4] = "NeuralNet.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 222;
        _os_log_impl(&dword_1BB0CE000, v36, OS_LOG_TYPE_DEBUG, "%25s:%-5d Preparing MIL2BNNS NeuralNet implementation.", buf, 0x12u);
      }
LABEL_103:
      NeuralNet::getModelInformationFromPlist((uint64_t)__p, a1, (CFDictionaryRef)theDict);
      operator new();
    case 4:
      int v31 = *v83;
      if (*v83)
      {
        __int16 v32 = *v31;
        if (!*v31) {
          goto LABEL_95;
        }
      }
      else
      {
        __int16 v32 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioChannelLayout buf = 136315394;
        *(void *)&uint8_t buf[4] = "NeuralNet.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 246;
        _os_log_impl(&dword_1BB0CE000, v32, OS_LOG_TYPE_DEBUG, "%25s:%-5d Preparing MIL2BNNS_PREPROCESSED NeuralNet implementation.", buf, 0x12u);
      }
LABEL_95:
      NeuralNet::getModelInformationFromPlist((uint64_t)buf, a1, (CFDictionaryRef)theDict);
      operator new();
    default:
      if (*v83) {
        float v78 = **v83;
      }
      else {
        float v78 = 0;
      }
      int v71 = -66743;
      if (!os_log_type_enabled(v78, OS_LOG_TYPE_ERROR)) {
        goto LABEL_198;
      }
      *(_DWORD *)AudioChannelLayout buf = 136315906;
      *(void *)&uint8_t buf[4] = "NeuralNet.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 240;
      __int16 v110 = 1024;
      *(_DWORD *)float v111 = -66743;
      *(_WORD *)&v111[4] = 1024;
      *(_DWORD *)&v111[6] = v28;
      uint64_t v72 = "%25s:%-5d EXCEPTION (%d): \"Unknown value for mType (%u).\"";
      uint64_t v73 = v78;
      uint32_t v74 = 30;
      goto LABEL_197;
  }
}

void sub_1BB4459E0(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  sub_1BB446AFC();
}

void sub_1BB4459E8(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  sub_1BB446AFC();
}

void sub_1BB4459F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, const void **a13, uint64_t a14, uint64_t *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,const void *a44)
{
  STACK[0x280] = v44;
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  void *v45 = &unk_1F14B7800;
  float v48 = (std::__shared_weak_count *)v45[4];
  if (v48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  }
  STACK[0x280] = v46 - 192;
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  MEMORY[0x1C185D370](v45, 0x10E1C401318458CLL);
  if (STACK[0x240]) {
    MEMORY[0x1C185D370](STACK[0x240], 0x60C4044C4A2DFLL);
  }
  STACK[0x280] = (unint64_t)&STACK[0x260];
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  applesauce::CF::TypeRef::~TypeRef(&a44);
  applesauce::CF::StringRef::~StringRef(a13);
  uint64_t v49 = *a15;
  *a15 = 0;
  if (v49) {
    (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
  }
  _Unwind_Resume(a1);
}

void sub_1BB445A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, const void **a13, uint64_t a14, uint64_t *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,const void *a44)
{
  STACK[0x280] = v44;
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  void *v45 = &unk_1F14B7800;
  float v48 = (std::__shared_weak_count *)v45[4];
  if (v48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  }
  STACK[0x280] = v46 - 192;
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  MEMORY[0x1C185D370](v45, 0x10E1C401318458CLL);
  if (STACK[0x240]) {
    MEMORY[0x1C185D370](STACK[0x240], 0x60C4044C4A2DFLL);
  }
  STACK[0x280] = (unint64_t)&STACK[0x260];
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  applesauce::CF::TypeRef::~TypeRef(&a44);
  applesauce::CF::StringRef::~StringRef(a13);
  uint64_t v49 = *a15;
  *a15 = 0;
  if (v49) {
    (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
  }
  _Unwind_Resume(a1);
}

void sub_1BB445A08()
{
}

void sub_1BB445A14()
{
}

void sub_1BB445A1C()
{
}

void sub_1BB445A28()
{
}

void sub_1BB445A30()
{
}

void sub_1BB445A64()
{
}

void sub_1BB445A6C()
{
}

void sub_1BB445A74()
{
}

void sub_1BB445A7C()
{
}

void sub_1BB445AB0(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, void **a12, uint64_t a13, void **a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  if (SLOBYTE(STACK[0x297]) < 0) {
    operator delete((void *)STACK[0x280]);
  }
  if (*(char *)(v77 - 169) < 0)
  {
    operator delete(*(void **)(v77 - 192));
    if ((v73 & 1) == 0)
    {
LABEL_8:
      if (v74) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v74);
      }
      if (a2 == 4)
      {
        long long v80 = __cxa_begin_catch(a1);
        long long v81 = *(NSObject ***)(v75 + 8);
        if (v81) {
          long long v82 = *v81;
        }
        else {
          long long v82 = 0;
        }
        if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
        {
          uint64_t v83 = (*(uint64_t (**)(void *))(*(void *)v80 + 16))(v80);
          LODWORD(STACK[0x280]) = 136315906;
          STACK[0x284] = (unint64_t)"NeuralNetImpl.cpp";
          LOWORD(STACK[0x28C]) = 1024;
          LODWORD(STACK[0x28E]) = 1055;
          LOWORD(STACK[0x292]) = 1024;
          LODWORD(STACK[0x294]) = -66743;
          LOWORD(STACK[0x298]) = 2080;
          STACK[0x29A] = v83;
          _os_log_impl(&dword_1BB0CE000, v82, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d): \"Run time error: %s\"", (uint8_t *)&STACK[0x280], 0x22u);
        }
        exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
        *(void *)exceptiouint64_t n = &unk_1F14C8B68;
        exception[2] = -66743;
      }
      __int16 v85 = *(void **)(v75 + 400);
      if (v85)
      {
        *(void *)(v75 + 408) = v85;
        operator delete(v85);
      }
      STACK[0x280] = a22;
      std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
      char v86 = *(void **)(v75 + 352);
      if (v86)
      {
        *(void *)(v75 + 360) = v86;
        operator delete(v86);
      }
      uint64_t v87 = *(void *)(v75 + 344);
      *(void *)(v75 + 344) = 0;
      if (v87) {
        (*(void (**)(uint64_t))(*(void *)v87 + 8))(v87);
      }
      uint64_t v88 = *(std::__shared_weak_count **)(v75 + 336);
      if (v88) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v88);
      }
      if (*(char *)(v75 + 135) < 0) {
        operator delete(*a14);
      }
      if (*(char *)(v75 + 111) < 0) {
        operator delete(*a11);
      }
      if (*(char *)(v75 + 87) < 0) {
        operator delete(*a16);
      }
      if (*(char *)(v75 + 63) < 0) {
        operator delete(*a12);
      }
      *(void *)uint64_t v75 = &unk_1F14B7800;
      char v89 = *(std::__shared_weak_count **)(v75 + 32);
      if (v89) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v89);
      }
      if (a66 < 0) {
        operator delete(a61);
      }
      if (a71 < 0) {
        operator delete(a68);
      }
      if (a73 < 0) {
        operator delete(a72);
      }
      if (SLOBYTE(STACK[0x217]) < 0) {
        operator delete((void *)STACK[0x200]);
      }
      if (SLOBYTE(STACK[0x237]) < 0) {
        operator delete((void *)STACK[0x220]);
      }
      MEMORY[0x1C185D370](v75, 0x10F3C40D56EFA3DLL);
      JUMPOUT(0x1BB44690CLL);
    }
  }
  else if (!v73)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v76);
  goto LABEL_8;
}

void sub_1BB445AE8()
{
  if (*(char *)(v1 - 169) < 0) {
    operator delete(*(void **)(v1 - 192));
  }
  __cxa_free_exception(v0);
  JUMPOUT(0x1BB446684);
}

void sub_1BB445B04(void *a1, int a2)
{
  if (SLOBYTE(STACK[0x297]) < 0) {
    operator delete((void *)STACK[0x280]);
  }
  if (*(char *)(v5 - 169) < 0)
  {
    operator delete(*(void **)(v5 - 192));
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if (a2 == 4)
      {
        unint64_t v8 = __cxa_begin_catch(a1);
        int v9 = *(NSObject ***)(v4 + 8);
        if (v9) {
          long long v10 = *v9;
        }
        else {
          long long v10 = 0;
        }
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          uint64_t v11 = (*(uint64_t (**)(void *))(*(void *)v8 + 16))(v8);
          LODWORD(STACK[0x280]) = 136315906;
          STACK[0x284] = (unint64_t)"NeuralNetImpl.cpp";
          LOWORD(STACK[0x28C]) = 1024;
          LODWORD(STACK[0x28E]) = 1055;
          LOWORD(STACK[0x292]) = 1024;
          LODWORD(STACK[0x294]) = -66743;
          LOWORD(STACK[0x298]) = 2080;
          STACK[0x29A] = v11;
          _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d): \"Run time error: %s\"", (uint8_t *)&STACK[0x280], 0x22u);
        }
        exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
        *(void *)exceptiouint64_t n = &unk_1F14C8B68;
        exception[2] = -66743;
      }
      JUMPOUT(0x1BB4467C0);
    }
  }
  else if (!v2)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v3);
  goto LABEL_8;
}

void sub_1BB445B3C()
{
  if (*(char *)(v1 - 169) < 0) {
    operator delete(*(void **)(v1 - 192));
  }
  __cxa_free_exception(v0);
  JUMPOUT(0x1BB44669CLL);
}

void sub_1BB445B58()
{
  if (SLOBYTE(STACK[0x317]) < 0) {
    operator delete((void *)STACK[0x300]);
  }
  if (SLOBYTE(STACK[0x277]) < 0) {
    operator delete((void *)STACK[0x260]);
  }
  JUMPOUT(0x1BB445D78);
}

void sub_1BB445B88()
{
}

void sub_1BB445C40()
{
  JUMPOUT(0x1BB445D3CLL);
}

void sub_1BB445C4C()
{
}

void sub_1BB445C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, const void **a13, uint64_t a14, uint64_t *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,const void *a44)
{
  CFNumberRef v45 = (void *)STACK[0x280];
  if (STACK[0x280])
  {
    STACK[0x288] = (unint64_t)v45;
    operator delete(v45);
  }
  ModelPlistInfo::~ModelPlistInfo((void **)&STACK[0x300]);
  applesauce::CF::TypeRef::~TypeRef(&a44);
  applesauce::CF::StringRef::~StringRef(a13);
  uint64_t v46 = *a15;
  *a15 = 0;
  if (v46) {
    (*(void (**)(uint64_t))(*(void *)v46 + 8))(v46);
  }
  _Unwind_Resume(a1);
}

void sub_1BB445C7C()
{
}

void sub_1BB445C84()
{
}

void sub_1BB445C8C()
{
}

void sub_1BB445C94()
{
}

void sub_1BB445C9C()
{
}

void sub_1BB445CA4()
{
}

void sub_1BB445CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, const void **a13, uint64_t a14, uint64_t *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,const void *a44)
{
  if (*(char *)(v44 + 87) < 0) {
    operator delete(*v46);
  }
  if (*(char *)(v44 + 63) < 0) {
    operator delete(*v45);
  }
  *(void *)uint64_t v44 = &unk_1F14B7800;
  uint64_t v49 = *(std::__shared_weak_count **)(v44 + 32);
  if (v49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
  }
  if (SLOBYTE(STACK[0x237]) < 0) {
    operator delete((void *)STACK[0x220]);
  }
  if (SLOBYTE(STACK[0x257]) < 0) {
    operator delete((void *)STACK[0x240]);
  }
  if (SLOBYTE(STACK[0x277]) < 0) {
    operator delete((void *)STACK[0x260]);
  }
  if (*(char *)(v47 - 169) < 0) {
    operator delete(*(void **)(v47 - 192));
  }
  MEMORY[0x1C185D370](v44, 0x10F3C40BE73F9A6);
  ModelPlistInfo::~ModelPlistInfo((void **)&STACK[0x300]);
  applesauce::CF::TypeRef::~TypeRef(&a44);
  applesauce::CF::StringRef::~StringRef(a13);
  uint64_t v50 = *a15;
  *a15 = 0;
  if (v50) {
    (*(void (**)(uint64_t))(*(void *)v50 + 8))(v50);
  }
  _Unwind_Resume(a1);
}

void sub_1BB445CB4()
{
}

void sub_1BB445CBC()
{
}

void sub_1BB445CC4()
{
}

void sub_1BB445CCC()
{
}

void sub_1BB445CD4()
{
}

void sub_1BB445CDC()
{
}

void sub_1BB445CE4()
{
}

void sub_1BB445CEC()
{
}

void sub_1BB445CF4()
{
}

void sub_1BB445CFC()
{
}

void sub_1BB445D04()
{
}

void sub_1BB445D0C()
{
}

void sub_1BB445D14()
{
}

void sub_1BB445D1C()
{
}

void sub_1BB445D24()
{
}

void sub_1BB445D2C()
{
}

void sub_1BB445D48(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,const void *a34)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  applesauce::CF::StringRef::~StringRef(&a34);
  applesauce::CF::StringRef::~StringRef((const void **)(v34 - 192));
  JUMPOUT(0x1BB44709CLL);
}

void sub_1BB445D88(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  sub_1BB446AFC();
}

void sub_1BB445D90(void *a1, int a2)
{
  if (a2)
  {
    if (a2 == 3)
    {
      uint64_t v4 = __cxa_begin_catch(a1);
      uint64_t v5 = *(NSObject ***)(v2 + 8);
      if (v5)
      {
        uint64_t v6 = *v5;
        if (!*v5) {
          goto LABEL_24;
        }
      }
      else
      {
        uint64_t v6 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        int v15 = v4[2];
        uint64_t v12 = (*(uint64_t (**)(_DWORD *))(*(void *)v4 + 16))(v4);
        LODWORD(STACK[0x300]) = 136315906;
        STACK[0x304] = (unint64_t)"NeuralNetImpl.cpp";
        LOWORD(STACK[0x30C]) = 1024;
        LODWORD(STACK[0x30E]) = 1374;
        LOWORD(STACK[0x312]) = 1024;
        LODWORD(STACK[0x314]) = v15;
        LOWORD(STACK[0x318]) = 2080;
        STACK[0x31A] = v12;
        _os_log_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d BNNSGraphCompileFromFile failed with CAException %d: %s.", (uint8_t *)&STACK[0x300], 0x22u);
      }
    }
    else
    {
      int v7 = __cxa_begin_catch(a1);
      unint64_t v8 = *(NSObject ***)(v2 + 8);
      if (a2 == 2)
      {
        int v9 = v7;
        if (v8)
        {
          long long v10 = *v8;
          if (!*v8) {
            goto LABEL_24;
          }
        }
        else
        {
          long long v10 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v14 = (*(uint64_t (**)(void))(**((void **)v9 + 3) + 16))(*((void *)v9 + 3));
          int v16 = *((_DWORD *)v9 + 4);
          uint64_t v13 = (*(uint64_t (**)(void *))(*(void *)v9 + 16))(v9);
          LODWORD(STACK[0x300]) = 136316162;
          STACK[0x304] = (unint64_t)"NeuralNetImpl.cpp";
          LOWORD(STACK[0x30C]) = 1024;
          LODWORD(STACK[0x30E]) = 1376;
          LOWORD(STACK[0x312]) = 2080;
          STACK[0x314] = v14;
          LOWORD(STACK[0x31C]) = 1024;
          LODWORD(STACK[0x31E]) = v16;
          LOWORD(STACK[0x322]) = 2080;
          STACK[0x324] = v13;
          _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d BNNSGraphCompileFromFile failed with %s error %d: %s.", (uint8_t *)&STACK[0x300], 0x2Cu);
        }
      }
      else
      {
        if (v8)
        {
          uint64_t v11 = *v8;
          if (!*v8) {
            goto LABEL_24;
          }
        }
        else
        {
          uint64_t v11 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(STACK[0x300]) = 136315394;
          STACK[0x304] = (unint64_t)"NeuralNetImpl.cpp";
          LOWORD(STACK[0x30C]) = 1024;
          LODWORD(STACK[0x30E]) = 1378;
          _os_log_impl(&dword_1BB0CE000, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d BNNSGraphCompileFromFile failed with unknown exception.", (uint8_t *)&STACK[0x300], 0x12u);
        }
      }
    }
LABEL_24:
    __cxa_end_catch();
    JUMPOUT(0x1BB443660);
  }
  sub_1BB446AFC();
}

void sub_1BB446010()
{
}

void sub_1BB44601C(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  sub_1BB446AFC();
}

void sub_1BB446024(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  sub_1BB446AFC();
}

void sub_1BB44602C(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  sub_1BB446AFC();
}

void sub_1BB446038(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  sub_1BB446AFC();
}

void sub_1BB446040()
{
}

void sub_1BB44604C()
{
}

void sub_1BB446068()
{
}

void sub_1BB44607C()
{
}

void sub_1BB4460B4(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  sub_1BB446AFC();
}

void sub_1BB4460C4(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  sub_1BB446AFC();
}

void sub_1BB4460CC(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  sub_1BB446AFC();
}

void sub_1BB4460D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, void **a12, uint64_t a13, void **a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,unint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  unint64_t v77 = STACK[0x240];
  STACK[0x240] = 0;
  if (v77) {
    (*(void (**)(unint64_t))(*(void *)v77 + 8))(v77);
  }
  if (SLOBYTE(STACK[0x277]) < 0) {
    operator delete((void *)STACK[0x260]);
  }
  if (*(char *)(v76 - 169) < 0) {
    operator delete(*(void **)(v76 - 192));
  }
  if (SLOBYTE(STACK[0x297]) < 0) {
    operator delete((void *)STACK[0x280]);
  }
  float v78 = *(void **)(v75 + 400);
  if (v78)
  {
    *(void *)(v75 + 408) = v78;
    operator delete(v78);
  }
  STACK[0x280] = a22;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  long long v79 = *(void **)(v75 + 352);
  if (v79)
  {
    *(void *)(v75 + 360) = v79;
    operator delete(v79);
  }
  uint64_t v80 = *(void *)(v75 + 344);
  *(void *)(v75 + 344) = 0;
  if (v80) {
    (*(void (**)(uint64_t))(*(void *)v80 + 8))(v80);
  }
  long long v81 = *(std::__shared_weak_count **)(v75 + 336);
  if (v81) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v81);
  }
  if (*(char *)(v75 + 135) < 0) {
    operator delete(*a14);
  }
  if (*(char *)(v75 + 111) < 0) {
    operator delete(*a11);
  }
  if (*(char *)(v75 + 87) < 0) {
    operator delete(*a16);
  }
  if (*(char *)(v75 + 63) < 0) {
    operator delete(*a12);
  }
  *(void *)uint64_t v75 = &unk_1F14B7800;
  long long v82 = *(std::__shared_weak_count **)(v75 + 32);
  if (v82) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v82);
  }
  if (a66 < 0) {
    operator delete(a61);
  }
  if (a73 < 0) {
    operator delete(a68);
  }
  if (a75 < 0) {
    operator delete(a74);
  }
  if (SLOBYTE(STACK[0x217]) < 0) {
    operator delete((void *)STACK[0x200]);
  }
  if (SLOBYTE(STACK[0x237]) < 0) {
    operator delete((void *)STACK[0x220]);
  }
  MEMORY[0x1C185D370](v75, 0x10F3C40D56EFA3DLL);
  ModelPlistInfo::~ModelPlistInfo((void **)&STACK[0x300]);
  JUMPOUT(0x1BB446C6CLL);
}

void sub_1BB446254()
{
}

void sub_1BB44625C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, void **a12, uint64_t a13, void **a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,unint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  uint64_t v76 = *(void **)(v75 + 400);
  if (v76)
  {
    *(void *)(v75 + 408) = v76;
    operator delete(v76);
  }
  STACK[0x280] = a22;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&STACK[0x280]);
  unint64_t v77 = *(void **)(v75 + 352);
  if (v77)
  {
    *(void *)(v75 + 360) = v77;
    operator delete(v77);
  }
  uint64_t v78 = *(void *)(v75 + 344);
  *(void *)(v75 + 344) = 0;
  if (v78) {
    (*(void (**)(uint64_t))(*(void *)v78 + 8))(v78);
  }
  if (*(void *)(v75 + 336)) {
    std::__shared_weak_count::__release_shared[abi:ne180100]();
  }
  if (*(char *)(v75 + 135) < 0) {
    operator delete(*a14);
  }
  if (*(char *)(v75 + 111) < 0) {
    operator delete(*a11);
  }
  if (*(char *)(v75 + 87) < 0) {
    operator delete(*a16);
  }
  if (*(char *)(v75 + 63) < 0) {
    operator delete(*a12);
  }
  *(void *)uint64_t v75 = &unk_1F14B7800;
  if (*(void *)(v75 + 32)) {
    std::__shared_weak_count::__release_shared[abi:ne180100]();
  }
  if (a66 < 0) {
    operator delete(a61);
  }
  if (a73 < 0) {
    operator delete(a68);
  }
  if (a75 < 0) {
    operator delete(a74);
  }
  if (SLOBYTE(STACK[0x217]) < 0) {
    operator delete((void *)STACK[0x200]);
  }
  if (SLOBYTE(STACK[0x237]) < 0) {
    operator delete((void *)STACK[0x220]);
  }
  MEMORY[0x1C185D370](v75, 0x10F3C40D56EFA3DLL);
  JUMPOUT(0x1BB44690CLL);
}

void sub_1BB446264()
{
}

void sub_1BB44626C()
{
}

void sub_1BB446274()
{
}

void sub_1BB44627C()
{
}

void sub_1BB446290()
{
}

void sub_1BB4462B0()
{
  if (v0) {
    CFRelease(v0);
  }
  JUMPOUT(0x1BB4463A8);
}

void sub_1BB4462C4(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  sub_1BB446AFC();
}

void sub_1BB4462D8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,const void *a42)
{
  if (a41 < 0) {
    operator delete(__p);
  }
  applesauce::CF::StringRef::~StringRef(&a42);
  applesauce::CF::StringRef::~StringRef((const void **)(v42 - 192));
  JUMPOUT(0x1BB446C6CLL);
}

void sub_1BB446300()
{
}

void sub_1BB446308(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  sub_1BB446AFC();
}

void sub_1BB446310(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  sub_1BB446AFC();
}

void sub_1BB446318(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  sub_1BB446AFC();
}

void sub_1BB446320()
{
  if (STACK[0x288]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x288]);
  }
  if (v0) {
    JUMPOUT(0x1BB446350);
  }
  JUMPOUT(0x1BB446684);
}

void sub_1BB446340()
{
  if (STACK[0x288]) {
    JUMPOUT(0x1BB446350);
  }
  if (v0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v0);
  }
  JUMPOUT(0x1BB44669CLL);
}

void sub_1BB446368(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  sub_1BB446AFC();
}

void sub_1BB446374()
{
  __cxa_free_exception(v0);
  JUMPOUT(0x1BB4465E8);
}

void sub_1BB446384(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46)
{
  if (a45 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1BB4463A4);
}

void sub_1BB4463B8(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  sub_1BB446AFC();
}

void sub_1BB4463C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  STACK[0x280] = v17;
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100](&STACK[0x280]);
  *a17 = &unk_1F14B7800;
  uint64_t v19 = a17[4];
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  STACK[0x280] = v18 - 192;
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100](&STACK[0x280]);
  MEMORY[0x1C185D370](a17, 0x10E1C401318458CLL);
  if (STACK[0x240]) {
    MEMORY[0x1C185D370](STACK[0x240], 0x60C4044C4A2DFLL);
  }
  STACK[0x280] = (unint64_t)&STACK[0x260];
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100](&STACK[0x280]);
  JUMPOUT(0x1BB44709CLL);
}

void sub_1BB4463CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, const void **a13, uint64_t a14, uint64_t *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,const void *a44)
{
  STACK[0x280] = v44;
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  void *v45 = &unk_1F14B7800;
  float v48 = (std::__shared_weak_count *)v45[4];
  if (v48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  }
  STACK[0x280] = v46 - 192;
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  MEMORY[0x1C185D370](v45, 0x10E1C401318458CLL);
  if (STACK[0x240]) {
    MEMORY[0x1C185D370](STACK[0x240], 0x60C4044C4A2DFLL);
  }
  STACK[0x280] = (unint64_t)&STACK[0x260];
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  applesauce::CF::TypeRef::~TypeRef(&a44);
  applesauce::CF::StringRef::~StringRef(a13);
  uint64_t v49 = *a15;
  *a15 = 0;
  if (v49) {
    (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
  }
  _Unwind_Resume(a1);
}

void sub_1BB4463D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  STACK[0x280] = v17;
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100](&STACK[0x280]);
  *a17 = &unk_1F14B7800;
  uint64_t v19 = a17[4];
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  STACK[0x280] = v18 - 192;
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100](&STACK[0x280]);
  MEMORY[0x1C185D370](a17, 0x10E1C401318458CLL);
  if (STACK[0x240]) {
    MEMORY[0x1C185D370](STACK[0x240], 0x60C4044C4A2DFLL);
  }
  STACK[0x280] = (unint64_t)&STACK[0x260];
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100](&STACK[0x280]);
  JUMPOUT(0x1BB44709CLL);
}

void sub_1BB4463E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,unint64_t a22)
{
  STACK[0x280] = a22;
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  *BOOL v22 = &unk_1F14B7800;
  BOOL v24 = (std::__shared_weak_count *)v22[4];
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  STACK[0x280] = v23 - 192;
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  MEMORY[0x1C185D370](v22, 0x10E1C401318458CLL);
  if (STACK[0x240]) {
    MEMORY[0x1C185D370](STACK[0x240], 0x60C4044C4A2DFLL);
  }
  STACK[0x280] = (unint64_t)&STACK[0x260];
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  JUMPOUT(0x1BB44709CLL);
}

void sub_1BB4464C0()
{
}

void sub_1BB4464C8(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  sub_1BB446AFC();
}

void sub_1BB4464D0()
{
}

void sub_1BB4464D8(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  sub_1BB446AFC();
}

void sub_1BB4464E0(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  sub_1BB446AFC();
}

void sub_1BB4464E8()
{
  if (SLOBYTE(STACK[0x2AF]) < 0) {
    operator delete((void *)STACK[0x298]);
  }
  if (SLOBYTE(STACK[0x297]) < 0) {
    operator delete((void *)STACK[0x280]);
  }
  JUMPOUT(0x1BB446594);
}

void sub_1BB446510(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  sub_1BB446AFC();
}

void sub_1BB446518(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  sub_1BB446AFC();
}

void sub_1BB44652C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, void **a12, uint64_t a13, void **a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, CFTypeRef cf,uint64_t a21,unint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,CFTypeRef a47,CFTypeRef a48,CFTypeRef a49,uint64_t a50,uint64_t a51,uint64_t a52,CFTypeRef a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  CFRelease(cf);
  if (a49) {
    CFRelease(a49);
  }
  if (a53) {
    CFRelease(a53);
  }
  uint64_t v76 = *(void **)(v75 + 400);
  if (v76)
  {
    *(void *)(v75 + 408) = v76;
    operator delete(v76);
  }
  STACK[0x280] = a22;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  unint64_t v77 = *(void **)(v75 + 352);
  if (v77)
  {
    *(void *)(v75 + 360) = v77;
    operator delete(v77);
  }
  uint64_t v78 = *(void *)(v75 + 344);
  *(void *)(v75 + 344) = 0;
  if (v78) {
    (*(void (**)(uint64_t))(*(void *)v78 + 8))(v78);
  }
  long long v79 = *(std::__shared_weak_count **)(v75 + 336);
  if (v79) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v79);
  }
  if (*(char *)(v75 + 135) < 0) {
    operator delete(*a14);
  }
  if (*(char *)(v75 + 111) < 0) {
    operator delete(*a11);
  }
  if (*(char *)(v75 + 87) < 0) {
    operator delete(*a16);
  }
  if (*(char *)(v75 + 63) < 0) {
    operator delete(*a12);
  }
  *(void *)uint64_t v75 = &unk_1F14B7800;
  uint64_t v80 = *(std::__shared_weak_count **)(v75 + 32);
  if (v80) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v80);
  }
  if (a66 < 0) {
    operator delete(a61);
  }
  if (a73 < 0) {
    operator delete(a68);
  }
  if (a75 < 0) {
    operator delete(a74);
  }
  if (SLOBYTE(STACK[0x217]) < 0) {
    operator delete((void *)STACK[0x200]);
  }
  if (SLOBYTE(STACK[0x237]) < 0) {
    operator delete((void *)STACK[0x220]);
  }
  MEMORY[0x1C185D370](v75, 0x10F3C40D56EFA3DLL);
  JUMPOUT(0x1BB44690CLL);
}

void sub_1BB44661C(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  sub_1BB446AFC();
}

void sub_1BB446624(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  sub_1BB446AFC();
}

void sub_1BB44662C(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  sub_1BB446AFC();
}

void sub_1BB446634(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  sub_1BB446AFC();
}

void sub_1BB44663C(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  sub_1BB446AFC();
}

void sub_1BB446644(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  sub_1BB446AFC();
}

void sub_1BB44664C(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  sub_1BB446AFC();
}

void sub_1BB44665C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  uint64_t v19 = (void *)STACK[0x6A8];
  if (STACK[0x6A8])
  {
    STACK[0x6B0] = (unint64_t)v19;
    operator delete(v19);
  }
  BOOL v20 = (void *)STACK[0x690];
  if (STACK[0x690])
  {
    STACK[0x698] = (unint64_t)v20;
    operator delete(v20);
  }
  CFStringRef v21 = (void *)STACK[0x678];
  if (STACK[0x678])
  {
    STACK[0x680] = (unint64_t)v21;
    operator delete(v21);
  }
  BOOL v22 = (void *)STACK[0x660];
  if (STACK[0x660])
  {
    STACK[0x668] = (unint64_t)v22;
    operator delete(v22);
  }
  uint64_t v23 = (void *)STACK[0x648];
  if (STACK[0x648])
  {
    STACK[0x650] = (unint64_t)v23;
    operator delete(v23);
  }
  BOOL v24 = (void *)STACK[0x630];
  if (STACK[0x630])
  {
    STACK[0x638] = (unint64_t)v24;
    operator delete(v24);
  }
  int64_t v25 = (void *)STACK[0x618];
  if (STACK[0x618])
  {
    STACK[0x620] = (unint64_t)v25;
    operator delete(v25);
  }
  STACK[0x280] = v17;
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  *a17 = &unk_1F14B7800;
  float v26 = (std::__shared_weak_count *)a17[4];
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  STACK[0x280] = v18 - 192;
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  MEMORY[0x1C185D370](a17, 0x10E1C401318458CLL);
  if (STACK[0x240]) {
    MEMORY[0x1C185D370](STACK[0x240], 0x60C4044C4A2DFLL);
  }
  STACK[0x280] = (unint64_t)&STACK[0x260];
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  JUMPOUT(0x1BB44709CLL);
}

void sub_1BB44666C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  uint64_t v19 = (void *)STACK[0x6A8];
  if (STACK[0x6A8])
  {
    STACK[0x6B0] = (unint64_t)v19;
    operator delete(v19);
  }
  BOOL v20 = (void *)STACK[0x690];
  if (STACK[0x690])
  {
    STACK[0x698] = (unint64_t)v20;
    operator delete(v20);
  }
  CFStringRef v21 = (void *)STACK[0x678];
  if (STACK[0x678])
  {
    STACK[0x680] = (unint64_t)v21;
    operator delete(v21);
  }
  BOOL v22 = (void *)STACK[0x660];
  if (STACK[0x660])
  {
    STACK[0x668] = (unint64_t)v22;
    operator delete(v22);
  }
  uint64_t v23 = (void *)STACK[0x648];
  if (STACK[0x648])
  {
    STACK[0x650] = (unint64_t)v23;
    operator delete(v23);
  }
  BOOL v24 = (void *)STACK[0x630];
  if (STACK[0x630])
  {
    STACK[0x638] = (unint64_t)v24;
    operator delete(v24);
  }
  int64_t v25 = (void *)STACK[0x618];
  if (STACK[0x618])
  {
    STACK[0x620] = (unint64_t)v25;
    operator delete(v25);
  }
  STACK[0x280] = v17;
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  *a17 = &unk_1F14B7800;
  float v26 = (std::__shared_weak_count *)a17[4];
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  STACK[0x280] = v18 - 192;
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  MEMORY[0x1C185D370](a17, 0x10E1C401318458CLL);
  if (STACK[0x240]) {
    MEMORY[0x1C185D370](STACK[0x240], 0x60C4044C4A2DFLL);
  }
  STACK[0x280] = (unint64_t)&STACK[0x260];
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  JUMPOUT(0x1BB44709CLL);
}

void sub_1BB4467B0(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  sub_1BB446AFC();
}

void sub_1BB4467B8()
{
}

void sub_1BB446918(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  sub_1BB446AFC();
}

void sub_1BB446920()
{
  close(v0);
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&STACK[0x260]);
  JUMPOUT(0x1BB446968);
}

void sub_1BB446938(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  sub_1BB446AFC();
}

void sub_1BB446944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, const void **a13, uint64_t a14, uint64_t *a15, void **a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,CFTypeRef *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,const void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,uint64_t a62,void *a63)
{
  if (*(char *)(v77 - 169) < 0) {
    operator delete(*(void **)(v77 - 192));
  }
  if (SLOBYTE(STACK[0x217]) < 0) {
    operator delete((void *)STACK[0x200]);
  }
  if (SLOBYTE(STACK[0x237]) < 0) {
    operator delete((void *)STACK[0x220]);
  }
  if (SLOBYTE(STACK[0x257]) < 0) {
    operator delete((void *)STACK[0x240]);
  }
  STACK[0x300] = a20;
  std::vector<MIL2BNNS::GraphTensor>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x300]);
  uint64_t v79 = *(void *)(v74 + 248);
  *(void *)(v74 + 248) = 0;
  if (v79) {
    MEMORY[0x1C185D340](v79, 0x1000C8077774924);
  }
  uint64_t v80 = *(void *)(v74 + 240);
  *(void *)(v74 + 240) = 0;
  if (v80) {
    MEMORY[0x1C185D340](v80, 0x1000C8077774924);
  }
  uint64_t v81 = 0;
  while (1)
  {
    long long v82 = *(void **)(v74 + v81 + 192);
    if (v82)
    {
      *(void *)(v74 + v81 + 200) = v82;
      operator delete(v82);
    }
    v81 -= 24;
    if (v81 == -48)
    {
      if (*a22) {
        CFRelease(*a22);
      }
      uint64_t v83 = *v76;
      if (*v76)
      {
        *(void *)(v74 + 128) = v83;
        operator delete(v83);
      }
      if (*(char *)(v74 + 111) < 0) {
        operator delete(*a16);
      }
      if (*(char *)(v74 + 87) < 0) {
        operator delete(*a17);
      }
      if (*(char *)(v74 + 63) < 0) {
        operator delete(*v75);
      }
      *(void *)uint64_t v74 = &unk_1F14B7800;
      CFStringRef v84 = *(std::__shared_weak_count **)(v74 + 32);
      if (v84) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v84);
      }
      if (a54 < 0) {
        operator delete(a49);
      }
      if (a61 < 0) {
        operator delete(a56);
      }
      if (a68 < 0) {
        operator delete(a63);
      }
      if (a72 < 0) {
        operator delete(a70);
      }
      if (a74 < 0) {
        operator delete(a73);
      }
      MEMORY[0x1C185D370](v74, 0x10F3C40BE73F9A6);
      ModelPlistInfo::~ModelPlistInfo((void **)&STACK[0x280]);
      applesauce::CF::TypeRef::~TypeRef(&a44);
      applesauce::CF::StringRef::~StringRef(a13);
      uint64_t v85 = *a15;
      *a15 = 0;
      if (v85) {
        (*(void (**)(uint64_t))(*(void *)v85 + 8))(v85);
      }
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_1BB446AF8(uint64_t a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  return sub_1BB446AFC();
}

void sub_1BB446AFC()
{
}

void sub_1BB446B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, applesauce::CF::StringRef *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  applesauce::CF::TypeRef::~TypeRef((applesauce::CF::TypeRef *)&a44);
  applesauce::CF::StringRef::~StringRef(a13);
  uint64_t v46 = *v44;
  *unint64_t v44 = 0;
  if (v46) {
    (*(void (**)(uint64_t))(*(void *)v46 + 8))(v46);
  }
  _Unwind_Resume(a1);
}

void sub_1BB446B0C()
{
  STACK[0x280] = v6;
  std::vector<MIL2BNNS::GraphTensor>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  uint64_t v8 = *(void *)(v0 + 248);
  *(void *)(v0 + 248) = 0;
  if (v8) {
    MEMORY[0x1C185D340](v8, 0x1000C8077774924);
  }
  uint64_t v9 = *(void *)(v0 + 240);
  *(void *)(v0 + 240) = 0;
  if (v9) {
    MEMORY[0x1C185D340](v9, 0x1000C8077774924);
  }
  uint64_t v10 = 0;
  while (1)
  {
    uint64_t v11 = *(void **)(v0 + v10 + 192);
    if (v11)
    {
      *(void *)(v0 + v10 + 200) = v11;
      operator delete(v11);
    }
    v10 -= 24;
    if (v10 == -48)
    {
      if (*v5) {
        CFRelease(*v5);
      }
      uint64_t v12 = *v4;
      if (*v4)
      {
        *(void *)(v0 + 128) = v12;
        operator delete(v12);
      }
      if (*(char *)(v0 + 111) < 0) {
        operator delete(*v3);
      }
      if (*(char *)(v0 + 87) < 0) {
        operator delete(*v2);
      }
      if (*(char *)(v0 + 63) < 0) {
        operator delete(*v1);
      }
      *(void *)uint64_t v0 = &unk_1F14B7800;
      uint64_t v13 = *(std::__shared_weak_count **)(v0 + 32);
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      if (SLOBYTE(STACK[0x237]) < 0) {
        operator delete((void *)STACK[0x220]);
      }
      if (SLOBYTE(STACK[0x257]) < 0) {
        operator delete((void *)STACK[0x240]);
      }
      if (SLOBYTE(STACK[0x277]) < 0) {
        operator delete((void *)STACK[0x260]);
      }
      if (*(char *)(v7 - 169) < 0) {
        operator delete(*(void **)(v7 - 192));
      }
      MEMORY[0x1C185D370](v0, 0x10F3C40BE73F9A6);
      ModelPlistInfo::~ModelPlistInfo((void **)&STACK[0x300]);
      JUMPOUT(0x1BB44709CLL);
    }
  }
}

void sub_1BB446C74()
{
}

void sub_1BB446D80()
{
}

void sub_1BB446E8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int v16 = (void *)STACK[0x6A8];
  if (STACK[0x6A8])
  {
    STACK[0x6B0] = (unint64_t)v16;
    operator delete(v16);
  }
  unint64_t v17 = (void *)STACK[0x690];
  if (STACK[0x690])
  {
    STACK[0x698] = (unint64_t)v17;
    operator delete(v17);
  }
  uint64_t v18 = (void *)STACK[0x678];
  if (STACK[0x678])
  {
    STACK[0x680] = (unint64_t)v18;
    operator delete(v18);
  }
  uint64_t v19 = (void *)STACK[0x660];
  if (STACK[0x660])
  {
    STACK[0x668] = (unint64_t)v19;
    operator delete(v19);
  }
  BOOL v20 = (void *)STACK[0x648];
  if (STACK[0x648])
  {
    STACK[0x650] = (unint64_t)v20;
    operator delete(v20);
  }
  CFStringRef v21 = (void *)STACK[0x630];
  if (STACK[0x630])
  {
    STACK[0x638] = (unint64_t)v21;
    operator delete(v21);
  }
  BOOL v22 = (void *)STACK[0x618];
  if (STACK[0x618])
  {
    STACK[0x620] = (unint64_t)v22;
    operator delete(v22);
  }
  STACK[0x280] = a14;
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  *uint64_t v14 = &unk_1F14B7800;
  uint64_t v23 = (std::__shared_weak_count *)v14[4];
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  STACK[0x280] = v15 - 192;
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  MEMORY[0x1C185D370](v14, 0x10E1C401318458CLL);
  if (STACK[0x240]) {
    MEMORY[0x1C185D370](STACK[0x240], 0x60C4044C4A2DFLL);
  }
  STACK[0x280] = (unint64_t)&STACK[0x260];
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  JUMPOUT(0x1BB44709CLL);
}

void sub_1BB446F98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,unint64_t a22)
{
  BOOL v24 = (void *)STACK[0x6A8];
  if (STACK[0x6A8])
  {
    STACK[0x6B0] = (unint64_t)v24;
    operator delete(v24);
  }
  int64_t v25 = (void *)STACK[0x690];
  if (STACK[0x690])
  {
    STACK[0x698] = (unint64_t)v25;
    operator delete(v25);
  }
  float v26 = (void *)STACK[0x678];
  if (STACK[0x678])
  {
    STACK[0x680] = (unint64_t)v26;
    operator delete(v26);
  }
  int v27 = (void *)STACK[0x660];
  if (STACK[0x660])
  {
    STACK[0x668] = (unint64_t)v27;
    operator delete(v27);
  }
  int v28 = (void *)STACK[0x648];
  if (STACK[0x648])
  {
    STACK[0x650] = (unint64_t)v28;
    operator delete(v28);
  }
  int v29 = (void *)STACK[0x630];
  if (STACK[0x630])
  {
    STACK[0x638] = (unint64_t)v29;
    operator delete(v29);
  }
  __int16 v30 = (void *)STACK[0x618];
  if (STACK[0x618])
  {
    STACK[0x620] = (unint64_t)v30;
    operator delete(v30);
  }
  STACK[0x280] = a22;
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  *BOOL v22 = &unk_1F14B7800;
  int v31 = (std::__shared_weak_count *)v22[4];
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  STACK[0x280] = v23 - 192;
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  MEMORY[0x1C185D370](v22, 0x10E1C401318458CLL);
  if (STACK[0x240]) {
    MEMORY[0x1C185D370](STACK[0x240], 0x60C4044C4A2DFLL);
  }
  STACK[0x280] = (unint64_t)&STACK[0x260];
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  JUMPOUT(0x1BB44709CLL);
}

void applesauce::CF::StringRef::to_description(applesauce::CF::StringRef *this, const void *a2)
{
  CFStringRef v3 = CFCopyDescription(a2);
  applesauce::CF::details::CFString_get_value<true>(v3, (uint64_t)this);
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1BB44713C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<FullyConnectedLayerBNNS<float>>::resize(uint64_t a1, unint64_t a2)
{
  CFStringRef v3 = *(void **)a1;
  uint64_t v4 = *(void **)(a1 + 8);
  unint64_t v5 = 0x1B810ECF56BE69C9 * (((uint64_t)v4 - *(void *)a1) >> 3);
  unint64_t v6 = a2 - v5;
  if (a2 > v5)
  {
    uint64_t v7 = *(void *)(a1 + 16);
    if (0x1B810ECF56BE69C9 * ((v7 - (uint64_t)v4) >> 3) >= v6)
    {
      bzero(*(void **)(a1 + 8), 968 * ((968 * v6 - 968) / 0x3C8) + 968);
      *(void *)(a1 + 8) = &v4[121 * ((968 * v6 - 968) / 0x3C8) + 121];
      return;
    }
    if (a2 > 0x43B3D5AF9A723FLL) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = 0x1B810ECF56BE69C9 * ((v7 - (uint64_t)v3) >> 3);
    uint64_t v9 = 2 * v8;
    if (2 * v8 <= a2) {
      uint64_t v9 = a2;
    }
    if (v8 >= 0x21D9EAD7CD391FLL) {
      unint64_t v10 = 0x43B3D5AF9A723FLL;
    }
    else {
      unint64_t v10 = v9;
    }
    uint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<FullyConnectedLayerBNNS<signed char>>>(v10);
    uint64_t v12 = &v11[968 * v5];
    uint64_t v14 = &v11[968 * v13];
    bzero(v12, 968 * ((968 * v6 - 968) / 0x3C8) + 968);
    uint64_t v15 = &v12[968 * ((968 * v6 - 968) / 0x3C8) + 968];
    unint64_t v17 = *(void **)a1;
    int v16 = *(void **)(a1 + 8);
    if (v16 == *(void **)a1)
    {
      *(void *)a1 = v12;
      *(void *)(a1 + 8) = v15;
      *(void *)(a1 + 16) = v14;
      if (!v16) {
        return;
      }
    }
    else
    {
      uint64_t v18 = 0;
      do
      {
        uint64_t v19 = &v12[v18 * 8];
        BOOL v20 = &v16[v18];
        memcpy(&v12[v18 * 8 - 968], &v16[v18 - 121], 0x318uLL);
        *((void *)v19 - 21) = 0;
        *((void *)v19 - 20) = 0;
        *((void *)v19 - 22) = 0;
        *((_OWORD *)v19 - 11) = *(_OWORD *)&v16[v18 - 22];
        *((void *)v19 - 20) = v16[v18 - 20];
        *(v20 - 22) = 0;
        *(v20 - 21) = 0;
        *(v20 - 20) = 0;
        *((void *)v19 - 18) = 0;
        *((void *)v19 - 17) = 0;
        *((void *)v19 - 19) = 0;
        *(_OWORD *)(v19 - 152) = *(_OWORD *)&v16[v18 - 19];
        *((void *)v19 - 17) = v16[v18 - 17];
        *(v20 - 19) = 0;
        *(v20 - 18) = 0;
        *(v20 - 17) = 0;
        *((void *)v19 - 15) = 0;
        *((void *)v19 - 14) = 0;
        *((void *)v19 - 16) = 0;
        *((_OWORD *)v19 - 8) = *(_OWORD *)&v16[v18 - 16];
        *((void *)v19 - 14) = v16[v18 - 14];
        *(v20 - 16) = 0;
        *(v20 - 15) = 0;
        *(v20 - 14) = 0;
        *((void *)v19 - 12) = 0;
        *((void *)v19 - 11) = 0;
        *((void *)v19 - 13) = 0;
        *(_OWORD *)(v19 - 104) = *(_OWORD *)&v16[v18 - 13];
        *((void *)v19 - 11) = v16[v18 - 11];
        *(v20 - 13) = 0;
        *(v20 - 12) = 0;
        *(v20 - 11) = 0;
        *((void *)v19 - 9) = 0;
        *((void *)v19 - 8) = 0;
        *((void *)v19 - 10) = 0;
        *((_OWORD *)v19 - 5) = *(_OWORD *)&v16[v18 - 10];
        *((void *)v19 - 8) = v16[v18 - 8];
        *(v20 - 10) = 0;
        *(v20 - 9) = 0;
        *(v20 - 8) = 0;
        *((void *)v19 - 6) = 0;
        *((void *)v19 - 5) = 0;
        *((void *)v19 - 7) = 0;
        *(_OWORD *)(v19 - 56) = *(_OWORD *)&v16[v18 - 7];
        *((void *)v19 - 5) = v16[v18 - 5];
        *(v20 - 7) = 0;
        *(v20 - 6) = 0;
        *(v20 - 5) = 0;
        *((void *)v19 - 3) = 0;
        *((void *)v19 - 2) = 0;
        *((void *)v19 - 4) = 0;
        *((_OWORD *)v19 - 2) = *(_OWORD *)&v16[v18 - 4];
        *((void *)v19 - 2) = v16[v18 - 2];
        *(v20 - 4) = 0;
        *(v20 - 3) = 0;
        *(v20 - 2) = 0;
        *((void *)v19 - 1) = v16[v18 - 1];
        v18 -= 121;
      }
      while (&v16[v18] != v17);
      CFStringRef v21 = &v12[v18 * 8];
      BOOL v22 = *(void **)a1;
      int v16 = *(void **)(a1 + 8);
      *(void *)a1 = v21;
      *(void *)(a1 + 8) = v15;
      *(void *)(a1 + 16) = v14;
      if (v16 != v22)
      {
        do
        {
          v16 -= 121;
          FullyConnectedLayerBNNS<signed char>::~FullyConnectedLayerBNNS(v16);
        }
        while (v16 != v22);
        int v16 = v22;
      }
      if (!v16) {
        return;
      }
    }
    operator delete(v16);
    return;
  }
  if (a2 < v5)
  {
    uint64_t v23 = &v3[121 * a2];
    while (v4 != v23)
    {
      v4 -= 121;
      FullyConnectedLayerBNNS<signed char>::~FullyConnectedLayerBNNS(v4);
    }
    *(void *)(a1 + 8) = v23;
  }
}

void std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    unint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        uint64_t v4 = FullyConnectedLayerBNNS<signed char>::~FullyConnectedLayerBNNS(v4 - 121);
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void NeuralNet::getModelInformationFromPlist(uint64_t a1, uint64_t a2, CFDictionaryRef theDict)
{
  v100[2] = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  CFStringRef v96 = *(uint64_t **)(a2 + 16);
  CFNumberRef Value = CFDictionaryGetValue(theDict, @"NeuralNetImplementationType");
  uint64_t v7 = Value;
  if (!Value)
  {
    CFTypeRef v95 = 0;
LABEL_12:
    uint64_t v11 = *(NSObject ***)(a2 + 16);
    if (v11)
    {
      uint64_t v12 = *v11;
      if (!*v11) {
        goto LABEL_52;
      }
    }
    else
    {
      uint64_t v12 = MEMORY[0x1E4F14500];
    }
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_52;
    }
    *(_DWORD *)AudioChannelLayout buf = 136315394;
    *(void *)&uint8_t buf[4] = "NeuralNet.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 348;
    uint64_t v13 = "%25s:%-5d Model path not required for MIL2BNNS_PREPROCESSED";
    uint64_t v14 = v12;
    uint32_t v15 = 18;
LABEL_51:
    _os_log_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_DEBUG, v13, buf, v15);
    goto LABEL_52;
  }
  CFRetain(Value);
  CFTypeRef v95 = v7;
  applesauce::CF::TypeRef::operator applesauce::CF::StringRef(&v95, (applesauce::CF::StringRef *)&cf);
  std::string::basic_string[abi:ne180100]<0>(__p, "MIL2BNNS_PREPROCESSED");
  BOOL v8 = matchiString((CFStringRef *)&cf, (const UInt8 *)__p);
  if (v93 < 0) {
    operator delete(__p[0]);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v8) {
    goto LABEL_12;
  }
  if (CFDictionaryContainsKey(theDict, @"ModelNetPathBase"))
  {
    uint64_t v9 = *(NSObject ***)(a2 + 16);
    if (v9)
    {
      unint64_t v10 = *v9;
      if (!*v9)
      {
LABEL_25:
        CFStringRef v18 = (const __CFString *)CFDictionaryGetValue(theDict, @"ModelNetPathBase");
        CFStringRef v19 = v18;
        if (!v18)
        {
          uint64_t v78 = 0;
          CFStringRef v91 = 0;
          uint64_t v79 = *(NSObject ***)(a2 + 16);
          if (v79) {
            uint64_t v78 = *v79;
          }
          if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioChannelLayout buf = 136315650;
            *(void *)&uint8_t buf[4] = "NeuralNet.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 337;
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&unsigned char buf[20] = -66741;
            _os_log_impl(&dword_1BB0CE000, v78, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [modelNetPathBase_ref.get_cf() == nullptr is false]: \"Failed to retrieve ModelNetPathBase.\"", buf, 0x18u);
          }
          exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
          *(void *)exceptiouint64_t n = &unk_1F14C8B68;
          exception[2] = -66741;
        }
        CFRetain(v18);
        CFStringRef v91 = v19;
        CFStringRef v20 = (const __CFString *)CFDictionaryGetValue(theDict, @"ModelNetPath");
        CFStringRef v21 = v20;
        if (!v20)
        {
          uint64_t v81 = 0;
          CFStringRef v90 = 0;
          long long v82 = *(NSObject ***)(a2 + 16);
          if (v82) {
            uint64_t v81 = *v82;
          }
          if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioChannelLayout buf = 136315650;
            *(void *)&uint8_t buf[4] = "NeuralNet.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 339;
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&unsigned char buf[20] = -66741;
            _os_log_impl(&dword_1BB0CE000, v81, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [modelNetPathRelative_ref.get_cf() == nullptr is false]: \"Failed to retrieve ModelNetPath.\"", buf, 0x18u);
          }
          uint64_t v83 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v83 = &unk_1F14C8B68;
          v83[2] = -66741;
        }
        CFRetain(v20);
        CFStringRef v90 = v21;
        applesauce::CF::convert_to<std::string,0>(v19, (uint64_t)&v89);
        BOOL v22 = std::string::append(&v89, "/", 1uLL);
        long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        *(void *)&uint8_t buf[16] = *((void *)&v22->__r_.__value_.__l + 2);
        *(_OWORD *)AudioChannelLayout buf = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        applesauce::CF::convert_to<std::string,0>(v21, (uint64_t)v87);
        if ((v88 & 0x80u) == 0) {
          BOOL v24 = v87;
        }
        else {
          BOOL v24 = (void **)v87[0];
        }
        if ((v88 & 0x80u) == 0) {
          std::string::size_type v25 = v88;
        }
        else {
          std::string::size_type v25 = (std::string::size_type)v87[1];
        }
        float v26 = std::string::append((std::string *)buf, (const std::string::value_type *)v24, v25);
        std::string::size_type v27 = v26->__r_.__value_.__r.__words[0];
        v100[0] = v26->__r_.__value_.__l.__size_;
        *(void *)((char *)v100 + 7) = *(std::string::size_type *)((char *)&v26->__r_.__value_.__r.__words[1] + 7);
        char v28 = HIBYTE(v26->__r_.__value_.__r.__words[2]);
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        if (*(char *)(a1 + 23) < 0) {
          operator delete(*(void **)a1);
        }
        uint64_t v29 = v100[0];
        *(void *)a1 = v27;
        *(void *)(a1 + 8) = v29;
        *(void *)(a1 + 15) = *(void *)((char *)v100 + 7);
        *(unsigned char *)(a1 + 23) = v28;
        if ((char)v88 < 0) {
          operator delete(v87[0]);
        }
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v89.__r_.__value_.__l.__data_);
        }
        CFRelease(v21);
        CFRelease(v19);
        goto LABEL_42;
      }
    }
    else
    {
      unint64_t v10 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioChannelLayout buf = 136315394;
      *(void *)&uint8_t buf[4] = "NeuralNet.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 335;
      _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d ModelNetPathBase is provided - retriving base path and relative path of the model.", buf, 0x12u);
    }
    goto LABEL_25;
  }
  CFStringRef v16 = (const __CFString *)CFDictionaryGetValue(theDict, @"ModelNetPath");
  CFStringRef v17 = v16;
  if (!v16)
  {
    CFStringRef v84 = 0;
    v89.__r_.__value_.__r.__words[0] = 0;
    uint64_t v85 = *(NSObject ***)(a2 + 16);
    if (v85) {
      CFStringRef v84 = *v85;
    }
    if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioChannelLayout buf = 136315650;
      *(void *)&uint8_t buf[4] = "NeuralNet.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 343;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&unsigned char buf[20] = -66741;
      _os_log_impl(&dword_1BB0CE000, v84, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [modelNetPath_ref.get_cf() == nullptr is false]: \"Failed to retrieve ModelNetPath.\"", buf, 0x18u);
    }
    char v86 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v86 = &unk_1F14C8B68;
    v86[2] = -66741;
  }
  CFRetain(v16);
  v89.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
  applesauce::CF::convert_to<std::string,0>(v17, (uint64_t)buf);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)buf;
  *(void *)(a1 + 16) = *(void *)&buf[16];
  CFRelease(v17);
LABEL_42:
  __int16 v30 = *(NSObject ***)(a2 + 16);
  if (!v30)
  {
    int v31 = MEMORY[0x1E4F14500];
    goto LABEL_46;
  }
  int v31 = *v30;
  if (*v30)
  {
LABEL_46:
    if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_52;
    }
    if (*(char *)(a1 + 23) >= 0) {
      __int16 v32 = (void *)a1;
    }
    else {
      __int16 v32 = *(void **)a1;
    }
    *(_DWORD *)AudioChannelLayout buf = 136315650;
    *(void *)&uint8_t buf[4] = "NeuralNet.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 346;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&unsigned char buf[20] = v32;
    uint64_t v13 = "%25s:%-5d Successfully retrieved model path (%s).";
    uint64_t v14 = v31;
    uint32_t v15 = 28;
    goto LABEL_51;
  }
LABEL_52:
  CFStringRef v33 = (const __CFString *)CFDictionaryGetValue(theDict, @"InputName");
  CFStringRef v34 = v33;
  if (!v33)
  {
    uint64_t v72 = 0;
    v89.__r_.__value_.__r.__words[0] = 0;
    int v73 = *(NSObject ***)(a2 + 16);
    if (v73) {
      uint64_t v72 = *v73;
    }
    if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioChannelLayout buf = 136315650;
      *(void *)&uint8_t buf[4] = "NeuralNet.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 353;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&unsigned char buf[20] = -66741;
      _os_log_impl(&dword_1BB0CE000, v72, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [inputName_ref.get_cf() == nullptr is false]: \"Failed to retrieve InputName.\"", buf, 0x18u);
    }
    uint64_t v74 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v74 = &unk_1F14C8B68;
    v74[2] = -66741;
  }
  CFRetain(v33);
  v89.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
  applesauce::CF::convert_to<std::string,0>(v34, (uint64_t)buf);
  float v35 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*v35);
  }
  *(_OWORD *)float v35 = *(_OWORD *)buf;
  *(void *)(a1 + 40) = *(void *)&buf[16];
  float v36 = *(NSObject ***)(a2 + 16);
  if (v36)
  {
    float v37 = *v36;
    if (!*v36) {
      goto LABEL_64;
    }
  }
  else
  {
    float v37 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(a1 + 47) >= 0) {
      uint64_t v38 = a1 + 24;
    }
    else {
      uint64_t v38 = *(void *)(a1 + 24);
    }
    *(_DWORD *)AudioChannelLayout buf = 136315650;
    *(void *)&uint8_t buf[4] = "NeuralNet.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 355;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&unsigned char buf[20] = v38;
    _os_log_impl(&dword_1BB0CE000, v37, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved input name (%s).", buf, 0x1Cu);
  }
LABEL_64:
  CFStringRef v39 = (const __CFString *)CFDictionaryGetValue(theDict, @"EmbeddingName");
  CFStringRef v40 = v39;
  if (v39)
  {
    CFRetain(v39);
    v87[0] = (void *)v40;
    applesauce::CF::convert_to<std::string,0>(v40, (uint64_t)buf);
    goto LABEL_73;
  }
  v87[0] = 0;
  CFNumberRef v41 = *(NSObject ***)(a2 + 16);
  if (!v41)
  {
    uint64_t v42 = MEMORY[0x1E4F14500];
LABEL_70:
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioChannelLayout buf = 136315394;
      *(void *)&uint8_t buf[4] = "NeuralNet.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 362;
      _os_log_impl(&dword_1BB0CE000, v42, OS_LOG_TYPE_DEBUG, "%25s:%-5d Embedding name not found, using empty.\n", buf, 0x12u);
    }
    goto LABEL_72;
  }
  uint64_t v42 = *v41;
  if (*v41) {
    goto LABEL_70;
  }
LABEL_72:
  std::string::basic_string[abi:ne180100]<0>(buf, "");
LABEL_73:
  uint64_t v43 = (void **)(a1 + 72);
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*v43);
  }
  *(_OWORD *)uint64_t v43 = *(_OWORD *)buf;
  *(void *)(a1 + 88) = *(void *)&buf[16];
  unint64_t v44 = *(NSObject ***)(a2 + 16);
  if (v44)
  {
    CFNumberRef v45 = *v44;
    if (!*v44) {
      goto LABEL_84;
    }
  }
  else
  {
    CFNumberRef v45 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(a1 + 95) >= 0) {
      uint64_t v46 = a1 + 72;
    }
    else {
      uint64_t v46 = *(void *)(a1 + 72);
    }
    *(_DWORD *)AudioChannelLayout buf = 136315650;
    *(void *)&uint8_t buf[4] = "NeuralNet.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 366;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&unsigned char buf[20] = v46;
    _os_log_impl(&dword_1BB0CE000, v45, OS_LOG_TYPE_DEBUG, "%25s:%-5d Embedding name set to (%s).", buf, 0x1Cu);
  }
LABEL_84:
  CFStringRef v47 = (const __CFString *)CFDictionaryGetValue(theDict, @"OutputName");
  CFStringRef v48 = v47;
  if (!v47)
  {
    uint64_t v75 = 0;
    v100[0] = 0;
    uint64_t v76 = *(NSObject ***)(a2 + 16);
    if (v76) {
      uint64_t v75 = *v76;
    }
    if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioChannelLayout buf = 136315650;
      *(void *)&uint8_t buf[4] = "NeuralNet.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 370;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&unsigned char buf[20] = -66741;
      _os_log_impl(&dword_1BB0CE000, v75, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [outputName_ref.get_cf() == nullptr is false]: \"Failed to retrieve OutputName.\"", buf, 0x18u);
    }
    uint64_t v77 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v77 = &unk_1F14C8B68;
    v77[2] = -66741;
  }
  CFRetain(v47);
  v100[0] = v48;
  applesauce::CF::convert_to<std::string,0>(v48, (uint64_t)buf);
  uint64_t v49 = (void **)(a1 + 48);
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*v49);
  }
  *(_OWORD *)uint64_t v49 = *(_OWORD *)buf;
  *(void *)(a1 + 64) = *(void *)&buf[16];
  uint64_t v50 = *(NSObject ***)(a2 + 16);
  if (v50)
  {
    long long v51 = *v50;
    if (!*v50) {
      goto LABEL_96;
    }
  }
  else
  {
    long long v51 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(a1 + 71) >= 0) {
      uint64_t v52 = a1 + 48;
    }
    else {
      uint64_t v52 = *(void *)(a1 + 48);
    }
    *(_DWORD *)AudioChannelLayout buf = 136315650;
    *(void *)&uint8_t buf[4] = "NeuralNet.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 372;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&unsigned char buf[20] = v52;
    _os_log_impl(&dword_1BB0CE000, v51, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved output name (%s).", buf, 0x1Cu);
  }
LABEL_96:
  CFStringRef v53 = (const __CFString *)CFDictionaryGetValue(theDict, @"ComputeEngineName");
  CFStringRef v54 = v53;
  if (v53)
  {
    CFRetain(v53);
    CFStringRef v91 = v54;
    applesauce::CF::convert_to<std::string,0>(v54, (uint64_t)buf);
    goto LABEL_105;
  }
  CFStringRef v91 = 0;
  int v55 = *(NSObject ***)(a2 + 16);
  if (!v55)
  {
    CFIndex v56 = MEMORY[0x1E4F14500];
LABEL_102:
    if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioChannelLayout buf = 136315394;
      *(void *)&uint8_t buf[4] = "NeuralNet.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 379;
      _os_log_impl(&dword_1BB0CE000, v56, OS_LOG_TYPE_DEBUG, "%25s:%-5d ComputeEngineName not found, using default.\n", buf, 0x12u);
    }
    goto LABEL_104;
  }
  CFIndex v56 = *v55;
  if (*v55) {
    goto LABEL_102;
  }
LABEL_104:
  std::string::basic_string[abi:ne180100]<0>(buf, "CPU");
LABEL_105:
  CFStringRef v57 = (void **)(a1 + 96);
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*v57);
  }
  *(_OWORD *)CFStringRef v57 = *(_OWORD *)buf;
  *(void *)(a1 + 112) = *(void *)&buf[16];
  long long v58 = *(NSObject ***)(a2 + 16);
  if (v58)
  {
    float v59 = *v58;
    if (!*v58)
    {
      *(_DWORD *)(a1 + 120) = 0;
      std::string v60 = (unsigned int *)(a1 + 120);
      goto LABEL_122;
    }
  }
  else
  {
    float v59 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(a1 + 119) >= 0) {
      uint64_t v61 = a1 + 96;
    }
    else {
      uint64_t v61 = *(void *)(a1 + 96);
    }
    *(_DWORD *)AudioChannelLayout buf = 136315650;
    *(void *)&uint8_t buf[4] = "NeuralNet.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 382;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&unsigned char buf[20] = v61;
    _os_log_impl(&dword_1BB0CE000, v59, OS_LOG_TYPE_DEBUG, "%25s:%-5d Compute engine name set to (%s).", buf, 0x1Cu);
    long long v58 = *(NSObject ***)(a2 + 16);
  }
  *(_DWORD *)(a1 + 120) = 0;
  std::string v60 = (unsigned int *)(a1 + 120);
  if (v58)
  {
    int v62 = *v58;
    if (!*v58) {
      goto LABEL_122;
    }
  }
  else
  {
    int v62 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioChannelLayout buf = 136315394;
    *(void *)&uint8_t buf[4] = "NeuralNet.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 387;
    _os_log_impl(&dword_1BB0CE000, v62, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading StreamingMode.", buf, 0x12u);
  }
LABEL_122:
  int v63 = DictionaryBlobReader::ReadScalarFromDictionary<unsigned int>(&v96, theDict, @"StreamingMode", v60);
  uint64_t v64 = *(NSObject ***)(a2 + 16);
  if (!v63) {
    goto LABEL_130;
  }
  if (!v64)
  {
    uint64_t v65 = MEMORY[0x1E4F14500];
LABEL_127:
    if (os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioChannelLayout buf = 136315394;
      *(void *)&uint8_t buf[4] = "NeuralNet.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 391;
      _os_log_impl(&dword_1BB0CE000, v65, OS_LOG_TYPE_DEBUG, "%25s:%-5d StreamingMode not found, using default.", buf, 0x12u);
      uint64_t v64 = *(NSObject ***)(a2 + 16);
    }
    goto LABEL_129;
  }
  uint64_t v65 = *v64;
  if (*v64) {
    goto LABEL_127;
  }
LABEL_129:
  unsigned int *v60 = 0;
LABEL_130:
  if (v64)
  {
    __int16 v66 = *v64;
    if (!*v64) {
      goto LABEL_136;
    }
  }
  else
  {
    __int16 v66 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v66, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v67 = *v60;
    *(_DWORD *)AudioChannelLayout buf = 136315650;
    *(void *)&uint8_t buf[4] = "NeuralNet.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 394;
    *(_WORD *)&unsigned char buf[18] = 1024;
    *(_DWORD *)&unsigned char buf[20] = v67;
    _os_log_impl(&dword_1BB0CE000, v66, OS_LOG_TYPE_DEBUG, "%25s:%-5d StreamingMode set to (%d).", buf, 0x18u);
  }
LABEL_136:
  unsigned int v68 = *v60;
  if (v68 >= 3)
  {
    int v69 = *(NSObject ***)(a2 + 16);
    if (v69) {
      __int16 v70 = *v69;
    }
    else {
      __int16 v70 = 0;
    }
    if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioChannelLayout buf = 136316162;
      *(void *)&uint8_t buf[4] = "NeuralNet.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 397;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&unsigned char buf[20] = -66743;
      *(_WORD *)&unsigned char buf[24] = 1024;
      *(_DWORD *)&buf[26] = v68;
      __int16 v98 = 1024;
      int v99 = 3;
      _os_log_impl(&dword_1BB0CE000, v70, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [modelPlistInfo.streamingMode_int >= static_cast<UInt32>(StreamingMode::NumModes) is false]: \"StreamingMode (%u) is out of range, a value smaller than (%d) is expected.\"", buf, 0x24u);
    }
    int v71 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v71 = &unk_1F14C8B68;
    v71[2] = -66743;
  }
  if (v54) {
    CFRelease(v54);
  }
  CFRelease(v48);
  if (v40) {
    CFRelease(v40);
  }
  CFRelease(v34);
  if (v95) {
    CFRelease(v95);
  }
}

void sub_1BB4484BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void std::make_unique[abi:ne180100]<NeuralNetEspresso,std::string &,std::string &,std::string &,std::string &,std::string &,StreamingMode,__CFDictionary const* const&,CALog::Scope const*&>()
{
}

void sub_1BB44A62C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (*(char *)(v56 + 119) < 0) {
    operator delete(*v58);
  }
  if (*(char *)(v56 + 95) < 0) {
    operator delete(*v57);
  }
  if (*(char *)(v56 + 71) < 0) {
    operator delete(*a16);
  }
  *(void *)uint64_t v56 = &unk_1F14B7800;
  float v59 = *(std::__shared_weak_count **)(v56 + 32);
  if (v59) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v59);
  }
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  if (a49 < 0) {
    operator delete(a44);
  }
  if (a56 < 0) {
    operator delete(a51);
  }
  MEMORY[0x1C185D370](v56, 0x10F3C4046D81F07);
  JUMPOUT(0x1BB44AB5CLL);
}

void sub_1BB44A638()
{
}

void sub_1BB44A640()
{
}

void sub_1BB44A648()
{
}

void sub_1BB44A650()
{
}

void sub_1BB44A658()
{
}

void sub_1BB44A660()
{
}

void sub_1BB44A668()
{
}

void sub_1BB44A670()
{
}

void sub_1BB44A680()
{
}

void sub_1BB44A690()
{
}

void sub_1BB44A6A4()
{
}

void sub_1BB44A6B0()
{
}

void sub_1BB44A6C0()
{
}

void sub_1BB44A6D4()
{
}

void sub_1BB44A724(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    audiodsp::espresso::v1::plan::plan(std::shared_ptr<void>,int)::{lambda(void *)#1}::operator()();
    __cxa_rethrow();
  }
  JUMPOUT(0x1BB44AB5CLL);
}

void sub_1BB44A744()
{
  __cxa_end_catch();
  if (STACK[0x308]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x308]);
  }
  if (STACK[0x2F8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x2F8]);
  }
  if ((v1 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v0);
  }
  JUMPOUT(0x1BB44A9FCLL);
}

void sub_1BB44A760(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    espresso_context_destroy();
    __cxa_rethrow();
  }
  JUMPOUT(0x1BB44AB5CLL);
}

void sub_1BB44A780()
{
}

void sub_1BB44A790()
{
}

void sub_1BB44A7EC()
{
}

void sub_1BB44A804()
{
  __cxa_free_exception(v0);
  JUMPOUT(0x1BB44A958);
}

void sub_1BB44A814()
{
}

void sub_1BB44A828()
{
}

void sub_1BB44A838(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10, CFTypeRef cf, uint64_t a12, void **a13, uint64_t a14, void **a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  CFRelease(cf);
  if (STACK[0x2C0]) {
    CFRelease((CFTypeRef)STACK[0x2C0]);
  }
  if (STACK[0x2C8]) {
    CFRelease((CFTypeRef)STACK[0x2C8]);
  }
  long long v58 = *v57;
  if (*v57)
  {
    *(void *)(v56 + 864) = v58;
    operator delete(v58);
  }
  float v59 = *(void **)(v56 + 832);
  if (v59)
  {
    *(void *)(v56 + 840) = v59;
    operator delete(v59);
  }
  STACK[0x2F0] = a21;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2F0]);
  std::string v60 = *a13;
  if (*a13)
  {
    *(void *)(v56 + 792) = v60;
    operator delete(v60);
  }
  if (*(unsigned char *)(v56 + 248))
  {
    uint64_t v61 = *(std::__shared_weak_count **)(v56 + 240);
    if (v61) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v61);
    }
  }
  if (*(unsigned char *)(v56 + 208)) {
    vp::Domain_Pair<std::shared_ptr<vp::vx::components::Audio_Data_Analysis::Node_Decorator_Factory>>::~Domain_Pair(a14);
  }
  if (*(unsigned char *)(v56 + 168))
  {
    int v62 = *(std::__shared_weak_count **)(v56 + 160);
    if (v62) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v62);
    }
  }
  if (*(char *)(v56 + 143) < 0) {
    operator delete(*a9);
  }
  if (*(char *)(v56 + 119) < 0) {
    operator delete(*a10);
  }
  if (*(char *)(v56 + 95) < 0) {
    operator delete(*a15);
  }
  if (*(char *)(v56 + 71) < 0) {
    operator delete(*a16);
  }
  *(void *)uint64_t v56 = &unk_1F14B7800;
  int v63 = *(std::__shared_weak_count **)(v56 + 32);
  if (v63) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v63);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  if (a49 < 0) {
    operator delete(a44);
  }
  if (a56 < 0) {
    operator delete(a51);
  }
  MEMORY[0x1C185D370](v56, 0x10F3C4046D81F07);
  JUMPOUT(0x1BB44AB5CLL);
}

void sub_1BB44AB54(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ModelPlistInfo::~ModelPlistInfo(void **this)
{
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void *FullyConnectedLayerBNNS<signed char>::~FullyConnectedLayerBNNS(void *a1)
{
  uint64_t v2 = (void *)a1[117];
  if (v2)
  {
    a1[118] = v2;
    operator delete(v2);
  }
  CFStringRef v3 = (void *)a1[114];
  if (v3)
  {
    a1[115] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[111];
  if (v4)
  {
    a1[112] = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)a1[108];
  if (v5)
  {
    a1[109] = v5;
    operator delete(v5);
  }
  unint64_t v6 = (void *)a1[105];
  if (v6)
  {
    a1[106] = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)a1[102];
  if (v7)
  {
    a1[103] = v7;
    operator delete(v7);
  }
  BOOL v8 = (void *)a1[99];
  if (v8)
  {
    a1[100] = v8;
    operator delete(v8);
  }
  return a1;
}

uint64_t FullyConnectedLayerBNNS<signed char>::FullyConnectedLayerBNNS(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 792) = 0;
  *(_OWORD *)(a1 + 800) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 792), *(const void **)(a2 + 792), *(void *)(a2 + 800), (uint64_t)(*(void *)(a2 + 800) - *(void *)(a2 + 792)) >> 2);
  *(void *)(a1 + 832) = 0;
  *(_OWORD *)(a1 + 816) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 816), *(const void **)(a2 + 816), *(void *)(a2 + 824), (uint64_t)(*(void *)(a2 + 824) - *(void *)(a2 + 816)) >> 2);
  *(void *)(a1 + 856) = 0;
  *(_OWORD *)(a1 + 840) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 840), *(const void **)(a2 + 840), *(void *)(a2 + 848), (uint64_t)(*(void *)(a2 + 848) - *(void *)(a2 + 840)) >> 2);
  *(void *)(a1 + 880) = 0;
  *(_OWORD *)(a1 + 864) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 864), *(const void **)(a2 + 864), *(void *)(a2 + 872), (uint64_t)(*(void *)(a2 + 872) - *(void *)(a2 + 864)) >> 2);
  *(void *)(a1 + 904) = 0;
  *(_OWORD *)(a1 + 888) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 888), *(const void **)(a2 + 888), *(void *)(a2 + 896), (uint64_t)(*(void *)(a2 + 896) - *(void *)(a2 + 888)) >> 2);
  *(void *)(a1 + 928) = 0;
  *(_OWORD *)(a1 + 912) = 0u;
  std::vector<signed char>::__init_with_size[abi:ne180100]<signed char *,signed char *>((void *)(a1 + 912), *(const void **)(a2 + 912), *(void *)(a2 + 920), *(void *)(a2 + 920) - *(void *)(a2 + 912));
  *(void *)(a1 + 952) = 0;
  *(_OWORD *)(a1 + 936) = 0u;
  std::vector<signed char>::__init_with_size[abi:ne180100]<signed char *,signed char *>((void *)(a1 + 936), *(const void **)(a2 + 936), *(void *)(a2 + 944), *(void *)(a2 + 944) - *(void *)(a2 + 936));
  *(void *)(a1 + 960) = *(void *)(a2 + 960);
  return a1;
}

void sub_1BB44ADD0(_Unwind_Exception *exception_object)
{
  uint64_t v9 = *v7;
  if (*v7)
  {
    v1[115] = v9;
    operator delete(v9);
  }
  unint64_t v10 = *v6;
  if (*v6)
  {
    v1[112] = v10;
    operator delete(v10);
  }
  uint64_t v11 = *v5;
  if (*v5)
  {
    v1[109] = v11;
    operator delete(v11);
  }
  uint64_t v12 = *v4;
  if (*v4)
  {
    v1[106] = v12;
    operator delete(v12);
  }
  uint64_t v13 = *v3;
  if (*v3)
  {
    v1[103] = v13;
    operator delete(v13);
  }
  uint64_t v14 = *v2;
  if (*v2)
  {
    v1[100] = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<signed char>::__init_with_size[abi:ne180100]<signed char *,signed char *>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    unint64_t v6 = result;
    float result = std::vector<signed char>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      float result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BB44AEC4(_Unwind_Exception *exception_object)
{
  CFStringRef v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<signed char>::__vallocate[abi:ne180100](void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  }
  float result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<FullyConnectedLayerBNNS<signed char>>>(unint64_t a1)
{
  if (a1 >= 0x43B3D5AF9A7240) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(968 * a1);
}

uint64_t FullyConnectedLayerBNNS<short>::FullyConnectedLayerBNNS(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 792) = 0;
  *(_OWORD *)(a1 + 800) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 792), *(const void **)(a2 + 792), *(void *)(a2 + 800), (uint64_t)(*(void *)(a2 + 800) - *(void *)(a2 + 792)) >> 2);
  *(void *)(a1 + 832) = 0;
  *(_OWORD *)(a1 + 816) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 816), *(const void **)(a2 + 816), *(void *)(a2 + 824), (uint64_t)(*(void *)(a2 + 824) - *(void *)(a2 + 816)) >> 2);
  *(void *)(a1 + 856) = 0;
  *(_OWORD *)(a1 + 840) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 840), *(const void **)(a2 + 840), *(void *)(a2 + 848), (uint64_t)(*(void *)(a2 + 848) - *(void *)(a2 + 840)) >> 2);
  *(void *)(a1 + 880) = 0;
  *(_OWORD *)(a1 + 864) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 864), *(const void **)(a2 + 864), *(void *)(a2 + 872), (uint64_t)(*(void *)(a2 + 872) - *(void *)(a2 + 864)) >> 2);
  *(void *)(a1 + 904) = 0;
  *(_OWORD *)(a1 + 888) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 888), *(const void **)(a2 + 888), *(void *)(a2 + 896), (uint64_t)(*(void *)(a2 + 896) - *(void *)(a2 + 888)) >> 2);
  *(void *)(a1 + 928) = 0;
  *(_OWORD *)(a1 + 912) = 0u;
  std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>((void *)(a1 + 912), *(const void **)(a2 + 912), *(void *)(a2 + 920), (uint64_t)(*(void *)(a2 + 920) - *(void *)(a2 + 912)) >> 1);
  *(void *)(a1 + 952) = 0;
  *(_OWORD *)(a1 + 936) = 0u;
  std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>((void *)(a1 + 936), *(const void **)(a2 + 936), *(void *)(a2 + 944), (uint64_t)(*(void *)(a2 + 944) - *(void *)(a2 + 936)) >> 1);
  *(void *)(a1 + 960) = *(void *)(a2 + 960);
  return a1;
}

void sub_1BB44B0D0(_Unwind_Exception *exception_object)
{
  uint64_t v9 = *v7;
  if (*v7)
  {
    v1[115] = v9;
    operator delete(v9);
  }
  unint64_t v10 = *v6;
  if (*v6)
  {
    v1[112] = v10;
    operator delete(v10);
  }
  uint64_t v11 = *v5;
  if (*v5)
  {
    v1[109] = v11;
    operator delete(v11);
  }
  uint64_t v12 = *v4;
  if (*v4)
  {
    v1[106] = v12;
    operator delete(v12);
  }
  uint64_t v13 = *v3;
  if (*v3)
  {
    v1[103] = v13;
    operator delete(v13);
  }
  uint64_t v14 = *v2;
  if (*v2)
  {
    v1[100] = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(void *result, const void *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    float result = std::vector<short>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      float result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BB44B1C4(_Unwind_Exception *exception_object)
{
  CFStringRef v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<short>::__vallocate[abi:ne180100](void *a1, uint64_t a2)
{
  if (a2 < 0) {
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  }
  float result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<short>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<short>>(uint64_t a1)
{
  if (a1 < 0) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(2 * a1);
}

uint64_t FullyConnectedLayerBNNS<int>::FullyConnectedLayerBNNS(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 792) = 0;
  *(_OWORD *)(a1 + 800) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 792), *(const void **)(a2 + 792), *(void *)(a2 + 800), (uint64_t)(*(void *)(a2 + 800) - *(void *)(a2 + 792)) >> 2);
  *(void *)(a1 + 832) = 0;
  *(_OWORD *)(a1 + 816) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 816), *(const void **)(a2 + 816), *(void *)(a2 + 824), (uint64_t)(*(void *)(a2 + 824) - *(void *)(a2 + 816)) >> 2);
  *(void *)(a1 + 856) = 0;
  *(_OWORD *)(a1 + 840) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 840), *(const void **)(a2 + 840), *(void *)(a2 + 848), (uint64_t)(*(void *)(a2 + 848) - *(void *)(a2 + 840)) >> 2);
  *(void *)(a1 + 880) = 0;
  *(_OWORD *)(a1 + 864) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 864), *(const void **)(a2 + 864), *(void *)(a2 + 872), (uint64_t)(*(void *)(a2 + 872) - *(void *)(a2 + 864)) >> 2);
  *(void *)(a1 + 904) = 0;
  *(_OWORD *)(a1 + 888) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 888), *(const void **)(a2 + 888), *(void *)(a2 + 896), (uint64_t)(*(void *)(a2 + 896) - *(void *)(a2 + 888)) >> 2);
  *(void *)(a1 + 928) = 0;
  *(_OWORD *)(a1 + 912) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 912), *(const void **)(a2 + 912), *(void *)(a2 + 920), (uint64_t)(*(void *)(a2 + 920) - *(void *)(a2 + 912)) >> 2);
  *(void *)(a1 + 952) = 0;
  *(_OWORD *)(a1 + 936) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 936), *(const void **)(a2 + 936), *(void *)(a2 + 944), (uint64_t)(*(void *)(a2 + 944) - *(void *)(a2 + 936)) >> 2);
  *(void *)(a1 + 960) = *(void *)(a2 + 960);
  return a1;
}

void sub_1BB44B3B4(_Unwind_Exception *exception_object)
{
  uint64_t v9 = *v7;
  if (*v7)
  {
    v1[115] = v9;
    operator delete(v9);
  }
  unint64_t v10 = *v6;
  if (*v6)
  {
    v1[112] = v10;
    operator delete(v10);
  }
  uint64_t v11 = *v5;
  if (*v5)
  {
    v1[109] = v11;
    operator delete(v11);
  }
  uint64_t v12 = *v4;
  if (*v4)
  {
    v1[106] = v12;
    operator delete(v12);
  }
  uint64_t v13 = *v3;
  if (*v3)
  {
    v1[103] = v13;
    operator delete(v13);
  }
  uint64_t v14 = *v2;
  if (*v2)
  {
    v1[100] = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    float result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      float result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BB44B4A8(_Unwind_Exception *exception_object)
{
  CFStringRef v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<int>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  }
  float result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(unint64_t a1)
{
  if (a1 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a1);
}

uint64_t FullyConnectedLayerBNNS<float>::FullyConnectedLayerBNNS(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 792) = 0;
  *(_OWORD *)(a1 + 800) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 792), *(const void **)(a2 + 792), *(void *)(a2 + 800), (uint64_t)(*(void *)(a2 + 800) - *(void *)(a2 + 792)) >> 2);
  *(void *)(a1 + 832) = 0;
  *(_OWORD *)(a1 + 816) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 816), *(const void **)(a2 + 816), *(void *)(a2 + 824), (uint64_t)(*(void *)(a2 + 824) - *(void *)(a2 + 816)) >> 2);
  *(void *)(a1 + 856) = 0;
  *(_OWORD *)(a1 + 840) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 840), *(const void **)(a2 + 840), *(void *)(a2 + 848), (uint64_t)(*(void *)(a2 + 848) - *(void *)(a2 + 840)) >> 2);
  *(void *)(a1 + 880) = 0;
  *(_OWORD *)(a1 + 864) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 864), *(const void **)(a2 + 864), *(void *)(a2 + 872), (uint64_t)(*(void *)(a2 + 872) - *(void *)(a2 + 864)) >> 2);
  *(void *)(a1 + 904) = 0;
  *(_OWORD *)(a1 + 888) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 888), *(const void **)(a2 + 888), *(void *)(a2 + 896), (uint64_t)(*(void *)(a2 + 896) - *(void *)(a2 + 888)) >> 2);
  *(void *)(a1 + 928) = 0;
  *(_OWORD *)(a1 + 912) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 912), *(const void **)(a2 + 912), *(void *)(a2 + 920), (uint64_t)(*(void *)(a2 + 920) - *(void *)(a2 + 912)) >> 2);
  *(void *)(a1 + 952) = 0;
  *(_OWORD *)(a1 + 936) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 936), *(const void **)(a2 + 936), *(void *)(a2 + 944), (uint64_t)(*(void *)(a2 + 944) - *(void *)(a2 + 936)) >> 2);
  *(void *)(a1 + 960) = *(void *)(a2 + 960);
  return a1;
}

void sub_1BB44B6A0(_Unwind_Exception *exception_object)
{
  uint64_t v9 = *v7;
  if (*v7)
  {
    v1[115] = v9;
    operator delete(v9);
  }
  unint64_t v10 = *v6;
  if (*v6)
  {
    v1[112] = v10;
    operator delete(v10);
  }
  uint64_t v11 = *v5;
  if (*v5)
  {
    v1[109] = v11;
    operator delete(v11);
  }
  uint64_t v12 = *v4;
  if (*v4)
  {
    v1[106] = v12;
    operator delete(v12);
  }
  uint64_t v13 = *v3;
  if (*v3)
  {
    v1[103] = v13;
    operator delete(v13);
  }
  uint64_t v14 = *v2;
  if (*v2)
  {
    v1[100] = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

void NeuralNet::~NeuralNet(NeuralNet *this)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (const void *)*((void *)this + 3);
  if (!v2) {
    goto LABEL_17;
  }
  CFRetain(*((CFTypeRef *)this + 3));
  uint64_t v3 = *(void *)this;
  *(void *)this = 0;
  *(void *)AudioChannelLayout buf = v3;
  uint64_t v4 = [[NeuralNetCache alloc] initWithImpl:buf];
  uint64_t v5 = *(void *)buf;
  *(void *)AudioChannelLayout buf = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  unint64_t v6 = +[NeuralNetCache sharedCache];
  [v6 setObject:v4 forKey:v2];

  CFRelease(v2);
  uint64_t v7 = (NSObject **)*((void *)this + 2);
  if (!v7)
  {
    size_t v8 = MEMORY[0x1E4F14500];
LABEL_8:
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      CFStringRef v9 = (const __CFString *)*((void *)this + 3);
      if (!v9)
      {
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      applesauce::CF::convert_to<std::string,0>(v9, (uint64_t)__p);
      if (v15 >= 0) {
        unint64_t v10 = __p;
      }
      else {
        unint64_t v10 = (void **)__p[0];
      }
      *(_DWORD *)AudioChannelLayout buf = 136315650;
      *(void *)&uint8_t buf[4] = "NeuralNet.cpp";
      __int16 v17 = 1024;
      int v18 = 269;
      __int16 v19 = 2080;
      CFStringRef v20 = v10;
      _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_INFO, "%25s:%-5d Saved implementation to cache for model %s.", buf, 0x1Cu);
      if (v15 < 0) {
        operator delete(__p[0]);
      }
    }
    goto LABEL_15;
  }
  size_t v8 = *v7;
  if (*v7) {
    goto LABEL_8;
  }
LABEL_15:
  uint64_t v11 = (const void *)*((void *)this + 3);
  if (v11) {
    CFRelease(v11);
  }
LABEL_17:
  uint64_t v12 = *(void *)this;
  *(void *)this = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
}

void sub_1BB44B954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a2)
  {
    __cxa_free_exception(v13);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUMicSelectorV2::SetBypassEffect(uint64_t this, char a2)
{
  *(unsigned char *)(this + 528) = a2;
  return this;
}

uint64_t AUMicSelectorV2::ShouldBypassEffect(AUMicSelectorV2 *this)
{
  return *((unsigned __int8 *)this + 528);
}

BOOL AUMicSelectorV2::ValidFormat(AUMicSelectorV2 *this, const AudioStreamBasicDescription *a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  if (ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2)) {
    BOOL v5 = (a4->mFormatFlags & 0x20) != 0 || a4->mChannelsPerFrame == 1;
  }
  else {
    BOOL v5 = 0;
  }
  return a4->mChannelsPerFrame == 1 && v5;
}

uint64_t AUMicSelectorV2::SupportedNumChannels(AUMicSelectorV2 *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUMicSelectorV2::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 1;
}

BOOL AUMicSelectorV2::StreamFormatWritable(AUMicSelectorV2 *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUMicSelectorV2::SupportsTail(AUMicSelectorV2 *this)
{
  return 1;
}

double AUMicSelectorV2::GetTailTime(AUMicSelectorV2 *this)
{
  return 0.0;
}

double AUMicSelectorV2::GetLatency(AUMicSelectorV2 *this)
{
  return 0.0;
}

uint64_t AUMicSelectorV2::GetParameterValueStrings(AUMicSelectorV2 *this, int a2, int a3, const __CFArray **a4)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    if (!a4) {
      return 0;
    }
    if (!a3)
    {
      v7[0] = xmmword_1E623D880;
      v7[1] = off_1E623D890;
      size_t v8 = @"BeamMics";
      CFArrayRef v6 = CFArrayCreate(0, (const void **)v7, 5, 0);
      uint64_t result = 0;
      *a4 = v6;
      return result;
    }
  }
  return 4294956417;
}

uint64_t AUMicSelectorV2::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t v3 = ausdk::AUBase::RestoreState(this, a2);
  if (!v3)
  {
    AUMicSelectorV2::CalculateTimeConstants((AUMicSelectorV2 *)this);
    AUMicSelectorV2::SetNoiseFloorDetectorLength((AUMicSelectorV2 *)this);
  }
  return v3;
}

void AUMicSelectorV2::CalculateTimeConstants(AUMicSelectorV2 *this)
{
  uint64_t v2 = (AUMicSelectorV2 *)((char *)this + 32);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMicSelectorV2 *)((char *)this + 32), 0);
  double Parameter = ausdk::AUElement::GetParameter(Element, 1u);
  float v5 = -1.0
     / (*(double *)(ausdk::AUScope::SafeGetElement((AUMicSelectorV2 *)((char *)this + 128), 0) + 80)
      * Parameter
      / (float)*((unsigned int *)this + 84));
  float v6 = expf(v5);
  *((float *)this + 292) = v6;
  *((float *)this + 293) = v6;
  uint64_t v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  double v8 = ausdk::AUElement::GetParameter(v7, 2u);
  float v9 = -1.0
     / (*(double *)(ausdk::AUScope::SafeGetElement((AUMicSelectorV2 *)((char *)this + 128), 0) + 80)
      * v8
      / (float)*((unsigned int *)this + 84));
  *((float *)this + 295) = expf(v9);
  unint64_t v10 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  double v11 = ausdk::AUElement::GetParameter(v10, 3u);
  float v12 = -1.0
      / (*(double *)(ausdk::AUScope::SafeGetElement((AUMicSelectorV2 *)((char *)this + 128), 0) + 80)
       * v11
       / (float)*((unsigned int *)this + 84));
  *((float *)this + 296) = expf(v12);
  uint64_t v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  double v14 = ausdk::AUElement::GetParameter(v13, 0x35u);
  float v15 = -1.0
      / (*(double *)(ausdk::AUScope::SafeGetElement((AUMicSelectorV2 *)((char *)this + 128), 0) + 80)
       * v14
       / (float)*((unsigned int *)this + 84));
  *((float *)this + 294) = expf(v15);
}

void AUMicSelectorV2::SetNoiseFloorDetectorLength(AUMicSelectorV2 *this)
{
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMicSelectorV2 *)((char *)this + 32), 0);
  float Parameter = ausdk::AUElement::GetParameter(Element, 0x12u);
  if (Parameter > 10.0) {
    float Parameter = 10.0;
  }
  uint64_t v4 = 0;
  float v5 = *(double *)(ausdk::AUScope::SafeGetElement((AUMicSelectorV2 *)((char *)this + 128), 0) + 80)
     * Parameter
     / (float)*((unsigned int *)this + 84);
  unsigned int v6 = vcvtps_u32_f32(v5);
  do
  {
    AUMicSelectorV2::NoiseFloorDetectorV2::SetDetectorLength((AUMicSelectorV2 *)((char *)this + v4 + 1192), v6);
    v4 += 24;
  }
  while (v4 != 72);

  AUMicSelectorV2::NoiseFloorDetectorV2::SetDetectorLength((AUMicSelectorV2 *)((char *)this + 1264), v6);
}

void AUMicSelectorV2::NoiseFloorDetectorV2::SetDetectorLength(AUMicSelectorV2::NoiseFloorDetectorV2 *this, unsigned int a2)
{
  if (a2 <= 1) {
    int v3 = 1;
  }
  else {
    int v3 = a2;
  }
  uint64_t v4 = *((unsigned int *)this + 3);
  if (*((_DWORD *)this + 4) >= a2) {
    unsigned int v5 = v3;
  }
  else {
    unsigned int v5 = *((_DWORD *)this + 4);
  }
  if (v5 <= v4)
  {
    if (*((_DWORD *)this + 2) > v5) {
      *((_DWORD *)this + 2) = 0;
    }
  }
  else
  {
    vDSP_vfill(*(const float **)this, (float *)(*(void *)this + 4 * v4), 1, v5 - v4);
  }
  *((_DWORD *)this + 3) = v5;
}

uint64_t AUMicSelectorV2::GetParameterInfo(AUMicSelectorV2 *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  buffer->AudioUnitParameterOptions flags = 0x40000000;
  buffer->unitName = 0;
  if (a2) {
    return 4294956418;
  }
  switch(a3)
  {
    case 0:
      buffer->cfNameString = @"Auto/Manual";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"Auto/Manual", buffer->name, 52, 0x8000100u);
      unint64_t v8 = 0x4080000000000000;
      AudioUnitParameterOptions v7 = buffer->flags | 0x80000000;
      goto LABEL_39;
    case 1:
      buffer->cfNameString = @"Signal time constant sec";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"Signal time constant sec", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 2;
      AudioUnitParameterOptions v7 = buffer->flags | 0x81100000;
      unint64_t v8 = 0x400000003C23D70ALL;
      AudioUnitParameterValue v9 = 0.25;
      goto LABEL_29;
    case 2:
      buffer->cfNameString = @"Active time constant sec";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"Active time constant sec", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 2;
      AudioUnitParameterOptions v7 = buffer->flags | 0x81100000;
      unint64_t v8 = 0x412000003DCCCCCDLL;
      goto LABEL_70;
    case 3:
      buffer->cfNameString = @"Inactive time constant sec";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"Inactive time constant sec", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 2;
      AudioUnitParameterOptions v7 = buffer->flags | 0x81100000;
      unint64_t v8 = 0x412000003DCCCCCDLL;
      AudioUnitParameterValue v9 = 2.0;
      goto LABEL_29;
    case 4:
      buffer->cfNameString = @"HF min level diff thd";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"HF min level diff thd", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      AudioUnitParameterOptions v7 = buffer->flags | 0x80100000;
      unint64_t v8 = 0x41F0000000000000;
      AudioUnitParameterValue v9 = 6.0;
      goto LABEL_68;
    case 5:
      buffer->cfNameString = @"HF level diff ceiling";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"HF level diff ceiling", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      AudioUnitParameterOptions v7 = buffer->flags | 0x80100000;
      unint64_t v8 = 0x41F0000000000000;
      AudioUnitParameterValue v9 = 15.0;
      goto LABEL_68;
    case 6:
      buffer->cfNameString = @"HF normal level diff";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"HF normal level diff", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      AudioUnitParameterOptions v7 = buffer->flags | 0x80100000;
      unint64_t v8 = 0x41A0000000000000;
      goto LABEL_24;
    case 7:
      buffer->cfNameString = @"Deprecated";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"Deprecated", buffer->name, 52, 0x8000100u);
      AudioUnitParameterUnit v6 = kAudioUnitParameterUnit_Generic;
      buffer->clumpID = 3;
      AudioUnitParameterOptions v7 = buffer->flags | 0x84100000;
      unint64_t v8 = 0x41700000C1700000;
      goto LABEL_80;
    case 8:
      buffer->cfNameString = @"LF min level diff thd";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"LF min level diff thd", buffer->name, 52, 0x8000100u);
      UInt32 v10 = 4;
      goto LABEL_20;
    case 9:
      buffer->cfNameString = @"LF level diff ceiling";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"LF level diff ceiling", buffer->name, 52, 0x8000100u);
      UInt32 v11 = 4;
      goto LABEL_22;
    case 10:
      buffer->cfNameString = @"LF normal level diff";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"LF normal level diff", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 4;
      AudioUnitParameterOptions v7 = buffer->flags | 0x80100000;
      unint64_t v8 = 0x41A0000000000000;
      AudioUnitParameterValue v9 = 5.0;
      goto LABEL_68;
    case 11:
      buffer->cfNameString = @"Deprecated";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"Deprecated", buffer->name, 52, 0x8000100u);
      AudioUnitParameterUnit v6 = kAudioUnitParameterUnit_Generic;
      buffer->clumpID = 4;
      AudioUnitParameterOptions flags = buffer->flags;
      int v13 = -2079326208;
      goto LABEL_54;
    case 12:
      buffer->cfNameString = @"Echo min level diff thd";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"Echo min level diff thd", buffer->name, 52, 0x8000100u);
      UInt32 v10 = 5;
LABEL_20:
      buffer->clumpID = v10;
      AudioUnitParameterOptions v7 = buffer->flags | 0x80100000;
      unint64_t v8 = 0x41F0000000000000;
      AudioUnitParameterValue v9 = 7.0;
      goto LABEL_68;
    case 13:
      buffer->cfNameString = @"Echo level diff ceiling";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"Echo level diff ceiling", buffer->name, 52, 0x8000100u);
      UInt32 v11 = 5;
LABEL_22:
      buffer->clumpID = v11;
      AudioUnitParameterOptions v14 = buffer->flags;
      int v15 = -2146435072;
      goto LABEL_32;
    case 14:
      buffer->cfNameString = @"Echo normal level diff";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"Echo normal level diff", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 5;
      AudioUnitParameterOptions v7 = buffer->flags | 0x80100000;
      unint64_t v8 = 0x4120000000000000;
LABEL_24:
      AudioUnitParameterValue v9 = 4.0;
      goto LABEL_68;
    case 15:
      buffer->cfNameString = @"Echo high gain thd";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"Echo high gain thd", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 5;
      AudioUnitParameterOptions v7 = buffer->flags | 0x80100000;
      unint64_t v8 = 0x41200000C1F00000;
      AudioUnitParameterValue v9 = -10.0;
      goto LABEL_68;
    case 16:
      buffer->cfNameString = @"Echo hardware bias";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"Echo hardware bias", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 5;
      AudioUnitParameterOptions v16 = buffer->flags;
      int v17 = -2146435072;
      goto LABEL_51;
    case 17:
      buffer->cfNameString = @"Normal X-corr coeff lim";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"Normal X-corr coeff lim", buffer->name, 52, 0x8000100u);
      AudioUnitParameterUnit v6 = kAudioUnitParameterUnit_Generic;
      buffer->clumpID = 7;
      AudioUnitParameterOptions v7 = buffer->flags | 0x80100000;
      unint64_t v8 = 0x3F800000BF800000;
      AudioUnitParameterValue v9 = 0.95;
      goto LABEL_84;
    case 18:
      buffer->cfNameString = @"Noise floor det length sec";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"Noise floor det length sec", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 6;
      AudioUnitParameterOptions v7 = buffer->flags | 0x80100000;
      unint64_t v8 = 0x412000003DCCCCCDLL;
      AudioUnitParameterValue v9 = 8.0;
LABEL_29:
      AudioUnitParameterUnit v6 = kAudioUnitParameterUnit_Seconds;
      goto LABEL_84;
    case 19:
      buffer->cfNameString = @"Noise floor thd mic";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"Noise floor thd mic", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 6;
      AudioUnitParameterOptions v7 = buffer->flags | 0x80100000;
      unint64_t v8 = 0x41F0000000000000;
      AudioUnitParameterValue v9 = 8.0;
      goto LABEL_68;
    case 20:
      buffer->cfNameString = @"Noise floor thd echo";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"Noise floor thd echo", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 6;
      AudioUnitParameterOptions v14 = buffer->flags;
      int v15 = -2129657856;
LABEL_32:
      AudioUnitParameterOptions v7 = v14 | v15;
      unint64_t v8 = 0x41F0000000000000;
      AudioUnitParameterValue v9 = 20.0;
      goto LABEL_68;
    case 21:
      buffer->cfNameString = @"Switch to front thd";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"Switch to front thd", buffer->name, 52, 0x8000100u);
      AudioUnitParameterUnit v6 = kAudioUnitParameterUnit_Generic;
      buffer->clumpID = 7;
      AudioUnitParameterOptions v7 = buffer->flags | 0x80100000;
      unint64_t v8 = 0x4120000000000000;
      AudioUnitParameterValue v9 = 3.0;
      goto LABEL_84;
    case 22:
      CFStringRef v18 = @"Switch to back thd";
      goto LABEL_36;
    case 23:
      CFStringRef v18 = @"Return to normal thd";
LABEL_36:
      buffer->cfNameString = v18;
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(v18, buffer->name, 52, 0x8000100u);
      AudioUnitParameterUnit v6 = kAudioUnitParameterUnit_Generic;
      buffer->clumpID = 7;
      AudioUnitParameterOptions v7 = buffer->flags | 0x80100000;
      unint64_t v8 = 0x4120000000000000;
      goto LABEL_73;
    case 24:
      buffer->cfNameString = @"Return to normal ceiling";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"Return to normal ceiling", buffer->name, 52, 0x8000100u);
      AudioUnitParameterUnit v6 = kAudioUnitParameterUnit_Generic;
      buffer->clumpID = 7;
      AudioUnitParameterOptions v7 = buffer->flags | 0x80100000;
      unint64_t v8 = 0x41F0000000000000;
      AudioUnitParameterValue v9 = 15.0;
      goto LABEL_84;
    case 25:
    case 26:
      buffer->cfNameString = @"Deprecated";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"Deprecated", buffer->name, 52, 0x8000100u);
      AudioUnitParameterUnit v6 = kAudioUnitParameterUnit_Generic;
      buffer->clumpID = 8;
      AudioUnitParameterOptions v7 = buffer->flags | 0x84100000;
      unint64_t v8 = 0x3F80000000000000;
      AudioUnitParameterValue v9 = 0.5;
      goto LABEL_84;
    case 27:
      buffer->cfNameString = @"Beam direction (set by VP)";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"Beam direction (set by VP)", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 10;
      AudioUnitParameterOptions v7 = buffer->flags & 0x3BEF7FFF | 0x44108000;
      unint64_t v8 = 0x4000000000000000;
LABEL_39:
      AudioUnitParameterValue v9 = 0.0;
      AudioUnitParameterUnit v6 = kAudioUnitParameterUnit_Indexed;
      goto LABEL_84;
    case 28:
      buffer->cfNameString = @"Output Mode (to Beam)";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"Output Mode (to Beam)", buffer->name, 52, 0x8000100u);
      AudioUnitParameterUnit v6 = kAudioUnitParameterUnit_Generic;
      buffer->clumpID = 10;
      AudioUnitParameterOptions v7 = buffer->flags & 0x3BEF7FFF | 0x44108000;
      unint64_t v8 = 0x4000000000000000;
      AudioUnitParameterValue v9 = 2.0;
      goto LABEL_84;
    case 29:
      buffer->cfNameString = @"Occlusion state";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"Occlusion state", buffer->name, 52, 0x8000100u);
      AudioUnitParameterUnit v6 = kAudioUnitParameterUnit_Generic;
      buffer->clumpID = 9;
      AudioUnitParameterOptions v7 = buffer->flags & 0x3FEF7FFF | 0x40108000;
      unint64_t v8 = 0x4000000000000000;
      goto LABEL_80;
    case 30:
      CFStringRef v19 = @"Front VAD";
      goto LABEL_45;
    case 31:
      CFStringRef v19 = @"Back VAD";
      goto LABEL_45;
    case 32:
      CFStringRef v19 = @"Echo VAD";
LABEL_45:
      buffer->cfNameString = v19;
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(v19, buffer->name, 52, 0x8000100u);
      AudioUnitParameterUnit v6 = kAudioUnitParameterUnit_Generic;
      buffer->clumpID = 9;
      AudioUnitParameterOptions v20 = buffer->flags & 0x7FFFFFFF;
      int v21 = 1074823168;
      goto LABEL_79;
    case 33:
      buffer->cfNameString = @"Front/back ratio";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"Front/back ratio", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 9;
      AudioUnitParameterOptions v16 = buffer->flags & 0x7FFFFFFF;
      int v17 = 1141932032;
      goto LABEL_51;
    case 34:
      CFStringRef v22 = @"LF front/back ratio";
      goto LABEL_50;
    case 35:
      CFStringRef v22 = @"HF front/back ratio";
      goto LABEL_50;
    case 36:
      CFStringRef v22 = @"Echo front/back ratio";
LABEL_50:
      buffer->cfNameString = v22;
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(v22, buffer->name, 52, 0x8000100u);
      buffer->clumpID = 9;
      AudioUnitParameterOptions v16 = buffer->flags & 0x7FFFFFFF;
      int v17 = 1074823168;
LABEL_51:
      AudioUnitParameterOptions v7 = v16 | v17;
      unint64_t v8 = 0x41A00000C1A00000;
      goto LABEL_67;
    case 37:
      buffer->cfNameString = @"Max echo gain";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"Max echo gain", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 9;
      AudioUnitParameterOptions v7 = buffer->flags & 0x3FEF7FFF | 0x40108000;
      unint64_t v8 = 0x41200000C1F00000;
      goto LABEL_67;
    case 38:
      buffer->cfNameString = @"X-corr";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"X-corr", buffer->name, 52, 0x8000100u);
      AudioUnitParameterUnit v6 = kAudioUnitParameterUnit_Generic;
      buffer->clumpID = 9;
      AudioUnitParameterOptions flags = buffer->flags & 0x7FFFFFFF;
      int v13 = 1074823168;
LABEL_54:
      AudioUnitParameterOptions v7 = flags | v13;
      unint64_t v8 = 0x3F800000BF800000;
      goto LABEL_80;
    case 39:
      buffer->cfNameString = @"Occlusion bias detector";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"Occlusion bias detector", buffer->name, 52, 0x8000100u);
      AudioUnitParameterUnit v6 = kAudioUnitParameterUnit_Generic;
      buffer->clumpID = 9;
      AudioUnitParameterOptions v7 = buffer->flags & 0x3FEF7FFF | 0x40108000;
      unint64_t v8 = 0x41A00000C1A00000;
      goto LABEL_80;
    case 40:
      buffer->cfNameString = @"Return to normal detector";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"Return to normal detector", buffer->name, 52, 0x8000100u);
      AudioUnitParameterUnit v6 = kAudioUnitParameterUnit_Generic;
      buffer->clumpID = 9;
      AudioUnitParameterOptions v7 = buffer->flags & 0x3FEF7FFF | 0x40108000;
      unint64_t v8 = 0x41A0000000000000;
      goto LABEL_80;
    case 41:
      CFStringRef v23 = @"Front input level";
      goto LABEL_66;
    case 42:
      CFStringRef v23 = @"Back input level";
      goto LABEL_66;
    case 43:
      CFStringRef v23 = @"HF bottom input level";
      goto LABEL_66;
    case 44:
      buffer->cfNameString = @"VP pre gain (set by VP)";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"VP pre gain (set by VP)", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 10;
      AudioUnitParameterOptions v7 = buffer->flags & 0x3BEF7FFF | 0x44108000;
      unint64_t v8 = 0x42480000C2480000;
      goto LABEL_67;
    case 45:
      buffer->cfNameString = @"HF max el. noise level (3-mic)";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"HF max el. noise level (3-mic)", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 6;
      AudioUnitParameterOptions v7 = buffer->flags | 0x80100000;
      unint64_t v8 = 0xC2200000C2C80000;
      AudioUnitParameterUnit v6 = kAudioUnitParameterUnit_Decibels;
      int v24 = -1029308416;
      goto LABEL_83;
    case 46:
      buffer->cfNameString = @"HF level where el. noise masked (3-mic)";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"HF level where el. noise masked (3-mic)", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 6;
      AudioUnitParameterOptions v7 = buffer->flags | 0x80100000;
      unint64_t v8 = 0xC2200000C2C80000;
      AudioUnitParameterUnit v6 = kAudioUnitParameterUnit_Decibels;
      int v24 = -1031667712;
      goto LABEL_83;
    case 47:
      buffer->cfNameString = @"Dead mic thd";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"Dead mic thd", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 6;
      AudioUnitParameterOptions v7 = buffer->flags | 0x80100000;
      unint64_t v8 = 0xC2700000C2F00000;
      AudioUnitParameterUnit v6 = kAudioUnitParameterUnit_Decibels;
      int v24 = -1028390912;
      goto LABEL_83;
    case 48:
      CFStringRef v23 = @"HF front input level";
      goto LABEL_66;
    case 49:
      CFStringRef v23 = @"HF back input level";
LABEL_66:
      buffer->cfNameString = v23;
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(v23, buffer->name, 52, 0x8000100u);
      buffer->clumpID = 9;
      AudioUnitParameterOptions v7 = buffer->flags & 0x3FEF7FFF | 0x40108000;
      unint64_t v8 = 3267887104;
LABEL_67:
      AudioUnitParameterValue v9 = 0.0;
LABEL_68:
      AudioUnitParameterUnit v6 = kAudioUnitParameterUnit_Decibels;
      goto LABEL_84;
    case 50:
    case 51:
    case 52:
      buffer->cfNameString = @"Deprecated";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"Deprecated", buffer->name, 52, 0x8000100u);
      AudioUnitParameterUnit v6 = kAudioUnitParameterUnit_Generic;
      buffer->clumpID = 10;
      AudioUnitParameterOptions v7 = buffer->flags & 0x3BEF7FFF | 0x44108000;
      unint64_t v8 = 0x4396000000000000;
      goto LABEL_80;
    case 53:
      buffer->cfNameString = @"HF level cov time constant";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"HF level cov time constant", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 2;
      AudioUnitParameterOptions v7 = buffer->flags | 0x80100000;
      unint64_t v8 = 0x4000000000000000;
LABEL_70:
      AudioUnitParameterUnit v6 = kAudioUnitParameterUnit_Seconds;
      AudioUnitParameterValue v9 = 0.6;
      goto LABEL_84;
    case 54:
      buffer->cfNameString = @"HF min level cov f/b diff";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"HF min level cov f/b diff", buffer->name, 52, 0x8000100u);
      AudioUnitParameterUnit v6 = kAudioUnitParameterUnit_Generic;
      buffer->clumpID = 3;
      AudioUnitParameterOptions v7 = buffer->flags | 0x80100000;
      unint64_t v8 = 0x40A0000000000000;
      AudioUnitParameterValue v9 = 1.25;
      goto LABEL_84;
    case 55:
      buffer->cfNameString = @"HF level cov f/b diff ceiling";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"HF level cov f/b diff ceiling", buffer->name, 52, 0x8000100u);
      AudioUnitParameterUnit v6 = kAudioUnitParameterUnit_Generic;
      buffer->clumpID = 3;
      AudioUnitParameterOptions v7 = buffer->flags | 0x80100000;
      unint64_t v8 = 0x40A0000000000000;
LABEL_73:
      AudioUnitParameterValue v9 = 4.0;
      goto LABEL_84;
    case 56:
      buffer->cfNameString = @"HF normal level cov f/b diff";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"HF normal level cov f/b diff", buffer->name, 52, 0x8000100u);
      AudioUnitParameterUnit v6 = kAudioUnitParameterUnit_Generic;
      buffer->clumpID = 3;
      AudioUnitParameterOptions v7 = buffer->flags | 0x80100000;
      unint64_t v8 = 0x40A0000000000000;
      AudioUnitParameterValue v9 = 1.0;
      goto LABEL_84;
    case 57:
      buffer->cfNameString = @"HF level cov f/b diff";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"HF level cov f/b diff", buffer->name, 52, 0x8000100u);
      AudioUnitParameterUnit v6 = kAudioUnitParameterUnit_Generic;
      buffer->clumpID = 9;
      AudioUnitParameterOptions v7 = buffer->flags & 0x3FEF7FFF | 0x40108000;
      unint64_t v8 = 0x40A00000C0A00000;
      goto LABEL_80;
    case 58:
      buffer->cfNameString = @"Device orientation";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"Device orientation", buffer->name, 52, 0x8000100u);
      AudioUnitParameterUnit v6 = kAudioUnitParameterUnit_Generic;
      buffer->clumpID = 9;
      AudioUnitParameterOptions v7 = buffer->flags & 0x3FEF7FFF | 0x40108000;
      unint64_t v8 = 0x40C0000000000000;
      goto LABEL_80;
    case 59:
    case 60:
    case 61:
      buffer->cfNameString = @"Deprecated";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"Deprecated", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 10;
      AudioUnitParameterOptions v7 = buffer->flags & 0x3BEF7FFF | 0x44108000;
      unint64_t v8 = 0x43C8000000000000;
      AudioUnitParameterValue v9 = 0.0;
      AudioUnitParameterUnit v6 = kAudioUnitParameterUnit_Milliseconds;
      goto LABEL_84;
    case 62:
      buffer->cfNameString = @"Echo low gain thd";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"Echo low gain thd", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 5;
      AudioUnitParameterOptions v7 = buffer->flags | 0x80100000;
      unint64_t v8 = 0xC1200000C2480000;
      AudioUnitParameterUnit v6 = kAudioUnitParameterUnit_Decibels;
      int v24 = -1039400960;
      goto LABEL_83;
    case 63:
      buffer->cfNameString = @"Echo canceler converged";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"Echo canceler converged", buffer->name, 52, 0x8000100u);
      AudioUnitParameterUnit v6 = kAudioUnitParameterUnit_Generic;
      buffer->clumpID = 9;
      AudioUnitParameterOptions v20 = buffer->flags & 0x7FFFFFFF;
      int v21 = 1141932032;
LABEL_79:
      AudioUnitParameterOptions v7 = v20 | v21;
      unint64_t v8 = 0x3F80000000000000;
LABEL_80:
      AudioUnitParameterValue v9 = 0.0;
      goto LABEL_84;
    case 64:
      buffer->cfNameString = @"HF self noise floor";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"HF self noise floor", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      AudioUnitParameterOptions v7 = buffer->flags | 0x80100000;
      unint64_t v8 = 0xC2700000C2F00000;
      AudioUnitParameterUnit v6 = kAudioUnitParameterUnit_Decibels;
      int v24 = -1024458752;
      goto LABEL_83;
    case 65:
      buffer->cfNameString = @"LF min level";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"LF min level", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 4;
      AudioUnitParameterOptions v7 = buffer->flags | 0x80100000;
      unint64_t v8 = 0xC2200000C30C0000;
      AudioUnitParameterUnit v6 = kAudioUnitParameterUnit_Decibels;
      int v24 = -1022623744;
LABEL_83:
      AudioUnitParameterValue v9 = *(float *)&v24;
LABEL_84:
      uint64_t result = 0;
      buffer->AudioUnitParameterOptions flags = v7;
      buffer->unit = v6;
      *(void *)&buffer->minCFNumberRef Value = v8;
      buffer->defaultCFNumberRef Value = v9;
      break;
    default:
      return 4294956418;
  }
  return result;
}

uint64_t AUMicSelectorV2::Render(AUMicSelectorV2 *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  unsigned int v14 = 0;
  AudioUnitParameterOptions v7 = (AUMicSelectorV2 *)((char *)this + 80);
  uint64_t Element = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUMicSelectorV2 *)((char *)this + 80), 0);
  uint64_t v9 = ausdk::AUInputElement::PullInput(Element, &v14, a3, 0, a4);
  if (!v9)
  {
    uint64_t v10 = ausdk::AUScope::SafeGetElement((AUMicSelectorV2 *)((char *)this + 128), 0);
    uint64_t v11 = ausdk::AUScope::SafeGetElement(v7, 0);
    uint64_t BufferList = (AudioBufferList *)ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v11 + 144));
    ausdk::AUBufferList::CopyBufferContentsTo((void *)(v10 + 144), BufferList);
  }
  return v9;
}

uint64_t AUMicSelectorV2::ProcessMultipleBufferLists(AUMicSelectorV2 *this, unsigned int *a2, unsigned int a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  uint64_t v10 = this;
  uint64_t v265 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = (AUMicSelectorV2 *)((char *)this + 32);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMicSelectorV2 *)((char *)this + 32), 0);
  float Parameter = ausdk::AUElement::GetParameter(Element, 0x1Bu);
  if (!(*(unsigned int (**)(AUMicSelectorV2 *))(*(void *)v10 + 576))(v10))
  {
    int mData = (*a5)->mBuffers[0].mData;
    unint64_t v233 = a5[1]->mBuffers[0].mData;
    v263[1] = mData;
    float v264 = 0;
    v263[0] = v233;
    AudioUnitRenderActionFlags ioActionFlags = a2;
    if (*((unsigned char *)v10 + 1416) || (CFStringRef v19 = a5[2]) == 0)
    {
      char v17 = 0;
      unsigned int v18 = 2;
    }
    else
    {
      float v264 = v19->mBuffers[0].mData;
      unsigned int v18 = 3;
      char v17 = 1;
    }
    AudioUnitParameterOptions v20 = (const float *)a5[3]->mBuffers[0].mData;
    int v21 = (const float *)a5[4]->mBuffers[0].mData;
    CFStringRef v22 = (const float *)a5[5]->mBuffers[0].mData;
    CFStringRef v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
    float v217 = ausdk::AUElement::GetParameter(v23, 4u);
    int v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
    float v211 = ausdk::AUElement::GetParameter(v24, 5u);
    std::string::size_type v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
    float v26 = ausdk::AUElement::GetParameter(v25, 6u);
    std::string::size_type v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
    float v223 = ausdk::AUElement::GetParameter(v27, 8u);
    char v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
    float v218 = ausdk::AUElement::GetParameter(v28, 9u);
    uint64_t v29 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
    float v224 = ausdk::AUElement::GetParameter(v29, 0xAu);
    __int16 v30 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
    float v219 = ausdk::AUElement::GetParameter(v30, 0xCu);
    int v31 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
    float v213 = ausdk::AUElement::GetParameter(v31, 0xDu);
    __int16 v32 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
    float v221 = ausdk::AUElement::GetParameter(v32, 0xFu);
    CFStringRef v33 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
    float v216 = ausdk::AUElement::GetParameter(v33, 0x3Eu);
    CFStringRef v34 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
    float v214 = ausdk::AUElement::GetParameter(v34, 0xEu);
    float v35 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
    float v237 = ausdk::AUElement::GetParameter(v35, 0x10u);
    float v36 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
    float v231 = ausdk::AUElement::GetParameter(v36, 0x13u);
    float v37 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
    float v230 = ausdk::AUElement::GetParameter(v37, 0x14u);
    uint64_t v38 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
    float v229 = ausdk::AUElement::GetParameter(v38, 0x15u);
    CFStringRef v39 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
    float v228 = ausdk::AUElement::GetParameter(v39, 0x16u);
    CFStringRef v40 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
    float v234 = ausdk::AUElement::GetParameter(v40, 0x17u);
    CFNumberRef v41 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
    float v227 = ausdk::AUElement::GetParameter(v41, 0x18u);
    uint64_t v42 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
    float v226 = ausdk::AUElement::GetParameter(v42, 0x11u);
    uint64_t v43 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
    float v44 = ausdk::AUElement::GetParameter(v43, 0x2Cu);
    CFNumberRef v45 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
    float v215 = ausdk::AUElement::GetParameter(v45, 0x2Du);
    uint64_t v46 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
    float v210 = ausdk::AUElement::GetParameter(v46, 0x2Eu);
    CFStringRef v47 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
    float v48 = ausdk::AUElement::GetParameter(v47, 0x2Fu);
    uint64_t v49 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
    float v212 = ausdk::AUElement::GetParameter(v49, 0x38u);
    char v239 = v11;
    uint64_t v50 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
    float v220 = ausdk::AUElement::GetParameter(v50, 0);
    uint64_t v51 = 0;
    float __C = 0.0;
    UInt32 inNumberFrames = a3;
    float v52 = (float)a3;
    float v53 = -v44;
    vDSP_Length __N = a3;
    do
    {
      vDSP_svesq((const float *)v263[v51], 1, &__C, a3);
      *((float *)v10 + v51 + 322) = (float)((float)(1.0 - *((float *)v10 + 292))
                                          * (float)((float)(log10f((float)(__C / v52) + 1.0e-12) * 10.0) - v44))
                                  + (float)(*((float *)v10 + 292) * *((float *)v10 + v51 + 322));
      ++v51;
    }
    while (v18 != v51);
    float v222 = v26;
    float v238 = v48;
    float v235 = Parameter;
    if (v17)
    {
      CFStringRef v54 = v239;
      unsigned int v55 = a3;
      if (*((float *)v10 + 324) >= v48)
      {
        int v236 = 1;
      }
      else
      {
        int v236 = 0;
        *((_DWORD *)v10 + 342) = 0;
        unsigned int v18 = 2;
      }
    }
    else
    {
      int v236 = 0;
      CFStringRef v54 = v239;
      unsigned int v55 = a3;
    }
    vDSP_svesq(v20, 1, &__C, a3);
    *((float *)v10 + 331) = (float)((float)(1.0 - *((float *)v10 + 292))
                                  * (float)(log10f((float)(__C / v52) + 1.0e-12) * 10.0))
                          + (float)(*((float *)v10 + 292) * *((float *)v10 + 331));
    vDSP_svesq(v22, 1, &__C, a3);
    *((float *)v10 + 332) = (float)((float)(1.0 - *((float *)v10 + 292))
                                  * (float)((float)(log10f((float)(__C / v52) + 1.0e-12) * 10.0) - v44))
                          + (float)(*((float *)v10 + 292) * *((float *)v10 + 332));
    vDSP_svesq(v21, 1, &__C, a3);
    *((float *)v10 + 333) = (float)((float)(1.0 - *((float *)v10 + 292))
                                  * (float)((float)(log10f((float)(__C / v52) + 1.0e-12) * 10.0) - v44))
                          + (float)(*((float *)v10 + 292) * *((float *)v10 + 333));
    uint64_t v56 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v54, 0);
    float v57 = ausdk::AUElement::GetParameter(v56, 0x40u);
    long long v58 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v54, 0);
    float v59 = ausdk::AUElement::GetParameter(v58, 0x41u);
    uint64_t v60 = 0;
    uint64_t v61 = 0;
    unint64_t v62 = 0;
    double v63 = (double)v55;
    unsigned __int8 v241 = (const AudioStreamBasicDescription *)((char *)v10 + 1040);
    uint64_t v243 = (AUMicSelectorV2 *)((char *)v10 + 1080);
    size_t v245 = 4 * __N;
    uint64_t v240 = 4 * v18;
    uint64_t v225 = v18;
    unint64_t v252 = v10;
    size_t v64 = 4 * __N;
    do
    {
      ausdk::AUBufferList::PrepareBuffer(v243, v241, v55);
      uint64_t BufferList = ausdk::AUBufferList::GetBufferList(v243);
      __src = (void *)v263[v60];
      memcpy(*(void **)(BufferList + 16), __src, v64);
      __int16 v66 = (char *)v10 + v61;
      AudioUnitProcess(*(AudioUnit *)((char *)v10 + v60 * 8 + 536), ioActionFlags, (const AudioTimeStamp *)((char *)v10 + v61 + 560), inNumberFrames, (AudioBufferList *)BufferList);
      *(double *)((char *)v10 + v61 + 560) = *(double *)((char *)v10 + v61 + 560) + v63;
      vDSP_svesq(*(const float **)(BufferList + 16), 1, &__C, __N);
      float v67 = v53 + (float)(log10f((float)(__C / v52) + 1.0e-12) * 10.0);
      if (v67 < v57) {
        float v67 = v57;
      }
      v261.f32[v62 / 4] = v67;
      *(float *)((char *)v252 + v62 + 1300) = (float)((float)(1.0 - *((float *)v10 + 292)) * v67)
                                            + (float)(*((float *)v10 + 292) * *(float *)((char *)v252 + v62 + 1300));
      memcpy(*(void **)(BufferList + 16), __src, v64);
      unsigned int v55 = inNumberFrames;
      AudioUnitProcess(*(AudioUnit *)((char *)v10 + v60 * 8 + 752), ioActionFlags, (const AudioTimeStamp *)(v66 + 776), inNumberFrames, (AudioBufferList *)BufferList);
      *((double *)v66 + 97) = *((double *)v66 + 97) + v63;
      vDSP_svesq(*(const float **)(BufferList + 16), 1, &__C, __N);
      float v68 = v53 + (float)(log10f((float)(__C / v52) + 1.0e-12) * 10.0);
      if (v68 < v59) {
        float v68 = v59;
      }
      *(float *)((char *)v252 + v62 + 1312) = (float)((float)(1.0 - *((float *)v252 + 292)) * v68)
                                            + (float)(*((float *)v252 + 292) * *(float *)((char *)v252 + v62 + 1312));
      uint64_t v10 = v252;
      v62 += 4;
      v61 += 64;
      ++v60;
    }
    while (v240 != v62);
    float v69 = *((float *)v252 + 325);
    float v70 = *((float *)v252 + 326);
    int v71 = v236;
    if (v236)
    {
      float v72 = *((float *)v252 + 327);
      float v244 = v69 - v72;
      float v242 = v70 - v72;
      float v73 = *((float *)v252 + 328);
      float v74 = *((float *)v252 + 329);
      float __srca = v73 - v74;
      float v75 = *((float *)v252 + 330);
      float v76 = v73 - v75;
      float v77 = v74 - v75;
    }
    else
    {
      float __srca = *((float *)v252 + 328) - *((float *)v252 + 329);
      float v242 = 0.0;
      float v244 = 0.0;
      float v76 = 0.0;
      float v77 = 0.0;
    }
    float v78 = v69 - v70;
    ausdk::AUBufferList::PrepareBuffer((AUMicSelectorV2 *)((char *)v252 + 1144), (const AudioStreamBasicDescription *)((char *)v252 + 1104), inNumberFrames);
    uint64_t v79 = ausdk::AUBufferList::GetBufferList((AUMicSelectorV2 *)((char *)v252 + 1144));
    memcpy(*(void **)(v79 + 16), mData, v245);
    memcpy(*(void **)(v79 + 32), v233, v245);
    uint64_t v16 = AudioUnitProcess(*((AudioUnit *)v252 + 121), ioActionFlags, (const AudioTimeStamp *)((char *)v252 + 976), inNumberFrames, (AudioBufferList *)v79);
    *((double *)v252 + 122) = *((double *)v252 + 122) + v63;
    vDSP_svesq(*(const float **)(v79 + 32), 1, &__C, __N);
    *((float *)v252 + 336) = (float)((float)(1.0 - *((float *)v252 + 293)) * __C)
                           + (float)(*((float *)v252 + 293) * *((float *)v252 + 336));
    vDSP_svesq(*(const float **)(v79 + 16), 1, &__C, __N);
    *((float *)v252 + 337) = (float)((float)(1.0 - *((float *)v252 + 293)) * __C)
                           + (float)(*((float *)v252 + 293) * *((float *)v252 + 337));
    vDSP_dotpr(*(const float **)(v79 + 16), 1, *(const float **)(v79 + 32), 1, &__C, __N);
    uint64_t v80 = 0;
    float v81 = (float)((float)(1.0 - *((float *)v252 + 293)) * __C)
        + (float)(*((float *)v252 + 293) * *((float *)v252 + 338));
    *((float *)v252 + 338) = v81;
    float v82 = (float)(*((float *)v252 + 336) * *((float *)v252 + 337)) + 1.0e-10;
    uint64_t v83 = (_DWORD *)((char *)v252 + 1204);
    do
    {
      uint64_t v84 = *(v83 - 1);
      *(_DWORD *)(*(void *)(v83 - 3) + 4 * v84) = *(_DWORD *)((char *)v252 + v80 + 1288);
      *(v83 - 1) = (v84 + 1) % *v83;
      v80 += 4;
      v83 += 6;
    }
    while (v80 != 12);
    uint64_t v85 = 0;
    uint64_t v86 = *((unsigned int *)v252 + 318);
    *(_DWORD *)(*((void *)v252 + 158) + 4 * v86) = *((_DWORD *)v252 + 331);
    *((_DWORD *)v252 + 318) = (v86 + 1) % *((_DWORD *)v252 + 319);
    uint64_t v87 = -72;
    do
    {
      *(&v255 + v85) = *((float *)v252 + v85 + 322) > (float)(v231
                                                            + AUMicSelectorV2::NoiseFloorDetectorV2::FindMinimum((const float **)((char *)v252 + v87 + 1264)));
      ++v85;
      v87 += 24;
    }
    while (v85 != 3);
    float v88 = v81 / sqrtf(v82);
    Minimuuint64_t m = AUMicSelectorV2::NoiseFloorDetectorV2::FindMinimum((const float **)v252 + 158);
    float v90 = *((float *)v252 + 331);
    float v91 = v230 + Minimum;
    int v92 = v255;
    int v93 = v256;
    BOOL v94 = (v255 | v256) != 0;
    float v95 = *((float *)v252 + 322);
    float v96 = *((float *)v252 + 323);
    float __Na = v91;
    if (v95 < v48 || v96 < v48)
    {
      float v98 = v95 - v96;
      int v100 = 32;
      float v110 = 0.0;
      float v107 = -100.0;
      float ioActionFlagsa = -100.0;
      float v111 = 0.0;
      float v112 = 0.0;
      float v113 = 0.0;
      float inNumberFramesa = 0.0;
      float v97 = v239;
      goto LABEL_57;
    }
    float v97 = v239;
    if (v90 > v91)
    {
      float v98 = 0.0;
      if (v255 | v256
        && (int v99 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v239, 0),
            ausdk::AUElement::GetParameter(v99, 0x3Fu) > 0.1))
      {
        int v100 = 0;
        float v101 = *((float *)v252 + 332);
        float v102 = *((float *)v252 + 333);
        float v103 = v101 - v102;
        float v104 = *((float *)v252 + 331);
        float v105 = v101 - v104;
        float v106 = v102 - v104;
        if (v105 <= v106) {
          float v107 = v106;
        }
        else {
          float v107 = v105;
        }
        if (v105 <= v106) {
          float v108 = v105;
        }
        else {
          float v108 = v106;
        }
        float ioActionFlagsa = v108;
        if (vabds_f32(v103, v237) <= v219 || (float v109 = v103 - v237, (float)(v78 * v109) <= 0.0))
        {
          float v110 = 0.0;
        }
        else
        {
          if (v107 <= v221)
          {
            float v110 = v213;
            if (v108 >= v216)
            {
              int v100 = 0;
              float v109 = 0.0;
            }
            else
            {
              float v109 = -v109;
              int v100 = 8;
            }
          }
          else
          {
            int v100 = 8;
            float v110 = v213;
          }
          if (v109 >= (float)-v110)
          {
            if (v109 <= v110) {
              float v110 = v109;
            }
          }
          else
          {
            float v110 = -v110;
          }
        }
      }
      else
      {
        int v100 = 0;
        float v107 = -100.0;
        float v110 = 0.0;
        float ioActionFlagsa = -100.0;
      }
      float v127 = *(double *)(ausdk::AUScope::SafeGetElement((AUMicSelectorV2 *)((char *)v252 + 128), 0) + 80);
      *((_DWORD *)v252 + 334) = (int)(float)((float)((float)(v127 * 0.2) / (float)*((unsigned int *)v252 + 84)) + 0.5);
      float v111 = 0.0;
      float v112 = 0.0;
      float v113 = 0.0;
      float inNumberFramesa = 0.0;
      goto LABEL_57;
    }
    float v114 = 0.0;
    if (v236)
    {
      unint64_t v115 = 0;
      float v116 = *((float *)v252 + 294);
      float v117 = 1.0 - v116;
      do
      {
        char v118 = (float *)((char *)v252 + v115);
        float v119 = v261.f32[v115 / 4];
        float v120 = (float)(v117 * v119) + (float)(v116 * *(float *)((char *)v252 + v115 + 1376));
        v118[344] = v120;
        float v121 = (float)((float)(v119 - v120) * (float)(v117 * (float)(v119 - v120)))
             + (float)(v116 * *(float *)((char *)v252 + v115 + 1388));
        v118[347] = v121;
        *(float *)((char *)&v258 + v115) = sqrtf(v121);
        v115 += 4;
      }
      while (4 * v225 != v115);
      float32x2_t v122 = vmla_n_f32(vmul_n_f32(vmul_n_f32(vsub_f32(v261, *(float32x2_t *)((char *)v252 + 1376)), v117), v262 - *((float *)v252 + 346)), *(float32x2_t *)((char *)v252 + 1400), v116);
      *((float32x2_t *)v252 + 175) = v122;
      float32x2_t v123 = vadd_f32(v122, (float32x2_t)vdup_n_s32(0x3DCCCCCDu));
      float v114 = log10f(vdiv_f32(v123, (float32x2_t)vdup_lane_s32((int32x2_t)v123, 1)).f32[0]) * 10.0;
    }
    int v124 = *((_DWORD *)v252 + 334);
    BOOL v125 = __OFSUB__(v124, 1);
    int v126 = v124 - 1;
    float inNumberFramesa = v114;
    if (v126 < 0 == v125)
    {
      int v100 = 0;
      *((_DWORD *)v252 + 334) = v126;
      float v98 = 0.0;
LABEL_51:
      float v107 = -100.0;
LABEL_52:
      float v110 = 0.0;
      float ioActionFlagsa = -100.0;
      float v111 = 0.0;
LABEL_53:
      float v112 = 0.0;
LABEL_54:
      float v113 = 0.0;
      goto LABEL_57;
    }
    if (v94)
    {
      float v148 = *(double *)(ausdk::AUScope::SafeGetElement((AUMicSelectorV2 *)((char *)v252 + 128), 0) + 80);
      int v149 = (int)(float)((float)((float)(v148 * 0.2) / (float)*((unsigned int *)v252 + 84)) + 0.5);
      *((_DWORD *)v252 + 335) = v149;
      float v150 = v88;
      float v151 = __srca;
    }
    else
    {
      int v149 = *((_DWORD *)v252 + 335);
      float v150 = v88;
      float v151 = __srca;
      if (v149 >= 1) {
        *((_DWORD *)v252 + 335) = --v149;
      }
    }
    if (fabsf(v151) > v223)
    {
      BOOL v155 = v151 >= 0.0 && v220 == 1.0;
      float v98 = 0.0;
      if (v155) {
        float v156 = 0.0;
      }
      else {
        float v156 = v151;
      }
      float v111 = -v218;
      if (v156 >= (float)-v218) {
        float v111 = v156;
      }
      if (v156 > v218) {
        float v111 = v218;
      }
      if (!v236)
      {
        int v100 = 1;
        float v107 = -100.0;
LABEL_172:
        float v110 = 0.0;
        float ioActionFlagsa = -100.0;
        goto LABEL_53;
      }
      if (v151 >= 0.0 || v77 >= v224)
      {
        int v100 = 0;
        float v107 = -100.0;
        if (v151 <= 0.0 || v76 >= v224) {
          goto LABEL_172;
        }
      }
LABEL_189:
      int v100 = 0;
      goto LABEL_51;
    }
    if (v236)
    {
      if (v94)
      {
        float v157 = fabsf(v78);
        if (v157 <= v217)
        {
          int v100 = 0;
          float v160 = 0.0;
          float v159 = v222;
        }
        else
        {
          float v158 = -v217;
          float v159 = v222;
          if (v78 >= 0.0 || v244 >= v158)
          {
            int v100 = 2;
            if (v78 <= 0.0 || (v194 = v242 < v158, float v160 = v78, !v194))
            {
              BOOL v195 = v78 > 0.0;
              BOOL v196 = v78 < 0.0;
              if (v242 <= v222) {
                BOOL v196 = 0;
              }
              if (v244 <= v222) {
                BOOL v195 = 0;
              }
              float v160 = -v78;
              if (v196 || v195)
              {
                int v100 = 2;
              }
              else
              {
                float v160 = 0.0;
                int v100 = 0;
              }
            }
          }
          else
          {
            int v100 = 2;
            float v160 = v78;
          }
        }
        float v197 = -v211;
        if (v160 >= (float)-v211) {
          float v197 = v160;
        }
        if (v160 <= v211) {
          float v112 = v197;
        }
        else {
          float v112 = v211;
        }
        float v98 = 0.0;
        if (v157 < v159)
        {
          float v198 = *((float *)v252 + 325);
          if (v198 > v215)
          {
            float v199 = *((float *)v252 + 326);
            float v107 = -100.0;
            if (v199 <= v215 || v198 >= v210 || v199 >= v210) {
              goto LABEL_299;
            }
            BOOL v200 = v259 <= 2.4 && v258 <= 2.4;
            float v107 = -100.0;
            if (v200 || v260 <= 2.4) {
              goto LABEL_299;
            }
            if (*((float *)v252 + 350) > 0.1 && *((float *)v252 + 351) > 0.1 && vabds_f32(v258, v259) < 5.0)
            {
              if (vabds_f32(v258, v260) < 5.0
                && vabds_f32(v259, v260) < 5.0
                && (char v201 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v239, 0),
                    fabsf(v114) >= ausdk::AUElement::GetParameter(v201, 0x36u)))
              {
                uint64_t v206 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v239, 0);
                float v207 = ausdk::AUElement::GetParameter(v206, 0x37u);
                int v208 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v239, 0);
                float v113 = ausdk::AUElement::GetParameter(v208, 0x37u);
                if (v114 <= v207)
                {
                  BOOL v194 = v114 < (float)-v113;
                  float v113 = v114;
                  if (v194)
                  {
                    int v209 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v239, 0);
                    float v113 = -ausdk::AUElement::GetParameter(v209, 0x37u);
                  }
                }
                v100 |= 4u;
                float v107 = -100.0;
                float v110 = 0.0;
                float ioActionFlagsa = -100.0;
                float v111 = 0.0;
              }
              else
              {
                float v107 = -100.0;
                float v110 = 0.0;
                float ioActionFlagsa = -100.0;
                float v111 = 0.0;
                float v113 = 0.0;
              }
              uint64_t v10 = v252;
              float v97 = v239;
              int v71 = v236;
LABEL_57:
              float v128 = (float)(v98 * 0.5) + v112 * 1.5 - v111 + (float)(v113 * 3.0) - v110;
              uint64_t v129 = 1180;
              if (v128 == 0.0) {
                uint64_t v129 = 1184;
              }
              *((float *)v10 + 339) = (float)((float)(1.0 - *(float *)((char *)v10 + v129)) * v128)
                                    + (float)(*(float *)((char *)v10 + v129) * *((float *)v10 + 339));
              if (v235 == 2.0)
              {
                int v132 = *((_DWORD *)v10 + 353);
                float v137 = v234;
                float v133 = v238;
                float v134 = v88;
                if (v132 == 6)
                {
                  float v136 = v228;
                  float v135 = v229 + v229;
                }
                else
                {
                  float v136 = v228;
                  float v135 = v229;
                  if (v132 == 5) {
                    float v136 = v228 + v228;
                  }
                }
              }
              else
              {
                uint64_t v130 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v97, 0);
                float v131 = ausdk::AUElement::GetParameter(v130, 0x1Bu);
                int v132 = *((_DWORD *)v10 + 353);
                float v133 = v238;
                float v134 = v88;
                if (v131 == 0.0)
                {
                  float v136 = v228;
                  float v135 = v229;
                  if (v132 != 6) {
                    float v136 = v228 + v228;
                  }
                }
                else
                {
                  float v136 = v228;
                  float v135 = v229;
                  if (v132 != 5) {
                    float v135 = v229 + v229;
                  }
                }
                float v137 = v234;
              }
              int v138 = *((_DWORD *)v10 + 341);
              if (!v138)
              {
                if ((v132 - 5) >= 2)
                {
                  float v135 = v135 * 1.4;
                  float v136 = v136 * 1.4;
                }
                float v140 = *((float *)v10 + 339);
                goto LABEL_85;
              }
              int v139 = *((_DWORD *)v10 + 343);
              if (v132 == v139)
              {
                float v137 = v137 * 0.7;
                goto LABEL_73;
              }
              if (v138 == 1 && v132 == 5 && v139 == 6)
              {
                float v140 = *((float *)v10 + 339);
                if (v140 < 0.0)
                {
LABEL_83:
                  *((_DWORD *)v10 + 339) = 0;
                  float v140 = 0.0;
                }
              }
              else
              {
                if (v138 != 2 || v132 != 6 || v139 != 5)
                {
                  float v137 = v137 + v137;
                  float v136 = v136 * 1.4;
                  float v135 = v135 * 1.4;
                  float v226 = *(float *)"fff?";
LABEL_73:
                  float v140 = *((float *)v10 + 339);
                  if (v138 == 1)
                  {
                    if (v140 <= v135)
                    {
                      float v141 = -v136;
                      goto LABEL_100;
                    }
                    goto LABEL_89;
                  }
LABEL_85:
                  float v141 = -v136;
                  if (v140 < (float)-v136)
                  {
                    int v142 = 1;
                    goto LABEL_90;
                  }
                  if (v138 != 2)
                  {
                    if (v140 > v135)
                    {
LABEL_89:
                      int v142 = 2;
LABEL_90:
                      *((_DWORD *)v10 + 341) = v142;
                      *((float *)v10 + 340) = v227;
                      *((_DWORD *)v10 + 343) = v132;
                      if (v100) {
                        *((_DWORD *)v10 + 342) = v100;
                      }
                      else {
                        *((_DWORD *)v10 + 342) = 64;
                      }
                      goto LABEL_205;
                    }
                    if (!v138) {
                      goto LABEL_205;
                    }
                  }
LABEL_100:
                  if (v140 < v141 || v140 > v135) {
                    *((_DWORD *)v10 + 342) |= v100;
                  }
                  float v144 = fabsf(v128);
                  if (v144 > v137)
                  {
                    float v145 = (float)(v144 * (float)(1.0 - *((float *)v10 + 295)))
                         + (float)(*((float *)v10 + 295) * *((float *)v10 + 340));
                    *((float *)v10 + 340) = v145;
                    if (v145 > v227) {
                      *((float *)v10 + 340) = v227;
                    }
                    goto LABEL_205;
                  }
                  if (v134 <= v226) {
                    goto LABEL_205;
                  }
                  int v146 = *((_DWORD *)v10 + 342);
                  if ((v146 & 0x20) != 0 && *((float *)v10 + 322) > v133 && *((float *)v10 + 323) > v133)
                  {
                    *((float *)v10 + 340) = *((float *)v10 + 295) * *((float *)v10 + 340);
                    int v147 = -33;
                  }
                  else if (v90 > __Na && (v146 & 8) != 0 && fabsf(v110) < v214 && v107 < v221 && ioActionFlagsa > v216)
                  {
                    *((float *)v10 + 340) = *((float *)v10 + 295) * *((float *)v10 + 340);
                    int v147 = -9;
                  }
                  else
                  {
                    if (v94)
                    {
                      float v152 = fabsf(v78);
                      float v153 = fabsf(__srca);
                      float v154 = v222;
                      if ((v146 & 0x57) != 0 && v152 < v222 && v153 < v224 && fabsf(inNumberFramesa) < v212)
                      {
                        *((float *)v10 + 340) = *((float *)v10 + 295) * *((float *)v10 + 340);
                        int v147 = -72;
                        goto LABEL_200;
                      }
                    }
                    else
                    {
                      float v152 = fabsf(v78);
                      float v153 = fabsf(__srca);
                      float v154 = v222;
                    }
                    int v161 = v71 ^ 1;
                    if (v90 > __Na) {
                      int v161 = 1;
                    }
                    if ((v161 | v94) == 1
                      || v152 >= v154
                      || v153 >= v224
                      || v244 >= v154
                      || v242 >= v154
                      || (float v162 = *((float *)v10 + 325), v162 >= v215)
                      && (float v163 = *((float *)v10 + 326), v163 >= v215)
                      && (v162 <= v210 || v163 <= v210))
                    {
                      if ((v146 & 0x80) != 0)
                      {
                        int v147 = -1;
                        if (v220 == 1.0)
                        {
                          if (v132 == 5) {
                            goto LABEL_200;
                          }
                        }
                        else if (v132 == 6)
                        {
                          goto LABEL_200;
                        }
                        if (v152 < v154 && v153 < v224)
                        {
                          *((float *)v10 + 340) = *((float *)v10 + 295) * *((float *)v10 + 340);
                          int v147 = -129;
                        }
                        goto LABEL_200;
                      }
                      int v147 = -1;
                    }
                    else if (*((int *)v10 + 335) >= 1)
                    {
                      int v147 = -1;
                    }
                    else
                    {
                      int v147 = -17;
                    }
                  }
LABEL_200:
                  if (*((float *)v10 + 340) < v137 && v140 > (float)(v136 * -0.75) && v140 < (float)(v135 * 0.75))
                  {
                    *((_DWORD *)v10 + 342) = v147 & v146;
                    if ((v147 & v146) == 0) {
                      *((void *)v10 + 170) = 0;
                    }
                  }
LABEL_205:
                  float v166 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v97, 0);
                  unsigned int v167 = ausdk::AUElement::GetParameter(v166, 0);
                  if (v167 > 1)
                  {
                    float v169 = __srca;
                    if (v167 == 2) {
                      goto LABEL_217;
                    }
                    if (v167 != 3)
                    {
                      if (v235 != 2.0)
                      {
LABEL_215:
                        int v168 = 2;
                        goto LABEL_216;
                      }
LABEL_217:
                      *((_DWORD *)v10 + 352) = 0;
                      goto LABEL_218;
                    }
                    int v168 = 1;
                  }
                  else
                  {
                    int v168 = *((_DWORD *)v10 + 341);
                    float v169 = __srca;
                    if (v168 != 1)
                    {
                      if (!v168)
                      {
                        if (v235 == 2.0)
                        {
                          if (*((_DWORD *)v10 + 352) != 1) {
                            goto LABEL_217;
                          }
LABEL_218:
                          uint64_t v170 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v97, 0);
                          ausdk::AUElement::SetParameter(v170, 0x1Cu, (float)*((unsigned int *)v10 + 352), 0);
                          uint64_t v171 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v97, 0);
                          ausdk::AUElement::SetParameter(v171, 0x1Du, (float)*((unsigned int *)v10 + 341), 0);
                          uint64_t v172 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v97, 0);
                          if (v92) {
                            float v173 = 1.0;
                          }
                          else {
                            float v173 = 0.0;
                          }
                          ausdk::AUElement::SetParameter(v172, 0x1Eu, v173, 0);
                          double v174 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v97, 0);
                          if (v93) {
                            float v175 = 1.0;
                          }
                          else {
                            float v175 = 0.0;
                          }
                          ausdk::AUElement::SetParameter(v174, 0x1Fu, v175, 0);
                          float v176 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v97, 0);
                          if (v90 <= __Na) {
                            float v177 = 0.0;
                          }
                          else {
                            float v177 = 1.0;
                          }
                          ausdk::AUElement::SetParameter(v176, 0x20u, v177, 0);
                          float v178 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v97, 0);
                          ausdk::AUElement::SetParameter(v178, 0x22u, v169, 0);
                          float v179 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v97, 0);
                          ausdk::AUElement::SetParameter(v179, 0x23u, v78, 0);
                          float v180 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v97, 0);
                          ausdk::AUElement::SetParameter(v180, 0x24u, (float)(*((float *)v10 + 332) - *((float *)v10 + 333)) - v237, 0);
                          float v181 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v97, 0);
                          ausdk::AUElement::SetParameter(v181, 0x25u, fmaxf(*((float *)v10 + 332), *((float *)v10 + 333)) - *((float *)v10 + 331), 0);
                          float v182 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v97, 0);
                          ausdk::AUElement::SetParameter(v182, 0x26u, v134, 0);
                          uint64_t v183 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v97, 0);
                          ausdk::AUElement::SetParameter(v183, 0x27u, *((float *)v10 + 339), 0);
                          uint64_t v184 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v97, 0);
                          ausdk::AUElement::SetParameter(v184, 0x28u, *((float *)v10 + 340), 0);
                          unint64_t v185 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v97, 0);
                          ausdk::AUElement::SetParameter(v185, 0x29u, *((float *)v10 + 322), 0);
                          int32x2_t v186 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v97, 0);
                          ausdk::AUElement::SetParameter(v186, 0x2Au, *((float *)v10 + 323), 0);
                          double v187 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v97, 0);
                          ausdk::AUElement::SetParameter(v187, 0x2Bu, *((float *)v10 + 327), 0);
                          uint64_t v188 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v97, 0);
                          ausdk::AUElement::SetParameter(v188, 0x30u, *((float *)v10 + 325), 0);
                          uint64_t v189 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v97, 0);
                          ausdk::AUElement::SetParameter(v189, 0x31u, *((float *)v10 + 326), 0);
                          float v190 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v97, 0);
                          ausdk::AUElement::SetParameter(v190, 0x39u, inNumberFramesa, 0);
                          float v191 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v97, 0);
                          ausdk::AUElement::SetParameter(v191, 0x3Au, (float)*((unsigned int *)v10 + 353), 0);
                          return v16;
                        }
                        goto LABEL_215;
                      }
                      goto LABEL_217;
                    }
                  }
LABEL_216:
                  *((_DWORD *)v10 + 352) = v168;
                  goto LABEL_218;
                }
                float v140 = *((float *)v10 + 339);
                if (v140 > 0.0) {
                  goto LABEL_83;
                }
              }
              int v138 = 0;
              *((void *)v10 + 170) = 0;
              *((_DWORD *)v10 + 342) = 0;
              goto LABEL_85;
            }
          }
        }
LABEL_298:
        float v107 = -100.0;
LABEL_299:
        float v110 = 0.0;
        float ioActionFlagsa = -100.0;
        goto LABEL_300;
      }
      float v98 = 0.0;
      if (v149 > 0) {
        goto LABEL_189;
      }
      if (fabsf(v78) <= v217)
      {
        int v202 = *((_DWORD *)v252 + 353);
        if (v202 == 6 && v244 > v217 && v78 > v222)
        {
          float v112 = -v244;
          int v100 = 16;
        }
        else
        {
          BOOL v204 = v242 > v217 && v202 == 5;
          BOOL v205 = v78 < (float)-v222;
          if (v204 && v205) {
            float v112 = v242;
          }
          else {
            float v112 = 0.0;
          }
          if (v204 && v205) {
            int v100 = 16;
          }
          else {
            int v100 = 0;
          }
        }
        goto LABEL_298;
      }
      if (v78 >= 0.0 || v242 <= v222)
      {
        int v100 = 0;
        float v107 = -100.0;
        if (v78 <= 0.0 || v244 <= v222) {
          goto LABEL_52;
        }
      }
      float v193 = -v211;
      if (v78 <= v211) {
        float v193 = -v78;
      }
      float v107 = -100.0;
      float ioActionFlagsa = -100.0;
      if (v211 >= (float)-v78) {
        float v112 = v193;
      }
      else {
        float v112 = v211;
      }
      int v100 = 16;
LABEL_285:
      float v110 = 0.0;
LABEL_300:
      float v111 = 0.0;
      goto LABEL_54;
    }
    int v100 = 0;
    float v164 = fabsf(v78);
    float v98 = 0.0;
    float v107 = -100.0;
    if (v164 <= v217 || v150 >= v226) {
      goto LABEL_52;
    }
    if ((*((unsigned char *)v252 + 1368) & 8) != 0) {
      goto LABEL_189;
    }
    if (v220 == 1.0)
    {
      if (*((_DWORD *)v252 + 341) && v151 >= 0.0) {
        goto LABEL_189;
      }
    }
    else
    {
      int v165 = *((_DWORD *)v252 + 341);
      if (*((_DWORD *)v252 + 353) == 6)
      {
        if (v165 && v151 <= -2.0) {
          goto LABEL_189;
        }
        float v107 = -100.0;
        float ioActionFlagsa = -100.0;
        if (v164 > v211) {
          float v112 = -v211;
        }
        else {
          float v112 = -v164;
        }
        goto LABEL_284;
      }
      if (v165 && v151 >= 2.0) {
        goto LABEL_189;
      }
    }
    float v107 = -100.0;
    float ioActionFlagsa = -100.0;
    if (v164 > v211) {
      float v112 = v211;
    }
    else {
      float v112 = v164;
    }
LABEL_284:
    int v100 = 128;
    goto LABEL_285;
  }
  unsigned int v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
  float v15 = 2.0;
  if (Parameter == 2.0) {
    float v15 = 0.0;
  }
  ausdk::AUElement::SetParameter(v14, 0x1Cu, v15, 0);
  return 0;
}

float AUMicSelectorV2::NoiseFloorDetectorV2::FindMinimum(const float **this)
{
  vDSP_Length v1 = *((unsigned int *)this + 3);
  float result = 0.0;
  if (v1)
  {
    if (*((_DWORD *)this + 4))
    {
      float __C = 0.0;
      vDSP_minv(*this, 1, &__C, v1);
      return __C;
    }
  }
  return result;
}

uint64_t AUMicSelectorV2::CanScheduleParameters(AUMicSelectorV2 *this)
{
  return 0;
}

uint64_t AUMicSelectorV2::SetParameter(AUMicSelectorV2 *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  if (a3) {
    return 4294956418;
  }
  if (a2 - 1 >= 3)
  {
    if (a2 == 18) {
      AUMicSelectorV2::SetNoiseFloorDetectorLength(this);
    }
  }
  else
  {
    AUMicSelectorV2::CalculateTimeConstants(this);
  }
  return 0;
}

uint64_t AUMicSelectorV2::SetProperty(AUMicSelectorV2 *this, int a2, int a3, unsigned int a4, _DWORD *a5, unsigned int a6)
{
  if (a3) {
    return 4294956417;
  }
  switch(a2)
  {
    case 846031203:
      uint64_t result = 0;
      *((unsigned char *)this + 1416) = *a5 != 0;
      break;
    case 1111:
      uint64_t result = 0;
      *((_DWORD *)this + 353) = *a5;
      break;
    case 21:
      if (a6 >= 4)
      {
        int v8 = *a5;
        int v9 = *a5 != 0;
        if (v9 != (*(unsigned int (**)(AUMicSelectorV2 *))(*(void *)this + 576))(this)) {
          (*(void (**)(AUMicSelectorV2 *, BOOL))(*(void *)this + 584))(this, v8 != 0);
        }
        return 0;
      }
      else
      {
        return 4294956445;
      }
    default:
      return 4294956417;
  }
  return result;
}

uint64_t AUMicSelectorV2::GetProperty(AUMicSelectorV2 *this, int a2, int a3, unsigned int a4, unsigned int *a5)
{
  if (!a3)
  {
    uint64_t v5 = 4294956417;
    if (a2 <= 3699)
    {
      if (a2 == 21)
      {
        unsigned int Parameter = (*(uint64_t (**)(AUMicSelectorV2 *))(*(void *)this + 576))(this);
      }
      else
      {
        if (a2 != 1111) {
          return v5;
        }
        unsigned int Parameter = *((_DWORD *)this + 353);
      }
    }
    else
    {
      switch(a2)
      {
        case 3700:
          unsigned int Parameter = *((unsigned __int8 *)this + 376);
          break;
        case 846031203:
          unsigned int Parameter = *((unsigned __int8 *)this + 1416);
          break;
        case 1869968493:
          uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMicSelectorV2 *)((char *)this + 32), 0);
          unsigned int Parameter = ausdk::AUElement::GetParameter(Element, 0x1Cu);
          break;
        default:
          return v5;
      }
    }
    uint64_t v5 = 0;
    *a5 = Parameter;
    return v5;
  }
  return 4294956417;
}

uint64_t AUMicSelectorV2::GetPropertyInfo(AUMicSelectorV2 *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3) {
    return 4294956417;
  }
  BOOL v7 = 1;
  uint64_t result = 4294956417;
  if (a2 > 3699)
  {
    if (a2 != 1869968493)
    {
      if (a2 == 846031203)
      {
LABEL_10:
        uint64_t result = 0;
        *a6 = v7;
        *a5 = 4;
        return result;
      }
      if (a2 != 3700) {
        return result;
      }
    }
    BOOL v7 = 0;
    goto LABEL_10;
  }
  if (a2 == 21 || a2 == 1111) {
    goto LABEL_10;
  }
  return result;
}

uint64_t AUMicSelectorV2::Reset(OpaqueAudioComponentInstance **this)
{
  AUMicSelectorV2::ClearState((AUMicSelectorV2 *)this);
  uint64_t v2 = 0;
  while (1)
  {
    uint64_t result = AudioUnitReset(this[v2 + 67], 0, 0);
    if (result) {
      break;
    }
    uint64_t result = AudioUnitReset(this[v2 + 94], 0, 0);
    if (result) {
      break;
    }
    if (++v2 == 3)
    {
      uint64_t v4 = this[121];
      return AudioUnitReset(v4, 0, 0);
    }
  }
  return result;
}

double AUMicSelectorV2::ClearState(AUMicSelectorV2 *this)
{
  uint64_t v2 = 0;
  int v3 = (_DWORD *)((char *)this + 1288);
  do
  {
    _DWORD *v3 = -1032847360;
    v3[3] = -1032847360;
    v3[6] = -1032847360;
    v3[22] = -1032847360;
    v3[25] = 0;
    float __A = -60.0;
    vDSP_vfill(&__A, *(float **)((char *)this + v2 + 1192), 1, *(unsigned int *)((char *)this + v2 + 1204));
    *(_DWORD *)((char *)this + v2 + 1200) = 0;
    v2 += 24;
    ++v3;
  }
  while (v2 != 72);
  __asm { FMOV            V0.2S, #1.0 }
  *((void *)this + 175) = _D0;
  *((_DWORD *)this + 331) = -1032847360;
  *((int32x2_t *)this + 166) = vdup_n_s32(0xC2700000);
  float v10 = -60.0;
  vDSP_vfill(&v10, *((float **)this + 158), 1, *((unsigned int *)this + 319));
  *((_DWORD *)this + 318) = 0;
  *((_DWORD *)this + 334) = 0;
  double result = 0.0;
  *((_OWORD *)this + 84) = 0u;
  *((_OWORD *)this + 85) = 0u;
  *((_DWORD *)this + 352) = 2;
  return result;
}

uint64_t AUMicSelectorV2::Cleanup(AUMicSelectorV2 *this)
{
  if (*((void *)this + 136))
  {
    (*((void (**)(_UNKNOWN **))ausdk::BufferAllocator::instance(void)::global + 3))(&ausdk::BufferAllocator::instance(void)::global);
    *((void *)this + 136) = 0;
  }
  *((void *)this + 137) = 0;
  *((_DWORD *)this + 270) = 0;
  if (*((void *)this + 144))
  {
    (*((void (**)(_UNKNOWN **))ausdk::BufferAllocator::instance(void)::global + 3))(&ausdk::BufferAllocator::instance(void)::global);
    *((void *)this + 144) = 0;
  }
  uint64_t v2 = 0;
  *((void *)this + 145) = 0;
  *((_DWORD *)this + 286) = 0;
  while (1)
  {
    uint64_t result = AudioUnitUninitialize(*(AudioUnit *)((char *)this + v2 + 536));
    if (result) {
      break;
    }
    uint64_t result = AudioUnitUninitialize(*(AudioUnit *)((char *)this + v2 + 752));
    if (result) {
      break;
    }
    v2 += 8;
    if (v2 == 24)
    {
      uint64_t v4 = (OpaqueAudioComponentInstance *)*((void *)this + 121);
      return AudioUnitUninitialize(v4);
    }
  }
  return result;
}

uint64_t AUMicSelectorV2::Initialize(AUMicSelectorV2 *this)
{
  uint64_t v2 = (AUMicSelectorV2 *)((char *)this + 80);
  double v3 = *(double *)(ausdk::AUScope::SafeGetElement((AUMicSelectorV2 *)((char *)this + 80), 0) + 80);
  if (v3 == *(double *)(ausdk::AUScope::SafeGetElement((AUMicSelectorV2 *)((char *)this + 128), 0) + 80))
  {
    uint64_t Element = ausdk::AUScope::SafeGetElement(v2, 0);
    uint64_t v6 = *(void *)(Element + 112);
    long long v7 = *(_OWORD *)(Element + 96);
    *((_OWORD *)this + 65) = *(_OWORD *)(Element + 80);
    *((_OWORD *)this + 66) = v7;
    *((void *)this + 134) = v6;
    ausdk::AUBufferList::Allocate((AUMicSelectorV2 *)((char *)this + 1080), (const AudioStreamBasicDescription *)this + 26, *((_DWORD *)this + 84));
    uint64_t v8 = ausdk::AUScope::SafeGetElement(v2, 0);
    uint64_t v9 = *(void *)(v8 + 112);
    long long v10 = *(_OWORD *)(v8 + 80);
    *((_OWORD *)this + 70) = *(_OWORD *)(v8 + 96);
    *((_OWORD *)this + 69) = v10;
    *((void *)this + 142) = v9;
    *((_DWORD *)this + 283) = 2;
    ausdk::AUBufferList::Allocate((AUMicSelectorV2 *)((char *)this + 1144), (const AudioStreamBasicDescription *)((char *)this + 1104), *((_DWORD *)this + 84));
    float v11 = *(double *)(ausdk::AUScope::SafeGetElement((AUMicSelectorV2 *)((char *)this + 128), 0) + 80)
        * 10.0
        / (float)*((unsigned int *)this + 84);
    AUMicSelectorV2::NoiseFloorDetectorV2::Initialize((AUMicSelectorV2 *)((char *)this + 1192), vcvtps_u32_f32(v11));
  }
  return 4294956428;
}

void AUMicSelectorV2::NoiseFloorDetectorV2::Initialize(AUMicSelectorV2::NoiseFloorDetectorV2 *this, unsigned int a2)
{
  if (a2 <= 1) {
    int v2 = 1;
  }
  else {
    int v2 = a2;
  }
  *((_DWORD *)this + 3) = v2;
  *((_DWORD *)this + 4) = v2;
  uint64_t v3 = *(void *)this;
  if (v3) {
    MEMORY[0x1C185D340](v3, 0x1000C8052888210);
  }
  operator new[]();
}

uint64_t SetDoNotAllocateInternalBuffers(OpaqueAudioComponentInstance *a1)
{
  UInt32 ioDataSize = 4;
  unsigned int outData = 0;
  if (!AudioUnitGetProperty(a1, 0xBu, 1u, 0, &outData, &ioDataSize) && outData)
  {
    for (unsigned int i = 0; i < outData; ++i)
    {
      int inData = 0;
      AudioUnitSetProperty(a1, 0x33u, 1u, 0, &inData, 4u);
    }
  }
  unsigned int outData = 0;
  uint64_t Property = AudioUnitGetProperty(a1, 0xBu, 2u, 0, &outData, &ioDataSize);
  if (!Property && outData)
  {
    for (unsigned int j = 0; j < outData; ++j)
    {
      int inData = 0;
      AudioUnitSetProperty(a1, 0x33u, 2u, 0, &inData, 4u);
    }
  }
  return Property;
}

void AUMicSelectorV2::~AUMicSelectorV2(AUMicSelectorV2 *this)
{
  AUMicSelectorV2::~AUMicSelectorV2(this);

  JUMPOUT(0x1C185D370);
}

{
  uint64_t v2;
  char *v3;
  OpaqueAudioComponentInstance *v4;
  OpaqueAudioComponentInstance *v5;
  OpaqueAudioComponentInstance *v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t vars8;

  int v2 = 0;
  *(void *)this = &unk_1F14ADDE8;
  do
  {
    uint64_t v3 = (char *)this + v2;
    uint64_t v4 = *(OpaqueAudioComponentInstance **)((char *)this + v2 + 536);
    if (v4)
    {
      AudioComponentInstanceDispose(v4);
      *((void *)v3 + 67) = 0;
    }
    uint64_t v5 = (OpaqueAudioComponentInstance *)*((void *)v3 + 94);
    if (v5)
    {
      AudioComponentInstanceDispose(v5);
      *((void *)v3 + 94) = 0;
    }
    v2 += 8;
  }
  while (v2 != 24);
  uint64_t v6 = (OpaqueAudioComponentInstance *)*((void *)this + 121);
  if (v6)
  {
    AudioComponentInstanceDispose(v6);
    *((void *)this + 121) = 0;
  }
  (*(void (**)(AUMicSelectorV2 *))(*(void *)this + 64))(this);
  long long v7 = *((void *)this + 158);
  if (v7) {
    MEMORY[0x1C185D340](v7, 0x1000C8052888210);
  }
  *((void *)this + 158) = 0;
  for (unsigned int i = 1240; i != 1168; i -= 24)
  {
    uint64_t v9 = *(void *)((char *)this + i);
    if (v9) {
      MEMORY[0x1C185D340](v9, 0x1000C8052888210);
    }
    *(void *)((char *)this + i) = 0;
  }
  if (*((void *)this + 144))
  {
    (*((void (**)(_UNKNOWN **))ausdk::BufferAllocator::instance(void)::global + 3))(&ausdk::BufferAllocator::instance(void)::global);
    *((void *)this + 144) = 0;
  }
  *((void *)this + 145) = 0;
  *((_DWORD *)this + 286) = 0;
  if (*((void *)this + 136))
  {
    (*((void (**)(_UNKNOWN **))ausdk::BufferAllocator::instance(void)::global + 3))(&ausdk::BufferAllocator::instance(void)::global);
    *((void *)this + 136) = 0;
  }
  *((void *)this + 137) = 0;
  *((_DWORD *)this + 270) = 0;

  ausdk::AUBase::~AUBase(this);
}

void ScottyLite::STFT_state_t::~STFT_state_t(ScottyLite::STFT_state_t *this)
{
  int v2 = (void *)*((void *)this + 52);
  if (v2)
  {
    *((void *)this + 53) = v2;
    operator delete(v2);
  }
  for (uint64_t i = 0; i != -72; i -= 24)
  {
    uint64_t v4 = *(void **)((char *)this + i + 384);
    if (v4)
    {
      *(void *)((char *)this + i + 392) = v4;
      operator delete(v4);
    }
  }
  for (uint64_t j = 0; j != -72; j -= 24)
  {
    uint64_t v6 = *(void **)((char *)this + j + 312);
    if (v6)
    {
      *(void *)((char *)this + j + 320) = v6;
      operator delete(v6);
    }
  }
  for (uint64_t k = 0; k != -144; k -= 24)
  {
    uint64_t v8 = *(void **)((char *)this + k + 240);
    if (v8)
    {
      *(void *)((char *)this + k + 248) = v8;
      operator delete(v8);
    }
  }
  for (uint64_t m = 0; m != -72; m -= 24)
  {
    long long v10 = *(void **)((char *)this + m + 96);
    if (v10)
    {
      *(void *)((char *)this + m + 104) = v10;
      operator delete(v10);
    }
  }
  for (uint64_t n = 0; n != -48; n -= 24)
  {
    float v12 = *(void **)((char *)this + n + 24);
    if (v12)
    {
      *(void *)((char *)this + n + 32) = v12;
      operator delete(v12);
    }
  }
}

void ScottyLite::UnInitialize(ScottyLite *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (getScottyLog(void)::onceToken != -1) {
    dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_33998);
  }
  int v2 = getScottyLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = (void *)((char *)this + 760);
    if (*((char *)this + 783) < 0) {
      uint64_t v3 = (void *)*v3;
    }
    int v7 = 136315394;
    uint64_t v8 = v3;
    __int16 v9 = 2080;
    long long v10 = "UnInitialize";
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEFAULT, "[%s|%s] Uninitializing ScottyLite", (uint8_t *)&v7, 0x16u);
  }
  *((unsigned char *)this + 756) = 0;
  uint64_t v4 = *((void *)this + 58);
  *((void *)this + 58) = 0;
  if (v4) {
    MultiRadixFFT_Dispose(v4);
  }
  std::vector<float>::resize((uint64_t)this + 440, 0);
  std::vector<float>::resize((uint64_t)this + 24, 0);
  std::vector<float>::resize((uint64_t)this + 616, 0);
  std::vector<float>::resize((uint64_t)this + 48, 0);
  std::vector<float>::resize((uint64_t)this + 640, 0);
  uint64_t v5 = -72;
  do
  {
    std::vector<float>::resize((uint64_t)this + v5 + 144, 0);
    std::vector<float>::resize((uint64_t)this + v5 + 360, 0);
    std::vector<float>::resize((uint64_t)this + v5 + 432, 0);
    std::vector<float>::resize((uint64_t)this + v5 + 736, 0);
    v5 += 24;
  }
  while (v5);
  for (uint64_t i = 144; i != 288; i += 24)
    std::vector<float>::resize((uint64_t)this + i, 0);
  *(_OWORD *)((char *)this + 584) = 0u;
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 568) = 0u;
  std::vector<float>::resize((uint64_t)this, 0);
}

uint64_t EndpointVADObservationFeatures::GetFeatureDimensions(EndpointVADObservationFeatures *this)
{
  uint64_t result = EndpointVADObservationFeatures::GetFeatureDimensions(void)::featureDimensions;
  if (!EndpointVADObservationFeatures::GetFeatureDimensions(void)::featureDimensions) {
    operator new();
  }
  return result;
}

uint64_t AUSM::Properties::setPropertyDictionary(AUSM::Properties *this, CFDictionaryRef *a2, uint64_t a3)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  if (getAUSMV2Log(void)::onceToken != -1) {
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
  }
  uint64_t v6 = getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    float v44 = (void *)((char *)this + 8);
    if (*((char *)this + 31) < 0) {
      float v44 = (void *)*v44;
    }
    int v45 = *((_DWORD *)this + 8);
    int v46 = *((_DWORD *)this + 9);
    *(_DWORD *)AudioChannelLayout __p = 136315650;
    *(void *)&__p[4] = v44;
    __int16 v65 = 1024;
    int v66 = v45;
    __int16 v67 = 1024;
    int v68 = v46;
    _os_log_debug_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_DEBUG, "[%s|setPropertyDictionary] (scope=%u, element=%u): ", __p, 0x18u);
  }
  CFIndex Count = CFDictionaryGetCount(*a2);
  std::vector<__CFString const*>::vector(&keys, Count);
  CFDictionaryGetKeysAndValues(*a2, (const void **)keys, 0);
  uint64_t v8 = keys;
  __int16 v9 = v63;
  if (keys != v63)
  {
    uint64_t v10 = 0;
    uint64_t v60 = (char **)((char *)this + 8);
    while (1)
    {
      IntCFNumberRef Value = CFStringGetIntValue((CFStringRef)*v8);
      if (!IntValue)
      {
        if (CFEqual((CFStringRef)*v8, @"ElementNumber")) {
          goto LABEL_47;
        }
        if (CFStringCompare((CFStringRef)*v8, @"LFELowPassFrequency", 0)) {
          IntCFNumberRef Value = 0;
        }
        else {
          IntCFNumberRef Value = 3108;
        }
      }
      CFNumberRef Value = CFDictionaryGetValue(*a2, *v8);
      CFTypeID v13 = CFGetTypeID(Value);
      if (v13 == CFNumberGetTypeID())
      {
        if (!*a2)
        {
          exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
        }
        unsigned int v14 = applesauce::CF::details::at_key<__CFString const* const&>(*a2, *v8);
        if (!v14)
        {
          CFStringRef v47 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v47, "Could not find item");
        }
        float v15 = v14;
        CFRetain(v14);
        applesauce::CF::NumberRef::NumberRef((applesauce::CF::NumberRef *)&number, v15);
        CFNumberType Type = CFNumberGetType(number);
        if ((unint64_t)Type > kCFNumberFloatType) {
          goto LABEL_55;
        }
        if (((1 << Type) & 0x218) != 0)
        {
          *(_DWORD *)AudioChannelLayout __p = 0;
          if (!number)
          {
            uint64_t v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v51, "Could not construct");
          }
          *(_DWORD *)AudioChannelLayout __p = applesauce::CF::convert_to<unsigned int,0>(number);
          uint64_t v17 = (*(uint64_t (**)(AUSM::Properties *, uint64_t, unsigned char *, uint64_t, uint64_t))(*(void *)this
                                                                                                  + 16))(this, IntValue, __p, 4, a3);
LABEL_37:
          uint64_t v21 = v17;
        }
        else
        {
          if (((1 << Type) & 0x1060) != 0)
          {
            *(_DWORD *)AudioChannelLayout __p = 0;
            if (!number)
            {
              float v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v52, "Could not construct");
            }
            *(_DWORD *)AudioChannelLayout __p = applesauce::CF::convert_to<float,0>(number);
            uint64_t v17 = (*(uint64_t (**)(AUSM::Properties *, uint64_t, unsigned char *, uint64_t, uint64_t))(*(void *)this + 16))(this, IntValue, __p, 4, a3);
            goto LABEL_37;
          }
LABEL_55:
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          __int16 v30 = getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
          {
            float v37 = (char *)this + 8;
            if (*((char *)this + 31) < 0) {
              float v37 = *v60;
            }
            int v38 = *((_DWORD *)this + 8);
            int v39 = *((_DWORD *)this + 9);
            *(_DWORD *)AudioChannelLayout __p = 136315906;
            *(void *)&__p[4] = v37;
            __int16 v65 = 1024;
            int v66 = v38;
            __int16 v67 = 1024;
            int v68 = v39;
            __int16 v69 = 1024;
            int v70 = IntValue;
            _os_log_error_impl(&dword_1BB0CE000, v30, OS_LOG_TYPE_ERROR, "[%s|setPropertyDictionary] (scope=%u, element=%u): unsupported number type for dictionary entry %u", __p, 0x1Eu);
          }
          uint64_t v21 = 4294956445;
        }
        CFNumberRef v24 = number;
        if (!number) {
          goto LABEL_40;
        }
        goto LABEL_39;
      }
      if (v13 == CFStringGetTypeID())
      {
        if (!*a2)
        {
          uint64_t v49 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v49, "Could not construct");
        }
        CFStringRef v18 = (const __CFString *)applesauce::CF::details::at_key<__CFString const* const&>(*a2, *v8);
        if (!v18)
        {
          uint64_t v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v50, "Could not find item");
        }
        applesauce::CF::convert_to<std::string,0>(v18, (uint64_t)__p);
        if (v68 >= 0) {
          CFStringRef v19 = __p;
        }
        else {
          CFStringRef v19 = *(unsigned char **)__p;
        }
        if (v68 >= 0) {
          uint64_t v20 = HIBYTE(v68);
        }
        else {
          uint64_t v20 = *(unsigned int *)&__p[8];
        }
        uint64_t v21 = (*(uint64_t (**)(AUSM::Properties *, uint64_t, unsigned char *, uint64_t, uint64_t))(*(void *)this + 16))(this, IntValue, v19, v20, a3);
        if (SHIBYTE(v68) < 0) {
          operator delete(*(void **)__p);
        }
        goto LABEL_40;
      }
      if (v13 == CFURLGetTypeID())
      {
        if (!*a2)
        {
          CFStringRef v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v54, "Could not construct");
        }
        CFStringRef v22 = applesauce::CF::details::at_key<__CFString const* const&>(*a2, *v8);
        if (!v22)
        {
          float v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v53, "Could not find item");
        }
        CFStringRef v23 = v22;
        CFRetain(v22);
        applesauce::CF::URLRef::URLRef((applesauce::CF::URLRef *)__p, v23);
        uint64_t v21 = (*(uint64_t (**)(AUSM::Properties *, uint64_t, void, uint64_t, uint64_t))(*(void *)this + 16))(this, IntValue, *(void *)__p, 8, a3);
        CFNumberRef v24 = *(CFNumberRef *)__p;
        if (*(void *)__p) {
          goto LABEL_39;
        }
      }
      else
      {
        if (v13 == CFDataGetTypeID())
        {
          if (!*a2)
          {
            uint64_t v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v56, "Could not construct");
          }
          float v26 = applesauce::CF::details::at_key<__CFString const* const&>(*a2, *v8);
          if (!v26)
          {
            unsigned int v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v55, "Could not find item");
          }
          std::string::size_type v27 = v26;
          CFRetain(v26);
          applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)__p, v27);
          if (*(void *)__p)
          {
            BytePtr = CFDataGetBytePtr(*(CFDataRef *)__p);
            if (*(void *)__p)
            {
              CFIndex Length = CFDataGetLength(*(CFDataRef *)__p);
              goto LABEL_69;
            }
          }
          else
          {
            BytePtr = 0;
          }
          CFIndex Length = 0;
LABEL_69:
          uint64_t v21 = (*(uint64_t (**)(AUSM::Properties *, uint64_t, const UInt8 *, CFIndex, uint64_t))(*(void *)this + 16))(this, IntValue, BytePtr, Length, a3);
          CFNumberRef v24 = *(CFNumberRef *)__p;
          if (*(void *)__p) {
            goto LABEL_39;
          }
          goto LABEL_40;
        }
        if (v13 != CFBooleanGetTypeID())
        {
          if (v13 != CFDictionaryGetTypeID())
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            float v36 = getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
            {
              CFStringRef v40 = (char *)this + 8;
              if (*((char *)this + 31) < 0) {
                CFStringRef v40 = *v60;
              }
              int v41 = *((_DWORD *)this + 8);
              int v42 = *((_DWORD *)this + 9);
              *(_DWORD *)AudioChannelLayout __p = 136315906;
              *(void *)&__p[4] = v40;
              __int16 v65 = 1024;
              int v66 = v41;
              __int16 v67 = 1024;
              int v68 = v42;
              __int16 v69 = 1024;
              int v70 = IntValue;
              _os_log_error_impl(&dword_1BB0CE000, v36, OS_LOG_TYPE_ERROR, "[%s|setPropertyDictionary] (scope=%u, element=%u): unsupported data type for dictionary entry %u", __p, 0x1Eu);
            }
            uint64_t v21 = 4294956445;
            goto LABEL_46;
          }
          if (!*a2)
          {
            float v59 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v59, "Could not construct");
          }
          int v31 = applesauce::CF::details::at_key<__CFString const* const&>(*a2, *v8);
          if (!v31)
          {
            long long v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v58, "Could not find item");
          }
          __int16 v32 = v31;
          CFRetain(v31);
          applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)__p, v32);
          CFNumberRef number = *(CFNumberRef *)__p;
          uint64_t v21 = (*(uint64_t (**)(AUSM::Properties *, uint64_t, CFNumberRef *, uint64_t, uint64_t))(*(void *)this + 16))(this, IntValue, &number, 8, a3);
          CFNumberRef v24 = *(CFNumberRef *)__p;
          if (!*(void *)__p) {
            goto LABEL_40;
          }
LABEL_39:
          CFRelease(v24);
          goto LABEL_40;
        }
        *(_DWORD *)AudioChannelLayout __p = 0;
        if (!*a2)
        {
          float v57 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v57, "Could not construct");
        }
        *(_DWORD *)AudioChannelLayout __p = applesauce::CF::details::find_at_key<BOOL,__CFString const* const&>(*a2, *v8);
        uint64_t v21 = (*(uint64_t (**)(AUSM::Properties *, uint64_t, unsigned char *, uint64_t, uint64_t))(*(void *)this + 16))(this, IntValue, __p, 4, a3);
      }
LABEL_40:
      if (v21)
      {
        if (v21 == -10879)
        {
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          std::string::size_type v25 = getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
          {
            CFStringRef v33 = (char *)this + 8;
            if (*((char *)this + 31) < 0) {
              CFStringRef v33 = *v60;
            }
            int v34 = *((_DWORD *)this + 8);
            int v35 = *((_DWORD *)this + 9);
            *(_DWORD *)AudioChannelLayout __p = 136315906;
            *(void *)&__p[4] = v33;
            __int16 v65 = 1024;
            int v66 = v34;
            __int16 v67 = 1024;
            int v68 = v35;
            __int16 v69 = 1024;
            int v70 = IntValue;
            _os_log_error_impl(&dword_1BB0CE000, v25, OS_LOG_TYPE_ERROR, "[%s|setPropertyDictionary] (scope=%u, element=%u): invalid property ID %u", __p, 0x1Eu);
          }
          uint64_t v21 = 4294956417;
        }
LABEL_46:
        uint64_t v10 = v21;
      }
LABEL_47:
      if (++v8 == v9)
      {
        uint64_t v8 = keys;
        if (keys) {
          goto LABEL_85;
        }
        return v10;
      }
    }
  }
  uint64_t v10 = 0;
  if (keys)
  {
LABEL_85:
    double v63 = v8;
    operator delete(v8);
  }
  return v10;
}

void sub_1BB4509CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<__CFString const*>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 61) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v4 = 8 * a2;
    uint64_t v5 = (char *)operator new(8 * a2);
    *a1 = v5;
    a1[2] = &v5[8 * a2];
    bzero(v5, 8 * a2);
    a1[1] = &v5[v4];
  }
  return a1;
}

void sub_1BB450BA8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL applesauce::CF::details::find_at_key<BOOL,__CFString const* const&>(const __CFDictionary *a1, const void *a2)
{
  CFNumberRef v2 = (const __CFNumber *)applesauce::CF::details::at_key<__CFString const* const&>(a1, a2);
  if (!v2)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
  }

  return applesauce::CF::convert_to<BOOL,0>(v2);
}

void sub_1BB450C2C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

const void *applesauce::CF::details::at_key<__CFString const* const&>(CFDictionaryRef theDict, const void *a2)
{
  uint64_t result = 0;
  if (theDict)
  {
    if (a2) {
      return CFDictionaryGetValue(theDict, a2);
    }
  }
  return result;
}

void AUSM::Properties::createFullPropertyDictionary(AUSM::Properties *this@<X0>, __CFDictionary **a2@<X8>)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v5 = (char *)*((void *)this + 5);
  uint64_t v6 = (char *)this + 48;
  if (v5 != (char *)this + 48)
  {
    while (1)
    {
      (*(void (**)(void **__return_ptr))(**((void **)v5 + 5) + 88))(&value);
      if (value) {
        break;
      }
LABEL_15:
      uint64_t v11 = (char *)*((void *)v5 + 1);
      if (v11)
      {
        do
        {
          float v12 = v11;
          uint64_t v11 = *(char **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          float v12 = (char *)*((void *)v5 + 2);
          BOOL v13 = *(void *)v12 == (void)v5;
          uint64_t v5 = v12;
        }
        while (!v13);
      }
      uint64_t v5 = v12;
      if (v12 == v6) {
        goto LABEL_24;
      }
    }
    std::to_string(&v16, *((_DWORD *)v5 + 8));
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v7 = &v16;
    }
    else {
      int v7 = (std::string *)v16.__r_.__value_.__r.__words[0];
    }
    if (v7)
    {
      if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        CFIndex size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
      }
      else {
        CFIndex size = v16.__r_.__value_.__l.__size_;
      }
      CFStringRef v9 = CFStringCreateWithBytes(0, (const UInt8 *)v7, size, 0x8000100u, 0);
      if (!v9)
      {
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      if ((*((unsigned char *)&v16.__r_.__value_.__s + 23) & 0x80) == 0) {
        goto LABEL_13;
      }
    }
    else
    {
      CFStringRef v9 = 0;
      if ((*((unsigned char *)&v16.__r_.__value_.__s + 23) & 0x80) == 0)
      {
LABEL_13:
        uint64_t v10 = value;
        uint64_t v17 = 0;
        value = 0;
        CFDictionaryAddValue(Mutable, v9, v10);
        if (value) {
          CFRelease(value);
        }
        goto LABEL_15;
      }
    }
    operator delete(v16.__r_.__value_.__l.__data_);
    goto LABEL_13;
  }
LABEL_24:
  if (Mutable && (CFTypeID v14 = CFGetTypeID(Mutable), v14 != CFDictionaryGetTypeID()))
  {
    *a2 = 0;
    CFRelease(Mutable);
  }
  else
  {
    *a2 = Mutable;
  }
}

void sub_1BB450E58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, int a17, const void *a18)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  applesauce::CF::TypeRef::~TypeRef(&a18);
  _Unwind_Resume(a1);
}

void AUSM::Properties::createPropertyDictionaryForSaveState(AUSM::Properties *this@<X0>, __CFDictionary **a2@<X8>)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v5 = (AUSM::Properties *)*((void *)this + 5);
  if (v5 == (AUSM::Properties *)((char *)this + 48)) {
    goto LABEL_31;
  }
  char v6 = 0;
  do
  {
    int v7 = (unsigned char *)*((void *)v5 + 5);
    if (!v7[16]) {
      goto LABEL_20;
    }
    (*(void (**)(void **__return_ptr))(*(void *)v7 + 88))(&value);
    if (!value) {
      goto LABEL_20;
    }
    std::to_string(&v17, *((_DWORD *)v5 + 8));
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v8 = &v17;
    }
    else {
      uint64_t v8 = (std::string *)v17.__r_.__value_.__r.__words[0];
    }
    if (v8)
    {
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        CFIndex size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
      }
      else {
        CFIndex size = v17.__r_.__value_.__l.__size_;
      }
      CFStringRef v10 = CFStringCreateWithBytes(0, (const UInt8 *)v8, size, 0x8000100u, 0);
      CFStringRef v18 = v10;
      if (!v10)
      {
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      if ((*((unsigned char *)&v17.__r_.__value_.__s + 23) & 0x80) == 0) {
        goto LABEL_15;
      }
    }
    else
    {
      CFStringRef v10 = 0;
      CFStringRef v18 = 0;
      if ((*((unsigned char *)&v17.__r_.__value_.__s + 23) & 0x80) == 0) {
        goto LABEL_15;
      }
    }
    operator delete(v17.__r_.__value_.__l.__data_);
LABEL_15:
    CFDictionaryAddValue(Mutable, v10, value);
    if (v10) {
      CFRelease(v10);
    }
    if (value) {
      CFRelease(value);
    }
    char v6 = 1;
LABEL_20:
    uint64_t v11 = (AUSM::Properties *)*((void *)v5 + 1);
    if (v11)
    {
      do
      {
        float v12 = v11;
        uint64_t v11 = *(AUSM::Properties **)v11;
      }
      while (v11);
    }
    else
    {
      do
      {
        float v12 = (AUSM::Properties *)*((void *)v5 + 2);
        BOOL v13 = *(void *)v12 == (void)v5;
        uint64_t v5 = v12;
      }
      while (!v13);
    }
    uint64_t v5 = v12;
  }
  while (v12 != (AUSM::Properties *)((char *)this + 48));
  if (((*((_DWORD *)this + 8) == 1) & v6) != 0)
  {
    CFNumberRef v14 = CFNumberCreate(0, kCFNumberIntType, (char *)this + 36);
    CFDictionaryAddValue(Mutable, @"ElementNumber", v14);
    CFRelease(v14);
  }
LABEL_31:
  if (Mutable && (CFTypeID v15 = CFGetTypeID(Mutable), v15 != CFDictionaryGetTypeID()))
  {
    *a2 = 0;
    CFRelease(Mutable);
  }
  else
  {
    *a2 = Mutable;
  }
}

void sub_1BB4510FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, int a17, const void *a18)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  applesauce::CF::TypeRef::~TypeRef(&a18);
  _Unwind_Resume(a1);
}

uint64_t AUSM::Properties::setProperty(AUSM::Properties *this, uint64_t a2, CFTypeRef *a3, uint64_t a4, uint64_t a5)
{
  *(void *)&v96[5] = *MEMORY[0x1E4F143B8];
  if (a2 != 5000)
  {
    uint64_t v11 = (char *)*((void *)this + 6);
    if (!v11) {
      return 4294956417;
    }
    BOOL v13 = (char *)this + 48;
    do
    {
      unsigned int v14 = *((_DWORD *)v11 + 8);
      BOOL v15 = v14 >= a2;
      if (v14 >= a2) {
        std::string v16 = (char **)v11;
      }
      else {
        std::string v16 = (char **)(v11 + 8);
      }
      if (v15) {
        BOOL v13 = v11;
      }
      uint64_t v11 = *v16;
    }
    while (*v16);
    if (v13 == (char *)this + 48 || *((_DWORD *)v13 + 8) > a2) {
      return 4294956417;
    }
    uint64_t v19 = *((void *)v13 + 5);
    uint64_t v20 = (*(uint64_t (**)(void))(**((void **)this + 8) + 8))(*((void *)this + 8));
    switch((*(unsigned int (**)(uint64_t, CFTypeRef *, uint64_t, uint64_t))(*(void *)v19 + 32))(v19, a3, a4, v20))
    {
      case 0u:
      case 2u:
        if (a5) {
          return 0;
        }
        int v21 = *(_DWORD *)(*((void *)v13 + 5) + 12);
        if (v21 == 1)
        {
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          __int16 v65 = getAUSMV2Log(void)::gLog;
          if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG)) {
            return 0;
          }
          float v81 = (void *)((char *)this + 8);
          if (*((char *)this + 31) < 0) {
            float v81 = (void *)*v81;
          }
          int v83 = *((_DWORD *)this + 8);
          int v82 = *((_DWORD *)this + 9);
          uint64_t v84 = (*(uint64_t (**)(void))(**((void **)v13 + 5) + 80))(*((void *)v13 + 5));
          if (*(char *)(v84 + 23) >= 0) {
            uint64_t v85 = v84;
          }
          else {
            uint64_t v85 = *(void *)v84;
          }
          (*(void (**)(void **__return_ptr))(**((void **)v13 + 5) + 96))(__p);
          if (v88 >= 0) {
            uint64_t v86 = __p;
          }
          else {
            uint64_t v86 = (void **)__p[0];
          }
          *(_DWORD *)AudioChannelLayout buf = 136316162;
          *(void *)&uint8_t buf[4] = v81;
          __int16 v90 = 1024;
          int v91 = v83;
          __int16 v92 = 1024;
          int v93 = v82;
          __int16 v94 = 2080;
          *(void *)float v95 = v85;
          *(_WORD *)&v95[8] = 2080;
          *(void *)float v96 = v86;
          _os_log_debug_impl(&dword_1BB0CE000, v65, OS_LOG_TYPE_DEBUG, "[%s|setProperty] (scope=%u, element=%u): %s = %s (not changed)", buf, 0x2Cu);
        }
        else
        {
          if (v21) {
            return 0;
          }
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          CFStringRef v22 = getAUSMV2Log(void)::gLog;
          uint64_t v17 = 0;
          if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT)) {
            return v17;
          }
          CFStringRef v23 = (void *)((char *)this + 8);
          if (*((char *)this + 31) < 0) {
            CFStringRef v23 = (void *)*v23;
          }
          int v25 = *((_DWORD *)this + 8);
          int v24 = *((_DWORD *)this + 9);
          uint64_t v26 = (*(uint64_t (**)(void))(**((void **)v13 + 5) + 80))(*((void *)v13 + 5));
          if (*(char *)(v26 + 23) >= 0) {
            uint64_t v27 = v26;
          }
          else {
            uint64_t v27 = *(void *)v26;
          }
          (*(void (**)(void **__return_ptr))(**((void **)v13 + 5) + 96))(__p);
          if (v88 >= 0) {
            char v28 = __p;
          }
          else {
            char v28 = (void **)__p[0];
          }
          *(_DWORD *)AudioChannelLayout buf = 136316162;
          *(void *)&uint8_t buf[4] = v23;
          __int16 v90 = 1024;
          int v91 = v25;
          __int16 v92 = 1024;
          int v93 = v24;
          __int16 v94 = 2080;
          *(void *)float v95 = v27;
          *(_WORD *)&v95[8] = 2080;
          *(void *)float v96 = v28;
          _os_log_impl(&dword_1BB0CE000, v22, OS_LOG_TYPE_DEFAULT, "[%s|setProperty] (scope=%u, element=%u): %s = %s (not changed)", buf, 0x2Cu);
        }
        if (v88 < 0) {
          operator delete(__p[0]);
        }
        return 0;
      case 1u:
        if (*(_DWORD *)(*((void *)v13 + 5) + 12) <= 2u)
        {
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          float v36 = getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
          {
            float v37 = (void *)((char *)this + 8);
            if (*((char *)this + 31) < 0) {
              float v37 = (void *)*v37;
            }
            int v39 = *((_DWORD *)this + 8);
            int v38 = *((_DWORD *)this + 9);
            uint64_t v40 = (*(uint64_t (**)(void))(**((void **)v13 + 5) + 80))(*((void *)v13 + 5));
            if (*(char *)(v40 + 23) >= 0) {
              uint64_t v41 = v40;
            }
            else {
              uint64_t v41 = *(void *)v40;
            }
            (*(void (**)(void **__return_ptr))(**((void **)v13 + 5) + 96))(__p);
            if (v88 >= 0) {
              int v42 = __p;
            }
            else {
              int v42 = (void **)__p[0];
            }
            *(_DWORD *)AudioChannelLayout buf = 136316162;
            *(void *)&uint8_t buf[4] = v37;
            __int16 v90 = 1024;
            int v91 = v39;
            __int16 v92 = 1024;
            int v93 = v38;
            __int16 v94 = 2080;
            *(void *)float v95 = v41;
            *(_WORD *)&v95[8] = 2080;
            *(void *)float v96 = v42;
            _os_log_impl(&dword_1BB0CE000, v36, OS_LOG_TYPE_DEFAULT, "[%s|setProperty] (scope=%u, element=%u): %s = %s", buf, 0x2Cu);
            if (v88 < 0) {
              operator delete(__p[0]);
            }
          }
        }
        return (***((uint64_t (****)(void, uint64_t))this + 8))(*((void *)this + 8), a2);
      case 3u:
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        uint64_t v43 = getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
        {
          float v44 = (void *)((char *)this + 8);
          if (*((char *)this + 31) < 0) {
            float v44 = (void *)*v44;
          }
          int v46 = *((_DWORD *)this + 8);
          int v45 = *((_DWORD *)this + 9);
          uint64_t v47 = (*(uint64_t (**)(void))(**((void **)v13 + 5) + 80))(*((void *)v13 + 5));
          if (*(char *)(v47 + 23) >= 0) {
            uint64_t v48 = v47;
          }
          else {
            uint64_t v48 = *(void *)v47;
          }
          *(_DWORD *)AudioChannelLayout buf = 136315906;
          *(void *)&uint8_t buf[4] = v44;
          __int16 v90 = 1024;
          int v91 = v46;
          __int16 v92 = 1024;
          int v93 = v45;
          __int16 v94 = 2080;
          *(void *)float v95 = v48;
          _os_log_impl(&dword_1BB0CE000, v43, OS_LOG_TYPE_DEFAULT, "[%s|setProperty] (scope=%u, element=%u): %s value out of range", buf, 0x22u);
        }
        return 4294956445;
      case 4u:
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        uint64_t v49 = getAUSMV2Log(void)::gLog;
        if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR)) {
          return 4294956445;
        }
        uint64_t v50 = (void *)((char *)this + 8);
        if (*((char *)this + 31) < 0) {
          uint64_t v50 = (void *)*v50;
        }
        int v52 = *((_DWORD *)this + 8);
        int v51 = *((_DWORD *)this + 9);
        uint64_t v53 = (*(uint64_t (**)(void))(**((void **)v13 + 5) + 80))(*((void *)v13 + 5));
        if (*(char *)(v53 + 23) >= 0) {
          uint64_t v54 = v53;
        }
        else {
          uint64_t v54 = *(void *)v53;
        }
        int v55 = (*(uint64_t (**)(void))(**((void **)v13 + 5) + 16))(*((void *)v13 + 5));
        *(_DWORD *)AudioChannelLayout buf = 136316418;
        *(void *)&uint8_t buf[4] = v50;
        __int16 v90 = 1024;
        int v91 = v52;
        __int16 v92 = 1024;
        int v93 = v51;
        __int16 v94 = 2080;
        *(void *)float v95 = v54;
        *(_WORD *)&v95[8] = 1024;
        v96[0] = a4;
        LOWORD(v96[1]) = 1024;
        *(_DWORD *)((char *)&v96[1] + 2) = v55;
        CFStringRef v33 = "[%s|setProperty] (scope=%u, element=%u): %s: invalid size %u, expected %u";
        int v34 = v49;
        uint32_t v35 = 46;
        goto LABEL_47;
      case 5u:
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        uint64_t v56 = getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
        {
          int v66 = (void *)((char *)this + 8);
          if (*((char *)this + 31) < 0) {
            int v66 = (void *)*v66;
          }
          int v68 = *((_DWORD *)this + 8);
          int v67 = *((_DWORD *)this + 9);
          uint64_t v69 = (*(uint64_t (**)(void))(**((void **)v13 + 5) + 80))(*((void *)v13 + 5));
          if (*(char *)(v69 + 23) >= 0) {
            uint64_t v70 = v69;
          }
          else {
            uint64_t v70 = *(void *)v69;
          }
          *(_DWORD *)AudioChannelLayout buf = 136315906;
          *(void *)&uint8_t buf[4] = v66;
          __int16 v90 = 1024;
          int v91 = v68;
          __int16 v92 = 1024;
          int v93 = v67;
          __int16 v94 = 2080;
          *(void *)float v95 = v70;
          _os_log_error_impl(&dword_1BB0CE000, v56, OS_LOG_TYPE_ERROR, "[%s|setProperty] (scope=%u, element=%u): %s not writable", buf, 0x22u);
        }
        return 4294956431;
      case 6u:
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        float v57 = getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
        {
          uint64_t v71 = (void *)((char *)this + 8);
          if (*((char *)this + 31) < 0) {
            uint64_t v71 = (void *)*v71;
          }
          int v73 = *((_DWORD *)this + 8);
          int v72 = *((_DWORD *)this + 9);
          uint64_t v74 = (*(uint64_t (**)(void))(**((void **)v13 + 5) + 80))(*((void *)v13 + 5));
          if (*(char *)(v74 + 23) >= 0) {
            uint64_t v75 = v74;
          }
          else {
            uint64_t v75 = *(void *)v74;
          }
          *(_DWORD *)AudioChannelLayout buf = 136315906;
          *(void *)&uint8_t buf[4] = v71;
          __int16 v90 = 1024;
          int v91 = v73;
          __int16 v92 = 1024;
          int v93 = v72;
          __int16 v94 = 2080;
          *(void *)float v95 = v75;
          _os_log_error_impl(&dword_1BB0CE000, v57, OS_LOG_TYPE_ERROR, "[%s|setProperty] (scope=%u, element=%u): %s not writable after the AU is initialized", buf, 0x22u);
        }
        return 4294956447;
      case 7u:
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        uint64_t v58 = getAUSMV2Log(void)::gLog;
        if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR)) {
          return 4294956445;
        }
        float v59 = (void *)((char *)this + 8);
        if (*((char *)this + 31) < 0) {
          float v59 = (void *)*v59;
        }
        int v61 = *((_DWORD *)this + 8);
        int v60 = *((_DWORD *)this + 9);
        uint64_t v62 = (*(uint64_t (**)(void))(**((void **)v13 + 5) + 80))(*((void *)v13 + 5));
        if (*(char *)(v62 + 23) >= 0) {
          uint64_t v63 = v62;
        }
        else {
          uint64_t v63 = *(void *)v62;
        }
        *(_DWORD *)AudioChannelLayout buf = 136315906;
        *(void *)&uint8_t buf[4] = v59;
        __int16 v90 = 1024;
        int v91 = v61;
        __int16 v92 = 1024;
        int v93 = v60;
        __int16 v94 = 2080;
        *(void *)float v95 = v63;
        CFStringRef v33 = "[%s|setProperty] (scope=%u, element=%u): %s: file not found";
        int v34 = v58;
        uint32_t v35 = 34;
        goto LABEL_47;
      case 8u:
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        size_t v64 = getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
        {
          float v76 = (void *)((char *)this + 8);
          if (*((char *)this + 31) < 0) {
            float v76 = (void *)*v76;
          }
          int v78 = *((_DWORD *)this + 8);
          int v77 = *((_DWORD *)this + 9);
          uint64_t v79 = (*(uint64_t (**)(void))(**((void **)v13 + 5) + 80))(*((void *)v13 + 5));
          if (*(char *)(v79 + 23) >= 0) {
            uint64_t v80 = v79;
          }
          else {
            uint64_t v80 = *(void *)v79;
          }
          *(_DWORD *)AudioChannelLayout buf = 136315906;
          *(void *)&uint8_t buf[4] = v76;
          __int16 v90 = 1024;
          int v91 = v78;
          __int16 v92 = 1024;
          int v93 = v77;
          __int16 v94 = 2080;
          *(void *)float v95 = v80;
          _os_log_error_impl(&dword_1BB0CE000, v64, OS_LOG_TYPE_ERROR, "[%s|setProperty] (scope=%u, element=%u): %s internal error: setter not implemented", buf, 0x22u);
        }
        return 4294956446;
      default:
        return 0;
    }
  }
  if (a4 == 8)
  {
    CFTypeRef v9 = *a3;
    if (*a3 && (CFRetain(*a3), CFTypeID v10 = CFGetTypeID(v9), v10 != CFDictionaryGetTypeID()))
    {
      *(void *)AudioChannelLayout buf = 0;
      CFRelease(v9);
    }
    else
    {
      *(void *)AudioChannelLayout buf = v9;
    }
    uint64_t v17 = (*(uint64_t (**)(AUSM::Properties *, unsigned char *, uint64_t))(*(void *)this + 40))(this, buf, a5);
    if (*(void *)buf) {
      CFRelease(*(CFTypeRef *)buf);
    }
  }
  else
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    uint64_t v18 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      __int16 v30 = (void *)((char *)this + 8);
      if (*((char *)this + 31) < 0) {
        __int16 v30 = (void *)*v30;
      }
      int v31 = *((_DWORD *)this + 8);
      int v32 = *((_DWORD *)this + 9);
      *(_DWORD *)AudioChannelLayout buf = 136316162;
      *(void *)&uint8_t buf[4] = v30;
      __int16 v90 = 1024;
      int v91 = v31;
      __int16 v92 = 1024;
      int v93 = v32;
      __int16 v94 = 1024;
      *(_DWORD *)float v95 = a4;
      *(_WORD *)&v95[4] = 1024;
      *(_DWORD *)&v95[6] = 8;
      CFStringRef v33 = "[%s|setProperty] (scope=%u, element=%u): spatial mixer property dictionary: invalid size %u, expected %u";
      int v34 = v18;
      uint32_t v35 = 36;
LABEL_47:
      _os_log_error_impl(&dword_1BB0CE000, v34, OS_LOG_TYPE_ERROR, v33, buf, v35);
    }
    return 4294956445;
  }
  return v17;
}

void sub_1BB451D9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

uint64_t AUSM::Properties::getProperty(AUSM::Properties *this, unsigned int a2, void *a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (a2 == 5000)
  {
    (*(void (**)(unsigned char *__return_ptr, AUSM::Properties *))(*(void *)this + 32))(v23, this);
    uint64_t result = 0;
    *a3 = *(void *)v23;
  }
  else
  {
    char v6 = (char *)*((void *)this + 6);
    if (!v6) {
      return 4294956417;
    }
    int v7 = (char *)this + 48;
    do
    {
      unsigned int v8 = *((_DWORD *)v6 + 8);
      BOOL v9 = v8 >= a2;
      if (v8 >= a2) {
        CFTypeID v10 = (char **)v6;
      }
      else {
        CFTypeID v10 = (char **)(v6 + 8);
      }
      if (v9) {
        int v7 = v6;
      }
      char v6 = *v10;
    }
    while (*v10);
    if (v7 != (char *)this + 48 && *((_DWORD *)v7 + 8) <= a2)
    {
      if (a3)
      {
        if ((*(unsigned int (**)(void, void *))(**((void **)v7 + 5) + 24))(*((void *)v7 + 5), a3) == 8)
        {
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          uint64_t v11 = getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
          {
            uint64_t v18 = (void *)((char *)this + 8);
            if (*((char *)this + 31) < 0) {
              uint64_t v18 = (void *)*v18;
            }
            int v20 = *((_DWORD *)this + 8);
            int v19 = *((_DWORD *)this + 9);
            uint64_t v21 = (*(uint64_t (**)(void))(**((void **)v7 + 5) + 80))(*((void *)v7 + 5));
            if (*(char *)(v21 + 23) >= 0) {
              uint64_t v22 = v21;
            }
            else {
              uint64_t v22 = *(void *)v21;
            }
            *(_DWORD *)CFStringRef v23 = 136315906;
            *(void *)&int v23[4] = v18;
            __int16 v24 = 1024;
            int v25 = v20;
            __int16 v26 = 1024;
            int v27 = v19;
            __int16 v28 = 2080;
            uint64_t v29 = v22;
            _os_log_error_impl(&dword_1BB0CE000, v11, OS_LOG_TYPE_ERROR, "[%s|getProperty] (scope=%u, element=%u): %s internal error: getter not implemented", v23, 0x22u);
          }
          return 4294956446;
        }
        else
        {
          return 0;
        }
      }
      else
      {
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        float v12 = getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
        {
          BOOL v13 = (void *)((char *)this + 8);
          if (*((char *)this + 31) < 0) {
            BOOL v13 = (void *)*v13;
          }
          int v15 = *((_DWORD *)this + 8);
          int v14 = *((_DWORD *)this + 9);
          uint64_t v16 = (*(uint64_t (**)(void))(**((void **)v7 + 5) + 80))(*((void *)v7 + 5));
          if (*(char *)(v16 + 23) >= 0) {
            uint64_t v17 = v16;
          }
          else {
            uint64_t v17 = *(void *)v16;
          }
          *(_DWORD *)CFStringRef v23 = 136315906;
          *(void *)&int v23[4] = v13;
          __int16 v24 = 1024;
          int v25 = v15;
          __int16 v26 = 1024;
          int v27 = v14;
          __int16 v28 = 2080;
          uint64_t v29 = v17;
          _os_log_error_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_ERROR, "[%s|getProperty] (scope=%u, element=%u): %s called with nullptr for output data", v23, 0x22u);
        }
        return 4294956445;
      }
    }
    else
    {
      return 4294956417;
    }
  }
  return result;
}

void sub_1BB452108(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t AUSM::Properties::getPropertyInfo(AUSM::Properties *this, unsigned int a2, unsigned int *a3, BOOL *a4)
{
  if (a2 == 5000)
  {
    *a3 = 8;
    char v5 = 1;
LABEL_3:
    uint64_t result = 0;
    *a4 = v5;
    return result;
  }
  unsigned int v8 = (char *)*((void *)this + 6);
  if (v8)
  {
    BOOL v9 = (char *)this + 48;
    do
    {
      unsigned int v10 = *((_DWORD *)v8 + 8);
      BOOL v11 = v10 >= a2;
      if (v10 >= a2) {
        float v12 = (char **)v8;
      }
      else {
        float v12 = (char **)(v8 + 8);
      }
      if (v11) {
        BOOL v9 = v8;
      }
      unsigned int v8 = *v12;
    }
    while (*v12);
    if (v9 != (char *)this + 48 && *((_DWORD *)v9 + 8) <= a2)
    {
      *a3 = (*(uint64_t (**)(void))(**((void **)v9 + 5) + 16))(*((void *)v9 + 5));
      uint64_t v13 = *((void *)v9 + 5);
      uint64_t v14 = (*(uint64_t (**)(void))(**((void **)this + 8) + 8))(*((void *)this + 8));
      char v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 72))(v13, v14);
      goto LABEL_3;
    }
  }
  return 4294956417;
}

uint64_t AUSM::Properties::setMaxValue(AUSM::Properties *this, uint64_t a2, const void *a3)
{
  uint64_t v5 = *((void *)this + 6);
  uint64_t result = (uint64_t)this + 48;
  uint64_t v4 = v5;
  if (v5)
  {
    uint64_t v6 = result;
    do
    {
      unsigned int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 >= 0xA;
      if (v7 >= 0xA) {
        BOOL v9 = (uint64_t *)v4;
      }
      else {
        BOOL v9 = (uint64_t *)(v4 + 8);
      }
      if (v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != result && *(_DWORD *)(v6 + 32) <= 0xAu)
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t, const void *))(**(void **)(v6 + 40) + 56))(*(void *)(v6 + 40), a2, a3);
      if (result)
      {
        unsigned int v10 = *(uint64_t (**)(void))(**(void **)(v6 + 40) + 48);
        return v10();
      }
    }
  }
  return result;
}

void EndpointVAD2::~EndpointVAD2(EndpointVAD2 *this)
{
  EndpointVAD2::~EndpointVAD2(this);

  JUMPOUT(0x1C185D370);
}

{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  void **v22;

  *(void *)this = &unk_1F14AE048;
  *((unsigned char *)this + 8) = 0;
  *((unsigned char *)this + 304) = 0;
  *((void *)this + 46) = *((void *)this + 45);
  CFNumberRef v2 = (const void *)*((void *)this + 18);
  if (v2)
  {
    CFRelease(v2);
    *((void *)this + 18) = 0;
  }
  uint64_t v3 = (const void *)*((void *)this + 19);
  if (v3)
  {
    CFRelease(v3);
    *((void *)this + 19) = 0;
  }
  uint64_t v4 = (const void *)*((void *)this + 20);
  if (v4)
  {
    CFRelease(v4);
    *((void *)this + 20) = 0;
  }
  uint64_t v5 = (const void *)*((void *)this + 21);
  if (v5)
  {
    CFRelease(v5);
    *((void *)this + 21) = 0;
  }
  uint64_t v6 = (const void *)*((void *)this + 22);
  if (v6)
  {
    CFRelease(v6);
    *((void *)this + 22) = 0;
  }
  unsigned int v7 = (void *)*((void *)this + 45);
  if (v7)
  {
    *((void *)this + 46) = v7;
    operator delete(v7);
  }
  uint64_t v22 = (void **)((char *)this + 336);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v22);
  BOOL v8 = (void *)*((void *)this + 39);
  if (v8)
  {
    *((void *)this + 40) = v8;
    operator delete(v8);
  }
  BOOL v9 = *((void *)this + 37);
  *((void *)this + 37) = 0;
  if (v9) {
    std::default_delete<std::vector<unsigned int>>::operator()[abi:ne180100](v9);
  }
  unsigned int v10 = *((void *)this + 35);
  *((void *)this + 35) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  BOOL v11 = *((void *)this + 34);
  *((void *)this + 34) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  float v12 = *((void *)this + 33);
  *((void *)this + 33) = 0;
  if (v12) {
    std::default_delete<std::vector<float>>::operator()[abi:ne180100](v12);
  }
  uint64_t v13 = *((void *)this + 32);
  *((void *)this + 32) = 0;
  if (v13) {
    std::default_delete<std::vector<float>>::operator()[abi:ne180100](v13);
  }
  uint64_t v14 = *((void *)this + 31);
  *((void *)this + 31) = 0;
  if (v14) {
    std::default_delete<std::vector<float>>::operator()[abi:ne180100](v14);
  }
  int v15 = *((void *)this + 30);
  *((void *)this + 30) = 0;
  if (v15) {
    std::default_delete<std::vector<float>>::operator()[abi:ne180100](v15);
  }
  uint64_t v16 = (void *)*((void *)this + 26);
  if (v16)
  {
    *((void *)this + 27) = v16;
    operator delete(v16);
  }
  uint64_t v17 = (void *)*((void *)this + 23);
  if (v17)
  {
    *((void *)this + 24) = v17;
    operator delete(v17);
  }
  uint64_t v18 = (void *)*((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v18) {
    std::default_delete<EndpointDecisionLayerVAD2>::operator()[abi:ne180100](v18);
  }
  std::unique_ptr<MixViterbiProd>::reset[abi:ne180100]((uint64_t *)this + 12, 0);
  int v19 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  int v20 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  uint64_t v21 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
}

void std::default_delete<std::vector<unsigned int>>::operator()[abi:ne180100](uint64_t a1)
{
  CFNumberRef v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }

  JUMPOUT(0x1C185D370);
}

void std::default_delete<std::vector<float>>::operator()[abi:ne180100](uint64_t a1)
{
  CFNumberRef v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }

  JUMPOUT(0x1C185D370);
}

void std::default_delete<EndpointDecisionLayerVAD2>::operator()[abi:ne180100](void *a1)
{
  CFNumberRef v2 = (uint64_t *)a1[25];
  a1[25] = 0;
  if (v2) {
    std::default_delete<MRRingBuffer<DataTimeStamp>>::operator()[abi:ne180100](v2);
  }
  uint64_t v3 = (uint64_t *)a1[24];
  a1[24] = 0;
  if (v3) {
    std::default_delete<MRRingBuffer<AUEndpointVAD3_Decision>>::operator()[abi:ne180100](v3);
  }
  uint64_t v4 = (void *)a1[12];
  if (v4)
  {
    a1[13] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[2];
  if (v5)
  {
    a1[3] = v5;
    operator delete(v5);
  }

  JUMPOUT(0x1C185D370);
}

uint64_t *std::unique_ptr<MixViterbiProd>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 400);
    if (v3) {
      MEMORY[0x1C185D370](v3, 0x1000C40504FFAC1);
    }
    uint64_t v4 = *(void *)(v2 + 392);
    if (v4) {
      MEMORY[0x1C185D370](v4, 0x1000C40504FFAC1);
    }
    uint64_t v5 = *(void **)(v2 + 384);
    if (v5) {
      free(v5);
    }
    uint64_t v6 = *(void **)(v2 + 368);
    if (v6) {
      free(v6);
    }
    unsigned int v7 = *(void **)(v2 + 360);
    if (v7) {
      free(v7);
    }
    BOOL v8 = *(void **)(v2 + 344);
    if (v8) {
      free(v8);
    }
    BOOL v9 = *(void **)(v2 + 336);
    if (v9) {
      free(v9);
    }
    unsigned int v10 = *(void **)(v2 + 328);
    if (v10) {
      free(v10);
    }
    BOOL v11 = *(void **)(v2 + 320);
    if (v11) {
      free(v11);
    }
    float v12 = *(void **)(v2 + 312);
    if (v12) {
      free(v12);
    }
    uint64_t v13 = *(void **)(v2 + 304);
    if (v13) {
      free(v13);
    }
    uint64_t v14 = *(void **)(v2 + 296);
    if (v14) {
      free(v14);
    }
    int v15 = *(void **)(v2 + 288);
    if (v15) {
      free(v15);
    }
    uint64_t v16 = *(void **)(v2 + 280);
    if (v16) {
      free(v16);
    }
    uint64_t v17 = *(void **)(v2 + 272);
    if (v17) {
      free(v17);
    }
    uint64_t v18 = *(void **)(v2 + 264);
    if (v18) {
      free(v18);
    }
    int v19 = *(void **)(v2 + 256);
    if (v19) {
      free(v19);
    }
    int v20 = *(void **)(v2 + 248);
    if (v20) {
      free(v20);
    }
    uint64_t v21 = *(void **)(v2 + 240);
    if (v21) {
      free(v21);
    }
    uint64_t v22 = *(void **)(v2 + 208);
    if (v22)
    {
      if (*v22) {
        MEMORY[0x1C185D340](*v22, 0x1000C8052888210);
      }
      MEMORY[0x1C185D370](v22, 0x1080C40FC6463CFLL);
    }
    CFStringRef v23 = *(void **)(v2 + 200);
    if (v23)
    {
      if (*v23) {
        MEMORY[0x1C185D340](*v23, 0x1000C8052888210);
      }
      MEMORY[0x1C185D370](v23, 0x1080C40FC6463CFLL);
    }
    __int16 v24 = *(void **)(v2 + 184);
    if (v24)
    {
      if (*v24) {
        MEMORY[0x1C185D340](*v24, 0x1000C8052888210);
      }
      MEMORY[0x1C185D370](v24, 0x1010C40FDD9F14CLL);
    }
    int v25 = *(void **)(v2 + 192);
    if (v25)
    {
      if (*v25) {
        MEMORY[0x1C185D340](*v25, 0x1000C80451B5BE8);
      }
      MEMORY[0x1C185D370](v25, 0x1020C40EDED9539);
    }
    __int16 v26 = *(void **)(v2 + 176);
    if (v26)
    {
      if (*v26) {
        MEMORY[0x1C185D340](*v26, 0x1000C8052888210);
      }
      MEMORY[0x1C185D370](v26, 0x1010C40FDD9F14CLL);
    }
    uint64_t v27 = *(void *)(v2 + 112);
    if (v27) {
      MEMORY[0x1C185D370](v27, 0x1000C4052888210);
    }
    uint64_t v28 = *(void *)(v2 + 104);
    if (v28) {
      MEMORY[0x1C185D370](v28, 0x1000C4052888210);
    }
    uint64_t v29 = *(void *)(v2 + 96);
    if (v29) {
      MEMORY[0x1C185D370](v29, 0x1000C4052888210);
    }
    uint64_t v30 = *(void **)(v2 + 48);
    if (v30)
    {
      *(void *)(v2 + 56) = v30;
      operator delete(v30);
    }
    int v31 = *(void **)(v2 + 24);
    if (v31)
    {
      *(void *)(v2 + 32) = v31;
      operator delete(v31);
    }
    int v32 = *(void **)v2;
    if (*(void *)v2)
    {
      *(void *)(v2 + 8) = v32;
      operator delete(v32);
    }
    JUMPOUT(0x1C185D370);
  }
  return result;
}

uint64_t *std::__shared_ptr_emplace<FeaturesDSPWrapper>::__on_zero_shared(uint64_t *a1)
{
  std::unique_ptr<CADeprecated::AUOutputBL>::reset[abi:ne180100](a1 + 17, 0);
  uint64_t v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = (uint64_t)v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[10];
  if (v3)
  {
    a1[11] = (uint64_t)v3;
    operator delete(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[8];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = a1[6];
  a1[6] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = a1[5];
  a1[5] = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = a1[4];
  a1[4] = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }

  return std::unique_ptr<FeatureAudioAdaptor>::reset[abi:ne180100](a1 + 3, 0);
}

uint64_t *std::unique_ptr<CADeprecated::AUOutputBL>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 40);
    if (v3) {
      MEMORY[0x1C185D340](v3, 0x1000C8077774924);
    }
    uint64_t v4 = *(void *)(v2 + 48);
    if (v4) {
      MEMORY[0x1C185D340](v4, 0x1000C8077774924);
    }
    JUMPOUT(0x1C185D370);
  }
  return result;
}

uint64_t *std::unique_ptr<FeatureAudioAdaptor>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    std::__optional_destruct_base<BlockProcessor,false>::~__optional_destruct_base[abi:ne180100]((unsigned char *)(v2 + 48));
    uint64_t v3 = *(void *)(v2 + 40);
    *(void *)(v2 + 40) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    JUMPOUT(0x1C185D370);
  }
  return result;
}

void std::__shared_ptr_emplace<FeaturesDSPWrapper>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14C01C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

void std::__shared_ptr_emplace<FeaturesDSPWrapper>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14C01C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void FixedArray<unsigned int>::Allocate(uint64_t a1, std::vector<unsigned int>::size_type __n)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)a1)
  {
    if (__n != (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 2)
    {
      if (EndpointVAD2LogScope(void)::once != -1) {
        dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_6);
      }
      if (EndpointVAD2LogScope(void)::scope)
      {
        uint64_t v3 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
        if (!*(void *)EndpointVAD2LogScope(void)::scope) {
          goto LABEL_12;
        }
      }
      else
      {
        uint64_t v3 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        int v5 = 136315394;
        uint64_t v6 = "FeatureTimeSeries.h";
        __int16 v7 = 1024;
        int v8 = 63;
        _os_log_impl(&dword_1BB0CE000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d The FixedArray object cannot be re-allocated to a different length.", (uint8_t *)&v5, 0x12u);
      }
LABEL_12:
      abort();
    }
  }
  else
  {
    std::vector<unsigned int>::size_type v4 = __n;
    std::vector<unsigned int>::reserve((std::vector<unsigned int> *)(a1 + 8), __n);
    std::vector<unsigned int>::resize((std::vector<unsigned int> *)(a1 + 8), v4);
    *(unsigned char *)a1 = 1;
  }
}

uint64_t EnsembleTimeSeriesEvent<float>::EnsembleTimeSeriesEvent(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v4 = TimeSeriesEvent<float>::TimeSeriesEvent(a1, a2, a3);
  *(void *)uint64_t v4 = &unk_1F14C01F8;
  *(unsigned char *)(v4 + 48) = 0;
  *(void *)(v4 + 56) = 0;
  int v5 = (char **)(v4 + 56);
  *(void *)(v4 + 64) = 0;
  *(void *)(v4 + 72) = 0;
  unint64_t v6 = *(unsigned int *)(v4 + 8);
  std::vector<DataTimeStamp>::reserve((void **)(v4 + 56), v6);
  std::vector<std::span<float,18446744073709551615ul>>::resize(v5, v6);
  *(unsigned char *)(a1 + 48) = 1;
  return a1;
}

void sub_1BB452DC8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v2;
  int v5 = *v3;
  if (*v3)
  {
    v1[8] = v5;
    operator delete(v5);
  }
  *uint64_t v1 = &unk_1F14C0218;
  unint64_t v6 = (void *)v1[3];
  if (v6)
  {
    v1[4] = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<VectorTimeSeriesSynchronizer<float>,std::allocator<VectorTimeSeriesSynchronizer<float>>,unsigned int &,unsigned int &,float &,void>(float a1, uint64_t a2, int a3, int a4)
{
  __int16 v7 = (char *)operator new(0x78uLL);
  *(_OWORD *)(v7 + 8) = 0u;
  *(void *)__int16 v7 = &unk_1F14C0238;
  *((_DWORD *)v7 + 8) = a3;
  *((_DWORD *)v7 + 9) = a4;
  *((_DWORD *)v7 + 10) = a4 * a3;
  *((void *)v7 + 3) = &unk_1F14C0270;
  v7[72] = 0;
  *((void *)v7 + 10) = 0;
  *(_OWORD *)(v7 + 88) = 0u;
  *((double *)v7 + 13) = a1;
  *((_DWORD *)v7 + 28) = 0;
  operator new[]();
}

void sub_1BB4530D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  float v12 = *a10;
  if (*a10)
  {
    v10[3].__shared_weak_owners_ = (uint64_t)v12;
    operator delete(v12);
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v13);
  _Unwind_Resume(a1);
}

void EnsembleTimeSeriesBuffer<float>::EnsembleTimeSeriesBuffer(uint64_t a1, int a2, int *a3)
{
  *(_DWORD *)(a1 + 8) = a2;
  int v3 = *a3;
  *(_DWORD *)(a1 + 12) = *a3;
  *(_DWORD *)(a1 + 16) = v3 * a2;
  *(void *)a1 = &unk_1F14C0298;
  operator new();
}

void sub_1BB45321C(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x1020C40EDED9539);
  _Unwind_Resume(a1);
}

uint64_t TimeSeriesEvent<float>::TimeSeriesEvent(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  *(void *)a1 = &unk_1F14C0218;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  uint64_t v5 = a1 + 24;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 8) = a2;
  unint64_t v6 = a2;
  std::vector<float>::reserve((void **)(a1 + 24), a2);
  std::vector<float>::resize(v5, v6);
  *(unsigned char *)(a1 + 16) = 1;
  __int16 v7 = *(_DWORD **)(a1 + 24);
  int v8 = *(_DWORD **)(a1 + 32);
  while (v7 != v8)
    *v7++ = *a3;
  return a1;
}

void sub_1BB4532F8(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TimeSeriesEvent<unsigned int>::TimeSeriesEvent(uint64_t a1, std::vector<unsigned int>::size_type a2, _DWORD *a3)
{
  *(void *)a1 = &unk_1F14C0300;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 8) = a2;
  FixedArray<unsigned int>::Allocate(a1 + 16, a2);
  uint64_t v5 = *(_DWORD **)(a1 + 24);
  unint64_t v6 = *(_DWORD **)(a1 + 32);
  while (v5 != v6)
    *v5++ = *a3;
  return a1;
}

void sub_1BB453390(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::vector<unsigned int>>::reserve(void *result, unint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(result[2] - *result) >> 3) < a2)
  {
    uint64_t v2 = result;
    uint64_t v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<AUPropertyItem>>(a2);
    v5[1] = v5[0] + v3;
    void v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 24 * v4;
    std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(v2, v5);
    return (void *)std::__split_buffer<std::vector<unsigned int>>::~__split_buffer((uint64_t)v5);
  }
  return result;
}

void std::vector<DataTimeStamp>::reserve(void **a1, unint64_t a2)
{
  if (a2 > ((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4)
  {
    int64_t v3 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(a2);
    uint64_t v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF0];
    __int16 v7 = &v4[16 * v6];
    uint64_t v9 = (char *)*a1;
    int v8 = (char *)a1[1];
    unsigned int v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        *((_OWORD *)v10 - 1) = *((_OWORD *)v8 - 1);
        v10 -= 16;
        v8 -= 16;
      }
      while (v8 != v9);
      int v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void VectorTimeSeriesEvent<unsigned int>::~VectorTimeSeriesEvent(void *a1)
{
  *a1 = &unk_1F14C0300;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x1C185D370);
}

void TimeSeriesEvent<unsigned int>::~TimeSeriesEvent(void *a1)
{
  *a1 = &unk_1F14C0300;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x1C185D370);
}

void *TimeSeriesEvent<unsigned int>::~TimeSeriesEvent(void *a1)
{
  *a1 = &unk_1F14C0300;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void *VectorTimeSeriesEvent<unsigned int>::~VectorTimeSeriesEvent(void *a1)
{
  *a1 = &unk_1F14C0300;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void VectorTimeSeriesEvent<float>::~VectorTimeSeriesEvent(void *a1)
{
  *a1 = &unk_1F14C0218;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x1C185D370);
}

void TimeSeriesEvent<float>::~TimeSeriesEvent(void *a1)
{
  *a1 = &unk_1F14C0218;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x1C185D370);
}

void *TimeSeriesEvent<float>::~TimeSeriesEvent(void *a1)
{
  *a1 = &unk_1F14C0218;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void *VectorTimeSeriesEvent<float>::~VectorTimeSeriesEvent(void *a1)
{
  *a1 = &unk_1F14C0218;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void EndpointVAD2::FloatVectorToUIntVector(uint64_t *a1, std::vector<unsigned int> *this)
{
  std::vector<unsigned int>::resize(this, (a1[1] - *a1) >> 2);
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = v5 - *a1;
  if (v5 != *a1)
  {
    uint64_t v7 = 0;
    unint64_t v8 = v6 >> 2;
    begiuint64_t n = this->__begin_;
    do
    {
      begin[v7] = (float)(unint64_t)(*(float *)(v4 + 4 * v7) + 0.5);
      ++v7;
    }
    while (v8 > v7);
  }
}

float EnsembleTimeSeriesBuffer<float>::GetDataValue(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  int64_t v3 = *(uint64_t **)(a1 + 24);
  int v4 = *a3 + *(_DWORD *)(a1 + 12) * *a2;
  uint64_t v5 = *v3;
  if (v4 < 0) {
    int v6 = *((_DWORD *)v3 + 2) + ~((*((_DWORD *)v3 + 2) - v4 + ~*((_DWORD *)v3 + 3)) % *((_DWORD *)v3 + 2));
  }
  else {
    int v6 = (*((_DWORD *)v3 + 3) + v4) % *((_DWORD *)v3 + 2);
  }
  return *(float *)(v5 + 4 * v6);
}

void EnsembleTimeSeriesBuffer<float>::~EnsembleTimeSeriesBuffer(void *a1)
{
  EnsembleTimeSeriesBuffer<float>::~EnsembleTimeSeriesBuffer(a1);

  JUMPOUT(0x1C185D370);
}

void *EnsembleTimeSeriesBuffer<float>::~EnsembleTimeSeriesBuffer(void *a1)
{
  *a1 = &unk_1F14C0298;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    if (*v2) {
      MEMORY[0x1C185D340](*v2, 0x1000C8052888210);
    }
    MEMORY[0x1C185D370](v2, 0x1080C40FC6463CFLL);
    a1[3] = 0;
  }
  int64_t v3 = (void *)a1[4];
  if (v3)
  {
    if (*v3) {
      MEMORY[0x1C185D340](*v3, 0x1000C80451B5BE8);
    }
    MEMORY[0x1C185D370](v3, 0x1020C40EDED9539);
    a1[4] = 0;
  }
  return a1;
}

float VectorTimeSeriesSynchronizer<float>::GetDataValue(uint64_t a1, _DWORD *a2, unsigned int *a3)
{
  int SynchronizationDelay = VectorTimeSeriesSynchronizer<float>::GetSynchronizationDelay(a1, *a3);
  uint64_t v7 = *(uint64_t **)(*(void *)(a1 + 24) + 8 * *a3);
  uint64_t v8 = *v7;
  int v9 = *a2 - SynchronizationDelay;
  if (v9 < 0) {
    int v10 = *((_DWORD *)v7 + 2) + ~((*((_DWORD *)v7 + 2) - v9 + ~*((_DWORD *)v7 + 3)) % *((_DWORD *)v7 + 2));
  }
  else {
    int v10 = (*((_DWORD *)v7 + 3) + v9) % *((_DWORD *)v7 + 2);
  }
  return *(float *)(v8 + 4 * v10);
}

uint64_t VectorTimeSeriesSynchronizer<float>::GetSynchronizationDelay(uint64_t a1, unsigned int a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 56);
  if (a2 >= (unint64_t)((*(void *)(a1 + 64) - v2) >> 2)) {
    __assert_rtn("ElementAt", "FeatureTimeSeries.h", 84, "index < mArray.size()");
  }
  int v3 = *(_DWORD *)(v2 + 4 * a2);
  int v4 = *(_DWORD *)(a1 + 88);
  uint64_t result = (v3 - v4);
  if (v3 - v4 < 0)
  {
    if (EndpointVAD2LogScope(void)::once != -1) {
      dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_6);
    }
    if (EndpointVAD2LogScope(void)::scope)
    {
      int v6 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
      if (!*(void *)EndpointVAD2LogScope(void)::scope) {
        goto LABEL_12;
      }
    }
    else
    {
      int v6 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      uint64_t v8 = "FeatureTimeSeries.h";
      __int16 v9 = 1024;
      int v10 = 570;
      _os_log_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d mNominalVectorNumber should be the minimum of the time-series counters!", (uint8_t *)&v7, 0x12u);
    }
LABEL_12:
    abort();
  }
  return result;
}

void VectorTimeSeriesSynchronizer<float>::~VectorTimeSeriesSynchronizer(uint64_t a1)
{
  VectorTimeSeriesSynchronizer<float>::~VectorTimeSeriesSynchronizer(a1);

  JUMPOUT(0x1C185D370);
}

uint64_t VectorTimeSeriesSynchronizer<float>::~VectorTimeSeriesSynchronizer(uint64_t a1)
{
  *(void *)a1 = &unk_1F14C0270;
  if (*(_DWORD *)(a1 + 12))
  {
    unint64_t v2 = 0;
    do
    {
      int v3 = *(void **)(*(void *)(a1 + 24) + 8 * v2);
      if (v3)
      {
        if (*v3) {
          MEMORY[0x1C185D340](*v3, 0x1000C8052888210);
        }
        MEMORY[0x1C185D370](v3, 0x1080C40FC6463CFLL);
      }
      int v4 = *(void **)(*(void *)(a1 + 32) + 8 * v2);
      if (v4)
      {
        if (*v4) {
          MEMORY[0x1C185D340](*v4, 0x1000C8000313F17);
        }
        MEMORY[0x1C185D370](v4, 0x1080C40FC6463CFLL);
      }
      uint64_t v5 = *(void **)(*(void *)(a1 + 40) + 8 * v2);
      if (v5)
      {
        if (*v5) {
          MEMORY[0x1C185D340](*v5, 0x1000C8000313F17);
        }
        MEMORY[0x1C185D370](v5, 0x1080C40FC6463CFLL);
      }
      ++v2;
    }
    while (v2 < *(unsigned int *)(a1 + 12));
  }
  uint64_t v6 = *(void *)(a1 + 24);
  if (v6) {
    MEMORY[0x1C185D340](v6, 0x20C8093837F09);
  }
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7) {
    MEMORY[0x1C185D340](v7, 0x20C8093837F09);
  }
  uint64_t v8 = *(void *)(a1 + 40);
  if (v8) {
    MEMORY[0x1C185D340](v8, 0x20C8093837F09);
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  __int16 v9 = *(void **)(a1 + 56);
  if (v9)
  {
    *(void *)(a1 + 64) = v9;
    operator delete(v9);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<VectorTimeSeriesSynchronizer<float>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<VectorTimeSeriesSynchronizer<float>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14C0238;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

void std::__shared_ptr_emplace<VectorTimeSeriesSynchronizer<float>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14C0238;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void EnsembleTimeSeriesEvent<float>::~EnsembleTimeSeriesEvent(void *a1)
{
  EnsembleTimeSeriesEvent<float>::~EnsembleTimeSeriesEvent(a1);

  JUMPOUT(0x1C185D370);
}

void *EnsembleTimeSeriesEvent<float>::~EnsembleTimeSeriesEvent(void *a1)
{
  *a1 = &unk_1F14C01F8;
  unint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  *a1 = &unk_1F14C0218;
  int v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::vector<unsigned int>::reserve(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (__n > value - this->__begin_)
  {
    if (__n >> 62) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (char *)this->__end_ - (char *)this->__begin_;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)p_end_cap, __n);
    uint64_t v7 = (unsigned int *)&v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    __int16 v9 = (unsigned int *)&v6[4 * v8];
    begiuint64_t n = this->__begin_;
    std::vector<unsigned int>::pointer end = this->__end_;
    float v12 = v7;
    if (end != this->__begin_)
    {
      float v12 = v7;
      do
      {
        unsigned int v13 = *--end;
        *--float v12 = v13;
      }
      while (end != begin);
    }
    this->__begin_ = v12;
    this->__end_ = v7;
    this->__end_cap_.__value_ = v9;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

uint64_t FeaturesDSPWrapper::RebufferingProcessAdaptor(FeaturesDSPWrapper *this, void *a2, void *a3, const AudioBufferList **a4, AudioBufferList **a5)
{
  int64_t v5 = this;
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  (*(void (**)(void, void, void *, char *, void, void))(**((void **)this + 1) + 32))(*((void *)this + 1), *a3, a2, (char *)this + 144, *a4, *((void *)this + 2));
  uint64_t v6 = *((void *)v5 + 2);
  uint64_t v7 = *((void *)v5 + 3);
  uint64_t v8 = *(unsigned int *)(v6 + 8);
  if (v8 != *(_DWORD *)(v7 + 12))
  {
    if (EndpointVAD2LogScope(void)::once != -1) {
      dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_6);
    }
    if (EndpointVAD2LogScope(void)::scope)
    {
      int v73 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
      if (!*(void *)EndpointVAD2LogScope(void)::scope) {
        goto LABEL_76;
      }
    }
    else
    {
      int v73 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
    {
      int v75 = *(_DWORD *)(v7 + 12);
      *(_DWORD *)AudioChannelLayout buf = 136315650;
      int v83 = "FeatureTimeSeries.h";
      __int16 v84 = 1024;
      int v85 = 398;
      __int16 v86 = 1024;
      int v87 = v75;
      float v76 = "%25s:%-5d Incorrect number of incoming samples for %d-dimensional EnsembleTimeSeriesBuffer";
      int v77 = v73;
      uint32_t v78 = 24;
LABEL_75:
      _os_log_impl(&dword_1BB0CE000, v77, OS_LOG_TYPE_ERROR, v76, buf, v78);
    }
LABEL_76:
    abort();
  }
  if (v8)
  {
    unint64_t v9 = 0;
    uint64_t v10 = *(void *)(v6 + 24);
    uint64_t v11 = (*(void *)(v6 + 32) - v10) >> 2;
    do
    {
      if (v11 == v9
        || (uint64_t v12 = *(void *)(v7 + 24),
            uint64_t v13 = *(int *)(v12 + 12),
            *(_DWORD *)(*(void *)v12 + 4 * v13) = *(_DWORD *)(v10 + 4 * v9),
            *(_DWORD *)(v12 + 12) = ((int)v13 + 1) % *(_DWORD *)(v12 + 8),
            uint64_t v14 = *(void *)(v6 + 56),
            v9 >= (*(void *)(v6 + 64) - v14) >> 4))
      {
LABEL_59:
        __assert_rtn("ElementAt", "FeatureTimeSeries.h", 84, "index < mArray.size()");
      }
      uint64_t v15 = *(void *)(v7 + 32);
      uint64_t v16 = *(int *)(v15 + 12);
      *(_OWORD *)(*(void *)v15 + 16 * v16) = *(_OWORD *)(v14 + 16 * v9);
      *(_DWORD *)(v15 + 12) = ((int)v16 + 1) % *(_DWORD *)(v15 + 8);
      ++v9;
    }
    while (v8 != v9);
  }
  ++*(_DWORD *)(v7 + 40);
  uint64_t v17 = *((void *)v5 + 7);
  uint64_t v18 = *((void *)v5 + 8) - v17;
  if (((unint64_t)v18 >> 2) != ((*((void *)v5 + 12) - *((void *)v5 + 11)) >> 2))
  {
    if (EndpointVAD2LogScope(void)::once != -1) {
      dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_6);
    }
    if (EndpointVAD2LogScope(void)::scope)
    {
      uint64_t v74 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
      if (!*(void *)EndpointVAD2LogScope(void)::scope) {
        goto LABEL_76;
      }
    }
    else
    {
      uint64_t v74 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioChannelLayout buf = 136315394;
      int v83 = "FeatureTimeSeries.h";
      __int16 v84 = 1024;
      int v85 = 490;
      float v76 = "%25s:%-5d The number of input and output indices must match.";
      int v77 = v74;
      uint32_t v78 = 18;
      goto LABEL_75;
    }
    goto LABEL_76;
  }
  uint64_t v19 = *((void *)v5 + 4);
  if ((v18 & 0x3FFFFFFFCLL) == 0) {
    goto LABEL_47;
  }
  unint64_t v20 = 0;
  double v21 = *((float *)v5 + 41);
  uint64_t v79 = v6;
  uint64_t v80 = v5;
  do
  {
    if (v20 >= v18 >> 2) {
LABEL_60:
    }
      __assert_rtn("operator[]", "FeatureTimeSeries.h", 98, "index < mArray.size()");
    unint64_t v22 = *(unsigned int *)(v17 + 4 * v20);
    uint64_t v81 = *(void *)(v6 + 24);
    if (v22 >= (*(void *)(v6 + 32) - v81) >> 2) {
      goto LABEL_59;
    }
    uint64_t v23 = *(void *)(v6 + 56);
    if (v22 >= (*(void *)(v6 + 64) - v23) >> 4) {
      goto LABEL_59;
    }
    uint64_t v24 = *((void *)v5 + 11);
    if (v20 >= (*((void *)v5 + 12) - v24) >> 2) {
      goto LABEL_60;
    }
    int v25 = (void *)(v23 + 16 * v22);
    double v27 = *(double *)v25;
    __int16 v26 = v25 + 1;
    double v28 = round(v27);
    double v29 = *(double *)(v19 + 80);
    int v30 = vcvtpd_s64_f64(v29 * (v28 + -0.5) / v21);
    int v31 = v30 & ~(v30 >> 31);
    signed int v32 = vcvtmd_s64_f64(v29 * (v28 + 0.5) / v21);
    if (v31 <= v32) {
      signed int v33 = v32;
    }
    else {
      signed int v33 = v31;
    }
    do
    {
      if (v28 != round(v21 * (double)v31 / *(double *)(v19 + 80))) {
        continue;
      }
      unint64_t v34 = *(unsigned int *)(v24 + 4 * v20);
      uint64_t v35 = *(void *)(v19 + 56);
      if (v34 >= (*(void *)(v19 + 64) - v35) >> 2) {
        goto LABEL_58;
      }
      unsigned int v36 = *(_DWORD *)(v35 + 4 * v34);
      unsigned int v37 = v31 - v36;
      if (v31 >= v36)
      {
        if (v31 <= v36) {
          goto LABEL_42;
        }
        if (EndpointVAD2LogScope(void)::once != -1) {
          dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_6);
        }
        if (EndpointVAD2LogScope(void)::scope)
        {
          int v39 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
          if (!*(void *)EndpointVAD2LogScope(void)::scope)
          {
LABEL_37:
            if (v31 != v36)
            {
              unsigned int v40 = 0;
              uint64_t v41 = *(void *)(v19 + 24);
              uint64_t v42 = *(void *)(v19 + 32);
              do
              {
                uint64_t v43 = *(void *)(v41 + 8 * *(unsigned int *)(v24 + 4 * v20));
                uint64_t v44 = *(int *)(v43 + 12);
                *(_DWORD *)(*(void *)v43 + 4 * v44) = 0;
                *(_DWORD *)(v43 + 12) = ((int)v44 + 1) % *(_DWORD *)(v43 + 8);
                uint64_t v45 = *(void *)(v42 + 8 * *(unsigned int *)(v24 + 4 * v20));
                uint64_t v46 = *(int *)(v45 + 12);
                *(double *)(*(void *)v45 + 8 * v46) = (double)(v36 + v40);
                *(_DWORD *)(v45 + 12) = ((int)v46 + 1) % *(_DWORD *)(v45 + 8);
                ++v40;
              }
              while (v40 < v37);
            }
            unint64_t v47 = *(unsigned int *)(v24 + 4 * v20);
            uint64_t v48 = *(void *)(v19 + 56);
            if (v47 >= (*(void *)(v19 + 64) - v48) >> 2) {
              goto LABEL_58;
            }
            *(_DWORD *)(v48 + 4 * v47) += v37;
            goto LABEL_42;
          }
        }
        else
        {
          int v39 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)AudioChannelLayout buf = 136315394;
          int v83 = "FeatureTimeSeries.h";
          __int16 v84 = 1024;
          int v85 = 629;
          _os_log_impl(&dword_1BB0CE000, v39, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Gap detected in the input time series. Filling in zeros.", buf, 0x12u);
        }
        goto LABEL_37;
      }
      if (EndpointVAD2LogScope(void)::once != -1) {
        dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_6);
      }
      if (!EndpointVAD2LogScope(void)::scope)
      {
        int v38 = MEMORY[0x1E4F14500];
LABEL_32:
        if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioChannelLayout buf = 136315394;
          int v83 = "FeatureTimeSeries.h";
          __int16 v84 = 1024;
          int v85 = 621;
          _os_log_impl(&dword_1BB0CE000, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d Input sample numbers cannot go backward in time!", buf, 0x12u);
        }
        goto LABEL_42;
      }
      int v38 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
      if (*(void *)EndpointVAD2LogScope(void)::scope) {
        goto LABEL_32;
      }
LABEL_42:
      uint64_t v49 = *(void *)(*(void *)(v19 + 24) + 8 * *(unsigned int *)(v24 + 4 * v20));
      uint64_t v50 = *(int *)(v49 + 12);
      *(_DWORD *)(*(void *)v49 + 4 * v50) = *(_DWORD *)(v81 + 4 * v22);
      *(_DWORD *)(v49 + 12) = ((int)v50 + 1) % *(_DWORD *)(v49 + 8);
      uint64_t v51 = *(void *)(*(void *)(v19 + 40) + 8 * *(unsigned int *)(v24 + 4 * v20));
      uint64_t v52 = *(int *)(v51 + 12);
      *(void *)(*(void *)v51 + 8 * v52) = *v26;
      *(_DWORD *)(v51 + 12) = ((int)v52 + 1) % *(_DWORD *)(v51 + 8);
      uint64_t v53 = *(void *)(*(void *)(v19 + 32) + 8 * *(unsigned int *)(v24 + 4 * v20));
      uint64_t v54 = *(int *)(v53 + 12);
      *(double *)(*(void *)v53 + 8 * v54) = (double)v31;
      *(_DWORD *)(v53 + 12) = ((int)v54 + 1) % *(_DWORD *)(v53 + 8);
      unint64_t v55 = *(unsigned int *)(v24 + 4 * v20);
      uint64_t v56 = *(void *)(v19 + 56);
      if (v55 >= (*(void *)(v19 + 64) - v56) >> 2) {
        goto LABEL_58;
      }
      ++*(_DWORD *)(v56 + 4 * v55);
    }
    while (v31++ != v33);
    ++v20;
    uint64_t v6 = v79;
    int64_t v5 = v80;
    uint64_t v17 = *((void *)v80 + 7);
    uint64_t v18 = *((void *)v80 + 8) - v17;
  }
  while (v20 < ((unint64_t)v18 >> 2));
LABEL_47:
  float v59 = *(char **)(v19 + 56);
  uint64_t v58 = *(char **)(v19 + 64);
  uint64_t v60 = v58 - v59;
  if (v58 == v59) {
    goto LABEL_58;
  }
  unsigned int v61 = *(_DWORD *)v59;
  *(_DWORD *)(v19 + 88) = *(_DWORD *)v59;
  uint64_t v62 = *(unsigned int *)(v19 + 12);
  if (v62 >= 2)
  {
    unint64_t v63 = v60 >> 2;
    if (v63 <= 1) {
      uint64_t v64 = 1;
    }
    else {
      uint64_t v64 = v63;
    }
    uint64_t v65 = v62 - 1;
    int v66 = (unsigned int *)(v59 + 4);
    uint64_t v67 = v64 - 1;
    while (v67)
    {
      unsigned int v69 = *v66++;
      unsigned int v68 = v69;
      if (v69 < v61) {
        unsigned int v61 = v68;
      }
      *(_DWORD *)(v19 + 88) = v61;
      --v67;
      if (!--v65) {
        goto LABEL_57;
      }
    }
LABEL_58:
    __assert_rtn("ElementAt", "FeatureTimeSeries.h", 77, "index < mArray.size()");
  }
LABEL_57:
  uint64_t v70 = *(double **)v5;
  double v71 = *(double *)(*(void *)v5 + 32) + *((double *)v5 + 19);
  *((double *)v5 + 19) = v71;
  *((double *)v5 + 18) = v71 * *v70;
  return 0;
}

CFDictionaryRef EndpointVAD2::SetProperties(CFDictionaryRef theDict, CFTypeRef *a2, const __CFDictionary **a3)
{
  if (*a2)
  {
    CFRelease(*a2);
    *a2 = 0;
  }
  CFDictionaryRef result = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], theDict);
  *a2 = result;
  return result;
}

uint64_t EndpointVAD2::UpdateAndDispatchDecisions(uint64_t result, void **a2, uint64_t *a3, uint64_t a4, uint64_t a5, int a6, unsigned char *a7)
{
  uint64_t v160 = result;
  uint8_t buf[4] = *MEMORY[0x1E4F143B8];
  int v161 = *a2;
  if (*a2 != a2[1])
  {
    uint64_t v7 = a7;
    int v8 = a6;
    uint64_t v10 = a4;
    uint64_t v162 = *a3;
    uint64_t v153 = a5 + 144;
    float v159 = (float *)(a5 + 88);
    BOOL v155 = (float *)(a5 + 92);
    uint64_t v156 = a5 + 168;
    while (1)
    {
      if (!*v7)
      {
        uint64_t v11 = *a3;
        uint64_t v12 = a3[1];
        if (*a3 == v12)
        {
          double v14 = 0.0;
        }
        else
        {
          uint64_t v13 = 0;
          double v14 = 0.0;
          do
          {
            if (v13)
            {
              if (*(double *)(v11 + v13 + 8) < v14) {
                double v14 = *(double *)(v11 + v13 + 8);
              }
            }
            else
            {
              double v14 = *(double *)(v11 + 8);
            }
            v13 += 16;
          }
          while (v11 + v13 != v12);
        }
        double v15 = *(double *)(a5 + 128) * v14;
        *(_DWORD *)(a5 + 144) = 0;
        *(double *)(a5 + 152) = v15;
        *(double *)(a5 + 160) = v14;
        *(_OWORD *)uint64_t v156 = *(_OWORD *)v153;
        *(void *)(v156 + 16) = *(void *)(v153 + 16);
        *uint64_t v7 = 1;
      }
      uint64_t v166 = 0;
      float64x2_t v165 = 0uLL;
      float64x2_t v164 = 0uLL;
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      if (v8 == 1)
      {
        std::string::basic_string[abi:ne180100]<0>(buf, "");
        if (SHIBYTE(buf[2]) < 0) {
          operator delete((void *)buf[0]);
        }
        unint64_t v16 = 1;
      }
      else
      {
        if (v8)
        {
          if (v168 < 0)
          {
            __p[1] = (void *)16;
            int v147 = (char *)__p[0];
          }
          else
          {
            char v168 = 16;
            int v147 = (char *)__p;
          }
          strcpy(v147, "Invalid VAD mode");
          if (EndpointVAD2LogScope(void)::once != -1) {
            dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_6);
          }
          if (EndpointVAD2LogScope(void)::scope)
          {
            int v149 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
            if (*(void *)EndpointVAD2LogScope(void)::scope) {
              goto LABEL_210;
            }
          }
          else
          {
            int v149 = MEMORY[0x1E4F14500];
LABEL_210:
            if (os_log_type_enabled(v149, OS_LOG_TYPE_ERROR))
            {
              float v150 = __p;
              if (v168 < 0) {
                float v150 = (void **)__p[0];
              }
              LODWORD(buf[0]) = 136315650;
              *(void *)((char *)buf + 4) = "VAD2StateLabels.cpp";
              WORD2(buf[1]) = 1024;
              *(_DWORD *)((char *)&buf[1] + 6) = 116;
              WORD1(buf[2]) = 2080;
              *(void *)((char *)&buf[2] + 4) = v150;
              _os_log_impl(&dword_1BB0CE000, v149, OS_LOG_TYPE_ERROR, "%25s:%-5d Fatal error: %s", (uint8_t *)buf, 0x1Cu);
            }
          }
          abort();
        }
        std::string::basic_string[abi:ne180100]<0>(buf, "");
        if (SHIBYTE(buf[2]) < 0) {
          operator delete((void *)buf[0]);
        }
        unint64_t v16 = 0;
      }
      if (v168 < 0) {
        operator delete(__p[0]);
      }
      if (v16 >= (uint64_t)(v161[1] - *v161) >> 2) {
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      }
      int v17 = *(_DWORD *)(*v161 + 4 * v16);
      ++*(_DWORD *)(a5 + 220);
      LODWORD(buf[0]) = v17;
      *(_OWORD *)&buf[1] = *(_OWORD *)v162;
      *(void *)(a5 + 104) = *(void *)(a5 + 96);
      uint64_t v19 = *(char **)(a5 + 16);
      uint64_t v18 = *(char **)(a5 + 24);
      uint64_t v20 = v18 - v19;
      if (v18 == v19)
      {
        unint64_t v22 = *(char **)(a5 + 24);
      }
      else
      {
        unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * (v20 >> 3);
        unint64_t v22 = *(char **)(a5 + 16);
        do
        {
          unint64_t v23 = v21 >> 1;
          uint64_t v24 = &v22[24 * (v21 >> 1)];
          double v25 = *((double *)v24 + 2);
          __int16 v26 = v24 + 24;
          v21 += ~(v21 >> 1);
          if (*(double *)&buf[2] > v25) {
            unint64_t v21 = v23;
          }
          else {
            unint64_t v22 = v26;
          }
        }
        while (v21);
      }
      unint64_t v27 = *(void *)(a5 + 32);
      if ((unint64_t)v18 >= v27)
      {
        unint64_t v31 = 1 - 0x5555555555555555 * (v20 >> 3);
        if (v31 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * ((uint64_t)(v27 - (void)v19) >> 3) > v31) {
          unint64_t v31 = 0x5555555555555556 * ((uint64_t)(v27 - (void)v19) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - (void)v19) >> 3) >= 0x555555555555555) {
          unint64_t v32 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v32 = v31;
        }
        if (v32)
        {
          unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AUPropertyItem>>(v32);
        }
        else
        {
          unint64_t v34 = 0;
          uint64_t v33 = 0;
        }
        int64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((v22 - v19) >> 3);
        int v39 = &v34[8 * ((v22 - v19) >> 3)];
        unsigned int v40 = &v34[24 * v33];
        if (v38 == v33)
        {
          if (v22 - v19 < 1)
          {
            if (v22 == v19) {
              unint64_t v42 = 1;
            }
            else {
              unint64_t v42 = 0x5555555555555556 * ((v22 - v19) >> 3);
            }
            uint64_t v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AUPropertyItem>>(v42);
            int v39 = &v43[24 * (v42 >> 2)];
            unsigned int v40 = &v43[24 * v44];
            if (v34) {
              operator delete(v34);
            }
          }
          else
          {
            if (v38 >= -1) {
              uint64_t v41 = v38 + 1;
            }
            else {
              uint64_t v41 = v38 + 2;
            }
            v39 -= 24 * (v41 >> 1);
          }
        }
        long long v45 = *(_OWORD *)buf;
        *((void *)v39 + 2) = buf[2];
        *(_OWORD *)int v39 = v45;
        uint64_t v46 = *(char **)(a5 + 16);
        unint64_t v47 = v39;
        if (v46 != v22)
        {
          uint64_t v48 = v22;
          uint64_t v49 = v39;
          do
          {
            long long v50 = *(_OWORD *)(v48 - 24);
            unint64_t v47 = v49 - 24;
            *((void *)v49 - 1) = *((void *)v48 - 1);
            *(_OWORD *)(v49 - 24) = v50;
            v48 -= 24;
            v49 -= 24;
          }
          while (v48 != v46);
        }
        uint64_t v51 = *(char **)(a5 + 24);
        int64_t v52 = v51 - v22;
        if (v51 != v22) {
          memmove(v39 + 24, v22, v51 - v22);
        }
        uint64_t v53 = *(void **)(a5 + 16);
        *(void *)(a5 + 16) = v47;
        *(void *)(a5 + 24) = &v39[v52 + 24];
        *(void *)(a5 + 32) = v40;
        uint64_t v10 = a4;
        if (v53) {
          operator delete(v53);
        }
      }
      else if (v22 == v18)
      {
        long long v37 = *(_OWORD *)buf;
        *((void *)v18 + 2) = buf[2];
        *(_OWORD *)uint64_t v18 = v37;
        *(void *)(a5 + 24) = v18 + 24;
      }
      else
      {
        double v28 = v18 - 24;
        uint64_t v29 = *(void *)(a5 + 24);
        while (v28 < v18)
        {
          long long v30 = *(_OWORD *)v28;
          *(void *)(v29 + 16) = *((void *)v28 + 2);
          *(_OWORD *)uint64_t v29 = v30;
          v29 += 24;
          v28 += 24;
        }
        *(void *)(a5 + 24) = v29;
        if (v18 != v22 + 24) {
          memmove(v22 + 24, v22, v18 - (v22 + 24));
        }
        uint64_t v35 = buf;
        if (v22 <= (char *)buf) {
          uint64_t v35 = &buf[3 * (*(void *)(a5 + 24) > (unint64_t)buf)];
        }
        long long v36 = *(_OWORD *)v35;
        *((void *)v22 + 2) = v35[2];
        *(_OWORD *)unint64_t v22 = v36;
      }
      double v54 = *(double *)&buf[2];
      double v55 = *(double *)(a5 + 40);
      if (*(double *)&buf[2] > v55)
      {
        *(void *)(a5 + 40) = buf[2];
        double v55 = v54;
      }
      uint64_t v56 = *(double **)(a5 + 16);
      float v57 = *(double **)(a5 + 24);
      unsigned int v58 = -1431655765 * ((unint64_t)((char *)v57 - (char *)v56) >> 3);
      double v59 = *(double *)a5;
      double v60 = v55 - *(double *)a5;
      unsigned int v61 = *(_DWORD *)(a5 + 8);
      double v62 = *(v57 - 1);
      BOOL v63 = v61 < v58 || v62 < v60;
      uint64_t v64 = *(double **)(a5 + 24);
      if (v63)
      {
        unsigned int v65 = v58 - 1;
        uint64_t v64 = *(double **)(a5 + 24);
        while (1)
        {
          int v66 = v64;
          v64 -= 3;
          if (v64 == v56) {
            break;
          }
          unsigned int v67 = v65 - 1;
          if (v65-- <= v61)
          {
            unsigned int v65 = v67;
            if (*(v66 - 4) >= v60) {
              goto LABEL_84;
            }
          }
        }
        uint64_t v64 = *(double **)(a5 + 16);
      }
LABEL_84:
      unint64_t v69 = *(void *)(a5 + 96);
      if (v57 != v64)
      {
        *(void *)(a5 + 104) = v69;
        uint64_t v70 = v64;
        do
        {
          unint64_t v71 = *(void *)(a5 + 112);
          if (v69 >= v71)
          {
            uint64_t v73 = *(void *)(a5 + 96);
            unint64_t v74 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v69 - v73) >> 3);
            unint64_t v75 = v74 + 1;
            if (v74 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v76 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v71 - v73) >> 3);
            if (2 * v76 > v75) {
              unint64_t v75 = 2 * v76;
            }
            if (v76 >= 0x555555555555555) {
              unint64_t v77 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v77 = v75;
            }
            if (v77) {
              unint64_t v77 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUPropertyItem>>(v77);
            }
            else {
              uint64_t v78 = 0;
            }
            unint64_t v79 = v77 + 24 * v74;
            long long v80 = *(_OWORD *)v70;
            *(double *)(v79 + 16) = v70[2];
            *(_OWORD *)unint64_t v79 = v80;
            int v82 = *(char **)(a5 + 96);
            uint64_t v81 = *(char **)(a5 + 104);
            unint64_t v83 = v79;
            if (v81 != v82)
            {
              do
              {
                long long v84 = *(_OWORD *)(v81 - 24);
                *(void *)(v83 - 8) = *((void *)v81 - 1);
                *(_OWORD *)(v83 - 24) = v84;
                v83 -= 24;
                v81 -= 24;
              }
              while (v81 != v82);
              uint64_t v81 = *(char **)(a5 + 96);
            }
            unint64_t v69 = v79 + 24;
            *(void *)(a5 + 96) = v83;
            *(void *)(a5 + 104) = v79 + 24;
            *(void *)(a5 + 112) = v77 + 24 * v78;
            if (v81) {
              operator delete(v81);
            }
          }
          else
          {
            long long v72 = *(_OWORD *)v70;
            *(double *)(v69 + 16) = v70[2];
            *(_OWORD *)unint64_t v69 = v72;
            v69 += 24;
          }
          *(void *)(a5 + 104) = v69;
          v70 += 3;
        }
        while (v70 != v57);
        int v85 = *(double **)(a5 + 24);
        int64_t v86 = (char *)v85 - (char *)v57;
        if (v85 != v57) {
          memmove(v64, v57, (char *)v85 - (char *)v57);
        }
        float v57 = (double *)((char *)v64 + v86);
        *(void *)(a5 + 24) = (char *)v64 + v86;
        double v62 = *(double *)((char *)v64 + v86 - 8);
        double v55 = *(double *)(a5 + 40);
        double v59 = *(double *)a5;
        unint64_t v69 = *(void *)(a5 + 96);
      }
      *(double *)(a5 + 48) = v62;
      uint64_t v87 = *(void *)(a5 + 104);
      if (v69 != v87)
      {
        uint64_t v88 = 0;
        char v89 = 1;
        double v90 = 0.0;
        do
        {
          char v91 = v89 | (*(double *)(v69 + 16) > v90);
          char v89 = 0;
          if (v91)
          {
            uint64_t v88 = (long long *)v69;
            double v90 = *(double *)(v69 + 16);
          }
          v69 += 24;
        }
        while (v69 != v87);
        if (v88)
        {
          *(unsigned char *)(a5 + 136) = 0;
          long long v92 = *v88;
          *(void *)(v156 + 16) = *((void *)v88 + 2);
          *(_OWORD *)uint64_t v156 = v92;
        }
      }
      if (v55 - *(double *)(a5 + 160) > v59) {
        *(unsigned char *)(a5 + 136) = 0;
      }
      int v93 = *(_DWORD *)(a5 + 120);
      if (!v93) {
        break;
      }
      if (v93 == 1)
      {
        int v94 = 0;
        float v95 = v159;
LABEL_119:
        float v96 = *v95;
        goto LABEL_121;
      }
      int v94 = 0;
      float v96 = 0.0;
LABEL_121:
      int v97 = *(_DWORD *)(a5 + 168);
      float v98 = *(double **)(a5 + 16);
      if (v57 == v98)
      {
        float v108 = 0.0;
        float v109 = 0.0;
      }
      else
      {
        double v99 = v55 - v59;
        if (*(unsigned char *)(a5 + 136)) {
          double v99 = *(double *)(a5 + 184);
        }
        float v100 = *(v57 - 1) - v99;
        float v101 = v100 + 0.0;
        if (v97 == v94) {
          float v102 = v100 + 0.0;
        }
        else {
          float v102 = 0.0;
        }
        float v103 = v57 - 4;
        while (1)
        {
          int v104 = *((_DWORD *)v103 + 2);
          if (v103 + 1 == v98) {
            break;
          }
          double v105 = v103[3];
          double v106 = *v103;
          v103 -= 3;
          float v100 = v106 - v105;
          float v101 = v100 + v101;
          if (v104 == v94) {
            float v107 = v100;
          }
          else {
            float v107 = -0.0;
          }
          float v102 = v102 + v107;
        }
        float v108 = v100 + v101;
        if (v104 != v94) {
          float v100 = -0.0;
        }
        float v109 = v102 + v100;
      }
      float v110 = v159;
      if (v94) {
        float v110 = v155;
      }
      float v111 = v59 * *v110;
      int v112 = (float)(v109 / v108) >= v96;
      if (v109 <= v111) {
        int v112 = 0;
      }
      if (!v93)
      {
        if (!v112) {
          goto LABEL_158;
        }
        float64x2_t v113 = 0uLL;
        if (v97 == 1)
        {
          v113.f64[1] = *(float64_t *)(a5 + 184);
        }
        else if (v57 != v98)
        {
          float v119 = v57;
          while (1)
          {
            int v120 = *((_DWORD *)v119 - 6);
            v119 -= 3;
            if (v120 == 1) {
              break;
            }
            float v57 = v119;
            if (v119 == v98) {
              goto LABEL_172;
            }
          }
          v113.f64[0] = 0.0;
          v113.f64[1] = *(v57 - 1);
        }
LABEL_172:
        double v126 = *(double *)(a5 + 128);
        double v127 = vmuld_lane_f64(v126, v113, 1);
        double v124 = *(double *)(a5 + 72);
        v125.f64[0] = v126 * v124;
        v113.f64[0] = v127;
        int v112 = 1;
        int v121 = 1;
        goto LABEL_173;
      }
      if (v93 == 1)
      {
        if ((v112 & 1) == 0) {
          goto LABEL_157;
        }
        float64x2_t v113 = 0uLL;
        if (v97)
        {
          if (v57 != v98)
          {
            float v114 = v57;
            while (1)
            {
              int v115 = *((_DWORD *)v114 - 6);
              v114 -= 3;
              if (!v115) {
                break;
              }
              float v57 = v114;
              if (v114 == v98) {
                goto LABEL_170;
              }
            }
            v113.f64[0] = 0.0;
            v113.f64[1] = *(v57 - 1);
          }
        }
        else
        {
          v113.f64[1] = *(float64_t *)(a5 + 184);
        }
LABEL_170:
        int v121 = 0;
        double v122 = *(double *)(a5 + 128);
        double v123 = vmuld_lane_f64(v122, v113, 1);
        double v124 = *(double *)(a5 + 80);
        v125.f64[0] = v122 * v124;
        v113.f64[0] = v123;
        int v112 = 2;
LABEL_173:
        uint64_t v129 = *(void *)(a5 + 192);
        uint64_t v128 = *(void *)(a5 + 200);
        signed int v130 = *(_DWORD *)(v129 + 8);
        if (v130 != *(_DWORD *)(v128 + 8))
        {
          if (EndpointVAD2LogScope(void)::once != -1) {
            dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_6);
          }
          if (EndpointVAD2LogScope(void)::scope)
          {
            float v148 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
            if (*(void *)EndpointVAD2LogScope(void)::scope) {
              goto LABEL_216;
            }
          }
          else
          {
            float v148 = MEMORY[0x1E4F14500];
LABEL_216:
            if (os_log_type_enabled(v148, OS_LOG_TYPE_ERROR))
            {
              LODWORD(buf[0]) = 136315394;
              *(void *)((char *)buf + 4) = "EndpointDecisionLayer.cpp";
              WORD2(buf[1]) = 1024;
              *(_DWORD *)((char *)&buf[1] + 6) = 261;
              _os_log_impl(&dword_1BB0CE000, v148, OS_LOG_TYPE_ERROR, "%25s:%-5d Internal decision history buffers must have the same size", (uint8_t *)buf, 0x12u);
            }
          }
          abort();
        }
        v125.f64[1] = v124;
        float64x2_t v117 = vaddq_f64(v113, v125);
        uint64_t v131 = *(int *)(v129 + 12);
        *(_DWORD *)(*(void *)v129 + 4 * v131) = v112;
        *(_DWORD *)(v129 + 12) = ((int)v131 + 1) % v130;
        uint64_t v132 = *(int *)(v128 + 12);
        *(float64x2_t *)(*(void *)v128 + 16 * v132) = v117;
        *(_DWORD *)(v128 + 12) = ((int)v132 + 1) % v130;
        int v133 = *(_DWORD *)(a5 + 208);
        if (v133 + 1 < v130) {
          signed int v130 = v133 + 1;
        }
        *(_DWORD *)(a5 + 208) = v130;
        *(_DWORD *)(a5 + 120) = v121;
        goto LABEL_177;
      }
      if (EndpointVAD2LogScope(void)::once != -1) {
        dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_6);
      }
      if (EndpointVAD2LogScope(void)::scope)
      {
        float v116 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
        if (!*(void *)EndpointVAD2LogScope(void)::scope)
        {
LABEL_157:
          int v112 = 0;
LABEL_158:
          float64x2_t v117 = 0uLL;
          goto LABEL_177;
        }
      }
      else
      {
        float v116 = MEMORY[0x1E4F14500];
      }
      BOOL v118 = os_log_type_enabled(v116, OS_LOG_TYPE_ERROR);
      float64x2_t v117 = 0uLL;
      if (v118)
      {
        LODWORD(buf[0]) = 136315394;
        *(void *)((char *)buf + 4) = "EndpointDecisionLayer.cpp";
        WORD2(buf[1]) = 1024;
        *(_DWORD *)((char *)&buf[1] + 6) = 197;
        _os_log_impl(&dword_1BB0CE000, v116, OS_LOG_TYPE_ERROR, "%25s:%-5d Invalid state value!", (uint8_t *)buf, 0x12u);
        float64x2_t v117 = 0uLL;
      }
      int v112 = 0;
LABEL_177:
      LODWORD(v166) = 0;
      HIDWORD(v166) = v112;
      float64x2_t v165 = v117;
      int v134 = *(_DWORD *)(a5 + 212);
      if (v134 == 1)
      {
        float v135 = *(uint64_t **)(a5 + 192);
        uint64_t v136 = *(void *)(a5 + 200);
        uint64_t v137 = *v135;
        int v138 = *((_DWORD *)v135 + 2);
        int v139 = v138 - *((_DWORD *)v135 + 3);
        int v140 = *(_DWORD *)(v137 + 4 * (v138 + ~(v139 % v138)));
        unsigned int v141 = *(_DWORD *)(a5 + 208);
        float64x2_t v163 = *(float64x2_t *)(*(void *)v136
                              + 16
                              * (*(_DWORD *)(v136 + 8)
                               + ~((*(_DWORD *)(v136 + 8) - *(_DWORD *)(v136 + 12)) % *(_DWORD *)(v136 + 8))));
        if (v141 >= 2)
        {
          int v142 = v139 + 1;
          int v143 = -1;
          do
          {
            v144.f64[0] = MRRingBuffer<DataTimeStamp>::GetSample(v136, --v143);
            if (v145 > v163.f64[1])
            {
              int v140 = *(_DWORD *)(v137 + 4 * (v138 + ~(v142 % v138)));
              v144.f64[1] = v145;
              float64x2_t v163 = v144;
            }
            ++v142;
          }
          while (-v141 != v143);
        }
        uint64_t v7 = a7;
        int v8 = a6;
        uint64_t v10 = a4;
        if (!v141) {
          goto LABEL_191;
        }
        if (v140 != 2) {
          goto LABEL_191;
        }
        double v146 = *(double *)(v162 + 8);
        if (v146 - *(double *)(a5 + 160) < *(double *)(a5 + 56) || v146 - v163.f64[1] < *(double *)(a5 + 64)) {
          goto LABEL_191;
        }
        *(_DWORD *)(a5 + 212) = 2;
        LODWORD(v166) = 4;
        float64x2_t v117 = v163;
      }
      else
      {
        if (v134 || v112 != 1) {
          goto LABEL_191;
        }
        *(_DWORD *)(a5 + 212) = 1;
        LODWORD(v166) = 3;
      }
      float64x2_t v164 = v117;
LABEL_191:
      EndpointVAD2::DispatchObservers(v160, (_DWORD *)&v166 + 1, (uint64_t)&v165, v10);
      CFDictionaryRef result = EndpointVAD2::DispatchObservers(v160, &v166, (uint64_t)&v164, v10);
      v161 += 3;
      v162 += 16;
      if (v161 == a2[1]) {
        return result;
      }
    }
    int v94 = 1;
    float v95 = v155;
    goto LABEL_119;
  }
  return result;
}

void sub_1BB455438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (v35) {
    operator delete(v35);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EndpointVAD2::DispatchObservers(uint64_t result, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if ((*a2 - 1) <= 3)
  {
    uint64_t v4 = result;
    int64_t v5 = *(uint64_t **)(result + 360);
    if (v5 != *(uint64_t **)(result + 368))
    {
      do
      {
        uint64_t v9 = *v5++;
        CFDictionaryRef result = (*(uint64_t (**)(uint64_t, _DWORD *, uint64_t, uint64_t, void, void))(*(void *)v9 + 16))(v9, a2, a3, a4, 0, 0);
      }
      while (v5 != *(uint64_t **)(v4 + 368));
    }
  }
  return result;
}

void FeaturesDSPWrapper::ProcessAudio(FeaturesDSPWrapper *this, const AudioBufferList *a2, double a3, uint64_t a4)
{
  uint64_t v4 = a4;
  v20[1] = *(AudioBufferList **)MEMORY[0x1E4F143B8];
  *((double *)this + 17) = a3;
  double v7 = *(double *)this;
  uint64_t v6 = *((void *)this + 1);
  double v8 = **(double **)this * a3;
  *((double *)this + 16) = v8;
  int v9 = *(_DWORD *)(v6 + 12);
  if (!v9)
  {
    *((double *)this + 18) = v8;
    *((double *)this + 19) = a3;
  }
  uint64_t v10 = *(void *)(*((void *)this + 14) + 48);
  int v16 = a4;
  int mData = a2->mBuffers[0].mData;
  uint64_t v12 = *(void **)(v10 + 16);
  if (*(unsigned char *)(*(void *)&v7 + 120))
  {
    unsigned int v15 = a4;
    memcpy(v12, mData, 4 * a4);
  }
  else
  {
    unsigned int v15 = (*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)&v7 + 40) + 144))(*(void *)(*(void *)&v7 + 40), a4);
    (*(void (**)(void, void *, void, void *, void, int *, unsigned int *, uint64_t, uint64_t))(**(void **)(*(void *)&v7 + 40) + 32))(*(void *)(*(void *)&v7 + 40), mData, 0, v12, 0, &v16, &v15, 1, 1);
    uint64_t v4 = v15;
  }
  *(void *)AudioChannelLayout buf = v10;
  v20[0] = (AudioBufferList *)v10;
  if (*(unsigned char *)(*(void *)&v7 + 121))
  {
    LODWORD(v13) = v16;
    if (*(_DWORD *)(*(void *)&v7 + 20) != (*(double *)(*(void *)&v7 + 8)
                                                            * (double)v13
                                                            / **(double **)&v7))
      __assert_rtn("ResampleAndRebufferAudio", "FeatureAudioAdaptor.cpp", 93, "ConvertToResampledBlockSize(inputNumSamples) == mOutputBlockSize");
    (*(void (**)(void, uint64_t, unsigned char *, AudioBufferList **))(*(void *)&v7 + 136))(*(void *)(*(void *)&v7 + 128), v4, buf, v20);
  }
  else
  {
    BlockProcessor::Process((BlockProcessor *)(*(void *)&v7 + 48), v4, (const AudioBufferList **)buf, v20);
  }
  if (v4 <= *((_DWORD *)this + 30))
  {
    *(_DWORD *)(*(void *)(*((void *)this + 14) + 48) + 12) = 4 * v4;
  }
  else
  {
    if (EndpointVAD2LogScope(void)::once != -1) {
      dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_6);
    }
    if (EndpointVAD2LogScope(void)::scope)
    {
      double v14 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
      if (!*(void *)EndpointVAD2LogScope(void)::scope) {
        goto LABEL_20;
      }
    }
    else
    {
      double v14 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioChannelLayout buf = 136315394;
      *(void *)&uint8_t buf[4] = "FeaturesDSPWrapper.h";
      __int16 v18 = 1024;
      int v19 = 143;
      _os_log_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d Number of processed samples exceeds allocated buffer size.", buf, 0x12u);
    }
  }
LABEL_20:
  *((_DWORD *)this + 40) = *(_DWORD *)(*((void *)this + 1) + 12) - v9;
}

void VectorTimeSeriesSynchronizer<float>::GetSynchronizedVector(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)AudioChannelLayout buf = 0;
  double SampleTime = VectorTimeSeriesSynchronizer<float>::GetSampleTime(a1, a2, (unsigned int *)buf);
  *(_DWORD *)AudioChannelLayout buf = 0;
  double OriginalTimeSeconds = VectorTimeSeriesSynchronizer<float>::GetOriginalTimeSeconds(a1, a2, (unsigned int *)buf);
  unsigned int v17 = 0;
  if (*(_DWORD *)(a1 + 12))
  {
    unsigned int v8 = 0;
    unsigned int v9 = SampleTime;
    double v10 = (double)SampleTime;
    do
    {
      if (v8 && VectorTimeSeriesSynchronizer<float>::GetSampleTime(a1, a2, &v17) != v10)
      {
        if (EndpointVAD2LogScope(void)::once != -1) {
          dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_6);
        }
        if (!EndpointVAD2LogScope(void)::scope)
        {
          uint64_t v11 = MEMORY[0x1E4F14500];
LABEL_11:
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            unsigned int v12 = v17;
            double v13 = VectorTimeSeriesSynchronizer<float>::GetSampleTime(a1, a2, &v17);
            *(_DWORD *)AudioChannelLayout buf = 136316162;
            int v19 = "FeatureTimeSeries.h";
            __int16 v20 = 1024;
            int v21 = 521;
            __int16 v22 = 1024;
            unsigned int v23 = v12;
            __int16 v24 = 1024;
            unsigned int v25 = v9;
            __int16 v26 = 1024;
            unsigned int v27 = v13;
            _os_log_impl(&dword_1BB0CE000, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Synchronization failure! One time series has outpaced the others: timeSeriesNo %i, synchSampleTime %u, GetSampleTime(eventNo, timeSeriesNo) = %u", buf, 0x24u);
          }
          goto LABEL_13;
        }
        uint64_t v11 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
        if (*(void *)EndpointVAD2LogScope(void)::scope) {
          goto LABEL_11;
        }
      }
LABEL_13:
      (*(void (**)(uint64_t, _DWORD *, unsigned int *))(*(void *)a1 + 16))(a1, a2, &v17);
      uint64_t v15 = *(void *)(a3 + 24);
      if (v17 >= (unint64_t)((*(void *)(a3 + 32) - v15) >> 2)) {
        __assert_rtn("ElementAt", "FeatureTimeSeries.h", 77, "index < mArray.size()");
      }
      *(_DWORD *)(v15 + 4 * v17) = v14;
      double v16 = VectorTimeSeriesSynchronizer<float>::GetOriginalTimeSeconds(a1, a2, &v17);
      if (OriginalTimeSeconds >= v16) {
        double OriginalTimeSeconds = v16;
      }
      unsigned int v8 = v17 + 1;
      unsigned int v17 = v8;
    }
    while (v8 < *(_DWORD *)(a1 + 12));
  }
  *(double *)(a3 + 56) = OriginalTimeSeconds;
  *(double *)(a3 + 48) = OriginalTimeSeconds * *(double *)(a1 + 80);
}

double VectorTimeSeriesSynchronizer<float>::GetSampleTime(uint64_t a1, _DWORD *a2, unsigned int *a3)
{
  int SynchronizationDelay = VectorTimeSeriesSynchronizer<float>::GetSynchronizationDelay(a1, *a3);
  double v7 = *(uint64_t **)(*(void *)(a1 + 32) + 8 * *a3);
  uint64_t v8 = *v7;
  int v9 = *a2 - SynchronizationDelay;
  if (v9 < 0) {
    int v10 = *((_DWORD *)v7 + 2) + ~((*((_DWORD *)v7 + 2) - v9 + ~*((_DWORD *)v7 + 3)) % *((_DWORD *)v7 + 2));
  }
  else {
    int v10 = (*((_DWORD *)v7 + 3) + v9) % *((_DWORD *)v7 + 2);
  }
  return *(double *)(v8 + 8 * v10);
}

double VectorTimeSeriesSynchronizer<float>::GetOriginalTimeSeconds(uint64_t a1, _DWORD *a2, unsigned int *a3)
{
  int SynchronizationDelay = VectorTimeSeriesSynchronizer<float>::GetSynchronizationDelay(a1, *a3);
  double v7 = *(uint64_t **)(*(void *)(a1 + 40) + 8 * *a3);
  uint64_t v8 = *v7;
  int v9 = *a2 - SynchronizationDelay;
  if (v9 < 0) {
    int v10 = *((_DWORD *)v7 + 2) + ~((*((_DWORD *)v7 + 2) - v9 + ~*((_DWORD *)v7 + 3)) % *((_DWORD *)v7 + 2));
  }
  else {
    int v10 = (*((_DWORD *)v7 + 3) + v9) % *((_DWORD *)v7 + 2);
  }
  return *(double *)(v8 + 8 * v10);
}

void EndpointVAD2::DoneProcessingAudio(EndpointVAD2 *this, double a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&v15, "");
  if (*((_DWORD *)this + 7) != 1)
  {
    std::string::__assign_external(&v15, "DoneProcessingAudio() should not be called with real time operation mode or on the real time thread.", 0x64uLL);
    if (EndpointVAD2LogScope(void)::once != -1) {
      dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_6);
    }
    if (EndpointVAD2LogScope(void)::scope)
    {
      double v13 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
      if (!*(void *)EndpointVAD2LogScope(void)::scope) {
        goto LABEL_24;
      }
    }
    else
    {
      double v13 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      int v14 = &v15;
      if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v14 = (std::string *)v15.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)AudioChannelLayout __p = 136315650;
      *(void *)&__p[4] = "EndpointVAD2.cpp";
      *(_WORD *)&unsigned char __p[12] = 1024;
      *(_DWORD *)&__p[14] = 434;
      *(_WORD *)&unsigned char __p[18] = 2080;
      *(void *)&__p[20] = v14;
      _os_log_impl(&dword_1BB0CE000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d %s", __p, 0x1Cu);
    }
LABEL_24:
    abort();
  }
  int v19 = 0;
  __int16 v20 = 0;
  uint64_t v21 = 0;
  double v16 = 0;
  unsigned int v17 = 0;
  uint64_t v18 = 0;
  unint64_t v4 = *(unsigned int *)(*((void *)this + 12) + 236);
  std::vector<std::vector<unsigned int>>::resize(&v19, v4);
  std::vector<std::span<float,18446744073709551615ul>>::resize((char **)&v16, v4);
  uint64_t v5 = *((void *)this + 12);
  memset(__p, 0, 24);
  MixViterbiProd::decodeRaw(v5, v4, (std::vector<unsigned int> *)__p);
  uint64_t v6 = *(int **)__p;
  double v7 = *(int **)&__p[8];
  if (*(void *)__p != *(void *)&__p[8])
  {
    uint64_t v8 = *(uint64_t **)(v5 + 184);
    uint64_t v9 = *v8;
    int v10 = *((_DWORD *)v8 + 3);
    do
    {
      int v11 = *v6++;
      *(_DWORD *)(v9 + 4 * v10) = v11;
      int v10 = (*((_DWORD *)v8 + 3) + 1) % *((_DWORD *)v8 + 2);
      *((_DWORD *)v8 + 3) = v10;
    }
    while (v6 != v7);
  }
  MixViterbiProd::convertRawStateSequenceToProd(v5, __p, &v19);
  MixViterbiProd::retrieveTimeStamps(v5, 1 - v4, 0, (char **)&v16);
  if (*(void *)__p)
  {
    *(void *)&__p[8] = *(void *)__p;
    operator delete(*(void **)__p);
  }
  unsigned int v12 = v16;
  if (v20 != v19 && v17 != v16)
  {
    *(double *)AudioChannelLayout __p = *((double *)this + 2) * a2;
    *(double *)&__p[8] = a2;
    EndpointVAD2::UpdateAndDispatchDecisions((uint64_t)this, &v19, (uint64_t *)&v16, (uint64_t)__p, *((void *)this + 13), *((_DWORD *)this + 6), (unsigned char *)this + 304);
  }
  if (v12) {
    operator delete(v12);
  }
  *(void *)AudioChannelLayout __p = &v19;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
}

void sub_1BB455DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char *a22,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  a22 = &a19;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

void EndpointVAD2::GetInterleavedFeaturesFromQueue(float **a1, int a2, int a3, uint64_t a4)
{
  std::vector<float>::resize((uint64_t)a1, (a3 * a2));
  if (a3)
  {
    int v8 = 0;
    uint64_t v9 = *a1;
    do
    {
      if (a2)
      {
        int v10 = 0;
        do
        {
          int v11 = v10;
          int v12 = v8 - a3;
          *v9++ = (*(float (**)(uint64_t, int *, int *))(*(void *)a4 + 16))(a4, &v12, &v11);
          ++v10;
        }
        while (a2 != v10);
      }
      ++v8;
    }
    while (v8 != a3);
  }
}

uint64_t SpatializerWithInHeadRendering::getInHeadParams(SpatializerWithInHeadRendering *this)
{
  return (uint64_t)this + 332;
}

uint64_t HRTFXTCSpatializer::getLatencyFrames(HRTFXTCSpatializer *this)
{
  unint64_t v2 = (unsigned int *)*((void *)this + 48);
  if (v2)
  {
    uint64_t result = *v2;
  }
  else
  {
    uint64_t v4 = *((void *)this + 44);
    if (v4)
    {
      LODWORD(result) = (*(uint64_t (**)(void))(**(void **)(v4 + 24) + 80))(*(void *)(v4 + 24));
      if (*(_DWORD *)(v4 + 172)) {
        uint64_t result = (result + 5);
      }
      else {
        uint64_t result = result;
      }
    }
    else
    {
      uint64_t result = 0;
    }
  }
  uint64_t v5 = (uint64_t *)*((void *)this + 45);
  if (*((uint64_t **)this + 46) != v5)
  {
    uint64_t v6 = *v5;
    if (v6)
    {
      unsigned int v7 = *(_DWORD *)(v6 + 4) - 1;
      if (v7 > 6) {
        int v8 = 0;
      }
      else {
        int v8 = dword_1BB8A9418[v7];
      }
      return (v8 + result);
    }
  }
  return result;
}

float SpatializerWithInHeadRendering::getDryMix(SpatializerWithInHeadRendering *this)
{
  uint64_t v2 = (*(uint64_t (**)(SpatializerWithInHeadRendering *))(*(void *)this + 320))(this);
  float v3 = *((float *)this + 14);
  float v5 = *(float *)(v2 + 4);
  float v4 = *(float *)(v2 + 8);
  if (v5 >= v4)
  {
    BOOL v9 = v4 <= v3;
    float result = 0.0;
    if (!v9) {
      return 1.0;
    }
  }
  else
  {
    float v6 = (float)(v3 - v5) / (float)(v4 - v5);
    float v7 = 1.0 - v6;
    if (v6 > 1.0) {
      float v7 = 0.0;
    }
    if (v6 >= 0.0) {
      return v7;
    }
    else {
      return 1.0;
    }
  }
  return result;
}

uint64_t HRTFXTCSpatializer::processAccumulating(HRTFXTCSpatializer *this, float *a2, float *const *a3, int a4, float *const *a5, int a6, vDSP_Length a7, __n128 a8, IR::ComplexDataCircBuffer *a9)
{
  uint64_t v112 = *MEMORY[0x1E4F143B8];
  if (a6 == a4)
  {
    if (*((unsigned char *)this + 16))
    {
      float v10 = a8.n128_f32[0];
      LODWORD(v12) = a6;
      if (*((void *)this + 62))
      {
        unsigned __int8 v14 = atomic_load((unsigned __int8 *)this + 322);
        if (v14)
        {
          CFDictionaryRef v15 = (const __CFDictionary *)*((void *)this + 4);
          if (v15)
          {
            if (applesauce::CF::details::has_key<__CFString const*&>(v15, (const void *)kXTCSourceExtentIRCustomURLParamName))
            {
              CFDictionaryRef v16 = (const __CFDictionary *)*((void *)this + 4);
              if (!v16)
              {
                exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                applesauce::CF::construct_error(exception);
              }
              unsigned int v17 = (uint64_t (***)(void, uint64_t, uint64_t, uint64_t, CFTypeRef *, void, void, float))*((void *)this + 62);
              float v18 = *((float *)this + 2);
              uint64_t v19 = *((unsigned int *)this + 3);
              applesauce::CF::details::find_at_key_or_optional<applesauce::CF::URLRef,__CFString const*&>(&__B, v16, (const void *)kXTCSourceExtentIRCustomURLParamName);
              CFTypeRef cf = (CFTypeRef)__B.__r_.__value_.__r.__words[0];
              __B.__r_.__value_.__r.__words[0] = 0;
              int v20 = (**v17)(v17, v19, 512, 512, &cf, 0, 0, v18);
              if (cf) {
                CFRelease(cf);
              }
              std::__optional_destruct_base<applesauce::CF::URLRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&__B);
              if (!v20) {
                *((unsigned char *)this + 320) = 1;
              }
              atomic_store(0, (unsigned __int8 *)this + 322);
            }
          }
        }
      }
      uint64_t v21 = *(_DWORD **)(*((void *)this + 44) + 24);
      unsigned int v22 = v21[42];
      if (v22 >= v12) {
        uint64_t v12 = v12;
      }
      else {
        uint64_t v12 = v22;
      }
      a8.n128_u32[0] = *((_DWORD *)this + 12);
      float v23 = *((float *)this + 13);
      float v24 = *((float *)this + 14);
      if (*((unsigned char *)this + 320) || *((unsigned char *)this + 17))
      {
        *((unsigned char *)this + 320) = 0;
        (*(void (**)(_DWORD *, void, __n128))(*(void *)v21 + 48))(v21, 0, a8);
        (*(void (**)(void, uint64_t, float))(**(void **)(*((void *)this + 44) + 24) + 48))(*(void *)(*((void *)this + 44) + 24), 1, v23);
        unsigned int v25 = (char *)this + 352;
        (*(void (**)(void, uint64_t, float))(**(void **)(*((void *)this + 44) + 24) + 48))(*(void *)(*((void *)this + 44) + 24), 2, v24);
        (*(void (**)(void, uint64_t, float))(**(void **)(*(void *)v25 + 24) + 48))(*(void *)(*(void *)v25 + 24), 5, (float)*((unsigned int *)this + 29));
        (*(void (**)(void, uint64_t, float))(**(void **)(*(void *)v25 + 24) + 48))(*(void *)(*(void *)v25 + 24), 7, (float)*((unsigned int *)this + 30));
        __int16 v26 = (unsigned char *)*((void *)this + 62);
        if (v26 && v26[208])
        {
          BOOL v27 = fabsf(*((float *)this + 15)) >= 0.00000011921 || fabsf(*((float *)this + 16)) >= 0.00000011921;
          (*(void (**)(unsigned char *, BOOL))(*(void *)v26 + 56))(v26, v27);
          uint64_t v34 = *((void *)this + 44);
          if (*(unsigned char *)(*((void *)this + 62) + 209))
          {
            v33.n128_u32[0] = *((_DWORD *)this + 15);
            if (v33.n128_f32[0] < *((float *)this + 16)) {
              v33.n128_u32[0] = *((_DWORD *)this + 16);
            }
            (*(void (**)(void, uint64_t, __n128))(**(void **)(v34 + 24) + 48))(*(void *)(v34 + 24), 8, v33);
          }
          else
          {
            (*(void (**)(void, uint64_t, double))(**(void **)(v34 + 24) + 48))(*(void *)(v34 + 24), 8, 0.0);
          }
          BOOL v35 = fabsf(*((float *)this + 49)) >= 0.00000011921 || fabsf(*((float *)this + 50)) >= 0.00000011921;
          SourceExtentProcessor::updateExtentParameters(*((SourceExtentProcessor **)this + 62), *((float *)this + 15), *((float *)this + 16));
          (*(void (**)(void, void, BOOL))(**((void **)this + 62) + 40))(*((void *)this + 62), *((unsigned __int8 *)this + 17), v35);
        }
        else
        {
          (*(void (**)(void, uint64_t, double))(**(void **)(*((void *)this + 44) + 24) + 48))(*(void *)(*((void *)this + 44) + 24), 8, 0.0);
          uint64_t v32 = *((void *)this + 62);
          if (v32) {
            (*(void (**)(uint64_t, void))(*(void *)v32 + 56))(v32, 0);
          }
        }
        a8.n128_u64[0] = *(void *)((char *)this + 60);
        *(void *)((char *)this + 196) = a8.n128_u64[0];
      }
      uint64_t v36 = (*(uint64_t (**)(HRTFXTCSpatializer *, __n128))(*(void *)this + 320))(this, a8);
      float v37 = *((float *)this + 14);
      float v38 = *(float *)(v36 + 4);
      float v39 = *(float *)(v36 + 8);
      if (v39 <= v37) {
        float v40 = 0.0;
      }
      else {
        float v40 = 1.0;
      }
      float v41 = (float)(v37 - v38) / (float)(v39 - v38);
      float v42 = 1.0 - v41;
      if (v41 > 1.0) {
        float v42 = 0.0;
      }
      if (v41 >= 0.0) {
        float v43 = v42;
      }
      else {
        float v43 = 1.0;
      }
      if (v38 >= v39) {
        float v43 = v40;
      }
      float v101 = v43;
      uint64_t v44 = (float *)(*(uint64_t (**)(HRTFXTCSpatializer *))(*(void *)this + 320))(this);
      v45.n128_u32[0] = *((_DWORD *)this + 14);
      float v46 = *v44;
      float v47 = v44[1];
      if (*v44 <= v45.n128_f32[0]) {
        float v48 = 0.0;
      }
      else {
        float v48 = 1.0;
      }
      float v49 = (float)(v45.n128_f32[0] - v46) / (float)(v47 - v46);
      float v50 = 1.0 - v49;
      if (v49 > 1.0) {
        float v50 = 0.0;
      }
      if (v49 >= 0.0) {
        v45.n128_f32[0] = v50;
      }
      else {
        v45.n128_f32[0] = 1.0;
      }
      if (v46 < v47) {
        float v51 = v45.n128_f32[0];
      }
      else {
        float v51 = v48;
      }
      uint64_t v52 = (*(uint64_t (**)(HRTFXTCSpatializer *, __n128))(*(void *)this + 320))(this, v45);
      float v53 = *((float *)this + 14);
      v54.n128_u32[0] = *(_DWORD *)v52;
      float v55 = *(float *)(v52 + 8);
      if (v55 <= *(float *)v52)
      {
        if (v54.n128_f32[0] <= v53) {
          float v58 = 1.0;
        }
        else {
          float v58 = 0.0;
        }
      }
      else
      {
        float v56 = (float)(v53 - v54.n128_f32[0]) / (float)(v55 - v54.n128_f32[0]);
        if (v56 <= 1.0) {
          float v57 = v56;
        }
        else {
          float v57 = 1.0;
        }
        if (v56 >= 0.0) {
          float v58 = v57;
        }
        else {
          float v58 = 0.0;
        }
      }
      float v59 = (float)(v58 + (float)((float)(1.0 - v58) * *(float *)(v52 + 12))) * v10;
      float v60 = 0.0;
      if (*((unsigned char *)this + 132)) {
        float v60 = v59;
      }
      float v99 = v60;
      float v100 = (float)(1.0 - v101) * v60;
      if (v51 >= 1.0
        && v100 <= 0.0
        && *((float *)this + 105) <= 0.0
        && *((_DWORD *)this + 115) >= *((_DWORD *)this + 5))
      {
        BOOL v62 = 0;
        int v65 = 0;
        unsigned int v98 = 0;
      }
      else
      {
        uint64_t v61 = *((void *)this + 62);
        if (v61 && *(unsigned char *)(v61 + 208))
        {
          if (*(_DWORD *)(v61 + 212)) {
            BOOL v62 = 1;
          }
          else {
            BOOL v62 = *(unsigned __int8 *)(v61 + 209) != 0;
          }
        }
        else
        {
          BOOL v62 = 0;
        }
        BOOL v63 = (float *)*((void *)this + 44);
        float v64 = 3000.0;
        if (*((_DWORD *)this + 81)) {
          float v64 = -1.0;
        }
        v63[40] = v64;
        __B.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
        unsigned int v98 = IR::IRProcessor::processMultipleInputs((IR::IRProcessor *)v63, (const float **)&__B, a5, 1u, v12, a7, v100, 0);
        int v65 = 1;
      }
      int v66 = (IR::FixedIntegerDelay *)*((void *)this + 48);
      if (v66)
      {
        IR::FixedIntegerDelay::process(v66, a2, *((float **)this + 54), a7);
        a2 = (float *)*((void *)this + 54);
      }
      if (v12)
      {
        unint64_t v67 = 0;
        float v68 = v101 * v99;
        v54.n128_u64[0] = 1.0;
        do
        {
          unint64_t v69 = a5[v67];
          if (v62)
          {
            uint64_t v70 = (void *)*((void *)this + 62);
            __B.__r_.__value_.__r.__words[0] = *((void *)this + 63);
            float v71 = -1.0;
            if (!*((_DWORD *)this + 81)) {
              float v71 = 3000.0;
            }
            uint64_t v72 = v70[20];
            uint64_t v73 = v70[21];
            while (v72 != v73)
            {
              if (*(void *)v72) {
                *(float *)(*(void *)v72 + 160) = v71;
              }
              v72 += 8;
            }
            (*(void (**)(void *, float *, std::string *, unint64_t, uint64_t, vDSP_Length, float, __n128))(*v70 + 8))(v70, v69, &__B, v67, 1, a7, 1.0, v54);
            (*(void (**)(void, float *, void, unint64_t, void, vDSP_Length))(**((void **)this + 62) + 24))(*((void *)this + 62), v69, *((void *)this + 63), v67, 0, a7);
            unint64_t v69 = (float *)*((void *)this + 63);
          }
          if (v68 <= 0.0 && (float)(*((float *)this + 106) * *((float *)this + 104)) <= 0.0)
          {
            *(_DWORD *)(*((void *)this + 49) + 4 * v67) = 0;
          }
          else
          {
            uint64_t v74 = *((void *)this + 59);
            if (*((void *)this + 60) == v74) {
              float v75 = (float)((float)(1.0 - v51) * 0.70711) + (float)(v51 * *(float *)(*((void *)this + 17) + 4 * v67));
            }
            else {
              float v75 = v51 * *(float *)(v74 + 4 * v67);
            }
            float v76 = v68 * v75;
            *(float *)&__B.__r_.__value_.__l.__data_ = v76;
            if (*((unsigned char *)this + 17) || (unint64_t v77 = (float *)(*((void *)this + 49) + 4 * v67), v76 == *v77))
            {
              if (v65) {
                vDSP_vsma(a2, 1, (const float *)&__B, v69, 1, v69, 1, a7);
              }
              else {
                vDSP_vsmul(a2, 1, (const float *)&__B, v69, 1, a7);
              }
            }
            else if (a7)
            {
              LODWORD(__Step.__r_.__value_.__l.__data_) = 0;
              *(float *)&__Step.__r_.__value_.__l.__data_ = (float)(v76 - *v77) / (float)a7;
              if (v65) {
                vDSP_vrampmuladd(a2, 1, v77, (const float *)&__Step, v69, 1, a7);
              }
              else {
                vDSP_vrampmul(a2, 1, v77, (const float *)&__Step, v69, 1, a7);
              }
            }
            *(_DWORD *)(*((void *)this + 49) + 4 * v67) = __B.__r_.__value_.__l.__data_;
          }
          uint64_t v78 = *((void *)this + 44);
          if (*(_DWORD *)(*(void *)(v78 + 24) + 164))
          {
            uint64_t v80 = v78 + 112;
            uint64_t v79 = *(void *)(v78 + 112);
            float v81 = 0.0;
            if (v67 < (*(void *)(v80 + 8) - v79) >> 2) {
              float v81 = *(float *)(v79 + 4 * v67);
            }
            float v82 = (1.0 - v51) * v81;
            uint64_t v83 = *(void *)(*((void *)this + 45) + 8 * v67);
            if (*((_DWORD *)this + 81)) {
              float v84 = 1.0;
            }
            else {
              float v84 = -0.00033333;
            }
            *(float *)(v83 + 96) = expf(v84);
            IR::DelayLine::setDelay(v83, v82);
            int v85 = *(IR::DelayLine **)(*((void *)this + 45) + 8 * v67);
            __B.__r_.__value_.__r.__words[0] = (std::string::size_type)v69;
            IR::DelayLine::process(v85, v69, (float **)&__B, a7);
          }
          vDSP_vadd(v69, 1, a3[v67], 1, a3[v67], 1, a7);
          ++v67;
        }
        while (v67 != v12);
      }
      if (v62) {
        (*(void (**)(void, vDSP_Length))(**((void **)this + 62) + 48))(*((void *)this + 62), a7);
      }
      *((unsigned char *)this + 268) = *((unsigned char *)this + 132);
      if (v101 >= 1.0 && *((float *)this + 104) >= 1.0)
      {
        unsigned int v86 = *((_DWORD *)this + 115);
        unsigned int v87 = *((_DWORD *)this + 5);
        if (v86 < v87)
        {
          BOOL v88 = __CFADD__(v86, a7);
          unsigned int v89 = v86 + a7;
          if (v88) {
            unsigned int v89 = -1;
          }
          *((_DWORD *)this + 115) = v89;
          if (v89 >= v87)
          {
            uint64_t v90 = *((void *)this + 62);
            if (v90) {
              (*(void (**)(uint64_t, void))(*(void *)v90 + 32))(v90, 0);
            }
          }
        }
      }
      else
      {
        *((_DWORD *)this + 115) = 0;
      }
      *((float *)this + 104) = v101;
      *((float *)this + 105) = v100;
      *((float *)this + 106) = v99;
      *((unsigned char *)this + 17) = 0;
      return v98;
    }
    else
    {
      if (getAUSMV2Log(void)::onceToken != -1) {
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
      }
      unint64_t v31 = getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
      {
        std::string::basic_string[abi:ne180100]<0>(&v105, "HRTFXTCSpatializer");
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("::", &v105, &__Step);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("processAccumulating", &__Step, &__B);
        if ((__B.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_B = &__B;
        }
        else {
          p_B = (std::string *)__B.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)AudioChannelLayout buf = 136315138;
        float v109 = p_B;
        _os_log_debug_impl(&dword_1BB0CE000, v31, OS_LOG_TYPE_DEBUG, "%s: ERROR: not initialized", buf, 0xCu);
        if (SHIBYTE(__B.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__B.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__Step.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__Step.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v105.__r_.__value_.__l.__data_);
        }
      }
      return 4294956429;
    }
  }
  else
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    uint64_t v29 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      std::string::basic_string[abi:ne180100]<0>(&v105, "HRTFXTCSpatializer");
      char v91 = std::string::append(&v105, "::", 2uLL);
      long long v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
      __Step.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__Step.__r_.__value_.__l.__data_ = v92;
      v91->__r_.__value_.__l.__size_ = 0;
      v91->__r_.__value_.__r.__words[2] = 0;
      v91->__r_.__value_.__r.__words[0] = 0;
      int v93 = std::string::append(&__Step, "processAccumulating", 0x13uLL);
      long long v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
      __B.__r_.__value_.__r.__words[2] = v93->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__B.__r_.__value_.__l.__data_ = v94;
      v93->__r_.__value_.__l.__size_ = 0;
      v93->__r_.__value_.__r.__words[2] = 0;
      v93->__r_.__value_.__r.__words[0] = 0;
      float v95 = &__B;
      if ((__B.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        float v95 = (std::string *)__B.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)AudioChannelLayout buf = 136315394;
      float v109 = v95;
      __int16 v110 = 1024;
      int v111 = a4;
      _os_log_debug_impl(&dword_1BB0CE000, v29, OS_LOG_TYPE_DEBUG, "%s: ERROR: cannot process with %d output channels", buf, 0x12u);
      if (SHIBYTE(__B.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__B.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__Step.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__Step.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v105.__r_.__value_.__l.__data_);
      }
    }
    return 4294956445;
  }
}

void sub_1BB456D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,char a29)
{
  __cxa_free_exception(v29);
  _Unwind_Resume(a1);
}

BOOL applesauce::CF::details::has_key<__CFString const*&>(CFDictionaryRef theDict, const void *a2)
{
  BOOL result = 0;
  if (theDict)
  {
    if (a2) {
      return CFDictionaryContainsKey(theDict, a2) != 0;
    }
  }
  return result;
}

void applesauce::CF::details::find_at_key_or_optional<applesauce::CF::URLRef,__CFString const*&>(unsigned char *a1, CFDictionaryRef theDict, const void *a3)
{
  float v4 = applesauce::CF::details::at_key<__CFString const*&>(theDict, a3);
  if (!v4) {
    goto LABEL_5;
  }
  float v5 = v4;
  CFRetain(v4);
  CFTypeID v6 = CFGetTypeID(v5);
  if (v6 != CFURLGetTypeID())
  {
    CFRelease(v5);
LABEL_5:
    char v7 = 0;
    *a1 = 0;
    goto LABEL_6;
  }
  *(void *)a1 = v5;
  char v7 = 1;
LABEL_6:
  a1[8] = v7;
}

uint64_t std::__optional_destruct_base<applesauce::CF::URLRef,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v2 = *(const void **)a1;
    if (*(void *)a1) {
      CFRelease(v2);
    }
  }
  return a1;
}

void HRTFXTCSpatializer::reset(IR::FFTFilter ***this)
{
  IR::IRProcessor::reset(this[44]);
  uint64_t v2 = this[62];
  if (v2) {
    (*((void (**)(IR::FFTFilter **, uint64_t))*v2 + 4))(v2, 1);
  }
  float v3 = this[45];
  float v4 = this[46];
  while (v3 != v4)
  {
    if (*v3) {
      IR::DelayLine::reset(*v3);
    }
    ++v3;
  }
  float v5 = (IR::FixedIntegerDelay *)this[48];
  if (v5) {
    IR::FixedIntegerDelay::reset(v5);
  }
  *((unsigned char *)this + 17) = 1;
  *((unsigned char *)this + 268) = *((unsigned char *)this + 132);
  *((_DWORD *)this + 115) = -1;
}

uint64_t HRTFXTCSpatializer::initialize(HRTFXTCSpatializer *this, float a2, unsigned int a3, unsigned int a4)
{
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  int v8 = (void *)((char *)this + 360);
  *((float *)this + 2) = a2;
  *((_DWORD *)this + 3) = a4;
  BOOL v9 = (IR::DelayLine **)*((void *)this + 45);
  float v10 = (IR::DelayLine **)*((void *)this + 46);
  if (v10 != v9)
  {
    do
      std::unique_ptr<IR::DelayLine>::reset[abi:ne180100](--v10, 0);
    while (v10 != v9);
    float v10 = (IR::DelayLine **)*v8;
  }
  *((void *)this + 46) = v9;
  unint64_t v11 = v9 - v10;
  if (a3 <= v11)
  {
    if (a3 < v11)
    {
      BOOL v27 = &v10[a3];
      while (v9 != v27)
        std::unique_ptr<IR::DelayLine>::reset[abi:ne180100](--v9, 0);
      *((void *)this + 46) = v27;
    }
  }
  else
  {
    unint64_t v12 = a3 - v11;
    uint64_t v13 = *((void *)this + 47);
    if (v12 <= (v13 - (uint64_t)v9) >> 3)
    {
      bzero(v9, 8 * v12);
      *((void *)this + 46) = &v9[v12];
    }
    else
    {
      uint64_t v72 = (char *)this + 376;
      uint64_t v14 = v13 - (void)v10;
      uint64_t v15 = v14 >> 2;
      if (v14 >> 2 <= (unint64_t)a3) {
        uint64_t v15 = a3;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v15;
      }
      unsigned int v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v16);
      uint64_t v19 = (void *)*((void *)this + 45);
      float v18 = (void *)*((void *)this + 46);
      int v20 = &v17[8 * v11];
      unsigned int v22 = &v17[8 * v21];
      float v71 = v22;
      bzero(v20, 8 * v12);
      std::string::size_type v23 = (std::string::size_type)&v20[8 * v12];
      __p.__r_.__value_.__r.__words[2] = v23;
      if (v18 != v19)
      {
        do
        {
          uint64_t v24 = *--v18;
          *float v18 = 0;
          *((void *)v20 - 1) = v24;
          v20 -= 8;
        }
        while (v18 != v19);
        std::string::size_type v23 = __p.__r_.__value_.__r.__words[2];
        unsigned int v22 = v71;
      }
      long long v25 = *(_OWORD *)v8;
      *((void *)this + 45) = v20;
      *((void *)this + 46) = v23;
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = v25;
      __int16 v26 = (char *)*((void *)this + 47);
      *((void *)this + 47) = v22;
      float v71 = v26;
      __p.__r_.__value_.__r.__words[0] = v25;
      std::__split_buffer<std::unique_ptr<IR::DelayLine>>::~__split_buffer((uint64_t)&__p);
    }
  }
  LODWORD(__p.__r_.__value_.__l.__data_) = 0;
  std::vector<float>::assign((char **)this + 49, a3, &__p);
  uint64_t v28 = IR::IRProcessor::initialize(*((IR::IRProcessor **)this + 44), a2, a4, 0x80u, 0, *((unsigned char *)this + 464), 0);
  if (v28)
  {
    uint64_t v29 = *((void *)this + 62);
    *((void *)this + 62) = 0;
    if (v29) {
      std::default_delete<SourceExtentProcessor>::operator()[abi:ne180100](v29);
    }
    return v28;
  }
  (*(void (**)(const __CFDictionary **__return_ptr))(**(void **)(*((void *)this + 44) + 24) + 64))(&v81);
  long long v30 = *(_DWORD **)(*((void *)this + 44) + 24);
  if (!v30[41])
  {
    (*(uint64_t (**)(_DWORD *))(*(void *)v30 + 72))(v30);
    if (v81)
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v81;
      v79.__r_.__value_.__r.__words[0] = (std::string::size_type)@"XTCModelingDelay";
      applesauce::CF::DictionaryRef_proxy::at_as<float,__CFString const*>((const __CFDictionary ***)&__p, (const void **)&v79.__r_.__value_.__l.__data_);
    }
    (*(void (**)(void))(**(void **)(*((void *)this + 44) + 24) + 80))(*(void *)(*((void *)this + 44) + 24));
    operator new();
  }
  if (a3) {
    operator new();
  }
  unint64_t v31 = (void *)*((void *)this + 48);
  *((void *)this + 48) = 0;
  if (v31) {
    std::default_delete<IR::FixedIntegerDelay>::operator()[abi:ne180100](v31);
  }
  std::vector<float>::resize((uint64_t)this + 432, a4);
  LODWORD(__p.__r_.__value_.__l.__data_) = 0;
  std::vector<float>::resize((uint64_t)this + 136, 0, &__p);
  LODWORD(__p.__r_.__value_.__l.__data_) = 0;
  std::vector<float>::resize((uint64_t)this + 272, 0, &__p);
  *((_WORD *)this + 8) = 257;
  CFDictionaryRef v32 = v81;
  if (v81) {
    CFRetain(v81);
  }
  CFDictionaryRef v80 = v32;
  std::string::basic_string[abi:ne180100]<0>(&__p, "CounteractRotationShader");
  *((unsigned char *)this + 456) = IR::IRData::getBooleanFromDictionary();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v80) {
    CFRelease(v80);
  }
  if (v81 && applesauce::CF::details::has_key<__CFString const*>(v81, @"BypassMatrix"))
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    __n128 v33 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      std::string::basic_string[abi:ne180100]<0>(&v78, "HRTFXTCSpatializer");
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("::", &v78, &v79);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("initialize", &v79, &__p);
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)AudioChannelLayout buf = 136315138;
      *(void *)&uint8_t buf[4] = p_p;
      _os_log_debug_impl(&dword_1BB0CE000, v33, OS_LOG_TYPE_DEBUG, "%s: Custom Bypass Matrix found in IR file", buf, 0xCu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v79.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v78.__r_.__value_.__l.__data_);
      }
    }
    CFNumberRef Value = CFDictionaryGetValue(v81, @"BypassMatrix");
    BOOL v35 = Value;
    if (Value) {
      CFRetain(Value);
    }
    CFTypeRef v77 = v35;
    applesauce::CF::TypeRef::operator applesauce::CF::DictionaryRef(&v77, (applesauce::CF::DictionaryRef *)&theDict);
    if (!theDict)
    {
      if (getAUSMV2Log(void)::onceToken != -1) {
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
      }
      float v47 = getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
      {
        std::string::basic_string[abi:ne180100]<0>(&v78, "HRTFXTCSpatializer");
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("::", &v78, &v79);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("initialize", &v79, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          float v48 = &__p;
        }
        else {
          float v48 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)AudioChannelLayout buf = 136315138;
        *(void *)&uint8_t buf[4] = v48;
        _os_log_debug_impl(&dword_1BB0CE000, v47, OS_LOG_TYPE_DEBUG, "%s: Custom Bypass Matrix was not loaded; invalid dictionary",
          buf,
          0xCu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v79.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v78.__r_.__value_.__l.__data_);
        }
      }
      goto LABEL_104;
    }
    std::to_string(&v79, *((_DWORD *)this + 30));
    uint64_t v36 = std::string::insert(&v79, 0, "ID", 2uLL);
    long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      float v38 = &__p;
    }
    else {
      float v38 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (v38)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        CFIndex size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        CFIndex size = __p.__r_.__value_.__l.__size_;
      }
      CFStringRef v40 = CFStringCreateWithBytes(0, (const UInt8 *)v38, size, 0x8000100u, 0);
      CFStringRef v75 = v40;
      if (!v40)
      {
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
        goto LABEL_52;
      }
    }
    else
    {
      CFStringRef v40 = 0;
      CFStringRef v75 = 0;
      if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_52:
      }
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v79.__r_.__value_.__l.__data_);
    }
    float v41 = CFDictionaryGetValue(theDict, v40);
    float v42 = v41;
    if (v41) {
      CFRetain(v41);
    }
    CFTypeRef v74 = v42;
    applesauce::CF::TypeRef::operator applesauce::CF::ArrayRef(&v74, (applesauce::CF::ArrayRef *)&cf);
    CFTypeRef v43 = cf;
    if (cf)
    {
      CFRetain(cf);
      applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&v79, v43);
      if (!v79.__r_.__value_.__r.__words[0])
      {
        unint64_t v69 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v69, "Could not construct");
      }
      applesauce::CF::convert_as<std::vector<float>,0>((uint64_t)&__p, (const __CFArray *)v79.__r_.__value_.__l.__data_);
      if (v79.__r_.__value_.__r.__words[0]) {
        CFRelease(v79.__r_.__value_.__l.__data_);
      }
      if ((_BYTE)v71)
      {
        __n128 v45 = v8 + 14;
        uint64_t v44 = (void *)v8[14];
        if (v44)
        {
          *((void *)this + 60) = v44;
          operator delete(v44);
          void *v45 = 0;
          v8[15] = 0;
          v8[16] = 0;
        }
        *(_OWORD *)__n128 v45 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *((void *)this + 61) = *((void *)&__p.__r_.__value_.__l + 2);
        memset(&__p, 0, sizeof(__p));
        LODWORD(v79.__r_.__value_.__l.__data_) = 0;
        std::vector<float>::resize((uint64_t)(v8 + 14), 0, &v79);
        float v46 = (void *)__p.__r_.__value_.__r.__words[0];
        if (!__p.__r_.__value_.__r.__words[0]) {
          goto LABEL_98;
        }
      }
      else
      {
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        uint64_t v52 = getAUSMV2Log(void)::gLog;
        if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_98;
        }
        int v65 = (std::string *)std::string::basic_string[abi:ne180100]<0>(buf, "HRTFXTCSpatializer");
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("::", v65, &v78);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("initialize", &v78, &v79);
        if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v66 = &v79;
        }
        else {
          int v66 = (std::string *)v79.__r_.__value_.__r.__words[0];
        }
        int v67 = *((_DWORD *)this + 30);
        *(_DWORD *)unsigned int v86 = 136315394;
        unsigned int v87 = v66;
        __int16 v88 = 1024;
        int v89 = v67;
        _os_log_debug_impl(&dword_1BB0CE000, v52, OS_LOG_TYPE_DEBUG, "%s: Custom Bypass Matrix gain vector was not found for input channel label = %u", v86, 0x12u);
        if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v79.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v78.__r_.__value_.__l.__data_);
        }
        if ((v85 & 0x80000000) == 0) {
          goto LABEL_98;
        }
        float v46 = *(void **)buf;
      }
    }
    else
    {
      if (getAUSMV2Log(void)::onceToken != -1) {
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
      }
      float v49 = getAUSMV2Log(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_98;
      }
      std::string::basic_string[abi:ne180100]<0>(&v78, "HRTFXTCSpatializer");
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("::", &v78, &v79);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("initialize", &v79, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        float v50 = &__p;
      }
      else {
        float v50 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      int v51 = *((_DWORD *)this + 30);
      *(_DWORD *)AudioChannelLayout buf = 136315394;
      *(void *)&uint8_t buf[4] = v50;
      __int16 v83 = 1024;
      int v84 = v51;
      _os_log_debug_impl(&dword_1BB0CE000, v49, OS_LOG_TYPE_DEBUG, "%s: Custom Bypass Matrix was not found for input channel label = %u", buf, 0x12u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v79.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v78.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_98;
      }
      float v46 = (void *)v78.__r_.__value_.__r.__words[0];
    }
    operator delete(v46);
LABEL_98:
    if (cf) {
      CFRelease(cf);
    }
    if (v74) {
      CFRelease(v74);
    }
    if (v40) {
      CFRelease(v40);
    }
LABEL_104:
    if (theDict) {
      CFRelease(theDict);
    }
    if (v77) {
      CFRelease(v77);
    }
  }
  CFDictionaryRef v53 = (const __CFDictionary *)*((void *)this + 5);
  if (v53)
  {
    __p.__r_.__value_.__r.__words[0] = 0;
    applesauce::CF::at_or<applesauce::CF::DictionaryRef,__CFString const*&>(&v77, v53, (const void *)kOptionalFeatureSupport, &__p);
    if (__p.__r_.__value_.__r.__words[0]) {
      CFRelease(__p.__r_.__value_.__l.__data_);
    }
    CFTypeRef v54 = v77;
    if (v77)
    {
      unsigned int v55 = (unsigned __int16)applesauce::CF::details::find_at_key_or_optional<BOOL,__CFString const*&>((const __CFDictionary *)v77, (const void *)kOptionalFeatureSourceExtent);
      if (v55 <= 0x100) {
        LOBYTE(v55) = 0;
      }
      if ((_BYTE)v55)
      {
        std::vector<float>::resize((uint64_t)this + 504, a4);
        IR::getPresetDataAttributes();
        CFDictionaryRef v56 = (const __CFDictionary *)*((void *)this + 4);
        if (v56)
        {
          applesauce::CF::details::find_at_key_or_optional<applesauce::CF::URLRef,__CFString const*&>(&v79, v56, (const void *)kXTCSourceExtentIRCustomURLParamName);
          if (v79.__r_.__value_.__s.__data_[8])
          {
            float v57 = (const void *)__p.__r_.__value_.__r.__words[0];
            __p.__r_.__value_.__r.__words[0] = v79.__r_.__value_.__r.__words[0];
            if (v79.__r_.__value_.__r.__words[0]) {
              CFRetain(v79.__r_.__value_.__l.__data_);
            }
            if (v57) {
              CFRelease(v57);
            }
          }
          std::__optional_destruct_base<applesauce::CF::URLRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v79);
        }
        operator new();
      }
    }
    uint64_t v28 = 0;
  }
  else
  {
    CFTypeRef v54 = 0;
    uint64_t v28 = 0;
    CFTypeRef v77 = 0;
  }
  TailCFIndex Length = IR::IRProcessor::getTailLength(*((IR::IRProcessor **)this + 44));
  float v59 = (BypassableIRProcessor *)*((void *)this + 62);
  if (v59) {
    LODWORD(v59) = BypassableIRProcessor::getTailLength(v59);
  }
  *((_DWORD *)this + 5) = v59 + TailLength;
  int v60 = *(_DWORD *)(*(void *)(*((void *)this + 44) + 24) + 164);
  if (v60)
  {
    unsigned int v61 = *(_DWORD *)(*(void *)*v8 + 4) - 1;
    if (v61 > 6) {
      int v62 = 0;
    }
    else {
      int v62 = dword_1BB8A9418[v61];
    }
    *((_DWORD *)this + 5) = v62 + v59 + TailLength + v60;
  }
  if (v54) {
    CFRelease(v54);
  }
  if (v81) {
    CFRelease(v81);
  }
  return v28;
}

void sub_1BB457D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,const void *a33,const void *a34,const void *a35,const void *a36,const void *a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a43 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v43 - 153) < 0) {
    operator delete(*(void **)(v43 - 176));
  }
  applesauce::CF::ArrayRef::~ArrayRef(&a33);
  applesauce::CF::TypeRef::~TypeRef(&a34);
  applesauce::CF::StringRef::~StringRef(&a35);
  applesauce::CF::DictionaryRef::~DictionaryRef(&a36);
  applesauce::CF::TypeRef::~TypeRef(&a37);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v43 - 184));
  _Unwind_Resume(a1);
}

IR::DelayLine *std::unique_ptr<IR::DelayLine>::reset[abi:ne180100](IR::DelayLine **a1, IR::DelayLine *a2)
{
  BOOL result = *a1;
  *a1 = a2;
  if (result)
  {
    IR::DelayLine::~DelayLine(result);
    JUMPOUT(0x1C185D370);
  }
  return result;
}

void std::default_delete<IR::FixedIntegerDelay>::operator()[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  float v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }

  JUMPOUT(0x1C185D370);
}

uint64_t applesauce::CF::at_or<applesauce::CF::DictionaryRef,__CFString const*&>(void *a1, const __CFDictionary *a2, const void *a3, void *a4)
{
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::DictionaryRef,__CFString const*&>(&cf, a2, a3);
  if (v9)
  {
    CFTypeRef v6 = cf;
    if (cf) {
      CFRetain(cf);
    }
    *a1 = v6;
  }
  else
  {
    *a1 = *a4;
    *a4 = 0;
  }
  return std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
}

uint64_t std::default_delete<SourceExtentProcessor>::operator()[abi:ne180100](uint64_t a1)
{
  *(void *)a1 = &unk_1F14BECB8;
  uint64_t v2 = (IR::IRDataAttributes *)(a1 + 8);
  float v4 = (void **)(a1 + 184);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  float v4 = (void **)(a1 + 160);
  std::vector<std::unique_ptr<IR::IRProcessor>>::__destroy_vector::operator()[abi:ne180100](&v4);
  IR::IRDataAttributes::~IRDataAttributes(v2);
  return MEMORY[0x1C185D370](a1, 0x10E1C404CC6A523);
}

IR::IRProcessor *BypassableIRProcessor::getTailLength(BypassableIRProcessor *this)
{
  if (!*((unsigned char *)this + 208)) {
    return 0;
  }
  BOOL result = (IR::IRProcessor *)**((void **)this + 20);
  if (result) {
    return (IR::IRProcessor *)IR::IRProcessor::getTailLength(result);
  }
  return result;
}

uint64_t std::__split_buffer<std::unique_ptr<IR::DelayLine>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    std::unique_ptr<IR::DelayLine>::reset[abi:ne180100]((IR::DelayLine **)(i - 8), 0);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void HRTFXTCSpatializer::~HRTFXTCSpatializer(HRTFXTCSpatializer *this)
{
  HRTFXTCSpatializer::~HRTFXTCSpatializer(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void **v8;
  uint64_t vars8;

  *(void *)this = &unk_1F14AE068;
  uint64_t v2 = (void *)*((void *)this + 63);
  if (v2)
  {
    *((void *)this + 64) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *((void *)this + 62);
  *((void *)this + 62) = 0;
  if (v3) {
    std::default_delete<SourceExtentProcessor>::operator()[abi:ne180100](v3);
  }
  float v4 = (void *)*((void *)this + 59);
  if (v4)
  {
    *((void *)this + 60) = v4;
    operator delete(v4);
  }
  float v5 = (void *)*((void *)this + 54);
  if (v5)
  {
    *((void *)this + 55) = v5;
    operator delete(v5);
  }
  CFTypeRef v6 = (void *)*((void *)this + 49);
  if (v6)
  {
    *((void *)this + 50) = v6;
    operator delete(v6);
  }
  char v7 = (void *)*((void *)this + 48);
  *((void *)this + 48) = 0;
  if (v7) {
    std::default_delete<IR::FixedIntegerDelay>::operator()[abi:ne180100](v7);
  }
  int v8 = (void **)((char *)this + 360);
  std::vector<std::unique_ptr<IR::DelayLine>>::__destroy_vector::operator()[abi:ne180100](&v8);
  std::unique_ptr<IR::IRProcessor>::reset[abi:ne180100]((IR::IRProcessor **)this + 44, 0);

  Spatializer::~Spatializer(this);
}

void std::vector<std::unique_ptr<IR::DelayLine>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (IR::DelayLine **)**a1;
  if (v2)
  {
    float v4 = (IR::DelayLine **)v1[1];
    float v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<IR::DelayLine>::reset[abi:ne180100](--v4, 0);
      while (v4 != v2);
      float v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void IR::DataLoaderSourceWithSizeAverage::~DataLoaderSourceWithSizeAverage(IR::DataLoaderSourceWithSizeAverage *this)
{
  *(void *)this = &unk_1F14BD940;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 29);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *(void *)this = &unk_1F14BEDB0;
  IR::IRDataAttributes::~IRDataAttributes((IR::DataLoaderSourceWithSizeAverage *)((char *)this + 8));
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F14BD940;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 29);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *(void *)this = &unk_1F14BEDB0;
  IR::IRDataAttributes::~IRDataAttributes((IR::DataLoaderSourceWithSizeAverage *)((char *)this + 8));

  JUMPOUT(0x1C185D370);
}

uint64_t std::__shared_ptr_emplace<IR::DataLoaderSourceWithSizeAverage>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<IR::DataLoaderSourceWithSizeAverage>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14B0C00;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

void std::__shared_ptr_emplace<IR::DataLoaderSourceWithSizeAverage>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14B0C00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *std::vector<DSPComplex>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::tuple<unsigned int,float>>::__vallocate[abi:ne180100](a1, a2);
    float v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1BB458584(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MCLP_ORNLMS_BLAS::ProcessBufferList(MCLP_ORNLMS_BLAS *this, const AudioBufferList *a2, AudioBufferList *a3, char a4)
{
  LODWORD(v8) = *((_DWORD *)this + 7);
  if (v8)
  {
    unint64_t v9 = 0;
    p_int mData = &a2->mBuffers[0].mData;
    float v11 = 0.0;
    do
    {
      unint64_t v12 = (const float *)*p_mData;
      p_mData += 2;
      float v11 = cblas_sdsdot(2 * *((_DWORD *)this + 8) - 2, v11, v12, 1, v12, 1);
      ++v9;
      unint64_t v8 = *((unsigned int *)this + 7);
    }
    while (v9 < v8);
  }
  else
  {
    float v11 = 0.0;
  }
  float v13 = *((float *)this + 4);
  *((unsigned char *)this + 336) = 0;
  if (v11 <= v13 || (LODWORD(v11) & 0x7FFFFFFFu) > 0x7F7FFFFF)
  {
    if (v8)
    {
      unint64_t v15 = 0;
      unint64_t v16 = &a2->mBuffers[0].mData;
      unsigned int v17 = &a3->mBuffers[0].mData;
      do
      {
        uint64_t v19 = *v17;
        v17 += 2;
        float v18 = v19;
        int v20 = *v16;
        v16 += 2;
        memcpy(v18, v20, 4 * (2 * *((_DWORD *)this + 8) - 2));
        ++v15;
      }
      while (v15 < *((unsigned int *)this + 7));
    }
    return;
  }
  LODWORD(v21) = *((_DWORD *)this + 8);
  if (v21)
  {
    unint64_t v22 = 0;
    std::string::size_type v23 = &a2->mBuffers[0].mData;
    while (1)
    {
      memcpy((void *)(*((void *)this + 15)+ 8 * (*((_DWORD *)this + 13) * *((_DWORD *)this + 21) + *((_DWORD *)this + 7) * v22)), (const void *)(*((void *)this + 12)+ 8* (*((_DWORD *)this + 12) * v22 + (*((_DWORD *)this + 9) - 1) * *((_DWORD *)this + 7))), 8 * *((unsigned int *)this + 7));
      unsigned int v24 = *((_DWORD *)this + 9);
      if (v24 >= 2) {
        memmove((void *)(*((void *)this + 12) + 8 * (*((_DWORD *)this + 12) * v22 + *((_DWORD *)this + 7))), (const void *)(*((void *)this + 12) + 8 * (*((_DWORD *)this + 12) * v22)), 8 * *((_DWORD *)this + 7) * (v24 - 1));
      }
      uint64_t v25 = *((unsigned int *)this + 7);
      if (v25) {
        break;
      }
      int v29 = *((_DWORD *)this + 12);
      uint64_t v30 = *((void *)this + 12);
LABEL_28:
      cblas_csscal(v25, *((const float *)this + 19), (void *)(v30 + 8 * (v29 * v22)), 1);
      memcpy((void *)(*((void *)this + 33) + 8 * (*((_DWORD *)this + 7) * v22)), (const void *)(*((void *)this + 12) + 8 * (*((_DWORD *)this + 12) * v22)), 8 * *((unsigned int *)this + 7));
      ++v22;
      unint64_t v21 = *((unsigned int *)this + 8);
      if (v22 >= v21) {
        goto LABEL_29;
      }
    }
    uint64_t v26 = 0;
    BOOL v27 = v23;
    while (v22)
    {
      uint64_t v28 = *((unsigned int *)this + 8);
      int v29 = *((_DWORD *)this + 12);
      uint64_t v30 = *((void *)this + 12);
      if (v22 == v28 - 1) {
        goto LABEL_24;
      }
      unint64_t v31 = (char *)*v27 + 4 * v22;
      int v32 = v31[v28 - 1];
      __n128 v33 = (_DWORD *)(v30 + 8 * (v26 + v22 * v29));
      _DWORD *v33 = *v31;
LABEL_25:
      v33[1] = v32;
      ++v26;
      v27 += 2;
      if (v25 == v26) {
        goto LABEL_28;
      }
    }
    int v29 = *((_DWORD *)this + 12);
    uint64_t v30 = *((void *)this + 12);
LABEL_24:
    __n128 v33 = (_DWORD *)(v30 + 8 * (v26 + v22 * v29));
    _DWORD *v33 = *((_DWORD *)*v27 + v22);
    int v32 = 0;
    goto LABEL_25;
  }
LABEL_29:
  int v34 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 22) = v34;
  if ((a4 & 1) == 0)
  {
    vDSP_Length v42 = *((unsigned int *)this + 13);
    unsigned int v43 = v42 * v34;
    uint64_t v44 = (float *)(*((void *)this + 15) + 8 * (v42 * v34) + 4);
    __A.realp = (float *)(*((void *)this + 15) + 8 * v43);
    __A.imagp = v44;
    vDSP_zvmags(&__A, 2, (float *)(*((void *)this + 18) + 4 * v43), 1, v42);
    unsigned int v45 = *((_DWORD *)this + 10);
    if (v45)
    {
      for (unsigned int i = 0; i < v45; ++i)
      {
        int v47 = *((_DWORD *)this + 21);
        int v48 = v47 - i;
        if ((int)(v47 - i) < 0) {
          int v48 = v47 + v45 + (int)i / (int)v45 * v45 - i;
        }
        if (*((_DWORD *)this + 8))
        {
          unsigned int v49 = 0;
          int v50 = v48 % (int)v45;
          do
          {
            cblas_cgemv(CblasRowMajor, CblasNoTrans, *((_DWORD *)this + 7), *((_DWORD *)this + 7), (char *)this + 68, (const void *)(*((void *)this + 21) + 8 * (*((_DWORD *)this + 15) * i + *((_DWORD *)this + 14) * v49)), *((_DWORD *)this + 7), (const void *)(*((void *)this + 15) + 8 * (*((_DWORD *)this + 7) * v49 + *((_DWORD *)this + 13) * v50)), 1, (char *)this + 68, (void *)(*((void *)this + 33) + 8 * *((_DWORD *)this + 7) * v49), 1);
            float v51 = *((float *)this + 16);
            uint64_t v52 = (const float *)(*((void *)this + 33) + 8 * *((_DWORD *)this + 7) * v49);
            float v53 = cblas_sdot(*((_DWORD *)this + 11), v52, 1, v52, 1);
            unsigned int v54 = *((_DWORD *)this + 7);
            float v55 = v51 / fmaxf(v53 / (float)v54, *((float *)this + 4));
            catlas_saxpby(v54, v55, (const float *)(*((void *)this + 18) + 4 * (v54 * v49 + *((_DWORD *)this + 13) * v50)), 1, *((const float *)this + 5), (float *)(*((void *)this + 24) + 4 * (v54 * v49 + *((_DWORD *)this + 13) * i)), 1);
            vDSP_Length v56 = *((unsigned int *)this + 7);
            float v57 = (float *)(*((void *)this + 24) + 4 * (*((_DWORD *)this + 13) * i + v56 * v49));
            vDSP_vthr(v57, 1, (const float *)this + 4, v57, 1, v56);
            int v58 = *((_DWORD *)this + 13);
            vDSP_Length v59 = *((unsigned int *)this + 7);
            v71.realp = (float *)(*((void *)this + 15) + 8 * (v59 * v49 + v58 * v50));
            v71.imagp = v71.realp + 1;
            int v60 = (float *)(*((void *)this + 39) + 4);
            __C.realp = (float *)*((void *)this + 39);
            __C.imagp = v60;
            vDSP_zrvdiv(&v71, 2, (const float *)(*((void *)this + 24) + 4 * (v59 * v49 + v58 * i)), 1, &__C, 2, v59);
            cblas_csscal(*((_DWORD *)this + 7), -v55, *((void **)this + 39), 1);
            cblas_cgerc(CblasRowMajor, *((_DWORD *)this + 7), *((_DWORD *)this + 7), (char *)this + 68, (const void *)(*((void *)this + 33) + 8 * *((_DWORD *)this + 7) * v49), 1, *((const void **)this + 39), 1, (void *)(*((void *)this + 21) + 8 * (*((_DWORD *)this + 15) * i + *((_DWORD *)this + 14) * v49)), *((_DWORD *)this + 7));
            float v61 = cblas_sdsdot(*((_DWORD *)this + 11), *((const float *)this + 17), *((const float **)this + 39), 1, (const float *)(*((void *)this + 15)+ 8 * (*((_DWORD *)this + 13) * v50 + *((_DWORD *)this + 7) * v49)), 1);
            cblas_csscal(*((_DWORD *)this + 7), v61, (void *)(*((void *)this + 33) + 8 * *((_DWORD *)this + 7) * v49++), 1);
          }
          while (v49 < *((_DWORD *)this + 8));
          unsigned int v45 = *((_DWORD *)this + 10);
        }
      }
    }
    unsigned int v41 = (*((_DWORD *)this + 21) + 1) % v45;
    goto LABEL_52;
  }
  unsigned int v35 = *((_DWORD *)this + 10);
  if (!v35) {
    goto LABEL_41;
  }
  for (unsigned int j = 0; j < v35; ++j)
  {
    int v37 = *((_DWORD *)this + 21);
    int v38 = v37 - j;
    if ((int)(v37 - j) < 0)
    {
      int v38 = v37 + v35 + (int)j / (int)v35 * v35 - j;
      if (!v21) {
        continue;
      }
    }
    else if (!v21)
    {
      continue;
    }
    unsigned int v39 = 0;
    int v40 = v38 % (int)v35;
    do
    {
      cblas_cgemv(CblasRowMajor, CblasNoTrans, *((_DWORD *)this + 7), *((_DWORD *)this + 7), (char *)this + 68, (const void *)(*((void *)this + 21) + 8 * (*((_DWORD *)this + 15) * j + *((_DWORD *)this + 14) * v39)), *((_DWORD *)this + 7), (const void *)(*((void *)this + 15) + 8 * (*((_DWORD *)this + 7) * v39 + *((_DWORD *)this + 13) * v40)), 1, (char *)this + 68, (void *)(*((void *)this + 33) + 8 * *((_DWORD *)this + 7) * v39), 1);
      ++v39;
      LODWORD(v21) = *((_DWORD *)this + 8);
    }
    while (v39 < v21);
    unsigned int v35 = *((_DWORD *)this + 10);
  }
  int v34 = *((_DWORD *)this + 21);
LABEL_41:
  unsigned int v41 = (v34 + 1) % v35;
LABEL_52:
  *((_DWORD *)this + 21) = v41;
  *((unsigned char *)this + 336) = 1;
  cblas_csscal(*((_DWORD *)this + 13), *((const float *)this + 20), *((void **)this + 33), 1);
  uint64_t v62 = *((unsigned int *)this + 7);
  if (v62)
  {
    uint64_t v63 = 0;
    uint64_t v64 = *((unsigned int *)this + 8);
    uint64_t v65 = 4 * v64;
    do
    {
      if (v64)
      {
        uint64_t v66 = 0;
        uint64_t v67 = *((void *)this + 33);
        int mData = (char *)a3->mBuffers[v63].mData;
        unsigned int v69 = v63;
        do
        {
          *(_DWORD *)&mData[v66] = *(_DWORD *)(v67 + 8 * v69);
          if (v66 && 4 * (v64 - 1) != v66) {
            *(_DWORD *)&mData[v65 - 4 + v66] = *(_DWORD *)(v67 + 8 * v69 + 4);
          }
          v66 += 4;
          v69 += v62;
        }
        while (v65 != v66);
      }
      ++v63;
    }
    while (v63 != v62);
  }
}

void MCLP_ORNLMS_BLAS::ProcessEchoBufferList(MCLP_ORNLMS_BLAS *this, const AudioBufferList *a2, AudioBufferList *a3)
{
  if (*((unsigned char *)this + 336))
  {
    LODWORD(v5) = *((_DWORD *)this + 8);
    if (v5)
    {
      unint64_t v6 = 0;
      p_int mData = &a2->mBuffers[0].mData;
      while (1)
      {
        memcpy((void *)(*((void *)this + 30)+ 8 * (*((_DWORD *)this + 13) * *((_DWORD *)this + 22) + *((_DWORD *)this + 7) * v6)), (const void *)(*((void *)this + 27)+ 8* (*((_DWORD *)this + 12) * v6 + (*((_DWORD *)this + 9) - 1)* *((_DWORD *)this + 7))), 8 * *((unsigned int *)this + 7));
        unsigned int v8 = *((_DWORD *)this + 9);
        if (v8 >= 2) {
          memmove((void *)(*((void *)this + 27) + 8 * (*((_DWORD *)this + 12) * v6 + *((_DWORD *)this + 7))), (const void *)(*((void *)this + 27) + 8 * (*((_DWORD *)this + 12) * v6)), 8 * *((_DWORD *)this + 7) * (v8 - 1));
        }
        uint64_t v9 = *((unsigned int *)this + 7);
        if (v9) {
          break;
        }
        int v13 = *((_DWORD *)this + 12);
        uint64_t v14 = *((void *)this + 27);
LABEL_16:
        cblas_csscal(v9, *((const float *)this + 19), (void *)(v14 + 8 * (v13 * v6)), 1);
        memcpy((void *)(*((void *)this + 36) + 8 * (*((_DWORD *)this + 7) * v6)), (const void *)(*((void *)this + 27) + 8 * (*((_DWORD *)this + 12) * v6)), 8 * *((unsigned int *)this + 7));
        ++v6;
        unint64_t v5 = *((unsigned int *)this + 8);
        if (v6 >= v5) {
          goto LABEL_17;
        }
      }
      uint64_t v10 = 0;
      float v11 = p_mData;
      while (v6)
      {
        uint64_t v12 = *((unsigned int *)this + 8);
        int v13 = *((_DWORD *)this + 12);
        uint64_t v14 = *((void *)this + 27);
        if (v6 == v12 - 1) {
          goto LABEL_12;
        }
        unint64_t v15 = (char *)*v11 + 4 * v6;
        int v16 = v15[v12 - 1];
        unsigned int v17 = (_DWORD *)(v14 + 8 * (v10 + v6 * v13));
        *unsigned int v17 = *v15;
LABEL_13:
        v17[1] = v16;
        ++v10;
        v11 += 2;
        if (v9 == v10) {
          goto LABEL_16;
        }
      }
      int v13 = *((_DWORD *)this + 12);
      uint64_t v14 = *((void *)this + 27);
LABEL_12:
      unsigned int v17 = (_DWORD *)(v14 + 8 * (v10 + v6 * v13));
      *unsigned int v17 = *((_DWORD *)*v11 + v6);
      int v16 = 0;
      goto LABEL_13;
    }
LABEL_17:
    unsigned int v18 = *((_DWORD *)this + 10);
    if (v18)
    {
      for (unsigned int i = 0; i < v18; ++i)
      {
        int v20 = *((_DWORD *)this + 22);
        int v21 = v20 - i;
        if ((int)(v20 - i) < 0)
        {
          int v21 = v20 + v18 + (int)i / (int)v18 * v18 - i;
          if (v5)
          {
LABEL_23:
            unsigned int v22 = 0;
            int v23 = v21 % (int)v18;
            do
            {
              cblas_cgemv(CblasRowMajor, CblasNoTrans, *((_DWORD *)this + 7), *((_DWORD *)this + 7), (char *)this + 68, (const void *)(*((void *)this + 21) + 8* (*((_DWORD *)this + 15) * i + *((_DWORD *)this + 14) * v22)), *((_DWORD *)this + 7), (const void *)(*((void *)this + 30)+ 8 * (*((_DWORD *)this + 7) * v22 + *((_DWORD *)this + 13) * v23)), 1, (char *)this + 68, (void *)(*((void *)this + 36) + 8 * *((_DWORD *)this + 7) * v22), 1);
              ++v22;
              LODWORD(v5) = *((_DWORD *)this + 8);
            }
            while (v22 < v5);
            unsigned int v18 = *((_DWORD *)this + 10);
          }
        }
        else if (v5)
        {
          goto LABEL_23;
        }
      }
    }
    cblas_csscal(*((_DWORD *)this + 13), *((const float *)this + 20), *((void **)this + 36), 1);
    uint64_t v24 = *((unsigned int *)this + 7);
    if (v24)
    {
      uint64_t v25 = 0;
      uint64_t v26 = *((unsigned int *)this + 8);
      uint64_t v27 = 4 * v26;
      do
      {
        if (v26)
        {
          uint64_t v28 = 0;
          uint64_t v29 = *((void *)this + 36);
          int mData = (char *)a3->mBuffers[v25].mData;
          unsigned int v31 = v25;
          do
          {
            *(_DWORD *)&mData[v28] = *(_DWORD *)(v29 + 8 * v31);
            if (v28)
            {
              if (4 * (v26 - 1) != v28) {
                *(_DWORD *)&mData[v27 - 4 + v28] = *(_DWORD *)(v29 + 8 * v31 + 4);
              }
            }
            v28 += 4;
            v31 += v24;
          }
          while (v27 != v28);
        }
        ++v25;
      }
      while (v25 != v24);
    }
  }
  else if (*((_DWORD *)this + 7))
  {
    unint64_t v32 = 0;
    __n128 v33 = &a2->mBuffers[0].mData;
    int v34 = &a3->mBuffers[0].mData;
    do
    {
      uint64_t v36 = *v34;
      v34 += 2;
      unsigned int v35 = v36;
      int v37 = *v33;
      v33 += 2;
      memcpy(v35, v37, 4 * (2 * *((_DWORD *)this + 8) - 2));
      ++v32;
    }
    while (v32 < *((unsigned int *)this + 7));
  }
}

double std::operator*[abi:ne180100]<double>(double a1, double a2, double a3, double a4)
{
  return a1 * a3 - a2 * a4;
}

void AUSM::Messenger::instance(AUSM::Messenger *this)
{
  {
    if (v1)
    {
      AUSM::Messenger::Messenger(v1);
    }
  }
}

void sub_1BB4591AC(_Unwind_Exception *a1)
{
}

uint64_t AUSM::Messenger::Messenger(AUSM::Messenger *this)
{
  AUSM::Messenger::instance(void)::msgr = 0;
  qword_1E9F7EA48 = 0;
  return caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((caulk::pooled_semaphore_mutex *)&unk_1E9F7EA50);
}

void sub_1BB4591F4(_Unwind_Exception *exception_object)
{
  if (qword_1E9F7EA48) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)qword_1E9F7EA48);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUSM::Messenger::get(AUSM::Messenger *this)
{
  unint64_t v15 = &unk_1E9F7EA50;
  char v16 = 1;
  caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)&unk_1E9F7EA50);
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  uint64_t v2 = (std::__shared_weak_count *)qword_1E9F7EA48;
  if (qword_1E9F7EA48)
  {
    uint64_t v2 = std::__shared_weak_count::lock((std::__shared_weak_count *)qword_1E9F7EA48);
    uint64_t v3 = v2;
    *((void *)this + 1) = v2;
    if (v2)
    {
      uint64_t v4 = AUSM::Messenger::instance(void)::msgr;
      *(void *)this = AUSM::Messenger::instance(void)::msgr;
      if (v4) {
        return std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v15);
      }
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  unint64_t v5 = (long long *)caulk::concurrent::messenger::shared_high_priority((caulk::concurrent::messenger *)v2);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&__p, v5);
  long long v6 = v5[2];
  *(_OWORD *)&v14[13] = *(long long *)((char *)v5 + 45);
  *(_OWORD *)uint64_t v14 = v6;
  std::optional<std::string>::operator=[abi:ne180100]<char const(&)[47],void>(&__p, "ausm_messenger_for_buffer_disposal");
  std::allocate_shared[abi:ne180100]<caulk::concurrent::messenger,std::allocator<caulk::concurrent::messenger>,caulk::concurrent::messenger::thread_strategy &,caulk::thread::attributes &,void>(v11, 1, (uint64_t)&__p);
  uint64_t v8 = v11[0];
  uint64_t v7 = v11[1];
  *(void *)this = v11[0];
  *((void *)this + 1) = v7;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = (std::__shared_weak_count *)qword_1E9F7EA48;
  AUSM::Messenger::instance(void)::msgr = v8;
  qword_1E9F7EA48 = v7;
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  if (v13 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v15);
}

void sub_1BB459330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a17 && a16 < 0) {
    operator delete(__p);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100](v18 - 48);
  _Unwind_Resume(a1);
}

void ParametricProcessor::ParametricProcessor(ParametricProcessor *this, const ParametricProcessor::pars *a2)
{
  MEMORY[0x1F4188790](this);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)uint64_t v4 = 0;
  *(void *)(v4 + 4) = 0xBF800000467A0000;
  *(_DWORD *)(v4 + 12) = 1195081728;
  *(void *)(v4 + 16) = 0x8000000800;
  *(_WORD *)(v4 + 24) = 257;
  *(_OWORD *)(v4 + 32) = xmmword_1BB879EF0;
  *(unsigned char *)(v4 + 48) = 1;
  *(_OWORD *)(v4 + 52) = xmmword_1BB879F00;
  *(void *)(v4 + 68) = 3;
  *(_DWORD *)(v4 + 76) = 3;
  *(_OWORD *)(v4 + 80) = xmmword_1BB879F10;
  *(_OWORD *)(v4 + 96) = xmmword_1BB879F20;
  *(_DWORD *)(v4 + 112) = 30;
  *(void *)(v4 + 116) = 0x3E4CCCCD3F800000;
  *(_DWORD *)(v4 + 124) = 1056964608;
  *(void *)(v4 + 128) = 0x100000001;
  *(_DWORD *)(v4 + 136) = 0;
  *(void *)(v4 + 152) = 0;
  *(void *)(v4 + 144) = 0;
  *(_OWORD *)(v4 + 160) = xmmword_1BB879F30;
  long long v6 = (_OWORD *)(v4 + 160);
  *(void *)(v4 + 176) = 0xA00000003;
  *(_DWORD *)(v4 + 184) = 2;
  *(unsigned char *)(v4 + 188) = 1;
  *(_DWORD *)(v4 + 192) = 1;
  *(_OWORD *)(v4 + 196) = xmmword_1BB879F40;
  *(unsigned char *)(v4 + 212) = 0;
  *(void *)(v4 + 216) = 0x100000000;
  vDSP_Length v42 = (ausdk::AUChannelLayout *)(v4 + 224);
  std::vector<AudioChannelLayout>::vector((void *)(v4 + 224), 1uLL);
  uint64_t v7 = *(void *)(v5 + 224);
  *(void *)uint64_t v7 = 0;
  *(_DWORD *)(v7 + 8) = 0;
  *(_OWORD *)(v5 + 248) = 0u;
  *(_DWORD *)(v5 + 388) = 0;
  *(_DWORD *)(v5 + 392) = 0;
  *(_OWORD *)(v5 + 264) = 0u;
  *(_OWORD *)(v5 + 280) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_OWORD *)(v5 + 340) = 0u;
  *(void *)(v5 + 368) = 0;
  *(void *)(v5 + 376) = 0;
  *(void *)(v5 + 360) = 0;
  *(unsigned char *)(v5 + 384) = 0;
  bzero((void *)(v5 + 400), 0xEF0uLL);
  bzero((void *)(v5 + 4248), 0x10F8uLL);
  if (getParametricProcessorLog(void)::onceToken != -1) {
    dispatch_once(&getParametricProcessorLog(void)::onceToken, &__block_literal_global_29360);
  }
  uint64_t v8 = getParametricProcessorLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getParametricProcessorLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    v49.__x_[0] = 136315138;
    *(void *)&v49.__x_[1] = "ParametricProcessor";
    _os_log_debug_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_DEBUG, "Entering %s", (uint8_t *)&v49, 0xCu);
  }
  *(_OWORD *)uint64_t v5 = *(_OWORD *)v3;
  long long v9 = *(_OWORD *)(v3 + 16);
  long long v10 = *(_OWORD *)(v3 + 32);
  long long v11 = *(_OWORD *)(v3 + 64);
  *(_OWORD *)(v5 + 48) = *(_OWORD *)(v3 + 48);
  *(_OWORD *)(v5 + 64) = v11;
  *(_OWORD *)(v5 + 16) = v9;
  *(_OWORD *)(v5 + 32) = v10;
  long long v12 = *(_OWORD *)(v3 + 80);
  long long v13 = *(_OWORD *)(v3 + 96);
  long long v14 = *(_OWORD *)(v3 + 112);
  *(_OWORD *)(v5 + 124) = *(_OWORD *)(v3 + 124);
  *(_OWORD *)(v5 + 96) = v13;
  *(_OWORD *)(v5 + 112) = v14;
  *(_OWORD *)(v5 + 80) = v12;
  unint64_t v15 = *(const void **)(v5 + 144);
  char v16 = *(const void **)(v3 + 144);
  *(void *)(v5 + 144) = v16;
  if (v16) {
    CFRetain(v16);
  }
  if (v15) {
    CFRelease(v15);
  }
  unsigned int v17 = *(const void **)(v5 + 152);
  uint64_t v18 = *(const void **)(v3 + 152);
  *(void *)(v5 + 152) = v18;
  if (v18) {
    CFRetain(v18);
  }
  if (v17) {
    CFRelease(v17);
  }
  long long v19 = *(_OWORD *)(v3 + 160);
  long long v20 = *(_OWORD *)(v3 + 176);
  long long v21 = *(_OWORD *)(v3 + 208);
  void v6[2] = *(_OWORD *)(v3 + 192);
  v6[3] = v21;
  *long long v6 = v19;
  v6[1] = v20;
  ausdk::AUChannelLayout::CopyStorage(v42, (const ausdk::AUChannelLayout *)(v3 + 224));
  MatrixDecompositions::setMandN((MatrixDecompositions *)(v5 + 2488), *(_DWORD *)(v5 + 36), *(_DWORD *)(v5 + 36));
  afSTFTWrapper::afSTFTWrapper((afSTFTWrapper *)v43, *(_DWORD *)(v5 + 36), *(_DWORD *)(v5 + 40), *(_DWORD *)(v5 + 20), *(_DWORD *)(v5 + 16) / *(_DWORD *)(v5 + 20), *(unsigned char *)(v5 + 24), *(unsigned __int8 *)(v5 + 25));
  uint64_t FilterbandCenterFrequencies = afSTFTWrapper::getFilterbandCenterFrequencies((afSTFTWrapper *)v43, *(float *)(v5 + 12));
  if (v5 + 3088 != FilterbandCenterFrequencies) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(v5 + 3088), *(char **)FilterbandCenterFrequencies, *(void *)(FilterbandCenterFrequencies + 8), (uint64_t)(*(void *)(FilterbandCenterFrequencies + 8) - *(void *)FilterbandCenterFrequencies) >> 2);
  }
  *(_DWORD *)(v5 + 28) = v44;
  std::vector<float>::vector(&v47, *(int *)(v5 + 40));
  std::vector<float>::vector(__p, (uint64_t)(*(void *)(v5 + 3096) - *(void *)(v5 + 3088)) >> 2);
  std::vector<std::vector<float>>::vector(v45, *(int *)(v5 + 40));
  unsigned int v41 = (char *)v6 + 5192;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v23 = 5489;
  v49.__x_[0] = 5489;
  for (uint64_t i = 1; i != 624; ++i)
  {
    std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v23 = i + 1812433253 * (v23 ^ (v23 >> 30));
    v49.__x_[i] = v23;
  }
  v49.__i_ = 0;
  LODWORD(v25) = *(_DWORD *)(v5 + 40);
  if ((int)v25 >= 1)
  {
    uint64_t v26 = 0;
    do
    {
      float v27 = (float)(int)v26 / (float)(int)v25;
      *(float *)(*(void *)&v47.mChannelLayoutTag + 4 * v26) = v27;
      std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v28 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v49);
      uint64_t v29 = *(float **)(v5 + 3088);
      uint64_t v30 = *(void *)(v5 + 3096) - (void)v29;
      if (v30)
      {
        unint64_t v31 = v30 >> 2;
        float v32 = (float)*(unsigned int *)(v5 + 168);
        float v33 = (float)*(unsigned int *)(v5 + 160);
        float v34 = (float)*(unsigned int *)(v5 + 172) * 1000.0;
        unsigned int v35 = (float *)__p[0];
        if (v31 <= 1) {
          unint64_t v31 = 1;
        }
        do
        {
          float v36 = *v29++;
          float v37 = v34 / (float)(v36 + 0.00000011921);
          if (v37 >= v33) {
            float v37 = v33;
          }
          if (v37 <= v32) {
            float v37 = v32;
          }
          *v35++ = roundf((float)(v27 + (float)((float)((float)v28 * 2.3283e-10) + 0.0)) * v37);
          --v31;
        }
        while (v31);
      }
      int v38 = (char *)v45[0] + 24 * v26;
      if (v38 != (char *)__p) {
        std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v38, (char *)__p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 2);
      }
      ++v26;
      uint64_t v25 = *(int *)(v5 + 40);
    }
    while (v26 < v25);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (*(void *)&v47.mChannelLayoutTag)
  {
    *(void *)&v47.mNumberChannelDescriptions = *(void *)&v47.mChannelLayoutTag;
    operator delete(*(void **)&v47.mChannelLayoutTag);
  }
  std::vector<std::vector<float>>::__vdeallocate((uint64_t *)(v5 + 5312));
  *(_OWORD *)(v5 + 5312) = *(_OWORD *)v45;
  *(void *)(v5 + 5328) = v46;
  float v46 = 0;
  v45[1] = 0;
  v45[0] = 0;
  *(void *)v49.__x_ = v45;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v49, *(int *)(v5 + 40), *(int *)(v5 + 32) + *(int *)(v5 + 32) * (uint64_t)*(int *)(v5 + 184));
  *(_OWORD *)(v5 + 5336) = *(_OWORD *)v49.__x_;
  unsigned int v39 = v41;
  int v40 = *(void **)v41;
  if (*(void *)v41)
  {
    *(void *)(v5 + 5360) = v40;
    operator delete(v40);
    unsigned int v39 = v41;
    *(void *)unsigned int v41 = 0;
    *((void *)v41 + 1) = 0;
    *((void *)v41 + 2) = 0;
  }
  _OWORD *v39 = *(_OWORD *)&v49.__x_[4];
  *(void *)(v5 + 5368) = *(void *)&v49.__x_[8];
  operator new();
}

void sub_1BB45ECF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, MatrixDecompositions *a12, HOA **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unint64_t a21,unint64_t a22,unint64_t a23,unint64_t a24,unint64_t a25,unint64_t a26,unint64_t a27,unint64_t a28,unint64_t a29,void **a30,void **a31,VBAP **a32,void **a33,void **a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void **a43,void **a44,void **a45,void **a46,void **a47,void **a48,uint64_t a49,uint64_t a50,uint64_t a51,void **a52,void **a53,void **a54)
{
  float v57 = (void *)STACK[0x538];
  if (STACK[0x538])
  {
    STACK[0x540] = (unint64_t)v57;
    operator delete(v57);
  }
  int v58 = (void *)STACK[0x580];
  if (STACK[0x580])
  {
    STACK[0x588] = (unint64_t)v58;
    operator delete(v58);
  }
  vDSP_Length v59 = (void *)STACK[0x5A8];
  if (STACK[0x5A8])
  {
    STACK[0x5B0] = (unint64_t)v59;
    operator delete(v59);
  }
  int v60 = (void *)STACK[0x5D0];
  if (STACK[0x5D0])
  {
    STACK[0x5D8] = (unint64_t)v60;
    operator delete(v60);
  }
  float v61 = (void *)STACK[0x600];
  if (STACK[0x600])
  {
    STACK[0x608] = (unint64_t)v61;
    operator delete(v61);
  }
  uint64_t v62 = (void *)STACK[0x650];
  if (STACK[0x650])
  {
    STACK[0x658] = (unint64_t)v62;
    operator delete(v62);
  }
  uint64_t v63 = (void *)STACK[0x678];
  if (STACK[0x678])
  {
    STACK[0x680] = (unint64_t)v63;
    operator delete(v63);
  }
  uint64_t v64 = *(void **)(v55 - 176);
  if (v64)
  {
    *(void *)(v55 - 168) = v64;
    operator delete(v64);
  }
  MatrixDecompositions::~MatrixDecompositions((MatrixDecompositions *)&STACK[0x6F0]);
  uint64_t v65 = (void *)STACK[0x6A0];
  if (STACK[0x6A0])
  {
    STACK[0x6A8] = (unint64_t)v65;
    operator delete(v65);
  }
  uint64_t v66 = (void *)STACK[0x6D0];
  if (STACK[0x6D0])
  {
    STACK[0x6D8] = (unint64_t)v66;
    operator delete(v66);
  }
  uint64_t v67 = (void *)STACK[0x620];
  if (STACK[0x620])
  {
    STACK[0x628] = (unint64_t)v67;
    operator delete(v67);
  }
  HOA::~HOA((HOA *)&STACK[0x8B0]);
  float v68 = (void *)STACK[0x890];
  if (STACK[0x890])
  {
    STACK[0x898] = (unint64_t)v68;
    operator delete(v68);
  }
  afSTFTWrapper::~afSTFTWrapper((afSTFTWrapper *)&STACK[0x440]);
  unsigned int v69 = (void **)STACK[0x3A8];
  uint64_t v70 = *a48;
  if (*a48)
  {
    *((void *)v54 + 1072) = v70;
    operator delete(v70);
  }
  DSPSplitComplex v71 = (void *)*((void *)v54 + 1070);
  *((void *)v54 + 1070) = 0;
  if (v71) {
    std::default_delete<ActiveIntensityAnalysis>::operator()[abi:ne180100](v71);
  }
  uint64_t v72 = *a52;
  if (*a52)
  {
    *((void *)v54 + 1068) = v72;
    operator delete(v72);
  }
  uint64_t v73 = (void *)*((void *)v54 + 1064);
  if (v73)
  {
    *((void *)v54 + 1065) = v73;
    operator delete(v73);
  }
  CFTypeRef v74 = (void *)*((void *)v54 + 1059);
  if (v74)
  {
    *((void *)v54 + 1060) = v74;
    operator delete(v74);
  }
  CFStringRef v75 = (void *)*((void *)v54 + 1054);
  if (v75)
  {
    *((void *)v54 + 1055) = v75;
    operator delete(v75);
  }
  float v76 = (void *)*((void *)v54 + 1049);
  if (v76)
  {
    *((void *)v54 + 1050) = v76;
    operator delete(v76);
  }
  STACK[0x440] = STACK[0x240];
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x440]);
  STACK[0x440] = STACK[0x258];
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x440]);
  STACK[0x440] = STACK[0x248];
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x440]);
  STACK[0x440] = STACK[0x250];
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x440]);
  CFTypeRef v77 = (void *)*((void *)v54 + 1032);
  if (v77)
  {
    *((void *)v54 + 1033) = v77;
    operator delete(v77);
  }
  std::string v78 = (void *)*((void *)v54 + 1027);
  if (v78)
  {
    *((void *)v54 + 1028) = v78;
    operator delete(v78);
  }
  std::string v79 = (void *)*((void *)v54 + 1022);
  if (v79)
  {
    *((void *)v54 + 1023) = v79;
    operator delete(v79);
  }
  CFDictionaryRef v80 = (void *)*((void *)v54 + 1017);
  if (v80)
  {
    *((void *)v54 + 1018) = v80;
    operator delete(v80);
  }
  CFDictionaryRef v81 = (void *)*((void *)v54 + 1012);
  if (v81)
  {
    *((void *)v54 + 1013) = v81;
    operator delete(v81);
  }
  float v82 = (void *)*((void *)v54 + 1007);
  if (v82)
  {
    *((void *)v54 + 1008) = v82;
    operator delete(v82);
  }
  __int16 v83 = (void *)*((void *)v54 + 1002);
  if (v83)
  {
    *((void *)v54 + 1003) = v83;
    operator delete(v83);
  }
  int v84 = (void *)*((void *)v54 + 997);
  if (v84)
  {
    *((void *)v54 + 998) = v84;
    operator delete(v84);
  }
  char v85 = (void *)*((void *)v54 + 992);
  if (v85)
  {
    *((void *)v54 + 993) = v85;
    operator delete(v85);
  }
  unsigned int v86 = (void *)*((void *)v54 + 987);
  if (v86)
  {
    *((void *)v54 + 988) = v86;
    operator delete(v86);
  }
  unsigned int v87 = (void *)*((void *)v54 + 982);
  if (v87)
  {
    *((void *)v54 + 983) = v87;
    operator delete(v87);
  }
  __int16 v88 = (void *)*((void *)v54 + 977);
  if (v88)
  {
    *((void *)v54 + 978) = v88;
    operator delete(v88);
  }
  int v89 = (void *)*((void *)v54 + 972);
  if (v89)
  {
    *((void *)v54 + 973) = v89;
    operator delete(v89);
  }
  uint64_t v90 = (void *)*((void *)v54 + 967);
  if (v90)
  {
    *((void *)v54 + 968) = v90;
    operator delete(v90);
  }
  char v91 = (void *)*((void *)v54 + 962);
  if (v91)
  {
    *((void *)v54 + 963) = v91;
    operator delete(v91);
  }
  long long v92 = (void *)*((void *)v54 + 957);
  if (v92)
  {
    *((void *)v54 + 958) = v92;
    operator delete(v92);
  }
  int v93 = (void *)*((void *)v54 + 952);
  if (v93)
  {
    *((void *)v54 + 953) = v93;
    operator delete(v93);
  }
  long long v94 = (void *)*((void *)v54 + 947);
  if (v94)
  {
    *((void *)v54 + 948) = v94;
    operator delete(v94);
  }
  float v95 = (void *)*((void *)v54 + 942);
  if (v95)
  {
    *((void *)v54 + 943) = v95;
    operator delete(v95);
  }
  STACK[0x440] = STACK[0x268];
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x440]);
  STACK[0x440] = STACK[0x390];
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x440]);
  float v96 = (void *)*((void *)v54 + 931);
  if (v96)
  {
    *((void *)v54 + 932) = v96;
    operator delete(v96);
  }
  int v97 = (void *)*((void *)v54 + 926);
  if (v97)
  {
    *((void *)v54 + 927) = v97;
    operator delete(v97);
  }
  unsigned int v98 = (void *)*((void *)v54 + 921);
  if (v98)
  {
    *((void *)v54 + 922) = v98;
    operator delete(v98);
  }
  float v99 = (void *)*((void *)v54 + 916);
  if (v99)
  {
    *((void *)v54 + 917) = v99;
    operator delete(v99);
  }
  float v100 = (void *)*((void *)v54 + 911);
  if (v100)
  {
    *((void *)v54 + 912) = v100;
    operator delete(v100);
  }
  float v101 = (void *)*((void *)v54 + 906);
  if (v101)
  {
    *((void *)v54 + 907) = v101;
    operator delete(v101);
  }
  float v102 = (void *)*((void *)v54 + 901);
  if (v102)
  {
    *((void *)v54 + 902) = v102;
    operator delete(v102);
  }
  float v103 = (void *)*((void *)v54 + 896);
  if (v103)
  {
    *((void *)v54 + 897) = v103;
    operator delete(v103);
  }
  int v104 = (void *)*((void *)v54 + 891);
  if (v104)
  {
    *((void *)v54 + 892) = v104;
    operator delete(v104);
  }
  std::string v105 = (void *)*((void *)v54 + 886);
  if (v105)
  {
    *((void *)v54 + 887) = v105;
    operator delete(v105);
  }
  double v106 = (void *)*((void *)v54 + 881);
  if (v106)
  {
    *((void *)v54 + 882) = v106;
    operator delete(v106);
  }
  float v107 = (void *)*((void *)v54 + 876);
  if (v107)
  {
    *((void *)v54 + 877) = v107;
    operator delete(v107);
  }
  float v108 = (void *)*((void *)v54 + 871);
  if (v108)
  {
    *((void *)v54 + 872) = v108;
    operator delete(v108);
  }
  float v109 = *a43;
  if (*a43)
  {
    *((void *)v54 + 867) = v109;
    operator delete(v109);
  }
  STACK[0x440] = a21;
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x440]);
  __int16 v110 = (void *)*((void *)v54 + 860);
  if (v110)
  {
    *((void *)v54 + 861) = v110;
    operator delete(v110);
  }
  STACK[0x440] = STACK[0x3C0];
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x440]);
  STACK[0x440] = a22;
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x440]);
  STACK[0x440] = a23;
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x440]);
  STACK[0x440] = a24;
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x440]);
  int v111 = (void *)*((void *)v54 + 843);
  if (v111)
  {
    *((void *)v54 + 844) = v111;
    operator delete(v111);
  }
  uint64_t v112 = (void *)*((void *)v54 + 838);
  if (v112)
  {
    *((void *)v54 + 839) = v112;
    operator delete(v112);
  }
  unint64_t v113 = STACK[0x3E0] + 6280;
  STACK[0x440] = a25;
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x440]);
  STACK[0x440] = a26;
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x440]);
  STACK[0x440] = a27;
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x440]);
  STACK[0x440] = a28;
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x440]);
  float v114 = (void *)*((void *)v54 + 821);
  if (v114)
  {
    *((void *)v54 + 822) = v114;
    operator delete(v114);
  }
  STACK[0x440] = v113;
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x440]);
  int v115 = (void *)*((void *)v54 + 813);
  if (v115)
  {
    *((void *)v54 + 814) = v115;
    operator delete(v115);
  }
  STACK[0x440] = a29;
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x440]);
  float v116 = (void *)*((void *)v54 + 805);
  if (v116)
  {
    *((void *)v54 + 806) = v116;
    operator delete(v116);
  }
  float64x2_t v117 = (void *)*((void *)v54 + 800);
  if (v117)
  {
    *((void *)v54 + 801) = v117;
    operator delete(v117);
  }
  BOOL v118 = (void *)*((void *)v54 + 795);
  if (v118)
  {
    *((void *)v54 + 796) = v118;
    operator delete(v118);
  }
  float v119 = *(void **)STACK[0x398];
  if (v119)
  {
    *((void *)v54 + 791) = v119;
    operator delete(v119);
  }
  int v120 = (void *)*((void *)v54 + 787);
  if (v120)
  {
    *((void *)v54 + 788) = v120;
    operator delete(v120);
  }
  int v121 = (void *)*((void *)v54 + 782);
  if (v121)
  {
    *((void *)v54 + 783) = v121;
    operator delete(v121);
  }
  double v122 = (void *)*((void *)v54 + 777);
  if (v122)
  {
    *((void *)v54 + 778) = v122;
    operator delete(v122);
  }
  double v123 = (void *)*((void *)v54 + 772);
  if (v123)
  {
    *((void *)v54 + 773) = v123;
    operator delete(v123);
  }
  double v124 = (void *)*((void *)v54 + 767);
  if (v124)
  {
    *((void *)v54 + 768) = v124;
    operator delete(v124);
  }
  float64x2_t v125 = (void *)*((void *)v54 + 762);
  if (v125)
  {
    *((void *)v54 + 763) = v125;
    operator delete(v125);
  }
  double v126 = (void *)*((void *)v54 + 757);
  if (v126)
  {
    *((void *)v54 + 758) = v126;
    operator delete(v126);
  }
  double v127 = (void *)*((void *)v54 + 752);
  if (v127)
  {
    *((void *)v54 + 753) = v127;
    operator delete(v127);
  }
  uint64_t v128 = (void *)*((void *)v54 + 747);
  if (v128)
  {
    *((void *)v54 + 748) = v128;
    operator delete(v128);
  }
  uint64_t v129 = (void *)*((void *)v54 + 742);
  if (v129)
  {
    *((void *)v54 + 743) = v129;
    operator delete(v129);
  }
  signed int v130 = (void *)*((void *)v54 + 737);
  if (v130)
  {
    *((void *)v54 + 738) = v130;
    operator delete(v130);
  }
  uint64_t v131 = (void *)*((void *)v54 + 732);
  if (v131)
  {
    *((void *)v54 + 733) = v131;
    operator delete(v131);
  }
  uint64_t v132 = (void *)*((void *)v54 + 727);
  if (v132)
  {
    *((void *)v54 + 728) = v132;
    operator delete(v132);
  }
  int v133 = (void *)*((void *)v54 + 722);
  if (v133)
  {
    *((void *)v54 + 723) = v133;
    operator delete(v133);
  }
  unint64_t v134 = STACK[0x3E0] + 5448;
  float v135 = (void *)*((void *)v54 + 717);
  if (v135)
  {
    *((void *)v54 + 718) = v135;
    operator delete(v135);
  }
  STACK[0x440] = v134;
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x440]);
  uint64_t v136 = (void *)*((void *)v54 + 709);
  if (v136)
  {
    *((void *)v54 + 710) = v136;
    operator delete(v136);
  }
  uint64_t v137 = (void *)*((void *)v54 + 704);
  if (v137)
  {
    *((void *)v54 + 705) = v137;
    operator delete(v137);
  }
  int v138 = (void *)*((void *)v54 + 699);
  if (v138)
  {
    *((void *)v54 + 700) = v138;
    operator delete(v138);
  }
  int v139 = (void *)*((void *)v54 + 694);
  if (v139)
  {
    *((void *)v54 + 695) = v139;
    operator delete(v139);
  }
  int v140 = (void *)*((void *)v54 + 689);
  if (v140)
  {
    *((void *)v54 + 690) = v140;
    operator delete(v140);
  }
  unsigned int v141 = (void *)*((void *)v54 + 684);
  if (v141)
  {
    *((void *)v54 + 685) = v141;
    operator delete(v141);
  }
  int v142 = (void *)*((void *)v54 + 679);
  if (v142)
  {
    *((void *)v54 + 680) = v142;
    operator delete(v142);
  }
  int v143 = (void *)*((void *)v54 + 674);
  if (v143)
  {
    *((void *)v54 + 675) = v143;
    operator delete(v143);
  }
  float64x2_t v144 = (void *)*((void *)v54 + 669);
  if (v144)
  {
    *((void *)v54 + 670) = v144;
    operator delete(v144);
  }
  STACK[0x440] = STACK[0x3B8];
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x440]);
  double v145 = *a30;
  if (*a30)
  {
    *((void *)v54 + 661) = v145;
    operator delete(v145);
  }
  double v146 = *a44;
  if (*a44)
  {
    *((void *)v54 + 657) = v146;
    operator delete(v146);
  }
  int v147 = *a53;
  if (*a53)
  {
    *((void *)v54 + 654) = v147;
    operator delete(v147);
  }
  float v148 = *a45;
  if (*a45)
  {
    *((void *)v54 + 651) = v148;
    operator delete(v148);
  }
  int v149 = (void *)*((void *)v54 + 647);
  if (v149)
  {
    *((void *)v54 + 648) = v149;
    operator delete(v149);
  }
  float v150 = (void *)*((void *)v54 + 642);
  if (v150)
  {
    *((void *)v54 + 643) = v150;
    operator delete(v150);
  }
  float v151 = (void *)*((void *)v54 + 637);
  if (v151)
  {
    *((void *)v54 + 638) = v151;
    operator delete(v151);
  }
  float v152 = (void *)*((void *)v54 + 632);
  if (v152)
  {
    *((void *)v54 + 633) = v152;
    operator delete(v152);
  }
  uint64_t v153 = *a34;
  if (*a34)
  {
    *((void *)v54 + 628) = v153;
    operator delete(v153);
  }
  float v154 = *a31;
  if (*a31)
  {
    *((void *)v54 + 625) = v154;
    operator delete(v154);
  }
  BOOL v155 = *a54;
  if (*a54)
  {
    *((void *)v54 + 622) = v155;
    operator delete(v155);
  }
  uint64_t v156 = (void *)*((void *)v54 + 618);
  if (v156)
  {
    *((void *)v54 + 619) = v156;
    operator delete(v156);
  }
  float v157 = (void *)*((void *)v54 + 613);
  if (v157)
  {
    *((void *)v54 + 614) = v157;
    operator delete(v157);
  }
  float v158 = (void *)*((void *)v54 + 608);
  if (v158)
  {
    *((void *)v54 + 609) = v158;
    operator delete(v158);
  }
  float v159 = (void *)*((void *)v54 + 603);
  if (v159)
  {
    *((void *)v54 + 604) = v159;
    operator delete(v159);
  }
  uint64_t v160 = (void *)*((void *)v54 + 598);
  if (v160)
  {
    *((void *)v54 + 599) = v160;
    operator delete(v160);
  }
  int v161 = (void *)*((void *)v54 + 593);
  if (v161)
  {
    *((void *)v54 + 594) = v161;
    operator delete(v161);
  }
  uint64_t v162 = *(void **)STACK[0x3C8];
  if (v162)
  {
    *((void *)v54 + 591) = v162;
    operator delete(v162);
  }
  float64x2_t v163 = *a33;
  if (*a33)
  {
    *((void *)v54 + 588) = v163;
    operator delete(v163);
  }
  float64x2_t v164 = *a46;
  if (*a46)
  {
    *((void *)v54 + 585) = v164;
    operator delete(v164);
  }
  float64x2_t v165 = *a47;
  if (*a47)
  {
    *((void *)v54 + 582) = v165;
    operator delete(v165);
  }
  uint64_t v166 = (void *)*((void *)v54 + 578);
  if (v166)
  {
    *((void *)v54 + 579) = v166;
    operator delete(v166);
  }
  unsigned int v167 = (void *)*((void *)v54 + 573);
  if (v167)
  {
    *((void *)v54 + 574) = v167;
    operator delete(v167);
  }
  char v168 = (void *)*((void *)v54 + 568);
  if (v168)
  {
    *((void *)v54 + 569) = v168;
    operator delete(v168);
  }
  float v169 = (void *)*((void *)v54 + 563);
  if (v169)
  {
    *((void *)v54 + 564) = v169;
    operator delete(v169);
  }
  uint64_t v170 = (void *)*((void *)v54 + 558);
  if (v170)
  {
    *((void *)v54 + 559) = v170;
    operator delete(v170);
  }
  uint64_t v171 = (covarianceBasedAdaptiveFilter *)(STACK[0x3E0] + 208);
  uint64_t v172 = (RotationUtilities *)(STACK[0x3E0] + 2600);
  float v173 = *v69;
  if (*v69)
  {
    *((void *)v54 + 554) = v173;
    operator delete(v173);
  }
  double v174 = (void *)*((void *)v54 + 550);
  if (v174)
  {
    *((void *)v54 + 551) = v174;
    operator delete(v174);
  }
  float v175 = (HOA **)(STACK[0x3E0] + 160);
  ParametricProcessor::parsData::~parsData((ParametricProcessor::parsData *)STACK[0x3A0]);
  RotationUtilities::~RotationUtilities(v172);
  MatrixDecompositions::~MatrixDecompositions(a12);
  covarianceBasedAdaptiveFilter::~covarianceBasedAdaptiveFilter(v171);
  std::unique_ptr<VBAP>::reset[abi:ne180100](a32, 0);
  std::unique_ptr<VBAP>::reset[abi:ne180100]((VBAP **)STACK[0x260], 0);
  uint64_t v176 = *((void *)v54 + 54);
  *((void *)v54 + 54) = 0;
  if (v176) {
    (*(void (**)(uint64_t))(*(void *)v176 + 8))(v176);
  }
  unint64_t v177 = STACK[0x3E0] + 72;
  float v178 = (void **)(STACK[0x3E0] + 112);
  std::unique_ptr<HOA>::reset[abi:ne180100]((HOA **)STACK[0x3B0], 0);
  uint64_t v179 = *((void *)v54 + 52);
  *((void *)v54 + 52) = 0;
  if (v179) {
    std::default_delete<HOA::RotationMatrix>::operator()[abi:ne180100](v179);
  }
  unint64_t v180 = STACK[0x3E0] + 24;
  std::unique_ptr<HOA>::reset[abi:ne180100](v175, 0);
  std::unique_ptr<HOA>::reset[abi:ne180100](a13, 0);
  float v181 = *v178;
  if (*v178)
  {
    *((void *)v54 + 46) = v181;
    operator delete(v181);
  }
  STACK[0x440] = v177;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x440]);
  float v182 = (void *)*((void *)v54 + 37);
  if (v182)
  {
    *((void *)v54 + 38) = v182;
    operator delete(v182);
  }
  STACK[0x440] = v180;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x440]);
  uint64_t v183 = *(void **)STACK[0x3E0];
  if (v183)
  {
    *((void *)v54 + 32) = v183;
    operator delete(v183);
  }
  ParametricProcessor::pars::~pars(v54);
  _Unwind_Resume(a1);
}

HOA *std::unique_ptr<HOA>::reset[abi:ne180100](HOA **a1, HOA *a2)
{
  BOOL result = *a1;
  *a1 = a2;
  if (result)
  {
    HOA::~HOA(result);
    JUMPOUT(0x1C185D370);
  }
  return result;
}

void ParametricProcessor::InitializeGridsAndAmbisonicEncoder(uint64_t a1, _OWORD **a2, float **a3, HOA *a4, float **a5, void *a6, unint64_t *a7)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  if (getParametricProcessorLog(void)::onceToken != -1) {
    dispatch_once(&getParametricProcessorLog(void)::onceToken, &__block_literal_global_29360);
  }
  long long v14 = getParametricProcessorLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getParametricProcessorLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioChannelLayout buf = 136315138;
    int v48 = "InitializeGridsAndAmbisonicEncoder";
    _os_log_debug_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_DEBUG, "Initializing Grid and ambisonic encoder %s", buf, 0xCu);
  }
  HOA::HOA((uint64_t)buf, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 216));
  TDesiguint64_t n = HOA::getTDesign(a4, 0, 0, 0, v15);
  *a7 = TDesign;
  std::vector<float>::resize((uint64_t)a2, TDesign);
  std::vector<float>::resize((uint64_t)a3, *a7);
  HOA::getTDesign(a4, *a2, *a3, 0, v17);
  HOA::createEncoder((uint64_t)buf, (uint64_t)a2, (uint64_t)a3);
  std::vector<float>::resize((uint64_t)a5, 3 * *a7);
  long long v19 = a2;
  uint64_t v18 = (float *)*a2;
  uint64_t v20 = (char *)v19[1] - (char *)v18;
  if (v20)
  {
    long long v21 = *a3;
    unsigned int v22 = *a5;
    unint64_t v23 = *a7;
    unint64_t v24 = v20 >> 2;
    if (v24 <= 1) {
      uint64_t v25 = 1;
    }
    else {
      uint64_t v25 = v24;
    }
    do
    {
      float v26 = *v18++;
      float v27 = v26;
      float v28 = *v21++;
      double v29 = v27 * 0.0174532925;
      __double2 v30 = __sincos_stret(v28 * 0.0174532925);
      __double2 v31 = __sincos_stret(v29);
      float v32 = v30.__cosval * v31.__cosval;
      float v33 = v30.__cosval * v31.__sinval;
      float sinval = v30.__sinval;
      *unsigned int v22 = v32;
      v22[v23] = v33;
      v22[2 * v23] = sinval;
      ++v22;
      --v25;
    }
    while (v25);
  }
  else
  {
    unint64_t v23 = *a7;
  }
  std::vector<float>::vector(__p, v23 * *(int *)(a1 + 60));
  long long v42 = 0uLL;
  *(void *)&long long v43 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v42, v49, v50, (v50 - (uint64_t)v49) >> 2);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_OWORD *)std::string __p = v42;
  uint64_t v46 = v43;
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v42, *a7, *(int *)(a1 + 60));
  *(_OWORD *)a6 = v42;
  unsigned int v35 = (void *)a6[2];
  if (v35)
  {
    a6[3] = v35;
    operator delete(v35);
    a6[2] = 0;
    a6[3] = 0;
    a6[4] = 0;
  }
  *((_OWORD *)a6 + 1) = v43;
  a6[4] = v44;
  unint64_t v36 = *a7;
  if (*a7)
  {
    uint64_t v37 = 0;
    unint64_t v38 = 0;
    LODWORD(v39) = *(_DWORD *)(a1 + 60);
    do
    {
      if (v39)
      {
        unint64_t v40 = 0;
        do
        {
          int v41 = *(_DWORD *)((char *)__p[0] + 4 * v40 + v37);
          *(_DWORD *)CLiteMatrix::Get((CLiteMatrix *)a6, v38, v40++) = v41;
          unint64_t v39 = *(int *)(a1 + 60);
        }
        while (v40 < v39);
        unint64_t v36 = *a7;
      }
      ++v38;
      v37 += 16;
    }
    while (v38 < v36);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  HOA::~HOA((HOA *)buf);
}

void sub_1BB46033C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (__p) {
    operator delete(__p);
  }
  HOA::~HOA((HOA *)&a19);
  _Unwind_Resume(a1);
}

void *std::vector<CLiteMatrix>::vector(void *a1, unint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<CLiteMatrix>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = a1[1];
    uint64_t v7 = v6 + 40 * a2;
    uint64_t v8 = 40 * a2;
    long long v9 = (void *)(v6 + 16);
    do
    {
      *((_OWORD *)v9 - 1) = *(_OWORD *)a3;
      v9[1] = 0;
      v9[2] = 0;
      *long long v9 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v9, *(const void **)(a3 + 16), *(void *)(a3 + 24), (uint64_t)(*(void *)(a3 + 24) - *(void *)(a3 + 16)) >> 2);
      v9 += 5;
      v8 -= 40;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1BB460424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::vector<CLiteMatrix>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<LiteMatrix<float>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<LiteMatrix<float>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void ParametricProcessor::calculateSHBeamCoefficients(uint64_t a1, const float *a2, CLiteMatrix *a3)
{
  HOA::createEncoder(*(HOA **)(a1 + 424), a2, a2 + 1, 1uLL, *(float **)(a1 + 4424), (uint64_t)(*(void *)(a1 + 4432) - *(void *)(a1 + 4424)) >> 2);
  vDSP_vsmul(*(const float **)(a1 + 4424), 1, &kBeamNormalizer, *(float **)(a1 + 4424), 1, (uint64_t)(*(void *)(a1 + 4432) - *(void *)(a1 + 4424)) >> 2);
  vDSP_dotpr(*(const float **)(a1 + 4424), 1, *(const float **)(a1 + 4424), 1, *(float **)(a1 + 4584), (uint64_t)(*(void *)(a1 + 4432) - *(void *)(a1 + 4424)) >> 2);
  vDSP_vsdiv(*(const float **)(a1 + 4424), 1, *(const float **)(a1 + 4584), *(float **)(a1 + 4504), 1, (uint64_t)(*(void *)(a1 + 4432) - *(void *)(a1 + 4424)) >> 2);
  if (*(void *)(a1 + 4432) != *(void *)(a1 + 4424))
  {
    unint64_t v5 = 0;
    do
    {
      int v6 = *(_DWORD *)LiteMatrix<float>::operator()((unint64_t *)(a1 + 4488), 0, v5);
      *(_DWORD *)CLiteMatrix::Get(a3, v5++, 0) = v6;
    }
    while (v5 < (uint64_t)(*(void *)(a1 + 4432) - *(void *)(a1 + 4424)) >> 2);
  }
}

void ParametricProcessor::InitializeGrids(uint64_t a1, _OWORD **a2, float **a3, HOA *a4, float **a5, unint64_t *a6)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (getParametricProcessorLog(void)::onceToken != -1) {
    dispatch_once(&getParametricProcessorLog(void)::onceToken, &__block_literal_global_29360);
  }
  long long v12 = getParametricProcessorLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getParametricProcessorLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    int v33 = 136315138;
    float v34 = "InitializeGrids";
    _os_log_debug_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_DEBUG, "Initializing Grid %s", (uint8_t *)&v33, 0xCu);
  }
  HOA::HOA((uint64_t)&v33, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 216));
  TDesiguint64_t n = HOA::getTDesign(a4, 0, 0, 0, v13);
  *a6 = TDesign;
  std::vector<float>::resize((uint64_t)a2, TDesign);
  std::vector<float>::resize((uint64_t)a3, *a6);
  HOA::getTDesign(a4, *a2, *a3, 0, v15);
  std::vector<float>::resize((uint64_t)a5, 3 * *a6);
  unsigned int v17 = a2;
  char v16 = (float *)*a2;
  uint64_t v18 = (char *)v17[1] - (char *)v16;
  if (v18)
  {
    long long v19 = *a3;
    uint64_t v20 = *a5;
    unint64_t v21 = *a6;
    unint64_t v22 = v18 >> 2;
    if (v22 <= 1) {
      uint64_t v23 = 1;
    }
    else {
      uint64_t v23 = v22;
    }
    do
    {
      float v24 = *v16++;
      float v25 = v24;
      float v26 = *v19++;
      double v27 = v25 * 0.0174532925;
      __double2 v28 = __sincos_stret(v26 * 0.0174532925);
      __double2 v29 = __sincos_stret(v27);
      float v30 = v28.__cosval * v29.__cosval;
      float v31 = v28.__cosval * v29.__sinval;
      float sinval = v28.__sinval;
      float *v20 = v30;
      v20[v21] = v31;
      v20[2 * v21] = sinval;
      ++v20;
      --v23;
    }
    while (v23);
  }
  HOA::~HOA((HOA *)&v33);
}

void sub_1BB460800(_Unwind_Exception *exception_object)
{
}

void ParametricProcessor::calculateVBAPGainTable(ParametricProcessor *this, HOA *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (unint64_t *)((char *)this + 3816);
  ParametricProcessor::InitializeGrids((uint64_t)this, (_OWORD **)this + 465, (float **)this + 468, a2, (float **)this + 471, (unint64_t *)this + 477);
  std::vector<float>::resize((uint64_t)this + 4160, *((void *)this + 464) * *((void *)this + 477));
  uint64_t v4 = *((void *)this + 55);
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)(v4 + 224), *(void *)(v4 + 232), (uint64_t)(*(void *)(v4 + 232) - *(void *)(v4 + 224)) >> 2);
  unint64_t v5 = *v3;
  if (*v3)
  {
    unint64_t v6 = 0;
    uint64_t v7 = (int *)__p[0];
    do
    {
      uint64_t v8 = *((void *)this + 471);
      long long v9 = (__int32 *)(v8 + 4 * v6);
      __int32 v10 = *(_DWORD *)(v8 + 4 * (v5 + v6));
      v24.i32[0] = *v9;
      v24.i32[1] = v10;
      __int32 v25 = v9[2 * v5];
      LODWORD(v19) = 0;
      VBAP::triangleLookup(*((VBAP **)this + 55), &v24, (int *)&v19, (float *)&v21);
      int v11 = 3 * v19;
      uint64_t v12 = *((void *)this + 464) * v6;
      uint64_t v13 = *((void *)this + 520);
      *(_DWORD *)(v13 + 4 * (v12 + v7[3 * (int)v19])) = v21;
      long long v14 = &v7[v11];
      *(_DWORD *)(v13 + 4 * (v12 + v14[1])) = DWORD1(v21);
      *(_DWORD *)(v13 + 4 * (v12 + v14[2])) = DWORD2(v21);
      ++v6;
      unint64_t v5 = *((void *)this + 477);
    }
    while (v6 < v5);
  }
  std::vector<float>::vector(&v21, 3uLL);
  unint64_t v15 = (void *)*((void *)this + 474);
  if (v15)
  {
    *((void *)this + 475) = v15;
    operator delete(v15);
    *((void *)this + 474) = 0;
    *((void *)this + 475) = 0;
    *((void *)this + 476) = 0;
  }
  *((_OWORD *)this + 237) = v21;
  *((void *)this + 476) = v22;
  unint64_t v16 = *((void *)this + 477);
  uint64_t v19 = 0;
  std::vector<unsigned long>::vector(&v21, v16, &v19);
  unsigned int v17 = (void *)*((void *)this + 478);
  if (v17)
  {
    *((void *)this + 479) = v17;
    operator delete(v17);
    *((void *)this + 478) = 0;
    *((void *)this + 479) = 0;
    *((void *)this + 480) = 0;
  }
  *((_OWORD *)this + 239) = v21;
  *((void *)this + 480) = v22;
  LiteMatrix<float>::LiteMatrix((uint64_t)&v21, *((void *)this + 477), 1);
  *((_OWORD *)this + 267) = v21;
  uint64_t v18 = (void *)*((void *)this + 536);
  if (v18)
  {
    *((void *)this + 537) = v18;
    operator delete(v18);
    *((void *)this + 536) = 0;
    *((void *)this + 537) = 0;
    *((void *)this + 538) = 0;
  }
  *((_OWORD *)this + 268) = v22;
  *((void *)this + 538) = v23;
  std::vector<float>::resize((uint64_t)this + 4696, *((void *)this + 477));
  if (__p[0]) {
    operator delete(__p[0]);
  }
}

void sub_1BB460A4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ParametricProcessor::calculateRotationMatrices(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  unint64_t v8 = (v6 - *a2) >> 2;
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)v14, *(int *)(a1 + 60), *(int *)(a1 + 60));
  std::vector<CLiteMatrix>::vector(&v17, v8, (uint64_t)v14);
  long long v9 = (void *)(a1 + 6528);
  std::vector<CLiteMatrix>::__vdeallocate((uint64_t *)(a1 + 6528));
  *(_OWORD *)(a1 + 6528) = v17;
  *(void *)(a1 + 6544) = v18;
  uint64_t v18 = 0;
  long long v17 = 0uLL;
  uint64_t v19 = (void **)&v17;
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v19);
  if (__p)
  {
    unint64_t v16 = __p;
    operator delete(__p);
  }
  if (v6 != v7)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    do
    {
      RotationUtilities::yawPitchRoll2RotationMatrixFOA((RotationUtilities *)(*v9 + v12), v10, *(float *)(*a2 + 4 * v13) * 0.017453, *(float *)(*a3 + 4 * v13) * -0.017453, v11);
      ++v13;
      v12 += 40;
    }
    while (v8 != v13);
  }
}

void sub_1BB460B9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::default_delete<ActiveIntensityAnalysis>::operator()[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[7];
  if (v3)
  {
    a1[8] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[4];
  if (v4)
  {
    a1[5] = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)a1[1];
  if (v5)
  {
    a1[2] = v5;
    operator delete(v5);
  }

  JUMPOUT(0x1C185D370);
}

void *std::vector<unsigned long>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::tuple<unsigned int,float>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1BB460CA4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void CLiteMatrix::Eye(CLiteMatrix *this, uint64_t a2)
{
  CLiteMatrix::CLiteMatrix(this, a2, a2);
  if (a2)
  {
    unint64_t v4 = 0;
    do
    {
      *(_DWORD *)CLiteMatrix::Get(this, v4, v4) = 1065353216;
      ++v4;
    }
    while (a2 != v4);
  }
}

void afSTFTWrapper::~afSTFTWrapper(afSTFTWrapper *this)
{
  *(void *)this = &unk_1F14BE138;
  uint64_t v2 = (int *)*((void *)this + 10);
  if (v2[28])
  {
    uint64_t v3 = (int *)*((void *)v2 + 13);
    if (*v3 >= 1)
    {
      uint64_t v4 = 0;
      do
      {
        for (uint64_t i = 0; i != 112; i += 16)
        {
          free(*(void **)(*(void *)(*((void *)v3 + 3) + 8 * v4) + i));
          free(*(void **)(*(void *)(*((void *)v3 + 3) + 8 * v4) + i + 8));
        }
        free(*(void **)(*((void *)v3 + 3) + 8 * v4++));
      }
      while (v4 < *v3);
    }
    free(*((void **)v3 + 3));
    free(v3);
  }
  if (*v2 >= 1)
  {
    uint64_t v6 = 0;
    do
      free(*(void **)(*((void *)v2 + 7) + 8 * v6++));
    while (v6 < *v2);
  }
  if (v2[1] >= 1)
  {
    uint64_t v7 = 0;
    do
      free(*(void **)(*((void *)v2 + 10) + 8 * v7++));
    while (v7 < v2[1]);
  }
  free(*((void **)v2 + 5));
  free(*((void **)v2 + 6));
  free(*((void **)v2 + 7));
  free(*((void **)v2 + 10));
  free(*((void **)v2 + 8));
  free(*((void **)v2 + 9));
  uint64_t v8 = (FFTSetup *)*((void *)v2 + 12);
  vDSP_destroy_fftsetup(v8[3]);
  free(v8);
  free(v2);
  long long v9 = (void *)*((void *)this + 26);
  if (v9)
  {
    *((void *)this + 27) = v9;
    operator delete(v9);
  }
  uint64_t v13 = (void **)((char *)this + 184);
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v13);
  uint64_t v13 = (void **)((char *)this + 160);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v13);
  __int32 v10 = (void *)*((void *)this + 17);
  if (v10)
  {
    *((void *)this + 18) = v10;
    operator delete(v10);
  }
  uint64_t v13 = (void **)((char *)this + 112);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v13);
  float v11 = (void *)*((void *)this + 11);
  if (v11)
  {
    *((void *)this + 12) = v11;
    operator delete(v11);
  }
  uint64_t v12 = (void *)*((void *)this + 7);
  if (v12)
  {
    *((void *)this + 8) = v12;
    operator delete(v12);
  }
}

{
  uint64_t vars8;

  afSTFTWrapper::~afSTFTWrapper(this);

  JUMPOUT(0x1C185D370);
}

void ParametricProcessor::parsData::~parsData(ParametricProcessor::parsData *this)
{
  uint64_t v2 = (void *)*((void *)this + 169);
  if (v2)
  {
    *((void *)this + 170) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 166);
  if (v3)
  {
    *((void *)this + 167) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 163);
  if (v4)
  {
    *((void *)this + 164) = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)*((void *)this + 160);
  if (v5)
  {
    *((void *)this + 161) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 155);
  if (v6)
  {
    *((void *)this + 156) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 149);
  if (v7)
  {
    *((void *)this + 150) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 144);
  if (v8)
  {
    *((void *)this + 145) = v8;
    operator delete(v8);
  }
  long long v9 = (void *)*((void *)this + 141);
  if (v9)
  {
    *((void *)this + 142) = v9;
    operator delete(v9);
  }
  __int32 v10 = (void *)*((void *)this + 138);
  if (v10)
  {
    *((void *)this + 139) = v10;
    operator delete(v10);
  }
  float v11 = (void *)*((void *)this + 135);
  if (v11)
  {
    *((void *)this + 136) = v11;
    operator delete(v11);
  }
  uint64_t v12 = (void *)*((void *)this + 130);
  if (v12)
  {
    *((void *)this + 131) = v12;
    operator delete(v12);
  }
  uint64_t v13 = (void *)*((void *)this + 125);
  if (v13)
  {
    *((void *)this + 126) = v13;
    operator delete(v13);
  }
  long long v14 = (void *)*((void *)this + 120);
  if (v14)
  {
    *((void *)this + 121) = v14;
    operator delete(v14);
  }
  long long v42 = (void **)((char *)this + 936);
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v42);
  long long v42 = (void **)((char *)this + 912);
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v42);
  long long v42 = (void **)((char *)this + 888);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v42);
  long long v42 = (void **)((char *)this + 864);
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v42);
  long long v42 = (void **)((char *)this + 840);
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v42);
  unint64_t v15 = (void *)*((void *)this + 102);
  if (v15)
  {
    *((void *)this + 103) = v15;
    operator delete(v15);
  }
  unint64_t v16 = (void *)*((void *)this + 98);
  if (v16)
  {
    *((void *)this + 99) = v16;
    operator delete(v16);
  }
  long long v17 = (void *)*((void *)this + 95);
  if (v17)
  {
    *((void *)this + 96) = v17;
    operator delete(v17);
  }
  uint64_t v18 = (void *)*((void *)this + 92);
  if (v18)
  {
    *((void *)this + 93) = v18;
    operator delete(v18);
  }
  uint64_t v19 = (void *)*((void *)this + 89);
  if (v19)
  {
    *((void *)this + 90) = v19;
    operator delete(v19);
  }
  uint64_t v20 = (void *)*((void *)this + 85);
  if (v20)
  {
    *((void *)this + 86) = v20;
    operator delete(v20);
  }
  long long v21 = (void *)*((void *)this + 82);
  if (v21)
  {
    *((void *)this + 83) = v21;
    operator delete(v21);
  }
  long long v22 = (void *)*((void *)this + 79);
  if (v22)
  {
    *((void *)this + 80) = v22;
    operator delete(v22);
  }
  uint64_t v23 = (void *)*((void *)this + 76);
  if (v23)
  {
    *((void *)this + 77) = v23;
    operator delete(v23);
  }
  float32x2_t v24 = (void *)*((void *)this + 71);
  if (v24)
  {
    *((void *)this + 72) = v24;
    operator delete(v24);
  }
  __int32 v25 = (void *)*((void *)this + 66);
  if (v25)
  {
    *((void *)this + 67) = v25;
    operator delete(v25);
  }
  uint64_t v26 = (void *)*((void *)this + 61);
  if (v26)
  {
    *((void *)this + 62) = v26;
    operator delete(v26);
  }
  double v27 = (void *)*((void *)this + 56);
  if (v27)
  {
    *((void *)this + 57) = v27;
    operator delete(v27);
  }
  __double2 v28 = (void *)*((void *)this + 51);
  if (v28)
  {
    *((void *)this + 52) = v28;
    operator delete(v28);
  }
  __double2 v29 = (void *)*((void *)this + 48);
  if (v29)
  {
    *((void *)this + 49) = v29;
    operator delete(v29);
  }
  long long v42 = (void **)((char *)this + 360);
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v42);
  long long v42 = (void **)((char *)this + 336);
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v42);
  float v30 = (void *)*((void *)this + 38);
  if (v30)
  {
    *((void *)this + 39) = v30;
    operator delete(v30);
  }
  float v31 = (void *)*((void *)this + 35);
  if (v31)
  {
    *((void *)this + 36) = v31;
    operator delete(v31);
  }
  float v32 = (void *)*((void *)this + 32);
  if (v32)
  {
    *((void *)this + 33) = v32;
    operator delete(v32);
  }
  int v33 = (void *)*((void *)this + 29);
  if (v33)
  {
    *((void *)this + 30) = v33;
    operator delete(v33);
  }
  float v34 = (void *)*((void *)this + 26);
  if (v34)
  {
    *((void *)this + 27) = v34;
    operator delete(v34);
  }
  uint64_t v35 = (void *)*((void *)this + 22);
  if (v35)
  {
    *((void *)this + 23) = v35;
    operator delete(v35);
  }
  unint64_t v36 = (void *)*((void *)this + 19);
  if (v36)
  {
    *((void *)this + 20) = v36;
    operator delete(v36);
  }
  uint64_t v37 = (void *)*((void *)this + 16);
  if (v37)
  {
    *((void *)this + 17) = v37;
    operator delete(v37);
  }
  unint64_t v38 = (void *)*((void *)this + 13);
  if (v38)
  {
    *((void *)this + 14) = v38;
    operator delete(v38);
  }
  unint64_t v39 = (void *)*((void *)this + 10);
  if (v39)
  {
    *((void *)this + 11) = v39;
    operator delete(v39);
  }
  unint64_t v40 = (void *)*((void *)this + 7);
  if (v40)
  {
    *((void *)this + 8) = v40;
    operator delete(v40);
  }
  int v41 = (void *)*((void *)this + 2);
  if (v41)
  {
    *((void *)this + 3) = v41;
    operator delete(v41);
  }
}

void RotationUtilities::~RotationUtilities(RotationUtilities *this)
{
  uint64_t v2 = (void *)*((void *)this + 17);
  if (v2)
  {
    *((void *)this + 18) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 12);
  if (v3)
  {
    *((void *)this + 13) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 7);
  if (v4)
  {
    *((void *)this + 8) = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)*((void *)this + 2);
  if (v5)
  {
    *((void *)this + 3) = v5;
    operator delete(v5);
  }
}

void MatrixDecompositions::~MatrixDecompositions(MatrixDecompositions *this)
{
  uint64_t v2 = (void *)*((void *)this + 42);
  if (v2)
  {
    *((void *)this + 43) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 39);
  if (v3)
  {
    *((void *)this + 40) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 36);
  if (v4)
  {
    *((void *)this + 37) = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)*((void *)this + 33);
  if (v5)
  {
    *((void *)this + 34) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 30);
  if (v6)
  {
    *((void *)this + 31) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 27);
  if (v7)
  {
    *((void *)this + 28) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 24);
  if (v8)
  {
    *((void *)this + 25) = v8;
    operator delete(v8);
  }
  long long v9 = (void *)*((void *)this + 21);
  if (v9)
  {
    *((void *)this + 22) = v9;
    operator delete(v9);
  }
  __int32 v10 = (void *)*((void *)this + 18);
  if (v10)
  {
    *((void *)this + 19) = v10;
    operator delete(v10);
  }
  float v11 = (void *)*((void *)this + 15);
  if (v11)
  {
    *((void *)this + 16) = v11;
    operator delete(v11);
  }
  uint64_t v12 = (void *)*((void *)this + 12);
  if (v12)
  {
    *((void *)this + 13) = v12;
    operator delete(v12);
  }
  uint64_t v13 = (void *)*((void *)this + 9);
  if (v13)
  {
    *((void *)this + 10) = v13;
    operator delete(v13);
  }
  long long v14 = (void *)*((void *)this + 6);
  if (v14)
  {
    *((void *)this + 7) = v14;
    operator delete(v14);
  }
  unint64_t v15 = (void *)*((void *)this + 3);
  if (v15)
  {
    *((void *)this + 4) = v15;
    operator delete(v15);
  }
  unint64_t v16 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v16;
    operator delete(v16);
  }
}

void covarianceBasedAdaptiveFilter::~covarianceBasedAdaptiveFilter(covarianceBasedAdaptiveFilter *this)
{
  MatrixDecompositions::~MatrixDecompositions((covarianceBasedAdaptiveFilter *)((char *)this + 1672));
  uint64_t v2 = (void *)*((void *)this + 206);
  if (v2)
  {
    *((void *)this + 207) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 203);
  if (v3)
  {
    *((void *)this + 204) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 200);
  if (v4)
  {
    *((void *)this + 201) = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)*((void *)this + 197);
  if (v5)
  {
    *((void *)this + 198) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 192);
  if (v6)
  {
    *((void *)this + 193) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 187);
  if (v7)
  {
    *((void *)this + 188) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 182);
  if (v8)
  {
    *((void *)this + 183) = v8;
    operator delete(v8);
  }
  long long v9 = (void *)*((void *)this + 177);
  if (v9)
  {
    *((void *)this + 178) = v9;
    operator delete(v9);
  }
  __int32 v10 = (void *)*((void *)this + 172);
  if (v10)
  {
    *((void *)this + 173) = v10;
    operator delete(v10);
  }
  float v11 = (void *)*((void *)this + 167);
  if (v11)
  {
    *((void *)this + 168) = v11;
    operator delete(v11);
  }
  uint64_t v12 = (void *)*((void *)this + 162);
  if (v12)
  {
    *((void *)this + 163) = v12;
    operator delete(v12);
  }
  uint64_t v13 = (void *)*((void *)this + 157);
  if (v13)
  {
    *((void *)this + 158) = v13;
    operator delete(v13);
  }
  long long v14 = (void *)*((void *)this + 152);
  if (v14)
  {
    *((void *)this + 153) = v14;
    operator delete(v14);
  }
  unint64_t v15 = (void *)*((void *)this + 147);
  if (v15)
  {
    *((void *)this + 148) = v15;
    operator delete(v15);
  }
  unint64_t v16 = (void *)*((void *)this + 142);
  if (v16)
  {
    *((void *)this + 143) = v16;
    operator delete(v16);
  }
  long long v17 = (void *)*((void *)this + 137);
  if (v17)
  {
    *((void *)this + 138) = v17;
    operator delete(v17);
  }
  uint64_t v18 = (void *)*((void *)this + 132);
  if (v18)
  {
    *((void *)this + 133) = v18;
    operator delete(v18);
  }
  uint64_t v19 = (void *)*((void *)this + 127);
  if (v19)
  {
    *((void *)this + 128) = v19;
    operator delete(v19);
  }
  uint64_t v20 = (void *)*((void *)this + 122);
  if (v20)
  {
    *((void *)this + 123) = v20;
    operator delete(v20);
  }
  long long v21 = (void *)*((void *)this + 117);
  if (v21)
  {
    *((void *)this + 118) = v21;
    operator delete(v21);
  }
  long long v22 = (void *)*((void *)this + 112);
  if (v22)
  {
    *((void *)this + 113) = v22;
    operator delete(v22);
  }
  uint64_t v23 = (void *)*((void *)this + 107);
  if (v23)
  {
    *((void *)this + 108) = v23;
    operator delete(v23);
  }
  float32x2_t v24 = (void *)*((void *)this + 102);
  if (v24)
  {
    *((void *)this + 103) = v24;
    operator delete(v24);
  }
  __int32 v25 = (void *)*((void *)this + 97);
  if (v25)
  {
    *((void *)this + 98) = v25;
    operator delete(v25);
  }
  uint64_t v26 = (void *)*((void *)this + 92);
  if (v26)
  {
    *((void *)this + 93) = v26;
    operator delete(v26);
  }
  double v27 = (void *)*((void *)this + 89);
  if (v27)
  {
    *((void *)this + 90) = v27;
    operator delete(v27);
  }
  __double2 v28 = (void *)*((void *)this + 86);
  if (v28)
  {
    *((void *)this + 87) = v28;
    operator delete(v28);
  }
  __double2 v29 = (void *)*((void *)this + 81);
  if (v29)
  {
    *((void *)this + 82) = v29;
    operator delete(v29);
  }
  float v30 = (void *)*((void *)this + 78);
  if (v30)
  {
    *((void *)this + 79) = v30;
    operator delete(v30);
  }
  float v31 = (void *)*((void *)this + 73);
  if (v31)
  {
    *((void *)this + 74) = v31;
    operator delete(v31);
  }
  float v32 = (void *)*((void *)this + 70);
  if (v32)
  {
    *((void *)this + 71) = v32;
    operator delete(v32);
  }
  int v33 = (void *)*((void *)this + 65);
  if (v33)
  {
    *((void *)this + 66) = v33;
    operator delete(v33);
  }
  float v34 = (void *)*((void *)this + 60);
  if (v34)
  {
    *((void *)this + 61) = v34;
    operator delete(v34);
  }
  uint64_t v35 = (void *)*((void *)this + 55);
  if (v35)
  {
    *((void *)this + 56) = v35;
    operator delete(v35);
  }
  unint64_t v36 = (void *)*((void *)this + 50);
  if (v36)
  {
    *((void *)this + 51) = v36;
    operator delete(v36);
  }
  uint64_t v37 = (void *)*((void *)this + 45);
  if (v37)
  {
    *((void *)this + 46) = v37;
    operator delete(v37);
  }
  unint64_t v38 = (void *)*((void *)this + 40);
  if (v38)
  {
    *((void *)this + 41) = v38;
    operator delete(v38);
  }
  unint64_t v39 = (void *)*((void *)this + 35);
  if (v39)
  {
    *((void *)this + 36) = v39;
    operator delete(v39);
  }
  unint64_t v40 = (void *)*((void *)this + 30);
  if (v40)
  {
    *((void *)this + 31) = v40;
    operator delete(v40);
  }
  int v41 = (void *)*((void *)this + 25);
  if (v41)
  {
    *((void *)this + 26) = v41;
    operator delete(v41);
  }
  long long v42 = (void *)*((void *)this + 20);
  if (v42)
  {
    *((void *)this + 21) = v42;
    operator delete(v42);
  }
  long long v43 = (void *)*((void *)this + 15);
  if (v43)
  {
    *((void *)this + 16) = v43;
    operator delete(v43);
  }
  uint64_t v44 = (void *)*((void *)this + 10);
  if (v44)
  {
    *((void *)this + 11) = v44;
    operator delete(v44);
  }
  unsigned int v45 = (void *)*((void *)this + 7);
  if (v45)
  {
    *((void *)this + 8) = v45;
    operator delete(v45);
  }
  uint64_t v46 = (void *)*((void *)this + 2);
  if (v46)
  {
    *((void *)this + 3) = v46;
    operator delete(v46);
  }
}

void std::default_delete<HOA::RotationMatrix>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }

  JUMPOUT(0x1C185D370);
}

void ParametricProcessor::pars::~pars(ParametricProcessor::pars *this)
{
  uint64_t v2 = (void *)*((void *)this + 28);
  if (v2)
  {
    *((void *)this + 29) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (const void *)*((void *)this + 19);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)*((void *)this + 18);
  if (v4) {
    CFRelease(v4);
  }
}

void std::vector<LiteMatrix<float>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 40)
  {
    uint64_t v4 = *(void **)(i - 24);
    if (v4)
    {
      *(void *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void *std::vector<LiteMatrix<float>>::vector(void *a1, unint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x666666666666667) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = 5 * a2;
    uint64_t v6 = 40 * a2;
    uint64_t v7 = (char *)operator new(40 * a2);
    *a1 = v7;
    a1[1] = v7;
    uint64_t v8 = &v7[8 * v5];
    a1[2] = v8;
    long long v9 = v7 + 16;
    do
    {
      *((_OWORD *)v9 - 1) = *(_OWORD *)a3;
      v9[1] = 0;
      v9[2] = 0;
      *long long v9 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v9, *(const void **)(a3 + 16), *(void *)(a3 + 24), (uint64_t)(*(void *)(a3 + 24) - *(void *)(a3 + 16)) >> 2);
      v9 += 5;
      v6 -= 40;
    }
    while (v6);
    a1[1] = v8;
  }
  return a1;
}

void sub_1BB4618A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void ParametricProcessor::convertHRIRtoHRTF(void *a1, uint64_t a2, unint64_t **a3)
{
  v91[1] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)v77, 2, *(int *)(a2 + 28));
  unint64_t v8 = ((char *)v7 - (char *)v6) / 40;
  std::vector<CLiteMatrix>::vector(a1, v8, (uint64_t)v77);
  if (__p)
  {
    std::string v79 = __p;
    operator delete(__p);
  }
  unint64_t v9 = *(int *)(a2 + 28);
  v77[0] = 0;
  std::vector<float>::vector(v90, v9, v77);
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)v87, 1, 1);
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)v84, 1, 1);
  LiteMatrix<float>::LiteMatrix((uint64_t)&v80, 1, (*a3)[1]);
  unint64_t v10 = *(int *)(a2 + 20);
  unint64_t v11 = v81 / v10;
  afSTFTWrapper::afSTFTWrapper((afSTFTWrapper *)v77, 1u, 1u, v10, v81 / v10, *(unsigned char *)(a2 + 24), *(unsigned __int8 *)(a2 + 25));
  unint64_t v12 = *(int *)(a2 + 20);
  uint64_t v75 = a2;
  unint64_t v13 = (*a3)[1] / v12;
  afSTFTWrapper::afSTFTWrapper((afSTFTWrapper *)v76, 2u, 1u, v12, v13, *(unsigned char *)(a2 + 24), *(unsigned __int8 *)(a2 + 25));
  uint64_t v73 = v6;
  unint64_t v14 = 0;
  v91[0] = 0;
  unint64_t v15 = *a3;
  char v16 = 1;
  do
  {
    char v17 = v16;
    if (v15[1])
    {
      unint64_t v18 = 0;
      float v19 = 1.1755e-38;
      do
      {
        if (*(float *)LiteMatrix<float>::operator()(v15, v14, v18) > v19)
        {
          float v19 = *(float *)LiteMatrix<float>::operator()(*a3, v14, v18);
          *((float *)v91 + v14) = (float)v18;
        }
        ++v18;
        unint64_t v15 = *a3;
      }
      while (v18 < (*a3)[1]);
    }
    char v16 = 0;
    unint64_t v14 = 1;
  }
  while ((v17 & 1) != 0);
  *(_DWORD *)LiteMatrix<float>::operator()(&v80, 0, (int)(float)((float)(*(float *)v91 + *((float *)v91 + 1)) * 0.5) + 1) = 1065353216;
  uint64_t v20 = (void *)afSTFTWrapper::fltbAnalysisMatrix((afSTFTWrapper *)v77, &v80);
  int v21 = *(_DWORD *)(a2 + 28);
  uint64_t v72 = a3;
  if (v21)
  {
    unint64_t v22 = 0;
    uint64_t v23 = v11 << 32;
    if ((unint64_t)(int)v11 <= 1) {
      uint64_t v24 = 1;
    }
    else {
      uint64_t v24 = (int)v11;
    }
    do
    {
      if (v23)
      {
        unint64_t v25 = 0;
        do
        {
          float v26 = *(float *)CLiteMatrix::Get((CLiteMatrix *)(*v20 + 40 * v22), 0, v25);
          CLiteMatrix::Get((CLiteMatrix *)(*v20 + 40 * v22), 0, v25);
          float v28 = v26 * v26 + *v27 * *v27 + *((float *)v90[0] + v22);
          *((float *)v90[0] + v22) = v28;
          ++v25;
        }
        while (v24 != v25);
        int v21 = *(_DWORD *)(v75 + 28);
      }
      ++v22;
    }
    while (v22 < v21);
  }
  uint64_t v29 = v75;
  if (v7 != v73)
  {
    uint64_t v30 = 0;
    unint64_t v31 = v13 << 32;
    if (v8 <= 1) {
      uint64_t v32 = 1;
    }
    else {
      uint64_t v32 = v8;
    }
    uint64_t v71 = v32;
    if ((unint64_t)(int)v13 <= 1) {
      uint64_t v33 = 1;
    }
    else {
      uint64_t v33 = (int)v13;
    }
    do
    {
      float v34 = (void *)afSTFTWrapper::fltbAnalysisMatrix((afSTFTWrapper *)v76, &(*v72)[5 * v30]);
      unint64_t v35 = 0;
      LODWORD(v36) = *(_DWORD *)(v29 + 28);
      char v37 = 1;
      do
      {
        char v38 = v37;
        if (v36)
        {
          char v74 = v37;
          unint64_t v39 = 0;
          do
          {
            vDSP_vclr(v88, 1, v89 - v88);
            if (v31)
            {
              unint64_t v40 = 0;
              float v41 = 0.0;
              do
              {
                float v42 = *(float *)CLiteMatrix::Get((CLiteMatrix *)(*v34 + 40 * v39), v35, v40);
                CLiteMatrix::Get((CLiteMatrix *)(*v34 + 40 * v39), v35, v40);
                float v41 = v42 * v42 + *v43 * *v43 + v41;
                float v44 = *(float *)CLiteMatrix::Get((CLiteMatrix *)(*v34 + 40 * v39), v35, v40);
                double v45 = (float)(v44 * *(float *)CLiteMatrix::Get((CLiteMatrix *)(*v20 + 40 * v39), 0, v40));
                CLiteMatrix::Get((CLiteMatrix *)(*v34 + 40 * v39), v35, v40);
                float v47 = *v46;
                CLiteMatrix::Get((CLiteMatrix *)(*v20 + 40 * v39), 0, v40);
                float v49 = *v48;
                uint64_t v50 = (float *)CLiteMatrix::Get((CLiteMatrix *)v87, 0, 0);
                float v51 = v45 + v47 * v49 + *v50;
                *uint64_t v50 = v51;
                CLiteMatrix::Get((CLiteMatrix *)(*v34 + 40 * v39), v35, v40);
                LODWORD(v45) = *v52;
                double v53 = (float)(*(float *)&v45 * *(float *)CLiteMatrix::Get((CLiteMatrix *)(*v20 + 40 * v39), 0, v40));
                float v54 = *(float *)CLiteMatrix::Get((CLiteMatrix *)(*v34 + 40 * v39), v35, v40);
                CLiteMatrix::Get((CLiteMatrix *)(*v20 + 40 * v39), 0, v40);
                float v56 = *v55;
                CLiteMatrix::Get((CLiteMatrix *)v87, 0, 0);
                float v58 = v53 - v54 * v56 + *v57;
                *float v57 = v58;
                ++v40;
              }
              while (v33 != v40);
            }
            else
            {
              float v41 = 0.0;
            }
            float v59 = sqrtf(v41 / *((float *)v90[0] + v39));
            CLiteMatrix::Get((CLiteMatrix *)v87, 0, 0);
            float v61 = *v60;
            float v62 = *(float *)CLiteMatrix::Get((CLiteMatrix *)v87, 0, 0);
            uint64_t v63 = (float *)CLiteMatrix::Get((CLiteMatrix *)v84, 0, 0);
            float v64 = atan2f(v61, v62);
            __float2 v65 = __sincosf_stret(v64);
            *uint64_t v63 = v65.__cosval;
            CLiteMatrix::Get((CLiteMatrix *)v84, 0, 0);
            *uint64_t v66 = v65.__sinval;
            float v67 = *(float *)CLiteMatrix::Get((CLiteMatrix *)v84, 0, 0);
            *(float *)CLiteMatrix::Get((CLiteMatrix *)(*a1 + 40 * v30), v35, v39) = v59 * v67;
            CLiteMatrix::Get((CLiteMatrix *)v84, 0, 0);
            float v69 = *v68;
            CLiteMatrix::Get((CLiteMatrix *)(*a1 + 40 * v30), v35, v39);
            *uint64_t v70 = v59 * v69;
            ++v39;
            uint64_t v29 = v75;
            unint64_t v36 = *(int *)(v75 + 28);
          }
          while (v39 < v36);
          char v38 = v74;
        }
        char v37 = 0;
        unint64_t v35 = 1;
      }
      while ((v38 & 1) != 0);
      ++v30;
    }
    while (v30 != v71);
  }
  afSTFTWrapper::~afSTFTWrapper((afSTFTWrapper *)v76);
  afSTFTWrapper::~afSTFTWrapper((afSTFTWrapper *)v77);
  if (v82)
  {
    __int16 v83 = v82;
    operator delete(v82);
  }
  if (v85)
  {
    unsigned int v86 = v85;
    operator delete(v85);
  }
  if (v88)
  {
    int v89 = v88;
    operator delete(v88);
  }
  if (v90[0])
  {
    v90[1] = v90[0];
    operator delete(v90[0]);
  }
}

void sub_1BB461F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  afSTFTWrapper::~afSTFTWrapper((afSTFTWrapper *)&a14);
  afSTFTWrapper::~afSTFTWrapper((afSTFTWrapper *)&a43);
  double v45 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v45;
    operator delete(v45);
  }
  uint64_t v46 = *(void **)(v43 - 224);
  if (v46)
  {
    *(void *)(v43 - 216) = v46;
    operator delete(v46);
  }
  float v47 = *(void **)(v43 - 184);
  if (v47)
  {
    *(void *)(v43 - 176) = v47;
    operator delete(v47);
  }
  int v48 = *(void **)(v43 - 160);
  if (v48)
  {
    *(void *)(v43 - 152) = v48;
    operator delete(v48);
  }
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)&a43);
  _Unwind_Resume(a1);
}

unint64_t *ParametricProcessor::calculatePhaseTerm(unint64_t *this, CLiteMatrix *a2, CLiteMatrix *a3, float a4)
{
  unint64_t v4 = *this;
  if (*this)
  {
    uint64_t v7 = (CLiteMatrix *)this;
    unint64_t v8 = 0;
    unint64_t v9 = this[1];
    do
    {
      if (v9)
      {
        for (unint64_t i = 0; i < v9; ++i)
        {
          unint64_t v11 = (float *)CLiteMatrix::Get(v7, v8, i);
          float v12 = cosf(*v11 * 0.5);
          *(float *)CLiteMatrix::Get(a2, v8, i) = v12;
          unint64_t v13 = (float *)CLiteMatrix::Get(v7, v8, i);
          float v14 = sinf(*v13 * 0.5) * a4;
          this = (unint64_t *)CLiteMatrix::Get(a2, v8, i);
          *unint64_t v15 = v14;
          unint64_t v9 = *((void *)v7 + 1);
        }
        unint64_t v4 = *(void *)v7;
      }
      ++v8;
    }
    while (v8 < v4);
  }
  return this;
}

char *std::vector<CLiteMatrix>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v3 = 5 * a2;
  BOOL result = (char *)operator new(40 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v3];
  return result;
}

void *std::vector<std::vector<float>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::__fs::filesystem::path>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1BB4621B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

float *ParametricProcessor::interpolateHRTFs(uint64_t a1, const float **a2, int a3)
{
  uint64_t __C = 0;
  float v17 = 0.0;
  vDSP_dotpr(*(const float **)(*(void *)(a1 + 3896) + 24 * a3), 1, *a2, 1, (float *)&__C, *(void *)(a1 + 3712));
  vDSP_dotpr(*(const float **)(*(void *)(a1 + 3896) + 24 * (*(_DWORD *)(a1 + 28) + a3)), 1, *a2, 1, &v17, *(void *)(a1 + 3712));
  if (*(float *)(*(void *)(a1 + 3088) + 4 * a3) >= *(float *)(a1 + 196))
  {
    vDSP_vclr(*(float **)(a1 + 6440), 1, (uint64_t)(*(void *)(a1 + 6448) - *(void *)(a1 + 6440)) >> 2);
    int v16 = __C;
    *(_DWORD *)CLiteMatrix::Get((CLiteMatrix *)(a1 + 6424), 0, 0) = v16;
    float v13 = v17;
    BOOL result = (float *)CLiteMatrix::Get((CLiteMatrix *)(a1 + 6424), 1uLL, 0);
  }
  else
  {
    vDSP_dotpr(*(const float **)(a1 + 3968), 1, *(const float **)(a1 + 4112), 1, (float *)&__C + 1, *(void *)(a1 + 3712));
    float v6 = *(float *)&__C;
    double v7 = *(float *)(*(void *)(a1 + 3088) + 4 * a3) * 6.28318531 * *((float *)&__C + 1) + 3.14159265;
    *(float *)&double v7 = v7 + floor(v7 / 6.28318531) * -6.28318531 + -3.14159265;
    __float2 v8 = __sincosf_stret(*(float *)&v7 * 0.5);
    unint64_t v9 = (CLiteMatrix *)(a1 + 6424);
    *(float *)CLiteMatrix::Get(v9, 0, 0) = v6 * v8.__cosval;
    float v10 = *(float *)&__C * v8.__sinval;
    CLiteMatrix::Get(v9, 0, 0);
    *unint64_t v11 = v10;
    float v12 = v17 * v8.__cosval;
    *(float *)CLiteMatrix::Get(v9, 1uLL, 0) = v12;
    float v13 = -(float)(v17 * v8.__sinval);
    CLiteMatrix::Get(v9, 1uLL, 0);
    BOOL result = v14;
  }
  *BOOL result = v13;
  return result;
}

unint64_t ParametricProcessor::InterpolateXTCIRs(uint64_t a1, int a2)
{
  uint64_t __C = 0;
  vDSP_dotpr(*(const float **)(*(void *)(a1 + 3896) + 24 * a2), 1, *(const float **)(a1 + 4112), 1, (float *)&__C + 1, *(void *)(a1 + 3712));
  vDSP_dotpr(*(const float **)(*(void *)(a1 + 3896) + 24 * (*(_DWORD *)(a1 + 28) + a2)), 1, *(const float **)(a1 + 4112), 1, (float *)&__C, *(void *)(a1 + 3712));
  int v4 = HIDWORD(__C);
  *(_DWORD *)CLiteMatrix::Get((CLiteMatrix *)(a1 + 6424), 0, 0) = v4;
  CLiteMatrix::Get((CLiteMatrix *)(a1 + 6424), 0, 0);
  *size_t v5 = 0;
  int v6 = __C;
  *(_DWORD *)CLiteMatrix::Get((CLiteMatrix *)(a1 + 6424), 1uLL, 0) = v6;
  unint64_t result = CLiteMatrix::Get((CLiteMatrix *)(a1 + 6424), 1uLL, 0);
  *__float2 v8 = 0;
  return result;
}

void ParametricProcessor::covarianceMatrixSmoothing(const float **this, const float **a2, CLiteMatrix *a3, float a4)
{
  float __B = a4;
  vDSP_vsmul(this[2], 1, &__B, (float *)this[2], 1, this[3] - this[2]);
  float v8 = 1.0 - a4;
  vDSP_vsmul(a2[2], 1, &v8, (float *)a2[2], 1, a2[3] - a2[2]);
  CLiteMatrix::operator+=(this, a2);

  CLiteMatrix::SetWithOther((uint64_t)a2, (uint64_t *)this);
}

uint64_t ParametricProcessor::calculatePseudoSpectrumBasedDOAIndex(uint64_t a1, CLiteMatrix *this, vDSP_Length *a3, vDSP_Length *a4, uint64_t a5)
{
  uint64_t v5 = *(void *)this;
  if (*(void *)this != *((void *)this + 1)) {
    __assert_rtn("singularValueDecompositionOnlyU", "MatrixDecompositions.cpp", 59, "Cx.NumRows()==Cx.NumCols()");
  }
  double v7 = (unint64_t *)(a1 + 5040);
  if (*(void *)(a1 + 5040) != v5) {
    __assert_rtn("singularValueDecompositionOnlyU", "MatrixDecompositions.cpp", 62, "U.NumRows()==Cx.NumRows()");
  }
  if (*(void *)(a1 + 5048) != v5) {
    __assert_rtn("singularValueDecompositionOnlyU", "MatrixDecompositions.cpp", 63, "U.NumCols()==Cx.NumRows()");
  }
  LODWORD(__lda.realp) = *(void *)this;
  __uint64_t n = v5;
  CLiteMatrix::ToCLPKComplex(this, (void *)(a1 + 2488));
  __CLPK_integer v33 = 0;
  __CLPK_integer v34 = 3 * v5;
  char __jobu = 83;
  char __jobvt = 78;
  cgesvd_(&__jobu, &__jobvt, (__CLPK_integer *)&__lda, &__n, *(__CLPK_complex **)(a1 + 2488), (__CLPK_integer *)&__lda, *(__CLPK_real **)(a1 + 2512), *(__CLPK_complex **)(a1 + 2536), (__CLPK_integer *)&__lda, 0, &__n, *(__CLPK_complex **)(a1 + 2584), &v34, *(__CLPK_real **)(a1 + 2608), &v33);
  CLiteMatrix::FromCLPKComplex(v7, (void *)(a1 + 2536));
  unint64_t v12 = *(void *)(a1 + 5080);
  if (v12)
  {
    unint64_t v13 = 0;
    unint64_t v14 = *(void *)(a1 + 5088);
    do
    {
      if (v14)
      {
        for (unint64_t i = 0; i < v14; ++i)
        {
          int v16 = *(_DWORD *)CLiteMatrix::Get((CLiteMatrix *)v7, v13, i + 1);
          *(_DWORD *)CLiteMatrix::Get((CLiteMatrix *)(a1 + 5080), v13, i) = v16;
          CLiteMatrix::Get((CLiteMatrix *)v7, v13, i + 1);
          int v18 = *v17;
          CLiteMatrix::Get((CLiteMatrix *)(a1 + 5080), v13, i);
          *float v19 = v18;
          unint64_t v14 = *(void *)(a1 + 5088);
        }
        unint64_t v12 = *(void *)(a1 + 5080);
      }
      ++v13;
    }
    while (v13 < v12);
  }
  __uint64_t n = 1065353216;
  CLiteMatrix::MatrixMultiply(a3, (const CLiteMatrix *)(a1 + 5080), (const CLiteMatrix *)a4, v11);
  if (*a3)
  {
    unint64_t v20 = 0;
    do
    {
      __lda.realp = 0;
      __lda.imagp = 0;
      __lda.realp = (float *)CLiteMatrix::Get((CLiteMatrix *)a4, v20, 0);
      __lda.imagp = v21;
      *(_DWORD *)(*(void *)a5 + 4 * v20) = 0;
      vDSP_zvmags(&__lda, 1, *(float **)(a1 + 4720), 1, a4[1]);
      vDSP_sve(*(const float **)(a1 + 4720), 1, (float *)(*(void *)a5 + 4 * v20++), a4[1]);
    }
    while (*a3 > v20);
  }
  vDSP_svdiv((const float *)&__n, *(const float **)a5, 1, *(float **)a5, 1, *a4);
  unint64_t v22 = *(float **)a5;
  uint64_t v23 = *(float **)(a5 + 8);
  if (*(float **)a5 == v23)
  {
    unint64_t v25 = *(const float **)a5;
  }
  else
  {
    uint64_t v24 = v22 + 1;
    unint64_t v25 = *(const float **)a5;
    if (v22 + 1 != v23)
    {
      float v26 = *v22;
      unint64_t v25 = *(const float **)a5;
      double v27 = v22 + 1;
      do
      {
        float v28 = *v27++;
        float v29 = v28;
        if (v26 < v28)
        {
          float v26 = v29;
          unint64_t v25 = v24;
        }
        uint64_t v24 = v27;
      }
      while (v27 != v23);
    }
  }
  return v25 - v22;
}

vDSP_Length *ParametricProcessor::calculateFrameEnergy(vDSP_Length *result, unint64_t *a2)
{
  vDSP_Stride v2 = result[1];
  if (v2)
  {
    unint64_t v4 = 0;
    vDSP_Length v5 = *result;
    int v6 = (const float *)result[2];
    unint64_t v7 = (unint64_t)((uint64_t)(result[3] - (void)v6) >> 2) >> 1;
    do
    {
      float __C = 0.0;
      vDSP_svesq(v6, v2, &__C, v5);
      float v9 = 0.0;
      vDSP_svesq(&v6[v7], v2, &v9, v5);
      float v8 = __C + v9;
      unint64_t result = (vDSP_Length *)LiteMatrix<float>::operator()(a2, 0, v4);
      *(float *)unint64_t result = v8;
      ++v4;
      ++v6;
    }
    while (v2 != v4);
  }
  return result;
}

void ParametricProcessor::estimateTargetCovarianceMatrix(ParametricProcessor *this, CLiteMatrix *a2, CLiteMatrix *a3, CLiteMatrix *a4, uint64_t a5)
{
  uint64_t v5 = a5;
  int v6 = a2;
  switch(*((_DWORD *)this + 32))
  {
    case 0:
      unint64_t v11 = ParametricProcessor::calculatePseudoSpectrumBasedDOAIndex((uint64_t)this, a3, (vDSP_Length *)this + 430, (vDSP_Length *)this + 601, (uint64_t)this + 4968);
      CLiteMatrix::MatrixMultiply((vDSP_Length *)(*((void *)this + 418) + 40 * v11), a4, (ParametricProcessor *)((char *)this + 5416), v12);
      ParametricProcessor::calculateFrameEnergy((vDSP_Length *)a4, (unint64_t *)this + 672);
      ParametricProcessor::calculateG((uint64_t)this, (vDSP_Length *)this + 677, (uint64_t)this + 5376, (uint64_t)this + 6240);
      if (*((_DWORD *)this + 15))
      {
        unint64_t v14 = 0;
        do
        {
          int v15 = *(_DWORD *)CLiteMatrix::Get((ParametricProcessor *)((char *)this + 3600), v11, v14);
          *(_DWORD *)CLiteMatrix::Get((ParametricProcessor *)((char *)this + 6344), 0, v14) = v15;
          CLiteMatrix::Get((ParametricProcessor *)((char *)this + 3600), v11, v14);
          int v17 = *v16;
          CLiteMatrix::Get((ParametricProcessor *)((char *)this + 6344), 0, v14);
          *int v18 = v17;
          ++v14;
        }
        while (v14 < *((int *)this + 15));
      }
      CLiteMatrix::MatrixMultiply((vDSP_Length *)this + 793, a4, (ParametricProcessor *)((char *)this + 5656), v13);
      if (*((int *)this + 8) >= 1)
      {
        int64_t v19 = 0;
        do
        {
          float v20 = *(float *)LiteMatrix<float>::operator()((unint64_t *)this + 780, 0, v19)
              / ((double)(*((_DWORD *)this + 14) + 1)
               * (double)(*((_DWORD *)this + 14) + 1));
          *(float *)(*((void *)this + 790) + 4 * v19++) = v20;
        }
        while (v19 < *((int *)this + 8));
      }
      CLiteMatrix::ScaleCols((ParametricProcessor *)((char *)this + 5656), (const float **)this + 790);
      int v22 = *((_DWORD *)this + 33);
      uint64_t v5 = a5;
      switch(v22)
      {
        case 1:
          double v184 = *(float *)(*((void *)this + 389) + 4 * v11) * 0.0174532925;
          __double2 v185 = __sincos_stret(*(float *)(*((void *)this + 392) + 4 * v11) * 0.0174532925);
          __double2 v186 = __sincos_stret(v184);
          float v187 = v185.__cosval * v186.__cosval;
          *((float *)this + 1056) = v187;
          float v188 = v185.__cosval * v186.__sinval;
          *((float *)this + 1057) = v188;
          float sinval = v185.__sinval;
          *((float *)this + 1058) = sinval;
          VBAP::calculateVBAPGains(*((VBAP **)this + 55), (float32x2_t *)this + 528, *((float **)this + 514));
          ParametricProcessor::interpolateHRTFs((uint64_t)this, (const float **)this + 514, a5);
          break;
        case 2:
          double v190 = *(float *)(*((void *)this + 389) + 4 * v11) * 0.0174532925;
          __double2 v191 = __sincos_stret(*(float *)(*((void *)this + 392) + 4 * v11) * 0.0174532925);
          __double2 v192 = __sincos_stret(v190);
          float v193 = v191.__cosval * v192.__cosval;
          *((float *)this + 1056) = v193;
          float v194 = v191.__cosval * v192.__sinval;
          *((float *)this + 1057) = v194;
          float v195 = v191.__sinval;
          *((float *)this + 1058) = v195;
          VBAP::calculateVBAPGains(*((VBAP **)this + 55), (float32x2_t *)this + 528, *((float **)this + 514));
          ParametricProcessor::InterpolateXTCIRs((uint64_t)this, a5);
          break;
        case 3:
          double v23 = *(float *)(*((void *)this + 389) + 4 * v11) * 0.0174532925;
          __double2 v24 = __sincos_stret(*(float *)(*((void *)this + 392) + 4 * v11) * 0.0174532925);
          __double2 v25 = __sincos_stret(v23);
          float v26 = v24.__cosval * v25.__cosval;
          *((float *)this + 1056) = v26;
          float v27 = v24.__cosval * v25.__sinval;
          *((float *)this + 1057) = v27;
          float v28 = v24.__sinval;
          *((float *)this + 1058) = v28;
          VBAP::calculateVBAPGains(*((VBAP **)this + 56), (float32x2_t *)this + 528, *((float **)this + 517));
          if (*((int *)this + 10) >= 1)
          {
            int64_t v30 = 0;
            do
            {
              int v31 = *(_DWORD *)(*((void *)this + 517) + 4 * v30);
              *(_DWORD *)CLiteMatrix::Get((ParametricProcessor *)((char *)this + 4184), v30++, 0) = v31;
            }
            while (v30 < *((int *)this + 10));
          }
          uint64_t v32 = 4184;
LABEL_108:
          CLiteMatrix::MatrixMultiply((vDSP_Length *)((char *)this + v32), (ParametricProcessor *)((char *)this + 5656), (ParametricProcessor *)((char *)this + 5720), v29);
          goto LABEL_109;
        default:
LABEL_109:
          if (*((_DWORD *)this + 15))
          {
            unint64_t v196 = 0;
            do
            {
              int v197 = *(_DWORD *)CLiteMatrix::Get((ParametricProcessor *)((char *)this + 3440), v11, v196);
              *(_DWORD *)CLiteMatrix::Get((ParametricProcessor *)((char *)this + 6384), v196++, 0) = v197;
            }
            while (v196 < *((int *)this + 15));
          }
          float v198 = (vDSP_Length *)((char *)this + 6384);
          float v199 = (ParametricProcessor *)((char *)this + 5800);
          BOOL v200 = (ParametricProcessor *)((char *)this + 5656);
          goto LABEL_155;
      }
      uint64_t v32 = 6424;
      goto LABEL_108;
    case 1:
      ActiveIntensityAnalysis::calculateCartesianActiveIntensity(*((void *)this + 1070), a4);
      ActiveIntensityAnalysis::convertCartesianActiveIntensityToPolar(*((vDSP_Length **)this + 1070), (float **)this + 1071);
      CLiteMatrix::SetWithTranposeOfOther((ParametricProcessor *)((char *)this + 6552), a4);
      if (*((_DWORD *)this + 8))
      {
        uint64_t v33 = 0;
        unint64_t v34 = 0;
        do
        {
          unint64_t v35 = (void *)CLiteMatrix::Get((CLiteMatrix *)(*((void *)this + 824) + v33), 0, 0);
          unint64_t v36 = (const void *)CLiteMatrix::Get((ParametricProcessor *)((char *)this + 6552), v34, 0);
          memcpy(v35, v36, 4 * *((int *)this + 15));
          CLiteMatrix::Get((CLiteMatrix *)(*((void *)this + 824) + v33), 0, 0);
          char v38 = v37;
          CLiteMatrix::Get((ParametricProcessor *)((char *)this + 6552), v34, 0);
          memcpy(v38, v39, 4 * *((int *)this + 15));
          ++v34;
          unint64_t v40 = *((int *)this + 8);
          v33 += 40;
        }
        while (v34 < v40);
        if (v40)
        {
          uint64_t v41 = 0;
          for (unint64_t i = 0; i < v40; ++i)
          {
            uint64_t v43 = *((void *)this + 1071);
            double v44 = *(float *)(v43 + 4 * i) * 0.0174532925;
            __double2 v45 = __sincos_stret(*(float *)(v43 + 4 * (v40 + i)) * 0.0174532925);
            __double2 v46 = __sincos_stret(v44);
            float v47 = v45.__cosval * v46.__cosval;
            *((float *)this + 1056) = v47;
            float v48 = v45.__cosval * v46.__sinval;
            *((float *)this + 1057) = v48;
            float v49 = v45.__sinval;
            *((float *)this + 1058) = v49;
            vDSP_Length NearestPoint = ActiveIntensityAnalysis::findNearestPoint(*((const float **)this + 471), *((void *)this + 472), (uint64_t)this + 4696, v47, v48, v49);
            *(float *)(*((void *)this + 660) + 4 * i) = (float)NearestPoint;
            CLiteMatrix::MatrixMultiplyViaDotProducts((CLiteMatrix *)(*((void *)this + 816) + 40 * (unint64_t)(float)NearestPoint), (CLiteMatrix *)(*((void *)this + 824) + v41), (CLiteMatrix *)(*((void *)this + 827) + v41), v51);
            unint64_t v40 = *((int *)this + 8);
            v41 += 40;
          }
        }
      }
      CLiteMatrix::SetWithTranposeOfOther((ParametricProcessor *)((char *)this + 5456), (ParametricProcessor *)((char *)this + 5416));
      if (*((_DWORD *)this + 8))
      {
        uint64_t v52 = 0;
        unint64_t v53 = 0;
        do
        {
          float v54 = (void *)CLiteMatrix::Get((ParametricProcessor *)((char *)this + 5456), v53, 0);
          uint64_t v55 = (const void *)CLiteMatrix::Get((CLiteMatrix *)(*((void *)this + 827) + v52), 0, 0);
          memcpy(v54, v55, 4 * *((int *)this + 15));
          CLiteMatrix::Get((ParametricProcessor *)((char *)this + 5456), v53, 0);
          float v57 = v56;
          CLiteMatrix::Get((CLiteMatrix *)(*((void *)this + 827) + v52), 0, 0);
          memcpy(v57, v58, 4 * *((int *)this + 15));
          ++v53;
          v52 += 40;
        }
        while (v53 < *((int *)this + 8));
      }
      CLiteMatrix::SetWithTranposeOfOther((ParametricProcessor *)((char *)this + 5416), (ParametricProcessor *)((char *)this + 5456));
      ParametricProcessor::calculateFrameEnergy((vDSP_Length *)a4, (unint64_t *)this + 672);
      ParametricProcessor::calculateG((uint64_t)this, (vDSP_Length *)this + 677, (uint64_t)this + 5376, (uint64_t)this + 6240);
      vDSP_vsdiv(*((const float **)this + 782), 1, (const float *)this + 20, *((float **)this + 790), 1, *((int *)this + 8));
      HOA::createEncoder(*((HOA **)this + 53), *((const float **)this + 1071), (const float *)(*((void *)this + 1071) + 4 * *((int *)this + 8)), *((int *)this + 8), *((float **)this + 414), (uint64_t)(*((void *)this + 415) - *((void *)this + 414)) >> 2);
      vDSP_vsmul(*((const float **)this + 414), 1, &kBeamNormalizer, *((float **)this + 584), 1, (uint64_t)(*((void *)this + 415) - *((void *)this + 414)) >> 2);
      LODWORD(v59) = *((_DWORD *)this + 8);
      if (v59)
      {
        uint64_t v60 = 0;
        unint64_t v61 = 0;
        do
        {
          vDSP_dotpr((const float *)(*((void *)this + 584) + 4 * v61 * *((int *)this + 15)), 1, (const float *)(*((void *)this + 584) + 4 * v61 * *((int *)this + 15)), 1, *((float **)this + 573), (uint64_t)(*((void *)this + 554) - *((void *)this + 553)) >> 2);
          vDSP_vsdiv((const float *)(*((void *)this + 584) + 4 * v61 * *((int *)this + 15)), 1, *((const float **)this + 573), *((float **)this + 563), 1, (uint64_t)(*((void *)this + 554) - *((void *)this + 553)) >> 2);
          memcpy(*((void **)this + 795), *((const void **)this + 563), 4 * *((void *)this + 562));
          CLiteMatrix::MatrixMultiplyViaDotProducts((ParametricProcessor *)((char *)this + 6344), (CLiteMatrix *)(*((void *)this + 824) + v60), (CLiteMatrix *)(*((void *)this + 846) + v60), v62);
          float v63 = *(float *)(*((void *)this + 790) + 4 * v61);
          float v64 = (float *)CLiteMatrix::Get((CLiteMatrix *)(*((void *)this + 846) + v60), 0, 0);
          *float v64 = v63 * *v64;
          float v65 = *(float *)(*((void *)this + 790) + 4 * v61);
          CLiteMatrix::Get((CLiteMatrix *)(*((void *)this + 846) + v60), 0, 0);
          *uint64_t v66 = v65 * *v66;
          ++v61;
          unint64_t v59 = *((int *)this + 8);
          v60 += 40;
        }
        while (v61 < v59);
      }
      int v67 = *((_DWORD *)this + 33);
      switch(v67)
      {
        case 1:
          if (!v59) {
            goto LABEL_123;
          }
          uint64_t v201 = 0;
          unint64_t v202 = 0;
          do
          {
            memcpy(*((void **)this + 514), (const void *)(*((void *)this + 520)+ 4* (unint64_t)(float)(*(float *)(*((void *)this + 660) + 4 * v202)* (float)*((unint64_t *)this + 464))), *((void *)this + 456) - *((void *)this + 455));
            ParametricProcessor::interpolateHRTFs((uint64_t)this, (const float **)this + 514, v5);
            uint64_t v203 = (float *)(*((void *)this + 805)
                           + 4 * ((uint64_t)(*((void *)this + 806) - *((void *)this + 805)) >> 3));
            __B.realp = (float *)*((void *)this + 805);
            __B.imagp = v203;
            v307.realp = 0;
            v307.imagp = 0;
            uint64_t v204 = *((void *)this + 846) + v201;
            BOOL v205 = *(float **)(v204 + 16);
            uint64_t v206 = &v205[(uint64_t)(*(void *)(v204 + 24) - (void)v205) >> 3];
            v307.realp = v205;
            v307.imagp = v206;
            v306.realp = 0;
            v306.imagp = 0;
            uint64_t v207 = *((void *)this + 852) + v201;
            int v208 = *(float **)(v207 + 16);
            int v209 = &v208[(uint64_t)(*(void *)(v207 + 24) - (void)v208) >> 3];
            v306.realp = v208;
            v306.imagp = v209;
            vDSP_zvzsml(&__B, 1, &v307, &v306, 1, 2uLL);
            ++v202;
            unint64_t v59 = *((int *)this + 8);
            v201 += 40;
          }
          while (v202 < v59);
          break;
        case 2:
          if (!v59) {
            goto LABEL_123;
          }
          uint64_t v210 = 0;
          unint64_t v211 = 0;
          do
          {
            memcpy(*((void **)this + 514), (const void *)(*((void *)this + 520)+ 4* (unint64_t)(float)(*(float *)(*((void *)this + 660) + 4 * v211)* (float)*((unint64_t *)this + 464))), *((void *)this + 456) - *((void *)this + 455));
            ParametricProcessor::InterpolateXTCIRs((uint64_t)this, v5);
            float v212 = (float *)(*((void *)this + 805)
                           + 4 * ((uint64_t)(*((void *)this + 806) - *((void *)this + 805)) >> 3));
            __B.realp = (float *)*((void *)this + 805);
            __B.imagp = v212;
            v307.realp = 0;
            v307.imagp = 0;
            uint64_t v213 = *((void *)this + 846) + v210;
            float v214 = *(float **)(v213 + 16);
            float v215 = &v214[(uint64_t)(*(void *)(v213 + 24) - (void)v214) >> 3];
            v307.realp = v214;
            v307.imagp = v215;
            v306.realp = 0;
            v306.imagp = 0;
            uint64_t v216 = *((void *)this + 852) + v210;
            float v217 = *(float **)(v216 + 16);
            float v218 = &v217[(uint64_t)(*(void *)(v216 + 24) - (void)v217) >> 3];
            v306.realp = v217;
            v306.imagp = v218;
            vDSP_zvzsml(&__B, 1, &v307, &v306, 1, 2uLL);
            ++v211;
            unint64_t v59 = *((int *)this + 8);
            v210 += 40;
          }
          while (v211 < v59);
          break;
        case 3:
          if (!v59) {
            goto LABEL_123;
          }
          unint64_t v68 = 0;
          unint64_t v59 = (int)v59;
          do
          {
            uint64_t v69 = *((void *)this + 1071);
            double v70 = *(float *)(v69 + 4 * v68) * 0.0174532925;
            __double2 v71 = __sincos_stret(*(float *)(v69 + 4 * (v59 + v68)) * 0.0174532925);
            __double2 v72 = __sincos_stret(v70);
            float v73 = v71.__cosval * v72.__cosval;
            *((float *)this + 1056) = v73;
            float v74 = v71.__cosval * v72.__sinval;
            *((float *)this + 1057) = v74;
            float v75 = v71.__sinval;
            *((float *)this + 1058) = v75;
            VBAP::calculateVBAPGains(*((VBAP **)this + 56), (float32x2_t *)this + 528, *((float **)this + 517));
            if (*((int *)this + 10) >= 1)
            {
              int64_t v77 = 0;
              do
              {
                int v78 = *(_DWORD *)(*((void *)this + 517) + 4 * v77);
                *(_DWORD *)CLiteMatrix::Get((ParametricProcessor *)((char *)this + 4184), v77++, 0) = v78;
              }
              while (v77 < *((int *)this + 10));
            }
            CLiteMatrix::MatrixMultiply((vDSP_Length *)this + 523, (const CLiteMatrix *)(*((void *)this + 846) + 40 * v68), (const CLiteMatrix *)(*((void *)this + 852) + 40 * v68), v76);
            ++v68;
            unint64_t v59 = *((int *)this + 8);
          }
          while (v68 < v59);
          LODWORD(v59) = *((_DWORD *)this + 8);
          break;
      }
      if (v59)
      {
        uint64_t v219 = 0;
        uint64_t v220 = 0;
        unint64_t v221 = 0;
        do
        {
          float v222 = (void *)CLiteMatrix::Get((CLiteMatrix *)(*((void *)this + 855) + v219), 0, 0);
          memcpy(v222, (const void *)(*((void *)this + 414) + v220), 4 * *((int *)this + 15));
          __B.realp = 0;
          __B.imagp = 0;
          uint64_t v223 = *((void *)this + 855) + v219;
          float v224 = *(float **)(v223 + 16);
          uint64_t v225 = &v224[(uint64_t)(*(void *)(v223 + 24) - (void)v224) >> 3];
          __B.realp = v224;
          __B.imagp = v225;
          v307.realp = 0;
          v307.imagp = 0;
          uint64_t v226 = *((void *)this + 846) + v219;
          float v227 = *(float **)(v226 + 16);
          float v228 = &v227[(uint64_t)(*(void *)(v226 + 24) - (void)v227) >> 3];
          v307.realp = v227;
          v307.imagp = v228;
          v306.realp = 0;
          v306.imagp = 0;
          uint64_t v229 = *((void *)this + 863) + v219;
          float v230 = *(float **)(v229 + 16);
          float v231 = &v230[(uint64_t)(*(void *)(v229 + 24) - (void)v230) >> 3];
          v306.realp = v230;
          v306.imagp = v231;
          vDSP_zvzsml(&__B, 1, &v307, &v306, 1, *((int *)this + 15));
          ++v221;
          v220 += 16;
          v219 += 40;
        }
        while (v221 < *((int *)this + 8));
      }
LABEL_123:
      CLiteMatrix::SetWithTranposeOfOther((ParametricProcessor *)((char *)this + 5760), (ParametricProcessor *)((char *)this + 5720));
      if (*((_DWORD *)this + 8))
      {
        uint64_t v232 = 0;
        unint64_t v233 = 0;
        do
        {
          float v234 = (void *)CLiteMatrix::Get((ParametricProcessor *)((char *)this + 5760), v233, 0);
          float v235 = (const void *)CLiteMatrix::Get((CLiteMatrix *)(*((void *)this + 852) + v232), 0, 0);
          memcpy(v234, v235, 4 * *((int *)this + 10));
          CLiteMatrix::Get((ParametricProcessor *)((char *)this + 5760), v233, 0);
          float v237 = v236;
          CLiteMatrix::Get((CLiteMatrix *)(*((void *)this + 852) + v232), 0, 0);
          memcpy(v237, v238, 4 * *((int *)this + 10));
          ++v233;
          v232 += 40;
        }
        while (v233 < *((int *)this + 8));
      }
      CLiteMatrix::SetWithTranposeOfOther((ParametricProcessor *)((char *)this + 5720), (ParametricProcessor *)((char *)this + 5760));
      char v239 = (ParametricProcessor *)((char *)this + 5800);
      CLiteMatrix::SetWithTranposeOfOther((ParametricProcessor *)((char *)this + 5840), (ParametricProcessor *)((char *)this + 5800));
      if (*((_DWORD *)this + 8))
      {
        uint64_t v240 = 0;
        unint64_t v241 = 0;
        do
        {
          float v242 = (void *)CLiteMatrix::Get((ParametricProcessor *)((char *)this + 5840), v241, 0);
          uint64_t v243 = (const void *)CLiteMatrix::Get((CLiteMatrix *)(*((void *)this + 863) + v240), 0, 0);
          memcpy(v242, v243, 4 * *((int *)this + 15));
          CLiteMatrix::Get((ParametricProcessor *)((char *)this + 5840), v241, 0);
          size_t v245 = v244;
          CLiteMatrix::Get((CLiteMatrix *)(*((void *)this + 863) + v240), 0, 0);
          memcpy(v245, v246, 4 * *((int *)this + 15));
          ++v241;
          v240 += 40;
        }
        while (v241 < *((int *)this + 8));
      }
      CLiteMatrix::SetWithTranposeOfOther((ParametricProcessor *)((char *)this + 5800), (ParametricProcessor *)((char *)this + 5840));
      goto LABEL_138;
    case 2:
      ActiveIntensityAnalysis::calculateCartesianActiveIntensity(*((void *)this + 1070), a4);
      ActiveIntensityAnalysis::convertCartesianActiveIntensityToPolar(*((vDSP_Length **)this + 1070), (float **)this + 650);
      uint64_t v80 = *((void *)this + 651) - 4 * *((int *)this + 8);
      std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>((char *)this + 5224, *((char **)this + 650), v80, (v80 - *((void *)this + 650)) >> 2);
      unint64_t v81 = (float *)*((void *)this + 653);
      for (unsigned int j = (float *)*((void *)this + 654); v81 != j; ++v81)
        *unint64_t v81 = *v81 * 0.017453;
      __int16 v83 = (char *)(*((void *)this + 650) + 4 * *((int *)this + 8));
      std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>((char *)this + 5248, v83, *((void *)this + 651), (uint64_t)(*((void *)this + 651) - (void)v83) >> 2);
      int v84 = (float *)*((void *)this + 656);
      char v85 = (float *)*((void *)this + 657);
      if (v84 != v85)
      {
        unsigned int v86 = (float *)*((void *)this + 656);
        do
        {
          *unsigned int v86 = *v86 * 0.017453;
          ++v86;
        }
        while (v86 != v85);
      }
      float v87 = DirectionalStatistics::DirectionalMean(*((float **)this + 653), *((float **)this + 654));
      *((float *)this + 1318) = v87;
      float v88 = DirectionalStatistics::DirectionalMean(v84, v85);
      *((float *)this + 1318) = v87 * 57.296;
      *((float *)this + 1319) = v88 * 57.296;
      uint64_t v89 = *((void *)this + 1067);
      *(float *)uint64_t v89 = v87 * 57.296;
      *(_DWORD *)(v89 + 4) = *((_DWORD *)this + 1319);
      ParametricProcessor::calculateSHBeamCoefficients((uint64_t)this, (const float *)v89, (ParametricProcessor *)((char *)this + 6688));
      CLiteMatrix::SetWithTranposeOfOther((ParametricProcessor *)((char *)this + 6728), (ParametricProcessor *)((char *)this + 6688));
      CLiteMatrix::MatrixMultiply((vDSP_Length *)this + 841, a4, (ParametricProcessor *)((char *)this + 5656), v90);
      RotationUtilities::yawPitchRoll2RotationMatrixFOA((ParametricProcessor *)((char *)this + 6488), v91, *((float *)this + 1318) * 0.017453, *((float *)this + 1319) * -0.017453, -0.017453);
      CLiteMatrix::MatrixMultiply((vDSP_Length *)this + 811, a4, (ParametricProcessor *)((char *)this + 5416), v92);
      ParametricProcessor::calculateFrameEnergy((vDSP_Length *)a4, (unint64_t *)this + 672);
      ParametricProcessor::calculateG((uint64_t)this, (vDSP_Length *)this + 677, (uint64_t)this + 5376, (uint64_t)this + 6240);
      vDSP_vsdiv(*((const float **)this + 782), 1, (const float *)this + 20, *((float **)this + 790), 1, *((int *)this + 8));
      CLiteMatrix::ScaleCols((ParametricProcessor *)((char *)this + 5656), (const float **)this + 790);
      int v93 = *((_DWORD *)this + 33);
      if (v93 == 3)
      {
        double v247 = *((float *)this + 1318) * 0.0174532925;
        __double2 v248 = __sincos_stret(*((float *)this + 1319) * 0.0174532925);
        __double2 v249 = __sincos_stret(v247);
        float v250 = v248.__cosval * v249.__cosval;
        *((float *)this + 1056) = v250;
        float v251 = v248.__cosval * v249.__sinval;
        *((float *)this + 1057) = v251;
        float v252 = v248.__sinval;
        *((float *)this + 1058) = v252;
        VBAP::calculateVBAPGains(*((VBAP **)this + 56), (float32x2_t *)this + 528, *((float **)this + 517));
        uint64_t v5 = a5;
        if (*((int *)this + 10) >= 1)
        {
          int64_t v253 = 0;
          do
          {
            int v254 = *(_DWORD *)(*((void *)this + 517) + 4 * v253);
            *(_DWORD *)CLiteMatrix::Get((ParametricProcessor *)((char *)this + 4184), v253++, 0) = v254;
          }
          while (v253 < *((int *)this + 10));
        }
        uint64_t v255 = 4184;
      }
      else
      {
        uint64_t v5 = a5;
        if (v93 == 2)
        {
          double v256 = *((float *)this + 1318) * 0.0174532925;
          __double2 v257 = __sincos_stret(*((float *)this + 1319) * 0.0174532925);
          __double2 v258 = __sincos_stret(v256);
          float v259 = v257.__cosval * v258.__cosval;
          *((float *)this + 1056) = v259;
          float v260 = v257.__cosval * v258.__sinval;
          *((float *)this + 1057) = v260;
          float v261 = v257.__sinval;
          *((float *)this + 1058) = v261;
          vDSP_Length v262 = ActiveIntensityAnalysis::findNearestPoint(*((const float **)this + 471), *((void *)this + 472), (uint64_t)this + 4696, v259, v260, v261);
          memcpy(*((void **)this + 514), (const void *)(*((void *)this + 520) + 4 * *((void *)this + 464) * v262), *((void *)this + 456) - *((void *)this + 455));
          ParametricProcessor::InterpolateXTCIRs((uint64_t)this, a5);
        }
        else
        {
          if (v93 != 1) {
            goto LABEL_137;
          }
          double v94 = *((float *)this + 1318) * 0.0174532925;
          __double2 v95 = __sincos_stret(*((float *)this + 1319) * 0.0174532925);
          __double2 v96 = __sincos_stret(v94);
          float v97 = v95.__cosval * v96.__cosval;
          *((float *)this + 1056) = v97;
          float v98 = v95.__cosval * v96.__sinval;
          *((float *)this + 1057) = v98;
          float v99 = v95.__sinval;
          *((float *)this + 1058) = v99;
          vDSP_Length v100 = ActiveIntensityAnalysis::findNearestPoint(*((const float **)this + 471), *((void *)this + 472), (uint64_t)this + 4696, v97, v98, v99);
          memcpy(*((void **)this + 514), (const void *)(*((void *)this + 520) + 4 * *((void *)this + 464) * v100), *((void *)this + 456) - *((void *)this + 455));
          ParametricProcessor::interpolateHRTFs((uint64_t)this, (const float **)this + 514, a5);
        }
        uint64_t v255 = 6424;
      }
      CLiteMatrix::MatrixMultiply((vDSP_Length *)((char *)this + v255), (ParametricProcessor *)((char *)this + 5656), (ParametricProcessor *)((char *)this + 5720), v101);
LABEL_137:
      HOA::createEncoder(*((HOA **)this + 53), (const float *)this + 1318, (const float *)this + 1319, 1uLL, *((float **)this + 866), (uint64_t)(*((void *)this + 867) - *((void *)this + 866)) >> 2);
      size_t v263 = (void *)CLiteMatrix::Get((ParametricProcessor *)((char *)this + 6864), 0, 0);
      memcpy(v263, *((const void **)this + 866), 4 * *((int *)this + 15));
      char v239 = (ParametricProcessor *)((char *)this + 5800);
      CLiteMatrix::MatrixMultiply((vDSP_Length *)this + 858, (ParametricProcessor *)((char *)this + 5656), (ParametricProcessor *)((char *)this + 5800), v264);
LABEL_138:
      CLiteMatrix::SetWithOther((uint64_t)this + 5880, (uint64_t *)a4);
      uint64_t v265 = (void *)((char *)this + 5880);
      uint64_t v266 = v239;
      goto LABEL_156;
    case 3:
      if (*((void *)this + 401))
      {
        unint64_t v102 = 0;
        do
        {
          CLiteMatrix::MatrixMultiply((vDSP_Length *)(*((void *)this + 418) + 40 * v102), a4, (ParametricProcessor *)((char *)this + 5416), a4);
          if (*((_DWORD *)this + 15))
          {
            unint64_t v104 = 0;
            do
            {
              int v105 = *(_DWORD *)CLiteMatrix::Get((ParametricProcessor *)((char *)this + 3600), v102, v104);
              *(_DWORD *)CLiteMatrix::Get((ParametricProcessor *)((char *)this + 6344), 0, v104) = v105;
              CLiteMatrix::Get((ParametricProcessor *)((char *)this + 3600), v102, v104);
              int v107 = *v106;
              CLiteMatrix::Get((ParametricProcessor *)((char *)this + 6344), 0, v104);
              *float v108 = v107;
              ++v104;
            }
            while (v104 < *((int *)this + 15));
          }
          CLiteMatrix::MatrixMultiply((vDSP_Length *)this + 793, a4, (ParametricProcessor *)((char *)this + 5656), v103);
          ParametricProcessor::calculateFrameEnergy((vDSP_Length *)this + 707, (unint64_t *)this + 672);
          if (*((_DWORD *)this + 8))
          {
            unint64_t v109 = 0;
            do
              *(float *)(*((void *)this + 621) + 4 * v102) = *(float *)LiteMatrix<float>::operator()((unint64_t *)this + 672, 0, v109++)+ *(float *)(*((void *)this + 621) + 4 * v102);
            while (v109 < *((int *)this + 8));
          }
          ++v102;
        }
        while (v102 < *((void *)this + 401));
      }
      __int16 v110 = (float *)*((void *)this + 621);
      int v111 = (float *)*((void *)this + 622);
      uint64_t v112 = v110 + 1;
      BOOL v113 = v110 == v111 || v112 == v111;
      float v114 = (float *)*((void *)this + 621);
      if (!v113)
      {
        float v115 = *v110;
        float v114 = (float *)*((void *)this + 621);
        float v116 = v110 + 1;
        do
        {
          float v117 = *v116++;
          float v118 = v117;
          if (v115 < v117)
          {
            float v115 = v118;
            float v114 = v112;
          }
          uint64_t v112 = v116;
        }
        while (v116 != v111);
      }
      unint64_t v119 = v114 - v110;
      uint64_t v5 = a5;
      if (*((_DWORD *)this + 15))
      {
        unint64_t v120 = 0;
        do
        {
          int v121 = *(_DWORD *)CLiteMatrix::Get((ParametricProcessor *)((char *)this + 3600), v119, v120);
          *(_DWORD *)CLiteMatrix::Get((ParametricProcessor *)((char *)this + 6344), 0, v120) = v121;
          CLiteMatrix::Get((ParametricProcessor *)((char *)this + 3600), v119, v120);
          int v123 = *v122;
          CLiteMatrix::Get((ParametricProcessor *)((char *)this + 6344), 0, v120);
          _DWORD *v124 = v123;
          ++v120;
        }
        while (v120 < *((int *)this + 15));
      }
      float64x2_t v125 = (ParametricProcessor *)((char *)this + 5656);
      CLiteMatrix::MatrixMultiply((vDSP_Length *)this + 793, a4, (ParametricProcessor *)((char *)this + 5656), a4);
      CLiteMatrix::MatrixMultiply((vDSP_Length *)(*((void *)this + 418) + 40 * v119), a4, (ParametricProcessor *)((char *)this + 5416), v126);
      ParametricProcessor::calculateFrameEnergy((vDSP_Length *)a4, (unint64_t *)this + 672);
      ParametricProcessor::calculateG((uint64_t)this, (vDSP_Length *)this + 677, (uint64_t)this + 5376, (uint64_t)this + 6240);
      if (*((int *)this + 8) >= 1)
      {
        int64_t v127 = 0;
        do
        {
          float v128 = *(float *)LiteMatrix<float>::operator()((unint64_t *)this + 780, 0, v127)
               / ((double)(*((_DWORD *)this + 14) + 1)
                * (double)(*((_DWORD *)this + 14) + 1));
          *(float *)(*((void *)this + 790) + 4 * v127++) = v128;
        }
        while (v127 < *((int *)this + 8));
      }
      CLiteMatrix::ScaleCols((ParametricProcessor *)((char *)this + 5656), (const float **)this + 790);
      int v129 = *((_DWORD *)this + 33);
      int v6 = a2;
      switch(v129)
      {
        case 1:
          double v267 = *(float *)(*((void *)this + 389) + 4 * v119) * 0.0174532925;
          __double2 v268 = __sincos_stret(*(float *)(*((void *)this + 392) + 4 * v119) * 0.0174532925);
          __double2 v269 = __sincos_stret(v267);
          float v270 = v268.__cosval * v269.__cosval;
          *((float *)this + 1056) = v270;
          float v271 = v268.__cosval * v269.__sinval;
          *((float *)this + 1057) = v271;
          float v272 = v268.__sinval;
          *((float *)this + 1058) = v272;
          VBAP::calculateVBAPGains(*((VBAP **)this + 55), (float32x2_t *)this + 528, *((float **)this + 514));
          ParametricProcessor::interpolateHRTFs((uint64_t)this, (const float **)this + 514, a5);
          break;
        case 2:
          double v273 = *(float *)(*((void *)this + 389) + 4 * v119) * 0.0174532925;
          __double2 v274 = __sincos_stret(*(float *)(*((void *)this + 392) + 4 * v119) * 0.0174532925);
          __double2 v275 = __sincos_stret(v273);
          float v276 = v274.__cosval * v275.__cosval;
          *((float *)this + 1056) = v276;
          float v277 = v274.__cosval * v275.__sinval;
          *((float *)this + 1057) = v277;
          float v278 = v274.__sinval;
          *((float *)this + 1058) = v278;
          VBAP::calculateVBAPGains(*((VBAP **)this + 55), (float32x2_t *)this + 528, *((float **)this + 514));
          ParametricProcessor::InterpolateXTCIRs((uint64_t)this, a5);
          break;
        case 3:
          double v130 = *((float *)this + 1318) * 0.0174532925;
          __double2 v131 = __sincos_stret(*((float *)this + 1319) * 0.0174532925);
          __double2 v132 = __sincos_stret(v130);
          float v133 = v131.__cosval * v132.__cosval;
          *((float *)this + 1056) = v133;
          float v134 = v131.__cosval * v132.__sinval;
          *((float *)this + 1057) = v134;
          float v135 = v131.__sinval;
          *((float *)this + 1058) = v135;
          VBAP::calculateVBAPGains(*((VBAP **)this + 56), (float32x2_t *)this + 528, *((float **)this + 517));
          if (*((int *)this + 10) >= 1)
          {
            int64_t v137 = 0;
            do
            {
              int v138 = *(_DWORD *)(*((void *)this + 517) + 4 * v137);
              *(_DWORD *)CLiteMatrix::Get((ParametricProcessor *)((char *)this + 4184), v137++, 0) = v138;
            }
            while (v137 < *((int *)this + 10));
          }
          uint64_t v139 = 4184;
LABEL_142:
          CLiteMatrix::MatrixMultiply((vDSP_Length *)((char *)this + v139), (ParametricProcessor *)((char *)this + 5656), (ParametricProcessor *)((char *)this + 5720), v136);
LABEL_143:
          if (*((_DWORD *)this + 15))
          {
            unint64_t v279 = 0;
            do
            {
              int v280 = *(_DWORD *)CLiteMatrix::Get((ParametricProcessor *)((char *)this + 3440), v119, v279);
              *(_DWORD *)CLiteMatrix::Get((ParametricProcessor *)((char *)this + 6384), v279++, 0) = v280;
            }
            while (v279 < *((int *)this + 15));
          }
          goto LABEL_154;
        default:
          goto LABEL_143;
      }
      uint64_t v139 = 6424;
      goto LABEL_142;
    case 4:
      if (*((_DWORD *)this + 10))
      {
        unint64_t v140 = 0;
        do
        {
          CLiteMatrix::MatrixMultiply((vDSP_Length *)(*((void *)this + 421) + 40 * v140), a4, (ParametricProcessor *)((char *)this + 5416), a4);
          ParametricProcessor::calculateFrameEnergy((vDSP_Length *)a4, (unint64_t *)this + 672);
          ParametricProcessor::calculateG((uint64_t)this, (vDSP_Length *)this + 677, (uint64_t)this + 5376, (uint64_t)this + 6240);
          if (*((int *)this + 8) >= 1)
          {
            int64_t v141 = 0;
            do
            {
              float v142 = *(float *)CLiteMatrix::Get((ParametricProcessor *)((char *)this + 7680), v140, v141);
              float v143 = v142
                   * (float)(*(float *)LiteMatrix<float>::operator()((unint64_t *)this + 780, 0, v141)
                           / (float)*((int *)this + 15));
              *(float *)CLiteMatrix::Get((ParametricProcessor *)((char *)this + 5720), v140, v141) = v143;
              CLiteMatrix::Get((ParametricProcessor *)((char *)this + 7680), v140, v141);
              float v145 = *v144;
              float v146 = v145
                   * (float)(*(float *)LiteMatrix<float>::operator()((unint64_t *)this + 780, 0, v141)
                           / (float)*((int *)this + 15));
              CLiteMatrix::Get((ParametricProcessor *)((char *)this + 5720), v140, v141);
              *int v147 = v146;
              ++v141;
            }
            while (v141 < *((int *)this + 8));
          }
          ++v140;
        }
        while (v140 < *((int *)this + 10));
      }
      vDSP_vclr(*((float **)this + 737), 1, (uint64_t)(*((void *)this + 738) - *((void *)this + 737)) >> 2);
      uint64_t v5 = a5;
      int v6 = a2;
      goto LABEL_157;
    case 5:
      uint64_t v148 = ParametricProcessor::calculatePseudoSpectrumBasedDOAIndex((uint64_t)this, a3, (vDSP_Length *)this + 435, (vDSP_Length *)this + 606, (uint64_t)this + 4992);
      uint64_t v149 = *((void *)this + 408);
      float v150 = *(float *)(v149 + 4 * v148);
      uint64_t v151 = *((void *)this + 417);
      float v152 = *(float *)(v149 + 4 * (v151 + v148));
      float v153 = *(float *)(v149 + 4 * (v148 + 2 * v151));
      vDSP_Length v154 = *((int *)this + 28);
      uint64_t v304 = 0;
      uint64_t v305 = 0;
      float __C = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__C, *((const void **)this + 536), *((void *)this + 537), (uint64_t)(*((void *)this + 537) - *((void *)this + 536)) >> 2);
      BOOL v155 = (const float *)*((void *)this + 395);
      *(float *)&__B.realp = v150 * -2.0;
      *(float *)&v307.realp = v152 * -2.0;
      *(float *)&v306.realp = v153 * -2.0;
      vDSP_vsmul(v155, 1, (const float *)&__B, __C, 1, v154);
      uint64_t v156 = &v155[v154];
      vDSP_vsma(v156, 1, (const float *)&v307, __C, 1, __C, 1, v154);
      vDSP_vsma(&v156[v154], 1, (const float *)&v306, __C, 1, __C, 1, v154);
      vDSP_vsorti(__C, *((vDSP_Length **)this + 539), 0, v154, 1);
      if (__C)
      {
        uint64_t v304 = __C;
        operator delete(__C);
      }
      int v157 = *((_DWORD *)this + 28);
      if (v157)
      {
        unint64_t v158 = 0;
        LODWORD(v159) = *((_DWORD *)this + 15);
        do
        {
          if (v159)
          {
            unint64_t v160 = 0;
            do
            {
              int v161 = *(_DWORD *)CLiteMatrix::Get((ParametricProcessor *)((char *)this + 3440), *(void *)(*((void *)this + 539) + 8 * v158), v160);
              *(_DWORD *)CLiteMatrix::Get((ParametricProcessor *)((char *)this + 3520), v158, v160++) = v161;
              unint64_t v159 = *((int *)this + 15);
            }
            while (v160 < v159);
            int v157 = *((_DWORD *)this + 28);
          }
          ++v158;
        }
        while (v158 < v157);
      }
      uint64_t v162 = ParametricProcessor::calculatePseudoSpectrumBasedDOAIndex((uint64_t)this, a3, (vDSP_Length *)this + 440, (vDSP_Length *)this + 611, (uint64_t)this + 5016);
      CLiteMatrix::MatrixMultiply((vDSP_Length *)(*((void *)this + 418) + 40 * *(void *)(*((void *)this + 539) + 8 * v162)), a4, (ParametricProcessor *)((char *)this + 5416), v163);
      ParametricProcessor::calculateFrameEnergy((vDSP_Length *)a4, (unint64_t *)this + 672);
      ParametricProcessor::calculateG((uint64_t)this, (vDSP_Length *)this + 677, (uint64_t)this + 5376, (uint64_t)this + 6240);
      if (*((_DWORD *)this + 15))
      {
        unint64_t v165 = 0;
        do
        {
          int v166 = *(_DWORD *)CLiteMatrix::Get((ParametricProcessor *)((char *)this + 3600), *(void *)(*((void *)this + 539) + 8 * v162), v165);
          *(_DWORD *)CLiteMatrix::Get((ParametricProcessor *)((char *)this + 6344), 0, v165) = v166;
          CLiteMatrix::Get((ParametricProcessor *)((char *)this + 3600), *(void *)(*((void *)this + 539) + 8 * v162), v165);
          int v168 = *v167;
          CLiteMatrix::Get((ParametricProcessor *)((char *)this + 6344), 0, v165);
          _DWORD *v169 = v168;
          ++v165;
        }
        while (v165 < *((int *)this + 15));
      }
      float64x2_t v125 = (ParametricProcessor *)((char *)this + 5656);
      CLiteMatrix::MatrixMultiply((vDSP_Length *)this + 793, a4, (ParametricProcessor *)((char *)this + 5656), v164);
      if (*((int *)this + 8) >= 1)
      {
        int64_t v170 = 0;
        do
        {
          float v171 = *(float *)LiteMatrix<float>::operator()((unint64_t *)this + 780, 0, v170)
               / ((double)(*((_DWORD *)this + 14) + 1)
                * (double)(*((_DWORD *)this + 14) + 1));
          *(float *)(*((void *)this + 790) + 4 * v170++) = v171;
        }
        while (v170 < *((int *)this + 8));
      }
      CLiteMatrix::ScaleCols((ParametricProcessor *)((char *)this + 5656), (const float **)this + 790);
      int v172 = *((_DWORD *)this + 33);
      if (v172 == 1)
      {
        uint64_t v281 = *(void *)(*((void *)this + 539) + 8 * v162);
        double v282 = *(float *)(*((void *)this + 389) + 4 * v281) * 0.0174532925;
        __double2 v283 = __sincos_stret(*(float *)(*((void *)this + 392) + 4 * v281) * 0.0174532925);
        __double2 v284 = __sincos_stret(v282);
        float v285 = v283.__cosval * v284.__cosval;
        *((float *)this + 1056) = v285;
        float v286 = v283.__cosval * v284.__sinval;
        *((float *)this + 1057) = v286;
        float v287 = v283.__sinval;
        *((float *)this + 1058) = v287;
        VBAP::calculateVBAPGains(*((VBAP **)this + 55), (float32x2_t *)this + 528, *((float **)this + 514));
        ParametricProcessor::interpolateHRTFs((uint64_t)this, (const float **)this + 514, v5);
LABEL_149:
        uint64_t v183 = 6424;
        goto LABEL_150;
      }
      if (v172 == 2)
      {
        double v288 = *(float *)(*((void *)this + 389) + 4 * v162) * 0.0174532925;
        __double2 v289 = __sincos_stret(*(float *)(*((void *)this + 392) + 4 * v162) * 0.0174532925);
        __double2 v290 = __sincos_stret(v288);
        float v291 = v289.__cosval * v290.__cosval;
        *((float *)this + 1056) = v291;
        float v292 = v289.__cosval * v290.__sinval;
        *((float *)this + 1057) = v292;
        float v293 = v289.__sinval;
        *((float *)this + 1058) = v293;
        VBAP::calculateVBAPGains(*((VBAP **)this + 55), (float32x2_t *)this + 528, *((float **)this + 514));
        ParametricProcessor::InterpolateXTCIRs((uint64_t)this, v5);
        goto LABEL_149;
      }
      if (v172 != 3) {
        goto LABEL_151;
      }
      uint64_t v173 = *(void *)(*((void *)this + 539) + 8 * v162);
      double v174 = *(float *)(*((void *)this + 389) + 4 * v173) * 0.0174532925;
      __double2 v175 = __sincos_stret(*(float *)(*((void *)this + 392) + 4 * v173) * 0.0174532925);
      __double2 v176 = __sincos_stret(v174);
      float v177 = v175.__cosval * v176.__cosval;
      *((float *)this + 1056) = v177;
      float v178 = v175.__cosval * v176.__sinval;
      *((float *)this + 1057) = v178;
      float v179 = v175.__sinval;
      *((float *)this + 1058) = v179;
      VBAP::calculateVBAPGains(*((VBAP **)this + 56), (float32x2_t *)this + 528, *((float **)this + 517));
      if (*((int *)this + 10) >= 1)
      {
        int64_t v181 = 0;
        do
        {
          int v182 = *(_DWORD *)(*((void *)this + 517) + 4 * v181);
          *(_DWORD *)CLiteMatrix::Get((ParametricProcessor *)((char *)this + 4184), v181++, 0) = v182;
        }
        while (v181 < *((int *)this + 10));
      }
      uint64_t v183 = 4184;
LABEL_150:
      CLiteMatrix::MatrixMultiply((vDSP_Length *)((char *)this + v183), (ParametricProcessor *)((char *)this + 5656), (ParametricProcessor *)((char *)this + 5720), v180);
LABEL_151:
      if (*((_DWORD *)this + 15))
      {
        unint64_t v294 = 0;
        do
        {
          int v295 = *(_DWORD *)CLiteMatrix::Get((ParametricProcessor *)((char *)this + 3440), *(void *)(*((void *)this + 539) + 8 * v162), v294);
          *(_DWORD *)CLiteMatrix::Get((ParametricProcessor *)((char *)this + 6384), v294++, 0) = v295;
        }
        while (v294 < *((int *)this + 15));
      }
LABEL_154:
      float v198 = (vDSP_Length *)((char *)this + 6384);
      float v199 = (ParametricProcessor *)((char *)this + 5800);
      BOOL v200 = v125;
LABEL_155:
      CLiteMatrix::MatrixMultiply(v198, v200, v199, v21);
      CLiteMatrix::SetWithOther((uint64_t)this + 5880, (uint64_t *)a4);
      uint64_t v265 = (void *)((char *)this + 5880);
      uint64_t v266 = v199;
LABEL_156:
      LiteMatrixBase<float>::operator-=(v265, v266);
      LODWORD(__B.realp) = -1082130432;
      vDSP_vsmul(*((const float **)this + 737), 1, (const float *)&__B, *((float **)this + 737), 1, (uint64_t)(*((void *)this + 738) - *((void *)this + 737)) >> 2);
LABEL_157:
      int v296 = *((_DWORD *)this + 33);
      if (v296 == 3)
      {
        v297 = (vDSP_Length *)*((void *)this + 493);
      }
      else
      {
        if (v296 != 2 && v296 != 1) {
          goto LABEL_163;
        }
        v297 = (vDSP_Length *)(*((void *)this + 493) + 40 * v5);
      }
      CLiteMatrix::MatrixMultiply(v297, (ParametricProcessor *)((char *)this + 5880), (ParametricProcessor *)((char *)this + 5960), a4);
LABEL_163:
      LODWORD(__B.realp) = *((_DWORD *)this + 31);
      vDSP_vsmul(*((const float **)this + 717), 1, (const float *)&__B, *((float **)this + 717), 1, (uint64_t)(*((void *)this + 718) - *((void *)this + 717)) >> 2);
      *(float *)&__B.realp = 1.0 - *((float *)this + 31);
      vDSP_vsmul(*((const float **)this + 747), 1, (const float *)&__B, *((float **)this + 747), 1, (uint64_t)(*((void *)this + 748) - *((void *)this + 747)) >> 2);
      CLiteMatrix::SetWithOther((uint64_t)this + 6000, (uint64_t *)this + 715);
      CLiteMatrix::operator+=((void *)this + 750, (void *)this + 745);
      CLiteMatrix::SetWithConjugateTranposeOfOther((ParametricProcessor *)((char *)this + 6040), (ParametricProcessor *)((char *)this + 6000));
      if (*((unsigned char *)this + 188)) {
        CLiteMatrix::MatrixMultiply((vDSP_Length *)this + 750, (ParametricProcessor *)((char *)this + 6040), v6, v298);
      }
      return;
    default:
      goto LABEL_157;
  }
}